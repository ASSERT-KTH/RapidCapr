diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..c789c3a3 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,35 +347,71 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                  int hourOfDay, int minuteOfHour,
-                                  int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
+                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)
+        throws IllegalArgumentException {
+    Chronology base;
+    if ((base = getBase()) != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
+    if (isDateInJulianEra(year, monthOfYear, dayOfMonth)) {
+        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } else if (isDateInGregorianEra(year, monthOfYear, dayOfMonth)) {
+        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    } else {
+        throw new IllegalArgumentException("Specified date does not exist");
+    }
+}
+
+/**
+ * Determines if the specified date is in the Julian calendar era.
+ *
+ * @param year the year
+ * @param monthOfYear the month of the year
+ * @param dayOfMonth the day of the month
+ * @return true if the date is in the Julian calendar era
+ */
+private boolean isDateInJulianEra(int year, int monthOfYear, int dayOfMonth) {
+    if (year < 1582) {
+        return true; // Date before Gregorian reform is in Julian era.
+    } else if (year > 1582) {
+        return false; // Date after Gregorian reform is in Gregorian era.
+    } else {
+        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.
+        if (monthOfYear < 10) {
+            return true; // Date before cutover is in Julian era.
+        } else if (monthOfYear > 10) {
+            return false; // Date after cutover is in Gregorian era.
+        } else {
+            return dayOfMonth <= 4; // Date on or before cutover is in Julian era.
         }
+    }
+}
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
+/**
+ * Determines if the specified date is in the Gregorian calendar era.
+ *
+ * @param year the year
+ * @param monthOfYear the month of the year
+ * @param dayOfMonth the day of the month
+ * @return true if the date is in the Gregorian calendar era
+ */
+private boolean isDateInGregorianEra(int year, int monthOfYear, int dayOfMonth) {
+    if (year < 1582) {
+        return false; // Date before Gregorian reform is in Julian era.
+    } else if (year > 1582) {
+        return true; // Date after Gregorian reform is in Gregorian era.
+    } else {
+        // Date is in the year of the Gregorian reform. Check if before or after the cutover date.
+        if (monthOfYear < 10) {
+            return false; // Date before cutover is in Julian era.
+        } else if (monthOfYear > 10) {
+            return true; // Date after cutover is in Gregorian era.
+        } else {
+            return dayOfMonth >= 15; // Date on or after cutover is in Gregorian era.
         }
-        return instant;
     }
+}
 
     /**
      * Gets the cutover instant between Gregorian and Julian chronologies.