diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 4b7dbf6bb..7853848d4 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -917,10 +917,31 @@ public class CMAESOptimizer
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
-        public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+public double[] repairAndDecode(final double[] x) {
+    if (x == null || x.length == 0) {
+        return new double[0]; // handle null or empty input array
+    }
+    
+    double[] repaired = repair(x); // repair any bugs in the input array
+    if (repaired == null || repaired.length != x.length) {
+        return new double[0]; // handle invalid output from repair method
+    }
+    
+    double[] decoded = decode(repaired); // decode the repaired array
+    if (decoded == null || decoded.length != x.length) {
+        return new double[0]; // handle invalid output from decode method
+    }
+    
+    for (int i = 0; i < decoded.length; i++) {
+        if (Double.isNaN(decoded[i])) {
+            decoded[i] = 0.0;
+        } else if (decoded[i] < 0.0 || decoded[i] > 1.0) {
+            decoded[i] = Math.min(Math.max(decoded[i], 0.0), 1.0); // clip the decoded value to [0, 1] range
         }
+    }
+    
+    return decoded;
+}
 
         /**
          * @param x Normalized objective variables.