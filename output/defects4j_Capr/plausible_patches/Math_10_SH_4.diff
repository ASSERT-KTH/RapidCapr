diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index bf6dd65d5..aff7ad52e 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1416,6 +1416,48 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+if (Double.isNaN(result[resultOffset])) {
+    // special cases for NaNs
+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+    for (int i = 1; i < result.length; i++) {
+        result[resultOffset + i] = result[resultOffset];
+    }
+} else if (Double.isInfinite(result[resultOffset])) {
+    // special cases for infinities
+    double v;
+    if (x[xOffset] == 0) {
+        // special cases for y = 0
+        v = y[yOffset] == 0 ? 0.0 : (FastMath.copySign(FastMath.PI / 2, y[yOffset]));
+    } else if (Double.isInfinite(y[yOffset])) {
+        // special cases for x = +/-inf
+        v = ((y[yOffset] > 0) ^ (x[xOffset] > 0)) ? FastMath.PI / 2 : -FastMath.PI / 2;
+    } else if ((Double.doubleToLongBits(1.0d + y[yOffset] / x[xOffset]) & 0xFFFFFFFF00000000L) == 0) {
+        // special cases for y / x = +/-0
+        v = (x[xOffset] >= 0.0d) ? 0.0d : FastMath.copySign(FastMath.PI, y[yOffset]);
+    } else if ((x[xOffset] > 0.0d) && (y[yOffset] > 0.0d)) {
+        // 0 < x < +inf, 0 < y < +inf: 0 < atan2() < pi/2
+        double d = y[yOffset] / x[xOffset];
+        v = FastMath.atan(d);
+    } else if ((x[xOffset] > 0.0d) && (y[yOffset] < 0.0d)) {
+        // 0 < x < +inf, -inf < y < 0: -pi/2 < atan2() < 0
+        double d = y[yOffset] / x[xOffset];
+        v = FastMath.atan(d);
+    } else if ((x[xOffset] < 0.0d) && (y[yOffset] > 0.0d)) {
+        // -inf < x < 0, 0 < y < +inf: +pi > atan2() > pi/2
+        double d = y[yOffset] / x[xOffset];
+        v = FastMath.atan(d) + FastMath.PI;
+    } else if ((x[xOffset] < 0.0d) && (y[yOffset] < 0.0d)) {
+        // -inf < x < 0, -inf < y < 0: -pi < atan2() < -pi/2
+        double d = y[yOffset] / x[xOffset];
+        v = FastMath.atan(d) - FastMath.PI;
+    } else {
+        v = 0.0d;
+    }
+
+    for (int i = 0; i < result.length; i++) {
+        result[resultOffset + i] = v;
+    }
+}
 
     }
 