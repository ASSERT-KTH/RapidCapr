diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..f39bcd86 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,29 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n == null) {
+        return false;
+    }
+    if (n.getType() == Token.LABEL) {
+        Node child = n.getFirstChild().getNext(); // skip the label name
+        if (child.getType() == Token.BLOCK && child.getFirstChild() != null) {
+            child = child.getFirstChild();
+        }
+        return isOneExactlyFunctionOrDo(child);
+    } else if (n.getType() == Token.BLOCK) {
+        Node child = n.getFirstChild();
+        if (child == null) {
+            return true; // empty block is a valid 'DO' statement
+        }
+        if (child != n.getLastChild()) {
+            return false; // more than one child in block, so not 'DO' or 'FUNCTION'
+        }
+        return isOneExactlyFunctionOrDo(child);
+    } else {
+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike