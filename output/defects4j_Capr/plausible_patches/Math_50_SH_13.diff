diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..f3897eece 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,10 +184,46 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+if (f0 * fx < 0) {
+    x1 = x;
+    f1 = fx;
+} else if (f0 * f1 > 0) {
+    x0 = x;
+    f0 = fx;
+} else {
+    double dx = FastMath.max(rtol * FastMath.abs(x1), atol);
+    double oldf1 = f1;
+    double x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0);
+    double f2 = computeObjectiveValue(x2);
+    double df = f2 - f1;
+    double ddf = df - (f1 - f0);
+    double dx2 = (2 * ftol * FastMath.abs(x1)) / FastMath.abs(ddf);
+    if (FastMath.abs(dx2) < FastMath.min(dx, FastMath.abs(x1 - x0) / 100.0)) {
+        dx = FastMath.abs(dx2);
+        // If we want to adjust the bracketing interval to stay at least as strict as
+        // the current accuracy, we need to respect the allowed solution side.
+        if (f1 > f0) {
+            x0 = x1 - dx;
+        } else {
+            x1 = x1 + dx;
+        }
+    } else {
+        if (df > 0) {
+            if (inverted) {
+                x0 = x1;
+            } else {
+                x1 = x0;
+            }
+            f1 = f0;
+        }
+        x0 = x1;
+        f0 = f1;
+        x1 = x2;
+        f1 = f2;
+    }
+    // Update inverted status.
+    inverted = x1 < x0;
+}
                     break;
                 default:
                     // Should never happen.