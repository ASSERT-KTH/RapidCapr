diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..8e5088ea 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,34 +347,29 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                  int hourOfDay, int minuteOfHour,
-                                  int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        }
-
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
-            }
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour,
+            int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {
+        Chronology base = getBase();
+        if (base != null) {
+            return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute,
+                    millisOfSecond);
+        }
+        // Check if the input date is invalid due to missing dates during the switch from Julian to Gregorian calendar
+        if (year == 1582 && monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14) {
+            throw new IllegalArgumentException("Invalid input date");
+        }
+        // Convert input date to epoch milliseconds according to the appropriate calendar
+        long epochMillis;
+        if (year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 5)) {
+            // Calculate epoch milliseconds using Julian calendar
+            epochMillis = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,
+                    secondOfMinute, millisOfSecond);
+        } else {
+            // Calculate epoch milliseconds using Gregorian calendar
+            epochMillis = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour,
+                    secondOfMinute, millisOfSecond);
         }
-        return instant;
+        return epochMillis;
     }
 
     /**