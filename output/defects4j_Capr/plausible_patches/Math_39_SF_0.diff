diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 13ced27d7..962eb08bb 100644
--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -188,30 +188,30 @@ public abstract class EmbeddedRungeKuttaIntegrator
 
   /** {@inheritDoc} */
   @Override
-  public void integrate(final ExpandableStatefulODE equations, final double t)
-      throws MathIllegalStateException, MathIllegalArgumentException {
+public void integrate(final ExpandableStatefulODE equations, final double t)
+        throws MathIllegalStateException, MathIllegalArgumentException {
 
     sanityChecks(equations, t);
     setEquations(equations);
     final boolean forward = t > equations.getTime();
 
     // create some internal working arrays
-    final double[] y0  = equations.getCompleteState();
+    final double[] y0 = equations.getCompleteState();
     final double[] y = y0.clone();
     final int stages = c.length + 1;
     final double[][] yDotK = new double[stages][y.length];
-    final double[] yTmp    = y0.clone();
+    final double[] yTmp = y0.clone();
     final double[] yDotTmp = new double[y.length];
 
     // set up an interpolator sharing the integrator arrays
     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
     interpolator.reinitialize(this, yTmp, yDotK, forward,
-                              equations.getPrimaryMapper(), equations.getSecondaryMappers());
+            equations.getPrimaryMapper(), equations.getSecondaryMappers());
     interpolator.storeTime(equations.getTime());
 
     // set up integration control objects
-    stepStart         = equations.getTime();
-    double  hNew      = 0;
+    stepStart = equations.getTime();
+    double hNew = 0;
     boolean firstTime = true;
     initIntegration(equations.getTime(), y0, t);
 
@@ -219,103 +219,109 @@ public abstract class EmbeddedRungeKuttaIntegrator
     isLastStep = false;
     do {
 
-      interpolator.shift();
+        interpolator.shift();
 
-      // iterate over step size, ensuring local normalized error is smaller than 1
-      double error = 10;
-      while (error >= 1.0) {
+        // iterate over step size, ensuring local normalized error is smaller than 1
+        double error = 10;
+        while (error >= 1.0) {
 
-        if (firstTime || !fsal) {
-          // first stage
-          computeDerivatives(stepStart, y, yDotK[0]);
-        }
+            if (firstTime || !fsal) {
+                // first stage
+                computeDerivatives(stepStart, y, yDotK[0]);
+            }
 
-        if (firstTime) {
-          final double[] scale = new double[mainSetDimension];
-          if (vecAbsoluteTolerance == null) {
-              for (int i = 0; i < scale.length; ++i) {
-                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
-              }
-          } else {
-              for (int i = 0; i < scale.length; ++i) {
-                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
-              }
-          }
-          hNew = initializeStep(forward, getOrder(), scale,
-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);
-          firstTime = false;
-        }
+            if (firstTime) {
+                final double[] scale = new double[mainSetDimension];
+                if (vecAbsoluteTolerance == null) {
+                    for (int i = 0; i < scale.length; ++i) {
+                        scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
+                    }
+                } else {
+                    for (int i = 0; i < scale.length; ++i) {
+                        scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);
+                    }
+                }
+                hNew = initializeStep(forward, getOrder(), scale,
+                        stepStart, y, yDotK[0], yTmp, yDotK[1]);
+                firstTime = false;
+            }
 
-        stepSize = hNew;
+            // Limit step size to remaining integration interval
+            final double remainingTime = forward ? t - stepStart : stepStart - t;
+            if (hNew > remainingTime) {
+                hNew = remainingTime;
+            }
 
-        // next stages
-        for (int k = 1; k < stages; ++k) {
+            stepSize = hNew;
 
-          for (int j = 0; j < y0.length; ++j) {
-            double sum = a[k-1][0] * yDotK[0][j];
-            for (int l = 1; l < k; ++l) {
-              sum += a[k-1][l] * yDotK[l][j];
-            }
-            yTmp[j] = y[j] + stepSize * sum;
-          }
+            // next stages
+            for (int k = 1; k < stages; ++k) {
 
-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
+                for (int j = 0; j < y0.length; ++j) {
+                    double sum = a[k - 1][0] * yDotK[0][j];
+                    for (int l = 1; l < k; ++l) {
+                        sum += a[k - 1][l] * yDotK[l][j];
+                    }
+                    yTmp[j] = y[j] + stepSize * sum;
+                }
 
-        }
+                computeDerivatives(stepStart + c[k - 1] * stepSize, yTmp, yDotK[k]);
 
-        // estimate the state at the end of the step
-        for (int j = 0; j < y0.length; ++j) {
-          double sum    = b[0] * yDotK[0][j];
-          for (int l = 1; l < stages; ++l) {
-            sum    += b[l] * yDotK[l][j];
-          }
-          yTmp[j] = y[j] + stepSize * sum;
-        }
+            }
 
-        // estimate the error at the end of the step
-        error = estimateError(yDotK, y, yTmp, stepSize);
-        if (error >= 1.0) {
-          // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              FastMath.min(maxGrowth,
-                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          hNew = filterStep(stepSize * factor, forward, false);
-        }
+            // estimate the state at the end of the step
+            for (int j = 0; j < y0.length; ++j) {
+                double sum = b[0] * yDotK[0][j];
+                for (int l = 1; l < stages; ++l) {
+                    sum += b[l] * yDotK[l][j];
+                }
+                yTmp[j] = y[j] + stepSize * sum;
+            }
 
-      }
+            // estimate the error at the end of the step
+            error = estimateError(yDotK, y, yTmp, stepSize);
+            if (error >= 1.0) {
+                // reject the step and attempt to reduce error by stepsize control
+                final double factor =
+                        FastMath.min(maxGrowth,
+                                FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+                hNew = filterStep(stepSize * factor, forward, false);
+            }
 
-      // local error is small enough: accept the step, trigger events and step handlers
-      interpolator.storeTime(stepStart + stepSize);
-      System.arraycopy(yTmp, 0, y, 0, y0.length);
-      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
-      stepStart = acceptStep(interpolator, y, yDotTmp, t);
-      System.arraycopy(y, 0, yTmp, 0, y.length);
+        }
 
-      if (!isLastStep) {
+        // local error is small enough: accept the step, trigger events and step handlers
+        interpolator.storeTime(stepStart + stepSize);
+        System.arraycopy(yTmp, 0, y, 0, y0.length);
+        System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
+        stepStart = acceptStep(interpolator, y, yDotTmp, t);
+        System.arraycopy(y, 0, yTmp, 0, y.length);
 
-          // prepare next step
-          interpolator.storeTime(stepStart);
+        if (!isLastStep) {
 
-          if (fsal) {
-              // save the last evaluation for the next step
-              System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
-          }
+            // prepare next step
+            interpolator.storeTime(stepStart);
 
-          // stepsize control for next step
-          final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
-          final double  scaledH    = stepSize * factor;
-          final double  nextT      = stepStart + scaledH;
-          final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
-          hNew = filterStep(scaledH, forward, nextIsLast);
+            if (fsal) {
+                // save the last evaluation for the next step
+                System.arraycopy(yDotTmp, 0, yDotK[0], 0, y0.length);
+            }
 
-          final double  filteredNextT      = stepStart + hNew;
-          final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
-          if (filteredNextIsLast) {
-              hNew = t - stepStart;
-          }
+            // stepsize control for next step
+            final double factor =
+                    FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+            final double scaledH = stepSize * factor;
+            final double nextT = stepStart + scaledH;
+            final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
+            hNew = filterStep(scaledH, forward, nextIsLast);
+
+            final double filteredNextT = stepStart + hNew;
+            final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);
+            if (filteredNextIsLast) {
+                hNew = t - stepStart;
+            }
 
-      }
+        }
 
     } while (!isLastStep);
 
@@ -325,7 +331,7 @@ public abstract class EmbeddedRungeKuttaIntegrator
 
     resetInternalState();
 
-  }
+}
 
   /** Get the minimal reduction factor for stepsize control.
    * @return minimal reduction factor