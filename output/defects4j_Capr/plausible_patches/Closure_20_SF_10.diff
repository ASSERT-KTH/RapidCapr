diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..9ba8c20f 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -205,29 +205,48 @@ class PeepholeSubstituteAlternateSyntax
     }
   }
 
-  private Node tryFoldSimpleFunctionCall(Node n) {
+private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
-      }
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
+        Node value = callTarget.getNext();
+        if (value != null) {
+            if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+                // String(a) => '' + (a)
+                Node addition = IR.add(IR.string("").srcref(callTarget), value.detachFromParent());
+                n.getParent().replaceChild(n, addition);
+                reportCodeChange();
+                return addition;
+            } else if (areAllParamsStrings(n)) {
+                // String("a", "b", "c", ...) => "abc..."
+                Node paramNode = callTarget.getNext();
+                StringBuilder stringBuilder = new StringBuilder();
+                while (paramNode != null && NodeUtil.isImmutableValue(paramNode) && paramNode.isString()) {
+                    stringBuilder.append(paramNode.getString());
+                    paramNode = paramNode.getNext();
+                }
+                if (paramNode == null) {
+                    Node newString = IR.string(stringBuilder.toString()).srcref(n);
+                    n.getParent().replaceChild(n, newString);
+                    reportCodeChange();
+                    return newString;
+                }
+            }
+        }
     }
     return n;
-  }
+}
+
+private static boolean areAllParamsStrings(Node n) {
+    Node paramNode = n.getFirstChild().getNext();
+    while (paramNode != null) {
+        if (!NodeUtil.isImmutableValue(paramNode) || !paramNode.isString()) {
+            return false;
+        }
+        paramNode = paramNode.getNext();
+    }
+    return true;
+}
 
   private Node tryFoldImmediateCallToBoundFunction(Node n) {
     // Rewriting "(fn.bind(a,b))()" to "fn.call(a,b)" makes it inlinable