diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java
index 31aa6c6..fb8078d 100644
--- a/source/org/jfree/chart/util/ShapeUtilities.java
+++ b/source/org/jfree/chart/util/ShapeUtilities.java
@@ -261,40 +261,41 @@ public class ShapeUtilities {
      *
      * @return A boolean.
      */
-    public static boolean equal(GeneralPath p1, GeneralPath p2) {
-        if (p1 == null) {
-            return (p2 == null);
-        }
-        if (p2 == null) {
+public static boolean equal(GeneralPath p1, GeneralPath p2) {
+    if (p1 == null) {
+        return p2 == null; // If both paths are null, return true, else false
+    } else if (p2 == null) {
+        return false;
+    }
+
+    if (p1.getWindingRule() != p2.getWindingRule()) {
+        return false;
+    }
+
+    PathIterator pi1 = p1.getPathIterator(null);
+    PathIterator pi2 = p2.getPathIterator(null);
+    double[] coords1 = new double[6];
+    double[] coords2 = new double[6];
+
+    while (!pi1.isDone() && !pi2.isDone()) {
+        int type1 = pi1.currentSegment(coords1);
+        int type2 = pi2.currentSegment(coords2);
+
+        if (type1 != type2) {
             return false;
         }
-        if (p1.getWindingRule() != p2.getWindingRule()) {
+
+        if (!Arrays.equals(coords1, coords2)) {
             return false;
         }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
-                return false;
-            }
-            if (!Arrays.equals(d1, d2)) {
-                return false;
-            }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
-        }
-        return true;
+
+        pi1.next();
+        pi2.next();
     }
 
+    return pi1.isDone() && pi2.isDone(); // If both iterators point to the end of the path return true, else false
+}
+
     /**
      * Creates and returns a translated shape.
      *