diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 02810e142..d5f6cbfc5 100644
--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -105,11 +105,33 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
-    public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+public double cumulativeProbability(double x) throws MathException {
+    // Check for NaN
+    if (Double.isNaN(x)) {
+        return Double.NaN;
     }
     
+    // Check for infinite values
+    if (Double.isInfinite(x)) {
+        if (x > 0) {
+            return 1.0;
+        } else {
+            return 0.0;
+        }
+    }
+    
+    // Check if x is more than 40 standard deviations from the mean
+    double z = (x - mean) / standardDeviation;
+    if (z >= 40.0) {
+        return 1.0;
+    } else if (z <= -40.0) {
+        return 0.0;
+    }
+    
+    // Calculate the cumulative probability using Erf.erf()
+    return 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+}
+    
     /**
      * For this distribution, X, this method returns the critical point x, such
      * that P(X &lt; x) = <code>p</code>.