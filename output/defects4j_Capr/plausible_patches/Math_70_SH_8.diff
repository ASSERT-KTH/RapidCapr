diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 3f669271a..d75355bf4 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -69,7 +69,23 @@ public class BisectionSolver extends UnivariateRealSolverImpl {
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    // Use initial value as a starting point for the solver, or the midpoint if it's outside the range
+    if (initial < min || initial > max) {
+        initial = (min + max) / 2.0;
+    }
+
+    // Check if function values at min and max have opposite signs
+    if (f.value(min) * f.value(max) >= 0) {
+        throw new IllegalArgumentException("Invalid range: function values at min and max must have opposite signs");
+    }
+
+    // Create a new instance of the solver and set the tolerance and maximum iterations
+    BrentSolver solver = new BrentSolver();
+    solver.setAbsoluteAccuracy(getAbsoluteAccuracy());
+    solver.setMaximalIterationCount(getMaximalIterationCount());
+
+    // Solve the function using the given solver
+    return solver.solve(f, min, max, initial);
     }
 
     /** {@inheritDoc} */