diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java
index 0b4b3ded..ef383483 100644
--- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -516,69 +516,56 @@ class InlineVariables implements CompilerPass {
      * @return true if the provided reference and declaration can be safely
      *         inlined according to our criteria
      */
-    private boolean canInline(
-        Reference declaration,
-        Reference initialization,
-        Reference reference) {
-      if (!isValidDeclaration(declaration)
-          || !isValidInitialization(initialization)
-          || !isValidReference(reference)) {
+private boolean canInline(Reference declaration, Reference initialization, Reference reference) {
+    if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) {
         return false;
-      }
+    }
 
-      // If the value is read more than once, skip it.
-      // VAR declarations and EXPR_RESULT don't need the value, but other
-      // ASSIGN expressions parents do.
-      if (declaration != initialization &&
-          !initialization.getGrandparent().isExprResult()) {
+    // If the value is read more than once, skip it.
+    // VAR declarations and EXPR_RESULT don't need the value, but other
+    // ASSIGN expressions parents do.
+    if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {
         return false;
-      }
+    }
 
-      // Be very conservative and do no cross control structures or
-      // scope boundaries
-      if (declaration.getBasicBlock() != initialization.getBasicBlock()
-          || declaration.getBasicBlock() != reference.getBasicBlock()) {
+    // Be very conservative and do not cross control structures or
+    // scope boundaries
+    if (declaration.getBasicBlock() != initialization.getBasicBlock()
+            || declaration.getBasicBlock() != reference.getBasicBlock()) {
         return false;
-      }
+    }
 
-      // Do not inline into a call node. This would change
-      // the context in which it was being called. For example,
-      //   var a = b.c;
-      //   a();
-      // should not be inlined, because it calls a in the context of b
-      // rather than the context of the window.
-      //   var a = b.c;
-      //   f(a)
-      // is ok.
-      Node value = initialization.getAssignedValue();
-      Preconditions.checkState(value != null);
-      if (value.isGetProp()
-          && reference.getParent().isCall()
-          && reference.getParent().getFirstChild() == reference.getNode()) {
+    // Do not inline into a call node. This would change
+    // the context in which it was being called. For example,
+    //   var a = b.c;
+    //   a();
+    // should not be inlined, because it calls a in the context of b
+    // rather than the context of the window.
+    //   var a = b.c;
+    //   f(a)
+    // is ok.
+    Node value = initialization.getAssignedValue();
+    if (value == null) {
         return false;
-      }
-
-      if (value.isFunction()) {
-        Node callNode = reference.getParent();
-        if (reference.getParent().isCall()) {
-          CodingConvention convention = compiler.getCodingConvention();
-          // Bug 2388531: Don't inline subclass definitions into class defining
-          // calls as this confused class removing logic.
-          SubclassRelationship relationship =
-              convention.getClassesDefinedByCall(callNode);
-          if (relationship != null) {
-            return false;
-          }
+    }
 
-          // issue 668: Don't inline singleton getter methods
-          // calls as this confused class removing logic.
+    if (value.isFunction()) {
+        // Do not inline singleton getter methods calls as this confused class removing logic.
+        CodingConvention convention = compiler.getCodingConvention();
+        if (reference.getParent().isCall() && convention != null) {
+            Node callNode = reference.getParent();
+            SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
+            if (relationship != null || convention.getSingletonGetterClassName(callNode) != null) {
+                return false;
+            }
         }
-      }
-
-      return canMoveAggressively(value) ||
-          canMoveModerately(initialization, reference);
     }
 
+    return reference.getParent().isCall() && value.isGetProp()
+            && reference.getParent().getFirstChild() == reference.getNode()
+            ? false : canMoveAggressively(value) || canMoveModerately(initialization, reference);
+}
+
     /**
      * If the value is a literal, we can cross more boundaries to inline it.
      */