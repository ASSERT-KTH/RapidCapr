diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
index b200223d..dfab2af0 100644
--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
@@ -220,21 +220,27 @@ public class RandomStringUtils {
      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.
      * @since 2.0
      */
-    public static String random(int count, int start, int end, boolean letters, boolean numbers,
-                                char[] chars, Random random) {
+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
+        if (count < 0) {
+            throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
+        }
         if (count == 0) {
             return "";
-        } else if (count < 0) {
-            throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");
+        }
+        if (chars != null && chars.length == 0) {
+            throw new IllegalArgumentException("The chars array must not be empty");
+        }
+        if (start == end && start != 0 && end != 0) {
+            throw new IllegalArgumentException("The range must be valid");
         }
 
         if (start == 0 && end == 0) {
-                if (!letters && !numbers) {
-                    end = Integer.MAX_VALUE;
-                } else {
-                    end = 'z' + 1;
-                    start = ' ';                
-                }
+            if (!letters && !numbers) {
+                end = Integer.MAX_VALUE;
+            } else {
+                end = 'z' + 1;
+                start = ' ';
+            }
         }
 
         char[] buffer = new char[count];
@@ -245,13 +251,12 @@ public class RandomStringUtils {
             if (chars == null) {
                 ch = (char) (random.nextInt(gap) + start);
             } else {
-                ch = chars[random.nextInt(gap) + start];
+                ch = chars[random.nextInt(chars.length)];
             }
-            if (letters && Character.isLetter(ch)
-                    || numbers && Character.isDigit(ch)
-                    || !letters && !numbers) {
-                if(ch >= 56320 && ch <= 57343) {
-                    if(count == 0) {
+            if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) ||
+                    !letters && !numbers) {
+                if (ch >= 56320 && ch <= 57343) {
+                    if (count == 0) {
                         count++;
                     } else {
                         // low surrogate, insert high surrogate after putting it in
@@ -259,8 +264,8 @@ public class RandomStringUtils {
                         count--;
                         buffer[count] = (char) (55296 + random.nextInt(128));
                     }
-                } else if(ch >= 55296 && ch <= 56191) {
-                    if(count == 0) {
+                } else if (ch >= 55296 && ch <= 56191) {
+                    if (count == 0) {
                         count++;
                     } else {
                         // high surrogate, insert low surrogate before putting it in
@@ -268,7 +273,7 @@ public class RandomStringUtils {
                         count--;
                         buffer[count] = ch;
                     }
-                } else if(ch >= 56192 && ch <= 56319) {
+                } else if (ch >= 56192 && ch <= 56319) {
                     // private high surrogate, no effing clue, so skip it
                     count++;
                 } else {
@@ -278,6 +283,7 @@ public class RandomStringUtils {
                 count++;
             }
         }
+
         return new String(buffer);
     }
 