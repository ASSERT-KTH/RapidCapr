diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java
index 889497e9..4dcac8a4 100644
--- a/src/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java
@@ -2950,20 +2950,47 @@ public class ArrayUtils {
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
-    public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
-            return clone(array2);
-        } else if (array2 == null) {
-            return clone(array1);
+public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null) {
+        return clone(array2);
+    } else if (array2 == null) {
+        return clone(array1);
+    }
+
+    final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+        if (!type1.isPrimitive() && !type2.isPrimitive()) {
+            throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
         }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+        T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        for (int i = 0; i < array2.length; i++) {
+            joinedArray[i + array1.length] = (T) convertPrimitiveToObject(array2[i]);
+        }
         return joinedArray;
     }
 
+    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+
+    return joinedArray;
+}
+
+private static Object convertPrimitiveToObject(Object object) {
+    if (object instanceof Boolean) return (Boolean) object;
+    if (object instanceof Character) return (Character) object;
+    if (object instanceof Byte) return (Byte) object;
+    if (object instanceof Short) return (Short) object;
+    if (object instanceof Integer) return (Integer) object;
+    if (object instanceof Long) return (Long) object;
+    if (object instanceof Float) return (Float) object;
+    if (object instanceof Double) return (Double) object;
+    throw new IllegalArgumentException("Unknown primitive type: " + object.getClass().getName());
+}
+
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>
      * <p>The new array contains all of the element of <code>array1</code> followed