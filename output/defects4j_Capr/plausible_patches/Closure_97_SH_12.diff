diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..646e40fd 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,22 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = (long)lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = (long)lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    // Use an unsigned right shift operator to achieve the desired logic
+    // without sign extension.
+    result = ((long)lvalInt & 0xFFFFFFFFL) >>> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " +
+        Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +