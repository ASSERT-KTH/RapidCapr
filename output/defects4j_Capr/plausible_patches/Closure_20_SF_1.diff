diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..013dc368 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -208,22 +208,22 @@ class PeepholeSubstituteAlternateSyntax
   private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
       Node value = callTarget.getNext();
       if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
+        if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+          Node addition = IR.add(IR.string("").srcref(callTarget), value.detachFromParent());
+          n.getParent().replaceChild(n, addition);
+          reportCodeChange();
+          return addition;
+        } else if (value.getNext() != null && value.getNext().isString() && NodeUtil.isImmutableValue(value) && NodeUtil.isImmutableValue(value.getNext())) {
+          Node left = value.detachFromParent();
+          Node right = value.getNext().detachFromParent();
+          Node addition = IR.add(left, right);
+          n.getParent().replaceChild(n, addition);
+          reportCodeChange();
+          return addition;
+        }
       }
     }
     return n;