diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index a31b17a2..6ea501a2 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -317,34 +317,42 @@ public final class NodeUtil {
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
-    switch (val.getType()) {
-      case Token.STRING:
-      case Token.NUMBER:
-      case Token.TRUE:
-      case Token.FALSE:
-        return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
+static boolean isValidDefineValue(Node val, Set<String> defines) {
+    if (val == null) {
+        return false;
+    }
 
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+    int type = val.getType();
 
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+    if (type == Token.STRING || type == Token.NUMBER ||
+        type == Token.TRUE || type == Token.FALSE) {
+        return true;
+    } else if (type == Token.NAME || type == Token.GETPROP) {
+        String name = val.getQualifiedName();
+        return name != null && defines.contains(name);
+    } else if (type == Token.NOT || type == Token.NEG) {
+        Node child = val.getFirstChild();
+        return child != null && isValidDefineValue(child, defines);
+    } else if (type == Token.BITAND || type == Token.BITNOT ||
+               type == Token.BITOR || type == Token.BITXOR ||
+               type == Token.AND || type == Token.OR ||
+               type == Token.LSH || type == Token.RSH ||
+               type == Token.URSH || type == Token.ADD ||
+               type == Token.SUB || type == Token.MUL ||
+               type == Token.DIV || type == Token.MOD) {
+        Node firstChild = val.getFirstChild();
+        Node lastChild = val.getLastChild();
+        return firstChild != null && lastChild != null &&
+               isValidDefineValue(firstChild, defines) &&
+               isValidDefineValue(lastChild, defines);           
+    } else {
+        Node firstChild = val.getFirstChild();
+        Node lastChild = val.getLastChild();
+        return firstChild != null && lastChild != null &&
+               isValidDefineValue(firstChild, defines) &&
+               isValidDefineValue(lastChild, defines);
     }
-    return false;
-  }
+}
 
   /**
    * Returns whether this a BLOCK node with no children.