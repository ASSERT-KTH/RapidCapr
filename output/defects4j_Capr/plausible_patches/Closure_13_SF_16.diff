diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..a9c6e55e 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,33 +110,42 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
-    if (!shouldVisit(node)) {
-      return;
-    }
+private void traverse(Node node) {
+  if (!shouldVisit(node)) {
+    return;
+  }
 
-    int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
+  int visits = 0;
+  boolean shouldContinue = true;
+  while (shouldContinue && visits < 10000) {
+    shouldContinue = false;
+    Node c = node.getFirstChild();
+    while (c != null) {
+      Node next = c.getNext();
+      traverse(c);
+      c = next;
+      if (shouldRetraverse(node)) {
+        shouldContinue = true;
+        break;
       }
+    }
 
-      visit(node);
-      visits++;
+    visit(node);
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+    if (shouldRetraverse(node)) {
+      shouldContinue = true;
+    } else {
+      visits++;
+    }
+  }
 
-    exitNode(node);
+  if (visits >= 10000) {
+    throw new IllegalStateException("Too many iterations.");
   }
 
+  exitNode(node);
+}
+
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {
       ScopeState state = traversalState.peek();