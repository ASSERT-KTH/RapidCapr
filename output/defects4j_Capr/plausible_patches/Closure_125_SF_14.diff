diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index 4e053258..564ac784 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1653,22 +1653,29 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
   /**
    * Visits a NEW node.
    */
-  private void visitNew(NodeTraversal t, Node n) {
-    Node constructor = n.getFirstChild();
-    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
-    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
-      FunctionType fnType = type.toMaybeFunctionType();
-      if (fnType != null) {
-        visitParameterList(t, n, fnType);
-        ensureTyped(t, n, fnType.getInstanceType());
-      } else {
-        ensureTyped(t, n);
-      }
+private void visitNew(NodeTraversal t, Node n) {
+  Node constructor = n.getFirstChild();
+  JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
+  if (type.isConstructor()) {
+    FunctionType fnType = type.toMaybeFunctionType();
+    if (fnType != null) {
+      visitParameterList(t, n, fnType);
+      ensureTyped(t, n, fnType.getInstanceType());
     } else {
-      report(t, n, NOT_A_CONSTRUCTOR);
+      report(t, constructor, NOT_A_CONSTRUCTOR);
       ensureTyped(t, n);
     }
+  } else if (type.isEmptyType() || type.isUnknownType()) {
+    ensureTyped(t, n);
+  } else {
+    if (constructor.isQualifiedName()) {
+      report(t, constructor, NOT_A_CONSTRUCTOR);
+    } else {
+      report(t, n, NOT_A_CONSTRUCTOR);
+    }
+    ensureTyped(t, n);
   }
+}
 
   /**
    * Check whether there's any property conflict for for a particular super