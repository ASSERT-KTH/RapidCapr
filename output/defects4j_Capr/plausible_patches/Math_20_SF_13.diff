diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 4b7dbf6bb..ac46bf778 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -917,10 +917,33 @@ public class CMAESOptimizer
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
-        public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+public double[] repairAndDecode(final double[] x) {
+    if (x == null || x.length == 0) {
+        return new double[0]; // return empty array for null or empty input
+    }
+
+    double[] repaired = repair(x);
+    if (repaired == null || repaired.length == 0) {
+        return new double[0]; // return empty array for null or empty output from repair method
+    }
+
+    double[] decoded = decode(repaired);
+    if (decoded == null || decoded.length == 0) {
+        return new double[0]; // return empty array for null or empty output from decode method
+    }
+
+    for (int i = 0; i < decoded.length; i++) {
+        if (Double.isNaN(decoded[i])) { // handle NaN values
+            decoded[i] = 0.0;
+        } else if (decoded[i] < 0.0) {
+            decoded[i] = 0.0;
+        } else if (decoded[i] > 1.0) {
+            decoded[i] = 1.0;
         }
+    }
+
+    return decoded;
+}
 
         /**
          * @param x Normalized objective variables.