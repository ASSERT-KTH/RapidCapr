diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 5136a1401..64b5f809a 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -119,8 +119,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
         final double hi = getMax();
 
         // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
         double a;
         double b;
@@ -145,9 +144,8 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
         double fw = fx;
 
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
-        // Best point encountered so far (which is the initial guess).
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair bestSoFar = current;
 
         int iter = 0;
         while (true) {
@@ -178,9 +176,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     r = e;
                     e = d;
 
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
@@ -234,7 +230,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
 
                 if (checker != null) {
                     if (checker.converged(iter, previous, current)) {
-                        return best(current, previous, isMinim);
+                        return best(bestSoFar, best(current, previous, isMinim), isMinim);
                     }
                 }
 
@@ -251,30 +247,28 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     fw = fx;
                     x = u;
                     fx = fu;
+
+                    if (isMinim && fu < bestSoFar.getValue() || !isMinim && fu > bestSoFar.getValue()) {
+                        bestSoFar = current;
+                    }
                 } else {
                     if (u < x) {
                         a = u;
                     } else {
                         b = u;
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                    if (fu <= fw || Precision.equals(w, x)) {
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                    } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return
-                            best(current,
-                                 previous,
-                            isMinim);
+                return best(bestSoFar, previous, isMinim);
             }
             ++iter;
         }