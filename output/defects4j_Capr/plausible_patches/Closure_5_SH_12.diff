diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2b85d84f..669ef694 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -173,6 +173,32 @@ class InlineObjectLiterals implements CompilerPass {
 
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
+        // Deleting a property has different semantics from deleting
+        // a variable, so deleted properties should not be inlined.
+        if (parent.isGetProp() && parent.getParent().isDelProp()) {
+            return false;
+        } else if (parent.getParent().isDelProp()) {
+            return false;
+        }
+        
+        // Check if the validProperties set contains the property being referenced
+        String propertyName = parent.getLastChild().getString();
+        if (!validProperties.contains(propertyName)) {
+            // If parent node is VAR or a simple assignment and the propertyName is not already available
+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
+                validProperties.add(propertyName);
+            } else {
+                return false;
+            }
+        }
+
+        // NOTE(nicksantos): This pass's object-splitting algorithm has
+        // a blind spot. It assumes that if a property isn't defined on an
+        // object, then the value is undefined. This is not true, because
+        // Object.prototype can have arbitrary properties on it.
+        //
+        // We short-circuit this problem by bailing out if we see a reference
+        // to a property that isn't defined on the object literal. This
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an