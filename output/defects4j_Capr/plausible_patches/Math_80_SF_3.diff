diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index 3fc328d8b..01ba85228 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1129,22 +1129,25 @@ public class EigenDecompositionImpl implements EigenDecomposition {
      * only every other element)
      * @return true if qd array was flipped
      */
-    private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+private boolean flipIfWarranted(final int n, final int step) {
+    final int currentPingPong = pingPong;
+    final int alternatePingPong = (pingPong + 2) % 4;
+    if (1.5 * work[currentPingPong] < work[4 * (n - 1) + alternatePingPong]) {
+        // flip array
+        int j = 4 * n - 1;
+        for (int i = 0; i < j; i += 4) {
+            for (int k = 0; k < 4; k += step) {
+                final double tmp = work[i + k];
+                work[i + k] = work[j - k];
+                work[j - k] = tmp;
             }
-            return true;
+            j -= 4;
         }
-        return false;
+        pingPong = alternatePingPong;
+        return true;
     }
+    return false;
+}
 
     /**
      * Compute an interval containing all realEigenvalues of a block.