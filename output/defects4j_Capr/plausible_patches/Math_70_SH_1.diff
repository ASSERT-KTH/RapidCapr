diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 3f669271a..8218a1667 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -69,7 +69,26 @@ public class BisectionSolver extends UnivariateRealSolverImpl {
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+if (min >= max) {
+    if (Math.abs(f.value(min)) < Math.abs(f.value(max))) {
+        return min;
+    } else {
+        return max;
+    }
+}
+
+// Use initial value as a starting point for the solver
+if (initial < min || initial > max) {
+    initial = (min + max) / 2.0;
+}
+
+// Create a new instance of the solver and set the tolerance and maximum iterations
+BrentSolver solver = new BrentSolver();
+solver.setAbsoluteAccuracy(getAbsoluteAccuracy());
+solver.setMaximalIterationCount(getMaximalIterationCount());
+
+// Solve the function using the given solver
+return solver.solve(f, min, max, initial);
     }
 
     /** {@inheritDoc} */