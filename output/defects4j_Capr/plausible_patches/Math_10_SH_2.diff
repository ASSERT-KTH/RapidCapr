diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index bf6dd65d5..14d951908 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1416,6 +1416,53 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        // Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        if (Double.isNaN(result[resultOffset])) {
+            // special cases for NaNs
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = result[resultOffset];
+            }
+        } else if (Double.isInfinite(result[resultOffset])) {
+            // special cases for infinities
+            if (Double.isInfinite(x[xOffset])) {
+                if (x[xOffset] < 0) { // -inf
+                    result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]);
+                } else { // +inf
+                    result[resultOffset] = FastMath.copySign(0.0, y[yOffset]);
+                }
+            } else if (Double.isInfinite(y[yOffset])) {
+                if (y[yOffset] < 0) { // -inf
+                    result[resultOffset] = FastMath.copySign(FastMath.PI / 2, x[xOffset]);
+                } else { // +inf
+                    result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);
+                }
+            }
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = result[resultOffset];
+            }
+        } else if (x[xOffset] == 0 && y[yOffset] == 0) {
+            // special case for +0/+0
+            for (int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else if (Double.doubleToRawLongBits(x[xOffset]) == 0x8000000000000000L &&
+                   Double.doubleToRawLongBits(y[yOffset]) == 0x8000000000000000L) {
+            // special case for -0/-0
+            for (int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = FastMath.copySign(0.0, -1.0);
+            }
+        } else if (x[xOffset] > 0 && Double.isInfinite(y[yOffset])) {
+            // special case for +0/-0
+            for (int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = -0.0;
+            }
+        } else if (Double.doubleToRawLongBits(x[xOffset]) == 0x8000000000000000L && y[yOffset] > 0) {
+            // special case for -0/+0
+            for (int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = FastMath.copySign(0.0, -1.0);
+            }
+        }
 
     }
 