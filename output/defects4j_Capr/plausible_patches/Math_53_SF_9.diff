diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..bc40c3f38 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,36 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    double newReal = real + rhs.getReal();
+    double newImaginary = imaginary + rhs.getImaginary();
+    // Check if either real or imaginary part is NaN
+    if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {
+        return createComplex(Double.NaN, Double.NaN);
+    }
+    // Check if both real and imaginary part are infinite with the same sign
+    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) 
+        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())
+        && Math.signum(real) == Math.signum(rhs.getReal()) 
+        && Math.signum(imaginary) == Math.signum(rhs.getImaginary())) {
+        return createComplex(real, imaginary);
     }
+    // Check if both real and imaginary part are infinite with different signs
+    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) 
+        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())
+        && (Math.signum(real) != Math.signum(rhs.getReal()) 
+        || Math.signum(imaginary) != Math.signum(rhs.getImaginary()))) {
+        return createComplex(Double.NaN, Double.NaN);
+    }
+    // Check if either real or imaginary part is infinite
+    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {
+        double sign = (newReal >= 0) ? 1.0 : -1.0;
+        return createComplex(sign * Double.POSITIVE_INFINITY, sign * newImaginary);
+    }
+    // If none of the above cases, then return calculated complex number
+    return createComplex(newReal, newImaginary);
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of