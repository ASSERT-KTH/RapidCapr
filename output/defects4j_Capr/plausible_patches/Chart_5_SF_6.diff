diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java
index 0b37e6e..729ee50 100644
--- a/source/org/jfree/data/xy/XYSeries.java
+++ b/source/org/jfree/data/xy/XYSeries.java
@@ -537,43 +537,58 @@ public class XYSeries extends Series implements Cloneable, Serializable {
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
-    public XYDataItem addOrUpdate(Number x, Number y) {
-        if (x == null) {
-            throw new IllegalArgumentException("Null 'x' argument.");
-        }
-
-        // if we get to here, we know that duplicate X values are not permitted
-        XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
-            XYDataItem existing = (XYDataItem) this.data.get(index);
-            try {
-                overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
-                throw new SeriesException("Couldn't clone XYDataItem!");
-            }
-            existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
-            if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
-            }
-            else {
-                this.data.add(new XYDataItem(x, y));
-            }
-            // check if this addition will exceed the maximum item count...
-            if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
-            }
-        }
-        fireSeriesChanged();
-        return overwritten;
-    }
+public XYDataItem addOrUpdate(Number x, Number y) {
+    if (x == null || y == null) { // Fixed: check for null y value
+        throw new IllegalArgumentException("Null 'x' or 'y' argument.");
+    }
+    
+    int index = indexOf(x);
+
+    if (index >= 0 && !this.allowDuplicateXValues) {
+        // If duplicate x is not allowed and the value already exists, update the y value and return the existing item
+        XYDataItem existing = (XYDataItem) this.data.get(index);
+        if (!existing.getY().equals(y)) { // Fixed: avoid updating if y value is the same
+            XYDataItem overwritten = new XYDataItem(existing.getX(), existing.getY());
+            existing.setY(y);
+            fireSeriesChanged();
+            return overwritten;
+        } else {
+            return existing;
+        }
+    } else {
+        // Create the new data item with the specified x and y values, and add to the appropriate position
+        XYDataItem newItem = new XYDataItem(x, y);
+
+        if (this.autoSort) {
+            // If auto-sort is enabled, use binary search to find the insertion point for the new data item
+            int insertionPoint = Collections.binarySearch(this.data, newItem);
+
+            if (insertionPoint >= 0 && this.allowDuplicateXValues) {
+                // If x values are allowed to be duplicated, insert the new item immediately after the existing item with the same x value
+                int nextIndex = insertionPoint + 1;
+                while (nextIndex < this.getItemCount() && newItem.getX().equals(
+                        ((XYDataItem) this.data.get(nextIndex)).getX())) {
+                    nextIndex++;
+                }
+                this.data.add(nextIndex, newItem);
+            } else {
+                // Otherwise, insert the new item at the appropriate position to maintain sorted order
+                this.data.add(-insertionPoint - 1, newItem);
+            }
+        } else {
+            // If auto-sort is not enabled, append the new data item to the end of the series
+            this.data.add(newItem);
+        }
+
+        if (this.getItemCount() > maximumItemCount) {
+            // If the new item exceeds the maximum item count, remove the oldest item in the series
+            this.data.remove(0);
+        }
+
+        fireSeriesChanged();
+        return null;
+    }
+}
 
     /**
      * Returns the index of the item with the specified x-value, or a negative