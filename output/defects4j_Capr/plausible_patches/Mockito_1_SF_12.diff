diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..5ad88ff64 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -117,37 +117,28 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
         return invocation.getLocation();
     }
 
-    public void captureArgumentsFrom(Invocation invocation) {
-        if (invocation.getMethod().isVarArgs()) {
-            int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
-
-        } else {
-            for (int position = 0; position < matchers.size(); position++) {
-                Matcher m = matchers.get(position);
-                if (m instanceof CapturesArguments) {
-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));
+public void captureArgumentsFrom(Invocation invocation) {
+    Object[] arguments = invocation.getRawArguments();
+    int numParams = invocation.getMethod().getParameterCount();
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher matcher = matchers.get(position);
+        if (matcher instanceof CapturesArguments) {
+            if (position >= numParams) {
+                ((CapturesArguments) matcher).captureFrom(null);
+            } else if (position == numParams - 1 && invocation.getMethod().isVarArgs()) {
+                if (matcher instanceof VarargMatcher) {
+                    Object varArgsArray = arguments[position];
+                    for (int i = 0; i < Array.getLength(varArgsArray); i++) {
+                        ((CapturesArguments) matcher).captureFrom(Array.get(varArgsArray, i));
+                    }
+                    return;
                 }
+            } else {
+                ((CapturesArguments) matcher).captureFrom(arguments[position]);
             }
         }
-
-//        for (int position = 0; position < matchers.size(); position++) {
-//            Matcher m = matchers.get(position);
-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {
-//                //TODO SF - this whole lot can be moved captureFrom implementation
-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {
-//                    Object array = invocation.getRawArguments()[position];
-//                    for (int i = 0; i < Array.getLength(array); i++) {
-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));
-//                    }
-//                    //since we've captured all varargs already, it does not make sense to process other matchers.
-//                    return;
-//                } else {
-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);
-//                }
-//            }
-//        }
     }
+}
 
     private boolean isVarargMatcher(Matcher matcher) {
         Matcher actualMatcher = matcher;