diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 1844b18a..a6bd799b 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -923,11 +923,9 @@ public final class NodeUtil {
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
+  static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {
+    if (callNode == null || callNode.getType() != Token.CALL) {
+      return false;
     }
 
     if (callNode.isNoSideEffectsCall()) {
@@ -935,39 +933,41 @@ public final class NodeUtil {
     }
 
     Node nameNode = callNode.getFirstChild();
+    if (nameNode == null) {
+      return false;
+    }
 
-    // Built-in functions with no side effects.
     if (nameNode.getType() == Token.NAME) {
       String name = nameNode.getString();
       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
         return false;
       }
     } else if (nameNode.getType() == Token.GETPROP) {
+      String prop = nameNode.getLastChild().getString();
       if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+              && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(prop)) {
         return false;
       }
 
       if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
+              && evaluatesToLocalValue(nameNode.getFirstChild())) {
         return false;
       }
 
-      // Functions in the "Math" namespace have no side effects.
+      if (nameNode.getFirstChild().getType() == Token.NAME && nameNode.getFirstChild().getString().equals("Math")) {
+        return false;
+      }
 
       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
         if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+                && REGEXP_METHODS.contains(prop)) {
           return false;
         } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
+                && STRING_REGEXP_METHODS.contains(prop)) {
           Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
+          if (param != null && (param.getType() == Token.STRING
                   || param.getType() == Token.REGEXP))
-          return false;
+            return false;
         }
       }
     }