diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index a0fe7e2d..c17acd7f 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -132,21 +132,44 @@ public class FieldUtils {
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
-    public static long safeMultiply(long val1, int val2) {
+public static long safeMultiply(long val1, int val2) {
+    if(val1==Long.MIN_VALUE){
+        if(val2==0) return 0L;
+        if(val2==1) return val1;
+        if(val2==-1) throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        if(val2>0){
+            long total = safeMultiply(val1, val2/2);
+            total <<= 1;
+            if(total > val1) throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            if(val2%2!=-1) total += val1;
+            return total;
+        }
+        else{
+            val2 = -val2;
+            long total = safeMultiply(val1, val2/2);
+            total <<= 1;
+            if(total > val1) throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+            return (Long.MIN_VALUE + total) - (val1-val1);
+        }
+    }
+    else{
         switch (val2) {
             case -1:
+                if(val1==Long.MIN_VALUE) throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
                 return -val1;
             case 0:
                 return 0L;
             case 1:
                 return val1;
+            default:
+                long total = val1 * val2;
+                if (total / val2 != val1) {
+                    throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+                }
+                return total;
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
-          throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
-        }
-        return total;
     }
+}
 
     /**
      * Multiply two values throwing an exception if overflow occurs.