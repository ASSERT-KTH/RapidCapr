diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index 0ab790cd6..e700f706c 100644
--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -269,19 +269,48 @@ class SimplexTableau implements Serializable {
      * @param col index of the column to check
      * @return the row that the variable is basic in.  null if the column is not basic
      */
-    private Integer getBasicRow(final int col) {
-        Integer row = null;
-        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
-                if (row == null) {
+private Integer getBasicRow(final int col) {
+    Integer row = null;
+    
+    // Count the number of non-zero entries
+    int numNonZeroEntries = 0;
+    
+    // Iterate over the rows to find the basic row
+    for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {
+        final double entry = getEntry(i, col);
+        
+        // Check if the entry is non-zero
+        if (!MathUtils.equals(entry, 0.0, epsilon)) {
+            
+            // Check if the entry is equal to 1
+            if (MathUtils.equals(entry, 1.0, epsilon)) {
+                
+                // Check that we haven't already found a basic row for this column
+                if (row != null) {
+                    return null;
+                }
+                
+                // Store the index of the basic row
                 row = i;
-                } else {
+                
+            } else {
+                // If the entry is not equal to 1, the row is not basic
                 return null;
-                }
             }
+            
+            // Increment the number of non-zero entries
+            numNonZeroEntries++;
         }
-        return row;
     }
+    
+    // Check that there is exactly one non-zero entry
+    if (numNonZeroEntries != 1) {
+        return null;
+    }
+    
+    // Return the index of the basic row
+    return row;
+}
 
     /**
      * Removes the phase 1 objective function and artificial variables from this tableau.