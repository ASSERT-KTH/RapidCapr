diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..45d72280 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,29 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+private boolean isSafeReplacement(Node node, Node replacement) {
+  if (node.isName()) {
+    return true;
+  }
+  Preconditions.checkArgument(node.isGetProp());
+  
+  Node leftChild = node.getFirstChild();
+  if (leftChild.isName()) {
+    if (isNameAssignedTo(leftChild.getString(), replacement)) {
       return false;
     }
-
-    return true;
+  } else if (leftChild.isGetProp()) {
+    do {
+      leftChild = leftChild.getFirstChild();
+    } while (leftChild.isGetProp());
+    if (leftChild.isName()) {
+      if (isNameAssignedTo(leftChild.getString(), replacement)) {
+        return false;
+      }
+    }
   }
+  return true;
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +249,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}