diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..3e793e82 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,20 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    // Cast the signed int to a long and negate all leading 32 bits to get the desired unsigned 32-bit long value.
+    result = (long) (lvalInt & 0xffffffffL) >>> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " + Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +