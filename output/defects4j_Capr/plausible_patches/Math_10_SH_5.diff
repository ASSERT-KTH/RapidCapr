diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index bf6dd65d5..e73bfda20 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1416,6 +1416,61 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+// Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+if (Double.isNaN(result[resultOffset])) {
+    // special cases for NaNs
+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+    for (int i = 1; i < result.length; i++) {
+        result[resultOffset + i] = result[resultOffset];
+    }
+} else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {
+    // special cases for infinities
+    if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {
+        if ((x[xOffset] > 0 && y[yOffset] > 0) || (x[xOffset] < 0 && y[yOffset] < 0)) {
+            // both x and y have the same sign
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+        } else {
+            // x and y have different signs
+            result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]);
+            if (Double.doubleToLongBits(x[xOffset]) == 0x8000000000000000L) {
+                // x is -0, handle the special case where y is 0
+                result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset] == 0 ? -1 : y[yOffset]);
+            }
+        }
+        for (int i = 1; i < result.length; i++) {
+            result[resultOffset + i] = result[resultOffset];
+        }
+    } else if (x[xOffset] == 0 && y[yOffset] == 0) {
+        // special case for +0/+0
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = 0;
+        }
+    } else if (Double.doubleToRawLongBits(x[xOffset]) == 0x8000000000000000L && y[yOffset] > 0) {
+        // special case for -0/+0
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = FastMath.copySign(0.0, -1.0);
+        }
+    } else if (Double.doubleToRawLongBits(x[xOffset]) == 0x8000000000000000L && y[yOffset] < 0) {
+        // special case for -0/-0
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = FastMath.copySign(0.0, -1.0);
+        }
+    } else if (x[xOffset] > 0 && Double.isInfinite(y[yOffset])) {
+        // special case for +0/-0
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = -0.0;
+        }
+    } else {
+        // handle the case where one of x or y is infinite
+        double v = FastMath.PI / 2;
+        if (y[yOffset] < 0) {
+            v = -v;
+        }
+        for (int i = 0; i < result.length; i++) {
+            result[resultOffset + i] = FastMath.copySign(v, x[xOffset]);
+        }
+    }
+}
 
     }
 