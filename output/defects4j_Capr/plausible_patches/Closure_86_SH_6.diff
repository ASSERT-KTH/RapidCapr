diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index dd78f900..b9a8312c 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2462,7 +2462,73 @@ public final class NodeUtil {
         // TODO(nicksantos): This needs to be changed so that it
         // returns true iff we're sure the value was never aliased from inside
         // the constructor (similar to callHasLocalResult)
+switch (value.getType()) {
+    case Token.NEW:
+        // Interpret the value as a local value only if all its children are local.
+        for (Node child : value.children()) {
+            if (!evaluatesToLocalValue(child, locals)) {
+                return false;
+            }
+        }
+        return true;
+    case Token.FUNCTION:
+    case Token.REGEXP:
+    case Token.ARRAYLIT:
+    case Token.OBJECTLIT:
+    case Token.IN:
+        // Literals with non-literal children are allowed.
+        for (Node child : value.children()) {
+          if (!evaluatesToLocalValue(child, locals)) {
+            return false;
+          }
+        }
         return true;
+    case Token.ASSIGN:
+        // A result that is aliased by a non-local name, is the effectively the
+        // same as returning a non-local name, but this doesn't matter if the
+        // value is immutable.
+        return NodeUtil.isImmutableValue(value.getLastChild())
+                || (locals.apply(value)
+                && evaluatesToLocalValue(value.getLastChild(), locals));
+    case Token.COMMA:
+        return evaluatesToLocalValue(value.getLastChild(), locals);
+    case Token.AND:
+    case Token.OR:
+        return evaluatesToLocalValue(value.getFirstChild(), locals)
+                && evaluatesToLocalValue(value.getLastChild(), locals);
+    case Token.HOOK:
+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
+                && evaluatesToLocalValue(value.getLastChild(), locals);
+    case Token.INC:
+    case Token.DEC:
+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {
+            return evaluatesToLocalValue(value.getFirstChild(), locals);
+        } else {
+            return true;
+        }
+    case Token.THIS:
+    case Token.NAME:
+    case Token.GETELEM:
+    case Token.GETPROP:
+        return isImmutableValue(value) || locals.apply(value);
+    case Token.CALL:
+        return callHasLocalResult(value)
+                || isToStringMethodCall(value)
+                || locals.apply(value);
+    default:
+        // Other op force a local value:
+        //  x = '' + g (x is now an local string)
+        //  x -= g (x is now an local number)
+        if (isAssignmentOp(value)
+                || isSimpleOperator(value)
+                || isImmutableValue(value)) {
+            return true;
+        }
+
+        throw new IllegalStateException(
+                "Unexpected expression node" + value +
+                        "\n parent:" + value.getParent());
+}
       case Token.FUNCTION:
       case Token.REGEXP:
       case Token.ARRAYLIT: