diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..37f1d215a 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,11 +88,29 @@ public class DefaultInjectionEngine {
         }
     }
 
-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
-        }
-    }
+
+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        Object fieldValue;
+        try {
+            field.setAccessible(true);
+            fieldValue = field.get(fieldInstance);
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException("Could not access field " + field.getName(), e);
+        }
+
+        if (fieldValue == null || !fieldValue.getClass().equals(field.getType())) {
+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            if (mockCandidate != null) {
+                try {
+                    field.set(fieldInstance, mockCandidate);
+                } catch (IllegalAccessException e) {
+                    throw new RuntimeException("Could not inject mock " + mockCandidate + " to field " + field.getName(), e);
+                }
+            }
+        }
+    }
+}
 
     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {
         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();