diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index a0f95db9..c3d6721b 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1563,33 +1563,54 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
-      HashMap<String, ObjectType> currentProperties,
-      ObjectType interfaceType) {
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+        String functionName, HashMap<String, ObjectType> properties,
+        HashMap<String, ObjectType> currentProperties,
+        ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
+    if (implicitProto == null) {
+        // Do nothing and return if implicitProto is null
+        return;
+    }
     Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    try {
+        // Get the set of property names
+        currentPropertyNames = implicitProto.getOwnPropertyNames();
+    } catch (NullPointerException e) {
+        // In case of NullPointerException, return
+        return;
+    }
+    // Loop through the property names
     for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
+        // Get the property type of the current interface
+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);
+        if (interfaceTypePropertyType == null) {
+            // If the property type is null, skip to the next one
+            continue;
         }
-      }
-      currentProperties.put(name, interfaceType);
+        // Get the object type from properties map
+        ObjectType oType = properties.get(name);
+        if (oType != null) {
+            // Compare the property types of the object type and current interface type
+            JSType oTypePropertyType = oType.getPropertyType(name);
+            if (oTypePropertyType == null) {
+                // If the property type of the object type is null, skip to the next one
+                continue;
+            }
+            if (!interfaceTypePropertyType.isEquivalentTo(oTypePropertyType)) {
+                compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName,
+                        name, oType.toString(), interfaceType.toString()));
+            }
+        }
+        // Add the property to current properties map
+        currentProperties.put(name, interfaceType);
     }
+    // Loop through the extended interfaces
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+        // Recursively call the function for each extended interface
+        checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
     }
-  }
+}
 
   /**
    * Visits a {@link Token#FUNCTION} node.