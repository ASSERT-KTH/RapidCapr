diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..d4c325d0 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,26 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
-    }
-
+private boolean isSafeReplacement(Node node, Node replacement) {
+  // No checks are needed for simple names.
+  if (node.isName()) {
     return true;
   }
+  Preconditions.checkArgument(node.isGetProp());
+
+  Node leftChild = node.getFirstChild();
+  
+  // Handle chained property accesses.
+  while (leftChild.isGetProp()) {
+    leftChild = leftChild.getFirstChild();
+  }
+  
+  if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {
+    return false;
+  }
+
+  return true;
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +246,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}