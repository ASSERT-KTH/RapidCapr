diff --git a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
index 763802b..dab3e2f 100644
--- a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
+++ b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
@@ -9,14 +9,42 @@ package humaneval.buggy;
 // cycpattern_check("himenss","simen") => True
 
 public class CYCPATTERN_CHECK {
-    public static boolean cycpattern_check(String a, String b) {
-        int l = b.length();
-        String pat = b;
-        for (int i = 0; i < a.length(); i += 1) {
-            for (int j = 0; j < l; j += 1) {
-                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;
+public static boolean cycpattern_check(String a, String b) {
+    int n = a.length();
+    int m = b.length();
+    if (n < m) return false;
+
+    // Check if b is a substring of a
+    if (a.contains(b)) return true;
+
+    // Check if b can be obtained by cyclically permuting a substring of a
+    String a_doubled = a + a;
+    for (int i = 0; i < n; i++) {
+        if (n - i < m) break;
+
+        String sub_a = a_doubled.substring(i, i + m);
+        if (is_cyclic_permutation(sub_a, b)) return true;
+    }
+
+    return false;
+}
+
+// Helper function to check if two strings are cyclic permutations of each other
+public static boolean is_cyclic_permutation(String s1, String s2) {
+    if (s1.length() != s2.length()) return false;
+
+    int n = s1.length();
+    for (int i = 0; i < n; i++) {
+        boolean is_permutation = true;
+        for (int j = 0; j < n; j++) {
+            if (s1.charAt(j) != s2.charAt((i + j) % n)) {
+                is_permutation = false;
+                break;
             }
         }
-        return false;
+        if (is_permutation) return true;
     }
+
+    return false;
+}
 }