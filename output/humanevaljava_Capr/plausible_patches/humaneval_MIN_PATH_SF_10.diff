diff --git a/src/main/java/humaneval/buggy/MIN_PATH.java b/src/main/java/humaneval/buggy/MIN_PATH.java
index c19fee5..eb970ad 100644
--- a/src/main/java/humaneval/buggy/MIN_PATH.java
+++ b/src/main/java/humaneval/buggy/MIN_PATH.java
@@ -32,24 +32,29 @@ package humaneval.buggy;
  */
 
 public class MIN_PATH {
-    public static int[] min_path(int[][] grid, int k) {
-        int n = grid.length;
-        int val = n * n + 1;
-        for(int i = 0; i < n; i++) {
-            for(int j = 0; j < n; j++) {
-                if(grid[i][j] == 1) {
-                    if(i != 0) val = Math.max(val, grid[i][j + 1]);
-                    if(j != 0) val = Math.min(val, grid[i - 1][j]);
-                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);
-                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);
-                }
+public static int[] min_path(int[][] grid, int k) {
+    int n = grid.length;
+    int val = Integer.MAX_VALUE;
+    for(int i = 0; i < n; i++) {
+        for(int j = 0; j < n; j++) {
+            if(grid[i][j] == 1) {
+                int tmpVal = Integer.MAX_VALUE;
+                if(i > 0 && grid[i-1][j]!=0) tmpVal = Math.min(tmpVal, grid[i-1][j]);
+                if(j > 0 && grid[i][j-1]!=0) tmpVal = Math.min(tmpVal, grid[i][j-1]);
+                if(i < n-1 && grid[i+1][j]!=0) tmpVal = Math.min(tmpVal, grid[i+1][j]);
+                if(j < n-1 && grid[i][j+1]!=0) tmpVal = Math.min(tmpVal, grid[i][j+1]);
+                if(tmpVal != Integer.MAX_VALUE)
+                    val = Math.min(tmpVal, val);
             }
         }
-        int[] ans = new int[k];
-        for(int i = 0; i < k; i++) {
-            if((i % 2) == 0) ans[i] = 1;
-            else ans[i] = val;
-        }
-        return ans;
     }
+    int[] ans = new int[k];
+    for(int i = 0; i < k; i++) {
+        if(i%2 == 0)
+            ans[i] = 1;
+        else
+            ans[i] = val == Integer.MAX_VALUE ? (((i % 2 == 1) && (i+1 <= k)) ? 1 : -1) : val;
+    }
+    return ans;
+}
 }