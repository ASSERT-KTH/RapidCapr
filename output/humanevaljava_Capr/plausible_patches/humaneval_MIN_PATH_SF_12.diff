diff --git a/src/main/java/humaneval/buggy/MIN_PATH.java b/src/main/java/humaneval/buggy/MIN_PATH.java
index c19fee5..ca6d5c0 100644
--- a/src/main/java/humaneval/buggy/MIN_PATH.java
+++ b/src/main/java/humaneval/buggy/MIN_PATH.java
@@ -32,24 +32,29 @@ package humaneval.buggy;
  */
 
 public class MIN_PATH {
-    public static int[] min_path(int[][] grid, int k) {
-        int n = grid.length;
-        int val = n * n + 1;
-        for(int i = 0; i < n; i++) {
-            for(int j = 0; j < n; j++) {
-                if(grid[i][j] == 1) {
-                    if(i != 0) val = Math.max(val, grid[i][j + 1]);
-                    if(j != 0) val = Math.min(val, grid[i - 1][j]);
-                    if(i != n - 1) val = Math.min(val, grid[i - 1][j]);
-                    if(j != n + 1) val = Math.max(val, grid[i][j - 1]);
-                }
+public static int[] min_path(int[][] grid, int k){
+    int n=grid.length;
+    int val=Integer.MAX_VALUE;
+
+    for(int i=0;i<n;i++){
+        for(int j=0;j<n;j++){
+            if(grid[i][j]==1){
+                int tmp=Integer.MAX_VALUE;
+                if(i>0) tmp=Math.min(tmp, grid[i-1][j]!=0 ? grid[i-1][j] : Integer.MAX_VALUE);
+                if(j>0) tmp=Math.min(tmp, grid[i][j-1]!=0 ? grid[i][j-1] : Integer.MAX_VALUE);
+                if(i<n-1) tmp=Math.min(tmp, grid[i+1][j]!=0 ? grid[i+1][j] : Integer.MAX_VALUE);
+                if(j<n-1) tmp=Math.min(tmp, grid[i][j+1]!=0 ? grid[i][j+1] : Integer.MAX_VALUE);
+                val=Math.min(val, tmp);
             }
         }
-        int[] ans = new int[k];
-        for(int i = 0; i < k; i++) {
-            if((i % 2) == 0) ans[i] = 1;
-            else ans[i] = val;
-        }
-        return ans;
     }
+
+    int[] res=new int[k];
+
+    for(int i=0;i<k;i++){
+        if(i%2==0) res[i]=1;
+        else res[i]=(val!=Integer.MAX_VALUE ? val : (i+1<k ? 1 : -1));
+    }
+    return res;
+}
 }