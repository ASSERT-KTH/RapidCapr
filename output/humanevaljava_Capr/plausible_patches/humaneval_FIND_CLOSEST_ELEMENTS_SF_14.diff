diff --git a/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java b/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java
index 72388af..d493218 100644
--- a/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java
+++ b/src/main/java/humaneval/buggy/FIND_CLOSEST_ELEMENTS.java
@@ -1,25 +1,35 @@
 package humaneval.buggy;
 
 public class FIND_CLOSEST_ELEMENTS {
-    public static double[] find_closest_elements(double[] numbers) {
-        double[] result = new double[2];
+public static double[] find_closest_elements(double[] numbers) {
+    if (numbers == null || numbers.length < 2) {
+        throw new IllegalArgumentException("Input array must contain at least 2 elements");
+    }
 
-        double distance = Double.MAX_VALUE;
-        for (int i = 0; i < numbers.length; i += 1){
-            for (int j = 0; j < numbers.length; j += 1){
-                double new_distance = Math.abs(numbers[i] - numbers[j]);
-                if (new_distance < distance){
-                    distance = new_distance;
-                    if (numbers[i] < numbers[j]){
-                        result[0] = numbers[i];
-                        result[1] = numbers[j];
-                    } else{
-                        result[0] = numbers[j];
-                        result[1] = numbers[i];
-                    }
-                }
+    double[] result = new double[2];
+    double minDistance = Double.POSITIVE_INFINITY;
+    int index1 = 0, index2 = 1;
+    
+    for (int i = 0; i < numbers.length - 1; i++) {
+        for (int j = i + 1; j < numbers.length; j++) {
+            double distance = Math.abs(numbers[i] - numbers[j]);
+            if (distance < minDistance) {
+                minDistance = distance;
+                index1 = i;
+                index2 = j;
             }
         }
-        return result;
     }
+    
+    // Make sure the result array contains the elements in the correct order
+    if (numbers[index1] < numbers[index2]) {
+        result[0] = numbers[index1];
+        result[1] = numbers[index2];
+    } else {
+        result[0] = numbers[index2];
+        result[1] = numbers[index1];
+    }
+
+    return result;
+}
 }