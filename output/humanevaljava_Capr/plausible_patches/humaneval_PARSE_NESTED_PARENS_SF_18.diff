diff --git a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java
index 6bc914f..8133b52 100644
--- a/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java
+++ b/src/main/java/humaneval/buggy/PARSE_NESTED_PARENS.java
@@ -4,22 +4,38 @@ import java.util.ArrayList;
 import java.util.List;
 
 public class PARSE_NESTED_PARENS {
-    public static List<Integer> parse_nested_parens(String paren_string) {
-        String[] paren_groups = paren_string.split(" ");
-        List<Integer> result = new ArrayList<Integer>();
+public static List<Integer> parse_nested_parens(String paren_string) {
+    List<Integer> result = new ArrayList<>();
 
-        for (String paren_group : paren_groups) {
-            int depth = 0;
-            int max_depth = 0;
-            for (char c : paren_group.toCharArray()){
-                if (c == '('){
-                    depth += 1;
-                    max_depth = Math.max(depth, max_depth);
+    String[] paren_groups = paren_string.split(" ");
+    for (String group : paren_groups) {
+        int depth = 0;
+        int max_depth = 0;
+        boolean is_valid = true;
+
+        for (char c : group.toCharArray()) {
+            if (c == '(') {
+                depth++;
+                max_depth = Math.max(max_depth, depth);
+            } else if (c == ')') {
+                depth--;
+                if (depth < 0) {
+                    is_valid = false;
+                    break;
                 }
+            } else if (!Character.isWhitespace(c)) {
+                is_valid = false;
+                break;
             }
-            result.add(max_depth);
         }
 
-        return result;
+        if (depth != 0 || !is_valid) {
+            result.add(-1);
+        } else {
+            result.add(max_depth);
+        }
     }
+
+    return result;
+}
 }