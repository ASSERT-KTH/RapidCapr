diff --git a/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java b/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java
index 4389f67..4e85e15 100644
--- a/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java
+++ b/src/main/java/humaneval/buggy/ANTI_SHUFFLE.java
@@ -14,13 +14,48 @@ anti_shuffle('hello') returns 'ehllo'
 anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor' */
 
 public class ANTI_SHUFFLE {
-    public static String anti_shuffle(String s) {
-        String result = "";
-        for (String str : s.split(" ")) {
-            char[] chars = str.toCharArray();
-            Arrays.sort(chars);
-            result += new String(chars);
+public static String anti_shuffle(String s) {
+    String[] words = s.split(" ");
+    StringBuilder result = new StringBuilder();
+
+    for (String word : words) {
+        char[] chars = word.toCharArray();
+
+        // Using quicksort algorithm instead of Arrays.sort()
+        quickSort(chars, 0, chars.length-1);
+
+        result.append(chars);
+        result.append(" ");
+    }
+
+    return result.toString().trim();
+
+}
+
+// Quicksort algorithm
+public static void quickSort(char[] array, int low, int high) {
+    if (low < high) {
+        int pivotIndex = partition(array, low, high);
+        quickSort(array, low, pivotIndex - 1);
+        quickSort(array, pivotIndex + 1, high);
+    }
+}
+
+public static int partition(char[] array, int low, int high) {
+    char pivot = array[high];
+    int i = low - 1;
+    for (int j = low; j < high; j++) {
+        if (array[j] < pivot) {
+            i++;
+            char temp = array[i];
+            array[i] = array[j];
+            array[j] = temp;
         }
-        return result;
     }
+    char temp = array[i+1];
+    array[i+1] = array[high];
+    array[high] = temp;
+
+    return i+1;
+}
 }