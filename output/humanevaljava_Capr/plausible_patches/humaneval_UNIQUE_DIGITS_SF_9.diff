diff --git a/src/main/java/humaneval/buggy/UNIQUE_DIGITS.java b/src/main/java/humaneval/buggy/UNIQUE_DIGITS.java
index 4045209..25e8a1e 100644
--- a/src/main/java/humaneval/buggy/UNIQUE_DIGITS.java
+++ b/src/main/java/humaneval/buggy/UNIQUE_DIGITS.java
@@ -17,24 +17,48 @@ import java.util.Collections;
  */
 
 public class UNIQUE_DIGITS {
-    public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {
-        ArrayList<Integer> res = new ArrayList<Integer>();
-        for(int i : x) {
-            int num = i;
-            boolean all_odd = true;
-            while(num > 0) {
-                int curr_digit = num % 10;
-                if((curr_digit % 2) != 0) {
-                    all_odd = true;
-                    break;
-                }
-                num /= 10;
+public static ArrayList<Integer> unique_digits(ArrayList<Integer> x) {
+    ArrayList<Integer> res = new ArrayList<Integer>();
+    for(int i : x) {
+        int num = i;
+        boolean all_odd = true;
+        while(num > 0) {
+            int curr_digit = num % 10;
+            if(curr_digit % 2 == 0) {
+                all_odd = false;
+                break;
             }
-            if(all_odd) {
-                res.add(i);
+            num /= 10;
+        }
+        if(all_odd) {
+            res.add(i);
+        }
+    }
+    // Use radix sort to sort the list
+    int maxDigit = Integer.MIN_VALUE;
+    for(int n : res) {
+        String numStr = Integer.toString(n);
+        maxDigit = Math.max(maxDigit, numStr.length());
+    }
+    for(int d = 0; d < maxDigit; d++) {
+        ArrayList<ArrayList<Integer>> buckets = new ArrayList<>(10);
+        for(int i = 0; i < 10; i++) {
+            buckets.add(new ArrayList<Integer>());
+        }
+        for(int n : res) {
+            String numStr = Integer.toString(n);
+            if(numStr.length() < d + 1) {
+                buckets.get(0).add(n);
+            } else {
+                int digit = Character.getNumericValue(numStr.charAt(numStr.length() - d - 1));
+                buckets.get(digit).add(n);
             }
         }
-        Collections.sort(res);
-        return res;
+        res.clear();
+        for(int i = 0; i < 10; i++) {
+            res.addAll(buckets.get(i));
+        }
     }
+    return res;
+}
 }