diff --git a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
index 763802b..e01ab3a 100644
--- a/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
+++ b/src/main/java/humaneval/buggy/CYCPATTERN_CHECK.java
@@ -9,14 +9,39 @@ package humaneval.buggy;
 // cycpattern_check("himenss","simen") => True
 
 public class CYCPATTERN_CHECK {
-    public static boolean cycpattern_check(String a, String b) {
-        int l = b.length();
-        String pat = b;
-        for (int i = 0; i < a.length(); i += 1) {
-            for (int j = 0; j < l; j += 1) {
-                if (a.substring(i, i + l).equals(pat.substring(j, j + l))) return true;
-            }
-        }
-        return false;
+public static boolean cycpattern_check(String a, String b) {
+    int n = a.length();
+    int m = b.length();
+    if (n < m) return false;
+
+    // Check if b is a substring of a
+    if (a.contains(b)) return true;
+
+    // Check if b can be obtained by cyclically permuting a substring of a
+    for (int i = 0; i < n; i++) {
+        if (n - i < m) break;
+
+        String sub_a = a.substring(i, i + m);
+        if (is_cyclic_permutation(sub_a, b)) return true;
     }
+
+    return false;
+}
+
+// Helper function to check if two strings are cyclic permutations of each other
+public static boolean is_cyclic_permutation(String s1, String s2) {
+    if (s1.length() != s2.length()) return false;
+
+    // Generate all cyclic permutations of s1 and check if s2 is among them
+    String cycles = s1;
+    for (int i = 0; i < s1.length(); i++) {
+        if (cycles.equals(s2)) return true;
+        StringBuilder sb = new StringBuilder();
+        sb.append(cycles.charAt(s1.length() - 1));
+        sb.append(cycles.substring(0, s1.length() - 1));
+        cycles = sb.toString();
+    }
+    
+    return false;
+}
 }