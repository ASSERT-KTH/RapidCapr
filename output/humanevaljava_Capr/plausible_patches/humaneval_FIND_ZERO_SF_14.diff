diff --git a/src/main/java/humaneval/buggy/FIND_ZERO.java b/src/main/java/humaneval/buggy/FIND_ZERO.java
index 9e2c137..4b2abd9 100644
--- a/src/main/java/humaneval/buggy/FIND_ZERO.java
+++ b/src/main/java/humaneval/buggy/FIND_ZERO.java
@@ -11,23 +11,40 @@ public class FIND_ZERO {
         return sum;
     }
 
-    public static double find_zero(List<Double> xs){
-        double begin = -1.;
-        double end = 1.;
+public static double find_zero(List<Double> xs) {
+    //initialize variables
+    double begin = -1000.0;
+    double end = 1000.0;
+    double tolerance = 1e-10;
+    double mid = 0.0;
 
-        while (poly(xs, begin) * poly(xs, end) > 0) {
-            begin *= 2.;
-            end *= 2.;
-        }
-        while (end - begin > 1e-10) {
-            double center = (begin + end) / 2.;
-            
-            if (poly(xs, begin) * poly(xs, end) < 0) {
-                begin = center;
-            } else {
-                end = center;
-            }
-        }
+    //check for root at endpoint
+    if (Math.abs(poly(xs, begin)) < tolerance) {
         return begin;
+    } else if (Math.abs(poly(xs, end)) < tolerance) {
+        return end;
+    }
+
+    //expand interval until function changes sign
+    while (poly(xs, begin) * poly(xs, end) > 0) {
+        begin *= 2.0;
+        end *= 2.0;
+    }
+
+    //bisection method to find zero
+    while (Math.abs(end - begin) > tolerance && Math.abs(poly(xs, mid)) > tolerance) {
+        mid = (begin + end) / 2.0;
+        double fMid = poly(xs, mid);
+
+        if (fMid == 0.0) {
+            return mid;
+        } else if (poly(xs, begin) * fMid < 0) {
+            end = mid;
+        } else {
+            begin = mid;
+        }
     }
+
+    return mid;
+}
 }