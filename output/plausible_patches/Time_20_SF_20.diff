diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864..c5f02c38 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2537,17 +2537,31 @@ public class DateTimeFormatterBuilder {
             return MAX_LENGTH;
         }
 
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
-            for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+    String str = text.substring(position);
+    int strLen = str.length();
+    for (String id : ALL_IDS) {
+        int idLen = id.length();
+        int idx = str.indexOf(id);
+        while (idx >= 0) {
+            // check if id starts at the beginning of the string or after whitespace
+            if (idx == 0 || Character.isWhitespace(str.charAt(idx - 1))) {
+                // check if there is whitespace or / after id
+                if (idx + idLen == strLen || Character.isWhitespace(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '/') {
+                    // check that the id is not part of a longer time zone ID
+                    char nextChar = idx + idLen < strLen ? str.charAt(idx + idLen) : '\0';
+                    if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {
+                        bucket.setZone(DateTimeZone.forID(id));
+                        return position + idx + idLen;
+                    }
                 }
             }
-            return ~position;
+            idx = str.indexOf(id, idx + 1);
         }
     }
+    return ~position;
+}
+    }
 
     //-----------------------------------------------------------------------
     static class Composite