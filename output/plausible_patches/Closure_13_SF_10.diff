diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..3b1ad776 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -111,28 +111,30 @@ class PeepholeOptimizationsPass
   }
 
   private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
     if (!shouldVisit(node)) {
       return;
     }
 
     int visits = 0;
-    do {
+    while (true) {
       Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
+      while (c != null) {
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
       visit(node);
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+      if (visits >= 10000) {
+        throw new IllegalStateException("Too many iterations.");
+      }
+
+      if (!shouldRetraverse(node)) {
+        break;
+      }
+    }
 
     exitNode(node);
   }