diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..f861d186 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -205,29 +205,29 @@ class PeepholeSubstituteAlternateSyntax
     }
   }
 
-  private Node tryFoldSimpleFunctionCall(Node n) {
+private Node tryFoldSimpleFunctionCall(Node n) {
     Preconditions.checkState(n.isCall());
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
-        n.getParent().replaceChild(n, addition);
-        reportCodeChange();
-        return addition;
-      }
+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals("String")) {
+        Node value = callTarget.getNext();
+        if (value != null) {
+            if (value.getNext() == null && NodeUtil.isImmutableValue(value)) {
+                Node addition = IR.add(IR.string("").srcref(callTarget), value.detachFromParent());
+                n.getParent().replaceChild(n, addition);
+                reportCodeChange();
+                return addition;
+            } else if (value.getNext() != null && value.getNext().isString()) {
+                String left = value.isString() ? value.getString() : "";
+                String right = value.getNext().getString();
+                Node addition = IR.string(left + right).srcref(n);
+                n.getParent().replaceChild(n, addition);
+                reportCodeChange();
+                return addition;
+            }
+        }
     }
     return n;
-  }
+}
 
   private Node tryFoldImmediateCallToBoundFunction(Node n) {
     // Rewriting "(fn.bind(a,b))()" to "fn.call(a,b)" makes it inlinable