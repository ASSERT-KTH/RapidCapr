diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
index c507c924..adcadad9 100644
--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java
+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
@@ -185,23 +185,24 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
     return extractClassNameIfGoog(node, parent, "goog.require");
   }
 
-  private static String extractClassNameIfGoog(Node node, Node parent,
-      String functionName){
-    String className = null;
+private static String extractClassNameIfGoog(Node node, Node parent, String functionName) {
     if (NodeUtil.isExprCall(parent)) {
-      Node callee = node.getFirstChild();
-      if (callee != null && callee.getType() == Token.GETPROP) {
-        String qualifiedName = callee.getQualifiedName();
-        if (functionName.equals(qualifiedName)) {
-          Node target = callee.getNext();
-          if (target != null) {
-            className = target.getString();
-          }
+        Node callee = node.getFirstChild();
+        if (callee != null && callee.getType() == Token.GETPROP) {
+            String qualifiedName = callee.getQualifiedName();
+            if (functionName.equals(qualifiedName)) {
+                Node target = callee.getNext();
+                if (target != null && target.getType() == Token.STRING) {
+                    String className = target.getString();
+                    if (!className.equals("prototype") && target.getNext() == null) {
+                        return className;
+                    }
+                }
+            }
         }
-      }
     }
-    return className;
-  }
+    return null;
+}
 
   /**
    * Use closure's implementation.