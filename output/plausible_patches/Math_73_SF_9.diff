diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 8142b5edb..e90ca5bab 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -95,50 +95,59 @@ public class BrentSolver extends UnivariateRealSolverImpl {
      * @throws IllegalArgumentException if initial is not between min and max
      * (even if it <em>is</em> a root)
      */
-    public double solve(final UnivariateRealFunction f,
-                        final double min, final double max, final double initial)
+public double solve(final UnivariateRealFunction f,
+                    final double min, final double max, final double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
 
-        clearResult();
-        verifySequence(min, initial, max);
+    clearResult();
+    verifySequence(min, initial, max);
 
-        // return the initial guess if it is good enough
-        double yInitial = f.value(initial);
-        if (Math.abs(yInitial) <= functionValueAccuracy) {
-            setResult(initial, 0);
-            return result;
-        }
+    // Evaluate function at initial guess
+    final double yInitial = f.value(initial);
 
-        // return the first endpoint if it is good enough
-        double yMin = f.value(min);
+    // Check if initial guess is already a root
+    if (Math.abs(yInitial) <= functionValueAccuracy) {
+        setResult(initial, 0);
+        return result;
+    }
+
+    // Evaluate function at endpoints
+    final double yMin = f.value(min);
+    final double yMax = f.value(max);
+
+    // Check if endpoints are equal
+    if (yMin == yMax) {
         if (Math.abs(yMin) <= functionValueAccuracy) {
-            setResult(yMin, 0);
+            setResult(min, 0);
             return result;
         }
+        throw new IllegalArgumentException("Endpoints have same value and do not bracket root.");
+    }
 
-        // reduce interval if min and initial bracket the root
-        if (yInitial * yMin < 0) {
-            return solve(f, min, yMin, initial, yInitial, min, yMin);
+    // Check if initial guess is equal to one of the endpoints
+    if (initial == min) {
+        if (Math.abs(yMin) <= functionValueAccuracy) {
+            setResult(min, 0);
+            return result;
         }
-
-        // return the second endpoint if it is good enough
-        double yMax = f.value(max);
+        throw new IllegalArgumentException("Initial guess is equal to the left endpoint but does not bracket root.");
+    } else if (initial == max) {
         if (Math.abs(yMax) <= functionValueAccuracy) {
-            setResult(yMax, 0);
+            setResult(max, 0);
             return result;
         }
+        throw new IllegalArgumentException("Initial guess is equal to the right endpoint but does not bracket root.");
+    }
 
-        // reduce interval if initial and max bracket the root
-        if (yInitial * yMax < 0) {
-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);
-        }
-
-
-        // full Brent algorithm starting with provided initial guess
-        return solve(f, min, yMin, max, yMax, initial, yInitial);
-
+    // Make sure endpoints bracket a root and yMin and yMax have opposite signs
+    if (yMin * yMax > 0) {
+        throw new IllegalArgumentException("Endpoints do not bracket a root.");
     }
 
+    // full Brent algorithm starting with provided initial guess
+    return solve(f, min, yMin, max, yMax, initial, yInitial);
+}
+
     /**
      * Find a zero in the given interval.
      * <p>