diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..887d8786 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,33 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
+private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
-      return true;
+        return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+    String leftName = null;
+    Node currentNode = node.getFirstChild();
+    while (currentNode != null) {
+        if (!currentNode.isGetProp()) {
+            if (currentNode.isName() && isNameAssignedTo(currentNode.getString(), replacement)) {
+                return false;
+            }
+            break;
+        }
+        currentNode = currentNode.getFirstChild();
     }
 
+    if (leftName == null && currentNode.isName()) {
+        leftName = currentNode.getString();
+    }
+    if (leftName != null && isNameAssignedTo(leftName, replacement)) {
+        return false;
+    }
     return true;
-  }
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +253,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}