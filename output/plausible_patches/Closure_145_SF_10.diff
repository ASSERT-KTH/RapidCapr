diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..d415da17 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,39 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+private boolean isOneExactlyFunctionOrDo(Node n) {
+  if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+    return true;
+  } else if (n.getType() == Token.BLOCK) {
+    if (n.getFirstChild() == null) {
+      // empty blocks are valid 'DO' statements
+      return true;
+    } else if (n.getFirstChild() == n.getLastChild()) {
+      // check if the only child is a 'FUNCTION' or 'DO'
+      return isOneExactlyFunctionOrDo(n.getFirstChild());
+    }
+  } else if (n.getType() == Token.LABEL) {
+    // get the next node after the label
+    Node child = n.getFirstChild().getNext();
+    if (child.getType() == Token.BLOCK) {
+      // if the next node is a block, check if it contains a single 'FUNCTION' or 'DO'
+      int count = 0;
+      for (Node grandchild = child.getFirstChild(); grandchild != null; grandchild = grandchild.getNext()) {
+        if (grandchild.getType() == Token.FUNCTION || grandchild.getType() == Token.DO) {
+          count++;
+          if (count > 1) {
+            return false;
+          }
+        }
+      }
+      return count == 1;
+    } else {
+      // otherwise, check if the next node is a 'FUNCTION' or 'DO'
+      return isOneExactlyFunctionOrDo(child);
+    }
   }
+  return false;
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike