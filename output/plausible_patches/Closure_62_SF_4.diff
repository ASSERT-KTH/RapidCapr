diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
index 5a4f884c..08011240 100644
--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
@@ -63,52 +63,46 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {
     return format(warning, true);
   }
 
-  private String format(JSError error, boolean warning) {
-    // extract source excerpt
+private String format(JSError error, boolean warning) {
     SourceExcerptProvider source = getSource();
-    String sourceExcerpt = source == null ? null :
-        excerpt.get(
-            source, error.sourceName, error.lineNumber, excerptFormatter);
+    String sourceExcerpt = source == null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);
 
-    // formatting the message
-    StringBuilder b = new StringBuilder();
+    StringBuilder builder = new StringBuilder();
     if (error.sourceName != null) {
-      b.append(error.sourceName);
-      if (error.lineNumber > 0) {
-        b.append(':');
-        b.append(error.lineNumber);
-      }
-      b.append(": ");
+        builder.append(error.sourceName);
+        if (error.lineNumber > 0) {
+            builder.append(':');
+            builder.append(error.lineNumber);
+        }
+        builder.append(": ");
     }
 
-    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
-    b.append(" - ");
-
-    b.append(error.description);
-    b.append('\n');
+    builder.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));
+    builder.append(" - ");
+    builder.append(error.description);
+    builder.append('\n');
     if (sourceExcerpt != null) {
-      b.append(sourceExcerpt);
-      b.append('\n');
-      int charno = error.getCharno();
-
-      // padding equal to the excerpt and arrow at the end
-      // charno == sourceExpert.length() means something is missing
-      // at the end of the line
-      if (excerpt.equals(LINE)
-          && 0 <= charno && charno < sourceExcerpt.length()) {
-        for (int i = 0; i < charno; i++) {
-          char c = sourceExcerpt.charAt(i);
-          if (Character.isWhitespace(c)) {
-            b.append(c);
-          } else {
-            b.append(' ');
-          }
+        builder.append(sourceExcerpt);
+        builder.append('\n');
+        int charno = error.getCharno();
+        if (excerpt.equals(LINE) && 0 <= charno && charno <= sourceExcerpt.length()) {
+            for (int i = 0; i < charno; i++) {
+                char c = sourceExcerpt.charAt(i);
+                builder.append(Character.isWhitespace(c) ? c : ' ');
+            }
+            builder.append("^\n");
+        } else if (excerpt.equals(LINE) && charno > sourceExcerpt.length()) {
+            for (int i = 0; i < sourceExcerpt.length(); i++) {
+                char c = sourceExcerpt.charAt(i);
+                builder.append(Character.isWhitespace(c) ? c : ' ');
+            }
+            builder.append('^');
+            builder.append('\n');
         }
-        b.append("^\n");
-      }
     }
-    return b.toString();
-  }
+
+    return builder.toString();
+}
 
   /**
    * Formats a region by appending line numbers in front, e.g.