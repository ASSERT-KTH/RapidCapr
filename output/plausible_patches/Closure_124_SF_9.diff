diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..fc31bbfc 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,22 +203,54 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
+private boolean isSafeReplacement(Node node, Node replacement) {
+  // No checks are needed for simple names.
+  if (node.isName()) {
+    return true;
+  }
+
+  // Handle getprop accesses.
+  if (node.isGetProp()) {
+    Node leftChild = node.getFirstChild();
+    while (leftChild.isGetProp()) {
+      leftChild = leftChild.getFirstChild();
     }
-    Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {
       return false;
     }
 
-    return true;
+    if (leftChild.isString()) {
+      String computedPropName = leftChild.getString();
+      if (isNameAssignedTo(computedPropName, replacement)) {
+        return false;
+      }
+    }
   }
 
+  // Handle call or new expressions.
+  if (node.isCall()) {
+    Node callee = node.getFirstChild();
+    if (callee.isGetProp()) {
+      if (callee.getLastChild().isName() && isNameAssignedTo(callee.getLastChild().getString(), replacement)) {
+        return false;
+      }
+      if (callee.getLastChild().isString() && isNameAssignedTo(callee.getLastChild().getString(), replacement)) {
+        return false;
+      }
+    }
+  }
+
+  if (node.isNew()) {
+    Node constructor = node.getFirstChild();
+    if (constructor.isGetProp() && isNameAssignedTo(constructor.getLastChild().getString(), replacement)) {
+      return false;
+    }
+  }
+
+  return true;
+}
+
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */
@@ -241,4 +273,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}