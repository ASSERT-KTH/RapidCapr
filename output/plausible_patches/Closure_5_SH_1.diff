diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2b85d84f..55404f5f 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -173,6 +173,30 @@ class InlineObjectLiterals implements CompilerPass {
 
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
+          // Deleting a property has different semantics from deleting
+          // a variable, so deleted properties should not be inlined.
+          if (parent.isGetProp() && parent.getParent().isDelProp()) {
+            return false;
+          }
+
+          // NOTE(nicksantos): This pass's object-splitting algorithm has
+          // a blind spot. It assumes that if a property isn't defined on an
+          // object, then the value is undefined. This is not true, because
+          // Object.prototype can have arbitrary properties on it.
+          //
+          // We short-circuit this problem by bailing out if we see a reference
+          // to a property that isn't defined on the object literal. This
+          // isn't a perfect algorithm, but it should catch most cases.
+          if (parent.isGetProp()) {
+            String propertyName = parent.getLastChild().getString();
+            if (!validProperties.contains(propertyName)) {
+              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
+                validProperties.add(propertyName);
+              } else {
+                return false;
+              }
+            }
+          }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an