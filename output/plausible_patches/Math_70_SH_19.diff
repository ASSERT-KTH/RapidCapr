diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 3f669271a..821109357 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -69,7 +69,30 @@ public class BisectionSolver extends UnivariateRealSolverImpl {
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+        // Throw an exception if min and max have the same value
+        if (min == max) {
+            return min;
+        }
+
+        // Use initial value as a starting point for the solver if it's within the range
+        if (initial < min || initial > max) {
+            initial = (min + max) / 2.0;
+        }
+
+        // Create a new instance of the solver and set the tolerance and maximum iterations
+        BrentSolver solver = new BrentSolver();
+        solver.setAbsoluteAccuracy(getAbsoluteAccuracy());
+        solver.setMaximalIterationCount(getMaximalIterationCount());
+
+        // Solve the function using the given solver
+        double root = solver.solve(f, min, max, initial);
+
+        // If no root is found, return the initial value
+        if (Double.isNaN(root)) {
+            return initial;
+        }
+
+        return root;
     }
 
     /** {@inheritDoc} */