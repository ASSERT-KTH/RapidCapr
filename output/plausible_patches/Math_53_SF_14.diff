diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..99e2fed6f 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,11 +147,24 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
+    public Complex add(Complex rhs) throws NullArgumentException {
         MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+        double newReal = this.real + rhs.getReal();
+        double newImaginary = this.imaginary + rhs.getImaginary();
+        Complex result;
+        if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {
+            result = createComplex(Double.NaN, Double.NaN);
+        } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {
+            double sign = (this.real >= 0) ? 1.0 : -1.0;
+            result = createComplex(Double.POSITIVE_INFINITY * sign, Double.POSITIVE_INFINITY * sign);
+        } else if (Double.isInfinite(newReal)) {
+            result = createComplex(newReal, rhs.getImaginary() + this.imaginary);
+        } else if (Double.isInfinite(newImaginary)) {
+            result = createComplex(rhs.getReal() + this.real, newImaginary);
+        } else {
+            result = createComplex(newReal, newImaginary);
+        }
+        return result;
     }
 
     /**