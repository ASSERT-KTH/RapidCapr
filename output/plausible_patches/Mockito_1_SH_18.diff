diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..fa58a6187 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,7 +120,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArguments = invocation.getRawArguments();
+    for (int position = 0; position < matchers.size(); position++) {
+        Matcher m = matchers.get(position);
+        if (m instanceof CapturesArguments) {
+            Object arg;
+            if (invocation.getMethod().isVarArgs() && position == rawArguments.length - 1 && isVarargMatcher(m)) {
+                Object varArgs = rawArguments[rawArguments.length - 1];
+                if (varArgs == null) {
+                    arg = new Object[]{null};
+                } else if (varArgs.getClass().isArray()) {
+                    int varArgLength = Array.getLength(varArgs);
+                    Object[] varArgArray = new Object[varArgLength];
+                    for (int i = 0; i < varArgLength; i++) {
+                        varArgArray[i] = Array.get(varArgs, i);
+                    }
+                    arg = varArgArray;
+                } else {
+                    arg = new Object[]{varArgs};
+                }
+            } else {
+                arg = invocation.getArgumentAt(position, Object.class);
+            }
+            ((CapturesArguments) m).captureFrom(arg);
+        }
+    }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {