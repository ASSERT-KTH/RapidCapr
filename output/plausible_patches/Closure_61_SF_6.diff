diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index 1844b18a..5e90202b 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -923,57 +923,60 @@ public final class NodeUtil {
    * @param compiler A compiler object to provide program state changing
    *     context information. Can be null.
    */
-  static boolean functionCallHasSideEffects(
-      Node callNode, @Nullable AbstractCompiler compiler) {
-    if (callNode.getType() != Token.CALL) {
-      throw new IllegalStateException(
-          "Expected CALL node, got " + Token.name(callNode.getType()));
+static boolean functionCallHasSideEffects(Node callNode, AbstractCompiler compiler) {
+    if (callNode == null || callNode.getType() != Token.CALL) {
+        return false;
     }
 
     if (callNode.isNoSideEffectsCall()) {
-      return false;
+        return false;
     }
 
     Node nameNode = callNode.getFirstChild();
+    if (nameNode == null) {
+        return false;
+    }
 
-    // Built-in functions with no side effects.
+    // Check if the function call is a built-in function with no side effects.
+    String functionName = null;
     if (nameNode.getType() == Token.NAME) {
-      String name = nameNode.getString();
-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
-        return false;
-      }
-    } else if (nameNode.getType() == Token.GETPROP) {
-      if (callNode.hasOneChild()
-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(
-                nameNode.getLastChild().getString())) {
+        functionName = nameNode.getString();    
+    } else if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {
+        functionName = nameNode.getLastChild().getString();
+    }
+    
+    if (functionName != null && BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(functionName)) {
         return false;
-      }
+    }
 
-      if (callNode.isOnlyModifiesThisCall()
-          && evaluatesToLocalValue(nameNode.getFirstChild())) {
-        return false;
-      }
+    // Check if the function call is a property access of an object with methods without side effects.
+    if (nameNode.getType() == Token.GETPROP && nameNode.getLastChild().getType() == Token.STRING) {
+        if (callNode.hasOneChild() && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
+            return false;
+        }
 
-      // Functions in the "Math" namespace have no side effects.
-
-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
-        if (nameNode.getFirstChild().getType() == Token.REGEXP
-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
-          return false;
-        } else if (nameNode.getFirstChild().getType() == Token.STRING
-            && STRING_REGEXP_METHODS.contains(
-                nameNode.getLastChild().getString())) {
-          Node param = nameNode.getNext();
-          if (param != null &&
-              (param.getType() == Token.STRING
-                  || param.getType() == Token.REGEXP))
-          return false;
+        if (callNode.isOnlyModifiesThisCall() && evaluatesToLocalValue(nameNode.getFirstChild())) {
+            return false;
+        }
+
+        if (nameNode.getFirstChild().getType() == Token.NAME && "Math".equals(nameNode.getFirstChild().getString())) {
+            return false;
+        }
+
+        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
+            if (nameNode.getFirstChild().getType() == Token.REGEXP && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+                return false;
+            } else if (nameNode.getFirstChild().getType() == Token.STRING && STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
+                Node param = nameNode.getNext();
+                if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {
+                    return false;
+                }
+            }
         }
-      }
     }
 
     return true;
-  }
+}
 
   /**
    * @return Whether the call has a local result.