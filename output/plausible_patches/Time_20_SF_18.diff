diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864..f3fdd64c 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2537,16 +2537,35 @@ public class DateTimeFormatterBuilder {
             return MAX_LENGTH;
         }
 
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
-            for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
-                }
-            }
-            return ~position;
-        }
+public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+    String str = text.substring(position);
+    int strLen = str.length();
+    for (String id : ALL_IDS) {
+        int idLen = id.length();
+        int idx = str.indexOf(id);
+        while (idx >= 0) {
+            boolean valid = true;
+            // check if id starts at the beginning of the string or after whitespace
+            if (idx != 0 && !Character.isWhitespace(str.charAt(idx - 1))) {
+                valid = false;
+            }
+            // check if there is whitespace or / after id
+            if ((idx + idLen != strLen) && !Character.isWhitespace(str.charAt(idx + idLen)) && str.charAt(idx + idLen) != '/') {
+                valid = false;
+            }
+            // check that the id is not part of a longer time zone ID
+            if (idx + idLen < strLen && (Character.isLetterOrDigit(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '_')) {
+                valid = false;
+            }
+            if (valid) {
+                bucket.setZone(DateTimeZone.forID(id));
+                return position + idx + idLen;
+            }
+            idx = str.indexOf(id, idx + 1);
+        }
+    }
+    return ~position;
+}
     }
 
     //-----------------------------------------------------------------------