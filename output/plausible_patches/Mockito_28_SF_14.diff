diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..1ff33e77c 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,11 +88,24 @@ public class DefaultInjectionEngine {
         }
     }
 
-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
-        }
-    }
+
+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        try {
+            field.setAccessible(true);
+            Object fieldValue = field.get(fieldInstance);
+            if (fieldValue != null && fieldValue.getClass().equals(field.getType())) {
+                continue;
+            }
+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {
+                field.set(fieldInstance, mockCandidate);
+            }
+        } catch (IllegalAccessException e) {
+            throw new RuntimeException("Could not access field " + field.getName(), e);
+        }
+    }
+}
 
     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {
         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();