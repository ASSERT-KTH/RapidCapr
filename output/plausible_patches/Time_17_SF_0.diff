diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 74a3802a..6d5be76c 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1162,21 +1162,28 @@ public abstract class DateTimeZone implements Serializable {
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
         // a bit messy, but will work in all non-pathological cases
-        
+
+        long instantBefore = instant - 3 * DateTimeConstants.MILLIS_PER_HOUR;
+        long instantAfter = instant + 3 * DateTimeConstants.MILLIS_PER_HOUR;
         // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
+        long localBefore = convertUTCToLocal(instantBefore);
+        long localAfter = convertUTCToLocal(instantAfter);
+
+        if (localBefore == localAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
-        
-        // work out range of instants that have duplicate local times
+
+        // if in overlap, prefer later if laterOrEarlier==true
         long local = convertUTCToLocal(instant);
+        if (local == localBefore && earlierOrLater) {
+            return instantAfter;
+        }
+        // if in overlap, prefer earlier if laterOrEarlier==false
+        if (local == localAfter && !earlierOrLater) {
+            return instantBefore;
+        }
+        // not in overlap, either further into DST or out of DST
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
     }
 //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 