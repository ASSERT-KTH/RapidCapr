diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index a0f95db9..17cfb38e 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1563,28 +1563,31 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
-      String functionName, HashMap<String, ObjectType> properties,
-      HashMap<String, ObjectType> currentProperties,
-      ObjectType interfaceType) {
+  private void checkInterfaceConflictProperties(NodeTraversal t, Node n, String functionName,
+                                  HashMap<String, ObjectType> properties,
+                                  HashMap<String, ObjectType> currentProperties,
+                                  ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+        return;
+    }
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+  
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
       if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
+        JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);
+        if (interfaceTypePropertyType == null) {
+          continue;
+        }
+        if (!interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {
+          compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,
+                                      oType.toString(), interfaceType.toString()));
         }
       }
       currentProperties.put(name, interfaceType);
     }
+  
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
       checkInterfaceConflictProperties(t, n, functionName, properties,
           currentProperties, iType);