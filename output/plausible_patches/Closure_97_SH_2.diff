diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..c75ac376 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,24 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    // JavaScript handles zero shifts on signed numbers differently than
+    // Java as an Java int can not represent the unsigned 32-bit number
+    // where JavaScript can so use a long.
+    long lvalLong = lval < 0 ? (long) (lvalInt & 0x7fffffff) + 0x80000000L : lvalInt;
+    result = lvalLong >>> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " +
+          Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +