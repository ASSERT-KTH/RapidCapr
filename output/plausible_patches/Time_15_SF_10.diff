diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java
index a0fe7e2d..78ecb8fc 100644
--- a/src/main/java/org/joda/time/field/FieldUtils.java
+++ b/src/main/java/org/joda/time/field/FieldUtils.java
@@ -132,21 +132,32 @@ public class FieldUtils {
      * @throws ArithmeticException if the value is too big or too small
      * @since 1.2
      */
-    public static long safeMultiply(long val1, int val2) {
-        switch (val2) {
-            case -1:
-                return -val1;
-            case 0:
-                return 0L;
-            case 1:
-                return val1;
+public static long safeMultiply(long val1, int val2) {
+    checkForOverflow(val1, val2);
+    return val1 * val2;
+}
+
+private static void checkForOverflow(long val1, int val2) {
+    if (val1 == 0 || val2 == 0) {
+        return;
+    } else if (val2 == -1) {
+        if (val1 == Long.MIN_VALUE) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
-        long total = val1 * val2;
-        if (total / val2 != val1) {
-          throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+    } else if (val2 == 1) {
+        // no overflow possible
+    } else if (val2 > 0) {
+        if (val1 > Long.MAX_VALUE / val2 ||
+                val1 < Long.MIN_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
+        }
+    } else {
+        if (val1 < Long.MAX_VALUE / val2 ||
+                val1 > Long.MIN_VALUE / val2) {
+            throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
         }
-        return total;
     }
+}
 
     /**
      * Multiply two values throwing an exception if overflow occurs.