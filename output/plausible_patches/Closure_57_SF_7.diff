diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
index c507c924..df9bae97 100644
--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java
+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
@@ -185,23 +185,31 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
     return extractClassNameIfGoog(node, parent, "goog.require");
   }
 
-  private static String extractClassNameIfGoog(Node node, Node parent,
-      String functionName){
-    String className = null;
-    if (NodeUtil.isExprCall(parent)) {
-      Node callee = node.getFirstChild();
-      if (callee != null && callee.getType() == Token.GETPROP) {
-        String qualifiedName = callee.getQualifiedName();
-        if (functionName.equals(qualifiedName)) {
-          Node target = callee.getNext();
-          if (target != null) {
-            className = target.getString();
-          }
-        }
-      }
+private static String extractClassNameIfGoog(Node node, Node parent, String functionName) {
+    if (!NodeUtil.isExprCall(parent)) {
+        return null;
+    }
+    Node callee = node.getFirstChild();
+    if (callee == null || callee.getType() != Token.GETPROP) {
+        return null;
+    }
+    String qualifiedName = callee.getQualifiedName();
+    if (!functionName.equals(qualifiedName)) {
+        return null;
+    }
+    Node target = callee.getNext();
+    if (target == null || target.getType() != Token.STRING) {
+        return null;
+    }
+    String className = target.getString();
+    if (className.equals("prototype")) {
+        return null;
+    }
+    if (target.getNext() != null && target.getNext().getType() != Token.STRING) {
+        return null; // Only want the immediate string literal, not concatenated strings or expressions
     }
     return className;
-  }
+}
 
   /**
    * Use closure's implementation.