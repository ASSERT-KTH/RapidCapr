diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
index 42a4d9dfd..1a9c70638 100644
--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java
@@ -58,45 +58,49 @@ public class MultiDirectional extends DirectSearchOptimizer {
 
     /** {@inheritDoc} */
     @Override
-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)
+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {
 
-        while (true) {
+    while (true) {
 
-            incrementIterationsCounter();
+        incrementIterationsCounter();
 
-            // save the original vertex
-            final RealPointValuePair[] original = simplex;
-            final RealPointValuePair best = original[0];
+        // save the original vertex
+        final RealPointValuePair[] original = simplex;
+        final RealPointValuePair best = original[0];
 
-            // perform a reflection step
-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
-            if (comparator.compare(reflected, best) < 0) {
+        // perform a reflection step
+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);
+        if (comparator.compare(reflected, best) < 0) {
 
-                // compute the expanded simplex
-                final RealPointValuePair[] reflectedSimplex = simplex;
-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
-                if (comparator.compare(reflected, expanded) <= 0) {
-                    // accept the reflected simplex
-                    simplex = reflectedSimplex;
-                }
+            // compute the expanded simplex
+            final RealPointValuePair[] reflectedSimplex = simplex;
+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);
+            if (comparator.compare(reflected, expanded) <= 0) {
+                // accept the reflected simplex
+                simplex = reflectedSimplex;
+            }
 
-                return;
+            return;
 
-            }
+        }
 
-            // compute the contracted simplex
-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
-            if (comparator.compare(contracted, best) < 0) {
+        // compute the contracted simplex
+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);
+        if (comparator.compare(contracted, best) < 0) {
+            try {
                 // accept the contracted simplex
-
-            // check convergence
-                return;
+                final RealPointValuePair[] contractedSimplex = simplex;
+                simplex = contractedSimplex;
+            } catch (final Exception e) {
+                simplex = original; // revert to original simplex
             }
-
         }
 
+        // check convergence
+        return;
     }
+}
 
     /** Compute and evaluate a new simplex.
      * @param original original simplex (to be preserved)