diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java
index 889497e9..8698c9d3 100644
--- a/src/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java
@@ -2950,19 +2950,43 @@ public class ArrayUtils {
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
-    public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
-            return clone(array2);
-        } else if (array2 == null) {
-            return clone(array1);
-        }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
+public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null) {
+        return clone(array2);
+    } else if (array2 == null) {
+        return clone(array1);
+    }
+
+    final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+
+    // Check if the types are compatible with each other
+    if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) {
+        final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
         System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else if (type1.isPrimitive() && !type2.isPrimitive()) {
+        // If array1 is primitive and array2 is not, then convert array2 to object array
+        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);
+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
+        for (int i = 0; i < array2.length; i++) {
+            joinedArray[i + array1.length] = array2[i];
+        }
         return joinedArray;
+    } else if (type2.isPrimitive() && !type1.isPrimitive()) {
+        // If array2 is primitive and array1 is not, then convert array1 to object array
+        final T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);
+        for (int i = 0; i < array1.length; i++) {
+            joinedArray[i] = array1[i];
+        }
+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
+        return joinedArray;
+    } else {
+        // If array1 and array2 are both primitive and have incompatible types, or if both are objects and have incompatible types
+        throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName());
     }
+}
 
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>