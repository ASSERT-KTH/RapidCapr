diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index c3cb8695..5192d0db 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -32,37 +32,57 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    if (input == null || index >= input.length() - 1) {
+        return 0;
+    }
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
+    char currChar = input.charAt(index);
+    char nextChar = input.charAt(index + 1);
 
-            int end = start;
-            while(input.charAt(end) != ';') {
-                end++;
-            }
+    if (currChar == '&' && nextChar == '#') {
+        int start = index + 2;
+        int end = start;
 
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
+        // Check if the escape sequence is in hex format
+        boolean isHex = false;
+        if (start < input.length() && Character.toLowerCase(input.charAt(start)) == 'x') {
+            start++;
+            isHex = true;
+        }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+        // Find the end of the escape sequence
+        while (end < input.length() && input.charAt(end) != ';') {
+            end++;
         }
-        return 0;
+
+        // Check if the escape sequence is terminated
+        if (end == input.length()) {
+            return 0;
+        }
+
+        String entityValue = input.subSequence(start, end).toString();
+        if (entityValue.isEmpty()) {
+            return 0;
+        }
+
+        int codePoint;
+        try {
+            codePoint = Integer.parseInt(entityValue, isHex ? 16 : 10);
+        } catch (NumberFormatException nfe) {
+            return 0;
+        }
+
+        if (!Character.isValidCodePoint(codePoint)) {
+            return 0;
+        }
+
+        char[] utf16Chars = Character.toChars(codePoint);
+        out.write(utf16Chars);
+
+        return end - index + 1;
     }
+
+    return 0;
+}
 }