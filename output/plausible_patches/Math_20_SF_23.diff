diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 4b7dbf6bb..a469090e4 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -917,10 +917,42 @@ public class CMAESOptimizer
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
-        public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+public double[] repairAndDecode(final double[] x) {
+    if (x == null || x.length == 0) {
+        return new double[0]; // handle null or empty input array
+    }
+    
+    double[] repaired = repair(x); // call repair function on input array
+    if (repaired == null || repaired.length == 0) {
+        return new double[0]; // handle null or empty output from repair function
+    }
+    
+    // iterate over the repaired array and fix invalid values
+    for (int i = 0; i < repaired.length; i++) {
+        if (Double.isNaN(repaired[i])) {
+            repaired[i] = 0.0; // replace NaN values with 0
+        } else if (repaired[i] < 0.0) {
+            repaired[i] = 0.0; // replace negative values with 0
+        } else if (repaired[i] > 1.0) {
+            repaired[i] = 1.0; // replace values > 1 with 1
+        }
+    }
+    
+    double[] decoded = decode(repaired); // call decode function on repaired array
+    
+    // iterate over the decoded array and fix invalid values
+    for (int i = 0; i < decoded.length; i++) {
+        if (Double.isNaN(decoded[i])) {
+            decoded[i] = 0.0; // replace NaN values with 0
+        } else if (decoded[i] < 0.0) {
+            decoded[i] = 0.0; // replace negative values with 0
+        } else if (decoded[i] > 1.0) {
+            decoded[i] = 1.0; // replace values > 1 with 1
         }
+    }
+    
+    return decoded;
+}
 
         /**
          * @param x Normalized objective variables.