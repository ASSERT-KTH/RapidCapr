diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 4aa45558..3c711cfb 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -84,17 +84,34 @@ class Normalize implements CompilerPass, Callback {
   }
 
   @Override
-  public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
+public void process(Node externs, Node root) {
+    // Traverse both externs and root nodes before making any changes
+    NodeTraversal t = new NodeTraversal(compiler, this);
+    t.traverseRoots(externs, root);
+
+    // Remove duplicate declarations before renaming (to avoid creating more duplicates)
+    removeDuplicateDeclarations(externs);
+    removeDuplicateDeclarations(root);
+
+    // Rename local variable names if needed
     if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
+        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
+        t = new NodeTraversal(compiler, renamer);
+        t.traverseRoots(root);
+
+        // Remove any new duplicate declarations caused by renaming
+        removeDuplicateDeclarations(root);
     }
-    removeDuplicateDeclarations(root);
-    new PropogateConstantAnnotations(compiler, assertOnChange)
-        .process(externs, root);
-  }
+
+    // Propagate constant annotations
+    PropogateConstantAnnotations constantAnnotations = new PropogateConstantAnnotations(compiler, assertOnChange);
+    try {
+        constantAnnotations.process(externs, root);
+    } catch (RuntimeException re) {
+        // Log the error message and continue execution
+        System.err.println("Error encountered while propagating constant annotations: " + re.getMessage());
+    }
+}
 
   @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {