diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index bf6dd65d5..1595fe086 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -1416,6 +1416,38 @@ public class DSCompiler {
         }
 
         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        //Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly
+        if(Double.isNaN(result[resultOffset])) {
+            //Special case for NaN
+            result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);
+            for (int i = 1; i < result.length; i++) {
+                result[resultOffset + i] = result[resultOffset];
+            }
+        } else if(Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {
+            //Special cases for Infinity and -Infinity
+            double v = FastMath.PI / 2;
+            if(y[yOffset] < 0) {
+                v = -v;
+            }
+            for(int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = v;
+            }
+        } else if(x[xOffset] == 0 && y[yOffset] == 0) {
+            //Special case for +0/+0
+            for(int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = 0;
+            }
+        } else if(x[xOffset] > 0 && Double.isInfinite(y[yOffset])) {
+            //Special case for +0/-0
+            for(int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = -0.0;
+            }
+        } else if(x[xOffset] < 0 && Double.isInfinite(y[yOffset])) {
+            //Special case for -0/-0
+            for(int i = 0; i < result.length; i++) {
+                result[resultOffset + i] = FastMath.copySign(0.0, -1.0);
+            }
+        }
 
     }
 