diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
index 3fc328d8b..e904c26b0 100644
--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1129,22 +1129,28 @@ public class EigenDecompositionImpl implements EigenDecomposition {
      * only every other element)
      * @return true if qd array was flipped
      */
-    private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
+private boolean flipIfWarranted(final int n, final int step) {
+    final double maxPingPongValue = work[pingPong] * 1.5;
+    final double maxAlternateValue = work[4 * n - pingPong - 1];
+    if (maxPingPongValue < maxAlternateValue) {
+        for (int i = 0; i < 2 * n; i++) {
+            final int j = 4 * n - i - 1;
+            if (i >= j) {
+                break;
+            }
+            for (int k = 0; k < 2; k++) {
+                final int index1 = i + k;
+                final int index2 = j - k;
+                final double tmp = work[index1];
+                work[index1] = work[index2];
+                work[index2] = tmp;
             }
-            return true;
         }
-        return false;
+        pingPong = (pingPong + 2) % 4;
+        return true;
     }
+    return false;
+}
 
     /**
      * Compute an interval containing all realEigenvalues of a block.