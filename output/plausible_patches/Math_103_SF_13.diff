diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 02810e142..9d49fe11d 100644
--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -105,11 +105,36 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
-    public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+public double cumulativeProbability(double x) throws MathException {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    } else if (Double.isInfinite(x)) {
+        return x < 0 ? 0.0 : 1.0;
     }
     
+    double z = (x - mean) / standardDeviation;
+    if (z <= -40.0) {
+        return 0.0;
+    } else if (z >= 40.0) {
+        return 1.0;
+    }
+    
+    double result;
+    try {
+        result = 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));
+    } catch (MaxIterationsExceededException e) {
+        result = z > 0.0 ? 1.0 : 0.0;
+    }
+    
+    if (result < 0.0) {
+        return 0.0;
+    } else if (result > 1.0) {
+        return 1.0;
+    } else {
+        return result;
+    }
+}
+    
     /**
      * For this distribution, X, this method returns the critical point x, such
      * that P(X &lt; x) = <code>p</code>.