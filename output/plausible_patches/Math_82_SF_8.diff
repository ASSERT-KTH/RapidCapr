diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
index 8309d7b40..ff2bbe8dd 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -73,22 +73,31 @@ public class SimplexSolver extends AbstractLinearOptimizer {
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
-    private Integer getPivotRow(final int col, final SimplexTableau tableau) {
-        double minRatio = Double.MAX_VALUE;
-        Integer minRatioPos = null;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
-                final double ratio = rhs / entry;
-                if (ratio < minRatio) {
-                    minRatio = ratio;
-                    minRatioPos = i; 
-                }
+private Integer getPivotRow(final int col, final SimplexTableau tableau) {
+    double minRatio = Double.MAX_VALUE;
+    Integer minRatioPos = null;
+    // flag to check if all entries in the column are non-positive
+    boolean allNegEntries = true;
+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
+        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+        final double entry = tableau.getEntry(i, col);
+        // check if entry is positive
+        if (MathUtils.compareTo(entry, 0, epsilon) > 0) {
+            allNegEntries = false;
+            final double ratio = rhs / entry;
+            // check if ratio is smaller than current minimum
+            if (MathUtils.compareTo(ratio, minRatio, epsilon) < 0) {
+                minRatio = ratio;
+                minRatioPos = i; 
             }
         }
-        return minRatioPos;
     }
+    // check if all entries in the column are non-positive, returns null if so
+    if (allNegEntries) {
+        return null;
+    }
+    return minRatioPos;
+}
 
 
     /**