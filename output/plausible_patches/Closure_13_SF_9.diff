diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..be56d932 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -116,23 +116,32 @@ class PeepholeOptimizationsPass
     // So we track whether a "unit of code" has changed,
     // and revisit immediately.
     if (!shouldVisit(node)) {
-      return;
+        return;
     }
 
     int visits = 0;
     do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
+        Node c = node.getFirstChild();
+        while(c != null) {
+            Node next = c.getNext();
+            traverse(c);
+            c = next;
+        }
+
+        visit(node);
 
-      visit(node);
-      visits++;
+        if(++visits >= 10000) {
+          throw new IllegalStateException("too many iterations");
+        } 
+
+        if (shouldRetraverse(node)) {
+            // This node changed, visit it again
+            continue;
+        }
+        
+        break;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+    } while (true);
 
     exitNode(node);
   }