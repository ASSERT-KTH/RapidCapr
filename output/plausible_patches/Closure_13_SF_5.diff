diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..a3a5e9f8 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,7 +110,7 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
+private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
@@ -120,19 +120,24 @@ class PeepholeOptimizationsPass
     }
 
     int visits = 0;
-    do {
+    boolean retraverse = true;
+    while(retraverse && visits < 10000) {
+      retraverse = false;
       Node c = node.getFirstChild();
       while(c != null) {
-        traverse(c);
         Node next = c.getNext();
+        traverse(c);
         c = next;
+        if (shouldRetraverse(node)) {
+          retraverse = true;
+        }
       }
 
       visit(node);
       visits++;
+    }
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+    Preconditions.checkState(visits < 10000, "too many iterations");
 
     exitNode(node);
   }