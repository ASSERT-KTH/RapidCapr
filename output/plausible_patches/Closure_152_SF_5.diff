diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index fc2578d8..2850ab86 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -859,37 +859,41 @@ public class FunctionType extends PrototypeObjectType {
   }
 
   @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
-    call = (ArrowType) safeResolve(call, t, scope);
-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
+    call = safeResolve(call, t, scope) instanceof ArrowType ? (ArrowType) safeResolve(call, t, scope) : call;
+    prototype = safeResolve(prototype, t, scope) instanceof FunctionPrototypeType ? (FunctionPrototypeType) safeResolve(prototype, t, scope) : prototype;
 
     // Warning about typeOfThis if it doesn't resolve to an ObjectType
     // is handled further upstream.
     // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+    if (resolvedTypeOfThis instanceof ObjectType || resolvedTypeOfThis == null) {
+        typeOfThis = (ObjectType) resolvedTypeOfThis;
+    }
 
     boolean changed = false;
-    ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
+        JSType resolvedIface = safeResolve(iface, t, scope);
+        ObjectType resolvedObj = resolvedIface instanceof ObjectType ? (ObjectType) resolvedIface : iface;
+        resolvedInterfaces.add(resolvedObj);
+        changed |= (resolvedObj != iface);
     }
     if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
+        implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
+        for (int i = 0; i < subTypes.size(); i++) {
+            JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);
+            subTypes.set(i, resolvedSubType instanceof FunctionType ? (FunctionType) resolvedSubType : subTypes.get(i));
+        }
     }
 
     return super.resolveInternal(t, scope);
-  }
+}
 
   @Override
   public String toDebugHashCodeString() {