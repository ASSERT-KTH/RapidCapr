diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..0692660d7 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,7 +120,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+    Object[] rawArguments = invocation.getRawArguments();
+    int argumentCount = rawArguments.length;
+    for (int i = 0; i < matchers.size(); i++) {
+        Matcher matcher = matchers.get(i);
+        if (matcher instanceof CapturesArguments) {
+            if (i < argumentCount) {
+                Object argument = rawArguments[i];
+                if (isVariableArgument(invocation, i) && isVarargMatcher(matcher)) {
+                    if (argument != null && argument.getClass().isArray()) {
+                        int varArgLength = Array.getLength(argument);
+                        Object[] varArgArray = new Object[varArgLength];
+                        for (int j = 0; j < varArgLength; j++) {
+                            varArgArray[j] = Array.get(argument, j);
+                        }
+                        argument = varArgArray;
+                    } else {
+                        argument = new Object[]{argument};
+                    }
+                }
+                ((CapturesArguments) matcher).captureFrom(argument);
+            } else {
+                ((CapturesArguments) matcher).captureFrom(null);
+            }
+        }
+    }
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {