diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java
index 0b37e6e..f137fc8 100644
--- a/source/org/jfree/data/xy/XYSeries.java
+++ b/source/org/jfree/data/xy/XYSeries.java
@@ -537,43 +537,66 @@ public class XYSeries extends Series implements Cloneable, Serializable {
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
-    public XYDataItem addOrUpdate(Number x, Number y) {
-        if (x == null) {
-            throw new IllegalArgumentException("Null 'x' argument.");
-        }
-
-        // if we get to here, we know that duplicate X values are not permitted
-        XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
-            XYDataItem existing = (XYDataItem) this.data.get(index);
-            try {
-                overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
-                throw new SeriesException("Couldn't clone XYDataItem!");
-            }
-            existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
-            if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
-            }
-            else {
-                this.data.add(new XYDataItem(x, y));
-            }
-            // check if this addition will exceed the maximum item count...
-            if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
-            }
-        }
-        fireSeriesChanged();
-        return overwritten;
-    }
+public XYDataItem addOrUpdate(Number x, Number y) {
+    if (x == null || y == null) {
+        throw new IllegalArgumentException("Null 'x' or 'y' argument.");
+    }
+    int index = indexOf(x);
+    if (index >= 0 && !this.allowDuplicateXValues) {
+        // If auto-sort not enabled and x already exists in series and duplicate values not allowed, update the y value
+        XYDataItem existingItem = (XYDataItem) this.data.get(index);
+        if (!existingItem.getY().equals(y)) { // Update y value if different
+            XYDataItem overwrittenItem = new XYDataItem(existingItem.getX(), existingItem.getY());
+            existingItem.setY(y);
+            fireSeriesChanged();
+            return overwrittenItem;
+        } else {
+            return existingItem;
+        }
+    } else {
+        // Create a new data item with x and y and add to appropriate position
+        XYDataItem newItem = new XYDataItem(x, y);
+        if (this.autoSort) {
+            // If auto-sort is enabled, use binary search to find the insertion index
+            int insertIndex = Collections.binarySearch(this.data, newItem);
+            if (insertIndex >= 0 && !this.allowDuplicateXValues) {
+                // If x value already exists and duplicate x values not allowed, replace existing item
+                XYDataItem existingItem = (XYDataItem) this.data.get(insertIndex);
+                if (!existingItem.getY().equals(y)) { // Replace if y values are different
+                    this.data.set(insertIndex, newItem);
+                    fireSeriesChanged();
+                    return existingItem;
+                } else {
+                    return existingItem;
+                }
+            } else {
+                if (insertIndex < 0) {
+                    // If x value not found, convert binary search result to insertion point
+                    insertIndex = -(insertIndex + 1);
+                }
+                if (!this.allowDuplicateXValues) {
+                    // If duplicate x values not allowed, add new item at specified index
+                    this.data.add(insertIndex, newItem);
+                } else {
+                    // If duplicate x values allowed, add new item directly after the last item with the same x value
+                    while (insertIndex < this.data.size() && ((XYDataItem) this.data.get(insertIndex)).getX().equals(newItem.getX())) {
+                        insertIndex++;
+                    }
+                    this.data.add(insertIndex, newItem);
+                }
+            }
+        } else {
+            // If auto-sort is not enabled, add item to end of series
+            this.data.add(newItem);
+            if (this.data.size() > this.maximumItemCount) {
+                // If maximum item count exceeded, remove earliest item
+                this.data.remove(0);
+            }
+        }
+        fireSeriesChanged();
+        return null;
+    }
+}
 
     /**
      * Returns the index of the item with the specified x-value, or a negative