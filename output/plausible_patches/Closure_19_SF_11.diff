diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index 0345c855..75635d0b 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -154,28 +154,36 @@ public abstract class ChainableReverseAbstractInterpreter
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
-    switch (node.getType()) {
-      case Token.NAME:
-        scope.inferSlotType(node.getString(), type);
-        break;
+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+  switch (node.getType()) {
+    case Token.NAME:
+      scope.inferSlotType(node.getString(), type);
+      break;
 
-      case Token.GETPROP:
-        String qualifiedName = node.getQualifiedName();
-        Preconditions.checkNotNull(qualifiedName);
+    case Token.GETPROP:
+      String qualifiedName = node.getQualifiedName();
+      if (qualifiedName == null) {
+        throw new IllegalArgumentException("Cannot declare a null qualified name");
+      }
 
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
-        break;
+      JSType origType = node.getJSType();
+      if (origType == null) {
+        origType = getNativeType(UNKNOWN_TYPE);
+      }
 
-        // "this" references aren't currently modeled in the CFG.
+      scope.inferQualifiedSlot(node, qualifiedName, origType, type);
+      break;
 
-      default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
-    }
+    case Token.THIS:
+      // Ignore "this" references and move on to the next node.
+      break;
+
+    default:
+      // Log a warning and move on to the next node.
+      System.err.println("Ignoring unsupported node type in declareNameInScope. Node: " + node.toStringTree());
+      break;
   }
+}
 
   /**
    * @see #getRestrictedWithoutUndefined(JSType)