diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java
index 8898f77f..53887195 100644
--- a/src/com/google/javascript/jscomp/Compiler.java
+++ b/src/com/google/javascript/jscomp/Compiler.java
@@ -1294,6 +1294,70 @@ public class Compiler extends AbstractCompiler {
           }
         }
 
+        try {
+          inputs =
+              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
+              .manageDependencies(options.dependencyOptions, inputs);
+          staleInputs = true;
+        } catch (CircularDependencyException e) {
+          report(JSError.make(
+              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
+
+          // If in IDE mode, we ignore the error and keep going.
+          if (hasErrors()) {
+            return null;
+          }
+        } catch (MissingProvideException e) {
+          report(JSError.make(
+              MISSING_ENTRY_ERROR, e.getMessage()));
+
+          // If in IDE mode, we ignore the error and keep going.
+          if (hasErrors()) {
+            return null;
+          }
+        }
+      } else if (options.dependencyOptions.needsManagement()) {
+        for (CompilerInput input : inputs) {
+          // Forward-declare all the provided types, so that they
+          // are not flagged even if they are dropped from the process.
+          for (String provide : input.getProvides()) {
+            getTypeRegistry().forwardDeclareType(provide);
+          }
+        }
+
+        try {
+          inputs =
+              (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)
+              .manageDependencies(options.dependencyOptions, inputs);
+          staleInputs = true;
+        } catch (CircularDependencyException e) {
+          report(JSError.make(
+              JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
+
+          // If in IDE mode, we ignore the error and keep going.
+          if (hasErrors()) {
+            return null;
+          }
+        } catch (MissingProvideException e) {
+          report(JSError.make(
+              MISSING_ENTRY_ERROR, e.getMessage()));
+
+          // If in IDE mode, we ignore the error and keep going.
+          if (hasErrors()) {
+            return null;
+          }
+        }
+      }
+
+      if (options.closurePass) {
+        for (CompilerInput input : inputs) {
+          // Forward-declare all the provided types, so that they
+          // are not flagged even if they are dropped from the process.
+          for (String provide : input.getProvides()) {
+            getTypeRegistry().forwardDeclareType(provide);
+          }
+        }
+
         try {
           inputs =
               (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)