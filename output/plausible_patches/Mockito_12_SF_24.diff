diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..20985d6eb 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,20 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        ParameterizedType parameterizedType = (ParameterizedType) genericType;
+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+        Type firstActualTypeArgument = actualTypeArguments[0];
+        while (firstActualTypeArgument instanceof ParameterizedType) {
+            ParameterizedType nestedType = (ParameterizedType) firstActualTypeArgument;
+            firstActualTypeArgument = nestedType.getRawType();
+        }
+        if (firstActualTypeArgument instanceof Class) {
+            return (Class<?>) firstActualTypeArgument;
+        }
+    }
+    return Object.class;
+}
 }