diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..e2dccc449 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,28 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    double r = real + rhs.getReal();
+    double i = imaginary + rhs.getImaginary();
+    if (Double.isFinite(r) && Double.isFinite(i)) {
+        return createComplex(r, i);
+    }
+    if (Double.isNaN(r) || Double.isNaN(i)) {
+        return createComplex(Double.NaN, Double.NaN);
     }
+    if (Double.isInfinite(r) && Double.isInfinite(i)) {
+        double newReal = Math.copySign(Double.POSITIVE_INFINITY, r);
+        double newImaginary = Math.copySign(Double.POSITIVE_INFINITY, i);
+        return createComplex(newReal, newImaginary);
+    }
+    if (Double.isInfinite(r)) {
+        double newImaginary = i - imaginary + i;
+        return createComplex(r, newImaginary);
+    }
+    double newReal = r - real + r;
+    return createComplex(newReal, i);
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of