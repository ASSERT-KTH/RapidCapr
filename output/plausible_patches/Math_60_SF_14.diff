diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 0e124d852..0109934ff 100644
--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -121,21 +121,39 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
-    public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
+public double cumulativeProbability(double x) throws MathException {
+    if (Double.isNaN(x)) {
+        return Double.NaN;
+    }
+    double dev = x - mean;
+    double absDev = FastMath.abs(dev);
+    if (absDev > 40 * standardDeviation) {
+        return dev < 0 ? 0.0 : 1.0;
+    }
+    try {
+        double result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+        if (result < 0.0) {
+            return 0.0;
+        } else if (result > 1.0) {
+            return 1.0;
+        } else {
+            return result;
+        }
+    } catch (MaxIterationsExceededException ex) {
+        if (absDev > 9.0) {
+            throw new MathException(ex);
+        } else {
+            double result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));
+            if (result < 0.0) {
+                return 0.0;
+            } else if (result > 1.0) {
+                return 1.0;
             } else {
-                throw ex;
+                return result;
             }
         }
     }
+}
 
     /**
      * Return the absolute accuracy setting of the solver used to estimate