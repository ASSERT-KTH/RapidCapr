diff --git a/src/com/google/javascript/jscomp/SourceFile.java b/src/com/google/javascript/jscomp/SourceFile.java
index fc0cf3fc..c4ed2bbe 100644
--- a/src/com/google/javascript/jscomp/SourceFile.java
+++ b/src/com/google/javascript/jscomp/SourceFile.java
@@ -202,48 +202,45 @@ public class SourceFile implements StaticSourceFile, Serializable {
    *     of the file. Returns {@code null} if it does not exist,
    *     or if there was an IO exception.
    */
-  public String getLine(int lineNumber) {
+public String getLine(int lineNumber) {
     String js = "";
+    
     try {
-      // NOTE(nicksantos): Right now, this is optimized for few warnings.
-      // This is probably the right trade-off, but will be slow if there
-      // are lots of warnings in one file.
-      js = getCode();
+        js = getCode();
     } catch (IOException e) {
-      return null;
+        return null;
     }
 
-    int pos = 0;
-    int startLine = 1;
+    if (lineNumber <= 0) {
+        return null;
+    }
+
+    int line = 1;
+    int startPos = 0;
+    int endPos = js.indexOf('\n');
 
-    // If we've saved a previous offset and it's for a line less than the
-    // one we're searching for, then start at that point.
-    if (lineNumber >= lastLine) {
-      pos = lastOffset;
-      startLine = lastLine;
+    while (endPos >= 0 && line < lineNumber) {
+        startPos = endPos + 1;
+        endPos = js.indexOf('\n', startPos);
+        line++;
     }
 
-    for (int n = startLine; n < lineNumber; n++) {
-      int nextpos = js.indexOf('\n', pos);
-      if (nextpos == -1) {
+    if (line < lineNumber) {
         return null;
-      }
-      pos = nextpos + 1;
     }
 
-    // Remember this offset for the next search we do.
-    lastOffset = pos;
-    lastLine = lineNumber;
+    if (endPos < 0) {
+        endPos = js.length();
+    }
+
+    String lineContent = js.substring(startPos, endPos).replaceAll("\\r$", "");
 
-    if (js.indexOf('\n', pos) == -1) {
-      // If next new line cannot be found, there are two cases
-      // 1. pos already reaches the end of file, then null should be returned
-      // 2. otherwise, return the contents between pos and the end of file.
+    if (lineContent.isEmpty()) {
         return null;
-    } else {
-      return js.substring(pos, js.indexOf('\n', pos));
     }
-  }
+
+    return lineContent;
+}
 
   /**
    * Get a region around the indicated line number. The exact definition of a