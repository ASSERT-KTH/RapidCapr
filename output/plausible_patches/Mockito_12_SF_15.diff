diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..9a75cd180 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,19 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type genericType = field.getGenericType();
+    if (genericType instanceof ParameterizedType) {
+        Type[] actualTypeArguments = ((ParameterizedType) genericType).getActualTypeArguments();
+        // Iterate over the actualTypeArguments until we find a Class
+        for (Type actualType : actualTypeArguments) {
+            if (actualType instanceof Class) {
+                return (Class<?>) actualType;
+            } else if (actualType instanceof ParameterizedType) {
+                return (Class<?>) ((ParameterizedType) actualType).getRawType();
+            }
+        }
+    }
+    return Object.class;
+}
 }