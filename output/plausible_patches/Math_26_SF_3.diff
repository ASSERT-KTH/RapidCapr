diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
index f81ff0a94..e6c2c5e0e 100644
--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
@@ -172,14 +172,15 @@ public class Fraction
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
         throws FractionConversionException
     {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
         long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+
+        if (a0 > overflow || a0 < -overflow) {
+            throw new FractionConversionException(value, a0, 1);
         }
 
         // check for (almost) integer arguments, which should not go
@@ -206,7 +207,8 @@ public class Fraction
             long a1 = (long)FastMath.floor(r1);
             p2 = (a1 * p1) + p0;
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+
+            if (p2 > overflow || p2 < -overflow || q2 > overflow || q2 < -overflow) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
@@ -216,8 +218,8 @@ public class Fraction
                 p1 = p2;
                 q0 = q1;
                 q1 = q2;
-                a0 = a1;
                 r0 = r1;
+                a0 = (long)r0;
             } else {
                 stop = true;
             }
@@ -234,7 +236,6 @@ public class Fraction
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
 
     /**