diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
index c507c924..a7d4bbd6 100644
--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java
+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java
@@ -185,23 +185,28 @@ public class ClosureCodingConvention extends DefaultCodingConvention {
     return extractClassNameIfGoog(node, parent, "goog.require");
   }
 
-  private static String extractClassNameIfGoog(Node node, Node parent,
-      String functionName){
-    String className = null;
-    if (NodeUtil.isExprCall(parent)) {
-      Node callee = node.getFirstChild();
-      if (callee != null && callee.getType() == Token.GETPROP) {
-        String qualifiedName = callee.getQualifiedName();
-        if (functionName.equals(qualifiedName)) {
-          Node target = callee.getNext();
-          if (target != null) {
-            className = target.getString();
+private static String extractClassNameIfGoog(Node node, Node parent,
+    String functionName){
+  String className = null;
+  if (NodeUtil.isExprCall(parent)) {
+    Node callee = node.getFirstChild();
+    if (callee != null && callee.getType() == Token.GETPROP) {
+      String qualifiedName = callee.getQualifiedName();
+      if (functionName.equals(qualifiedName)) {
+        Node target = callee.getNext();
+        if (target != null && target.getType() == Token.STRING) {
+          className = target.getString();
+          if (target.getNext() != null
+              && target.getNext().getType() == Token.STRING
+              && !"prototype".equals(target.getNext().getString())) {
+            className = null;
           }
         }
       }
     }
-    return className;
   }
+  return className;
+}
 
   /**
    * Use closure's implementation.