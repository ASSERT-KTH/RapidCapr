diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..417f48be 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,25 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+switch (n.getType()) {
+  case Token.LSH:
+    result = lvalInt << rvalInt;
+    break;
+  case Token.RSH:
+    result = lvalInt >> rvalInt;
+    break;
+  case Token.URSH:
+    // Cast the left integer operand to a long to promote the sign bit to the 63rd bit.
+    long lvalLong = (long) lvalInt;
+    // Zero out the highest 32 bits to convert `lvalLong` to a 32-bit unsigned integer.
+    int unsignedLval = (int) (lvalLong & 0xFFFFFFFFL);
+    // Use Java's `Integer.toUnsignedLong` method to perform the unsigned shift.
+    result = Integer.toUnsignedLong(unsignedLval) >>> rvalInt;
+    break;
+  default:
+    throw new AssertionError("Unknown shift operator: " +
+          Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +