diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index c3cb8695..fb864d7f 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -32,37 +32,53 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    // Check if the input is null or the index is invalid
+    if (input == null || index < 0 || index >= input.length()) {
+        return 0;
+    }
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
+    // Check if the '&' and '#' characters are present
+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
 
-            int end = start;
-            while(input.charAt(end) != ';') {
-                end++;
-            }
+    // Set the start index based on whether the entity is in decimal or hexadecimal format
+    int start = index + 2;
+    boolean isHex = false;
+    if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {
+        isHex = true;
+        start++;
+    }
+
+    // Find the end index of the escape sequence
+    int end = start;
+    while (end < input.length() && input.charAt(end) != ';') {
+        end++;
+    }
 
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
+    // Check if the escape sequence has an ending semicolon
+    if (end == input.length()) {
+        return 0;
+    }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
+    // Parse the entity value to an integer
+    String entityValue = input.subSequence(start, end).toString();
+    int codePoint = 0;
+    try {
+        codePoint = Integer.parseInt(entityValue, isHex ? 16 : 10);
+    } catch (NumberFormatException nfe) {
+        return 0;
+    }
+    // Check if the code point is valid
+    if (!Character.isValidCodePoint(codePoint)) {
         return 0;
     }
+
+    // Write the code point to the output writer
+    out.write(Character.toChars(codePoint));
+
+    // Return the number of characters processed
+    return end - index + 1;
+}
 }