diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
index f81ff0a94..d44f5043d 100644
--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
@@ -172,14 +172,13 @@ public class Fraction
      * @throws FractionConversionException if the continued fraction failed to
      *         converge.
      */
-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)
-        throws FractionConversionException
-    {
+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {
         long overflow = Integer.MAX_VALUE;
         double r0 = value;
-        long a0 = (long)FastMath.floor(r0);
-        if (a0 > overflow) {
-            throw new FractionConversionException(value, a0, 1l);
+        long a0 = (long) FastMath.floor(r0);
+
+        if (a0 >= overflow || a0 <= -overflow) {
+            throw new FractionConversionException(value, a0, 1L);
         }
 
         // check for (almost) integer arguments, which should not go
@@ -190,27 +189,35 @@ public class Fraction
             return;
         }
 
-        long p0 = 1;
-        long q0 = 0;
+        long p0 = 1L;
+        long q0 = 0L;
         long p1 = a0;
-        long q1 = 1;
+        long q1 = 1L;
 
-        long p2 = 0;
-        long q2 = 1;
+        long p2 = 0L;
+        long q2 = 1L;
 
         int n = 0;
         boolean stop = false;
         do {
             ++n;
             double r1 = 1.0 / (r0 - a0);
-            long a1 = (long)FastMath.floor(r1);
-            p2 = (a1 * p1) + p0;
-            q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+            long a1 = (long) FastMath.floor(r1);
+            p2 = a1 * p1 + p0;
+            q2 = a1 * q1 + q0;
+
+            if (q2 < 0) {
+                a1 -= 1;
+                p2 = a1 * p1 + p0;
+                q2 = a1 * q1 + q0;
+                if (q2 <= 0) {
+                    throw new FractionConversionException(value, p2, q2);
+                }
+            } else if ((p2 >= overflow) || (p2 <= -overflow) || (q2 >= overflow) || (q2 <= -overflow)) {
                 throw new FractionConversionException(value, p2, q2);
             }
 
-            double convergent = (double)p2 / (double)q2;
+            double convergent = (double) p2 / (double) q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
                 p1 = p2;
@@ -234,7 +241,6 @@ public class Fraction
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
 
     /**