diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864..195ac946 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2537,17 +2537,30 @@ public class DateTimeFormatterBuilder {
             return MAX_LENGTH;
         }
 
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
-            for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
+public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+    String str = text.substring(position);
+    for (String id : ALL_IDS) {
+        int idLen = id.length();
+        int index = str.indexOf(id);
+        while (index >= 0) {
+            if ((index == 0 || Character.isWhitespace(str.charAt(index - 1))) && 
+                (index + idLen == str.length() || str.charAt(index + idLen) == '/' || Character.isWhitespace(str.charAt(index + idLen)))) {
+                // check that the following character is not part of a longer time zone ID
+                char nextChar = '\0';
+                if (index + idLen < str.length()) {
+                    nextChar = str.charAt(index + idLen);
+                }
+                if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {
                     bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
+                    return position + index + idLen;
                 }
             }
-            return ~position;
+            index = str.indexOf(id, index + 1);
         }
     }
+    return ~position;
+}
+    }
 
     //-----------------------------------------------------------------------
     static class Composite