diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 814a07f4..9e6725ef 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -770,21 +770,28 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   /**
    * @see #findCalledFunctions(Node)
    */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
-    Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
-      }
+private void findCalledFunctions(Node node, Set<String> changed) {
+    Preconditions.checkNotNull(changed, "Set of changed functions cannot be null");
+
+    if (node == null) {
+        return;
     }
 
-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
-      findCalledFunctions(c, changed);
+    // For each referenced function, add a new reference
+    if (node.getType() == Token.CALL) {
+        Node child = node.getFirstChild();
+        if (child != null && child.getType() == Token.NAME) {
+            changed.add(child.getString());
+        }
+        while ((child = child.getNext()) != null) {
+            findCalledFunctions(child, changed);
+        }
+    } else {
+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
+            findCalledFunctions(c, changed);
+        }
     }
-  }
+}
 
   /**
    * For any call-site that needs it, prepare the call-site for inlining