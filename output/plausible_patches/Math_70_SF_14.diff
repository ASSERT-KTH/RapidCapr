diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
index 3f669271a..0b0855de3 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
@@ -67,10 +67,37 @@ public class BisectionSolver extends UnivariateRealSolverImpl {
     }
 
     /** {@inheritDoc} */
-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)
+public double solve(final UnivariateRealFunction f, double min, double max, double initial)
         throws MaxIterationsExceededException, FunctionEvaluationException {
-        return solve(min, max);
+    
+    if (f == null) {
+        throw new NullPointerException("The function f cannot be null.");
     }
+    if (Double.isNaN(initial) || Double.isInfinite(initial)) {
+        throw new IllegalArgumentException("The initial value is invalid.");
+    }
+    if (min > max) {
+        throw new IllegalArgumentException("The lower bound of the interval must be less than or equal to the upper bound.");
+    }
+    
+    double result = Double.NaN;
+    if (initial >= min && initial <= max) {
+        try {
+            result = solve(f, min, max);
+        } catch (NullPointerException e) {
+            double nextInitial = UnivariateRealSolverUtils.midpoint(min, max);
+            if (nextInitial == initial) {
+                throw e; // we have tried both endpoints, give up
+            }
+            result = solve(f, min, max, nextInitial);
+        }
+    } else if (initial < min) {
+        result = solve(f, min, max, min);
+    } else if (initial > max) {
+        result = solve(f, min, max, max);
+    }
+    return result;
+}
 
     /** {@inheritDoc} */
     public double solve(final UnivariateRealFunction f, double min, double max)