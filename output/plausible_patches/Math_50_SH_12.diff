diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..18339e62f 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,10 +184,74 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+if (f0 * fx < 0) {
+    x1 = x;
+    f1 = fx;
+} else if (f0 * f1 > 0) {
+    x0 = x;
+    f0 = fx;
+} else {
+    double dx = FastMath.max(rtol * FastMath.abs(x1), atol);
+    double x2;
+    do {
+        x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0);
+        double f2 = computeObjectiveValue(x2);
+        if (f1 * f2 < 0) {
+            x0 = x1;
+            f0 = f1;
+            x1 = x2;
+            f1 = f2;  
+        } else {
+            x0 = x2;
+            f0 = f2;
+        }
+        dx = FastMath.abs(x1 - x0);
+    } while (dx > FastMath.max(rtol * FastMath.abs(x1), atol));
+
+    if (FastMath.abs(f1) <= ftol) {
+        switch (allowed) {
+            case ANY_SIDE:
+                return x1;
+            case LEFT_SIDE:
+                if (inverted) {
+                    return x1;
+                }
+                break;
+            case RIGHT_SIDE:
+                if (!inverted) {
+                    return x1;
+                }
+                break;
+            case BELOW_SIDE:
+                if (f1 <= 0) {
+                    return x1;
+                }
+                break;
+            case ABOVE_SIDE:
+                if (f1 >= 0) {
+                    return x1;
+                }
+                break;
+            default:
+                throw new MathInternalError();
+        }
+    }
+
+    switch (allowed) {
+        case ANY_SIDE:
+            return x1;
+        case LEFT_SIDE:
+            return inverted ? x1 : x0;
+        case RIGHT_SIDE:
+            return inverted ? x0 : x1;
+        case BELOW_SIDE:
+            return (f1 <= 0) ? x1 : x0;
+        case ABOVE_SIDE:
+            return (f1 >= 0) ? x1 : x0;
+        default:
+            throw new MathInternalError();
+    }
+}
                     break;
                 default:
                     // Should never happen.