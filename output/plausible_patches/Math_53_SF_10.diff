diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..8a7d17cbe 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,29 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {
+        return createComplex(Double.NaN, Double.NaN);
+    }
+    double newReal = real + rhs.getReal();
+    double newImaginary = imaginary + rhs.getImaginary();
+    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {
+        if (Double.isInfinite(real) || Double.isInfinite(rhs.getReal())) {
+            double sign = (Math.signum(real) + Math.signum(rhs.getReal())) == 0 ? 1 : Math.signum(real) + Math.signum(rhs.getReal());
+            newImaginary = Double.isInfinite(newImaginary) ? Math.copySign(Double.POSITIVE_INFINITY, newImaginary) : newImaginary;
+            return createComplex(sign * Double.POSITIVE_INFINITY, newImaginary);
+        } else if (Double.isInfinite(imaginary) || Double.isInfinite(rhs.getImaginary())) {
+            double sign = (Math.signum(imaginary) + Math.signum(rhs.getImaginary())) == 0 ? 1 : Math.signum(imaginary) + Math.signum(rhs.getImaginary());
+            newReal = Double.isInfinite(newReal) ? Math.copySign(Double.POSITIVE_INFINITY, newReal) : newReal;
+            return createComplex(newReal, sign * Double.POSITIVE_INFINITY);
+        } else {
+            return createComplex(Double.NaN, Double.NaN);
+        }
+    } else {
+        return createComplex(newReal, newImaginary);
     }
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of