diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..9f78bf5df 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,9 +184,39 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
+                    if (f0 * fx < 0) {
+                        x1 = x;
+                        f1 = fx;
+                    } else {
+                        double oldf0 = f0;
+                        if (f1 * fx < 0) {
+                            x0 = x;
+                            f0 = fx;
+                        } else {
+                            // Regula falsi method.
+                            double regulaFalsiDenominator = f1 - f0;
+                            double regulaFalsiNumerator = f0 * (x1 - x0);
+                            double newApprox = x0 - regulaFalsiNumerator / regulaFalsiDenominator;
+                            double newFunction = computeObjectiveValue(newApprox);
+
+                            if (newFunction == 0.0)
+                                return newApprox;
+
+                            if (Math.signum(newFunction) == Math.signum(f0)) {
+                                x0 = newApprox;
+                                f0 = newFunction;
+                            } else {
+                                x1 = newApprox;
+                                f1 = newFunction;
+                            }
+                            if (FastMath.abs(f1) < FastMath.abs(f0)) {
+                                // The new approximation is the closest to f(x)=0 and will be returned.
+                                x0 = x1;
+                                f0 = f1;
+                                x1 = newApprox;
+                                f1 = newFunction;
+                            }
+                        }
                     }
                     break;
                 default: