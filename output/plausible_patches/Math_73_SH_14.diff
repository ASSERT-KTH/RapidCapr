diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
index 8142b5edb..407ecc532 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java
@@ -133,6 +133,21 @@ public class BrentSolver extends UnivariateRealSolverImpl {
             return solve(f, initial, yInitial, max, yMax, initial, yInitial);
         }
 
+        // check if any input value is NaN or infinite
+        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) || !Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax)) {
+            throw new IllegalArgumentException("Endpoints or initial guess have infinite or NaN values. Endpoints: [" + min + "," + max + "], Values: [" + yMin + "," + yMax + "], Initial guess value: " + yInitial);
+        }
+
+        // check if initial guess is equal to min or max
+        if (Double.compare(initial, min) == 0 || Double.compare(initial, max) == 0) {
+            setResult(initial, 0);
+            return result;
+        }
+
+        // catch cases where min/max bracket the root directly, or if the initial guess does not bracket the root, otherwise proceed with full Brent algorithm
+        if (yMin*yMax>0 || yMin*yInitial>0) {
+            throw new IllegalArgumentException("Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [" + min + "," + max + "], Values: [" + yMin + "," + yMax + "], Initial guess value: " + yInitial);
+        }
 
         // full Brent algorithm starting with provided initial guess
         return solve(f, min, yMin, max, yMax, initial, yInitial);