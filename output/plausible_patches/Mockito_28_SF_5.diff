diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..c27d55b39 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,11 +88,23 @@ public class DefaultInjectionEngine {
         }
     }
 
-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
-        }
-    }
+
+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
+        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {
+            continue;
+        }
+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        if (mockCandidate != null) {
+            try {
+                field.setAccessible(true);
+                field.set(fieldInstance, mockCandidate);
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Could not inject mock " + mockCandidate + " to field " + field.getName(), e);
+            }
+        }
+    }
+}
 
     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {
         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();