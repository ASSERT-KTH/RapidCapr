diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
index ce694ce8f..9fd2a5a64 100644
--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
@@ -165,22 +165,26 @@ public class MannWhitneyUTest {
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
-    private double calculateAsymptoticPValue(final double Umin,
+private double calculateAsymptoticPValue(final double Umin,
                                              final int n1,
                                              final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+        final double n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
-
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+        // Use an approximation to the normal distribution that is valid for large datasets
+        final double mu = n1n2prod / 2.0;
+        final double sigmaSquared = n1n2prod * (n1 + n2 + 1) / 12.0;
+        if (sigmaSquared <= 0.0) {
+            return 1.0; // Both samples are empty
+        }
+        final double sigma = Math.sqrt(sigmaSquared);
+        final double z = (Umin - mu) / sigma;
 
         final NormalDistribution standardNormal = new NormalDistribution(0, 1);
 
-        return 2 * standardNormal.cumulativeProbability(z);
+        // Return the two-sided p-value
+        return 2.0 * (1.0 - standardNormal.cumulativeProbability(Math.abs(z)));
     }
 
     /**