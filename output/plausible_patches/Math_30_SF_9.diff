diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
index ce694ce8f..9b87e1829 100644
--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java
@@ -165,23 +165,27 @@ public class MannWhitneyUTest {
      * @throws MaxCountExceededException if the maximum number of
      * iterations is exceeded
      */
-    private double calculateAsymptoticPValue(final double Umin,
-                                             final int n1,
-                                             final int n2)
+private double calculateAsymptoticPValue(final double Umin,
+                                         final int n1,
+                                         final int n2)
         throws ConvergenceException, MaxCountExceededException {
 
-        final int n1n2prod = n1 * n2;
+    final double n1n2prod = n1 * n2;
 
-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation
-        final double EU = n1n2prod / 2.0;
-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
+    // Calculate the mean and standard deviation
+    final double mean = n1n2prod / 2.0;
+    final double sd = Math.sqrt(n1n2prod * (n1 + n2 + 1) / 12.0);
 
-        final double z = (Umin - EU) / FastMath.sqrt(VarU);
+    // Calculate the z-score
+    final double z = (Umin - mean) / sd;
 
-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);
+    // Use the normal distribution to calculate the p-value
+    final NormalDistribution standardNormal = new NormalDistribution();
+    final double pValue = 2.0 * standardNormal.cumulativeProbability(-Math.abs(z));
 
-        return 2 * standardNormal.cumulativeProbability(z);
-    }
+    // Return the result
+    return pValue;
+}
 
     /**
      * Returns the asymptotic <i>observed significance level</i>, or <a href=