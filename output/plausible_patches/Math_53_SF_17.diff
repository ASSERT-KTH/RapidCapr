diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..63654459f 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,24 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    double sumReal = real + rhs.getReal();
+    double sumImaginary = imaginary + rhs.getImaginary();
+    if (Double.isNaN(sumReal) || Double.isNaN(sumImaginary)) {
+        return createComplex(Double.NaN, Double.NaN);
+    } else if (Double.isInfinite(sumReal) && Double.isInfinite(sumImaginary)) {
+        double sign = ((real < 0 && rhs.getReal() > 0) || (real > 0 && rhs.getReal() < 0) ||
+                       (imaginary < 0 && rhs.getImaginary() > 0) || (imaginary > 0 && rhs.getImaginary() < 0)) ? -1.0 : 1.0;
+        return createComplex(sign * Double.POSITIVE_INFINITY, sign * Double.POSITIVE_INFINITY);
+    } else if (Double.isInfinite(sumReal)) {
+        return createComplex(sumReal, rhs.getImaginary() + imaginary);
+    } else if (Double.isInfinite(sumImaginary)) {
+        return createComplex(sumReal + rhs.getReal(), sumImaginary);
+    } else {
+        return createComplex(sumReal, sumImaginary);
     }
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of