diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java
index e0a8e97e9..681083aea 100644
--- a/src/main/java/org/apache/commons/math/complex/Complex.java
+++ b/src/main/java/org/apache/commons/math/complex/Complex.java
@@ -147,12 +147,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {
      * @return the complex number sum
      * @throws NullArgumentException if <code>rhs</code> is null
      */
-    public Complex add(Complex rhs)
-        throws NullArgumentException {
-        MathUtils.checkNotNull(rhs);
-        return createComplex(real + rhs.getReal(),
-            imaginary + rhs.getImaginary());
+public Complex add(Complex rhs) throws NullArgumentException {
+    MathUtils.checkNotNull(rhs);
+    double newReal = real + rhs.getReal();
+    double newImaginary = imaginary + rhs.getImaginary();
+    if (Double.isFinite(newReal) && Double.isFinite(newImaginary)) {
+        // If both the real and imaginary parts are finite, return the new complex number.
+        return createComplex(newReal, newImaginary);
+    } else if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {
+        // If either the real or imaginary part is NaN, return a NaN complex number.
+        return createComplex(Double.NaN, Double.NaN);
+    } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {
+        // If both the real and imaginary parts are infinite, return a complex infinity
+        // with the same sign as newReal.
+        double newSign = Math.signum(newReal);
+        return createComplex(newSign * Double.POSITIVE_INFINITY, newSign * Double.POSITIVE_INFINITY);
+    } else if (Double.isInfinite(newReal)) {
+        // If only the real part is infinite, return a new complex number with the same
+        // imaginary part as the original number.
+        return createComplex(newReal, imaginary + rhs.getImaginary());
+    } else {
+        // If only the imaginary part is infinite, return a new complex number with the same
+        // real part as the original number.
+        return createComplex(real + rhs.getReal(), newImaginary);
     }
+}
 
     /**
      * Return the conjugate of this complex number. The conjugate of