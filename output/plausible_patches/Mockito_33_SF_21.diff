diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 203413fc9..22f3ef62e 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -89,15 +89,28 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
         return !overloadedButSameArgs;
     }
 
-    public boolean hasSameMethod(Invocation candidate) {        
-        //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
-        Method m1 = invocation.getMethod();
-        Method m2 = candidate.getMethod();
-        
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+public boolean hasSameMethod(Invocation candidate) {
+    Method m1 = invocation.getMethod();
+    Method m2 = candidate.getMethod();
+
+    if (m1.equals(m2)) {
+        return true;
     }
+
+    if (!m1.getName().equals(m2.getName()) || m1.getParameterCount() != m2.getParameterCount()) {
+        return false;
+    }
+
+    Class<?>[] m1ParamTypes = m1.getParameterTypes();
+    Class<?>[] m2ParamTypes = m2.getParameterTypes();
+    for (int i = 0; i < m1ParamTypes.length; i++) {
+        if (m1ParamTypes[i] != m2ParamTypes[i]) {
+            return false;
+        }
+    }
+
+    return true;
+}
     
     public Location getLocation() {
         return invocation.getLocation();
@@ -126,4 +139,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
 
         return out;
     }
-}
\ No newline at end of file
+}