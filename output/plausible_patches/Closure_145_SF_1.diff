diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..b973a967 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,26 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+private boolean isOneExactlyFunctionOrDo(Node n) {
+  if (n.getType() == Token.LABEL) {
+    Node child = n.getFirstChild().getNext();
+    if (child.getType() == Token.FUNCTION || child.getType() == Token.DO) {
+      return true;
+    }
+    // if the child is a block containing a function or do statement, return true
+    if (child.getType() == Token.BLOCK) {
+      for (Node grandChild = child.getFirstChild(); grandChild != null; grandChild = grandChild.getNext()) {
+        if (grandChild.getType() == Token.FUNCTION || grandChild.getType() == Token.DO) {
+          return true;
+        }
+      }
+    }
   }
+  // Either a empty statement or an block with more than one child,
+  // isn't a FUNCTION or DO.
+  return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) && 
+         (n.getType() != Token.BLOCK || n.getFirstChild() == n.getLastChild());
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike