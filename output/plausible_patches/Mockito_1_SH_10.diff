diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..4c6fa79ab 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,7 +120,33 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+Object[] rawArguments = invocation.getRawArguments();
+int argCount = rawArguments.length;
+for (int i = 0; i < matchers.size(); i++) {
+    Matcher m = matchers.get(i);
+    if (m instanceof CapturesArguments) {
+        Object arg;
+        if (i < argCount) {
+            arg = rawArguments[i];
+            if(isVariableArgument(invocation, i) && isVarargMatcher(m)) {
+                Object varArg = arg;
+                if (varArg != null && varArg.getClass().isArray()) {
+                    int varArgLength = Array.getLength(varArg);
+                    Object[] varArgArray = new Object[varArgLength];
+                    for (int j = 0; j < varArgLength; j++) {
+                        varArgArray[j] = Array.get(varArg, j);
+                    }
+                    arg = varArgArray;
+                } else {
+                    arg = new Object[]{varArg};
+                }
+            }
+        } else {
+            arg = null;
+        }
+        ((CapturesArguments) m).captureFrom(arg);
+    }
+}
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {