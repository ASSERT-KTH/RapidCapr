diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index a0f95db9..5f1f2a94 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1563,33 +1563,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
    * that have been visited
    * @param interfaceType The super interface that is being visited
    */
-  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
+private void checkInterfaceConflictProperties(NodeTraversal t, Node n,
       String functionName, HashMap<String, ObjectType> properties,
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+        // This can be the case if interfaceType is proxy to a non-existent
+        // object (which is a bad type annotation, but shouldn't crash).
+        // Therefore, we don't need to do anything here, just return.
+        return;
+    }
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (currentPropertyNames == null) {
+        // In rare cases, implicitProto.getOwnPropertyNames() can return null.
+        // This happens if the external type source is not available in the currently running compilation.
+        // Therefore, we don't need to do anything here, just return.
+        return;
+    }
     for (String name : currentPropertyNames) {
-      ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
+        ObjectType oType = properties.get(name);
+        if (oType != null) {
+            JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);
+            if (interfaceTypePropertyType == null) {
+                // This can happen if the property is not defined in interfaceType.
+                // Therefore, we don't need to do anything here, just continue the loop.
+                continue;
+            }
+            if (!interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {
+                compiler.report(t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name,
+                        oType.toString(), interfaceType.toString()));
+            }
         }
-      }
-      currentProperties.put(name, interfaceType);
+        currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+        checkInterfaceConflictProperties(t, n, functionName, properties,
+                currentProperties, iType);
     }
-  }
+}
 
   /**
    * Visits a {@link Token#FUNCTION} node.