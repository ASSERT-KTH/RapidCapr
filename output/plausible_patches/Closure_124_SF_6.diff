diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..257c2c8c 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,31 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+private boolean isSafeReplacement(Node node, Node replacement) {
     if (node.isName()) {
-      return true;
+        return true;
     }
+
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+    Node leftChild = node.getFirstChild();
+    while (leftChild.isGetProp()) {
+        leftChild = leftChild.getFirstChild();
+    }
+
+    if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {
+        return false;
+    }
+
+    if (leftChild.isString()) {
+        String computedPropName = leftChild.getString();
+        if (isNameAssignedTo(computedPropName, replacement)) {
+            return false;
+        }
     }
 
     return true;
-  }
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +251,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}