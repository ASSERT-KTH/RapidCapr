diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java
index fc2578d8..ced29821 100644
--- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -859,37 +859,45 @@ public class FunctionType extends PrototypeObjectType {
   }
 
   @Override
-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {
     setResolvedTypeInternal(this);
 
     call = (ArrowType) safeResolve(call, t, scope);
     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);
 
-    // Warning about typeOfThis if it doesn't resolve to an ObjectType
-    // is handled further upstream.
-    // TODO(nicksantos): Handle this correctly if we have a UnionType.
-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);
+    if (typeOfThis != null) {
+        JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);
+        if (resolvedTypeOfThis instanceof ObjectType) {
+            typeOfThis = (ObjectType) resolvedTypeOfThis;
+        }
+    }
 
     boolean changed = false;
     ImmutableList.Builder<ObjectType> resolvedInterfaces =
-        ImmutableList.builder();
+            ImmutableList.builder();
     for (ObjectType iface : implementedInterfaces) {
-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);
-      resolvedInterfaces.add(resolvedIface);
-      changed |= (resolvedIface != iface);
+        JSType resolvedIface = safeResolve(iface, t, scope);
+        if (resolvedIface instanceof ObjectType) {
+            ObjectType resolvedObj = (ObjectType) resolvedIface;
+            changed |= (resolvedObj != iface);
+            resolvedInterfaces.add(resolvedObj);
+        }
     }
     if (changed) {
-      implementedInterfaces = resolvedInterfaces.build();
+        implementedInterfaces = resolvedInterfaces.build();
     }
 
     if (subTypes != null) {
-      for (int i = 0; i < subTypes.size(); i++) {
-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));
-      }
+        for (int i = 0; i < subTypes.size(); i++) {
+            JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);
+            if (resolvedSubType instanceof FunctionType) {
+                subTypes.set(i, (FunctionType) resolvedSubType);
+            }
+        }
     }
 
     return super.resolveInternal(t, scope);
-  }
+}
 
   @Override
   public String toDebugHashCodeString() {