diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 4aa45558..0dec1ec3 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -84,18 +84,35 @@ class Normalize implements CompilerPass, Callback {
   }
 
   @Override
-  public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
-    if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
-    }
+public void process(Node externs, Node root) {
+  // Traverse the externs and root ASTs
+  NodeTraversal t = new NodeTraversal(compiler, this);
+  t.traverseRoots(externs, root);
+
+  // Remove any duplicate declarations in the ASTs
+  removeDuplicateDeclarations(externs);
+  removeDuplicateDeclarations(root);
+
+  // Rename local variable names if needed
+  if (MAKE_LOCAL_NAMES_UNIQUE) {
+    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
+    NodeTraversal renamerTraversal = new NodeTraversal(compiler, renamer);
+    renamerTraversal.traverseRoots(root);
+
+    // Remove any new duplicate declarations caused by renaming
     removeDuplicateDeclarations(root);
-    new PropogateConstantAnnotations(compiler, assertOnChange)
-        .process(externs, root);
   }
 
+  // Propagate constant annotations
+  PropogateConstantAnnotations constantAnnotations = new PropogateConstantAnnotations(compiler, assertOnChange);
+  try {
+    constantAnnotations.process(externs, root);
+  } catch (RuntimeException re) {
+    // Log the error message and continue execution
+    System.err.println("Error encountered while propagating constant annotations: " + re.getMessage());
+  }
+}
+
   @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {
     doStatementNormalizations(t, n, parent);