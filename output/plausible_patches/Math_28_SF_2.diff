diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
index a84438d9b..2a0fe4c50 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -110,47 +110,34 @@ public class SimplexSolver extends AbstractLinearOptimizer {
             }
         }
 
-        if (minRatioPositions.size() == 0) {
+        if (minRatioPositions.isEmpty()) {
             return null;
-        } else if (minRatioPositions.size() > 1) {
+        } else if (minRatioPositions.size() == 1) {
+            return minRatioPositions.get(0);
+        } else {
             // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
+            Integer minRow = null;
+            int minIndex = Integer.MAX_VALUE;
+            int numBasicVars = tableau.getNumObjectiveFunctions();
+            for (Integer row : minRatioPositions) {
+                for (int i = 0; i < numBasicVars; i++) {
+                    if (tableau.getBasicRow(i) == row && i < minIndex) {
+                        minIndex = i;
+                        minRow = row;
+                        break;
                     }
                 }
-
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
-                        }
-                    }
+                if (minRow != null) {
+                    break;
                 }
-                return minRow;
+            }
+            /* If no row has a basic variable in the current column, return any row
+             * from the minRatioPositions list. */
+            if (minRow == null) {
+                minRow = minRatioPositions.get(0);
+            }
+            return minRow;
         }
-        return minRatioPositions.get(0);
     }
 
     /**