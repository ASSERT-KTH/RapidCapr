diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 0e124d852..5a4e07961 100644
--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -121,21 +121,24 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * @return CDF evaluated at {@code x}.
      * @throws MathException if the algorithm fails to converge
      */
-    public double cumulativeProbability(double x) throws MathException {
-        final double dev = x - mean;
-        try {
-        return 0.5 * (1.0 + Erf.erf((dev) /
-                    (standardDeviation * FastMath.sqrt(2.0))));
-        } catch (MaxIterationsExceededException ex) {
-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38
-                return 0;
-            } else if (x > (mean + 20 * standardDeviation)) {
-                return 1;
-            } else {
-                throw ex;
-            }
-        }
+public double cumulativeProbability(double x) throws MathException {
+    if (Double.isInfinite(x)) {
+        return (x < 0) ? 0.0 : 1.0;
+    } else if (Double.isNaN(x)) {
+    	throw new MathException("Invalid input value: x = NaN");
+    }
+    final double dev = x - mean;
+    final double nSigma = dev / standardDeviation;
+
+    // Avoid overflow in exponential
+    if (nSigma > 40.0) {
+        return 1.0;
+    } else if (nSigma < -40.0) {
+        return 0.0;
+    } else {
+        return 0.5 * (1.0 + Erf.erf(nSigma / FastMath.sqrt(2.0)));
     }
+}
 
     /**
      * Return the absolute accuracy setting of the solver used to estimate