diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..5d8d1696 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -359,22 +359,34 @@ public final class GJChronology extends AssembledChronology {
                  hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        // Check if date is in Gregorian calendar
+        if (year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15)) {
+            // Gregorian
+            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant < iCutoverMillis) {
+                // Maybe it's Julian.
+                instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (instant >= iCutoverMillis) {
+                    // Okay, it's in the illegal cutover gap.
+                    throw new IllegalArgumentException("Specified date does not exist");
+                }
+            }
+            return instant;
+        } else {
+            // Julian
+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {
+                throw new IllegalArgumentException("Invalid leap year day");
+            }
+            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return instant;
         }
-        return instant;
     }
 
     /**