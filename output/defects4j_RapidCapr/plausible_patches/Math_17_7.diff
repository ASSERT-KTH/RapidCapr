diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index 0f78330a5..b4a494abc 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1599,9 +1599,24 @@ public class Dfp implements FieldElement<Dfp> {
      * @param x multiplicand
      * @return product of this and x
      */
-    public Dfp multiply(final int x) {
+public Dfp multiply(final int x) {
+    if (isNaN() || Double.isNaN(x)) {
+        return newInstance(this);
+    }
+
+    // Check if x can be represented exactly as a Dfp
+    if (x == (int) x) {
+        try {
+            return multiply(new Dfp(getField(), x));
+        } catch (Throwable ignored) {
+            // If multiplication fails, fall back to fast multiplication method
             return multiplyFast(x);
+        }
+    } else {
+        // If x cannot be represented exactly as a Dfp, fall back to fast multiplication method
+        return multiplyFast(x);
     }
+}
 
     /** Multiply this by a single digit 0&lt;=x&lt;radix.
      * There are speed advantages in this special case.