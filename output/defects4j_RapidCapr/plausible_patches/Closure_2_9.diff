diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java
index a0f95db9..44255039 100644
--- a/src/com/google/javascript/jscomp/TypeCheck.java
+++ b/src/com/google/javascript/jscomp/TypeCheck.java
@@ -1568,26 +1568,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {
       HashMap<String, ObjectType> currentProperties,
       ObjectType interfaceType) {
     ObjectType implicitProto = interfaceType.getImplicitPrototype();
-    Set<String> currentPropertyNames;
-      // This can be the case if interfaceType is proxy to a non-existent
-      // object (which is a bad type annotation, but shouldn't crash).
-      currentPropertyNames = implicitProto.getOwnPropertyNames();
+    if (implicitProto == null) {
+      // This can be the case if interfaceType is proxy to a non-existent object
+      // (which is a bad type annotation, but shouldn't crash).
+      return;
+    }
+    Set<String> currentPropertyNames = implicitProto.getOwnPropertyNames();
     for (String name : currentPropertyNames) {
       ObjectType oType = properties.get(name);
-      if (oType != null) {
-        if (!interfaceType.getPropertyType(name).isEquivalentTo(
-            oType.getPropertyType(name))) {
-          compiler.report(
-              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
-                  functionName, name, oType.toString(),
-                  interfaceType.toString()));
-        }
+      JSType interfaceTypePropertyType = interfaceType.getPropertyType(name);
+      if (oType != null && interfaceTypePropertyType != null &&
+          !interfaceTypePropertyType.isEquivalentTo(oType.getPropertyType(name))) {
+        compiler.report(
+            t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
+                        functionName, name, oType.toString(), interfaceType.toString()));
       }
       currentProperties.put(name, interfaceType);
     }
     for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
-      checkInterfaceConflictProperties(t, n, functionName, properties,
-          currentProperties, iType);
+      checkInterfaceConflictProperties(
+          t, n, functionName, properties, currentProperties, iType);
     }
   }
 