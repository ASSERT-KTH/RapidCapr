diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..486d64b28 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+
+        if (field.getType().isInstance(candidate)) {
+            field.setAccessible(true);
+            try {
+                field.set(fieldInstance, candidate);
+                mocks.remove(candidate); // remove the used mock from the set of available mocks
+            } catch (IllegalAccessException e) {
+                throw new RuntimeException("Unable to inject mock candidate", e);
+            }
+        } else if (candidate != null) {
+            throw new RuntimeException("Mock candidate " + candidate.getClass().getSimpleName() + " is not compatible with field type " + field.getType().getSimpleName());
+        }
         }
     }
 