diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..b5ea0925 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,32 +110,36 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
+private void traverse(Node node) {
     if (!shouldVisit(node)) {
-      return;
+        return;
     }
 
     int visits = 0;
+    boolean tooManyIterations = false;
+
     do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
-        Node next = c.getNext();
-        c = next;
-      }
+        if (tooManyIterations) {
+            throw new IllegalStateException("Too many iterations");
+        }
+
+        Node c = node.getFirstChild();
+        while (c != null) {
+            Node next = c.getNext();
+            traverse(c);
+            c = next;
+        }
 
-      visit(node);
-      visits++;
+        visit(node);
+        visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+        if (visits >= 10000) {
+            tooManyIterations = true;
+        }
     } while (shouldRetraverse(node));
 
     exitNode(node);
-  }
+}
 
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {