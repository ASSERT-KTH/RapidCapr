diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
index a8e92fcc..39272fd6 100644
--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
@@ -81,32 +81,36 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback
   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
     new Predicate<Node>() {
       @Override
-      public boolean apply(Node n) {
-        // When the node is null it means, we reached the implicit return
-        // where the function returns (possibly without an return statement)
-        if (n == null) {
-          return false;
-        }
+public boolean apply(Node n) {
+  // When the node is null it means, we reached the implicit return
+  // where the function returns (possibly without an return statement)
+  if (n == null) {
+    return false;
+  }
 
-        // TODO(user): We only care about calls to functions that
-        // passes one of the dependent variable to a non-side-effect free
-        // function.
-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
-          return true;
-        }
+  // TODO(user): We only care about calls to functions that
+  // passes one of the dependent variable to a non-side-effect free
+  // function.
+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {
+    return true;
+  }
 
-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
-          return true;
-        }
+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {
+    return true;
+  }
 
+  // Added to handle DELETE operations
+  if (n.isDelProp()) {
+    return true;
+  }
 
-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
-            return true;
-          }
-        }
-        return false;
-      }
+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {
+      return true;
+    }
+  }
+  return false;
+}
   };
 
   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {