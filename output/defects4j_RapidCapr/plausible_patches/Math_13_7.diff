diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
index 99d86e92a..f71586f8d 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -558,8 +558,35 @@ public abstract class AbstractLeastSquaresOptimizer
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
-    private RealMatrix squareRoot(RealMatrix m) {
+private RealMatrix squareRoot(RealMatrix m) {
+    final int maxTries = 5;
+    int tries = 0;
+    while (tries < maxTries) {
+        try {
             final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+            RealMatrix sqrt = dec.getSquareRoot();
+            if (sqrt == null) {
+                sqrt = MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());
+            } else {
+                // Reduce memory usage by copying only values above or on diagonal
+                for (int i = 0; i < sqrt.getRowDimension(); i++) {
+                    for (int j = 0; j < sqrt.getColumnDimension(); j++) {
+                        if (j < i) {
+                            sqrt.setEntry(i, j, 0.0);
+                        }
+                    }
+                }
+            }
+            return sqrt;
+        } catch (OutOfMemoryError e) {
+            // Log the error message and try again
+            System.err.println("Out of memory error: " + e.getMessage());
+            // Reduce memory usage by running garbage collection
+            System.gc();
+            tries++;
+        }
     }
+    // If all tries failed, return input matrix
+    return m;
+}
 }