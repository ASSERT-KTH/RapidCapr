diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..88b8307c 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,7 +110,7 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
+private void traverse(Node node) {
     // The goal here is to avoid retraversing
     // the entire AST to catch newly created opportunities.
     // So we track whether a "unit of code" has changed,
@@ -122,20 +122,22 @@ class PeepholeOptimizationsPass
     int visits = 0;
     do {
       Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
+      while (c != null) {
         Node next = c.getNext();
+        traverse(c);
         c = next;
       }
 
       visit(node);
       visits++;
 
-      Preconditions.checkState(visits < 10000, "too many interations");
+      if (visits >= 10000) {
+        Preconditions.checkState(false, "too many iterations");
+      }
     } while (shouldRetraverse(node));
 
     exitNode(node);
-  }
+}
 
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {