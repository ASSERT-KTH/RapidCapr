diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..47792e19 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,30 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n.getType() == Token.LABEL) {
+        n = n.getLastChild();
+        // Check if label has an empty statement
+        if (n.getType() == Token.EMPTY) {
+            if (n.getNext().getType() != Token.FUNCTION && n.getNext().getType() != Token.DO) {
+                return false;
+            }
+            n = n.getNext();
+        }
+    }
+    // Check if node is a block
+    if (n.getType() == Token.BLOCK && n.hasChildren()) {
+        Node firstChild = n.getFirstChild();
+        Node lastChild = n.getLastChild();
+        // Check if block has exactly one child
+        if (firstChild == lastChild) {
+            return isOneExactlyFunctionOrDo(firstChild);
+        }
+        return false;
+    }
+    // Check if node is a function or do
+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike