diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index 0345c855..09bb545f 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -154,7 +154,7 @@ public abstract class ChainableReverseAbstractInterpreter
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
     switch (node.getType()) {
       case Token.NAME:
         scope.inferSlotType(node.getString(), type);
@@ -169,11 +169,27 @@ public abstract class ChainableReverseAbstractInterpreter
         scope.inferQualifiedSlot(node, qualifiedName, origType, type);
         break;
 
-        // "this" references aren't currently modeled in the CFG.
+      case Token.THIS:
+        // Infer the type of "this" to be the current scope's "this" type, if it has one
+        JSType thisType = scope.getTypeOfThis();
+        if (thisType != null) {
+          scope.inferSlotType("this", thisType);
+        }
+        break;
+
+      case Token.FUNCTION:
+        Node fnNameNode = node.getFirstChild();
+        if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {
+          String fnName = fnNameNode.getString();
+          if (!fnName.isEmpty() && !fnName.equals(UNKNOWN_TYPE)) {
+            scope.inferSlotType(fnName, type);
+          }
+        }
+        break;
 
       default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
+        throw new IllegalArgumentException("Invalid node type: " + node.getType()
+            + "\n" + node.toStringTree());
     }
   }
 