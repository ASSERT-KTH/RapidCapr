diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..e26ccf95 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,22 +203,31 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
+private boolean isSafeReplacement(Node node, Node replacement) {
+  if(node.isName()) {
+    return true;
+  }
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
-    }
+  if(node.isGetProp()) {
+    // Check if any of the intermediate nodes are assigned to the replacement node.
+    Node currentNode = node.getFirstChild();
+    while(currentNode != null) {
+      if(currentNode.isName()) {
+        if(isNameAssignedTo(currentNode.getString(), replacement)) {
+          return false;
+        }
+      }
+      else if(!isSafeReplacement(currentNode, replacement)) {
+        return false;
+      }
 
-    return true;
+      currentNode = currentNode.getNext();
+    }
   }
 
+  return true;
+}
+
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */
@@ -241,4 +250,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}