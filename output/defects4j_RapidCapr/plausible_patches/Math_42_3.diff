diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
index 02c22b59f..e2295b9a4 100644
--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java
@@ -393,36 +393,40 @@ class SimplexTableau implements Serializable {
      *
      * @return current solution
      */
-    protected RealPointValuePair getSolution() {
-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
-
-      Set<Integer> basicRows = new HashSet<Integer>();
-      double[] coefficients = new double[getOriginalNumDecisionVariables()];
-      for (int i = 0; i < coefficients.length; i++) {
-          int colIndex = columnLabels.indexOf("x" + i);
-          if (colIndex < 0) {
-            coefficients[i] = 0;
-            continue;
-          }
-          Integer basicRow = getBasicRow(colIndex);
-              // if the basic row is found to be the objective function row
-              // set the coefficient to 0 -> this case handles unconstrained 
-              // variables that are still part of the objective function
+protected RealPointValuePair getSolution() {
+  int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
+  Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
+  double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
+
+  Set<Integer> basicRows = new HashSet<Integer>();
+  double[] coefficients = new double[getOriginalNumDecisionVariables()];
+
+  for (int i = 0; i < coefficients.length; i++) {
+    int colIndex = columnLabels.indexOf("x" + i);
+    if (colIndex < 0) {
+      coefficients[i] = 0;
+    } else {
+      Integer basicRow = getBasicRow(colIndex);
+
+      if (basicRow != null && basicRow < getNumObjectiveFunctions()) {
+        coefficients[i] = 0;
+      } else {
+        Double entry = basicRow != null ? getEntry(basicRow, getRhsOffset()) : 0;
+        if (restrictToNonNegative && entry < 0) {
+          coefficients[i] = 0;
+        } else {
           if (basicRows.contains(basicRow)) {
-              // if multiple variables can take a given value
-              // then we choose the first and set the rest equal to 0
-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);
+            coefficients[i] = 0 - mostNegative;
           } else {
-              basicRows.add(basicRow);
-              coefficients[i] =
-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -
-                  (restrictToNonNegative ? 0 : mostNegative);
+            basicRows.add(basicRow);
+            coefficients[i] = entry - mostNegative;
           }
+        }
       }
-      return new RealPointValuePair(coefficients, f.getValue(coefficients));
     }
+  }
+  return new RealPointValuePair(coefficients, f.getValue(coefficients));
+}
 
     /**
      * Subtracts a multiple of one row from another.