diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..93af2da9a 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,24 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Class<?> fieldType = field.getType();
+
+if (candidate != null && fieldType.isAssignableFrom(candidate.getClass())) {
+    try {
+        field.setAccessible(true);
+        field.set(fieldInstance, fieldType.cast(candidate));
+        mocks.remove(candidate);
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Unable to inject mock candidate", e);
+    }
+} else if (candidate != null) {
+    String message = String.format("Mock candidate %s is not compatible with field type %s", candidate.getClass().getSimpleName(), fieldType.getSimpleName());
+    throw new RuntimeException(message);
+}
         }
     }
 