diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..65ffac22 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -205,19 +205,14 @@ class PeepholeSubstituteAlternateSyntax
     }
   }
 
-  private Node tryFoldSimpleFunctionCall(Node n) {
-    Preconditions.checkState(n.isCall());
-    Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
+private Node tryFoldSimpleFunctionCall(Node n) {
+  Preconditions.checkState(n.isCall());
+  Node callTarget = n.getFirstChild();
+  if (callTarget != null && callTarget.isName() &&
+      callTarget.getString().equals("String")) {
+    Node value = callTarget.getNext();
+    if (value != null && !NodeUtil.mayHaveSideEffects(n)) {
+      if (value.isString() || value.isNumber()) {
         Node addition = IR.add(
             IR.string("").srcref(callTarget),
             value.detachFromParent());
@@ -226,8 +221,9 @@ class PeepholeSubstituteAlternateSyntax
         return addition;
       }
     }
-    return n;
   }
+  return n;
+}
 
   private Node tryFoldImmediateCallToBoundFunction(Node n) {
     // Rewriting "(fn.bind(a,b))()" to "fn.call(a,b)" makes it inlinable