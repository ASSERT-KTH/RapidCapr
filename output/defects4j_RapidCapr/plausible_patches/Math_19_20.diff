diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 51d1c6428..58e58cc2f 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -537,6 +537,37 @@ public class CMAESOptimizer
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+if (hasFiniteBounds) {
+    boolean anyFiniteBound = false;
+    double maxBoundary = Double.NEGATIVE_INFINITY;
+    double minBoundary = Double.POSITIVE_INFINITY;
+    for (int i = 0; i < lB.length; i++) {
+        if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {
+            anyFiniteBound = true;
+            maxBoundary = Math.max(maxBoundary, uB[i]);
+            minBoundary = Math.min(minBoundary, lB[i]);
+        }
+    }
+
+    if (!anyFiniteBound) {
+        // All bounds are infinite, the normalize method will not work.
+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);
+    } else if (Double.isInfinite(minBoundary) || Double.isInfinite(maxBoundary) || maxBoundary - minBoundary > Double.MAX_VALUE / 2) {
+        // If there is at least one finite bound, none can be infinite,
+        // and mixed cases are not supported by the current code.
+        throw new NumberIsTooLargeException(Double.MAX_VALUE / 2, maxBoundary - minBoundary, false);
+    } else {
+        // Convert API to internal handling of boundaries.
+        boundaries = new double[2][];
+        boundaries[0] = lB;
+        boundaries[1] = uB;
+
+        // Abort early if the normalization will overflow (cf. "encode" method).
+        if (maxBoundary - minBoundary > Double.MAX_VALUE / 2) {
+            throw new NumberIsTooLargeException(Double.MAX_VALUE / 2, maxBoundary - minBoundary, false);
+        }
+    }
+}
             }
         } else {
             // Convert API to internal handling of boundaries.