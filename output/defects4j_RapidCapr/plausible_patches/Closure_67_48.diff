diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
index 30b19e0b..6880ae0d 100644
--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
@@ -312,26 +312,21 @@ class AnalyzePrototypeProperties implements CompilerPass {
     }
 
     private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
-          }
+        Node n = assign.getFirstChild();
+        boolean isNotAssignmentOp = !NodeUtil.isAssignmentOp(assign.getParent());
+        boolean hasNextSibling = assign.getNext() == null;
+        boolean isInForIn = NodeUtil.isForIn(assign.getParent());
+
+        if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP &&
+                n.getFirstChild().getType() == Token.GETPROP && isNotAssignmentOp && hasNextSibling && !isInForIn) {
+            Node child = n.getFirstChild().getFirstChild().getNext();
+            if (child.getType() == Token.STRING && child.getString().equals("prototype")) {
+                return true;
+            }
         }
-      }
 
-      return false;
-    }
+        return false;
+    }  
 
     /**
      * Processes a NAME node to see if it's a global function declaration.