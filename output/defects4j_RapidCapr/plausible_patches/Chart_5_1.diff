diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java
index 0b37e6e..d902bc5 100644
--- a/source/org/jfree/data/xy/XYSeries.java
+++ b/source/org/jfree/data/xy/XYSeries.java
@@ -537,43 +537,54 @@ public class XYSeries extends Series implements Cloneable, Serializable {
      * @return A copy of the overwritten data item, or <code>null</code> if no
      *         item was overwritten.
      */
-    public XYDataItem addOrUpdate(Number x, Number y) {
-        if (x == null) {
-            throw new IllegalArgumentException("Null 'x' argument.");
-        }
-
-        // if we get to here, we know that duplicate X values are not permitted
-        XYDataItem overwritten = null;
-        int index = indexOf(x);
-        if (index >= 0 && !this.allowDuplicateXValues) {
-            XYDataItem existing = (XYDataItem) this.data.get(index);
-            try {
-                overwritten = (XYDataItem) existing.clone();
-            }
-            catch (CloneNotSupportedException e) {
-                throw new SeriesException("Couldn't clone XYDataItem!");
-            }
-            existing.setY(y);
-        }
-        else {
-            // if the series is sorted, the negative index is a result from
-            // Collections.binarySearch() and tells us where to insert the
-            // new item...otherwise it will be just -1 and we should just
-            // append the value to the list...
-            if (this.autoSort) {
-                this.data.add(-index - 1, new XYDataItem(x, y));
-            }
-            else {
-                this.data.add(new XYDataItem(x, y));
-            }
-            // check if this addition will exceed the maximum item count...
-            if (getItemCount() > this.maximumItemCount) {
-                this.data.remove(0);
-            }
-        }
-        fireSeriesChanged();
-        return overwritten;
-    }
+public XYDataItem addOrUpdate(Number x, Number y) {
+    if (x == null) {
+        throw new IllegalArgumentException("Null 'x' argument.");
+    }
+
+    XYDataItem overwritten = null;
+    int index = indexOf(x);
+
+    if (index >= 0 && !this.allowDuplicateXValues) {
+        // Handle existing XYDataItem. Clone it to accomodate
+        // Keep the old Y value and fire the series change event
+        XYDataItem existing = (XYDataItem) this.data.get(index);
+        try {
+            overwritten = (XYDataItem) existing.clone();
+            existing.setY(y);
+            fireSeriesChanged();
+        } catch (CloneNotSupportedException e) {
+            throw new SeriesException("Couldn't clone XYDataItem!");
+        }
+    } else {
+        // New XYDataItem
+        if (this.autoSort && index < 0) {
+            // Handle insertion of new XYDataItem at -index - 1. Insert it at end otherwise.
+            int insertionIndex = -index - 1;
+            this.data.add(insertionIndex, new XYDataItem(x, y));
+
+            if (getItemCount() > this.maximumItemCount) {
+                this.data.remove(0);
+            }
+            fireSeriesChanged();
+        } else if (!this.autoSort && index < 0) {
+            // Handle insertion of new XYDataItem at end.
+            this.data.add(new XYDataItem(x, y));
+            if (getItemCount() > this.maximumItemCount) {
+                this.data.remove(0);
+            }
+            fireSeriesChanged();
+        } else if (this.allowDuplicateXValues) {
+            // Add new XYDataItem without checking for index
+            this.data.add(new XYDataItem(x, y));
+            if (getItemCount() > this.maximumItemCount) {
+                this.data.remove(0);
+            }
+            fireSeriesChanged();
+        }
+    }
+    return overwritten;
+}
 
     /**
      * Returns the index of the item with the specified x-value, or a negative