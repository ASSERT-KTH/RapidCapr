diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..3d306512 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,34 +347,73 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
+            throws IllegalArgumentException {
+
         Chronology base;
         if ((base = getBase()) != null) {
             return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                    (year, monthOfYear, dayOfMonth,
+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        // Check if date is in Gregorian calendar
+        boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);
+        boolean isGregorianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) || (year == 1582 && monthOfYear == 10 && dayOfMonth < 15);
+
+        if (isGregorianAfterCutover) {
+            // Gregorian
+            long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant < iCutoverMillis) {
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            return instant;
+
+        } else if (isGregorianBeforeCutover) {
+            // Julian
+            if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {
+                throw new IllegalArgumentException("Invalid leap year day");
+            }
+            long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
             }
+            return instant;
+
+        } else {
+            // Date is in the cutover period
+            long gregorianInstant;
+            try {
+                gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            } catch (IllegalArgumentException e) {
+                // Date does not exist in Gregorian calendar
+                long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+                if (julianInstant >= iCutoverMillis) {
+                    throw e;
+                }
+                return julianInstant;
+            }
+
+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (julianInstant >= iCutoverMillis) {
+                // Date does not exist in Julian calendar
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            if (gregorianInstant == julianInstant) {
+                // Ambiguous date, return the Gregorian instant
+                return gregorianInstant;
+            } else {
+                // Date exists in both calendars, but is not ambiguous
+                throw new IllegalArgumentException("Specified date is ambiguous");
+            }
         }
-        return instant;
     }
 
     /**