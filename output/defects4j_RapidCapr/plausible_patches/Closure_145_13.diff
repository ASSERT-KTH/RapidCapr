diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..e62981c3 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,26 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node node) {
+    if (node.getType() == Token.LABEL) {
+        // Get the second child of the label, since the first child is always the label name.
+        Node labeledChild = node.getFirstChild().getNext();
+        
+        // If the labeled child is an empty statement, get the next child.
+        if (labeledChild.getType() == Token.EMPTY) {
+            labeledChild = labeledChild.getNext();
+        }
+        
+        // Recursively check if the labeled child is a single function or do node.
+        return isOneExactlyFunctionOrDo(labeledChild);
+    } else if (node.getType() == Token.BLOCK) {
+        // Check if the block has exactly one child and recursively check if it is a function or do node.
+        return node.getChildCount() == 1 && isOneExactlyFunctionOrDo(node.getFirstChild());
+    } else {
+        // Check if the node is a function or do node.
+        return node.getType() == Token.FUNCTION || node.getType() == Token.DO;
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike