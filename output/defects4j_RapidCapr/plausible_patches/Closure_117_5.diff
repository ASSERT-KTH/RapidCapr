diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java
index bcd024ac..0f0fe267 100644
--- a/src/com/google/javascript/jscomp/TypeValidator.java
+++ b/src/com/google/javascript/jscomp/TypeValidator.java
@@ -721,60 +721,62 @@ class TypeValidator {
    * @param dereference If true, the type of the node will be dereferenced
    *     to an Object type, if possible.
    */
-  String getReadableJSTypeName(Node n, boolean dereference) {
-
+String getReadableJSTypeName(Node n, boolean dereference) {
     // The best type name is the actual type name.
 
-    // If we're analyzing a GETPROP, the property may be inherited by the
-    // prototype chain. So climb the prototype chain and find out where
-    // the property was originally defined.
-    if (n.isGetProp()) {
-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();
-      if (objectType != null) {
-        String propName = n.getLastChild().getString();
-        if (objectType.getConstructor() != null &&
-            objectType.getConstructor().isInterface()) {
-          objectType = FunctionType.getTopDefiningInterface(
-              objectType, propName);
-        } else {
-          // classes
-          while (objectType != null && !objectType.hasOwnProperty(propName)) {
-            objectType = objectType.getImplicitPrototype();
-          }
-        }
-
-        // Don't show complex function names or anonymous types.
-        // Instead, try to get a human-readable type name.
-        if (objectType != null &&
-            (objectType.getConstructor() != null ||
-             objectType.isFunctionPrototypeType())) {
-          return objectType.toString() + "." + propName;
-        }
-      }
-    }
-
     JSType type = getJSType(n);
     if (dereference) {
-      ObjectType dereferenced = type.dereference();
-      if (dereferenced != null) {
-        type = dereferenced;
-      }
+        ObjectType dereferenced = type.dereference();
+        if (dereferenced != null) {
+            type = dereferenced;
+        }
     }
     if (type.isFunctionPrototypeType() ||
-        (type.toObjectType() != null &&
-         type.toObjectType().getConstructor() != null)) {
-      return type.toString();
+            (type.toObjectType() != null &&
+                    type.toObjectType().getConstructor() != null)) {
+        return type.toString();
     }
+
+    if (n.isGetProp()) {
+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();
+        if (objectType != null) {
+            String propName = n.getLastChild().getString();
+            if (objectType.getConstructor() != null &&
+                    objectType.getConstructor().isInterface()) {
+                objectType = FunctionType.getTopDefiningInterface(
+                        objectType, propName);
+            } else {
+                // classes
+                ObjectType currObjectType = objectType;
+                while (currObjectType != null) {
+                    if (currObjectType.hasOwnProperty(propName)) {
+                        objectType = currObjectType;
+                        break;
+                    }
+                    currObjectType = currObjectType.getImplicitPrototype();
+                }
+            }
+
+            // Don't show complex function names or anonymous types.
+            // Instead, try to get a human-readable type name.
+            if (objectType != null &&
+                    (objectType.getConstructor() != null ||
+                            objectType.isFunctionPrototypeType())) {
+                return objectType.toString() + "." + propName;
+            }
+        }
+    }
+
     String qualifiedName = n.getQualifiedName();
     if (qualifiedName != null) {
-      return qualifiedName;
+        return qualifiedName;
     } else if (type.isFunctionType()) {
-      // Don't show complex function names.
-      return "function";
+        // Don't show complex function names.
+        return "function";
     } else {
-      return type.toString();
+        return type.toString();
     }
-  }
+}
 
   /**
    * This method gets the JSType from the Node argument and verifies that it is