diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..9b4ca3d63 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,10 +184,64 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+if (x == x1) {
+    // New approximation is same as previous one
+    if (FastMath.abs(f1) > FastMath.abs(f0)) {
+        // Use a contraction
+        final double x1New = 0.5 * (x + x1);
+        final double f1New = computeObjectiveValue(x1New);
+        if (FastMath.abs(f1) > FastMath.abs(f1New)) {
+            // Successful contraction
+            x0 = x1;
+            x1 = x1New;
+            f0 = f1;
+            f1 = f1New;
+        } else {
+            // Failed contraction
+            final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);
+            if (inverted) {
+                x0 = FastMath.max(x0 - delta, getMin());
+            } else {
+                x1 = FastMath.min(x1 + delta, getMax());
+            }
+            f0 = computeObjectiveValue(x0);
+        }
+    } else {
+        // Use a bisection
+        final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);
+        if (inverted) {
+            x0 = FastMath.max(x0 - delta, getMin());
+        } else {
+            x1 = FastMath.min(x1 + delta, getMax());
+        }
+        f0 = computeObjectiveValue(x0);
+    }
+} else {
+    // New approximation is different from previous one
+    if (f1 * fx < 0) {
+        // Signs are different
+        x0 = x1;
+        f0 = f1;
+        inverted = !inverted;
+    } else {
+        // Signs are same
+        switch (method) {
+            case ILLINOIS:
+                f0 *= 0.5;
+                break;
+            case PEGASUS:
+                f0 *= f1 / (f1 + fx);
+                break;
+            case REGULA_FALSI:
+                // Nothing.
+                break;
+            default:
+                throw new MathInternalError();
+        }
+    }
+    x1 = x;
+    f1 = fx;
+}
                     break;
                 default:
                     // Should never happen.