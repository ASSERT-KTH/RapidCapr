diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java
index bdf55921..5d4555bb 100644
--- a/src/com/google/javascript/jscomp/CommandLineRunner.java
+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java
@@ -416,27 +416,32 @@ public class CommandLineRunner extends
   }
 
   @Override
-  protected CompilerOptions createOptions() {
+protected CompilerOptions createOptions() {
     CompilerOptions options = new CompilerOptions();
-    options.setCodingConvention(new ClosureCodingConvention());
     CompilationLevel level = flags.compilation_level;
     level.setOptionsForCompilationLevel(options);
-    if (flags.debug) {
-      level.setDebugOptionsForCompilationLevel(options);
-    }
-
     WarningLevel wLevel = flags.warning_level;
     wLevel.setOptionsForWarningLevel(options);
+    options.setCodingConvention(new ClosureCodingConvention());
     for (FormattingOption formattingOption : flags.formatting) {
-      formattingOption.applyToOptions(options);
+        formattingOption.applyToOptions(options);
+    }
+
+    // Fix: if process_closure_primitives flag is enabled and the CompilationLevel is not ADVANCED_OPTIMIZATIONS
+    // then set the closurePass to true, else set it to false
+    if (flags.process_closure_primitives && level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {
+        options.closurePass = true;
+    } else {
+        options.closurePass = false;
     }
-    if (flags.process_closure_primitives) {
-      options.closurePass = true;
+
+    if (flags.debug) {
+        level.setDebugOptionsForCompilationLevel(options);
     }
 
     initOptionsFromFlags(options);
     return options;
-  }
+}
 
   @Override
   protected Compiler createCompiler() {