diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..3533e896 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,36 +347,54 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
                                   int hourOfDay, int minuteOfHour,
                                   int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        }
+        throws IllegalArgumentException {
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
+    Chronology base;
+    if ((base = getBase()) != null) {
+        return base.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        if (instant < iCutoverMillis) {
-            // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
+
+    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 15)))) {
+        // Julian calendar
+        long instant = iJulianChronology.getDateTimeMillis
                 (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-            if (instant >= iCutoverMillis) {
-                // Okay, it's in the illegal cutover gap.
-                throw new IllegalArgumentException("Specified date does not exist");
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+        if (instant >= iCutoverMillis) {
+            // We're in the overlap period, so we need to use the Gregorian calendar to resolve the ambiguity
+            instant = iGregorianChronology.getDateTimeMillis
+                    (year, monthOfYear, dayOfMonth,
+                            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if (instant < iCutoverMillis) {
+                throw new IllegalArgumentException("Specified date does not exist in Julian calendar");
             }
         }
         return instant;
     }
 
+    // Gregorian calendar
+    long instant = iGregorianChronology.getDateTimeMillis
+            (year, monthOfYear, dayOfMonth,
+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+
+    if (instant < iCutoverMillis) {
+        // We're in the overlap period, so we need to use the Julian calendar to resolve the ambiguity
+        instant = iJulianChronology.getDateTimeMillis
+                (year, monthOfYear, dayOfMonth,
+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            throw new IllegalArgumentException("Specified date does not exist in Gregorian calendar");
+        }
+    }
+
+    return instant;
+}
+
     /**
      * Gets the cutover instant between Gregorian and Julian chronologies.
      * @return the cutover instant