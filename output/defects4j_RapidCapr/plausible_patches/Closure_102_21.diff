diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java
index 4aa45558..0255e7bf 100644
--- a/src/com/google/javascript/jscomp/Normalize.java
+++ b/src/com/google/javascript/jscomp/Normalize.java
@@ -84,17 +84,30 @@ class Normalize implements CompilerPass, Callback {
   }
 
   @Override
-  public void process(Node externs, Node root) {
-    NodeTraversal.traverse(compiler, root, this);
+public void process(Node externs, Node root) {
+    // Initialize a NodeTraversal object for traversing the AST
+    NodeTraversal traversal = new NodeTraversal(compiler, this);
+
+    // Traverse the AST and remove duplicate declarations
+    traversal.traverseRoots(externs, root);
+    removeDuplicateDeclarations(root);
+
+    // If enabled, make local names unique using the renamer
     if (MAKE_LOCAL_NAMES_UNIQUE) {
-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
-      NodeTraversal t = new NodeTraversal(compiler, renamer);
-      t.traverseRoots(externs, root);
+        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
+        NodeTraversal uniqueTraversal = new NodeTraversal(compiler, renamer);
+        uniqueTraversal.traverseRoots(externs, root);
+        removeDuplicateDeclarations(root);
     }
-    removeDuplicateDeclarations(root);
-    new PropogateConstantAnnotations(compiler, assertOnChange)
-        .process(externs, root);
-  }
+
+    // Process the AST and propagate constant annotations
+    try {
+        new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);
+    } catch (Throwable e) {
+        System.err.println("Error propagating constant annotations: " + e);
+        throw new RuntimeException(e);
+    }
+}
 
   @Override
   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {