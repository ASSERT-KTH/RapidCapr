diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 814a07f4..cd2af94a 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -770,21 +770,22 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
   /**
    * @see #findCalledFunctions(Node)
    */
-  private void findCalledFunctions(
-      Node node, Set<String> changed) {
+private void findCalledFunctions(Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
-    // For each referenced function, add a new reference
     if (node.getType() == Token.CALL) {
-      Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
-      }
+        Node child = node.getFirstChild();
+        if (child != null && child.getType() == Token.NAME) {
+            String functionName = child.getString();
+            if (!functionName.startsWith("goog.") && !functionName.startsWith("$")) {
+                changed.add(functionName);
+            }
+        }
     }
 
     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
-      findCalledFunctions(c, changed);
+        findCalledFunctions(c, changed);
     }
-  }
+}
 
   /**
    * For any call-site that needs it, prepare the call-site for inlining