diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java
index 814a07f4..cf10b39e 100644
--- a/src/com/google/javascript/jscomp/InlineFunctions.java
+++ b/src/com/google/javascript/jscomp/InlineFunctions.java
@@ -774,10 +774,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {
       Node node, Set<String> changed) {
     Preconditions.checkArgument(changed != null);
     // For each referenced function, add a new reference
-    if (node.getType() == Token.CALL) {
+    if (node != null && node.getType() == Token.CALL) {
       Node child = node.getFirstChild();
-      if (child.getType() == Token.NAME) {
-        changed.add(child.getString());
+      if (child != null && child.getType() == Token.NAME) {
+        String functionName = child.getString();
+        if (functionName != null && !functionName.startsWith("$") &&
+            !functionName.startsWith("goog.") && !functionName.startsWith("__") &&
+            !functionName.equals("isNaN") && !functionName.equals("parseInt") &&
+            !functionName.equals("parseFloat") && !functionName.equals("alert")) {
+          changed.add(functionName);
+        }
+      }
+      for (Node c = child.getNext(); c != null; c = c.getNext()) {
+        findCalledFunctions(c, changed);
       }
     }
 