diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java
index d993bee7..9f8b5118 100644
--- a/src/com/google/javascript/jscomp/PrepareAst.java
+++ b/src/com/google/javascript/jscomp/PrepareAst.java
@@ -155,26 +155,28 @@ class PrepareAst implements CompilerPass {
      * There are two types of calls we are interested in calls without explicit
      * "this" values (what we are call "free" calls) and direct call to eval.
      */
-    private void annotateCalls(Node n) {
-      Preconditions.checkState(n.isCall());
+private void annotateCalls(Node n) {
+  Preconditions.checkState(n.isCall());
 
-      // Keep track of of the "this" context of a call.  A call without an
-      // explicit "this" is a free call.
-      Node first = n.getFirstChild();
+  // Keep track of the "this" context of a call.  A call without an
+  // explicit "this" is a free call.
+  Node first = n.getFirstChild();
 
-      // ignore cast nodes.
+  // Ignore cast nodes.
+  while (first != null && first.isCast()) {
+    first = first.getFirstChild();
+  }
 
-      if (!NodeUtil.isGet(first)) {
-        n.putBooleanProp(Node.FREE_CALL, true);
-      }
+  if (!NodeUtil.isGet(first)) {
+    n.putBooleanProp(Node.FREE_CALL, true);
+  }
 
-      // Keep track of the context in which eval is called. It is important
-      // to distinguish between "(0, eval)()" and "eval()".
-      if (first.isName() &&
-          "eval".equals(first.getString())) {
-        first.putBooleanProp(Node.DIRECT_EVAL, true);
-      }
-    }
+  // Keep track of the context in which eval is called. It is important
+  // to distinguish between "(0, eval)()" and "eval()".
+  if (first.isName() && "eval".equals(first.getString())) {
+    first.putBooleanProp(Node.DIRECT_EVAL, true);
+  }
+}
 
     /**
      * Translate dispatcher info into the property expected node.