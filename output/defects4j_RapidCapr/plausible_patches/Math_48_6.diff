diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index 8a667dad3..65da2a6e8 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -186,6 +186,102 @@ public abstract class BaseSecantSolver
                 case REGULA_FALSI:
                     // Detect early that algorithm is stuck, instead of waiting
                     // for the maximum number of iterations to be exceeded.
+// Check for convergence
+if (FastMath.abs(fx) <= ftol) {
+    switch (allowed) {
+        case ANY_SIDE:
+            return x;
+        case LEFT_SIDE:
+            return inverted ? x : x0;
+        case RIGHT_SIDE:
+            return inverted ? x0 : x;
+        case BELOW_SIDE:
+            return (fx <= 0) ? x : x0;
+        case ABOVE_SIDE:
+            return (fx >= 0) ? x : x0;
+        default:
+            throw new MathInternalError();
+    }
+} else if (FastMath.abs(x - x1) < FastMath.ulp(x1) || FastMath.abs(x1 - x0) < FastMath.ulp(x1)) {
+    throw new ConvergenceException();
+}
+
+// Update the bounds with the new approximation.
+if (f1 * fx < 0) {
+    // The value of x1 has switched to the other bound, thus inverting
+    // the interval.
+    x0 = x1;
+    f0 = f1;
+    inverted = !inverted;
+} else {
+    switch (method) {
+        case ILLINOIS:
+            f0 *= 0.5;
+            break;
+        case PEGASUS:
+            f0 *= f1 / (f1 + fx);
+            break;
+        case REGULA_FALSI:
+            break;
+        default:
+            // Should never happen.
+            throw new MathInternalError();
+    }
+}
+
+// Update from [x0, x1] to [x0, x].
+x1 = x;
+f1 = fx;
+
+// If the function value of the last approximation is too small,
+// given the function value accuracy, then we can't get closer to
+// the root than we already are.
+if (FastMath.abs(f1) <= ftol) {
+    switch (allowed) {
+        case ANY_SIDE:
+            return x1;
+        case LEFT_SIDE:
+            if (inverted) {
+                return x1;
+            }
+            break;
+        case RIGHT_SIDE:
+            if (!inverted) {
+                return x1;
+            }
+            break;
+        case BELOW_SIDE:
+            if (f1 <= 0) {
+                return x1;
+            }
+            break;
+        case ABOVE_SIDE:
+            if (f1 >= 0) {
+                return x1;
+            }
+            break;
+        default:
+            throw new MathInternalError();
+    }
+}
+
+// If the current interval is within the given accuracies, we are satisfied with the current approximation.
+if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {
+    switch (allowed) {
+        case ANY_SIDE:
+            return x1;
+        case LEFT_SIDE:
+            return inverted ? x1 : x0;
+        case RIGHT_SIDE:
+            return inverted ? x0 : x1;
+        case BELOW_SIDE:
+            return (f1 <= 0) ? x1 : x0;
+        case ABOVE_SIDE:
+            return (f1 >= 0) ? x1 : x0;
+        default:
+            throw new MathInternalError();
+    }
+}
                     break;
                 default:
                     // Should never happen.