diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..f16dad32c 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,10 +184,54 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+if (x == x1) {
+    final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);
+    if (inverted) {
+        // If inverted, move x0 to the left by delta
+        final double newx0 = x0 - delta;
+        if (newx0 <= getMin()) {
+            // If x0 goes below the limit, set it to the limit and move x1 by the same amount
+            x0 = getMin();
+            x1 = FastMath.max(x1 - delta - (x0 - newx0), getMin());
+        } else {
+            x0 = newx0;
+        }
+    } else {
+        // If not inverted, move x1 to the right by delta
+        final double newx1 = x1 + delta;
+        if (newx1 >= getMax()) {
+            // If x1 goes above the limit, set it to the limit and move x0 by the same amount
+            x1 = getMax();
+            x0 = FastMath.min(x0 + delta - (newx1 - x1), getMax());
+        } else {
+            x1 = newx1;
+        }
+    }
+} else {
+    // The new approximation is different from the previous one.
+    // We can safely update the bounds as usual.
+    if (f1 * fx < 0) {
+        x0 = x1;
+        f0 = f1;
+        inverted = !inverted;
+    } else {
+        switch (method) {
+        case ILLINOIS:
+            f0 *= 0.5;
+            break;
+        case PEGASUS:
+            f0 *= f1 / (f1 + fx);
+            break;
+        case REGULA_FALSI:
+            // Nothing.
+            break;
+        default:
+            throw new MathInternalError();
+        }
+    }
+    x1 = x;
+    f1 = fx;
+}
                     break;
                 default:
                     // Should never happen.