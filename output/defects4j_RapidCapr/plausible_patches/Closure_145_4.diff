diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..0d7cafc1 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,19 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n.getType() == Token.LABEL) {
+        // Check if the label's first child is a block and only contains one child node
+        if (n.getFirstChild().getType() == Token.BLOCK && n.getFirstChild().hasChildren() && n.getFirstChild().getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getLastChild())) {
+            return true;
+        }
+        // Check if the label's last child is a function or do
+        return (n.getLastChild().getType() == Token.FUNCTION || n.getLastChild().getType() == Token.DO);
+    } else if (n.getType() == Token.BLOCK) {
+        return (n.hasChildren() && n.getFirstChild() == n.getLastChild() && isOneExactlyFunctionOrDo(n.getFirstChild()));
+    }
+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike