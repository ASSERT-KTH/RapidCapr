diff --git a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
index acd9222f6..7b8f23417 100644
--- a/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
+++ b/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java
@@ -90,65 +90,75 @@ public class CholeskyDecompositionImpl implements CholeskyDecomposition {
      * @see #DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
      * @see #DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD
      */
-    public CholeskyDecompositionImpl(final RealMatrix matrix,
-                                     final double relativeSymmetryThreshold,
-                                     final double absolutePositivityThreshold)
+public CholeskyDecompositionImpl(final RealMatrix matrix,
+                                 final double relativeSymmetryThreshold,
+                                 final double absolutePositivityThreshold)
         throws NonSquareMatrixException,
                NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
 
-        if (!matrix.isSquare()) {
-            throw new NonSquareMatrixException(matrix.getRowDimension(),
-                                               matrix.getColumnDimension());
-        }
+    if (!matrix.isSquare()) {
+        throw new NonSquareMatrixException(matrix.getRowDimension(),
+                                           matrix.getColumnDimension());
+    }
 
-        final int order = matrix.getRowDimension();
-        lTData   = matrix.getData();
-        cachedL  = null;
-        cachedLT = null;
+    final int order = matrix.getRowDimension();
+    lTData   = matrix.getData();
+    cachedL  = null;
+    cachedLT = null;
 
-        // check the matrix before transformation
-        for (int i = 0; i < order; ++i) {
+    boolean isPositiveDefinite = true;
+    // Check the matrix before transformation
+    for (int i = 0; i < order; ++i) {
+        final double[] lI = lTData[i];
 
-            final double[] lI = lTData[i];
-
-            if (lTData[i][i] < absolutePositivityThreshold) {
-                throw new NotPositiveDefiniteMatrixException();
-            }
-            // check off-diagonal elements (and reset them to 0)
-            for (int j = i + 1; j < order; ++j) {
-                final double[] lJ = lTData[j];
-                final double lIJ = lI[j];
-                final double lJI = lJ[i];
-                final double maxDelta =
-                    relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
-                if (Math.abs(lIJ - lJI) > maxDelta) {
-                    throw new NotSymmetricMatrixException();
-                }
-                lJ[i] = 0;
-           }
+        // Check the diagonal element
+        if (lTData[i][i] < absolutePositivityThreshold) {
+            isPositiveDefinite = false;
+            throw new NotPositiveDefiniteMatrixException();
         }
+        
+        // Check off-diagonal elements (and reset them to 0)
+        for (int j = i + 1; j < order; ++j) {
+            final double[] lJ = lTData[j];
+            final double lIJ = lI[j];
+            final double lJI = lJ[i];
+            final double maxDelta =
+                relativeSymmetryThreshold * Math.max(Math.abs(lIJ), Math.abs(lJI));
+            if (Math.abs(lIJ - lJI) > maxDelta) {
+                isPositiveDefinite = false;
+                throw new NotSymmetricMatrixException();
+            }
+            lJ[i] = 0;
+       }
+    }
 
-        // transform the matrix
+    // Transform the matrix
+    if (isPositiveDefinite) {
         for (int i = 0; i < order; ++i) {
-
             final double[] ltI = lTData[i];
 
-            // check diagonal element
+            // Check the diagonal element
+            if (ltI[i] <= absolutePositivityThreshold) {
+                throw new NotPositiveDefiniteMatrixException();
+            }
 
             ltI[i] = Math.sqrt(ltI[i]);
             final double inverse = 1.0 / ltI[i];
 
+            // Check off-diagonal elements (and reset them to 0)
             for (int q = order - 1; q > i; --q) {
                 ltI[q] *= inverse;
                 final double[] ltQ = lTData[q];
                 for (int p = q; p < order; ++p) {
                     ltQ[p] -= ltI[q] * ltI[p];
                 }
+                if (ltQ[q] < absolutePositivityThreshold) {
+                    throw new NotPositiveDefiniteMatrixException();
+                }
             }
-
         }
-
     }
+}
 
     /** {@inheritDoc} */
     public RealMatrix getL() {