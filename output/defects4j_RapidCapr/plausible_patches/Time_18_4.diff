diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java
index 29e559d4..aa2995b2 100644
--- a/src/main/java/org/joda/time/chrono/GJChronology.java
+++ b/src/main/java/org/joda/time/chrono/GJChronology.java
@@ -347,28 +347,70 @@ public final class GJChronology extends AssembledChronology {
         return instant;
     }
 
-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
-                                  int hourOfDay, int minuteOfHour,
-                                  int secondOfMinute, int millisOfSecond)
-        throws IllegalArgumentException
-    {
-        Chronology base;
-        if ((base = getBase()) != null) {
-            return base.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
-        }
+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,
+                              int hourOfDay, int minuteOfHour,
+                              int secondOfMinute, int millisOfSecond)
+    throws IllegalArgumentException
+{
+    Chronology base;
+    if ((base = getBase()) != null) {
+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    }
 
-        // Assume date is Gregorian.
-        long instant;
-            instant = iGregorianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+    boolean isGregorianAfterCutover = year > 1582 || (year == 1582 && monthOfYear > 10) ||
+                                      (year == 1582 && monthOfYear == 10 && dayOfMonth >= 15);
+    boolean isJulianBeforeCutover = year < 1582 || (year == 1582 && monthOfYear < 10) ||
+                                      (year == 1582 && monthOfYear == 10 && dayOfMonth < 5);
+
+    if (isGregorianAfterCutover) {
+        // Gregorian
+        long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
         if (instant < iCutoverMillis) {
+            //Maybe it's Julian.
+            long julianInstant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if(julianInstant >= iCutoverMillis) {
+                // Okay, it's in the illegal cutover gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            return julianInstant;
+        }
+        return instant;
+    } else if (isJulianBeforeCutover) {
+        // Julian
+        if (monthOfYear == 2 && dayOfMonth == 29 && !iJulianChronology.isLeapYear(year)) {
+            throw new IllegalArgumentException("Invalid leap year day");
+        }
+
+        long instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        if (instant >= iCutoverMillis) {
+            //Maybe it's Gregorian.
+            long gregorianInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            if(gregorianInstant < iCutoverMillis) {
+                // Okay, it's in the illegal cutover gap.
+                throw new IllegalArgumentException("Specified date does not exist");
+            }
+            return gregorianInstant;
+        }
+        return instant;
+    } else {
+        // Cutover period
+        if (monthOfYear == 10 && dayOfMonth >= 5 && dayOfMonth <= 14 && year == 1582) {
+            throw new IllegalArgumentException("Invalid date during cutover");
+        }
+        long instant;
+        try {
+            // Try Gregorian first.
+            instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+                                                              hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+        } catch (IllegalArgumentException e) {
             // Maybe it's Julian.
-            instant = iJulianChronology.getDateTimeMillis
-                (year, monthOfYear, dayOfMonth,
-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
+            instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,
+       															hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
             if (instant >= iCutoverMillis) {
                 // Okay, it's in the illegal cutover gap.
                 throw new IllegalArgumentException("Specified date does not exist");
@@ -376,6 +418,7 @@ public final class GJChronology extends AssembledChronology {
         }
         return instant;
     }
+}
 
     /**
      * Gets the cutover instant between Gregorian and Julian chronologies.