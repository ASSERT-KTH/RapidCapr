diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
index e19e97aef..5b6b2220e 100644
--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -140,13 +140,32 @@ public class FDistributionImpl
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
-    protected double getInitialDomain(double p) {
-        double ret;
-        double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
-        return ret;
+protected double getInitialDomain(double p) {
+    double ret = 0.0;
+    double d = getDenominatorDegreesOfFreedom();
+    try {
+        // Calculate mean
+        ret = d / (d - 2.0);
+        // Handle cases where the result is NaN or infinite
+        if (!Double.isFinite(ret)) {
+            throw new ArithmeticException("Mean value is infinite or NaN.");
+        }
+    } catch (ArithmeticException e) {
+        // If the result is infinite or NaN, set initial domain to a large value
+        ret = Double.MAX_VALUE;
+        e.printStackTrace();
+    } finally {
+        // Handling special cases for small and large degrees of freedom
+        if (Double.isNaN(d) || d <= 2.0) {
+            // If degrees of freedom is NaN or less than or equal to 2, set initial domain to smallest positive value
+            ret = Double.MIN_VALUE;
+        } else if (d >= Double.MAX_VALUE) {
+            // If degrees of freedom is greater than or equal to maximum double value, set initial domain to largest positive value
+            ret = Double.MAX_VALUE;
+        }
     }
+    return ret;
+}
     
     /**
      * Modify the numerator degrees of freedom.