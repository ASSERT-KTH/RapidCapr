diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 0b2636f4..e1eef9d3 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -1280,6 +1280,37 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {
     // If GETPROP/GETELEM is used as assignment target the array literal is
     // acting as a temporary we can't fold it here:
     //    "[][0] += 1"
+if (left.getType() == Token.ARRAYLIT) {
+  if (left.getChildCount() == 0) {
+    if (NodeUtil.isAssignmentOp(parent)) {
+      return n;
+    } else {
+      Node undefinedNode = NodeUtil.newUndefinedNode(n);
+      parent.replaceChild(n, undefinedNode);
+      reportCodeChange();
+      return undefinedNode;
+    }
+  }
+  if (right.getType() == Token.NUMBER) {
+    double index = right.getDouble();
+    int intIndex = (int) index;
+    if (intIndex != index) {
+      error(INVALID_GETELEM_INDEX_ERROR, right);
+      return n;
+    }
+    if (intIndex < 0 || intIndex >= left.getChildCount()) {
+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);
+      return n;
+    }
+    Node elem = left.getChildAtIndex(intIndex).detachFromParent();
+    if (elem.getType() == Token.EMPTY) {
+      elem = NodeUtil.newUndefinedNode(elem);
+    }
+    parent.replaceChild(n, elem);
+    reportCodeChange();
+    return elem;
+  }
+}
 
     if (right.getType() != Token.NUMBER) {
       // Sometimes people like to use complex expressions to index into