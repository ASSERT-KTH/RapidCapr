diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
index c87b0101f..a7b3a2957 100644
--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
@@ -61,24 +61,42 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {
      * @throws IllegalArgumentException if preconditions are not met
      * or length is less than 2
      */
-    public double chiSquare(double[] expected, long[] observed)
+public double chiSquare(double[] expected, long[] observed)
         throws IllegalArgumentException {
-        if ((expected.length < 2) || (expected.length != observed.length)) {
-            throw new IllegalArgumentException(
-                    "observed, expected array lengths incorrect");
-        }
-        if (!isPositive(expected) || !isNonNegative(observed)) {
-            throw new IllegalArgumentException(
-                "observed counts must be non-negative and expected counts must be postive");
-        }
-        double sumSq = 0.0d;
-        double dev = 0.0d;
-        for (int i = 0; i < observed.length; i++) {
-                dev = ((double) observed[i] - expected[i]);
-                sumSq += dev * dev / expected[i];
-        }
-        return sumSq;
+    if (expected.length < 2 || expected.length != observed.length) {
+        throw new IllegalArgumentException("observed, expected array lengths incorrect");
+    }
+    if (!isPositive(expected) || !isNonNegative(observed)) {
+        throw new IllegalArgumentException(
+                "observed counts must be non-negative and expected counts must be positive");
     }
+    double totalObserved = 0.0;
+    for (long obs : observed) {
+        totalObserved += obs;
+    }
+
+    double[] normalizedExpected = new double[expected.length];
+    double sumExpected = 0.0;
+    for (int i = 0; i < expected.length; i++) {
+        normalizedExpected[i] = expected[i] * totalObserved / sum(expected);
+        sumExpected += normalizedExpected[i];
+    }
+
+    double chiSquareStat = 0.0;
+    for (int i = 0; i < observed.length; i++) {
+        double dev = observed[i] - normalizedExpected[i];
+        chiSquareStat += dev * dev / normalizedExpected[i];
+    }
+    return chiSquareStat;
+}
+
+private double sum(double[] values) {
+    double result = 0.0;
+    for (double value : values) {
+        result += value;
+    }
+    return result;
+}
 
     /**
      * {@inheritDoc}