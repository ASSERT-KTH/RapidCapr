diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index 0345c855..5275d204 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -154,28 +154,40 @@ public abstract class ChainableReverseAbstractInterpreter
    * {@code node}. It must be possible to refine the type of the given node in
    * the given scope, as determined by {@link #getTypeIfRefinable}.
    */
-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
-    switch (node.getType()) {
-      case Token.NAME:
-        scope.inferSlotType(node.getString(), type);
-        break;
-
-      case Token.GETPROP:
-        String qualifiedName = node.getQualifiedName();
-        Preconditions.checkNotNull(qualifiedName);
-
-        JSType origType = node.getJSType();
-        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);
-        break;
-
-        // "this" references aren't currently modeled in the CFG.
-
-      default:
-        throw new IllegalArgumentException("Node cannot be refined. \n" +
-            node.toStringTree());
+protected void declareNameInScope(FlowScope scope, Node node, JSType type) {
+    int tokenType = node.getType();
+    switch (tokenType) {
+        case Token.NAME:
+            scope.inferSlotType(node.getString(), type);
+            break;
+
+        case Token.GETPROP:
+            String qualifiedName = node.getQualifiedName();
+            Preconditions.checkNotNull(qualifiedName);
+
+            JSType origType = node.getJSType();
+            origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
+            scope.inferQualifiedSlot(node, qualifiedName, origType, type);
+            break;
+
+        case Token.THIS:
+            // do nothing, "this" references aren't currently modeled in the CFG.
+            break;
+
+        case Token.FUNCTION:
+            Node fnNameNode = node.getFirstChild();
+            if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {
+                String functionName = fnNameNode.getString();
+                if (!functionName.isEmpty() && !functionName.equals(UNKNOWN_TYPE)) {
+                    scope.inferSlotType(functionName, type);
+                }
+            }
+            break;
+
+        default:
+            throw new IllegalArgumentException("Invalid token type: " + tokenType);
     }
-  }
+}
 
   /**
    * @see #getRestrictedWithoutUndefined(JSType)