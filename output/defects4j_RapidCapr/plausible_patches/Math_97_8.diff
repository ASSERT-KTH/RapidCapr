diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java
index 766d87ed5..c0afc137c 100644
--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java
+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java
@@ -122,34 +122,46 @@ public class BrentSolver extends UnivariateRealSolverImpl {
      * @throws IllegalArgumentException if min is not less than max or the
      * signs of the values of the function at the endpoints are not opposites
      */
-    public double solve(double min, double max) throws MaxIterationsExceededException, 
-        FunctionEvaluationException {
-        
-        clearResult();
-        verifyInterval(min, max);
-        
-        double ret = Double.NaN;
-        
-        double yMin = f.value(min);
-        double yMax = f.value(max);
-        
-        // Verify bracketing
-        double sign = yMin * yMax;
-        if (sign >= 0) {
-            // check if either value is close to a zero
-                // neither value is close to zero and min and max do not bracket root.
-                throw new IllegalArgumentException
-                ("Function values at endpoints do not have different signs." +
-                        "  Endpoints: [" + min + "," + max + "]" + 
+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {
+
+    clearResult();
+    verifyInterval(min, max);
+
+    double ret = Double.NaN;
+
+    double yMin = f.value(min);
+    double yMax = f.value(max);
+
+    // handle cases where yMin or yMax is close to zero
+    if (Math.abs(yMin) < 1E-15) {
+        ret = min;
+    } else if (Math.abs(yMax) < 1E-15) {
+        ret = max;
+    } else {
+        // check if endpoints bracket the root
+        if (yMin * yMax > 0) {
+            // swap the endpoints if they don't bracket the root
+            double temp = min;
+            min = max;
+            max = temp;
+            yMin = f.value(min);
+            yMax = f.value(max);
+
+            // check again if endpoints bracket the root
+            if (yMin * yMax > 0) {
+                throw new IllegalArgumentException("Function values at endpoints do not have different signs." +
+                        "  Endpoints: [" + min + "," + max + "]" +
                         "  Values: [" + yMin + "," + yMax + "]");
-        } else {
-            // solve using only the first endpoint as initial guess
-            ret = solve(min, yMin, max, yMax, min, yMin);
-            // either min or max is a root
+            }
         }
 
-        return ret;
+        // solve using only the first endpoint as initial guess
+        ret = solve(min, yMin, max, yMax, min, yMin);
+        // either min or max is a root
     }
+
+    return ret;
+}
         
     /**
      * Find a zero starting search according to the three provided points.