diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java
index f4047933..7418d910 100644
--- a/src/main/java/org/joda/time/Period.java
+++ b/src/main/java/org/joda/time/Period.java
@@ -1613,28 +1613,42 @@ public final class Period
      *  years or months but the specified period type does not support them
      * @since 1.5
      */
-    public Period normalizedStandard(PeriodType type) {
-        type = DateTimeUtils.getPeriodType(type);
-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
-        int years = getYears();
-        int months = getMonths();
-        if (years != 0 || months != 0) {
-            years = FieldUtils.safeAdd(years, months / 12);
-            months = months % 12;
-            if (years != 0) {
-                result = result.withYears(years);
-            }
-            if (months != 0) {
-                result = result.withMonths(months);
-            }
+public Period normalizedStandard(PeriodType type) {
+    type = DateTimeUtils.getPeriodType(type);
+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs
+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
+
+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
+    int years = getYears();
+    int months = getMonths();
+
+    if (years != 0 || months != 0) {
+        if (!type.isSupported(DurationFieldType.years()) && !type.isSupported(DurationFieldType.months())) {
+            throw new UnsupportedOperationException("Neither years nor months are supported by the given type: " + type);
+        }
+        int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);
+
+        if (type.isSupported(DurationFieldType.years())) {
+            years = totalMonths / 12;
+            months = totalMonths % 12;
+        } else {
+            months = totalMonths;
+            years = 0;
+        }
+
+        if (years != 0) {
+            result = result.withYears(years);
+        }
+        if (months != 0) {
+            result = result.withMonths(months);
         }
-        return result;
     }
 
+    return result;
+}
+
 }