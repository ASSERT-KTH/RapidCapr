diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 51d1c6428..3e9be92a7 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -537,6 +537,37 @@ public class CMAESOptimizer
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+if(hasFiniteBounds) {
+   int infiniteBoundsCount = 0;
+   int finiteBoundsCount = 0;
+   for (int i = 0; i < lB.length; i++) {
+      if (!Double.isInfinite(lB[i]) && !Double.isInfinite(uB[i])) {
+         finiteBoundsCount++;
+      }
+      if (Double.isInfinite(lB[i]) || Double.isInfinite(uB[i])) {
+         infiniteBoundsCount++;
+      }
+   }
+   if (infiniteBoundsCount > 0 && finiteBoundsCount > 0) {
+      // If there is at least one finite bound, none can be infinite,
+      // because mixed cases are not supported by the current code.
+      throw new MathUnsupportedOperationException();
+   } else if (infiniteBoundsCount > 0 && finiteBoundsCount == 0) {
+      // If all bounds are infinite, the normalize method will not work.
+      throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);
+   } else {
+      // Convert API to internal handling of boundaries.
+      boundaries = new double[2][];
+      boundaries[0] = lB;
+      boundaries[1] = uB;
+
+      // Abort early if the normalization will overflow (cf. "encode" method).
+      double boundaryRange = boundaries[1][0] - boundaries[0][0];
+      if (Double.isInfinite(boundaryRange)) {
+         throw new NumberIsTooLargeException(boundaryRange, 0, true);
+      }
+   }
+}
             }
         } else {
             // Convert API to internal handling of boundaries.