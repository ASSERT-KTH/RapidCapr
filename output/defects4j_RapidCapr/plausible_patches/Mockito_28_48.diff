diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..e200871ff 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,29 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+
+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {
+    try {
+        field.setAccessible(true);
+        Object oldValue = field.get(fieldInstance);
+        field.set(fieldInstance, candidate);
+        if (mocks.contains(oldValue)) {
+            mocks.remove(oldValue);
+        }
+        mocks.remove(candidate); // remove the used mock from the set of available mocks
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Unable to inject mock candidate", e);
+    }
+} else if (candidate != null) {
+    String message = "Mock candidate " + candidate.getClass().getSimpleName() 
+        + " is not compatible with field " + field.getName() 
+        + " (expected type: " + field.getType().getSimpleName()+ ")";
+    throw new IllegalArgumentException(message);
+}
         }
     }
 