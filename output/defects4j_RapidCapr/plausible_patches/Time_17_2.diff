diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 74a3802a..e9f5c07e 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1161,22 +1161,40 @@ public abstract class DateTimeZone implements Serializable {
      * @return the adjusted instant millis
      */
     public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
+        // evaluate 2 days before and after to work out if anything is happening
+        long instantBefore = convertUTCToLocal(instant - 2 * DateTimeConstants.MILLIS_PER_DAY);
+        long instantAfter = convertUTCToLocal(instant + 2 * DateTimeConstants.MILLIS_PER_DAY);
         if (instantBefore == instantAfter) {
             return instant;  // not an overlap (less than is a gap, equal is normal case)
         }
-        
+
         // work out range of instants that have duplicate local times
         long local = convertUTCToLocal(instant);
+        long maxDurationMillis = 2 * DateTimeConstants.MILLIS_PER_HOUR;
+        for (long offsetMillis = maxDurationMillis; offsetMillis < 2 * DateTimeConstants.MILLIS_PER_DAY; offsetMillis *= 2) {
+            long nextInstant = instant + offsetMillis;
+            long nextLocal = convertUTCToLocal(nextInstant);
+            if (nextLocal == local) {
+                instantAfter = nextInstant;
+            } else {
+                break;
+            }
+        }
+        for (long offsetMillis = maxDurationMillis; offsetMillis < 2 * DateTimeConstants.MILLIS_PER_DAY; offsetMillis *= 2) {
+            long prevInstant = instant - offsetMillis;
+            long prevLocal = convertUTCToLocal(prevInstant);
+            if (prevLocal == local) {
+                instantBefore = prevInstant;
+            } else {
+                break;
+            }
+        }
+
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
+
         // calculate result
-          // currently in later offset
-          // currently in earlier offset
+        // currently in later offset
+        // currently in earlier offset
     }
 //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 