diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
index 4cb581d4..79ed554c 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -72,36 +72,43 @@ public abstract class CharSequenceTranslator {
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
-        }
-        if (input == null) {
-            return;
-        }
-        int pos = 0;
-        int len = Character.codePointCount(input, 0, input.length());
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
+public final void translate(CharSequence input, Writer out) throws IOException {
+    if (out == null) {
+        throw new IllegalArgumentException("The Writer must not be null");
+    }
+    if (input == null) {
+        return;
+    }
+    int pos = 0;
+    int len = input.length();
+    while (pos < len) {
+        int consumed = translate(input, pos, out);
+        if (consumed == 0) {
+            // handle surrogate pairs properly
+            char c = input.charAt(pos);
+            if (Character.isHighSurrogate(c) && pos + 1 < len && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                out.write(Character.toChars(Character.toCodePoint(c, input.charAt(pos + 1))));
+                pos++;
+            } else {
                 out.write(c);
             }
-            else {
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
+        } else {
             for (int pt = 0; pt < consumed; pt++) {
-                    if (pos < len - 2) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-                    } else {
-                        pos++;
-                    }
+                if (pos < len - 1 && Character.isHighSurrogate(input.charAt(pos)) && Character.isLowSurrogate(input.charAt(pos + 1))) {
+                    pos++;
+                } 
+                // check if pos is at the end of the string
+                else if (pos == len - 1 && Character.isHighSurrogate(input.charAt(pos))) {
+                    pos++;
                 }
-                pos--;
+                pos++;
             }
-            pos++;
+            pos--;
         }
+        pos++;
     }
+    out.flush();
+}
 
     /**
      * Helper method to create a merger of this translator with another set of 