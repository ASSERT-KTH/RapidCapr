diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..634989a6 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,33 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+/**
+ * Returns true if it is safe to replace {@code node} with {@code replacement}.
+ */
+private boolean isSafeReplacement(Node node, Node replacement) {
+    // If node is a simple name, it is safe to replace.
     if (node.isName()) {
-      return true;
+        return true;
     }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+  
+    // If node is a getprop, check if any of its children is assigned to the replacement node.
+    if (node.isGetProp()) {
+        for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {
+            // Recursively check each child node.
+            if (!isSafeReplacement(child, replacement)) {
+                return false;
+            }
+            // If the child node is a name and is assigned to the replacement node, it is not safe to replace.
+            if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
+                return false;
+            }
+        }
+        return true;
     }
-
+  
+    // If node is not a name or getprop node, it is safe to replace.
     return true;
-  }
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +253,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}