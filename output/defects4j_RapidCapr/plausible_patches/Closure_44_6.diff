diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java
index 47556652..49704ee2 100644
--- a/src/com/google/javascript/jscomp/CodeConsumer.java
+++ b/src/com/google/javascript/jscomp/CodeConsumer.java
@@ -178,7 +178,7 @@ abstract class CodeConsumer {
   void endCaseBody() {
   }
 
-  void add(String newcode) {
+ void add(String newcode) {
     maybeEndStatement();
 
     if (newcode.length() == 0) {
@@ -186,16 +186,27 @@ abstract class CodeConsumer {
     }
 
     char c = newcode.charAt(0);
-    if ((isWordChar(c) || c == '\\') &&
-        isWordChar(getLastChar())) {
-      // need space to separate. This is not pretty printing.
-      // For example: "return foo;"
-      append(" ");
-      // Do not allow a forward slash to appear after a DIV.
-      // For example,
-      // REGEXP DIV REGEXP
-      // is valid and should print like
-      // / // / /
+
+    if (getLastChar() == '/') {
+      if (c == '/') {
+        // Do not allow a forward slash to appear after a DIV.
+        // For example,
+        // REGEXP DIV REGEXP
+        // is valid and should print like
+        // / / /
+        append(" ");
+      } else if (c == '*' && newcode.length() > 1 && newcode.charAt(1) == '/') {
+        // Avoid having a closing multi-line comment "*/" come right after opening "/*".
+        // This is necessary to avoid empty lines between the comment symbols.
+        // For example, "/* One *//* Two */" should print without empty lines like "/* One *//* Two */"
+        append(" ");
+      }
+    } else {
+      if ((isWordChar(c) || c == '\\') && isWordChar(getLastChar())) {
+        // Need space to separate. This is not pretty printing.
+        // For example: "return foo;"
+        append(" ");
+      }
     }
 
     append(newcode);