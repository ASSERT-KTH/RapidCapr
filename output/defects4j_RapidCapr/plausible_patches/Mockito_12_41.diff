diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..001d9830f 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,27 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type generic = field.getGenericType();
+    if (generic instanceof ParameterizedType) {
+        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return getRawType((ParameterizedType) actual);
+        }
+    }
+    return Object.class;
+}
+
+private Class<?> getRawType(ParameterizedType parameterizedType) {
+    Type rawType = parameterizedType.getRawType();
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    } else if (rawType instanceof ParameterizedType) {
+        return getRawType((ParameterizedType) rawType);
+    } else {
+        throw new IllegalArgumentException("Unexpected raw type: " + rawType);
+    }
+}
 }