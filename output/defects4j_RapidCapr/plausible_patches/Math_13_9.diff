diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
index 99d86e92a..1840c2b55 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -558,8 +558,39 @@ public abstract class AbstractLeastSquaresOptimizer
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
-    private RealMatrix squareRoot(RealMatrix m) {
+private RealMatrix squareRoot(RealMatrix m) {
+    final int maxTries = 5;
+    int tries = 0;
+    RealMatrix sqrt = null;
+    while (tries < maxTries) {
+        try {
             final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+            sqrt = dec.getSquareRoot();
+            break;
+        } catch (OutOfMemoryError e) {
+            // Log the error message and retry after sleeping
+            System.err.println("Out of memory error: " + e.getMessage() + ". Retrying after 1 second.");
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ex) {
+                Thread.currentThread().interrupt();
+            }
+            tries++;
+        }
+    }
+    if (sqrt == null) {
+        // If all tries failed, return input matrix
+        return m;
+    } else {
+        // Round small values to zero to reduce memory usage
+        for (int i = 0; i < sqrt.getRowDimension(); i++) {
+            for (int j = 0; j < sqrt.getColumnDimension(); j++) {
+                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {
+                    sqrt.setEntry(i, j, 0.0);
+                }
+            }
+        }
+        return sqrt;
     }
 }
+}