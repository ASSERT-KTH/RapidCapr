diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..7a7e1f959 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,44 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type genericType = field.getGenericType();
+
+    // If the generic type is not a parameterized type, return Object.class
+    if (!(genericType instanceof ParameterizedType)) {
+        return Object.class;
+    }
+
+    Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];
+
+    // If the actual type is not a Class or a ParameterizedType, return Object.class
+    if (!(actualType instanceof Class) && !(actualType instanceof ParameterizedType)) {
+        return Object.class;
+    }
+
+    // If the actual type is a Class, return it
+    if (actualType instanceof Class) {
+        return (Class<?>) actualType;
+    }
+
+    // If the actual type is a ParameterizedType, recursively get the raw type
+    return getRawType((ParameterizedType) actualType);
+}
+
+private Class<?> getRawType(ParameterizedType parameterizedType) {
+    Type rawType = parameterizedType.getRawType();
+
+    // If the raw type is a Class, return it
+    if (rawType instanceof Class) {
+        return (Class<?>) rawType;
+    }
+
+    // If the raw type is not a Class or a ParameterizedType, throw an exception
+    if (!(rawType instanceof ParameterizedType)) {
+        throw new IllegalArgumentException("Unexpected raw type: " + rawType);
+    }
+
+    // If the raw type is a ParameterizedType, recursively get the raw type
+    return getRawType((ParameterizedType) rawType);
+}
 }