diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java
index b34921ed..fec56d4e 100644
--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java
+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java
@@ -487,30 +487,39 @@ class DisambiguateProperties<T> implements CompilerPass {
     /**
      * Processes a OBJECTLIT node.
      */
-    private void handleObjectLit(NodeTraversal t, Node n) {
-      for (Node child = n.getFirstChild();
-          child != null;
-          child = child.getNext()) {
-        // Maybe STRING, GET, SET
-
-        // We should never see a mix of numbers and strings.
-        String name = child.getString();
-        T type = typeSystem.getType(getScope(), n, name);
-
-        Property prop = getProperty(name);
-        if (!prop.scheduleRenaming(child,
-                                   processProperty(t, prop, type, null))) {
-          // TODO(user): It doesn't look like the user can do much in this
-          // case right now.
-          if (propertiesToErrorFor.containsKey(name)) {
-            compiler.report(JSError.make(
-                t.getSourceName(), child, propertiesToErrorFor.get(name),
-                Warnings.INVALIDATION, name,
-                (type == null ? "null" : type.toString()), n.toString(), ""));
-          }
-        }
+private void handleObjectLit(NodeTraversal t, Node n) {
+  boolean containsQuotes = false;
+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+    // Maybe STRING, GET, SET
+    if (child.isQuotedString()) {
+      containsQuotes = true;
+      continue;
+    }
+
+    String name = child.getString();
+    T type = typeSystem.getType(getScope(), n, name);
+
+    Property prop = getProperty(name);
+    if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {
+      // TODO(user): It doesn't look like the user can do much in this
+      // case right now.
+      if (propertiesToErrorFor.containsKey(name)) {
+        compiler.report(JSError.make(
+          t.getSourceName(), child, propertiesToErrorFor.get(name),
+          Warnings.INVALIDATION, name,
+          (type == null ? "null" : type.toString()), n.toString(), ""));
       }
     }
+  }
+
+  // If the object literal only contains quoted strings, it should not be handled.
+  if (containsQuotes) {
+    return;
+  }
+
+  // Perform additional operations on the object literal.
+  // ...
+}
 
     private void printErrorLocations(List<String> errors, JSType t) {
       if (!t.isObject() || t.isAllType()) {