diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index a31b17a2..73ca4f5f 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -317,34 +317,60 @@ public final class NodeUtil {
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
+static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
-      case Token.STRING:
-      case Token.NUMBER:
-      case Token.TRUE:
-      case Token.FALSE:
-        return true;
-
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
+        case Token.STRING:
+        case Token.NUMBER:
+        case Token.TRUE:
+        case Token.FALSE:
+            return true;
 
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        // Binary operators are only valid if both children are valid.
+        case Token.BITAND:
+        case Token.BITNOT:
+        case Token.BITOR:
+        case Token.BITXOR:
+            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
+
+        // Arithmetic and comparison operators are valid if both children are valid.
+        case Token.ADD:
+        case Token.SUB:
+        case Token.MUL:
+        case Token.DIV:
+        case Token.MOD:
+        case Token.LSH:
+        case Token.RSH:
+        case Token.URSH:
+        case Token.LT:
+        case Token.LE:
+        case Token.GT:
+        case Token.GE:
+        case Token.EQ:
+        case Token.NE:
+            if (val.getChildCount() != 2) {
+                return false;
+            }
+            return isValidDefineValue(val.getFirstChild(), defines) && isValidDefineValue(val.getLastChild(), defines);
+
+        // Unary operators are valid if the child is valid.
+        case Token.NOT:
+        case Token.NEG:
+            return isValidDefineValue(val.getFirstChild(), defines);
+
+        // Names are valid if and only if they are defines themselves.
+        case Token.NAME:
+        case Token.GETPROP:
+            if (!val.isQualifiedName()) {
+                return false;
+            }
+            String name = val.getQualifiedName();
+            return defines.contains(name);
 
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+        // Return false for other types
+        default:
+            return false;
     }
-    return false;
-  }
+}
 
   /**
    * Returns whether this a BLOCK node with no children.