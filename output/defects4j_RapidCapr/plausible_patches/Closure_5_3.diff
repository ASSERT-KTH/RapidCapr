diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2b85d84f..bf251116 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -160,19 +160,17 @@ class InlineObjectLiterals implements CompilerPass {
         Node parent = ref.getParent();
         Node gramps = ref.getGrandparent();
 
-        // Ignore most indirect references, like x.y (but not x.y(),
-        // since the function referenced by y might reference 'this').
-        //
-        if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
+        if (parent.isGetProp() && parent.getFirstChild() == name) {
           // A call target may be using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (gramps.isCall() && gramps.getFirstChild() == parent) {
             return false;
           }
 
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
+          if (parent.getParent().isDelProp()) {
+            return false;
+          }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
@@ -192,7 +190,11 @@ class InlineObjectLiterals implements CompilerPass {
           }
           continue;
         }
-
+        if (parent.isDelProp() && parent.getFirstChild() == name && parent.getParent().isGetProp()) {
+            // Deleting a property has different semantics from deleting
+            // a variable, so deleted properties should not be inlined.
+            return false;
+        }
         // Only rewrite VAR declarations or simple assignment statements
         if (!isVarOrAssignExprLhs(name)) {
            return false;