diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index 68891ace..d6654e4c 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -34,51 +34,59 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        int seqEnd = input.length();
-        // Uses -2 to ensure there is something after the &#
-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
-
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    int seqEnd = input.length();
+    if (index >= seqEnd - 1) {
+        return 0;
+    }
+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
+        int start = index + 2;
+        boolean isHex = false;
+        if (start <= seqEnd - 1) {
             char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
+            if (firstChar == 'x' || firstChar == 'X') {
                 start++;
                 isHex = true;
-
-                // Check there's more than just an x after the &#
+                if (start > seqEnd - 1) { // check if there are additional characters after "x" for hex codes
+                    return 0;
+                }
             }
-
             int end = start;
-            // Note that this supports character codes without a ; on the end
-            while(input.charAt(end) != ';') 
-            {
+            while (end < seqEnd && !Character.isWhitespace(input.charAt(end)) && input.charAt(end) != ';') {
+                if (!isHex && !Character.isDigit(input.charAt(end))) { // check if non-hex character is a digit
+                    return 0;
+                } else if (isHex && Character.digit(input.charAt(end), 16) == -1) { // check if hex digit is valid
+                    return 0;
+                }
                 end++;
             }
-
-            int entityValue;
+            if (end == start || (end == seqEnd - 1 && input.charAt(end) != ';')) { // unfinished or empty entity
+                return 0;
+            }
+            int entityValue = 0;
             try {
-                if(isHex) {
+                if (isHex) {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
                 } else {
                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
                 }
-            } catch(NumberFormatException nfe) {
-            System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");
+            } catch (NumberFormatException nfe) {
+                System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start + "][" + end + "]");
                 return 0;
             }
-
-            if(entityValue > 0xFFFF) {
+            if (entityValue > 0xFFFF) {
                 char[] chrs = Character.toChars(entityValue);
-                out.write(chrs[0]);
-                out.write(chrs[1]);
+                out.write(chrs);
             } else {
                 out.write(entityValue);
             }
-
-
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
+            if (end < seqEnd && input.charAt(end) == ';') {
+                return end - index + 1;
+            } else {
+                return end - index;
+            }
         }
-        return 0;
     }
+    return 0;
+}
 }