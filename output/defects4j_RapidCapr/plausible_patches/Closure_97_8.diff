diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..10939368 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,25 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+if (rvalInt < 0 || rvalInt >= 32) {
+   error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+   return n;
+}
+
+switch (n.getType()) {
+   case Token.LSH:
+       result = lvalInt << rvalInt;
+       break;
+   case Token.RSH:
+       result = lvalInt >> rvalInt;
+       break;
+   case Token.URSH:
+       result = (((long) lvalInt) & 0xffffffffL) >>> rvalInt;
+       break;
+   default:
+       throw new AssertionError("Unknown shift operator: " +
+           Node.tokenToName(n.getType()));
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +