diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 2b85d84f..de1731a6 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -156,23 +156,24 @@ class InlineObjectLiterals implements CompilerPass {
       boolean ret = false;
       Set<String> validProperties = Sets.newHashSet();
       for (Reference ref : refs) {
-        Node name = ref.getNode();
-        Node parent = ref.getParent();
-        Node gramps = ref.getGrandparent();
+        Node node = ref.getNode();
+        Node parent = node.getParent();
 
         // Ignore most indirect references, like x.y (but not x.y(),
         // since the function referenced by y might reference 'this').
         //
-        if (parent.isGetProp()) {
-          Preconditions.checkState(parent.getFirstChild() == name);
+        if (parent.isGetProp() && parent.getFirstChild() == node) {
+          Node grandparent = parent.getParent();
           // A call target may be using the object as a 'this' value.
-          if (gramps.isCall()
-              && gramps.getFirstChild() == parent) {
+          if (grandparent.isCall() && grandparent.getFirstChild() == parent) {
             return false;
           }
 
           // Deleting a property has different semantics from deleting
           // a variable, so deleted properties should not be inlined.
+          if (grandparent.isDelProp()) {
+            return false;
+          }
 
           // NOTE(nicksantos): This pass's object-splitting algorithm has
           // a blind spot. It assumes that if a property isn't defined on an
@@ -184,7 +185,7 @@ class InlineObjectLiterals implements CompilerPass {
           // isn't a perfect algorithm, but it should catch most cases.
           String propName = parent.getLastChild().getString();
           if (!validProperties.contains(propName)) {
-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {
+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, grandparent)) {
               validProperties.add(propName);
             } else {
               return false;
@@ -194,8 +195,8 @@ class InlineObjectLiterals implements CompilerPass {
         }
 
         // Only rewrite VAR declarations or simple assignment statements
-        if (!isVarOrAssignExprLhs(name)) {
-           return false;
+        if (!isVarOrAssignExprLhs(node)) {
+          return false;
         }
 
         Node val = ref.getAssignedValue();
@@ -217,10 +218,8 @@ class InlineObjectLiterals implements CompilerPass {
         // but x = {a: 1, b: x.a} is.
         //
         // Also, ES5 getters/setters aren't handled by this pass.
-        for (Node child = val.getFirstChild(); child != null;
-             child = child.getNext()) {
-          if (child.isGetterDef() ||
-              child.isSetterDef()) {
+        for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {
+          if (child.isGetterDef() || child.isSetterDef()) {
             // ES5 get/set not supported.
             return false;
           }
@@ -232,18 +231,17 @@ class InlineObjectLiterals implements CompilerPass {
           // references, as that is how self-referential assignments
           // will happen.
           for (Reference t : refs) {
-            Node refNode = t.getParent();
-            while (!NodeUtil.isStatementBlock(refNode)) {
-              if (refNode == childVal) {
+            Node tNode = t.getParent();
+            while (!NodeUtil.isStatementBlock(tNode)) {
+              if (tNode == childVal) {
                 // There's a self-referential assignment
                 return false;
               }
-              refNode = refNode.getParent();
+              tNode = tNode.getParent();
             }
           }
         }
 
-
         // We have found an acceptable object literal assignment. As
         // long as there are no other assignments that mess things up,
         // we can inline.