diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index 0f78330a5..ad55c11ec 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1599,9 +1599,21 @@ public class Dfp implements FieldElement<Dfp> {
      * @param x multiplicand
      * @return product of this and x
      */
-    public Dfp multiply(final int x) {
-            return multiplyFast(x);
+public Dfp multiply(final int x) {
+    if (isNaN() || Double.isNaN(x)) {
+        return newInstance(this);
+    }
+    Dfp xAsDfp = new Dfp(getField(), x);
+    try {
+        Dfp result = multiply(xAsDfp);
+        if (!result.isNaN()) {
+            return result;
+        }
+    } catch (ArithmeticException ignored) {
+        // If exact multiplication fails, fall back to fast multiplication method
     }
+    return multiplyFast(x);
+}
 
     /** Multiply this by a single digit 0&lt;=x&lt;radix.
      * There are speed advantages in this special case.