diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
index a84438d9b..852d73807 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -87,71 +87,86 @@ public class SimplexSolver extends AbstractLinearOptimizer {
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
-    private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
-        double minRatio = Double.MAX_VALUE;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
-
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
-                    minRatioPositions.add(i);
-                } else if (cmp < 0) {
-                    minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
-                }
+private Integer getPivotRow(SimplexTableau tableau, final int col) {
+    // create a list of all the rows that tie for the lowest score in the minimum ratio test
+    List<Integer> minRatioPositions = new ArrayList<Integer>();
+    double minRatio = Double.MAX_VALUE;
+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
+        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+        final double entry = tableau.getEntry(i, col);
+
+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            final double ratio = rhs / entry;
+            // check if the entry is strictly equal to the current min ratio
+            // do not use a ulp/epsilon check
+            final int cmp = Double.compare(ratio, minRatio);
+            if (cmp == 0) {
+                minRatioPositions.add(i);
+            } else if (cmp < 0) {
+                minRatio = ratio;
+                minRatioPositions.clear(); // clear instead of creating new instance
+                minRatioPositions.add(i);
             }
         }
+    }
 
-        if (minRatioPositions.size() == 0) {
-            return null;
-        } else if (minRatioPositions.size() > 1) {
-            // there's a degeneracy as indicated by a tie in the minimum ratio test
-
-            // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
-                    }
+    if (minRatioPositions.size() == 0) {
+        return null;
+    } else if (minRatioPositions.size() > 1) {
+        Integer toRemove;
+        boolean isRemoved = false;
+        // check if there's an artificial variable that can be forced out of the basis
+        // find a row with the maximum deviation between the rhs and the explaining variable
+        double maxDeviation = -1.0;
+        toRemove = null;
+        for (int i = 0; i < minRatioPositions.size() && !isRemoved; ++i) {
+            Integer row = minRatioPositions.get(i);
+            int explainingColumn = -1;
+            for (int j = 0; j < tableau.getNumArtificialVariables(); j++) {
+                int column = j + tableau.getArtificialVariableOffset();
+                final double entry = tableau.getEntry(row, column);
+                if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                    explainingColumn = column;
+                    break;
+                }
+            }
+            if (explainingColumn >= 0) {
+                double deviation = tableau.getEntry(row, tableau.getWidth() - 1) - tableau.getEntry(row, explainingColumn);
+                if (deviation > maxDeviation) {
+                    toRemove = row;
+                    maxDeviation = deviation;
                 }
+            }
+        }
+        if (toRemove != null) {
+            return toRemove;
+        }
 
-            // 2. apply Bland's rule to prevent cycling:
-            //    take the row for which the corresponding basic variable has the smallest index
-            //
-            // see http://www.stanford.edu/class/msande310/blandrule.pdf
-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            //
-            // Additional heuristic: if we did not get a solution after half of maxIterations
-            //                       revert to the simple case of just returning the top-most row
-            // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
+        // apply Bland's rule to prevent cycling:
+        // take the row for which the corresponding basic variable has the smallest index
+        // see https://en.wikipedia.org/wiki/Bland's_rule
+        int minRow = tableau.getHeight() + 1;
+        int minColumn = tableau.getWidth() + 1;
+        for (Integer row : minRatioPositions) {
+            for (int j = 0; j < tableau.getWidth(); ++j) {
+                if (tableau.getEntry(row, j) != 0) {
+                    if (j < minColumn) {
+                        minColumn = j;
+                        minRow = row;
+                    } else if (j == minColumn) {
+                        if (row < minRow) {
+                            minRow = row;
                         }
                     }
+                    break;
                 }
-                return minRow;
+            }
         }
+        return minRow != tableau.getHeight() + 1 ? minRow : null;
+    } else {
         return minRatioPositions.get(0);
     }
+}
 
     /**
      * Runs one iteration of the Simplex method on the given model.