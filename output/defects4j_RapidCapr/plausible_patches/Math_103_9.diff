diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
index 02810e142..02b8d8908 100644
--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
@@ -105,10 +105,32 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution
      * x is more than 20 standard deviations from the mean, in which case the
      * convergence exception is caught and 0 or 1 is returned.
      */
-    public double cumulativeProbability(double x) throws MathException {
-            return 0.5 * (1.0 + Erf.erf((x - mean) /
-                    (standardDeviation * Math.sqrt(2.0))));
+public double cumulativeProbability(double x) throws MathException {
+    double result;
+    if (Double.isNaN(x)) {
+        throw new MathException("Input is NaN");
+    } else if (Double.isInfinite(x)) {
+        result =  x < 0 ? 0.0 : 1.0;
+    } else if (x < mean - 20 * standardDeviation) {
+        result = 0;
+    } else if (x > mean + 20 * standardDeviation) {
+        result = 1;
+    } else {
+        try {
+            result = 0.5 * (1 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2))));
+        } catch (MaxIterationsExceededException e) {
+            result = getApproximationResult(x);
+        }
     }
+    return result;
+}
+
+private double getApproximationResult(double x) {
+    double dev = (x - mean) / standardDeviation;
+    double t = 1.0 / (1.0 + 0.3275911 * Math.abs(dev));
+    double approx = ((0.254829592 * t) - (0.284496736 * t * t) + (1.421413741 * t * t * t) - (1.453152027 * t * t * t * t) + (1.061405429 * t * t * t * t * t)) * Math.exp(-dev * dev / 2.0);
+    return dev > 0 ? 1 - approx : approx;
+}
     
     /**
      * For this distribution, X, this method returns the critical point x, such