diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index b6ce68ef3..f9068a17f 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -113,11 +113,11 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
         final double hi = getMax();
 
         // Optional additional convergence criteria.
-        final ConvergenceChecker<UnivariatePointValuePair> checker
-            = getConvergenceChecker();
+        final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker();
 
         double a;
         double b;
+
         if (lo < hi) {
             a = lo;
             b = hi;
@@ -131,18 +131,21 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
         double w = x;
         double d = 0;
         double e = 0;
+
         double fx = computeObjectiveValue(x);
+
         if (!isMinim) {
             fx = -fx;
         }
+
         double fv = fx;
         double fw = fx;
 
         UnivariatePointValuePair previous = null;
-        UnivariatePointValuePair current
-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+        UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
 
         int iter = 0;
+
         while (true) {
             final double m = 0.5 * (a + b);
             final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
@@ -150,6 +153,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+
             if (!stop) {
                 double p = 0;
                 double q = 0;
@@ -171,9 +175,7 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     r = e;
                     e = d;
 
-                    if (p > q * (a - x) &&
-                        p < q * (b - x) &&
-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
+                    if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {
                         // Parabolic interpolation step.
                         d = p / q;
                         u = x + d;
@@ -250,21 +252,27 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {
                     } else {
                         b = u;
                     }
-                    if (fu <= fw ||
-                        Precision.equals(w, x)) {
+                    if (fu <= fw || Precision.equals(w, x)) {
                         v = w;
                         fv = fw;
                         w = u;
                         fw = fu;
-                    } else if (fu <= fv ||
-                               Precision.equals(v, x) ||
-                               Precision.equals(v, w)) {
+                    } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) {
                         v = u;
                         fv = fu;
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return current;
+                previous = current;
+                current = new UnivariatePointValuePair(x, isMinim ? fx : -fx);
+
+                if (checker != null) {
+                    if (checker.converged(iter, previous, current)) {
+                        return current;
+                    }
+                } else {
+                    return current;
+                }
             }
             ++iter;
         }