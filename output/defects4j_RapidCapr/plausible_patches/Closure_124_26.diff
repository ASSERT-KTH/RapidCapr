diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..ccd7ebc7 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,28 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
+private boolean isSafeReplacement(Node node, Node replacement) {
+    // Check if node is a simple name or getprop access chain
     if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+        // Simple name is always safe to replace
+        return true;
+    } else if (node.isGetProp()) {
+        // Check if any of the intermediate nodes are assigned to the replacement node.
+        Node currentNode = node.getFirstChild();
+        while (currentNode != null) {
+            if (currentNode.isName() && isNameAssignedTo(currentNode.getString(), replacement)) {
+                return false;
+            } else if (!isSafeReplacement(currentNode, replacement)) {
+                return false;
+            }
+            currentNode = currentNode.getNext();
+        }
+        return true;
+    } else {
+        // Unsupported node type, assume it's safe to replace
+        return true;
     }
-
-    return true;
-  }
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +248,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}