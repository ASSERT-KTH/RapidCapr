diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java
index c0f06a47..75f54d29 100644
--- a/src/java/org/apache/commons/lang/math/NumberUtils.java
+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java
@@ -400,17 +400,17 @@ public class NumberUtils {
         }
         if (StringUtils.isBlank(str)) {
             throw new NumberFormatException("A blank string is not a valid number");
-        }  
+        }
         if (str.startsWith("--")) {
             // this is protection for poorness in java.lang.BigDecimal.
-            // it accepts this as a legal value, but it does not appear 
-            // to be in specification of class. OS X Java parses it to 
+            // it accepts this as a legal value, but it does not appear
+            // to be in specification of class. OS X Java parses it to
             // a wrong value.
             return null;
         }
         if (str.startsWith("0x") || str.startsWith("-0x")) {
             return createInteger(str);
-        }   
+        }
         char lastChar = str.charAt(str.length() - 1);
         String mant;
         String dec;
@@ -443,41 +443,39 @@ public class NumberUtils {
             } else {
                 exp = null;
             }
-            //Requesting a specific type..
+            // Requesting a specific type..
             String numeric = str.substring(0, str.length() - 1);
             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
             switch (lastChar) {
-                case 'l' :
-                case 'L' :
-                    if (dec == null
-                        && exp == null
-                        && isDigits(numeric.substring(1))
-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {
+                case 'l':
+                case 'L':
+                    if (dec == null && exp == null
+                            && (StringUtils.isNumeric(numeric) || numeric.startsWith("-") && StringUtils.isNumeric(numeric.substring(1)))) {
                         try {
                             return createLong(numeric);
                         } catch (NumberFormatException nfe) {
-                            //Too big for a long
+                            // Too big for a long
                         }
                         return createBigInteger(numeric);
 
                     }
                     throw new NumberFormatException(str + " is not a valid number.");
-                case 'f' :
-                case 'F' :
+                case 'f':
+                case 'F':
                     try {
                         Float f = NumberUtils.createFloat(numeric);
                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
-                            //If it's too big for a float or the float value = 0 and the string
-                            //has non-zeros in it, then float does not have the precision we want
+                            // If it's too big for a float or the float value = 0 and the string
+                            // has non-zeros in it, then float does not have the precision we want
                             return f;
                         }
 
                     } catch (NumberFormatException nfe) {
                         // ignore the bad number
                     }
-                    //Fall through
-                case 'd' :
-                case 'D' :
+                    // Fall through
+                case 'd':
+                case 'D':
                     try {
                         Double d = NumberUtils.createDouble(numeric);
                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
@@ -491,21 +489,21 @@ public class NumberUtils {
                     } catch (NumberFormatException e) {
                         // ignore the bad number
                     }
-                    //Fall through
-                default :
+                    // Fall through
+                default:
                     throw new NumberFormatException(str + " is not a valid number.");
 
             }
         } else {
-            //User doesn't have a preference on the return type, so let's start
-            //small and go from there...
+            // User doesn't have a preference on the return type, so let's start
+            // small and go from there...
             if (expPos > -1 && expPos < str.length() - 1) {
                 exp = str.substring(expPos + 1, str.length());
             } else {
                 exp = null;
             }
             if (dec == null && exp == null) {
-                //Must be an int,long,bigint
+                // Must be an int,long,bigint
                 try {
                     return createInteger(str);
                 } catch (NumberFormatException nfe) {
@@ -519,7 +517,7 @@ public class NumberUtils {
                 return createBigInteger(str);
 
             } else {
-                //Must be a float,double,BigDec
+                // Must be a float,double,BigDec
                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
                 try {
                     Float f = createFloat(str);