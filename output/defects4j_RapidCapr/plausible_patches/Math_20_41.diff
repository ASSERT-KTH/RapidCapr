diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 4b7dbf6bb..d4b37b679 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -917,10 +917,31 @@ public class CMAESOptimizer
          * @param x Normalized objective variables.
          * @return the original objective variables, possibly repaired.
          */
-        public double[] repairAndDecode(final double[] x) {
-            return
-                decode(x);
+public double[] repairAndDecode(final double[] x) {
+    double[] decoded = null;
+    try {
+        double[] repaired = repair(x);
+        if(repaired == null || repaired.length != x.length) {
+            throw new RuntimeException("Repaired array has different length than input array");
         }
+        decoded = decode(repaired);
+        if(decoded == null || decoded.length != x.length) {
+            throw new RuntimeException("Decoded array has different length than input array");
+        }
+        for(int i = 0; i < x.length; i++) {
+            if(Double.isNaN(decoded[i]) || Double.isInfinite(decoded[i])) {
+                decoded[i] = 0.0; // replace NaN and infinity values with 0
+            } else if(decoded[i] < 0.0) {
+                decoded[i] = 0.0; // replace negative values with 0
+            } else if(decoded[i] > 1.0) {
+                decoded[i] = 1.0; // replace values greater than 1 with 1
+            }
+        }
+    } catch (Exception e) {
+        decoded = new double[x.length]; // return an array of zeros if there is an error
+    }
+    return decoded;
+}
 
         /**
          * @param x Normalized objective variables.