diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
index a84438d9b..405ba9db5 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -87,44 +87,62 @@ public class SimplexSolver extends AbstractLinearOptimizer {
      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}
      * @return row with the minimum ratio
      */
-    private Integer getPivotRow(SimplexTableau tableau, final int col) {
-        // create a list of all the rows that tie for the lowest score in the minimum ratio test
-        List<Integer> minRatioPositions = new ArrayList<Integer>();
-        double minRatio = Double.MAX_VALUE;
-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
-            final double entry = tableau.getEntry(i, col);
-
-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
-                final double ratio = rhs / entry;
-                // check if the entry is strictly equal to the current min ratio
-                // do not use a ulp/epsilon check
-                final int cmp = Double.compare(ratio, minRatio);
-                if (cmp == 0) {
-                    minRatioPositions.add(i);
-                } else if (cmp < 0) {
-                    minRatio = ratio;
-                    minRatioPositions = new ArrayList<Integer>();
-                    minRatioPositions.add(i);
-                }
+private Integer getPivotRow(SimplexTableau tableau, final int col) {
+    // create a list of all the rows that tie for the lowest score in the minimum ratio test
+    List<Integer> minRatioPositions = new ArrayList<Integer>();
+    double minRatio = Double.MAX_VALUE;
+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
+        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+        final double entry = tableau.getEntry(i, col);
+
+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
+            final double ratio = rhs / entry;
+            // check if the entry is strictly equal to the current min ratio
+            // do not use a ulp/epsilon check
+            final int cmp = Double.compare(ratio, minRatio);
+            if (cmp == 0) {
+                minRatioPositions.add(i);
+            } else if (cmp < 0) {
+                minRatio = ratio;
+                minRatioPositions.clear(); // clear instead of creating new instance
+                minRatioPositions.add(i);
             }
         }
+    }
 
-        if (minRatioPositions.size() == 0) {
-            return null;
-        } else if (minRatioPositions.size() > 1) {
+    if (minRatioPositions.size() == 0) {
+        return null;
+    } else if (minRatioPositions.size() > 1) {
+        boolean tieBreak = true;
+        Integer toRemove = null;
+        while (tieBreak) {
+            tieBreak = false;
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
-                for (Integer row : minRatioPositions) {
-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                        int column = i + tableau.getArtificialVariableOffset();
-                        final double entry = tableau.getEntry(row, column);
-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                            return row;
-                        }
+            double maxDeviation = -1.0;
+            for (int i = 0; i < minRatioPositions.size(); ++i) {
+                Integer row = minRatioPositions.get(i);
+                int explainingColumn = -1;
+                for (int j = 0; j < tableau.getNumArtificialVariables(); j++) {
+                    int column = j + tableau.getArtificialVariableOffset();
+                    final double entry = tableau.getEntry(row, column);
+                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                        explainingColumn = column;
+                        break;
+                    }
+                }
+                if (explainingColumn >= 0) {
+                    double deviation = tableau.getEntry(row, tableau.getWidth() - 1) - tableau.getEntry(row, explainingColumn);
+                    if (deviation > maxDeviation) {
+                        toRemove = row;
+                        maxDeviation = deviation;
                     }
                 }
+            }
+            if (toRemove != null) {
+                return toRemove;
+            }
 
             // 2. apply Bland's rule to prevent cycling:
             //    take the row for which the corresponding basic variable has the smallest index
@@ -135,23 +153,37 @@ public class SimplexSolver extends AbstractLinearOptimizer {
             // Additional heuristic: if we did not get a solution after half of maxIterations
             //                       revert to the simple case of just returning the top-most row
             // This heuristic is based on empirical data gathered while investigating MATH-828.
-                Integer minRow = null;
-                int minIndex = tableau.getWidth();
-                for (Integer row : minRatioPositions) {
-                    int i = tableau.getNumObjectiveFunctions();
-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
-                        if (row == tableau.getBasicRow(i)) {
-                            if (i < minIndex) {
-                                minIndex = i;
-                                minRow = row;
-                            }
+            Integer minRow = null;
+            int minIndex = tableau.getWidth();
+            for (Integer row : minRatioPositions) {
+                int i = tableau.getNumObjectiveFunctions();
+                for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
+                    if (row == tableau.getBasicRow(i)) {
+                        if (i < minIndex) {
+                            minIndex = i;
+                            minRow = row;
                         }
                     }
                 }
+            }
+
+            // Return the chosen row if it's unique
+            if (minRatioPositions.contains(minRow) && minRatioPositions.size() == 1) {
                 return minRow;
+            } else if (minRatioPositions.contains(minRow)) {
+                // If the chosen row is in the set of possibilities but there is more than one possibility,
+                // remove it from the list and continue the tie break
+                minRatioPositions.remove(minRow);
+                toRemove = minRow;
+                tieBreak = true;
+            } else {
+                // If the chosen row is not in the list, just return a random one
+                return minRatioPositions.get(0);
+            }
         }
-        return minRatioPositions.get(0);
     }
+    return minRatioPositions.get(0);
+}
 
     /**
      * Runs one iteration of the Simplex method on the given model.