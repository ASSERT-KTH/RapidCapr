diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
index c87b0101f..eec49a631 100644
--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java
@@ -61,25 +61,37 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {
      * @throws IllegalArgumentException if preconditions are not met
      * or length is less than 2
      */
-    public double chiSquare(double[] expected, long[] observed)
-        throws IllegalArgumentException {
-        if ((expected.length < 2) || (expected.length != observed.length)) {
-            throw new IllegalArgumentException(
-                    "observed, expected array lengths incorrect");
-        }
-        if (!isPositive(expected) || !isNonNegative(observed)) {
-            throw new IllegalArgumentException(
-                "observed counts must be non-negative and expected counts must be postive");
-        }
-        double sumSq = 0.0d;
-        double dev = 0.0d;
-        for (int i = 0; i < observed.length; i++) {
-                dev = ((double) observed[i] - expected[i]);
-                sumSq += dev * dev / expected[i];
-        }
-        return sumSq;
+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {
+    if (expected.length < 2 || expected.length != observed.length) {
+        throw new IllegalArgumentException("observed, expected array lengths incorrect");
+    }
+    if (!isPositive(expected) || !isNonNegative(observed)) {
+        throw new IllegalArgumentException(
+                "observed counts must be non-negative and expected counts must be positive");
     }
 
+    double sumObserved = 0.0;
+    double sumExpected = 0.0;
+
+    for (int i = 0; i < expected.length; i++) {
+        sumObserved += observed[i];
+        sumExpected += expected[i];
+    }
+    
+    if (sumExpected == 0) {
+        return 0.0; // All expected values are zero
+    }
+
+    double chiSquare = 0.0;
+    for (int i = 0; i < expected.length; i++) {
+        double expectedScaled = expected[i] * sumObserved / sumExpected;
+        double deviation = observed[i] - expectedScaled;
+        chiSquare += deviation * deviation / expectedScaled;
+    }
+
+    return chiSquare;
+}
+
     /**
      * {@inheritDoc}
      * <p><strong>Note: </strong>This implementation rescales the 