diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..747e38c4 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,45 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node node) {
+    if (node.getType() == Token.LABEL) {
+        // If the labeled statement is not present, return false
+        Node labeledStatement = node.getFirstChild().getNext();
+        if (labeledStatement == null) {
+            return false;
+        }
+        
+        // If the labeled statement is an empty statement, get the next statement
+        if (labeledStatement.getType() == Token.EMPTY) {
+            labeledStatement = labeledStatement.getNext();
+            if (labeledStatement == null) {
+                return false;
+            }
+        }
+        
+        // Recursively check the labeled statement
+        return isOneExactlyFunctionOrDo(labeledStatement);
+    } else if (node.getType() == Token.BLOCK) {
+        // If the block has multiple or no statements, return false
+        if (node.getChildCount() != 1) {
+            return false;
+        }
+        
+        // Get the only child of the block
+        Node child = node.getFirstChild();
+        
+        // If the child is a nested block, recursively check it
+        if (child.getType() == Token.BLOCK) {
+            return isOneExactlyFunctionOrDo(child);
+        }
+        
+        // Return true if the child is a function or do statement
+        return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);
+    } else {
+        // Return true if the node is a function or do statement
+        return (node.getType() == Token.FUNCTION || node.getType() == Token.DO);
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike