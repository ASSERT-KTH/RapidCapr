diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index b6e3fc78..797c6b85 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -553,27 +553,27 @@ class PrototypeObjectType extends ObjectType {
 
   @Override
   public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
-
-    // Handle the case where the constraint object is a record type.
-    //
-    // param constraintObj {{prop: (number|undefined)}}
-    // function f(constraintObj) {}
-    // f({});
-    //
-    // We want to modify the object literal to match the constraint, by
-    // taking any each property on the record and trying to match
-    // properties on this object.
-    if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
+    if (!isNominalType()) {
+      // Handle the case where the constraint object is a record type.
+      //
+      // param constraintObj {{prop: (number|undefined)}}
+      // function f(constraintObj) {}
+      // f({});
+      //
+      // We want to modify the object literal to match the constraint, by
+      // taking any each property on the record and trying to match
+      // properties on this object.
+      if (constraintObj.isRecordType()) {
+        for (String prop : constraintObj.getOwnPropertyNames()) {
+          JSType propType = constraintObj.getPropertyType(prop);
+          if (!isPropertyTypeDeclared(prop)) {
+            JSType typeToInfer = propType;
+            if (!hasProperty(prop)) {
+              typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
+                  .getLeastSupertype(propType);
+            }
+            defineInferredProperty(prop, typeToInfer, null);
           }
-          defineInferredProperty(prop, typeToInfer, null);
         }
       }
     }