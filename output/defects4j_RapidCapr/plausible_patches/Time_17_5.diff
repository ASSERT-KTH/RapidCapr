diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java
index 74a3802a..4e707884 100644
--- a/src/main/java/org/joda/time/DateTimeZone.java
+++ b/src/main/java/org/joda/time/DateTimeZone.java
@@ -1160,24 +1160,45 @@ public abstract class DateTimeZone implements Serializable {
      * @param earlierOrLater  false for earlier, true for later
      * @return the adjusted instant millis
      */
-    public long adjustOffset(long instant, boolean earlierOrLater) {
-        // a bit messy, but will work in all non-pathological cases
-        
-        // evaluate 3 hours before and after to work out if anything is happening
-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);
-        if (instantBefore == instantAfter) {
-            return instant;  // not an overlap (less than is a gap, equal is normal case)
+public long adjustOffset(long instant, boolean earlierOrLater) {
+    long local = convertUTCToLocal(instant);
+    Long instantBefore = null;
+    Long instantAfter = null;
+    boolean gap = false;
+    boolean overlap = false;
+    
+    for (int i = -1; i <= 1; i++) {
+        if (i != 0) {
+            long candidate = convertLocalToUTC(local, false, instant + i * DateTimeConstants.MILLIS_PER_HOUR);
+            long candidateLocal = convertUTCToLocal(candidate);
+            if (candidateLocal == local) {
+                overlap = true;
+                if (i < 0 && (instantBefore == null || candidate > instantBefore)) {
+                    instantBefore = candidate;
+                }
+                if (i > 0 && (instantAfter == null || candidate < instantAfter)) {
+                    instantAfter = candidate;
+                }
+            } else if (candidateLocal > local) {
+                gap = true;
+                if (instantBefore == null || candidate > instantBefore) {
+                    instantBefore = candidate;
+                }
+            } else {
+                gap = true;
+                if (instantAfter == null || candidate < instantAfter) {
+                    instantAfter = candidate;
+                }
+            }
         }
-        
-        // work out range of instants that have duplicate local times
-        long local = convertUTCToLocal(instant);
+    }
+    
+    if (!gap && overlap) {
         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);
-        
-        // calculate result
-          // currently in later offset
-          // currently in earlier offset
+    } else {
+        return instant;
     }
+}
 //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + " " + new DateTime(transitionStart, this));
 
     //-----------------------------------------------------------------------