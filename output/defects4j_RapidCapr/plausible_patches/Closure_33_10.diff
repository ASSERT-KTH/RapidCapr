diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index b6e3fc78..2ac0b63f 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -552,8 +552,11 @@ class PrototypeObjectType extends ObjectType {
   }
 
   @Override
-  public void matchConstraint(ObjectType constraintObj) {
-    // We only want to match contraints on anonymous types.
+public void matchConstraint(ObjectType constraintObj) {
+    // We only want to match constraints on non-nominal types.
+    if (isNominalType()) {
+        return;
+    }
 
     // Handle the case where the constraint object is a record type.
     //
@@ -565,17 +568,16 @@ class PrototypeObjectType extends ObjectType {
     // taking any each property on the record and trying to match
     // properties on this object.
     if (constraintObj.isRecordType()) {
-      for (String prop : constraintObj.getOwnPropertyNames()) {
-        JSType propType = constraintObj.getPropertyType(prop);
-        if (!isPropertyTypeDeclared(prop)) {
-          JSType typeToInfer = propType;
-          if (!hasProperty(prop)) {
-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
-                .getLeastSupertype(propType);
-          }
-          defineInferredProperty(prop, typeToInfer, null);
+        for (String prop : constraintObj.getOwnPropertyNames()) {
+            JSType propType = constraintObj.getPropertyType(prop);
+            if (!isPropertyTypeDeclared(prop)) {
+                JSType typeToInfer = propType;
+                if (!hasProperty(prop)) {
+                    typeToInfer = getNativeType(JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
+                }
+                defineInferredProperty(prop, typeToInfer, null);
+            }
         }
-      }
     }
-  }
+}
 }