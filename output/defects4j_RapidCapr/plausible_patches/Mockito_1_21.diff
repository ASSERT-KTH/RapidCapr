diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..288de87a1 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,7 +120,32 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+Object[] args = invocation.getRawArguments();
+for (int position = 0; position < matchers.size(); position++) {
+    Matcher m = matchers.get(position);
+    if (m instanceof CapturesArguments) {
+        if (m instanceof VarargMatcher) {
+            Object varargArray = null;
+            Class<?> parameterType = invocation.getMethod().getParameterTypes()[position];
+            if (args.length > position && parameterType.isArray()) {
+                varargArray = args[position];
+            } else if (position == matchers.size() - 1 && args.length == position + 1 && parameterType.isArray()) {
+                varargArray = Array.newInstance(parameterType.getComponentType(), 0);
+            }
+            if (varargArray != null) {
+                for (int i = 0; i < Array.getLength(varargArray); i++) {
+                    Object vararg = Array.get(varargArray, i);
+                    ((CapturesArguments) m).captureFrom(vararg);
+                }
+            }
+        } else {
+            if (position < args.length) {
+                Object arg = args[position];
+                ((CapturesArguments) m).captureFrom(arg);
+            }
+        }
+    }
+}
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {