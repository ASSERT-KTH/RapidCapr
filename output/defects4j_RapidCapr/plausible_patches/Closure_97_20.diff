diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..140f1b9a 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,22 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+if (n.getType() == Token.URSH) {
+    // range check - unsigned shift must be in range [0,32)
+    if (rvalInt >= 32 || rvalInt < 0) {
+        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);
+        return n;
+    }
+    // Perform the unsigned shift operation
+    long lvalLong = lvalInt >= 0 ? lvalInt : ((long) lvalInt) + 4294967296L;
+    result = (double) (lvalLong >>> rvalInt);
+} else {
+    // Perform the signed shift operations
+    result = lvalInt >> (rvalInt & 0x1f);
+    if (n.getType() == Token.LSH) {
+        result = lvalInt << (rvalInt & 0x1f);
+    }
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +