diff --git a/src/java/org/apache/commons/lang3/StringUtils.java b/src/java/org/apache/commons/lang3/StringUtils.java
index 14563aa6..9d7cd785 100644
--- a/src/java/org/apache/commons/lang3/StringUtils.java
+++ b/src/java/org/apache/commons/lang3/StringUtils.java
@@ -3602,16 +3602,15 @@ public class StringUtils {
      *             and/or size 0)
      * @since 2.4
      */
-    private static String replaceEach(String text, String[] searchList, String[] replacementList, 
-                                      boolean repeat, int timeToLive) 
+    private static String replaceEach(String text, String[] searchList, String[] replacementList,
+                                      boolean repeat, int timeToLive)
     {
 
         // mchyzer Performance note: This creates very few new objects (one major goal)
         // let me know if there are performance requests, we can create a harness to measure
 
-        if (text == null || text.length() == 0 || searchList == null || 
-            searchList.length == 0 || replacementList == null || replacementList.length == 0) 
-        {
+        if (text == null || text.isEmpty() || searchList == null || searchList.length == 0 ||
+                replacementList == null || replacementList.length == 0) {
             return text;
         }
 
@@ -3626,9 +3625,9 @@ public class StringUtils {
         // make sure lengths are ok, these need to be equal
         if (searchLength != replacementLength) {
             throw new IllegalArgumentException("Search and Replace array lengths don't match: "
-                + searchLength
-                + " vs "
-                + replacementLength);
+                    + searchLength
+                    + " vs "
+                    + replacementLength);
         }
 
         // keep track of which still have matches
@@ -3642,9 +3641,8 @@ public class StringUtils {
         // index of replace array that will replace the search string found
         // NOTE: logic duplicated below START
         for (int i = 0; i < searchLength; i++) {
-            if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                searchList[i].length() == 0 || replacementList[i] == null) 
-            {
+            if (searchList[i] == null || searchList[i].isEmpty() || replacementList[i] == null) {
+                noMoreMatchesForReplIndex[i] = true;
                 continue;
             }
             tempIndex = text.indexOf(searchList[i]);
@@ -3673,9 +3671,9 @@ public class StringUtils {
 
         // count the replacement text elements that are larger than their corresponding text being replaced
         for (int i = 0; i < searchList.length; i++) {
-            int greater = replacementList[i].length() - searchList[i].length();
-            if (greater > 0) {
-                increase += 3 * greater; // assume 3 matches
+            int diff = replacementList[i] != null ? replacementList[i].length() - searchList[i].length() : 0;
+            if (diff > 0) {
+                increase += diff * StringUtils.countMatches(text, searchList[i]);
             }
         }
         // have upper-bound at 20% increase, then let Java take over
@@ -3698,9 +3696,8 @@ public class StringUtils {
             // find the next earliest match
             // NOTE: logic mostly duplicated above START
             for (int i = 0; i < searchLength; i++) {
-                if (noMoreMatchesForReplIndex[i] || searchList[i] == null || 
-                    searchList[i].length() == 0 || replacementList[i] == null) 
-                {
+                if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||
+                        searchList[i].length() == 0 || replacementList[i] == null) {
                     continue;
                 }
                 tempIndex = text.indexOf(searchList[i], start);
@@ -3718,8 +3715,8 @@ public class StringUtils {
             // NOTE: logic duplicated above END
 
         }
-        int textLength = text.length();
-        for (int i = start; i < textLength; i++) {
+        int end = text.length();
+        for (int i = start; i < end; i++) {
             buf.append(text.charAt(i));
         }
         String result = buf.toString();