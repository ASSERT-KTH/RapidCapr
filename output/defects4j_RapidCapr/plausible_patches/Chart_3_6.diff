diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java
index 795d791..25745cb 100644
--- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -1045,31 +1045,47 @@ public class TimeSeries extends Series implements Cloneable, Serializable {
      *
      * @throws CloneNotSupportedException if there is a cloning problem.
      */
-    public TimeSeries createCopy(int start, int end)
-            throws CloneNotSupportedException {
-        if (start < 0) {
-            throw new IllegalArgumentException("Requires start >= 0.");
-        }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
-        }
-        TimeSeries copy = (TimeSeries) super.clone();
-        copy.data = new java.util.ArrayList();
-        if (this.data.size() > 0) {
-            for (int index = start; index <= end; index++) {
-                TimeSeriesDataItem item
-                        = (TimeSeriesDataItem) this.data.get(index);
-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
-                try {
-                    copy.add(clone);
-                }
-                catch (SeriesException e) {
-                    e.printStackTrace();
-                }
-            }
-        }
-        return copy;
-    }
+public TimeSeries createCopy(int start, int end) throws CloneNotSupportedException {
+    if (start < 0) {
+        throw new IllegalArgumentException("Requires start >= 0.");
+    }
+    if (end < start) {
+        throw new IllegalArgumentException("Requires start <= end.");
+    }
+    TimeSeries copy = (TimeSeries) super.clone();
+    copy.data = new java.util.ArrayList();
+    
+    // Fix starts here
+    if (this.data.size() > 0) {
+        copy.maxY = Double.NEGATIVE_INFINITY;
+        copy.minY = Double.POSITIVE_INFINITY;
+        for (int index = start; index <= end && index < this.data.size(); index++) {
+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);
+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
+            try {
+                copy.add(clone);
+                
+                if (clone.getValue() != null) {
+                    double value = clone.getValue().doubleValue();
+                    if (value > copy.getMaxY()) {
+                        copy.maxY = value;
+                    }
+                    if (value < copy.getMinY()) {
+                        copy.minY = value;
+                    }
+                }
+            } catch (SeriesException e) {
+                e.printStackTrace();
+            }
+        }
+    } else {
+        copy.maxY = Double.NaN;
+        copy.minY = Double.NaN;
+    }
+    // Fix ends here
+    
+    return copy;
+}
 
     /**
      * Creates a new timeseries by copying a subset of the data in this time