diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..8e0feb8f 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,27 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
+private boolean isSafeReplacement(Node node, Node replacement) {
     // No checks are needed for simple names.
     if (node.isName()) {
-      return true;
+        return true;
     }
     Preconditions.checkArgument(node.isGetProp());
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
+    node = node.getFirstChild();
+    while (!node.isName()) {
+        // If the current child node is a getprop node, traverse it.
+        if (node.isGetProp()) {
+            node = node.getFirstChild();
+        // If the current child node is not a getprop or name node, return true.
+        } else {
+            return true;
+        }
     }
 
-    return true;
-  }
+    // If the current child node is a name node, check if it is assigned to the replacement node.
+    return !isNameAssignedTo(node.getString(), replacement);
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +247,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}