diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
index 7999db40..f3539040 100644
--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java
@@ -175,8 +175,7 @@ class LiveVariablesAnalysis extends
    * @param conditional {@code true} if any assignments encountered are
    *        conditionally executed. These assignments might not kill a variable.
    */
-  private void computeGenKill(Node n, BitSet gen, BitSet kill,
-      boolean conditional) {
+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {
 
     switch (n.getType()) {
       case Token.SCRIPT:
@@ -187,24 +186,28 @@ class LiveVariablesAnalysis extends
       case Token.WHILE:
       case Token.DO:
       case Token.IF:
-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-            conditional);
+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
         return;
 
       case Token.FOR:
         if (!NodeUtil.isForIn(n)) {
-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,
-              conditional);
+          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);
         } else {
           // for(x in y) {...}
           Node lhs = n.getFirstChild();
           Node rhs = lhs.getNext();
-          if (NodeUtil.isVar(lhs)) {
-            // for(var x in y) {...}
-            lhs = lhs.getLastChild();
-          }
+
+          if (NodeUtil.isName(lhs)) {
+            // for(x in y) {...}
             addToSetIfLocal(lhs, kill);
             addToSetIfLocal(lhs, gen);
+          } else {
+            // for(var x in y) {...}
+            Node var = lhs.getFirstChild();
+            addToSetIfLocal(var, kill);
+            addToSetIfLocal(var, gen);
+          }
+
           computeGenKill(rhs, gen, kill, conditional);
         }
         return;