diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..3ba27310 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,15 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+if (n.getType() == Token.URSH) {
+    long lvalLong = ((long) lvalInt) & 0xFFFFFFFFL;
+    result = ((double) (lvalLong >>> (rvalInt & 0x1F))) % Math.pow(2, 32);
+} else {
+    result = lvalInt >> (rvalInt & 0x1F);
+    if (n.getType() == Token.LSH) {
+        result = lvalInt << (rvalInt & 0x1F);
+    }
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +