diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..af7c0dd1d 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,26 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+if (candidate != null) {
+    Class<?> fieldType = field.getType();
+    if (!fieldType.isInstance(candidate)) {
+        String message = "Mock candidate " + candidate.getClass().getSimpleName() 
+            + " is not compatible with field " + field.getName() 
+            + " (expected type: " + fieldType.getSimpleName()+ ")";
+        throw new IllegalArgumentException(message);
+    }
+    try {
+        field.setAccessible(true);
+        field.set(fieldInstance, candidate);
+        mocks.remove(candidate); // remove the used mock from the set of available mocks
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Unable to inject mock candidate", e);
+    }
+}
         }
     }
 