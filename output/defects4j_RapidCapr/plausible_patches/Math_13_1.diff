diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
index 99d86e92a..6cc203d11 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -558,8 +558,29 @@ public abstract class AbstractLeastSquaresOptimizer
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
-    private RealMatrix squareRoot(RealMatrix m) {
-            final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+private RealMatrix squareRoot(RealMatrix m) {
+    final EigenDecomposition dec;
+    try {
+        dec = new EigenDecomposition(m);
+    } catch (OutOfMemoryError e) {
+        // Log the error message and return input matrix
+        System.err.println("Out of memory error: " + e.getMessage());
+        return m;
     }
+    final RealMatrix sqrt = dec.getSquareRoot();
+    if (sqrt == null) {
+        // If sqrt is null, return a matrix of zeros with the same dimensions as m
+        return MatrixUtils.createRealMatrix(m.getRowDimension(), m.getColumnDimension());
+    } else {
+        // Round small values to zero to reduce memory usage
+        for (int i = 0; i < sqrt.getRowDimension(); i++) {
+            for (int j = 0; j < sqrt.getColumnDimension(); j++) {
+                if (FastMath.abs(sqrt.getEntry(i, j)) < 1e-16) {
+                    sqrt.setEntry(i, j, 0.0);
+                }
+            }
+        }
+        return sqrt;
+    }
+}
 }