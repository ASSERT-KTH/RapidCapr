diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
index 558a5864..196517d6 100644
--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java
@@ -2537,17 +2537,27 @@ public class DateTimeFormatterBuilder {
             return MAX_LENGTH;
         }
 
-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {
-            String str = text.substring(position);
-            for (String id : ALL_IDS) {
-                if (str.startsWith(id)) {
-                    bucket.setZone(DateTimeZone.forID(id));
-                    return position + id.length();
-                }
+public int parseInto(DateTimeParserBucket bucket, String text, int position) {
+    String str = text.substring(position);
+    for (String id : ALL_IDS) {
+        int index = str.indexOf(id);
+        if (index == 0 && (id.length() == str.length() || str.charAt(id.length()) == ' ' || str.charAt(id.length()) == '/')) {
+            boolean foundEnd = false;
+            int endIndex = index + id.length();
+            if (endIndex < str.length() && str.charAt(endIndex) == '/') {
+                endIndex++;
+                foundEnd = true;
             }
-            return ~position;
+            if (!foundEnd && endIndex < str.length() && Character.isWhitespace(str.charAt(endIndex))) {
+                endIndex++;
+            }
+            bucket.setZone(DateTimeZone.forID(id));
+            return position + endIndex;
         }
     }
+    return ~position;
+}
+    }
 
     //-----------------------------------------------------------------------
     static class Composite