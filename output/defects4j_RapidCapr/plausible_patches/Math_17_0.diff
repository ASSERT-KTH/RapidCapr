diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index 0f78330a5..ae9cd2bb1 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1599,10 +1599,22 @@ public class Dfp implements FieldElement<Dfp> {
      * @param x multiplicand
      * @return product of this and x
      */
-    public Dfp multiply(final int x) {
-            return multiplyFast(x);
+public Dfp multiply(final int x) {
+    // Check if either operand is NaN
+    if (isNaN() || Double.isNaN(x)) {
+        return newInstance(this);
     }
 
+    // Check if x can be represented exactly as a Dfp
+    Dfp xAsDfp = new Dfp(getField(), x);
+    if (xAsDfp.equals(new Dfp(getField(), x))) {
+        return multiply(xAsDfp);
+    }
+
+    // If not, use the fast multiplication method
+    return multiplyFast(x);
+}
+
     /** Multiply this by a single digit 0&lt;=x&lt;radix.
      * There are speed advantages in this special case.
      * @param x multiplicand