diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
index 0afabc8a..b93779e5 100644
--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java
@@ -607,15 +607,22 @@ public abstract class ChainableReverseAbstractInterpreter
     }
 
     @Override
-    public JSType caseObjectType(ObjectType type) {
-      if (value.equals("function")) {
-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;
-          // Objects are restricted to "Function", subtypes are left
-          // Only filter out subtypes of "function"
-      }
-      return matchesExpectation("object") ? type : null;
+public JSType caseObjectType(ObjectType type) {
+  if (value != null && value.equals("function")) { // check for "function" value
+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);
+    if (ctorType == null) {
+      return null; // return null if ctorType is null
+    }
+    if (resultEqualsValue && ctorType.isSubtype(type)) {
+      return ctorType; // return ctorType if resultEqualsValue is true and ctorType is a subtype of type
+    } else {
+      return type; // return the original type if ctorType is not a subtype of type
     }
+  } else if (matchesExpectation("object")) { // check for "object" expectation
+    return type; // return the original type
+  }
+  return null; // return null for all other cases
+}
 
     @Override
     public JSType caseStringType() {