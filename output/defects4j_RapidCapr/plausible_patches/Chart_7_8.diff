diff --git a/source/org/jfree/data/time/TimePeriodValues.java b/source/org/jfree/data/time/TimePeriodValues.java
index 0a3e7a1..f1d1b89 100644
--- a/source/org/jfree/data/time/TimePeriodValues.java
+++ b/source/org/jfree/data/time/TimePeriodValues.java
@@ -254,85 +254,66 @@ public class TimePeriodValues extends Series implements Serializable {
      * @param period  the time period.
      * @param index  the index of the time period.
      */
-    private void updateBounds(TimePeriod period, int index) {
-        
-        long start = period.getStart().getTime();
-        long end = period.getEnd().getTime();
-        long middle = start + ((end - start) / 2);
-
-        if (this.minStartIndex >= 0) {
-            long minStart = getDataItem(this.minStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start < minStart) {
-                this.minStartIndex = index;           
-            }
-        }
-        else {
-            this.minStartIndex = index;
-        }
-        
-        if (this.maxStartIndex >= 0) {
-            long maxStart = getDataItem(this.maxStartIndex).getPeriod()
-                .getStart().getTime();
-            if (start > maxStart) {
-                this.maxStartIndex = index;           
-            }
-        }
-        else {
-            this.maxStartIndex = index;
-        }
-        
-        if (this.minMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long minMiddle = s + (e - s) / 2;
-            if (middle < minMiddle) {
-                this.minMiddleIndex = index;           
-            }
-        }
-        else {
-            this.minMiddleIndex = index;
-        }
-        
-        if (this.maxMiddleIndex >= 0) {
-            long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()
-                .getTime();
-            long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()
-                .getTime();
-            long maxMiddle = s + (e - s) / 2;
-            if (middle > maxMiddle) {
-                this.maxMiddleIndex = index;           
-            }
-        }
-        else {
-            this.maxMiddleIndex = index;
-        }
-        
-        if (this.minEndIndex >= 0) {
-            long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end < minEnd) {
-                this.minEndIndex = index;           
-            }
-        }
-        else {
-            this.minEndIndex = index;
-        }
-       
-        if (this.maxEndIndex >= 0) {
-            long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()
-                .getTime();
-            if (end > maxEnd) {
-                this.maxEndIndex = index;           
-            }
-        }
-        else {
-            this.maxEndIndex = index;
-        }
-        
-    }
+private void updateBounds(TimePeriod period, int index) {
+    long start = period.getStart().getTime();
+    long end = period.getEnd().getTime();
+    long middle = start + ((end - start) / 2);
+
+    TimePeriod minStartPeriod = null;
+    TimePeriod maxStartPeriod = null;
+    TimePeriod minMiddlePeriod = null;
+    TimePeriod maxMiddlePeriod = null;
+    TimePeriod minEndPeriod = null;
+    TimePeriod maxEndPeriod = null;
+
+    if (minStartIndex >= 0) {
+        minStartPeriod = getDataItem(minStartIndex).getPeriod();
+    }
+
+    if (maxStartIndex >= 0) {
+        maxStartPeriod = getDataItem(maxStartIndex).getPeriod();
+    }
+
+    if (minMiddleIndex >= 0) {
+        minMiddlePeriod = getDataItem(minMiddleIndex).getPeriod();
+    }
+
+    if (maxMiddleIndex >= 0) {
+        maxMiddlePeriod = getDataItem(maxMiddleIndex).getPeriod();
+    }
+
+    if (minEndIndex >= 0) {
+        minEndPeriod = getDataItem(minEndIndex).getPeriod();
+    }
+
+    if (maxEndIndex >= 0) {
+        maxEndPeriod = getDataItem(maxEndIndex).getPeriod();
+    }
+
+    if (minStartPeriod == null || start < minStartPeriod.getStart().getTime()) {
+        minStartIndex = index;
+    }
+
+    if (maxStartPeriod == null || start > maxStartPeriod.getStart().getTime()) {
+        maxStartIndex = index;
+    }
+
+    if (minMiddlePeriod == null || middle < (minMiddlePeriod.getStart().getTime() + minMiddlePeriod.getEnd().getTime()) / 2) {
+        minMiddleIndex = index;
+    }
+
+    if (maxMiddlePeriod == null || middle > (maxMiddlePeriod.getStart().getTime() + maxMiddlePeriod.getEnd().getTime()) / 2) {
+        maxMiddleIndex = index;
+    }
+
+    if (minEndPeriod == null || end < minEndPeriod.getEnd().getTime()) {
+        minEndIndex = index;
+    }
+
+    if (maxEndPeriod == null || end > maxEndPeriod.getEnd().getTime()) {
+        maxEndIndex = index;
+    }
+}
     
     /**
      * Recalculates the bounds for the collection of items.