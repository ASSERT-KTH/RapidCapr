diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
index f81ff0a94..b33703cc0 100644
--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java
+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java
@@ -180,8 +180,10 @@ public class Fraction
         long a0 = (long)FastMath.floor(r0);
         if (a0 > overflow) {
             throw new FractionConversionException(value, a0, 1l);
+        } else if (a0 < -overflow) {
+            throw new FractionConversionException(value, a0, 1l);
         }
-
+        
         // check for (almost) integer arguments, which should not go
         // to iterations.
         if (FastMath.abs(a0 - value) < epsilon) {
@@ -204,12 +206,16 @@ public class Fraction
             ++n;
             double r1 = 1.0 / (r0 - a0);
             long a1 = (long)FastMath.floor(r1);
+
             p2 = (a1 * p1) + p0;
+            if (p2 > overflow || p2 < -overflow) {
+                throw new FractionConversionException(value, p2, q2);
+            }
             q2 = (a1 * q1) + q0;
-            if ((p2 > overflow) || (q2 > overflow)) {
+            if (q2 > overflow || q2 < -overflow) {
                 throw new FractionConversionException(value, p2, q2);
             }
-
+            
             double convergent = (double)p2 / (double)q2;
             if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
                 p0 = p1;
@@ -234,7 +240,6 @@ public class Fraction
             this.numerator = (int) p1;
             this.denominator = (int) q1;
         }
-
     }
 
     /**