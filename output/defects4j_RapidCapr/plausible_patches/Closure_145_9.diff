diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..f0f462e3 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,39 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    if (n.getType() == Token.LABEL) {
+        Node lastChild = n.getLastChild();
+
+        if (lastChild.getType() == Token.EMPTY) {
+            lastChild = lastChild.getNext();
+        }
+
+        if (lastChild.getType() == Token.BLOCK) {
+            int childCount = lastChild.getChildCount();
+
+            if (childCount == 1) {
+                return isOneExactlyFunctionOrDo(lastChild.getFirstChild());
+            } else {
+                return false;
+            }
+        } else if (lastChild.getType() == Token.FUNCTION || lastChild.getType() == Token.DO) {
+            return true;
+        } else {
+            return false;
+        }
+    } else if (n.getType() == Token.BLOCK) {
+        int childCount = n.getChildCount();
+
+        if (childCount == 1) {
+            return isOneExactlyFunctionOrDo(n.getFirstChild());
+        } else {
+            return false;
+        }
+    } else {
+        return n.getType() == Token.FUNCTION || n.getType() == Token.DO;
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike