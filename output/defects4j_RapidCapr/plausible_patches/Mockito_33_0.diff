diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 203413fc9..06f80f164 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -89,14 +89,26 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
         return !overloadedButSameArgs;
     }
 
-    public boolean hasSameMethod(Invocation candidate) {        
+    public boolean hasSameMethod(Invocation candidate) {
+        if (invocation == null || candidate == null) {
+            return false;
+        }
         //not using method.equals() for 1 good reason:
-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest
+        //sometimes java generates forwarding methods when generics are in play, see JavaGenericsForwardingMethodsTest
         Method m1 = invocation.getMethod();
         Method m2 = candidate.getMethod();
-        
-        	/* Avoid unnecessary cloning */
-        return m1.equals(m2);
+
+        /* Avoid unnecessary cloning */
+        if (m1.getName().equals(m2.getName())
+                && m1.getParameterTypes().length == m2.getParameterTypes().length) {
+            for (int i = 0; i < m1.getParameterTypes().length; i++) {
+                if (!m1.getParameterTypes()[i].equals(m2.getParameterTypes()[i])) {
+                    return false;
+                }
+            }
+            return true;
+        }
+        return false;
     }
     
     public Location getLocation() {
@@ -126,4 +138,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI
 
         return out;
     }
-}
\ No newline at end of file
+}