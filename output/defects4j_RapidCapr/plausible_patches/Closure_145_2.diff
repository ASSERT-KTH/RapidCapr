diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..27c949d9 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,30 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    switch (n.getType()) {
+        case Token.FUNCTION:
+        case Token.DO:
+            return true;
+        case Token.BLOCK:
+            int numChildren = 0;
+            for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {
+                if (!isOneExactlyFunctionOrDo(child)) {
+                    return false;
+                }
+                numChildren++;
+            }
+            return numChildren == 1;
+        case Token.LABEL:
+            Node labeledStatement = n.getFirstChild().getNext();
+            if (labeledStatement.getType() == Token.EMPTY) {
+                labeledStatement = labeledStatement.getNext();
+            }
+            return isOneExactlyFunctionOrDo(labeledStatement);
+        default:
+            return false;
+    }
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike