diff --git a/src/main/java/org/apache/commons/math3/util/MathArrays.java b/src/main/java/org/apache/commons/math3/util/MathArrays.java
index 325fd9430..d555b125b 100644
--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java
+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java
@@ -811,15 +811,20 @@ public class MathArrays {
      * @return <code>&Sigma;<sub>i</sub> a<sub>i</sub> b<sub>i</sub></code>.
      * @throws DimensionMismatchException if arrays dimensions don't match
      */
-    public static double linearCombination(final double[] a, final double[] b)
-        throws DimensionMismatchException {
-        final int len = a.length;
-        if (len != b.length) {
-            throw new DimensionMismatchException(len, b.length);
-        }
+public static double linearCombination(final double[] a, final double[] b) throws DimensionMismatchException {
+    final int len = a.length;
+    if (len != b.length) {
+        throw new DimensionMismatchException(len, b.length);
+    }
 
-            // Revert to scalar multiplication.
+    if (len == 0) {
+        return 0.0;
+    }
 
+    double result = 0.0;
+    if (len == 1) {
+        result = a[0] * b[0];
+    } else {
         final double[] prodHigh = new double[len];
         double prodLowSum = 0;
 
@@ -835,9 +840,9 @@ public class MathArrays {
             final double bLow = bi - bHigh;
             prodHigh[i] = ai * bi;
             final double prodLow = aLow * bLow - (((prodHigh[i] -
-                                                    aHigh * bHigh) -
-                                                   aLow * bHigh) -
-                                                  aHigh * bLow);
+                    aHigh * bHigh) -
+                    aLow * bHigh) -
+                    aHigh * bLow);
             prodLowSum += prodLow;
         }
 
@@ -857,20 +862,21 @@ public class MathArrays {
             sHighPrev = sHighCur;
         }
 
-        double result = sHighPrev + (prodLowSum + sLowSum);
+        result = sHighPrev + (prodLowSum + sLowSum);
+    }
 
-        if (Double.isNaN(result)) {
-            // either we have split infinite numbers or some coefficients were NaNs,
-            // just rely on the naive implementation and let IEEE754 handle this
-            result = 0;
-            for (int i = 0; i < len; ++i) {
-                result += a[i] * b[i];
-            }
+    if (Double.isNaN(result)) {
+        // either we have split infinite numbers or some coefficients were NaNs,
+        // just rely on the naive implementation and let IEEE754 handle this
+        result = 0;
+        for (int i = 0; i < len; ++i) {
+            result += a[i] * b[i];
         }
-
-        return result;
     }
 
+    return result;
+}
+
     /**
      * Compute a linear combination accurately.
      * <p>