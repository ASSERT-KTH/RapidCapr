diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..aa6eb339a 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,36 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type generic = field.getGenericType();
+    if (generic instanceof ParameterizedType) {
+        Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
+        if (actual instanceof Class) {
+            return (Class<?>) actual;
+        } else if (actual instanceof ParameterizedType) {
+            return getGenericType((ParameterizedType) actual);
+        }
+    }
+    return Object.class;
+}
+
+private Class<?> getGenericType(ParameterizedType parameterizedType) {
+    Type rawType = parameterizedType.getRawType();
+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+    Class<?>[] typeArguments = new Class<?>[actualTypeArguments.length];
+    for (int i = 0; i < actualTypeArguments.length; i++) {
+        if (actualTypeArguments[i] instanceof Class) {
+            typeArguments[i] = (Class<?>) actualTypeArguments[i];
+        } else if (actualTypeArguments[i] instanceof ParameterizedType) {
+            typeArguments[i] = getGenericType((ParameterizedType) actualTypeArguments[i]);
+        } else {
+            throw new IllegalArgumentException("Type argument should be either Class or ParameterizedType");
+        }
+    }
+    try {
+        return Class.forName(rawType.getTypeName());
+    } catch (ClassNotFoundException e) {
+        throw new RuntimeException(e);
+    }
+}
 }