diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index c3cb8695..dd62f127 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -32,37 +32,54 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
      * {@inheritDoc}
      */
     @Override
-    public int translate(CharSequence input, int index, Writer out) throws IOException {
-        // TODO: Protect from ArrayIndexOutOfBounds
-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {
-            int start = index + 2;
-            boolean isHex = false;
+public int translate(CharSequence input, int index, Writer out) throws IOException {
+    // TODO: Protect from ArrayIndexOutOfBounds
+    if(input == null || index < 0 || input.length() <= index+1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {
+        return 0;
+    }
 
-            char firstChar = input.charAt(start);
-            if(firstChar == 'x' || firstChar == 'X') {
-                start++;
-                isHex = true;
-            }
+    int start = index + 2;
+    boolean isHex = false;
 
-            int end = start;
-            while(input.charAt(end) != ';') {
-                end++;
-            }
+    if(input.length() <= start) {
+        return 0;
+    }
+    char firstChar = input.charAt(start);
+    if(firstChar == 'x' || firstChar == 'X') {
+        if(start + 1 >= input.length()) {
+            return 0;
+        }
+        start++;
+        isHex = true;
+    }
 
-            int entityValue;
-            try {
-                if(isHex) {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);
-                } else {
-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);
-                }
-            } catch(NumberFormatException nfe) {
-                return 0;
-            }
+    int end = start;
+    while(end < input.length() && input.charAt(end) != ';') {
+        end++;
+    }
 
-                out.write(entityValue);
-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;
-        }
+    if(end >= input.length()) {
+        return 0;
+    }
+
+    int entityValue = 0;
+    try {
+        entityValue = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);
+    } catch(NumberFormatException nfe) {
+        return 0;
+    }
+
+    if (entityValue < 0 || entityValue > Character.MAX_CODE_POINT) {
         return 0;
     }
+
+    if (Character.isSupplementaryCodePoint(entityValue)) {
+        out.write(Character.highSurrogate(entityValue));
+        out.write(Character.lowSurrogate(entityValue));
+    } else {
+        out.write((char) entityValue);
+    }
+
+    return end - index + 1;
+}
 }