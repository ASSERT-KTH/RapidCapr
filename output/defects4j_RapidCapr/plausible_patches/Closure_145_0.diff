diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 42c9ab38..9db16412 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -705,14 +705,22 @@ class CodeGenerator {
    * @return Whether the Node is a DO or FUNCTION (with or without
    * labels).
    */
-  private boolean isOneExactlyFunctionOrDo(Node n) {
-        // For labels with block children, we need to ensure that a
-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs 
-        // are skipped. 
-          // Either a empty statement or an block with more than one child,
-          // way it isn't a FUNCTION or DO.
-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);
-  }
+private boolean isOneExactlyFunctionOrDo(Node n) {
+    Node first = n.getFirstChild();
+    Node last = n.getLastChild();
+    // For labels with block children, check if the block contains only a single FUNCTION or DO node.
+    if (n.getType() == Token.LABEL && first != last && first.getNext() == last) {
+        return isOneExactlyFunctionOrDo(first.getNext());
+    }
+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {
+        return true;
+    }
+    // Check if the block contains only a single child node, and recursively examine the child.
+    if (n.getType() == Token.BLOCK && first != last && first.getNext() == last) {
+        return isOneExactlyFunctionOrDo(first.getNext());
+    }
+    return false;
+}
 
   /**
    * Adds a node at the left-hand side of an expression. Unlike