diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..26a94e3c 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,22 +203,29 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
+private boolean isSafeReplacement(Node node, Node replacement) {
+  if (!node.isGetProp()) {
+    // For simple names, just return true
+    return true;
+  }
 
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+  Node current = node;
+  while (current.isGetProp()) {
+    // For each getprop node, if the first child is a name assigned to replacement, it is not safe to replace
+    Node child = current.getFirstChild();
+    if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
       return false;
     }
-
-    return true;
+    // Otherwise, recursively check the child node
+    if (!isSafeReplacement(child, replacement)) {
+      return false;
+    }
+    current = child;
   }
 
+  return true;
+}
+
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */
@@ -241,4 +248,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}