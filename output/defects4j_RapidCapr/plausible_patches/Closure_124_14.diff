diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..0c629b1a 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,21 +203,26 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
-    // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
-      return false;
-    }
-
+private boolean isSafeReplacement(Node node, Node replacement) {
+  // No checks are needed for simple names.
+  if (node.isName()) {
     return true;
+  } else if (node.isGetProp()) {
+    Node child = node.getFirstChild();
+    while (child != null) {
+      // Recursively check each child node
+      if (!isSafeReplacement(child, replacement)) {
+        return false;
+      }
+      // Check if child is assigned to replacement
+      if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
+        return false;
+      }
+      child = child.getNext();
+    }
   }
+  return true;
+}
 
   /**
    * @return Whether name is assigned in the expression rooted at node.
@@ -241,4 +246,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}