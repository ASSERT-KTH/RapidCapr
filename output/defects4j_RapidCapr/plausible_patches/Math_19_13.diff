diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 51d1c6428..c66555e6f 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -537,6 +537,51 @@ public class CMAESOptimizer
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+if (hasFiniteBounds) {
+    boolean anyInfiniteLowerBound = false;
+    boolean anyInfiniteUpperBound = false;
+    boolean anyNonInfiniteBound = false;
+    for (int i = 0; i < lB.length; i++) {
+        if (Double.isInfinite(lB[i])) {
+            anyInfiniteLowerBound = true;
+        } else if (Double.isInfinite(uB[i])) {
+            anyInfiniteUpperBound = true;
+        } else {
+            anyNonInfiniteBound = true;
+        }
+    }
+
+    if (anyInfiniteLowerBound && anyInfiniteUpperBound) {
+        // If there is at least one finite bound, none can be infinite,
+        // because mixed cases are not supported by the current code.
+        throw new MathUnsupportedOperationException();
+    } else if (!anyNonInfiniteBound) {
+        // All bounds are infinite, the normalize method will not work.
+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);
+    } else if (anyInfiniteLowerBound || anyInfiniteUpperBound) {
+        double maxDouble = Double.MAX_VALUE / 2.0;
+        double boundaryRange = boundaries[1][0] - boundaries[0][0];
+
+        if (Double.isInfinite(boundaryRange)) {
+            throw new NumberIsTooLargeException(boundaryRange, 0, true);
+        }
+
+        if (boundaryRange > maxDouble) {
+            throw new NumberIsTooLargeException(boundaryRange, maxDouble, true);
+        }
+    } else {
+        // Convert API to internal handling of boundaries.
+        boundaries = new double[2][];
+        boundaries[0] = lB;
+        boundaries[1] = uB;
+
+        // Abort early if the normalization will overflow (cf. "encode" method).
+        double boundaryRange = boundaries[1][0] - boundaries[0][0];
+        if (Double.isInfinite(boundaryRange)) {
+            throw new NumberIsTooLargeException(boundaryRange, 0, true);
+        }
+    }
+}
             }
         } else {
             // Convert API to internal handling of boundaries.