diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..490b2b0bb 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,27 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type genericType = field.getGenericType();
+
+    // if generic type is not a parameterized type return Object.class
+    if (!(genericType instanceof ParameterizedType)) {
+        return Object.class;
+    }
+
+    Type actualType = ((ParameterizedType) genericType).getActualTypeArguments()[0];
+
+    // if the actual type is not a parameterized type or a class, return Object.class
+    if (!(actualType instanceof ParameterizedType) && !(actualType instanceof Class<?>)) {
+        return Object.class;
+    }
+
+    // if the actual type is a parameterized type, return the raw type of the actual type
+    if (actualType instanceof ParameterizedType) {
+        return (Class<?>) ((ParameterizedType) actualType).getRawType();
+    }
+
+    // if the actual type is a class, return the actual type
+    return (Class<?>) actualType;
+}
 }