diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 0f03e355..f7289d0f 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -203,22 +203,31 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
    * changed.
    * @return Whether the replacement can be made.
    */
-  private boolean isSafeReplacement(Node node, Node replacement) {
+// Returns true if it is safe to replace node with replacement
+private boolean isSafeReplacement(Node node, Node replacement) {
+  if (!node.isGetProp()) {
     // No checks are needed for simple names.
-    if (node.isName()) {
-      return true;
-    }
-    Preconditions.checkArgument(node.isGetProp());
-
-      node = node.getFirstChild();
-    if (node.isName()
-        && isNameAssignedTo(node.getString(), replacement)) {
+    return true;
+  }
+  
+  Node child = node.getFirstChild();
+  while (child != null) {
+    if (child.isGetProp()) {
+      // If the current child node is a getprop node, call the function recursively
+      if (!isSafeReplacement(child, replacement)) {
+        return false;
+      }
+    } else if (child.isName() && isNameAssignedTo(child.getString(), replacement)) {
+      // If the current child node is a name node assigned to the replacement node, return false
       return false;
     }
 
-    return true;
+    child = child.getNext();
   }
 
+  return true;
+}
+
   /**
    * @return Whether name is assigned in the expression rooted at node.
    */
@@ -241,4 +250,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {
 
     return false;
   }
-}
\ No newline at end of file
+}