diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 51d1c6428..88e4d5603 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -537,6 +537,39 @@ public class CMAESOptimizer
                 boundaries[1] = uB;
 
                 // Abort early if the normalization will overflow (cf. "encode" method).
+if (hasFiniteBounds) {
+    boolean hasInfiniteLowerBound = false;
+    boolean hasInfiniteUpperBound = false;
+    boolean hasNoInfiniteBounds = true;
+
+    for (int i = 0; i < lB.length; i++) {
+        if (Double.isInfinite(lB[i])) {
+            hasInfiniteLowerBound = true;
+            hasNoInfiniteBounds = false;
+        }
+        if (Double.isInfinite(uB[i])) {
+            hasInfiniteUpperBound = true;
+            hasNoInfiniteBounds = false;
+        }
+    }
+      
+    if (!hasNoInfiniteBounds) {
+        throw new NumberIsTooLargeException(Double.POSITIVE_INFINITY, 0, true);
+    } else if (hasInfiniteLowerBound || hasInfiniteUpperBound) {
+        throw new MathUnsupportedOperationException();
+    } else {
+        // Convert API to internal handling of boundaries.
+        boundaries = new double[2][];
+        boundaries[0] = lB;
+        boundaries[1] = uB;
+
+        // Abort early if the normalization will overflow (cf. "encode" method).
+        double boundaryRange = boundaries[1][0] - boundaries[0][0];
+        if (Double.isInfinite(boundaryRange)) {
+            throw new NumberIsTooLargeException(boundaryRange, 0, true);
+        }
+    }
+}
             }
         } else {
             // Convert API to internal handling of boundaries.