diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
index 15706811b..88a404a66 100644
--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java
@@ -174,17 +174,23 @@ public class MultivariateNormalDistribution
     }
 
     /** {@inheritDoc} */
-    public double density(final double[] vals) throws DimensionMismatchException {
-        final int dim = getDimension();
-        if (vals.length != dim) {
-            throw new DimensionMismatchException(vals.length, dim);
-        }
+public double density(final double[] vals) throws DimensionMismatchException {
+    final int dim = getDimension();
+    if (vals.length != dim) {
+        throw new DimensionMismatchException(dim, vals.length);
+    }
 
-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *
-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *
-            getExponentTerm(vals);
+    final double normalizationFactor = 1.0 / Math.sqrt(Math.pow(2 * Math.PI, dim) * Math.abs(covarianceMatrixDeterminant));
+    final double exponentTerm = getExponentTerm(vals);
+    final double result = normalizationFactor * exponentTerm;
+    
+    if (Double.isNaN(result) || Double.isInfinite(result)) {
+        return 0.0;
     }
 
+    return result;
+}
+
     /**
      * Gets the square root of each element on the diagonal of the covariance
      * matrix.