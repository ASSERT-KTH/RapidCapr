diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
index b51c088e..13b1460e 100644
--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java
@@ -110,32 +110,32 @@ class PeepholeOptimizationsPass
     compiler.removeChangeHandler(handler);
   }
 
-  private void traverse(Node node) {
-    // The goal here is to avoid retraversing
-    // the entire AST to catch newly created opportunities.
-    // So we track whether a "unit of code" has changed,
-    // and revisit immediately.
+private void traverse(Node node) {
     if (!shouldVisit(node)) {
-      return;
+        exitNode(node);
+        return;
     }
 
     int visits = 0;
-    do {
-      Node c = node.getFirstChild();
-      while(c != null) {
-        traverse(c);
+    Node c = node.getFirstChild();
+
+    while (c != null) {
         Node next = c.getNext();
+        traverse(c);
         c = next;
-      }
+    }
 
-      visit(node);
-      visits++;
+    do {
+        visit(node);
+        visits++;
+    } while (shouldRetraverse(node) && visits < 10000);
 
-      Preconditions.checkState(visits < 10000, "too many interations");
-    } while (shouldRetraverse(node));
+    if(visits >= 10000) {
+        throw new IllegalStateException("Too many iterations");
+    }
 
     exitNode(node);
-  }
+}
 
   private boolean shouldRetraverse(Node node) {
     if (node.getParent() != null && node.isFunction() || node.isScript()) {