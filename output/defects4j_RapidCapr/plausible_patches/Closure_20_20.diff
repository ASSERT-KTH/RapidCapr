diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index bfa17074..ce315619 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -205,29 +205,53 @@ class PeepholeSubstituteAlternateSyntax
     }
   }
 
-  private Node tryFoldSimpleFunctionCall(Node n) {
-    Preconditions.checkState(n.isCall());
+private Node tryFoldSimpleFunctionCall(Node n) {
+    if (!n.isCall()) {
+        return n;
+    }
     Node callTarget = n.getFirstChild();
-    if (callTarget != null && callTarget.isName() &&
-          callTarget.getString().equals("String")) {
-      // Fold String(a) to '' + (a) on immutable literals,
-      // which allows further optimizations
-      //
-      // We can't do this in the general case, because String(a) has
-      // slightly different semantics than '' + (a). See
-      // http://code.google.com/p/closure-compiler/issues/detail?id=759
-      Node value = callTarget.getNext();
-      if (value != null) {
-        Node addition = IR.add(
-            IR.string("").srcref(callTarget),
-            value.detachFromParent());
+    if (callTarget == null || !callTarget.isName() || !callTarget.getString().equals("String")) {
+        return n;
+    }
+    Node value = callTarget.getNext();
+    if (value == null || NodeUtil.mayHaveSideEffects(n) || NodeUtil.mayHaveSideEffects(value)) {
+        return n;
+    }
+    if (NodeUtil.isImmutableValue(value)) {
+        Node addition = IR.add(IR.string("").srcref(callTarget), value.detachFromParent());
         n.getParent().replaceChild(n, addition);
         reportCodeChange();
         return addition;
-      }
     }
     return n;
-  }
+}
+
+// Helper method to determine if a node is a primitive, null or a primitive wrapper object
+private boolean isPrimitiveOrWrapper(Node n) {
+    return n.isString() || n.isNumber() || n.isNull() ||
+           ((n.isQualifiedName() || n.isGetterDef()) && 
+            (n.getQualifiedName().equals("undefined") || 
+             n.getQualifiedName().equals("Boolean") ||
+             n.getQualifiedName().equals("Number")));
+}
+
+// Helper method to determine if a node is a primitive wrapper object constructor call
+private boolean isPrimitiveWrapperConstructorCall(Node n) {
+    if (!n.isCall()) {
+        return false;
+    }
+    Node callTarget = n.getFirstChild();
+    if (callTarget == null || !callTarget.isName()) {
+        return false;
+    }
+    String targetName = callTarget.getString();
+    return targetName.equals("Boolean") || targetName.equals("Number");
+}
+
+// Helper method to determine if a node is a primitive value or a primitive wrapper object
+private boolean isFoldable(Node n) {
+    return isPrimitiveOrWrapper(n) || isPrimitiveWrapperConstructorCall(n);
+}
 
   private Node tryFoldImmediateCallToBoundFunction(Node n) {
     // Rewriting "(fn.bind(a,b))()" to "fn.call(a,b)" makes it inlinable