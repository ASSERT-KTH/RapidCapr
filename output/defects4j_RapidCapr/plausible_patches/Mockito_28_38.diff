diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..227c5fec2 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,28 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+if (candidate != null) {
+    Class<?> fieldType = field.getType();
+    if (fieldType.isAssignableFrom(candidate.getClass())) {
+        field.setAccessible(true);
+        try {
+            Object oldValue = field.get(fieldInstance);
+            field.set(fieldInstance, candidate);
+            mocks.remove(candidate);
+            if (oldValue != null && mocks.contains(oldValue)) {
+                mocks.add(oldValue);
+            }
+        } catch(IllegalAccessException e) {
+            throw new RuntimeException("Unable to inject mock candidate", e);
+        }
+    } else {
+        throw new RuntimeException("Mock candidate " + candidate.getClass().getSimpleName() + " is not compatible with field type " + fieldType.getSimpleName());
+    }
+}
         }
     }
 