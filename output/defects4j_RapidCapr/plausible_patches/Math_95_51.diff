diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
index e19e97aef..669a9a0d0 100644
--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java
@@ -140,13 +140,27 @@ public class FDistributionImpl
      * @param p the desired probability for the critical value
      * @return initial domain value
      */
-    protected double getInitialDomain(double p) {
-        double ret;
-        double d = getDenominatorDegreesOfFreedom();
-            // use mean
-            ret = d / (d - 2.0);
-        return ret;
+protected double getInitialDomain(double p) {
+    double ret = 0.0;
+    double d = getDenominatorDegreesOfFreedom();
+    if(Double.isNaN(d) || d <= 2.0){
+        // Handle invalid degrees of freedom by setting the initial domain to a small positive value to avoid division by zero or NaN
+        ret = Double.MIN_VALUE;
+    }
+    else{
+        //Calculate mean
+        ret = d / (d - 2.0);
+        //Handle negative or zero initial domains by setting the initial domain to a small positive value
+        if(ret <= 0){
+            ret = Double.MIN_VALUE;
+        }
+        //Handle infinite or NaN means by setting the initial domain to a large value
+        else if(!Double.isFinite(ret)){
+            ret = Double.MAX_VALUE;
+        }
     }
+    return ret;
+}
     
     /**
      * Modify the numerator degrees of freedom.