diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java
index 7b877b1e2..4ea0bcde8 100644
--- a/src/org/mockito/internal/invocation/InvocationMatcher.java
+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java
@@ -120,7 +120,27 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF
     public void captureArgumentsFrom(Invocation invocation) {
         if (invocation.getMethod().isVarArgs()) {
             int indexOfVararg = invocation.getRawArguments().length - 1;
-            throw new UnsupportedOperationException();
+Object[] rawArgs = invocation.getRawArguments();
+if (rawArgs != null) {
+    for (int i = 0; i < rawArgs.length; i++) {
+        Object arg = rawArgs[i];
+        for (int j = 0; j < matchers.size(); j++) {
+            Matcher m = matchers.get(j);
+            if (m instanceof CapturesArguments) {
+                if (i == j && !(m instanceof VarargMatcher)) {
+                    ((CapturesArguments) m).captureFrom(arg);
+                } else if (i >= rawArgs.length - 1 && m instanceof VarargMatcher) {
+                    Object varArgs = rawArgs[rawArgs.length - 1];
+                    if (varArgs != null && varArgs.getClass().isArray()) {
+                        for (int k = 0; k < Array.getLength(varArgs); k++) {
+                            ((CapturesArguments) m).captureFrom(Array.get(varArgs, k));
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
 
         } else {
             for (int position = 0; position < matchers.size(); position++) {