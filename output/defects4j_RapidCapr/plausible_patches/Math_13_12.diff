diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
index 99d86e92a..c3e2a4883 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java
@@ -558,8 +558,57 @@ public abstract class AbstractLeastSquaresOptimizer
      * @param m Symmetric, positive-definite (weight) matrix.
      * @return the square-root of the weight matrix.
      */
-    private RealMatrix squareRoot(RealMatrix m) {
+private RealMatrix squareRoot(RealMatrix m) {
+    final int maxTries = 5;
+    int tries = 0;
+    boolean outOfMemory = false;
+    RealMatrix sqrt = null;
+
+    // loop until either the max number of tries is reached or the square root is successfully computed
+    while (tries < maxTries && sqrt == null) {
+        try {
             final EigenDecomposition dec = new EigenDecomposition(m);
-            return dec.getSquareRoot();
+            sqrt = dec.getSquareRoot();
+            // Round small values to zero to reduce memory usage
+            final double epsilon = 1e-16;
+            int dim = sqrt.getRowDimension();
+            for (int i = 0; i < dim; i++) {
+                for (int j = 0; j < dim; j++) {
+                    if (FastMath.abs(sqrt.getEntry(i, j)) < epsilon) {
+                        sqrt.setEntry(i, j, 0.0);
+                    }
+                }
+            }
+        } catch (OutOfMemoryError e) {
+            // if out of memory is encountered on the first try, set the outOfMemory flag and try a few more times
+            if (tries == 0) {
+                System.err.println("Out of memory error: " + e.getMessage() + ". Retrying up to " + maxTries + " more times.");
+                outOfMemory = true;
+            } else {
+                System.err.println("Out of memory error: " + e.getMessage() + ". Retrying...");
+            }
+            tries++;
+            // wait for a bit before trying again
+            try {
+                Thread.sleep(1000);
+            } catch (InterruptedException ex) {
+                Thread.currentThread().interrupt();
+            }
+        }
+    }
+
+    // if out of memory was initially encountered but we were still not able to compute the square root,
+    // log an error message and return the input matrix
+    if (outOfMemory && sqrt == null) {
+        System.err.println("Could not compute square root after " + maxTries + " attempts due to out-of-memory errors. Returning input matrix.");
+        return m;
+    }
+
+    // if the square root was not computed successfully, simply return the input matrix
+    if (sqrt == null) {
+        return m;
     }
+
+    return sqrt;
+}
 }