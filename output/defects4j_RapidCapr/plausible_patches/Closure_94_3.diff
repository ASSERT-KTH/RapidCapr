diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index a31b17a2..a93ab721 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -317,34 +317,74 @@ public final class NodeUtil {
    * @param val The value being assigned.
    * @param defines The list of names of existing defines.
    */
-  static boolean isValidDefineValue(Node val, Set<String> defines) {
+static boolean isValidDefineValue(Node val, Set<String> defines) {
     switch (val.getType()) {
-      case Token.STRING:
-      case Token.NUMBER:
-      case Token.TRUE:
-      case Token.FALSE:
-        return true;
+        case Token.STRING:
+        case Token.NUMBER:
+        case Token.TRUE:
+        case Token.FALSE:
+            return true;
 
-      // Binary operators are only valid if both children are valid.
-      case Token.BITAND:
-      case Token.BITNOT:
-      case Token.BITOR:
-      case Token.BITXOR:
+        // Binary operators are only valid if both children are valid.
+        case Token.BITAND:
+        case Token.BITNOT:
+        case Token.BITOR:
+        case Token.BITXOR:
+            Node first = val.getFirstChild();
+            Node last = val.getLastChild();
+            if (first == null || last == null) {
+                return false;
+            }
+            boolean left = isValidDefineValue(first, defines);
+            boolean right = isValidDefineValue(last, defines);
+            if (left && right) {
+                return true;
+            }
+            return false;
 
-      // Uniary operators are valid if the child is valid.
-      case Token.NOT:
-      case Token.NEG:
-        return isValidDefineValue(val.getFirstChild(), defines);
+        // Arithmetic operators
+        case Token.ADD:
+        case Token.SUB:
+        case Token.MUL:
+        case Token.DIV:
+        case Token.MOD:
+        case Token.LSH:
+        case Token.RSH:
+        case Token.URSH:
+        case Token.LT:
+        case Token.LE:
+        case Token.GT:
+        case Token.GE:
+        case Token.EQ:
+        case Token.NE:
+            Node lhs = val.getFirstChild();
+            if (lhs == null) {
+                return false;
+            } else if (!isValidDefineValue(lhs, defines)) {
+                return false;
+            }
+            Node rhs = lhs.getNext();
+            if (rhs == null) {
+                return false;
+            } else if (!isValidDefineValue(rhs, defines)) {
+                return false;
+            }
+            return true;
 
-      // Names are valid if and only if they are defines themselves.
-      case Token.NAME:
-      case Token.GETPROP:
-        if (val.isQualifiedName()) {
-          return defines.contains(val.getQualifiedName());
-        }
+        // Unary operators are valid if the child is valid.
+        case Token.NOT:
+        case Token.NEG:
+            return isValidDefineValue(val.getFirstChild(), defines);
+
+        // Names are valid if and only if they are defines themselves.
+        case Token.NAME:
+        case Token.GETPROP:
+            if (val.isQualifiedName()) {
+                return defines.contains(val.getQualifiedName());
+            }
     }
     return false;
-  }
+}
 
   /**
    * Returns whether this a BLOCK node with no children.