diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
index 8df302f9..a237b121 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java
@@ -141,6 +141,52 @@ public class FastDateParser implements DateParser, Serializable {
             currentFormatField= nextFormatField;
             currentStrategy= nextStrategy;
         }
+if (collector.isEmpty()) {
+    strategies = new Strategy[0];
+    parsePattern = null;
+    if (patternMatcher.hitEnd() && patternMatcher.regionStart() == patternMatcher.regionEnd()) {
+        currentFormatField = null;
+    } else {
+        throw new IllegalArgumentException("Invalid pattern");
+    }
+} else {
+    strategies = collector.toArray(new Strategy[collector.size()]);
+    parsePattern = Pattern.compile(regex.toString());
+    if (patternMatcher.hitEnd() && patternMatcher.regionStart() == patternMatcher.regionEnd()) {
+        currentFormatField = null;
+    } else {
+        currentFormatField = patternMatcher.group();
+        nextStrategy = getStrategy(currentFormatField);
+        if (currentStrategy.addRegex(this, regex)) {
+            collector.add(currentStrategy);
+        }
+        currentFormatField = null;
+        currentStrategy = nextStrategy;
+        for (;;) {
+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());
+            if (!patternMatcher.lookingAt()) {
+                nextStrategy = null;
+                break;
+            }
+            String nextFormatField = patternMatcher.group();
+            nextStrategy = getStrategy(nextFormatField);
+            if (currentStrategy.addRegex(this, regex)) {
+                collector.add(currentStrategy);
+            }
+            currentStrategy = nextStrategy;
+        }
+        if (!collector.isEmpty()) {
+            strategies = collector.toArray(new Strategy[collector.size()]);
+            parsePattern = Pattern.compile(regex.toString());
+        } else {
+            strategies = new Strategy[0];
+            parsePattern = null;
+        }
+        if (!patternMatcher.hitEnd() || patternMatcher.regionStart() != patternMatcher.regionEnd()) {
+            throw new IllegalArgumentException("Invalid pattern");
+        }
+    }
+}
         if(currentStrategy.addRegex(this, regex)) {
             collector.add(currentStrategy);
         }