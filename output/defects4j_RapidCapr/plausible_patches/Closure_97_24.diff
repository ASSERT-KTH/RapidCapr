diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index d6c194a3..c7438d86 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -695,7 +695,25 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
           // JavaScript handles zero shifts on signed numbers differently than
           // Java as an Java int can not represent the unsigned 32-bit number
           // where JavaScript can so use a long here.
-          result = lvalInt >>> rvalInt;
+if (n.getType() == Token.URSH) {
+    // if the left-hand operand is negative, use a long to represent the unsigned value
+    // otherwise the value shift is performed as a signed operation on an int.
+    if (lvalInt < 0) {
+        long lvalLong = lvalInt & 0x7FFFFFFF;
+        lvalLong |= 0x80000000L;
+
+        // and shift as unsigned
+        result = lvalLong >>> rvalInt;
+    } else {
+        // otherwise unsigned shift can be done in the int range
+        result = lvalInt >>> rvalInt;
+    }
+} else {
+    result = lvalInt >> rvalInt;
+    if (n.getType() == Token.LSH) {
+        result = lvalInt << rvalInt;
+    }
+}
           break;
         default:
           throw new AssertionError("Unknown shift operator: " +