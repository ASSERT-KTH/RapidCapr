diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java
index 889497e9..fa404f18 100644
--- a/src/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java
@@ -2950,19 +2950,75 @@ public class ArrayUtils {
      * @since 2.1
      */
     @SuppressWarnings("unchecked")
-    public static <T> T[] addAll(T[] array1, T... array2) {
-        if (array1 == null) {
-            return clone(array2);
-        } else if (array2 == null) {
-            return clone(array1);
+public static <T> T[] addAll(T[] array1, T... array2) {
+    if (array1 == null) {
+        return clone(array2);
+    } else if (array2 == null) {
+        return clone(array1);
+    }
+    final Class<?> type1 = array1.getClass().getComponentType();
+    final Class<?> type2 = array2.getClass().getComponentType();
+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {
+        if (type1.isPrimitive() ^ type2.isPrimitive()) {
+            throw new IllegalArgumentException("Cannot store elements of different types (primitive or object) in the same array");
+        } else {
+            throw new IllegalArgumentException("Cannot store elements of different object types in the same array");
+        }
+    }
+    int length1 = array1.length;
+    int length2 = array2.length;
+    T[] result;
+    if (type1.isPrimitive()) {
+        result = (T[]) Array.newInstance(type1, length1 + length2);
+        if (type1 == Boolean.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setBoolean(result, i + length1, (Boolean) array2[i]);
+            }
+        } else if (type1 == Byte.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setByte(result, i + length1, (Byte) array2[i]);
+            }
+        } else if (type1 == Character.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setChar(result, i + length1, (Character) array2[i]);
+            }
+        } else if (type1 == Double.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setDouble(result, i + length1, (Double) array2[i]);
+            }
+        } else if (type1 == Float.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setFloat(result, i + length1, (Float) array2[i]);
+            }
+        } else if (type1 == Integer.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setInt(result, i + length1, (Integer) array2[i]);
+            }
+        } else if (type1 == Long.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setLong(result, i + length1, (Long) array2[i]);
+            }
+        } else if (type1 == Short.TYPE) {
+            System.arraycopy(array1, 0, result, 0, length1);
+            for (int i = 0; i < length2; ++i) {
+                Array.setShort(result, i + length1, (Short) array2[i]);
+            }
         }
-        final Class<?> type1 = array1.getClass().getComponentType();
-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);
-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);
-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
-            // Check if problem is incompatible types
-        return joinedArray;
+    } else {
+        result = (T[]) Array.newInstance(type1, length1 + length2);
+
+        System.arraycopy(array1, 0, result, 0, length1);
+        System.arraycopy(array2, 0, result, length1, length2);
     }
+    return result;
+}
 
     /**
      * <p>Adds all the elements of the given arrays into a new array.</p>