diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java
index aa8c7bc9..382677a2 100644
--- a/src/com/google/javascript/rhino/jstype/JSType.java
+++ b/src/com/google/javascript/rhino/jstype/JSType.java
@@ -693,26 +693,31 @@ public abstract class JSType implements Serializable {
    *         element. The returned pair is never {@code null} even though its
    *         components may be {@code null}
    */
-  public TypePair getTypesUnderInequality(JSType that) {
+public TypePair getTypesUnderInequality(JSType that) {
     // unions types
     if (that instanceof UnionType) {
-      TypePair p = that.getTypesUnderInequality(this);
-      return new TypePair(p.typeB, p.typeA);
+        TypePair p = that.getTypesUnderInequality(this);
+        return new TypePair(p.typeB, p.typeA);
     }
 
     // other types
     switch (this.testForEquality(that)) {
-      case TRUE:
-        return new TypePair(null, null);
-
-      case FALSE:
-      case UNKNOWN:
-        return new TypePair(this, that);
+        case TRUE:
+            JSType restrictedA = this.restrictByNotNullOrUndefined();
+            JSType restrictedB = that.restrictByNotNullOrUndefined();
+            if (restrictedA.isEquivalentTo(restrictedB)) {
+                return new TypePair(restrictedA, restrictedB);
+            }
+            return new TypePair(restrictedA, restrictedB);
+
+        case FALSE:
+        case UNKNOWN:
+            return new TypePair(this, that);
     }
 
     // switch case is exhaustive
     throw new IllegalStateException();
-  }
+}
 
   /**
    * Computes the subset of {@code this} and {@code that} types under shallow