diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java
index 64bf1540f..69acc819e 100644
--- a/src/org/mockito/internal/util/reflection/GenericMaster.java
+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java
@@ -13,14 +13,34 @@ public class GenericMaster {
      * @param field
      * @return
      */
-    public Class getGenericType(Field field) {        
-        Type generic = field.getGenericType();
-        if (generic != null && generic instanceof ParameterizedType) {
-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];
-                return (Class) actual;
-                //in case of nested generics we don't go deep
-        }
-        
-        return Object.class;
-    }
+public Class<?> getGenericType(Field field) {
+    Type genericType = field.getGenericType();
+
+    // If generic type is not a parameterized type, return Object.class
+    if (!(genericType instanceof ParameterizedType)) {
+        return Object.class;
+    }
+
+    ParameterizedType parameterizedType = (ParameterizedType) genericType;
+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();
+
+    // If the actual type arguments are empty, return Object.class
+    if (actualTypeArguments.length == 0) {
+        return Object.class;
+    }
+
+    // Recursively get the raw type of the parameterized type
+    Type actualType = actualTypeArguments[0];
+    while (actualType instanceof ParameterizedType) {
+        actualType = ((ParameterizedType) actualType).getRawType();
+    }
+
+    // If the actual type is a class, return it
+    if (actualType instanceof Class<?>) {
+        return (Class<?>) actualType;
+    }
+
+    // Otherwise, return Object.class
+    return Object.class;
+}
 }