diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
index 9061925d..7e724986 100644
--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java
+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java
@@ -335,18 +335,22 @@ class InlineObjectLiterals implements CompilerPass {
         // Join these using COMMA.  A COMMA node must have 2 children, so we
         // create a tree. In the tree the first child be the COMMA to match
         // the parser, otherwise tree equality tests fail.
-        nodes = Lists.reverse(nodes);
-        replacement = new Node(Token.COMMA);
-        Node cur = replacement;
-        int i;
-        for (i = 0; i < nodes.size() - 2; i++) {
+        if (nodes.size() > 1) {
+          nodes = Lists.reverse(nodes);
+          replacement = new Node(Token.COMMA);
+          Node cur = replacement;
+          int i;
+          for (i = 0; i < nodes.size() - 2; i++) {
+            cur.addChildToFront(nodes.get(i));
+            Node t = new Node(Token.COMMA);
+            cur.addChildToFront(t);
+            cur = t;
+          }
           cur.addChildToFront(nodes.get(i));
-          Node t = new Node(Token.COMMA);
-          cur.addChildToFront(t);
-          cur = t;
+          cur.addChildToFront(nodes.get(i + 1));
+        } else {
+          replacement = nodes.get(0);
         }
-        cur.addChildToFront(nodes.get(i));
-        cur.addChildToFront(nodes.get(i + 1));
 
       Node replace = ref.getParent();
       replacement.copyInformationFromForTree(replace);