diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
index 213ebf351..5b7b7c4ec 100644
--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java
@@ -88,9 +88,25 @@ public class DefaultInjectionEngine {
         }
     }
 
+
     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {
         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {
-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();
+if (candidate != null && field.getType().isAssignableFrom(candidate.getClass())) {
+    try {
+        field.setAccessible(true);
+        field.set(fieldInstance, candidate);
+        if(mocks.contains(candidate)) {
+            mocks.remove(candidate);
+        }
+    } catch (IllegalAccessException e) {
+        throw new RuntimeException("Unable to inject mock candidate", e);
+    }
+} else if (candidate != null) {
+    String errorMsg = String.format("Unable to assign mock candidate of type %s to field of type %s",
+                                    candidate.getClass().getSimpleName(), field.getType().getSimpleName());
+    throw new RuntimeException(errorMsg);
+}
         }
     }
 