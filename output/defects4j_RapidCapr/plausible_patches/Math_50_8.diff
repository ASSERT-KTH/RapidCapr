diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
index e47d98204..98c13703c 100644
--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java
@@ -184,10 +184,50 @@ public abstract class BaseSecantSolver
                     break;
                 case REGULA_FALSI:
                     // Nothing.
-                    if (x == x1) {
-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));
-                        f0 = computeObjectiveValue(x0);
-                    }
+if (x == x1) {
+    double delta;
+    if (FastMath.abs(x1) > FastMath.abs(x0)) {
+        delta = rtol * FastMath.abs(x1) + atol;
+        inverted = !inverted;
+    } else {
+        delta = rtol * FastMath.abs(x0) + atol;
+    }
+    if (inverted) {
+        x0 = FastMath.max(x0 - delta, getMin());
+        f0 = computeObjectiveValue(x0);
+        if (f1 * f0 >= 0.0) {
+            f1 *= 0.5;
+        }
+    } else {
+        x1 = FastMath.min(x1 + delta, getMax());
+        f1 = computeObjectiveValue(x1);
+        if (f1 * f0 >= 0.0) {
+            f0 *= 0.5;
+        }
+    }
+} else {
+    if (f1 * fx < 0) {
+        x0 = x1;
+        f0 = f1;
+        inverted = !inverted;
+    } else {
+        switch (method) {
+        case ILLINOIS:
+            f0 *= 0.5;
+            break;
+        case PEGASUS:
+            f0 *= f1 / (f1 + fx);
+            break;
+        case REGULA_FALSI:
+            // Nothing.
+            break;
+        default:
+            throw new MathInternalError();
+        }
+    }
+    x1 = x;
+    f1 = fx;
+}
                     break;
                 default:
                     // Should never happen.