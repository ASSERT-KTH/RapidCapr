{
    "patch": "    public double solve(double min, double max) throws MaxIterationsExceededException,\n           FunctionEvaluationException {\n\n        clearResult();\n        verifyInterval(min, max);\n\n        final int maximumIterations = getMaximalIterationCount();\n        double relativeAccuracy = getRelativeAccuracy();\n        final double functionValueAccuracy = getFunctionValueAccuracy();\n\n        double ret = Double.NaN;\n\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n\n        // Verify bracketing\n        double sign = yMin * yMax;\n        if (sign > 0.0) {\n            if (FastMath.abs(yMin) <= functionValueAccuracy) {\n                ret = min;\n            } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n                ret = max;\n            } else {\n                throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n            }\n        } else if (sign < 0.0) {\n            //initializing the solver\n            double xMax = yMax > 0 ? min : max;\n            double xMin = yMin < 0 ? min : max;\n            double xMid = xMin + 0.5 * (xMax - xMin);\n            double yMid = f.value(xMid);\n            double oldDelta = max - min;\n            double delta = xMax - xMin;\n\n            // Looping\n            for (int i = 0; i < maximumIterations; ++i) {\n\n                if (FastMath.abs(yMid) <= functionValueAccuracy) {\n                    ret = xMid;\n                    break;\n                }\n\n                if (FastMath.abs(oldDelta) < (relativeAccuracy * FastMath.abs(xMid))) {\n                    if (ret == Double.NaN && FastMath.abs(yMin) > FastMath.abs(yMax)) {\n                        ret = min;\n                    } else if (ret == Double.NaN) {\n                        ret = max;\n                    }\n                    return ret;\n                }\n\n                // Bisect or interpolation?\n                if (FastMath.abs(delta) >= (relativeAccuracy * FastMath.abs(xMid))) {\n\n                    double x3 = xMid;\n                    double y3 = yMid;\n                    double delta2 = delta;\n                    delta = oldDelta;\n                    // Use interpolation\n                    double z;\n                    if (yMin != yMax) {\n                        // FIXME: why not yMid or (yMax + yMin) > 0.0 ?\n                        z = xMid - ((yMid * (xMax - xMid)) / (yMax - yMid)) + ((yMid * (xMid - xMin)) / (yMin - yMid));\n                    } else {\n                        // Linear interpolation fallback\n                        z = 0.5 * (xMin + xMax);\n                    }\n                    double y = f.value(z);\n                    ++evaluations;\n                    xMid = z;\n                    yMid = y;\n\n                    // Sign change?\n                    yMin = f.value(xMin);\n                    ++evaluations;\n                    if (yMin * yMid <= 0.0) {\n                        xMax = xMid;\n                        yMax = yMid;\n                        delta = xMax - xMin;\n                    } else {\n                        yMax = f.value(xMax);\n                        ++evaluations;\n                        if (yMax * yMid <= 0.0) {\n                            xMin = xMid;\n                            yMin = yMid;\n                            delta = xMax - xMin;\n                        } else {\n                            // No sign change -- try again with a smaller bracket\n                            oldDelta = delta2;\n                            delta = 0.5 * (xMax - xMin);\n                            xMid = xMin + delta;\n                            yMid = f.value(xMid);\n                            ++evaluations;\n                        }\n                    }\n                } else {\n                    // Bisector\n                    oldDelta = delta;\n                    delta = xMax - xMin;\n                    xMid = xMin + 0.5 * delta;\n                    yMid = f.value(xMid);\n                    ++evaluations;\n                }\n            }\n            throw new MaxIterationsExceededException(maximumIterations);\n        } else {\n            if (FastMath.abs(yMin) <= functionValueAccuracy) {\n                ret = min;\n            } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n                ret = max;\n            }\n        }\n\n        if (ret == Double.NaN) {\n            throw new NoBracketingException(min, max, yMin, yMax);\n        }\n\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..37262d326 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,30 +122,122 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n+    public double solve(double min, double max) throws MaxIterationsExceededException,\n+           FunctionEvaluationException {\n+\n         clearResult();\n         verifyInterval(min, max);\n-        \n+\n+        final int maximumIterations = getMaximalIterationCount();\n+        double relativeAccuracy = getRelativeAccuracy();\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+\n         double ret = Double.NaN;\n-        \n+\n         double yMin = f.value(min);\n         double yMax = f.value(max);\n-        \n+\n         // Verify bracketing\n         double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+        if (sign > 0.0) {\n+            if (FastMath.abs(yMin) <= functionValueAccuracy) {\n+                ret = min;\n+            } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n+                ret = max;\n+            } else {\n+                throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            }\n+        } else if (sign < 0.0) {\n+            //initializing the solver\n+            double xMax = yMax > 0 ? min : max;\n+            double xMin = yMin < 0 ? min : max;\n+            double xMid = xMin + 0.5 * (xMax - xMin);\n+            double yMid = f.value(xMid);\n+            double oldDelta = max - min;\n+            double delta = xMax - xMin;\n+\n+            // Looping\n+            for (int i = 0; i < maximumIterations; ++i) {\n+\n+                if (FastMath.abs(yMid) <= functionValueAccuracy) {\n+                    ret = xMid;\n+                    break;\n+                }\n+\n+                if (FastMath.abs(oldDelta) < (relativeAccuracy * FastMath.abs(xMid))) {\n+                    if (ret == Double.NaN && FastMath.abs(yMin) > FastMath.abs(yMax)) {\n+                        ret = min;\n+                    } else if (ret == Double.NaN) {\n+                        ret = max;\n+                    }\n+                    return ret;\n+                }\n+\n+                // Bisect or interpolation?\n+                if (FastMath.abs(delta) >= (relativeAccuracy * FastMath.abs(xMid))) {\n+\n+                    double x3 = xMid;\n+                    double y3 = yMid;\n+                    double delta2 = delta;\n+                    delta = oldDelta;\n+                    // Use interpolation\n+                    double z;\n+                    if (yMin != yMax) {\n+                        // FIXME: why not yMid or (yMax + yMin) > 0.0 ?\n+                        z = xMid - ((yMid * (xMax - xMid)) / (yMax - yMid)) + ((yMid * (xMid - xMin)) / (yMin - yMid));\n+                    } else {\n+                        // Linear interpolation fallback\n+                        z = 0.5 * (xMin + xMax);\n+                    }\n+                    double y = f.value(z);\n+                    ++evaluations;\n+                    xMid = z;\n+                    yMid = y;\n+\n+                    // Sign change?\n+                    yMin = f.value(xMin);\n+                    ++evaluations;\n+                    if (yMin * yMid <= 0.0) {\n+                        xMax = xMid;\n+                        yMax = yMid;\n+                        delta = xMax - xMin;\n+                    } else {\n+                        yMax = f.value(xMax);\n+                        ++evaluations;\n+                        if (yMax * yMid <= 0.0) {\n+                            xMin = xMid;\n+                            yMin = yMid;\n+                            delta = xMax - xMin;\n+                        } else {\n+                            // No sign change -- try again with a smaller bracket\n+                            oldDelta = delta2;\n+                            delta = 0.5 * (xMax - xMin);\n+                            xMid = xMin + delta;\n+                            yMid = f.value(xMid);\n+                            ++evaluations;\n+                        }\n+                    }\n+                } else {\n+                    // Bisector\n+                    oldDelta = delta;\n+                    delta = xMax - xMin;\n+                    xMid = xMin + 0.5 * delta;\n+                    yMid = f.value(xMid);\n+                    ++evaluations;\n+                }\n+            }\n+            throw new MaxIterationsExceededException(maximumIterations);\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            if (FastMath.abs(yMin) <= functionValueAccuracy) {\n+                ret = min;\n+            } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n+                ret = max;\n+            }\n+        }\n+\n+        if (ret == Double.NaN) {\n+            throw new NoBracketingException(min, max, yMin, yMax);\n         }\n \n         return ret;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}