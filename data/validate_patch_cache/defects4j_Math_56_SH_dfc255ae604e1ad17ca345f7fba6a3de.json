{
    "patch": "        int idx = 1;\n        count += uniCounterOffset[last];\n        while (count <= index) {\n            count += idx + uniCounterOffset[last - idx];\n            ++idx;\n        }\n        --idx;\n        count -= idx + uniCounterOffset[last - idx];\n        for (int i = 0; i < last; ++i) {\n            indices[i] = count % uniCounterOffset[i];\n            count /= uniCounterOffset[i];\n        }\n        indices[last] = idx;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..f70d5c81f 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,11 +235,17 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n-            count += idx;\n+        count += uniCounterOffset[last];\n+        while (count <= index) {\n+            count += idx + uniCounterOffset[last - idx];\n             ++idx;\n         }\n         --idx;\n+        count -= idx + uniCounterOffset[last - idx];\n+        for (int i = 0; i < last; ++i) {\n+            indices[i] = count % uniCounterOffset[i];\n+            count /= uniCounterOffset[i];\n+        }\n         indices[last] = idx;\n \n         return indices;",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][2] expected:<0> but was:<1>",
    "test_result": "FAIL"
}