{
    "patch": "  private boolean isRecursiveRecordType() {\n    return isRecordType() && getPropertyType(\"loop\").equals(this);\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations, Set<ObjectType> visited) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty-print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = new TreeSet<>();\n      for (ObjectType current = this;\n          current != null && !current.isNativeObjectType() &&\n              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n          current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      boolean isRecursiveRecordType = isRecursiveRecordType();\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        if (isRecursiveRecordType && property.equals(\"loop\")) {\n          sb.append(\"{...}\");\n          break;\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n\n        ObjectType propertyType = getPropertyType(property);\n        if (visited.contains(propertyType)) {\n          sb.append(\"...\");\n        } else {\n          visited.add(propertyType);\n          sb.append(propertyType.toStringHelper(forAnnotations, visited));\n        }\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..c652d124 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,27 +345,29 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n+  private boolean isRecursiveRecordType() {\n+    return isRecordType() && getPropertyType(\"loop\").equals(this);\n   }\n \n   @Override\n-  String toStringHelper(boolean forAnnotations) {\n+  String toStringHelper(boolean forAnnotations, Set<ObjectType> visited) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n     } else if (prettyPrint) {\n-      // Don't pretty print recursively.\n+      // Don't pretty-print recursively.\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n-      Set<String> propertyNames = Sets.newTreeSet();\n+      Set<String> propertyNames = new TreeSet<>();\n       for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n+          current != null && !current.isNativeObjectType() &&\n+              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+          current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      boolean isRecursiveRecordType = isRecursiveRecordType();\n+\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n@@ -375,9 +377,21 @@ class PrototypeObjectType extends ObjectType {\n           sb.append(\", \");\n         }\n \n+        if (isRecursiveRecordType && property.equals(\"loop\")) {\n+          sb.append(\"{...}\");\n+          break;\n+        }\n+\n         sb.append(property);\n         sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n+\n+        ObjectType propertyType = getPropertyType(property);\n+        if (visited.contains(propertyType)) {\n+          sb.append(\"...\");\n+        } else {\n+          visited.add(propertyType);\n+          sb.append(propertyType.toStringHelper(forAnnotations, visited));\n+        }\n \n         ++i;\n         if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}