{
    "patch": "/**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (!narrowed.isBottom() && type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }\n  \n  private void inferPropertiesDeclaredInBlock(ObjectType constraintObj,\n      ObjectType objType) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeInferred(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n\n  private void inferPropertiesDeclaredInConstraints(ObjectType constraintObj,\n      ObjectType objType) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n\n  private void inferDeclaredProperties(Block b,\n      ObjectType constraintObj, ObjectType objType) {\n    if (constraintObj.isRecordType() && objType != null) {\n      inferPropertiesDeclaredInBlock(constraintObj, objType);\n    }\n    for (Node stmt = b.getFirstChild(); stmt != null;\n         stmt = stmt.getNext()) {\n      ObjectType stmtObj = ObjectType.cast(stmt.getJSType());\n      if (stmt.isVar()) {\n        for (Node child : stmt.children()) {\n          String name = child.getString();\n          JSType childType = stmtObj.getPropertyType(name);\n          if (childType == null) {\n            childType = getNativeType(UNKNOWN_TYPE);\n          }\n          if (!objType.isPropertyTypeDeclared(name)) {\n            objType.defineDeclaredProperty(name, childType, child);\n          }\n        }\n      } else if (stmt.isExprResult()) {\n        Node expr = stmt.getFirstChild();\n        if (expr.isAssign()) {\n          Node lvalue = expr.getFirstChild();\n          Node rvalue = expr.getLastChild();\n          String name = lvalue.getQualifiedName();\n          if (name != null) {\n            JSType rvalueType = rvalue.getJSType();\n            JSType rvalueNarrowed = rvalueType.restrictByNotNullOrUndefined();\n            if (!rvalueNarrowed.isBottom()) {\n              if (!objType.isPropertyTypeInferred(name)\n                  && !objType.isPropertyTypeDeclared(name)) {\n                objType.defineInferredProperty(name, rvalueNarrowed, rvalue);\n              } else {\n                JSType declaredType = objType.getPropertyType(\n                    name);\n                if (declaredType == null) {\n                  declaredType = objType.getLeastSupertype(\n                      rvalueNarrowed);\n                  objType.defineInferredProperty(name,\n                      declaredType, rvalue);\n                } else {\n                  JSType meetType =\n                      rvalueNarrowed.getGreatestSubtype(\n                          declaredType);\n                  if (meetType.isUnknownType()) {\n                    meetType = objType.getLeastSupertype(\n                        rvalueNarrowed);\n                    objType.defineInferredProperty(name,\n                        meetType, rvalue);\n                  } else if (meetType.equals(declaredType)) {\n                    // We're already inferring this property, so we don't have to do anything.\n                    // inferDeclaredProperties(b, constraintObj, objType, meetType, rvalue);\n                  } else {\n                    // Multiple types for this property, so we're not inferring anything.\n                    //  narrowDeclaredProperty(meetType, declaredType, name, rvalue);\n                  }\n                }\n              }\n            }\n          }\n        } else if (expr.isCall()) {\n          Node callee = expr.getFirstChild();\n          JSType calleeType = callee.getJSType();\n          if (calleeType != null &&\n              !(calleeType.isUnknownType()) &&\n              calleeType.isFunctionType()) {\n            FunctionType functionType = calleeType.toMaybeFunctionType();\n            if (functionType.hasInstanceType()) {\n              FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n              JSType returnType = functionType.getReturnType();\n              JSType instanceType =\n                  functionType.getThisType().autobox();\n              builder.addRetType(returnType);\n              builder.addReceiverType(instanceType);\n              if (!objType.isPropertyTypeInferred(\"constructor\")) {\n                objType.defineInferredProperty(\"constructor\",\n                    builder.buildObjectType());\n              } else {\n                JSType declType = objType.getPropertyType(\"constructor\");\n                if (declType == null ||\n                    declType.equals(getNativeType(OBJECT_TYPE))) {\n                  objType.defineDeclaredProperty(\"constructor\",\n                      builder.buildObjectType(), callee);\n                }\n              }\n            }\n          }\n        }\n      } else if (stmt.isClass()) {\n        if (stmt.getJSType() != null &&\n            !(stmt.getJSType().isUnknownType()) &&\n            stmt.getJSType().isFunctionType()) {\n          FunctionType classType =\n              stmt.getJSType().toMaybeFunctionType();\n          if (classType.hasInstanceType()) {\n            FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n            JSType instanceType =\n                classType.getThisType().autobox();\n            builder.addReceiverType(instanceType);\n            if (!objType.isPropertyTypeInferred(\"constructor\")) {\n              objType.defineInferredProperty(\"constructor\",\n                  builder.buildObjectType());\n            } else {\n              JSType declType = objType.getPropertyType(\"constructor\");\n              if (declType == null || declType.equals(\n                  getNativeType(OBJECT_TYPE))) {\n                objType.defineDeclaredProperty(\"constructor\",\n                    builder.buildObjectType(), stmt.getFirstChild());\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // There might be inferred properties in the constraint type that haven't\n    // been declared yet; we add them to the inferred properties of the object\n    if (constraintObj.isRecordType() && objType != null) {\n      inferPropertiesDeclaredInConstraints(constraintObj, objType);\n    }\n  }\n\n  /**\n   * Completes the JSDocInfo for all class constructors that have a @template parameter.\n   * Returns true if any new JSDocInfo was added.\n   */\n  private boolean completeConstructorsDefinitionsWithTemplates(\n      TypedScope scope, ObjectType objType) {\n    JSDocInfo ctorDoc = objType.getOwnPropertyJSDocInfo(\"constructor\");\n    if (ctorDoc == null) {\n      return false;\n    }\n    boolean added = false;\n    List<String> templateTypeNames = ctorDoc.getTemplateTypeNames();\n    if (!templateTypeNames.isEmpty()) {\n      List<JSType> typeValues = new ArrayList<>();\n      int templateCount = templateTypeNames.size();\n      for (int i = 0; i < templateCount; i++) {\n        String templateTypeName = templateTypeNames.get(i);\n        JSType typeValue = ctorDoc.getTemplateTypeValue(templateTypeName);\n        if (typeValue != null) {\n          typeValues.add(typeValue);\n        } else {\n          typeValues.add(getNativeType(UNKNOWN_TYPE));\n        }\n      }\n      FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n      for (Node child = scope.getRootNode().getFirstChild();\n           child != null;\n           child = child.getNext()) {\n        JSDocInfo info = child.getJSDocInfo();\n        if (info != null && info.isConstructorOrInterface()) {\n          Node fnNode = child.getFirstChild();\n          FunctionType fnType = fnNode.getJSType().toMaybeFunctionType();\n          if (fnType == null || !fnType.isConstructor()) {\n            continue;\n          }\n          if (!fnType.hasInstanceType()) {\n            // This can sometimes happen as a result of bad code. Callers of the constructor who\n            // don't use 'new' or a type annotation will end up doing regular function calls with\n            // all of the same pitfalls and weirdness that result from misusing constructor\n            // functions in general.\n            continue;\n          }\n          JSType instanceType =\n              fnType.getInstanceType().instantiateGenerics(\n                  registry.createJSTypeWithNullability(\n                      getNativeType(UNKNOWN_TYPE), true));\n          // The JSDocInfo's template types correspond to the constructor's\n          // type parameters, so we run through the list of the type's\n          // own type parameters, create a type substitution map that\n          // associates the template type name with the type parameter,\n          // and then infer types for any properties that depend on those types.\n          int index = 0;\n          for (String key : objType.getTemplateTypeMap().nativeMap().keySet()) {\n            if (index < templateCount) {\n              JSType variable = typeValues.get(index++);\n              instanceType = instanceType.substituteGenerics(ImmutableMap.of(\n                  templateTypeNames.get(index - 1), variable));\n            }\n          }\n          instanceType = instanceType.autobox();\n          if (objType.isDefined()) {\n            constructorInvokersMap.put(objType.getConstructorFunction(), objType.getConstructorFunction());\n          }\n          added |= fnNode.getJSDocInfo().recordConstructorType(instanceType);\n        }\n      }\n    }\n    return added;\n  }\n  \n  private void inferInGlobalScope(ObjectType objectType) {\n    TypedScope scope = getTypedScope();\n    // Make a first pass to bring in names from the built-in types, since they may be used in\n    // the user's code in a way that's not detectable by the AST alone.\n    GlobalTypeInfo globalTypeInfo = compiler.getGlobalTypeInfo();\n    if (globalTypeInfo != null) {\n      ObjectType globalType = globalTypeInfo.getGlobalType();\n      if (objectType != globalType) {\n        objectType.addMissingPropertiesFrom(globalType.getImplicitPrototype());\n      }\n    }\n    if (objectType.hasClassType()) {\n      // Add type definitions to prototype hierarchy.\n      objectType.defineDeclaredProperty(Property.MAX_LENGTH,\n          getNativeType(NUMBER_TYPE));\n\n      List<String> classTemplateTypeNames =\n          objectType.getTemplateTypeMap().keySet().asList();\n      objectType.defineDeclaredProperty(\n          \"prototype\", getPrototypeType(classTemplateTypeNames), null);\n    }\n    // We declare fun/proto properties prototypes because\n    // `new fun()['proto'] == fun.prototype` stands for every function, while\n    // `__proto__ == Function.prototype` holds only for declared functions.\n    objectType.defineDeclaredProperty(\n        \"prototype\", getTopObject(getNativeType(OBJECT_TYPE)), null);\n\n    for (Node child: scope.getRootNode().children()) {\n      if (!NodeUtil.isParsedClosureCall(child)) {\n        inferDeclaration(child, scope, objectType, true);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..78c89e12 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,43 +1111,275 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n+/**\n+   * If we access a property of a symbol, then that symbol is not\n+   * null or undefined.\n+   */\n+  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (!narrowed.isBottom() && type != narrowed) {\n+        scope = narrowScope(scope, n, narrowed);\n+      }\n+    }\n+    return scope;\n+  }\n+  \n+  private void inferPropertiesDeclaredInBlock(ObjectType constraintObj,\n+      ObjectType objType) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeInferred(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!objType.hasProperty(prop)) {\n+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+  }\n+\n+  private void inferPropertiesDeclaredInConstraints(ObjectType constraintObj,\n+      ObjectType objType) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!objType.hasProperty(prop)) {\n+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n+      }\n     }\n+  }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+  private void inferDeclaredProperties(Block b,\n+      ObjectType constraintObj, ObjectType objType) {\n+    if (constraintObj.isRecordType() && objType != null) {\n+      inferPropertiesDeclaredInBlock(constraintObj, objType);\n+    }\n+    for (Node stmt = b.getFirstChild(); stmt != null;\n+         stmt = stmt.getNext()) {\n+      ObjectType stmtObj = ObjectType.cast(stmt.getJSType());\n+      if (stmt.isVar()) {\n+        for (Node child : stmt.children()) {\n+          String name = child.getString();\n+          JSType childType = stmtObj.getPropertyType(name);\n+          if (childType == null) {\n+            childType = getNativeType(UNKNOWN_TYPE);\n+          }\n+          if (!objType.isPropertyTypeDeclared(name)) {\n+            objType.defineDeclaredProperty(name, childType, child);\n+          }\n+        }\n+      } else if (stmt.isExprResult()) {\n+        Node expr = stmt.getFirstChild();\n+        if (expr.isAssign()) {\n+          Node lvalue = expr.getFirstChild();\n+          Node rvalue = expr.getLastChild();\n+          String name = lvalue.getQualifiedName();\n+          if (name != null) {\n+            JSType rvalueType = rvalue.getJSType();\n+            JSType rvalueNarrowed = rvalueType.restrictByNotNullOrUndefined();\n+            if (!rvalueNarrowed.isBottom()) {\n+              if (!objType.isPropertyTypeInferred(name)\n+                  && !objType.isPropertyTypeDeclared(name)) {\n+                objType.defineInferredProperty(name, rvalueNarrowed, rvalue);\n+              } else {\n+                JSType declaredType = objType.getPropertyType(\n+                    name);\n+                if (declaredType == null) {\n+                  declaredType = objType.getLeastSupertype(\n+                      rvalueNarrowed);\n+                  objType.defineInferredProperty(name,\n+                      declaredType, rvalue);\n+                } else {\n+                  JSType meetType =\n+                      rvalueNarrowed.getGreatestSubtype(\n+                          declaredType);\n+                  if (meetType.isUnknownType()) {\n+                    meetType = objType.getLeastSupertype(\n+                        rvalueNarrowed);\n+                    objType.defineInferredProperty(name,\n+                        meetType, rvalue);\n+                  } else if (meetType.equals(declaredType)) {\n+                    // We're already inferring this property, so we don't have to do anything.\n+                    // inferDeclaredProperties(b, constraintObj, objType, meetType, rvalue);\n+                  } else {\n+                    // Multiple types for this property, so we're not inferring anything.\n+                    //  narrowDeclaredProperty(meetType, declaredType, name, rvalue);\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        } else if (expr.isCall()) {\n+          Node callee = expr.getFirstChild();\n+          JSType calleeType = callee.getJSType();\n+          if (calleeType != null &&\n+              !(calleeType.isUnknownType()) &&\n+              calleeType.isFunctionType()) {\n+            FunctionType functionType = calleeType.toMaybeFunctionType();\n+            if (functionType.hasInstanceType()) {\n+              FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n+              JSType returnType = functionType.getReturnType();\n+              JSType instanceType =\n+                  functionType.getThisType().autobox();\n+              builder.addRetType(returnType);\n+              builder.addReceiverType(instanceType);\n+              if (!objType.isPropertyTypeInferred(\"constructor\")) {\n+                objType.defineInferredProperty(\"constructor\",\n+                    builder.buildObjectType());\n+              } else {\n+                JSType declType = objType.getPropertyType(\"constructor\");\n+                if (declType == null ||\n+                    declType.equals(getNativeType(OBJECT_TYPE))) {\n+                  objType.defineDeclaredProperty(\"constructor\",\n+                      builder.buildObjectType(), callee);\n+                }\n+              }\n+            }\n+          }\n+        }\n+      } else if (stmt.isClass()) {\n+        if (stmt.getJSType() != null &&\n+            !(stmt.getJSType().isUnknownType()) &&\n+            stmt.getJSType().isFunctionType()) {\n+          FunctionType classType =\n+              stmt.getJSType().toMaybeFunctionType();\n+          if (classType.hasInstanceType()) {\n+            FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n+            JSType instanceType =\n+                classType.getThisType().autobox();\n+            builder.addReceiverType(instanceType);\n+            if (!objType.isPropertyTypeInferred(\"constructor\")) {\n+              objType.defineInferredProperty(\"constructor\",\n+                  builder.buildObjectType());\n+            } else {\n+              JSType declType = objType.getPropertyType(\"constructor\");\n+              if (declType == null || declType.equals(\n+                  getNativeType(OBJECT_TYPE))) {\n+                objType.defineDeclaredProperty(\"constructor\",\n+                    builder.buildObjectType(), stmt.getFirstChild());\n+              }\n             }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n       }\n     }\n+\n+    // There might be inferred properties in the constraint type that haven't\n+    // been declared yet; we add them to the inferred properties of the object\n+    if (constraintObj.isRecordType() && objType != null) {\n+      inferPropertiesDeclaredInConstraints(constraintObj, objType);\n+    }\n   }\n \n   /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n+   * Completes the JSDocInfo for all class constructors that have a @template parameter.\n+   * Returns true if any new JSDocInfo was added.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+  private boolean completeConstructorsDefinitionsWithTemplates(\n+      TypedScope scope, ObjectType objType) {\n+    JSDocInfo ctorDoc = objType.getOwnPropertyJSDocInfo(\"constructor\");\n+    if (ctorDoc == null) {\n+      return false;\n+    }\n+    boolean added = false;\n+    List<String> templateTypeNames = ctorDoc.getTemplateTypeNames();\n+    if (!templateTypeNames.isEmpty()) {\n+      List<JSType> typeValues = new ArrayList<>();\n+      int templateCount = templateTypeNames.size();\n+      for (int i = 0; i < templateCount; i++) {\n+        String templateTypeName = templateTypeNames.get(i);\n+        JSType typeValue = ctorDoc.getTemplateTypeValue(templateTypeName);\n+        if (typeValue != null) {\n+          typeValues.add(typeValue);\n+        } else {\n+          typeValues.add(getNativeType(UNKNOWN_TYPE));\n+        }\n+      }\n+      FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n+      for (Node child = scope.getRootNode().getFirstChild();\n+           child != null;\n+           child = child.getNext()) {\n+        JSDocInfo info = child.getJSDocInfo();\n+        if (info != null && info.isConstructorOrInterface()) {\n+          Node fnNode = child.getFirstChild();\n+          FunctionType fnType = fnNode.getJSType().toMaybeFunctionType();\n+          if (fnType == null || !fnType.isConstructor()) {\n+            continue;\n+          }\n+          if (!fnType.hasInstanceType()) {\n+            // This can sometimes happen as a result of bad code. Callers of the constructor who\n+            // don't use 'new' or a type annotation will end up doing regular function calls with\n+            // all of the same pitfalls and weirdness that result from misusing constructor\n+            // functions in general.\n+            continue;\n+          }\n+          JSType instanceType =\n+              fnType.getInstanceType().instantiateGenerics(\n+                  registry.createJSTypeWithNullability(\n+                      getNativeType(UNKNOWN_TYPE), true));\n+          // The JSDocInfo's template types correspond to the constructor's\n+          // type parameters, so we run through the list of the type's\n+          // own type parameters, create a type substitution map that\n+          // associates the template type name with the type parameter,\n+          // and then infer types for any properties that depend on those types.\n+          int index = 0;\n+          for (String key : objType.getTemplateTypeMap().nativeMap().keySet()) {\n+            if (index < templateCount) {\n+              JSType variable = typeValues.get(index++);\n+              instanceType = instanceType.substituteGenerics(ImmutableMap.of(\n+                  templateTypeNames.get(index - 1), variable));\n+            }\n+          }\n+          instanceType = instanceType.autobox();\n+          if (objType.isDefined()) {\n+            constructorInvokersMap.put(objType.getConstructorFunction(), objType.getConstructorFunction());\n+          }\n+          added |= fnNode.getJSDocInfo().recordConstructorType(instanceType);\n+        }\n       }\n     }\n+    return added;\n+  }\n+  \n+  private void inferInGlobalScope(ObjectType objectType) {\n+    TypedScope scope = getTypedScope();\n+    // Make a first pass to bring in names from the built-in types, since they may be used in\n+    // the user's code in a way that's not detectable by the AST alone.\n+    GlobalTypeInfo globalTypeInfo = compiler.getGlobalTypeInfo();\n+    if (globalTypeInfo != null) {\n+      ObjectType globalType = globalTypeInfo.getGlobalType();\n+      if (objectType != globalType) {\n+        objectType.addMissingPropertiesFrom(globalType.getImplicitPrototype());\n+      }\n+    }\n+    if (objectType.hasClassType()) {\n+      // Add type definitions to prototype hierarchy.\n+      objectType.defineDeclaredProperty(Property.MAX_LENGTH,\n+          getNativeType(NUMBER_TYPE));\n+\n+      List<String> classTemplateTypeNames =\n+          objectType.getTemplateTypeMap().keySet().asList();\n+      objectType.defineDeclaredProperty(\n+          \"prototype\", getPrototypeType(classTemplateTypeNames), null);\n+    }\n+    // We declare fun/proto properties prototypes because\n+    // `new fun()['proto'] == fun.prototype` stands for every function, while\n+    // `__proto__ == Function.prototype` holds only for declared functions.\n+    objectType.defineDeclaredProperty(\n+        \"prototype\", getTopObject(getNativeType(OBJECT_TYPE)), null);\n+\n+    for (Node child: scope.getRootNode().children()) {\n+      if (!NodeUtil.isParsedClosureCall(child)) {\n+        inferDeclaration(child, scope, objectType, true);\n+      }\n+    }\n+  }\n+    }\n     return scope;\n   }\n ",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}