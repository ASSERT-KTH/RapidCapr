{
    "patch": "  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        JSModule module = t.getModule();\n        boolean allowUnrecognizedRequire = false;\n        for (CompilerInput input : compiler.getInputsById(module.getId())) {\n          if (input.getModule().getHasFullParseDependencyInfo()) {\n            allowUnrecognizedRequire = true;\n            break;\n          }\n        }\n        if (!allowUnrecognizedRequire) {\n          unrecognizedRequires.add(\n              new UnrecognizedRequire(n, ns, module.getName()));\n        }\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                          providedModule.getName(),\n                          module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      if (provided != null) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..52eee8bb 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -299,8 +299,18 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       String ns = arg.getString();\n       ProvidedName provided = providedNames.get(ns);\n       if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        JSModule module = t.getModule();\n+        boolean allowUnrecognizedRequire = false;\n+        for (CompilerInput input : compiler.getInputsById(module.getId())) {\n+          if (input.getModule().getHasFullParseDependencyInfo()) {\n+            allowUnrecognizedRequire = true;\n+            break;\n+          }\n+        }\n+        if (!allowUnrecognizedRequire) {\n+          unrecognizedRequires.add(\n+              new UnrecognizedRequire(n, ns, module.getName()));\n+        }\n       } else {\n         JSModule providedModule = provided.explicitModule;\n \n@@ -313,8 +323,8 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n             !moduleGraph.dependsOn(module, providedModule)) {\n           compiler.report(\n               t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+                          providedModule.getName(),\n+                          module.getName()));\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}