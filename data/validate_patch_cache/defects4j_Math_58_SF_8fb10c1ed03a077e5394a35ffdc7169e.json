{
    "patch": "    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        final double[] lower = new double[guess.length];\n        Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n        final double[] upper = null;\n        final WeightedObservedPoint[] points = getObservations();\n        final WeightedObservedPoint point = points[0];\n        final double start = point.getX();\n        final double[] sigma = new double[] { Double.POSITIVE_INFINITY };\n        final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n        final LeastSquaresBuilder builder = new LeastSquaresBuilder()\n                .maxEvaluations(Integer.MAX_VALUE)\n                .maxIterations(Integer.MAX_VALUE)\n                .start(guess)\n                .target(cost)\n                .weight(MatrixUtils.createRealDiagonalMatrix(sigma))\n                .model(new Gaussian.Parametric())\n                .lazyEvaluation(false)\n                .jacobian(new JacobianMultivariateVectorFunction(new GaussNewtonOptimizer.SpecifiedJacobian(jac)))\n                .parameterValidator(new SimpleBounds(lower, upper));\n        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(builder.build(points));\n        return optimum.getPoint().toArray();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..a7a445802 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,26 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double[] lower = new double[guess.length];\n+        Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n+        final double[] upper = null;\n+        final WeightedObservedPoint[] points = getObservations();\n+        final WeightedObservedPoint point = points[0];\n+        final double start = point.getX();\n+        final double[] sigma = new double[] { Double.POSITIVE_INFINITY };\n+        final LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();\n+        final LeastSquaresBuilder builder = new LeastSquaresBuilder()\n+                .maxEvaluations(Integer.MAX_VALUE)\n+                .maxIterations(Integer.MAX_VALUE)\n+                .start(guess)\n+                .target(cost)\n+                .weight(MatrixUtils.createRealDiagonalMatrix(sigma))\n+                .model(new Gaussian.Parametric())\n+                .lazyEvaluation(false)\n+                .jacobian(new JacobianMultivariateVectorFunction(new GaussNewtonOptimizer.SpecifiedJacobian(jac)))\n+                .parameterValidator(new SimpleBounds(lower, upper));\n+        final LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(builder.build(points));\n+        return optimum.getPoint().toArray();\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}