{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        name.setLineno(functionNode.getLineno());\n        int nameCharno = functionNode.getAbsolutePosition();\n        nameCharno = position2charno(nameCharno);\n        name.setCharno(nameCharno);\n      } else if (name.getIdentifier().isEmpty() && name.getLine() == 0) {\n        // Function has an empty name, but a line number of 0.\n        name.setLineno(functionNode.getLineno());\n        int nameCharno = functionNode.getAbsolutePosition();\n        nameCharno = position2charno(nameCharno);\n        name.setCharno(nameCharno);\n      }\n      Node functionNodeAst = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n      functionNodeAst.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      if (name != null) {\n        lp.setLineno(newName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      functionNodeAst.addChildToBack(lp);\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      functionNodeAst.addChildToBack(bodyNode);\n      return functionNodeAst;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..76893951 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,50 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n+        name.setLineno(functionNode.getLineno());\n+        int nameCharno = functionNode.getAbsolutePosition();\n+        nameCharno = position2charno(nameCharno);\n+        name.setCharno(nameCharno);\n+      } else if (name.getIdentifier().isEmpty() && name.getLine() == 0) {\n+        // Function has an empty name, but a line number of 0.\n+        name.setLineno(functionNode.getLineno());\n+        int nameCharno = functionNode.getAbsolutePosition();\n+        nameCharno = position2charno(nameCharno);\n+        name.setCharno(nameCharno);\n+      }\n+      Node functionNodeAst = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+      functionNodeAst.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      if (name != null) {\n+        lp.setLineno(newName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      functionNodeAst.addChildToBack(lp);\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      functionNodeAst.addChildToBack(bodyNode);\n+      return functionNodeAst;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}