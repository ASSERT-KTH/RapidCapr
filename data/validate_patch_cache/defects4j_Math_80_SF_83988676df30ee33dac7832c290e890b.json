{
    "patch": "private boolean flipIfWarranted(final int n, final int step) {\n    final double maxPingPongValue = work[pingPong] * 1.5;\n    final double maxAlternateValue = work[4 * n - pingPong - 1];\n    if (maxPingPongValue < maxAlternateValue) {\n        for (int i = 0; i < 2 * n; i++) {\n            final int j = 4 * n - i - 1;\n            if (i >= j) {\n                break;\n            }\n            for (int k = 0; k < 2; k++) {\n                final int index1 = i + k;\n                final int index2 = j - k;\n                final double tmp = work[index1];\n                work[index1] = work[index2];\n                work[index2] = tmp;\n            }\n        }\n        pingPong = (pingPong + 2) % 4;\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..e904c26b0 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1129,22 +1129,28 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n      * only every other element)\n      * @return true if qd array was flipped\n      */\n-    private boolean flipIfWarranted(final int n, final int step) {\n-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+private boolean flipIfWarranted(final int n, final int step) {\n+    final double maxPingPongValue = work[pingPong] * 1.5;\n+    final double maxAlternateValue = work[4 * n - pingPong - 1];\n+    if (maxPingPongValue < maxAlternateValue) {\n+        for (int i = 0; i < 2 * n; i++) {\n+            final int j = 4 * n - i - 1;\n+            if (i >= j) {\n+                break;\n+            }\n+            for (int k = 0; k < 2; k++) {\n+                final int index1 = i + k;\n+                final int index2 = j - k;\n+                final double tmp = work[index1];\n+                work[index1] = work[index2];\n+                work[index2] = tmp;\n             }\n-            return true;\n         }\n-        return false;\n+        pingPong = (pingPong + 2) % 4;\n+        return true;\n     }\n+    return false;\n+}\n \n     /**\n      * Compute an interval containing all realEigenvalues of a block.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}