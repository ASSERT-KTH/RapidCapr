{
    "patch": "      if (isGlobalScope(scope)) {\n        if (isSet) {\n          if (isGlobalNameReference(name, scope)) {\n            if (isPropAssign || !parent.isDestructuringLhs()) {\n              handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n              return;\n            }\n          } else {\n            handleSetFromLocal(module, scope, n, parent, name);\n            return;\n          }\n        } else if (isGlobalNameReference(name, scope)) {\n          if (parent != null && parent.isCatch() && n == parent.getFirstChild()) {\n            return;\n          }\n          handleGet(module, scope, n, parent, name);\n          return;\n        } else if (parent != null && parent.isDestructuringLhs()) {\n          return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..244a6b91 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,27 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      if (isGlobalScope(scope)) {\n+        if (isSet) {\n+          if (isGlobalNameReference(name, scope)) {\n+            if (isPropAssign || !parent.isDestructuringLhs()) {\n+              handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+              return;\n+            }\n+          } else {\n+            handleSetFromLocal(module, scope, n, parent, name);\n+            return;\n+          }\n+        } else if (isGlobalNameReference(name, scope)) {\n+          if (parent != null && parent.isCatch() && n == parent.getFirstChild()) {\n+            return;\n+          }\n+          handleGet(module, scope, n, parent, name);\n+          return;\n+        } else if (parent != null && parent.isDestructuringLhs()) {\n+          return;\n+        }\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}