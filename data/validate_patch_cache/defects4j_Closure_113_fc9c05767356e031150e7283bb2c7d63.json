{
    "patch": "      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      Node next = parent.getNext();\n      parent.detach();\n      compiler.reportCodeChange();\n      t.getCompiler().report(\n          JSError.make(\n              t.getSourceName(),\n              n,\n              XMODULE_REQUIRE_ERROR,\n              arg.getString(),\n              providedModule.getName(),\n              module.getName())\n      );",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..58174a1f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,26 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+\n+      // Requires should be removed before further processing.\n+      // Some clients run closure pass multiple times, first with\n+      // the checks for broken requires turned off. In these cases, we\n+      // allow broken requires to be preserved by the first run to\n+      // let them be caught in the subsequent run.\n+      Node next = parent.getNext();\n+      parent.detach();\n+      compiler.reportCodeChange();\n+      t.getCompiler().report(\n+          JSError.make(\n+              t.getSourceName(),\n+              n,\n+              XMODULE_REQUIRE_ERROR,\n+              arg.getString(),\n+              providedModule.getName(),\n+              module.getName())\n+      );\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}