{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n      options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.setClosurePassEnabled(flags.processClosurePrimitives);\n\n    options.setGenerateGzippedFiles(true);\n    \n    // Move this condition before the `setProcessJqueryPrimitives` call\n    if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n    }\n\n    if (flags.processJqueryPrimitives) {\n      options.setProcessJqueryPrimitives(true);\n      // Only set this option if processJqueryPrimitives is true\n      if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n        options.setProcessCommonJSModules(true);\n      }\n    } else {\n      options.setProcessJqueryPrimitives(false);\n    }\n\n    options.setAngularPass(flags.angularPass);\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..909ce742 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -834,12 +834,26 @@ public class CommandLineRunner extends\n       formattingOption.applyToOptions(options);\n     }\n \n-    options.closurePass = flags.processClosurePrimitives;\n+    options.setClosurePassEnabled(flags.processClosurePrimitives);\n \n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n+    options.setGenerateGzippedFiles(true);\n+    \n+    // Move this condition before the `setProcessJqueryPrimitives` call\n+    if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+      options.setCheckGlobalThisLevel(CheckLevel.WARNING);\n+    }\n+\n+    if (flags.processJqueryPrimitives) {\n+      options.setProcessJqueryPrimitives(true);\n+      // Only set this option if processJqueryPrimitives is true\n+      if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+        options.setProcessCommonJSModules(true);\n+      }\n+    } else {\n+      options.setProcessJqueryPrimitives(false);\n+    }\n \n-    options.angularPass = flags.angularPass;\n+    options.setAngularPass(flags.angularPass);\n \n     if (!flags.translationsFile.isEmpty()) {\n       try {\n@@ -850,14 +864,6 @@ public class CommandLineRunner extends\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}