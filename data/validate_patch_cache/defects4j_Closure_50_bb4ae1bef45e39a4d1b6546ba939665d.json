{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    int joinSize = kJoinMethodOverhead + joinString.length() + 2;\n\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          arrayFoldedChildren.add(\n              IR.string(sb.toString()).srcref(elem));\n          sb = null;\n        }\n        arrayFoldedChildren.add(elem);\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      arrayFoldedChildren.add(IR.string(sb.toString()));\n    }\n\n    foldedSize += (arrayFoldedChildren.size() - 1) * (joinString.length() + 2);\n    foldedSize += joinSize;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (foldedSize > originalSize) {\n      return n;\n    }\n\n    Node newCallNode = NodeUtil.newQualifiedNameNode(\n        compiler, \"Array.prototype.join\");\n    Node createdByComment = IR.string(\" created by array join folding\").useSourceInfoFrom(n);\n    Node joinStringNode = IR.string(joinString).useSourceInfoFrom(right == null ? callTarget.getParent() : right);\n    Node newCall = IR.call(newCallNode, createdByComment, arrayNode, joinStringNode).useSourceInfoFrom(n);\n    n.replaceWith(newCall);\n    reportCodeChange();\n\n    return newCall;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..039ec2a2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,7 +364,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n@@ -372,29 +372,25 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n-    Node prev = null;\n+    int joinSize = kJoinMethodOverhead + joinString.length() + 2;\n+\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n         if (sb == null) {\n@@ -405,74 +401,37 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         sb.append(NodeUtil.getArrayElementStringValue(elem));\n       } else {\n         if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n           arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n+              IR.string(sb.toString()).srcref(elem));\n           sb = null;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n+      foldedSize += InlineCostEstimator.getCost(elem);\n       elem = elem.getNext();\n     }\n \n     if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      arrayFoldedChildren.add(IR.string(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+\n+    foldedSize += (arrayFoldedChildren.size() - 1) * (joinString.length() + 2);\n+    foldedSize += joinSize;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (foldedSize > originalSize) {\n+      return n;\n     }\n \n-    return n;\n+    Node newCallNode = NodeUtil.newQualifiedNameNode(\n+        compiler, \"Array.prototype.join\");\n+    Node createdByComment = IR.string(\" created by array join folding\").useSourceInfoFrom(n);\n+    Node joinStringNode = IR.string(joinString).useSourceInfoFrom(right == null ? callTarget.getParent() : right);\n+    Node newCall = IR.call(newCallNode, createdByComment, arrayNode, joinStringNode).useSourceInfoFrom(n);\n+    n.replaceWith(newCall);\n+    reportCodeChange();\n+\n+    return newCall;\n   }\n \n   /**\n@@ -642,4 +601,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}