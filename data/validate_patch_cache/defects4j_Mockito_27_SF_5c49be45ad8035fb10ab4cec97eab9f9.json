{
    "patch": "import org.mockito.internal.creation.cglib.CGLIBLazyInitializer;\nimport org.mockito.internal.creation.jmock.ClassImposterizer;\nimport org.mockito.internal.handler.MockHandler;\nimport org.mockito.internal.handler.MockHandlerInterface;\nimport org.mockito.internal.stubbing.answers.Returns;\nimport org.mockito.internal.util.MockUtil;\nimport org.mockito.invocation.Invocation;\nimport org.mockito.listeners.InvocationListener;\nimport org.mockito.listeners.MethodInvocationReport;\nimport org.mockito.mock.MockSettingsImpl;\nimport org.mockito.plugins.MockMaker;\n\nimport java.lang.reflect.Field;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\nimport java.util.Iterator;\n\npublic class MockResetter {\n    \n    private final MockMaker mockMaker;\n    \n    public MockResetter(MockMaker mockMaker) {\n        this.mockMaker = mockMaker;\n    }\n    \n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n        MockHandlerInterface<T> newHandler = new MockHandler<T>(oldHandler);\n\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(new Returns()));\n\n        Factory factory = ((Factory) mock);\n        while (factory != null) {\n            if (factory instanceof CGLIBLazyInitializer) {\n                ((CGLIBLazyInitializer) factory).setCallback(newFilter);\n                break;\n            }\n            factory = factory.getCallback(0);\n        }\n    }\n\n    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n        return ((MockUtil) ClassImposterizer.INSTANCE).getMockHandler(mock);\n    }\n\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..4ae0d0ec0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,53 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.cglib.CGLIBLazyInitializer;\n+import org.mockito.internal.creation.jmock.ClassImposterizer;\n+import org.mockito.internal.handler.MockHandler;\n+import org.mockito.internal.handler.MockHandlerInterface;\n+import org.mockito.internal.stubbing.answers.Returns;\n+import org.mockito.internal.util.MockUtil;\n+import org.mockito.invocation.Invocation;\n+import org.mockito.listeners.InvocationListener;\n+import org.mockito.listeners.MethodInvocationReport;\n+import org.mockito.mock.MockSettingsImpl;\n+import org.mockito.plugins.MockMaker;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.Iterator;\n+\n+public class MockResetter {\n+    \n+    private final MockMaker mockMaker;\n+    \n+    public MockResetter(MockMaker mockMaker) {\n+        this.mockMaker = mockMaker;\n+    }\n+    \n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+        MockHandlerInterface<T> newHandler = new MockHandler<T>(oldHandler);\n+\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(new Returns()));\n+\n+        Factory factory = ((Factory) mock);\n+        while (factory != null) {\n+            if (factory instanceof CGLIBLazyInitializer) {\n+                ((CGLIBLazyInitializer) factory).setCallback(newFilter);\n+                break;\n+            }\n+            factory = factory.getCallback(0);\n+        }\n+    }\n+\n+    private <T> MockHandlerInterface<T> getMockHandler(T mock) {\n+        return ((MockUtil) ClassImposterizer.INSTANCE).getMockHandler(mock);\n+    }\n+\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}