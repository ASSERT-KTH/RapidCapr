{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n        return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // Side effect flag\n    boolean hasSideEffects = false;\n\n    if (block.hasChildren()) {\n        Preconditions.checkState(block.hasOneChild());\n        Node stmt = block.getFirstChild();\n\n        // Check for side effects in the returned value\n        if (stmt.isReturn()) {\n            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n        }\n    }\n\n    // Executor argument flag\n    boolean hasExecutorArg = false;\n\n    // Function's parameters\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node callParams = callNode.getFirstChild().getNext();\n\n    while (fnParams != null || callParams != null) {\n        if (fnParams == null) {\n            return CanInlineResult.NO;\n        }\n\n        // If a Executor is being passed\n        if (fnParams.getString().equals(\"executor\")) {\n            // Executer parameter must be a function type\n            if (!CompilerAccessor.isFunctionType(fnParams.getNext())) {\n                return CanInlineResult.NO;\n            }\n\n            hasExecutorArg = true;\n            fnParams = fnParams.getNext().getNext();\n            continue;\n        }\n\n        if (callParams == null) {\n            return CanInlineResult.NO;\n        }\n\n        if (hasSideEffects && NodeUtil.canBeSideEffected(callParams)) {\n            return CanInlineResult.NO;\n        }\n\n        // Check for arguments that are evaluated more than once.\n        if (NodeUtil.mayEffectMutableState(callParams, compiler)\n                && NodeUtil.getNameReferenceCount(block, fnParams.getString()) > 1) {\n            return CanInlineResult.NO;\n        }\n\n        callParams = callParams.getNext();\n        fnParams = fnParams.getNext();\n    }\n\n    // If Executor is passed as argument to function and is not used in the function's body\n    if (hasExecutorArg && !NodeUtil.isNameReferenced(fnNode, \"executor\", false)) {\n        return CanInlineResult.NO;\n    }\n\n    return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..8ca6a8fa 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,76 +686,77 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n+        return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n \n+    // Side effect flag\n     boolean hasSideEffects = false;\n+\n     if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n-    }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+        Preconditions.checkState(block.hasOneChild());\n+        Node stmt = block.getFirstChild();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+        // Check for side effects in the returned value\n+        if (stmt.isReturn()) {\n+            hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+    // Executor argument flag\n+    boolean hasExecutorArg = false;\n+\n+    // Function's parameters\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+\n+    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    Node callParams = callNode.getFirstChild().getNext();\n+\n+    while (fnParams != null || callParams != null) {\n+        if (fnParams == null) {\n             return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+        }\n+\n+        // If a Executor is being passed\n+        if (fnParams.getString().equals(\"executor\")) {\n+            // Executer parameter must be a function type\n+            if (!CompilerAccessor.isFunctionType(fnParams.getNext())) {\n+                return CanInlineResult.NO;\n+            }\n+\n+            hasExecutorArg = true;\n+            fnParams = fnParams.getNext().getNext();\n+            continue;\n+        }\n+\n+        if (callParams == null) {\n             return CanInlineResult.NO;\n-          }\n         }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+        if (hasSideEffects && NodeUtil.canBeSideEffected(callParams)) {\n+            return CanInlineResult.NO;\n+        }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        // Check for arguments that are evaluated more than once.\n+        if (NodeUtil.mayEffectMutableState(callParams, compiler)\n+                && NodeUtil.getNameReferenceCount(block, fnParams.getString()) > 1) {\n+            return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      }\n+\n+        callParams = callParams.getNext();\n+        fnParams = fnParams.getNext();\n+    }\n+\n+    // If Executor is passed as argument to function and is not used in the function's body\n+    if (hasExecutorArg && !NodeUtil.isNameReferenced(fnNode, \"executor\", false)) {\n+        return CanInlineResult.NO;\n     }\n \n     return CanInlineResult.YES;\n-  }\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}