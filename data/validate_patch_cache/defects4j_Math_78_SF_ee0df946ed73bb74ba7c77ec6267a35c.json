{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n        double ga = handler.g(ta, interpolator.getInterpolatedState());\n        double gb = handler.g(tb, interpolator.getInterpolatedState());\n        boolean g0Positive = (ga >= 0);\n        boolean gbPositive = (gb >= 0);\n        for (int i = 0; i < n; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            gb = handler.g(tb, interpolator.getInterpolatedState());\n            gbPositive = (gb >= 0);\n\n            // check events occurrence\n            if (g0Positive ^ gbPositive) {\n                // there is a sign change: an event is expected during this step\n\n                // variation direction, with respect to the integration direction\n                increasing = gb >= ga;\n\n                double root;\n                double froot = 0;\n                final UnivariateFunction f = new UnivariateFunction() {\n                    public double value(final double t) throws FunctionEvaluationException {\n                        try {\n                            interpolator.setInterpolatedTime(t);\n                            return handler.g(t, interpolator.getInterpolatedState());\n                        } catch (DerivativeException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        } catch (EventException e) {\n                            throw new FunctionEvaluationException(e, t);\n                        }\n                    }\n                };\n                final double fa = ga;\n                final double fb = gb;\n                final int maxIter = 100;\n                final double oldTb = tb;\n                try {\n                    final UnivariateSolver solver = new BrentSolver(convergence, 1.0e-15);\n                    root = solver.solve(maxIter, f, ta, tb, ga, gb);\n                    froot = f.apply(root);\n                } catch (final TooManyEvaluationsException ex) {\n                    if (isStrictlyIncreasing(ta, tb)) {\n                        root = ta;\n                        froot = ga;\n                    } else {\n                        root = tb;\n                        froot = gb;\n                    }\n                } catch (NoBracketingException ex) {\n                    if (isStrictlyIncreasing(ta, tb)) {\n                        root = ta;\n                        froot = ga;\n                    } else {\n                        root = tb;\n                        froot = gb;\n                    }\n                }\n\n                // check proximity to state events\n                if ((Math.abs(root - ta) <= convergence) || (Math.abs(root - tb) <= convergence)) {\n                    root = interpolator.getCurrentTime();\n                    froot = handler.g(root, interpolator.getInterpolatedState());\n                }\n\n                // check convergence of the event time\n                if ((Math.abs(froot) <= convergence) && (Math.abs(root - interpolator.getPreviousTime()) >= convergence)) {\n                    // convergence reached, event located\n\n                    if (pendingEvent && (Math.abs(root - pendingEventTime) <= convergence)) {\n                        // we were already waiting for this event which was\n                        // found during a previous call for a step that was\n                        // rejected, this step must now be accepted since it\n                        // properly ends exactly at the event occurrence\n                        return false;\n                    }\n                    pendingEvent = true;\n                    pendingEventTime = root;\n                    return true;\n\n                } else {\n                    // no convergence, try a new substep with updated bracketing\n                    ta = oldTb;\n                    ga = fb;\n                    g0Positive = gbPositive;\n                }\n\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                g0Positive = gbPositive;\n                ga = gb;\n            }\n\n        }\n\n        // no event during the whole step\n        pendingEvent = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}\n\n/**\n * Check if the interval is such that both endpoints can be evaluated.\n *\n * @param ta lower endpoint\n * @param tb upper endpoint\n * @return {@code true} if the interval can be evaluated\n */\nprotected boolean isStrictlyIncreasing(final double ta, final double tb) {\n    try {\n        final double ga = handler.g(ta, getInterpolatedState(ta));\n        final double gb = handler.g(tb, getInterpolatedState(tb));\n        return ((ga >= 0) && (gb >= 0)) || ((ga <= 0) && (gb <= 0));\n    } catch (MathRuntimeException mre) {\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..1dbff9645 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,147 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n+    try {\n+\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n+        double ga = handler.g(ta, interpolator.getInterpolatedState());\n+        double gb = handler.g(tb, interpolator.getInterpolatedState());\n+        boolean g0Positive = (ga >= 0);\n+        boolean gbPositive = (gb >= 0);\n+        for (int i = 0; i < n; ++i) {\n+\n+            // evaluate handler value at the end of the substep\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            gb = handler.g(tb, interpolator.getInterpolatedState());\n+            gbPositive = (gb >= 0);\n+\n+            // check events occurrence\n+            if (g0Positive ^ gbPositive) {\n+                // there is a sign change: an event is expected during this step\n+\n+                // variation direction, with respect to the integration direction\n+                increasing = gb >= ga;\n+\n+                double root;\n+                double froot = 0;\n+                final UnivariateFunction f = new UnivariateFunction() {\n+                    public double value(final double t) throws FunctionEvaluationException {\n+                        try {\n+                            interpolator.setInterpolatedTime(t);\n+                            return handler.g(t, interpolator.getInterpolatedState());\n+                        } catch (DerivativeException e) {\n+                            throw new FunctionEvaluationException(e, t);\n+                        } catch (EventException e) {\n+                            throw new FunctionEvaluationException(e, t);\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n                     }\n+                };\n+                final double fa = ga;\n+                final double fb = gb;\n+                final int maxIter = 100;\n+                final double oldTb = tb;\n+                try {\n+                    final UnivariateSolver solver = new BrentSolver(convergence, 1.0e-15);\n+                    root = solver.solve(maxIter, f, ta, tb, ga, gb);\n+                    froot = f.apply(root);\n+                } catch (final TooManyEvaluationsException ex) {\n+                    if (isStrictlyIncreasing(ta, tb)) {\n+                        root = ta;\n+                        froot = ga;\n+                    } else {\n+                        root = tb;\n+                        froot = gb;\n+                    }\n+                } catch (NoBracketingException ex) {\n+                    if (isStrictlyIncreasing(ta, tb)) {\n+                        root = ta;\n+                        froot = ga;\n+                    } else {\n+                        root = tb;\n+                        froot = gb;\n+                    }\n+                }\n+\n+                // check proximity to state events\n+                if ((Math.abs(root - ta) <= convergence) || (Math.abs(root - tb) <= convergence)) {\n+                    root = interpolator.getCurrentTime();\n+                    froot = handler.g(root, interpolator.getInterpolatedState());\n+                }\n+\n+                // check convergence of the event time\n+                if ((Math.abs(froot) <= convergence) && (Math.abs(root - interpolator.getPreviousTime()) >= convergence)) {\n+                    // convergence reached, event located\n+\n+                    if (pendingEvent && (Math.abs(root - pendingEventTime) <= convergence)) {\n+                        // we were already waiting for this event which was\n+                        // found during a previous call for a step that was\n+                        // rejected, this step must now be accepted since it\n+                        // properly ends exactly at the event occurrence\n+                        return false;\n+                    }\n+                    pendingEvent = true;\n+                    pendingEventTime = root;\n+                    return true;\n \n                 } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    // no convergence, try a new substep with updated bracketing\n+                    ta = oldTb;\n+                    ga = fb;\n+                    g0Positive = gbPositive;\n                 }\n \n+            } else {\n+                // no sign change: there is no event for now\n+                ta = tb;\n+                g0Positive = gbPositive;\n+                ga = gb;\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+        }\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n+        // no event during the whole step\n+        pendingEvent = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n         }\n+        throw new EventException(e);\n+    }\n \n+}\n+\n+/**\n+ * Check if the interval is such that both endpoints can be evaluated.\n+ *\n+ * @param ta lower endpoint\n+ * @param tb upper endpoint\n+ * @return {@code true} if the interval can be evaluated\n+ */\n+protected boolean isStrictlyIncreasing(final double ta, final double tb) {\n+    try {\n+        final double ga = handler.g(ta, getInterpolatedState(ta));\n+        final double gb = handler.g(tb, getInterpolatedState(tb));\n+        return ((ga >= 0) && (gb >= 0)) || ((ga <= 0) && (gb <= 0));\n+    } catch (MathRuntimeException mre) {\n+        return true;\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}