{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    boolean hasDecimal = false;\n    boolean hasExponent = false;\n    String mantissa;\n    String decimalPart = \"\";\n    String exponent = \"\";\n    int exponentPos = -1;\n\n    // Determine if the number has a decimal point or an exponent\n    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n        if (c == '.') {\n            if (hasDecimal) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            hasDecimal = true;\n        } else if (c == 'e' || c == 'E') {\n            if (hasExponent) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            hasExponent = true;\n            exponentPos = i;\n        }\n        if (hasExponent) {\n            if (i > exponentPos && (c == '+' || c == '-')) {\n                if (exponent.isEmpty()) {\n                    exponent += c;\n                } else {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            } else if (Character.isDigit(c)) {\n                exponent += c;\n            } else {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else if (hasDecimal) {\n            if (Character.isDigit(c)) {\n                decimalPart += c;\n            } else {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n    }\n\n    // Extract the mantissa\n    if (hasDecimal) {\n        mantissa = str.substring(0, str.indexOf('.'));\n    } else if (hasExponent) {\n        mantissa = str.substring(0, exponentPos);\n    } else {\n        mantissa = str;\n    }\n\n    // Trim leading zeros from the decimal part\n    while (decimalPart.startsWith(\"0\")) {\n        decimalPart = decimalPart.substring(1);\n    }\n\n    // Trim leading zeros and plus sign from the exponent\n    while (exponent.startsWith(\"+\") || exponent.startsWith(\"0\")) {\n        exponent = exponent.substring(1);\n    }\n\n    // Requesting a specific type..\n    boolean allZeros = isAllZeros(mantissa) && isAllZeros(decimalPart",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..981e029a 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,155 +449,85 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (str.startsWith(\"--\")) {\n+        return null;\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+    char lastChar = str.charAt(str.length() - 1);\n+    boolean hasDecimal = false;\n+    boolean hasExponent = false;\n+    String mantissa;\n+    String decimalPart = \"\";\n+    String exponent = \"\";\n+    int exponentPos = -1;\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n+    // Determine if the number has a decimal point or an exponent\n+    for (int i = 0; i < str.length(); i++) {\n+        char c = str.charAt(i);\n+        if (c == '.') {\n+            if (hasDecimal) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            hasDecimal = true;\n+        } else if (c == 'e' || c == 'E') {\n+            if (hasExponent) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            hasExponent = true;\n+            exponentPos = i;\n+        }\n+        if (hasExponent) {\n+            if (i > exponentPos && (c == '+' || c == '-')) {\n+                if (exponent.isEmpty()) {\n+                    exponent += c;\n+                } else {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                dec = str.substring(decPos + 1, expPos);\n+            } else if (Character.isDigit(c)) {\n+                exponent += c;\n             } else {\n-                dec = str.substring(decPos + 1);\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n+        } else if (hasDecimal) {\n+            if (Character.isDigit(c)) {\n+                decimalPart += c;\n             } else {\n-                mant = str;\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n+    }\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n+    // Extract the mantissa\n+    if (hasDecimal) {\n+        mantissa = str.substring(0, str.indexOf('.'));\n+    } else if (hasExponent) {\n+        mantissa = str.substring(0, exponentPos);\n+    } else {\n+        mantissa = str;\n+    }\n \n-                return createBigDecimal(str);\n+    // Trim leading zeros from the decimal part\n+    while (decimalPart.startsWith(\"0\")) {\n+        decimalPart = decimalPart.substring(1);\n+    }\n \n-            }\n-        }\n+    // Trim leading zeros and plus sign from the exponent\n+    while (exponent.startsWith(\"+\") || exponent.startsWith(\"0\")) {\n+        exponent = exponent.substring(1);\n     }\n \n+    // Requesting a specific type..\n+    boolean allZeros = isAllZeros(mantissa) && isAllZeros(decimalPart\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}