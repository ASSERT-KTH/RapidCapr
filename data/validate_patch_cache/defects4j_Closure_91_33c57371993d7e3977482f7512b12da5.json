{
    "patch": "private boolean isChainedCall(Node node) {\n  while (node != null && node.isCall()) {\n    Node callee = node.getFirstChild();\n    if (!isTypeOfable(callee)) {\n      return true;\n    }\n    node = callee.getNext();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..aa3762d5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+private boolean isChainedCall(Node node) {\n+  while (node != null && node.isCall()) {\n+    Node callee = node.getFirstChild();\n+    if (!isTypeOfable(callee)) {\n+      return true;\n+    }\n+    node = callee.getNext();\n+  }\n+  return false;\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}