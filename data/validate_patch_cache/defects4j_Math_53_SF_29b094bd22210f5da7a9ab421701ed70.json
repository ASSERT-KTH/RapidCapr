{
    "patch": "    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n            return createNaNComplex();\n        }\n        return createComplex(real + rhs.getReal(),\n            imaginary + rhs.getImaginary());\n    }\n    \n    private Complex createNaNComplex() {\n        return new Complex(Double.NaN, Double.NaN);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..54fb86c7f 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,9 +150,17 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+        if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n+            Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n+            return createNaNComplex();\n+        }\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }\n+    \n+    private Complex createNaNComplex() {\n+        return new Complex(Double.NaN, Double.NaN);\n+    }\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}