{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if (offsetLocal < 0 && offsetAdjusted == 0) {\n            int beforeGapOffset = getOffsetFromLocal(instantAdjusted - 1);\n            int afterGapOffset = getOffsetFromLocal(instantLocal - 1);\n            if (beforeGapOffset < afterGapOffset) {\n                return beforeGapOffset;\n            }\n        }\n        // if we are near a DST boundary, re-adjust instant\n        if (offsetLocal >= 0 ? offsetAdjusted < offsetLocal : offsetAdjusted > offsetLocal) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                int nextOffsetLocal = getOffset(nextLocal);\n                int nextOffsetAdjusted = getOffset(nextAdjusted);\n                if (offsetLocal >= 0 ? (nextOffsetLocal > offsetLocal && nextOffsetAdjusted == offsetLocal) :\n                        (nextOffsetLocal < offsetLocal && nextOffsetAdjusted == offsetLocal)) {\n                    return offsetLocal;\n                }\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..40ad3931 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,39 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if (offsetLocal < 0 && offsetAdjusted == 0) {\n+            int beforeGapOffset = getOffsetFromLocal(instantAdjusted - 1);\n+            int afterGapOffset = getOffsetFromLocal(instantLocal - 1);\n+            if (beforeGapOffset < afterGapOffset) {\n+                return beforeGapOffset;\n+            }\n+        }\n+        // if we are near a DST boundary, re-adjust instant\n+        if (offsetLocal >= 0 ? offsetAdjusted < offsetLocal : offsetAdjusted > offsetLocal) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                int nextOffsetLocal = getOffset(nextLocal);\n+                int nextOffsetAdjusted = getOffset(nextAdjusted);\n+                if (offsetLocal >= 0 ? (nextOffsetLocal > offsetLocal && nextOffsetAdjusted == offsetLocal) :\n+                        (nextOffsetLocal < offsetLocal && nextOffsetAdjusted == offsetLocal)) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n+    }\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}