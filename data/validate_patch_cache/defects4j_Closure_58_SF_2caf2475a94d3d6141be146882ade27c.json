{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n        case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n                  true);\n          computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n        } else {\n          Node lhs = n.getFirstChild();\n          addToSetIfLocal(lhs, kill);\n          addToSetIfLocal(lhs, gen);\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n          computeGenKill(lhs.getNext().getNext(), gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        if (!conditional) {\n          addToSetIfLocal(n, kill); // kill Others\n          // anything gen'd is definitely not\n          // short circuited.\n          addToSetIfLocal(n.getFirstChild(), gen);\n          addToSetIfLocal(n.getLastChild(), gen);\n        }\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // Assume both are true.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        if (!conditional) {\n          addToSetIfLocal(n.getFirstChild().getNext(), gen);\n          addToSetIfLocal(n.getLastChild(), gen);\n          addToSetIfLocal(n, kill);\n        }\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..fb1a350e 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -186,26 +186,22 @@ class LiveVariablesAnalysis extends\n \n       case Token.WHILE:\n       case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+        case Token.IF:\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n         return;\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n           computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+                  true);\n+          computeGenKill(n.getFirstChild().getNext(), gen, kill, conditional);\n         } else {\n-          // for(x in y) {...}\n           Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+          addToSetIfLocal(lhs, kill);\n+          addToSetIfLocal(lhs, gen);\n+          computeGenKill(lhs.getNext(), gen, kill, conditional);\n+          computeGenKill(lhs.getNext().getNext(), gen, kill, conditional);\n         }\n         return;\n \n@@ -222,16 +218,28 @@ class LiveVariablesAnalysis extends\n \n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n+        if (!conditional) {\n+          addToSetIfLocal(n, kill); // kill Others\n+          // anything gen'd is definitely not\n+          // short circuited.\n+          addToSetIfLocal(n.getFirstChild(), gen);\n+          addToSetIfLocal(n.getLastChild(), gen);\n+        }\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n+        // Assume both are true.\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n+        if (!conditional) {\n+          addToSetIfLocal(n.getFirstChild().getNext(), gen);\n+          addToSetIfLocal(n.getLastChild(), gen);\n+          addToSetIfLocal(n, kill);\n+        }\n         return;\n \n       case Token.NAME:\n@@ -249,7 +257,6 @@ class LiveVariablesAnalysis extends\n             addToSetIfLocal(lhs, kill);\n           }\n           if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n             addToSetIfLocal(lhs, gen);\n           }\n           computeGenKill(lhs.getNext(), gen, kill, conditional);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}