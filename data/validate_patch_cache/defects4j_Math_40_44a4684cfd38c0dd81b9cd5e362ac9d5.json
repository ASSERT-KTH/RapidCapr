{
    "patch": "protected double doSolve() throws TooManyEvaluationsException, NumberIsTooLargeException {\n    final double min = getMin();\n    final double max = getMax();\n    verifySequence(min, getStartValue(), max);\n\n    double x1 = getStartValue();\n    double x2 = min;\n    double y1 = computeObjectiveValue(x1);\n    if (FastMath.abs(y1) <= functionValueAccuracy) {\n        return x1;\n    }\n\n    double y2 = computeObjectiveValue(x2);\n    if (FastMath.abs(y2) <= functionValueAccuracy) {\n        return x2;\n    }\n\n    // make x1 the best root candidate\n    if (FastMath.abs(y2) < FastMath.abs(y1)) {\n        double tmp = x1;\n        x1 = x2;\n        x2 = tmp;\n        tmp = y1;\n        y1 = y2;\n        y2 = tmp;\n    }\n\n    double x0 = x1;\n    double y0 = y1;\n    double e = max - min;\n    boolean inverted = false;\n    int i = 0;\n    while (true) {\n\n        ++i;\n\n        // calculate the inverse of the golden section\n        final double R = 0.61803399;\n        final double C = 1 - R;\n\n        // update the best estimate so far\n        double x3;\n        double y3;\n        if (FastMath.abs(x2 - x1) > FastMath.max(relativeAccuracy * FastMath.abs(x1),\n                                                  absoluteAccuracy)) {\n            // we have not yet converged\n\n            if (FastMath.abs(y2 - y1) > functionValueAccuracy) {\n                // the function must be non-zero at both endpoints\n\n                if (i > 1) {\n                    double x4 = inverted ?\n                        x1 - C * (x1 - x0) :\n                        x1 + C * (x0 - x1);\n                    double y4 = computeObjectiveValue(x4);\n                    if (FastMath.abs(y4) <= functionValueAccuracy) {\n                        return x4;\n                    }\n\n                    // check if the cubic interpolation has done the job\n                    if (i > 2) {\n                        if (inverted) {\n                            if (y4 > y3) {\n                                return solve(x1, y1, x4, y4);\n                            }\n                        } else {\n                            if (y4 < y3) {\n                                return solve(x1, y1, x4, y4);\n                            }\n                        }\n                    }\n\n                    // we will use x3 instead of x0 from now on\n                    if (y4 < y2) {\n                        inverted = !inverted;\n                        x3 = x2;\n                        y3 = y2;\n                        x2 = x4;\n                        y2 = y4;\n                    } else if (y4 < y1) {\n                        x3 = x4;\n                        y3 = y4;\n                    } else {\n                        inverted = !inverted;\n                        x3 = x4;\n                        y3 = y4;\n                        x0 = x1;\n                        y0 = y1;\n                        x1 = x4;\n                        y1 = y4;\n                    }\n                } else {\n                    // we don't have enough points yet to do cubic interpolation\n                    x3 = inverted ?\n                        x1 - C * (x1 - x2) :\n                        x1 + C * (x2 - x1);\n                    y3 = computeObjectiveValue(x3);\n                }\n\n            } else {\n                // one of the endpoints is a root\n                return y1 < y2 ? x1 : x2;\n            }\n\n        } else {\n            // we have converged\n            return y1 < y2 ? x1 : x2;\n        }\n\n        // prepare the next iteration\n        if (inverted) {\n            x0 = x2;\n            y0 = y2;\n            x2 = x3;\n            y2 = y3;\n        } else {\n            x1 = x3;\n            y1 = y3;\n        }\n\n        if (FastMath.abs(y1) <= FastMath.abs(y2)) {\n            double tmp = x2;\n            x2 = x1;\n            x1 = tmp;\n            tmp = y2;\n            y2 = y1;\n            y1 = tmp;\n        }\n\n        if (getMaxEvaluations() - i <= 0) {\n            throw new TooManyEvaluationsException(getMaxEvaluations());\n        }\n\n        if (FastMath.abs(x2 - x1) <= FastMath.max(relativeAccuracy * FastMath.abs(x1),\n                                                   absoluteAccuracy)) {\n            return y1 < y2 ? x1 : x2;\n        }\n\n        if (i >= maximalOrder) {\n            throw new NumberIsTooLargeException(maximalOrder, i, false);\n        }\n    }\n}\n\nprivate double solve(double minX, double minY,\n                     double maxX, double maxY) throws TooManyEvaluationsException {\n    double a = (maxY - minY) / (maxX - minX);\n    double b = minY - a * minX;\n    double xRoot = -b / a;\n    double yRoot = computeObjectiveValue(xRoot);\n    if (FastMath.abs(yRoot) <= functionValueAccuracy) {\n        return xRoot;\n    }\n\n    // if the cubic interpolation didn't work, fall back to bisection\n    return 0.5 * (minX + maxX);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\nindex 93dd3bbdd..26aa14cd8 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java\n@@ -140,210 +140,164 @@ public class BracketingNthOrderBrentSolver\n      * {@inheritDoc}\n      */\n     @Override\n-    protected double doSolve() {\n-\n-        // prepare arrays with the first points\n-        final double[] x = new double[maximalOrder + 1];\n-        final double[] y = new double[maximalOrder + 1];\n-        x[0] = getMin();\n-        x[1] = getStartValue();\n-        x[2] = getMax();\n-        verifySequence(x[0], x[1], x[2]);\n-\n-        // evaluate initial guess\n-        y[1] = computeObjectiveValue(x[1]);\n-        if (Precision.equals(y[1], 0.0, 1)) {\n-            // return the initial guess if it is a perfect root.\n-            return x[1];\n-        }\n-\n-        // evaluate first  endpoint\n-        y[0] = computeObjectiveValue(x[0]);\n-        if (Precision.equals(y[0], 0.0, 1)) {\n-            // return the first endpoint if it is a perfect root.\n-            return x[0];\n-        }\n-\n-        int nbPoints;\n-        int signChangeIndex;\n-        if (y[0] * y[1] < 0) {\n-\n-            // reduce interval if it brackets the root\n-            nbPoints        = 2;\n-            signChangeIndex = 1;\n-\n-        } else {\n-\n-            // evaluate second endpoint\n-            y[2] = computeObjectiveValue(x[2]);\n-            if (Precision.equals(y[2], 0.0, 1)) {\n-                // return the second endpoint if it is a perfect root.\n-                return x[2];\n-            }\n+protected double doSolve() throws TooManyEvaluationsException, NumberIsTooLargeException {\n+    final double min = getMin();\n+    final double max = getMax();\n+    verifySequence(min, getStartValue(), max);\n+\n+    double x1 = getStartValue();\n+    double x2 = min;\n+    double y1 = computeObjectiveValue(x1);\n+    if (FastMath.abs(y1) <= functionValueAccuracy) {\n+        return x1;\n+    }\n \n-            if (y[1] * y[2] < 0) {\n-                // use all computed point as a start sampling array for solving\n-                nbPoints        = 3;\n-                signChangeIndex = 2;\n-            } else {\n-                throw new NoBracketingException(x[0], x[2], y[0], y[2]);\n-            }\n+    double y2 = computeObjectiveValue(x2);\n+    if (FastMath.abs(y2) <= functionValueAccuracy) {\n+        return x2;\n+    }\n \n-        }\n+    // make x1 the best root candidate\n+    if (FastMath.abs(y2) < FastMath.abs(y1)) {\n+        double tmp = x1;\n+        x1 = x2;\n+        x2 = tmp;\n+        tmp = y1;\n+        y1 = y2;\n+        y2 = tmp;\n+    }\n \n-        // prepare a work array for inverse polynomial interpolation\n-        final double[] tmpX = new double[x.length];\n-\n-        // current tightest bracketing of the root\n-        double xA    = x[signChangeIndex - 1];\n-        double yA    = y[signChangeIndex - 1];\n-        double absYA = FastMath.abs(yA);\n-        int agingA   = 0;\n-        double xB    = x[signChangeIndex];\n-        double yB    = y[signChangeIndex];\n-        double absYB = FastMath.abs(yB);\n-        int agingB   = 0;\n-\n-        // search loop\n-        while (true) {\n-\n-            // check convergence of bracketing interval\n-            final double xTol = getAbsoluteAccuracy() +\n-                                getRelativeAccuracy() * FastMath.max(FastMath.abs(xA), FastMath.abs(xB));\n-            if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {\n-                switch (allowed) {\n-                case ANY_SIDE :\n-                    return absYA < absYB ? xA : xB;\n-                case LEFT_SIDE :\n-                    return xA;\n-                case RIGHT_SIDE :\n-                    return xB;\n-                case BELOW_SIDE :\n-                    return (yA <= 0) ? xA : xB;\n-                case ABOVE_SIDE :\n-                    return (yA <  0) ? xB : xA;\n-                default :\n-                    // this should never happen\n-                    throw new MathInternalError(null);\n-                }\n-            }\n+    double x0 = x1;\n+    double y0 = y1;\n+    double e = max - min;\n+    boolean inverted = false;\n+    int i = 0;\n+    while (true) {\n+\n+        ++i;\n+\n+        // calculate the inverse of the golden section\n+        final double R = 0.61803399;\n+        final double C = 1 - R;\n+\n+        // update the best estimate so far\n+        double x3;\n+        double y3;\n+        if (FastMath.abs(x2 - x1) > FastMath.max(relativeAccuracy * FastMath.abs(x1),\n+                                                  absoluteAccuracy)) {\n+            // we have not yet converged\n+\n+            if (FastMath.abs(y2 - y1) > functionValueAccuracy) {\n+                // the function must be non-zero at both endpoints\n+\n+                if (i > 1) {\n+                    double x4 = inverted ?\n+                        x1 - C * (x1 - x0) :\n+                        x1 + C * (x0 - x1);\n+                    double y4 = computeObjectiveValue(x4);\n+                    if (FastMath.abs(y4) <= functionValueAccuracy) {\n+                        return x4;\n+                    }\n \n-            // target for the next evaluation point\n-            double targetY;\n-            if (agingA >= MAXIMAL_AGING) {\n-                // we keep updating the high bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yB;\n-            } else if (agingB >= MAXIMAL_AGING) {\n-                // we keep updating the low bracket, try to compensate this\n-                targetY = -REDUCTION_FACTOR * yA;\n-            } else {\n-                // bracketing is balanced, try to find the root itself\n-                targetY = 0;\n-            }\n+                    // check if the cubic interpolation has done the job\n+                    if (i > 2) {\n+                        if (inverted) {\n+                            if (y4 > y3) {\n+                                return solve(x1, y1, x4, y4);\n+                            }\n+                        } else {\n+                            if (y4 < y3) {\n+                                return solve(x1, y1, x4, y4);\n+                            }\n+                        }\n+                    }\n \n-            // make a few attempts to guess a root,\n-            double nextX;\n-            int start = 0;\n-            int end   = nbPoints;\n-            do {\n-\n-                // guess a value for current target, using inverse polynomial interpolation\n-                System.arraycopy(x, start, tmpX, start, end - start);\n-                nextX = guessX(targetY, tmpX, y, start, end);\n-\n-                if (!((nextX > xA) && (nextX < xB))) {\n-                    // the guessed root is not strictly inside of the tightest bracketing interval\n-\n-                    // the guessed root is either not strictly inside the interval or it\n-                    // is a NaN (which occurs when some sampling points share the same y)\n-                    // we try again with a lower interpolation order\n-                    if (signChangeIndex - start >= end - signChangeIndex) {\n-                        // we have more points before the sign change, drop the lowest point\n-                        ++start;\n+                    // we will use x3 instead of x0 from now on\n+                    if (y4 < y2) {\n+                        inverted = !inverted;\n+                        x3 = x2;\n+                        y3 = y2;\n+                        x2 = x4;\n+                        y2 = y4;\n+                    } else if (y4 < y1) {\n+                        x3 = x4;\n+                        y3 = y4;\n                     } else {\n-                        // we have more points after sign change, drop the highest point\n-                        --end;\n+                        inverted = !inverted;\n+                        x3 = x4;\n+                        y3 = y4;\n+                        x0 = x1;\n+                        y0 = y1;\n+                        x1 = x4;\n+                        y1 = y4;\n                     }\n-\n-                    // we need to do one more attempt\n-                    nextX = Double.NaN;\n-\n+                } else {\n+                    // we don't have enough points yet to do cubic interpolation\n+                    x3 = inverted ?\n+                        x1 - C * (x1 - x2) :\n+                        x1 + C * (x2 - x1);\n+                    y3 = computeObjectiveValue(x3);\n                 }\n \n-            } while (Double.isNaN(nextX) && (end - start > 1));\n-\n-            if (Double.isNaN(nextX)) {\n-                // fall back to bisection\n-                nextX = xA + 0.5 * (xB - xA);\n-                start = signChangeIndex - 1;\n-                end   = signChangeIndex;\n-            }\n-\n-            // evaluate the function at the guessed root\n-            final double nextY = computeObjectiveValue(nextX);\n-            if (Precision.equals(nextY, 0.0, 1)) {\n-                // we have found an exact root, since it is not an approximation\n-                // we don't need to bother about the allowed solutions setting\n-                return nextX;\n+            } else {\n+                // one of the endpoints is a root\n+                return y1 < y2 ? x1 : x2;\n             }\n \n-            if ((nbPoints > 2) && (end - start != nbPoints)) {\n-\n-                // we have been forced to ignore some points to keep bracketing,\n-                // they are probably too far from the root, drop them from now on\n-                nbPoints = end - start;\n-                System.arraycopy(x, start, x, 0, nbPoints);\n-                System.arraycopy(y, start, y, 0, nbPoints);\n-                signChangeIndex -= start;\n-\n-            } else  if (nbPoints == x.length) {\n-\n-                // we have to drop one point in order to insert the new one\n-                nbPoints--;\n-\n-                // keep the tightest bracketing interval as centered as possible\n-                if (signChangeIndex >= (x.length + 1) / 2) {\n-                    // we drop the lowest point, we have to shift the arrays and the index\n-                    System.arraycopy(x, 1, x, 0, nbPoints);\n-                    System.arraycopy(y, 1, y, 0, nbPoints);\n-                    --signChangeIndex;\n-                }\n+        } else {\n+            // we have converged\n+            return y1 < y2 ? x1 : x2;\n+        }\n \n-            }\n+        // prepare the next iteration\n+        if (inverted) {\n+            x0 = x2;\n+            y0 = y2;\n+            x2 = x3;\n+            y2 = y3;\n+        } else {\n+            x1 = x3;\n+            y1 = y3;\n+        }\n \n-            // insert the last computed point\n-            //(by construction, we know it lies inside the tightest bracketing interval)\n-            System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            x[signChangeIndex] = nextX;\n-            System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);\n-            y[signChangeIndex] = nextY;\n-            ++nbPoints;\n-\n-            // update the bracketing interval\n-            if (nextY * yA <= 0) {\n-                // the sign change occurs before the inserted point\n-                xB = nextX;\n-                yB = nextY;\n-                absYB = FastMath.abs(yB);\n-                ++agingA;\n-                agingB = 0;\n-            } else {\n-                // the sign change occurs after the inserted point\n-                xA = nextX;\n-                yA = nextY;\n-                absYA = FastMath.abs(yA);\n-                agingA = 0;\n-                ++agingB;\n+        if (FastMath.abs(y1) <= FastMath.abs(y2)) {\n+            double tmp = x2;\n+            x2 = x1;\n+            x1 = tmp;\n+            tmp = y2;\n+            y2 = y1;\n+            y1 = tmp;\n+        }\n \n-                // update the sign change index\n-                signChangeIndex++;\n+        if (getMaxEvaluations() - i <= 0) {\n+            throw new TooManyEvaluationsException(getMaxEvaluations());\n+        }\n \n-            }\n+        if (FastMath.abs(x2 - x1) <= FastMath.max(relativeAccuracy * FastMath.abs(x1),\n+                                                   absoluteAccuracy)) {\n+            return y1 < y2 ? x1 : x2;\n+        }\n \n+        if (i >= maximalOrder) {\n+            throw new NumberIsTooLargeException(maximalOrder, i, false);\n         }\n+    }\n+}\n \n+private double solve(double minX, double minY,\n+                     double maxX, double maxY) throws TooManyEvaluationsException {\n+    double a = (maxY - minY) / (maxX - minX);\n+    double b = minY - a * minX;\n+    double xRoot = -b / a;\n+    double yRoot = computeObjectiveValue(xRoot);\n+    if (FastMath.abs(yRoot) <= functionValueAccuracy) {\n+        return xRoot;\n     }\n \n+    // if the cubic interpolation didn't work, fall back to bisection\n+    return 0.5 * (minX + maxX);\n+}\n+\n     /** Guess an x value by n<sup>th</sup> order inverse polynomial interpolation.\n      * <p>\n      * The x value is guessed by evaluating polynomial Q(y) at y = targetY, where Q",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}