{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n  for (DiGraphEdge<Node, Branch> outEdge : getCfg().getOutEdges(cfgNode)) {\n    // Check if any outgoing edge is of type EXCEPTION_EDGE.\n    if(outEdge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..2e0fbcab 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,37 +859,15 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n-    setResolvedTypeInternal(this);\n-\n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-\n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n-\n-    boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n-    }\n-    if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n-    }\n-\n-    if (subTypes != null) {\n-      for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n-      }\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  for (DiGraphEdge<Node, Branch> outEdge : getCfg().getOutEdges(cfgNode)) {\n+    // Check if any outgoing edge is of type EXCEPTION_EDGE.\n+    if(outEdge.getValue() == Branch.ON_EX) {\n+      return true;\n     }\n-\n-    return super.resolveInternal(t, scope);\n   }\n+  return false;\n+}\n \n   @Override\n   public String toDebugHashCodeString() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}