{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Scope;\nimport com.google.javascript.rhino.SimpleDefinitionInfo;\nimport com.google.javascript.rhino.StaticSourceFile;\nimport com.google.javascript.rhino.StaticSymbolTable;\nimport com.google.javascript.rhino.StaticSymbolTable.Symbol;\nimport com.google.javascript.rhino.StaticSymbolTableBuilder;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.SimpleSourceFileScope;\nimport com.google.javascript.rhino.jstype.StaticScope;\nimport com.google.javascript.rhino.jstype.StaticScope.Builder;\nimport com.google.javascript.rhino.jstype.StaticTypedSlot;\nimport java.util.ArrayList;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Objects;\nimport java.util.Set;\n\n/**\n * A transformer to remove unused parameters of a function.\n */\npublic class RemoveUnusedFunctionArgs implements HotSwapCompilerPass {\n\n  private AbstractCompiler compiler;\n  private final boolean modifyCallSites;\n  private final CallSiteOptimizationPass callSiteOptimizer;\n  private final ImmutableSet<Var> referenced;\n  private StaticSymbolTableBuilder symbolTableBuilder = null;\n\n  /**\n   * Constructs a RemoveUnusedFunctionArgs object.\n   *\n   * @param compiler The compiler.\n   * @param referenced The referenced variables in the current scope.\n   * @param modifyCallSites Whether to modify callsites.\n   */\n  public RemoveUnusedFunctionArgs(\n      AbstractCompiler compiler, ImmutableSet<Var> referenced, boolean modifyCallSites) {\n    this.compiler = compiler;\n    this.referenced = referenced;\n    this.modifyCallSites = modifyCallSites;\n    callSiteOptimizer = new CallSiteOptimizationPass(compiler);\n  }\n\n  @Override\n  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n    NodeTraversal.traverse(compiler, scriptRoot, new RemoveFunctionCallback());\n  }\n\n  /** @return a symbol table for function arguments that are declared and referenced. */\n  public StaticSymbolTable getSymbolTable() {\n    if (symbolTableBuilder == null) {\n      return null;\n    }\n    return symbolTableBuilder.build();\n  }\n\n  private StaticSymbolTable getFunctionArgsSymbolTable(Node functionNode, Node functionBody) {\n    Objects.requireNonNull(symbolTableBuilder, \"symbolTableBuilder must not be null\");\n    Builder builder = new StaticScope.Builder(\"function args\");\n    Node paramNode = functionNode.getFirstChild().getNext();\n    for (Node child : paramNode.children()) {\n      if (ReferencedSymbolCollector.isSymboReferencedWithScope(child, functionBody, builder)) {\n        Objects.requireNonNull(child.getString(), \"could not retrieve string for node: \" + child);\n        builder.addVariable(child.getString(), StaticTypedSlot.INFERRED_ARGUMENT);\n      }\n    }\n    return builder.build(symbolTableBuilder);\n  }\n\n  /**\n   * For each function declaration found, remove any arguments that are declared but not referenced.\n   */\n  private class RemoveFunctionCallback extends AbstractPostOrderCallback {\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        Scope hoistScope = t.getScope().getParent();\n        Node functionNode = n;\n\n        Preconditions.checkState(n.getParent().getLastChild() == n);\n\n        Node bodyNode = n.getLastChild();\n        List<Node> paramNodes = new ArrayList<>();\n        for (Node paramNode = n.getSecondChild().getFirstChild();\n            paramNode != null;\n            paramNode = paramNode.getNext()) {\n          paramNodes.add(paramNode);\n        }\n\n        if (referenced.containsAll(\n            Scope.getVarIterable(hoistScope.getDeclarativeScopeRoots()))) {\n          // The function does not reference any variable, thus remove all the parameters.\n          if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(n)) {\n            for (Node paramNode : paramNodes) {\n              paramNode.detach();\n              compiler.reportChangeToEnclosingScope(paramNode);\n            }\n          } else {\n            callSiteOptimizer.optimize(hoistScope, referenced);\n          }\n          return;\n        }\n\n        symbolTableBuilder = new StaticSymbolTableBuilder();\n        StaticScope functionScope = new SimpleSourceFileScope(\n            new StaticSourceFile(\"function \" + n.getFirstChild().getString()));\n        symbolTableBuilder.addSymbols(functionScope, new HashSet<>(paramNodes));\n\n        if (removeUnreferencedFunctionArgs(hoistScope, functionNode, bodyNode)) {\n          // If the parameter list was changed then refresh the symbol table.\n          StaticSymbolTable paramTable = getFunctionArgsSymbolTable(functionNode, bodyNode);\n          if (paramTable != null) {\n            functionNode.setJSType(paramTable.getTypeOfThis());\n          }\n        }\n\n        symbolTableBuilder = null;\n\n        if (modifyCallSites && callSiteOptimizer.canModifyCallers(n)) {\n          callSiteOptimizer.optimize(hoistScope, referenced);\n        }\n      }\n    }\n\n    private boolean removeUnreferencedFunctionArgs(Scope fnScope, Node cfgNode, Node cfgBody) {\n      Preconditions.checkState(cfgNode.isFunction());\n      if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return false;\n      }\n      Node argList = cfgNode.getFirstChild().getNext();\n      List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n      boolean hasExceptionHandler = false;\n      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n          hasExceptionHandler = true;\n          break;\n        }\n      }\n      if (hasExceptionHandler) {\n        // Do not remove any arg if the function has an exception handler (try-catch).\n        return false;\n      }\n      boolean changed = false;\n      int i = 0;\n      for (Node arg : argList.children()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n          arg.detach();\n          changed = true;\n        } else {\n          // Stop processing the argument list after the first argument\n          // which is referenced.\n          break;\n        }\n        i++;\n      }\n      if (changed) {\n        // Update the parameter count if argument list was changed.\n        cfgNode.putProp(Node.FUNCTION_ARGUMENTS_PROP, i);\n        compiler.reportCodeChange();\n      }\n      return true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b2c813da 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,175 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Scope;\n+import com.google.javascript.rhino.SimpleDefinitionInfo;\n+import com.google.javascript.rhino.StaticSourceFile;\n+import com.google.javascript.rhino.StaticSymbolTable;\n+import com.google.javascript.rhino.StaticSymbolTable.Symbol;\n+import com.google.javascript.rhino.StaticSymbolTableBuilder;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.SimpleSourceFileScope;\n+import com.google.javascript.rhino.jstype.StaticScope;\n+import com.google.javascript.rhino.jstype.StaticScope.Builder;\n+import com.google.javascript.rhino.jstype.StaticTypedSlot;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A transformer to remove unused parameters of a function.\n+ */\n+public class RemoveUnusedFunctionArgs implements HotSwapCompilerPass {\n+\n+  private AbstractCompiler compiler;\n+  private final boolean modifyCallSites;\n+  private final CallSiteOptimizationPass callSiteOptimizer;\n+  private final ImmutableSet<Var> referenced;\n+  private StaticSymbolTableBuilder symbolTableBuilder = null;\n+\n+  /**\n+   * Constructs a RemoveUnusedFunctionArgs object.\n+   *\n+   * @param compiler The compiler.\n+   * @param referenced The referenced variables in the current scope.\n+   * @param modifyCallSites Whether to modify callsites.\n+   */\n+  public RemoveUnusedFunctionArgs(\n+      AbstractCompiler compiler, ImmutableSet<Var> referenced, boolean modifyCallSites) {\n+    this.compiler = compiler;\n+    this.referenced = referenced;\n+    this.modifyCallSites = modifyCallSites;\n+    callSiteOptimizer = new CallSiteOptimizationPass(compiler);\n+  }\n+\n+  @Override\n+  public void hotSwapScript(Node scriptRoot, Node originalRoot) {\n+    NodeTraversal.traverse(compiler, scriptRoot, new RemoveFunctionCallback());\n+  }\n+\n+  /** @return a symbol table for function arguments that are declared and referenced. */\n+  public StaticSymbolTable getSymbolTable() {\n+    if (symbolTableBuilder == null) {\n+      return null;\n+    }\n+    return symbolTableBuilder.build();\n+  }\n+\n+  private StaticSymbolTable getFunctionArgsSymbolTable(Node functionNode, Node functionBody) {\n+    Objects.requireNonNull(symbolTableBuilder, \"symbolTableBuilder must not be null\");\n+    Builder builder = new StaticScope.Builder(\"function args\");\n+    Node paramNode = functionNode.getFirstChild().getNext();\n+    for (Node child : paramNode.children()) {\n+      if (ReferencedSymbolCollector.isSymboReferencedWithScope(child, functionBody, builder)) {\n+        Objects.requireNonNull(child.getString(), \"could not retrieve string for node: \" + child);\n+        builder.addVariable(child.getString(), StaticTypedSlot.INFERRED_ARGUMENT);\n+      }\n+    }\n+    return builder.build(symbolTableBuilder);\n+  }\n+\n+  /**\n+   * For each function declaration found, remove any arguments that are declared but not referenced.\n+   */\n+  private class RemoveFunctionCallback extends AbstractPostOrderCallback {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.isFunction()) {\n+        Scope hoistScope = t.getScope().getParent();\n+        Node functionNode = n;\n+\n+        Preconditions.checkState(n.getParent().getLastChild() == n);\n+\n+        Node bodyNode = n.getLastChild();\n+        List<Node> paramNodes = new ArrayList<>();\n+        for (Node paramNode = n.getSecondChild().getFirstChild();\n+            paramNode != null;\n+            paramNode = paramNode.getNext()) {\n+          paramNodes.add(paramNode);\n+        }\n+\n+        if (referenced.containsAll(\n+            Scope.getVarIterable(hoistScope.getDeclarativeScopeRoots()))) {\n+          // The function does not reference any variable, thus remove all the parameters.\n+          if (!modifyCallSites || !callSiteOptimizer.canModifyCallers(n)) {\n+            for (Node paramNode : paramNodes) {\n+              paramNode.detach();\n+              compiler.reportChangeToEnclosingScope(paramNode);\n+            }\n+          } else {\n+            callSiteOptimizer.optimize(hoistScope, referenced);\n+          }\n+          return;\n+        }\n+\n+        symbolTableBuilder = new StaticSymbolTableBuilder();\n+        StaticScope functionScope = new SimpleSourceFileScope(\n+            new StaticSourceFile(\"function \" + n.getFirstChild().getString()));\n+        symbolTableBuilder.addSymbols(functionScope, new HashSet<>(paramNodes));\n+\n+        if (removeUnreferencedFunctionArgs(hoistScope, functionNode, bodyNode)) {\n+          // If the parameter list was changed then refresh the symbol table.\n+          StaticSymbolTable paramTable = getFunctionArgsSymbolTable(functionNode, bodyNode);\n+          if (paramTable != null) {\n+            functionNode.setJSType(paramTable.getTypeOfThis());\n+          }\n+        }\n+\n+        symbolTableBuilder = null;\n+\n+        if (modifyCallSites && callSiteOptimizer.canModifyCallers(n)) {\n+          callSiteOptimizer.optimize(hoistScope, referenced);\n+        }\n+      }\n+    }\n+\n+    private boolean removeUnreferencedFunctionArgs(Scope fnScope, Node cfgNode, Node cfgBody) {\n+      Preconditions.checkState(cfgNode.isFunction());\n+      if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return false;\n+      }\n+      Node argList = cfgNode.getFirstChild().getNext();\n+      List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n+      boolean hasExceptionHandler = false;\n+      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+          hasExceptionHandler = true;\n+          break;\n+        }\n+      }\n+      if (hasExceptionHandler) {\n+        // Do not remove any arg if the function has an exception handler (try-catch).\n+        return false;\n+      }\n+      boolean changed = false;\n+      int i = 0;\n+      for (Node arg : argList.children()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+          arg.detach();\n+          changed = true;\n+        } else {\n+          // Stop processing the argument list after the first argument\n+          // which is referenced.\n+          break;\n+        }\n+        i++;\n+      }\n+      if (changed) {\n+        // Update the parameter count if argument list was changed.\n+        cfgNode.putProp(Node.FUNCTION_ARGUMENTS_PROP, i);\n+        compiler.reportCodeChange();\n+      }\n+      return true;\n+    }\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}