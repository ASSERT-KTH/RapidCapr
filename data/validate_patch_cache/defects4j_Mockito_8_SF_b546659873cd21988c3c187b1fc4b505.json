{
    "patch": "if (!(classType instanceof ParameterizedType)) {\n    return;\n}\nParameterizedType parameterizedType = (ParameterizedType) classType;\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nTypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\nif (actualTypeArguments.length != typeParameters.length) {\n    return;\n}\nfor (int i = 0; i < actualTypeArguments.length; i++) {\n    Type actualTypeArgument = actualTypeArguments[i];\n    TypeVariable<?> typeParameter = typeParameters[i];\n    if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        Type resolvedActualTypeArgument = this.contextualActualTypeParameters.get(actualTypeVariable);\n        if (resolvedActualTypeArgument == null) {\n            resolvedActualTypeArgument = actualTypeArgument;\n        }\n        //update actualTypeArgument so that actualTypeArgument is no longer an instance of TypeVariable\n        actualTypeArgument = resolvedActualTypeArgument;\n    }\n    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..f104007a7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,29 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+if (!(classType instanceof ParameterizedType)) {\n+    return;\n+}\n+ParameterizedType parameterizedType = (ParameterizedType) classType;\n+Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+if (actualTypeArguments.length != typeParameters.length) {\n+    return;\n+}\n+for (int i = 0; i < actualTypeArguments.length; i++) {\n+    Type actualTypeArgument = actualTypeArguments[i];\n+    TypeVariable<?> typeParameter = typeParameters[i];\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        Type resolvedActualTypeArgument = this.contextualActualTypeParameters.get(actualTypeVariable);\n+        if (resolvedActualTypeArgument == null) {\n+            resolvedActualTypeArgument = actualTypeArgument;\n+        }\n+        //update actualTypeArgument so that actualTypeArgument is no longer an instance of TypeVariable\n+        actualTypeArgument = resolvedActualTypeArgument;\n+    }\n+    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : '? super java.lang.Number'",
    "test_result": "FAIL"
}