{
    "patch": " DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono,\n            iLocale, iPivotYear, iDefaultYear,\n            bucket.getPivotYear(), bucket.getDefaultYear(),\n            chrono.dayOfMonth().roundCeiling(instantLocal), null,\n            iOffsetParsed ? Integer.valueOf(bucket.getOffsetTotalMillis()) : null);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..e8f8c1e3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,12 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+ DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, chrono,\n+            iLocale, iPivotYear, iDefaultYear,\n+            bucket.getPivotYear(), bucket.getDefaultYear(),\n+            chrono.dayOfMonth().roundCeiling(instantLocal), null,\n+            iOffsetParsed ? Integer.valueOf(bucket.getOffsetTotalMillis()) : null);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}