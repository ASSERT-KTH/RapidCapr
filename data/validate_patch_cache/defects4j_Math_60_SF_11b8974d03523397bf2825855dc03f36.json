{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n\n    final double dev = x - mean;\n\n    if (FastMath.abs(dev) > 40 * standardDeviation) {\n        return dev < 0 ? 0.0 : 1.0;\n    }\n\n    double result;\n    try {\n        result = 0.5 * (1.0 + Erf.erf(de",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..dbedb45e3 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,22 +121,21 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n-        }\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n     }\n \n+    final double dev = x - mean;\n+\n+    if (FastMath.abs(dev) > 40 * standardDeviation) {\n+        return dev < 0 ? 0.0 : 1.0;\n+    }\n+\n+    double result;\n+    try {\n+        result = 0.5 * (1.0 + Erf.erf(de\n+\n     /**\n      * Return the absolute accuracy setting of the solver used to estimate\n      * inverse cumulative probabilities.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}