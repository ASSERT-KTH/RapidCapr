{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        Object varArgObject = null;\n        if (isVariableArgument(invocation, indexOfVararg)) {\n            varArgObject = rawArguments[indexOfVararg];\n            // Need to create object array for primitives and null values\n            if (varArgObject != null && varArgObject.getClass().isArray()) {\n                int varArgLength = Array.getLength(varArgObject);\n                Object[] varArgArray = new Object[varArgLength];\n                for (int i = 0; i < varArgLength; i++) {\n                    varArgArray[i] = Array.get(varArgObject, i);\n                }\n                varArgObject = varArgArray;\n            } else if (varArgObject == null) {\n                varArgObject = new Object[]{null};\n            } else {\n                varArgObject = new Object[]{varArgObject};\n            }\n        }\n        for (int i = 0; i < matchers.size(); i++) {\n            Matcher m = matchers.get(i);\n            if (m instanceof CapturesArguments) {\n                Object arg;\n                if (i == indexOfVararg && isVarargMatcher(m)) {\n                    arg = varArgObject;\n                } else {\n                    arg = invocation.getArgumentAt(i, Object.class);\n                }\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..45c43fa22 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,36 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        Object varArgObject = null;\n+        if (isVariableArgument(invocation, indexOfVararg)) {\n+            varArgObject = rawArguments[indexOfVararg];\n+            // Need to create object array for primitives and null values\n+            if (varArgObject != null && varArgObject.getClass().isArray()) {\n+                int varArgLength = Array.getLength(varArgObject);\n+                Object[] varArgArray = new Object[varArgLength];\n+                for (int i = 0; i < varArgLength; i++) {\n+                    varArgArray[i] = Array.get(varArgObject, i);\n+                }\n+                varArgObject = varArgArray;\n+            } else if (varArgObject == null) {\n+                varArgObject = new Object[]{null};\n+            } else {\n+                varArgObject = new Object[]{varArgObject};\n+            }\n+        }\n+        for (int i = 0; i < matchers.size(); i++) {\n+            Matcher m = matchers.get(i);\n+            if (m instanceof CapturesArguments) {\n+                Object arg;\n+                if (i == indexOfVararg && isVarargMatcher(m)) {\n+                    arg = varArgObject;\n+                } else {\n+                    arg = invocation.getArgumentAt(i, Object.class);\n+                }\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}