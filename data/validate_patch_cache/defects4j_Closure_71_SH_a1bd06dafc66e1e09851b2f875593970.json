{
    "patch": "boolean isOverride = t.inGlobalScope() &&\n    parent.isAssign() &&\n    parent.getFirstChild().isGetProp() &&\n    parent.getFirstChild().getJSType() == null && // Ensure that this is not a type definition.\n    parent.getFirstChild().getLastChild().getString().equals(propertyName) &&\n    parent.getFirstChild().getFirstChild().isGetProp() &&\n    parent.getFirstChild().getFirstChild().getJSType() != null &&\n    normalizeClassType(objectType).isSubtype(\n        // Normalize the type of the object that owns the method to handle nested classes.\n        normalizeClassType(\n            ObjectType.cast(\n                parent.getFirstChild().getFirstChild().getJSType()))) &&\n    parent.getParent() != null &&\n    parent.getParent().isExprResult();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..0964cb09 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,20 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = t.inGlobalScope() &&\n+    parent.isAssign() &&\n+    parent.getFirstChild().isGetProp() &&\n+    parent.getFirstChild().getJSType() == null && // Ensure that this is not a type definition.\n+    parent.getFirstChild().getLastChild().getString().equals(propertyName) &&\n+    parent.getFirstChild().getFirstChild().isGetProp() &&\n+    parent.getFirstChild().getFirstChild().getJSType() != null &&\n+    normalizeClassType(objectType).isSubtype(\n+        // Normalize the type of the object that owns the method to handle nested classes.\n+        normalizeClassType(\n+            ObjectType.cast(\n+                parent.getFirstChild().getFirstChild().getJSType()))) &&\n+    parent.getParent() != null &&\n+    parent.getParent().isExprResult();\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}