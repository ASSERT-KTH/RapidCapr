{
    "patch": "if (hasInfiniteBounds) {\n    // If there is at least one finite bound, none can be infinite,\n    // because mixed cases are not supported by the current code.\n    throw new MathUnsupportedOperationException();\n} else {\n    // Convert API to internal handling of boundaries.\n    boundaries = new double[2][];\n    boundaries[0] = lB;\n    boundaries[1] = uB;\n\n    // Abort early if the normalization will overflow (cf. \"encode\" method).\n    final int len = init.length;\n    for (int i = 0; i < len; i++) {\n        if (Double.isInfinite(init[i]) ||\n            Double.isNaN(init[i])) {\n            throw new IllegalArgumentException(\"Invalid initial value: \" + init[i]);\n        }\n        if (Double.isNaN(lB[i])) {\n            init[i] = uB[i];\n        } else if (Double.isNaN(uB[i])) {\n            init[i] = lB[i];\n        } else {\n\n            // Translate the initial guess to the unrestricted (intermediate)\n            // optimization space, and normalize it inside the hypercube.\n            final double normalized = (init[i] - lB[i]) / (uB[i] - lB[i]);\n            final double transformed = (normalized * 2 - 1) * FastMath.PI / 2;\n\n            // Setting the first point for the unbounded problem.\n            init[i] = FastMath.atan(transformed);\n        }\n    }\n    if (Double.isNaN(target)) {\n        for (int i = 0; i < getStartPoint().length; i++) {\n            if (Double.isNaN(init[i])) {\n                throw new MathIllegalStateException(LocalizedFormats.INITIAL_GUESS_NOT_SPECIFIED_FOR_ALL_COORDINATES);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..a37314cd1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,46 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (hasInfiniteBounds) {\n+    // If there is at least one finite bound, none can be infinite,\n+    // because mixed cases are not supported by the current code.\n+    throw new MathUnsupportedOperationException();\n+} else {\n+    // Convert API to internal handling of boundaries.\n+    boundaries = new double[2][];\n+    boundaries[0] = lB;\n+    boundaries[1] = uB;\n+\n+    // Abort early if the normalization will overflow (cf. \"encode\" method).\n+    final int len = init.length;\n+    for (int i = 0; i < len; i++) {\n+        if (Double.isInfinite(init[i]) ||\n+            Double.isNaN(init[i])) {\n+            throw new IllegalArgumentException(\"Invalid initial value: \" + init[i]);\n+        }\n+        if (Double.isNaN(lB[i])) {\n+            init[i] = uB[i];\n+        } else if (Double.isNaN(uB[i])) {\n+            init[i] = lB[i];\n+        } else {\n+\n+            // Translate the initial guess to the unrestricted (intermediate)\n+            // optimization space, and normalize it inside the hypercube.\n+            final double normalized = (init[i] - lB[i]) / (uB[i] - lB[i]);\n+            final double transformed = (normalized * 2 - 1) * FastMath.PI / 2;\n+\n+            // Setting the first point for the unbounded problem.\n+            init[i] = FastMath.atan(transformed);\n+        }\n+    }\n+    if (Double.isNaN(target)) {\n+        for (int i = 0; i < getStartPoint().length; i++) {\n+            if (Double.isNaN(init[i])) {\n+                throw new MathIllegalStateException(LocalizedFormats.INITIAL_GUESS_NOT_SPECIFIED_FOR_ALL_COORDINATES);\n+            }\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}