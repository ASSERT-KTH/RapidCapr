{
    "patch": "public double getPct(Object v) {\n    if (!isValid(v)) {\n        throw new IllegalArgumentException(\"value not valid\");\n    }\n\n    if (!(v instanceof Comparable<?>)) {\n        throw new IllegalArgumentException(\"value not comparable\");\n    }\n\n    return getCumPct((Comparable<?>) v);\n}\n\nprivate boolean isValid(Object v) {\n    return v == null || v.getClass().isPrimitive() || v instanceof Comparable<?>;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..45d61f497 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,21 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (!isValid(v)) {\n+        throw new IllegalArgumentException(\"value not valid\");\n+    }\n+\n+    if (!(v instanceof Comparable<?>)) {\n+        throw new IllegalArgumentException(\"value not comparable\");\n+    }\n+\n+    return getCumPct((Comparable<?>) v);\n+}\n+\n+private boolean isValid(Object v) {\n+    return v == null || v.getClass().isPrimitive() || v instanceof Comparable<?>;\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}