{
    "patch": "  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    checkNotNull(n.getChildAtIndex(1), \"Missing require argument at node %s\", n);\n\n    if (verifyLastArgumentIsString(t, n.getFirstChild(), n.getSecondChild())) {\n      String namespace = n.getSecondChild().getString();\n      ProvidedName provided = providedNames.get(namespace);\n      if (provided != null) {\n        JSModule providedModule = provided.explicitModule;\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getInput().getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, namespace,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      } else {\n        unrecognizedRequires.add(new UnrecognizedRequire(n, namespace, t.getSourceName()));\n      }\n\n      maybeAddToSymbolTable(n.getFirstChild());\n      maybeAddStringNodeToSymbolTable(n.getSecondChild());\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      if (provided == null && !parent.isFromExterns()) {\n        n.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..62598cb9 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -293,41 +293,38 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n    * Handles a goog.require call.\n    */\n   private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n-    Node left = n.getFirstChild();\n-    Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n+    checkNotNull(n.getChildAtIndex(1), \"Missing require argument at node %s\", n);\n \n-        // This must be non-null, because there was an explicit provide.\n+    if (verifyLastArgumentIsString(t, n.getFirstChild(), n.getSecondChild())) {\n+      String namespace = n.getSecondChild().getString();\n+      ProvidedName provided = providedNames.get(namespace);\n+      if (provided != null) {\n+        JSModule providedModule = provided.explicitModule;\n         Preconditions.checkNotNull(providedModule);\n \n-        JSModule module = t.getModule();\n+        JSModule module = t.getInput().getModule();\n         if (moduleGraph != null &&\n             module != providedModule &&\n             !moduleGraph.dependsOn(module, providedModule)) {\n           compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, namespace,\n                   providedModule.getName(),\n                   module.getName()));\n         }\n+      } else {\n+        unrecognizedRequires.add(new UnrecognizedRequire(n, namespace, t.getSourceName()));\n       }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+      maybeAddToSymbolTable(n.getFirstChild());\n+      maybeAddStringNodeToSymbolTable(n.getSecondChild());\n \n       // Requires should be removed before further processing.\n       // Some clients run closure pass multiple times, first with\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n+      if (provided == null && !parent.isFromExterns()) {\n+        n.detachFromParent();\n         compiler.reportCodeChange();\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}