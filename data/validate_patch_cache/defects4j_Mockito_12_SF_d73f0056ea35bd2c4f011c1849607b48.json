{
    "patch": "```\npublic Class<?> getGenericType(Field field) {        \n    Type generic = field.getGenericType();\n    if (generic instanceof ParameterizedType) {\n        Type actualType = ((ParameterizedType) generic).getActualTypeArguments()[0];\n        while (actualType instanceof ParameterizedType) {\n            actualType = ((ParameterizedType) actualType).getRawType();\n        }\n        if (actualType instanceof Class) {\n            return (Class<?>) actualType;\n        }\n    }\n    return Object.class;\n}\n```\nThis code fixes the issue by handling nested generics correctly and returning the raw type for all types including nested generics.",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMaster.java b/src/org/mockito/internal/util/reflection/GenericMaster.java\nindex 64bf1540f..b72158bdb 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMaster.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMaster.java\n@@ -13,14 +13,20 @@ public class GenericMaster {\n      * @param field\n      * @return\n      */\n-    public Class getGenericType(Field field) {        \n-        Type generic = field.getGenericType();\n-        if (generic != null && generic instanceof ParameterizedType) {\n-            Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0];\n-                return (Class) actual;\n-                //in case of nested generics we don't go deep\n-        }\n-        \n-        return Object.class;\n-    }\n+```\n+public Class<?> getGenericType(Field field) {        \n+    Type generic = field.getGenericType();\n+    if (generic instanceof ParameterizedType) {\n+        Type actualType = ((ParameterizedType) generic).getActualTypeArguments()[0];\n+        while (actualType instanceof ParameterizedType) {\n+            actualType = ((ParameterizedType) actualType).getRawType();\n+        }\n+        if (actualType instanceof Class) {\n+            return (Class<?>) actualType;\n+        }\n+    }\n+    return Object.class;\n+}\n+```\n+This code fixes the issue by handling nested generics correctly and returning the raw type for all types including nested generics.\n }",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}