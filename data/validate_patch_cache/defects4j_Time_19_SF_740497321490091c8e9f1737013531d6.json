{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long startSearch = nextTransition(instantLocal);\n    if (startSearch == instantLocal + MILLIS_PER_HOUR) {\n        return offsetLocal;\n    }\n    long endSearch = previousTransition(instantLocal);\n    if (endSearch == instantLocal - MILLIS_PER_HOUR) {\n        return offsetLocal;\n    }\n    int offsetBefore = getOffset(endSearch);\n    int offsetAfter = getOffset(startSearch);\n    if (offsetBefore > offsetAfter) {\n        // gap\n        long nextLocal = nextTransition(startSearch);\n        if (nextLocal == startSearch + MILLIS_PER_HOUR) {\n            nextLocal = nextTransition(nextLocal);\n        }\n        if (nextLocal > instantLocal) {\n            // affects current instant\n            return offsetLocal;\n        } else {\n            return offsetAfter;\n        }\n    } else if (offsetBefore < offsetAfter) {\n        // overlap\n        long overlapStart = previousTransition(startSearch - 1);\n        long overlapEnd = nextTransition(endSearch + 1);\n        int overlapOffsetBefore = getOffset(overlapStart);\n        int overlapOffsetAfter = getOffset(overlapEnd);\n        if (overlapOffsetAfter == overlapOffsetBefore) {\n            return offsetLocal;\n        }\n        if (instantLocal < overlapEnd) {\n            // before overlap - pre-transition\n            if (offsetBefore == offsetLocal) {\n                // in standard time before gap\n                return offsetBefore;\n            } else {\n                // in overlapped time before gap\n                long overlapMillis = overlapEnd - overlapStart;\n                long overlapNowMillis = instantLocal - overlapStart;\n                return (int) (((overlapNowMillis * (long) offsetBefore) + ((overlapMillis - overlapNowMillis) * (long) offsetAfter)) / overlapMillis);\n            }\n        } else {\n            // after overlap - post-transition\n            if (offsetAfter == offsetLocal) {\n                // in standard time after overlap\n                return offsetAfter;\n            } else {\n                // in overlapped time after overlap\n                long overlapMillis = overlapEnd - overlapStart;\n                long overlapNowMillis = instantLocal - overlapStart;\n                return (int) (((overlapNowMillis * (long) offsetAfter) + ((overlapMillis - overlapNowMillis) * (long) offsetBefore)) / overlapMillis);\n            }\n        }\n    } else {\n        // normal (neither gap nor overlap)\n        return offsetBefore;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6e8f1c1d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,67 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long startSearch = nextTransition(instantLocal);\n+    if (startSearch == instantLocal + MILLIS_PER_HOUR) {\n+        return offsetLocal;\n+    }\n+    long endSearch = previousTransition(instantLocal);\n+    if (endSearch == instantLocal - MILLIS_PER_HOUR) {\n+        return offsetLocal;\n+    }\n+    int offsetBefore = getOffset(endSearch);\n+    int offsetAfter = getOffset(startSearch);\n+    if (offsetBefore > offsetAfter) {\n+        // gap\n+        long nextLocal = nextTransition(startSearch);\n+        if (nextLocal == startSearch + MILLIS_PER_HOUR) {\n+            nextLocal = nextTransition(nextLocal);\n+        }\n+        if (nextLocal > instantLocal) {\n+            // affects current instant\n+            return offsetLocal;\n+        } else {\n+            return offsetAfter;\n+        }\n+    } else if (offsetBefore < offsetAfter) {\n+        // overlap\n+        long overlapStart = previousTransition(startSearch - 1);\n+        long overlapEnd = nextTransition(endSearch + 1);\n+        int overlapOffsetBefore = getOffset(overlapStart);\n+        int overlapOffsetAfter = getOffset(overlapEnd);\n+        if (overlapOffsetAfter == overlapOffsetBefore) {\n+            return offsetLocal;\n+        }\n+        if (instantLocal < overlapEnd) {\n+            // before overlap - pre-transition\n+            if (offsetBefore == offsetLocal) {\n+                // in standard time before gap\n+                return offsetBefore;\n+            } else {\n+                // in overlapped time before gap\n+                long overlapMillis = overlapEnd - overlapStart;\n+                long overlapNowMillis = instantLocal - overlapStart;\n+                return (int) (((overlapNowMillis * (long) offsetBefore) + ((overlapMillis - overlapNowMillis) * (long) offsetAfter)) / overlapMillis);\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        } else {\n+            // after overlap - post-transition\n+            if (offsetAfter == offsetLocal) {\n+                // in standard time after overlap\n+                return offsetAfter;\n+            } else {\n+                // in overlapped time after overlap\n+                long overlapMillis = overlapEnd - overlapStart;\n+                long overlapNowMillis = instantLocal - overlapStart;\n+                return (int) (((overlapNowMillis * (long) offsetAfter) + ((overlapMillis - overlapNowMillis) * (long) offsetBefore)) / overlapMillis);\n             }\n         }\n-        return offsetAdjusted;\n+    } else {\n+        // normal (neither gap nor overlap)\n+        return offsetBefore;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}