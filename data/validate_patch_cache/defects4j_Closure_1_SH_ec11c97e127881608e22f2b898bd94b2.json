{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    // compute referenced vars\n    final Set<Var> referenced = new HashSet<>();\n    NodeTraversal.traverse(fnScope.getRootNode(), new AbstractShallowCallback() {\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.isName()) {\n          Var var = t.getScope().getVar(n.getString());\n          if (var != null) {\n            referenced.add(var);\n          }\n        }\n      }\n    });\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // compute which arguments to keep\n    Set<String> keepArgs = new HashSet<>();\n    for (Var var : referenced) {\n      if (var.isParam()) {\n        keepArgs.add(var.getName());\n      }\n    }\n\n    // Remove unreferenced args\n    for (Node child = argList.getFirstChild(); child != null; ) {\n      Node next = child.getNext();\n      String name = child.getString();\n      if (!keepArgs.contains(name)) {\n        argList.removeChild(child);\n        compiler.reportCodeChange();\n      }\n      child = next;\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1e3d89bf 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,66 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    // compute referenced vars\n+    final Set<Var> referenced = new HashSet<>();\n+    NodeTraversal.traverse(fnScope.getRootNode(), new AbstractShallowCallback() {\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.isName()) {\n+          Var var = t.getScope().getVar(n.getString());\n+          if (var != null) {\n+            referenced.add(var);\n+          }\n+        }\n+      }\n+    });\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // compute which arguments to keep\n+    Set<String> keepArgs = new HashSet<>();\n+    for (Var var : referenced) {\n+      if (var.isParam()) {\n+        keepArgs.add(var.getName());\n+      }\n+    }\n+\n+    // Remove unreferenced args\n+    for (Node child = argList.getFirstChild(); child != null; ) {\n+      Node next = child.getNext();\n+      String name = child.getString();\n+      if (!keepArgs.contains(name)) {\n+        argList.removeChild(child);\n+        compiler.reportCodeChange();\n+      }\n+      child = next;\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}