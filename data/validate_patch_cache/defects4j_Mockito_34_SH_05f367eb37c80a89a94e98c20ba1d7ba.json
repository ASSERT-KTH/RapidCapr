{
    "patch": "        for (int k = 0; k < i.getArguments().length; k++) {\n            final int argIndex = k;\n            Matcher m = matchers.stream().filter(matcher -> matcher instanceof CapturesArguments)\n                    .skip(argIndex).findFirst().orElse(null);\n            if (m != null) {\n                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..69d17abc6 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -99,14 +99,20 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n     public String toString(PrintSettings printSettings) {\n         return invocation.toString(matchers, printSettings);\n     }\n-\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n+        for (int k = 0; k < i.getArguments().length; k++) {\n+            final int argIndex = k;\n+            Matcher m = matchers.stream().filter(matcher -> matcher instanceof CapturesArguments)\n+                    .skip(argIndex).findFirst().orElse(null);\n+            if (m != null) {\n+                ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n+            }\n+        }\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}