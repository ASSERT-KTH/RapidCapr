{
    "patch": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, \n                                char[] chars, Random random) {\n        if (count == 0) {\n            return \"\";\n        } else if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = Character.MAX_CODE_POINT + 1;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            }\n        }\n\n        char[] buffer = new char[count];\n        int bufferIndex = 0;\n\n        int[] codePoints = random.ints(count, start, end)\n                .filter(c -> !Character.isSurrogate((char)c))\n                .toArray();\n\n        for (int codePoint : codePoints) {\n            int codeUnitCount = Character.toChars(codePoint, buffer, bufferIndex);\n            bufferIndex += codeUnitCount;\n        }\n\n        return new String(buffer, 0, bufferIndex);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a7990575..f5c57c21 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -242,6 +242,44 @@ public class RandomStringUtils {\n                     start = ' ';                \n                 }\n             }\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, \n+                                char[] chars, Random random) {\n+        if (count == 0) {\n+            return \"\";\n+        } else if (count < 0) {\n+            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+        }\n+        if (chars != null && chars.length == 0) {\n+            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+        }\n+\n+        if (start == 0 && end == 0) {\n+            if (chars != null) {\n+                end = chars.length;\n+            } else {\n+                if (!letters && !numbers) {\n+                    end = Character.MAX_CODE_POINT + 1;\n+                } else {\n+                    end = 'z' + 1;\n+                    start = ' ';\n+                }\n+            }\n+        }\n+\n+        char[] buffer = new char[count];\n+        int bufferIndex = 0;\n+\n+        int[] codePoints = random.ints(count, start, end)\n+                .filter(c -> !Character.isSurrogate((char)c))\n+                .toArray();\n+\n+        for (int codePoint : codePoints) {\n+            int codeUnitCount = Character.toChars(codePoint, buffer, bufferIndex);\n+            bufferIndex += codeUnitCount;\n+        }\n+\n+        return new String(buffer, 0, bufferIndex);\n+    }\n         }\n \n         char[] buffer = new char[count];",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}