{
    "patch": "        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // ... existing code ...\n          if (parent.getFirstChild().getNext() != n) {\n            // ... existing code ...\n          } else if (!parent.isCall()) {\n            recordDepScope(nameNode, ns);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..0c734db0 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,14 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+          // ... existing code ...\n+          if (parent.getFirstChild().getNext() != n) {\n+            // ... existing code ...\n+          } else if (!parent.isCall()) {\n+            recordDepScope(nameNode, ns);\n+          }\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}