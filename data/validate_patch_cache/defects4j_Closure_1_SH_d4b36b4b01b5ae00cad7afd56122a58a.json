{
    "patch": "    Preconditions.checkState(fnScope.getRootNode().isFunction());\n    if (NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = fnScope.getRootNode().getSecondChild();\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode(), referenced);\n    if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        while (argList.getLastChild() != null) {\n            Node lastArg = argList.getLastChild();\n            String argName = lastArg.getString();\n            if (!referenced.contains(fnScope.getVar(argName))) {\n                argList.removeChild(lastArg);\n                compiler.reportCodeChange();\n            } else {\n                break;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..78d19d6e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,29 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(fnScope.getRootNode().isFunction());\n+    if (NodeUtil.isGetOrSetKey(fnScope.getRootNode().getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+    }\n+\n+    Node argList = fnScope.getRootNode().getSecondChild();\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode(), referenced);\n+    if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        while (argList.getLastChild() != null) {\n+            Node lastArg = argList.getLastChild();\n+            String argName = lastArg.getString();\n+            if (!referenced.contains(fnScope.getVar(argName))) {\n+                argList.removeChild(lastArg);\n+                compiler.reportCodeChange();\n+            } else {\n+                break;\n+            }\n+        }\n+    } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}