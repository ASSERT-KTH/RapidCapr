{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        Branch branch = edge.getValue();\n        if (branch == Branch.ON_EX || branch == Branch.EXCEPTION) {\n            return true;\n        }\n        if (branch == Branch.UNCOND) {\n            Node succNode = edge.getDestination();\n            if (getCfg().getEntry().equals(succNode)) {\n                return true;\n            }\n            return hasExceptionHandler(succNode);\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..ce14dcae 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,23 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        Branch branch = edge.getValue();\n+        if (branch == Branch.ON_EX || branch == Branch.EXCEPTION) {\n+            return true;\n+        }\n+        if (branch == Branch.UNCOND) {\n+            Node succNode = edge.getDestination();\n+            if (getCfg().getEntry().equals(succNode)) {\n+                return true;\n+            }\n+            return hasExceptionHandler(succNode);\n+        }\n     }\n+    return false;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: ChainableReverseAbstractInterpreter.RestrictByOneTypeOfResultVisitor is not abstract and does not override abstract method caseObjectType(ObjectType) in Visitor",
    "test_result": "ERROR"
}