{
    "patch": "public Dfp multiplyFast(final int multiplicand) {\n    if (multiplicand < 0) {\n        return negate().multiplyFast(-multiplicand);\n    }\n\n    if (nans != 0) {\n        return newInstance(this);\n    }\n\n    final Dfp result = newInstance(this);\n\n    int rh;\n\n    int in = multiplicand;\n\n    for (int i = 0; i < result.mant.length; i++) {\n\n        rh = 0;\n\n        if (in != 0) {\n            rh = result.mant[i] * in;\n        }\n\n        rh += result.field.getRadixDigit(result.nans == 0 ? result.mant[i] : 0, 0);\n        result.mant[i] = result.field.getLeastSignificantDigits(rh);\n    }\n\n    if (result.mant[result.mant.length - 1] == 0) {\n        result.round(MathContext.UNLIMITED);\n    }\n\n    return dotrap(DfpTrapping.NONFINITE, \"ln\", result);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..85e8bfe4e 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,40 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+public Dfp multiplyFast(final int multiplicand) {\n+    if (multiplicand < 0) {\n+        return negate().multiplyFast(-multiplicand);\n+    }\n+\n+    if (nans != 0) {\n+        return newInstance(this);\n+    }\n+\n+    final Dfp result = newInstance(this);\n+\n+    int rh;\n+\n+    int in = multiplicand;\n+\n+    for (int i = 0; i < result.mant.length; i++) {\n+\n+        rh = 0;\n+\n+        if (in != 0) {\n+            rh = result.mant[i] * in;\n         }\n-        \n-        return new double[]{a, b};\n+\n+        rh += result.field.getRadixDigit(result.nans == 0 ? result.mant[i] : 0, 0);\n+        result.mant[i] = result.field.getLeastSignificantDigits(rh);\n     }\n \n+    if (result.mant[result.mant.length - 1] == 0) {\n+        result.round(MathContext.UNLIMITED);\n+    }\n+\n+    return dotrap(DfpTrapping.NONFINITE, \"ln\", result);\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}