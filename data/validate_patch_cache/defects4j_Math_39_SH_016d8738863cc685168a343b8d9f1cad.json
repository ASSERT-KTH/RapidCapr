{
    "patch": "double dot = 0;\nfor (int j = 0; j < y0.length; ++j) {\n    double sum    = b[0] * yDotK[0][j];\n    for (int l = 1; l < stages; ++l) {\n        sum    += b[l] * yDotK[l][j];\n    }\n    yTmp[j] = y[j] + stepSize * sum;\n    dot += FastMath.abs(y[j])+FastMath.abs(stepSize * sum) * (b[0]+b[1]+b[2]); \n}\n// estimate the error at the end of the step\nerror = dot * scalRelativeTolerance / (vecRelativeTolerance == null ? 1. : vecRelativeTolerance[0] + vecRelativeTolerance[1]); ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..79eb13d00 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,17 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+double dot = 0;\n+for (int j = 0; j < y0.length; ++j) {\n+    double sum    = b[0] * yDotK[0][j];\n+    for (int l = 1; l < stages; ++l) {\n+        sum    += b[l] * yDotK[l][j];\n+    }\n+    yTmp[j] = y[j] + stepSize * sum;\n+    dot += FastMath.abs(y[j])+FastMath.abs(stepSize * sum) * (b[0]+b[1]+b[2]); \n+}\n+// estimate the error at the end of the step\n+error = dot * scalRelativeTolerance / (vecRelativeTolerance == null ? 1. : vecRelativeTolerance[0] + vecRelativeTolerance[1]); \n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}