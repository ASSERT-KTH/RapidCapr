{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String calledFuncName = child.getString();\n        changed.add(calledFuncName);\n        Node scope = node.getEnclosingScope();\n        CompilerInput input = scope.getInput();\n        if (input != null && input.isExtern()) {\n          // Add a new reference for each occurrence of an extern function.\n          List<Var> vars = externs.getVarsWithName(calledFuncName);\n          if (vars != null) {\n            for (Var var : vars) {\n              Ref ref = var.getDeclaration();\n              if (ref == null) {\n                ref = var.getNameNode();\n              }\n              if (ref.getRoot() == node.getRoot()) {\n                changed.add(ref.getQualifier());\n              }\n            }\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..da253a25 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,32 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String calledFuncName = child.getString();\n+        changed.add(calledFuncName);\n+        Node scope = node.getEnclosingScope();\n+        CompilerInput input = scope.getInput();\n+        if (input != null && input.isExtern()) {\n+          // Add a new reference for each occurrence of an extern function.\n+          List<Var> vars = externs.getVarsWithName(calledFuncName);\n+          if (vars != null) {\n+            for (Var var : vars) {\n+              Ref ref = var.getDeclaration();\n+              if (ref == null) {\n+                ref = var.getNameNode();\n+              }\n+              if (ref.getRoot() == node.getRoot()) {\n+                changed.add(ref.getQualifier());\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}