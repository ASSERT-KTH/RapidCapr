{
    "patch": "    private static synchronized String getConvertedId(String id) {\n        Map<String, String> map = cZoneIdConversion;\n        if (map == null) {\n            // Backwards compatibility with TimeZone.\n            map = new HashMap<String, String>();\n            map.put(\"GMT\", \"Etc/GMT\");\n            map.put(\"MIT\", \"Pacific/Apia\");\n            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n            map.put(\"AST\", \"America/Anchorage\");\n            map.put(\"PST\", \"America/Los_Angeles\");\n            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n            map.put(\"PNT\", \"America/Phoenix\");\n            map.put(\"CST\", \"America/Chicago\");\n            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n            map.put(\"IET\", \"America/Indianapolis\");\n            map.put(\"PRT\", \"America/Puerto_Rico\");\n            map.put(\"CNT\", \"America/St_Johns\");\n            map.put(\"AGT\", \"America/Buenos_Aires\");\n            map.put(\"BET\", \"America/Sao_Paulo\");\n            map.put(\"WET\", \"Europe/London\");\n            map.put(\"ECT\", \"Europe/Paris\");\n            map.put(\"ART\", \"Africa/Cairo\");\n            map.put(\"CAT\", \"Africa/Harare\");\n            map.put(\"EET\", \"Europe/Bucharest\");\n            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n            map.put(\"MET\", \"Asia/Tehran\");\n            map.put(\"NET\", \"Asia/Yerevan\");\n            map.put(\"PLT\", \"Asia/Karachi\");\n            map.put(\"IST\", \"Asia/Calcutta\");\n            map.put(\"BST\", \"Asia/Dhaka\");\n            map.put(\"VST\", \"Asia/Saigon\");\n            map.put(\"CTT\", \"Asia/Shanghai\");\n            map.put(\"JST\", \"Asia/Tokyo\");\n            map.put(\"ACT\", \"Australia/Darwin\");\n            map.put(\"AET\", \"Australia/Sydney\");\n            map.put(\"SST\", \"Pacific/Guadalcanal\");\n            map.put(\"NST\", \"Pacific/Auckland\");\n            cZoneIdConversion = map;\n        }\n        String convertedId = map.get(id);\n        if (convertedId == null && id.startsWith(\"GMT\")) {\n            convertedId = id.startsWith(\"GMT+\") || id.startsWith(\"GMT-\") ?\n                    \"Etc/GMT\" + id.substring(3) : \"Etc/GMT\";\n        }\n        if (convertedId != null && convertedId.equals(\"Etc/GMT\")) {\n            convertedId = \"UTC\";\n        }\n        return convertedId;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..8c6f0b7d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -560,7 +560,7 @@ public abstract class DateTimeZone implements Serializable {\n         if (map == null) {\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n+            map.put(\"GMT\", \"Etc/GMT\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n             map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n@@ -594,7 +594,15 @@ public abstract class DateTimeZone implements Serializable {\n             map.put(\"NST\", \"Pacific/Auckland\");\n             cZoneIdConversion = map;\n         }\n-        return map.get(id);\n+        String convertedId = map.get(id);\n+        if (convertedId == null && id.startsWith(\"GMT\")) {\n+            convertedId = id.startsWith(\"GMT+\") || id.startsWith(\"GMT-\") ?\n+                    \"Etc/GMT\" + id.substring(3) : \"Etc/GMT\";\n+        }\n+        if (convertedId != null && convertedId.equals(\"Etc/GMT\")) {\n+            convertedId = \"UTC\";\n+        }\n+        return convertedId;\n     }\n \n     private static int parseOffset(String str) {",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[WET]> but was:<[Europe/London]>",
    "test_result": "FAIL"
}