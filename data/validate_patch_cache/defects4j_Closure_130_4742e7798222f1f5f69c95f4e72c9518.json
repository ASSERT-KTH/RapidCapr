{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && !name.isExported()) {\n        // {@code name} meets condition (a).\n        if (name.type == Name.Type.FUNCTION ||\n            name.type == Name.Type.OBJECTLIT) {\n          boolean somePropCanInline = false;\n          if (name.props != null) {\n            for (Name prop : name.props) {\n              // Don't attempt to inline an accessor property as a variable.\n              if (prop.type == Name.Type.GET ||\n                  prop.type == Name.Type.SET) {\n                continue;\n              }\n              if (prop.globalSets == 1 &&\n                  prop.localSets == 0 &&\n                  prop.aliasingGets == 0) {\n                // This is also safe to inline.\n                somePropCanInline = true;\n              }\n            }\n          }\n          if (somePropCanInline) {\n            continue;\n          }\n        }\n        Var v = getVar(name);\n        if (v != null && !v.isParam()) {  // Don't inline function parameters.\n          Ref decl = getDeclaration(v);\n          if (decl != null) {\n            Node value = decl.getNode().getLastChild();\n            if (value.isExprResult() || value.isFunction()) {\n              // Only inline if the function/class/Object.defineProperties\n              // definition contains a single return statement.\n              Node earlyExit = null;\n              if (value.isFunction()) {\n                earlyExit = NodeUtil.getConditionalExit(value.getLastChild());\n              } else {\n                earlyExit = NodeUtil.getConditionalExit(value.getFirstChild());\n              }\n              if (earlyExit == null) {\n                inlineVariables.put(name, value);\n                removeName(name, v.scope);\n              }\n            }\n          }\n        }\n      } else if (name.globalSets == 0 && name.localSets == 1 &&\n          name.aliasingGets == 0 && !name.isExported() &&\n          name.getRefs().size() == 1) {\n        // {@code name} meets condition (b).\n        Ref ref = getNonAliasDeclaration(name);\n        Preconditions.checkNotNull(ref);\n        if (inlineVariables.containsKey(ref)) {\n          // If the declaration of {@code name} is already in the process of being\n          // inlined, then skip inlining this reference to avoid infinite inlining\n          // recursion.\n          continue;\n        }\n        Node node = ref.getNode();\n        switch (node.getParent().getToken()) {\n          case ASSIGN:\n          case VAR:\n            // We can inline {@code name} in the RHS expression of this assignment.\n            Node rhs = node.getNext();\n            if (rhs == null) {\n              // This is a deletion of the name instead of an assignment.\n              continue;\n            }\n            if (rhs.getNext() != null) {\n              // The assignment/expression contains more than one statement.\n              continue;\n            }\n            if (rhs.isExprResult() && !NodeUtil.mayHaveSideEffects(rhs.getFirstChild())) {\n              // Make sure there are no more than two levels of nesting due to\n              // the OBJECTLIT check below.\n              if (rhs.getFirstFirstChild() != null &&\n                  !rhs.getFirstFirstChild().isName() &&\n                  (rhs.getFirstFirstChild().isFunction() ||\n                   rhs.getFirstFirstChild().isObjectLit() ||\n                   rhs.getFirstFirstChild().isArrayLit())) {\n                continue;\n              }\n              // Inlining will refactor the assignment statement to an expr result,\n              // so update the scope chain for all nodes after this.\n              for (Node nameNode = node.getNext();\n                   nameNode != null;\n                   nameNode = nameNode.getNext()) {\n                ScopedAliases sa = new ScopedAliases(nameNode, node, name, null);\n                sa.updateScope();\n              }\n              inlineVariables.put(ref, rhs.detach());\n              removeName(name, ref.scope);\n            } else if (!rhs.isComma() &&\n                       rhs.isObjectLit() &&\n                       !NodeUtil.mayHaveSideEffects(rhs)) {\n              // We can inline {@code name} in this object literal literal value.\n              Node value = rhs.getFirstChild();\n\n              // Make sure this is a single K-V pair of form {x:name} or {x:n.prop}\n              if (value.getNext() != null) {\n                continue;\n              }\n\n              // Make sure this K-V's key is a string.\n              Node key = value.getFirstChild();\n              if (!key.isStringLit()) {\n                continue;\n              }\n\n              String name = key.getString();\n              Name other = (value.hasChildren()) ? value.getFirstChild().getQualifiedName() : null;\n\n              Var var = ref.getScope().getVar(name);\n              if (var == null || var.isParam()) {\n                // Don't try to inline a property whose value is assigned to a function\n                // parameter.\n                continue;\n              }\n\n              if (inlineObjectLitValueVariables.containsKey(other)) {\n                // If the declaration of {@code other} is already in the process of\n                // being inlined, then skip inlining this reference to avoid infinite\n                // inlining recursion.\n                continue;\n              }\n\n              // Inlining will delete the K-V pair, so update the scope chain for all\n              // nodes after this.\n              for (Node nameNode = key.getNext().getNext();\n                   nameNode != null;\n                   nameNode = nameNode.getNext()) {\n                ScopedAliases sa = new ScopedAliases(nameNode, node, name, other);\n                sa.updateScope();\n              }\n              inlineObjectLitValueVariables.put(value, getVar(other).node.getParent().detach());\n              removeName(other, var.getScope());\n            }\n            break;\n          case NAME:\n            if (inlineVariables.containsKey(getDeclaration(ref))) {\n              // If the declaration of {@code name} is already in the process of being\n              // inlined, then skip inlining this reference to avoid infinite inlining\n              // recursion.\n              continue;\n            }\n\n            // We must use the global name here, because node.getParent() == name.getParent().\n            Node parent = ref.getNode().getParent();\n            if (parent.isFunction() ||\n                (parent.isAssign() && node == parent.getFirstChild().getNext()) ||\n                parent.isCatch()) {\n              // We can inline {@code name} as the function argument.\n              inlineVariables.put(ref, nameDeclarationNode(name).detach());\n              removeName(name, ref.scope);\n            } else if (parent.isParamList() ||\n                       (parent.isAssign() &&\n                        parent.getFirstChild().isDestructuringLhs())) {\n              // We must use the global name here, because node.getParent() == name.getParent().\n              inlineAliases.put(ref, name);\n            }\n            break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..cb20553c 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,168 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && !name.isExported()) {\n+        // {@code name} meets condition (a).\n+        if (name.type == Name.Type.FUNCTION ||\n+            name.type == Name.Type.OBJECTLIT) {\n+          boolean somePropCanInline = false;\n+          if (name.props != null) {\n+            for (Name prop : name.props) {\n+              // Don't attempt to inline an accessor property as a variable.\n+              if (prop.type == Name.Type.GET ||\n+                  prop.type == Name.Type.SET) {\n+                continue;\n+              }\n+              if (prop.globalSets == 1 &&\n+                  prop.localSets == 0 &&\n+                  prop.aliasingGets == 0) {\n+                // This is also safe to inline.\n+                somePropCanInline = true;\n+              }\n+            }\n+          }\n+          if (somePropCanInline) {\n+            continue;\n+          }\n+        }\n+        Var v = getVar(name);\n+        if (v != null && !v.isParam()) {  // Don't inline function parameters.\n+          Ref decl = getDeclaration(v);\n+          if (decl != null) {\n+            Node value = decl.getNode().getLastChild();\n+            if (value.isExprResult() || value.isFunction()) {\n+              // Only inline if the function/class/Object.defineProperties\n+              // definition contains a single return statement.\n+              Node earlyExit = null;\n+              if (value.isFunction()) {\n+                earlyExit = NodeUtil.getConditionalExit(value.getLastChild());\n+              } else {\n+                earlyExit = NodeUtil.getConditionalExit(value.getFirstChild());\n+              }\n+              if (earlyExit == null) {\n+                inlineVariables.put(name, value);\n+                removeName(name, v.scope);\n+              }\n+            }\n+          }\n+        }\n+      } else if (name.globalSets == 0 && name.localSets == 1 &&\n+          name.aliasingGets == 0 && !name.isExported() &&\n+          name.getRefs().size() == 1) {\n+        // {@code name} meets condition (b).\n+        Ref ref = getNonAliasDeclaration(name);\n+        Preconditions.checkNotNull(ref);\n+        if (inlineVariables.containsKey(ref)) {\n+          // If the declaration of {@code name} is already in the process of being\n+          // inlined, then skip inlining this reference to avoid infinite inlining\n+          // recursion.\n+          continue;\n+        }\n+        Node node = ref.getNode();\n+        switch (node.getParent().getToken()) {\n+          case ASSIGN:\n+          case VAR:\n+            // We can inline {@code name} in the RHS expression of this assignment.\n+            Node rhs = node.getNext();\n+            if (rhs == null) {\n+              // This is a deletion of the name instead of an assignment.\n+              continue;\n+            }\n+            if (rhs.getNext() != null) {\n+              // The assignment/expression contains more than one statement.\n+              continue;\n+            }\n+            if (rhs.isExprResult() && !NodeUtil.mayHaveSideEffects(rhs.getFirstChild())) {\n+              // Make sure there are no more than two levels of nesting due to\n+              // the OBJECTLIT check below.\n+              if (rhs.getFirstFirstChild() != null &&\n+                  !rhs.getFirstFirstChild().isName() &&\n+                  (rhs.getFirstFirstChild().isFunction() ||\n+                   rhs.getFirstFirstChild().isObjectLit() ||\n+                   rhs.getFirstFirstChild().isArrayLit())) {\n+                continue;\n+              }\n+              // Inlining will refactor the assignment statement to an expr result,\n+              // so update the scope chain for all nodes after this.\n+              for (Node nameNode = node.getNext();\n+                   nameNode != null;\n+                   nameNode = nameNode.getNext()) {\n+                ScopedAliases sa = new ScopedAliases(nameNode, node, name, null);\n+                sa.updateScope();\n+              }\n+              inlineVariables.put(ref, rhs.detach());\n+              removeName(name, ref.scope);\n+            } else if (!rhs.isComma() &&\n+                       rhs.isObjectLit() &&\n+                       !NodeUtil.mayHaveSideEffects(rhs)) {\n+              // We can inline {@code name} in this object literal literal value.\n+              Node value = rhs.getFirstChild();\n+\n+              // Make sure this is a single K-V pair of form {x:name} or {x:n.prop}\n+              if (value.getNext() != null) {\n+                continue;\n+              }\n+\n+              // Make sure this K-V's key is a string.\n+              Node key = value.getFirstChild();\n+              if (!key.isStringLit()) {\n+                continue;\n+              }\n+\n+              String name = key.getString();\n+              Name other = (value.hasChildren()) ? value.getFirstChild().getQualifiedName() : null;\n+\n+              Var var = ref.getScope().getVar(name);\n+              if (var == null || var.isParam()) {\n+                // Don't try to inline a property whose value is assigned to a function\n+                // parameter.\n+                continue;\n+              }\n+\n+              if (inlineObjectLitValueVariables.containsKey(other)) {\n+                // If the declaration of {@code other} is already in the process of\n+                // being inlined, then skip inlining this reference to avoid infinite\n+                // inlining recursion.\n+                continue;\n+              }\n+\n+              // Inlining will delete the K-V pair, so update the scope chain for all\n+              // nodes after this.\n+              for (Node nameNode = key.getNext().getNext();\n+                   nameNode != null;\n+                   nameNode = nameNode.getNext()) {\n+                ScopedAliases sa = new ScopedAliases(nameNode, node, name, other);\n+                sa.updateScope();\n+              }\n+              inlineObjectLitValueVariables.put(value, getVar(other).node.getParent().detach());\n+              removeName(other, var.getScope());\n+            }\n+            break;\n+          case NAME:\n+            if (inlineVariables.containsKey(getDeclaration(ref))) {\n+              // If the declaration of {@code name} is already in the process of being\n+              // inlined, then skip inlining this reference to avoid infinite inlining\n+              // recursion.\n+              continue;\n+            }\n+\n+            // We must use the global name here, because node.getParent() == name.getParent().\n+            Node parent = ref.getNode().getParent();\n+            if (parent.isFunction() ||\n+                (parent.isAssign() && node == parent.getFirstChild().getNext()) ||\n+                parent.isCatch()) {\n+              // We can inline {@code name} as the function argument.\n+              inlineVariables.put(ref, nameDeclarationNode(name).detach());\n+              removeName(name, ref.scope);\n+            } else if (parent.isParamList() ||\n+                       (parent.isAssign() &&\n+                        parent.getFirstChild().isDestructuringLhs())) {\n+              // We must use the global name here, because node.getParent() == name.getParent().\n+              inlineAliases.put(ref, name);\n+            }\n+            break;\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}