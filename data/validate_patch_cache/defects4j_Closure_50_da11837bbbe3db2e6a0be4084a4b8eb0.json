{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      boolean isFolded = false;\n      if (NodeUtil.isImmutableValue(elem)) {\n        isFolded = true;\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(\n              Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        //  String(s) or constants are folded to the folded string, other objects remain\n        //  unfolded in the call to Array.join().\n        if (elem.getType() == Token.STRING ||\n            (elem.isName() && elem.getString().length() == 1)) {\n          isFolded = true;\n          String s = elem instanceof StringLit ?\n              ((StringLit) elem).getValue() :\n              elem.getString();\n          arrayFoldedChildren.add(IR.string(s).srcref(elem));\n          foldedSize += elem.getString().length();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n      }\n      if (!isFolded) {\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.get(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that it is coerced to a string.\n          Node call = IR.call(\n              IR.getprop(IR.name(\"String\"), IR.string(\"fromCharCode\")),\n              foldedStringNode).srcref(n);\n          foldedStringNode = NodeUtil.newExpr(call).srcref(n);\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n\n        Node joined = IR.call(IR.getprop(arrayNode, IR.string(\"join\")),\n            (right == null) ? IR.string(\",\") : right.detach()).srcref(n);\n        n.getParent().replaceChild(n, joined);\n        reportCodeChange();\n\n        return joined;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..4c78158b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,7 +364,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n@@ -386,9 +386,9 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n+    // \",\" is the default, it doesn't need to be explicit\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n@@ -396,7 +396,9 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+      boolean isFolded = false;\n+      if (NodeUtil.isImmutableValue(elem)) {\n+        isFolded = true;\n         if (sb == null) {\n           sb = new StringBuilder();\n         } else {\n@@ -412,13 +414,25 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n               Node.newString(sb.toString()).copyInformationFrom(prev));\n           sb = null;\n         }\n+        //  String(s) or constants are folded to the folded string, other objects remain\n+        //  unfolded in the call to Array.join().\n+        if (elem.getType() == Token.STRING ||\n+            (elem.isName() && elem.getString().length() == 1)) {\n+          isFolded = true;\n+          String s = elem instanceof StringLit ?\n+              ((StringLit) elem).getValue() :\n+              elem.getString();\n+          arrayFoldedChildren.add(IR.string(s).srcref(elem));\n+          foldedSize += elem.getString().length();\n+        }\n         foldedSize += InlineCostEstimator.getCost(elem);\n+      }\n+      if (!isFolded) {\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n       elem = elem.getNext();\n     }\n-\n     if (sb != null) {\n       Preconditions.checkNotNull(prev);\n       // + 2 for the quotes.\n@@ -426,6 +440,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       arrayFoldedChildren.add(\n           Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n+\n     // one for each comma.\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n@@ -436,43 +451,49 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n+\n       case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n+        Node foldedStringNode = arrayFoldedChildren.get(0);\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n+\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+          // If the Node is not a string literal, ensure that it is coerced to a string.\n+          Node call = IR.call(\n+              IR.getprop(IR.name(\"String\"), IR.string(\"fromCharCode\")),\n+              foldedStringNode).srcref(n);\n+          foldedStringNode = NodeUtil.newExpr(call).srcref(n);\n         }\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n+\n       default:\n         // No folding could actually be performed.\n         if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n           return n;\n         }\n+\n         int kJoinOverhead = \"[].join()\".length();\n         foldedSize += kJoinOverhead;\n         foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n         if (foldedSize > originalSize) {\n           return n;\n         }\n+\n         arrayNode.detachChildren();\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n+\n+        Node joined = IR.call(IR.getprop(arrayNode, IR.string(\"join\")),\n+            (right == null) ? IR.string(\",\") : right.detach()).srcref(n);\n+        n.getParent().replaceChild(n, joined);\n         reportCodeChange();\n-        break;\n-    }\n \n-    return n;\n+        return joined;\n+    }\n   }\n \n   /**\n@@ -642,4 +663,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}