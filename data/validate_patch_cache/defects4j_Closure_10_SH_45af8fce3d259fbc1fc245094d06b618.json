{
    "patch": "    if (recurse) {\n      List<Node> allChildren = new ArrayList<Node>();\n      NodeUtil.getAllChildren(n, allChildren);\n      boolean hasFunctionCall = allResultsMatch(allChildren, MAY_BE_FUNCTION_CALL_PREDICATE);\n      return hasFunctionCall || mayBeStringHelper(n);\n    } else {\n      return mayBeStringHelper(n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..9f90fd5b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,10 +1411,16 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    if (recurse) {\n+      List<Node> allChildren = new ArrayList<Node>();\n+      NodeUtil.getAllChildren(n, allChildren);\n+      boolean hasFunctionCall = allResultsMatch(allChildren, MAY_BE_FUNCTION_CALL_PREDICATE);\n+      return hasFunctionCall || mayBeStringHelper(n);\n+    } else {\n+      return mayBeStringHelper(n);\n+    }\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}