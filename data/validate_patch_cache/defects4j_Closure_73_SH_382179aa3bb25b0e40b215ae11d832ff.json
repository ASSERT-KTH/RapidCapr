{
    "patch": "if (outputCharsetEncoder != null) {\n  if (outputCharsetEncoder.canEncode(c)) {\n    sb.append(c);\n  } else {\n    // Unicode-escape the character.\n    appendHexJavaScriptRepresentation(sb, c);\n  }\n} else {\n  // No charsetEncoder provided - pass straight latin characters\n  // through, and escape the rest.  Doing the explicit character\n  // check is measurably faster than using the CharsetEncoder.\n  if (c > 0x7f) {\n    appendHexJavaScriptRepresentation(sb, c);\n  } else if (c > 0x1f || escapeAll) {\n    sb.append(c);\n  } else {\n    switch(c) {\n      case ' ': // ASCII space\n        if(i == 0 || i == s.length() - 1 ||\n           (! Character.isLetterOrDigit(s.charAt(i - 1)) &&\n            ! Character.isLetterOrDigit(s.charAt(i + 1)))) {\n          sb.append(\"\\\\ \");\n        } else {\n          sb.append(' ');\n        }\n        break;\n      case '\\r': sb.append(\"\\\\r\"); break;\n      case '\\n': sb.append(\"\\\\n\"); break;\n      case '\\t': sb.append(\"\\\\t\"); break;\n      case '\\f': sb.append(\"\\\\f\"); break;\n      case '\\b': sb.append(\"\\\\b\"); break;\n      default:\n        appendHexJavaScriptRepresentation(sb, c);\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..05a261b3 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,43 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+if (outputCharsetEncoder != null) {\n+  if (outputCharsetEncoder.canEncode(c)) {\n+    sb.append(c);\n+  } else {\n+    // Unicode-escape the character.\n+    appendHexJavaScriptRepresentation(sb, c);\n+  }\n+} else {\n+  // No charsetEncoder provided - pass straight latin characters\n+  // through, and escape the rest.  Doing the explicit character\n+  // check is measurably faster than using the CharsetEncoder.\n+  if (c > 0x7f) {\n+    appendHexJavaScriptRepresentation(sb, c);\n+  } else if (c > 0x1f || escapeAll) {\n+    sb.append(c);\n+  } else {\n+    switch(c) {\n+      case ' ': // ASCII space\n+        if(i == 0 || i == s.length() - 1 ||\n+           (! Character.isLetterOrDigit(s.charAt(i - 1)) &&\n+            ! Character.isLetterOrDigit(s.charAt(i + 1)))) {\n+          sb.append(\"\\\\ \");\n+        } else {\n+          sb.append(' ');\n+        }\n+        break;\n+      case '\\r': sb.append(\"\\\\r\"); break;\n+      case '\\n': sb.append(\"\\\\n\"); break;\n+      case '\\t': sb.append(\"\\\\t\"); break;\n+      case '\\f': sb.append(\"\\\\f\"); break;\n+      case '\\b': sb.append(\"\\\\b\"); break;\n+      default:\n+        appendHexJavaScriptRepresentation(sb, c);\n+        break;\n+    }\n+  }\n+}\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}