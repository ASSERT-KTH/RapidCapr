{
    "patch": "if (n.isBlock() || n.isCall() || n.isNew()) {\n  return true;\n}\n\nif (n.isFunction() && !n.isArrowFunction()) {\n  return ControlFlowGraph.hasExitControlFlow(n.getLastChild()) \n      || ControlFlowGraph.isConstructorOrInFunction(n.getLastChild());\n}\n\nif (n.isClass()) {\n  return ControlFlowGraph.hasExitControlFlow(n.getLastChild()) \n      || n.getLastChild().isConstructor();\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n    return true;\n  }\n}\n\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1453ef08 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,27 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isBlock() || n.isCall() || n.isNew()) {\n+  return true;\n+}\n+\n+if (n.isFunction() && !n.isArrowFunction()) {\n+  return ControlFlowGraph.hasExitControlFlow(n.getLastChild()) \n+      || ControlFlowGraph.isConstructorOrInFunction(n.getLastChild());\n+}\n+\n+if (n.isClass()) {\n+  return ControlFlowGraph.hasExitControlFlow(n.getLastChild()) \n+      || n.getLastChild().isConstructor();\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    return true;\n+  }\n+}\n+\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}