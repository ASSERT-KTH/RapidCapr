{
    "patch": " boolean isAssignedOnceInLifetime() {\n    final int[] assignmentCount = {0};\n    final Reference[] lastAssignmentRef = {null};\n    \n    // check if this variable is assigned only once\n    for (Reference reference : references) {\n      if (reference.isDeclaration() || reference.isParam()) {\n        // let's ignore declarations of this name - we're not interested in them here\n        continue;\n      }\n\n      if ((reference.isInvocationResult() || reference.isPropertySet()) && reference.getScope().isLocal()) {\n        // if this is an invocation result or a property set, we don't care\n        continue;\n      }\n\n      if (reference.isVariableAssignment()) {\n        if ((lastAssignmentRef[0] == null) || (lastAssignmentRef[0].stmtIndex < reference.stmtIndex)) {\n          lastAssignmentRef[0] = reference;\n        }\n        ++assignmentCount[0];\n      }\n    }\n\n    if ((assignmentCount[0] == 1) && (lastAssignmentRef[0] != null)){\n      // Make sure this assignment is not in a loop.\n      for (BasicBlock block = lastAssignmentRef[0].getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          return true;\n        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..77cfb550 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,46 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+ boolean isAssignedOnceInLifetime() {\n+    final int[] assignmentCount = {0};\n+    final Reference[] lastAssignmentRef = {null};\n+    \n+    // check if this variable is assigned only once\n+    for (Reference reference : references) {\n+      if (reference.isDeclaration() || reference.isParam()) {\n+        // let's ignore declarations of this name - we're not interested in them here\n+        continue;\n+      }\n+\n+      if ((reference.isInvocationResult() || reference.isPropertySet()) && reference.getScope().isLocal()) {\n+        // if this is an invocation result or a property set, we don't care\n+        continue;\n+      }\n+\n+      if (reference.isVariableAssignment()) {\n+        if ((lastAssignmentRef[0] == null) || (lastAssignmentRef[0].stmtIndex < reference.stmtIndex)) {\n+          lastAssignmentRef[0] = reference;\n+        }\n+        ++assignmentCount[0];\n+      }\n+    }\n+\n+    if ((assignmentCount[0] == 1) && (lastAssignmentRef[0] != null)){\n+      // Make sure this assignment is not in a loop.\n+      for (BasicBlock block = lastAssignmentRef[0].getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          return true;\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    return false;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}