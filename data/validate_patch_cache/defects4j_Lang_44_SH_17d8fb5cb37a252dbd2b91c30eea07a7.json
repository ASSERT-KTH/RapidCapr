{
    "patch": "        if(val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        int lastPos = val.length() - 1;\n        if (val.startsWith(\"--\")) {\n            // this is protection for poorness in java.lang.BigDecimal.\n            // it accepts this as a legal value, but it does not appear\n            // to be in specification of class. OS X Java parses it to\n            // a wrong value.\n            return null;\n        } else if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        } else if (Character.isDigit(val.charAt(lastPos))\n                || val.charAt(lastPos) == '.') {\n            //an obvious case - we should not have anything else in the string\n            //but a mantissa (and exponent)\n            if (val.charAt(lastPos) == 'f' || val.charAt(lastPos) == 'F') {\n                try {\n                    Float f = Float.parseFloat(val);\n                    if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n            } else if (val.charAt(lastPos) == 'd' || val.charAt(lastPos) == 'D'\n                    || val.charAt(lastPos) == 'l' || val.charAt(lastPos) == 'L') {\n                //Cannot be less than 2 characters if it is not a hex string\n                if (val.length() == 1 || !Character.isDigit(val.charAt(lastPos - 1))) {\n                    throw new NumberFormatException(val + \" is not a valid number.\");\n                }\n                if (val.charAt(lastPos) == 'l' || val.charAt(lastPos) == 'L') {\n                    try {\n                        return createLong(val.substring(0, lastPos));\n                    } catch (NumberFormatException nfe) {\n                        //Too big for a long\n                    }\n                    return createBigInteger(val.substring(0, lastPos));\n\n                }\n                String numeric = val.substring(0, lastPos);\n                try {\n                    Double d = Double.parseDouble(numeric);\n                    if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n                        if (val.charAt(lastPos) == 'd' || val.charAt(lastPos) == 'D') {\n                            return d;\n                        }\n                        if (d.doubleValue() <= Float.MAX_VALUE\n                                && d.doubleValue() >= -Float.MAX_VALUE) {\n                            return new Float(d.floatValue());\n                        }\n                    }\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n                try {\n                    return createBigDecimal(numeric);\n                } catch (NumberFormatException e) {\n                    // ignore the bad number\n                }\n            }\n            //User didn't suffix with anything\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            //We have already determined that the last character is a digit, so\n            //we can now just proceed as if there was an \"F\" at the end.\n            //Doing this will avoid throwing a new exception.\n            try {\n                Float f = createFloat(val);\n                if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            try {\n                Double d = createDouble(val);\n                if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // empty catch\n            }\n            //Fall thru to exception\n        }\n        throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..c4d604b4 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,95 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if(val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        int lastPos = val.length() - 1;\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear\n+            // to be in specification of class. OS X Java parses it to\n+            // a wrong value.\n+            return null;\n+        } else if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        } else if (Character.isDigit(val.charAt(lastPos))\n+                || val.charAt(lastPos) == '.') {\n+            //an obvious case - we should not have anything else in the string\n+            //but a mantissa (and exponent)\n+            if (val.charAt(lastPos) == 'f' || val.charAt(lastPos) == 'F') {\n+                try {\n+                    Float f = Float.parseFloat(val);\n+                    if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n+                        return f;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // ignore the bad number\n+                }\n+            } else if (val.charAt(lastPos) == 'd' || val.charAt(lastPos) == 'D'\n+                    || val.charAt(lastPos) == 'l' || val.charAt(lastPos) == 'L') {\n+                //Cannot be less than 2 characters if it is not a hex string\n+                if (val.length() == 1 || !Character.isDigit(val.charAt(lastPos - 1))) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                if (val.charAt(lastPos) == 'l' || val.charAt(lastPos) == 'L') {\n+                    try {\n+                        return createLong(val.substring(0, lastPos));\n+                    } catch (NumberFormatException nfe) {\n+                        //Too big for a long\n+                    }\n+                    return createBigInteger(val.substring(0, lastPos));\n+\n+                }\n+                String numeric = val.substring(0, lastPos);\n+                try {\n+                    Double d = Double.parseDouble(numeric);\n+                    if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n+                        if (val.charAt(lastPos) == 'd' || val.charAt(lastPos) == 'D') {\n+                            return d;\n+                        }\n+                        if (d.doubleValue() <= Float.MAX_VALUE\n+                                && d.doubleValue() >= -Float.MAX_VALUE) {\n+                            return new Float(d.floatValue());\n+                        }\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // ignore the bad number\n+                }\n+                try {\n+                    return createBigDecimal(numeric);\n+                } catch (NumberFormatException e) {\n+                    // ignore the bad number\n+                }\n+            }\n+            //User didn't suffix with anything\n+            try {\n+                return createInteger(val);\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            //We have already determined that the last character is a digit, so\n+            //we can now just proceed as if there was an \"F\" at the end.\n+            //Doing this will avoid throwing a new exception.\n+            try {\n+                Float f = createFloat(val);\n+                if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n+                    return f;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            try {\n+                Double d = createDouble(val);\n+                if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n+                    return d;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // empty catch\n+            }\n+            //Fall thru to exception\n+        }\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}