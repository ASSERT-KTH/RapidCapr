{
    "patch": "  boolean isAssignedOnceInLifetime() {\n    Reference ref = getOneAndOnlyAssignment();\n    if (ref == null) {\n      return false;\n    }\n\n    // Make sure this assignment is not in a loop.\n    BasicBlock block = ref.getBasicBlock();\n    while (block != null && !block.isFunction) {\n      if (block.isLoop) {\n        return false;\n      } else {\n        // Check if this block contains any conditional branches.\n        List<Node> blockNodes = block.getNodes();\n        for (int i = 0; i < blockNodes.size(); i++) {\n          Node currentNode = blockNodes.get(i);\n          if (currentNode.isControl()) {\n            List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(currentNode);\n            for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n              if (outEdge.getValue().isConditional()) {\n                return false;\n              }\n            }\n          }\n        }\n\n        // Move up to the parent block.\n        if (block.getParent() != null) {\n          block = block.getParent().getContainer();\n        } else {\n          break;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a6ecc15c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,43 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  boolean isAssignedOnceInLifetime() {\n+    Reference ref = getOneAndOnlyAssignment();\n+    if (ref == null) {\n+      return false;\n+    }\n+\n+    // Make sure this assignment is not in a loop.\n+    BasicBlock block = ref.getBasicBlock();\n+    while (block != null && !block.isFunction) {\n+      if (block.isLoop) {\n+        return false;\n+      } else {\n+        // Check if this block contains any conditional branches.\n+        List<Node> blockNodes = block.getNodes();\n+        for (int i = 0; i < blockNodes.size(); i++) {\n+          Node currentNode = blockNodes.get(i);\n+          if (currentNode.isControl()) {\n+            List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(currentNode);\n+            for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+              if (outEdge.getValue().isConditional()) {\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+\n+        // Move up to the parent block.\n+        if (block.getParent() != null) {\n+          block = block.getParent().getContainer();\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}