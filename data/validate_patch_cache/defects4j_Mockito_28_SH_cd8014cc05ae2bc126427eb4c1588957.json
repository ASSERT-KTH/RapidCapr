{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n    for (int i = fields.size() - 1; i >= 0; i--) {\n        Field field = fields.get(i);\n        Optional<MockCandidate> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if(candidate.isPresent()) {\n            candidate.get().thenInject(mocks, fieldInstance);\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..7af76ad60 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,17 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    List<Field> fields = orderedInstanceFieldsFrom(awaitingInjectionClazz);\n+    for (int i = fields.size() - 1; i >= 0; i--) {\n+        Field field = fields.get(i);\n+        Optional<MockCandidate> candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if(candidate.isPresent()) {\n+            candidate.get().thenInject(mocks, fieldInstance);\n+            return;\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}