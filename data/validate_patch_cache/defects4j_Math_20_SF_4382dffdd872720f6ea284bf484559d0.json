{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] decoded = decode(x);\n    double min = Double.POSITIVE_INFINITY;\n    double max = Double.NEGATIVE_INFINITY;\n    \n    // Find the minimum and maximum decoded values\n    for (double value : decoded) {\n        if (value < min) {\n            min = value;\n        }\n        if (value > max) {\n            max = value;\n        }\n    }\n    \n    // Rescale values outside of [0, 1] to the nearest boundary\n    if (min < 0.0 || max > 1.0) {\n        double range = max - min;\n        for (int i = 0; i < decoded.length; i++) {\n            if (decoded[i] > 1.0) {\n                decoded[i] = 1.0;\n            } else if (decoded[i] < 0.0) {\n                decoded[i] = 0.0;\n            } else {\n                decoded[i] = (decoded[i] - min) / range;\n            }\n        }\n    }\n    \n    return decoded;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..17f4d5d76 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,37 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] decoded = decode(x);\n+    double min = Double.POSITIVE_INFINITY;\n+    double max = Double.NEGATIVE_INFINITY;\n+    \n+    // Find the minimum and maximum decoded values\n+    for (double value : decoded) {\n+        if (value < min) {\n+            min = value;\n         }\n+        if (value > max) {\n+            max = value;\n+        }\n+    }\n+    \n+    // Rescale values outside of [0, 1] to the nearest boundary\n+    if (min < 0.0 || max > 1.0) {\n+        double range = max - min;\n+        for (int i = 0; i < decoded.length; i++) {\n+            if (decoded[i] > 1.0) {\n+                decoded[i] = 1.0;\n+            } else if (decoded[i] < 0.0) {\n+                decoded[i] = 0.0;\n+            } else {\n+                decoded[i] = (decoded[i] - min) / range;\n+            }\n+        }\n+    }\n+    \n+    return decoded;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.9792800629109454>",
    "test_result": "FAIL"
}