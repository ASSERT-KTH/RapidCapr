{
    "patch": "  public boolean canBeCalled() {\n    return isRegexpType() || isRecursiveRecordType();\n  }\n\n  private boolean isRecursiveRecordType() {\n    return isRecordType() && getPropertyType(\"loop\").equals(this);\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n          current != null && !current.isNativeObjectType() &&\n              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n          current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      boolean isRecursiveRecordType = isRecursiveRecordType();\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        if (isRecursiveRecordType && property.equals(\"loop\")) {\n          sb.append(\"...\");\n          break;\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..c49c4526 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -346,7 +346,11 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return isRegexpType() || isRecursiveRecordType();\n+  }\n+\n+  private boolean isRecursiveRecordType() {\n+    return isRecordType() && getPropertyType(\"loop\").equals(this);\n   }\n \n   @Override\n@@ -360,12 +364,14 @@ class PrototypeObjectType extends ObjectType {\n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n+          current != null && !current.isNativeObjectType() &&\n+              propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n+          current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n+      boolean isRecursiveRecordType = isRecursiveRecordType();\n+\n       StringBuilder sb = new StringBuilder();\n       sb.append(\"{\");\n \n@@ -375,6 +381,11 @@ class PrototypeObjectType extends ObjectType {\n           sb.append(\", \");\n         }\n \n+        if (isRecursiveRecordType && property.equals(\"loop\")) {\n+          sb.append(\"...\");\n+          break;\n+        }\n+\n         sb.append(property);\n         sb.append(\": \");\n         sb.append(getPropertyType(property).toString());",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[loop: {...}, number: number, string: string]}> but was:<{[...]}>",
    "test_result": "FAIL"
}