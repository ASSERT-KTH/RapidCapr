{
    "patch": "    private static final Random prng = new Random(1368L);\n\n    public void testRandomRange() {\n        int range = 10;\n        int n = 100000;\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n            int r = NumberUtils.randomInt(prng, range);\n            assertTrue(r < range);\n            if (r == 0) {\n                count++;\n            }\n        }\n        assertTrue(count < (n/range)*0.1); //less than 10%\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..6833a527 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,21 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+    private static final Random prng = new Random(1368L);\n+\n+    public void testRandomRange() {\n+        int range = 10;\n+        int n = 100000;\n+        int count = 0;\n+        for (int i = 0; i < n; i++) {\n+            int r = NumberUtils.randomInt(prng, range);\n+            assertTrue(r < range);\n+            if (r == 0) {\n+                count++;\n+            }\n+        }\n+        assertTrue(count < (n/range)*0.1); //less than 10%\n+    }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}