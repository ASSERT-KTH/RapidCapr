{
    "patch": "private static final String PATTERN_CHARS = \"\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\^\\\\$\\\\.\\\\|\\\\?\\\\*\\\\+\\\\\\\\\";\nprivate static final Pattern ESCAPE_PATTERN = Pattern.compile(\"([\\\\\\\\\" + PATTERN_CHARS + \"])\");\nprivate static final Pattern UNESCAPE_PATTERN = Pattern.compile(\"\\\\\\\\([\\\\\\\\\" + PATTERN_CHARS + \"])\");\n\nprivate final String pattern;\nprivate final TimeZone timeZone;\nprivate final Locale locale;\n\nprivate final Pattern formatPattern;\n\nprivate volatile Strategy[] strategies;\nprivate volatile int thisYear;  // used for two-digit year parsing\n\nprivate final ConcurrentHashMap<Integer, KeyValue[]> nameValues;\n\nprivate final Pattern parsePattern;\nprivate String currentFormatField;\nprivate Strategy nextStrategy;\n\npublic FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n    this.pattern = pattern;\n    this.timeZone = timeZone;\n    this.locale = locale;\n\n    formatPattern = compileFormatPattern(pattern);\n\n    init();\n}\n\nprivate static Pattern compileFormatPattern(String pattern) {\n    StringBuilder regex = new StringBuilder();\n    boolean inQuote = false;\n\n    Matcher matcher = ESCAPE_PATTERN.matcher(pattern);\n    int end = 0;\n    while (matcher.find()) {\n        if (!inQuote && !isCharInString(matcher.start(), pattern)) {\n            regex.append(wrapUnquotedSpecials(pattern.substring(end, matcher.start())));\n            end = matcher.end();\n        }\n\n        if (!inQuote) {\n            regex.append('\\'');\n            inQuote = true;\n        }\n        regex.append(quote(matcher.group()));\n        if (isCharInString(matcher.end() - 1, pattern)) {\n            continue;\n        }\n        regex.append('\\'');\n        inQuote = false;\n    }\n\n    if (end == 0) {\n        return Pattern.compile(wrapUnquotedSpecials(pattern));\n    }\n\n    if (end < pattern.length()) {\n        regex.append(wrapUnquotedSpecials(pattern.substring(end)));\n    }\n\n    if (inQuote) {\n        regex.append('\\'');\n    }\n\n    return Pattern.compile(regex.toString());\n}\n\nprivate static boolean isCharInString(int i, String s) {\n    int parentheses = 0;\n    for (int j = 0; j < i; j++) {\n        char c = s.charAt(j);\n        if (c == '(') {\n            parentheses++;\n        } else if (c == ')') {\n            parentheses--;\n        }\n    }\n    return parentheses != 0;\n}\n\nprivate static String wrapUnquotedSpecials(String pattern) {\n    return \"(?:\" + pattern + \")\";\n}\n\nprivate static String quote(String s) {\n    return UNESCAPE_PATTERN.matcher(s).replaceAll(\"\\\\\\\\$1\");\n}\n\nprivate void init() {\n    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex= new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher= formatPattern.matcher(pattern);\n    if(!patternMatcher.matches()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    Strategy currentStrategy= getStrategy(patternMatcher.group()); // use matches instead of lookingAt\n    while (patternMatcher.find()) { // loop through all matches\n        String nextFormatField = patternMatcher.group();\n        currentStrategy.addRegex(this, regex);\n        collector.add(currentStrategy);\n        currentStrategy = getStrategy(nextFormatField);\n    }\n    currentStrategy.addRegex(this, regex);\n    collector.add(currentStrategy);\n    strategies= collector.toArray(new Strategy[collector.size()]);\n    parsePattern= Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..995ff38c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,43 +112,121 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private static final String PATTERN_CHARS = \"\\\\[\\\\]\\\\{\\\\}\\\\(\\\\)\\\\^\\\\$\\\\.\\\\|\\\\?\\\\*\\\\+\\\\\\\\\";\n+private static final Pattern ESCAPE_PATTERN = Pattern.compile(\"([\\\\\\\\\" + PATTERN_CHARS + \"])\");\n+private static final Pattern UNESCAPE_PATTERN = Pattern.compile(\"\\\\\\\\([\\\\\\\\\" + PATTERN_CHARS + \"])\");\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+private final String pattern;\n+private final TimeZone timeZone;\n+private final Locale locale;\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+private final Pattern formatPattern;\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n+private volatile Strategy[] strategies;\n+private volatile int thisYear;  // used for two-digit year parsing\n+\n+private final ConcurrentHashMap<Integer, KeyValue[]> nameValues;\n+\n+private final Pattern parsePattern;\n+private String currentFormatField;\n+private Strategy nextStrategy;\n+\n+public FastDateParser(String pattern, TimeZone timeZone, Locale locale) {\n+    this.pattern = pattern;\n+    this.timeZone = timeZone;\n+    this.locale = locale;\n+\n+    formatPattern = compileFormatPattern(pattern);\n+\n+    init();\n+}\n+\n+private static Pattern compileFormatPattern(String pattern) {\n+    StringBuilder regex = new StringBuilder();\n+    boolean inQuote = false;\n+\n+    Matcher matcher = ESCAPE_PATTERN.matcher(pattern);\n+    int end = 0;\n+    while (matcher.find()) {\n+        if (!inQuote && !isCharInString(matcher.start(), pattern)) {\n+            regex.append(wrapUnquotedSpecials(pattern.substring(end, matcher.start())));\n+            end = matcher.end();\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+        if (!inQuote) {\n+            regex.append('\\'');\n+            inQuote = true;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+        regex.append(quote(matcher.group()));\n+        if (isCharInString(matcher.end() - 1, pattern)) {\n+            continue;\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        regex.append('\\'');\n+        inQuote = false;\n     }\n \n+    if (end == 0) {\n+        return Pattern.compile(wrapUnquotedSpecials(pattern));\n+    }\n+\n+    if (end < pattern.length()) {\n+        regex.append(wrapUnquotedSpecials(pattern.substring(end)));\n+    }\n+\n+    if (inQuote) {\n+        regex.append('\\'');\n+    }\n+\n+    return Pattern.compile(regex.toString());\n+}\n+\n+private static boolean isCharInString(int i, String s) {\n+    int parentheses = 0;\n+    for (int j = 0; j < i; j++) {\n+        char c = s.charAt(j);\n+        if (c == '(') {\n+            parentheses++;\n+        } else if (c == ')') {\n+            parentheses--;\n+        }\n+    }\n+    return parentheses != 0;\n+}\n+\n+private static String wrapUnquotedSpecials(String pattern) {\n+    return \"(?:\" + pattern + \")\";\n+}\n+\n+private static String quote(String s) {\n+    return UNESCAPE_PATTERN.matcher(s).replaceAll(\"\\\\\\\\$1\");\n+}\n+\n+private void init() {\n+    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+\n+    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+\n+    StringBuilder regex= new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n+\n+    Matcher patternMatcher= formatPattern.matcher(pattern);\n+    if(!patternMatcher.matches()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+\n+    Strategy currentStrategy= getStrategy(patternMatcher.group()); // use matches instead of lookingAt\n+    while (patternMatcher.find()) { // loop through all matches\n+        String nextFormatField = patternMatcher.group();\n+        currentStrategy.addRegex(this, regex);\n+        collector.add(currentStrategy);\n+        currentStrategy = getStrategy(nextFormatField);\n+    }\n+    currentStrategy.addRegex(this, regex);\n+    collector.add(currentStrategy);\n+    strategies= collector.toArray(new Strategy[collector.size()]);\n+    parsePattern= Pattern.compile(regex.toString());\n+}\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /* (non-Javadoc)",
    "result_reason": "error: variable pattern is already defined in class FastDateParser",
    "test_result": "ERROR"
}