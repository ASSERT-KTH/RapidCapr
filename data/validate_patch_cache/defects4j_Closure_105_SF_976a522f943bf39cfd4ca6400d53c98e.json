{
    "patch": "  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n                foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n\n        if (foldedSize > originalSize) {\n          return;\n        }\n        \n        // Create arguments node\n        Node argumentsNode = new Node(Token.EXPR_RESULT);\n        for (Node node : arrayFoldedChildren) {\n          argumentsNode.addChildToBack(node);\n        }\n        // Create call node\n        Node callNode = new Node(Token.CALL, left.cloneTree());\n        callNode.addChildToBack(argumentsNode);\n        \n        parent.replaceChild(n, callNode);\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..8d391e8f 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1523,7 +1523,7 @@ class FoldConstants extends AbstractPostOrderCallback\n           // it is coerced to a string.\n           Node replacement = new Node(Token.ADD,\n               Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n+                foldedStringNode = replacement;\n         }\n         parent.replaceChild(n, foldedStringNode);\n         break;\n@@ -1536,13 +1536,21 @@ class FoldConstants extends AbstractPostOrderCallback\n         int kJoinOverhead = \"[].join()\".length();\n         foldedSize += kJoinOverhead;\n         foldedSize += InlineCostEstimator.getCost(right);\n+\n         if (foldedSize > originalSize) {\n           return;\n         }\n-        arrayNode.detachChildren();\n+        \n+        // Create arguments node\n+        Node argumentsNode = new Node(Token.EXPR_RESULT);\n         for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+          argumentsNode.addChildToBack(node);\n         }\n+        // Create call node\n+        Node callNode = new Node(Token.CALL, left.cloneTree());\n+        callNode.addChildToBack(argumentsNode);\n+        \n+        parent.replaceChild(n, callNode);\n         break;\n     }\n     t.getCompiler().reportCodeChange();",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}