{
    "patch": "import java.time.LocalDateTime;\nimport java.time.ZoneId;\n\npublic class DateUtils {\n\n    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n        if (cal1 == null || cal2 == null) {\n            throw new IllegalArgumentException(\"The date must not be null\");\n        }\n        LocalDateTime ldt1 = LocalDateTime.ofInstant(cal1.toInstant(), ZoneId.systemDefault());\n        LocalDateTime ldt2 = LocalDateTime.ofInstant(cal2.toInstant(), ZoneId.systemDefault());\n        return ldt1.getNano() == ldt2.getNano() && ldt1.equals(ldt2);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..2b787063 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -255,20 +255,22 @@ public class DateUtils {\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n      */\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+\n+public class DateUtils {\n+\n     public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n         if (cal1 == null || cal2 == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n-                cal1.getClass() == cal2.getClass());\n+        LocalDateTime ldt1 = LocalDateTime.ofInstant(cal1.toInstant(), ZoneId.systemDefault());\n+        LocalDateTime ldt2 = LocalDateTime.ofInstant(cal2.toInstant(), ZoneId.systemDefault());\n+        return ldt1.getNano() == ldt2.getNano() && ldt1.equals(ldt2);\n     }\n \n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Parses a string representing a date by trying a variety of different parsers.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}