{
    "patch": "            Matcher m = matchers.get(indexOfVararg);\n            if (m instanceof CapturesArguments) {\n                Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n                if (varargs.length == 1 && varargs[0] != null && varargs[0].getClass().isArray()) {\n                    Object[] varargsArray = (Object[]) varargs[0];\n                    ((CapturesArguments) m).captureFrom(varargsArray);\n                } else {\n                    ((CapturesArguments) m).captureFrom(varargs);\n                }\n            } else {\n                super.captureArgumentsFrom(invocation);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..1357073d0 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,21 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher m = matchers.get(indexOfVararg);\n+            if (m instanceof CapturesArguments) {\n+                Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg, indexOfVararg + 1);\n+                if (varargs.length == 1 && varargs[0] != null && varargs[0].getClass().isArray()) {\n+                    Object[] varargsArray = (Object[]) varargs[0];\n+                    ((CapturesArguments) m).captureFrom(varargsArray);\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(varargs);\n+                }\n+            } else {\n+                super.captureArgumentsFrom(invocation);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}