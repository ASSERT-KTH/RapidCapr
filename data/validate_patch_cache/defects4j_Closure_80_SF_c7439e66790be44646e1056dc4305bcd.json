{
    "patch": "static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n  switch (value.getToken()) {\n    case ASSIGN:\n      return isImmutableValue(value.getLastChild())\n          || (locals.test(value)\n              && evaluatesToLocalValue(value.getLastChild(), locals));\n    case COMMA:\n      return evaluatesToLocalValue(value.getLastChild(), locals);\n    case AND:\n    case OR:\n      return evaluatesToLocalValue(value.getFirstChild(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case HOOK:\n      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n          && evaluatesToLocalValue(value.getLastChild(), locals);\n    case INC:\n    case DEC:\n      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n        return evaluatesToLocalValue(value.getFirstChild(), locals);\n      } else {\n        return true;\n      }\n    case THIS:\n    case NAME:\n      return isImmutableValue(value) || locals.test(value); \n    case GETELEM:\n    case GETPROP:\n      return locals.test(value);\n    case CALL:\n      return callHasLocalResult(value)\n          || isToStringMethodCall(value)\n          || locals.test(value);\n    case NEW:\n      return newHasLocalResult(value)\n          || locals.test(value);\n    case FUNCTION:\n    case REGEXP:\n    case ARRAYLIT:\n    case OBJECTLIT:\n      return true;\n    case IN:\n      return true;\n    case DELPROP:\n    case GET:\n      // 'delete' is handled as a GETPROP\n      return locals.test(value) || isDelete(value);\n\n    default:\n      // Other op forces a local value:\n      //  x = '' + g (x is now an local string)\n      //  x -= g (x is now an local number)\n      if (isAssignmentOp(value)\n          || isSimpleOperator(value)\n          || isImmutableValue(value)) {\n        return true;\n      }\n\n      throw new IllegalStateException(\n          \"Unexpected expression node\" + value +\n          \"\\n parent:\" + value.getParent());\n  }\n}\n\nprivate static boolean isDelete(Node value) {\n  if (value.isDelProp() || value.isTypeOf()) {\n    return true;\n  }\n  if (value.isGetProp()) {\n    Node propNode = value.getLastChild();\n    return propNode.isString() && \"delete\".equals(propNode.getString());\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..b7b3abf5 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1238,71 +1238,79 @@ public final class NodeUtil {\n   static boolean isBooleanResult(Node n) {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n-\n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n+static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+  switch (value.getToken()) {\n+    case ASSIGN:\n+      return isImmutableValue(value.getLastChild())\n+          || (locals.test(value)\n+              && evaluatesToLocalValue(value.getLastChild(), locals));\n+    case COMMA:\n+      return evaluatesToLocalValue(value.getLastChild(), locals);\n+    case AND:\n+    case OR:\n+      return evaluatesToLocalValue(value.getFirstChild(), locals)\n+          && evaluatesToLocalValue(value.getLastChild(), locals);\n+    case HOOK:\n+      return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+          && evaluatesToLocalValue(value.getLastChild(), locals);\n+    case INC:\n+    case DEC:\n+      if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+        return evaluatesToLocalValue(value.getFirstChild(), locals);\n+      } else {\n         return true;\n-      default:\n-        return false;\n-    }\n-  }\n-\n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n+      }\n+    case THIS:\n+    case NAME:\n+      return isImmutableValue(value) || locals.test(value); \n+    case GETELEM:\n+    case GETPROP:\n+      return locals.test(value);\n+    case CALL:\n+      return callHasLocalResult(value)\n+          || isToStringMethodCall(value)\n+          || locals.test(value);\n+    case NEW:\n+      return newHasLocalResult(value)\n+          || locals.test(value);\n+    case FUNCTION:\n+    case REGEXP:\n+    case ARRAYLIT:\n+    case OBJECTLIT:\n+      return true;\n+    case IN:\n+      return true;\n+    case DELPROP:\n+    case GET:\n+      // 'delete' is handled as a GETPROP\n+      return locals.test(value) || isDelete(value);\n+\n+    default:\n+      // Other op forces a local value:\n+      //  x = '' + g (x is now an local string)\n+      //  x -= g (x is now an local number)\n+      if (isAssignmentOp(value)\n+          || isSimpleOperator(value)\n+          || isImmutableValue(value)) {\n         return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n-    }\n-    return false;\n-  }\n-\n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n+      }\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+      throw new IllegalStateException(\n+          \"Unexpected expression node\" + value +\n+          \"\\n parent:\" + value.getParent());\n   }\n+}\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n-    }\n+private static boolean isDelete(Node value) {\n+  if (value.isDelProp() || value.isTypeOf()) {\n+    return true;\n   }\n-\n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n-\n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  if (value.isGetProp()) {\n+    Node propNode = value.getLastChild();\n+    return propNode.isString() && \"delete\".equals(propNode.getString());\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+  return false;\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}