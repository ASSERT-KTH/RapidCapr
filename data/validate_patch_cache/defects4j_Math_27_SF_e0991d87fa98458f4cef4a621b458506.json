{
    "patch": "    public Dfp multiply(final int x) {\n        Dfp result;\n        if (x >= 0 && x < RADIX) {\n            result = multiplyFast(x);\n        } else {\n            result = multiply(newInstance(x));\n        }\n        if (isNaN(result)) {\n            return newInstance(result.getField().getZero());\n        } else {\n            return result;\n        }\n    }\n    \n    public double percentageValue() {\n        Dfp product = multiply(newInstance(100));\n        if (product.isNaN()) {\n            return Double.NaN;\n        } else {\n            return product.doubleValue();\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..61f8ebe66 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,8 +593,27 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n+    public Dfp multiply(final int x) {\n+        Dfp result;\n+        if (x >= 0 && x < RADIX) {\n+            result = multiplyFast(x);\n+        } else {\n+            result = multiply(newInstance(x));\n+        }\n+        if (isNaN(result)) {\n+            return newInstance(result.getField().getZero());\n+        } else {\n+            return result;\n+        }\n+    }\n+    \n     public double percentageValue() {\n-        return multiply(100).doubleValue();\n+        Dfp product = multiply(newInstance(100));\n+        if (product.isNaN()) {\n+            return Double.NaN;\n+        } else {\n+            return product.doubleValue();\n+        }\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}