{
    "patch": "          && n.getNext().getNext().getType() == Token.STRING\n          && n.getNext().getNext().getString().equals(\"prototype\")) {\n\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n          return child.getType() == Token.STRING && child.getNext().getNext() == assign;\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..861d0aae 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,19 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getNext().getNext().getType() == Token.STRING\n+          && n.getNext().getNext().getString().equals(\"prototype\")) {\n+\n+        // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n+        if (isChainedProperty) {\n+          Node child = n.getFirstChild().getFirstChild().getNext();\n+          return child.getType() == Token.STRING && child.getNext().getNext() == assign;\n+        }\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}