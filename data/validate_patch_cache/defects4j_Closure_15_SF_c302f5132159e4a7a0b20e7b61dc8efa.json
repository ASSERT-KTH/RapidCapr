{
    "patch": "public boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without a return statement)\n  if (n == null) {\n      return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // pass one of the dependent variables to a non-side-effect-free\n  // function.\n  if (n.isCall()) {\n      if (NodeUtil.functionCallHasSideEffects(n) || passesDependentVariable(n)) {\n          return true;\n      }\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n      return true;\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n      }\n  }\n  return false;\n}\n\nprivate boolean passesDependentVariable(Node callNode) {\n  Preconditions.checkArgument(callNode.isCall());\n\n  // get the call arguments\n  List<Node> callArgs = new ArrayList<>();\n  for (Node argNode = callNode.getFirstChild().getNext(); argNode != null; argNode = argNode.getNext()) {\n      callArgs.add(argNode);\n  }\n\n  for (Node argNode : callArgs) {\n      // check if the argument is a dependent variable\n      if (isDependentVariable(argNode)) {\n          // check if the argument is passed to a non-side-effect-free function\n          for (Node funcNode = callNode.getFirstChild(); funcNode.isQualifiedName(); funcNode = funcNode.getFirstChild()) {\n              if (NodeUtil.functionCallHasSideEffects(funcNode)) {\n                  return true;\n              }\n          }\n      }\n  }\n  return false;\n}\n\nprivate boolean isDependentVariable(Node node) {\n  return node.isName() && dependentVariables.contains(node.getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..eb0a72bc 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,60 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n+public boolean apply(Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without a return statement)\n+  if (n == null) {\n+      return false;\n+  }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+  // TODO(user): We only care about calls to functions that\n+  // pass one of the dependent variables to a non-side-effect-free\n+  // function.\n+  if (n.isCall()) {\n+      if (NodeUtil.functionCallHasSideEffects(n) || passesDependentVariable(n)) {\n           return true;\n-        }\n+      }\n+  }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+      return true;\n+  }\n+\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n           return true;\n-        }\n+      }\n+  }\n+  return false;\n+}\n+\n+private boolean passesDependentVariable(Node callNode) {\n+  Preconditions.checkArgument(callNode.isCall());\n \n+  // get the call arguments\n+  List<Node> callArgs = new ArrayList<>();\n+  for (Node argNode = callNode.getFirstChild().getNext(); argNode != null; argNode = argNode.getNext()) {\n+      callArgs.add(argNode);\n+  }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n+  for (Node argNode : callArgs) {\n+      // check if the argument is a dependent variable\n+      if (isDependentVariable(argNode)) {\n+          // check if the argument is passed to a non-side-effect-free function\n+          for (Node funcNode = callNode.getFirstChild(); funcNode.isQualifiedName(); funcNode = funcNode.getFirstChild()) {\n+              if (NodeUtil.functionCallHasSideEffects(funcNode)) {\n+                  return true;\n+              }\n           }\n-        }\n-        return false;\n       }\n+  }\n+  return false;\n+}\n+\n+private boolean isDependentVariable(Node node) {\n+  return node.isName() && dependentVariables.contains(node.getString());\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}