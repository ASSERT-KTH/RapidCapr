{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val.getType() == Token.STRING ||\n        val.getType() == Token.NUMBER ||\n        val.getType() == Token.TRUE ||\n        val.getType() == Token.FALSE) {\n        return true;\n    } else if (val.getType() == Token.BITAND ||\n               val.getType() == Token.BITNOT ||\n               val.getType() == Token.BITOR ||\n               val.getType() == Token.BITXOR ||\n               val.getType() == Token.AND ||\n               val.getType() == Token.OR ||\n               val.getType() == Token.LSH ||\n               val.getType() == Token.RSH ||\n               val.getType() == Token.URSH ||\n               val.getType() == Token.ADD ||\n               val.getType() == Token.SUB ||\n               val.getType() == Token.MUL ||\n               val.getType() == Token.DIV ||\n               val.getType() == Token.MOD) {\n        Node firstChild = val.getFirstChild();\n        Node lastChild = val.getLastChild();\n        return isValidDefineValue(firstChild, defines) &&\n               isValidDefineValue(lastChild, defines);\n    } else if (val.getType() == Token.NOT ||\n               val.getType() == Token.NEG) {\n        Node child = val.getFirstChild();\n        return isValidDefineValue(child, defines);\n    } else if (val.getType() == Token.NAME ||\n               val.getType() == Token.GETPROP) {\n        if (val.isQualifiedName()) {\n            return defines.contains(val.getQualifiedName());\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..281d6fc1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,42 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val.getType() == Token.STRING ||\n+        val.getType() == Token.NUMBER ||\n+        val.getType() == Token.TRUE ||\n+        val.getType() == Token.FALSE) {\n         return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n-\n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n+    } else if (val.getType() == Token.BITAND ||\n+               val.getType() == Token.BITNOT ||\n+               val.getType() == Token.BITOR ||\n+               val.getType() == Token.BITXOR ||\n+               val.getType() == Token.AND ||\n+               val.getType() == Token.OR ||\n+               val.getType() == Token.LSH ||\n+               val.getType() == Token.RSH ||\n+               val.getType() == Token.URSH ||\n+               val.getType() == Token.ADD ||\n+               val.getType() == Token.SUB ||\n+               val.getType() == Token.MUL ||\n+               val.getType() == Token.DIV ||\n+               val.getType() == Token.MOD) {\n+        Node firstChild = val.getFirstChild();\n+        Node lastChild = val.getLastChild();\n+        return isValidDefineValue(firstChild, defines) &&\n+               isValidDefineValue(lastChild, defines);\n+    } else if (val.getType() == Token.NOT ||\n+               val.getType() == Token.NEG) {\n+        Node child = val.getFirstChild();\n+        return isValidDefineValue(child, defines);\n+    } else if (val.getType() == Token.NAME ||\n+               val.getType() == Token.GETPROP) {\n         if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+            return defines.contains(val.getQualifiedName());\n         }\n     }\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}