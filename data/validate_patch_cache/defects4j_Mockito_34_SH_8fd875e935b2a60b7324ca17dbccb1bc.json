{
    "patch": "private boolean toStringEquals(Matcher m, Object arg) {\n    if (arg == null) {\n        return StringDescription.toString(m).equals(\"null\");\n    } else {\n        return StringDescription.toString(m).equals(arg.toString());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex c72b119dd..4b5c5ba78 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -103,10 +103,16 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n     public void captureArgumentsFrom(Invocation i) {\n         int k = 0;\n         for (Matcher m : matchers) {\n-            if (m instanceof CapturesArguments) {\n+private boolean toStringEquals(Matcher m, Object arg) {\n+    if (arg == null) {\n+        return StringDescription.toString(m).equals(\"null\");\n+    } else {\n+        return StringDescription.toString(m).equals(arg.toString());\n+    }\n+}\n                 ((CapturesArguments) m).captureFrom(i.getArguments()[k]);\n             }\n             k++;\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}