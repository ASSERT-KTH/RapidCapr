{
    "patch": "import org.apache.commons.math3.linear.LUDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final LUDecomposition dec = new LUDecomposition(m);\n    final RealMatrix l = dec.getL();\n    final RealMatrix u = dec.getU();\n\n    // compute the square root of the lower triangular matrix\n    for (int i = 0; i < l.getRowDimension(); i++) {\n        for (int j = 0; j < i; j++) {\n            l.setEntry(i, j, 0.0);\n        }\n        final double sqrt = FastMath.sqrt(l.getEntry(i, i));\n        for (int j = i; j < l.getColumnDimension(); j++) {\n            l.setEntry(i, j, l.getEntry(i, j) / sqrt);\n        }\n    }\n\n    // compute the square root of the upper triangular matrix\n    for (int i = 0; i < u.getRowDimension(); i++) {\n        for (int j = i + 1; j < u.getColumnDimension(); j++) {\n            u.setEntry(i, j, 0.0);\n        }\n        final double sqrt = FastMath.sqrt(u.getEntry(i, i));\n        for (int j = 0; j <= i; j++) {\n            u.setEntry(i, j, u.getEntry(i, j) / sqrt);\n        }\n    }\n\n    // compute the matrix square root using the LU factors\n    return l.multiply(u);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..4414dd6d1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,37 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.LUDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final LUDecomposition dec = new LUDecomposition(m);\n+    final RealMatrix l = dec.getL();\n+    final RealMatrix u = dec.getU();\n+\n+    // compute the square root of the lower triangular matrix\n+    for (int i = 0; i < l.getRowDimension(); i++) {\n+        for (int j = 0; j < i; j++) {\n+            l.setEntry(i, j, 0.0);\n+        }\n+        final double sqrt = FastMath.sqrt(l.getEntry(i, i));\n+        for (int j = i; j < l.getColumnDimension(); j++) {\n+            l.setEntry(i, j, l.getEntry(i, j) / sqrt);\n+        }\n     }\n+\n+    // compute the square root of the upper triangular matrix\n+    for (int i = 0; i < u.getRowDimension(); i++) {\n+        for (int j = i + 1; j < u.getColumnDimension(); j++) {\n+            u.setEntry(i, j, 0.0);\n+        }\n+        final double sqrt = FastMath.sqrt(u.getEntry(i, i));\n+        for (int j = 0; j <= i; j++) {\n+            u.setEntry(i, j, u.getEntry(i, j) / sqrt);\n+        }\n+    }\n+\n+    // compute the matrix square root using the LU factors\n+    return l.multiply(u);\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}