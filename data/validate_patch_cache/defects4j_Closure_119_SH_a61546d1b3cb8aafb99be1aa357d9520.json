{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                // These could be either a local or a global name.\n                // We assume local to be conservative.\n                if (!isLocalNameReference(name, scope)) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else {\n                  handleSetFromLocal(module, scope, n, parent, name);\n                }\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else if (isExecutedAtCompileTime(n, parent)) {\n                  // Var declarations don't need to be filled out.\n                  return;\n                } else {\n                  handleGet(module, scope, n, parent, name);\n                }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..3f55904d 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -364,6 +363,26 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                // These could be either a local or a global name.\n+                // We assume local to be conservative.\n+                if (!isLocalNameReference(name, scope)) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else {\n+                  handleSetFromLocal(module, scope, n, parent, name);\n+                }\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else if (isExecutedAtCompileTime(n, parent)) {\n+                  // Var declarations don't need to be filled out.\n+                  return;\n+                } else {\n+                  handleGet(module, scope, n, parent, name);\n+                }\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}