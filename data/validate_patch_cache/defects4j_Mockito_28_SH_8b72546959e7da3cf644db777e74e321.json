{
    "patch": "MockCandidateFilter.FilterResult filterResult;\ntry {\n    filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n} catch (Throwable t) {\n    throw new InjectionException(\n        String.format(\"An error occurred while attempting injection for field '%s'\", field.getName()),\n        t\n    );\n}\nif (filterResult != null && filterResult.isMatch()) {\n    filterResult.thenInject();\n    return;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4fc3bf620 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,19 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+MockCandidateFilter.FilterResult filterResult;\n+try {\n+    filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+} catch (Throwable t) {\n+    throw new InjectionException(\n+        String.format(\"An error occurred while attempting injection for field '%s'\", field.getName()),\n+        t\n+    );\n+}\n+if (filterResult != null && filterResult.isMatch()) {\n+    filterResult.thenInject();\n+    return;\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}