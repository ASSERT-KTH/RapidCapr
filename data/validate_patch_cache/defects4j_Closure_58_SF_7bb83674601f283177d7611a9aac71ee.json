{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          Node condExpr = NodeUtil.getConditionExpression(n);\n          if (condExpr != null) {\n            computeGenKill(condExpr, gen, kill, true);\n          }\n        } else {\n          // for (const x in {key1:1, key2:2}) { }\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          // lhs can be NAME, VAR or ARRAY_DECL and it is used only in rhs\n          // Skip the lhs, recurse normally on the rhs, and return.\n          computeGenKill(rhs, gen, kill, true);\n          return;\n        }\n        computeGenKill(NodeUtil.getLoopCodeBlock(n), gen, kill, true);\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, true);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, true);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, true);\n          }\n        }\n        return;\n    }\n  }\n  ```\n  \nThe main problem was with the `Token.FOR` block case. I added a condition to check whether the `FOR` block is iterating over object properties. If not, we get the loop condition and call `computeGenKill()` with it. If it is iterating over object properties, we simply skip over the left-hand side of the loop and call `computeGenKill()` with the loop body",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..4b2fa1ff 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,7 +175,7 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n \n     switch (n.getType()) {\n@@ -193,26 +193,26 @@ class LiveVariablesAnalysis extends\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          Node condExpr = NodeUtil.getConditionExpression(n);\n+          if (condExpr != null) {\n+            computeGenKill(condExpr, gen, kill, true);\n+          }\n         } else {\n-          // for(x in y) {...}\n+          // for (const x in {key1:1, key2:2}) { }\n           Node lhs = n.getFirstChild();\n           Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+          // lhs can be NAME, VAR or ARRAY_DECL and it is used only in rhs\n+          // Skip the lhs, recurse normally on the rhs, and return.\n+          computeGenKill(rhs, gen, kill, true);\n+          return;\n         }\n+        computeGenKill(NodeUtil.getLoopCodeBlock(n), gen, kill, true);\n         return;\n \n       case Token.VAR:\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(c.getFirstChild(), gen, kill, true);\n             if (!conditional) {\n               addToSetIfLocal(c, kill);\n             }\n@@ -222,13 +222,13 @@ class LiveVariablesAnalysis extends\n \n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // Assume both sides are conditional.\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n@@ -252,15 +252,18 @@ class LiveVariablesAnalysis extends\n             // assignments such as a += 1 reads a.\n             addToSetIfLocal(lhs, gen);\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n+          computeGenKill(lhs.getNext(), gen, kill, true);\n         } else {\n           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+            computeGenKill(c, gen, kill, true);\n           }\n         }\n         return;\n     }\n   }\n+  ```\n+  \n+The main problem was with the `Token.FOR` block case. I added a condition to check whether the `FOR` block is iterating over object properties. If not, we get the loop condition and call `computeGenKill()` with it. If it is iterating over object properties, we simply skip over the left-hand side of the loop and call `computeGenKill()` with the loop body\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}