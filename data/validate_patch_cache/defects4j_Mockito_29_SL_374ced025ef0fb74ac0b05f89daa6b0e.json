{
    "patch": "        if (wanted instanceof Object[]) {\n            description.appendText(Arrays.deepToString((Object[]) wanted));\n        } else if (wanted instanceof byte[]) {\n            description.appendText(Arrays.toString((byte[]) wanted));\n        } else if (wanted instanceof short[]) {\n            description.appendText(Arrays.toString((short[]) wanted));\n        } else if (wanted instanceof int[]) {\n            description.appendText(Arrays.toString((int[]) wanted));\n        } else if (wanted instanceof long[]) {\n            description.appendText(Arrays.toString((long[]) wanted));\n        } else if (wanted instanceof char[]) {\n            description.appendText(Arrays.toString((char[]) wanted));\n        } else if (wanted instanceof float[]) {\n            description.appendText(Arrays.toString((float[]) wanted));\n        } else if (wanted instanceof double[]) {\n            description.appendText(Arrays.toString((double[]) wanted));\n        } else if (wanted instanceof boolean[]) {\n            description.appendText(Arrays.toString((boolean[]) wanted));\n        } else {\n            appendQuoting(description);\n            description.appendText(wanted.toString());\n            appendQuoting(description);\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/matchers/Same.java b/src/org/mockito/internal/matchers/Same.java\nindex 6c172fee2..062c4e825 100644\n--- a/src/org/mockito/internal/matchers/Same.java\n+++ b/src/org/mockito/internal/matchers/Same.java\n@@ -26,7 +26,29 @@ public class Same extends ArgumentMatcher<Object> implements Serializable {\n     public void describeTo(Description description) {\n         description.appendText(\"same(\");\n         appendQuoting(description);\n-        description.appendText(wanted.toString());\n+        if (wanted instanceof Object[]) {\n+            description.appendText(Arrays.deepToString((Object[]) wanted));\n+        } else if (wanted instanceof byte[]) {\n+            description.appendText(Arrays.toString((byte[]) wanted));\n+        } else if (wanted instanceof short[]) {\n+            description.appendText(Arrays.toString((short[]) wanted));\n+        } else if (wanted instanceof int[]) {\n+            description.appendText(Arrays.toString((int[]) wanted));\n+        } else if (wanted instanceof long[]) {\n+            description.appendText(Arrays.toString((long[]) wanted));\n+        } else if (wanted instanceof char[]) {\n+            description.appendText(Arrays.toString((char[]) wanted));\n+        } else if (wanted instanceof float[]) {\n+            description.appendText(Arrays.toString((float[]) wanted));\n+        } else if (wanted instanceof double[]) {\n+            description.appendText(Arrays.toString((double[]) wanted));\n+        } else if (wanted instanceof boolean[]) {\n+            description.appendText(Arrays.toString((boolean[]) wanted));\n+        } else {\n+            appendQuoting(description);\n+            description.appendText(wanted.toString());\n+            appendQuoting(description);\n+        }\n         appendQuoting(description);\n         description.appendText(\")\");\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}