{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      //Is this a normal property access, or are we trying to override\n      //an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n      Visibility visibility = docInfo.getVisibility();\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceName());\n\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = Visibility.INHERITED;\n        if (overridingInfo != null) {\n          overridingVisibility = overridingInfo.getVisibility();\n        }\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  propertyName, objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE &&\n            (!isClassType(ownerType) || ownerType.isNominalConstructor())) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (!isClassType(ownerType) || currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..cdd7b6ad 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -406,13 +406,12 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    */\n   private void checkPropertyVisibility(NodeTraversal t,\n       Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n+      //Is this a normal property access, or are we trying to override\n+      //an existing property?\n       boolean isOverride = t.inGlobalScope() &&\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n@@ -422,6 +421,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n       }\n+\n       JSDocInfo docInfo = null;\n       for (; objectType != null;\n            objectType = objectType.getImplicitPrototype()) {\n@@ -431,22 +431,23 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           break;\n         }\n       }\n-\n       if (objectType == null) {\n         // We couldn't find a visibility modifier; assume it's public.\n         return;\n       }\n-\n+      Visibility visibility = docInfo.getVisibility();\n       boolean sameInput =\n           t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n+\n       JSType ownerType = normalizeClassType(objectType);\n       if (isOverride) {\n         // Check an ASSIGN statement that's trying to override a property\n         // on a superclass.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = Visibility.INHERITED;\n+        if (overridingInfo != null) {\n+          overridingVisibility = overridingInfo.getVisibility();\n+        }\n \n         // Check that (a) the property *can* be overridden, and\n         // (b) that the visibility of the override is the same as the\n@@ -459,7 +460,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n             overridingVisibility != visibility) {\n           compiler.report(\n               t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n+                  propertyName, objectType.toString(),\n                   overridingVisibility.name()));\n         }\n       } else {\n@@ -467,7 +468,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // private access is always allowed in the same file.\n           return;\n         } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n+            (!isClassType(ownerType) || ownerType.isNominalConstructor())) {\n           if (docInfo.isConstructor() &&\n               isValidPrivateConstructorAccess(parent)) {\n             return;\n@@ -487,7 +488,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // 2) Overriding the property in a subclass\n           // 3) Accessing the property from inside a subclass\n           // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n+          if (!isClassType(ownerType) || currentClass == null || !currentClass.isSubtype(ownerType)) {\n             compiler.report(\n                 t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                     propertyName,",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}