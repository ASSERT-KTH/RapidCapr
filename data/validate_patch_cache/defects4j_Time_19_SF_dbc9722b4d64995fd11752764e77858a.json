{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetLocal = getOffset(instantLocal);\n    long instantAdjacent = instantLocal - offsetLocal;\n    int offsetAdjacent = getOffset(instantAdjacent);\n\n    if (offsetLocal != offsetAdjacent) {\n        // we might have a overlap or gap\n        long nextLocal = nextTransition(instantAdjacent);\n        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n        if (nextLocal == nextAdjusted) {\n            // gap\n            instantAdjacent = nextLocal - 1;\n            offsetAdjacent = getOffset(instantAdjacent);\n        }\n        else if (instantLocal + offsetLocal >= nextAdjusted && nextAdjusted > nextLocal) {\n            // overlap, instantLocal is in overlap period\n            offsetLocal = getOffset(nextLocal);\n        }\n    }\n    else if (offsetLocal >= 0) {\n        // beforeGap\n        long prevTransition = previousTransition(instantAdjacent);\n        if (prevTransition < instantAdjacent) {\n            int offsetBeforeGap = getOffset(prevTransition);\n            int gapSize = offsetLocal - offsetBeforeGap; // Should be positive by definition\n            if (instantAdjacent - prevTransition > gapSize) {\n                offsetLocal = offsetBeforeGap;\n            }\n        }\n    } \n    // In gap before start of UTC time\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6e51f0dd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetLocal = getOffset(instantLocal);\n+    long instantAdjacent = instantLocal - offsetLocal;\n+    int offsetAdjacent = getOffset(instantAdjacent);\n+\n+    if (offsetLocal != offsetAdjacent) {\n+        // we might have a overlap or gap\n+        long nextLocal = nextTransition(instantAdjacent);\n+        long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+        if (nextLocal == nextAdjusted) {\n+            // gap\n+            instantAdjacent = nextLocal - 1;\n+            offsetAdjacent = getOffset(instantAdjacent);\n+        }\n+        else if (instantLocal + offsetLocal >= nextAdjusted && nextAdjusted > nextLocal) {\n+            // overlap, instantLocal is in overlap period\n+            offsetLocal = getOffset(nextLocal);\n         }\n-        return offsetAdjusted;\n     }\n+    else if (offsetLocal >= 0) {\n+        // beforeGap\n+        long prevTransition = previousTransition(instantAdjacent);\n+        if (prevTransition < instantAdjacent) {\n+            int offsetBeforeGap = getOffset(prevTransition);\n+            int gapSize = offsetLocal - offsetBeforeGap; // Should be positive by definition\n+            if (instantAdjacent - prevTransition > gapSize) {\n+                offsetLocal = offsetBeforeGap;\n+            }\n+        }\n+    } \n+    // In gap before start of UTC time\n+    return offsetLocal;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}