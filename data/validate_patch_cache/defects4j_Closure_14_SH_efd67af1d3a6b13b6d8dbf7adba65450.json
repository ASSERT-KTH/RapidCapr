{
    "patch": "if (cfa != null) {\n  List<Node> succs = cfa.getCfg().getSuccessors(node);\n  if (succs.isEmpty()) {\n    return computeFollowNode(fromNode, node.getParent(), cfa);\n  } else {\n    return succs.get(0);\n  }\n} else {\n  return computeFollowNode(fromNode, node.getParent(), null);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..5a27a375 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  List<Node> succs = cfa.getCfg().getSuccessors(node);\n+  if (succs.isEmpty()) {\n+    return computeFollowNode(fromNode, node.getParent(), cfa);\n+  } else {\n+    return succs.get(0);\n+  }\n+} else {\n+  return computeFollowNode(fromNode, node.getParent(), null);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}