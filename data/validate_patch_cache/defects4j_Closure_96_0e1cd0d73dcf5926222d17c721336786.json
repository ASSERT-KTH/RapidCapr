{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      // If there are no arguments left in the list, then the bound\n      // on the number of arguments must have been violated already\n      if (!arguments.hasNext()) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(call.getChildCount() - 1),\n              String.valueOf(functionType.getMinArguments()),\n              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                  \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      }\n\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs),\n              String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n                  \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..51d0d846 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,11 +1405,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (parameters.hasNext()) {\n+      // If there are no arguments left in the list, then the bound\n+      // on the number of arguments must have been violated already\n+      if (!arguments.hasNext()) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+              validator.getReadableJSTypeName(call.getFirstChild(), false),\n+              String.valueOf(call.getChildCount() - 1),\n+              String.valueOf(functionType.getMinArguments()),\n+              functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                  \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+      }\n+\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1423,9 +1432,10 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n+              String.valueOf(numArgs),\n+              String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+                  \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_WRONG_ARGUMENT_COUNT. Function Function: called with 0 argument(s). Function requires at least 0 argument(s). at testcode line 6 : 109 expected:<0> but was:<1>",
    "test_result": "FAIL"
}