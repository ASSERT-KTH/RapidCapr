{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n                                FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> parameters = functionType.getParameters();\n  int numParams = parameters.size();\n  int numArgs = call.getChildCount() - 1;\n\n  if (numArgs < functionType.getMinArguments()\n      || numArgs > functionType.getMaxArguments()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(functionType.getMinArguments()),\n        functionType.getMaxArguments() != Integer.MAX_VALUE ? \" and no more than \"\n            + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    return;\n  }\n\n  int ordinal = 0;\n  boolean varArgs = functionType.hasJrest();\n  List<Node> restParams = varArgs ? parameters.subList(numArgs - 1, numParams) : null;\n  for (Node parameter : parameters) {\n    ++ordinal;\n    if (!arguments.hasNext()) {\n      if (varArgs && restParams.contains(parameter)) {\n        break; // rest parameters can be optional\n      }\n      report(t, call, MISSING_PARAMETER, parameter.getString());\n      return;\n    }\n    Node argument = arguments.next();\n    JSType expectedArgType = varArgs && restParams.contains(parameter)\n        ? functionType.getJrest().getType() : getJSType(parameter);\n    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n        expectedArgType, call, ordinal);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..731da185 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,45 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call,\n+                                FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> parameters = functionType.getParameters();\n+  int numParams = parameters.size();\n+  int numArgs = call.getChildCount() - 1;\n+\n+  if (numArgs < functionType.getMinArguments()\n+      || numArgs > functionType.getMaxArguments()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs),\n+        String.valueOf(functionType.getMinArguments()),\n+        functionType.getMaxArguments() != Integer.MAX_VALUE ? \" and no more than \"\n+            + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+    return;\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  int ordinal = 0;\n+  boolean varArgs = functionType.hasJrest();\n+  List<Node> restParams = varArgs ? parameters.subList(numArgs - 1, numParams) : null;\n+  for (Node parameter : parameters) {\n+    ++ordinal;\n+    if (!arguments.hasNext()) {\n+      if (varArgs && restParams.contains(parameter)) {\n+        break; // rest parameters can be optional\n+      }\n+      report(t, call, MISSING_PARAMETER, parameter.getString());\n+      return;\n     }\n+    Node argument = arguments.next();\n+    JSType expectedArgType = varArgs && restParams.contains(parameter)\n+        ? functionType.getJrest().getType() : getJSType(parameter);\n+    validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+        expectedArgType, call, ordinal);\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}