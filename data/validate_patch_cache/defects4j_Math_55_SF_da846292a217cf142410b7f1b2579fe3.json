{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      double v1X = v1.getX();\n      double v1Y = v1.getY();\n      double v1Z = v1.getZ();\n\n      double v2X = v2.getX();\n      double v2Y = v2.getY();\n      double v2Z = v2.getZ();\n\n      double crossX = v1Y * v2Z - v1Z * v2Y;\n      double crossY = v1Z * v2X - v1X * v2Z;\n      double crossZ = v1X * v2Y - v1Y * v2X;\n\n      return new Vector3D(crossX, crossY, crossZ);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..1f66a8ed1 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,22 +456,19 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      double v1X = v1.getX();\n+      double v1Y = v1.getY();\n+      double v1Z = v1.getZ();\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+      double v2X = v2.getX();\n+      double v2Y = v2.getY();\n+      double v2Z = v2.getZ();\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      double crossX = v1Y * v2Z - v1Z * v2Y;\n+      double crossY = v1Z * v2X - v1X * v2Z;\n+      double crossZ = v1X * v2Y - v1Y * v2X;\n \n+      return new Vector3D(crossX, crossY, crossZ);\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}