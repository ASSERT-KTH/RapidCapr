{
    "patch": "private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, Map<TypeVariable<?>, Type> typeVarAssignments) {\n    Type assignedToTypeVariable = typeVarAssignments.get(typeVariable);\n    if (assignedToTypeVariable != null) {\n        return assignedToTypeVariable;\n    }\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 1) {\n        if (bounds[0] instanceof TypeVariable) {\n            Type actualTypeArgumentForBounds = getActualTypeArgumentFor((TypeVariable<?>) bounds[0], typeVarAssignments);\n            if (actualTypeArgumentForBounds != null) {\n                return actualTypeArgumentForBounds;\n            }\n        } else {\n            return bounds[0];\n        }\n    } else if (bounds.length > 1) {\n        throw new UnsupportedOperationException(\"Bounds length \" + bounds.length + \" for type variable \" + typeVariable.getName() + \" not supported.\");\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..3d8dfb5e2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,26 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private static Type getActualTypeArgumentFor(TypeVariable<?> typeVariable, Map<TypeVariable<?>, Type> typeVarAssignments) {\n+    Type assignedToTypeVariable = typeVarAssignments.get(typeVariable);\n+    if (assignedToTypeVariable != null) {\n+        return assignedToTypeVariable;\n+    }\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 1) {\n+        if (bounds[0] instanceof TypeVariable) {\n+            Type actualTypeArgumentForBounds = getActualTypeArgumentFor((TypeVariable<?>) bounds[0], typeVarAssignments);\n+            if (actualTypeArgumentForBounds != null) {\n+                return actualTypeArgumentForBounds;\n+            }\n+        } else {\n+            return bounds[0];\n+        }\n+    } else if (bounds.length > 1) {\n+        throw new UnsupportedOperationException(\"Bounds length \" + bounds.length + \" for type variable \" + typeVariable.getName() + \" not supported.\");\n+    }\n+    return null;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}