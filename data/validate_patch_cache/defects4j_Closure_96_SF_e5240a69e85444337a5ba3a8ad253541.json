{
    "patch": "import com.google.common.collect.Lists;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\n// ...\n\nprivate void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> parameters = Lists.newArrayList(functionType.getParameters());\n  if (functionType.hasRestFormals()) {\n    parameters.remove(parameters.size() - 1);\n  }\n  int ordinal = 0;\n  Node parameter, argument;\n  while (arguments.hasNext() && !parameters.isEmpty()) {\n    parameter = parameters.get(0);\n    argument = arguments.next();\n    ordinal++;\n    validator.expectArgumentMatchesParameter(\n        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    parameters.remove(0);\n  }\n\n  int numArgs = call.getChildCount() - 1;\n  int minArgs = functionType.getMinArguments();\n  int maxArgs = functionType.getMaxArguments();\n  if (minArgs > numArgs || maxArgs < numArgs) {\n    report(\n        t,\n        call,\n        WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs),\n        String.valueOf(minArgs),\n        maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n  }\n\n  if (functionType.hasRestFormals() && !parameters.isEmpty()) {\n    Node restFormal = functionType.getRestFormalsNode().getFirstChild();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(restFormal), call, ordinal);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..27329481 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n+import com.google.common.collect.Lists;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+// ...\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> parameters = Lists.newArrayList(functionType.getParameters());\n+  if (functionType.hasRestFormals()) {\n+    parameters.remove(parameters.size() - 1);\n+  }\n+  int ordinal = 0;\n+  Node parameter, argument;\n+  while (arguments.hasNext() && !parameters.isEmpty()) {\n+    parameter = parameters.get(0);\n+    argument = arguments.next();\n+    ordinal++;\n+    validator.expectArgumentMatchesParameter(\n+        t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n+    parameters.remove(0);\n+  }\n+\n+  int numArgs = call.getChildCount() - 1;\n+  int minArgs = functionType.getMinArguments();\n+  int maxArgs = functionType.getMaxArguments();\n+  if (minArgs > numArgs || maxArgs < numArgs) {\n+    report(\n+        t,\n+        call,\n+        WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs),\n+        String.valueOf(minArgs),\n+        maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  }\n+\n+  if (functionType.hasRestFormals() && !parameters.isEmpty()) {\n+    Node restFormal = functionType.getRestFormalsNode().getFirstChild();\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(restFormal), call, ordinal);\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}