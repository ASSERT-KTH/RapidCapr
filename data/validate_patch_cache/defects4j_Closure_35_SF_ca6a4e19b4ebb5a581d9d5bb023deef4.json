{
    "patch": "  private static void inferPropertiesDeclaredOnConstraintObj(\n      JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType == null) {\n      return;\n    }\n\n    JSType constraintObjNotNullOrUndef = constraint.restrictByNotNullOrUndefined();\n    if (!constraintObjNotNullOrUndef.isSubtypeOf(getNativeObjectType())) {\n      return;\n    }\n\n    ObjectType constraintObj = constraintObjNotNullOrUndef.toObjectType();\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!objType.isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!objType.hasProperty(prop)) {\n            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n          }\n          objType.defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..a8f74165 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,26 +1111,32 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n+  private static void inferPropertiesDeclaredOnConstraintObj(\n       JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType == null) {\n+      return;\n+    }\n+\n+    JSType constraintObjNotNullOrUndef = constraint.restrictByNotNullOrUndefined();\n+    if (!constraintObjNotNullOrUndef.isSubtypeOf(getNativeObjectType())) {\n+      return;\n+    }\n+\n+    ObjectType constraintObj = constraintObjNotNullOrUndef.toObjectType();\n+    if (constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!objType.isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!objType.hasProperty(prop)) {\n+            typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n           }\n+          objType.defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}