{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      // Check if variable is being assigned to\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        return VariableLiveness.KILL;\n      } else {\n        // Check if variable is being used (read)\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Check if variable is used (read) within a child node\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        // If the variable is definitely read or killed, return it\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    // Variable is maybe live (neither read nor killed)\n    return VariableLiveness.MAYBE_LIVE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..5469f0ee 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,30 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+      // Check if variable is being assigned to\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n         return VariableLiveness.KILL;\n       } else {\n+        // Check if variable is being used (read)\n         return VariableLiveness.READ;\n       }\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n+    // Check if variable is used (read) within a child node\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+        // If the variable is definitely read or killed, return it\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }\n       }\n     }\n+    // Variable is maybe live (neither read nor killed)\n     return VariableLiveness.MAYBE_LIVE;\n-  }\n+}\n }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}