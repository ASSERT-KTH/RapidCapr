{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    Set<String> unusedArgs = new HashSet<String>();\n    // Collect all unreferenced arguments.\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (!referenced.contains(var)) {\n        unusedArgs.add(argName);\n      }\n      arg = arg.getNext();\n    }\n\n    if (!modifyCallers) {\n      // Remove unreferenced arguments.\n      for (String argName : unusedArgs) {\n        Node argToRemove = findDeclaredArg(argList, argName);\n        if (argToRemove != null) {\n          argList.removeChild(argToRemove);\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n    compiler.reportCodeChange();\n  }\n  \n  private Node findDeclaredArg(Node argList, String argName) {\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      if (arg.getString().equals(argName)) {\n        return arg;\n      }\n      arg = arg.getNext();\n    }\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..84e97fb3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    Set<String> unusedArgs = new HashSet<String>();\n+    // Collect all unreferenced arguments.\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (!referenced.contains(var)) {\n+        unusedArgs.add(argName);\n+      }\n+      arg = arg.getNext();\n+    }\n+\n+    if (!modifyCallers) {\n+      // Remove unreferenced arguments.\n+      for (String argName : unusedArgs) {\n+        Node argToRemove = findDeclaredArg(argList, argName);\n+        if (argToRemove != null) {\n+          argList.removeChild(argToRemove);\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+    compiler.reportCodeChange();\n+  }\n+  \n+  private Node findDeclaredArg(Node argList, String argName) {\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      if (arg.getString().equals(argName)) {\n+        return arg;\n+      }\n+      arg = arg.getNext();\n+    }\n+    return null;\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}