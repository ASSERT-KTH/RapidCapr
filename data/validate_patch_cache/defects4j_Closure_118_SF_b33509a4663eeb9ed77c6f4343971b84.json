{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n        if (prop == null) {\n            prop = new Property(name);\n            this.properties.put(name, prop);\n        }\n        if (!prop.scheduleRenaming(child,\n                processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (this.propertiesToErrorFor.containsKey(name)) {\n                MessageFormat mf = new MessageFormat(this.propertiesToErrorFor.get(name));\n                Object[] arguments = {name, type == null ? \"null\" : type.toString(), n.toString()};\n                String message = mf.format(arguments);\n                compiler.report(JSError.make(\n                        t.getSourceName(), child, RhinoErrorReporter.TYPE_PARSE_ERROR, message));\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..617a98a1 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,32 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n         T type = typeSystem.getType(getScope(), n, name);\n-\n         Property prop = getProperty(name);\n+        if (prop == null) {\n+            prop = new Property(name);\n+            this.properties.put(name, prop);\n+        }\n         if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+                processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (this.propertiesToErrorFor.containsKey(name)) {\n+                MessageFormat mf = new MessageFormat(this.propertiesToErrorFor.get(name));\n+                Object[] arguments = {name, type == null ? \"null\" : type.toString(), n.toString()};\n+                String message = mf.format(arguments);\n+                compiler.report(JSError.make(\n+                        t.getSourceName(), child, RhinoErrorReporter.TYPE_PARSE_ERROR, message));\n+            }\n         }\n-      }\n     }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}