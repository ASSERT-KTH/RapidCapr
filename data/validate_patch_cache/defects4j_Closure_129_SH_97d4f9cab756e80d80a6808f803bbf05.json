{
    "patch": "      Node c = first.getNext();\n      while (c != null) {\n        if (c.getBooleanProp(Node.IS_CATCH_SCOPE)) {\n          c = c.getFirstChild();\n          continue;\n        }\n\n        // Ignore casts\n        if (!NodeUtil.isImmutableValue(c)) {\n          if (c.isFunction()) {\n            c = c.getLastChild();\n          } else if (c.getBooleanProp(Node.DYNAMIC_IMPORT_VAR)) {\n            c = c.getNext();\n          } else if (c.isExprResult() && c.getFirstChild().isGetProp()) {\n            annotateExprResultCall(c.getFirstChild());\n            c = c.getNext();\n            continue;\n          } else if (c.isGetProp()) {\n            annotateExprResultCall(c);\n            c = c.getNext();\n            continue;\n          } else if (!c.isCast() && !c.isString() && !c.isTemplateLit() && !c.isArrayPattern()\n              && !c.isDefaultValue() && !NodeUtil.isExpressionNode(c)) {\n            throw new RuntimeException(\"Unexpected: \" + c);\n          }\n        }\n        c = c.getNext();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..95fb1550 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,34 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node c = first.getNext();\n+      while (c != null) {\n+        if (c.getBooleanProp(Node.IS_CATCH_SCOPE)) {\n+          c = c.getFirstChild();\n+          continue;\n+        }\n+\n+        // Ignore casts\n+        if (!NodeUtil.isImmutableValue(c)) {\n+          if (c.isFunction()) {\n+            c = c.getLastChild();\n+          } else if (c.getBooleanProp(Node.DYNAMIC_IMPORT_VAR)) {\n+            c = c.getNext();\n+          } else if (c.isExprResult() && c.getFirstChild().isGetProp()) {\n+            annotateExprResultCall(c.getFirstChild());\n+            c = c.getNext();\n+            continue;\n+          } else if (c.isGetProp()) {\n+            annotateExprResultCall(c);\n+            c = c.getNext();\n+            continue;\n+          } else if (!c.isCast() && !c.isString() && !c.isTemplateLit() && !c.isArrayPattern()\n+              && !c.isDefaultValue() && !NodeUtil.isExpressionNode(c)) {\n+            throw new RuntimeException(\"Unexpected: \" + c);\n+          }\n+        }\n+        c = c.getNext();\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}