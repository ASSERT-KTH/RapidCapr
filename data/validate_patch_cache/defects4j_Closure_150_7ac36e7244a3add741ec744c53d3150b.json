{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) {\n      return;\n    }\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n      return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        String functionName = n.getFirstChild().getString();\n        if (parent.hasChildren() && parent.getFirstChild().isGetProp()) {\n          String name = NodeUtil.getBestLValueName(parent.getFirstChild());\n          defineObjectProperty(name + \".\" + functionName, n);\n        } else {\n          defineDeclaredFunction(n, parent);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      default:\n        // Do nothing.\n        break;\n    }\n  }\n\n  private void defineObjectProperty(String name, Node n) {\n    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n    Var var = scope.getVar(name);\n    if (var == null) {\n      declareVariable(name, jsDoc, false, n);\n    } else {\n      defineSlot(var, jsDoc, false, n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d07f7131 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) {\n+      return;\n+    }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      handleFunctionInputs(parent);\n+      return;\n+    }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        String functionName = n.getFirstChild().getString();\n+        if (parent.hasChildren() && parent.getFirstChild().isGetProp()) {\n+          String name = NodeUtil.getBestLValueName(parent.getFirstChild());\n+          defineObjectProperty(name + \".\" + functionName, n);\n+        } else {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      default:\n+        // Do nothing.\n+        break;\n+    }\n+  }\n+\n+  private void defineObjectProperty(String name, Node n) {\n+    JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+    Var var = scope.getVar(name);\n+    if (var == null) {\n+      declareVariable(name, jsDoc, false, n);\n+    } else {\n+      defineSlot(var, jsDoc, false, n);\n     }\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}