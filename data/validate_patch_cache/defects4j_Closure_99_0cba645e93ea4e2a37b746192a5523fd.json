{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.isFunction() && !n.isConstructor()) {\n      // Don't traverse functions that have the @this or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && (jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    Node typeDeclaration = null;\n    if (NodeUtil.isNamedTypeDeclaration(parent)) {\n      typeDeclaration = parent;\n    } \n\n    if (parent != null && parent.isAssign()) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.isGetProp() &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    }\n\n    // Don't traverse type declarations that have the @private annotation.\n    if (NodeUtil.isNamedTypeDeclaration(n) && NodeUtil.hasPrivateVisibility(n)) {\n      return false;\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..6d788ed3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -83,14 +83,10 @@ final class CheckGlobalThis implements Callback {\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+    if (n.isFunction() && !n.isConstructor()) {\n+      // Don't traverse functions that have the @this or @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && (jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n@@ -108,30 +104,38 @@ final class CheckGlobalThis implements Callback {\n       }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node typeDeclaration = null;\n+    if (NodeUtil.isNamedTypeDeclaration(parent)) {\n+      typeDeclaration = parent;\n+    } \n+\n+    if (parent != null && parent.isAssign()) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n       \n       if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n+        // Always traverse the left side of the assignment.\n         if (assignLhsChild == null) {\n           assignLhsChild = lhs;\n         }\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+        if (lhs.isGetProp() &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+          return false;\n+        }\n       }\n     }\n \n+    // Don't traverse type declarations that have the @private annotation.\n+    if (NodeUtil.isNamedTypeDeclaration(n) && NodeUtil.hasPrivateVisibility(n)) {\n+      return false;\n+    }\n+\n     return true;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}