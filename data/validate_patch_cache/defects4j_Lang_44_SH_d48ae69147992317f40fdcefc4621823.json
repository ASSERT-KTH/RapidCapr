{
    "patch": "if (!isFloatingPoint && secondLastChar != 'e' && secondLastChar != 'E') {\n    try {\n        return Integer.valueOf(val);\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    try {\n        return Long.valueOf(val);\n    } catch (NumberFormatException nfe) {\n        // ignore the bad number\n    }\n\n    return createBigInteger(val);\n\n} else {\n    try {\n        final Float floatValue = createFloat(val);\n        if (!floatValue.isInfinite() && !(floatValue.floatValue() == 0.0F && !isAllZeros(val))) {\n            return floatValue;\n        }\n    } catch(NumberFormatException exFloat) {\n        // Do nothing\n    }\n\n    try {\n        final Double doubleValue = createDouble(val);\n        if (!doubleValue.isInfinite() && !(doubleValue.doubleValue() == 0.0D && !isAllZeros(val))) {\n            return doubleValue;\n        }\n    } catch(NumberFormatException exDouble) {\n        // Do nothing\n    }\n\n    return createBigDecimal(val);\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..1fffa978 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,43 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (!isFloatingPoint && secondLastChar != 'e' && secondLastChar != 'E') {\n+    try {\n+        return Integer.valueOf(val);\n+    } catch (NumberFormatException nfe) {\n+        // ignore the bad number\n+    }\n+\n+    try {\n+        return Long.valueOf(val);\n+    } catch (NumberFormatException nfe) {\n+        // ignore the bad number\n+    }\n+\n+    return createBigInteger(val);\n+\n+} else {\n+    try {\n+        final Float floatValue = createFloat(val);\n+        if (!floatValue.isInfinite() && !(floatValue.floatValue() == 0.0F && !isAllZeros(val))) {\n+            return floatValue;\n+        }\n+    } catch(NumberFormatException exFloat) {\n+        // Do nothing\n+    }\n+\n+    try {\n+        final Double doubleValue = createDouble(val);\n+        if (!doubleValue.isInfinite() && !(doubleValue.doubleValue() == 0.0D && !isAllZeros(val))) {\n+            return doubleValue;\n+        }\n+    } catch(NumberFormatException exDouble) {\n+        // Do nothing\n+    }\n+\n+    return createBigDecimal(val);\n+\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}