{
    "patch": "        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        int lastHold = start;\n        boolean insideQuote = false;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (c[pos.getIndex()] == QUOTE && !insideQuote) {\n                insideQuote = true;\n                lastHold = pos.getIndex();\n                next(pos);\n                continue;\n            }\n            if (insideQuote) {\n                if (c[pos.getIndex()] == QUOTE) {\n                    insideQuote = false;\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold+1,\n                            pos.getIndex() - lastHold - 1);\n                }\n                if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                    i += ESCAPED_QUOTE.length() - 1;\n                    continue;\n                }\n            } else {\n                switch (c[pos.getIndex()]) {\n                case QUOTE:\n                    throw new IllegalArgumentException(\n                            \"Unterminated quoted string at position \" + start);\n                default:\n                    next(pos);\n                }\n            }\n        }\n        if(insideQuote) {\n            throw new IllegalArgumentException(\n                    \"Unterminated quoted string at position \" + start);\n        }\n        return appendTo == null ? null : appendTo.append(c, lastHold,\n                pos.getIndex() - lastHold);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..8b62f91f 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,44 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+        int start = pos.getIndex();\n+        char[] c = pattern.toCharArray();\n+        int lastHold = start;\n+        boolean insideQuote = false;\n+        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+            if (c[pos.getIndex()] == QUOTE && !insideQuote) {\n+                insideQuote = true;\n+                lastHold = pos.getIndex();\n+                next(pos);\n+                continue;\n+            }\n+            if (insideQuote) {\n+                if (c[pos.getIndex()] == QUOTE) {\n+                    insideQuote = false;\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c, lastHold+1,\n+                            pos.getIndex() - lastHold - 1);\n+                }\n+                if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+                    i += ESCAPED_QUOTE.length() - 1;\n+                    continue;\n+                }\n+            } else {\n+                switch (c[pos.getIndex()]) {\n+                case QUOTE:\n+                    throw new IllegalArgumentException(\n+                            \"Unterminated quoted string at position \" + start);\n+                default:\n+                    next(pos);\n+                }\n+            }\n+        }\n+        if(insideQuote) {\n+            throw new IllegalArgumentException(\n+                    \"Unterminated quoted string at position \" + start);\n+        }\n+        return appendTo == null ? null : appendTo.append(c, lastHold,\n+                pos.getIndex() - lastHold);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: variable start is already defined in method appendQuotedString(String,ParsePosition,StringBuffer,boolean)",
    "test_result": "ERROR"
}