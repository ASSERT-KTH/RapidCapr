{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n  Node child = n.getFirstChild();\n  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n  if (!childType.canBeCalled()) {\n    report(t, n, NOT_CALLABLE, childType.toString());\n    ensureTyped(t, n);\n    return;\n  }\n\n  // A couple of types can be called as if they were functions.\n  // If it is a function type, then validate parameters.\n  if (childType.isFunctionType()) { // changed from instanceof to isFunctionType\n    FunctionType functionType = childType.toMaybeFunctionType(); // added type casting\n\n    boolean isExtern = false;\n    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n    if(functionJSDocInfo != null) {\n      String sourceName = functionJSDocInfo.getSourceFileName();\n      CompilerInput functionSource = compiler.getInput(sourceName);\n      isExtern = functionSource.isExtern();\n    }\n\n    // Non-native constructors should not be called directly\n    // unless they specify a return type and are defined\n    // in an extern.\n    if (functionType.isConstructor() &&\n        !functionType.isNativeObjectType() &&\n        (functionType.getReturnType().isUnknownType() ||\n         functionType.getReturnType().isVoidType() ||\n         !isExtern)) {\n      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n    }\n\n    // Functions with explicit 'this' types must be called in a GETPROP\n    // or GETELEM.\n    // CHANGED logic to test whether function type's this type is valid to support type casts\n    // and do not throw an error if there's a call without this argument and the function allows that\n    if (functionType.getThisType() != null && (!n.hasTwoChildren() || !n.getLastChild().isThis())) {\n        report(t, n, FUNCTION_WITH_NON_OBJECT_THIS_TYPE, functionType.toString());\n    }\n\n    visitParameterList(t, n, functionType);\n    ensureTyped(t, n, functionType.getReturnType());\n  } else {\n    ensureTyped(t, n);\n  }\n\n  // TODO: Add something to check for calls of RegExp objects, which is not\n  // supported by IE.  Either say something about the return type or warn\n  // about the non-portability of the call or both.\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..40b9a08f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,54 +1541,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+private void visitCall(NodeTraversal t, Node n) {\n+  Node child = n.getFirstChild();\n+  JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n+  if (!childType.canBeCalled()) {\n+    report(t, n, NOT_CALLABLE, childType.toString());\n+    ensureTyped(t, n);\n+    return;\n+  }\n \n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-      }\n+  // A couple of types can be called as if they were functions.\n+  // If it is a function type, then validate parameters.\n+  if (childType.isFunctionType()) { // changed from instanceof to isFunctionType\n+    FunctionType functionType = childType.toMaybeFunctionType(); // added type casting\n+\n+    boolean isExtern = false;\n+    JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+    if(functionJSDocInfo != null) {\n+      String sourceName = functionJSDocInfo.getSourceFileName();\n+      CompilerInput functionSource = compiler.getInput(sourceName);\n+      isExtern = functionSource.isExtern();\n+    }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+    // Non-native constructors should not be called directly\n+    // unless they specify a return type and are defined\n+    // in an extern.\n+    if (functionType.isConstructor() &&\n+        !functionType.isNativeObjectType() &&\n+        (functionType.getReturnType().isUnknownType() ||\n+         functionType.getReturnType().isVoidType() ||\n+         !isExtern)) {\n+      report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+    }\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n+    // Functions with explicit 'this' types must be called in a GETPROP\n+    // or GETELEM.\n+    // CHANGED logic to test whether function type's this type is valid to support type casts\n+    // and do not throw an error if there's a call without this argument and the function allows that\n+    if (functionType.getThisType() != null && (!n.hasTwoChildren() || !n.getLastChild().isThis())) {\n+        report(t, n, FUNCTION_WITH_NON_OBJECT_THIS_TYPE, functionType.toString());\n     }\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+    visitParameterList(t, n, functionType);\n+    ensureTyped(t, n, functionType.getReturnType());\n+  } else {\n+    ensureTyped(t, n);\n   }\n \n+  // TODO: Add something to check for calls of RegExp objects, which is not\n+  // supported by IE.  Either say something about the return type or warn\n+  // about the non-portability of the call or both.\n+}\n+\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}