{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check for valid input and index values\n        if (input == null || input.length() == 0 || index < 0 || index >= input.length()) {\n            return 0;\n        }\n\n        // Check for the '&' character followed by '#' character\n        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n            return 0;\n        }\n\n        // Initialize variables to parse input\n        boolean isHex = false;\n        int start = index + 2;\n        int end = start;\n\n        // Check if the input contains a hexadecimal escape sequence.\n        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n            isHex = true;\n            start++;\n        }\n\n        // Find the end of the entity\n        while (end < input.length() && input.charAt(end) != ';') {\n            end++;\n        }\n\n        // Check if the entity has an ending semicolon\n        if (end == input.length()) {\n            return 0;\n        }\n\n        // Parse the entity value\n        String entityValue = input.subSequence(start, end).toString();\n        int unicodeValue;\n        try {\n            unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        // Check if the unicode value is valid\n        if (!Character.isValidCodePoint(unicodeValue)) {\n            return 0;\n        }\n\n        // Write the unicode character to the output writer\n        char[] chars = Character.toChars(unicodeValue);\n        out.write(chars);\n\n        // Return the number of characters processed\n        return end - index + 1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..db1f5e5c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -33,36 +33,56 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      */\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+        // Check for valid input and index values\n+        if (input == null || input.length() == 0 || index < 0 || index >= input.length()) {\n+            return 0;\n+        }\n+\n+        // Check for the '&' character followed by '#' character\n+        if (input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+            return 0;\n+        }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+        // Initialize variables to parse input\n+        boolean isHex = false;\n+        int start = index + 2;\n+        int end = start;\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        // Check if the input contains a hexadecimal escape sequence.\n+        if (input.charAt(start) == 'x' || input.charAt(start) == 'X') {\n+            isHex = true;\n+            start++;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+        // Find the end of the entity\n+        while (end < input.length() && input.charAt(end) != ';') {\n+            end++;\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        // Check if the entity has an ending semicolon\n+        if (end == input.length()) {\n+            return 0;\n         }\n-        return 0;\n+\n+        // Parse the entity value\n+        String entityValue = input.subSequence(start, end).toString();\n+        int unicodeValue;\n+        try {\n+            unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n+\n+        // Check if the unicode value is valid\n+        if (!Character.isValidCodePoint(unicodeValue)) {\n+            return 0;\n+        }\n+\n+        // Write the unicode character to the output writer\n+        char[] chars = Character.toChars(unicodeValue);\n+        out.write(chars);\n+\n+        // Return the number of characters processed\n+        return end - index + 1;\n     }\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}