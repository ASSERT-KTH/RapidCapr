{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n    boolean hasSideEffects = false;\n\n    if (block.getChildCount() > 0) {\n      Preconditions.checkState(block.getChildCount() == 1);\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n\n    // Arguments for the call.\n    Node callArgs = callNode.getFirstChild().getNext();\n    // Parameters names of the called function.\n    Node fnParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n    while (callArgs != null || fnParams != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParams != null) {\n        if (callArgs != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(callArgs)) {\n            return CanInlineResult.NO;\n          }\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          String paramName = fnParams.getString();\n          if (NodeUtil.mayEffectMutableState(callArgs, compiler)\n              && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n\n        // Move to the next name.\n        fnParams = fnParams.getNext();\n      }\n\n      // For every call argument check for side-effects, even if there\n      // isn't a named parameter to match.\n      if (callArgs != null) {\n        if (NodeUtil.mayHaveSideEffects(callArgs, compiler)) {\n          return CanInlineResult.NO;\n        }\n        callArgs = callArgs.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..1c0d1973 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -692,65 +692,50 @@ class FunctionInjector {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n-\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n+\n+    if (block.getChildCount() > 0) {\n+      Preconditions.checkState(block.getChildCount() == 1);\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+    // Arguments for the call.\n+    Node callArgs = callNode.getFirstChild().getNext();\n+    // Parameters names of the called function.\n+    Node fnParams = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n+    while (callArgs != null || fnParams != null) {\n       // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+      if (fnParams != null) {\n+        if (callArgs != null) {\n+          if (hasSideEffects && NodeUtil.canBeSideEffected(callArgs)) {\n             return CanInlineResult.NO;\n           }\n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n           // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+          String paramName = fnParams.getString();\n+          if (NodeUtil.mayEffectMutableState(callArgs, compiler)\n+              && NodeUtil.getNameReferenceCount(block, paramName) > 1) {\n             return CanInlineResult.NO;\n           }\n         }\n \n         // Move to the next name.\n-        fnParam = fnParam.getNext();\n+        fnParams = fnParams.getNext();\n       }\n \n       // For every call argument check for side-effects, even if there\n       // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      if (callArgs != null) {\n+        if (NodeUtil.mayHaveSideEffects(callArgs, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        callArgs = callArgs.getNext();\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}