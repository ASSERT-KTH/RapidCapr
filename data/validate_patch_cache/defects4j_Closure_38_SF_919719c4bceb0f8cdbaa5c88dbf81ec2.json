{
    "patch": "void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      String str = String.valueOf(x);\n      if (negativeZero) {\n        str = str.replaceFirst(\"-\", \"- \");\n      }\n      add(str);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..7b1be4c4 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -237,7 +237,7 @@ abstract class CodeConsumer {\n     }\n   }\n \n-  void addNumber(double x) {\n+void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n@@ -262,7 +262,11 @@ abstract class CodeConsumer {\n         add(Long.toString(value));\n       }\n     } else {\n-      add(String.valueOf(x));\n+      String str = String.valueOf(x);\n+      if (negativeZero) {\n+        str = str.replaceFirst(\"-\", \"- \");\n+      }\n+      add(str);\n     }\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<var x=-[]0.0> but was:<var x=-[ ]0.0>",
    "test_result": "FAIL"
}