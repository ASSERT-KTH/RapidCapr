{
    "patch": "  private void inferPropertyTypes(\n      ObjectType objType, ObjectType constraintObj) {\n    if (objType == null || constraintObj == null || !constraintObj.isRecordType()) {\n      return;\n    }\n    for (String propName : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(propName);\n      if (!objType.isPropertyTypeDeclared(propName)) {\n        JSType inferredType =\n            objType.hasProperty(propName)\n                ? getNativeType(VOID_TYPE).getLeastSupertype(propType)\n                : propType;\n        objType.defineInferredProperty(propName, inferredType, null);\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      if (type != null) {\n        JSType narrowed = type.restrictByNotNullOrUndefined();\n        if (type != narrowed) {\n          scope = narrowScope(scope, n, narrowed);\n        }\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..949f8605 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,27 +1111,19 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n+  private void inferPropertyTypes(\n+      ObjectType objType, ObjectType constraintObj) {\n+    if (objType == null || constraintObj == null || !constraintObj.isRecordType()) {\n       return;\n     }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+    for (String propName : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(propName);\n+      if (!objType.isPropertyTypeDeclared(propName)) {\n+        JSType inferredType =\n+            objType.hasProperty(propName)\n+                ? getNativeType(VOID_TYPE).getLeastSupertype(propType)\n+                : propType;\n+        objType.defineInferredProperty(propName, inferredType, null);\n       }\n     }\n   }\n@@ -1143,13 +1135,18 @@ class TypeInference\n   private FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n-      JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+      if (type != null) {\n+        JSType narrowed = type.restrictByNotNullOrUndefined();\n+        if (type != narrowed) {\n+          scope = narrowScope(scope, n, narrowed);\n+        }\n       }\n     }\n     return scope;\n   }\n+    }\n+    return scope;\n+  }\n \n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}