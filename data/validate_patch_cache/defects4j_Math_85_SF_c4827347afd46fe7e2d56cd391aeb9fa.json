{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\nimport org.apache.commons.math3.exception.MathIllegalArgumentException;\nimport org.apache.commons.math3.analysis.UnivariateRealFunction;\nimport org.apache.commons.math3.util.FastMath;\n\npublic static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        MathIllegalArgumentException, MaxCountExceededException {\n\n    if (function == null) {\n        throw new MathIllegalArgumentException(LocalizedFormats.FUNCTION_NOT_BOUND_TO_BE_OPTIMIZED);\n    }\n    if (maximumIterations <= 0)  {\n        throw new MathIllegalArgumentException(LocalizedFormats.INVALID_MAX_ITERATIONS,\n                                                 maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw new MathIllegalArgumentException(LocalizedFormats.INVALID_BRACKETING_PARAMETERS,\n                                                 lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0;\n\n    do {\n        final double gap = FastMath.max(Math.ulp(a), Math.ulp(b));\n        a = FastMath.max(a - gap, lowerBound);\n        b = FastMath.min(b + gap, upperBound);\n        fa = function.value(a);\n\n        fb = function.value(b);\n        numIterations++ ;\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n             ((a > lowerBound) || (b < upperBound)));\n\n    if (fa * fb >= 0.0 ) {\n        throw new ConvergenceException(new MaxCountExceededException(maximumIterations),\n                                        numIterations, initial,\n                                        lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..349d089cb 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,54 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n-        }\n-        \n-        return new double[]{a, b};\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n+import org.apache.commons.math3.analysis.UnivariateRealFunction;\n+import org.apache.commons.math3.util.FastMath;\n+\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        MathIllegalArgumentException, MaxCountExceededException {\n+\n+    if (function == null) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.FUNCTION_NOT_BOUND_TO_BE_OPTIMIZED);\n     }\n+    if (maximumIterations <= 0)  {\n+        throw new MathIllegalArgumentException(LocalizedFormats.INVALID_MAX_ITERATIONS,\n+                                                 maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw new MathIllegalArgumentException(LocalizedFormats.INVALID_BRACKETING_PARAMETERS,\n+                                                 lowerBound, initial, upperBound);\n+    }\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    int numIterations = 0;\n+\n+    do {\n+        final double gap = FastMath.max(Math.ulp(a), Math.ulp(b));\n+        a = FastMath.max(a - gap, lowerBound);\n+        b = FastMath.min(b + gap, upperBound);\n+        fa = function.value(a);\n+\n+        fb = function.value(b);\n+        numIterations++ ;\n+    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n+             ((a > lowerBound) || (b < upperBound)));\n+\n+    if (fa * fb >= 0.0 ) {\n+        throw new ConvergenceException(new MaxCountExceededException(maximumIterations),\n+                                        numIterations, initial,\n+                                        lowerBound, upperBound, a, b, fa, fb);\n+    }\n+\n+    return new double[]{a, b};\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}