{
    "patch": "   private boolean hasExceptionHandler(Node cfgNode) {\n     Preconditions.checkState(cfgNode.isNormalBlock());\n-    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdgesIf(cfgNode, outEdge -> outEdge.getValue() == Branch.ON_EX);\n     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n       Node edgeNode = edge.getDestination().getValue();\n       if (edgeNode.isExceptionHandler()) {\n         return true;\n       }\n     }\n     return false;\n   }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3ec36b30 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,18 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+   private boolean hasExceptionHandler(Node cfgNode) {\n+     Preconditions.checkState(cfgNode.isNormalBlock());\n+-    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n++    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdgesIf(cfgNode, outEdge -> outEdge.getValue() == Branch.ON_EX);\n+     for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+       Node edgeNode = edge.getDestination().getValue();\n+       if (edgeNode.isExceptionHandler()) {\n+         return true;\n+       }\n+     }\n+     return false;\n+   }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}