{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial,\n            double lowerBound, double upperBound, int maximumIterations)\n            throws ConvergenceException, FunctionEvaluationException {\n        if (function == null) {\n            throw new NullPointerException(\"Function is null\");\n        } else if (initial <= lowerBound || initial >= upperBound) {\n            throw new IllegalArgumentException(\n                    \"Initial guess \" + initial + \" outside of range [\" +\n                            lowerBound + \", \" + upperBound + \"]\");\n        }\n\n        final double fmin;\n        final double fmax;\n\n        double a = initial;\n        double b = initial;\n        double fa = function.value(a);\n        double fb = fa;\n\n        if (fa >= 0) {\n            b = searchMax(function, initial, upperBound, maximumIterations);\n            fb = function.value(b);\n            a = searchMin(function, lowerBound, initial, maximumIterations);\n            fa = function.value(a);\n        } else {\n            b = searchMin(function, initial, lowerBound, maximumIterations);\n            fb = function.value(b);\n            a = searchMax(function, upperBound, initial, maximumIterations);\n            fa = function.value(a);\n        }\n\n        if (fa * fb >= 0.0) {\n            throw new ConvergenceException(\n                    \"maximum number of iterations exceeded or invalid bracketing endpoints \" +\n                            \"{0}, {1}, {2}, {3} \",\n                    lowerBound, upperBound, initial, maximumIterations);\n        }\n\n        if (fa < 0) {\n            fmin = fa;\n            fmax = fb;\n        } else {\n            fmin = fb;\n            fmax = fa;\n        }\n\n        return new double[]{a, b};\n    }\n\n    private static double searchMax(UnivariateRealFunction function, double lo, double hi,\n            int maxEval) throws ConvergenceException, FunctionEvaluationException {\n        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleValueChecker(1e-9, 1e-30));\n        final MaxEval maxEvalSession = MaxEval.of(maxEval);\n        final MaxBisectionCount maxBisectionCount = MaxBisectionCount.unlimited();\n        final double result = optimizer.findExtremum(\n                maxEvalSession, UnivariateObjectiveFunction.from(function), goalType -> g -> function.value(g),\n                bracket -> bracket.withLo(lo).withHi(hi), maxBisectionCount\n        );\n        return result;\n    }\n\n    private static double searchMin(UnivariateRealFunction function, double lo, double hi,\n            int maxEval) throws ConvergenceException, FunctionEvaluationException {\n        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleValueChecker(1e-9, 1e-30));\n        final MaxEval maxEvalSession = MaxEval.of(maxEval);\n        final MaxBisectionCount maxBisectionCount = MaxBisectionCount.unlimited();\n        final double result = optimizer.findExtremum(\n                maxEvalSession, UnivariateObjectiveFunction.from(x -> -function.value(x)), goalType -> g -> -function.value(g),\n                bracket -> bracket.withLo(lo).withHi(hi), maxBisectionCount\n        );\n        return result;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..4792e5f5e 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,79 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+public static double[] bracket(UnivariateRealFunction function, double initial,\n+            double lowerBound, double upperBound, int maximumIterations)\n+            throws ConvergenceException, FunctionEvaluationException {\n         if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+            throw new NullPointerException(\"Function is null\");\n+        } else if (initial <= lowerBound || initial >= upperBound) {\n+            throw new IllegalArgumentException(\n+                    \"Initial guess \" + initial + \" outside of range [\" +\n+                            lowerBound + \", \" + upperBound + \"]\");\n         }\n+\n+        final double fmin;\n+        final double fmax;\n+\n         double a = initial;\n         double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+        double fa = function.value(a);\n+        double fb = fa;\n+\n+        if (fa >= 0) {\n+            b = searchMax(function, initial, upperBound, maximumIterations);\n+            fb = function.value(b);\n+            a = searchMin(function, lowerBound, initial, maximumIterations);\n             fa = function.value(a);\n-            \n+        } else {\n+            b = searchMin(function, initial, lowerBound, maximumIterations);\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+            a = searchMax(function, upperBound, initial, maximumIterations);\n+            fa = function.value(a);\n+        }\n+\n+        if (fa * fb >= 0.0) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"maximum number of iterations exceeded or invalid bracketing endpoints \" +\n+                            \"{0}, {1}, {2}, {3} \",\n+                    lowerBound, upperBound, initial, maximumIterations);\n         }\n-        \n+\n+        if (fa < 0) {\n+            fmin = fa;\n+            fmax = fb;\n+        } else {\n+            fmin = fb;\n+            fmax = fa;\n+        }\n+\n         return new double[]{a, b};\n     }\n \n+    private static double searchMax(UnivariateRealFunction function, double lo, double hi,\n+            int maxEval) throws ConvergenceException, FunctionEvaluationException {\n+        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleValueChecker(1e-9, 1e-30));\n+        final MaxEval maxEvalSession = MaxEval.of(maxEval);\n+        final MaxBisectionCount maxBisectionCount = MaxBisectionCount.unlimited();\n+        final double result = optimizer.findExtremum(\n+                maxEvalSession, UnivariateObjectiveFunction.from(function), goalType -> g -> function.value(g),\n+                bracket -> bracket.withLo(lo).withHi(hi), maxBisectionCount\n+        );\n+        return result;\n+    }\n+\n+    private static double searchMin(UnivariateRealFunction function, double lo, double hi,\n+            int maxEval) throws ConvergenceException, FunctionEvaluationException {\n+        final UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleValueChecker(1e-9, 1e-30));\n+        final MaxEval maxEvalSession = MaxEval.of(maxEval);\n+        final MaxBisectionCount maxBisectionCount = MaxBisectionCount.unlimited();\n+        final double result = optimizer.findExtremum(\n+                maxEvalSession, UnivariateObjectiveFunction.from(x -> -function.value(x)), goalType -> g -> -function.value(g),\n+                bracket -> bracket.withLo(lo).withHi(hi), maxBisectionCount\n+        );\n+        return result;\n+    }\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}