{
    "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    } else {\n        TimeZone calendarTimeZone = calendar.getTimeZone();\n        if (calendarTimeZone == null) {\n            calendarTimeZone = TimeZone.getTimeZone(\"UTC\");\n        }\n        calendar.setTimeZone(calendarTimeZone);\n\n        // adjust hour if necessary\n        int calendarHour = calendar.get(Calendar.HOUR_OF_DAY);\n        int expectedHour = calendarTimeZone.getID().equals(\"GMT\") ? 0 : 1;\n        if (calendarHour != expectedHour) {\n            calendar.add(Calendar.HOUR_OF_DAY, expectedHour - calendarHour);\n        }\n    }\n    return applyRules(calendar, buf);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..657b5cb8 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -867,13 +867,26 @@ public class FastDateFormat extends Format {\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n      */\n-    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n-        if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n-            calendar.setTimeZone(mTimeZone);\n+public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+    if (mTimeZoneForced) {\n+        calendar = (Calendar) calendar.clone();\n+        calendar.setTimeZone(mTimeZone);\n+    } else {\n+        TimeZone calendarTimeZone = calendar.getTimeZone();\n+        if (calendarTimeZone == null) {\n+            calendarTimeZone = TimeZone.getTimeZone(\"UTC\");\n+        }\n+        calendar.setTimeZone(calendarTimeZone);\n+\n+        // adjust hour if necessary\n+        int calendarHour = calendar.get(Calendar.HOUR_OF_DAY);\n+        int expectedHour = calendarTimeZone.getID().equals(\"GMT\") ? 0 : 1;\n+        if (calendarHour != expectedHour) {\n+            calendar.add(Calendar.HOUR_OF_DAY, expectedHour - calendarHour);\n         }\n-        return applyRules(calendar, buf);\n     }\n+    return applyRules(calendar, buf);\n+}\n \n     /**\n      * <p>Performs the formatting by applying the rules to the",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T[10]:11:12> but was:<T[01]:11:12>",
    "test_result": "FAIL"
}