{
    "patch": "  /**\n   * Determines whether a given node or any of its descendants contain a call to a function that\n   * takes one of the dependent variables as its argument and has side effects.\n   *\n   * @param n The node to start searching from. If n is null we assume we reached an implicit\n   *     return base case.\n   * @return True if a call to such a function was found, false otherwise.\n   */\n  public boolean apply(Node n) {\n    // When the node is null, it means we reached the implicit return where the function\n    // returns (possibly without a return statement).\n    if (n == null) {\n      return false;\n    }\n\n    // TODO(user): We only care about calls to functions that\n    // pass one of the dependent variables to a non-side-effect free\n    // function.\n    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n      return true;\n    }\n\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n      return true;\n    }\n\n    // Handle switch statements.\n    if (n.isSwitch()) {\n      Node defaultCase = n.getLastChild();\n      if (apply(defaultCase)) {\n        return true;\n      }\n      for (Node c = defaultCase.getPrevious(); c != null;\n          c = c.getPrevious()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // Handling for all other nodes.\n    if (n.hasChildren()) {\n      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..00c03940 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,58 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+  /**\n+   * Determines whether a given node or any of its descendants contain a call to a function that\n+   * takes one of the dependent variables as its argument and has side effects.\n+   *\n+   * @param n The node to start searching from. If n is null we assume we reached an implicit\n+   *     return base case.\n+   * @return True if a call to such a function was found, false otherwise.\n+   */\n+  public boolean apply(Node n) {\n+    // When the node is null, it means we reached the implicit return where the function\n+    // returns (possibly without a return statement).\n+    if (n == null) {\n+      return false;\n+    }\n+\n+    // TODO(user): We only care about calls to functions that\n+    // pass one of the dependent variables to a non-side-effect free\n+    // function.\n+    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+      return true;\n+    }\n+\n+    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+      return true;\n+    }\n+\n+    // Handle switch statements.\n+    if (n.isSwitch()) {\n+      Node defaultCase = n.getLastChild();\n+      if (apply(defaultCase)) {\n+        return true;\n+      }\n+      for (Node c = defaultCase.getPrevious(); c != null;\n+          c = c.getPrevious()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n+\n+    // Handling for all other nodes.\n+    if (n.hasChildren()) {\n+      for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    return false;\n+  }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}