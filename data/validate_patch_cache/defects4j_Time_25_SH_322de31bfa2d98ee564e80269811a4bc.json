{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n\n                    // Determine whether the current instant is close to a DST\n                    // boundary by comparing offsets for the current instant,\n                    // one millisecond before, and one millisecond after.\n                    final int offsetBefore = getOffset(instantAdjusted - 1);\n                    final int offsetAfter = getOffset(instantAdjusted + 1);\n\n                    if (offsetBefore == offsetAfter) {\n\n                        // The current instant is not close to a DST boundary, so\n                        // recalculate the offset using nextAdjusted.\n                        instantAdjusted = nextAdjusted - 1;\n                        offsetAdjusted = getOffset(instantAdjusted);\n\n                    } else if (offsetLocal >= offsetAfter) {\n\n                        // If the offset at instantLocal is greater than or equal\n                        // to the offset one millisecond after the current instant,\n                        // set the current instant to one millisecond before that\n                        // transition and recalculate the offset using the\n                        // calculated instant.\n                        instantAdjusted = nextAdjusted - 2;\n                        offsetAdjusted = getOffset(instantAdjusted);\n\n                    } else if (nextAdjusted - instantLocal < ONE_HOUR) {\n\n                        // If the current instant is close to a DST boundary, adjust\n                        // it to the next occurrence of the boundary and recalculate\n                        // the offset.\n                        instantAdjusted = nextAdjusted;\n                        offsetAdjusted = getOffset(nextAdjusted);\n\n                    } else {\n\n                        // Otherwise, the current instant is at a large DST offset,\n                        // so use the non-adjusted offset.\n                        offsetAdjusted = offsetLocal;\n\n                    }\n\n                    if (offsetLocal != offsetAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..76c358c5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,55 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+\n+                    // Determine whether the current instant is close to a DST\n+                    // boundary by comparing offsets for the current instant,\n+                    // one millisecond before, and one millisecond after.\n+                    final int offsetBefore = getOffset(instantAdjusted - 1);\n+                    final int offsetAfter = getOffset(instantAdjusted + 1);\n+\n+                    if (offsetBefore == offsetAfter) {\n+\n+                        // The current instant is not close to a DST boundary, so\n+                        // recalculate the offset using nextAdjusted.\n+                        instantAdjusted = nextAdjusted - 1;\n+                        offsetAdjusted = getOffset(instantAdjusted);\n+\n+                    } else if (offsetLocal >= offsetAfter) {\n+\n+                        // If the offset at instantLocal is greater than or equal\n+                        // to the offset one millisecond after the current instant,\n+                        // set the current instant to one millisecond before that\n+                        // transition and recalculate the offset using the\n+                        // calculated instant.\n+                        instantAdjusted = nextAdjusted - 2;\n+                        offsetAdjusted = getOffset(instantAdjusted);\n+\n+                    } else if (nextAdjusted - instantLocal < ONE_HOUR) {\n+\n+                        // If the current instant is close to a DST boundary, adjust\n+                        // it to the next occurrence of the boundary and recalculate\n+                        // the offset.\n+                        instantAdjusted = nextAdjusted;\n+                        offsetAdjusted = getOffset(nextAdjusted);\n+\n+                    } else {\n+\n+                        // Otherwise, the current instant is at a large DST offset,\n+                        // so use the non-adjusted offset.\n+                        offsetAdjusted = offsetLocal;\n+\n+                    }\n+\n+                    if (offsetLocal != offsetAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot assign a value to final variable instantAdjusted",
    "test_result": "ERROR"
}