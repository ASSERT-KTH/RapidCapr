{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n    chrono = selectChronology(chrono);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear, getTwoDigitYear(defaultYear(chrono)));\n    bucket.setOffset(instant.getZone().getOffset(instantLocal));\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis(true, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n\n private int getTwoDigitYear(int defaultYear) {\n    if (iTwoDigitYear == -1) {\n        return defaultYear;\n    }\n    return iTwoDigitYear < 100 ? defaultYear / 100 * 100 + iTwoDigitYear : iTwoDigitYear;\n}\n\nprivate int defaultYear(Chronology chrono) {\n    try {\n        return chrono.year().get(instantLocal);\n    } catch (IllegalFieldValueException ex) {\n        // Use first year which we have >= JAN_1_1970\n        int[] years = chrono.year().getAllowedValues();\n        int i = 0;\n        while (i < years.length && years[i] < 1970) {\n            i++;\n        }\n        if (i >= years.length) {\n            throw ex;  // Cannot throw new exception because signature does not allow it.\n        }\n        return years[i];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..020fa679 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n+    chrono = selectChronology(chrono);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear, getTwoDigitYear(defaultYear(chrono)));\n+    bucket.setOffset(instant.getZone().getOffset(instantLocal));\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis(true, text));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n+\n+ private int getTwoDigitYear(int defaultYear) {\n+    if (iTwoDigitYear == -1) {\n+        return defaultYear;\n+    }\n+    return iTwoDigitYear < 100 ? defaultYear / 100 * 100 + iTwoDigitYear : iTwoDigitYear;\n+}\n+\n+private int defaultYear(Chronology chrono) {\n+    try {\n+        return chrono.year().get(instantLocal);\n+    } catch (IllegalFieldValueException ex) {\n+        // Use first year which we have >= JAN_1_1970\n+        int[] years = chrono.year().getAllowedValues();\n+        int i = 0;\n+        while (i < years.length && years[i] < 1970) {\n+            i++;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (i >= years.length) {\n+            throw ex;  // Cannot throw new exception because signature does not allow it.\n         }\n-        return newPos;\n+        return years[i];\n     }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}