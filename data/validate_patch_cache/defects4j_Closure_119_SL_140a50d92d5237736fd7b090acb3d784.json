{
    "patch": "case Token.CATCH:\n  // Catch parameters are considered declarations.\n  for (Node lvalue = n.getFirstChild(); lvalue != null; lvalue = lvalue.getNext()) {\n    if (lvalue.getType() == Token.NAME) {\n      Var var = scope.getVar(lvalue.getString());\n      if (var == null || var.isLocal()) {\n        scope.declare(name, lvalue, type, true);\n      }\n    }\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..69df39ed 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,17 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.CATCH:\n+  // Catch parameters are considered declarations.\n+  for (Node lvalue = n.getFirstChild(); lvalue != null; lvalue = lvalue.getNext()) {\n+    if (lvalue.getType() == Token.NAME) {\n+      Var var = scope.getVar(lvalue.getString());\n+      if (var == null || var.isLocal()) {\n+        scope.declare(name, lvalue, type, true);\n+      }\n+    }\n+  }\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}