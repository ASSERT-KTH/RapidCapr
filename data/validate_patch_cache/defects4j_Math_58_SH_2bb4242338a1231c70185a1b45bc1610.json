{
    "patch": "        final AbstractCurveFitter fitter = new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-15).withParameterRelativeTolerance(1.0e-15).withInitialStepBoundFactor(1e+10).withMaxEvaluations(Integer.MAX_VALUE).withMaxIterations(Integer.MAX_VALUE).withStartPoint(guess);\n        return fitter.fit(new Gaussian.Parametric(), getObservations());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..1993648d7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,8 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final AbstractCurveFitter fitter = new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1.0e-15).withParameterRelativeTolerance(1.0e-15).withInitialStepBoundFactor(1e+10).withMaxEvaluations(Integer.MAX_VALUE).withMaxIterations(Integer.MAX_VALUE).withStartPoint(guess);\n+        return fitter.fit(new Gaussian.Parametric(), getObservations());\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}