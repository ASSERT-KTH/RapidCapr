{
    "patch": "        long instantLocal = bucket.computeMillis(false, text);\n        Chronology parsedChrono = bucket.getEffectiveChronology(chrono);\n        DateTimeZone parsedZone = bucket.getZone();\n        if (parsedZone == null) {\n            parsedZone = chrono.getZone();\n        }\n        instantLocal = parsedChrono.setZone(parsedZone).localDateTime(instantLocal).toDateTime().getMillis();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..d45e017b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,13 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long instantLocal = bucket.computeMillis(false, text);\n+        Chronology parsedChrono = bucket.getEffectiveChronology(chrono);\n+        DateTimeZone parsedZone = bucket.getZone();\n+        if (parsedZone == null) {\n+            parsedZone = chrono.getZone();\n+        }\n+        instantLocal = parsedChrono.setZone(parsedZone).localDateTime(instantLocal).toDateTime().getMillis();\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}