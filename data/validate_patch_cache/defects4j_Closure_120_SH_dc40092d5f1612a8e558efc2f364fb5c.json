{
    "patch": "        if (block.isFunction) {\n            for (DiGraphEdge<BasicBlock, Branch> outEdge : block.getOutEdges()) {\n                BasicBlock outBlock = outEdge.getEnd();\n                for (BasicBlock innerBlock = outBlock; innerBlock != null; innerBlock = innerBlock.getUniqueSuccessor()) {\n                    if (innerBlock == block) {\n                        return false;\n                    }\n                }\n            }\n            break;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..18d38e66 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+            for (DiGraphEdge<BasicBlock, Branch> outEdge : block.getOutEdges()) {\n+                BasicBlock outBlock = outEdge.getEnd();\n+                for (BasicBlock innerBlock = outBlock; innerBlock != null; innerBlock = innerBlock.getUniqueSuccessor()) {\n+                    if (innerBlock == block) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            break;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}