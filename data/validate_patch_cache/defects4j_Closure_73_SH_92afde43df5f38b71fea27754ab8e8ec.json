{
    "patch": "              // No charsetEncoder provided - pass straight latin characters\n              // through, and escape the rest.  Doing the explicit character\n              // check is measurably faster than using the CharsetEncoder.\n              if (c <= 0x1f || (c >= 0x7f && c <= 0x9f)) {\n                  // Control characters - we escape them using hex codes,\n                  // rather than the symbolic '\\n' format.\n                  // This mitigates risk of interpretation errors,\n                  // especially by proxies and sanitizers,\n                  // which are known to sometimes mangle '\\n' characters.\n                  appendHexJavaScriptRepresentation(sb, c);\n              } else {\n                  sb.append(c);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..b8899194 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,19 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+              // No charsetEncoder provided - pass straight latin characters\n+              // through, and escape the rest.  Doing the explicit character\n+              // check is measurably faster than using the CharsetEncoder.\n+              if (c <= 0x1f || (c >= 0x7f && c <= 0x9f)) {\n+                  // Control characters - we escape them using hex codes,\n+                  // rather than the symbolic '\\n' format.\n+                  // This mitigates risk of interpretation errors,\n+                  // especially by proxies and sanitizers,\n+                  // which are known to sometimes mangle '\\n' characters.\n+                  appendHexJavaScriptRepresentation(sb, c);\n+              } else {\n+                  sb.append(c);\n+              }\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}