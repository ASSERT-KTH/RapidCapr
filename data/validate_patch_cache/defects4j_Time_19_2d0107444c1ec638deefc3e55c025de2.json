{
    "patch": "    public int getOffsetFromLocal(long instantLocalMillis) {\n        int offsetBefore = getOffset(instantLocalMillis - 1);\n        int offsetLocal = getOffset(instantLocalMillis);\n        int offsetAfter = getOffset(instantLocalMillis + 1);\n\n        if (offsetBefore > offsetLocal && offsetAfter < offsetLocal) {\n            throw new IllegalArgumentException(\"DateTime '\" + new DateTime(instantLocalMillis, getZone()) + \"' does not exist due to a transition\");\n        }\n\n        if (offsetBefore == offsetAfter) {\n            return offsetLocal;\n        }\n\n        if (offsetBefore < offsetAfter) {\n            // Gap\n            long nextTransition = nextTransition(instantLocalMillis);\n            if ((nextTransition - instantLocalMillis) > (offsetAfter - offsetLocal)) {\n                // Before gap\n                return offsetLocal;\n            } else {\n                // After gap\n                return offsetAfter;\n            }\n        } else {\n            // Overlap\n            long previousTransition = previousTransition(instantLocalMillis);\n            if ((instantLocalMillis - previousTransition) >= (offsetBefore - offsetLocal)) {\n                // First instance of overlap, use earlier offset\n                return offsetBefore;\n            } else {\n                // Second instance of overlap, use later offset\n                return offsetAfter;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..b0d357eb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,37 +877,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+    public int getOffsetFromLocal(long instantLocalMillis) {\n+        int offsetBefore = getOffset(instantLocalMillis - 1);\n+        int offsetLocal = getOffset(instantLocalMillis);\n+        int offsetAfter = getOffset(instantLocalMillis + 1);\n+\n+        if (offsetBefore > offsetLocal && offsetAfter < offsetLocal) {\n+            throw new IllegalArgumentException(\"DateTime '\" + new DateTime(instantLocalMillis, getZone()) + \"' does not exist due to a transition\");\n+        }\n+\n+        if (offsetBefore == offsetAfter) {\n+            return offsetLocal;\n+        }\n+\n+        if (offsetBefore < offsetAfter) {\n+            // Gap\n+            long nextTransition = nextTransition(instantLocalMillis);\n+            if ((nextTransition - instantLocalMillis) > (offsetAfter - offsetLocal)) {\n+                // Before gap\n+                return offsetLocal;\n+            } else {\n+                // After gap\n+                return offsetAfter;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        } else {\n+            // Overlap\n+            long previousTransition = previousTransition(instantLocalMillis);\n+            if ((instantLocalMillis - previousTransition) >= (offsetBefore - offsetLocal)) {\n+                // First instance of overlap, use earlier offset\n+                return offsetBefore;\n+            } else {\n+                // Second instance of overlap, use later offset\n+                return offsetAfter;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}