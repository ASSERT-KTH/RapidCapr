{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    boolean wasInConstructorContext = inConstructorContext;\n    inConstructorContext = true;\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          Node enclosingScript = NodeUtil.getEnclosingScript(n);\n          if (NodeUtil.isFunctionExpression(enclosingScript)) {\n            // We can't attach instance properties to a function expression, so don't bother\n            // inferring type information for constructor calls in that context.\n            JSType constructorThisType = ct.getTypeOfThis();\n            if (JSType.isFunctionType(constructorThisType)) {\n              FunctionType constructorThisFunctionType = constructorThisType.toMaybeFunctionType();\n              if (constructorThisFunctionType.hasInstanceType()) {\n                ObjectType singletonInstance =\n                    ObjectType.fromFunction(constructorThisFunctionType).createInitialInstance();\n                scope = scope.inferQualifiedNames(singletonInstance);\n              }\n            }\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    inConstructorContext = wasInConstructorContext;\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..e9ad71e7 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,9 +1031,9 @@ class TypeInference\n       i++;\n     }\n   }\n-\n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+    boolean wasInConstructorContext = inConstructorContext;\n+    inConstructorContext = true;\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1052,6 +1052,20 @@ class TypeInference\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          Node enclosingScript = NodeUtil.getEnclosingScript(n);\n+          if (NodeUtil.isFunctionExpression(enclosingScript)) {\n+            // We can't attach instance properties to a function expression, so don't bother\n+            // inferring type information for constructor calls in that context.\n+            JSType constructorThisType = ct.getTypeOfThis();\n+            if (JSType.isFunctionType(constructorThisType)) {\n+              FunctionType constructorThisFunctionType = constructorThisType.toMaybeFunctionType();\n+              if (constructorThisFunctionType.hasInstanceType()) {\n+                ObjectType singletonInstance =\n+                    ObjectType.fromFunction(constructorThisFunctionType).createInitialInstance();\n+                scope = scope.inferQualifiedNames(singletonInstance);\n+              }\n+            }\n+          }\n         }\n       }\n     }\n@@ -1059,6 +1073,7 @@ class TypeInference\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+    inConstructorContext = wasInConstructorContext;\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}