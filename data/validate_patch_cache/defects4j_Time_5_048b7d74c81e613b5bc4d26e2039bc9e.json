{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        int months = getMonths();\n        int years = getYears();\n        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n            millis += (((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n            type = type.withYearsRemoved();\n        }\n        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n            millis += (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n            type = type.withMonthsRemoved();\n        }\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..e0b4c99e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1621,19 +1621,17 @@ public final class Period\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        int years = getYears();\n+        if (type.isSupported(DurationFieldType.years()) && years != 0) {\n+            millis += (((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n+            type = type.withYearsRemoved();\n+        }\n+        if (type.isSupported(DurationFieldType.months()) && months != 0) {\n+            millis += (((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n+            type = type.withMonthsRemoved();\n         }\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         return result;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}