{
    "patch": "if (Double.isNaN(min) || Double.isNaN(max)) {\n    return Double.NaN;\n}\n\ndouble minValue = f.value(min);\ndouble maxValue = f.value(max);\ndouble initialValue = f.value(initial);\n\nif (Double.isNaN(minValue) || Double.isNaN(maxValue) || Double.isNaN(initialValue)) {\n    return Double.NaN;\n}\n\nif (minValue * maxValue > 0) {\n    return Double.NaN;\n}\n\nif (initialValue == 0) {\n    return initial;\n}\n\nif (minValue * initialValue < 0) {\n    return solve(f, min, initial);\n} else {\n    return solve(f, initial, max);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..535ba457e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,31 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(min) || Double.isNaN(max)) {\n+    return Double.NaN;\n+}\n+\n+double minValue = f.value(min);\n+double maxValue = f.value(max);\n+double initialValue = f.value(initial);\n+\n+if (Double.isNaN(minValue) || Double.isNaN(maxValue) || Double.isNaN(initialValue)) {\n+    return Double.NaN;\n+}\n+\n+if (minValue * maxValue > 0) {\n+    return Double.NaN;\n+}\n+\n+if (initialValue == 0) {\n+    return initial;\n+}\n+\n+if (minValue * initialValue < 0) {\n+    return solve(f, min, initial);\n+} else {\n+    return solve(f, initial, max);\n+}\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}