{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final int k = 5; // Set k to the desired number of eigenvalues/eigenvectors to compute\n    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() - 1e-9, k);\n    final RealMatrix v = dec.getV(); // k x k matrix of eigenvectors\n    final RealMatrix d = dec.getD(); // k x k diagonal matrix of eigenvalues\n    final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(d.getColumn(0)).sqrt(); // k x k square root of d\n    final RealMatrix result = v.multiply(dSqrt).multiply(v.transpose()); // Compute the square root of m\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..a2d997f53 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n-    }\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int k = 5; // Set k to the desired number of eigenvalues/eigenvectors to compute\n+    final EigenDecomposition dec = new EigenDecomposition(m, m.getRowDimension() - 1e-9, k);\n+    final RealMatrix v = dec.getV(); // k x k matrix of eigenvectors\n+    final RealMatrix d = dec.getD(); // k x k diagonal matrix of eigenvalues\n+    final RealMatrix dSqrt = MatrixUtils.createRealDiagonalMatrix(d.getColumn(0)).sqrt(); // k x k square root of d\n+    final RealMatrix result = v.multiply(dSqrt).multiply(v.transpose()); // Compute the square root of m\n+    return result;\n+}\n }",
    "result_reason": "error: no suitable constructor found for EigenDecomposition(RealMatrix,double,int)",
    "test_result": "ERROR"
}