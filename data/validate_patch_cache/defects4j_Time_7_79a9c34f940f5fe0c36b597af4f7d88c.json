{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        DateTimeParserBucket bucket;\n        Chronology chrono = instant.getChronology();\n        int defaultYear = getParserYear(text, position);\n        \n        if (defaultYear == -1) {\n            // parser doesn't support looking ahead, so parse into a bucket first\n            long instantMillis = instant.getMillis();\n            long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n            chrono = selectChronology(chrono);\n            \n            bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n            position = parser.parseInto(bucket, text, position);\n            instantLocal = bucket.computeMillis(false, text);\n            chrono = bucket.getChronology();\n            \n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n        } else {\n            chrono = selectChronology(chrono);\n            bucket = new DateTimeParserBucket(\n                    0, chrono, iLocale, iPivotYear, defaultYear);\n            position = parser.parseInto(bucket, text, position);\n        }\n        \n        instant.setMillis(bucket.computeMillis(false, text));\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return position;\n    }\n    \n    private int getParserYear(String text, int position) {\n        DateTimeParser parser = requireParser();\n        // try looking ahead first to avoid needless computation\n        if (parser instanceof DateTimeParserInternalParser) {\n            DateTimeParserInternalParser parserIP = (DateTimeParserInternalParser) parser;\n            Object result = parserIP.getParsedState().createState();\n            parserIP.parseInto((DateTimeParserBucket) result, text, position);\n            int year = ((DateTimeParserBucket) result).getDefaultYear();\n            if (year >= 0) {\n                return year;\n            }\n        }\n        // parser doesn't support looking ahead, so parse into a bucket first\n        DateTimeParserBucket bucket = new DateTimeParserBucket(Locale.ENGLISH, iPivotYear, 2000);\n        int end = parser.parseInto(bucket, text, position);\n        return bucket.getDefaultYear() >= 0 ? bucket.getDefaultYear() : -1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..3248d790 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -703,28 +703,60 @@ public class DateTimeFormatter {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n         \n-        long instantMillis = instant.getMillis();\n+        DateTimeParserBucket bucket;\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = getParserYear(text, position);\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        if (defaultYear == -1) {\n+            // parser doesn't support looking ahead, so parse into a bucket first\n+            long instantMillis = instant.getMillis();\n+            long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+            chrono = selectChronology(chrono);\n+            \n+            bucket = new DateTimeParserBucket(\n+                    instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            position = parser.parseInto(bucket, text, position);\n+            instantLocal = bucket.computeMillis(false, text);\n+            chrono = bucket.getChronology();\n+            \n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+        } else {\n+            chrono = selectChronology(chrono);\n+            bucket = new DateTimeParserBucket(\n+                    0, chrono, iLocale, iPivotYear, defaultYear);\n+            position = parser.parseInto(bucket, text, position);\n         }\n+        \n+        instant.setMillis(bucket.computeMillis(false, text));\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n+        return position;\n+    }\n+    \n+    private int getParserYear(String text, int position) {\n+        DateTimeParser parser = requireParser();\n+        // try looking ahead first to avoid needless computation\n+        if (parser instanceof DateTimeParserInternalParser) {\n+            DateTimeParserInternalParser parserIP = (DateTimeParserInternalParser) parser;\n+            Object result = parserIP.getParsedState().createState();\n+            parserIP.parseInto((DateTimeParserBucket) result, text, position);\n+            int year = ((DateTimeParserBucket) result).getDefaultYear();\n+            if (year >= 0) {\n+                return year;\n+            }\n+        }\n+        // parser doesn't support looking ahead, so parse into a bucket first\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(Locale.ENGLISH, iPivotYear, 2000);\n+        int end = parser.parseInto(bucket, text, position);\n+        return bucket.getDefaultYear() >= 0 ? bucket.getDefaultYear() : -1;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}