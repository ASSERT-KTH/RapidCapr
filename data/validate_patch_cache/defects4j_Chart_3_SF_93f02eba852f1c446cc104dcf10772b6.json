{
    "patch": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList<>();\n    if (this.data.size() > 0) {\n        double minY = Double.NaN;\n        double maxY = Double.NaN; \n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n                if (Double.isNaN(minY)) {\n                    minY = clone.getValue().doubleValue();\n                    maxY = clone.getValue().doubleValue();\n                } else {\n                    minY = Math.min(minY, clone.getValue().doubleValue());\n                    maxY = Math.max(maxY, clone.getValue().doubleValue());\n                }\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n        copy.setMinY(minY);\n        copy.setMaxY(maxY);\n        copy.setMinYValue(new Double(minY));\n        copy.setMaxYValue(new Double(maxY));\n    }\n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..2b1ca29 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,44 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public TimeSeries createCopy(int start, int end)\n+        throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.data = new java.util.ArrayList<>();\n+    if (this.data.size() > 0) {\n+        double minY = Double.NaN;\n+        double maxY = Double.NaN; \n+        for (int index = start; index <= end; index++) {\n+            TimeSeriesDataItem item\n+                    = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+                if (Double.isNaN(minY)) {\n+                    minY = clone.getValue().doubleValue();\n+                    maxY = clone.getValue().doubleValue();\n+                } else {\n+                    minY = Math.min(minY, clone.getValue().doubleValue());\n+                    maxY = Math.max(maxY, clone.getValue().doubleValue());\n+                }\n+            }\n+            catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        copy.setMinY(minY);\n+        copy.setMaxY(maxY);\n+        copy.setMinYValue(new Double(minY));\n+        copy.setMaxYValue(new Double(maxY));\n+    }\n+    return copy;\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}