{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n  for (Reference ref : refs) {\n    if (ref != null) {\n      Node n = ref.getNode();\n      if (n != null) {\n        Node parent = n.getParent();\n        Node grandparent = parent != null ? parent.getParent() : null;\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        if (parent != null && parent.isGetProp() && !grandparent.isCall()) {\n          continue;\n        }\n\n        // Only inline VAR declarations or simple assignment expressions.\n        if (!isInlinableDeclaration(parent, grandparent) && !isInlinableAssignment(parent)) {\n          return false;\n        }\n\n        // We're looking for object-literal assignments only.\n        Node value = ref.getAssignedValue();\n        if (value == null || !value.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the object-literal assignment is not self-referential.\n        if (isSelfReferentialAssignment(value, refs)) {\n          return false;\n        }\n\n        // We have found an acceptable object-literal assignment.\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nprivate boolean isInlinableDeclaration(Node parent, Node grandparent) {\n  if (parent == null || grandparent == null) {\n    return false;\n  }\n\n  // Only inline VAR declarations or CATCH variable declarations.\n  return (parent.isVar() && parent.getFirstChild() != null && parent.getFirstChild().isName())\n      || (grandparent.isCatch() && parent.isName());\n}\n\nprivate boolean isInlinableAssignment(Node parent) {\n  if (parent == null) {\n    return false;\n  }\n\n  if (parent.isAssign()) {\n    return true;\n  }\n\n  // Only inline assignments in FOR loops that don't have a defined variable.\n  return parent.isForIn() || parent.isForOf() || (parent.isVanillaFor() && parent.getChildCount() < 4);\n}\n\nprivate boolean isSelfReferentialAssignment(Node value, List<Reference> refs) {\n  for (Node child : value.children()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // ES5 get/set is not supported.\n      return true;\n    }\n\n    for (Node assignee : child.children()) {\n      if (assignee.isName()) {\n        for (Reference ref : refs) {\n          if (ref.getNode() == assignee && ref.getParent() != child && ref.getGrandparent() != child) {\n            // There's a self-referential assignment.\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..945990e6 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,88 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n+private boolean isInlinableObject(List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    if (ref != null) {\n+      Node n = ref.getNode();\n+      if (n != null) {\n+        Node parent = n.getParent();\n+        Node grandparent = parent != null ? parent.getParent() : null;\n \n         // Ignore indirect references, like x.y (except x.y(), since\n         // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n+        if (parent != null && parent.isGetProp() && !grandparent.isCall()) {\n           continue;\n         }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+        // Only inline VAR declarations or simple assignment expressions.\n+        if (!isInlinableDeclaration(parent, grandparent) && !isInlinableAssignment(parent)) {\n+          return false;\n         }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+        // We're looking for object-literal assignments only.\n+        Node value = ref.getAssignedValue();\n+        if (value == null || !value.isObjectLit()) {\n+          return false;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+        // Make sure that the object-literal assignment is not self-referential.\n+        if (isSelfReferentialAssignment(value, refs)) {\n           return false;\n         }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+        // We have found an acceptable object-literal assignment.\n+        return true;\n+      }\n+    }\n+  }\n+  return false;\n+}\n \n+private boolean isInlinableDeclaration(Node parent, Node grandparent) {\n+  if (parent == null || grandparent == null) {\n+    return false;\n+  }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n-        }\n+  // Only inline VAR declarations or CATCH variable declarations.\n+  return (parent.isVar() && parent.getFirstChild() != null && parent.getFirstChild().isName())\n+      || (grandparent.isCatch() && parent.isName());\n+}\n+\n+private boolean isInlinableAssignment(Node parent) {\n+  if (parent == null) {\n+    return false;\n+  }\n+\n+  if (parent.isAssign()) {\n+    return true;\n+  }\n+\n+  // Only inline assignments in FOR loops that don't have a defined variable.\n+  return parent.isForIn() || parent.isForOf() || (parent.isVanillaFor() && parent.getChildCount() < 4);\n+}\n \n+private boolean isSelfReferentialAssignment(Node value, List<Reference> refs) {\n+  for (Node child : value.children()) {\n+    if (child.isGetterDef() || child.isSetterDef()) {\n+      // ES5 get/set is not supported.\n+      return true;\n+    }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+    for (Node assignee : child.children()) {\n+      if (assignee.isName()) {\n+        for (Reference ref : refs) {\n+          if (ref.getNode() == assignee && ref.getParent() != child && ref.getGrandparent() != child) {\n+            // There's a self-referential assignment.\n+            return true;\n+          }\n+        }\n       }\n-      return ret;\n     }\n+  }\n+\n+  return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}