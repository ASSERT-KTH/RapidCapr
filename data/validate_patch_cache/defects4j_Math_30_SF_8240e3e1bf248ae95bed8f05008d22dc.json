{
    "patch": "private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        double mean = (double)n1*n2/2.0;\n        double variance = ((double)n1)*(double)n2*(n1+n2+1)/12.0;\n        double stdDev = Math.sqrt(variance);\n        double z = (Umin - mean) / stdDev;\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return (1.0 - standardNormal.cumulativeProbability(Math.abs(z))) * 2.0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..1f1581592 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,22 +165,18 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n+private double calculateAsymptoticPValue(final double Umin,\n                                              final int n1,\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n-\n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n-\n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n-\n+        double mean = (double)n1*n2/2.0;\n+        double variance = ((double)n1)*(double)n2*(n1+n2+1)/12.0;\n+        double stdDev = Math.sqrt(variance);\n+        double z = (Umin - mean) / stdDev;\n         final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n \n-        return 2 * standardNormal.cumulativeProbability(z);\n+        return (1.0 - standardNormal.cumulativeProbability(Math.abs(z))) * 2.0;\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}