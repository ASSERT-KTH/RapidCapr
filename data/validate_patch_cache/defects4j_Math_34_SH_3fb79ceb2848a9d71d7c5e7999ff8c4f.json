{
    "patch": "        class ChromosomeIterator implements Iterator<Chromosome> {\n            private int currentIndex = 0;\n            private final List<Chromosome> unmodifiableChromosomes = Collections.unmodifiableList(chromosomes);\n\n            @Override\n            public boolean hasNext() {\n                return currentIndex < unmodifiableChromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                if (!hasNext()) {\n                    throw new NoSuchElementException();\n                }\n\n                return unmodifiableChromosomes.get(currentIndex++);\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        }\n\n        return new ChromosomeIterator();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..3c4e88ed0 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,30 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+        class ChromosomeIterator implements Iterator<Chromosome> {\n+            private int currentIndex = 0;\n+            private final List<Chromosome> unmodifiableChromosomes = Collections.unmodifiableList(chromosomes);\n+\n+            @Override\n+            public boolean hasNext() {\n+                return currentIndex < unmodifiableChromosomes.size();\n+            }\n+\n+            @Override\n+            public Chromosome next() {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n+                }\n+\n+                return unmodifiableChromosomes.get(currentIndex++);\n+            }\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+        }\n+\n+        return new ChromosomeIterator();\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}