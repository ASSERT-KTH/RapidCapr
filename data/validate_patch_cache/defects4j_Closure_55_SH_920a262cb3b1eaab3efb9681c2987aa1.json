{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isCall() || n.isNew() || n.isTaggedTemplateLit() || n.isTemplateLit() || n.isTypeOf()) {\n        return false;\n    }\n    if (n.isFunction()) {\n        Node name = n.getFirstChild();\n        Node body = name.getNext();\n        return name.isName() && !name.getString().isEmpty() && body.isBlock();\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..05d49c7e 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,18 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isCall() || n.isNew() || n.isTaggedTemplateLit() || n.isTemplateLit() || n.isTypeOf()) {\n+        return false;\n+    }\n+    if (n.isFunction()) {\n+        Node name = n.getFirstChild();\n+        Node body = name.getNext();\n+        return name.isName() && !name.getString().isEmpty() && body.isBlock();\n+    } else {\n+        return false;\n+    }\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}