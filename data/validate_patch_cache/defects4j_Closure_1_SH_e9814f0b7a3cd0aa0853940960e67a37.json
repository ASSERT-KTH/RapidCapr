{
    "patch": "    Preconditions.checkState(cfgNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return false;\n    }\n\n    Node argList = getFunctionArgList(cfgNode);\n\n    // Preserve the name object for the first parameter, for Function.name,\n    // which needs to be the declared name of the function.\n    argList.getFirstChild().putBooleanProp(Node.IS_NAMEABLE);\n\n    boolean hasExceptions = false;\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      Node nextArg = arg.getNext();\n      if (!isParamUsedByExceptions(cfgNode, arg)) {\n        argList.removeChild(arg);\n        compiler.reportCodeChange();\n      } else {\n        hasExceptions = true;\n      }\n      arg = nextArg;\n    }\n\n    return hasExceptions;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..32f7d9b6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,32 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(cfgNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return false;\n+    }\n+\n+    Node argList = getFunctionArgList(cfgNode);\n+\n+    // Preserve the name object for the first parameter, for Function.name,\n+    // which needs to be the declared name of the function.\n+    argList.getFirstChild().putBooleanProp(Node.IS_NAMEABLE);\n+\n+    boolean hasExceptions = false;\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      Node nextArg = arg.getNext();\n+      if (!isParamUsedByExceptions(cfgNode, arg)) {\n+        argList.removeChild(arg);\n+        compiler.reportCodeChange();\n+      } else {\n+        hasExceptions = true;\n+      }\n+      arg = nextArg;\n+    }\n+\n+    return hasExceptions;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}