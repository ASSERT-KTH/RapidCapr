{
    "patch": "private boolean hasSideEffectFreeRecursion(Node startNode) {\n  // Get the control flow graph\n  ControlFlowGraph<Node> cfg = ControlFlowGraph.build(startNode);\n\n  // Traverse the CFG starting from the root node\n  Node root = cfg.getEntry().getValue();\n  return hasSideEffectFreeRecursionHelper(cfg, root);\n}\n\nprivate boolean hasSideEffectFreeRecursionHelper(ControlFlowGraph<Node> cfg, Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without a return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // passes one of the dependent variable to a non-side-effect free\n  // function.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  // Return false for control flow nodes that do not have side-effects\n  if (n.isIf()) {\n    Node trueBranch = cfg.getTrueBranch(n);\n    Node falseBranch = cfg.getFalseBranch(n);\n    return (!hasSideEffectFreeRecursionHelper(cfg, trueBranch)\n            || !hasSideEffectFreeRecursionHelper(cfg, falseBranch));\n  } else if (n.isBlock()) {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (hasSideEffectFreeRecursionHelper(cfg, c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Otherwise, recursively check children\n  for (Node c : cfg.getSuccessors(n)) {\n    if (hasSideEffectFreeRecursionHelper(cfg, c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8ef825e1 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,56 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n+private boolean hasSideEffectFreeRecursion(Node startNode) {\n+  // Get the control flow graph\n+  ControlFlowGraph<Node> cfg = ControlFlowGraph.build(startNode);\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n+  // Traverse the CFG starting from the root node\n+  Node root = cfg.getEntry().getValue();\n+  return hasSideEffectFreeRecursionHelper(cfg, root);\n+}\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n-        }\n+private boolean hasSideEffectFreeRecursionHelper(ControlFlowGraph<Node> cfg, Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without a return statement)\n+  if (n == null) {\n+    return false;\n+  }\n \n+  // TODO(user): We only care about calls to functions that\n+  // passes one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    return true;\n+  }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n-        }\n-        return false;\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  // Return false for control flow nodes that do not have side-effects\n+  if (n.isIf()) {\n+    Node trueBranch = cfg.getTrueBranch(n);\n+    Node falseBranch = cfg.getFalseBranch(n);\n+    return (!hasSideEffectFreeRecursionHelper(cfg, trueBranch)\n+            || !hasSideEffectFreeRecursionHelper(cfg, falseBranch));\n+  } else if (n.isBlock()) {\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (hasSideEffectFreeRecursionHelper(cfg, c)) {\n+        return true;\n       }\n+    }\n+    return false;\n+  }\n+\n+  // Otherwise, recursively check children\n+  for (Node c : cfg.getSuccessors(n)) {\n+    if (hasSideEffectFreeRecursionHelper(cfg, c)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: <anonymous com.google.javascript.jscomp.FlowSensitiveInlineVariables$1> is not abstract and does not override abstract method apply(Node) in Predicate",
    "test_result": "ERROR"
}