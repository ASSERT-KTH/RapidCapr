{
    "patch": "public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n    if (count < 0) {\n        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n    }\n    if (start > end) {\n        int temp = start;\n        start = end;\n        end = temp;\n    }\n    if (chars != null && chars.length == 0) {\n        throw new IllegalArgumentException(\"The chars array must not be empty\");\n    }\n    if (start == 0 && end == 0) {\n        if (!letters && !numbers) {\n            end = Integer.MAX_VALUE;\n        } else {\n            end = 'z' + 1;\n            start = ' ';\n        }\n    }\n    char[] buffer = new char[count];\n    int gap = end - start;\n    while (count-- != 0) {\n        char ch;\n        if (chars == null) {\n            ch = (char) (random.nextInt(gap) + start);\n        } else {\n            ch = chars[random.nextInt(chars.length)];\n        }\n        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n            if (Character.isSurrogate(ch) || (count > 0 && Character.isSurrogatePair(buffer[count], ch))) {\n                count++;\n            } else {\n                if (Character.isHighSurrogate(ch)) {\n                    buffer[count] = ch;\n                    count++;\n                } else if (Character.isLowSurrogate(ch)) {\n                    if (count == 0) {\n                        count++;\n                    } else {\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = Character.highSurrogate(chars[random.nextInt(chars.length)]);\n                    }\n                } else {\n                    buffer[count] = ch;\n                }\n            }\n        } else {\n            count++;\n        }\n    }\n    return new String(buffer);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex b200223d..b264b9f2 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -220,66 +220,60 @@ public class RandomStringUtils {\n      * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n      * @since 2.0\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n-                                char[] chars, Random random) {\n-        if (count == 0) {\n-            return \"\";\n-        } else if (count < 0) {\n-            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n+    if (count < 0) {\n+        throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+    }\n+    if (start > end) {\n+        int temp = start;\n+        start = end;\n+        end = temp;\n+    }\n+    if (chars != null && chars.length == 0) {\n+        throw new IllegalArgumentException(\"The chars array must not be empty\");\n+    }\n+    if (start == 0 && end == 0) {\n+        if (!letters && !numbers) {\n+            end = Integer.MAX_VALUE;\n+        } else {\n+            end = 'z' + 1;\n+            start = ' ';\n         }\n-\n-        if (start == 0 && end == 0) {\n-                if (!letters && !numbers) {\n-                    end = Integer.MAX_VALUE;\n-                } else {\n-                    end = 'z' + 1;\n-                    start = ' ';                \n-                }\n+    }\n+    char[] buffer = new char[count];\n+    int gap = end - start;\n+    while (count-- != 0) {\n+        char ch;\n+        if (chars == null) {\n+            ch = (char) (random.nextInt(gap) + start);\n+        } else {\n+            ch = chars[random.nextInt(chars.length)];\n         }\n-\n-        char[] buffer = new char[count];\n-        int gap = end - start;\n-\n-        while (count-- != 0) {\n-            char ch;\n-            if (chars == null) {\n-                ch = (char) (random.nextInt(gap) + start);\n+        if ((letters && Character.isLetter(ch)) || (numbers && Character.isDigit(ch)) || (!letters && !numbers)) {\n+            if (Character.isSurrogate(ch) || (count > 0 && Character.isSurrogatePair(buffer[count], ch))) {\n+                count++;\n             } else {\n-                ch = chars[random.nextInt(gap) + start];\n-            }\n-            if (letters && Character.isLetter(ch)\n-                    || numbers && Character.isDigit(ch)\n-                    || !letters && !numbers) {\n-                if(ch >= 56320 && ch <= 57343) {\n-                    if(count == 0) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    buffer[count] = ch;\n+                    count++;\n+                } else if (Character.isLowSurrogate(ch)) {\n+                    if (count == 0) {\n                         count++;\n                     } else {\n-                        // low surrogate, insert high surrogate after putting it in\n                         buffer[count] = ch;\n                         count--;\n-                        buffer[count] = (char) (55296 + random.nextInt(128));\n+                        buffer[count] = Character.highSurrogate(chars[random.nextInt(chars.length)]);\n                     }\n-                } else if(ch >= 55296 && ch <= 56191) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // high surrogate, insert low surrogate before putting it in\n-                        buffer[count] = (char) (56320 + random.nextInt(128));\n-                        count--;\n-                        buffer[count] = ch;\n-                    }\n-                } else if(ch >= 56192 && ch <= 56319) {\n-                    // private high surrogate, no effing clue, so skip it\n-                    count++;\n                 } else {\n                     buffer[count] = ch;\n                 }\n-            } else {\n-                count++;\n             }\n+        } else {\n+            count++;\n         }\n-        return new String(buffer);\n     }\n+    return new String(buffer);\n+}\n \n     /**\n      * <p>Creates a random string whose length is the number of characters",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}