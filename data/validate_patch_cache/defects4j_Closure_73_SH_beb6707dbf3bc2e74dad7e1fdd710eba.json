{
    "patch": "// No charsetEncoder provided - pass straight latin characters\n// through, and escape the rest.  Doing the explicit character\n// check is measurably faster than using the CharsetEncoder.\nif (c <= 0x1f || (c >= 0x7f && c <= 0x9f)) {\n    // Control characters - we escape them using hex codes,\n    // rather than the symbolic '\\n' format.\n    // This mitigates risk of interpretation errors,\n    // especially by proxies and sanitizers,\n    // which are known to sometimes mangle '\\n' characters.\n    appendHexJavaScriptRepresentation(sb, c);\n} else if (c == quote) {\n    // In certain cases, escaping for inside tag attributes is optional,\n    // and we may only need to escape the quote characters,\n    // in which case strEscapeCompiler will pass the quote through\n    // as one of the 'escape your quotes' characters.  We need to\n    // make sure that we escape these characters too, otherwise\n    // they will hork the client-side parser/compiler.\n    sb.append('\\\\').append(c);\n} else if (c == '&') {\n    sb.append(\"&amp;\");\n} else {\n    sb.append(c);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..caa5ceba 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,29 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+// No charsetEncoder provided - pass straight latin characters\n+// through, and escape the rest.  Doing the explicit character\n+// check is measurably faster than using the CharsetEncoder.\n+if (c <= 0x1f || (c >= 0x7f && c <= 0x9f)) {\n+    // Control characters - we escape them using hex codes,\n+    // rather than the symbolic '\\n' format.\n+    // This mitigates risk of interpretation errors,\n+    // especially by proxies and sanitizers,\n+    // which are known to sometimes mangle '\\n' characters.\n+    appendHexJavaScriptRepresentation(sb, c);\n+} else if (c == quote) {\n+    // In certain cases, escaping for inside tag attributes is optional,\n+    // and we may only need to escape the quote characters,\n+    // in which case strEscapeCompiler will pass the quote through\n+    // as one of the 'escape your quotes' characters.  We need to\n+    // make sure that we escape these characters too, otherwise\n+    // they will hork the client-side parser/compiler.\n+    sb.append('\\\\').append(c);\n+} else if (c == '&') {\n+    sb.append(\"&amp;\");\n+} else {\n+    sb.append(c);\n+}\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}