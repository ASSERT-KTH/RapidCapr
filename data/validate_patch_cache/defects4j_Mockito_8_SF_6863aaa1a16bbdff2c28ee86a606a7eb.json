{
    "patch": "if (!(classType instanceof ParameterizedType)) {\n    return;\n}\nParameterizedType parameterizedType = (ParameterizedType) classType;\nTypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\n    TypeVariable typeParameter = typeParameters[i];\n    Type actualTypeArgument = actualTypeArguments[i];\n\n    if (actualTypeArgument instanceof WildcardType) {\n        contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n    } else if (!(actualTypeArgument instanceof TypeVariable)) { // check if type argument is a concrete type\n        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n    } else {\n        TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n        if (variable.getBounds().length == 1) { // if the type variable has only one bound, use it\n            contextualActualTypeParameters.put(typeParameter, variable.getBounds()[0]);\n        } else { // otherwise, use the type variable itself\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n    // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..ea80426a5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,30 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+if (!(classType instanceof ParameterizedType)) {\n+    return;\n+}\n+ParameterizedType parameterizedType = (ParameterizedType) classType;\n+TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+for (int i = 0; i < actualTypeArguments.length; i++) {\n+    TypeVariable typeParameter = typeParameters[i];\n+    Type actualTypeArgument = actualTypeArguments[i];\n+\n+    if (actualTypeArgument instanceof WildcardType) {\n+        contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+    } else if (!(actualTypeArgument instanceof TypeVariable)) { // check if type argument is a concrete type\n+        contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+    } else {\n+        TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n+        if (variable.getBounds().length == 1) { // if the type variable has only one bound, use it\n+            contextualActualTypeParameters.put(typeParameter, variable.getBounds()[0]);\n+        } else { // otherwise, use the type variable itself\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+    // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "java.lang.ClassCastException: org.mockito.internal.creation.cglib.ClassImposterizer$ClassWithSuperclassToWorkAroundCglibBug$$EnhancerByMockitoWithCGLIB$$e551def cannot be cast to java.lang.String",
    "test_result": "FAIL"
}