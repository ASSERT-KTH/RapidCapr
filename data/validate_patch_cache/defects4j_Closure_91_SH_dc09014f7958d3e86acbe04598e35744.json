{
    "patch": "if (parent != null && parent.getType() == Token.ASSIGN) {\n  Node lhs = parent.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  if (n == lhs) {\n    // Always traverse the left side of the assignment. To handle\n    // nested assignments properly (e.g., (a = this).property = c;),\n    // assignLhsChild should not be overridden.\n    if (assignLhsChild == null) {\n      assignLhsChild = lhs;\n    }\n  } else {\n    // Only traverse the right side if it's not an assignment to a prototype\n    // property or subproperty, or a call to a function that may not return the object being assigned.\n    if (NodeUtil.isGet(lhs) && !isPrototypeProperty(lhs) && !isChainedCall(rhs)) {\n      // Ensure that the entire LHS is TYPEOFable. If it isn't, then we cannot safely\n      // asssume that lhs is a reference to an object.\n      if (parent.getParent().getType() == Token.EXPR_RESULT &&\n          isTypeOfable(lhs.getFirstChild())) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..296dbbca 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,40 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+if (parent != null && parent.getType() == Token.ASSIGN) {\n+  Node lhs = parent.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  if (n == lhs) {\n+    // Always traverse the left side of the assignment. To handle\n+    // nested assignments properly (e.g., (a = this).property = c;),\n+    // assignLhsChild should not be overridden.\n+    if (assignLhsChild == null) {\n+      assignLhsChild = lhs;\n+    }\n+  } else {\n+    // Only traverse the right side if it's not an assignment to a prototype\n+    // property or subproperty, or a call to a function that may not return the object being assigned.\n+    if (NodeUtil.isGet(lhs) && !isPrototypeProperty(lhs) && !isChainedCall(rhs)) {\n+      // Ensure that the entire LHS is TYPEOFable. If it isn't, then we cannot safely\n+      // asssume that lhs is a reference to an object.\n+      if (parent.getParent().getType() == Token.EXPR_RESULT &&\n+          isTypeOfable(lhs.getFirstChild())) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      } else {\n+        return false;\n+      }\n+    }\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}