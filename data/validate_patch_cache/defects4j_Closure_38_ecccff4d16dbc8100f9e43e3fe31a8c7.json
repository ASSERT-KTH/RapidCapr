{
    "patch": "void addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-' && !negativeZero) {\n      // If the number is negative and the previous character is a \"-\", add a\n      // space to prevent mis-parsing. Also, print number wrapped in parentheses.\n      add(\" \");\n      add(\"(\");\n      add(\"-\");\n      addNumber(-x); // Recursively add the positive counterpart of the number\n      add(\")\");\n    } else {\n      if (Double.isNaN(x)) {\n        add(\"nan\");\n      } else if (Double.POSITIVE_INFINITY == x) {\n        add(\"inf\");\n      } else if (Double.NEGATIVE_INFINITY == x) {\n        add(\"-inf\");\n      } else {\n        if ((long) x == x && !negativeZero) {\n          long value = (long) x;\n          long mantissa = value;\n          int exp = 0;\n          if (Math.abs(x) >= 100) {\n            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n              mantissa /= 10;\n              exp++;\n            }\n          }\n          if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n          } else {\n            add(Long.toString(value));\n          }\n        } else {\n          add(Double.toString(x));\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..caf4ace1 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,51 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+void addNumber(double x) {\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    if (x < 0 && prev == '-' && !negativeZero) {\n+      // If the number is negative and the previous character is a \"-\", add a\n+      // space to prevent mis-parsing. Also, print number wrapped in parentheses.\n+      add(\" \");\n+      add(\"(\");\n+      add(\"-\");\n+      addNumber(-x); // Recursively add the positive counterpart of the number\n+      add(\")\");\n+    } else {\n+      if (Double.isNaN(x)) {\n+        add(\"nan\");\n+      } else if (Double.POSITIVE_INFINITY == x) {\n+        add(\"inf\");\n+      } else if (Double.NEGATIVE_INFINITY == x) {\n+        add(\"-inf\");\n+      } else {\n+        if ((long) x == x && !negativeZero) {\n+          long value = (long) x;\n+          long mantissa = value;\n+          int exp = 0;\n+          if (Math.abs(x) >= 100) {\n+            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+              mantissa /= 10;\n+              exp++;\n+            }\n+          }\n+          if (exp > 2) {\n+            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+          } else {\n+            add(Long.toString(value));\n+          }\n+        } else {\n+          add(Double.toString(x));\n+        }\n+      }\n+    }\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}