{
    "patch": "private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n\tprivate static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n\tprivate static Map<Class<?>, Object> primitiveReturnValues = new HashMap<Class<?>, Object>();\n\n\tstatic {\n\t\tprimitiveTypes.put(Boolean.class, Boolean.TYPE);\n\t\tprimitiveTypes.put(Character.class, Character.TYPE);\n\t\tprimitiveTypes.put(Byte.class, Byte.TYPE);\n\t\tprimitiveTypes.put(Short.class, Short.TYPE);\n\t\tprimitiveTypes.put(Integer.class, Integer.TYPE);\n\t\tprimitiveTypes.put(Long.class, Long.TYPE);\n\t\tprimitiveTypes.put(Float.class, Float.TYPE);\n\t\tprimitiveTypes.put(Double.class, Double.TYPE);\n\n\t\twrapperReturnValues.put(Boolean.class, false);\n\t\twrapperReturnValues.put(Character.class, '\\u0000');\n\t\twrapperReturnValues.put(Byte.class, (byte) 0);\n\t\twrapperReturnValues.put(Short.class, (short) 0);\n\t\twrapperReturnValues.put(Integer.class, 0);\n\t\twrapperReturnValues.put(Long.class, 0L);\n\t\twrapperReturnValues.put(Float.class, 0F);\n\t\twrapperReturnValues.put(Double.class, 0D);\n\n\t\tprimitiveReturnValues.put(boolean.class, false);\n\t\tprimitiveReturnValues.put(char.class, '\\u0000');\n\t\tprimitiveReturnValues.put(byte.class, (byte) 0);\n\t\tprimitiveReturnValues.put(short.class, (short) 0);\n\t\tprimitiveReturnValues.put(int.class, 0);\n\t\tprimitiveReturnValues.put(long.class, 0L);\n\t\tprimitiveReturnValues.put(float.class, 0F);\n\t\tprimitiveReturnValues.put(double.class, 0D);\n\t}\n\n\tpublic Object returnFor(Class<?> clazz) {\n\t\tif (clazz.isPrimitive()) {\n\t\t\treturn primitiveReturnValues.get(primitiveTypes.get(clazz));\n\t\t} else {\n\t\t\treturn wrapperReturnValues.get(clazz);\n\t\t}\n\t}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..3f447ee3d 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -31,38 +31,44 @@ public class Primitives {\n     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n-\n-    static {\n-        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n-        primitiveTypes.put(Character.class, Character.TYPE);\n-        primitiveTypes.put(Byte.class, Byte.TYPE);\n-        primitiveTypes.put(Short.class, Short.TYPE);\n-        primitiveTypes.put(Integer.class, Integer.TYPE);\n-        primitiveTypes.put(Long.class, Long.TYPE);\n-        primitiveTypes.put(Float.class, Float.TYPE);\n-        primitiveTypes.put(Double.class, Double.TYPE);\n-    }\n-\n-    static {\n-        wrapperReturnValues.put(Boolean.class, false);\n-        wrapperReturnValues.put(Character.class, '\\u0000');\n-        wrapperReturnValues.put(Byte.class, (byte) 0);\n-        wrapperReturnValues.put(Short.class, (short) 0);\n-        wrapperReturnValues.put(Integer.class, 0);\n-        wrapperReturnValues.put(Long.class, 0L);\n-        wrapperReturnValues.put(Float.class, 0F);\n-        wrapperReturnValues.put(Double.class, 0D);\n-    }\n-\n-    static {\n-        primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, '\\u0000');\n-        primitiveValues.put(byte.class, (byte) 0);\n-        primitiveValues.put(short.class, (short) 0);\n-        primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0L);\n-        primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n-    }\n-}\n\\ No newline at end of file\n+private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n+\tprivate static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n+\tprivate static Map<Class<?>, Object> primitiveReturnValues = new HashMap<Class<?>, Object>();\n+\n+\tstatic {\n+\t\tprimitiveTypes.put(Boolean.class, Boolean.TYPE);\n+\t\tprimitiveTypes.put(Character.class, Character.TYPE);\n+\t\tprimitiveTypes.put(Byte.class, Byte.TYPE);\n+\t\tprimitiveTypes.put(Short.class, Short.TYPE);\n+\t\tprimitiveTypes.put(Integer.class, Integer.TYPE);\n+\t\tprimitiveTypes.put(Long.class, Long.TYPE);\n+\t\tprimitiveTypes.put(Float.class, Float.TYPE);\n+\t\tprimitiveTypes.put(Double.class, Double.TYPE);\n+\n+\t\twrapperReturnValues.put(Boolean.class, false);\n+\t\twrapperReturnValues.put(Character.class, '\\u0000');\n+\t\twrapperReturnValues.put(Byte.class, (byte) 0);\n+\t\twrapperReturnValues.put(Short.class, (short) 0);\n+\t\twrapperReturnValues.put(Integer.class, 0);\n+\t\twrapperReturnValues.put(Long.class, 0L);\n+\t\twrapperReturnValues.put(Float.class, 0F);\n+\t\twrapperReturnValues.put(Double.class, 0D);\n+\n+\t\tprimitiveReturnValues.put(boolean.class, false);\n+\t\tprimitiveReturnValues.put(char.class, '\\u0000');\n+\t\tprimitiveReturnValues.put(byte.class, (byte) 0);\n+\t\tprimitiveReturnValues.put(short.class, (short) 0);\n+\t\tprimitiveReturnValues.put(int.class, 0);\n+\t\tprimitiveReturnValues.put(long.class, 0L);\n+\t\tprimitiveReturnValues.put(float.class, 0F);\n+\t\tprimitiveReturnValues.put(double.class, 0D);\n+\t}\n+\n+\tpublic Object returnFor(Class<?> clazz) {\n+\t\tif (clazz.isPrimitive()) {\n+\t\t\treturn primitiveReturnValues.get(primitiveTypes.get(clazz));\n+\t\t} else {\n+\t\t\treturn wrapperReturnValues.get(clazz);\n+\t\t}\n+\t}\n+}",
    "result_reason": "error: variable primitiveTypes is already defined in class Primitives",
    "test_result": "ERROR"
}