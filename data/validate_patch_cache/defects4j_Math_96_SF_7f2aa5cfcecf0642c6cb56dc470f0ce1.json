{
    "patch": "public Complex multiply(Complex other) {\n    double reA = real;\n    double imA = imaginary;\n    double reB = other.real;\n    double imB = other.imaginary;\n\n    if (Double.isNaN(reA) || Double.isNaN(imA) || Double.isNaN(reB) || Double.isNaN(imB)) {\n        return NAN;\n    }\n    \n    if (Double.isInfinite(reA) || Double.isInfinite(imA) || Double.isInfinite(reB) || Double.isInfinite(imB)) {\n        if (this.isNaN() || other.isNaN()) {\n            return NAN;\n        }\n        if (Double.isInfinite(reA) && Double.isInfinite(imA) && (reB == 0.0) && (imB == 0.0)) {\n            return NAN;\n        }\n        if (Double.isInfinite(reB) && Double.isInfinite(imB) && (reA == 0.0) && (imA == 0.0)) {\n            return NAN;\n        }\n\n        // at least one infinite operand and no NaN\n        return INFINITE;\n    }\n\n    if (other == ZERO) {\n        return ZERO;\n    }\n\n    if (this == ZERO) {\n        return ZERO;\n    }\n\n    if (other == ONE) {\n        return newInstance(real * reB - imaginary * imB, real * imB + imaginary * reB);\n    }\n\n    if (this == ONE) {\n        return newInstance(reA * other.real - imA * other.imaginary, reA * other.imaginary + imA * other.real);\n    }\n\n    if ((imaginary == 0) && (imB == 0)) {\n        return newInstance(real * reB, real * imB);\n    }\n\n    if (reB == 0) {\n        return newInstance(-imA * imB, reA * imB);\n    }\n\n    if (imB == 0) {\n        return newInstance(reA * reB, imA * reB);\n    }\n\n    // General case, requires four real multiplications\n    Dfp a = newInstance(reA);\n    Dfp b = newInstance(imA);\n    Dfp c = newInstance(reB);\n    Dfp d = newInstance(imB);\n\n    Dfp ac = a.multiply(c);\n    Dfp bd = b.multiply(d);\n    Dfp ad = a.multiply(d);\n    Dfp bc = b.multiply(c);\n\n    Dfp realPart = ac.subtract(bd);\n    Dfp imagPart = ad.add(bc);\n\n    return newInstance(realPart.toDouble(), imagPart.toDouble());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..2f1225352 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -242,29 +242,75 @@ public class Complex implements Serializable  {\n      *         not equal to this Complex instance\n      * \n      */\n-    public boolean equals(Object other) {\n-        boolean ret;\n-        \n-        if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n+public Complex multiply(Complex other) {\n+    double reA = real;\n+    double imA = imaginary;\n+    double reB = other.real;\n+    double imB = other.imaginary;\n+\n+    if (Double.isNaN(reA) || Double.isNaN(imA) || Double.isNaN(reB) || Double.isNaN(imB)) {\n+        return NAN;\n+    }\n+    \n+    if (Double.isInfinite(reA) || Double.isInfinite(imA) || Double.isInfinite(reB) || Double.isInfinite(imB)) {\n+        if (this.isNaN() || other.isNaN()) {\n+            return NAN;\n+        }\n+        if (Double.isInfinite(reA) && Double.isInfinite(imA) && (reB == 0.0) && (imB == 0.0)) {\n+            return NAN;\n+        }\n+        if (Double.isInfinite(reB) && Double.isInfinite(imB) && (reA == 0.0) && (imA == 0.0)) {\n+            return NAN;\n         }\n-      \n-        return ret;\n+\n+        // at least one infinite operand and no NaN\n+        return INFINITE;\n+    }\n+\n+    if (other == ZERO) {\n+        return ZERO;\n+    }\n+\n+    if (this == ZERO) {\n+        return ZERO;\n+    }\n+\n+    if (other == ONE) {\n+        return newInstance(real * reB - imaginary * imB, real * imB + imaginary * reB);\n     }\n+\n+    if (this == ONE) {\n+        return newInstance(reA * other.real - imA * other.imaginary, reA * other.imaginary + imA * other.real);\n+    }\n+\n+    if ((imaginary == 0) && (imB == 0)) {\n+        return newInstance(real * reB, real * imB);\n+    }\n+\n+    if (reB == 0) {\n+        return newInstance(-imA * imB, reA * imB);\n+    }\n+\n+    if (imB == 0) {\n+        return newInstance(reA * reB, imA * reB);\n+    }\n+\n+    // General case, requires four real multiplications\n+    Dfp a = newInstance(reA);\n+    Dfp b = newInstance(imA);\n+    Dfp c = newInstance(reB);\n+    Dfp d = newInstance(imB);\n+\n+    Dfp ac = a.multiply(c);\n+    Dfp bd = b.multiply(d);\n+    Dfp ad = a.multiply(d);\n+    Dfp bc = b.multiply(c);\n+\n+    Dfp realPart = ac.subtract(bd);\n+    Dfp imagPart = ad.add(bc);\n+\n+    return newInstance(realPart.toDouble(), imagPart.toDouble());\n+}\n     \n     /**\n      * Get a hashCode for the complex number.",
    "result_reason": "error: method multiply(Complex) is already defined in class Complex",
    "test_result": "ERROR"
}