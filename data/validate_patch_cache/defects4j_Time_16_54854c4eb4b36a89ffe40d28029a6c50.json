{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        \n        // if the instant has a timezone, use it as the pivot for parsing\n        DateTimeZone zone = instant.getZone();\n        long parsedMillis;\n        if (zone != null) {\n            chrono = selectChronology(chrono);\n            DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, zone);\n            int newPos = parser.parseInto(bucket, text, position);\n            parsedMillis = bucket.computeMillis(false, text);\n        } else {\n            Chronology parsedChrono;\n            DateTimeParserBucket bucket;\n            int newPos;\n            \n            if (instantMillis == Long.MIN_VALUE) {  // add a fictitious millis for hold the parsed date\n                bucket = new DateTimeParserBucket(\n                    0L,\n                    chrono,\n                    iLocale,\n                    iPivotYear,\n                    iDefaultYear);\n                newPos = parser.parseInto(bucket, text, position);\n                parsedChrono = bucket.getChronology();\n            } else {\n                parsedChrono = selectChronology(chrono);\n                parsedMillis = parsedChrono.setInstant(\n                    parsedMillis,\n                    chrono.withUTC());\n                bucket = new DateTimeParserBucket(\n                    parsedMillis,\n                    parsedChrono,\n                    iLocale,\n                    iPivotYear,\n                    iDefaultYear);\n                newPos = parser.parseInto(bucket, text, position);\n            }\n            \n            parsedMillis = bucket.computeMillis(false, text);\n            chrono = bucket.getEffectiveChronology(parsedChrono);\n            \n            // update the local time zone offset, if it was parsed\n            if (bucket.getOffsetInteger() != null) {\n                zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n                if (zone != null) {\n                    chrono = chrono.withZone(zone);\n                }\n            }\n        }\n        \n        instant.setMillis(parsedMillis);\n        instant.setChronology(chrono);\n        if (zone != null) {\n            instant.setZone(zone);\n        }\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..92267207 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,73 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+        DateTimeParser parser = requireParser();\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"Instant must not be null\");\n+        }\n+        \n+        Chronology chrono = instant.getChronology();\n+        long instantMillis = instant.getMillis();\n+        \n+        // if the instant has a timezone, use it as the pivot for parsing\n+        DateTimeZone zone = instant.getZone();\n+        long parsedMillis;\n+        if (zone != null) {\n+            chrono = selectChronology(chrono);\n+            DateTimeParserBucket bucket = new DateTimeParserBucket(instantMillis, chrono, zone);\n+            int newPos = parser.parseInto(bucket, text, position);\n+            parsedMillis = bucket.computeMillis(false, text);\n+        } else {\n+            Chronology parsedChrono;\n+            DateTimeParserBucket bucket;\n+            int newPos;\n+            \n+            if (instantMillis == Long.MIN_VALUE) {  // add a fictitious millis for hold the parsed date\n+                bucket = new DateTimeParserBucket(\n+                    0L,\n+                    chrono,\n+                    iLocale,\n+                    iPivotYear,\n+                    iDefaultYear);\n+                newPos = parser.parseInto(bucket, text, position);\n+                parsedChrono = bucket.getChronology();\n+            } else {\n+                parsedChrono = selectChronology(chrono);\n+                parsedMillis = parsedChrono.setInstant(\n+                    parsedMillis,\n+                    chrono.withUTC());\n+                bucket = new DateTimeParserBucket(\n+                    parsedMillis,\n+                    parsedChrono,\n+                    iLocale,\n+                    iPivotYear,\n+                    iDefaultYear);\n+                newPos = parser.parseInto(bucket, text, position);\n+            }\n+            \n+            parsedMillis = bucket.computeMillis(false, text);\n+            chrono = bucket.getEffectiveChronology(parsedChrono);\n+            \n+            // update the local time zone offset, if it was parsed\n+            if (bucket.getOffsetInteger() != null) {\n+                zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+                if (zone != null) {\n+                    chrono = chrono.withZone(zone);\n+                }\n+            }\n+        }\n+        \n+        instant.setMillis(parsedMillis);\n+        instant.setChronology(chrono);\n+        if (zone != null) {\n+            instant.setZone(zone);\n+        }\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return newPos;\n+    }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}