{
    "patch": "                int codepoint = Character.codePointAt(input, pos);\n                int charCount = Character.charCount(codepoint);\n                pos += charCount;\n                if (charCount > 1) {\n                    out.write(replacement);\n                } else {\n                    out.write(output[0]);\n                    if (output.length > 1) {\n                        out.write(output[1]);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..b7e3e59b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,17 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codepoint = Character.codePointAt(input, pos);\n+                int charCount = Character.charCount(codepoint);\n+                pos += charCount;\n+                if (charCount > 1) {\n+                    out.write(replacement);\n+                } else {\n+                    out.write(output[0]);\n+                    if (output.length > 1) {\n+                        out.write(output[1]);\n+                    }\n+                }\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}