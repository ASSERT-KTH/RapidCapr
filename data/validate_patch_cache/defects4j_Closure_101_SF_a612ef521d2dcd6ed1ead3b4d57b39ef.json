{
    "patch": "import com.google.javascript.jscomp.ClosureCodingConvention;\n\n// ...\n\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel = flags.warning_level;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.setProcessCommonJsModules(true);\n      options.setProcessClosurePrimitives(true);\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..ac38b812 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,6 +416,10 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n+import com.google.javascript.jscomp.ClosureCodingConvention;\n+\n+// ...\n+\n   protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n@@ -431,7 +435,8 @@ public class CommandLineRunner extends\n       formattingOption.applyToOptions(options);\n     }\n     if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+      options.setProcessCommonJsModules(true);\n+      options.setProcessClosurePrimitives(true);\n     }\n \n     initOptionsFromFlags(options);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}