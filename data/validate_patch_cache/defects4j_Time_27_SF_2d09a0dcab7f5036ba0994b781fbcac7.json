{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        // Recurse on the sublist with index 2 to size\n        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n        // Finish the separator with the printer and parser of the recursive formatter:\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        // Return a new formatter with the finished separator as both its printer and parser:\n        return new PeriodFormatter(sep, sep);\n    } else {\n        // Create a composite from the element pairs (as before):\n        Object[] comp = createComposite(elementPairs);\n        if (notPrinter) {\n            // Return a formatter with the composite as parser only:\n            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n        } else if (notParser) {\n            // Return a formatter with the composite as printer only:\n            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n        } else {\n            // Return a formatter with the composite as both printer and parser:\n            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..69aee757 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,34 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        // Recurse on the sublist with index 2 to size\n+        PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+        // Finish the separator with the printer and parser of the recursive formatter:\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        // Return a new formatter with the finished separator as both its printer and parser:\n+        return new PeriodFormatter(sep, sep);\n+    } else {\n+        // Create a composite from the element pairs (as before):\n         Object[] comp = createComposite(elementPairs);\n         if (notPrinter) {\n+            // Return a formatter with the composite as parser only:\n             return new PeriodFormatter(null, (PeriodParser) comp[1]);\n         } else if (notParser) {\n+            // Return a formatter with the composite as printer only:\n             return new PeriodFormatter((PeriodPrinter) comp[0], null);\n         } else {\n+            // Return a formatter with the composite as both printer and parser:\n             return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n         }\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"PT1003199059S\" is malformed at \"1003199059S\"",
    "test_result": "FAIL"
}