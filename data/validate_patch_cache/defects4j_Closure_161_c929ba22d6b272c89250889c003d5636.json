{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    ScriptNode parent = n.getAncestor(AbstractCompiler.NODE_TYPE_SCRIPT);\n\n    if (right.getType() != Token.NUMBER || !right.isInt()) {\n      compiler.report(JSError.make(n, INVALID_GETELEM_INDEX_ERROR));\n      return n;\n    }\n\n    int intIndex = right.getIntValue();\n    if (intIndex < 0) {\n      compiler.report(JSError.make(n, INDEX_OUT_OF_BOUNDS_ERROR));\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      compiler.report(JSError.make(n, INDEX_OUT_OF_BOUNDS_ERROR));\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = IR.undefined();\n      left.replaceChild(elem, left.getFirstChild());\n    } else {\n      left.removeChild(elem);\n    }\n\n    parent.replaceChild(n, elem);\n    compiler.reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..5d002698 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,28 +1274,17 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+    ScriptNode parent = n.getAncestor(AbstractCompiler.NODE_TYPE_SCRIPT);\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+    if (right.getType() != Token.NUMBER || !right.isInt()) {\n+      compiler.report(JSError.make(n, INVALID_GETELEM_INDEX_ERROR));\n       return n;\n     }\n \n+    int intIndex = right.getIntValue();\n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      compiler.report(JSError.make(n, INDEX_OUT_OF_BOUNDS_ERROR));\n       return n;\n     }\n \n@@ -1305,19 +1294,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      compiler.report(JSError.make(n, INDEX_OUT_OF_BOUNDS_ERROR));\n       return n;\n     }\n \n     if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      elem = IR.undefined();\n+      left.replaceChild(elem, left.getFirstChild());\n     } else {\n       left.removeChild(elem);\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n+    parent.replaceChild(n, elem);\n+    compiler.reportCodeChange();\n     return elem;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}