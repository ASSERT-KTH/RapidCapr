{
    "patch": "if (n.isFunction()) {\n  return false;\n}\n\nboolean hasImpureCall = false;\nfor (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n  if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n    hasImpureCall = true;\n  }\n}\nreturn hasImpureCall;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..b0f04164 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isFunction()) {\n+  return false;\n+}\n+\n+boolean hasImpureCall = false;\n+for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n+    hasImpureCall = true;\n+  }\n+}\n+return hasImpureCall;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}