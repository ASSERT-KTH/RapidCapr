{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    // Check that goog.scope function has only one anonymous function parameter with no parameters\n    if (scope.isDeclared(\"goog\", false)) {\n        Var googVar = scope.getVar(\"goog\");\n        Node lhs = googVar.getNode();\n        if (lhs != null && lhs.isName() && lhs.hasChildren()) {\n            Node parent = lhs.getParent();\n            if (parent.isExprResult()) {\n                Node call = parent.getFirstChild();\n                if (call.isCall() && call.hasOneChild()) {\n                    Node arg = call.getFirstChild();\n                    if (arg.isFunction()) {\n                        if (!arg.hasChildren()) {\n                            for (Node param : arg.getSecondChild().children()) {\n                                if (param.isName()) {\n                                    t.report(param, GOOG_SCOPE_INVALID_ALIAS, param.getString());\n                                } else {\n                                    Node name = param.getFirstChild();\n                                    t.report(name, GOOG_SCOPE_INVALID_ALIAS, name.getString());\n                                }\n                            }\n                            NodeTraversal.traverseEs6(compiler, arg.getSecondChild(), new CheckVars(t));\n                        } else {\n                            t.report(arg, GOOG_SCOPE_INVALID_FUNCTION_PARAMETERS);\n                        }\n                    } else {\n                        t.report(arg, GOOG_SCOPE_NOT_FUNCTION);\n                    }\n                }\n            }\n        }\n    }\n\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = scope.getVar(name);\n            aliases.put(name, aliasVar);\n\n            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n            transformation.addAlias(name, qualifiedName);\n            // Bleeding functions already get a BAD_PARAMETERS error, so just\n            // do nothing.\n            // Parameters of the scope function also get a BAD_PARAMETERS\n            // error.\n        } else {\n            // TODO(robbyw): Support using locals for private variables.\n            t.report(n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n        }\n    }\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..38d90338 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -268,33 +268,62 @@ class ScopedAliases implements HotSwapCompilerPass {\n       compiler.report(t.makeError(n, error, arguments));\n       hasErrors = true;\n     }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    // Check that goog.scope function has only one anonymous function parameter with no parameters\n+    if (scope.isDeclared(\"goog\", false)) {\n+        Var googVar = scope.getVar(\"goog\");\n+        Node lhs = googVar.getNode();\n+        if (lhs != null && lhs.isName() && lhs.hasChildren()) {\n+            Node parent = lhs.getParent();\n+            if (parent.isExprResult()) {\n+                Node call = parent.getFirstChild();\n+                if (call.isCall() && call.hasOneChild()) {\n+                    Node arg = call.getFirstChild();\n+                    if (arg.isFunction()) {\n+                        if (!arg.hasChildren()) {\n+                            for (Node param : arg.getSecondChild().children()) {\n+                                if (param.isName()) {\n+                                    t.report(param, GOOG_SCOPE_INVALID_ALIAS, param.getString());\n+                                } else {\n+                                    Node name = param.getFirstChild();\n+                                    t.report(name, GOOG_SCOPE_INVALID_ALIAS, name.getString());\n+                                }\n+                            }\n+                            NodeTraversal.traverseEs6(compiler, arg.getSecondChild(), new CheckVars(t));\n+                        } else {\n+                            t.report(arg, GOOG_SCOPE_INVALID_FUNCTION_PARAMETERS);\n+                        }\n+                    } else {\n+                        t.report(arg, GOOG_SCOPE_NOT_FUNCTION);\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+            String name = n.getString();\n+            Var aliasVar = scope.getVar(name);\n+            aliases.put(name, aliasVar);\n+\n+            String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+            transformation.addAlias(name, qualifiedName);\n+            // Bleeding functions already get a BAD_PARAMETERS error, so just\n+            // do nothing.\n+            // Parameters of the scope function also get a BAD_PARAMETERS\n+            // error.\n         } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+            // TODO(robbyw): Support using locals for private variables.\n+            t.report(n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n-      }\n     }\n+}\n+\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}