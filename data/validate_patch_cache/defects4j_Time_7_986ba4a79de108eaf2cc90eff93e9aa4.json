{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    chrono = selectChronology(chrono);\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // check if February 29 was parsed\n    int parsedMonthOfYear = bucket.hasParsedMonthOfYear() ? bucket.getParsedMonthOfYear() : bucket.getChronology().monthOfYear().get(instantMillis);\n    int parsedDayOfMonth = bucket.hasParsedDayOfMonth() ? bucket.getParsedDayOfMonth() : bucket.getChronology().dayOfMonth().get(instantMillis);\n    if (parsedMonthOfYear == 2 && parsedDayOfMonth == 29) {\n        try {\n            instant.setMillis(bucket.computeMillis(false, text));\n        } catch (IllegalFieldValueException e) {\n            if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfMonth() && e.getIllegalNumberValue().intValue() == 29) {\n                // Invalid February 29 - calculate a new instant by moving to the following midnight\n                long nextDayInstant = bucket.getChronology().monthOfYear().set(instantMillis, parsedMonthOfYear + 1);\n                chrono = chrono.withZone(DateTimeZone.UTC); // convert to UTC temporarily for consistent handling of DST gaps\n                long nextDayMillis = chrono.dayOfMonth().set(nextDayInstant, 1);\n                long newInstant = nextDayMillis + bucket.getLocalMillis() - ChronoUTC.getOffsetFromLocalMillis(nextDayMillis, bucket.getZone());\n                instant.setMillis(newInstant);\n                instant.setChronology(chrono);\n            } else {\n                // Some other illegal value\n                throw e;\n            }\n        }\n    } else {\n        // Not February 29 - continue as usual\n        instant.setMillis(bucket.computeMillis(false, text));\n    }\n\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..25725f24 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    chrono = selectChronology(chrono);\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // check if February 29 was parsed\n+    int parsedMonthOfYear = bucket.hasParsedMonthOfYear() ? bucket.getParsedMonthOfYear() : bucket.getChronology().monthOfYear().get(instantMillis);\n+    int parsedDayOfMonth = bucket.hasParsedDayOfMonth() ? bucket.getParsedDayOfMonth() : bucket.getChronology().dayOfMonth().get(instantMillis);\n+    if (parsedMonthOfYear == 2 && parsedDayOfMonth == 29) {\n+        try {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+        } catch (IllegalFieldValueException e) {\n+            if (e.getDateTimeFieldType() == DateTimeFieldType.dayOfMonth() && e.getIllegalNumberValue().intValue() == 29) {\n+                // Invalid February 29 - calculate a new instant by moving to the following midnight\n+                long nextDayInstant = bucket.getChronology().monthOfYear().set(instantMillis, parsedMonthOfYear + 1);\n+                chrono = chrono.withZone(DateTimeZone.UTC); // convert to UTC temporarily for consistent handling of DST gaps\n+                long nextDayMillis = chrono.dayOfMonth().set(nextDayInstant, 1);\n+                long newInstant = nextDayMillis + bucket.getLocalMillis() - ChronoUTC.getOffsetFromLocalMillis(nextDayMillis, bucket.getZone());\n+                instant.setMillis(newInstant);\n+                instant.setChronology(chrono);\n+            } else {\n+                // Some other illegal value\n+                throw e;\n+            }\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+    } else {\n+        // Not February 29 - continue as usual\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n \n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}