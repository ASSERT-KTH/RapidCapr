{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    double v1X = v1.getX();\n    double v1Y = v1.getY();\n    double v1Z = v1.getZ();\n    double v2X = v2.getX();\n    double v2Y = v2.getY();\n    double v2Z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double ax = Math.abs(v1X);\n    double ay = Math.abs(v1Y);\n    double az = Math.abs(v1Z);\n    double bx = Math.abs(v2X);\n    double by = Math.abs(v2Y);\n    double bz = Math.abs(v2Z);\n\n    double max = Math.max(Math.max(ax, ay), az);\n    double eps = 1e-15;\n    if (bx > max)\n        max = bx;\n    if (by > max)\n        max = by;\n    if (bz > max)\n        max = bz;\n    double factor = 1.0;\n    if (max < 1.0) {\n        factor = 1.0 / max;\n    }\n\n    double v1X2 = v1X * factor;\n    double v1Y2 = v1Y * factor;\n    double v1Z2 = v1Z * factor;\n    double v2X2 = v2X * factor;\n    double v2Y2 = v2Y * factor;\n    double v2Z2 = v2Z * factor;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    double rho = (v1X2 * v2X2 + v1Y2 * v2Y2 + v1Z2 * v2Z2);\n\n    double v3X = v1X2 - rho * v2X2;\n    double v3Y = v1Y2 - rho * v2Y2;\n    double v3Z = v1Z2 - rho * v2Z2;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3Y * v2Z2 - v3Z * v2Y2, v3Z * v2X2 - v3X * v2Z2, v3X * v2Y2 - v3Y * v2X2);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f9ea3b456 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,61 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    double v1X = v1.getX();\n+    double v1Y = v1.getY();\n+    double v1Z = v1.getZ();\n+    double v2X = v2.getX();\n+    double v2Y = v2.getY();\n+    double v2Z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double ax = Math.abs(v1X);\n+    double ay = Math.abs(v1Y);\n+    double az = Math.abs(v1Z);\n+    double bx = Math.abs(v2X);\n+    double by = Math.abs(v2Y);\n+    double bz = Math.abs(v2Z);\n+\n+    double max = Math.max(Math.max(ax, ay), az);\n+    double eps = 1e-15;\n+    if (bx > max)\n+        max = bx;\n+    if (by > max)\n+        max = by;\n+    if (bz > max)\n+        max = bz;\n+    double factor = 1.0;\n+    if (max < 1.0) {\n+        factor = 1.0 / max;\n+    }\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n+    double v1X2 = v1X * factor;\n+    double v1Y2 = v1Y * factor;\n+    double v1Z2 = v1Z * factor;\n+    double v2X2 = v2X * factor;\n+    double v2Y2 = v2Y * factor;\n+    double v2Z2 = v2Z * factor;\n \n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double rho = (v1X2 * v2X2 + v1Y2 * v2Y2 + v1Z2 * v2Z2);\n \n+    double v3X = v1X2 - rho * v2X2;\n+    double v3Y = v1Y2 - rho * v2Y2;\n+    double v3Z = v1Z2 - rho * v2Z2;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3Y * v2Z2 - v3Z * v2Y2, v3Z * v2X2 - v3X * v2Z2, v3X * v2Y2 - v3Y * v2X2);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<0.41113786232234784>",
    "test_result": "FAIL"
}