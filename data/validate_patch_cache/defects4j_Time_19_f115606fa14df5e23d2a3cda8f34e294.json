{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantBefore = instantLocal - offsetLocal;\n\n        // if the instant is already fixed, then return the offset\n        if (instantBefore < nextTransition(instantBefore)) {\n            return offsetLocal;\n        }\n\n        // get the offset at instantBefore (the previous daylight saving time)\n        final int offsetBefore = getOffset(instantBefore - 1);\n\n        // if the offset didn't change, return it\n        if (offsetLocal == offsetBefore) {\n            return offsetLocal;\n        }\n\n        // otherwise, look for a transition after the instantBefore\n        final long instantAfter = nextTransition(instantBefore);\n        final int offsetAfter = getOffset(instantAfter);\n\n        // choose the closest offset\n        if (offsetAfter == offsetLocal) {\n            return offsetLocal;\n        } else {\n            return offsetBefore;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..cbb1dc80 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,32 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        final long instantBefore = instantLocal - offsetLocal;\n+\n+        // if the instant is already fixed, then return the offset\n+        if (instantBefore < nextTransition(instantBefore)) {\n+            return offsetLocal;\n+        }\n+\n+        // get the offset at instantBefore (the previous daylight saving time)\n+        final int offsetBefore = getOffset(instantBefore - 1);\n+\n+        // if the offset didn't change, return it\n+        if (offsetLocal == offsetBefore) {\n+            return offsetLocal;\n+        }\n+\n+        // otherwise, look for a transition after the instantBefore\n+        final long instantAfter = nextTransition(instantBefore);\n+        final int offsetAfter = getOffset(instantAfter);\n+\n+        // choose the closest offset\n+        if (offsetAfter == offsetLocal) {\n+            return offsetLocal;\n+        } else {\n+            return offsetBefore;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}