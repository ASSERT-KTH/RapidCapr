{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n        // If this node is a FUNCTION or DO, but has an empty statement as a child,\n        // return false to indicate that it is not a valid FUNCTION or DO.\n        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.EMPTY) {\n            return false;\n        }\n        return true;\n    } else if (n.getType() == Token.BLOCK) {\n        // If this node is a BLOCK with only one child, recursively check to see if that\n        // child is an only-empty node.\n        if (n.getChildCount() == 1) {\n            return isOnlyEmptyStatement(n.getFirstChild());\n        }\n    }\n    return false;\n}\n\nprivate boolean isOnlyEmptyStatement(Node n) {\n    if (n.getType() == Token.EMPTY) {\n        return true;\n    } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n        // If this node is a BLOCK with only one child, recursively check to see if that\n        // child is an only-empty node.\n        return isOnlyEmptyStatement(n.getFirstChild());\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..d3aee106 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,34 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n+        // If this node is a FUNCTION or DO, but has an empty statement as a child,\n+        // return false to indicate that it is not a valid FUNCTION or DO.\n+        if (n.getChildCount() == 1 && n.getFirstChild().getType() == Token.EMPTY) {\n+            return false;\n+        }\n+        return true;\n+    } else if (n.getType() == Token.BLOCK) {\n+        // If this node is a BLOCK with only one child, recursively check to see if that\n+        // child is an only-empty node.\n+        if (n.getChildCount() == 1) {\n+            return isOnlyEmptyStatement(n.getFirstChild());\n+        }\n+    }\n+    return false;\n+}\n+\n+private boolean isOnlyEmptyStatement(Node n) {\n+    if (n.getType() == Token.EMPTY) {\n+        return true;\n+    } else if (n.getType() == Token.BLOCK && n.getChildCount() == 1) {\n+        // If this node is a BLOCK with only one child, recursively check to see if that\n+        // child is an only-empty node.\n+        return isOnlyEmptyStatement(n.getFirstChild());\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}