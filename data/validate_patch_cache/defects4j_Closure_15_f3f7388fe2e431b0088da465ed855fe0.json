{
    "patch": "        if (n.isScript()) {\n          if (NodeUtil.isFunctionExpression(n.getFirstChild())) {\n            // Functions cannot have side-effects (unless they call something with side-effects).\n            return false;\n          }\n        } else {\n          boolean containsCallOrNew = false;\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n              containsCallOrNew = true;\n              break;\n            }\n          }\n          if (containsCallOrNew) {\n            return true;\n          }\n        }\n\n        return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..5f1d6929 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,25 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isScript()) {\n+          if (NodeUtil.isFunctionExpression(n.getFirstChild())) {\n+            // Functions cannot have side-effects (unless they call something with side-effects).\n+            return false;\n+          }\n+        } else {\n+          boolean containsCallOrNew = false;\n+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+              containsCallOrNew = true;\n+              break;\n+            }\n+          }\n+          if (containsCallOrNew) {\n+            return true;\n+          }\n+        }\n+\n+        return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}