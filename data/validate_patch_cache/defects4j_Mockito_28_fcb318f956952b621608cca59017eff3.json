{
    "patch": "Optional<MockCandidate> mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\nif (mockCandidate.isPresent()) {\n    try {\n        mockCandidate.get().thenInject();\n    } catch (IllegalAccessException e) {\n        throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n        throw new RuntimeException(e);\n    }\n    break;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..d2e3b6ab2 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,17 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+Optional<MockCandidate> mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+if (mockCandidate.isPresent()) {\n+    try {\n+        mockCandidate.get().thenInject();\n+    } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+    } catch (InvocationTargetException e) {\n+        throw new RuntimeException(e);\n+    }\n+    break;\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}