{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int millis = getMillis() % DateTimeConstants.MILLIS_PER_SECOND;\n    int seconds = FieldUtils.safeAdd(getSeconds(), getMillis() / DateTimeConstants.MILLIS_PER_SECOND);\n    int minutes = FieldUtils.safeAdd(getMinutes(), seconds / DateTimeConstants.SECONDS_PER_MINUTE);\n    seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n    int hours = FieldUtils.safeAdd(getHours(), minutes / DateTimeConstants.MINUTES_PER_HOUR);\n    minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n    long daysAsMillis = (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    long weeksAsMillis = (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    // Compute the final millisecond value, making sure it is no larger than 1 day's worth\n    long millisSum = millis + (1000 * seconds) + (1000 * 60 * minutes) + (1000 * 60 * 60 * hours) + daysAsMillis;\n    if (weeksAsMillis >= 0) {\n        // add the number of weeks after days because it will overflow 1 day\n        millisSum += weeksAsMillis;\n    } else {\n        millisSum -= weeksAsMillis;\n    }\n\n    if (millisSum >= 0) {\n        daysAsMillis = (millisSum / DateTimeConstants.MILLIS_PER_DAY);\n        millis = (int) (millisSum - (daysAsMillis * DateTimeConstants.MILLIS_PER_DAY));\n    } else {\n        daysAsMillis = ((millisSum + 1) / DateTimeConstants.MILLIS_PER_DAY) - 1;\n        millis = (int) (millisSum - (daysAsMillis * DateTimeConstants.MILLIS_PER_DAY));\n    }\n\n    // Compute the standard period\n    Period result = new Period(\n            getYears(), getMonths(), FieldUtils.safeToInt(daysAsMillis / DateTimeConstants.MILLIS_PER_DAY),\n            getHours() % 24, getMinutes() % 60, seconds % 60, millis, ISOChronology.getInstanceUTC(), type);\n\n    // Normalize the result, handling overflow and underflow\n    int years = result.getYears();\n    int months = result.getMonths();\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..4e00ff41 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,53 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int millis = getMillis() % DateTimeConstants.MILLIS_PER_SECOND;\n+    int seconds = FieldUtils.safeAdd(getSeconds(), getMillis() / DateTimeConstants.MILLIS_PER_SECOND);\n+    int minutes = FieldUtils.safeAdd(getMinutes(), seconds / DateTimeConstants.SECONDS_PER_MINUTE);\n+    seconds = seconds % DateTimeConstants.SECONDS_PER_MINUTE;\n+    int hours = FieldUtils.safeAdd(getHours(), minutes / DateTimeConstants.MINUTES_PER_HOUR);\n+    minutes = minutes % DateTimeConstants.MINUTES_PER_HOUR;\n+    long daysAsMillis = (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    long weeksAsMillis = (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    // Compute the final millisecond value, making sure it is no larger than 1 day's worth\n+    long millisSum = millis + (1000 * seconds) + (1000 * 60 * minutes) + (1000 * 60 * 60 * hours) + daysAsMillis;\n+    if (weeksAsMillis >= 0) {\n+        // add the number of weeks after days because it will overflow 1 day\n+        millisSum += weeksAsMillis;\n+    } else {\n+        millisSum -= weeksAsMillis;\n+    }\n+\n+    if (millisSum >= 0) {\n+        daysAsMillis = (millisSum / DateTimeConstants.MILLIS_PER_DAY);\n+        millis = (int) (millisSum - (daysAsMillis * DateTimeConstants.MILLIS_PER_DAY));\n+    } else {\n+        daysAsMillis = ((millisSum + 1) / DateTimeConstants.MILLIS_PER_DAY) - 1;\n+        millis = (int) (millisSum - (daysAsMillis * DateTimeConstants.MILLIS_PER_DAY));\n+    }\n+\n+    // Compute the standard period\n+    Period result = new Period(\n+            getYears(), getMonths(), FieldUtils.safeToInt(daysAsMillis / DateTimeConstants.MILLIS_PER_DAY),\n+            getHours() % 24, getMinutes() % 60, seconds % 60, millis, ISOChronology.getInstanceUTC(), type);\n+\n+    // Normalize the result, handling overflow and underflow\n+    int years = result.getYears();\n+    int months = result.getMonths();\n+    if (years != 0 || months != 0) {\n+        years = FieldUtils.safeAdd(years, months / 12);\n+        months = months % 12;\n+        if (years != 0) {\n+            result = result.withYears(years);\n+        }\n+        if (months != 0) {\n+            result = result.withMonths(months);\n         }\n-        return result;\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,ISOChronology,PeriodType)",
    "test_result": "ERROR"
}