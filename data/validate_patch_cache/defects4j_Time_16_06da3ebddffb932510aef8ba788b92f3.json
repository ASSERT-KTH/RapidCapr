{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        // Get the chrono from the instant\n        Chronology chrono = instant.getChronology();\n        \n        // Get previous instant snapshot info. We'll need this later to\n        // check if any parsed fields actually changed the instant.\n        long oldInstantMillis = instant.getMillis();\n        long instantLocal = oldInstantMillis + chrono.getZone().getOffset(oldInstantMillis);\n        \n        // Select the chronology to be used\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            // Update instant to be a new datetime based on parsed fields\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            \n            // If parsed fields actually changed the instant snapshot, we need to\n            // recompute some fields so they reflect the latest millis value.\n            if ( instant.getMillis() != oldInstantMillis) {\n                // Optimize to keep the chrono if it's still OK to use\n                chrono = (chrono != instant.getChronology()) ? instant.getChronology() : chrono;\n                oldInstantMillis = instant.getMillis();\n                instantLocal = oldInstantMillis + chrono.getZone().getOffset(oldInstantMillis);\n                bucket = new DateTimeParserBucket(\n                        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n                parser.parseInto(bucket, text, newPos);\n                // Reset instant millis to fully accommodate stored fields.\n                instant.setMillis(bucket.computeMillis(true, text));\n            }\n\n            // Update timezone and restore the selected chrono if need be\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                if (!chrono.equals(chrono.withZone(parsedZone))) {\n                    chrono = chrono.withZone(parsedZone);\n                    instant.setChronology(chrono);\n                }\n            } else if (bucket.getZone() != null) {\n                if (!chrono.equals(chrono.withZone(bucket.getZone()))) {\n                    chrono = chrono.withZone(bucket.getZone());\n                    instant.setChronology(chrono);\n                }\n            } else if (!chrono.equals(chrono.withZone(DateTimeZone.UTC))) {\n                chrono = chrono.withZone(DateTimeZone.UTC);\n                instant.setChronology(chrono);\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..8bb6cb69 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,26 +699,59 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n+        // Get the chrono from the instant\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        \n+        // Get previous instant snapshot info. We'll need this later to\n+        // check if any parsed fields actually changed the instant.\n+        long oldInstantMillis = instant.getMillis();\n+        long instantLocal = oldInstantMillis + chrono.getZone().getOffset(oldInstantMillis);\n+        \n+        // Select the chronology to be used\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (newPos >= 0) {\n+            // Update instant to be a new datetime based on parsed fields\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            \n+            // If parsed fields actually changed the instant snapshot, we need to\n+            // recompute some fields so they reflect the latest millis value.\n+            if ( instant.getMillis() != oldInstantMillis) {\n+                // Optimize to keep the chrono if it's still OK to use\n+                chrono = (chrono != instant.getChronology()) ? instant.getChronology() : chrono;\n+                oldInstantMillis = instant.getMillis();\n+                instantLocal = oldInstantMillis + chrono.getZone().getOffset(oldInstantMillis);\n+                bucket = new DateTimeParserBucket(\n+                        instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+                parser.parseInto(bucket, text, newPos);\n+                // Reset instant millis to fully accommodate stored fields.\n+                instant.setMillis(bucket.computeMillis(true, text));\n+            }\n+\n+            // Update timezone and restore the selected chrono if need be\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                if (!chrono.equals(chrono.withZone(parsedZone))) {\n+                    chrono = chrono.withZone(parsedZone);\n+                    instant.setChronology(chrono);\n+                }\n+            } else if (bucket.getZone() != null) {\n+                if (!chrono.equals(chrono.withZone(bucket.getZone()))) {\n+                    chrono = chrono.withZone(bucket.getZone());\n+                    instant.setChronology(chrono);\n+                }\n+            } else if (!chrono.equals(chrono.withZone(DateTimeZone.UTC))) {\n+                chrono = chrono.withZone(DateTimeZone.UTC);\n+                instant.setChronology(chrono);\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}