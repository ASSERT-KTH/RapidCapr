{
    "patch": "if (cfa != null && NodeUtil.isFunctionWithReturnType(fromNode)) {\n  List<ControlFlowGraph.Branch> cfgNodeBranches =\n          ControlFlowGraphUtil.getBranches(cfg.getRawGraph(), cfgNode);\n\n  if (cfgNodeBranches.contains(ControlFlowGraph.Branch.IMPLICIT_RETURN)) {\n    return null;\n  }\n  \n  boolean hasExplicitReturnBranch;\n  if (cfgNodeBranches.size() == 1 &&\n          cfgNodeBranches.get(0) == ControlFlowGraph.Branch.UNCOND) {\n    // Single return statement in function.\n    hasExplicitReturnBranch = true;\n  } else {\n    hasExplicitReturnBranch = false;\n    for (ControlFlowGraph.Branch branch : cfgNodeBranches) {\n      if (branch == ControlFlowGraph.Branch.ON_EX) {\n        hasExplicitReturnBranch = true;\n        break;\n      }\n    }\n  }\n  if (hasExplicitReturnBranch) {\n    return null;\n  } else {\n    return fromNode;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f24cd231 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,34 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null && NodeUtil.isFunctionWithReturnType(fromNode)) {\n+  List<ControlFlowGraph.Branch> cfgNodeBranches =\n+          ControlFlowGraphUtil.getBranches(cfg.getRawGraph(), cfgNode);\n+\n+  if (cfgNodeBranches.contains(ControlFlowGraph.Branch.IMPLICIT_RETURN)) {\n+    return null;\n+  }\n+  \n+  boolean hasExplicitReturnBranch;\n+  if (cfgNodeBranches.size() == 1 &&\n+          cfgNodeBranches.get(0) == ControlFlowGraph.Branch.UNCOND) {\n+    // Single return statement in function.\n+    hasExplicitReturnBranch = true;\n+  } else {\n+    hasExplicitReturnBranch = false;\n+    for (ControlFlowGraph.Branch branch : cfgNodeBranches) {\n+      if (branch == ControlFlowGraph.Branch.ON_EX) {\n+        hasExplicitReturnBranch = true;\n+        break;\n+      }\n+    }\n+  }\n+  if (hasExplicitReturnBranch) {\n+    return null;\n+  } else {\n+    return fromNode;\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}