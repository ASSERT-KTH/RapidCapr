{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (n == null) {\n      return false;\n    }\n    if (n.isString()) {\n      return true;\n    }\n    if (recurse) {\n      return allResultsMatch(n, new Predicate<Node>() {\n        @Override\n        public boolean apply(Node arg) {\n          JSType type = arg.inferType();\n          if (type == null) {\n            return true;\n          }\n          return type.isSubtypeOfString();\n        }\n      });\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..ed26d086 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1413,8 +1413,23 @@ public final class NodeUtil {\n   }\n \n   static boolean mayBeString(Node n, boolean recurse) {\n+    if (n == null) {\n+      return false;\n+    }\n+    if (n.isString()) {\n+      return true;\n+    }\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return allResultsMatch(n, new Predicate<Node>() {\n+        @Override\n+        public boolean apply(Node arg) {\n+          JSType type = arg.inferType();\n+          if (type == null) {\n+            return true;\n+          }\n+          return type.isSubtypeOfString();\n+        }\n+      });\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}