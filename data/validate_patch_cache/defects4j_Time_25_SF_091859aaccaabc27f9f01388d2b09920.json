{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at the specified local time\n    int offsetLocal = getOffset(instantLocal);\n\n    // Get the next transition time (in UTC) after the specified local time\n    long nextTransition = nextTransition(instantLocal);\n\n    // If the next transition time is after the specified local time\n    if (instantLocal + offsetLocal < nextTransition) {\n        // Get the offset at the next transition time\n        int offsetTransition = getOffset(nextTransition);\n        // If the local time and the transition time have different offset values\n        if (offsetLocal != offsetTransition) {\n            // Return the local time offset\n            return offsetLocal;\n        } else {\n            // Return the offset at the transition time\n            return offsetTransition;\n        }\n    } else {\n        // The specified local time is after the next transition time\n        // Get the previous transition time (in UTC) before the specified local time\n        long prevTransition = previousTransition(instantLocal);\n\n        // Get the offset at the previous transition time\n        int offsetPrevTransition = getOffset(prevTransition);\n\n        // If the local time and the previous transition time have the same offset\n        if (offsetLocal == offsetPrevTransition) {\n            // Return the local time offset\n            return offsetLocal;\n        } else {\n            // Get the next transition time after the specified local time\n            nextTransition = nextTransition(prevTransition);\n            // Get the offset at the next transition time\n            int offsetNextTransition = getOffset(nextTransition);\n\n            // If the local time offset is greater than or equal to the offset at the next transition time\n            if (offsetLocal >= offsetNextTransition) {\n                // Return the offset at the next transition time\n                return offsetNextTransition;\n            } else {\n                // Return the offset at the previous transition time\n                return offsetPrevTransition;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..afc8f8ae 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,54 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at the specified local time\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // Get the next transition time (in UTC) after the specified local time\n+    long nextTransition = nextTransition(instantLocal);\n+\n+    // If the next transition time is after the specified local time\n+    if (instantLocal + offsetLocal < nextTransition) {\n+        // Get the offset at the next transition time\n+        int offsetTransition = getOffset(nextTransition);\n+        // If the local time and the transition time have different offset values\n+        if (offsetLocal != offsetTransition) {\n+            // Return the local time offset\n+            return offsetLocal;\n+        } else {\n+            // Return the offset at the transition time\n+            return offsetTransition;\n+        }\n+    } else {\n+        // The specified local time is after the next transition time\n+        // Get the previous transition time (in UTC) before the specified local time\n+        long prevTransition = previousTransition(instantLocal);\n+\n+        // Get the offset at the previous transition time\n+        int offsetPrevTransition = getOffset(prevTransition);\n+\n+        // If the local time and the previous transition time have the same offset\n+        if (offsetLocal == offsetPrevTransition) {\n+            // Return the local time offset\n+            return offsetLocal;\n+        } else {\n+            // Get the next transition time after the specified local time\n+            nextTransition = nextTransition(prevTransition);\n+            // Get the offset at the next transition time\n+            int offsetNextTransition = getOffset(nextTransition);\n+\n+            // If the local time offset is greater than or equal to the offset at the next transition time\n+            if (offsetLocal >= offsetNextTransition) {\n+                // Return the offset at the next transition time\n+                return offsetNextTransition;\n+            } else {\n+                // Return the offset at the previous transition time\n+                return offsetPrevTransition;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}