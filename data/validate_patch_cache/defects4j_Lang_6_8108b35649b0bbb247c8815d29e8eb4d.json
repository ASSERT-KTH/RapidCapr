{
    "patch": "                CharSequence inputSequence = input.subSequence(pos, pos + Character.charCount(codePoint));\n                CharSequence substitution = translate(inputSequence);\n                if (substitution != null) {\n                    out.write(substitution.toString());\n                } else {\n                    out.write(inputSequence.toString());\n                }\n                pos += inputSequence.length();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..17398b46 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,14 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                CharSequence inputSequence = input.subSequence(pos, pos + Character.charCount(codePoint));\n+                CharSequence substitution = translate(inputSequence);\n+                if (substitution != null) {\n+                    out.write(substitution.toString());\n+                } else {\n+                    out.write(inputSequence.toString());\n+                }\n+                pos += inputSequence.length();\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}