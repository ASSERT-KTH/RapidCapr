{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          if (block.getBackEdges().size() != 1) {\n            return false;\n          }\n          BasicBlock pred = block.getPredecessors().get(0);\n          if (!block.getBackEdges().contains(pred.getIndex())) {\n            return false;\n          }\n          if (!pred.isOneOfTwoSuccessors()) {\n            return false;\n          }\n          if (pred.getSecondChild().isLoopHeader()) {\n            return false;\n          }\n          if (!block.isOneOfTwoSuccessors()) {\n            return false;\n          }\n          return true;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c3b36be4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          if (block.getBackEdges().size() != 1) {\n+            return false;\n+          }\n+          BasicBlock pred = block.getPredecessors().get(0);\n+          if (!block.getBackEdges().contains(pred.getIndex())) {\n+            return false;\n+          }\n+          if (!pred.isOneOfTwoSuccessors()) {\n+            return false;\n+          }\n+          if (pred.getSecondChild().isLoopHeader()) {\n+            return false;\n+          }\n+          if (!block.isOneOfTwoSuccessors()) {\n+            return false;\n+          }\n+          return true;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}