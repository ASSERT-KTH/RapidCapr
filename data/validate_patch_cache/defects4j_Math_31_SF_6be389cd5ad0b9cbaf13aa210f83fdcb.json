{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    final double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    // use the value of small as epsilon criteria for zero checks\n    if (Precision.equals(hPrev, 0.0, small)) {\n        hPrev = small;\n    }\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    double deltaN = 1.0;\n    double deltaNm1 = 1.0;\n    double deltaNm2 = 1.0;\n    double a = getA(1, x);\n    double b = getB(1, x);\n    double cN = a * hPrev + b;\n    double q2 = a * q1 + dPrev;\n\n    while (n < maxIterations) {\n        // Update the numerators and denominators\n        a = getA(n, x);\n        b = getB(n, x);\n        deltaNm2 = deltaNm1;\n        deltaNm1 = deltaN;\n        deltaN = a * deltaNm1 + b * deltaNm2;\n\n        // Check for convergence\n        if ((n > 2) && (FastMath.abs(deltaN - deltaNm1) >= 0.5 * FastMath.abs(deltaNm1 - deltaNm2))) {\n            // Use Brent-Dekker algorithm for convergence\n            double r = deltaN / deltaNm1;\n            double d1 = 1.0 / (1.0 - r);\n            double d2 = 1.0 / r;\n            double c1 = cPrev * d1;\n            double c2 = cN * d2;\n            double hInf = c2 * deltaNm1 / (deltaN - deltaNm1);\n            double hSup = c1 * deltaNm1 / (deltaN - deltaNm1);\n            double hMid = 0.5 * (hInf + hSup);\n            if (hMid <= hInf || hMid >= hSup || Double.isNaN(hMid)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                               x);\n            }\n            hN = hMid;\n            break;\n        }\n\n        cPrev = cN;\n        cN = a * cPrev + b * p0;\n        q2 = a * q1 + b * dPrev;\n\n        dPrev = q1;\n        q1 = q2;\n        p0 = hPrev;\n        hPrev = cN;\n\n        n++;\n    }\n\n    if (n >= maxIterations) {\n        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n                                            maxIterations, x);\n    }\n\n    return hN;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..5536872b9 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,75 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    final double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n-\n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+    // use the value of small as epsilon criteria for zero checks\n+    if (Precision.equals(hPrev, 0.0, small)) {\n+        hPrev = small;\n+    }\n \n-            if (Double.isInfinite(hN)) {\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n+\n+    double deltaN = 1.0;\n+    double deltaNm1 = 1.0;\n+    double deltaNm2 = 1.0;\n+    double a = getA(1, x);\n+    double b = getB(1, x);\n+    double cN = a * hPrev + b;\n+    double q2 = a * q1 + dPrev;\n+\n+    while (n < maxIterations) {\n+        // Update the numerators and denominators\n+        a = getA(n, x);\n+        b = getB(n, x);\n+        deltaNm2 = deltaNm1;\n+        deltaNm1 = deltaN;\n+        deltaN = a * deltaNm1 + b * deltaNm2;\n+\n+        // Check for convergence\n+        if ((n > 2) && (FastMath.abs(deltaN - deltaNm1) >= 0.5 * FastMath.abs(deltaNm1 - deltaNm2))) {\n+            // Use Brent-Dekker algorithm for convergence\n+            double r = deltaN / deltaNm1;\n+            double d1 = 1.0 / (1.0 - r);\n+            double d2 = 1.0 / r;\n+            double c1 = cPrev * d1;\n+            double c2 = cN * d2;\n+            double hInf = c2 * deltaNm1 / (deltaN - deltaNm1);\n+            double hSup = c1 * deltaNm1 / (deltaN - deltaNm1);\n+            double hMid = 0.5 * (hInf + hSup);\n+            if (hMid <= hInf || hMid >= hSup || Double.isNaN(hMid)) {\n                 throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n                                                x);\n             }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n+            hN = hMid;\n+            break;\n+        }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n-            }\n+        cPrev = cN;\n+        cN = a * cPrev + b * p0;\n+        q2 = a * q1 + b * dPrev;\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n-        }\n+        dPrev = q1;\n+        q1 = q2;\n+        p0 = hPrev;\n+        hPrev = cN;\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n-        }\n+        n++;\n+    }\n \n-        return hN;\n+    if (n >= maxIterations) {\n+        throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n+                                            maxIterations, x);\n     }\n \n+    return hN;\n+}\n+\n }",
    "result_reason": "org.apache.commons.math3.exception.ConvergenceException: illegal state: Continued fraction convergents diverged to +/- infinity for value 0.1",
    "test_result": "FAIL"
}