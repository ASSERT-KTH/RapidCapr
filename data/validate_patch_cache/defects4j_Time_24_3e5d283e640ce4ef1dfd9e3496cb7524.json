{
    "patch": "            if (millis < iMillis ||\n                    (millis > iMillis && savedFields[count - 1].isLeap())) {\n                int index = findClosest(savedFields, count, millis);\n                if (index < count && savedFields[index].isLeap() &&\n                        (index + 1 >= count || !savedFields[index + 1].isLeap())) {\n                    // We are during a leap second.\n                    millis = savedFields[index].set(millis, resetFields);\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bc0dd3b7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (millis < iMillis ||\n+                    (millis > iMillis && savedFields[count - 1].isLeap())) {\n+                int index = findClosest(savedFields, count, millis);\n+                if (index < count && savedFields[index].isLeap() &&\n+                        (index + 1 >= count || !savedFields[index + 1].isLeap())) {\n+                    // We are during a leap second.\n+                    millis = savedFields[index].set(millis, resetFields);\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}