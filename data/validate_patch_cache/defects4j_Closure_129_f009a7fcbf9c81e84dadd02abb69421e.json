{
    "patch": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n\n  // Keep track of of the \"this\" context of a call.  A call without an\n  // explicit \"this\" is a free call.\n  Node callee = n.getFirstChild();\n  boolean isFreeCall = !(NodeUtil.isGet(callee) &&\n      NodeUtil.isNullOrUndefined(callee.getFirstChild()));\n  if (isFreeCall) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n\n  // Keep track of the context in which eval is called. It is important\n  // to distinguish between \"(0, eval)()\" and \"eval()\".\n  if (callee.isName() &&\n      \"eval\".equals(callee.getString())) {\n    n.getFirstChild().putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..21d1e583 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,25 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+private void annotateCalls(Node n) {\n+  Preconditions.checkState(n.isCall());\n+\n+  // Keep track of of the \"this\" context of a call.  A call without an\n+  // explicit \"this\" is a free call.\n+  Node callee = n.getFirstChild();\n+  boolean isFreeCall = !(NodeUtil.isGet(callee) &&\n+      NodeUtil.isNullOrUndefined(callee.getFirstChild()));\n+  if (isFreeCall) {\n+    n.putBooleanProp(Node.FREE_CALL, true);\n+  }\n+\n+  // Keep track of the context in which eval is called. It is important\n+  // to distinguish between \"(0, eval)()\" and \"eval()\".\n+  if (callee.isName() &&\n+      \"eval\".equals(callee.getString())) {\n+    n.getFirstChild().putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}