{
    "patch": "    boolean areNodesEqual(Node n1, Node n2) {\n      if (n1.getToken() != n2.getToken()) {\n        return false;\n      }\n      if (n1.isName() || n1.isString()) {\n        return n1.getString().equals(n2.getString());\n      }\n      if (NodeUtil.isLiteralValue(n1, true) ||\n          NodeUtil.isLiteralValue(n2, true)) {\n        return NodeUtil.identicalValue(n1, n2);\n      }\n      if (n1.isComma()) {\n        NodeList<Node> children1 = n1.getProp(Node.FREEFORM_PROP);\n        NodeList<Node> children2 = n2.getProp(Node.FREEFORM_PROP);\n        int num = children1.getLength();\n        if (children2.getLength() != num) {\n          return false;\n        }\n        for (int i = 0; i < num; i++) {\n          if (!areNodesEqual(children1.get(i), children2.get(i))) {\n            return false;\n          }\n        }\n        return true;\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..553fb4eb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,33 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+    boolean areNodesEqual(Node n1, Node n2) {\n+      if (n1.getToken() != n2.getToken()) {\n+        return false;\n+      }\n+      if (n1.isName() || n1.isString()) {\n+        return n1.getString().equals(n2.getString());\n+      }\n+      if (NodeUtil.isLiteralValue(n1, true) ||\n+          NodeUtil.isLiteralValue(n2, true)) {\n+        return NodeUtil.identicalValue(n1, n2);\n+      }\n+      if (n1.isComma()) {\n+        NodeList<Node> children1 = n1.getProp(Node.FREEFORM_PROP);\n+        NodeList<Node> children2 = n2.getProp(Node.FREEFORM_PROP);\n+        int num = children1.getLength();\n+        if (children2.getLength() != num) {\n+          return false;\n+        }\n+        for (int i = 0; i < num; i++) {\n+          if (!areNodesEqual(children1.get(i), children2.get(i))) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      }\n+      return true;\n+    }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}