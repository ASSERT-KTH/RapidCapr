{
    "patch": "int idx = 1;\nwhile (count < index) {\n    count += idx;\n    ++idx;\n}\n--idx;\nint remaining = index - count;\nindices[last] = idx + remaining;\nfor (int i = last - 1; i >= 0; --i) {\n    idx = indices[i + 1];\n    int offset = size[i + 1] - idx;\n    if (remaining > offset * (idx - indices[0])) {\n        count += offset * (idx - indices[0]);\n        indices[i] = size[i] - 1;\n    } else {\n        indices[i] = indices[0] + remaining / offset;\n        remaining = remaining % offset;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..7ae5fe391 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,25 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int idx = 1;\n+while (count < index) {\n+    count += idx;\n+    ++idx;\n+}\n+--idx;\n+int remaining = index - count;\n+indices[last] = idx + remaining;\n+for (int i = last - 1; i >= 0; --i) {\n+    idx = indices[i + 1];\n+    int offset = size[i + 1] - idx;\n+    if (remaining > offset * (idx - indices[0])) {\n+        count += offset * (idx - indices[0]);\n+        indices[i] = size[i] - 1;\n+    } else {\n+        indices[i] = indices[0] + remaining / offset;\n+        remaining = remaining % offset;\n+    }\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [2][2] expected:<2> but was:<1>",
    "test_result": "FAIL"
}