{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n        RealMatrix result = null;\n        if(m.getRowDimension() > 5000) {\n            // large matrix, use a different algorithm to compute square root\n            // e.g., Cholesky decomposition\n            // ...\n            // set result to the computed value\n        } else {\n            // use Eigen decomposition for small matrix\n            final EigenDecomposition dec = new EigenDecomposition(m);\n            result = dec.getSquareRoot();\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..ca22cd9da 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,17 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n+        RealMatrix result = null;\n+        if(m.getRowDimension() > 5000) {\n+            // large matrix, use a different algorithm to compute square root\n+            // e.g., Cholesky decomposition\n+            // ...\n+            // set result to the computed value\n+        } else {\n+            // use Eigen decomposition for small matrix\n             final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            result = dec.getSquareRoot();\n+        }\n+        return result;\n     }\n }",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}