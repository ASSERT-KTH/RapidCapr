{
    "patch": "  @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n    Node node = newNode(Token.FUNCTION);\n\n    Name functionName = functionNode.getFunctionName();\n    if (functionName == null) {\n      functionName = new Name();\n      functionName.setIdentifier(\"\");\n    }\n    Node newNode = transform(functionName);\n    node.addChildToBack(newNode);\n\n    Node lp = newNode(Token.LP);\n\n    Name fnName = functionNode.getFunctionName();\n    if (fnName != null) {\n      lp.setLineno(fnName.getLineno());\n    }\n    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n    lp.setCharno(position2charno(lparenCharno));\n\n    for (int i = 0; i < functionNode.getParamCount(); i++) {\n      AstNode param = functionNode.getParamOrVarName(i);\n      if (param instanceof Name) {\n        lp.addChildToBack(transform(param));\n      }\n    }\n\n    node.addChildToBack(lp);\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    return node;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..2321fce0 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,41 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+  @Override\n+  Node processFunctionNode(FunctionNode functionNode) {\n+    Node node = newNode(Token.FUNCTION);\n+\n+    Name functionName = functionNode.getFunctionName();\n+    if (functionName == null) {\n+      functionName = new Name();\n+      functionName.setIdentifier(\"\");\n+    }\n+    Node newNode = transform(functionName);\n+    node.addChildToBack(newNode);\n+\n+    Node lp = newNode(Token.LP);\n+\n+    Name fnName = functionNode.getFunctionName();\n+    if (fnName != null) {\n+      lp.setLineno(fnName.getLineno());\n+    }\n+    int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+    lp.setCharno(position2charno(lparenCharno));\n+\n+    for (int i = 0; i < functionNode.getParamCount(); i++) {\n+      AstNode param = functionNode.getParamOrVarName(i);\n+      if (param instanceof Name) {\n+        lp.addChildToBack(transform(param));\n+      }\n+    }\n+\n+    node.addChildToBack(lp);\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+\n+    return node;\n+  }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}