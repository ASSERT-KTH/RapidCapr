{
    "patch": "void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (negativeZero) {\n      add(\"-0\");\n      return;\n    }\n\n    if ((long) x == x) {\n      long value = (long) x;\n      if (value >= Integer.MIN_VALUE && value <= Integer.MAX_VALUE) {\n        add(Integer.toString((int) value));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(Double.toString(x));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..85e55435 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,27 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+void addNumber(double x) {\n+    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n+    // x--4 (which is a syntax error).\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    if (negativeZero) {\n+      add(\"-0\");\n+      return;\n+    }\n+\n+    if ((long) x == x) {\n+      long value = (long) x;\n+      if (value >= Integer.MIN_VALUE && value <= Integer.MAX_VALUE) {\n+        add(Integer.toString((int) value));\n+      } else {\n+        add(Long.toString(value));\n+      }\n+    } else {\n+      add(Double.toString(x));\n+    }\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}