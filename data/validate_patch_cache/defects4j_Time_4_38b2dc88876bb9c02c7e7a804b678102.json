{
    "patch": "    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        int len = iTypes.length;\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[len + 1];\n            int[] newValues = new int[len + 1];\n            \n            // find correct insertion point to keep largest-smallest order\n            int i;\n            for (i = 0; i < len; i++) {\n                if (fieldType.compareTo(iTypes[i]) < 0) {\n                    break;\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, len - i);\n            System.arraycopy(iValues, i, newValues, i + 1, len - i);\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            iChronology.validate(newPartial, newValues, newTypes);\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..a42d88f6 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -428,41 +428,28 @@ public final class Partial\n             throw new IllegalArgumentException(\"The field type must not be null\");\n         }\n         int index = indexOf(fieldType);\n+        int len = iTypes.length;\n         if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n+            DateTimeFieldType[] newTypes = new DateTimeFieldType[len + 1];\n+            int[] newValues = new int[len + 1];\n             \n             // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+            int i;\n+            for (i = 0; i < len; i++) {\n+                if (fieldType.compareTo(iTypes[i]) < 0) {\n+                    break;\n                 }\n             }\n             System.arraycopy(iTypes, 0, newTypes, 0, i);\n             System.arraycopy(iValues, 0, newValues, 0, i);\n             newTypes[i] = fieldType;\n             newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n+            System.arraycopy(iTypes, i, newTypes, i + 1, len - i);\n+            System.arraycopy(iValues, i, newValues, i + 1, len - i);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n             Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n+            iChronology.validate(newPartial, newValues, newTypes);\n             return newPartial;\n         }\n         if (value == getValue(index)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}