{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  // Notice that removing unreferenced function args breaks\n  // Function.prototype.length. In advanced mode, we don't really care\n  // about this: we consider \"length\" the equivalent of reflecting on\n  // the function's lexical source.\n  //\n  // Rather than create a new option for this, we assume that if the user\n  // is removing globals, then it's OK to remove unused function args.\n  //\n  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n  Node function = fnScope.getRootNode();\n\n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(function);\n\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      Set<Var> referencedVars = getReferencedVars(fnScope);\n      if (!referencedVars.contains(var)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}\n\nprivate Set<Var> getReferencedVars(Scope scope) {\n  final Set<Var> vars = new HashSet<>();\n  NodeTraversal.traverse(compiler, scope.getRootNode(), new NodeTraversal.Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n.isName() || n.isGetProp() || n.isGetElem()) {\n        Var var = t.getScope().getVar(n.getString());\n        if (var != null) {\n          vars.add(var);\n        }\n      }\n    }\n  });\n  return vars;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0ad82602 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,67 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  // Notice that removing unreferenced function args breaks\n+  // Function.prototype.length. In advanced mode, we don't really care\n+  // about this: we consider \"length\" the equivalent of reflecting on\n+  // the function's lexical source.\n+  //\n+  // Rather than create a new option for this, we assume that if the user\n+  // is removing globals, then it's OK to remove unused function args.\n+  //\n+  // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+  Node function = fnScope.getRootNode();\n+\n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(function);\n+\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      Set<Var> referencedVars = getReferencedVars(fnScope);\n+      if (!referencedVars.contains(var)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n+\n+private Set<Var> getReferencedVars(Scope scope) {\n+  final Set<Var> vars = new HashSet<>();\n+  NodeTraversal.traverse(compiler, scope.getRootNode(), new NodeTraversal.Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+      return true;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n.isName() || n.isGetProp() || n.isGetElem()) {\n+        Var var = t.getScope().getVar(n.getString());\n+        if (var != null) {\n+          vars.add(var);\n+        }\n+      }\n+    }\n+  });\n+  return vars;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}