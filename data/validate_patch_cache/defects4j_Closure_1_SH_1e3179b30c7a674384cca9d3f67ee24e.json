{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Step 1: Mark unreferenced parameters with a sentinel value.\n    int paramsToRemove = 0;\n    for (Node param : argList.children()) {\n      String paramName = param.getString();\n      if (!referenced.contains(fnScope.getVar(paramName))) {\n        // Set up a new unique sentinel name for the parameter to remove it later.\n        param.setString(REMOVE_PARAM_MARKER + paramsToRemove++ + \"_\" + paramName);\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (paramsToRemove == 0) {\n      return;\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced parameters off the end of the function declaration.\n      while (paramsToRemove > 0) {\n        Node lastArg = getLastFunctionArgument(argList);\n        if (lastArg == null) {\n          break;\n        }\n\n        if (lastArg.getString().startsWith(REMOVE_PARAM_MARKER)) {\n          paramsToRemove--;\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      // We don't remove unused parameters in the case where we're\n      // modifying callers because we need to keep the parameter lists\n      // of the call sites in sync with the function definition.\n      paramsToRemove -= callSiteOptimizer.optimize(fnScope, referenced);\n      while (paramsToRemove > 0) {\n        Node lastArg = getLastFunctionArgument(argList);\n        if (lastArg == null) {\n          break;\n        }\n\n        if (lastArg.getString().startsWith(REMOVE_PARAM_MARKER)) {\n          paramsToRemove--;\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..1fb0240d 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,69 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Step 1: Mark unreferenced parameters with a sentinel value.\n+    int paramsToRemove = 0;\n+    for (Node param : argList.children()) {\n+      String paramName = param.getString();\n+      if (!referenced.contains(fnScope.getVar(paramName))) {\n+        // Set up a new unique sentinel name for the parameter to remove it later.\n+        param.setString(REMOVE_PARAM_MARKER + paramsToRemove++ + \"_\" + paramName);\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (paramsToRemove == 0) {\n+      return;\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced parameters off the end of the function declaration.\n+      while (paramsToRemove > 0) {\n+        Node lastArg = getLastFunctionArgument(argList);\n+        if (lastArg == null) {\n+          break;\n+        }\n+\n+        if (lastArg.getString().startsWith(REMOVE_PARAM_MARKER)) {\n+          paramsToRemove--;\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      // We don't remove unused parameters in the case where we're\n+      // modifying callers because we need to keep the parameter lists\n+      // of the call sites in sync with the function definition.\n+      paramsToRemove -= callSiteOptimizer.optimize(fnScope, referenced);\n+      while (paramsToRemove > 0) {\n+        Node lastArg = getLastFunctionArgument(argList);\n+        if (lastArg == null) {\n+          break;\n+        }\n+\n+        if (lastArg.getString().startsWith(REMOVE_PARAM_MARKER)) {\n+          paramsToRemove--;\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}