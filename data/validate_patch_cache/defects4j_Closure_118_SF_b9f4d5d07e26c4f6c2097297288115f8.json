{
    "patch": "  private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild();\n        child != null;\n        child = child.getNext()) {\n      // Maybe STRING, GET, SET\n\n      // We should never see a mix of numbers and strings.\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n\n      Property prop = getProperty(name);\n      RenamingResult renamingResult = processProperty(t, prop, type, null);\n      if (renamingResult.oldNameShouldBeObfuscated()) {\n        if (!prop.scheduleRenaming(child, renamingResult)) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..1005ac2c 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,19 +487,20 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n+  private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild();\n+        child != null;\n+        child = child.getNext()) {\n+      // Maybe STRING, GET, SET\n+\n+      // We should never see a mix of numbers and strings.\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      Property prop = getProperty(name);\n+      RenamingResult renamingResult = processProperty(t, prop, type, null);\n+      if (renamingResult.oldNameShouldBeObfuscated()) {\n+        if (!prop.scheduleRenaming(child, renamingResult)) {\n           // TODO(user): It doesn't look like the user can do much in this\n           // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {\n@@ -511,6 +512,7 @@ class DisambiguateProperties<T> implements CompilerPass {\n         }\n       }\n     }\n+  }\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}