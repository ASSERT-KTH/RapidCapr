{
    "patch": "import com.google.javascript.jscomp.NodeUtil;\n\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION && NodeUtil.isStatement(n)) {\n      // Don't traverse functions that are constructors or have the @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null\n          && (jsDoc.isConstructor()\n              || jsDoc.isInterface()\n              || jsDoc.isOverride()\n              || jsDoc.hasThisType())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally be able to have a @this annotation\n      // associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK\n            || pType == Token.SCRIPT\n            // We consider labelled statements as being in the scope of their parent block, even\n            // though they are technically not. This is because an object literal inside a block is\n            // parsed as a labelled statement with an object literal as its expression.\n            || pType == Token.LABELLED_STATEMENT\n            || (pType == Token.FOR && parent.getFirstChild() != n)\n            || pType == Token.NAME\n            || pType == Token.ASSIGN\n            || pType == Token.OBJECTLIT\n            || pType == Token.CATCH\n            // Object literal keys or values.\n            || pType == Token.STRING\n            || pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)\n          && (parent.getType() == Token.GETPROP\n              && parent.getLastChild().getString().equals(\"prototype\"))) {\n        return false;\n      }\n\n      // Don't traverse inner anonymous function expressions\n      return !(NodeUtil.isFunctionExpression(n) && !NodeUtil.isStatementBlock(parent));\n    }\n\n    if (NodeUtil.isNameDeclaration(n)) {\n      switch (NodeUtil.getBestJSDocInfo(n).getScope()) {\n        case FUNCTION:\n        case BLOCK:\n          // only traversing once in a function or nested block retains maximum context for dataflow\n          argIndex = 0;\n          return parent.hasOneChild();\n        case GLOBAL:\n        case FILEOVERVIEW:\n          // Declare all variables at the outer scope\n          return parent.getType() == Token.SCRIPT;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)\n            && (lhs.getType() == Token.GETPROP\n                && lhs.getLastChild().getString().equals(\"prototype\"))) {\n              return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..5570c3de 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,45 +79,72 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+import com.google.javascript.jscomp.NodeUtil;\n+\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() == Token.FUNCTION && NodeUtil.isStatement(n)) {\n+      // Don't traverse functions that are constructors or have the @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null\n+          && (jsDoc.isConstructor()\n+              || jsDoc.isInterface()\n+              || jsDoc.isOverride()\n+              || jsDoc.hasThisType())) {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n+      // Don't traverse functions unless they would normally be able to have a @this annotation\n+      // associated with them. e.g.,\n       // var a = function() { }; // or\n       // function a() {} // or\n       // a.x = function() {}; // or\n       // var a = {x: function() {}};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!(pType == Token.BLOCK\n+            || pType == Token.SCRIPT\n+            // We consider labelled statements as being in the scope of their parent block, even\n+            // though they are technically not. This is because an object literal inside a block is\n+            // parsed as a labelled statement with an object literal as its expression.\n+            || pType == Token.LABELLED_STATEMENT\n+            || (pType == Token.FOR && parent.getFirstChild() != n)\n+            || pType == Token.NAME\n+            || pType == Token.ASSIGN\n+            || pType == Token.OBJECTLIT\n+            || pType == Token.CATCH\n+            // Object literal keys or values.\n+            || pType == Token.STRING\n+            || pType == Token.NUMBER)) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)\n+          && (parent.getType() == Token.GETPROP\n+              && parent.getLastChild().getString().equals(\"prototype\"))) {\n+        return false;\n+      }\n+\n+      // Don't traverse inner anonymous function expressions\n+      return !(NodeUtil.isFunctionExpression(n) && !NodeUtil.isStatementBlock(parent));\n+    }\n+\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      switch (NodeUtil.getBestJSDocInfo(n).getScope()) {\n+        case FUNCTION:\n+        case BLOCK:\n+          // only traversing once in a function or nested block retains maximum context for dataflow\n+          argIndex = 0;\n+          return parent.hasOneChild();\n+        case GLOBAL:\n+        case FILEOVERVIEW:\n+          // Declare all variables at the outer scope\n+          return parent.getType() == Token.SCRIPT;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-\n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n@@ -128,16 +155,10 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+        if (NodeUtil.isGet(lhs)\n+            && (lhs.getType() == Token.GETPROP\n+                && lhs.getLastChild().getString().equals(\"prototype\"))) {\n+              return false;\n         }\n       }\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}