{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double basicValue = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n            if (restrictToNonNegative && basicValue < 0) {\n                coefficients[i] = 0;\n            } else {\n                coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n            }\n            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..c0314fafc 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -328,11 +328,12 @@ class SimplexTableau implements Serializable {\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+            double basicValue = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+            if (restrictToNonNegative && basicValue < 0) {\n+                coefficients[i] = 0;\n+            } else {\n+                coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n+            }\n             if (basicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}