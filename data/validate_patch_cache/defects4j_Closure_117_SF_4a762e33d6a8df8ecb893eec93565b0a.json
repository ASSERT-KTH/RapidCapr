{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !isObjectPropertyDefined(objectType, propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }\n\n  /**\n   * Helper function to check object properties.\n   */\n  private static boolean isObjectPropertyDefined(ObjectType objType, String propName) {\n    return objType.getOwnPropertyJSTypes().containsKey(propName)\n        || objType.getOwnPropertySymbols().contains(propName);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..bdd151e7 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -738,7 +738,7 @@ class TypeValidator {\n               objectType, propName);\n         } else {\n           // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+          while (objectType != null && !isObjectPropertyDefined(objectType, propName)) {\n             objectType = objectType.getImplicitPrototype();\n           }\n         }\n@@ -751,6 +751,7 @@ class TypeValidator {\n           return objectType.toString() + \".\" + propName;\n         }\n       }\n+\n     }\n \n     JSType type = getJSType(n);\n@@ -776,6 +777,14 @@ class TypeValidator {\n     }\n   }\n \n+  /**\n+   * Helper function to check object properties.\n+   */\n+  private static boolean isObjectPropertyDefined(ObjectType objType, String propName) {\n+    return objType.getOwnPropertyJSTypes().containsKey(propName)\n+        || objType.getOwnPropertySymbols().contains(propName);\n+  }\n+\n   /**\n    * This method gets the JSType from the Node argument and verifies that it is\n    * present.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}