{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    int ordinal = 0;\n    \n    // Skip the function name\n    if (arguments.hasNext()) {\n      arguments.next();\n    }\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n\n    while (parameters.hasNext() && arguments.hasNext()) {\n      Node parameter = parameters.next();\n      Node argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    while (arguments.hasNext()) {\n      ordinal++;\n      Node argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), null, call, ordinal);\n    }\n\n    if (numArgs < minArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs), \"\");\n    } else if (numArgs > maxArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), \"\", String.valueOf(maxArgs));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..0a8f93d6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1399,18 +1399,18 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    int ordinal = 0;\n+    \n+    // Skip the function name\n+    if (arguments.hasNext()) {\n+      arguments.next();\n+    }\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+\n+    while (parameters.hasNext() && arguments.hasNext()) {\n+      Node parameter = parameters.next();\n+      Node argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n@@ -1420,12 +1420,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+\n+    while (arguments.hasNext()) {\n+      ordinal++;\n+      Node argument = arguments.next();\n+      validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), null, call, ordinal);\n+    }\n+\n+    if (numArgs < minArgs) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs), \"\");\n+    } else if (numArgs > maxArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), \"\", String.valueOf(maxArgs));\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1> but was:<0>",
    "test_result": "FAIL"
}