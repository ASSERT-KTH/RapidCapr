{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int instantMonth = 0;\n        int instantYear = 0;\n\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeFieldType fieldType = partial.getFieldType(i);\n            int currentValue = values[i];\n            if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n                currentValue += valueToAdd;\n                instantMonth = currentValue;\n                int yearSign = currentValue >= 0 ? 1 : -1;\n                int newYear = values[0] + (currentValue / 12) * yearSign;\n                instantYear = newYear;\n                currentValue = ((currentValue % 12) + 12) % 12;\n                LocalDate localDate = new LocalDate(newYear, currentValue + 1, 1);\n                int dayLimit = localDate.dayOfMonth().getMaximumValue();\n                if (values[2] > dayLimit) {\n                    values[2] = dayLimit;\n                }\n            } else if (fieldType.equals(DateTimeFieldType.year())) {\n                instantYear = currentValue + valueToAdd;\n                currentValue = instantYear;\n            }\n\n            instant = fieldType.getField(iChronology).set(instant, currentValue);\n        }\n        if (instantMonth != 0 && instantYear != 0) {\n            instant = iChronology.monthOfYear().set(instant, instantMonth);\n            instant = iChronology.year().set(instant, instantYear);\n        } else if (instantMonth != 0) {\n            instant = iChronology.monthOfYear().set(instant, instantMonth);\n        } else if (instantYear != 0) {\n            instant = iChronology.year().set(instant, instantYear);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..44a4f7ea 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,54 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int instantMonth = 0;\n+        int instantYear = 0;\n+\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeFieldType fieldType = partial.getFieldType(i);\n+            int currentValue = values[i];\n+            if (fieldType.equals(DateTimeFieldType.monthOfYear())) {\n+                currentValue += valueToAdd;\n+                instantMonth = currentValue;\n+                int yearSign = currentValue >= 0 ? 1 : -1;\n+                int newYear = values[0] + (currentValue / 12) * yearSign;\n+                instantYear = newYear;\n+                currentValue = ((currentValue % 12) + 12) % 12;\n+                LocalDate localDate = new LocalDate(newYear, currentValue + 1, 1);\n+                int dayLimit = localDate.dayOfMonth().getMaximumValue();\n+                if (values[2] > dayLimit) {\n+                    values[2] = dayLimit;\n+                }\n+            } else if (fieldType.equals(DateTimeFieldType.year())) {\n+                instantYear = currentValue + valueToAdd;\n+                currentValue = instantYear;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+\n+            instant = fieldType.getField(iChronology).set(instant, currentValue);\n+        }\n+        if (instantMonth != 0 && instantYear != 0) {\n+            instant = iChronology.monthOfYear().set(instant, instantMonth);\n+            instant = iChronology.year().set(instant, instantYear);\n+        } else if (instantMonth != 0) {\n+            instant = iChronology.monthOfYear().set(instant, instantMonth);\n+        } else if (instantYear != 0) {\n+            instant = iChronology.year().set(instant, instantYear);\n         }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}