{
    "patch": "private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n    if (out == null || str == null) {\n        throw new IllegalArgumentException(\"The Writer and String must not be null\");\n    }\n    int sz = str.length();\n    StringBuilder sb = new StringBuilder(sz);\n    for (int i = 0; i < sz; i++) {\n        char ch = str.charAt(i);\n\n        // handle unicode\n        if (ch > 0xfff) {\n            sb.append(\"\\\\u\" + hex(ch));\n        } else if (ch > 0xff) {\n            sb.append(\"\\\\u0\" + hex(ch));\n        } else if (ch > 0x7f) {\n            sb.append(\"\\\\u00\" + hex(ch));\n        } else if (ch == '\\b') {\n            sb.append(\"\\\\b\");\n        } else if (ch == '\\n') {\n            sb.append(\"\\\\n\");\n        } else if (ch == '\\t') {\n            sb.append(\"\\\\t\");\n        } else if (ch == '\\f') {\n            sb.append(\"\\\\f\");\n        } else if (ch == '\\r') {\n            sb.append(\"\\\\r\");\n        } else if (ch == '\\'' && escapeSingleQuote) {\n            sb.append(\"\\\\'\");\n        } else if (ch == '\\\\') {\n            sb.append(\"\\\\\\\\\");\n        } else {\n            sb.append(ch);\n        }\n    }\n    out.write(sb.toString());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..9fed5814 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,78 +168,42 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str == null) {\n-            return;\n-        }\n-        int sz;\n-        sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    if (out == null || str == null) {\n+        throw new IllegalArgumentException(\"The Writer and String must not be null\");\n+    }\n+    int sz = str.length();\n+    StringBuilder sb = new StringBuilder(sz);\n+    for (int i = 0; i < sz; i++) {\n+        char ch = str.charAt(i);\n \n-            // handle unicode\n-            if (ch > 0xfff) {\n-                out.write(\"\\\\u\" + hex(ch));\n-            } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n-            } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b':\n-                        out.write('\\\\');\n-                        out.write('b');\n-                        break;\n-                    case '\\n':\n-                        out.write('\\\\');\n-                        out.write('n');\n-                        break;\n-                    case '\\t':\n-                        out.write('\\\\');\n-                        out.write('t');\n-                        break;\n-                    case '\\f':\n-                        out.write('\\\\');\n-                        out.write('f');\n-                        break;\n-                    case '\\r':\n-                        out.write('\\\\');\n-                        out.write('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n-                }\n-            } else {\n-                switch (ch) {\n-                    case '\\'':\n-                        if (escapeSingleQuote) {\n-                          out.write('\\\\');\n-                        }\n-                        out.write('\\'');\n-                        break;\n-                    case '\"':\n-                        out.write('\\\\');\n-                        out.write('\"');\n-                        break;\n-                    case '\\\\':\n-                        out.write('\\\\');\n-                        out.write('\\\\');\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n-                }\n-            }\n+        // handle unicode\n+        if (ch > 0xfff) {\n+            sb.append(\"\\\\u\" + hex(ch));\n+        } else if (ch > 0xff) {\n+            sb.append(\"\\\\u0\" + hex(ch));\n+        } else if (ch > 0x7f) {\n+            sb.append(\"\\\\u00\" + hex(ch));\n+        } else if (ch == '\\b') {\n+            sb.append(\"\\\\b\");\n+        } else if (ch == '\\n') {\n+            sb.append(\"\\\\n\");\n+        } else if (ch == '\\t') {\n+            sb.append(\"\\\\t\");\n+        } else if (ch == '\\f') {\n+            sb.append(\"\\\\f\");\n+        } else if (ch == '\\r') {\n+            sb.append(\"\\\\r\");\n+        } else if (ch == '\\'' && escapeSingleQuote) {\n+            sb.append(\"\\\\'\");\n+        } else if (ch == '\\\\') {\n+            sb.append(\"\\\\\\\\\");\n+        } else {\n+            sb.append(ch);\n         }\n     }\n+    out.write(sb.toString());\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "junit.framework.ComparisonFailure: escapeJava(String) failed expected:<[\\u0001]> but was:<[\u0001]>",
    "test_result": "FAIL"
}