{
    "patch": "        // Maybe STRING, GET, SET\n        if (child.isString()) {\n            // if a string in an object literal is a valid identifier we warn\n            // the user\n            String name = child.getString();\n            if (!TokenStream.isJSIdentifier(name)) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child,\n                    CheckObjectLiteral.INVALID_OBJECTLIT_KEY_ERROR));\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..02fb6743 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,17 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        // Maybe STRING, GET, SET\n+        if (child.isString()) {\n+            // if a string in an object literal is a valid identifier we warn\n+            // the user\n+            String name = child.getString();\n+            if (!TokenStream.isJSIdentifier(name)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child,\n+                    CheckObjectLiteral.INVALID_OBJECTLIT_KEY_ERROR));\n+            }\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}