{
    "patch": "private static final int MAX_CYCLES = 100;\nprivate static final int MAX_ULPS = 10;\n\nprivate final int maxIterations;\nprivate final double maxUlps;\n\npublic SimplexSolver() {\n    this.maxIterations = MAX_CYCLES;\n    this.maxUlps = MAX_ULPS;\n}\n\npublic SimplexSolver(final double epsilon, final int maxIterations) {\n    this.maxIterations = maxIterations;\n    this.maxUlps = FastMath.max(FastMath.ulp(1d), FastMath.round(epsilon / FastMath.ulp(1d)));\n}\n\nprivate Integer getPivotRow(SimplexTableau tableau, final int col) {\n    List<Integer> minRatioPositions = new ArrayList<Integer>();\n    double minRatio = Double.MAX_VALUE;\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n        final double entry = tableau.getEntry(i, col);\n\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = rhs / entry;\n\n            int cmp = Double.compare(ratio, minRatio);\n            if (cmp == 0) {\n                // Add row index to list of candidates for min ratio pivot row\n                minRatioPositions.add(i);\n            } else if (cmp < 0) {\n                // Found a better min ratio, clear previous candidates\n                minRatio = ratio;\n                minRatioPositions.clear();\n                minRatioPositions.add(i);\n            }\n        }\n    }\n\n    if (minRatioPositions.isEmpty()) {\n        return null;\n    } else {\n        // Apply Bland's rule to avoid cycling\n        final int pivotCol = tableau.getBasicColumn(col);\n        Integer minRow = null;\n        Integer minIndex = null;\n        for (Integer rowIndex : minRatioPositions) {\n            Integer basicCol = tableau.getBasicColumnIndex(rowIndex);\n            if (basicCol == null || basicCol > pivotCol) {\n                if (minRow == null || basicCol < minIndex) {\n                    minIndex = basicCol;\n                    minRow = rowIndex;\n                }\n            }\n        }\n\n        // If no candidate rows satisfy Bland's rule, revert to the previous implementation\n        if (minRow == null) {\n            for (Integer row : minRatioPositions) {\n                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n                    int column = i + tableau.getArtificialVariableOffset();\n                    final double entry = tableau.getEntry(row, column);\n                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n                        return row;\n                    }\n                }\n            }\n\n            Integer minRowIndex = null;\n            for (Integer row : minRatioPositions) {\n                Integer basicCol = tableau.getBasicColumnIndex(row);\n                if (basicCol != null && basicCol < pivotCol) {\n                    pivotCol = basicCol;\n                    minRowIndex = row;\n                }\n            }\n            return minRowIndex;\n        }\n\n        return minRow;\n    }\n}\n\nprivate void performPivot(SimplexTableau tableau, final int pivotRow, final int pivotCol) {\n    tableau.divideRow(pivotRow, tableau.getEntry(pivotRow, pivotCol));\n    for (int i = 0; i < tableau.getHeight(); i++) {\n        if (i != pivotRow) {\n            tableau.subtractRow(i, pivotRow, tableau.getEntry(i, pivotCol));\n        }\n    }\n    tableau.substituteBasicVariable(pivotRow, pivotCol);\n}\n\npublic PointValuePair optimize(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints,\n        final GoalType goalType, final boolean restrictToNonNegative) {\n    final SimplexTableau tableau = createTableau(f, constraints, goalType, restrictToNonNegative);\n\n    Integer pivotCol = getPivotColumn(tableau);\n    Integer pivotRow = null;\n    int iterations = 0;\n    while (pivotCol != null && iterations < maxIterations) {\n        pivotRow = getPivotRow(tableau, pivotCol);\n\n        if (pivotRow == null) {\n            // Unbounded solution\n            throw new NoFeasibleSolutionException();\n        }\n\n        performPivot(tableau, pivotRow, pivotCol);\n        pivotCol = getPivotColumn(tableau);\n        iterations++;\n    }\n\n    if (pivotCol != null) {\n        // Maximum number of iterations reached\n        throw new MaxCountExceededException(MAX_CYCLES);\n    }\n\n    return new PointValuePair(tableau.getSolution(), tableau.getObjectiveValue());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..d19d96709 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,71 +87,126 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n+private static final int MAX_CYCLES = 100;\n+private static final int MAX_ULPS = 10;\n+\n+private final int maxIterations;\n+private final double maxUlps;\n+\n+public SimplexSolver() {\n+    this.maxIterations = MAX_CYCLES;\n+    this.maxUlps = MAX_ULPS;\n+}\n+\n+public SimplexSolver(final double epsilon, final int maxIterations) {\n+    this.maxIterations = maxIterations;\n+    this.maxUlps = FastMath.max(FastMath.ulp(1d), FastMath.round(epsilon / FastMath.ulp(1d)));\n+}\n+\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+    List<Integer> minRatioPositions = new ArrayList<Integer>();\n+    double minRatio = Double.MAX_VALUE;\n+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+        final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n+        final double entry = tableau.getEntry(i, col);\n+\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            final double ratio = rhs / entry;\n+\n+            int cmp = Double.compare(ratio, minRatio);\n+            if (cmp == 0) {\n+                // Add row index to list of candidates for min ratio pivot row\n+                minRatioPositions.add(i);\n+            } else if (cmp < 0) {\n+                // Found a better min ratio, clear previous candidates\n+                minRatio = ratio;\n+                minRatioPositions.clear();\n+                minRatioPositions.add(i);\n+            }\n+        }\n+    }\n+\n+    if (minRatioPositions.isEmpty()) {\n+        return null;\n+    } else {\n+        // Apply Bland's rule to avoid cycling\n+        final int pivotCol = tableau.getBasicColumn(col);\n+        Integer minRow = null;\n+        Integer minIndex = null;\n+        for (Integer rowIndex : minRatioPositions) {\n+            Integer basicCol = tableau.getBasicColumnIndex(rowIndex);\n+            if (basicCol == null || basicCol > pivotCol) {\n+                if (minRow == null || basicCol < minIndex) {\n+                    minIndex = basicCol;\n+                    minRow = rowIndex;\n                 }\n             }\n         }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n+        // If no candidate rows satisfy Bland's rule, revert to the previous implementation\n+        if (minRow == null) {\n+            for (Integer row : minRatioPositions) {\n+                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+                    int column = i + tableau.getArtificialVariableOffset();\n+                    final double entry = tableau.getEntry(row, column);\n+                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n+                        return row;\n                     }\n                 }\n+            }\n \n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n+            Integer minRowIndex = null;\n+            for (Integer row : minRatioPositions) {\n+                Integer basicCol = tableau.getBasicColumnIndex(row);\n+                if (basicCol != null && basicCol < pivotCol) {\n+                    pivotCol = basicCol;\n+                    minRowIndex = row;\n                 }\n-                return minRow;\n+            }\n+            return minRowIndex;\n         }\n-        return minRatioPositions.get(0);\n+\n+        return minRow;\n     }\n+}\n+\n+private void performPivot(SimplexTableau tableau, final int pivotRow, final int pivotCol) {\n+    tableau.divideRow(pivotRow, tableau.getEntry(pivotRow, pivotCol));\n+    for (int i = 0; i < tableau.getHeight(); i++) {\n+        if (i != pivotRow) {\n+            tableau.subtractRow(i, pivotRow, tableau.getEntry(i, pivotCol));\n+        }\n+    }\n+    tableau.substituteBasicVariable(pivotRow, pivotCol);\n+}\n+\n+public PointValuePair optimize(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints,\n+        final GoalType goalType, final boolean restrictToNonNegative) {\n+    final SimplexTableau tableau = createTableau(f, constraints, goalType, restrictToNonNegative);\n+\n+    Integer pivotCol = getPivotColumn(tableau);\n+    Integer pivotRow = null;\n+    int iterations = 0;\n+    while (pivotCol != null && iterations < maxIterations) {\n+        pivotRow = getPivotRow(tableau, pivotCol);\n+\n+        if (pivotRow == null) {\n+            // Unbounded solution\n+            throw new NoFeasibleSolutionException();\n+        }\n+\n+        performPivot(tableau, pivotRow, pivotCol);\n+        pivotCol = getPivotColumn(tableau);\n+        iterations++;\n+    }\n+\n+    if (pivotCol != null) {\n+        // Maximum number of iterations reached\n+        throw new MaxCountExceededException(MAX_CYCLES);\n+    }\n+\n+    return new PointValuePair(tableau.getSolution(), tableau.getObjectiveValue());\n+}\n \n     /**\n      * Runs one iteration of the Simplex method on the given model.",
    "result_reason": "error: variable maxUlps is already defined in class SimplexSolver",
    "test_result": "ERROR"
}