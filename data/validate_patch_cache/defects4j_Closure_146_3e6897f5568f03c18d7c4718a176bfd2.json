{
    "patch": "        // We need to check if `this` is a subtype of `that`, if so we return `(null, this)`\n        // otherwise if `that` is a subtype of `this`, return `(that, null)`\n        // otherwise return `(this, that)`\n        TypeComparison thatToThis = that.testSubtype(this);\n        if (thatToThis == TypeComparison.TRUE) {\n          return new TypePair(null, this);\n        } else if (thatToThis == TypeComparison.FALSE) {\n          return new TypePair(that, null);\n        } else {\n          return new TypePair(this.restrictByNotSubtype(that), that.restrictByNotSubtype(this));\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..bd29ce80 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,17 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // We need to check if `this` is a subtype of `that`, if so we return `(null, this)`\n+        // otherwise if `that` is a subtype of `this`, return `(that, null)`\n+        // otherwise return `(this, that)`\n+        TypeComparison thatToThis = that.testSubtype(this);\n+        if (thatToThis == TypeComparison.TRUE) {\n+          return new TypePair(null, this);\n+        } else if (thatToThis == TypeComparison.FALSE) {\n+          return new TypePair(that, null);\n+        } else {\n+          return new TypePair(this.restrictByNotSubtype(that), that.restrictByNotSubtype(this));\n+        }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}