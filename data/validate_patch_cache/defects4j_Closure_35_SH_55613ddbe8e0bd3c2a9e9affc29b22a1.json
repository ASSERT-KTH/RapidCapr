{
    "patch": "  /**\n   * Updates the inferred types for a record type object.\n   */\n  private void updateInferredTypesForRecordType(\n      JSType inferredType, ObjectType targetType) {\n    ObjectType inferredObj = ObjectType.cast(inferredType);\n    if (inferredObj == null || !inferredObj.isRecordType() || !targetType.isRecordType()) {\n      return;\n    }\n    for (String prop : inferredObj.getOwnPropertyNames()) {\n      JSType propType = inferredObj.getPropertyType(prop);\n      JSType declaredType = targetType.getOwnPropertyType(prop);\n      if (declaredType == null) {\n        targetType.defineInferredProperty(prop, propType, null);\n      } else {\n        targetType.updateInferredType(prop, declaredType.getGreatestSubtype(propType), null);\n      }\n    }\n  ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..0d02d5cd 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,22 +1118,26 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+  /**\n+   * Updates the inferred types for a record type object.\n+   */\n+  private void updateInferredTypesForRecordType(\n+      JSType inferredType, ObjectType targetType) {\n+    ObjectType inferredObj = ObjectType.cast(inferredType);\n+    if (inferredObj == null || !inferredObj.isRecordType() || !targetType.isRecordType()) {\n+      return;\n+    }\n+    for (String prop : inferredObj.getOwnPropertyNames()) {\n+      JSType propType = inferredObj.getPropertyType(prop);\n+      JSType declaredType = targetType.getOwnPropertyType(prop);\n+      if (declaredType == null) {\n+        targetType.defineInferredProperty(prop, propType, null);\n+      } else {\n+        targetType.updateInferredType(prop, declaredType.getGreatestSubtype(propType), null);\n       }\n     }\n+  \n+    }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}