{
    "patch": "        if (Double.isNaN(yInitial) || Double.isInfinite(yInitial) \n            || Double.isNaN(yMin) || Double.isInfinite(yMin) \n            || Double.isNaN(yMax) || Double.isInfinite(yMax)) {\n            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are infinite or NaN. Endpoints: [\" + mi",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..590cb2592 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,10 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        if (Double.isNaN(yInitial) || Double.isInfinite(yInitial) \n+            || Double.isNaN(yMin) || Double.isInfinite(yMin) \n+            || Double.isNaN(yMax) || Double.isInfinite(yMax)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are infinite or NaN. Endpoints: [\" + mi\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}