{
    "patch": "        // return the initial guess if it is good enough\n        double yInitial;\n        try {\n            yInitial = f.value(initial);\n        } catch (Exception e) {\n            throw new FunctionEvaluationException(e, initial);\n        }\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // return the first endpoint if it is good enough\n        final double yMin;\n        try {\n            yMin = f.value(min);\n        } catch (Exception e) {\n            throw new FunctionEvaluationException(e, min);\n        }\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(yMin, 0);\n            return result;\n        }\n\n        // return the second endpoint if it is good enough\n        final double yMax;\n        try {\n            yMax = f.value(max);\n        } catch (Exception e) {\n            throw new FunctionEvaluationException(e, max);\n        }\n        if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(yMax, 0);\n            return result;\n        }\n\n        // check that endpoints bracket the root and initial guess is finite\n        final boolean isBracketed = (yMin < 0 && yMax > 0) || (yMin > 0 && yMax < 0);\n        final boolean isInitialFinite = Double.isFinite(yInitial);\n        if (!isBracketed || !isInitialFinite) {\n            throw new IllegalArgumentException(\"Endpoints do not bracket the root or initial guess is not finite.\");\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..84916afd7 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,51 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // return the initial guess if it is good enough\n+        double yInitial;\n+        try {\n+            yInitial = f.value(initial);\n+        } catch (Exception e) {\n+            throw new FunctionEvaluationException(e, initial);\n+        }\n+        if (Math.abs(yInitial) <= functionValueAccuracy) {\n+            setResult(initial, 0);\n+            return result;\n+        }\n+\n+        // return the first endpoint if it is good enough\n+        final double yMin;\n+        try {\n+            yMin = f.value(min);\n+        } catch (Exception e) {\n+            throw new FunctionEvaluationException(e, min);\n+        }\n+        if (Math.abs(yMin) <= functionValueAccuracy) {\n+            setResult(yMin, 0);\n+            return result;\n+        }\n+\n+        // return the second endpoint if it is good enough\n+        final double yMax;\n+        try {\n+            yMax = f.value(max);\n+        } catch (Exception e) {\n+            throw new FunctionEvaluationException(e, max);\n+        }\n+        if (Math.abs(yMax) <= functionValueAccuracy) {\n+            setResult(yMax, 0);\n+            return result;\n+        }\n+\n+        // check that endpoints bracket the root and initial guess is finite\n+        final boolean isBracketed = (yMin < 0 && yMax > 0) || (yMin > 0 && yMax < 0);\n+        final boolean isInitialFinite = Double.isFinite(yInitial);\n+        if (!isBracketed || !isInitialFinite) {\n+            throw new IllegalArgumentException(\"Endpoints do not bracket the root or initial guess is not finite.\");\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yInitial is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}