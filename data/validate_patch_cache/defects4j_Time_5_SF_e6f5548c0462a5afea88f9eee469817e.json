{
    "patch": "public Period normalizedStandard(final PeriodType type) {\n    PeriodType effectiveType = DateTimeUtils.getEffectivePeriodType(type);\n    long millis = getMillis();\n    int totalSeconds = FieldUtils.safeMultiply(getHours(), DateTimeConstants.SECONDS_PER_HOUR)\n            + FieldUtils.safeMultiply(getMinutes(), DateTimeConstants.SECONDS_PER_MINUTE)\n            + getSeconds();\n    int seconds = totalSeconds;\n    int hours = seconds / DateTimeConstants.SECONDS_PER_HOUR;\n    seconds -= FieldUtils.safeMultiply(hours, DateTimeConstants.SECONDS_PER_HOUR);\n    int minutes = seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n    seconds -= FieldUtils.safeMultiply(minutes, DateTimeConstants.SECONDS_PER_MINUTE);\n    int days = getDays();\n    int weeks = getWeeks();\n    int months = getMonths();\n    int years = getYears();\n    boolean supportsYears = effectiveType.isSupported(DurationFieldType.years());\n    boolean supportsMonths = effectiveType.isSupported(DurationFieldType.months());\n    if (supportsYears || supportsMonths) {\n        int totalMonths = FieldUtils.safeMultiply(years, 12) + months;\n        if (supportsYears) {\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n        } else {\n            months = 0;\n            years = 0;\n        }\n        if (years != getYears() || months != getMonths()) {\n            long instantYear = years == 0\n                    ? 0\n                    : ((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n            long instantMonth = months == 0\n                    ? 0\n                    : ((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n            millis = FieldUtils.safeAdd(millis, instantYear + instantMonth);\n            if (!supportsMonths) {\n                PeriodType newType = effectiveType.withoutField(DurationFieldType.years());\n                effectiveType = newType.equals(type) ? type : newType;\n            }\n        }\n    }\n    if (supportsYears || supportsMonths) {\n        int maxDaysInMonth = 0;\n        while (true) {\n            try {\n                maxDaysInMonth = MonthDay.now().withMonthOfYear(months + 1).getMaximumValue();\n                break;\n            } catch (IllegalStateException ignored) {\n                // ignored exception\n            }\n            if (months > 0) {\n                months--;\n            } else {\n                years--;\n                months = 11;\n            }\n        }\n        int maxDaysInYear = 0;\n        try {\n            if (years >= 0) {\n                maxDaysInYear = Year.now().withYear(years).length();\n            } else {\n                maxDaysInYear = ((Year) Year.now().withYear(Integer.MAX_VALUE))\n                        .minusYears(-years).length();\n            }\n        } catch (IllegalStateException ignored) {\n            // ignored exception\n        }\n        if (days > (maxDaysInMonth - 1)) {\n            int difference = days - (maxDaysInMonth - 1);\n            days = maxDaysInMonth - 1;\n            if (months == 11) {\n                years += 1;\n                months = 0;\n                if (supportsYears) {\n                    if (years != getYears()) {\n                        long instantYear = FieldUtils.safeMultiply(years,\n                                DateTimeConstants.MILLIS_PER_YEAR);\n                        millis = FieldUtils.safeAdd(millis, instantYear);\n                    }\n                } else {\n                    PeriodType newType = effectiveType\n                            .withoutField(DurationFieldType.years());\n                    effectiveType = newType.equals(type) ? type : newType;\n                }\n            } else {\n                months += 1;\n                if (supportsMonths) {\n                    if (months != getMonths()) {\n                        long instantMonth = FieldUtils.safeMultiply(months,\n                                DateTimeConstants.MILLIS_PER_MONTH);\n                        millis = FieldUtils.safeAdd(millis, instantMonth);\n                    }\n                } else {\n                    PeriodType newType = effectiveType\n                            .withoutField(DurationFieldType.months());\n                    effectiveType = newType.equals(type) ? type : newType;\n                }\n            }\n            days += difference;\n            if (supportsMonths) {\n                if (days != getDays()) {\n                    long instantDay",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..e6fc8cbc 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,107 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(final PeriodType type) {\n+    PeriodType effectiveType = DateTimeUtils.getEffectivePeriodType(type);\n+    long millis = getMillis();\n+    int totalSeconds = FieldUtils.safeMultiply(getHours(), DateTimeConstants.SECONDS_PER_HOUR)\n+            + FieldUtils.safeMultiply(getMinutes(), DateTimeConstants.SECONDS_PER_MINUTE)\n+            + getSeconds();\n+    int seconds = totalSeconds;\n+    int hours = seconds / DateTimeConstants.SECONDS_PER_HOUR;\n+    seconds -= FieldUtils.safeMultiply(hours, DateTimeConstants.SECONDS_PER_HOUR);\n+    int minutes = seconds / DateTimeConstants.SECONDS_PER_MINUTE;\n+    seconds -= FieldUtils.safeMultiply(minutes, DateTimeConstants.SECONDS_PER_MINUTE);\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    int months = getMonths();\n+    int years = getYears();\n+    boolean supportsYears = effectiveType.isSupported(DurationFieldType.years());\n+    boolean supportsMonths = effectiveType.isSupported(DurationFieldType.months());\n+    if (supportsYears || supportsMonths) {\n+        int totalMonths = FieldUtils.safeMultiply(years, 12) + months;\n+        if (supportsYears) {\n+            years = totalMonths / 12;\n+            months = totalMonths % 12;\n+        } else {\n+            months = 0;\n+            years = 0;\n+        }\n+        if (years != getYears() || months != getMonths()) {\n+            long instantYear = years == 0\n+                    ? 0\n+                    : ((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n+            long instantMonth = months == 0\n+                    ? 0\n+                    : ((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n+            millis = FieldUtils.safeAdd(millis, instantYear + instantMonth);\n+            if (!supportsMonths) {\n+                PeriodType newType = effectiveType.withoutField(DurationFieldType.years());\n+                effectiveType = newType.equals(type) ? type : newType;\n             }\n         }\n-        return result;\n     }\n+    if (supportsYears || supportsMonths) {\n+        int maxDaysInMonth = 0;\n+        while (true) {\n+            try {\n+                maxDaysInMonth = MonthDay.now().withMonthOfYear(months + 1).getMaximumValue();\n+                break;\n+            } catch (IllegalStateException ignored) {\n+                // ignored exception\n+            }\n+            if (months > 0) {\n+                months--;\n+            } else {\n+                years--;\n+                months = 11;\n+            }\n+        }\n+        int maxDaysInYear = 0;\n+        try {\n+            if (years >= 0) {\n+                maxDaysInYear = Year.now().withYear(years).length();\n+            } else {\n+                maxDaysInYear = ((Year) Year.now().withYear(Integer.MAX_VALUE))\n+                        .minusYears(-years).length();\n+            }\n+        } catch (IllegalStateException ignored) {\n+            // ignored exception\n+        }\n+        if (days > (maxDaysInMonth - 1)) {\n+            int difference = days - (maxDaysInMonth - 1);\n+            days = maxDaysInMonth - 1;\n+            if (months == 11) {\n+                years += 1;\n+                months = 0;\n+                if (supportsYears) {\n+                    if (years != getYears()) {\n+                        long instantYear = FieldUtils.safeMultiply(years,\n+                                DateTimeConstants.MILLIS_PER_YEAR);\n+                        millis = FieldUtils.safeAdd(millis, instantYear);\n+                    }\n+                } else {\n+                    PeriodType newType = effectiveType\n+                            .withoutField(DurationFieldType.years());\n+                    effectiveType = newType.equals(type) ? type : newType;\n+                }\n+            } else {\n+                months += 1;\n+                if (supportsMonths) {\n+                    if (months != getMonths()) {\n+                        long instantMonth = FieldUtils.safeMultiply(months,\n+                                DateTimeConstants.MILLIS_PER_MONTH);\n+                        millis = FieldUtils.safeAdd(millis, instantMonth);\n+                    }\n+                } else {\n+                    PeriodType newType = effectiveType\n+                            .withoutField(DurationFieldType.months());\n+                    effectiveType = newType.equals(type) ? type : newType;\n+                }\n+            }\n+            days += difference;\n+            if (supportsMonths) {\n+                if (days != getDays()) {\n+                    long instantDay\n \n }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}