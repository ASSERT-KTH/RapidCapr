{
    "patch": "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments) {\n    boolean varInlined = false;\n    int refCount = referenceInfo.references.size();\n    Reference declaration = referenceInfo.references.get(0);\n    Reference init = referenceInfo.getInitializingReference();\n\n    if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n        // if the variable is referenced more than once, we can only\n        // inline it if it's immutable and never defined before referenced.\n        Node value;\n        if (init != null) {\n            value = init.getAssignedValue();\n        } else {\n            // Create a new node for variable that is never initialized.\n            Node srcLocation = declaration.getNode();\n            value = NodeUtil.newUndefinedNode(srcLocation);\n        }\n        Preconditions.checkNotNull(value);\n        inlineWellDefinedVariable(v, value, referenceInfo.references);\n        staleVars.add(v);\n        varInlined = true;\n    }\n\n    if (!varInlined && refCount == 2 && init != null) {\n        // The only reference is the initialization, remove the assignment and\n        // the variable declaration.\n        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n            Node value = init.getAssignedValue();\n            Preconditions.checkNotNull(value);\n            inlineWellDefinedVariable(v, value, referenceInfo.references);\n            staleVars.add(v);\n            varInlined = true;\n        }\n    }\n\n    if (!varInlined && refCount == 2 && init == null) {\n        // The only reference is a readonly reference to an undeclared variable.\n        // We need to replace the declaration with undefined, otherwise nuking\n        // the declaration will change the semantics.\n        Reference ref = referenceInfo.references.get(1);\n        if (isValidReadReference(ref) && ref.isImmutableValue()) {\n            InlineVarUtil.replaceDeclarationWithUndefined(v, declaration);\n            // We don't need to add v to staleVars, as we didn't inline it.\n            varInlined = true;\n        }\n    }\n\n    if (!varInlined && refCount == 3 && init == null) {\n        // The variable is declared but never initialized.\n        Reference readRef = referenceInfo.references.get(1);\n        Reference writeRef = referenceInfo.references.get(2);\n        if (isValidDeclaration(declaration) && isValidReadReference(readRef) &&\n                isValidWriteReference(writeRef)) {\n            inlineVariableWithUndefined(v, referenceInfo.references);\n            staleVars.add(v);\n            varInlined = true;\n        }\n    }\n\n    if (!varInlined) {\n        // If we can't inline the variable itself, maybe we can inline an alias.\n        inlineAlias(v, referenceInfo, maybeModifiedArguments);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..8f71a566 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -250,82 +250,73 @@ class InlineVariables implements CompilerPass {\n           || (NodeUtil.isAssignmentOp(parent)\n           && parent.getFirstChild() == n));\n     }\n-\n-    private void inlineNonConstants(\n+private void inlineNonConstants(\n         Var v, ReferenceCollection referenceInfo,\n         boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n+    boolean varInlined = false;\n+    int refCount = referenceInfo.references.size();\n+    Reference declaration = referenceInfo.references.get(0);\n+    Reference init = referenceInfo.getInitializingReference();\n \n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n         // if the variable is referenced more than once, we can only\n         // inline it if it's immutable and never defined before referenced.\n         Node value;\n         if (init != null) {\n-          value = init.getAssignedValue();\n+            value = init.getAssignedValue();\n         } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n+            // Create a new node for variable that is never initialized.\n+            Node srcLocation = declaration.getNode();\n+            value = NodeUtil.newUndefinedNode(srcLocation);\n         }\n         Preconditions.checkNotNull(value);\n         inlineWellDefinedVariable(v, value, referenceInfo.references);\n         staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n+        varInlined = true;\n+    }\n+\n+    if (!varInlined && refCount == 2 && init != null) {\n+        // The only reference is the initialization, remove the assignment and\n+        // the variable declaration.\n         if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n+            Node value = init.getAssignedValue();\n+            Preconditions.checkNotNull(value);\n+            inlineWellDefinedVariable(v, value, referenceInfo.references);\n+            staleVars.add(v);\n+            varInlined = true;\n         }\n-      }\n+    }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n+    if (!varInlined && refCount == 2 && init == null) {\n+        // The only reference is a readonly reference to an undeclared variable.\n+        // We need to replace the declaration with undefined, otherwise nuking\n+        // the declaration will change the semantics.\n+        Reference ref = referenceInfo.references.get(1);\n+        if (isValidReadReference(ref) && ref.isImmutableValue()) {\n+            InlineVarUtil.replaceDeclarationWithUndefined(v, declaration);\n+            // We don't need to add v to staleVars, as we didn't inline it.\n+            varInlined = true;\n         }\n-      }\n     }\n \n+    if (!varInlined && refCount == 3 && init == null) {\n+        // The variable is declared but never initialized.\n+        Reference readRef = referenceInfo.references.get(1);\n+        Reference writeRef = referenceInfo.references.get(2);\n+        if (isValidDeclaration(declaration) && isValidReadReference(readRef) &&\n+                isValidWriteReference(writeRef)) {\n+            inlineVariableWithUndefined(v, referenceInfo.references);\n+            staleVars.add(v);\n+            varInlined = true;\n+        }\n+    }\n+\n+    if (!varInlined) {\n+        // If we can't inline the variable itself, maybe we can inline an alias.\n+        inlineAlias(v, referenceInfo, maybeModifiedArguments);\n+    }\n+}\n+\n     /**\n      * If there are any variable references in the given node tree, blacklist\n      * them to prevent the pass from trying to inline the variable.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}