{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      if (iface instanceof ObjectType) {\n        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n      } else {\n        t.error(TypeValidator.INVALID_THIS_TYPE, getName(), iface.toString());\n      }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..fe0c633b 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -873,10 +873,14 @@ public class FunctionType extends PrototypeObjectType {\n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+    for (JSType iface : implementedInterfaces) {\n+      if (iface instanceof ObjectType) {\n+        ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+        resolvedInterfaces.add(resolvedIface);\n+        changed |= (resolvedIface != iface);\n+      } else {\n+        t.error(TypeValidator.INVALID_THIS_TYPE, getName(), iface.toString());\n+      }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}