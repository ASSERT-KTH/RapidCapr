{
    "patch": "if (offsetAdjusted < offsetLocal) {\n    // find the most recent transition, nearest instant is in instantAdjusted\n    long prevTransition = previousTransition(instantAdjusted);\n    // if the previous transition had the same offset then use it\n    if (prevTransition != instantLocal && offsetAdjusted == getOffset(prevTransition)) {\n        return offsetAdjusted;\n    }\n    long nextTransition = nextTransition(instantLocal);\n    long nextTransitionOffset = getOffset(nextTransition);\n    // if the instant is in a gap then jump to the instant just after\n    if (nextTransitionOffset > offsetLocal) {\n        return offsetLocal;\n    }\n    // the instant is in overlap\n    if (nextTransition == instantLocal) {\n        return offsetLocal;\n    }\n    // otherwise use the offset before the next transition\n    return nextTransitionOffset;\n} else if (offsetAdjusted > offsetLocal) {\n    long nextTransition = nextTransition(instantAdjusted);\n    if (nextTransition != instantLocal && offsetAdjusted == getOffset(nextTransition)) {\n        return offsetAdjusted;\n    }\n    long nextTransitionOffset = getOffset(nextTransition);\n    if (nextTransitionOffset == offsetLocal) {\n        return offsetLocal;\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4d3d864f 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,36 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetAdjusted < offsetLocal) {\n+    // find the most recent transition, nearest instant is in instantAdjusted\n+    long prevTransition = previousTransition(instantAdjusted);\n+    // if the previous transition had the same offset then use it\n+    if (prevTransition != instantLocal && offsetAdjusted == getOffset(prevTransition)) {\n+        return offsetAdjusted;\n+    }\n+    long nextTransition = nextTransition(instantLocal);\n+    long nextTransitionOffset = getOffset(nextTransition);\n+    // if the instant is in a gap then jump to the instant just after\n+    if (nextTransitionOffset > offsetLocal) {\n+        return offsetLocal;\n+    }\n+    // the instant is in overlap\n+    if (nextTransition == instantLocal) {\n+        return offsetLocal;\n+    }\n+    // otherwise use the offset before the next transition\n+    return nextTransitionOffset;\n+} else if (offsetAdjusted > offsetLocal) {\n+    long nextTransition = nextTransition(instantAdjusted);\n+    if (nextTransition != instantLocal && offsetAdjusted == getOffset(nextTransition)) {\n+        return offsetAdjusted;\n+    }\n+    long nextTransitionOffset = getOffset(nextTransition);\n+    if (nextTransitionOffset == offsetLocal) {\n+        return offsetLocal;\n+    }\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}