{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        boolean originalLenient = calendar.isLenient();\n        if (!originalLenient) {\n            calendar.setLenient(true);\n        }\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        StringBuffer result = applyRules(calendar, buf);\n        if (!originalLenient) {\n            try {\n                calendar.getTimeInMillis();\n            } catch (IllegalArgumentException e) {\n                throw new IllegalArgumentException(\"Failed to format \" + calendar.getTime(), e);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..9d62c05a 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -868,11 +868,23 @@ public class FastDateFormat extends Format {\n      * @return the specified string buffer\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+        boolean originalLenient = calendar.isLenient();\n+        if (!originalLenient) {\n+            calendar.setLenient(true);\n+        }\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        StringBuffer result = applyRules(calendar, buf);\n+        if (!originalLenient) {\n+            try {\n+                calendar.getTimeInMillis();\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(\"Failed to format \" + calendar.getTime(), e);\n+            }\n+        }\n+        return result;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}