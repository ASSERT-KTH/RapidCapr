{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node left = assign.getFirstChild();\n  if (left.getType() == Token.GETPROP) {\n    Node obj = left.getFirstChild();\n    Node prop = left.getLastChild();\n    if (prop.getType() == Token.STRING\n        && prop.getString().equals(\"prototype\")\n        && obj.getType() == Token.NAME\n        && (obj.getString().equals(\"Object\")\n            || obj.getNext().getType() == Token.GETPROP)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..f1117cda 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n-\n-      return false;\n+private boolean isPrototypePropertyAssign(Node assign) {\n+  Node left = assign.getFirstChild();\n+  if (left.getType() == Token.GETPROP) {\n+    Node obj = left.getFirstChild();\n+    Node prop = left.getLastChild();\n+    if (prop.getType() == Token.STRING\n+        && prop.getString().equals(\"prototype\")\n+        && obj.getType() == Token.NAME\n+        && (obj.getString().equals(\"Object\")\n+            || obj.getNext().getType() == Token.GETPROP)) {\n+      return true;\n     }\n+  }\n+  return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}