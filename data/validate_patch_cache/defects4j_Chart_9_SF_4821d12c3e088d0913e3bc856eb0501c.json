{
    "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\"Requires start on or before end.\");\n    }\n\n    int startIndex = getIndex(start);\n    int endIndex = getIndex(end);\n    if (startIndex < 0 || endIndex < 0) {\n        // Either start or end date is not in the original series\n        // Take the closest dates as start and end dates\n        startIndex = (startIndex < 0) ? -(startIndex + 1) : startIndex;\n        endIndex = (endIndex < 0) ? -(endIndex + 1) - 1 : endIndex;\n        if (startIndex > endIndex) {\n            // No data points between start and end dates\n            throw new IllegalArgumentException(\"Invalid date range.\");\n        }\n    } else if (startIndex > endIndex) {\n        // Start date falls after end date in original series\n        throw new IllegalArgumentException(\"Invalid date range.\");\n    }\n\n    return createCopy(startIndex, endIndex + 1);\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..cfb61aa 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -915,45 +915,35 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n-        throws CloneNotSupportedException {\n-\n-        if (start == null) {\n-            throw new IllegalArgumentException(\"Null 'start' argument.\");\n-        }\n-        if (end == null) {\n-            throw new IllegalArgumentException(\"Null 'end' argument.\");\n-        }\n-        if (start.compareTo(end) > 0) {\n-            throw new IllegalArgumentException(\n-                    \"Requires start on or before end.\");\n-        }\n-        boolean emptyRange = false;\n-        int startIndex = getIndex(start);\n-        if (startIndex < 0) {\n-            startIndex = -(startIndex + 1);\n-            if (startIndex == this.data.size()) {\n-                emptyRange = true;  // start is after last data item\n-            }\n-        }\n-        int endIndex = getIndex(end);\n-        if (endIndex < 0) {             // end period is not in original series\n-            endIndex = -(endIndex + 1); // this is first item AFTER end period\n-            endIndex = endIndex - 1;    // so this is last item BEFORE end\n-        }\n-        if (endIndex < 0) {\n-            emptyRange = true;\n-        }\n-        if (emptyRange) {\n-            TimeSeries copy = (TimeSeries) super.clone();\n-            copy.data = new java.util.ArrayList();\n-            return copy;\n-        }\n-        else {\n-            return createCopy(startIndex, endIndex);\n-        }\n-\n-    }\n+public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n+    if (start == null) {\n+        throw new IllegalArgumentException(\"Null 'start' argument.\");\n+    }\n+    if (end == null) {\n+        throw new IllegalArgumentException(\"Null 'end' argument.\");\n+    }\n+    if (start.compareTo(end) > 0) {\n+        throw new IllegalArgumentException(\"Requires start on or before end.\");\n+    }\n+\n+    int startIndex = getIndex(start);\n+    int endIndex = getIndex(end);\n+    if (startIndex < 0 || endIndex < 0) {\n+        // Either start or end date is not in the original series\n+        // Take the closest dates as start and end dates\n+        startIndex = (startIndex < 0) ? -(startIndex + 1) : startIndex;\n+        endIndex = (endIndex < 0) ? -(endIndex + 1) - 1 : endIndex;\n+        if (startIndex > endIndex) {\n+            // No data points between start and end dates\n+            throw new IllegalArgumentException(\"Invalid date range.\");\n+        }\n+    } else if (startIndex > endIndex) {\n+        // Start date falls after end date in original series\n+        throw new IllegalArgumentException(\"Invalid date range.\");\n+    }\n+\n+    return createCopy(startIndex, endIndex + 1);\n+}\n \n     /**\n      * Tests the series for equality with an arbitrary object.",
    "result_reason": "java.lang.IllegalArgumentException: Invalid date range.",
    "test_result": "FAIL"
}