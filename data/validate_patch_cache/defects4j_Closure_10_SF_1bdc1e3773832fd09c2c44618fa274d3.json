{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse && n.hasChildren()) {\n    for (Node child : n.children()) {\n      if (!mayBeString(child, true)) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return mayBeStringHelper(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..84dab6e6 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1412,13 +1412,18 @@ public final class NodeUtil {\n     return mayBeString(n, true);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n+static boolean mayBeString(Node n, boolean recurse) {\n+  if (recurse && n.hasChildren()) {\n+    for (Node child : n.children()) {\n+      if (!mayBeString(child, true)) {\n+        return false;\n+      }\n     }\n+    return true;\n+  } else {\n+    return mayBeStringHelper(n);\n   }\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}