{
    "patch": "public double getPct(Object v) {\n    if (v == null) {\n        throw new NullPointerException(\"Argument v is null\");\n    }\n    if (!(v instanceof Comparable)) {\n        throw new IllegalArgumentException(\"Argument v is not comparable\");\n    }\n    double cumPct = getCumPct((Comparable<?>) v);\n    if (Double.isNaN(cumPct)) {\n        return 0.5; // return default percentile value for NaN inputs\n    } else if (cumPct < 0.0) {\n        return 0.0;\n    } else if (cumPct > 1.0) {\n        return 1.0;\n    } else {\n        return cumPct;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..7b768c5b7 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,24 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v == null) {\n+        throw new NullPointerException(\"Argument v is null\");\n+    }\n+    if (!(v instanceof Comparable)) {\n+        throw new IllegalArgumentException(\"Argument v is not comparable\");\n+    }\n+    double cumPct = getCumPct((Comparable<?>) v);\n+    if (Double.isNaN(cumPct)) {\n+        return 0.5; // return default percentile value for NaN inputs\n+    } else if (cumPct < 0.0) {\n+        return 0.0;\n+    } else if (cumPct > 1.0) {\n+        return 1.0;\n+    } else {\n+        return cumPct;\n     }\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "junit.framework.AssertionFailedError: three (Object) pct expected:<0.5> but was:<1.0>",
    "test_result": "FAIL"
}