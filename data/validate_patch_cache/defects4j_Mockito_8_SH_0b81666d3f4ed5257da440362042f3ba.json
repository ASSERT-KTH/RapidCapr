{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable) {\n                Type contextualType = contextualActualTypeParameters.get(((TypeVariable<?>) actualTypeArgument).getName());\n\n                if (contextualType == null) {\n                    List<Type> boundsOfActualTypeArgument = Arrays.asList(((TypeVariable<?>) actualTypeArgument).getBounds());\n                    contextualType = boundsOfActualTypeArgument.stream()\n                            .filter(t -> !t.equals(Object.class))\n                            .findFirst()\n                            .orElse(Object.class);\n                }\n\n                contextualActualTypeParameters.put(typeParameter, contextualType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..41fb85e52 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,21 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                Type contextualType = contextualActualTypeParameters.get(((TypeVariable<?>) actualTypeArgument).getName());\n+\n+                if (contextualType == null) {\n+                    List<Type> boundsOfActualTypeArgument = Arrays.asList(((TypeVariable<?>) actualTypeArgument).getBounds());\n+                    contextualType = boundsOfActualTypeArgument.stream()\n+                            .filter(t -> !t.equals(Object.class))\n+                            .findFirst()\n+                            .orElse(Object.class);\n+                }\n+\n+                contextualActualTypeParameters.put(typeParameter, contextualType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}