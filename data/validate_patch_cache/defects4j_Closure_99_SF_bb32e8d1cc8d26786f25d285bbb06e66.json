{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them.\n      int pType = parent.getType();\n      if (!(pType == Token.FUNCTION ||\n            pType == Token.EXPR_RESULT ||\n            pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n\n      // Traverse any function expression that is an operand of a logical\n      // operator, as these functions may be used like macros.\n      if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n        Node otherOp = (n == parent.getFirstChild()) ? parent.getLastChild()\n                                                      : parent.getFirstChild();\n        return otherOp.isBoolean();\n      }\n\n      // Avoid function expressions that are not the right-hand side of an\n      // assignment or the target of a call expression. This avoids functions\n      // that are never used, and reduces the risk of duplicate function warnings.\n      if (parent.getType() != Token.ASSIGN && !NodeUtil.isExpressionResultUsed(parent)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n            return false;\n          }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..d0a8c3fb 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,7 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n@@ -95,17 +95,31 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n+      // be able to have a @this annotation associated with them.\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n+      if (!(pType == Token.FUNCTION ||\n+            pType == Token.EXPR_RESULT ||\n+            pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN)) {\n         return false;\n       }\n+\n+      // Traverse any function expression that is an operand of a logical\n+      // operator, as these functions may be used like macros.\n+      if (parent.getType() == Token.AND || parent.getType() == Token.OR) {\n+        Node otherOp = (n == parent.getFirstChild()) ? parent.getLastChild()\n+                                                      : parent.getFirstChild();\n+        return otherOp.isBoolean();\n+      }\n+\n+      // Avoid function expressions that are not the right-hand side of an\n+      // assignment or the target of a call expression. This avoids functions\n+      // that are never used, and reduces the risk of duplicate function warnings.\n+      if (parent.getType() != Token.ASSIGN && !NodeUtil.isExpressionResultUsed(parent)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}