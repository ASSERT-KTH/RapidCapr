{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        int numEscapedQuotes = 0; // Track the number of escaped quotes\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                numEscapedQuotes++;\n                if (numEscapedQuotes > MAX_NUM_ESCAPED_QUOTES) { // Check for excessive number of escaped quotes\n                    throw new IllegalArgumentException(\n                        \"Too many escaped quotes in pattern at position \" + pos.getIndex());\n                }\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                i = pos.getIndex() - 1; // Advance index position to skip escaped quote\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            default:\n                next(pos);\n                numEscapedQuotes = 0; // Reset the count of escaped quotes\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..c380dbc6 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,7 +414,7 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n@@ -422,12 +422,18 @@ public class ExtendedMessageFormat extends MessageFormat {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n+        int numEscapedQuotes = 0; // Track the number of escaped quotes\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n+                numEscapedQuotes++;\n+                if (numEscapedQuotes > MAX_NUM_ESCAPED_QUOTES) { // Check for excessive number of escaped quotes\n+                    throw new IllegalArgumentException(\n+                        \"Too many escaped quotes in pattern at position \" + pos.getIndex());\n+                }\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n                 pos.setIndex(i + ESCAPED_QUOTE.length());\n                 lastHold = pos.getIndex();\n+                i = pos.getIndex() - 1; // Advance index position to skip escaped quote\n                 continue;\n             }\n             switch (c[pos.getIndex()]) {\n@@ -437,11 +443,12 @@ public class ExtendedMessageFormat extends MessageFormat {\n                         pos.getIndex() - lastHold);\n             default:\n                 next(pos);\n+                numEscapedQuotes = 0; // Reset the count of escaped quotes\n             }\n         }\n         throw new IllegalArgumentException(\n                 \"Unterminated quoted string at position \" + start);\n-    }\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}