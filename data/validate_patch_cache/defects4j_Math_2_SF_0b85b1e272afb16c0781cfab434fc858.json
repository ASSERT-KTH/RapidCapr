{
    "patch": "public double getNumericalMean() {\n    int sampleSize = getSampleSize();\n    int numSuccesses = getNumberOfSuccesses();\n    int populationSize = getPopulationSize();\n    if (sampleSize < 0 || numSuccesses < 0 || populationSize < 0 || sampleSize > populationSize || numSuccesses > sampleSize || populationSize == 0) {\n        return Double.NaN;\n    }\n    double mean = ((double) sampleSize / (double) populationSize) * numSuccesses;\n    return (mean >= 0) ? mean : 0.0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..13f5f1cd2 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -264,9 +264,16 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * For population size {@code N}, number of successes {@code m}, and sample\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n-    public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+public double getNumericalMean() {\n+    int sampleSize = getSampleSize();\n+    int numSuccesses = getNumberOfSuccesses();\n+    int populationSize = getPopulationSize();\n+    if (sampleSize < 0 || numSuccesses < 0 || populationSize < 0 || sampleSize > populationSize || numSuccesses > sampleSize || populationSize == 0) {\n+        return Double.NaN;\n     }\n+    double mean = ((double) sampleSize / (double) populationSize) * numSuccesses;\n+    return (mean >= 0) ? mean : 0.0;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}