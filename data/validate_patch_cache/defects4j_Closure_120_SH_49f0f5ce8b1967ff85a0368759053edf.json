{
    "patch": "      int counter = 0;\n      Reference firstAssignment = null;\n      for (Reference ref : getReferences()) {\n        if (ref.isAssign() && !ref.isCompoundAssignment()) {\n          if (counter == 0) {\n            firstAssignment = ref;\n          }\n          counter++;\n        }\n      }\n      if (counter == 1) {\n        return firstAssignment;\n      }\n      return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7efa35bc 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      int counter = 0;\n+      Reference firstAssignment = null;\n+      for (Reference ref : getReferences()) {\n+        if (ref.isAssign() && !ref.isCompoundAssignment()) {\n+          if (counter == 0) {\n+            firstAssignment = ref;\n+          }\n+          counter++;\n+        }\n+      }\n+      if (counter == 1) {\n+        return firstAssignment;\n+      }\n+      return null;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}