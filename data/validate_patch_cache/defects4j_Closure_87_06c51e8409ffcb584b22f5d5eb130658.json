{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          if (NodeUtil.isFunctionExpression(maybeExpr)) {\n            Node fnNode = maybeExpr.getFirstChild();\n            if (fnNode.isArrowFunction()) {\n              return !fnNode.getLastChild().isTemplateLit();\n            } else if (fnNode.getChildCount() == 3) {\n              return !fnNode.getFirstChild().getNext().isTemplateLit();\n            } else if (fnNode.getFirstChild().getNext().isString()) {\n              // IE also has a bug with string concatenation. Don't\n              // fold a string that contains \"{\". See:\n              // http://blogs.msdn.com/b/ericlippert/archive/2003/09/12/52976.aspx\n              return fnNode.getFirstChild().getNext().getString().indexOf('{') == -1;\n            }\n          }\n          return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a89ebed2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -527,13 +527,24 @@ public class PeepholeSubstituteAlternateSyntax\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n+          // We only have to worry about methods with an implicit 'this'\n+          // param, or this doesn't happen.\n+          if (NodeUtil.isFunctionExpression(maybeExpr)) {\n+            Node fnNode = maybeExpr.getFirstChild();\n+            if (fnNode.isArrowFunction()) {\n+              return !fnNode.getLastChild().isTemplateLit();\n+            } else if (fnNode.getChildCount() == 3) {\n+              return !fnNode.getFirstChild().getNext().isTemplateLit();\n+            } else if (fnNode.getFirstChild().getNext().isString()) {\n+              // IE also has a bug with string concatenation. Don't\n+              // fold a string that contains \"{\". See:\n+              // http://blogs.msdn.com/b/ericlippert/archive/2003/09/12/52976.aspx\n+              return fnNode.getFirstChild().getNext().getString().indexOf('{') == -1;\n+            }\n+          }\n           return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}