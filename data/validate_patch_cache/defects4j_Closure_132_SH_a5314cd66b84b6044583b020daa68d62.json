{
    "patch": "              !mayHaveSideEffects(\n                  lhs,\n                  getChangeScopeRoot().getLastChild(),\n                  new CompilerOptions.LanguageMode(\n                      LanguageMode.Mode.ECMASCRIPT_NEXT,\n                      LanguageMode.FeatureSet.BARE_MINIMUM,\n                      true))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..b58f6cde 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              !mayHaveSideEffects(\n+                  lhs,\n+                  getChangeScopeRoot().getLastChild(),\n+                  new CompilerOptions.LanguageMode(\n+                      LanguageMode.Mode.ECMASCRIPT_NEXT,\n+                      LanguageMode.FeatureSet.BARE_MINIMUM,\n+                      true))) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}