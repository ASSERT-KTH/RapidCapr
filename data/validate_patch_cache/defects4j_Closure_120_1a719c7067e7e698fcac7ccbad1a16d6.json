{
    "patch": "      if (ref == null) {\n        return false;\n      }\n      // Make sure this assignment is not in a loop.\n      BasicBlock initBlock = ref.getBasicBlock();\n      for (BasicBlock block : getBasicBlockList()) {\n        if (!block.isFunction && !block.isLoop) {\n          continue;\n        }\n        BasicBlock currentBlock = block;\n        if (block.getFirstExecutionNode() == initBlock.getFirstExecutionNode()) {\n          initBlock = block;\n        } else {\n          if (block.isLoop && block.containsAssignmentTo(alias)) {\n            return false;\n          }\n          Set<BasicBlock> visited = Sets.newIdentityHashSet();\n          Set<BasicBlock> frontier = Sets.newHashSet(initBlock);\n          while (!frontier.isEmpty()) {\n            currentBlock = frontier.iterator().next();\n            frontier.remove(currentBlock);\n            if (currentBlock.isLoopHeader() && currentBlock.containsAssignmentTo(alias)) {\n              return false;\n            }\n            if (visited.add(currentBlock)) {\n              frontier.addAll(blockSuccessors(currentBlock));\n            }\n          }\n          visited.clear();\n        }\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0d54b28b 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,38 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null) {\n+        return false;\n+      }\n+      // Make sure this assignment is not in a loop.\n+      BasicBlock initBlock = ref.getBasicBlock();\n+      for (BasicBlock block : getBasicBlockList()) {\n+        if (!block.isFunction && !block.isLoop) {\n+          continue;\n+        }\n+        BasicBlock currentBlock = block;\n+        if (block.getFirstExecutionNode() == initBlock.getFirstExecutionNode()) {\n+          initBlock = block;\n+        } else {\n+          if (block.isLoop && block.containsAssignmentTo(alias)) {\n+            return false;\n+          }\n+          Set<BasicBlock> visited = Sets.newIdentityHashSet();\n+          Set<BasicBlock> frontier = Sets.newHashSet(initBlock);\n+          while (!frontier.isEmpty()) {\n+            currentBlock = frontier.iterator().next();\n+            frontier.remove(currentBlock);\n+            if (currentBlock.isLoopHeader() && currentBlock.containsAssignmentTo(alias)) {\n+              return false;\n+            }\n+            if (visited.add(currentBlock)) {\n+              frontier.addAll(blockSuccessors(currentBlock));\n+            }\n+          }\n+          visited.clear();\n+        }\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}