{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n    // Uses -2 to ensure there is something after the &# or &#x\n    if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if(firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            // Check there's more than just an x after the &#x\n            if(start >= seqEnd) {\n                return 0;\n            }\n        }\n\n        int end = start;\n        while(end < seqEnd && input.charAt(end) != ';') \n        {\n            // If we encounter a non-digit character in a decimal entity\n            // or a non-hexadecimal digit in a hex entity, we immediately\n            // return 0, ignoring the entity and treating it as part of the input.\n            if(isHex && !Character.isLetterOrDigit(input.charAt(end))) {\n                return 0;\n            } else if (!Character.isDigit(input.charAt(end))) {\n                return 0;\n            }\n            end++;\n        }\n\n        // If the entity is not properly terminated with a semicolon,\n        // we ignore it and treat it as an ordinary text.\n        if (end >= seqEnd || input.charAt(end) != ';') {\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if(isHex) {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch(NumberFormatException nfe) {\n            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n            return 0;\n        }\n\n        if(entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n        } else {\n            out.write(entityValue);\n        }\n\n\n        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n    }\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..28e7b0b9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,67 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n+    // Uses -2 to ensure there is something after the &# or &#x\n+    if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+        char firstChar = input.charAt(start);\n+        if(firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n \n-                // Check there's more than just an x after the &#\n-            }\n-\n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n+            // Check there's more than just an x after the &#x\n+            if(start >= seqEnd) {\n+                return 0;\n             }\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+        int end = start;\n+        while(end < seqEnd && input.charAt(end) != ';') \n+        {\n+            // If we encounter a non-digit character in a decimal entity\n+            // or a non-hexadecimal digit in a hex entity, we immediately\n+            // return 0, ignoring the entity and treating it as part of the input.\n+            if(isHex && !Character.isLetterOrDigit(input.charAt(end))) {\n+                return 0;\n+            } else if (!Character.isDigit(input.charAt(end))) {\n                 return 0;\n             }\n+            end++;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        // If the entity is not properly terminated with a semicolon,\n+        // we ignore it and treat it as an ordinary text.\n+        if (end >= seqEnd || input.charAt(end) != ';') {\n+            return 0;\n+        }\n+\n+        int entityValue;\n+        try {\n+            if(isHex) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n             }\n+        } catch(NumberFormatException nfe) {\n+            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            return 0;\n+        }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if(entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+        } else {\n+            out.write(entityValue);\n         }\n-        return 0;\n+\n+\n+        return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n     }\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<\u0080[\u009f]> but was:<\u0080[&#x9F;]>",
    "test_result": "FAIL"
}