{
    "patch": "      boolean allObjects = true;\n      ImmutableSet.Builder<JSType> builder = ImmutableSet.builder();\n      for (JSType alternate : this.alternates) {\n        JSType result = alternate.getGreatestSubtype(that);\n        if (!result.isBottom()) {\n          builder.add(result);\n        }\n        allObjects = allObjects && result.isObject();\n      }\n\n      ImmutableSet<JSType> intersection = builder.build();\n      switch (intersection.size()) {\n        case 0:\n          if (allObjects) {\n            return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n          } else {\n            return getNativeType(JSTypeNative.NO_TYPE);\n          }\n        case 1:\n          return intersection.iterator().next();\n        default:\n          return createUnionType(intersection);\n      }\n    } else if (that.isUnionType()) {\n      return that.getGreatestSubtype(this);\n    } else if (that.isAllType() || that.isUnknownType()) {\n      return that;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..75e0c38e 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,33 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+      boolean allObjects = true;\n+      ImmutableSet.Builder<JSType> builder = ImmutableSet.builder();\n+      for (JSType alternate : this.alternates) {\n+        JSType result = alternate.getGreatestSubtype(that);\n+        if (!result.isBottom()) {\n+          builder.add(result);\n         }\n+        allObjects = allObjects && result.isObject();\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n-    }\n-  }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n+      ImmutableSet<JSType> intersection = builder.build();\n+      switch (intersection.size()) {\n+        case 0:\n+          if (allObjects) {\n+            return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+          } else {\n+            return getNativeType(JSTypeNative.NO_TYPE);\n+          }\n+        case 1:\n+          return intersection.iterator().next();\n+        default:\n+          return createUnionType(intersection);\n       }\n+    } else if (that.isUnionType()) {\n+      return that.getGreatestSubtype(this);\n+    } else if (that.isAllType() || that.isUnknownType()) {\n+      return that;\n     }\n     return true;\n   }",
    "result_reason": "error: variable builder is already defined in method meet(JSType)",
    "test_result": "ERROR"
}