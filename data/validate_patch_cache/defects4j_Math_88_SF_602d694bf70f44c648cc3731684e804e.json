{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n\n    // Calculate the objective function value\n    double objective = 0;\n    for (int j = 0; j < tableau.getWidth() - 1; j++) {\n        if (tableau.getEntry(getNumObjectiveFunctions(), j) != 0) {\n            int row = getBasicRow(j);\n            if (row != null) {\n                objective += tableau.getEntry(getNumObjectiveFunctions(), j) * getEntry(row, getRhsOffset());\n            }\n        }\n    }\n\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            // if multiple variables can take a given value \n            // then we choose the first and set the rest equal to 0\n        if (basicRow != null && tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n            coefficients[i] =\n                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n        } else {\n            coefficients[i] = 0;\n        }\n    }\n\n    return new RealPointValuePair(coefficients, objective);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..e02350ade 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,29 +321,38 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n-                }\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+\n+    // Calculate the objective function value\n+    double objective = 0;\n+    for (int j = 0; j < tableau.getWidth() - 1; j++) {\n+        if (tableau.getEntry(getNumObjectiveFunctions(), j) != 0) {\n+            int row = getBasicRow(j);\n+            if (row != null) {\n+                objective += tableau.getEntry(getNumObjectiveFunctions(), j) * getEntry(row, getRhsOffset());\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+            // if multiple variables can take a given value \n+            // then we choose the first and set the rest equal to 0\n+        if (basicRow != null && tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n+            coefficients[i] =\n+                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                (restrictToNonNegative ? 0 : mostNegative);\n+        } else {\n+            coefficients[i] = 0;\n+        }\n+    }\n+\n+    return new RealPointValuePair(coefficients, objective);\n+}\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}