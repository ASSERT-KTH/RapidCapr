{
    "patch": "  private static Node computeFollowNode(\n          Node fromNode, Node node, ControlFlowAnalysis cfa, Set<Node> visitedNodes) {\n    visitedNodes.add(node);\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode())) {\n      return null;\n    }\n    switch (parent.getToken()) {\n      case IF:\n        return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n      case CASE:\n      case DEFAULT_CASE:\n        Node followNode = parent.getNext();\n        if (followNode != null) {\n          if (followNode.isBlock()) {\n            followNode = followNode.getFirstChild();\n          }\n          // Special case for empty default cases.\n          while (followNode.isEmpty() && followNode.getNext() != null) {\n            followNode = followNode.getNext();\n          }\n        }\n        return followNode != null ? followNode : computeFollowNode(fromNode, parent, cfa, visitedNodes);\n      case FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        }\n        // fall through.\n      case WHILE:\n      case DO:\n        return parent;\n      case TRY:\n        // Try's follow node is its finally block if it has one, or its next sibling otherwise.\n        Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n        if (finallyBlock != null) {\n          return computeFallThrough(finallyBlock);\n        }\n        return parent.getNext();\n    }\n    Node nextNode = node.getNext();\n    while ((nextNode == null) || (!nextNode.isScript() && nextNode.isEmpty())) {\n      node = parent;\n      parent = parent.getParent();\n      if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode())) {\n        return null;\n      }\n      switch (parent.getToken()) {\n        case IF:\n          nextNode = parent.getNext();\n          break;\n        case CASE:\n        case DEFAULT_CASE:\n          nextNode = parent.getNext();\n          if (nextNode != null && nextNode.isBlock()) {\n            nextNode = nextNode.getFirstChild();\n          }\n          break;\n        case FOR:\n          if (NodeUtil.isVanillaFor(parent)) {\n            nextNode = NodeUtil.getConditionExpression(parent).getNext();\n            break;\n          }\n          // fall through if it's a for-in.\n        case WHILE:\n        case DO:\n          nextNode = parent.getNext();\n          break;\n        case TRY:\n          finallyBlock = NodeUtil.getFinallyBlock(parent);\n          if (finallyBlock != null) {\n            return computeFallThrough(finallyBlock);\n          }\n          nextNode = parent.getNext();\n          break;\n      }\n    }\n\n    if (nextNode.isFunction()) {\n      nextNode = nextNode.getNext();\n    }\n\n    if (nextNode.isReturn() && nextNode.hasChildren()) {\n      return computeFollowNode(fromNode, nextNode.getFirstChild(), cfa, visitedNodes);\n    } else {\n      return nextNode;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4f1efd91 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -690,101 +690,90 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    * @param node The node that follow() should compute.\n    */\n   private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n+          Node fromNode, Node node, ControlFlowAnalysis cfa, Set<Node> visitedNodes) {\n+    visitedNodes.add(node);\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode())) {\n       return null;\n     }\n-\n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n-          } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n+    switch (parent.getToken()) {\n+      case IF:\n+        return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n+      case CASE:\n+      case DEFAULT_CASE:\n+        Node followNode = parent.getNext();\n+        if (followNode != null) {\n+          if (followNode.isBlock()) {\n+            followNode = followNode.getFirstChild();\n+          }\n+          // Special case for empty default cases.\n+          while (followNode.isEmpty() && followNode.getNext() != null) {\n+            followNode = followNode.getNext();\n           }\n-        } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n-      case Token.FOR:\n+        return followNode != null ? followNode : computeFollowNode(fromNode, parent, cfa, visitedNodes);\n+      case FOR:\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n-        } else {\n-          return parent.getFirstChild().getNext().getNext();\n         }\n-      case Token.WHILE:\n-      case Token.DO:\n+        // fall through.\n+      case WHILE:\n+      case DO:\n         return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n+      case TRY:\n+        // Try's follow node is its finally block if it has one, or its next sibling otherwise.\n+        Node finallyBlock = NodeUtil.getFinallyBlock(parent);\n+        if (finallyBlock != null) {\n+          return computeFallThrough(finallyBlock);\n+        }\n+        return parent.getNext();\n+    }\n+    Node nextNode = node.getNext();\n+    while ((nextNode == null) || (!nextNode.isScript() && nextNode.isEmpty())) {\n+      node = parent;\n+      parent = parent.getParent();\n+      if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode())) {\n+        return null;\n+      }\n+      switch (parent.getToken()) {\n+        case IF:\n+          nextNode = parent.getNext();\n+          break;\n+        case CASE:\n+        case DEFAULT_CASE:\n+          nextNode = parent.getNext();\n+          if (nextNode != null && nextNode.isBlock()) {\n+            nextNode = nextNode.getFirstChild();\n           }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+          break;\n+        case FOR:\n+          if (NodeUtil.isVanillaFor(parent)) {\n+            nextNode = NodeUtil.getConditionExpression(parent).getNext();\n+            break;\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n-            }\n+          // fall through if it's a for-in.\n+        case WHILE:\n+        case DO:\n+          nextNode = parent.getNext();\n+          break;\n+        case TRY:\n+          finallyBlock = NodeUtil.getFinallyBlock(parent);\n+          if (finallyBlock != null) {\n+            return computeFallThrough(finallyBlock);\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n+          nextNode = parent.getNext();\n+          break;\n+      }\n     }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n-\n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n+    if (nextNode.isFunction()) {\n+      nextNode = nextNode.getNext();\n     }\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+    if (nextNode.isReturn() && nextNode.hasChildren()) {\n+      return computeFollowNode(fromNode, nextNode.getFirstChild(), cfa, visitedNodes);\n     } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+      return nextNode;\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}