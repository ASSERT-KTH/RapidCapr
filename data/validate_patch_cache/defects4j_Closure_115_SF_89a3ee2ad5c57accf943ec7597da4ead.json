{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node body = NodeUtil.getFunctionBody(fnNode);\n    if (body == null) {\n      return CanInlineResult.NO;\n    }\n\n    boolean hasSideEffects = false;\n    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n      if (stmt.isReturn()) {\n        // Only function bodies that use the \"return\" statement can have side-effects.\n        // In those cases, we do not inline calls that might have side-effects. In some rare\n        // cases this prevents us from inlining something that would be safe to inline,\n        // but in those cases we would need to create and inline the var instead, which\n        // is not currently possible.\n        //\n        // Global code always has side effects.\n        hasSideEffects = stmt.hasChildren() ? NodeUtil.mayHaveSideEffects(stmt.getFirstChild()) : true;\n        break;\n      }\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getSecondChild();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n          if (NodeUtil.mayEffectMutableState(cArg)\n              && NodeUtil.getNameReferenceCount(body, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        }\n        fnParam = fnParam.getNext();\n      }\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..de54c92c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -692,18 +692,28 @@ class FunctionInjector {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node body = NodeUtil.getFunctionBody(fnNode);\n+    if (body == null) {\n+      return CanInlineResult.NO;\n+    }\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n+    for (Node stmt = body.getFirstChild(); stmt != null; stmt = stmt.getNext()) {\n       if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+        // Only function bodies that use the \"return\" statement can have side-effects.\n+        // In those cases, we do not inline calls that might have side-effects. In some rare\n+        // cases this prevents us from inlining something that would be safe to inline,\n+        // but in those cases we would need to create and inline the var instead, which\n+        // is not currently possible.\n+        //\n+        // Global code always has side effects.\n+        hasSideEffects = stmt.hasChildren() ? NodeUtil.mayHaveSideEffects(stmt.getFirstChild()) : true;\n+        break;\n       }\n     }\n+\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node cArg = callNode.getSecondChild();\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n@@ -721,33 +731,22 @@ class FunctionInjector {\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n             return CanInlineResult.NO;\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n+          if (NodeUtil.mayEffectMutableState(cArg)\n+              && NodeUtil.getNameReferenceCount(body, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n         }\n-\n-        // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n       if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+        if (NodeUtil.mayHaveSideEffects(cArg)) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}