{
    "patch": "public synchronized XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    XYDataItem overwritten = null;\n    int itemCount = getItemCount();\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        if (this.autoSort) {\n            // index is negative means no exact match was found.\n            // In such cases, binary search returns -insertionPosition - 1\n            // We need to insert new data item  at insertion position.\n            int insertionIndex = -index - 1;\n            if (insertionIndex == 0) {\n                this.data.add(insertionIndex, new XYDataItem(x, y));\n            }\n            else if (insertionIndex == itemCount) {\n                if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n                            itemCount - 1)).getX()) < 0) {\n                    this.data.add(insertionIndex, new XYDataItem(x, y));\n                }\n                else {\n                    while (insertionIndex > 0 \n                            && this.comparator.compare(x, ((XYDataItem) this.data.get(\n                                    insertionIndex - 1)).getX()) < 0) {\n                        --insertionIndex;\n                    }\n                    this.data.add(insertionIndex, new XYDataItem(x, y));\n                }\n            }\n            else {\n                boolean iterate = true;\n                while (iterate) {\n                    if (insertionIndex == itemCount) {\n                        if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n                                    itemCount - 1)).getX()) < 0) {\n                            this.data.add(insertionIndex, new XYDataItem(x, y));\n                            iterate = false;\n                        }\n                        else {\n                            itemCount--;\n                        }\n                    }\n                    else if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n                                    insertionIndex)).getX()) < 0) {\n                        if (insertionIndex > 0) {\n                            if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n                                            insertionIndex - 1)).getX()) >= 0) {\n                                this.data.add(insertionIndex, new XYDataItem(x, y));\n                                iterate = false;\n                            }\n                            else {\n                                insertionIndex--;\n                            }\n                        }\n                        else {\n                            this.data.add(insertionIndex, new XYDataItem(x, y));\n                            iterate = false;\n                        }\n                    }\n                    else if (this.allowDuplicateXValues) {\n                        XYDataItem existingItem = (XYDataItem) this.data.get(insertionIndex);\n                        if (x.equals(existingItem.getX())) {\n                            overwritten = (XYDataItem) existingItem.clone();\n                            overwritten.setY(y);\n                            this.data.set(insertionIndex, overwritten);\n                            iterate = false;\n                        }\n                        else {\n                            insertionIndex++;\n                        }\n                    }\n                    else {\n                        throw new SeriesException(\"X-value already exists.\");\n                    }\n                }\n            }\n        }\n        else {\n            // if the series is empty, we just add the value to the list...\n            if (this.data.isEmpty()) {\n                this.data.add(new XYDataItem(x, y));\n            }\n            else {\n                // do we need to add or replace?\n                int size = this.data.size();\n                boolean added = false;\n                for (int i = 0; i < size; i++) {\n                    XYDataItem item = (XYDataItem) this.data.get(i);\n                    if (this.comparator.compare(x, item.getX()) == 0) {\n                        if (this.allowDuplicateXValues) {\n                            overwritten = (XYDataItem) item.clone();\n                            overwritten.setY(y);\n                            this.data.set(i, overwritten);\n                        }\n                        else {\n                            throw new SeriesException(\"X-value already exists.\");\n                        }\n                    }\n                    else if (this.comparator.compare(x, item.getX()) < 0) {\n                        this.data.add(i, new XYDataItem(x, y));\n                        added = true;\n                        break;\n                    }\n                }\n                if (!added) {\n                    this.data.add(new XYDataItem(x, y));\n                }\n                // remove old data items if we exceed the maximum count\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n            }\n        }\n    }\n    // fire the appropriate event...\n    if (overwritten != null) {\n        fireSeriesChanged();\n    }\n    else if (getItemCount() > this.maximumItemCount) {\n        XYDataItem item = (XYDataItem) this.data.remove(0);\n        removed(item.getX(), item.getY());\n        fireSeriesChanged();\n    }\n    else {\n        added(x, y);\n        fireSeriesChanged();\n    }\n    return overwritten;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..018e9b8 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,146 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public synchronized XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+    XYDataItem overwritten = null;\n+    int itemCount = getItemCount();\n+    int index = indexOf(x);\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        try {\n+            overwritten = (XYDataItem) existing.clone();\n+        }\n+        catch (CloneNotSupportedException e) {\n+            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+        }\n+        existing.setY(y);\n+    }\n+    else {\n+        if (this.autoSort) {\n+            // index is negative means no exact match was found.\n+            // In such cases, binary search returns -insertionPosition - 1\n+            // We need to insert new data item  at insertion position.\n+            int insertionIndex = -index - 1;\n+            if (insertionIndex == 0) {\n+                this.data.add(insertionIndex, new XYDataItem(x, y));\n+            }\n+            else if (insertionIndex == itemCount) {\n+                if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n+                            itemCount - 1)).getX()) < 0) {\n+                    this.data.add(insertionIndex, new XYDataItem(x, y));\n+                }\n+                else {\n+                    while (insertionIndex > 0 \n+                            && this.comparator.compare(x, ((XYDataItem) this.data.get(\n+                                    insertionIndex - 1)).getX()) < 0) {\n+                        --insertionIndex;\n+                    }\n+                    this.data.add(insertionIndex, new XYDataItem(x, y));\n+                }\n+            }\n+            else {\n+                boolean iterate = true;\n+                while (iterate) {\n+                    if (insertionIndex == itemCount) {\n+                        if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n+                                    itemCount - 1)).getX()) < 0) {\n+                            this.data.add(insertionIndex, new XYDataItem(x, y));\n+                            iterate = false;\n+                        }\n+                        else {\n+                            itemCount--;\n+                        }\n+                    }\n+                    else if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n+                                    insertionIndex)).getX()) < 0) {\n+                        if (insertionIndex > 0) {\n+                            if (this.comparator.compare(x, ((XYDataItem) this.data.get(\n+                                            insertionIndex - 1)).getX()) >= 0) {\n+                                this.data.add(insertionIndex, new XYDataItem(x, y));\n+                                iterate = false;\n+                            }\n+                            else {\n+                                insertionIndex--;\n+                            }\n+                        }\n+                        else {\n+                            this.data.add(insertionIndex, new XYDataItem(x, y));\n+                            iterate = false;\n+                        }\n+                    }\n+                    else if (this.allowDuplicateXValues) {\n+                        XYDataItem existingItem = (XYDataItem) this.data.get(insertionIndex);\n+                        if (x.equals(existingItem.getX())) {\n+                            overwritten = (XYDataItem) existingItem.clone();\n+                            overwritten.setY(y);\n+                            this.data.set(insertionIndex, overwritten);\n+                            iterate = false;\n+                        }\n+                        else {\n+                            insertionIndex++;\n+                        }\n+                    }\n+                    else {\n+                        throw new SeriesException(\"X-value already exists.\");\n+                    }\n+                }\n+            }\n+        }\n+        else {\n+            // if the series is empty, we just add the value to the list...\n+            if (this.data.isEmpty()) {\n+                this.data.add(new XYDataItem(x, y));\n+            }\n+            else {\n+                // do we need to add or replace?\n+                int size = this.data.size();\n+                boolean added = false;\n+                for (int i = 0; i < size; i++) {\n+                    XYDataItem item = (XYDataItem) this.data.get(i);\n+                    if (this.comparator.compare(x, item.getX()) == 0) {\n+                        if (this.allowDuplicateXValues) {\n+                            overwritten = (XYDataItem) item.clone();\n+                            overwritten.setY(y);\n+                            this.data.set(i, overwritten);\n+                        }\n+                        else {\n+                            throw new SeriesException(\"X-value already exists.\");\n+                        }\n+                    }\n+                    else if (this.comparator.compare(x, item.getX()) < 0) {\n+                        this.data.add(i, new XYDataItem(x, y));\n+                        added = true;\n+                        break;\n+                    }\n+                }\n+                if (!added) {\n+                    this.data.add(new XYDataItem(x, y));\n+                }\n+                // remove old data items if we exceed the maximum count\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+            }\n+        }\n+    }\n+    // fire the appropriate event...\n+    if (overwritten != null) {\n+        fireSeriesChanged();\n+    }\n+    else if (getItemCount() > this.maximumItemCount) {\n+        XYDataItem item = (XYDataItem) this.data.remove(0);\n+        removed(item.getX(), item.getY());\n+        fireSeriesChanged();\n+    }\n+    else {\n+        added(x, y);\n+        fireSeriesChanged();\n+    }\n+    return overwritten;\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}