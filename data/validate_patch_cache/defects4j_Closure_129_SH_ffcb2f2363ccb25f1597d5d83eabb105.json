{
    "patch": "if (!n.hasSideEffect() && !NodeUtil.mayHaveSideEffects(n)) {\n  // Ignore calls that have no side-effects.\n} else if (NodeUtil.isGet(first) && NodeUtil.isTypeOf(first.getFirstChild(), Token.EXPORT)) {\n  // An exported property call. For now just continue to treat it as a\n  // regular call (because non-property-call expressions cannot be exported).\n  // In the future we may want to track property calls separately.\n} else if (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (first.isName()\n    && \"eval\".equals(first.getString())\n    && !n.getBooleanProp(Node.NEW_TARGET)) {\n  Node parent = n.getParent();\n  if (parent.isExprResult()) {\n    parent.putBooleanProp(Node.DIRECT_EVAL, true);\n  } else {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..ebbdacc0 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,28 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+if (!n.hasSideEffect() && !NodeUtil.mayHaveSideEffects(n)) {\n+  // Ignore calls that have no side-effects.\n+} else if (NodeUtil.isGet(first) && NodeUtil.isTypeOf(first.getFirstChild(), Token.EXPORT)) {\n+  // An exported property call. For now just continue to treat it as a\n+  // regular call (because non-property-call expressions cannot be exported).\n+  // In the future we may want to track property calls separately.\n+} else if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (first.isName()\n+    && \"eval\".equals(first.getString())\n+    && !n.getBooleanProp(Node.NEW_TARGET)) {\n+  Node parent = n.getParent();\n+  if (parent.isExprResult()) {\n+    parent.putBooleanProp(Node.DIRECT_EVAL, true);\n+  } else {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}