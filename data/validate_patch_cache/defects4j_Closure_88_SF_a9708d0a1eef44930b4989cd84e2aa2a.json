{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // assignment operator\n        if (NodeUtil.isAssignmentOp(n.getParent())) {\n          Node nextSibling = n.getNext();\n          while (nextSibling != null) {\n            if (mayHaveSideEffects(nextSibling)) {\n              return VariableLiveness.MAYBE_LIVE;\n            }\n            nextSibling = nextSibling.getNext();\n          }\n          return VariableLiveness.KILL;\n        } else {\n          return VariableLiveness.READ; // variable is a function parameter.\n        }\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    boolean subExpressionMayBeLive = false;\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state == VariableLiveness.MAYBE_LIVE) {\n          subExpressionMayBeLive = true;\n        } else if (state == VariableLiveness.KILL) {\n          return VariableLiveness.KILL; // Whole expression is killed.\n        }\n      }\n    }\n\n    return subExpressionMayBeLive\n        ? VariableLiveness.MAYBE_LIVE : VariableLiveness.DEAD;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..7fb6750a 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,43 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n+private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+        // assignment operator\n+        if (NodeUtil.isAssignmentOp(n.getParent())) {\n+          Node nextSibling = n.getNext();\n+          while (nextSibling != null) {\n+            if (mayHaveSideEffects(nextSibling)) {\n+              return VariableLiveness.MAYBE_LIVE;\n+            }\n+            nextSibling = nextSibling.getNext();\n+          }\n+          return VariableLiveness.KILL;\n+        } else {\n+          return VariableLiveness.READ; // variable is a function parameter.\n+        }\n       } else {\n         return VariableLiveness.READ;\n       }\n     }\n \n+    boolean subExpressionMayBeLive = false;\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        if (state == VariableLiveness.MAYBE_LIVE) {\n+          subExpressionMayBeLive = true;\n+        } else if (state == VariableLiveness.KILL) {\n+          return VariableLiveness.KILL; // Whole expression is killed.\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+\n+    return subExpressionMayBeLive\n+        ? VariableLiveness.MAYBE_LIVE : VariableLiveness.DEAD;\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}