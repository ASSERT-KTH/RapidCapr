{
    "patch": "case REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.    \n    double dx = x1 - x0;\n    if (fx * f0 < 0) {\n        x1 = x;\n        f1 = fx;\n    } else if (fx * f1 < 0) {\n        x0 = x1;\n        x1 = x;\n        f0 = f1;\n        f1 = fx;\n    } else {\n        throw new RuntimeException(\"Bug in Regula Falsi solver: \" +\n                        \"function values at endpoints have the same sign, \" +\n                        \"should not happen with correct bracketing\");\n    }\n    if (FastMath.abs(dx) < 0.005 * FastMath.max(FastMath.abs(x0), FastMath.abs(x1))) {\n        throw new ConvergenceException(\n                LocalizedFormats.FAILED_BRACKETING,\n                x0, x1, fx,\n                getMaxFunctionEvaluations());\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..1063f2cee 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,30 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.    \n+    double dx = x1 - x0;\n+    if (fx * f0 < 0) {\n+        x1 = x;\n+        f1 = fx;\n+    } else if (fx * f1 < 0) {\n+        x0 = x1;\n+        x1 = x;\n+        f0 = f1;\n+        f1 = fx;\n+    } else {\n+        throw new RuntimeException(\"Bug in Regula Falsi solver: \" +\n+                        \"function values at endpoints have the same sign, \" +\n+                        \"should not happen with correct bracketing\");\n+    }\n+    if (FastMath.abs(dx) < 0.005 * FastMath.max(FastMath.abs(x0), FastMath.abs(x1))) {\n+        throw new ConvergenceException(\n+                LocalizedFormats.FAILED_BRACKETING,\n+                x0, x1, fx,\n+                getMaxFunctionEvaluations());\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}