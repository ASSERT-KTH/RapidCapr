{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null || y == null) {\n        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n    }\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // If auto-sort not enabled and x already exists in series and duplicate values not allowed, update the y value\n        XYDataItem existingItem = (XYDataItem) this.data.get(index);\n        if (!existingItem.getY().equals(y)) { // Update y value if different\n            XYDataItem overwrittenItem = new XYDataItem(existingItem.getX(), existingItem.getY());\n            existingItem.setY(y);\n            fireSeriesChanged();\n            return overwrittenItem;\n        } else {\n            return existingItem;\n        }\n    } else {\n        // Create a new data item with x and y and add to appropriate position\n        XYDataItem newItem = new XYDataItem(x, y);\n        if (this.autoSort) {\n            // If auto-sort is enabled, use binary search to find the insertion index\n            int insertIndex = Collections.binarySearch(this.data, newItem);\n            if (insertIndex >= 0 && !this.allowDuplicateXValues) {\n                // If x value already exists and duplicate x values not allowed, replace existing item\n                XYDataItem existingItem = (XYDataItem) this.data.get(insertIndex);\n                if (!existingItem.getY().equals(y)) { // Replace if y values are different\n                    this.data.set(insertIndex, newItem);\n                    fireSeriesChanged();\n                    return existingItem;\n                } else {\n                    return existingItem;\n                }\n            } else {\n                if (insertIndex < 0) {\n                    // If x value not found, convert binary search result to insertion point\n                    insertIndex = -(insertIndex + 1);\n                }\n                if (!this.allowDuplicateXValues) {\n                    // If duplicate x values not allowed, add new item at specified index\n                    this.data.add(insertIndex, newItem);\n                } else {\n                    // If duplicate x values allowed, add new item directly after the last item with the same x value\n                    while (insertIndex < this.data.size() && ((XYDataItem) this.data.get(insertIndex)).getX().equals(newItem.getX())) {\n                        insertIndex++;\n                    }\n                    this.data.add(insertIndex, newItem);\n                }\n            }\n        } else {\n            // If auto-sort is not enabled, add item to end of series\n            this.data.add(newItem);\n            if (this.data.size() > this.maximumItemCount) {\n                // If maximum item count exceeded, remove earliest item\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..f137fc8 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,66 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null || y == null) {\n+        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n+    }\n+    int index = indexOf(x);\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        // If auto-sort not enabled and x already exists in series and duplicate values not allowed, update the y value\n+        XYDataItem existingItem = (XYDataItem) this.data.get(index);\n+        if (!existingItem.getY().equals(y)) { // Update y value if different\n+            XYDataItem overwrittenItem = new XYDataItem(existingItem.getX(), existingItem.getY());\n+            existingItem.setY(y);\n+            fireSeriesChanged();\n+            return overwrittenItem;\n+        } else {\n+            return existingItem;\n+        }\n+    } else {\n+        // Create a new data item with x and y and add to appropriate position\n+        XYDataItem newItem = new XYDataItem(x, y);\n+        if (this.autoSort) {\n+            // If auto-sort is enabled, use binary search to find the insertion index\n+            int insertIndex = Collections.binarySearch(this.data, newItem);\n+            if (insertIndex >= 0 && !this.allowDuplicateXValues) {\n+                // If x value already exists and duplicate x values not allowed, replace existing item\n+                XYDataItem existingItem = (XYDataItem) this.data.get(insertIndex);\n+                if (!existingItem.getY().equals(y)) { // Replace if y values are different\n+                    this.data.set(insertIndex, newItem);\n+                    fireSeriesChanged();\n+                    return existingItem;\n+                } else {\n+                    return existingItem;\n+                }\n+            } else {\n+                if (insertIndex < 0) {\n+                    // If x value not found, convert binary search result to insertion point\n+                    insertIndex = -(insertIndex + 1);\n+                }\n+                if (!this.allowDuplicateXValues) {\n+                    // If duplicate x values not allowed, add new item at specified index\n+                    this.data.add(insertIndex, newItem);\n+                } else {\n+                    // If duplicate x values allowed, add new item directly after the last item with the same x value\n+                    while (insertIndex < this.data.size() && ((XYDataItem) this.data.get(insertIndex)).getX().equals(newItem.getX())) {\n+                        insertIndex++;\n+                    }\n+                    this.data.add(insertIndex, newItem);\n+                }\n+            }\n+        } else {\n+            // If auto-sort is not enabled, add item to end of series\n+            this.data.add(newItem);\n+            if (this.data.size() > this.maximumItemCount) {\n+                // If maximum item count exceeded, remove earliest item\n+                this.data.remove(0);\n+            }\n+        }\n+        fireSeriesChanged();\n+        return null;\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}