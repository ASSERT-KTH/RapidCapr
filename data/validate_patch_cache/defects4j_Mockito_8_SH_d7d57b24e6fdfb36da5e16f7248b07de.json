{
    "patch": "I apologize for the error. Here is the complete corrected code:\n```\nprivate void resolveActualTypeArguments(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n            if (typeVar.getName().equals(typeParameter.getName())) {\n                contextualActualTypeParameters.put(typeParameter, typeVar);\n            } else {\n                Type resolvedType = resolveTypeVariable(typeVar, contextualActualTypeParameters);\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            }\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}\n```",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..a16b7895a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,35 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+I apologize for the error. Here is the complete corrected code:\n+```\n+private void resolveActualTypeArguments(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) classType;\n+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable<?> typeParameter = typeParameters[i];\n+        Type actualTypeArgument = actualTypeArguments[i];\n+\n+        if (actualTypeArgument instanceof WildcardType) {\n+            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+        } else if (actualTypeArgument instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) actualTypeArgument;\n+            if (typeVar.getName().equals(typeParameter.getName())) {\n+                contextualActualTypeParameters.put(typeParameter, typeVar);\n+            } else {\n+                Type resolvedType = resolveTypeVariable(typeVar, contextualActualTypeParameters);\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            }\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+}\n+```\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}