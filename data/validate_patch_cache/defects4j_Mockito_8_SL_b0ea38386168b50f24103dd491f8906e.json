{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable) {\n                Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n                if (type != null) {\n                    Type[] types = new Type[1];\n                    types[0] = type;\n                    try {\n                        Class<?> clazz = mockitoCore.mockClass(types, null);\n                        Object mocked = mockMaker.createMock(MockCreationSettings.ofType(clazz).build());\n                        contextualActualTypeParameters.put(typeParameter, clazz);\n                    } catch (Exception e) {\n                        throw new MockitoException(\"Problems mocking type parameter.\", e);\n                    }\n                }\n            }``",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..655d038b8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,20 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+                Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n+                if (type != null) {\n+                    Type[] types = new Type[1];\n+                    types[0] = type;\n+                    try {\n+                        Class<?> clazz = mockitoCore.mockClass(types, null);\n+                        Object mocked = mockMaker.createMock(MockCreationSettings.ofType(clazz).build());\n+                        contextualActualTypeParameters.put(typeParameter, clazz);\n+                    } catch (Exception e) {\n+                        throw new MockitoException(\"Problems mocking type parameter.\", e);\n+                    }\n+                }\n+            }``\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}