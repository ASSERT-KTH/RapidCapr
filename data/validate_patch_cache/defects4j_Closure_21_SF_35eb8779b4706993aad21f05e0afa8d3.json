{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() || n.isComma()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    // Do not try to remove a block or an expr result. This is already handled when\n    // we visit the child. Also, don't remove JSDoc information from QualifiedNames.\n    if (n.isExprResult() || (n.isQualifiedName() && n.getJSDocInfo() != null)) {\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    // Do not remove the last expression in a comma expression.\n    if (parent.getType() == Token.COMMA) {\n        if (isResultUsed) {\n            return;\n        }\n\n        if (n == parent.getLastChild()) {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) {\n                    continue;\n                }\n\n                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n                    return;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        // Do not remove a statement that is either the first thing in 'for' test, or\n        // it's one of the two substatements in a for..in statement\n        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n                (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n            return;\n        }\n    }\n\n    // Do not remove statements that contain labels or loop control flow.\n    if (NodeUtil.isContinue(n) || NodeUtil.isBreak(n) ||\n            NodeUtil.isLabel(n) || NodeUtil.isReturn(n) || NodeUtil.isThrow(n)) {\n        return;\n    }\n\n    if (isResultUsed) {\n        // Check if this expression is a single variable declaration. If it is,\n        // make sure it has an initializer\n        if (n.isVar() && n.hasOneChild() && n.getFirstChild().hasOneChild()) {\n            Node varNode = n.getFirstChild();\n            Node nameNode = varNode.getFirstChild();\n            if (!nameNode.hasChildren()) {\n                return; // It is not a declaration.\n            }\n\n            Node valueNode = nameNode.getLastChild();\n            if (valueNode == null || valueNode.isBlank() || valueNode.isEmpty()) {\n                return; // It is not initialized.\n            }\n        }\n    }\n\n    // Do not remove nodes that modify 'arguments'.\n    if (NodeUtil.isGet(n) && \"arguments\".equals(n.getLastChild().getString())) {\n        return;\n    }\n\n    // Do not warn about special functions, which have other non side effect uses.\n    if (!t.getCompiler().getLifeCycleStage().isNormalized() &&\n            NodeUtil.isPrototypePropertyDeclaration(n.getParent()) &&\n            (NodeUtil.isPropertyTest(compiler, n) ||\n                    NodeUtil.isPropertyTest(compiler, n.getParent()))) {\n        // We don't want to remove a prototype property when there's nothing else\n        // going on because such an object is still useful for donating properties.\n        return;\n    }\n\n    // We can't remove 'debugger'.\n    if (n.getType() == Token.DEBUGGER) {\n        return;\n    }\n\n    // We currently don't understand the full semantics of FUNCTIONs yet.\n    if (n.isFunction()) {\n        return;\n    }\n\n    // We can't remove strings representing directive prologues.\n    if (n.isString()) {\n        for (Node ancestor : parent.getAncestors()) {\n            if (Token.BLOCK == ancestor.getType() && ancestor.isFunction()) {\n                // if the string is the first thing in a block function, it may\n                // be a directive prologue, and removing it would change semantics.\n                if (n == parent.getFirstChild()) {\n                    return;\n                }\n                // some script idioms require statements like \"foo();'use strict';\"\n                // thus we shouldn't remove any string statements which might\n                // be directive prologues.\n                // strictness might have been enabled with the string literal\n                if (n.isString() && NodeUtil.isUseStrictDirective(n.getString())) {\n                    return;\n                }\n\n                // If the string is not the first thing in a block function, then it doesn't\n                // change semantics if we remove it. So it is not necessary to check if it's\n                // a directive prologue.\n                break;\n            } else if (Token.SCRIPT == ancestor.getType()) {\n                break;\n            }\n        }\n    }\n\n    if (isResultUsed\n            ? !NodeUtil.mayHaveSideEffects(n, t.getCompiler()) : !mayImpactControlFlow(n)) {\n        String msg;\n\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\"\n                    + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n        } else {\n            msg = \"This code lacks side-effects. Is there a bug?\";\n        }\n\n        t.getCompiler().report(\n                t.makeError(n, level, USELESS_CODE_ERROR, msg));\n        safeSetInGuardedBlock(n);\n\n        if (!NodeUtil.isStatement(n)) {\n            problemNodes.add(n);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..bff77b26 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,71 +81,153 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+public void visit(NodeTraversal t, Node n, Node parent) {\n     // VOID nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+    if (n.isEmpty() || n.isComma()) {\n+        return;\n     }\n \n     if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n+        return;\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n+    // Do not try to remove a block or an expr result. This is already handled when\n+    // we visit the child. Also, don't remove JSDoc information from QualifiedNames.\n+    if (n.isExprResult() || (n.isQualifiedName() && n.getJSDocInfo() != null)) {\n+        return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+    // Do not remove the last expression in a comma expression.\n     if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+        if (isResultUsed) {\n+            return;\n+        }\n+\n+        if (n == parent.getLastChild()) {\n+            for (Node an : parent.getAncestors()) {\n+                int ancestorType = an.getType();\n+                if (ancestorType == Token.COMMA) {\n+                    continue;\n+                }\n+\n+                if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+                    return;\n+                } else {\n+                    break;\n+                }\n+            }\n         }\n-      }\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+        // Do not remove a statement that is either the first thing in 'for' test, or\n+        // it's one of the two substatements in a for..in statement\n+        if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n+                (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+            return;\n+        }\n+    }\n+\n+    // Do not remove statements that contain labels or loop control flow.\n+    if (NodeUtil.isContinue(n) || NodeUtil.isBreak(n) ||\n+            NodeUtil.isLabel(n) || NodeUtil.isReturn(n) || NodeUtil.isThrow(n)) {\n         return;\n-      }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+    if (isResultUsed) {\n+        // Check if this expression is a single variable declaration. If it is,\n+        // make sure it has an initializer\n+        if (n.isVar() && n.hasOneChild() && n.getFirstChild().hasOneChild()) {\n+            Node varNode = n.getFirstChild();\n+            Node nameNode = varNode.getFirstChild();\n+            if (!nameNode.hasChildren()) {\n+                return; // It is not a declaration.\n+            }\n+\n+            Node valueNode = nameNode.getLastChild();\n+            if (valueNode == null || valueNode.isBlank() || valueNode.isEmpty()) {\n+                return; // It is not initialized.\n+            }\n+        }\n     }\n-  }\n+\n+    // Do not remove nodes that modify 'arguments'.\n+    if (NodeUtil.isGet(n) && \"arguments\".equals(n.getLastChild().getString())) {\n+        return;\n+    }\n+\n+    // Do not warn about special functions, which have other non side effect uses.\n+    if (!t.getCompiler().getLifeCycleStage().isNormalized() &&\n+            NodeUtil.isPrototypePropertyDeclaration(n.getParent()) &&\n+            (NodeUtil.isPropertyTest(compiler, n) ||\n+                    NodeUtil.isPropertyTest(compiler, n.getParent()))) {\n+        // We don't want to remove a prototype property when there's nothing else\n+        // going on because such an object is still useful for donating properties.\n+        return;\n+    }\n+\n+    // We can't remove 'debugger'.\n+    if (n.getType() == Token.DEBUGGER) {\n+        return;\n+    }\n+\n+    // We currently don't understand the full semantics of FUNCTIONs yet.\n+    if (n.isFunction()) {\n+        return;\n+    }\n+\n+    // We can't remove strings representing directive prologues.\n+    if (n.isString()) {\n+        for (Node ancestor : parent.getAncestors()) {\n+            if (Token.BLOCK == ancestor.getType() && ancestor.isFunction()) {\n+                // if the string is the first thing in a block function, it may\n+                // be a directive prologue, and removing it would change semantics.\n+                if (n == parent.getFirstChild()) {\n+                    return;\n+                }\n+                // some script idioms require statements like \"foo();'use strict';\"\n+                // thus we shouldn't remove any string statements which might\n+                // be directive prologues.\n+                // strictness might have been enabled with the string literal\n+                if (n.isString() && NodeUtil.isUseStrictDirective(n.getString())) {\n+                    return;\n+                }\n+\n+                // If the string is not the first thing in a block function, then it doesn't\n+                // change semantics if we remove it. So it is not necessary to check if it's\n+                // a directive prologue.\n+                break;\n+            } else if (Token.SCRIPT == ancestor.getType()) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (isResultUsed\n+            ? !NodeUtil.mayHaveSideEffects(n, t.getCompiler()) : !mayImpactControlFlow(n)) {\n+        String msg;\n+\n+        if (n.isString()) {\n+            msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (isSimpleOp) {\n+            msg = \"The result of the '\"\n+                    + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n+        } else {\n+            msg = \"This code lacks side-effects. Is there a bug?\";\n+        }\n+\n+        t.getCompiler().report(\n+                t.makeError(n, level, USELESS_CODE_ERROR, msg));\n+        safeSetInGuardedBlock(n);\n+\n+        if (!NodeUtil.isStatement(n)) {\n+            problemNodes.add(n);\n+        }\n+    }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}