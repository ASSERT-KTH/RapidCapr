{
    "patch": "      if (name.type != Name.Type.GET &&\n          name.type != Name.Type.SET &&\n          name.type != Name.Type.EXPORT &&\n          name.type != Name.Type.EXPORT_DEFAULT &&\n          name.aliasingGets == 0 &&\n          name.globalSets == 1 &&\n          name.localSets == 0 &&\n          !name.isBleedingFunctionName()) {\n        // {@code name} meets condition (a).\n\n        if (name.props != null) {\n          // Add all of {@code name}'s children to the worklist, since they\n          // meet condition (a).\n          workList.addAll(name.props);\n        }\n\n        if (name.aliases != null) {\n          // Try to inline all of {@code name}'s local aliases.\n          for (Ref ref : name.aliases) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n              if (inlineAliasIfPossible(ref, namespace)) {\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..ab2f630c 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,33 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.type != Name.Type.GET &&\n+          name.type != Name.Type.SET &&\n+          name.type != Name.Type.EXPORT &&\n+          name.type != Name.Type.EXPORT_DEFAULT &&\n+          name.aliasingGets == 0 &&\n+          name.globalSets == 1 &&\n+          name.localSets == 0 &&\n+          !name.isBleedingFunctionName()) {\n+        // {@code name} meets condition (a).\n+\n+        if (name.props != null) {\n+          // Add all of {@code name}'s children to the worklist, since they\n+          // meet condition (a).\n+          workList.addAll(name.props);\n+        }\n+\n+        if (name.aliases != null) {\n+          // Try to inline all of {@code name}'s local aliases.\n+          for (Ref ref : name.aliases) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+              if (inlineAliasIfPossible(ref, namespace)) {\n+                name.removeRef(ref);\n+              }\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}