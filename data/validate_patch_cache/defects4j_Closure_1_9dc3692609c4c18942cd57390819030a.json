{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node fnNode = fnScope.getRootNode();\n  Preconditions.checkState(fnNode.isFunction());\n  if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n\n  Node argList = getFunctionArgList(fnNode);\n  List<Node> unusedArgs = new ArrayList<>();\n  boolean modifyCallers = modifyCallSites\n      && callSiteOptimizer.canModifyCallers(fnNode);\n  if (!modifyCallers) {\n    boolean dropArgs = true;\n    for (Node arg = argList.getFirstChild(); arg != null;\n        arg = arg.getNext()) {\n      Var v = fnScope.getVar(arg.getString());\n      if (v == null || !referenced.contains(v)) {\n        unusedArgs.add(arg);\n      } else {\n        dropArgs = false;\n        if (!unusedArgs.isEmpty()) {\n          // Remove unused arguments that appeared before this one.\n          for (Node unusedArg : unusedArgs) {\n            argList.removeChild(unusedArg);\n            compiler.reportCodeChange();\n          }\n          unusedArgs.clear();\n        }\n      }\n    }\n\n    if (dropArgs && !unusedArgs.isEmpty()) {\n      // All arguments are unused. Remove all of them.\n      for (Node unusedArg : unusedArgs) {\n        argList.removeChild(unusedArg);\n      }\n      unusedArgs.clear();\n      compiler.reportCodeChange();\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n    return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b0af64a6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,51 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node fnNode = fnScope.getRootNode();\n+  Preconditions.checkState(fnNode.isFunction());\n+  if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+\n+  Node argList = getFunctionArgList(fnNode);\n+  List<Node> unusedArgs = new ArrayList<>();\n+  boolean modifyCallers = modifyCallSites\n+      && callSiteOptimizer.canModifyCallers(fnNode);\n+  if (!modifyCallers) {\n+    boolean dropArgs = true;\n+    for (Node arg = argList.getFirstChild(); arg != null;\n+        arg = arg.getNext()) {\n+      Var v = fnScope.getVar(arg.getString());\n+      if (v == null || !referenced.contains(v)) {\n+        unusedArgs.add(arg);\n+      } else {\n+        dropArgs = false;\n+        if (!unusedArgs.isEmpty()) {\n+          // Remove unused arguments that appeared before this one.\n+          for (Node unusedArg : unusedArgs) {\n+            argList.removeChild(unusedArg);\n+            compiler.reportCodeChange();\n+          }\n+          unusedArgs.clear();\n         }\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n     }\n+\n+    if (dropArgs && !unusedArgs.isEmpty()) {\n+      // All arguments are unused. Remove all of them.\n+      for (Node unusedArg : unusedArgs) {\n+        argList.removeChild(unusedArg);\n+      }\n+      unusedArgs.clear();\n+      compiler.reportCodeChange();\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+    return;\n   }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}