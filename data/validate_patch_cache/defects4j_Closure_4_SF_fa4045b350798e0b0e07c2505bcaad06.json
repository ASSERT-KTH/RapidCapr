{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolvedByRegistry = resolveViaRegistry(t, enclosing);\n    boolean resolvedByProperties =(isResolved())\n        || JavaScriptLanguageMode.isEs6OrHigher(getJSTypeRegistry().getTypeParser().getLanguageMode())\n               && resolveByDefaultFunction(enclosing)\n        || resolveViaProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    if (resolvedByRegistry) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return registry.isLastGeneration() ? getReferencedType() : this;\n    }\n    if (resolvedByProperties) {\n      super.resolveInternal(t, enclosing);\n      finishPropertyContinuations();\n      return this;\n    }\n    // Unresolved type.\n    return registry.isLastGeneration() ? getReferencedType() : this;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..9fba5515 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,28 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean resolvedByRegistry = resolveViaRegistry(t, enclosing);\n+    boolean resolvedByProperties =(isResolved())\n+        || JavaScriptLanguageMode.isEs6OrHigher(getJSTypeRegistry().getTypeParser().getLanguageMode())\n+               && resolveByDefaultFunction(enclosing)\n+        || resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n+    if (resolvedByRegistry) {\n       super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+      return registry.isLastGeneration() ? getReferencedType() : this;\n     }\n-\n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n+    if (resolvedByProperties) {\n+      super.resolveInternal(t, enclosing);\n       finishPropertyContinuations();\n+      return this;\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    // Unresolved type.\n+    return registry.isLastGeneration() ? getReferencedType() : this;\n+ }\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}