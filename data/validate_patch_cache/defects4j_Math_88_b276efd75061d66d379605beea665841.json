{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            coefficients[i] = 0;  // initialize to 0\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                \n            if (basicRow != null) {\n                double entry = tableau.getEntry(basicRow, getRhsOffset());\n                // check if multiple variables can take a given value \n                // then we choose the first and set the rest equal to 0\n                if (entry - mostNegative <= 1e-10) {\n                    coefficients[i] = entry - (restrictToNonNegative ? 0 : mostNegative);\n                    // set the rest of the coefficients to 0\n                    for (int j = getNumObjectiveFunctions() + i + 1; j < coefficients.length; j++) {\n                        coefficients[j] = 0;\n                    }\n                    break;  // exit early since we already found the first variable\n                }\n            } else {  // set the coefficient to the slack value\n                coefficients[i] = -1.0 * (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..b711b7fb6 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -327,18 +327,23 @@ class SimplexTableau implements Serializable {\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n+            coefficients[i] = 0;  // initialize to 0\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+                \n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                double entry = tableau.getEntry(basicRow, getRhsOffset());\n+                // check if multiple variables can take a given value \n+                // then we choose the first and set the rest equal to 0\n+                if (entry - mostNegative <= 1e-10) {\n+                    coefficients[i] = entry - (restrictToNonNegative ? 0 : mostNegative);\n+                    // set the rest of the coefficients to 0\n+                    for (int j = getNumObjectiveFunctions() + i + 1; j < coefficients.length; j++) {\n+                        coefficients[j] = 0;\n                     }\n+                    break;  // exit early since we already found the first variable\n                 }\n+            } else {  // set the coefficient to the slack value\n+                coefficients[i] = -1.0 * (restrictToNonNegative ? 0 : mostNegative);\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "junit.framework.AssertionFailedError: expected:<480.419243986254> but was:<0.0>",
    "test_result": "FAIL"
}