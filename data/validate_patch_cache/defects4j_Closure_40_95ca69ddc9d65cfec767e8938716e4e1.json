{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variables and function declarations.\n    if (t.inGlobalScope()) {\n        if (n.isName()) {\n            if (NodeUtil.isVarDeclaration(parent)) {\n                JsName jsName = getName(n.getString(), false);\n                if (jsName != null) {\n                    recordSet(jsName, n);\n                }\n            } else if (NodeUtil.isFunctionDeclaration(parent)) {\n                JsName funName = getName(n.getString(), true);\n                if (funName != null) {\n                    recordSet(funName, n);\n                }\n            }\n        }\n    }\n\n    // Record assignments and call sites.\n    if (n.isAssign()) {\n        Node target = n.getFirstChild();\n        if (target.isName()) {\n            JsName jsName = getName(target.getString(), false);\n            if (jsName != null) {\n                recordSet(jsName, target);\n            }\n        }\n    } else if (n.isCall()) {\n        Node callee = n.getFirstChild();\n        if (callee.isName()) {\n            JsName jsName = getName(callee.getString(), false);\n            if (jsName != null && jsName.getStaticRefFlag()) {\n                if (NodeUtil.isFunctionObjectCall(n)\n                        && n.getFirstChild().equals(callee)) {\n                    recordDefiningFunction(callee, n.getParent());\n                } else {\n                    recordCall(jsName, n);\n                }\n            }\n        }\n    } else if (isPrototypePropertyDeclaration(n)) {\n        String propertyQname = computeQualifiedName(parent);\n        JsName prototypeName = prototypeProperties.get(propertyQname);\n        if (prototypeName != null) {\n            ClassDefiningFunctionNode classDefiningFunctionNode =\n                    new ClassDefiningFunctionNode(prototypeName, n, parent, null);\n            refNodes.add(classDefiningFunctionNode);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..fa314f7a 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,56 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Record global variables and function declarations.\n+    if (t.inGlobalScope()) {\n+        if (n.isName()) {\n+            if (NodeUtil.isVarDeclaration(parent)) {\n+                JsName jsName = getName(n.getString(), false);\n+                if (jsName != null) {\n+                    recordSet(jsName, n);\n+                }\n+            } else if (NodeUtil.isFunctionDeclaration(parent)) {\n+                JsName funName = getName(n.getString(), true);\n+                if (funName != null) {\n+                    recordSet(funName, n);\n+                }\n+            }\n         }\n-      }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+    }\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+    // Record assignments and call sites.\n+    if (n.isAssign()) {\n+        Node target = n.getFirstChild();\n+        if (target.isName()) {\n+            JsName jsName = getName(target.getString(), false);\n+            if (jsName != null) {\n+                recordSet(jsName, target);\n+            }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+    } else if (n.isCall()) {\n+        Node callee = n.getFirstChild();\n+        if (callee.isName()) {\n+            JsName jsName = getName(callee.getString(), false);\n+            if (jsName != null && jsName.getStaticRefFlag()) {\n+                if (NodeUtil.isFunctionObjectCall(n)\n+                        && n.getFirstChild().equals(callee)) {\n+                    recordDefiningFunction(callee, n.getParent());\n+                } else {\n+                    recordCall(jsName, n);\n+                }\n+            }\n+        }\n+    } else if (isPrototypePropertyDeclaration(n)) {\n+        String propertyQname = computeQualifiedName(parent);\n+        JsName prototypeName = prototypeProperties.get(propertyQname);\n+        if (prototypeName != null) {\n+            ClassDefiningFunctionNode classDefiningFunctionNode =\n+                    new ClassDefiningFunctionNode(prototypeName, n, parent, null);\n+            refNodes.add(classDefiningFunctionNode);\n         }\n-      }\n     }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: method recordSet in class NameAnalyzer.FindDeclarationsAndSetters cannot be applied to given types;",
    "test_result": "ERROR"
}