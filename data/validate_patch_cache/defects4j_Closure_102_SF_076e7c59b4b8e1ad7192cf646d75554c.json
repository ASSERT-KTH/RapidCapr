{
    "patch": "public void process(Node externs, Node root) {\n  NodeTraversal t = new NodeTraversal(compiler, this);\n  \n  // Traverse externs and remove duplicate declarations before root\n  t.traverse(externs);\n  removeDuplicateDeclarations(externs);\n  \n  // Traverse root and remove duplicate declarations before renaming\n  t.traverse(root);\n  removeDuplicateDeclarations(root);\n  \n  // Rename local variable names if needed and remove duplicate declarations again\n  if (MAKE_LOCAL_NAMES_UNIQUE) {\n    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n    t = new NodeTraversal(compiler, renamer);\n    t.traverse(root);\n    removeDuplicateDeclarations(root);\n  }\n  \n  // Propagate constant annotations\n  new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..531da8a3 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,17 +84,28 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n-    if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n-    }\n+public void process(Node externs, Node root) {\n+  NodeTraversal t = new NodeTraversal(compiler, this);\n+  \n+  // Traverse externs and remove duplicate declarations before root\n+  t.traverse(externs);\n+  removeDuplicateDeclarations(externs);\n+  \n+  // Traverse root and remove duplicate declarations before renaming\n+  t.traverse(root);\n+  removeDuplicateDeclarations(root);\n+  \n+  // Rename local variable names if needed and remove duplicate declarations again\n+  if (MAKE_LOCAL_NAMES_UNIQUE) {\n+    MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n+    t = new NodeTraversal(compiler, renamer);\n+    t.traverse(root);\n     removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n   }\n+  \n+  // Propagate constant annotations\n+  new PropogateConstantAnnotations(compiler, assertOnChange).process(externs, root);\n+}\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}