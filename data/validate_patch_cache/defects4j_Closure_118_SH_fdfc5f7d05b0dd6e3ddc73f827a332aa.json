{
    "patch": "      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET, COMPUTED_PROP\n        switch (child.getToken()) {\n          case GETTER_DEF:\n          case SETTER_DEF:\n            handleObjectGetterSetter(t, child);\n            break;\n          case COMPUTED_PROP:\n            handleComputedProperty(t, child);\n            break;\n          case STRING_KEY:\n            // We should never see a mix of numbers and strings.\n            String name = child.getString();\n            T type = typeSystem.getType(compiler.getScope(t.getScopeRoot()), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child,\n                                       processProperty(t, prop, type, null))) {\n              // TODO(user): It doesn't look like the user can do much in this\n              // case right now.\n              if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(JSError.make(\n                    t.getSourceFileName(), child, propertiesToErrorFor.get(name),\n                    CheckLevel.WARNING, JSError.makeMessage(\n                    Warnings.INVALIDATION, name,\n                    (type == null ? \"null\" : type.toString()), n.toString(), \"\")));\n              }\n            }\n            break;\n          default:\n            // Case of spread or object method on an object literal.\n            break;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..5cb4c40f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET, COMPUTED_PROP\n+        switch (child.getToken()) {\n+          case GETTER_DEF:\n+          case SETTER_DEF:\n+            handleObjectGetterSetter(t, child);\n+            break;\n+          case COMPUTED_PROP:\n+            handleComputedProperty(t, child);\n+            break;\n+          case STRING_KEY:\n+            // We should never see a mix of numbers and strings.\n+            String name = child.getString();\n+            T type = typeSystem.getType(compiler.getScope(t.getScopeRoot()), n, name);\n+\n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(child,\n+                                       processProperty(t, prop, type, null))) {\n+              // TODO(user): It doesn't look like the user can do much in this\n+              // case right now.\n+              if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(JSError.make(\n+                    t.getSourceFileName(), child, propertiesToErrorFor.get(name),\n+                    CheckLevel.WARNING, JSError.makeMessage(\n+                    Warnings.INVALIDATION, name,\n+                    (type == null ? \"null\" : type.toString()), n.toString(), \"\")));\n+              }\n+            }\n+            break;\n+          default:\n+            // Case of spread or object method on an object literal.\n+            break;\n+        }\n+      }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}