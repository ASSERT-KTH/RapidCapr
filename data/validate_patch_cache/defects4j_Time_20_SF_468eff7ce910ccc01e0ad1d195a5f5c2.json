{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    int len = text.length();\n    if (position > len) {\n        return ~position;\n    }\n    String str = text.substring(position);\n\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        if (str.startsWith(id) && (str.length() == idLen || str.charAt(idLen) == '/' || str.charAt(idLen) == ' ' || str.charAt(idLen) == '\\t')) {\n            if (str.length() == idLen || (!Character.isLetterOrDigit(str.charAt(idLen))  && str.charAt(idLen) != '_')) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLen;\n            }\n        }\n    }\n\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..e726c475 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,18 +2537,27 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    int len = text.length();\n+    if (position > len) {\n+        return ~position;\n+    }\n+    String str = text.substring(position);\n+\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        if (str.startsWith(id) && (str.length() == idLen || str.charAt(idLen) == '/' || str.charAt(idLen) == ' ' || str.charAt(idLen) == '\\t')) {\n+            if (str.length() == idLen || (!Character.isLetterOrDigit(str.charAt(idLen))  && str.charAt(idLen) != '_')) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idLen;\n             }\n-            return ~position;\n         }\n     }\n \n+    return ~position;\n+}\n+    }\n+\n     //-----------------------------------------------------------------------\n     static class Composite\n             implements DateTimePrinter, DateTimeParser {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}