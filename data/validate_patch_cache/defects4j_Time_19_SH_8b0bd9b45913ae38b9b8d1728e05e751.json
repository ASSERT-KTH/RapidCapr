{
    "patch": "        } else {\n            long prevTransition = previousTransition(instantLocal - offsetLocal);\n            long nextTransition = nextTransition(instantLocal - offsetLocal);\n            int previousOffset = getOffset(prevTransition);\n            int nextOffset = getOffset(nextTransition);\n            if (previousOffset == nextOffset) {\n                return previousOffset;\n            } else if (previousOffset > nextOffset) {\n                int transitionOffset =\n                  getOffset(previousTransition(prevTransition - 1));\n                if (offsetLocal < transitionOffset) {\n                    offsetLocal = transitionOffset;\n                }\n            } else {\n                if (offsetLocal < previousOffset) {\n                    offsetLocal = previousOffset;\n                }\n                if (offsetLocal > nextOffset) {\n                    offsetLocal = nextOffset;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..12fd5956 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            long prevTransition = previousTransition(instantLocal - offsetLocal);\n+            long nextTransition = nextTransition(instantLocal - offsetLocal);\n+            int previousOffset = getOffset(prevTransition);\n+            int nextOffset = getOffset(nextTransition);\n+            if (previousOffset == nextOffset) {\n+                return previousOffset;\n+            } else if (previousOffset > nextOffset) {\n+                int transitionOffset =\n+                  getOffset(previousTransition(prevTransition - 1));\n+                if (offsetLocal < transitionOffset) {\n+                    offsetLocal = transitionOffset;\n+                }\n+            } else {\n+                if (offsetLocal < previousOffset) {\n+                    offsetLocal = previousOffset;\n+                }\n+                if (offsetLocal > nextOffset) {\n+                    offsetLocal = nextOffset;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}