{
    "patch": "    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n           isWildcardType() || (isArrayType() && toArrayType().isEmptyType()) ||\n           (isUnionType() && ((UnionType)this).getAlternatives().stream().allMatch(t -> t.isEmptyType()));",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..ea42117c 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -158,9 +158,10 @@ public abstract class JSType implements Serializable {\n   public boolean isNoObjectType() {\n     return false;\n   }\n-\n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+    return isNoType() || isNoObjectType() || isNoResolvedType() ||\n+           isWildcardType() || (isArrayType() && toArrayType().isEmptyType()) ||\n+           (isUnionType() && ((UnionType)this).getAlternatives().stream().allMatch(t -> t.isEmptyType()));\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}