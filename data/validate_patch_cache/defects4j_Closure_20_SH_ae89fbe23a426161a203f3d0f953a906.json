{
    "patch": "Node value = callTarget.getNext();\nif (value != null && value.getNext() == null) {\n  Node addition = IR.add(\n      IR.string(\"\").srcref(callTarget),\n      value.detachFromParent());\n  n.getParent().replaceChild(n, addition);\n  reportCodeChange();\n  return addition;\n} else {\n  Node lastParam = n.getLastChild();\n  if (lastParam == null ||\n      (lastParam.isString() && lastParam.getString().isEmpty())) {\n    // we only get here if we have an invocation without args or \"\" as the last parameter.\n    Node addition = IR.add(\n        IR.string(\"\").srcref(callTarget),\n        IR.string(\"\").srcref(callTarget));\n    n.getParent().replaceChild(n, addition);\n    reportCodeChange();\n    return addition;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..c0dc9d11 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -204,7 +204,6 @@ class PeepholeSubstituteAlternateSyntax\n       }\n     }\n   }\n-\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n@@ -217,7 +216,27 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+Node value = callTarget.getNext();\n+if (value != null && value.getNext() == null) {\n+  Node addition = IR.add(\n+      IR.string(\"\").srcref(callTarget),\n+      value.detachFromParent());\n+  n.getParent().replaceChild(n, addition);\n+  reportCodeChange();\n+  return addition;\n+} else {\n+  Node lastParam = n.getLastChild();\n+  if (lastParam == null ||\n+      (lastParam.isString() && lastParam.getString().isEmpty())) {\n+    // we only get here if we have an invocation without args or \"\" as the last parameter.\n+    Node addition = IR.add(\n+        IR.string(\"\").srcref(callTarget),\n+        IR.string(\"\").srcref(callTarget));\n+    n.getParent().replaceChild(n, addition);\n+    reportCodeChange();\n+    return addition;\n+  }\n+}\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}