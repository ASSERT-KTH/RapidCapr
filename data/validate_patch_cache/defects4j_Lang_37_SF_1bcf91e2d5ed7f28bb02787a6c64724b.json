{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        T[] joinedArray;\n\n        if (type1.isPrimitive() && !type2.isPrimitive()) {\n            joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n        } else {\n            joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        }\n\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n\n        for (int i = 0; i < array2.length; i++) {\n            if (type1.isPrimitive() && !type2.isPrimitive()) {\n                joinedArray[i + array1.length] = (T) convertPrimitiveToObject(type1, array2[i]);\n            } else {\n                joinedArray[i + array1.length] = array2[i];\n            }\n        }\n\n        return joinedArray;\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n    return joinedArray;\n}\n\nprivate static Object convertPrimitiveToObject(Class<?> type, Object value) {\n    if (value == null) {\n        return null;\n    }\n\n    if (type == boolean.class) {\n        if (value instanceof Boolean) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to boolean\");\n    } else if (type == byte.class) {\n        if (value instanceof Byte) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to byte\");\n    } else if (type == char.class) {\n        if (value instanceof Character) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to char\");\n    } else if (type == short.class) {\n        if (value instanceof Short) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to short\");\n    } else if (type == int.class) {\n        if (value instanceof Integer) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to int\");\n    } else if (type == long.class) {\n        if (value instanceof Long) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to long\");\n    } else if (type == float.class) {\n        if (value instanceof Float) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to float\");\n    } else if (type == double.class) {\n        if (value instanceof Double) {\n            return value;\n        }\n        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to double\");\n    }\n\n    throw new IllegalArgumentException(\"Unknown primitive type: \" + type.getName());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..7637aa18 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,95 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        T[] joinedArray;\n+\n+        if (type1.isPrimitive() && !type2.isPrimitive()) {\n+            joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n+        } else {\n+            joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+\n+        for (int i = 0; i < array2.length; i++) {\n+            if (type1.isPrimitive() && !type2.isPrimitive()) {\n+                joinedArray[i + array1.length] = (T) convertPrimitiveToObject(type1, array2[i]);\n+            } else {\n+                joinedArray[i + array1.length] = array2[i];\n+            }\n+        }\n+\n         return joinedArray;\n     }\n \n+    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+\n+    return joinedArray;\n+}\n+\n+private static Object convertPrimitiveToObject(Class<?> type, Object value) {\n+    if (value == null) {\n+        return null;\n+    }\n+\n+    if (type == boolean.class) {\n+        if (value instanceof Boolean) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to boolean\");\n+    } else if (type == byte.class) {\n+        if (value instanceof Byte) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to byte\");\n+    } else if (type == char.class) {\n+        if (value instanceof Character) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to char\");\n+    } else if (type == short.class) {\n+        if (value instanceof Short) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to short\");\n+    } else if (type == int.class) {\n+        if (value instanceof Integer) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to int\");\n+    } else if (type == long.class) {\n+        if (value instanceof Long) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to long\");\n+    } else if (type == float.class) {\n+        if (value instanceof Float) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to float\");\n+    } else if (type == double.class) {\n+        if (value instanceof Double) {\n+            return value;\n+        }\n+        throw new IllegalArgumentException(\"Cannot convert \" + value.getClass().getName() + \" to double\");\n+    }\n+\n+    throw new IllegalArgumentException(\"Unknown primitive type: \" + type.getName());\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "java.lang.ArrayStoreException: java.lang.Long",
    "test_result": "FAIL"
}