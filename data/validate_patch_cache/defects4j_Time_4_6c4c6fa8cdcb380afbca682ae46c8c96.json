{
    "patch": "public int[] set(ReadablePartial instant, int fieldIndex, int[] values, int newValue) {\n    if (values == null || values.length < getValues().length) {\n        values = getValues();\n    }\n    int currentValue = values[fieldIndex];\n    if (currentValue == newValue) {\n        return values;\n    }\n    int difference = newValue - currentValue;\n    int instantIndex = indexOfSupported(instant);\n    if (instantIndex < 0) {\n        for (int i = getDurationField().getType().getFieldIndex(); i < fieldIndex; i++) {\n            if (values[i] != 0) {\n                throw new IllegalArgumentException(\"Input partial contains fields not supported by this field: \" + instant.get(i).getFieldName());\n            }\n        }\n        values[fieldIndex] = newValue;\n        return values;\n    }\n    if (difference == 0) {\n        return values;\n    }\n    long instantValue = instant.get(instantIndex);\n    long newInstantValue = getDurationField().add(instantValue, difference);\n    newInstantValue = set(newInstantValue, values);\n    iChronology.validate(this, newInstantValue);\n    return values;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..c61b06f2 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,34 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n+public int[] set(ReadablePartial instant, int fieldIndex, int[] values, int newValue) {\n+    if (values == null || values.length < getValues().length) {\n+        values = getValues();\n+    }\n+    int currentValue = values[fieldIndex];\n+    if (currentValue == newValue) {\n+        return values;\n+    }\n+    int difference = newValue - currentValue;\n+    int instantIndex = indexOfSupported(instant);\n+    if (instantIndex < 0) {\n+        for (int i = getDurationField().getType().getFieldIndex(); i < fieldIndex; i++) {\n+            if (values[i] != 0) {\n+                throw new IllegalArgumentException(\"Input partial contains fields not supported by this field: \" + instant.get(i).getFieldName());\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n         }\n-        if (value == getValue(index)) {\n-            return this;\n-        }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+        values[fieldIndex] = newValue;\n+        return values;\n     }\n+    if (difference == 0) {\n+        return values;\n+    }\n+    long instantValue = instant.get(instantIndex);\n+    long newInstantValue = getDurationField().add(instantValue, difference);\n+    newInstantValue = set(newInstantValue, values);\n+    iChronology.validate(this, newInstantValue);\n+    return values;\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: no suitable method found for indexOfSupported(ReadablePartial)",
    "test_result": "ERROR"
}