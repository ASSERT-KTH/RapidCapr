{
    "patch": "                if (offsetAdjusted != getOffset(nextTransition(instantAdjusted))) {\n                    // Handle the case where we skipped a period.\n                    long prevTransition = previousTransition(instantLocal - offsetLocal);\n                    if (prevTransition != instantAdjusted && offsetLocal != getOffset(prevTransition)) {\n                        return offsetLocal;\n                    }\n                    return offsetAdjusted;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..8999c9cd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,14 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetAdjusted != getOffset(nextTransition(instantAdjusted))) {\n+                    // Handle the case where we skipped a period.\n+                    long prevTransition = previousTransition(instantLocal - offsetLocal);\n+                    if (prevTransition != instantAdjusted && offsetLocal != getOffset(prevTransition)) {\n+                        return offsetLocal;\n+                    }\n+                    return offsetAdjusted;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000+03]:00> but was:<2007-0[3-31T23:00:00.000+02]:00>",
    "test_result": "FAIL"
}