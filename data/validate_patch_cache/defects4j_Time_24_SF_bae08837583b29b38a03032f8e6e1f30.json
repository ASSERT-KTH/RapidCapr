{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                saveField(DateTimeFieldType.year(), iDefaultYear);\n                if(first == days){\n                    int woy = ISOChronology.getInstanceUTC().weekOfYear().get(getDateTimeMillis(), iChrono.weekyear().get(getDateTimeMillis()));\n                    if (woy == 1 && iChrono.weekyear().get(getDateTimeMillis()) > iDefaultYear) {\n                        saveField(DateTimeFieldType.weekyear(), iChrono.weekyear().get(getDateTimeMillis()) - 1);\n                    } else if (woy >= 52 && iChrono.weekyear().get(getDateTimeMillis()) < iDefaultYear) {\n                        saveField(DateTimeFieldType.weekyear(), iChrono.weekyear().get(getDateTimeMillis()) + 1);\n                    }\n                } else {\n                    int moyEst = savedFields[0].iValue;\n                    int yearEst = iDefaultYear;\n                    if (savedFields[1].iField.getType() == DateTimeFieldType.dayOfMonth()) {\n                        yearEst = estimateYear(savedFields[1].iValue);\n                    }\n                    int dateEst = 1;\n                    long instantEst = 0L;\n                    try {\n                        instantEst = iChrono.getDateTimeMillis(yearEst, moyEst, dateEst, 0);\n                    } catch (IllegalFieldValueException e) {\n                        // Use first day of following year and try again\n                        if (moyEst == 12) {\n                            dateEst = iChrono.getDaysInYearMax(yearEst + 1);\n                            try {\n                                instantEst = iChrono.getDateTimeMillis(yearEst + 1, 1, dateEst, 0);\n                            } catch (IllegalFieldValueException ex) {\n                                // Use first day of year after following year and try again\n                                dateEst = 1;\n                                try {\n                                    instantEst = iChrono.getDateTimeMillis(yearEst + 2, 1, dateEst, 0);\n                                } catch (IllegalFieldValueException ex2) {\n                                    // Cannot convert\n                                    throw e;\n                                }\n                            }\n                        } else {\n                            try {\n                                instantEst = iChrono.getDateTimeMillis(yearEst, moyEst + 1, dateEst, 0);\n                            } catch (IllegalFieldValueException ex) {\n                                // Use first day of following year and try again\n                                dateEst = iChrono.getDaysInMonthMax(yearEst, moyEst + 1);\n                                try {\n                                    instantEst = iChrono.getDateTimeMillis(yearEst, moyEst + 1, dateEst, 0);\n                                } catch (IllegalFieldValueException ex2) {\n                                    // Use first day of year after following year and try again\n                                    dateEst = 1;\n                                    try {\n                                        instantEst = iChrono.getDateTimeMillis(yearEst + 1, 1, dateEst, 0);\n                                    } catch (IllegalFieldValueException ex3) {\n                                        // Cannot convert\n                                        throw e;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    FieldUtils.verifyValueBounds(DateTimeFieldType.year(), iDefaultYear, null, null);\n                    FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), 0, null, null);\n                    millis = instantEst;\n                }\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..85dc23d3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,7 +328,7 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n+public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n         if (iSavedFieldsShared) {\n@@ -343,6 +343,64 @@ public class DateTimeParserBucket {\n             DurationField first = savedFields[0].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                 saveField(DateTimeFieldType.year(), iDefaultYear);\n+                if(first == days){\n+                    int woy = ISOChronology.getInstanceUTC().weekOfYear().get(getDateTimeMillis(), iChrono.weekyear().get(getDateTimeMillis()));\n+                    if (woy == 1 && iChrono.weekyear().get(getDateTimeMillis()) > iDefaultYear) {\n+                        saveField(DateTimeFieldType.weekyear(), iChrono.weekyear().get(getDateTimeMillis()) - 1);\n+                    } else if (woy >= 52 && iChrono.weekyear().get(getDateTimeMillis()) < iDefaultYear) {\n+                        saveField(DateTimeFieldType.weekyear(), iChrono.weekyear().get(getDateTimeMillis()) + 1);\n+                    }\n+                } else {\n+                    int moyEst = savedFields[0].iValue;\n+                    int yearEst = iDefaultYear;\n+                    if (savedFields[1].iField.getType() == DateTimeFieldType.dayOfMonth()) {\n+                        yearEst = estimateYear(savedFields[1].iValue);\n+                    }\n+                    int dateEst = 1;\n+                    long instantEst = 0L;\n+                    try {\n+                        instantEst = iChrono.getDateTimeMillis(yearEst, moyEst, dateEst, 0);\n+                    } catch (IllegalFieldValueException e) {\n+                        // Use first day of following year and try again\n+                        if (moyEst == 12) {\n+                            dateEst = iChrono.getDaysInYearMax(yearEst + 1);\n+                            try {\n+                                instantEst = iChrono.getDateTimeMillis(yearEst + 1, 1, dateEst, 0);\n+                            } catch (IllegalFieldValueException ex) {\n+                                // Use first day of year after following year and try again\n+                                dateEst = 1;\n+                                try {\n+                                    instantEst = iChrono.getDateTimeMillis(yearEst + 2, 1, dateEst, 0);\n+                                } catch (IllegalFieldValueException ex2) {\n+                                    // Cannot convert\n+                                    throw e;\n+                                }\n+                            }\n+                        } else {\n+                            try {\n+                                instantEst = iChrono.getDateTimeMillis(yearEst, moyEst + 1, dateEst, 0);\n+                            } catch (IllegalFieldValueException ex) {\n+                                // Use first day of following year and try again\n+                                dateEst = iChrono.getDaysInMonthMax(yearEst, moyEst + 1);\n+                                try {\n+                                    instantEst = iChrono.getDateTimeMillis(yearEst, moyEst + 1, dateEst, 0);\n+                                } catch (IllegalFieldValueException ex2) {\n+                                    // Use first day of year after following year and try again\n+                                    dateEst = 1;\n+                                    try {\n+                                        instantEst = iChrono.getDateTimeMillis(yearEst + 1, 1, dateEst, 0);\n+                                    } catch (IllegalFieldValueException ex3) {\n+                                        // Cannot convert\n+                                        throw e;\n+                                    }\n+                                }\n+                            }\n+                        }\n+                    }\n+                    FieldUtils.verifyValueBounds(DateTimeFieldType.year(), iDefaultYear, null, null);\n+                    FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), 0, null, null);\n+                    millis = instantEst;\n+                }\n                 return computeMillis(resetFields, text);\n             }\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}