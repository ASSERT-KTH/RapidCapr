{
    "patch": "import java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.List;\nimport com.google.common.collect.Lists;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Scope;\nimport com.google.javascript.rhino.jstype.FunctionTypeI;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSDocInfo;\nimport com.google.javascript.rhino.jstype.Property;\nimport com.google.javascript.rhino.jstype.SymbolScope;\n\nprivate boolean hasExceptionHandler(Node cfgNode) {\n  List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n    if (outEdge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n    if (outEdge.getValue() == Branch.CATCH) {\n      return true;\n    }\n    Node endNode = outEdge.getEnd().getValue();\n    if (endNode.getType() == Token.BLOCK && hasExceptionHandler(endNode)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the work list meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0\n        && canInlineName(name)) {\n      List<Ref> refs = Lists.newArrayList(name.getRefs());\n      for (Ref ref : refs) {\n        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n          if (inlineAliasIfPossible(ref, namespace)) {\n            name.removeRef(ref);\n          }\n        }\n      }\n    }\n\n    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n        && name.aliasingGets == 0 && name.props != null) {\n      workList.addAll(name.props);\n    }\n  }\n}\n\nprivate boolean canInlineName(Name name) {\n  JSDocInfoType jsDocInfoType = getJSDocInfoType(name);\n  switch (jsDocInfoType) {\n    case NONE:\n      return true;\n    case NAME:\n      return false;\n    case OBJECT_LITERAL_FUNCTION:\n      if (!isFunctionEmpty(name)) {\n        return false;\n      }\n      return !mayUseThis(name);\n    default:\n      throw new IllegalStateException(\"Unexpected JSDoc type: \" + jsDocInfoType);\n  }\n}\n\nprivate JSDocInfoType getJSDocInfoType(Name name) {\n  JSDocInfo info = name.getJSDocInfo();\n  if (info == null) {\n    return JSDocInfoType.NONE;\n  } else if (!info.isInline()) {\n    return JSDocInfoType.NAME;\n  } else if (name.type == Name.Type.FUNCTION) {\n    return JSDocInfoType.OBJECT_LITERAL_FUNCTION;\n  } else {\n    return JSDocInfoType.NONE;\n  }\n}\n\nprivate boolean isFunctionEmpty(Name name) {\n  FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n  return functionType == null || functionType.hasEmptyStatement();\n}\n\nprivate boolean mayUseThis(Name name) {\n  FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n  return functionType != null && functionType.isConstructor();\n}\n\nprivate boolean maybeRemovable(SymbolScope scope, String name, Node maybeRemovable) {\n  Scope.Var var = scope.getSlot(name);\n  // We can't remove let or const declarations, so bail out.\n  if (var == null || !var.isVar()) {\n    return false;\n  }\n\n  // We can remove a variable or parameter if it is never assigned to and\n  // its initial value is not mutated or accessed in a way that would be\n  // affected by the removal.\n  VarInfo varInfo = getVarInfo(var);\n  if (varInfo.neverMutatedOrAssigned && !usesOriginal(maybeRemovable, name)\n      && !isFunctionParameter(scope, name)) {\n    return true;\n  }\n  return false;\n}\n\nprivate boolean usesOriginal(Node n, String name) {\n  switch (n.getType()) {\n    case Token.NAME:\n      return n.getString().equals(name);\n    case Token.GETPROP:\n      return usesOriginal(n.getFirstChild(), name);\n    case Token.ASSIGN:\n      return usesOriginal(n.getFirstChild(), name);\n    case Token.ASSIGN_ADD:\n    case Token.ASSIGN_SUB:\n    case Token.ASSIGN_MUL:\n    case Token.ASSIGN_DIV:\n    case Token.ASSIGN_MOD:\n    case Token.ASSIGN_BITOR:\n    case Token.ASSIGN_BITXOR:\n    case Token.ASSIGN_BITAND:\n    case Token.ASSIGN_LSH:\n    case Token.ASSIGN_RSH:\n    case Token.ASSIGN_URSH:\n      return usesOriginal(n.getFirstChild(), name);\n    default:\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (usesOriginal(child, name)) {\n          return true;\n        }\n      }\n      return false;\n  }\n}\n\nprivate boolean isFunctionParameter(SymbolScope scope, String name) {\n  JSType type = scope.getDeclaredTypeOf(name);\n  if (type == null) {\n    return false;\n  }\n  return type.isFunctionType()\n      && ((FunctionTypeI) type).getParameterNames().contains(name);\n}\n\nprivate boolean isPropertyRemovable(SymbolScope scope, Property property) {\n  VarInfo varInfo = getVarInfo(property);\n  // We can remove a property if its value is never assigned to\n  // and its initial value is not mutated or accessed in a way that would be\n  // affected by the removal.\n  if (property.getValue() != null) {\n    if (varInfo.neverMutatedOrAssigned && !usesOriginal(property.getValue(), property.getName())) {\n      return true;\n    }\n  }\n\n  // We can remove a getter or setter if the corresponding property is removable.\n  if (property.getType() == Property.Type.GETTER || property.getType() == Property.Type.SETTER) {\n    Node functionNode = null;\n    if (property.getType() == Property.Type.GETTER) {\n      Node getterNode = property.getGetterNode();\n      if (getterNode == null) {\n        return false;\n      }\n      functionNode = getterNode.getLastChild();\n    } else if (property.getType() == Property.Type.SETTER) {\n      Node setterNode = property.getSetterNode();\n      if (setterNode == null) {\n        return false;\n      }\n      functionNode = setterNode.getLastChild();\n    }\n\n    return isFunctionRemovable(scope, functionNode);\n  }\n  return false;\n}\n\nprivate boolean isFunctionRemovable(SymbolScope scope, Node functionNode) {\n  if (functionNode == null || !functionNode.isFunction()) {\n    return false;\n  }\n  FunctionTypeI functionType = (FunctionTypeI) functionNode.getJSType();\n  if (functionType == null) {\n    return false;\n  }\n  if (functionType.isQmarkFunction()) {\n    return false;\n  }\n  if (functionType.getReference().canWarn()) {\n    return false;\n  }\n  if (functionType.isNativeObjectType()) {\n    return false;\n  }\n\n  if (!functionType.isEmptyType()) {\n    // If this function is not empty, let's keep it.\n    return false;\n  }\n\n  // Check the function's JSDoc and make sure we can remove it.\n  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(functionNode.getParent());\n  if (!jsDoc.isConstructor() && !jsDoc.isInterface() && !jsDoc.isOverride()) {\n    for (String param : functionType.getParameterNames()) {\n      if (functionType.getSlot(param).isOptional()) {\n        if (jsDoc.findParameterWithName(param).isOptional()) {\n          continue;\n        }\n        return false;\n      }\n    }\n  }\n\n  // Check that none of the function's local variables are mutated.\n  SymbolScope functionScope = functionType.getScope();\n  for (String varName : functionScope.getLocals()) {\n    if (functionScope.getDeclaration(varName) == functionNode) {\n      if (!maybeRemovable(functionScope, varName, null)) {\n        return false;\n      }\n    }\n  }\n\n  // Recursively check if all the nested functions are removable.\n  NodeTraversal.traverseEs6(\n      getCompiler(), functionNode, new MarkDefiningFunctionVisitor(functionScope));\n  for (Var v : functionScope.getVars()) {\n    ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..ed929892 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,245 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+import com.google.common.collect.Lists;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Scope;\n+import com.google.javascript.rhino.jstype.FunctionTypeI;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSDocInfo;\n+import com.google.javascript.rhino.jstype.Property;\n+import com.google.javascript.rhino.jstype.SymbolScope;\n+\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+    if (outEdge.getValue() == Branch.ON_EX) {\n+      return true;\n+    }\n+    if (outEdge.getValue() == Branch.CATCH) {\n+      return true;\n+    }\n+    Node endNode = outEdge.getEnd().getValue();\n+    if (endNode.getType() == Token.BLOCK && hasExceptionHandler(endNode)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n-            }\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the work list meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0\n+        && canInlineName(name)) {\n+      List<Ref> refs = Lists.newArrayList(name.getRefs());\n+      for (Ref ref : refs) {\n+        if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+          if (inlineAliasIfPossible(ref, namespace)) {\n+            name.removeRef(ref);\n           }\n         }\n       }\n+    }\n+\n+    if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+        && name.aliasingGets == 0 && name.props != null) {\n+      workList.addAll(name.props);\n+    }\n+  }\n+}\n+\n+private boolean canInlineName(Name name) {\n+  JSDocInfoType jsDocInfoType = getJSDocInfoType(name);\n+  switch (jsDocInfoType) {\n+    case NONE:\n+      return true;\n+    case NAME:\n+      return false;\n+    case OBJECT_LITERAL_FUNCTION:\n+      if (!isFunctionEmpty(name)) {\n+        return false;\n+      }\n+      return !mayUseThis(name);\n+    default:\n+      throw new IllegalStateException(\"Unexpected JSDoc type: \" + jsDocInfoType);\n+  }\n+}\n+\n+private JSDocInfoType getJSDocInfoType(Name name) {\n+  JSDocInfo info = name.getJSDocInfo();\n+  if (info == null) {\n+    return JSDocInfoType.NONE;\n+  } else if (!info.isInline()) {\n+    return JSDocInfoType.NAME;\n+  } else if (name.type == Name.Type.FUNCTION) {\n+    return JSDocInfoType.OBJECT_LITERAL_FUNCTION;\n+  } else {\n+    return JSDocInfoType.NONE;\n+  }\n+}\n+\n+private boolean isFunctionEmpty(Name name) {\n+  FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n+  return functionType == null || functionType.hasEmptyStatement();\n+}\n+\n+private boolean mayUseThis(Name name) {\n+  FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n+  return functionType != null && functionType.isConstructor();\n+}\n+\n+private boolean maybeRemovable(SymbolScope scope, String name, Node maybeRemovable) {\n+  Scope.Var var = scope.getSlot(name);\n+  // We can't remove let or const declarations, so bail out.\n+  if (var == null || !var.isVar()) {\n+    return false;\n+  }\n+\n+  // We can remove a variable or parameter if it is never assigned to and\n+  // its initial value is not mutated or accessed in a way that would be\n+  // affected by the removal.\n+  VarInfo varInfo = getVarInfo(var);\n+  if (varInfo.neverMutatedOrAssigned && !usesOriginal(maybeRemovable, name)\n+      && !isFunctionParameter(scope, name)) {\n+    return true;\n+  }\n+  return false;\n+}\n+\n+private boolean usesOriginal(Node n, String name) {\n+  switch (n.getType()) {\n+    case Token.NAME:\n+      return n.getString().equals(name);\n+    case Token.GETPROP:\n+      return usesOriginal(n.getFirstChild(), name);\n+    case Token.ASSIGN:\n+      return usesOriginal(n.getFirstChild(), name);\n+    case Token.ASSIGN_ADD:\n+    case Token.ASSIGN_SUB:\n+    case Token.ASSIGN_MUL:\n+    case Token.ASSIGN_DIV:\n+    case Token.ASSIGN_MOD:\n+    case Token.ASSIGN_BITOR:\n+    case Token.ASSIGN_BITXOR:\n+    case Token.ASSIGN_BITAND:\n+    case Token.ASSIGN_LSH:\n+    case Token.ASSIGN_RSH:\n+    case Token.ASSIGN_URSH:\n+      return usesOriginal(n.getFirstChild(), name);\n+    default:\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (usesOriginal(child, name)) {\n+          return true;\n+        }\n+      }\n+      return false;\n+  }\n+}\n+\n+private boolean isFunctionParameter(SymbolScope scope, String name) {\n+  JSType type = scope.getDeclaredTypeOf(name);\n+  if (type == null) {\n+    return false;\n+  }\n+  return type.isFunctionType()\n+      && ((FunctionTypeI) type).getParameterNames().contains(name);\n+}\n+\n+private boolean isPropertyRemovable(SymbolScope scope, Property property) {\n+  VarInfo varInfo = getVarInfo(property);\n+  // We can remove a property if its value is never assigned to\n+  // and its initial value is not mutated or accessed in a way that would be\n+  // affected by the removal.\n+  if (property.getValue() != null) {\n+    if (varInfo.neverMutatedOrAssigned && !usesOriginal(property.getValue(), property.getName())) {\n+      return true;\n+    }\n+  }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n+  // We can remove a getter or setter if the corresponding property is removable.\n+  if (property.getType() == Property.Type.GETTER || property.getType() == Property.Type.SETTER) {\n+    Node functionNode = null;\n+    if (property.getType() == Property.Type.GETTER) {\n+      Node getterNode = property.getGetterNode();\n+      if (getterNode == null) {\n+        return false;\n+      }\n+      functionNode = getterNode.getLastChild();\n+    } else if (property.getType() == Property.Type.SETTER) {\n+      Node setterNode = property.getSetterNode();\n+      if (setterNode == null) {\n+        return false;\n       }\n+      functionNode = setterNode.getLastChild();\n     }\n+\n+    return isFunctionRemovable(scope, functionNode);\n+  }\n+  return false;\n+}\n+\n+private boolean isFunctionRemovable(SymbolScope scope, Node functionNode) {\n+  if (functionNode == null || !functionNode.isFunction()) {\n+    return false;\n+  }\n+  FunctionTypeI functionType = (FunctionTypeI) functionNode.getJSType();\n+  if (functionType == null) {\n+    return false;\n   }\n+  if (functionType.isQmarkFunction()) {\n+    return false;\n+  }\n+  if (functionType.getReference().canWarn()) {\n+    return false;\n+  }\n+  if (functionType.isNativeObjectType()) {\n+    return false;\n+  }\n+\n+  if (!functionType.isEmptyType()) {\n+    // If this function is not empty, let's keep it.\n+    return false;\n+  }\n+\n+  // Check the function's JSDoc and make sure we can remove it.\n+  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(functionNode.getParent());\n+  if (!jsDoc.isConstructor() && !jsDoc.isInterface() && !jsDoc.isOverride()) {\n+    for (String param : functionType.getParameterNames()) {\n+      if (functionType.getSlot(param).isOptional()) {\n+        if (jsDoc.findParameterWithName(param).isOptional()) {\n+          continue;\n+        }\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Check that none of the function's local variables are mutated.\n+  SymbolScope functionScope = functionType.getScope();\n+  for (String varName : functionScope.getLocals()) {\n+    if (functionScope.getDeclaration(varName) == functionNode) {\n+      if (!maybeRemovable(functionScope, varName, null)) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  // Recursively check if all the nested functions are removable.\n+  NodeTraversal.traverseEs6(\n+      getCompiler(), functionNode, new MarkDefiningFunctionVisitor(functionScope));\n+  for (Var v : functionScope.getVars()) {\n+    \n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}