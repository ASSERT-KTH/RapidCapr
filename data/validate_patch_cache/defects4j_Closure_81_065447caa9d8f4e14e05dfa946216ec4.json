{
    "patch": "@Override\nNode transform(AstNode node) {\n  if (node == null) {\n    return null;\n  }\n  switch (node.getType()) {\n    case Token.ARRAYLIT: return processArrayLit((ArrayLiteral) node);\n    case Token.NAME: return processName((Name) node);\n    case Token.NUMBER: return processNumber((NumberLiteral) node);\n    case Token.REGEXP: return processRegExp((RegExpLiteral) node);\n    case Token.STRING: return processString((StringLiteral) node);\n    case Token.THIS: return processThis((ThisLiteral) node);\n    case Token.TRUE:\n    case Token.FALSE: return processBoolean((BooleanLiteral) node);\n    case Token.NULL: return processNull((NullLiteral) node);\n    case Token.OBJECTLIT: return processObjectLit((ObjectLiteral) node);\n    case Token.BLOCK: return processBlock((Block) node);\n    case Token.BREAK: return processBreakStatement((BreakStatement) node);\n    case Token.CATCH: return processCatchClause((CatchClause) node);\n    case Token.EXPR_RESULT:\n    case Token.EXPR_VOID:\n      return processExpressionStatement((ExpressionStatement) node);\n    case Token.CONTINUE:\n      return processContinueStatement((ContinueStatement) node);\n    case Token.DO: return processDoLoop((DoLoop) node);\n    case Token.GETELEM: return processElementGet((ElementGet) node);\n    case Token.EMPTY: return processEmptyExpression((EmptyExpression) node);\n    case Token.FOR: return processForLoop((ForLoop) node);\n    case Token.FOR_IN:\n      return processForInLoop((ForInLoop) node);\n    case Token.FUNCTION:\n      return processFunctionNode((FunctionNode) node);\n    case Token.CALL: return processFunctionCall((FunctionCall) node);\n    case Token.HOOK: return processConditionalExpression((ConditionalExpression) node);\n    case Token.IF: return processIf((IfStatement) node);\n    case Token.LABEL: return processLabeledStatement((LabeledStatement) node);\n    case Token.NEG: return processPrefix((UnaryExpression) node);\n    case Token.RETURN: return processReturn((ReturnStatement) node);\n    case Token.VAR: return processVars((VariableDeclaration) node);\n    case Token.WHILE: return processWhileLoop((WhileLoop) node);\n    case Token.SCRIPT: return processScript((ScriptNode) node);\n    case Token.ARRAY_COMP: return processArrayComprehension((ArrayComprehension) node);\n    case Token.LET: return processLetNode((LetNode) node);\n    case Token.XML: return processXmlLiteral((XmlLiteral) node);\n\n    // Unsupported nodes.\n    case Token.CALLSHELL:\n    case Token.COMMA:\n    case Token.DEBUGGER:\n    case Token.DELPROP:\n    case Token.UPDATED:\n        return makeAstFromUnsupportedNode(node);\n\n    default:\n        errorReporter.error(\n            \"Unsupported node type in transform() \" + tokenTypeToString(node.getType())\n            + \" \" + node.getClass().getName(),\n            sourceName,\n            node.getLineno(), \"\", 0);\n        return null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a2dffbf2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,182 +384,68 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n+@Override\n+Node transform(AstNode node) {\n+  if (node == null) {\n+    return null;\n+  }\n+  switch (node.getType()) {\n+    case Token.ARRAYLIT: return processArrayLit((ArrayLiteral) node);\n+    case Token.NAME: return processName((Name) node);\n+    case Token.NUMBER: return processNumber((NumberLiteral) node);\n+    case Token.REGEXP: return processRegExp((RegExpLiteral) node);\n+    case Token.STRING: return processString((StringLiteral) node);\n+    case Token.THIS: return processThis((ThisLiteral) node);\n+    case Token.TRUE:\n+    case Token.FALSE: return processBoolean((BooleanLiteral) node);\n+    case Token.NULL: return processNull((NullLiteral) node);\n+    case Token.OBJECTLIT: return processObjectLit((ObjectLiteral) node);\n+    case Token.BLOCK: return processBlock((Block) node);\n+    case Token.BREAK: return processBreakStatement((BreakStatement) node);\n+    case Token.CATCH: return processCatchClause((CatchClause) node);\n+    case Token.EXPR_RESULT:\n+    case Token.EXPR_VOID:\n+      return processExpressionStatement((ExpressionStatement) node);\n+    case Token.CONTINUE:\n+      return processContinueStatement((ContinueStatement) node);\n+    case Token.DO: return processDoLoop((DoLoop) node);\n+    case Token.GETELEM: return processElementGet((ElementGet) node);\n+    case Token.EMPTY: return processEmptyExpression((EmptyExpression) node);\n+    case Token.FOR: return processForLoop((ForLoop) node);\n+    case Token.FOR_IN:\n+      return processForInLoop((ForInLoop) node);\n+    case Token.FUNCTION:\n+      return processFunctionNode((FunctionNode) node);\n+    case Token.CALL: return processFunctionCall((FunctionCall) node);\n+    case Token.HOOK: return processConditionalExpression((ConditionalExpression) node);\n+    case Token.IF: return processIf((IfStatement) node);\n+    case Token.LABEL: return processLabeledStatement((LabeledStatement) node);\n+    case Token.NEG: return processPrefix((UnaryExpression) node);\n+    case Token.RETURN: return processReturn((ReturnStatement) node);\n+    case Token.VAR: return processVars((VariableDeclaration) node);\n+    case Token.WHILE: return processWhileLoop((WhileLoop) node);\n+    case Token.SCRIPT: return processScript((ScriptNode) node);\n+    case Token.ARRAY_COMP: return processArrayComprehension((ArrayComprehension) node);\n+    case Token.LET: return processLetNode((LetNode) node);\n+    case Token.XML: return processXmlLiteral((XmlLiteral) node);\n+\n+    // Unsupported nodes.\n+    case Token.CALLSHELL:\n+    case Token.COMMA:\n+    case Token.DEBUGGER:\n+    case Token.DELPROP:\n+    case Token.UPDATED:\n+        return makeAstFromUnsupportedNode(node);\n+\n+    default:\n         errorReporter.error(\n-            \"Catch clauses are not supported\",\n+            \"Unsupported node type in transform() \" + tokenTypeToString(node.getType())\n+            + \" \" + node.getClass().getName(),\n             sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n-\n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+            node.getLineno(), \"\", 0);\n+        return null;\n+  }\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processFunctionNode(FunctionNode) in TypeSafeDispatcher",
    "test_result": "ERROR"
}