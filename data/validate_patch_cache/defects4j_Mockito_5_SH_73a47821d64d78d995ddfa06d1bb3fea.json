{
    "patch": "List<Throwable> verificationErrors = new ArrayList<Throwable>();\nTimer tickTock = new Timer(periodInMillis);\ntickTock.start();\nwhile (tickTock.isRunning()) {\n    try {\n        delegate.verify(data);\n        if (returnOnSuccess) {\n            return;\n        } else {\n            verificationErrors.clear();\n        }\n    } catch (MockitoAssertionError e) {\n        verificationErrors.addAll(handleVerifyException(e));\n    } catch (Throwable t) {\n        verificationErrors.add(t);\n    }\n}\ntickTock.stop();\nif (!verificationErrors.isEmpty()) {\n    throw new VerificationOverTimeImpl.VerificationOverTimeWrapperException(verificationErrors);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..5fb6cbe30 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -88,7 +88,27 @@ public class VerificationOverTimeImpl implements VerificationMode {\n             } catch (MockitoAssertionError e) {\n                 error = handleVerifyException(e);\n             }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+List<Throwable> verificationErrors = new ArrayList<Throwable>();\n+Timer tickTock = new Timer(periodInMillis);\n+tickTock.start();\n+while (tickTock.isRunning()) {\n+    try {\n+        delegate.verify(data);\n+        if (returnOnSuccess) {\n+            return;\n+        } else {\n+            verificationErrors.clear();\n+        }\n+    } catch (MockitoAssertionError e) {\n+        verificationErrors.addAll(handleVerifyException(e));\n+    } catch (Throwable t) {\n+        verificationErrors.add(t);\n+    }\n+}\n+tickTock.stop();\n+if (!verificationErrors.isEmpty()) {\n+    throw new VerificationOverTimeImpl.VerificationOverTimeWrapperException(verificationErrors);\n+}\n                 error = handleVerifyException(e);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}