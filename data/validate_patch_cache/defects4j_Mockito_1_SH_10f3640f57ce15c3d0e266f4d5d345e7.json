{
    "patch": "    Matcher lastMatcher = matchers.get(matchers.size() - 1);\n    if(lastMatcher instanceof CapturesArguments) {\n        int numberOfArgumentsToCapture = indexOfVararg + 1 - matchers.size();\n        if (numberOfArgumentsToCapture == 1) {\n            ((CapturesArguments) lastMatcher).captureFrom(invocation.getRawArguments()[indexOfVararg]);\n        } else if (numberOfArgumentsToCapture > 1) {\n            Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg - numberOfArgumentsToCapture + 1, indexOfVararg + 1);\n            ((CapturesArguments) lastMatcher).captureFrom(varargs);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..9c298a15c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,16 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Matcher lastMatcher = matchers.get(matchers.size() - 1);\n+    if(lastMatcher instanceof CapturesArguments) {\n+        int numberOfArgumentsToCapture = indexOfVararg + 1 - matchers.size();\n+        if (numberOfArgumentsToCapture == 1) {\n+            ((CapturesArguments) lastMatcher).captureFrom(invocation.getRawArguments()[indexOfVararg]);\n+        } else if (numberOfArgumentsToCapture > 1) {\n+            Object[] varargs = Arrays.copyOfRange(invocation.getRawArguments(), indexOfVararg - numberOfArgumentsToCapture + 1, indexOfVararg + 1);\n+            ((CapturesArguments) lastMatcher).captureFrom(varargs);\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}