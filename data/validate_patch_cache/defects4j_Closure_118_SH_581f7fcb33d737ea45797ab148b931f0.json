{
    "patch": "  private void handleObjectLit(NodeTraversal t, Node n) {\n    for (Node child = n.getFirstChild();\n        child != null;\n        child = child.getNext()) {\n      // Maybe STRING, GET, SET\n      String name = null;\n      if (child.isGetProp() || child.isSetProp()) {\n        name = child.getLastChild().getString();\n      } else if (child.isStringKey()) {\n        name = child.getString();\n      }\n\n      if (name != null) {\n        if (TokenStream.isJSIdentifier(name)) {\n          T type = typeSystem.getType(getScope(), n, name);\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION, name,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        } else if (child.isNumberKey()) {\n          String keyString = \"[\" + child.getString() + \"]\";\n          T type = typeSystem.getType(getScope(), n, keyString);\n          Property prop = getProperty(keyString);\n          if (!prop.scheduleRenaming(child,\n                                     processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(keyString)) {\n              compiler.report(JSError.make(\n                  t.getSourceName(), child, propertiesToErrorFor.get(keyString),\n                  Warnings.INVALIDATION, keyString,\n                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n            }\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..48969734 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,52 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+  private void handleObjectLit(NodeTraversal t, Node n) {\n+    for (Node child = n.getFirstChild();\n+        child != null;\n+        child = child.getNext()) {\n+      // Maybe STRING, GET, SET\n+      String name = null;\n+      if (child.isGetProp() || child.isSetProp()) {\n+        name = child.getLastChild().getString();\n+      } else if (child.isStringKey()) {\n+        name = child.getString();\n+      }\n+\n+      if (name != null) {\n+        if (TokenStream.isJSIdentifier(name)) {\n+          T type = typeSystem.getType(getScope(), n, name);\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION, name,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        } else if (child.isNumberKey()) {\n+          String keyString = \"[\" + child.getString() + \"]\";\n+          T type = typeSystem.getType(getScope(), n, keyString);\n+          Property prop = getProperty(keyString);\n+          if (!prop.scheduleRenaming(child,\n+                                     processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(keyString)) {\n+              compiler.report(JSError.make(\n+                  t.getSourceName(), child, propertiesToErrorFor.get(keyString),\n+                  Warnings.INVALIDATION, keyString,\n+                  (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}