{
    "patch": "            CandidateFilter.FilterResult filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(filterResult.isSatisfied()) {\n                MockitoAnnotations.MockInjectionTarget target = new MockitoAnnotations.MockInjectionTarget(fieldInstance, filterResult.candidate.mock, ReflectionHelper.getFieldByName(awaitingInjectionClazz, field.getName()));\n                filterResult.candidate.filter = fieldInstance instanceof Filter ? (Filter) fieldInstance : null;\n                target.inject();\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0fe4efef9 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,12 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            CandidateFilter.FilterResult filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(filterResult.isSatisfied()) {\n+                MockitoAnnotations.MockInjectionTarget target = new MockitoAnnotations.MockInjectionTarget(fieldInstance, filterResult.candidate.mock, ReflectionHelper.getFieldByName(awaitingInjectionClazz, field.getName()));\n+                filterResult.candidate.filter = fieldInstance instanceof Filter ? (Filter) fieldInstance : null;\n+                target.inject();\n+            }\n         }\n     }\n ",
    "result_reason": "error: package CandidateFilter does not exist",
    "test_result": "ERROR"
}