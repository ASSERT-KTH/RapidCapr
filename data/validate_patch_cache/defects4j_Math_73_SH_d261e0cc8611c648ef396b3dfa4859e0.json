{
    "patch": "        // check if initial guess is NaN or infinite\n        if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n        }\n\n        // check if endpoints bracket the root\n        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n            throw new IllegalArgumentException(\"The function is not bracketed in the interval [\" + min + \",\" + max + \"]\");\n        }\n\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..0830a325e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,18 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if initial guess is NaN or infinite\n+        if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n+            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n+        }\n+\n+        // check if endpoints bracket the root\n+        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n+            throw new IllegalArgumentException(\"The function is not bracketed in the interval [\" + min + \",\" + max + \"]\");\n+        }\n+\n+        // full Brent algorithm starting with provided initial guess\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}