{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            // Adjust the month to January to avoid issues with month lengths\n            int adjustedMonth = (partial.getFieldType(fieldIndex).getField(iChronology).getValue(instant) + valueToAdd - 1) % 12 + 1;\n            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, adjustedMonth);\n            // If the original month was February, adjust the day to 28 to avoid issues with leap years\n            if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(0).equals(DateTimeFieldType.dayOfMonth())) {\n                int dayOfMonth = partial.getFieldType(0).getField(iChronology).getValue(instant);\n                if (dayOfMonth > 28) {\n                    dayOfMonth = 28;\n                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, dayOfMonth);\n                }\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..cfb2558a 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,12 +206,23 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n+            // Adjust the month to January to avoid issues with month lengths\n+            int adjustedMonth = (partial.getFieldType(fieldIndex).getField(iChronology).getValue(instant) + valueToAdd - 1) % 12 + 1;\n+            instant = partial.getFieldType(fieldIndex).getField(iChronology).set(instant, adjustedMonth);\n+            // If the original month was February, adjust the day to 28 to avoid issues with leap years\n+            if (partial.getFieldType(fieldIndex).equals(DateTimeFieldType.monthOfYear()) && partial.getFieldType(0).equals(DateTimeFieldType.dayOfMonth())) {\n+                int dayOfMonth = partial.getFieldType(0).getField(iChronology).getValue(instant);\n+                if (dayOfMonth > 28) {\n+                    dayOfMonth = 28;\n+                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, dayOfMonth);\n+                }\n+            }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}