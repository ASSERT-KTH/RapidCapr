{
    "patch": "private static boolean isPropertyDeclaredInFunctionScope(NodeTraversal t, String propertyName) {\n  Scope scope = t.getScope();\n  Var var = scope.getVar(propertyName);\n  if (var == null) {\n    return false;\n  }\n  Node nameNode = var.getNameNode();\n  return nameNode != null && nameNode.getParent().isName();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..36d787ec 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,15 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+private static boolean isPropertyDeclaredInFunctionScope(NodeTraversal t, String propertyName) {\n+  Scope scope = t.getScope();\n+  Var var = scope.getVar(propertyName);\n+  if (var == null) {\n+    return false;\n+  }\n+  Node nameNode = var.getNameNode();\n+  return nameNode != null && nameNode.getParent().isName();\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}