{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            Object argument;\n            try {\n                argument = invocation.getArgumentAt(position, Object.class);\n                ((CapturesArguments) m).captureFrom(argument);\n            } catch (IndexOutOfBoundsException e) {\n                // Handle varargs\n                if (invocation.getMethod().isVarArgs() && isVarargsMatcher(m)) {\n                    if (position < invocation.getRawArguments().length - 1) {\n                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n                    } else {\n                        Object varargsValue = Arrays.copyOfRange(invocation.getRawArguments(), position, invocation.getRawArguments().length);\n                        ((CapturesArguments) m).captureFrom(varargsValue);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..2bc5daa07 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,38 +116,28 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+public void captureArgumentsFrom(Invocation invocation) {\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            Object argument;\n+            try {\n+                argument = invocation.getArgumentAt(position, Object.class);\n+                ((CapturesArguments) m).captureFrom(argument);\n+            } catch (IndexOutOfBoundsException e) {\n+                // Handle varargs\n+                if (invocation.getMethod().isVarArgs() && isVarargsMatcher(m)) {\n+                    if (position < invocation.getRawArguments().length - 1) {\n+                        ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n+                    } else {\n+                        Object varargsValue = Arrays.copyOfRange(invocation.getRawArguments(), position, invocation.getRawArguments().length);\n+                        ((CapturesArguments) m).captureFrom(varargsValue);\n+                    }\n                 }\n             }\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n     }\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}