{
    "patch": "hNew = Math.min(hNew, filterStep(forward ? Math.min(end, stepStart + maxStep) - stepStart\n                                            : Math.max(end, stepStart - maxStep) - stepStart,\n                                  forward, true));",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..713b2b177 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,9 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+hNew = Math.min(hNew, filterStep(forward ? Math.min(end, stepStart + maxStep) - stepStart\n+                                            : Math.max(end, stepStart - maxStep) - stepStart,\n+                                  forward, true));\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}