{
    "patch": "    attachLiteralTypes(n);\n    if (parent != null) {\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..9f02f478 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,7 +1448,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n+    attachLiteralTypes(n);\n+    if (parent != null) {\n       switch (n.getType()) {\n         case Token.FUNCTION:\n           if (parent.getType() == Token.NAME) {\n@@ -1464,6 +1465,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           break;\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}