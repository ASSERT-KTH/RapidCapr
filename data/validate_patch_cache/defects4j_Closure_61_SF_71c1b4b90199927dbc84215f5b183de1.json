{
    "patch": "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n      if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.OBJECTLIT){\n        // Don't consider native String.prototype methods as having side effects\n        if (name.equals(\"charAt\") || name.equals(\"charCodeAt\") || name.equals(\"concat\") ||\n                name.equals(\"indexOf\") || name.equals(\"lastIndexOf\") || name.equals(\"localeCompare\") ||\n                name.equals(\"match\") || name.equals(\"normalize\") || name.equals(\"padEnd\") ||\n                name.equals(\"padStart\") || name.equals(\"replace\") || name.equals(\"search\") ||\n                name.equals(\"slice\") || name.equals(\"split\") || name.equals(\"startsWith\") ||\n                name.equals(\"substr\") || name.equals(\"substring\") || name.equals(\"toLocaleLowerCase\") ||\n                name.equals(\"toLocaleUpperCase\") || name.equals(\"toLowerCase\") ||\n                name.equals(\"toLocaleString\") || name.equals(\"toUpperCase\") || name.equals(\"trim\")) {\n          return false;\n        }\n      }  \n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..897daf1d 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,7 +923,7 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n+static boolean functionCallHasSideEffects(\n       Node callNode, @Nullable AbstractCompiler compiler) {\n     if (callNode.getType() != Token.CALL) {\n       throw new IllegalStateException(\n@@ -942,6 +942,19 @@ public final class NodeUtil {\n       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n         return false;\n       }\n+      if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.OBJECTLIT){\n+        // Don't consider native String.prototype methods as having side effects\n+        if (name.equals(\"charAt\") || name.equals(\"charCodeAt\") || name.equals(\"concat\") ||\n+                name.equals(\"indexOf\") || name.equals(\"lastIndexOf\") || name.equals(\"localeCompare\") ||\n+                name.equals(\"match\") || name.equals(\"normalize\") || name.equals(\"padEnd\") ||\n+                name.equals(\"padStart\") || name.equals(\"replace\") || name.equals(\"search\") ||\n+                name.equals(\"slice\") || name.equals(\"split\") || name.equals(\"startsWith\") ||\n+                name.equals(\"substr\") || name.equals(\"substring\") || name.equals(\"toLocaleLowerCase\") ||\n+                name.equals(\"toLocaleUpperCase\") || name.equals(\"toLowerCase\") ||\n+                name.equals(\"toLocaleString\") || name.equals(\"toUpperCase\") || name.equals(\"trim\")) {\n+          return false;\n+        }\n+      }  \n     } else if (nameNode.getType() == Token.GETPROP) {\n       if (callNode.hasOneChild()\n           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}