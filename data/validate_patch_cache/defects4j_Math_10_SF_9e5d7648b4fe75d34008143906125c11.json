{
    "patch": "public void atan2(final Dfp y, final Dfp x, final Dfp result) {\n    // compute r = sqrt(x^2+y^2)\n    Dfp tmp1 = newInstance(x);\n    Dfp tmp2 = newInstance(y);\n    tmp1.multiply(x).add(tmp2.multiply(y)).sqrt().nearest(result);\n\n    if (x.greaterThan(zero())) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        tmp1 = result.add(x);\n        tmp2 = y.divide(tmp1);\n        tmp2.atan().multiply(2).nearest(result);\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        tmp1 = result.subtract(x);\n        tmp2 = y.divide(tmp1);\n        tmp2.atan().multiply(-2).nearest(result);\n        if (y.greaterThan(zero())) {\n            result.add(PI);\n        } else {\n            result.subtract(PI);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..6d3ac9f54 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,29 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n-\n+public void atan2(final Dfp y, final Dfp x, final Dfp result) {\n+    // compute r = sqrt(x^2+y^2)\n+    Dfp tmp1 = newInstance(x);\n+    Dfp tmp2 = newInstance(y);\n+    tmp1.multiply(x).add(tmp2.multiply(y)).sqrt().nearest(result);\n+\n+    if (x.greaterThan(zero())) {\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        tmp1 = result.add(x);\n+        tmp2 = y.divide(tmp1);\n+        tmp2.atan().multiply(2).nearest(result);\n+    } else {\n+        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        tmp1 = result.subtract(x);\n+        tmp2 = y.divide(tmp1);\n+        tmp2.atan().multiply(-2).nearest(result);\n+        if (y.greaterThan(zero())) {\n+            result.add(PI);\n         } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n+            result.subtract(PI);\n         }\n-\n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}