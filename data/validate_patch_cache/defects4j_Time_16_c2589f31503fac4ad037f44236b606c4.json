{
    "patch": "        long newInstantMillis = bucket.computeMillis(false, text);\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else {\n            if (iPivotYear != null && bucket.getPivotYear() != null) {\n                Chronology chronology = selectChronology(bucket.getPivotYear());\n                if (chrono != chronology) {\n                    instantLocal = chronology.getDateTimeMillis(iChrono.getLocalMillis(instantLocal), instantLocal);\n                    chrono = chronology;\n                }\n            }\n            instantLocal = chrono.setYear(chrono.year().get(instantLocal), instantLocal);\n            if (iDefaultYear != null) {\n                instantLocal = setDefaultYear(instantLocal, iDefaultYear.intValue());\n            }\n            newInstantMillis = chrono.setMonthOfYear(iMonthOfYear, instantLocal);\n            newInstantMillis = chrono.setMillisOfDay(0L, newInstantMillis);\n        }\n        instant.setMillis(newInstantMillis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..982f7ed3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,27 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long newInstantMillis = bucket.computeMillis(false, text);\n+        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = chrono.withZone(parsedZone);\n+        } else {\n+            if (iPivotYear != null && bucket.getPivotYear() != null) {\n+                Chronology chronology = selectChronology(bucket.getPivotYear());\n+                if (chrono != chronology) {\n+                    instantLocal = chronology.getDateTimeMillis(iChrono.getLocalMillis(instantLocal), instantLocal);\n+                    chrono = chronology;\n+                }\n+            }\n+            instantLocal = chrono.setYear(chrono.year().get(instantLocal), instantLocal);\n+            if (iDefaultYear != null) {\n+                instantLocal = setDefaultYear(instantLocal, iDefaultYear.intValue());\n+            }\n+            newInstantMillis = chrono.setMonthOfYear(iMonthOfYear, instantLocal);\n+            newInstantMillis = chrono.setMillisOfDay(0L, newInstantMillis);\n+        }\n+        instant.setMillis(newInstantMillis);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}