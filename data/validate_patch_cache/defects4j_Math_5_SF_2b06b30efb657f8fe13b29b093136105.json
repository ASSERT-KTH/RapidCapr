{
    "patch": "public Complex reciprocal() {\n    if (isNaN) {\n        return NaN;\n    }\n\n    if (real == 0.0 && imaginary == 0.0) {\n        return INF;\n    }\n\n    if (isInfinite) {\n        if (real == Double.POSITIVE_INFINITY) {\n            return createComplex(+0.0, -0.0);\n        } else if (real == Double.NEGATIVE_INFINITY) {\n            return createComplex(-0.0, +0.0);\n        } else if (imaginary == Double.POSITIVE_INFINITY) {\n            return createComplex(0.0, Double.NEGATIVE_INFINITY);\n        } else {\n            return createComplex(0.0, Double.POSITIVE_INFINITY);\n        }\n    }\n\n    double scale = 1.0 / (real * real + imaginary * imaginary);\n    return new Complex(real * scale, -imaginary * scale);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..6299fd91a 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -296,30 +296,31 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     }\n \n     /** {@inheritDoc} */\n-    public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n-        }\n-\n-        if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n-        }\n+public Complex reciprocal() {\n+    if (isNaN) {\n+        return NaN;\n+    }\n \n-        if (isInfinite) {\n-            return ZERO;\n-        }\n+    if (real == 0.0 && imaginary == 0.0) {\n+        return INF;\n+    }\n \n-        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n-            double q = real / imaginary;\n-            double scale = 1. / (real * q + imaginary);\n-            return createComplex(scale * q, -scale);\n+    if (isInfinite) {\n+        if (real == Double.POSITIVE_INFINITY) {\n+            return createComplex(+0.0, -0.0);\n+        } else if (real == Double.NEGATIVE_INFINITY) {\n+            return createComplex(-0.0, +0.0);\n+        } else if (imaginary == Double.POSITIVE_INFINITY) {\n+            return createComplex(0.0, Double.NEGATIVE_INFINITY);\n         } else {\n-            double q = imaginary / real;\n-            double scale = 1. / (imaginary * q + real);\n-            return createComplex(scale, -scale * q);\n+            return createComplex(0.0, Double.POSITIVE_INFINITY);\n         }\n     }\n \n+    double scale = 1.0 / (real * real + imaginary * imaginary);\n+    return new Complex(real * scale, -imaginary * scale);\n+}\n+\n     /**\n      * Test for the equality of two Complex objects.\n      * If both the real and imaginary parts of two complex numbers",
    "result_reason": "junit.framework.AssertionFailedError: expected:<(0.0, -Infinity)> but was:<(0.0, 0.0)>",
    "test_result": "FAIL"
}