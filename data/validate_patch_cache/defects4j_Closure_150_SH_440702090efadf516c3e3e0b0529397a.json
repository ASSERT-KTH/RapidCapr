{
    "patch": "  attachLiteralTypes(n);\n  switch (n.getToken()) {\n    case FUNCTION:\n      if (parent.getToken() == NAME ||\n          parent.getToken() == GETPROP && parent.getParent().getToken() == CLASS) {\n        return;\n      } else if (n.isAsyncFunction()) {\n        defineAsyncFunction(n);\n      } else if (n.isGeneratorFunction()) {\n        defineGeneratorFunction(n);\n      } else {\n        defineDeclaredFunction(n, parent);\n      }\n      break;\n    case CATCH:\n      defineCatch(n, parent);\n      break;\n    case VAR:\n    case LET:\n    case CONST:\n      defineVar(n, parent);\n      break;\n    case CLASS:\n      if (n.isClassExpression()) {\n        defineClassExpression(n, parent);\n      }\n      break;\n    case RETURN:\n      // If there is a finally block and the return is inside the try block,\n      // then wait until the finally block is processed.\n      Node fn = parent;\n      while (fn != null && !NodeUtil.isFunctionBlock(fn) && !fn.isScript()) fn = fn.getParent();\n      if (fn != null && ControlFlowGraph.isTryFinallyNode(fn)) {\n        Scope hoistScope = getHoistScope(fn.getFirstChild());\n        if (hoistScope != null) {\n          AddFinallyReturnFlow.add(hoistScope, n);\n        }\n      }\n      break;\n    case CLASS_MEMBERS:\n      t.enterScope(n);\n      break;\n    default:\n      if (n.isSwitch()) {\n        defineSwitch(n, parent);\n      }\n      break;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..94594440 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,54 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  attachLiteralTypes(n);\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      if (parent.getToken() == NAME ||\n+          parent.getToken() == GETPROP && parent.getParent().getToken() == CLASS) {\n+        return;\n+      } else if (n.isAsyncFunction()) {\n+        defineAsyncFunction(n);\n+      } else if (n.isGeneratorFunction()) {\n+        defineGeneratorFunction(n);\n+      } else {\n+        defineDeclaredFunction(n, parent);\n+      }\n+      break;\n+    case CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case VAR:\n+    case LET:\n+    case CONST:\n+      defineVar(n, parent);\n+      break;\n+    case CLASS:\n+      if (n.isClassExpression()) {\n+        defineClassExpression(n, parent);\n       }\n+      break;\n+    case RETURN:\n+      // If there is a finally block and the return is inside the try block,\n+      // then wait until the finally block is processed.\n+      Node fn = parent;\n+      while (fn != null && !NodeUtil.isFunctionBlock(fn) && !fn.isScript()) fn = fn.getParent();\n+      if (fn != null && ControlFlowGraph.isTryFinallyNode(fn)) {\n+        Scope hoistScope = getHoistScope(fn.getFirstChild());\n+        if (hoistScope != null) {\n+          AddFinallyReturnFlow.add(hoistScope, n);\n+        }\n+      }\n+      break;\n+    case CLASS_MEMBERS:\n+      t.enterScope(n);\n+      break;\n+    default:\n+      if (n.isSwitch()) {\n+        defineSwitch(n, parent);\n+      }\n+      break;\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}