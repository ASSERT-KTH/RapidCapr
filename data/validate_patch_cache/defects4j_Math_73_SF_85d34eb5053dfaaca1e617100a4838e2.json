{
    "patch": "public double solve(UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        \n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if (yMin * yMax > 0) {\n        String message;\n        if (yMin == 0) {\n            setResult(min, 0);\n            return result;\n        } else if (yMax == 0) {\n            setResult(max, 0);\n            return result;\n        } else if (min != max) {\n            message = \"Interval [\" + min + \", \" + max + \"] does not bracket root(s)\";\n        } else {\n            message = \"Interval [ \" + min + \" ] does not bracket root(s)\";\n        }\n        throw new IllegalArgumentException(message);\n    }\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yInitial = f.value(initial);\n\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    double x1 = min;\n    double x2 = initial;\n    double x3 = max;\n    double y1 = yMin;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..6f01d566e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,50 +95,43 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+        \n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n+    if (yMin * yMax > 0) {\n+        String message;\n+        if (yMin == 0) {\n+            setResult(min, 0);\n             return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+        } else if (yMax == 0) {\n+            setResult(max, 0);\n             return result;\n+        } else if (min != max) {\n+            message = \"Interval [\" + min + \", \" + max + \"] does not bracket root(s)\";\n+        } else {\n+            message = \"Interval [ \" + min + \" ] does not bracket root(s)\";\n         }\n+        throw new IllegalArgumentException(message);\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    double yInitial = f.value(initial);\n \n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n     }\n \n+    double x1 = min;\n+    double x2 = initial;\n+    double x3 = max;\n+    double y1 = yMin;\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}