{
    "patch": "Here's an alternative fix:\n```\nprivate Integer getPivotRow(SimplexTableau tableau, int col) {\n    double minRatio = Double.MAX_VALUE;\n    List<Integer> minRatioPositions = new ArrayList<>();\n    boolean isUnbounded = true;\n    int height = tableau.getHeight();\n    int numObjectiveFunctions = tableau.getNumObjectiveFunctions();\n\n    // Determine if there is at least 1 row that can be pivoted on\n    for (int i = numObjectiveFunctions; i < height; i++) {\n        double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0.0, maxUlps) <= 0) {\n            continue;\n        }\n        double ratio = tableau.getEntry(i, tableau.getWidth() - 1) / entry;\n        if (ratio < minRatio) {\n            isUnbounded = false;\n            minRatio = ratio;\n            minRatioPositions.clear();\n            minRatioPositions.add(i);\n        } else if (Precision.equals(ratio, minRatio, maxUlps)) {\n            minRatioPositions.add(i);\n        }\n    }\n\n    // If there is no row that can be pivoted on, return null\n    if (isUnbounded) {\n        return null;\n    }\n\n    // Check for artificial variables that were pivoted on using another rule\n    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n        int artificialColumn = tableau.getArtificialVariableOffset() + i;\n        if (tableau.getBasicRow(artificialColumn) == null) {\n            continue;\n        }\n        for (int j = 0; j < minRatioPositions.size(); j++) {\n            int row = minRatioPositions.get(j);\n            if (Precision.equals(tableau.getEntry(row, artificialColumn), 1.0, maxUlps)) {\n                return row;\n            }\n        }\n    }\n\n    // Apply Bland's rule to prevent cycling\n    int minRowIndex = numObjectiveFunctions;\n    for (int i = 0; i < tableau.getWidth(); i++) {\n        if (tableau.isOptimal(tableau.getBasicRow(i))) {\n            continue;\n        }\n        if (tableau.getEntry(minRowIndex, i) <= tableau.getEntry(minRowIndex, col)) {\n            continue;\n        }\n        minRowIndex = tableau.getBasicRow(i);\n    }\n\n    return minRatioPositions.contains(minRowIndex) ? minRowIndex : minRatioPositions.get(0);\n}\n```\nThe changes are:\n- Removed the unnecessary `final` modifier from the method parameter `col`.\n- Simplified the condition `if (minRatioPositions.size() == 0)` to `if (isUnbounded)`.\n- Inlined the computation of `double rhs` to the calculation of `double ratio`.\n- Added a check for artificial variables that were pivoted on using another rule.\n- Replaced the loop that finds the minimum index using Bland's rule with a simpler condition.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..343b522a2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,72 +87,73 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n-                }\n+Here's an alternative fix:\n+```\n+private Integer getPivotRow(SimplexTableau tableau, int col) {\n+    double minRatio = Double.MAX_VALUE;\n+    List<Integer> minRatioPositions = new ArrayList<>();\n+    boolean isUnbounded = true;\n+    int height = tableau.getHeight();\n+    int numObjectiveFunctions = tableau.getNumObjectiveFunctions();\n+\n+    // Determine if there is at least 1 row that can be pivoted on\n+    for (int i = numObjectiveFunctions; i < height; i++) {\n+        double entry = tableau.getEntry(i, col);\n+        if (Precision.compareTo(entry, 0.0, maxUlps) <= 0) {\n+            continue;\n+        }\n+        double ratio = tableau.getEntry(i, tableau.getWidth() - 1) / entry;\n+        if (ratio < minRatio) {\n+            isUnbounded = false;\n+            minRatio = ratio;\n+            minRatioPositions.clear();\n+            minRatioPositions.add(i);\n+        } else if (Precision.equals(ratio, minRatio, maxUlps)) {\n+            minRatioPositions.add(i);\n+        }\n+    }\n+\n+    // If there is no row that can be pivoted on, return null\n+    if (isUnbounded) {\n+        return null;\n+    }\n+\n+    // Check for artificial variables that were pivoted on using another rule\n+    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n+        int artificialColumn = tableau.getArtificialVariableOffset() + i;\n+        if (tableau.getBasicRow(artificialColumn) == null) {\n+            continue;\n+        }\n+        for (int j = 0; j < minRatioPositions.size(); j++) {\n+            int row = minRatioPositions.get(j);\n+            if (Precision.equals(tableau.getEntry(row, artificialColumn), 1.0, maxUlps)) {\n+                return row;\n             }\n         }\n+    }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n-                        }\n-                    }\n-                }\n-\n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n-                    }\n-                }\n-                return minRow;\n+    // Apply Bland's rule to prevent cycling\n+    int minRowIndex = numObjectiveFunctions;\n+    for (int i = 0; i < tableau.getWidth(); i++) {\n+        if (tableau.isOptimal(tableau.getBasicRow(i))) {\n+            continue;\n+        }\n+        if (tableau.getEntry(minRowIndex, i) <= tableau.getEntry(minRowIndex, col)) {\n+            continue;\n         }\n-        return minRatioPositions.get(0);\n+        minRowIndex = tableau.getBasicRow(i);\n     }\n \n+    return minRatioPositions.contains(minRowIndex) ? minRowIndex : minRatioPositions.get(0);\n+}\n+```\n+The changes are:\n+- Removed the unnecessary `final` modifier from the method parameter `col`.\n+- Simplified the condition `if (minRatioPositions.size() == 0)` to `if (isUnbounded)`.\n+- Inlined the computation of `double rhs` to the calculation of `double ratio`.\n+- Added a check for artificial variables that were pivoted on using another rule.\n+- Replaced the loop that finds the minimum index using Bland's rule with a simpler condition.\n+\n     /**\n      * Runs one iteration of the Simplex method on the given model.\n      * @param tableau simple tableau for the problem",
    "result_reason": "error: unclosed character literal",
    "test_result": "ERROR"
}