{
    "patch": "public Rotation(Vector3D u1, Vector3D u2,\n                    Vector3D v1, Vector3D v2) {\n\n        // norms computation\n        double u1u1 = u1.getNormSq();\n        double u2u2 = u2.getNormSq();\n        double v1v1 = v1.getNormSq();\n        double v2v2 = v2.getNormSq();\n\n        if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n        }\n\n        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n        v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n        double u1u2 = u1.dotProduct(u2);\n        double v1v2 = v1.dotProduct(v2);\n        double coeffU = u1u2 / u1u1;\n        double coeffV = v1v2 / u1u1;\n        double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n        double alpha = coeffU - beta * coeffV;\n        v2 = new Vector3D(alpha, v1, beta, v2);\n\n        // preliminary computation\n        final double[][] array = new double[3][3];\n        array[0][0] = u1.getX();\n        array[1][0] = u1.getY();\n        array[2][0] = u1.getZ();\n        array[0][1] = u2.getX();\n        array[1][1] = u2.getY();\n        array[2][1] = u2.getZ();\n        array[0][2] = v2.getX();\n        array[1][2] = v2.getY();\n        array[2][2] = v2.getZ();\n\n        final double q0q0;\n        final double q1q1;\n        final double q2q2;\n        final double q3q3;\n        if (array[1][2] < array[0][1]) {\n            final double tmpRow0Col0 = array[0][0];\n            final double tmpRow0Col1 = array[0][1];\n            final double tmpRow0Col2 = array[0][2];\n            final double tmpRow1Col0 = array[1][0];\n            final double tmpRow1Col1 = array[1][1];\n            final double tmpRow1Col2 = array[1][2];\n            final double tmpRow2Col0 = array[2][0];\n            final double tmpRow2Col1 = array[2][1];\n            final double tmpRow2Col2 = array[2][2];\n            array[0][0] = tmpRow1Col0;\n            array[0][1] = tmpRow1Col1;\n            array[0][2] = tmpRow1Col2;\n            array[1][0] = tmpRow0Col0;\n            array[1][1] = tmpRow0Col1;\n            array[1][2] = tmpRow0Col2;\n            array[2][0] = -tmpRow2Col0;\n            array[2][1] = -tmpRow2Col1;\n            array[2][2] = -tmpRow2Col2;\n        }\n\n        // Build the quaternion q = q0 + q1 i + q2 j + q3 k by solving the equation:\n        // [ u1x, u2x, v2x ][ dot(q, u1) ]   [ 0 ]\n        // [ u1y, u2y, v2y ][ dot(q, u2) ] = [ 0 ]\n        // [ u1z, u2z, v2z ][ dot(q, v2) ]   [ 1 ]\n        final double sx = array[0][0] + array[1][1] + array[2][2];\n        if (sx >= 0) {\n            final double norm = FastMath.sqrt(sx + 1.0);\n            q0q0 = 0.5 * norm;\n            final double inv = 0.5 / norm;\n            q1q1 = (array[1][2] - array[2][1]) * inv;\n            q2q2 = (array[2][0] - array[0][2]) * inv;\n            q3q3 = (array[0][1] - array[1][0]) * inv;\n            q1 = q1q1;\n            q2 = q2q2;\n            q3 = q3q3;\n            q0 = q0q0;\n        } else {\n            if ((array[1][1] > array[0][0]) && (array[2][2] < array[1][1])) {\n                final double norm = FastMath.sqrt(array[1][1] - (array[2][2] + array[0][0]) + 1.0);\n                q2q2 = 0.5 * norm;\n                final double inv = 0.5 / norm;\n                q1q1 = (array[0][1] + array[1][0]) * inv;\n                q3q3 = (array[1][2] + array[2][1]) * inv;\n                q1 = q1q1;\n                q2 = q2q2;\n                q3 = q3q3;\n                q0 = q0q0 = (array[2][0] - array[0][2]) * inv;\n            } else if (array[2][2] > array[0][0]) {\n                final double norm = FastMath.sqrt(array[2][2] - (array[0][0] + array[1][1]) + 1.0);\n                q3q3 = 0.5 * norm;\n                final double inv = 0.5 / norm;\n                q1q1 = (array[2][0] + array[0][2]) * inv;\n                q2q2 = (array[1][2] + array[2][1]) * inv;\n                q1 = q1q1;\n                q2 = q2q2;\n                q3 = q3q3;\n                q0 = q0q0 = (array[0][1] - array[1][0]) * inv;\n            } else {\n                final double norm = FastMath.sqrt(array[0][0] - (array[1][1] + array[2][2]) + 1.0);\n                q1q1 = 0.5 * norm;\n                final double inv = 0.5 / norm;\n                q2q2 = (array[0][1] + array[1][0]) * inv;\n                q3q3 = (array[2][0] + array[0][2]) * inv;\n                q1 = q1q1;\n                q2 = q2q2;\n                q3 = q3q3;\n                q0 = q0q0 = (array[1][2] - array[2][1]) * inv;\n            }\n        }\n\n        // build the quaternion\n        final double norm = FastMath.sqrt(q0q0 + q1q1 + q2q2 + q3q3);\n        if (norm < Precision.SAFE_MIN) {\n            // assume q = (0, i * e1 + j * e2 + k * e3)\n            q0 = 0.0;\n            q1 = 1.0;\n            q2 = 0.0;\n            q3 = 0.0;\n        } else {\n            final double inv = 1.0 / norm;\n            q0 *= inv;\n            q1 *= inv;\n            q2 *= inv;\n            q3 *= inv;\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..025c425a2 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,135 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n+public Rotation(Vector3D u1, Vector3D u2,\n+                    Vector3D v1, Vector3D v2) {\n \n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n+        // norms computation\n+        double u1u1 = u1.getNormSq();\n+        double u2u2 = u2.getNormSq();\n+        double v1v1 = v1.getNormSq();\n+        double v2v2 = v2.getNormSq();\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+        if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n+            throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n+        }\n \n-    }\n+        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+        v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n+\n+        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+        double u1u2 = u1.dotProduct(u2);\n+        double v1v2 = v1.dotProduct(v2);\n+        double coeffU = u1u2 / u1u1;\n+        double coeffV = v1v2 / u1u1;\n+        double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+        double alpha = coeffU - beta * coeffV;\n+        v2 = new Vector3D(alpha, v1, beta, v2);\n+\n+        // preliminary computation\n+        final double[][] array = new double[3][3];\n+        array[0][0] = u1.getX();\n+        array[1][0] = u1.getY();\n+        array[2][0] = u1.getZ();\n+        array[0][1] = u2.getX();\n+        array[1][1] = u2.getY();\n+        array[2][1] = u2.getZ();\n+        array[0][2] = v2.getX();\n+        array[1][2] = v2.getY();\n+        array[2][2] = v2.getZ();\n+\n+        final double q0q0;\n+        final double q1q1;\n+        final double q2q2;\n+        final double q3q3;\n+        if (array[1][2] < array[0][1]) {\n+            final double tmpRow0Col0 = array[0][0];\n+            final double tmpRow0Col1 = array[0][1];\n+            final double tmpRow0Col2 = array[0][2];\n+            final double tmpRow1Col0 = array[1][0];\n+            final double tmpRow1Col1 = array[1][1];\n+            final double tmpRow1Col2 = array[1][2];\n+            final double tmpRow2Col0 = array[2][0];\n+            final double tmpRow2Col1 = array[2][1];\n+            final double tmpRow2Col2 = array[2][2];\n+            array[0][0] = tmpRow1Col0;\n+            array[0][1] = tmpRow1Col1;\n+            array[0][2] = tmpRow1Col2;\n+            array[1][0] = tmpRow0Col0;\n+            array[1][1] = tmpRow0Col1;\n+            array[1][2] = tmpRow0Col2;\n+            array[2][0] = -tmpRow2Col0;\n+            array[2][1] = -tmpRow2Col1;\n+            array[2][2] = -tmpRow2Col2;\n+        }\n \n-  }\n+        // Build the quaternion q = q0 + q1 i + q2 j + q3 k by solving the equation:\n+        // [ u1x, u2x, v2x ][ dot(q, u1) ]   [ 0 ]\n+        // [ u1y, u2y, v2y ][ dot(q, u2) ] = [ 0 ]\n+        // [ u1z, u2z, v2z ][ dot(q, v2) ]   [ 1 ]\n+        final double sx = array[0][0] + array[1][1] + array[2][2];\n+        if (sx >= 0) {\n+            final double norm = FastMath.sqrt(sx + 1.0);\n+            q0q0 = 0.5 * norm;\n+            final double inv = 0.5 / norm;\n+            q1q1 = (array[1][2] - array[2][1]) * inv;\n+            q2q2 = (array[2][0] - array[0][2]) * inv;\n+            q3q3 = (array[0][1] - array[1][0]) * inv;\n+            q1 = q1q1;\n+            q2 = q2q2;\n+            q3 = q3q3;\n+            q0 = q0q0;\n+        } else {\n+            if ((array[1][1] > array[0][0]) && (array[2][2] < array[1][1])) {\n+                final double norm = FastMath.sqrt(array[1][1] - (array[2][2] + array[0][0]) + 1.0);\n+                q2q2 = 0.5 * norm;\n+                final double inv = 0.5 / norm;\n+                q1q1 = (array[0][1] + array[1][0]) * inv;\n+                q3q3 = (array[1][2] + array[2][1]) * inv;\n+                q1 = q1q1;\n+                q2 = q2q2;\n+                q3 = q3q3;\n+                q0 = q0q0 = (array[2][0] - array[0][2]) * inv;\n+            } else if (array[2][2] > array[0][0]) {\n+                final double norm = FastMath.sqrt(array[2][2] - (array[0][0] + array[1][1]) + 1.0);\n+                q3q3 = 0.5 * norm;\n+                final double inv = 0.5 / norm;\n+                q1q1 = (array[2][0] + array[0][2]) * inv;\n+                q2q2 = (array[1][2] + array[2][1]) * inv;\n+                q1 = q1q1;\n+                q2 = q2q2;\n+                q3 = q3q3;\n+                q0 = q0q0 = (array[0][1] - array[1][0]) * inv;\n+            } else {\n+                final double norm = FastMath.sqrt(array[0][0] - (array[1][1] + array[2][2]) + 1.0);\n+                q1q1 = 0.5 * norm;\n+                final double inv = 0.5 / norm;\n+                q2q2 = (array[0][1] + array[1][0]) * inv;\n+                q3q3 = (array[2][0] + array[0][2]) * inv;\n+                q1 = q1q1;\n+                q2 = q2q2;\n+                q3 = q3q3;\n+                q0 = q0q0 = (array[1][2] - array[2][1]) * inv;\n+            }\n+        }\n+\n+        // build the quaternion\n+        final double norm = FastMath.sqrt(q0q0 + q1q1 + q2q2 + q3q3);\n+        if (norm < Precision.SAFE_MIN) {\n+            // assume q = (0, i * e1 + j * e2 + k * e3)\n+            q0 = 0.0;\n+            q1 = 1.0;\n+            q2 = 0.0;\n+            q3 = 0.0;\n+        } else {\n+            final double inv = 1.0 / norm;\n+            q0 *= inv;\n+            q1 *= inv;\n+            q2 *= inv;\n+            q3 *= inv;\n+        }\n+\n+    }\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}