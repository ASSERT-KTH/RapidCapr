{
    "patch": "        long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (parsedOffset != null) {\n            instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n        }\n        return newPos;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..c64e2837 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,26 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n+        chrono = selectChronology(chrono);\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                instantLocal, chrono, iLocale, iPivotYear);\n+        int newPos = parser.parseInto(bucket, text, position);\n+        instant.setMillis(bucket.computeMillis(false, text));\n+        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = chrono.withZone(parsedZone);\n+        } else if (bucket.getZone() != null) {\n+            chrono = chrono.withZone(bucket.getZone());\n+        }\n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        } else if (parsedOffset != null) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+        }\n+        return newPos;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}