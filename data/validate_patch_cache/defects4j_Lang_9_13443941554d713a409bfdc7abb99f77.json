{
    "patch": "private void init() {\n    nameValues = new ConcurrentHashMap<>();\n    strategies = new Strategy[0];\n\n    if (formatPattern == null) {\n        throw new IllegalArgumentException(\"Null format pattern\");\n    }\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<>();\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    if (!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    String[] formatFields = DateFormatSymbols.getInstance(locale).getEras();\n    final int modify = (formatFields[0].length() == 0) ? 1 : 0;\n\n    currentFormatField = formatFields[0];\n    Strategy currentStrategy = getStrategy(currentFormatField);\n    for (int i = modify; i < formatFields.length; ++i) {\n        final String formatField = formatFields[i];\n        nextStrategy = getStrategy(formatField);\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = formatField;\n        currentStrategy = nextStrategy;\n    }\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[collector.size()]);\n    parsePattern = Pattern.compile(regex.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..a8ea2c70 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,41 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+private void init() {\n+    nameValues = new ConcurrentHashMap<>();\n+    strategies = new Strategy[0];\n+\n+    if (formatPattern == null) {\n+        throw new IllegalArgumentException(\"Null format pattern\");\n+    }\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<>();\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    if (!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+\n+    String[] formatFields = DateFormatSymbols.getInstance(locale).getEras();\n+    final int modify = (formatFields[0].length() == 0) ? 1 : 0;\n+\n+    currentFormatField = formatFields[0];\n+    Strategy currentStrategy = getStrategy(currentFormatField);\n+    for (int i = modify; i < formatFields.length; ++i) {\n+        final String formatField = formatFields[i];\n+        nextStrategy = getStrategy(formatField);\n+        if (currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField = formatField;\n+        currentStrategy = nextStrategy;\n+    }\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[collector.size()]);\n+    parsePattern = Pattern.compile(regex.toString());\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}