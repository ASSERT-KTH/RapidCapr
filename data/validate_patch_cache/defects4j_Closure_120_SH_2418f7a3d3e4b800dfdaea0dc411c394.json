{
    "patch": "      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop or within a function call.\n      Set<BasicBlock> visitedBlocks = new HashSet<>();\n      for (BasicBlock block = ref.getBasicBlock();\n           block != null && visitedBlocks.add(block); block = block.getParent()) {\n        if (block.isFunction) {\n          return false;\n        } else if (block.isLoop) {\n          return false;\n        } else if (block.getLastStatement().findFirstMatch(\n            new Predicate<Statement>() {\n              @Override\n              public boolean apply(Statement input) {\n                return NodeUtil.isFunctionCall(input, varName);\n              }\n            }) != null) {\n          return false;\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..b4b4ffb1 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,31 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop or within a function call.\n+      Set<BasicBlock> visitedBlocks = new HashSet<>();\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null && visitedBlocks.add(block); block = block.getParent()) {\n+        if (block.isFunction) {\n+          return false;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.getLastStatement().findFirstMatch(\n+            new Predicate<Statement>() {\n+              @Override\n+              public boolean apply(Statement input) {\n+                return NodeUtil.isFunctionCall(input, varName);\n+              }\n+            }) != null) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}