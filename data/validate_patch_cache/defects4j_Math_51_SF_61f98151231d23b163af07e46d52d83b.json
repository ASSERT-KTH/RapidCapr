{
    "patch": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Set up Brent's method.\n    double e = 0.0;\n    double d = 0.0;\n    double fx = f1;\n    double xm = 0.5 * (x0 + x1);\n    double fm = computeObjectiveValue(xm);\n    double p = 0.0;\n    double q = 0.0;\n    double r = 0.0;\n    double s = 0.0;\n    double tol1 = ftol * 0.5;\n    double tol2 = tol1 + atol;\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        if (FastMath.abs(fm) < FastMath.abs(fx)) {\n            // Swap x0, x1, xm, f0, f1, fm, and invert the interval.\n            inverted = !inverted;\n            double temp = x0;\n            x0 = x1;\n            x1 = temp;\n            temp = f0;\n            f0 = f1;\n            f1 = temp;\n            xm = x0 + (x1 - x0) * 0.5;\n            fx = f1;\n            fm = computeObjectiveValue(xm);\n        }\n\n        // Check for convergence and update the interval.\n        double s_tol = 2.0 * tol2;\n        double delta = e;\n        e = d;\n\n        if (FastMath.abs(fm) <= tol2 || FastMath.abs(x1 - x0) <= s_tol) {\n            // We have converged on a root.\n            switch (allowed) {\n            case ANY_SIDE:\n                return xm;\n            case LEFT_SIDE:\n                return inverted ? x1 : x0;\n            case RIGHT_SIDE:\n                return inverted ? x0 : x1;\n            case BELOW_SIDE:\n                return (fm <= 0) ? xm : x0;\n            case ABOVE_SIDE:\n                return (fm >= 0) ? xm : x0;\n            default:\n                throw new MathInternalError();\n            }\n        }\n\n        if (FastMath.abs(e) < tol1) {\n            // We need to use the secant method for approximating the derivative.\n            s = fm / fx;\n            if (x0 == xm) {\n                p = 2.0 * (x1 - xm) * s;\n                q = 1.0 - s;\n            } else {\n                q = fx / f0;\n                r = fm / f0;\n                p = s * (2.0 * (x1 - xm) * q * (q - r) - (xm - x0) * (r - 1.0));\n                q = (q - 1.0) * (r - 1.0) * (s - 1.0);\n            }\n            if (p > 0) {\n                q = -q;\n            }\n            p = FastMath.abs(p);\n            double s_tmp = 2.0 * tol1 * FastMath.min(0.25, p / q);\n            s_tol = FastMath.max(tol2, s_tmp);\n            d = e;\n            e = s;\n        } else {\n            // We need to use Brent's method.\n            q = fx / f0;\n            r = fm / fx;\n            p = s * (2.0 * (x1 - xm) * q * (q - r) - (x1 - x0) * (r - 1.0));\n            q = (q - 1.0) * (r - 1.0) * (s - 1.0);\n            s = p / q;\n            if (s < 0.0 || s > 1.0 || p > 2.0 * (x1 - xm) * q - (x1 - x0) * r) {\n                // We need to use bisection.\n                s = 0.5 * (d = e);\n                s_tol = tol1;\n            } else {\n                // We can continue with Brent's method.\n                double x_tmp = xm + s * (x1 - xm);\n                d = e;\n                e = s;\n            }\n        }\n\n        // Update xm, fm, and the bounds.\n        xm = x1 + (inverted ? -1 : 1) * FastMath.max(s_tol, FastMath.abs(0.5 * e));\n        fx = computeObjectiveValue(xm);\n        if (fx * f1 < 0) {\n            // The value of x1 has switched to the other bound, thus inverting\n            // the interval.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n            case ILLINOIS:\n                f0 *= 0.5;\n                break;\n            case PEGASUS:\n                f0 *= f1 / (f1 + fx);\n                break;\n            }\n        }\n        // Update from [x0, x1] to [x0, xm].\n        x1 = xm;\n        f1 = fx;\n\n        // Check for too many evaluations.\n        if (getEvaluations() >= getMaxEvaluations()) {\n            throw new TooManyEvaluationsException(getMaxEvaluations());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..d04391893 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,155 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() {\n+    // Get initial solution\n+    double x0 = getMin();\n+    double x1 = getMax();\n+    double f0 = computeObjectiveValue(x0);\n+    double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    // If one of the bounds is the exact root, return it. Since these are\n+    // not under-approximations or over-approximations, we can return them\n+    // regardless of the allowed solutions.\n+    if (f0 == 0.0) {\n+        return x0;\n+    }\n+    if (f1 == 0.0) {\n+        return x1;\n+    }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Verify bracketing of initial solution.\n+    verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Get accuracies.\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    // Set up Brent's method.\n+    double e = 0.0;\n+    double d = 0.0;\n+    double fx = f1;\n+    double xm = 0.5 * (x0 + x1);\n+    double fm = computeObjectiveValue(xm);\n+    double p = 0.0;\n+    double q = 0.0;\n+    double r = 0.0;\n+    double s = 0.0;\n+    double tol1 = ftol * 0.5;\n+    double tol2 = tol1 + atol;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    // Keep track of inverted intervals, meaning that the left bound is\n+    // larger than the right bound.\n+    boolean inverted = false;\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+    // Keep finding better approximations.\n+    while (true) {\n+        if (FastMath.abs(fm) < FastMath.abs(fx)) {\n+            // Swap x0, x1, xm, f0, f1, fm, and invert the interval.\n+            inverted = !inverted;\n+            double temp = x0;\n+            x0 = x1;\n+            x1 = temp;\n+            temp = f0;\n+            f0 = f1;\n+            f1 = temp;\n+            xm = x0 + (x1 - x0) * 0.5;\n+            fx = f1;\n+            fm = computeObjectiveValue(xm);\n+        }\n+\n+        // Check for convergence and update the interval.\n+        double s_tol = 2.0 * tol2;\n+        double delta = e;\n+        e = d;\n+\n+        if (FastMath.abs(fm) <= tol2 || FastMath.abs(x1 - x0) <= s_tol) {\n+            // We have converged on a root.\n+            switch (allowed) {\n+            case ANY_SIDE:\n+                return xm;\n+            case LEFT_SIDE:\n+                return inverted ? x1 : x0;\n+            case RIGHT_SIDE:\n+                return inverted ? x0 : x1;\n+            case BELOW_SIDE:\n+                return (fm <= 0) ? xm : x0;\n+            case ABOVE_SIDE:\n+                return (fm >= 0) ? xm : x0;\n+            default:\n+                throw new MathInternalError();\n             }\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n+        if (FastMath.abs(e) < tol1) {\n+            // We need to use the secant method for approximating the derivative.\n+            s = fm / fx;\n+            if (x0 == xm) {\n+                p = 2.0 * (x1 - xm) * s;\n+                q = 1.0 - s;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                q = fx / f0;\n+                r = fm / f0;\n+                p = s * (2.0 * (x1 - xm) * q * (q - r) - (xm - x0) * (r - 1.0));\n+                q = (q - 1.0) * (r - 1.0) * (s - 1.0);\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (p > 0) {\n+                q = -q;\n+            }\n+            p = FastMath.abs(p);\n+            double s_tmp = 2.0 * tol1 * FastMath.min(0.25, p / q);\n+            s_tol = FastMath.max(tol2, s_tmp);\n+            d = e;\n+            e = s;\n+        } else {\n+            // We need to use Brent's method.\n+            q = fx / f0;\n+            r = fm / fx;\n+            p = s * (2.0 * (x1 - xm) * q * (q - r) - (x1 - x0) * (r - 1.0));\n+            q = (q - 1.0) * (r - 1.0) * (s - 1.0);\n+            s = p / q;\n+            if (s < 0.0 || s > 1.0 || p > 2.0 * (x1 - xm) * q - (x1 - x0) * r) {\n+                // We need to use bisection.\n+                s = 0.5 * (d = e);\n+                s_tol = tol1;\n+            } else {\n+                // We can continue with Brent's method.\n+                double x_tmp = xm + s * (x1 - xm);\n+                d = e;\n+                e = s;\n             }\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+        // Update xm, fm, and the bounds.\n+        xm = x1 + (inverted ? -1 : 1) * FastMath.max(s_tol, FastMath.abs(0.5 * e));\n+        fx = computeObjectiveValue(xm);\n+        if (fx * f1 < 0) {\n+            // The value of x1 has switched to the other bound, thus inverting\n+            // the interval.\n+            x0 = x1;\n+            f0 = f1;\n+            inverted = !inverted;\n+        } else {\n+            switch (method) {\n+            case ILLINOIS:\n+                f0 *= 0.5;\n+                break;\n+            case PEGASUS:\n+                f0 *= f1 / (f1 + fx);\n+                break;\n             }\n         }\n+        // Update from [x0, x1] to [x0, xm].\n+        x1 = xm;\n+        f1 = fx;\n+\n+        // Check for too many evaluations.\n+        if (getEvaluations() >= getMaxEvaluations()) {\n+            throw new TooManyEvaluationsException(getMaxEvaluations());\n+        }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}