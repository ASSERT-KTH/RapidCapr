{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    simplex = original;\n                }\n\n            } else {\n\n                // compute the contracted simplex\n                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n                if (comparator.compare(contracted, best) < 0) {\n                    // accept the contracted simplex\n                    simplex = reflectedSimplex;\n                } else {\n                    // perform a shrink step\n                    performShrink(comparator, original);\n                    if (comparator.compare(simplex[0], best) >= 0) {\n                        return;\n                    }\n                }\n\n            }\n\n            // check convergence\n            final double range = getMax(pointTolerance, relativeTolerance * (best.getPoint()[0] + 1.0));\n            if (isConverged(range, getValueAccuracy())) {\n                return;\n            }\n\n        }\n\n    }\n    \n    protected void performShrink(Comparator<RealPointValuePair> comparator, RealPointValuePair[] original) {\n        final RealPointValuePair best = simplex[0];\n        for (int i = 1; i < simplexSize; i++) {\n            final double[] point = original[i].getPoint();\n            for (int j = 0; j < point.length; j++) {\n                point[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n            }\n            simplex[i] = new RealPointValuePair(point, Double.NaN);\n        }\n        Arrays.sort(simplex, comparator);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..be8610dfb 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -71,32 +71,56 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n             // perform a reflection step\n             final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n                     simplex = reflectedSimplex;\n+                } else {\n+                    simplex = original;\n                 }\n \n-                return;\n+            } else {\n \n-            }\n+                // compute the contracted simplex\n+                final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+                if (comparator.compare(contracted, best) < 0) {\n+                    // accept the contracted simplex\n+                    simplex = reflectedSimplex;\n+                } else {\n+                    // perform a shrink step\n+                    performShrink(comparator, original);\n+                    if (comparator.compare(simplex[0], best) >= 0) {\n+                        return;\n+                    }\n+                }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            }\n \n             // check convergence\n+            final double range = getMax(pointTolerance, relativeTolerance * (best.getPoint()[0] + 1.0));\n+            if (isConverged(range, getValueAccuracy())) {\n                 return;\n             }\n \n         }\n \n     }\n+    \n+    protected void performShrink(Comparator<RealPointValuePair> comparator, RealPointValuePair[] original) {\n+        final RealPointValuePair best = simplex[0];\n+        for (int i = 1; i < simplexSize; i++) {\n+            final double[] point = original[i].getPoint();\n+            for (int j = 0; j < point.length; j++) {\n+                point[j] = best.getPoint()[j] + sigma * (point[j] - best.getPoint()[j]);\n+            }\n+            simplex[i] = new RealPointValuePair(point, Double.NaN);\n+        }\n+        Arrays.sort(simplex, comparator);\n+    }\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}