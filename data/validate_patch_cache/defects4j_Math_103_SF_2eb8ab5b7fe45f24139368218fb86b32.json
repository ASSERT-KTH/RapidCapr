{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    // Check for NaN\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    \n    // Check for infinite values\n    if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    }\n    \n    // Check if x is within 40 standard deviations from the mean\n    double z = (x - mean) / standardDeviation;\n    if (z < -40.0) {\n        return 0.0;\n    } else if (z > 40.0) {\n        return 1.0;\n    }\n    \n    // Calculate the cumulative probability using Erf.erf()\n    double result;\n    try {\n        result = 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n    } catch (MaxIterationsExceededException e) {\n        result = z > 0 ? 1.0 : 0.0;\n    }\n    \n    // Check for underflow and overflow\n    if (result < Double.MIN_VALUE) {\n        result = Double.MIN_VALUE;\n    } else if (result > 1.0 - Double.MIN_VALUE) {\n        result = 1.0 - Double.MIN_VALUE;\n    }\n    \n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..97750fdcc 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,11 +105,43 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    // Check for NaN\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n     }\n     \n+    // Check for infinite values\n+    if (Double.isInfinite(x)) {\n+        return x < 0 ? 0.0 : 1.0;\n+    }\n+    \n+    // Check if x is within 40 standard deviations from the mean\n+    double z = (x - mean) / standardDeviation;\n+    if (z < -40.0) {\n+        return 0.0;\n+    } else if (z > 40.0) {\n+        return 1.0;\n+    }\n+    \n+    // Calculate the cumulative probability using Erf.erf()\n+    double result;\n+    try {\n+        result = 0.5 * (1.0 + Erf.erf(z / Math.sqrt(2.0)));\n+    } catch (MaxIterationsExceededException e) {\n+        result = z > 0 ? 1.0 : 0.0;\n+    }\n+    \n+    // Check for underflow and overflow\n+    if (result < Double.MIN_VALUE) {\n+        result = Double.MIN_VALUE;\n+    } else if (result > 1.0 - Double.MIN_VALUE) {\n+        result = 1.0 - Double.MIN_VALUE;\n+    }\n+    \n+    return result;\n+}\n+    \n     /**\n      * For this distribution, X, this method returns the critical point x, such\n      * that P(X &lt; x) = <code>p</code>.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}