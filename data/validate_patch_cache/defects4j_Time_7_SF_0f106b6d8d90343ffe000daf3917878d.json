{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos >= 0) {\n        if (chrono.year().isLeap(defaultYear)\n                && bucket.getDateTime().getDayOfMonth() == 29\n                && bucket.getDateTime().getMonthOfYear() == 2) {\n            try {\n                // Attempt to resolve to Feb 29th.\n                instant.setMillis(bucket.computeMillis(false, \"2 29\"));\n            } catch (IllegalArgumentException e) {\n                /*\n                 * We only want to throw an exception if we tried\n                 * setting it to Feb 29th and failed. For other errors,\n                 * we want to fall through and return the new position.\n                 */\n                if (!e.getMessage().startsWith(\"Illegal instant due to time zone offset transition\")) {\n                    throw e;\n                }\n            }\n        } else {\n            instant.setMillis(bucket.computeMillis(false, text));\n        }\n        \n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..84268683 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,22 +697,42 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos >= 0) {\n+        if (chrono.year().isLeap(defaultYear)\n+                && bucket.getDateTime().getDayOfMonth() == 29\n+                && bucket.getDateTime().getMonthOfYear() == 2) {\n+            try {\n+                // Attempt to resolve to Feb 29th.\n+                instant.setMillis(bucket.computeMillis(false, \"2 29\"));\n+            } catch (IllegalArgumentException e) {\n+                /*\n+                 * We only want to throw an exception if we tried\n+                 * setting it to Feb 29th and failed. For other errors,\n+                 * we want to fall through and return the new position.\n+                 */\n+                if (!e.getMessage().startsWith(\"Illegal instant due to time zone offset transition\")) {\n+                    throw e;\n+                }\n+            }\n+        } else {\n+            instant.setMillis(bucket.computeMillis(false, text));\n         }\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -724,8 +744,9 @@ public class DateTimeFormatter {\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n     }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}