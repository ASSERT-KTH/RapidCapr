{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  AstNode name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    // create an unnamed function name\n    name = new Name();\n    ((Name) name).setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    // Old Rhino tagged the empty name node with the line number of the\n    // declaration.\n    newName.setLineno(functionNode.getLineno());\n    // paren might not be on the same line as the function keyword\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn));\n  }\n\n  node.addChildToBack(newName);\n  Node lp = newNode(Token.LP);\n  // We know the paren has to appear on the same line as the\n  // function name (or else a semicolon will be inserted.), so set\n  // its values accordingly.\n  lp.setLineno(newName.getLineno());\n\n  Name fnName = functionNode.getFunctionName();\n  if (fnName != null) {\n    lp.setCharno(newName.getCharno() + newName.getLength());\n  } else {\n    lp.setCharno(newName.getCharno() + 8);\n  }\n\n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..112615af 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,51 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  AstNode name = functionNode.getFunctionName();\n+  boolean isUnnamedFunction = false;\n+  if (name == null) {\n+    // create an unnamed function name\n+    name = new Name();\n+    ((Name) name).setIdentifier(\"\");\n+    isUnnamedFunction = true;\n+  }\n+  Node node = newNode(Token.FUNCTION);\n+  Node newName = transform(name);\n+  if (isUnnamedFunction) {\n+    // Old Rhino tagged the empty name node with the line number of the\n+    // declaration.\n+    newName.setLineno(functionNode.getLineno());\n+    // paren might not be on the same line as the function keyword\n+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+    newName.setCharno(position2charno(lpColumn));\n+  }\n+\n+  node.addChildToBack(newName);\n+  Node lp = newNode(Token.LP);\n+  // We know the paren has to appear on the same line as the\n+  // function name (or else a semicolon will be inserted.), so set\n+  // its values accordingly.\n+  lp.setLineno(newName.getLineno());\n+\n+  Name fnName = functionNode.getFunctionName();\n+  if (fnName != null) {\n+    lp.setCharno(newName.getCharno() + newName.getLength());\n+  } else {\n+    lp.setCharno(newName.getCharno() + 8);\n+  }\n+\n+  for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+  }\n+  node.addChildToBack(lp);\n+\n+  Node bodyNode = transform(functionNode.getBody());\n+  parseDirectives(bodyNode);\n+  node.addChildToBack(bodyNode);\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}