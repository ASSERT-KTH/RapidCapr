{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        millis += (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);\n        millis += (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);\n        millis += (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n        millis += (getDays() * DateTimeConstants.MILLIS_PER_DAY);\n        millis += (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n\n        int yearsToAdd = getYears();\n        int monthsToAdd = getMonths();\n        if (type.isSupported(DurationFieldType.years())) {\n            yearsToAdd += (monthsToAdd / 12);\n            monthsToAdd %= 12;\n        }\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        result = result.withYears(yearsToAdd);\n        result = result.withMonths(monthsToAdd);\n\n        return result.normalizedStandard(type);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2c87d9b3 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,26 +1615,25 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        long millis = getMillis();\n+        millis += (getSeconds() * DateTimeConstants.MILLIS_PER_SECOND);\n+        millis += (getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE);\n+        millis += (getHours() * DateTimeConstants.MILLIS_PER_HOUR);\n+        millis += (getDays() * DateTimeConstants.MILLIS_PER_DAY);\n+        millis += (getWeeks() * DateTimeConstants.MILLIS_PER_WEEK);\n+\n+        int yearsToAdd = getYears();\n+        int monthsToAdd = getMonths();\n+        if (type.isSupported(DurationFieldType.years())) {\n+            yearsToAdd += (monthsToAdd / 12);\n+            monthsToAdd %= 12;\n         }\n-        return result;\n+\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        result = result.withYears(yearsToAdd);\n+        result = result.withMonths(monthsToAdd);\n+\n+        return result.normalizedStandard(type);\n     }\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}