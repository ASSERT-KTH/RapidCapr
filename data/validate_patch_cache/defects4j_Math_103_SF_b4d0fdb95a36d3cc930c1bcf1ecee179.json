{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        double result;\n        double z = (x - mean) / standardDeviation;\n        if (Double.isNaN(z)) {\n            result = Double.NaN;\n        } else if (z == 0) {\n            result = 0.5;\n        } else {\n            double negativeZ = -z;\n            if (z > 0) {\n                negativeZ = z;\n            }\n            double powerOfNegZ = Math.pow(negativeZ, 2);\n            double firstTerm = Math.exp(-powerOfNegZ / 2.0) / Math.sqrt(2.0 * Math.PI);\n            double secondTerm = 1.0 / (1.0 + 0.3275911 * negativeZ);\n            double thirdTerm = 0.254829592 * secondTerm;\n            thirdTerm -= 0.284496736 * Math.pow(secondTerm, 2);\n            thirdTerm += 1.421413741 * Math.pow(secondTerm, 3);\n            thirdTerm -= 1.453152027 * Math.pow(secondTerm, 4);\n            thirdTerm += 1.061405429 * Math.pow(secondTerm, 5);\n            thirdTerm *= Math.exp(powerOfNegZ);\n            if (z < 0) {\n                result = thirdTerm / firstTerm;\n            } else {\n                result = 1.0 - thirdTerm / firstTerm;\n            }\n            if (Double.isInfinite(result)) {\n                result = z < 0 ? 0.0 : 1.0;\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..fa8122aa3 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,36 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        double result;\n+        double z = (x - mean) / standardDeviation;\n+        if (Double.isNaN(z)) {\n+            result = Double.NaN;\n+        } else if (z == 0) {\n+            result = 0.5;\n+        } else {\n+            double negativeZ = -z;\n+            if (z > 0) {\n+                negativeZ = z;\n+            }\n+            double powerOfNegZ = Math.pow(negativeZ, 2);\n+            double firstTerm = Math.exp(-powerOfNegZ / 2.0) / Math.sqrt(2.0 * Math.PI);\n+            double secondTerm = 1.0 / (1.0 + 0.3275911 * negativeZ);\n+            double thirdTerm = 0.254829592 * secondTerm;\n+            thirdTerm -= 0.284496736 * Math.pow(secondTerm, 2);\n+            thirdTerm += 1.421413741 * Math.pow(secondTerm, 3);\n+            thirdTerm -= 1.453152027 * Math.pow(secondTerm, 4);\n+            thirdTerm += 1.061405429 * Math.pow(secondTerm, 5);\n+            thirdTerm *= Math.exp(powerOfNegZ);\n+            if (z < 0) {\n+                result = thirdTerm / firstTerm;\n+            } else {\n+                result = 1.0 - thirdTerm / firstTerm;\n+            }\n+            if (Double.isInfinite(result)) {\n+                result = z < 0 ? 0.0 : 1.0;\n+            }\n+        }\n+        return result;\n     }\n     \n     /**",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}