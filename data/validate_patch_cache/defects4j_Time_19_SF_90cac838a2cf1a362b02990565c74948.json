{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int initialOffset = getOffset(instantLocal);\n    long instantBefore = instantLocal;\n    int offsetBefore = initialOffset;\n    long instantAfter = instantLocal;\n    int offsetAfter = initialOffset;\n    if (initialOffset >= 0) {\n        // look for a transition from DST to non-DST (losing one hour)\n        while (true) {\n            if (instantBefore <= (Long.MIN_VALUE + maxMillisBehind) + 1) {\n                break;\n            }\n            instantBefore -= 1L;\n            offsetBefore = getOffset(instantBefore);\n            if (offsetBefore < initialOffset) {\n                break;\n            }\n            if (offsetBefore > initialOffset) {\n                break;\n            }\n        }\n    } else {\n        // look for a transition from non-DST to DST (gaining one hour)\n        while (true) {\n            if (instantBefore <= (Long.MIN_VALUE + maxMillisBehind) + 1) {\n                break;\n            }\n            instantBefore -= 1L;\n            offsetBefore = getOffset(instantBefore);\n            if (offsetBefore > initialOffset) {\n                break;\n            }\n            if (offsetBefore < initialOffset) {\n                break;\n            }\n        }\n    }\n    if (offsetBefore == initialOffset) {\n        return initialOffset;\n    }\n    // apply \"narrowing\" algorithm\n    while (true) {\n        final long instantMid = (instantBefore + instantAfter) / 2L;\n        final int offsetMid = getOffset(instantMid);\n        if (offsetMid < initialOffset) {\n            instantBefore = instantMid;\n            offsetBefore = offsetMid;\n        } else {\n            if (offsetMid <= initialOffset) {\n                return initialOffset;\n            }\n            instantAfter = instantMid;\n            offsetAfter = offsetMid;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..94358695 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,63 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int initialOffset = getOffset(instantLocal);\n+    long instantBefore = instantLocal;\n+    int offsetBefore = initialOffset;\n+    long instantAfter = instantLocal;\n+    int offsetAfter = initialOffset;\n+    if (initialOffset >= 0) {\n+        // look for a transition from DST to non-DST (losing one hour)\n+        while (true) {\n+            if (instantBefore <= (Long.MIN_VALUE + maxMillisBehind) + 1) {\n+                break;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+            instantBefore -= 1L;\n+            offsetBefore = getOffset(instantBefore);\n+            if (offsetBefore < initialOffset) {\n+                break;\n+            }\n+            if (offsetBefore > initialOffset) {\n+                break;\n             }\n         }\n-        return offsetAdjusted;\n+    } else {\n+        // look for a transition from non-DST to DST (gaining one hour)\n+        while (true) {\n+            if (instantBefore <= (Long.MIN_VALUE + maxMillisBehind) + 1) {\n+                break;\n+            }\n+            instantBefore -= 1L;\n+            offsetBefore = getOffset(instantBefore);\n+            if (offsetBefore > initialOffset) {\n+                break;\n+            }\n+            if (offsetBefore < initialOffset) {\n+                break;\n+            }\n+        }\n+    }\n+    if (offsetBefore == initialOffset) {\n+        return initialOffset;\n+    }\n+    // apply \"narrowing\" algorithm\n+    while (true) {\n+        final long instantMid = (instantBefore + instantAfter) / 2L;\n+        final int offsetMid = getOffset(instantMid);\n+        if (offsetMid < initialOffset) {\n+            instantBefore = instantMid;\n+            offsetBefore = offsetMid;\n+        } else {\n+            if (offsetMid <= initialOffset) {\n+                return initialOffset;\n+            }\n+            instantAfter = instantMid;\n+            offsetAfter = offsetMid;\n+        }\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}