{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n    String suffix = \"\";\n    if (n.isNew())\n      suffix = \".<init>\";\n    // The best type name is the actual type name.\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null &&\n              !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          String name = objectType.toString() + \".\" + propName;\n          return name.replace(\"[]\", \"Array\").replace(\"[object \", \"\") + suffix;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n\n    if (type.isFunctionPrototypeType() ||\n        type.isConstructor() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString().replace(\"[function\", \"function\") + suffix;\n    }\n\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName + suffix;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\" + suffix;\n    } else {\n      return type.toString().replace(\"[object\", \"\") + suffix;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..2820a5c9 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -722,9 +722,10 @@ class TypeValidator {\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n-\n+    String suffix = \"\";\n+    if (n.isNew())\n+      suffix = \".<init>\";\n     // The best type name is the actual type name.\n-\n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n@@ -738,17 +739,18 @@ class TypeValidator {\n               objectType, propName);\n         } else {\n           // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+          while (objectType != null &&\n+              !objectType.hasOwnProperty(propName)) {\n             objectType = objectType.getImplicitPrototype();\n           }\n         }\n-\n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n         if (objectType != null &&\n             (objectType.getConstructor() != null ||\n              objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+          String name = objectType.toString() + \".\" + propName;\n+          return name.replace(\"[]\", \"Array\").replace(\"[object \", \"\") + suffix;\n         }\n       }\n     }\n@@ -760,19 +762,22 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n+\n     if (type.isFunctionPrototypeType() ||\n+        type.isConstructor() ||\n         (type.toObjectType() != null &&\n          type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+      return type.toString().replace(\"[function\", \"function\") + suffix;\n     }\n+\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n+      return qualifiedName + suffix;\n     } else if (type.isFunctionType()) {\n       // Don't show complex function names.\n-      return \"function\";\n+      return \"function\" + suffix;\n     } else {\n-      return type.toString();\n+      return type.toString().replace(\"[object\", \"\") + suffix;\n     }\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...tual parameter 1 of [Foo] does not match form...> but was:<...tual parameter 1 of [function (new:Foo, string): undefined] does not match form...>",
    "test_result": "FAIL"
}