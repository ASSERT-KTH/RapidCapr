{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    boolean isBeforeCutover, isAfterCutover;\n    isBeforeCutover = isAfterCutover = false;\n\n    int month = monthOfYear;\n    int yearForJulian = year;\n\n    if (year < iCutoverYear ||\n            (year == iCutoverYear && \n            monthOfYear < iCutoverMonthOfYear) ||\n            (year == iCutoverYear && \n            monthOfYear == iCutoverMonthOfYear && \n            dayOfMonth < iCutoverDay)) \n    {    \n        isBeforeCutover = true;\n        if (year == iCutoverYear &&\n                monthOfYear == iCutoverMonthOfYear&&\n                dayOfMonth == (iCutoverDay + 1)) {\n            // This is a rare case where JodaTime assumes Gregorian date to be leap year\n            // while it is not a leap year in the Gregorian calendar\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n    else if (year > iCutoverYear ||\n            (year == iCutoverYear && \n            monthOfYear > iCutoverMonthOfYear) ||\n            (year == iCutoverYear && \n            monthOfYear == iCutoverMonthOfYear && \n            dayOfMonth >= iCutoverDay)) \n    {\n        isAfterCutover = true;\n        // Adjust the month for the Gregorian calendar as it has leap year adjustments\n        if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n            month += 3;\n        } else {// month = Mar-Dec; m=month-2; y=year+1;\n            month -= 9;\n            yearForJulian++;\n        }\n    }\n    else {\n        if(iCutoverInstant == Long.MIN_VALUE) {// i.e., Joda-Time is generating the cutover instant\n            if (year >= iGregorianChronology.getMinimumYear() && \n                    year <= iGregorianChronology.getMaximumYear()) {\n                isAfterCutover = true;\n                // Adjust the month for the Gregorian calendar as it has leap year adjustments\n                if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n                    month += 3;\n                } else {// month = Mar-Dec; m=month-2; y=year+1;\n                    month -= 9;\n                    yearForJulian++;\n                }\n            } else {\n                isBeforeCutover = true;\n            }\n        } else {\n            // if cutover is a user-defined instant, prefer the upper calendar (i.e., Gregorian)\n            isAfterCutover = true;\n            // Adjust the month for the Gregorian calendar as it has leap year adjustments\n            if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n                month += 3;\n            } else {// month = Mar-Dec; m=month-2; y=year+1;\n                month -= 9;\n                yearForJulian++;\n            }\n        }\n    }\n\n    if(isBeforeCutover) {\n        try {\n            return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch(IllegalFieldValueException e) {\n            // Refer to the comment above for similar code\n            if (year == 1582 && monthOfYear == 10) {\n                if (dayOfMonth >= 5 && dayOfMonth <= 14) {\n                    throw new IllegalArgumentException(\"Specified date does not exist\");\n                }\n            }\n            try {\n                return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n            } catch(IllegalFieldValueException ex) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            }\n        }\n    } else if(isAfterCutover) {\n        try {\n            return iGregorianChronology.getDateTimeMillis(year, month, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch(IllegalFieldValueException e) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    } else {\n        long jInstant, gInstant, result;\n        try {\n            jInstant = iJulianChronology.getDateTimeMillis(yearForJulian, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch(IllegalFieldValueException je) {\n            jInstant = -1L;\n        }\n        try {\n            gInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch(IllegalFieldValueException ge) {\n            gInstant = -1L;\n        }\n        if(jInstant == -1L && gInstant == -1L) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        } else if(jInstant == -1L) {\n            result = gInstant;\n        } else if(gInstant == -1L) {\n            result = jInstant;\n        } else {\n            if(jInstant < iCutoverMillis && gInstant >= iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            } else if(jInstant >= iCutoverMillis && gInstant < iCutoverMillis) {\n                throw new IllegalArgumentException(\"Specified date does not exist\");\n            } else {\n                result = (jInstant < gInstant) ? jInstant : gInstant;\n            }\n        }\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..82645e64 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,35 +347,139 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n         throws IllegalArgumentException\n+{\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+\n+    boolean isBeforeCutover, isAfterCutover;\n+    isBeforeCutover = isAfterCutover = false;\n+\n+    int month = monthOfYear;\n+    int yearForJulian = year;\n+\n+    if (year < iCutoverYear ||\n+            (year == iCutoverYear && \n+            monthOfYear < iCutoverMonthOfYear) ||\n+            (year == iCutoverYear && \n+            monthOfYear == iCutoverMonthOfYear && \n+            dayOfMonth < iCutoverDay)) \n+    {    \n+        isBeforeCutover = true;\n+        if (year == iCutoverYear &&\n+                monthOfYear == iCutoverMonthOfYear&&\n+                dayOfMonth == (iCutoverDay + 1)) {\n+            // This is a rare case where JodaTime assumes Gregorian date to be leap year\n+            // while it is not a leap year in the Gregorian calendar\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+    }\n+    else if (year > iCutoverYear ||\n+            (year == iCutoverYear && \n+            monthOfYear > iCutoverMonthOfYear) ||\n+            (year == iCutoverYear && \n+            monthOfYear == iCutoverMonthOfYear && \n+            dayOfMonth >= iCutoverDay)) \n     {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        isAfterCutover = true;\n+        // Adjust the month for the Gregorian calendar as it has leap year adjustments\n+        if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n+            month += 3;\n+        } else {// month = Mar-Dec; m=month-2; y=year+1;\n+            month -= 9;\n+            yearForJulian++;\n+        }\n+    }\n+    else {\n+        if(iCutoverInstant == Long.MIN_VALUE) {// i.e., Joda-Time is generating the cutover instant\n+            if (year >= iGregorianChronology.getMinimumYear() && \n+                    year <= iGregorianChronology.getMaximumYear()) {\n+                isAfterCutover = true;\n+                // Adjust the month for the Gregorian calendar as it has leap year adjustments\n+                if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n+                    month += 3;\n+                } else {// month = Mar-Dec; m=month-2; y=year+1;\n+                    month -= 9;\n+                    yearForJulian++;\n+                }\n+            } else {\n+                isBeforeCutover = true;\n+            }\n+        } else {\n+            // if cutover is a user-defined instant, prefer the upper calendar (i.e., Gregorian)\n+            isAfterCutover = true;\n+            // Adjust the month for the Gregorian calendar as it has leap year adjustments\n+            if (monthOfYear > 2) { // if month= Jan/Feb; m=month; y=year;\n+                month += 3;\n+            } else {// month = Mar-Dec; m=month-2; y=year+1;\n+                month -= 9;\n+                yearForJulian++;\n+            }\n         }\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n+    if(isBeforeCutover) {\n+        try {\n+            return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch(IllegalFieldValueException e) {\n+            // Refer to the comment above for similar code\n+            if (year == 1582 && monthOfYear == 10) {\n+                if (dayOfMonth >= 5 && dayOfMonth <= 14) {\n+                    throw new IllegalArgumentException(\"Specified date does not exist\");\n+                }\n+            }\n+            try {\n+                return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                        hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            } catch(IllegalFieldValueException ex) {\n                 throw new IllegalArgumentException(\"Specified date does not exist\");\n             }\n         }\n-        return instant;\n+    } else if(isAfterCutover) {\n+        try {\n+            return iGregorianChronology.getDateTimeMillis(year, month, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch(IllegalFieldValueException e) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+    } else {\n+        long jInstant, gInstant, result;\n+        try {\n+            jInstant = iJulianChronology.getDateTimeMillis(yearForJulian, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch(IllegalFieldValueException je) {\n+            jInstant = -1L;\n+        }\n+        try {\n+            gInstant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                    hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch(IllegalFieldValueException ge) {\n+            gInstant = -1L;\n+        }\n+        if(jInstant == -1L && gInstant == -1L) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        } else if(jInstant == -1L) {\n+            result = gInstant;\n+        } else if(gInstant == -1L) {\n+            result = jInstant;\n+        } else {\n+            if(jInstant < iCutoverMillis && gInstant >= iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            } else if(jInstant >= iCutoverMillis && gInstant < iCutoverMillis) {\n+                throw new IllegalArgumentException(\"Specified date does not exist\");\n+            } else {\n+                result = (jInstant < gInstant) ? jInstant : gInstant;\n+            }\n+        }\n+        return result;\n     }\n+}\n \n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}