{
    "patch": "    if (NodeUtil.isFunctionExpression(n)) {\n      // Don't traverse function expressions that are being called immediately.\n      if (parent.getType() == Token.CALL &&\n          parent.getFirstChild() == n) {\n        return false;\n      }\n\n      // Don't traverse function expressions that are arguments to a call. These\n      // are producted by the compiler when generating code for calls with inline\n      // function expressions.\n      if (parent.getType() == Token.CALL &&\n          (parent.getLastChild() == n ||\n           parent.getSecondChild() == n)) {\n        return false;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..4d44b426 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,22 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      // Don't traverse function expressions that are being called immediately.\n+      if (parent.getType() == Token.CALL &&\n+          parent.getFirstChild() == n) {\n+        return false;\n+      }\n+\n+      // Don't traverse function expressions that are arguments to a call. These\n+      // are producted by the compiler when generating code for calls with inline\n+      // function expressions.\n+      if (parent.getType() == Token.CALL &&\n+          (parent.getLastChild() == n ||\n+           parent.getSecondChild() == n)) {\n+        return false;\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}