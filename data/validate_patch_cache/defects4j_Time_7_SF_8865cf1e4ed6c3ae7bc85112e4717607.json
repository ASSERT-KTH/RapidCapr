{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, null);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            long workMillis = bucket.computeMillis(false, text);\n            if (bucket.getOffsetInteger() != null) {\n                instantMillis = workMillis - bucket.getOffsetInteger().intValue();\n            } else if (bucket.getZone() != null) {\n                instantMillis = workMillis - bucket.getZone().getOffset(workMillis);\n            } else {\n                instantMillis = workMillis;\n            }\n            chrono = chrono.withUTC();\n            instant.setMillis(instantMillis);\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..b458be56 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,27 +702,28 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantMillis, chrono, iLocale, iPivotYear, null);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (newPos >= 0) {\n+            long workMillis = bucket.computeMillis(false, text);\n+            if (bucket.getOffsetInteger() != null) {\n+                instantMillis = workMillis - bucket.getOffsetInteger().intValue();\n+            } else if (bucket.getZone() != null) {\n+                instantMillis = workMillis - bucket.getZone().getOffset(workMillis);\n+            } else {\n+                instantMillis = workMillis;\n+            }\n+            chrono = chrono.withUTC();\n+            instant.setMillis(instantMillis);\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "error: incompatible types: <null> cannot be converted to int",
    "test_result": "ERROR"
}