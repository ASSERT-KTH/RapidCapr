{
    "patch": "import com.google.common.collect.Lists;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.FixedPointGraphTraversal;\nimport com.google.javascript.jscomp.graph.GraphTraversal;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph;\nimport com.google.javascript.rhino.FunctionNode;\nimport com.google.javascript.rhino.IR;\nimport com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.JSDocInfoBuilder;\nimport com.google.javascript.rhino.JSDocInfo.Type;\nimport com.google.javascript.rhino.JSDocInfo.Visibility;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.StaticSourceFile;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.Token.BreakContinueTarget;\nimport java.util.ArrayList;\nimport java.util.Deque;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.ArrayDeque;\n\nprivate void inlineAliases(GlobalNamespace namespace) {\n  // Invariant: All the names in the worklist meet condition (a).\n  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n  while (!workList.isEmpty()) {\n    Name name = workList.pop();\n\n    // Don't attempt to inline a getter or setter property as a variable.\n    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n      continue;\n    }\n\n    if (name.globalSets == 1 && name.localSets == 0 &&\n        name.aliasingGets > 0) {\n      // {@code name} meets condition (b).\n      List<Ref> refs = name.getRefs();\n      if (refs == null) {\n        continue;\n      }\n      // Find all its local and global aliases and try to inline them.\n      for (Ref ref : refs) {\n        if (ref.type == Ref.Type.ALIASING_GET) {\n          if (ref.scope.equals(name.scope)) {\n            // {@code name} meets condition (c) and has a local alias.\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          } else if (ref.scope.isLocal()) {\n            // {@code name} meets condition (c) and has a global alias.\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n    }\n\n    // Check if {@code name} has any aliases left after the\n    // local and global alias inlining above.\n    if ((name.type == Name.Type.OBJECTLIT ||\n         name.type == Name.Type.FUNCTION) &&\n        name.aliasingGets == 0 && name.props != null) {\n      // All of {@code name}'s children meet condition (a), so they can be\n      // added to the worklist.\n      workList.addAll(name.props);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..761fefdf 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,78 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n-    while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+import com.google.common.collect.Lists;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.FixedPointGraphTraversal;\n+import com.google.javascript.jscomp.graph.GraphTraversal;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.rhino.FunctionNode;\n+import com.google.javascript.rhino.IR;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.JSDocInfoBuilder;\n+import com.google.javascript.rhino.JSDocInfo.Type;\n+import com.google.javascript.rhino.JSDocInfo.Visibility;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.StaticSourceFile;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.Token.BreakContinueTarget;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.ArrayDeque;\n+\n+private void inlineAliases(GlobalNamespace namespace) {\n+  // Invariant: All the names in the worklist meet condition (a).\n+  Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+  while (!workList.isEmpty()) {\n+    Name name = workList.pop();\n+\n+    // Don't attempt to inline a getter or setter property as a variable.\n+    if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      continue;\n+    }\n+\n+    if (name.globalSets == 1 && name.localSets == 0 &&\n+        name.aliasingGets > 0) {\n+      // {@code name} meets condition (b).\n+      List<Ref> refs = name.getRefs();\n+      if (refs == null) {\n         continue;\n       }\n-\n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+      // Find all its local and global aliases and try to inline them.\n+      for (Ref ref : refs) {\n+        if (ref.type == Ref.Type.ALIASING_GET) {\n+          if (ref.scope.equals(name.scope)) {\n+            // {@code name} meets condition (c) and has a local alias.\n+            // Try to inline it.\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          } else if (ref.scope.isLocal()) {\n+            // {@code name} meets condition (c) and has a global alias.\n+            // Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n             }\n           }\n         }\n       }\n+    }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+    // Check if {@code name} has any aliases left after the\n+    // local and global alias inlining above.\n+    if ((name.type == Name.Type.OBJECTLIT ||\n+         name.type == Name.Type.FUNCTION) &&\n+        name.aliasingGets == 0 && name.props != null) {\n+      // All of {@code name}'s children meet condition (a), so they can be\n+      // added to the worklist.\n+      workList.addAll(name.props);\n     }\n   }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}