{
    "patch": "if (node.getType() == Token.CALL &&\n    child.getType() == Token.NAME &&\n    changed.add(child.getString())) {\n  Node targetFunction = getFunctionNode(child.getString());\n  if (targetFunction != null &&\n      !targetFunction.equals(node.getParent())) {\n    findCalledFunctions(targetFunction, changed);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..be1f37ee 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,15 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL &&\n+    child.getType() == Token.NAME &&\n+    changed.add(child.getString())) {\n+  Node targetFunction = getFunctionNode(child.getString());\n+  if (targetFunction != null &&\n+      !targetFunction.equals(node.getParent())) {\n+    findCalledFunctions(targetFunction, changed);\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}