{
    "patch": "import com.google.common.collect.ImmutableList;\n\n  /**\n   * @return The reference that provides the value for the variable at the\n   * time of the first read, if known, otherwise null.\n   *\n   * This is either the variable declaration (\"var a = ...\") or first\n   * reference following the declaration if it is an assignment.\n   */\n  Reference getInitializingReference() {\n    if (isInitializingDeclarationAt(0)) {\n      return references.get(0);\n    } else if (isInitializingAssignmentAt(1)) {\n      return references.get(1);\n    }\n    return null;\n  }\n\n  /**\n   * Constants are allowed to be defined after their first use.\n   */\n  Reference getInitializingReferenceForConstants() {\n    int size = references.size();\n    for (int i = 0; i < size; i++) {\n      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n        return references.get(i);\n      }\n    }\n    return null;\n  }\n\n  /**\n   * @return Whether the variable is only assigned a value once for its\n   *     lifetime.\n   */\n  boolean isAssignedOnceInLifetime() {\n    ImmutableList<Reference> assignments = getAssignments();\n    boolean seenAssignment = false;\n    boolean seenMaybeConstAssignment = false;\n    for (Reference ref : assignments) {\n      if (!seenAssignment &&\n          (ref.isDeclaration() || ref.isSimpleAssignmentToName())) {\n        // This is the first assignment. If it is a declaration, its value is\n        // the initializing value.\n        seenAssignment = true;\n        if (ref.isDeclaration()) {\n          return true;\n        }\n      } else if (!seenMaybeConstAssignment && !ref.isVarDeclaration()) {\n        // This is the first non-declaration reference seen after the first\n        // assignment. We stop looking if this reference is a declaration\n        // because it is not a simple initialization.\n        seenMaybeConstAssignment = true;\n        if (!ref.isSimpleAssignmentToName()) {\n          break;\n        }\n        // If we are seeing a second assignment and the first one is in a loop,\n        // we stop analyzing.  Assignments in a loop are NOT one-time\n        // assignments.\n        boolean isLoopAssignment = false;\n        for (BasicBlock block = ref.getNode().getBasicBlock();\n             block != null; block = block.getParent()) {\n          if (block.isFunction()) {\n            break;\n          } else if (block.isLoop()) {\n            isLoopAssignment = true;\n            break;\n          }\n        }\n        if (!isLoopAssignment && seenAssignment) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..378262fa 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,82 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+import com.google.common.collect.ImmutableList;\n+\n+  /**\n+   * @return The reference that provides the value for the variable at the\n+   * time of the first read, if known, otherwise null.\n+   *\n+   * This is either the variable declaration (\"var a = ...\") or first\n+   * reference following the declaration if it is an assignment.\n+   */\n+  Reference getInitializingReference() {\n+    if (isInitializingDeclarationAt(0)) {\n+      return references.get(0);\n+    } else if (isInitializingAssignmentAt(1)) {\n+      return references.get(1);\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Constants are allowed to be defined after their first use.\n+   */\n+  Reference getInitializingReferenceForConstants() {\n+    int size = references.size();\n+    for (int i = 0; i < size; i++) {\n+      if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) {\n+        return references.get(i);\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * @return Whether the variable is only assigned a value once for its\n+   *     lifetime.\n+   */\n+  boolean isAssignedOnceInLifetime() {\n+    ImmutableList<Reference> assignments = getAssignments();\n+    boolean seenAssignment = false;\n+    boolean seenMaybeConstAssignment = false;\n+    for (Reference ref : assignments) {\n+      if (!seenAssignment &&\n+          (ref.isDeclaration() || ref.isSimpleAssignmentToName())) {\n+        // This is the first assignment. If it is a declaration, its value is\n+        // the initializing value.\n+        seenAssignment = true;\n+        if (ref.isDeclaration()) {\n+          return true;\n+        }\n+      } else if (!seenMaybeConstAssignment && !ref.isVarDeclaration()) {\n+        // This is the first non-declaration reference seen after the first\n+        // assignment. We stop looking if this reference is a declaration\n+        // because it is not a simple initialization.\n+        seenMaybeConstAssignment = true;\n+        if (!ref.isSimpleAssignmentToName()) {\n+          break;\n+        }\n+        // If we are seeing a second assignment and the first one is in a loop,\n+        // we stop analyzing.  Assignments in a loop are NOT one-time\n+        // assignments.\n+        boolean isLoopAssignment = false;\n+        for (BasicBlock block = ref.getNode().getBasicBlock();\n+             block != null; block = block.getParent()) {\n+          if (block.isFunction()) {\n+            break;\n+          } else if (block.isLoop()) {\n+            isLoopAssignment = true;\n+            break;\n+          }\n+        }\n+        if (!isLoopAssignment && seenAssignment) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}