{
    "patch": "public void verify(VerificationData data) {\n    RuntimeException error = null;\n\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n            error = handleVerifyException(e);\n        }\n    }\n\n    if (error != null) {\n        throw error;\n    }\n}\n\n// modified method\nprivate RuntimeException handleVerifyException(Exception e) {\n    String message = String.format(\"Verification failure: %s\", e.getMessage());\n    return new RuntimeException(message, e);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..60ab2f115 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -72,31 +72,36 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *\n      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n      */\n-    public void verify(VerificationData data) {\n-        AssertionError error = null;\n-\n-        timer.start();\n-        while (timer.isCounting()) {\n-            try {\n-                delegate.verify(data);\n-\n-                if (returnOnSuccess) {\n-                    return;\n-                } else {\n-                    error = null;\n-                }\n-            } catch (MockitoAssertionError e) {\n-                error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n-                error = handleVerifyException(e);\n+public void verify(VerificationData data) {\n+    RuntimeException error = null;\n+\n+    timer.start();\n+    while (timer.isCounting()) {\n+        try {\n+            delegate.verify(data);\n+\n+            if (returnOnSuccess) {\n+                return;\n+            } else {\n+                error = null;\n             }\n+        } catch (MockitoAssertionError e) {\n+            error = handleVerifyException(e);\n+        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+            error = handleVerifyException(e);\n         }\n+    }\n \n-        if (error != null) {\n-            throw error;\n-        }\n+    if (error != null) {\n+        throw error;\n     }\n+}\n+\n+// modified method\n+private RuntimeException handleVerifyException(Exception e) {\n+    String message = String.format(\"Verification failure: %s\", e.getMessage());\n+    return new RuntimeException(message, e);\n+}\n \n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {",
    "result_reason": "error: incompatible types: AssertionError cannot be converted to RuntimeException",
    "test_result": "ERROR"
}