{
    "patch": "        if (stepSize > end - t) {\n            stepSize = end - t;\n            if (stepSize <= 0) {\n                isLastStep = true;\n                stepSize = 0;\n                break;\n            }\n            final double[] yS = new double[y.length];\n            interpolator.setInterpolatedTime(stepStart + stepSize);\n            interpolator.getInterpolatedState(yS);\n            if (wrapper.isLastStep(stepStart, y, stepStart + stepSize, yS)) {\n                isLastStep = true;\n                break;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..85887bc84 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,21 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+        if (stepSize > end - t) {\n+            stepSize = end - t;\n+            if (stepSize <= 0) {\n+                isLastStep = true;\n+                stepSize = 0;\n+                break;\n+            }\n+            final double[] yS = new double[y.length];\n+            interpolator.setInterpolatedTime(stepStart + stepSize);\n+            interpolator.getInterpolatedState(yS);\n+            if (wrapper.isLastStep(stepStart, y, stepStart + stepSize, yS)) {\n+                isLastStep = true;\n+                break;\n+            }\n+        }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}