{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            Chronology chrono = result.getChronology();\n            long yearMonthMillis = (years * ((long) DateTimeConstants.MILLIS_PER_YEAR))\n                    + (months * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n            int monthsPart = (int) (yearMonthMillis / ((long) DateTimeConstants.MILLIS_PER_MONTH));\n            long millisPart = yearMonthMillis % ((long) DateTimeConstants.MILLIS_PER_MONTH);\n            if (millisPart < 0) {\n                millisPart += (long) DateTimeConstants.MILLIS_PER_MONTH;\n                monthsPart--;\n            }\n            if (years < 0 && monthsPart > 0) {\n                monthsPart -= 12;\n            } else if (years > 0 && monthsPart < 0) {\n                monthsPart += 12;\n            }\n            result = result.withYears(0).withMonths(monthsPart);\n            if (years != 0) {\n                result = result.plusYears(years);\n            }\n            if (chrono != ISOChronology.getInstanceUTC()) {\n                result = result.withChronology(chrono);\n            }\n        }\n        return (((type.equals(PeriodType.getAllType())) || (type.equals(PeriodType.getStandard()))) ? result : result.withPeriodType(type));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f05b51af 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1625,16 +1625,29 @@ public final class Period\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n+            Chronology chrono = result.getChronology();\n+            long yearMonthMillis = (years * ((long) DateTimeConstants.MILLIS_PER_YEAR))\n+                    + (months * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n+            int monthsPart = (int) (yearMonthMillis / ((long) DateTimeConstants.MILLIS_PER_MONTH));\n+            long millisPart = yearMonthMillis % ((long) DateTimeConstants.MILLIS_PER_MONTH);\n+            if (millisPart < 0) {\n+                millisPart += (long) DateTimeConstants.MILLIS_PER_MONTH;\n+                monthsPart--;\n+            }\n+            if (years < 0 && monthsPart > 0) {\n+                monthsPart -= 12;\n+            } else if (years > 0 && monthsPart < 0) {\n+                monthsPart += 12;\n+            }\n+            result = result.withYears(0).withMonths(monthsPart);\n             if (years != 0) {\n-                result = result.withYears(years);\n+                result = result.plusYears(years);\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (chrono != ISOChronology.getInstanceUTC()) {\n+                result = result.withChronology(chrono);\n             }\n         }\n-        return result;\n+        return (((type.equals(PeriodType.getAllType())) || (type.equals(PeriodType.getStandard()))) ? result : result.withPeriodType(type));\n     }\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}