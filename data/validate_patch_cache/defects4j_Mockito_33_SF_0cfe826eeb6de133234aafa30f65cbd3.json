{
    "patch": "public boolean hasSameMethod(Invocation candidate) {\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    if (m1.equals(m2)) {\n        return true;\n    }\n\n    /* Avoid unnecessary cloning */\n    String m1Name = m1.getName();\n    String m2Name = m2.getName();\n    int m1ParamCount = m1.getParameterCount();\n    int m2ParamCount = m2.getParameterCount();\n\n    if (!m1Name.equals(m2Name) || m1ParamCount != m2ParamCount",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..ebe8985e0 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,21 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+public boolean hasSameMethod(Invocation candidate) {\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+\n+    if (m1.equals(m2)) {\n+        return true;\n     }\n+\n+    /* Avoid unnecessary cloning */\n+    String m1Name = m1.getName();\n+    String m2Name = m2.getName();\n+    int m1ParamCount = m1.getParameterCount();\n+    int m2ParamCount = m2.getParameterCount();\n+\n+    if (!m1Name.equals(m2Name) || m1ParamCount != m2ParamCount\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +132,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}