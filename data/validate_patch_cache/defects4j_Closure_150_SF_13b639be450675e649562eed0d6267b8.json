{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n == scope.getRootNode()) {\n            return;\n        }\n\n        attachLiteralTypes(n);\n        switch (n.getType()) {\n            case Token.FUNCTION:\n                if (shouldDefineFunction(n, parent)) {\n                    defineDeclaredFunction(n, parent);\n                }\n                break;\n            case Token.CATCH:\n                if (shouldDefineCatch(n, parent)) {\n                    defineCatch(n, parent);\n                }\n                break;\n            case Token.VAR:\n                if (shouldDefineVar(n, parent)) {\n                    defineVar(n, parent);\n                }\n                break;\n        }\n\n        if (n.getType() != Token.LP || parent != scope.getRootNode()) {\n            return;\n        }\n\n        handleFunctionInputs(parent);\n    }\n\n    private boolean shouldDefineFunction(Node n, Node parent) {\n        return parent == null || !NodeUtil.isFunctionExpression(n);\n    }\n\n    private boolean shouldDefineCatch(Node n, Node parent) {\n        return parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.CATCH\n                && n.hasChildren() && n.getFirstChild().getType() == Token.NAME;\n    }\n\n    private boolean shouldDefineVar(Node n, Node parent) {\n        return parent.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.NAME;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..631f5698 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,29 +1440,49 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n == scope.getRootNode()) {\n+            return;\n+        }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+        attachLiteralTypes(n);\n+        switch (n.getType()) {\n+            case Token.FUNCTION:\n+                if (shouldDefineFunction(n, parent)) {\n+                    defineDeclaredFunction(n, parent);\n+                }\n+                break;\n+            case Token.CATCH:\n+                if (shouldDefineCatch(n, parent)) {\n+                    defineCatch(n, parent);\n+                }\n+                break;\n+            case Token.VAR:\n+                if (shouldDefineVar(n, parent)) {\n+                    defineVar(n, parent);\n+                }\n+                break;\n+        }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+        if (n.getType() != Token.LP || parent != scope.getRootNode()) {\n             return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+\n+        handleFunctionInputs(parent);\n+    }\n+\n+    private boolean shouldDefineFunction(Node n, Node parent) {\n+        return parent == null || !NodeUtil.isFunctionExpression(n);\n+    }\n+\n+    private boolean shouldDefineCatch(Node n, Node parent) {\n+        return parent.getType() == Token.BLOCK && parent.getParent().getType() == Token.CATCH\n+                && n.hasChildren() && n.getFirstChild().getType() == Token.NAME;\n+    }\n+\n+    private boolean shouldDefineVar(Node n, Node parent) {\n+        return parent.getType() == Token.EXPR_RESULT && n.getFirstChild().getType() == Token.NAME;\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}