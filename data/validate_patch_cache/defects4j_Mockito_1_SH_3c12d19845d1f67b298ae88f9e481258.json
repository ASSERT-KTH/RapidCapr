{
    "patch": "if (m instanceof CapturesArguments && indexOfVararg >= position) {\n    Object[] varArgs = Arrays.copyOfRange(invocation.getArguments(), position, indexOfVararg + 1);\n    ((CapturesArguments) m).captureFrom(varArgs);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..040e0f59f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,10 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+if (m instanceof CapturesArguments && indexOfVararg >= position) {\n+    Object[] varArgs = Arrays.copyOfRange(invocation.getArguments(), position, indexOfVararg + 1);\n+    ((CapturesArguments) m).captureFrom(varArgs);\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}