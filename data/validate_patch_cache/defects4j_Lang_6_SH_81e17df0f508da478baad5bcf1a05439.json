{
    "patch": "int charCount = Character.charCount(Character.codePointAt(input, pos));\nif (charCount > 1) {\n    UnicodeEscaper thisEscaper = new UnicodeEscaper();\n    try {\n        out.write(thisEscaper.escape(input.subSequence(pos, pos + charCount).toString()));\n    } catch (IllegalArgumentException e) {\n        throw new RuntimeException(e);\n    }\n} else {\n    out.write((int) input.charAt(pos));\n}\npos += charCount;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..5be2c152 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,18 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int charCount = Character.charCount(Character.codePointAt(input, pos));\n+if (charCount > 1) {\n+    UnicodeEscaper thisEscaper = new UnicodeEscaper();\n+    try {\n+        out.write(thisEscaper.escape(input.subSequence(pos, pos + charCount).toString()));\n+    } catch (IllegalArgumentException e) {\n+        throw new RuntimeException(e);\n+    }\n+} else {\n+    out.write((int) input.charAt(pos));\n+}\n+pos += charCount;\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}