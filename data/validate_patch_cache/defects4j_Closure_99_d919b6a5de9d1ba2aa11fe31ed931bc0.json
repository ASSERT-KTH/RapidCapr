{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        String qualifiedName = getQualifiedName(lhs);\n        if (qualifiedName != null && qualifiedName.contains(\".prototype.\")) {\n          return false;\n        }\n\n        Node grandParent = parent.getParent();\n        if (grandParent != null && grandParent.getType() == Token.CALL) {\n          Node fn = grandParent.getFirstChild();\n          if (fn.getType() == Token.GETPROP) {\n            String prototypeName = fn.getLastChild().getString();\n            String propertyName = lhs.getLastChild().getString();\n            Node functionNode = findFunctionDefinition(lhs, t.getScope());\n            if (functionNode != null) {\n              String functionName = getQualifiedName(functionNode);\n              if (functionName != null) {\n                qualifiedName = functionName + \".\" + prototypeName + \".\" + propertyName;\n                if (lhs.getQualifiedName().equals(qualifiedName)) {\n                  return false;\n                }\n              }\n            }\n          }\n        } else if (lhs.getType() == Token.GETPROP &&\n                   lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private String getQualifiedName(Node node) {\n    String name = node.getQualifiedName();\n    if (name == null) {\n      Node parent = node.getParent();\n      if (parent != null && parent.getType() == Token.CALL) {\n        Node fn = parent.getFirstChild();\n        if (fn.getType() == Token.GETPROP) {\n          String objName = fn.getFirstChild().getQualifiedName();\n          String propName = node.getLastChild().getString();\n          if (objName != null && propName != null) {\n            name = objName + \".\" + propName;\n          }\n        }\n      }\n    }\n    return name;\n  }\n\n  private Node findFunctionDefinition(Node node, Scope scope) {\n    Node parent = node.getParent();\n    while (parent != null) {\n      if (NodeUtil.isFunctionDeclaration(parent) || NodeUtil.isFunctionExpression(parent)) {\n        if (NodeUtil.getEnclosingScope(parent) == scope) {\n          return parent;\n        }\n      }\n      parent = parent.getParent();\n    }\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..dbced59d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,7 +81,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n@@ -122,19 +122,69 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+        String qualifiedName = getQualifiedName(lhs);\n+        if (qualifiedName != null && qualifiedName.contains(\".prototype.\")) {\n+          return false;\n+        }\n+\n+        Node grandParent = parent.getParent();\n+        if (grandParent != null && grandParent.getType() == Token.CALL) {\n+          Node fn = grandParent.getFirstChild();\n+          if (fn.getType() == Token.GETPROP) {\n+            String prototypeName = fn.getLastChild().getString();\n+            String propertyName = lhs.getLastChild().getString();\n+            Node functionNode = findFunctionDefinition(lhs, t.getScope());\n+            if (functionNode != null) {\n+              String functionName = getQualifiedName(functionNode);\n+              if (functionName != null) {\n+                qualifiedName = functionName + \".\" + prototypeName + \".\" + propertyName;\n+                if (lhs.getQualifiedName().equals(qualifiedName)) {\n+                  return false;\n+                }\n+              }\n+            }\n           }\n+        } else if (lhs.getType() == Token.GETPROP &&\n+                   lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n       }\n     }\n \n     return true;\n   }\n \n+  private String getQualifiedName(Node node) {\n+    String name = node.getQualifiedName();\n+    if (name == null) {\n+      Node parent = node.getParent();\n+      if (parent != null && parent.getType() == Token.CALL) {\n+        Node fn = parent.getFirstChild();\n+        if (fn.getType() == Token.GETPROP) {\n+          String objName = fn.getFirstChild().getQualifiedName();\n+          String propName = node.getLastChild().getString();\n+          if (objName != null && propName != null) {\n+            name = objName + \".\" + propName;\n+          }\n+        }\n+      }\n+    }\n+    return name;\n+  }\n+\n+  private Node findFunctionDefinition(Node node, Scope scope) {\n+    Node parent = node.getParent();\n+    while (parent != null) {\n+      if (NodeUtil.isFunctionDeclaration(parent) || NodeUtil.isFunctionExpression(parent)) {\n+        if (NodeUtil.getEnclosingScope(parent) == scope) {\n+          return parent;\n+        }\n+      }\n+      parent = parent.getParent();\n+    }\n+    return null;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}