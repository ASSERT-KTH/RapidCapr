{
    "patch": "private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n\n      if (Double.isInfinite(lval) || Double.isNaN(lval)\n              || Double.isInfinite(rval) || Double.isNaN(rval)) {\n        return n; // NaN or Infinity\n      }\n\n      // check ranges. We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      }\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      if (rval < 0 || rval >= 32) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      int rvalInt = (int) rval;\n\n      if (Math.abs(lval) > Integer.MAX_VALUE) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        return n;\n      } else if (Math.abs(lval) < 1) {\n        int shifted = 0;\n        if (n.getType() == Token.LSH) {\n          shifted = 0;\n        } else if (n.getType() == Token.RSH) {\n          shifted = 0;\n        } else {\n          shifted = 0;\n        }\n        return Node.newNumber(shifted);\n      }\n\n      int result;\n      if (n.getType() == Token.LSH) {\n        result = lvalInt << rvalInt;\n      } else if (n.getType() == Token.RSH) {\n        result = lvalInt >> rvalInt;\n      } else {\n        result = lvalInt >>> rvalInt;\n      }\n\n      return Node.newNumber(result);\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..c67c3409 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -649,15 +649,17 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold shift operations\n    */\n-  private Node tryFoldShift(Node n, Node left, Node right) {\n-    if (left.getType() == Token.NUMBER &&\n-        right.getType() == Token.NUMBER) {\n-\n-      double result;\n+private Node tryFoldShift(Node n, Node left, Node right) {\n+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n       double lval = left.getDouble();\n       double rval = right.getDouble();\n \n-      // check ranges.  We do not do anything that would clip the double to\n+      if (Double.isInfinite(lval) || Double.isNaN(lval)\n+              || Double.isInfinite(rval) || Double.isNaN(rval)) {\n+        return n; // NaN or Infinity\n+      }\n+\n+      // check ranges. We do not do anything that would clip the double to\n       // a 32-bit range, since the user likely does not intend that.\n       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n         error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n@@ -666,49 +668,41 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n       // only the lower 5 bits are used when shifting, so don't do anything\n       // if the shift amount is outside [0,32)\n-      if (!(rval >= 0 && rval < 32)) {\n+      if (rval < 0 || rval >= 32) {\n         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n         return n;\n       }\n \n       // Convert the numbers to ints\n       int lvalInt = (int) lval;\n-      if (lvalInt != lval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, left);\n-        return n;\n-      }\n-\n       int rvalInt = (int) rval;\n-      if (rvalInt != rval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, right);\n+\n+      if (Math.abs(lval) > Integer.MAX_VALUE) {\n+        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n         return n;\n+      } else if (Math.abs(lval) < 1) {\n+        int shifted = 0;\n+        if (n.getType() == Token.LSH) {\n+          shifted = 0;\n+        } else if (n.getType() == Token.RSH) {\n+          shifted = 0;\n+        } else {\n+          shifted = 0;\n+        }\n+        return Node.newNumber(shifted);\n       }\n \n-      switch (n.getType()) {\n-        case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n-        case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n-        case Token.URSH:\n-          // JavaScript handles zero shifts on signed numbers differently than\n-          // Java as an Java int can not represent the unsigned 32-bit number\n-          // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n-        default:\n-          throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n+      int result;\n+      if (n.getType() == Token.LSH) {\n+        result = lvalInt << rvalInt;\n+      } else if (n.getType() == Token.RSH) {\n+        result = lvalInt >> rvalInt;\n+      } else {\n+        result = lvalInt >>> rvalInt;\n       }\n \n-      Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n-      reportCodeChange();\n-\n-      return newNumber;\n+      return Node.newNumber(result);\n     }\n-\n     return n;\n   }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<x=-[2]> but was:<x=-[1<<1]>",
    "test_result": "FAIL"
}