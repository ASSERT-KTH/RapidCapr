{
    "patch": "\nNode n = assign.getFirstChild();\nif (n != null && n.getType() == Token.GETPROP \n    && (NodeUtil.isLhs(n) || NodeUtil.isLhsByDestructuring(n))) {\n    Node property = n.getLastChild();\n    if (property.getType() == Token.STRING \n        && property.getString().equals(\"prototype\")) {\n        return true;\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..5f46bed7 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,17 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+\n+Node n = assign.getFirstChild();\n+if (n != null && n.getType() == Token.GETPROP \n+    && (NodeUtil.isLhs(n) || NodeUtil.isLhsByDestructuring(n))) {\n+    Node property = n.getLastChild();\n+    if (property.getType() == Token.STRING \n+        && property.getString().equals(\"prototype\")) {\n+        return true;\n+    }\n+}\n+return false;\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}