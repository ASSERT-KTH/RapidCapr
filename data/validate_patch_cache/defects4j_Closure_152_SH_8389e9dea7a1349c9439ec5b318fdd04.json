{
    "patch": "    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n    if (typeOfThisResolved != null && typeOfThisResolved.isSubtypeOf(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {\n      typeOfThis = (ObjectType) typeOfThisResolved;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..7a835dd8 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,10 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n+    if (typeOfThisResolved != null && typeOfThisResolved.isSubtypeOf(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+      typeOfThis = (ObjectType) typeOfThisResolved;\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}