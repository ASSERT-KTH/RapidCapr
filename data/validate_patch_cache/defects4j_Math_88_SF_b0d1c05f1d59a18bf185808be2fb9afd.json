{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    int numSlackVars = getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n    int basicRowIndex = getBasicRow(numSlackVars);\n    double mostNegative = (basicRowIndex == -1) ? 0 : getEntry(basicRowIndex, getRhsOffset());\n    boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()];\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRowIndex = getBasicRow(i + getNumObjectiveFunctions());\n        if (basicRowIndex == -1) {\n            coefficients[i] = 0;\n            continue;\n        }\n        foundBasicRow[i] = true;\n        double basicValue = getEntry(basicRowIndex, getRhsOffset());\n        coefficients[i] = basicValue - ((restrictToNonNegative || basicValue < mostNegative) ? 0 : mostNegative);\n        for (int j = 0; j < coefficients.length; j++) {\n            if (j == i || getBasicRow(j + getNumObjectiveFunctions()) == -1) {\n                continue;\n            }\n            coefficients[j] -= coefficients[i] * tableau.getEntry(getBasicRow(j + getNumObjectiveFunctions()), i + getNumObjectiveFunctions());\n        }\n    }\n    double[] solution = new double[coefficients.length];\n    for (int i = 0; i < coefficients.length; i++) {\n        if (foundBasicRow[i]) {\n            solution[i] = getEntry(getBasicRow(i + getNumObjectiveFunctions()), getRhsOffset()) / coefficients[i];\n        }\n    }\n    double value = computeObjectiveValue(solution);\n    return new RealPointValuePair(solution, value);\n}\n\nprotected double computeObjectiveValue(double[] point) {\n    double value = 0;\n    for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n        value += f.getCoefficients().getEntry(i) * point[i];\n    }\n    return value;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..39fe0832b 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,45 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n-                }\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    int numSlackVars = getNumObjectiveFunctions() + getOriginalNumDecisionVariables();\n+    int basicRowIndex = getBasicRow(numSlackVars);\n+    double mostNegative = (basicRowIndex == -1) ? 0 : getEntry(basicRowIndex, getRhsOffset());\n+    boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()];\n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRowIndex = getBasicRow(i + getNumObjectiveFunctions());\n+        if (basicRowIndex == -1) {\n+            coefficients[i] = 0;\n+            continue;\n+        }\n+        foundBasicRow[i] = true;\n+        double basicValue = getEntry(basicRowIndex, getRhsOffset());\n+        coefficients[i] = basicValue - ((restrictToNonNegative || basicValue < mostNegative) ? 0 : mostNegative);\n+        for (int j = 0; j < coefficients.length; j++) {\n+            if (j == i || getBasicRow(j + getNumObjectiveFunctions()) == -1) {\n+                continue;\n             }\n+            coefficients[j] -= coefficients[i] * tableau.getEntry(getBasicRow(j + getNumObjectiveFunctions()), i + getNumObjectiveFunctions());\n+        }\n+    }\n+    double[] solution = new double[coefficients.length];\n+    for (int i = 0; i < coefficients.length; i++) {\n+        if (foundBasicRow[i]) {\n+            solution[i] = getEntry(getBasicRow(i + getNumObjectiveFunctions()), getRhsOffset()) / coefficients[i];\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n+    double value = computeObjectiveValue(solution);\n+    return new RealPointValuePair(solution, value);\n+}\n+\n+protected double computeObjectiveValue(double[] point) {\n+    double value = 0;\n+    for (int i = 0; i < getNumObjectiveFunctions(); i++) {\n+        value += f.getCoefficients().getEntry(i) * point[i];\n+    }\n+    return value;\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}