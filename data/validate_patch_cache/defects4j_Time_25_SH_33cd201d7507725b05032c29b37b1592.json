{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // We need to ensure that time is always after the DST gap.\n    // We first check that we are not in a DST gap, and if we are, we adjust instantLocal to the first moment after the gap.\n    if (offsetLocal < offsetAdjusted) {\n        final long nextLocal = nextTransition(instantAdjusted);\n        if (nextLocal != instantLocal && nextLocal <= instantLocal) {\n            final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        }\n    }\n    // If we are not in a DST gap, or we have adjusted instantLocal to the first moment after the gap, we can return the adjusted offset.\n    return offsetAdjusted;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0d144e15 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // We need to ensure that time is always after the DST gap.\n+    // We first check that we are not in a DST gap, and if we are, we adjust instantLocal to the first moment after the gap.\n+    if (offsetLocal < offsetAdjusted) {\n+        final long nextLocal = nextTransition(instantAdjusted);\n+        if (nextLocal != instantLocal && nextLocal <= instantLocal) {\n+            final long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+    // If we are not in a DST gap, or we have adjusted instantLocal to the first moment after the gap, we can return the adjusted offset.\n+    return offsetAdjusted;\n+}\n+\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}