{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis() + getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n                getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n                getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n                getDays() * DateTimeConstants.MILLIS_PER_DAY +\n                getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n        int years = 0;\n        int months = 0;\n        if (type.isSupported(DurationFieldType.years())) {\n            years = getYears();\n            if (type.isSupported(DurationFieldType.months())) {\n                years += getMonths() / 12;\n                months = getMonths() % 12;\n            } else {\n                years += getMonths() / 12;\n                months = 0;\n            }\n        } else if (type.isSupported(DurationFieldType.months())) {\n            months = getYears() * 12 + getMonths();\n        }\n\n        return new Period(millis, Period.years().withValue(years).withType(type),\n                Period.months().withValue(months).withType(type), PeriodType.standard());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2ffa5f87 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,26 +1615,29 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+        long millis = getMillis() + getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n+                getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n+                getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n+                getDays() * DateTimeConstants.MILLIS_PER_DAY +\n+                getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+        int years = 0;\n+        int months = 0;\n+        if (type.isSupported(DurationFieldType.years())) {\n+            years = getYears();\n+            if (type.isSupported(DurationFieldType.months())) {\n+                years += getMonths() / 12;\n+                months = getMonths() % 12;\n+            } else {\n+                years += getMonths() / 12;\n+                months = 0;\n             }\n+        } else if (type.isSupported(DurationFieldType.months())) {\n+            months = getYears() * 12 + getMonths();\n         }\n-        return result;\n+\n+        return new Period(millis, Period.years().withValue(years).withType(type),\n+                Period.months().withValue(months).withType(type), PeriodType.standard());\n     }\n \n }",
    "result_reason": "error: method years in class Period cannot be applied to given types;",
    "test_result": "ERROR"
}