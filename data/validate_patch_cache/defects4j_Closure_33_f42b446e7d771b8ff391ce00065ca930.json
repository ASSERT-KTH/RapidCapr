{
    "patch": "    if (!(functionType.isNominalConstructor() || functionType.isStructConstructor()\n        || functionType.isEnumElementType())) {\n      return ImmutableList.of(Token.INVALID);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..6da469f4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,10 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!(functionType.isNominalConstructor() || functionType.isStructConstructor()\n+        || functionType.isEnumElementType())) {\n+      return ImmutableList.of(Token.INVALID);\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}