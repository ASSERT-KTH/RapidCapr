{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Remove unreferenced args.\n      Node arg = argList.getFirstChild();\n      while (arg != null) {\n        Node nextArg = arg.getNext();\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        boolean remove = !referenced.contains(var);\n        boolean isLastArg = nextArg == null;\n        boolean isThisObject = NodeUtil.isNameDeclaration(arg.getParent())\n            && arg.hasChildren()\n            && arg.getFirstChild().isFunction()\n            && arg.getFirstChild().matchesQualifiedName(\"this\");\n        if (remove) {\n          arg.detach();\n          compiler.reportChangeToEnclosingScope(arg.getParent());\n        } else if (isLastArg && !isThisObject) {\n          break;\n        }\n        arg = nextArg;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..73cf39e7 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -379,7 +379,7 @@ class RemoveUnusedVars\n \n     Node function = fnScope.getRootNode();\n \n-    Preconditions.checkState(function.isFunction());\n+    checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n@@ -389,16 +389,25 @@ class RemoveUnusedVars\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n+      // Remove unreferenced args.\n+      Node arg = argList.getFirstChild();\n+      while (arg != null) {\n+        Node nextArg = arg.getNext();\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        boolean remove = !referenced.contains(var);\n+        boolean isLastArg = nextArg == null;\n+        boolean isThisObject = NodeUtil.isNameDeclaration(arg.getParent())\n+            && arg.hasChildren()\n+            && arg.getFirstChild().isFunction()\n+            && arg.getFirstChild().matchesQualifiedName(\"this\");\n+        if (remove) {\n+          arg.detach();\n+          compiler.reportChangeToEnclosingScope(arg.getParent());\n+        } else if (isLastArg && !isThisObject) {\n           break;\n         }\n+        arg = nextArg;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}