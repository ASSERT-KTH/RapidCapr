{
    "patch": "public double getPct(Object v) {\n    if (!contains((T)v)) {\n        throw new IllegalArgumentException(\"Value not found in Distribution\");\n    }\n    double count = 0;\n    for (T val : values) {\n        if (val.compareTo((T)v) <= 0) {\n            count++;\n        }\n    }\n    return count / values.length;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..2572dc0ed 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,18 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (!contains((T)v)) {\n+        throw new IllegalArgumentException(\"Value not found in Distribution\");\n+    }\n+    double count = 0;\n+    for (T val : values) {\n+        if (val.compareTo((T)v) <= 0) {\n+            count++;\n+        }\n+    }\n+    return count / values.length;\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}