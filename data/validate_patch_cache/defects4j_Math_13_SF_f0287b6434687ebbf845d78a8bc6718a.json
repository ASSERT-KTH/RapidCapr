{
    "patch": "import org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int maxRank = 100;\n    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    int rank = Math.min(svd.getRank(), maxRank);\n    RealMatrix u = svd.getU().getSubMatrix(0, m.getRowDimension() - 1, 0, rank - 1);\n    RealMatrix s = svd.getS().getSubMatrix(0, rank - 1, 0, rank - 1);\n    RealMatrix ut = u.transpose();\n    RealMatrix sqrtS = new Array2DRowRealMatrix(s.getRowDimension(), s.getColumnDimension());\n    for (int i = 0; i < s.getRowDimension(); i++) {\n        for (int j = 0; j < s.getColumnDimension(); j++) {\n            if (i == j) {\n                sqrtS.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n            }\n        }\n    }\n    RealMatrix sqrtM = u.multiply(sqrtS).multiply(ut);\n    return sqrtM;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..aec04a70f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,25 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int maxRank = 100;\n+    SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    int rank = Math.min(svd.getRank(), maxRank);\n+    RealMatrix u = svd.getU().getSubMatrix(0, m.getRowDimension() - 1, 0, rank - 1);\n+    RealMatrix s = svd.getS().getSubMatrix(0, rank - 1, 0, rank - 1);\n+    RealMatrix ut = u.transpose();\n+    RealMatrix sqrtS = new Array2DRowRealMatrix(s.getRowDimension(), s.getColumnDimension());\n+    for (int i = 0; i < s.getRowDimension(); i++) {\n+        for (int j = 0; j < s.getColumnDimension(); j++) {\n+            if (i == j) {\n+                sqrtS.setEntry(i, j, FastMath.sqrt(s.getEntry(i, j)));\n+            }\n+        }\n     }\n+    RealMatrix sqrtM = u.multiply(sqrtS).multiply(ut);\n+    return sqrtM;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}