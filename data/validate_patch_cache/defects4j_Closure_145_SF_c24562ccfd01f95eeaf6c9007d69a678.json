{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n  if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n    return true;\n  } else if (n.getType() == Token.BLOCK) {\n    if (n.getFirstChild() == null) {\n      // empty blocks are valid 'DO' statements\n      return true;\n    } else if (n.getFirstChild() == n.getLastChild()) {\n      // check if the only child is a 'FUNCTION' or 'DO'\n      return isOneExactlyFunctionOrDo(n.getFirstChild());\n    }\n  } else if (n.getType() == Token.LABEL) {\n    // get the next node after the label\n    Node child = n.getFirstChild().getNext();\n    if (child.getType() == Token.BLOCK) {\n      // if the next node is a block, check if it contains a single 'FUNCTION' or 'DO'\n      int count = 0;\n      for (Node grandchild = child.getFirstChild(); grandchild != null; grandchild = grandchild.getNext()) {\n        if (grandchild.getType() == Token.FUNCTION || grandchild.getType() == Token.DO) {\n          count++;\n          if (count > 1) {\n            return false;\n          }\n        }\n      }\n      return count == 1;\n    } else {\n      // otherwise, check if the next node is a 'FUNCTION' or 'DO'\n      return isOneExactlyFunctionOrDo(child);\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..d415da17 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,39 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+  if (n.getType() == Token.FUNCTION || n.getType() == Token.DO) {\n+    return true;\n+  } else if (n.getType() == Token.BLOCK) {\n+    if (n.getFirstChild() == null) {\n+      // empty blocks are valid 'DO' statements\n+      return true;\n+    } else if (n.getFirstChild() == n.getLastChild()) {\n+      // check if the only child is a 'FUNCTION' or 'DO'\n+      return isOneExactlyFunctionOrDo(n.getFirstChild());\n+    }\n+  } else if (n.getType() == Token.LABEL) {\n+    // get the next node after the label\n+    Node child = n.getFirstChild().getNext();\n+    if (child.getType() == Token.BLOCK) {\n+      // if the next node is a block, check if it contains a single 'FUNCTION' or 'DO'\n+      int count = 0;\n+      for (Node grandchild = child.getFirstChild(); grandchild != null; grandchild = grandchild.getNext()) {\n+        if (grandchild.getType() == Token.FUNCTION || grandchild.getType() == Token.DO) {\n+          count++;\n+          if (count > 1) {\n+            return false;\n+          }\n+        }\n+      }\n+      return count == 1;\n+    } else {\n+      // otherwise, check if the next node is a 'FUNCTION' or 'DO'\n+      return isOneExactlyFunctionOrDo(child);\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}