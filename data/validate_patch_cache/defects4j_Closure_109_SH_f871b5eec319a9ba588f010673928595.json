{
    "patch": "  private Node parseContextTypeExpression(JsDocToken token) {\n    if (token.type == JsDocToken.Type.OPEN_CURLY) {\n      return parseStructuralType(token);\n    } else {\n      return parseTypeName(token);\n    }\n  }\n  \n  private Node parseStructuralType(JsDocToken openCurlyToken) {\n    // implementation for structural types\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..1dfe2a9c 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,17 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+  private Node parseContextTypeExpression(JsDocToken token) {\n+    if (token.type == JsDocToken.Type.OPEN_CURLY) {\n+      return parseStructuralType(token);\n+    } else {\n+      return parseTypeName(token);\n+    }\n+  }\n+  \n+  private Node parseStructuralType(JsDocToken openCurlyToken) {\n+    // implementation for structural types\n+  }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}