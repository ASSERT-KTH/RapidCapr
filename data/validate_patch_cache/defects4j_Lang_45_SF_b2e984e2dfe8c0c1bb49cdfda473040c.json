{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null || str.isEmpty()) {\n        return str;\n    }\n\n    // if the lower value is greater than or equal to the length of the string,\n    // return the entire string\n    if (lower >= str.length()) {\n        return str;\n    }\n\n    // if the upper value is -1 (i.e. no limit) or is greater\n    // than the length of the string, set to the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n\n    // search for the first space at or after the upper limit\n    int index = StringUtils.indexOf(str, \" \", upper);\n\n    // determine the proper end point for the abbreviated string\n    int endIndex = (index == -1) ? upper : Math.min(index, upper);\n\n    // build the abbreviated string\n    String abbreviated = str.substring(0, endIndex);\n\n    // append the appendToEnd value, if necessary\n    if (index != -1 || endIndex != str.length()) {\n        abbreviated += StringUtils.defaultString(appendToEnd);\n    }\n\n    return abbreviated;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..8b4a80cb 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,44 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // initial parameter checks\n+    if (str == null || str.isEmpty()) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    // if the lower value is greater than or equal to the length of the string,\n+    // return the entire string\n+    if (lower >= str.length()) {\n+        return str;\n+    }\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        }\n-        return result.toString();\n+    // if the upper value is -1 (i.e. no limit) or is greater\n+    // than the length of the string, set to the length of the string\n+    if (upper == -1 || upper > str.length()) {\n+        upper = str.length();\n     }\n \n+    // if upper is less than lower, raise it to lower\n+    if (upper < lower) {\n+        upper = lower;\n+    }\n+\n+    // search for the first space at or after the upper limit\n+    int index = StringUtils.indexOf(str, \" \", upper);\n+\n+    // determine the proper end point for the abbreviated string\n+    int endIndex = (index == -1) ? upper : Math.min(index, upper);\n+\n+    // build the abbreviated string\n+    String abbreviated = str.substring(0, endIndex);\n+\n+    // append the appendToEnd value, if necessary\n+    if (index != -1 || endIndex != str.length()) {\n+        abbreviated += StringUtils.defaultString(appendToEnd);\n+    }\n+\n+    return abbreviated;\n+}\n+\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<012[]> but was:<012[ 3]>",
    "test_result": "FAIL"
}