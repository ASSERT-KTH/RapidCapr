{
    "patch": "    if (!alternates.isEmpty()) {\n      JSTypeBuilder builder = JSType.builder();\n      for (JSType alternate : alternates) {\n        builder.addAlternate(alternate.expand());\n      }\n      JSType result = builder.build();\n      if (result.isUnknownType()) {\n        return getNativeType(UNKNOWN_TYPE);\n      }\n      return result.substitute(substitutions);\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..78e97798 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,22 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+    if (!alternates.isEmpty()) {\n+      JSTypeBuilder builder = JSType.builder();\n+      for (JSType alternate : alternates) {\n+        builder.addAlternate(alternate.expand());\n+      }\n+      JSType result = builder.build();\n+      if (result.isUnknownType()) {\n+        return getNativeType(UNKNOWN_TYPE);\n+      }\n+      return result.substitute(substitutions);\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}