{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.isName()) {\n    Preconditions.checkArgument (\n        parent.isFunction() ||\n        parent.isVar() ||\n        parent.isParamList() ||\n        parent.isCatch());\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        (parent.isVar() ||\n        parent.isFunction());\n  } else {\n    Preconditions.checkArgument(\n        n.isGetProp() &&\n        (parent.isAssign() ||\n        parent.isExprResult()));\n  }\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = scope;\n    // don't try to declare in the global scope if there's\n    // already a symbol there with this name.\n  Var oldVar = scopeToDeclareIn.getVar(variableName);\n  if (oldVar != null && oldVar.getNode() == null) {\n    // If there is no node attached to the old var, then it must be from\n    // externs, which is a valid re-declaration in the code base. Just\n    // ignore this one.\n    return;\n  }\n\n  boolean isRedeclaration = false;\n  boolean isUndeclaration = false;\n  if (oldVar != null && oldVar.getNode().getParent() == parent) {\n    // Redeclaration\n    isRedeclaration = true;\n  } else if (oldVar != null && (!oldVar.isLocal() ||\n      NodeUtil.isCatchBlock(oldVar.getScopeRoot()))) {\n    // undeclared var in the scope chain\n    isUndeclaration = true;\n  }\n\n  // Declared in closest scope?\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    if (isUndeclaration) {\n      // Silently exit - This may happen in some externs files,\n      // we need to treat undeclared variables as duplicates\n      return;\n    }\n    if (oldVar.getNode().isFromExterns()) {\n      // Silently exit - this may happen when global scope declarations\n      // are re-processed in the script scope.\n      return;\n    }\n    if (!oldVar.isTypeInferred()) {\n      validator.expectRedeclaration(\n          sourceName, n, oldVar.getNode(), variableName);\n    }\n    if (oldVar.isTypeInferred() ||\n        (type != null && !type.equals(oldVar.getType()))) {\n      // Use inferred type if the previous var is inferred and\n      // new var type is null or if the type has changed\n      type = oldVar.getType();\n    }\n  } else if (isRedeclaration) {\n    Preconditions.checkState(\n        type.equals(oldVar.getType()),\n        \"Type changed for variable that is already declared.\" +\n        \" Variable name: %s. New type: %s. Old type: %s\",\n        variableName, type, oldVar.getType());\n  } else if (!scopeToDeclareIn.isGlobal() ||\n      (oldVar == null || !oldVar.isGlobal())) {\n    // Create a new Var object for tracking purposes\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    Var newVar = scopeToDeclareIn.declare(variableName, n, type,\n        input, inferred);\n\n    // Defining properties on the global this object.  When\n    // declared, these are added to an ObjectType that serves as the\n    // prototype for all objects. We don't add properties to the global\n    // this object itself.\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ?\n                typeRegistry.getNativeType(\n                    JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype in the\n    // scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                typeRegistry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n      }\n    }\n  } else if (n == null) {\n    // remove global variable from the global scope only when there is\n    // no node associated with it. But if a variable is specified\n    // with a declaration in the same scope, we don't remove it.\n    // We need to unset the current reference to the global variable\n    // and set the redeclared one in the same scope\n    scope.undeclare(variableName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..68184c44 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,135 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  if (n.isName()) {\n+    Preconditions.checkArgument (\n+        parent.isFunction() ||\n+        parent.isVar() ||\n+        parent.isParamList() ||\n+        parent.isCatch());\n+    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+        (parent.isVar() ||\n+        parent.isFunction());\n+  } else {\n+    Preconditions.checkArgument(\n+        n.isGetProp() &&\n+        (parent.isAssign() ||\n+        parent.isExprResult()));\n+  }\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  // If n is a property, then we should really declare it in the\n+  // scope where the root object appears. This helps out people\n+  // who declare \"global\" names in an anonymous namespace.\n+  Scope scopeToDeclareIn = scope;\n+    // don't try to declare in the global scope if there's\n+    // already a symbol there with this name.\n+  Var oldVar = scopeToDeclareIn.getVar(variableName);\n+  if (oldVar != null && oldVar.getNode() == null) {\n+    // If there is no node attached to the old var, then it must be from\n+    // externs, which is a valid re-declaration in the code base. Just\n+    // ignore this one.\n+    return;\n+  }\n+\n+  boolean isRedeclaration = false;\n+  boolean isUndeclaration = false;\n+  if (oldVar != null && oldVar.getNode().getParent() == parent) {\n+    // Redeclaration\n+    isRedeclaration = true;\n+  } else if (oldVar != null && (!oldVar.isLocal() ||\n+      NodeUtil.isCatchBlock(oldVar.getScopeRoot()))) {\n+    // undeclared var in the scope chain\n+    isUndeclaration = true;\n+  }\n+\n+  // Declared in closest scope?\n+  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    if (isUndeclaration) {\n+      // Silently exit - This may happen in some externs files,\n+      // we need to treat undeclared variables as duplicates\n+      return;\n+    }\n+    if (oldVar.getNode().isFromExterns()) {\n+      // Silently exit - this may happen when global scope declarations\n+      // are re-processed in the script scope.\n+      return;\n+    }\n+    if (!oldVar.isTypeInferred()) {\n+      validator.expectRedeclaration(\n+          sourceName, n, oldVar.getNode(), variableName);\n+    }\n+    if (oldVar.isTypeInferred() ||\n+        (type != null && !type.equals(oldVar.getType()))) {\n+      // Use inferred type if the previous var is inferred and\n+      // new var type is null or if the type has changed\n+      type = oldVar.getType();\n+    }\n+  } else if (isRedeclaration) {\n+    Preconditions.checkState(\n+        type.equals(oldVar.getType()),\n+        \"Type changed for variable that is already declared.\" +\n+        \" Variable name: %s. New type: %s. Old type: %s\",\n+        variableName, type, oldVar.getType());\n+  } else if (!scopeToDeclareIn.isGlobal() ||\n+      (oldVar == null || !oldVar.isGlobal())) {\n+    // Create a new Var object for tracking purposes\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    Var newVar = scopeToDeclareIn.declare(variableName, n, type,\n+        input, inferred);\n+\n+    // Defining properties on the global this object.  When\n+    // declared, these are added to an ObjectType that serves as the\n+    // prototype for all objects. We don't add properties to the global\n+    // this object itself.\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName,\n+            type == null ?\n+                typeRegistry.getNativeType(\n+                    JSTypeNative.NO_TYPE) :\n+                type,\n+            isExtern);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    // If we're in the global scope, also declare var.prototype in the\n+    // scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+            fnType.getPrototype(), compiler.getInput(sourceName),\n+            /* declared iff there's an explicit supertype */\n+            superClassCtor == null ||\n+            superClassCtor.getInstanceType().equals(\n+                typeRegistry.getNativeType(JSTypeNative.OBJECT_TYPE)));\n       }\n     }\n+  } else if (n == null) {\n+    // remove global variable from the global scope only when there is\n+    // no node associated with it. But if a variable is specified\n+    // with a declaration in the same scope, we don't remove it.\n+    // We need to unset the current reference to the global variable\n+    // and set the redeclared one in the same scope\n+    scope.undeclare(variableName);\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}