{
    "patch": "if (n.isCall() || n.isNew()) {\n  return false;\n}\nreturn NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..2b525e6d 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,10 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.isCall() || n.isNew()) {\n+  return false;\n+}\n+return NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}