{
    "patch": "public static boolean isAvailableLocale(Locale locale) {\n    for (Locale availableLocale : availableLocaleList()) {\n        if (availableLocale.equals(locale)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static List<Locale> availableLocaleList()  {\n    List<Locale> availableLocales = new ArrayList<Locale>();\n    for (Locale listLocale : Locale.getAvailableLocales()) {\n        availableLocales.add(new Locale(listLocale.getLanguage()));\n    }\n    return availableLocales;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..536198a9 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,22 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static boolean isAvailableLocale(Locale locale) {\n+    for (Locale availableLocale : availableLocaleList()) {\n+        if (availableLocale.equals(locale)) {\n+            return true;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n+    return false;\n+}\n+\n+private static List<Locale> availableLocaleList()  {\n+    List<Locale> availableLocales = new ArrayList<Locale>();\n+    for (Locale listLocale : Locale.getAvailableLocales()) {\n+        availableLocales.add(new Locale(listLocale.getLanguage()));\n+    }\n+    return availableLocales;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method availableLocaleList() is already defined in class LocaleUtils",
    "test_result": "ERROR"
}