{
    "patch": "    if (unitField.isSupported()) {\n        for (; i < iTypes.length; i++) {\n            DateTimeFieldType loopType = iTypes[i];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n            if (loopUnitField.isSupported()) {\n                int compare = unitField.compareTo(loopUnitField);\n                if (compare > 0) {\n                    break;\n                } else if (compare == 0) {\n                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                    if (rangeField.compareTo(loopRangeField) > 0) {\n                        break;\n                    }\n                }\n            }\n        }\n    }\n    // find correct insertion point to keep largest-smallest order\n    List<DateTimeFieldType> newTypes = new ArrayList<DateTimeFieldType>();\n    List<Integer> newValues = new ArrayList<Integer>();\n\n    boolean inserted = false;\n    for (int j = 0; j < iTypes.length; j++) {\n        if (!inserted) {\n            DateTimeFieldType loopType = iTypes[j];\n            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n\n            if (unitField.compareTo(loopUnitField) < 0) {\n                inserted = true;\n                newTypes.add(fieldType);\n                newValues.add(value);\n            } else if (unitField.compareTo(loopUnitField) == 0) {\n                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n\n                if (rangeField.compareTo(loopRangeField) < 0) {\n                    inserted = true;\n                    newTypes.add(fieldType);\n                    newValues.add(value);\n                }\n            }\n        }\n\n        newTypes.add(iTypes[j]);\n        newValues.add(iValues[j]);\n    }\n\n    if (!inserted) {\n        newTypes.add(fieldType);\n        newValues.add(value);\n    }\n\n    Partial newPartial = new Partial(iChronology, newTypes.toArray(new DateTimeFieldType[newTypes.size()]), Ints.toArray(newValues));\n    iChronology.validate(newPartial, newValues.toArray(new Integer[newValues.size()]));\n    return newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..ada7a9c7 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,62 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+    if (unitField.isSupported()) {\n+        for (; i < iTypes.length; i++) {\n+            DateTimeFieldType loopType = iTypes[i];\n+            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+            if (loopUnitField.isSupported()) {\n+                int compare = unitField.compareTo(loopUnitField);\n+                if (compare > 0) {\n+                    break;\n+                } else if (compare == 0) {\n+                    DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                    DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+                    if (rangeField.compareTo(loopRangeField) > 0) {\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+    // find correct insertion point to keep largest-smallest order\n+    List<DateTimeFieldType> newTypes = new ArrayList<DateTimeFieldType>();\n+    List<Integer> newValues = new ArrayList<Integer>();\n+\n+    boolean inserted = false;\n+    for (int j = 0; j < iTypes.length; j++) {\n+        if (!inserted) {\n+            DateTimeFieldType loopType = iTypes[j];\n+            DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+\n+            if (unitField.compareTo(loopUnitField) < 0) {\n+                inserted = true;\n+                newTypes.add(fieldType);\n+                newValues.add(value);\n+            } else if (unitField.compareTo(loopUnitField) == 0) {\n+                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+\n+                if (rangeField.compareTo(loopRangeField) < 0) {\n+                    inserted = true;\n+                    newTypes.add(fieldType);\n+                    newValues.add(value);\n+                }\n+            }\n+        }\n+\n+        newTypes.add(iTypes[j]);\n+        newValues.add(iValues[j]);\n+    }\n+\n+    if (!inserted) {\n+        newTypes.add(fieldType);\n+        newValues.add(value);\n+    }\n+\n+    Partial newPartial = new Partial(iChronology, newTypes.toArray(new DateTimeFieldType[newTypes.size()]), Ints.toArray(newValues));\n+    iChronology.validate(newPartial, newValues.toArray(new Integer[newValues.size()]));\n+    return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: variable newTypes is already defined in method with(DateTimeFieldType,int)",
    "test_result": "ERROR"
}