{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.getType() == Token.EMPTY) { // check for empty blocks\n        return true;\n    }\n    if (n.getType() == Token.LABEL) { // handle labeled blocks\n        Label label = n.getFirstChild().getLabeledStatement();\n\n        // check if label belongs to a FUNCTION or DO\n        if (label != null && \n                (label.getStatement().getType() == Token.FUNCTION || \n                 label.getStatement().getType() == Token.DO)) {\n\n            Node block = label.getStatement().getLastChild();\n            if (block != null && block.getType() == Token.BLOCK) { // check for one child block\n                return block.getFirstChild() == block.getLastChild();\n            }\n        }\n        return false;\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..6b6191bb 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,27 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (n.getType() == Token.EMPTY) { // check for empty blocks\n+        return true;\n+    }\n+    if (n.getType() == Token.LABEL) { // handle labeled blocks\n+        Label label = n.getFirstChild().getLabeledStatement();\n+\n+        // check if label belongs to a FUNCTION or DO\n+        if (label != null && \n+                (label.getStatement().getType() == Token.FUNCTION || \n+                 label.getStatement().getType() == Token.DO)) {\n+\n+            Node block = label.getStatement().getLastChild();\n+            if (block != null && block.getType() == Token.BLOCK) { // check for one child block\n+                return block.getFirstChild() == block.getLastChild();\n+            }\n+        }\n+        return false;\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}