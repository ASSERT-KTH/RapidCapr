{
    "patch": "public static double[] bracket(final UnivariateRealFunction function,\n        final double initial, final double lowerBound, final double upperBound,\n        final int maximumIterations)\n        throws ConvergenceException, FunctionEvaluationException {\n    \n    checkInputs(lowerBound, initial, upperBound);\n    checkMaxIterations(maximumIterations);\n    \n    double a = initial;\n    double b = initial;\n    double fa = function.value(a);\n    double fb = function.value(b);\n    \n    if (isEqual(fa, 0) || isEqual(fb, 0)) {\n        return (new double[]{a, b});\n    }\n    \n    double delta = b - a;\n    boolean done = false;\n    int numIterations = 0;\n    \n    while (!done) {\n        if (((fa > 0) && (fb > 0)) || ((fa < 0) && (fb < 0))) {\n            delta *= 2;\n            a = b - delta;\n            if (a <= lowerBound) {\n                a = lowerBound;\n                done = true;\n            }\n            fa = function.value(a);\n            numIterations++;\n        } else {\n            done = true;\n        }\n        if (((fa > 0) && (fb > 0)) || ((fa < 0) && (fb < 0))) {\n            delta *= 2;\n            b = a + delta;\n            if (b >= upperBound) {\n                b = upperBound;\n                done = true;\n            }\n            fb = function.value(b);\n            numIterations++;\n        } else {\n            done = true;\n        }\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\n                \"Maximum number of iterations exceeded: \" + maximumIterations);\n        }\n    }\n    \n    if (isEqual(fa, 0) || isEqual(fb, 0)) {\n        return (new double[]{a, b});\n    }\n    \n    if (fa < 0) {\n        if (fb < 0) {\n            // The bracket is to the left\n            return (new double[]{b, a});\n        } else {\n            // Both sides bracket\n            return (new double[]{a, b});\n        }\n    } else {\n        if (fb > 0) {\n            // The bracket is to the right\n            return (new double[]{b, a});\n        } else {\n            // Both sides bracket\n            return (new double[]{a, b});\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..04ce5a00b 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,80 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n+public static double[] bracket(final UnivariateRealFunction function,\n+        final double initial, final double lowerBound, final double upperBound,\n+        final int maximumIterations)\n+        throws ConvergenceException, FunctionEvaluationException {\n+    \n+    checkInputs(lowerBound, initial, upperBound);\n+    checkMaxIterations(maximumIterations);\n+    \n+    double a = initial;\n+    double b = initial;\n+    double fa = function.value(a);\n+    double fb = function.value(b);\n+    \n+    if (isEqual(fa, 0) || isEqual(fb, 0)) {\n+        return (new double[]{a, b});\n+    }\n+    \n+    double delta = b - a;\n+    boolean done = false;\n+    int numIterations = 0;\n     \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+    while (!done) {\n+        if (((fa > 0) && (fb > 0)) || ((fa < 0) && (fb < 0))) {\n+            delta *= 2;\n+            a = b - delta;\n+            if (a <= lowerBound) {\n+                a = lowerBound;\n+                done = true;\n+            }\n             fa = function.value(a);\n-            \n+            numIterations++;\n+        } else {\n+            done = true;\n+        }\n+        if (((fa > 0) && (fb > 0)) || ((fa < 0) && (fb < 0))) {\n+            delta *= 2;\n+            b = a + delta;\n+            if (b >= upperBound) {\n+                b = upperBound;\n+                done = true;\n+            }\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+            numIterations++;\n+        } else {\n+            done = true;\n+        }\n+        if (numIterations >= maximumIterations) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                \"Maximum number of iterations exceeded: \" + maximumIterations);\n         }\n-        \n-        return new double[]{a, b};\n     }\n+    \n+    if (isEqual(fa, 0) || isEqual(fb, 0)) {\n+        return (new double[]{a, b});\n+    }\n+    \n+    if (fa < 0) {\n+        if (fb < 0) {\n+            // The bracket is to the left\n+            return (new double[]{b, a});\n+        } else {\n+            // Both sides bracket\n+            return (new double[]{a, b});\n+        }\n+    } else {\n+        if (fb > 0) {\n+            // The bracket is to the right\n+            return (new double[]{b, a});\n+        } else {\n+            // Both sides bracket\n+            return (new double[]{a, b});\n+        }\n+    }\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}