{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            chrono.millis() + chrono.getZone().getOffset(chrono.millis()), chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        // compare original parsed value with the computed one\n        if (chrono != bucket.getChronology()) {\n            long parsedLocalMillis = bucket.computeMillis(false, text);\n            long offsetMillis = chrono.getZone().getOffset(parsedLocalMillis);\n            instant.setMillis(parsedLocalMillis - offsetMillis);\n            instant.setChronology(bucket.getChronology());\n        } else {\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n                instant.setChronology(chrono);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n                instant.setChronology(chrono);\n            } else if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..22b932ef 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -700,25 +700,30 @@ public class DateTimeFormatter {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n         \n-        long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            chrono.millis() + chrono.getZone().getOffset(chrono.millis()), chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        // compare original parsed value with the computed one\n+        if (chrono != bucket.getChronology()) {\n+            long parsedLocalMillis = bucket.computeMillis(false, text);\n+            long offsetMillis = chrono.getZone().getOffset(parsedLocalMillis);\n+            instant.setMillis(parsedLocalMillis - offsetMillis);\n+            instant.setChronology(bucket.getChronology());\n+        } else {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+                instant.setChronology(chrono);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+                instant.setChronology(chrono);\n+            } else if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "error: no suitable method found for getOffset(DurationField)",
    "test_result": "ERROR"
}