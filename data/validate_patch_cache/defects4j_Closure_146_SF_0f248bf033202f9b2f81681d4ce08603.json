{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n  // unions types\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n\n  // other types\n  switch (this.testForEquality(that)) {\n    case TRUE:\n      return new TypePair(null, null);\n\n    case FALSE:\n    case UNKNOWN:\n      return new TypePair(that, this);\n  }\n\n  // switch case is exhaustive\n  throw new IllegalStateException();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..6cd56dc7 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,27 +693,27 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n-    if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n-    }\n-\n-    // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n+public TypePair getTypesUnderInequality(JSType that) {\n+  // unions types\n+  if (that instanceof UnionType) {\n+    TypePair p = that.getTypesUnderInequality(this);\n+    return new TypePair(p.typeB, p.typeA);\n+  }\n \n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n-    }\n+  // other types\n+  switch (this.testForEquality(that)) {\n+    case TRUE:\n+      return new TypePair(null, null);\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n+    case FALSE:\n+    case UNKNOWN:\n+      return new TypePair(that, this);\n   }\n \n+  // switch case is exhaustive\n+  throw new IllegalStateException();\n+}\n+\n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow\n    * equality.",
    "result_reason": "junit.framework.AssertionFailedError: unexpected warnings(s):",
    "test_result": "FAIL"
}