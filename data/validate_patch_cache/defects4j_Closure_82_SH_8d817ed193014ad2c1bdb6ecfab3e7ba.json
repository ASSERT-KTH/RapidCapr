{
    "patch": "\n    return isNoType() || isNoObjectType() || isNoResolvedType() || isClassType() && Arrays.stream(asClassType().getDeclaredAnnotations()).noneMatch(ann -> ann.annotationType().getName().startsWith(\"javax.annotation.\")) && asClassType().getDeclaredFields().isEmpty() && asClassType().getDeclaredMethods().isEmpty() && asClassType().getConstructors().isEmpty();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..dae894e9 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -160,7 +160,8 @@ public abstract class JSType implements Serializable {\n   }\n \n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+\n+    return isNoType() || isNoObjectType() || isNoResolvedType() || isClassType() && Arrays.stream(asClassType().getDeclaredAnnotations()).noneMatch(ann -> ann.annotationType().getName().startsWith(\"javax.annotation.\")) && asClassType().getDeclaredFields().isEmpty() && asClassType().getDeclaredMethods().isEmpty() && asClassType().getConstructors().isEmpty();\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}