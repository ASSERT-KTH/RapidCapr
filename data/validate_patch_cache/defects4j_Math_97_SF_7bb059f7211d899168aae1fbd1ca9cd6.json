{
    "patch": "import org.apache.commons.math3.exception.FunctionEvaluationException;\nimport org.apache.commons.math3.exception.MaxIterationsExceededException;\nimport org.apache.commons.math3.util.Precision;\n\npublic double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n        \n    // Verify bracketing\n    double sign = yMin * yMax;\n\n    if (sign > 0) {\n        // check if either value is close to a zero\n        if (Precision.equals(yMin, 0.0, functionValueAccuracy)) {\n            setResult(min, 0.0, 1, 1);\n            return min;\n        }\n        else if (Precision.equals(yMax, 0.0, functionValueAccuracy)) {\n            setResult(max, 0.0, 1, 1);\n            return max;\n        }\n        else {\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException(\n                    \"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n    } \n    else if (sign < 0) {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n        if (Precision.equals(f.value(ret), 0.0, functionValueAccuracy) || ret == min || ret == max) {\n            return ret;\n        }\n    }\n    else {\n        // Either min or max is a root.\n        if (yMin == 0.0) {\n            setResult(min, 0.0, 1, 1);\n            return min;\n        }\n        else if(yMax == 0.0) {\n            setResult(max, 0.0, 1, 1);\n            return max;\n        }\n    }\n\n    // maximum number of iterations reached\n    throw new FunctionEvaluationException(ret, \"maximum number of iterations reached\");\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..7297c5e52 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,63 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n+import org.apache.commons.math3.exception.FunctionEvaluationException;\n+import org.apache.commons.math3.exception.MaxIterationsExceededException;\n+import org.apache.commons.math3.util.Precision;\n+\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n         \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n \n-        return ret;\n+    if (sign > 0) {\n+        // check if either value is close to a zero\n+        if (Precision.equals(yMin, 0.0, functionValueAccuracy)) {\n+            setResult(min, 0.0, 1, 1);\n+            return min;\n+        }\n+        else if (Precision.equals(yMax, 0.0, functionValueAccuracy)) {\n+            setResult(max, 0.0, 1, 1);\n+            return max;\n+        }\n+        else {\n+            // neither value is close to zero and min and max do not bracket root.\n+            throw new IllegalArgumentException(\n+                    \"Function values at endpoints do not have different signs.\" +\n+                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n+    } \n+    else if (sign < 0) {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n+        if (Precision.equals(f.value(ret), 0.0, functionValueAccuracy) || ret == min || ret == max) {\n+            return ret;\n+        }\n     }\n+    else {\n+        // Either min or max is a root.\n+        if (yMin == 0.0) {\n+            setResult(min, 0.0, 1, 1);\n+            return min;\n+        }\n+        else if(yMax == 0.0) {\n+            setResult(max, 0.0, 1, 1);\n+            return max;\n+        }\n+    }\n+\n+    // maximum number of iterations reached\n+    throw new FunctionEvaluationException(ret, \"maximum number of iterations reached\");\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}