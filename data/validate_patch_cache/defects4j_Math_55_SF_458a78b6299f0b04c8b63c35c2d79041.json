{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double v1Magnitude = v1.getNorm();\n    final double v2Magnitude = v2.getNorm();\n    final double mag = v1Magnitude * v2Magnitude;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n    final double r = mag - Vector3D.dotProduct(v1, v2) / 2.0;\n    final double rho;\n    if (v1Magnitude == 0 || v2Magnitude == 0 || FastMath.abs(mag) < Precision.SAFE_MIN) {\n        // either v1 or v2 has almost zero magnitude, or mag is too small\n        // to represent safely as a double, so we fall back to the\n        // classical formula with 3 crossings, which has some cancellation\n        // error but is otherwise ok\n        return crossProductWithoutPreconditioning(v1, v2);\n    } else if (r >= 0.95 * mag) {\n        // rho would be too large (would need a precision higher than\n        // 64-bit floating point numbers), we fall back to the\n        // classical formula with 3 crossings, which has some cancellation\n        // error but is otherwise ok\n        rho = 0;\n    } else {\n        final double v2Xv1y = v2.getX() * v1.getY();\n        final double v1Xv2y = v1.getX() * v2.getY();\n        final double v2Xv1z = v2.getX() * v1.getZ();\n        final double v1Xv2z = v1.getX() * v2.getZ();\n        final double v2Yv1z = v2.getY() * v1.getZ();\n        final double v1Yv2z = v1.getY() * v2.getZ();\n        final double max = FastMath.max(FastMath.abs(v2Xv1y),\n                FastMath.max(FastMath.abs(v1Xv2y),\n                FastMath.max(FastMath.abs(v2Xv1z),\n                FastMath.max(FastMath.abs(v1Xv2z),\n                FastMath.max(FastMath.abs(v2Yv1z),\n                FastMath.abs(v1Yv2z))))));\n        if (max <= Precision.SAFE_MIN) {\n            // we only detect near zero rotations here, larger ones\n            // can happen as well and will be handled in the cross product\n            // Computation using the pre-conditioned vector\n            return crossProductWithoutPreconditioning(v1, v2);\n        }\n        final double invMax = 1.0 / max;\n        rho = (r * invMax * invMax) / (invMax + FastMath.sqrt(1.0 + invMax * invMax));\n    }\n\n    final Vector3D pv2 = new Vector3D(-rho * v2.getX(), -rho * v2.getY(), -rho * v2.getZ());\n    final Vector3D v3  = new Vector3D(v1.getX() + pv2.getX(), v1.getY() + pv2.getY(), v1.getZ() + pv2.getZ());\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return crossProductWithoutPreconditioning(v3, v2);\n}\n\nprivate static Vector3D crossProductWithoutPreconditioning(final Vector3D v1, final Vector3D v2) {\n    return new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(),\n                        v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n                        v1.getX() * v2.getY() - v1.getY() * v2.getX());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..31c936849 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,67 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double v1Magnitude = v1.getNorm();\n+    final double v2Magnitude = v2.getNorm();\n+    final double mag = v1Magnitude * v2Magnitude;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double r = mag - Vector3D.dotProduct(v1, v2) / 2.0;\n+    final double rho;\n+    if (v1Magnitude == 0 || v2Magnitude == 0 || FastMath.abs(mag) < Precision.SAFE_MIN) {\n+        // either v1 or v2 has almost zero magnitude, or mag is too small\n+        // to represent safely as a double, so we fall back to the\n+        // classical formula with 3 crossings, which has some cancellation\n+        // error but is otherwise ok\n+        return crossProductWithoutPreconditioning(v1, v2);\n+    } else if (r >= 0.95 * mag) {\n+        // rho would be too large (would need a precision higher than\n+        // 64-bit floating point numbers), we fall back to the\n+        // classical formula with 3 crossings, which has some cancellation\n+        // error but is otherwise ok\n+        rho = 0;\n+    } else {\n+        final double v2Xv1y = v2.getX() * v1.getY();\n+        final double v1Xv2y = v1.getX() * v2.getY();\n+        final double v2Xv1z = v2.getX() * v1.getZ();\n+        final double v1Xv2z = v1.getX() * v2.getZ();\n+        final double v2Yv1z = v2.getY() * v1.getZ();\n+        final double v1Yv2z = v1.getY() * v2.getZ();\n+        final double max = FastMath.max(FastMath.abs(v2Xv1y),\n+                FastMath.max(FastMath.abs(v1Xv2y),\n+                FastMath.max(FastMath.abs(v2Xv1z),\n+                FastMath.max(FastMath.abs(v1Xv2z),\n+                FastMath.max(FastMath.abs(v2Yv1z),\n+                FastMath.abs(v1Yv2z))))));\n+        if (max <= Precision.SAFE_MIN) {\n+            // we only detect near zero rotations here, larger ones\n+            // can happen as well and will be handled in the cross product\n+            // Computation using the pre-conditioned vector\n+            return crossProductWithoutPreconditioning(v1, v2);\n+        }\n+        final double invMax = 1.0 / max;\n+        rho = (r * invMax * invMax) / (invMax + FastMath.sqrt(1.0 + invMax * invMax));\n+    }\n \n+    final Vector3D pv2 = new Vector3D(-rho * v2.getX(), -rho * v2.getY(), -rho * v2.getZ());\n+    final Vector3D v3  = new Vector3D(v1.getX() + pv2.getX(), v1.getY() + pv2.getY(), v1.getZ() + pv2.getZ());\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return crossProductWithoutPreconditioning(v3, v2);\n+}\n \n-  }\n+private static Vector3D crossProductWithoutPreconditioning(final Vector3D v1, final Vector3D v2) {\n+    return new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(),\n+                        v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n+                        v1.getX() * v2.getY() - v1.getY() * v2.getX());\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}