{
    "patch": "      public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without a return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        if (n.isCall()) {\n          if (NodeUtil.functionCallHasSideEffects(n) || hasSideEffectArguments(n)) {\n            return true;\n          }\n        }\n\n        if (n.isNew()) {\n          if (NodeUtil.constructorCallHasSideEffects(n) || hasSideEffectArguments(n)) {\n            return true;\n          }\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n            return true;\n          }\n        }\n        return false;\n      }\n\n      private boolean hasSideEffectArguments(Node n) {\n        for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n          if (NodeUtil.isExpressionResultUsed(c)\n              && !NodeUtil.mayBeSideEffectFree(c, /*scope=*/ null)) {\n            return true;\n          }\n        }\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..6de35e38 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -83,7 +83,7 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n       @Override\n       public boolean apply(Node n) {\n         // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n+        // where the function returns (possibly without a return statement)\n         if (n == null) {\n           return false;\n         }\n@@ -91,15 +91,18 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n         // TODO(user): We only care about calls to functions that\n         // passes one of the dependent variable to a non-side-effect free\n         // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n+        if (n.isCall()) {\n+          if (NodeUtil.functionCallHasSideEffects(n) || hasSideEffectArguments(n)) {\n+            return true;\n+          }\n         }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+        if (n.isNew()) {\n+          if (NodeUtil.constructorCallHasSideEffects(n) || hasSideEffectArguments(n)) {\n+            return true;\n+          }\n         }\n \n-\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n             return true;\n@@ -107,6 +110,16 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n         }\n         return false;\n       }\n+\n+      private boolean hasSideEffectArguments(Node n) {\n+        for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n+          if (NodeUtil.isExpressionResultUsed(c)\n+              && !NodeUtil.mayBeSideEffectFree(c, /*scope=*/ null)) {\n+            return true;\n+          }\n+        }\n+        return false;\n+      }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}