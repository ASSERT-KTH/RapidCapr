{
    "patch": "// Deleting a property has different semantics from deleting\n// a variable, so deleted properties should not be inlined.\nif (NodeUtil.isUnaryOp(parent) && parent.isDelProp()) {\n  return false;\n}\n\n// NOTE(nicksantos): This pass's object-splitting algorithm has\n// a blind spot. It assumes that if a property isn't defined on an\n// object, then the value is undefined. This is not true, because\n// Object.prototype can have arbitrary properties on it.\n//\n// We short-circuit this problem by bailing out if we see a reference\n// to a property that isn't defined on the object literal. This\n// isn't a perfect algorithm, but it should catch most cases.\nString propName = parent.getLastChild().getString();\nif (!validProperties.contains(propName)) {\n  if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n    validProperties.add(propName);\n  } else {\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..0aeb1540 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,28 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+// Deleting a property has different semantics from deleting\n+// a variable, so deleted properties should not be inlined.\n+if (NodeUtil.isUnaryOp(parent) && parent.isDelProp()) {\n+  return false;\n+}\n+\n+// NOTE(nicksantos): This pass's object-splitting algorithm has\n+// a blind spot. It assumes that if a property isn't defined on an\n+// object, then the value is undefined. This is not true, because\n+// Object.prototype can have arbitrary properties on it.\n+//\n+// We short-circuit this problem by bailing out if we see a reference\n+// to a property that isn't defined on the object literal. This\n+// isn't a perfect algorithm, but it should catch most cases.\n+String propName = parent.getLastChild().getString();\n+if (!validProperties.contains(propName)) {\n+  if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+    validProperties.add(propName);\n+  } else {\n+    return false;\n+  }\n+}\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}