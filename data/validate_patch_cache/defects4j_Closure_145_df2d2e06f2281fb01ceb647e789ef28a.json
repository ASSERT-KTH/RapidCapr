{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a\n    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped. \n    // Either it is an empty statement or a FUNCTION/DO with a single child that is either a BLOCK or another FUNCTION/DO,\n    // and any sibling nodes are either null or empty statements.\n    Node child = n.getFirstChild();\n    if (child == null) {\n        return true; // An empty statement\n    }\n    int childType = child.getType();\n    if (childType == Token.BLOCK) {\n        return child.getFirstChild() == null;\n    } else if (childType == Token.FUNCTION || childType == Token.DO) {\n        Node sibling = child.getNext();\n        return (sibling == null || (sibling.getType() == Token.EMPTY && sibling.getNext() == null))\n                && isOneExactlyFunctionOrDo(child);\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..b5e7ede7 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,26 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    // For labels with block children, we need to ensure that a\n+    // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+    // are skipped. \n+    // Either it is an empty statement or a FUNCTION/DO with a single child that is either a BLOCK or another FUNCTION/DO,\n+    // and any sibling nodes are either null or empty statements.\n+    Node child = n.getFirstChild();\n+    if (child == null) {\n+        return true; // An empty statement\n+    }\n+    int childType = child.getType();\n+    if (childType == Token.BLOCK) {\n+        return child.getFirstChild() == null;\n+    } else if (childType == Token.FUNCTION || childType == Token.DO) {\n+        Node sibling = child.getNext();\n+        return (sibling == null || (sibling.getType() == Token.EMPTY && sibling.getNext() == null))\n+                && isOneExactlyFunctionOrDo(child);\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}