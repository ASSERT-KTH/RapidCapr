{
    "patch": "    for (Node props = n.getFirstChild(); props != null; props = props.getNext()) {\n      Node child = props.getFirstChild();\n      while (child != null) {\n        String name = child.getString();\n        T type = getType(child);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n        child = child.getNext();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..e1755c3f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,25 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    for (Node props = n.getFirstChild(); props != null; props = props.getNext()) {\n+      Node child = props.getFirstChild();\n+      while (child != null) {\n+        String name = child.getString();\n+        T type = getType(child);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+        child = child.getNext();\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}