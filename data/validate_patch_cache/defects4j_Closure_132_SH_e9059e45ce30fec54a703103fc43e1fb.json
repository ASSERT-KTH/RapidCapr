{
    "patch": "            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n                  // if LHS has side effects, don't proceed [since the optimization\n                  // evaluates LHS before cond]\n                  // NOTE - there are some circumstances where we can\n                  // proceed even if there are side effects...\n                  !mayEffectMutableState(lhs)) {\n              // Prevent dead branches of the conditional operator from affecting side-effect analysis.\n              Node temp = IR.var(IR.name(MINIMIZE_BLOCK_PREFIX)).srcref(thenBranch);\n              Node name = temp.getFirstChild();\n              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n              Node assign = new Node(Token.ASSIGN, name.cloneTree(),\n                  hookNode).srcref(thenOp);\n              Node result = NodeUtil.newExpr(assign);\n              thenBranch.addChildToFront(temp);\n              NodeUtil.markFunctionsDeleted(hookNode);\n              NodeUtil.tryMergeBlock(thenBranch);\n              NodeUtil.tryMergeBlock(elseBranch);\n              Node newBlock = IR.block(temp, result).srcref(n);\n              parent.replaceChild(n, newBlock);\n              reportCodeChange();\n\n              return newBlock;\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..84db2faa 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,29 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+            if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n+                  // if LHS has side effects, don't proceed [since the optimization\n+                  // evaluates LHS before cond]\n+                  // NOTE - there are some circumstances where we can\n+                  // proceed even if there are side effects...\n+                  !mayEffectMutableState(lhs)) {\n+              // Prevent dead branches of the conditional operator from affecting side-effect analysis.\n+              Node temp = IR.var(IR.name(MINIMIZE_BLOCK_PREFIX)).srcref(thenBranch);\n+              Node name = temp.getFirstChild();\n+              Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+              Node assign = new Node(Token.ASSIGN, name.cloneTree(),\n+                  hookNode).srcref(thenOp);\n+              Node result = NodeUtil.newExpr(assign);\n+              thenBranch.addChildToFront(temp);\n+              NodeUtil.markFunctionsDeleted(hookNode);\n+              NodeUtil.tryMergeBlock(thenBranch);\n+              NodeUtil.tryMergeBlock(elseBranch);\n+              Node newBlock = IR.block(temp, result).srcref(n);\n+              parent.replaceChild(n, newBlock);\n+              reportCodeChange();\n+\n+              return newBlock;\n+            }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}