{
    "patch": "    private static void modify(Calendar val, int field, boolean round) {\n        // Fix for LANG-59 - Manually truncate milliseconds, seconds and minutes, rather than using Calendar methods.\n        if (field == Calendar.MILLISECOND) {\n            val.set(Calendar.MILLISECOND, 0);\n        }\n        if (field == Calendar.SECOND || field == Calendar.MILLISECOND) {\n            val.set(Calendar.SECOND, 0);\n        }\n        if (field == Calendar.MINUTE || field == Calendar.SECOND || field == Calendar.MILLISECOND) {\n            val.set(Calendar.MINUTE, 0);\n        }\n        val.set(Calendar.HOUR_OF_DAY, 0);\n\n        boolean roundUp = false;\n        for (int[] fieldsRow : fields) {\n            for (int i = 0; i < fieldsRow.length; i++) {\n                int currentField = fieldsRow[i];\n                if (currentField == field) {\n                    //This is our field, so we stop looping\n                    if (round && roundUp) {\n                        if (field == DateUtils.SEMI_MONTH) {\n                            //This is a special case that's hard to generalize\n                            //If the date is 1, we round up to 16, otherwise\n                            // we subtract 15 days and add 1 month\n                            if (val.get(Calendar.DATE) == 1) {\n                                val.add(Calendar.DATE, 15);\n                            } else {\n                                val.add(Calendar.DATE, -15);\n                                val.add(Calendar.MONTH, 1);\n                            }\n                        } else {\n                            //We need at add one to this field since the\n                            //  last number causes us to round up\n                            val.add(fieldsRow[0], 1);\n                        }\n                    }\n                    return;\n                }\n            }\n            //We have various fields that are not easy roundings\n            int offset = 0;\n            boolean offsetSet = false;\n            //These are special types of fields that require different rounding rules\n            switch (field) {\n                case DateUtils.SEMI_MONTH:\n                    if (fieldsRow[0] == Calendar.DATE) {\n                        //If we're going to drop the DATE field's value,\n                        //  we want to do this our own way.\n                        //We need to subtract 1 since the date has a minimum of 1\n                        offset = val.get(Calendar.DATE) - 1;\n                        //If we're above 15 days adjustment, that means we're in the\n                        //  bottom half of the month and should stay accordingly.\n                        if (offset >= 15) {\n                            offset -= 15;\n                        }\n                        //Record whether we're in the top or bottom half of that range\n                        roundUp = offset > 7;\n                        offsetSet = true;\n                    }\n                    break;\n                case Calendar.AM_PM:\n                    if (fieldsRow[0] == Calendar.HOUR_OF_DAY) {\n                        //If we're going to drop the HOUR field's value,\n                        //  we want to do this our own way.\n                        offset = val.get(Calendar.HOUR_OF_DAY);\n                        if (offset >= 12) {\n                            offset -= 12;\n                        }\n                        roundUp = offset > 6;\n                        offsetSet = true;\n                    }\n                    break;\n            }\n            if (!offsetSet) {\n                int min = val.getActualMinimum(fieldsRow[0]);\n                int max = val.getActualMaximum(fieldsRow[0]);\n                //Calculate the offset from the minimum allowed value\n                offset = val.get(fieldsRow[0]) - min;\n                //Set roundUp if this is more than half way between the minimum and maximum\n                roundUp = offset > ((max - min) / 2);\n            }\n            //We need to remove this field\n            val.set(fieldsRow[0], val.get(fieldsRow[0]) - offset);\n        }\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 531e73fc..be208276 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -617,37 +617,29 @@ public class DateUtils {\n      * @throws ArithmeticException if the year is over 280 million\n      */\n     private static void modify(Calendar val, int field, boolean round) {\n-        if (val.get(Calendar.YEAR) > 280000000) {\n-            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+        // Fix for LANG-59 - Manually truncate milliseconds, seconds and minutes, rather than using Calendar methods.\n+        if (field == Calendar.MILLISECOND) {\n+            val.set(Calendar.MILLISECOND, 0);\n         }\n-        \n-\n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-\n-        // truncate milliseconds\n-\n-        // truncate seconds\n-\n-        // truncate minutes\n-\n-        // reset time\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n+        if (field == Calendar.SECOND || field == Calendar.MILLISECOND) {\n+            val.set(Calendar.SECOND, 0);\n+        }\n+        if (field == Calendar.MINUTE || field == Calendar.SECOND || field == Calendar.MILLISECOND) {\n+            val.set(Calendar.MINUTE, 0);\n+        }\n+        val.set(Calendar.HOUR_OF_DAY, 0);\n \n         boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n+        for (int[] fieldsRow : fields) {\n+            for (int i = 0; i < fieldsRow.length; i++) {\n+                int currentField = fieldsRow[i];\n+                if (currentField == field) {\n+                    //This is our field, so we stop looping\n                     if (round && roundUp) {\n                         if (field == DateUtils.SEMI_MONTH) {\n                             //This is a special case that's hard to generalize\n                             //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n+                            // we subtract 15 days and add 1 month\n                             if (val.get(Calendar.DATE) == 1) {\n                                 val.add(Calendar.DATE, 15);\n                             } else {\n@@ -657,7 +649,7 @@ public class DateUtils {\n                         } else {\n                             //We need at add one to this field since the\n                             //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n+                            val.add(fieldsRow[0], 1);\n                         }\n                     }\n                     return;\n@@ -669,10 +661,10 @@ public class DateUtils {\n             //These are special types of fields that require different rounding rules\n             switch (field) {\n                 case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n+                    if (fieldsRow[0] == Calendar.DATE) {\n                         //If we're going to drop the DATE field's value,\n                         //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n+                        //We need to subtract 1 since the date has a minimum of 1\n                         offset = val.get(Calendar.DATE) - 1;\n                         //If we're above 15 days adjustment, that means we're in the\n                         //  bottom half of the month and should stay accordingly.\n@@ -685,7 +677,7 @@ public class DateUtils {\n                     }\n                     break;\n                 case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n+                    if (fieldsRow[0] == Calendar.HOUR_OF_DAY) {\n                         //If we're going to drop the HOUR field's value,\n                         //  we want to do this our own way.\n                         offset = val.get(Calendar.HOUR_OF_DAY);\n@@ -698,18 +690,17 @@ public class DateUtils {\n                     break;\n             }\n             if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n+                int min = val.getActualMinimum(fieldsRow[0]);\n+                int max = val.getActualMaximum(fieldsRow[0]);\n                 //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n+                offset = val.get(fieldsRow[0]) - min;\n                 //Set roundUp if this is more than half way between the minimum and maximum\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            val.set(fieldsRow[0], val.get(fieldsRow[0]) - offset);\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n-\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}