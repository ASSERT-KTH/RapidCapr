{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n      // For labels with block children, we need to ensure that a\n      // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n      // are skipped. \n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) &&\n          (n.getNext() == null || n.getNext().getType() != Token.LABEL ||\n          n.getChildCount() != 1 || n.getFirstChild().getType() == Token.EMPTY ||\n          (n.getFirstChild().getType() == Token.BLOCK &&\n          n.getFirstChild().getChildCount() == 1 &&\n          n.getFirstChild().getFirstChild().getType() == n.getType()));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..77424d57 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,15 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+      // For labels with block children, we need to ensure that a\n+      // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+      // are skipped. \n+      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) &&\n+          (n.getNext() == null || n.getNext().getType() != Token.LABEL ||\n+          n.getChildCount() != 1 || n.getFirstChild().getType() == Token.EMPTY ||\n+          (n.getFirstChild().getType() == Token.BLOCK &&\n+          n.getFirstChild().getChildCount() == 1 &&\n+          n.getFirstChild().getFirstChild().getType() == n.getType()));\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}