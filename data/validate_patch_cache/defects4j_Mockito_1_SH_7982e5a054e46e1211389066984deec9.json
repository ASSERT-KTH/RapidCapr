{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                Object arg;\n                if (isVariableArgument(invocation, position)) {\n                    Object varArgs = Arrays.copyOfRange(rawArguments, position, rawArguments.length);\n                    boolean isVarArgMatcher = isVarargMatcher(m);\n                    // In this case, the variable argument will be used as an array\n                    if (isVarArgMatcher) {\n                        List<Object> varArgsList = new ArrayList<>();\n                        for (Object varArgsObj : varArgs) {\n                            if (varArgsObj.getClass().isArray()) {\n                                int length = Array.getLength(varArgsObj);\n                                for (int i = 0; i < length; i++) {\n                                    varArgsList.add(Array.get(varArgsObj, i));\n                                }\n                            } else {\n                                varArgsList.add(varArgsObj);\n                            }\n                        }\n                        arg = varArgsList.toArray();\n                    } else {\n                        arg = varArgs;\n                    }\n                } else {\n                    arg = invocation.getArgumentAt(position, Object.class);\n                }\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..1f9ec9ee1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,37 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                Object arg;\n+                if (isVariableArgument(invocation, position)) {\n+                    Object varArgs = Arrays.copyOfRange(rawArguments, position, rawArguments.length);\n+                    boolean isVarArgMatcher = isVarargMatcher(m);\n+                    // In this case, the variable argument will be used as an array\n+                    if (isVarArgMatcher) {\n+                        List<Object> varArgsList = new ArrayList<>();\n+                        for (Object varArgsObj : varArgs) {\n+                            if (varArgsObj.getClass().isArray()) {\n+                                int length = Array.getLength(varArgsObj);\n+                                for (int i = 0; i < length; i++) {\n+                                    varArgsList.add(Array.get(varArgsObj, i));\n+                                }\n+                            } else {\n+                                varArgsList.add(varArgsObj);\n+                            }\n+                        }\n+                        arg = varArgsList.toArray();\n+                    } else {\n+                        arg = varArgs;\n+                    }\n+                } else {\n+                    arg = invocation.getArgumentAt(position, Object.class);\n+                }\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}