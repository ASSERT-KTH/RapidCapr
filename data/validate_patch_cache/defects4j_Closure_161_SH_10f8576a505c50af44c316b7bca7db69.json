{
    "patch": "if (left.getType() != Token.ARRAYLIT || !left.hasOneChild()) {\n  return n;\n}\n\nNode arrayLiteralChild = left.getFirstChild();\n\nif (arrayLiteralChild.getType() == Token.EMPTY) {\n  if (intIndex == 0) {\n    Node newChild = NodeUtil.newNumberNode(null, 0.0);\n    left.replaceChild(arrayLiteralChild, newChild);\n    reportCodeChange();\n    return newChild;\n  } else {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n}\n\nint childIndex = 0;\n\nwhile (arrayLiteralChild != null) {\n  if (childIndex == intIndex) {\n    left.removeChild(arrayLiteralChild);\n    reportCodeChange();\n    return arrayLiteralChild;\n  }\n  childIndex++;\n  arrayLiteralChild = arrayLiteralChild.getNext();\n}\n\nerror(INDEX_OUT_OF_BOUNDS_ERROR, right);\nreturn n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..355768a0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,12 +1274,43 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() != Token.ARRAYLIT || !left.hasOneChild()) {\n+  return n;\n+}\n+\n+Node arrayLiteralChild = left.getFirstChild();\n+\n+if (arrayLiteralChild.getType() == Token.EMPTY) {\n+  if (intIndex == 0) {\n+    Node newChild = NodeUtil.newNumberNode(null, 0.0);\n+    left.replaceChild(arrayLiteralChild, newChild);\n+    reportCodeChange();\n+    return newChild;\n+  } else {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+}\n+\n+int childIndex = 0;\n+\n+while (arrayLiteralChild != null) {\n+  if (childIndex == intIndex) {\n+    left.removeChild(arrayLiteralChild);\n+    reportCodeChange();\n+    return arrayLiteralChild;\n+  }\n+  childIndex++;\n+  arrayLiteralChild = arrayLiteralChild.getNext();\n+}\n+\n+error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+return n;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}