{
    "patch": "import org.apache.commons.math.exception.util.LocalizedFormats;\n\n// ...\n\ncase REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    if (f1 == f0) {\n        throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_FAILED,\n                                       maxEval, getRelativeAccuracy());\n    }\n    f0 *= 0.5;\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..835557bff 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,19 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+import org.apache.commons.math.exception.util.LocalizedFormats;\n+\n+// ...\n+\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    if (f1 == f0) {\n+        throw new ConvergenceException(LocalizedFormats.REGULA_FALSI_FAILED,\n+                                       maxEval, getRelativeAccuracy());\n+    }\n+    f0 *= 0.5;\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}