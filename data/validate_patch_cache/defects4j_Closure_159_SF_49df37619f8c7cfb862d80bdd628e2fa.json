{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed);\n    LinkedList<Node> stack = new LinkedList<>();\n    stack.push(node);\n    while (!stack.isEmpty()) {\n        Node current = stack.pop();\n        if (current.getType() == Token.CALL) {\n            Node child = current.getFirstChild();\n            if (child != null && child.getType() == Token.NAME) {\n                changed.add(child.getString());\n            }\n        }\n        Node next = current.getNext();\n        if (next != null) {\n            stack.push(next);\n        }\n        Node child = current.getFirstChild();\n        if (child != null) {\n            stack.push(child);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..956fe8ad 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,28 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed);\n+    LinkedList<Node> stack = new LinkedList<>();\n+    stack.push(node);\n+    while (!stack.isEmpty()) {\n+        Node current = stack.pop();\n+        if (current.getType() == Token.CALL) {\n+            Node child = current.getFirstChild();\n+            if (child != null && child.getType() == Token.NAME) {\n+                changed.add(child.getString());\n+            }\n+        }\n+        Node next = current.getNext();\n+        if (next != null) {\n+            stack.push(next);\n+        }\n+        Node child = current.getFirstChild();\n+        if (child != null) {\n+            stack.push(child);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}