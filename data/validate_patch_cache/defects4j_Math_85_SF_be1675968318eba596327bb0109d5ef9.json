{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = lowerBound;\n    double b = upperBound;\n    double fa = function.value(a);\n    double fb = function.value(b);\n    if (fa * fb <= 0.0) { // first guess is good\n        if (fa > fb) {\n            double tmp = a;\n            a = b;\n            b = tmp;\n        }\n        return new double[]{a, b};\n    }\n\n    // first guess is bad, try to improve\n    double m = initial;\n    double fm = function.value(m);\n    int numIterations = 0;\n    while ((fa * fm > 0.0) && (fb * fm > 0.0) && (numIterations < maximumIterations)) {\n        numIterations++;\n        if (fa * fm < 0.0) {\n            b = m;\n            fb = fm;\n        } else {\n            a = m;\n            fa = fm;\n        }\n        double delta = (upperBound - lowerBound) * 0.5;\n        if (Math.abs(fa) < Math.abs(fb)) {\n            m = a + delta;\n        } else {\n            m = b - delta;\n        }\n        fm = function.value(m);\n    }\n\n    if (fa * fm >= 0.0) { // still not brackets found\n        throw new ConvergenceException(\n                \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper \" +\n                        \"bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n                numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    // use the original implementation to converge\n    numIterations = 0;\n    double prevLength = upperBound - lowerBound;\n    double currentLength = prevLength;\n    final double absoluteAccuracy = getAbsoluteAccuracy();\n    do {\n        if (fa * fm < 0.0) {\n            b = m;\n            fb = fm;\n        } else {\n            a = m;\n            fa = fm;\n        }\n\n        // update m\n        prevLength = currentLength;\n        currentLength = b - a;\n        if (currentLength < 0.0) {\n            double tmp = a;\n            a = b;\n            b = tmp;\n            currentLength = -currentLength;\n        }\n\n        if (currentLength < absoluteAccuracy || (fa == 0.0)) {\n            // convergence is achieved\n            return new double[]{a, b};\n        }\n\n        numIterations++;\n        double delta = 0.5 * (fb - fa) / (b - a);\n        if (delta == 0.0) {\n            // if bisection occurred because of identical f(a) and f(b)\n            // fallback to a default widening algorithm to jump out\n            // of the current interval\n            delta = currentLength / 10.0;\n        }\n        m = m - delta;\n        fm = function.value(m);\n    } while (numIterations < maximumIterations);\n\n    throw new ConvergenceException(\n            \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper \" +\n                    \"bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n            numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..bfb1c2e9c 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,112 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double a = lowerBound;\n+    double b = upperBound;\n+    double fa = function.value(a);\n+    double fb = function.value(b);\n+    if (fa * fb <= 0.0) { // first guess is good\n+        if (fa > fb) {\n+            double tmp = a;\n+            a = b;\n+            b = tmp;\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        return new double[]{a, b};\n+    }\n+\n+    // first guess is bad, try to improve\n+    double m = initial;\n+    double fm = function.value(m);\n+    int numIterations = 0;\n+    while ((fa * fm > 0.0) && (fb * fm > 0.0) && (numIterations < maximumIterations)) {\n+        numIterations++;\n+        if (fa * fm < 0.0) {\n+            b = m;\n+            fb = fm;\n+        } else {\n+            a = m;\n+            fa = fm;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        double delta = (upperBound - lowerBound) * 0.5;\n+        if (Math.abs(fa) < Math.abs(fb)) {\n+            m = a + delta;\n+        } else {\n+            m = b - delta;\n         }\n-        \n-        return new double[]{a, b};\n+        fm = function.value(m);\n     }\n \n+    if (fa * fm >= 0.0) { // still not brackets found\n+        throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper \" +\n+                        \"bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n+    }\n+\n+    // use the original implementation to converge\n+    numIterations = 0;\n+    double prevLength = upperBound - lowerBound;\n+    double currentLength = prevLength;\n+    final double absoluteAccuracy = getAbsoluteAccuracy();\n+    do {\n+        if (fa * fm < 0.0) {\n+            b = m;\n+            fb = fm;\n+        } else {\n+            a = m;\n+            fa = fm;\n+        }\n+\n+        // update m\n+        prevLength = currentLength;\n+        currentLength = b - a;\n+        if (currentLength < 0.0) {\n+            double tmp = a;\n+            a = b;\n+            b = tmp;\n+            currentLength = -currentLength;\n+        }\n+\n+        if (currentLength < absoluteAccuracy || (fa == 0.0)) {\n+            // convergence is achieved\n+            return new double[]{a, b};\n+        }\n+\n+        numIterations++;\n+        double delta = 0.5 * (fb - fa) / (b - a);\n+        if (delta == 0.0) {\n+            // if bisection occurred because of identical f(a) and f(b)\n+            // fallback to a default widening algorithm to jump out\n+            // of the current interval\n+            delta = currentLength / 10.0;\n+        }\n+        m = m - delta;\n+        fm = function.value(m);\n+    } while (numIterations < maximumIterations);\n+\n+    throw new ConvergenceException(\n+            \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper \" +\n+                    \"bound={4}, final a value={5}, final b value={6}, f(a)={7}, f(b)={8}\",\n+            numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}