{
    "patch": "long newPositionMillis =\n                bucket.computeMillis(false, text);\n            if (bucket.getOffsetInteger() != null &&\n                    text.length() > bucket.getCharPosition()) {\n                char c = text.charAt(bucket.getCharPosition());\n                if (c == '+' || c == '-') {\n                    newPositionMillis +=\n                        bucket.getOffsetInteger().intValue() * 60000L;\n                }\n            }\n            instantLocal = newPositionMillis - chrono.getZone().getOffsetFromLocal(newPositionMillis);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..cf01a590 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,17 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+long newPositionMillis =\n+                bucket.computeMillis(false, text);\n+            if (bucket.getOffsetInteger() != null &&\n+                    text.length() > bucket.getCharPosition()) {\n+                char c = text.charAt(bucket.getCharPosition());\n+                if (c == '+' || c == '-') {\n+                    newPositionMillis +=\n+                        bucket.getOffsetInteger().intValue() * 60000L;\n+                }\n+            }\n+            instantLocal = newPositionMillis - chrono.getZone().getOffsetFromLocal(newPositionMillis);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}