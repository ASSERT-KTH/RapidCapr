{
    "patch": "    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n        int index = indexOf(typeVariable, containingClass.getTypeParameters());\n        if (index < 0 || index >= actualTypeArguments.length) {\n            throw new RuntimeException(\"Invalid type parameter index: \" + index);\n        }\n        return actualTypeArguments[index];\n    }\n\n    private int indexOf(Object object, Object[] array) {\n        for (int i = 0; i < array.length; i++) {\n            if (object.equals(array[i])) {\n                return i;\n            }\n        }\n        return -1;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..187acad56 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,22 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+        int index = indexOf(typeVariable, containingClass.getTypeParameters());\n+        if (index < 0 || index >= actualTypeArguments.length) {\n+            throw new RuntimeException(\"Invalid type parameter index: \" + index);\n+        }\n+        return actualTypeArguments[index];\n+    }\n+\n+    private int indexOf(Object object, Object[] array) {\n+        for (int i = 0; i < array.length; i++) {\n+            if (object.equals(array[i])) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}