{
    "patch": "if ((c >= 0x20 && c <= 0x7e) ||\n    c == 0x0a || c == 0x0d || c == 0x09 ||\n    c == '\\\\' || c == '\\\"' || c == '\\'' || c == '>') {\n  sb.append(c);\n} else if (outputCharsetEncoder != null) {\n  // Check if the character can be represented in this character set\n  if (outputCharsetEncoder.canEncode(c)) {\n    sb.append(c);\n  } else {\n    // Unicode-escape the character\n    appendHexJavaScriptRepresentation(sb, c);\n  }\n} else {\n  // No charsetEncoder provided - pass straight latin characters through,\n  // and escape the rest. Doing the explicit character check is measurably\n  // faster than using the CharsetEncoder.\n  if ((c >= 0x20 && c <= 0x7e) ||\n      c == 0x0a || c == 0x0d || c == 0x09 ||\n      c == '\\\\' || c == '\\\"' || c == '\\'' || c == '>') {\n    sb.append(c);\n  } else {\n    // Other characters can be misinterpreted by some JS parsers,\n    // or perhaps mangled by proxies along the way, so we play it safe\n    // and Unicode-escape them.\n    appendHexJavaScriptRepresentation(sb, c);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..7680d332 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,33 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+if ((c >= 0x20 && c <= 0x7e) ||\n+    c == 0x0a || c == 0x0d || c == 0x09 ||\n+    c == '\\\\' || c == '\\\"' || c == '\\'' || c == '>') {\n+  sb.append(c);\n+} else if (outputCharsetEncoder != null) {\n+  // Check if the character can be represented in this character set\n+  if (outputCharsetEncoder.canEncode(c)) {\n+    sb.append(c);\n+  } else {\n+    // Unicode-escape the character\n+    appendHexJavaScriptRepresentation(sb, c);\n+  }\n+} else {\n+  // No charsetEncoder provided - pass straight latin characters through,\n+  // and escape the rest. Doing the explicit character check is measurably\n+  // faster than using the CharsetEncoder.\n+  if ((c >= 0x20 && c <= 0x7e) ||\n+      c == 0x0a || c == 0x0d || c == 0x09 ||\n+      c == '\\\\' || c == '\\\"' || c == '\\'' || c == '>') {\n+    sb.append(c);\n+  } else {\n+    // Other characters can be misinterpreted by some JS parsers,\n+    // or perhaps mangled by proxies along the way, so we play it safe\n+    // and Unicode-escape them.\n+    appendHexJavaScriptRepresentation(sb, c);\n+  }\n+}\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}