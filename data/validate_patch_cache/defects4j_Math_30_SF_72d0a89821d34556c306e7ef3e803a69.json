{
    "patch": "private double calculateAsymptoticPValue(final double Umin,\n                                             final int n1,\n                                             final int n2)\n        throws ConvergenceException, MaxCountExceededException {\n\n        final int n = n1 + n2;\n        final double averageRank = n * (n + 1) / 4.0;\n\n        final double u1 = Umin - n1 * (n1 + 1) / 2.0;\n        final double u2 = Umin - n2 * (n2 + 1) / 2.0;\n\n        final double varU = n1 * n2 * (n + 1) / 12.0;\n\n        final double z = (Math.min(u1, u2) - averageRank) / Math.sqrt(varU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..6024b0f8f 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,18 +165,20 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n+private double calculateAsymptoticPValue(final double Umin,\n                                              final int n1,\n                                              final int n2)\n         throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+        final int n = n1 + n2;\n+        final double averageRank = n * (n + 1) / 4.0;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n+        final double u1 = Umin - n1 * (n1 + 1) / 2.0;\n+        final double u2 = Umin - n2 * (n2 + 1) / 2.0;\n \n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+        final double varU = n1 * n2 * (n + 1) / 12.0;\n+\n+        final double z = (Math.min(u1, u2) - averageRank) / Math.sqrt(varU);\n \n         final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}