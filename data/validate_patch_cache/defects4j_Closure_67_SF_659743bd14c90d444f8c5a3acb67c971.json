{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n    if (assign == null || !assign.hasChildren()) {\n        return false;\n    }\n\n    Node lhs = assign.getFirstChild();\n    if (lhs == null || !lhs.hasChildren()) {\n        return false;\n    }\n\n    Node object = lhs.getFirstChild();\n    if (object == null || !object.matchesQualifiedName(\"Object.prototype\")) {\n        return false;\n    }\n\n    Node property = object.getNext();\n    if (property == null || !property.isString() || !PROP_PROTOTYPE.equals(property.getString())) {\n        return false;\n    }\n\n    // Exclude assignments inside goog.inherits calls\n    Node statement = NodeUtil.getEnclosingStatement(assign);\n    if (NodeUtil.isClassDefiningFunction(statement.getParent()) &&\n            NodeUtil.getEnclosingStatement(statement.getParent()).hasChildren()) {\n        Node parentStatement = NodeUtil.getEnclosingStatement(statement.getParent());\n        if (parentStatement.getFirstChild().isCall() &&\n                \"goog.inherits\".equals(NodeUtil.getBestLhsString(parentStatement.getFirstChild().getFirstFirstChild()))) {\n            // The prototype assignment is inside a goog.inherits call, so it should be excluded\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..6ed82727 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,29 +310,40 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+    if (assign == null || !assign.hasChildren()) {\n+        return false;\n+    }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n+    Node lhs = assign.getFirstChild();\n+    if (lhs == null || !lhs.hasChildren()) {\n+        return false;\n+    }\n \n-      return false;\n+    Node object = lhs.getFirstChild();\n+    if (object == null || !object.matchesQualifiedName(\"Object.prototype\")) {\n+        return false;\n     }\n \n+    Node property = object.getNext();\n+    if (property == null || !property.isString() || !PROP_PROTOTYPE.equals(property.getString())) {\n+        return false;\n+    }\n+\n+    // Exclude assignments inside goog.inherits calls\n+    Node statement = NodeUtil.getEnclosingStatement(assign);\n+    if (NodeUtil.isClassDefiningFunction(statement.getParent()) &&\n+            NodeUtil.getEnclosingStatement(statement.getParent()).hasChildren()) {\n+        Node parentStatement = NodeUtil.getEnclosingStatement(statement.getParent());\n+        if (parentStatement.getFirstChild().isCall() &&\n+                \"goog.inherits\".equals(NodeUtil.getBestLhsString(parentStatement.getFirstChild().getFirstFirstChild()))) {\n+            // The prototype assignment is inside a goog.inherits call, so it should be excluded\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     /**\n      * Processes a NAME node to see if it's a global function declaration.\n      * If it is, record it and return true. Otherwise, return false.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}