{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraph;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\n\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.LinkedHashSet;\nimport java.util.List;\nimport java.util.Queue;\nimport java.util.Set;\n\nclass ExceptionManager {\n  \n  private final Deque<ExceptionHandler> exceptionHandlersQueue = new ArrayDeque<>();\n\n  private List<ExceptionHandler> allExceptionHandlers;\n\n  private final DiGraph<Node, Branch> cfg;\n\n  ExceptionManager(DiGraph<Node, Branch> cfg) {\n    this.cfg = cfg;\n    this.allExceptionHandlers = getAllExceptionHandlers();\n  }\n\n  private List<ExceptionHandler> getAllExceptionHandlers() {\n    \n    List<Node> allNodes = cfg.getNodes();\n    \n    Set<Node> visitedNodes = new LinkedHashSet<>();\n    Set<ExceptionHandler> exceptionHandlers = new LinkedHashSet<>();\n\n    Queue<Node> workQueue = new ArrayDeque<>(cfg.getEntryNodes());\n    \n    while (!workQueue.isEmpty()) {\n      Node curNode = workQueue.poll();\n\n      if (visitedNodes.contains(curNode)) {\n        continue;\n      }\n\n      visitedNodes.add(curNode);\n\n      if (curNode.getType() == Token.TRY) {\n        exceptionHandlers.add(new ExceptionHandler(curNode));\n      }\n\n      List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(curNode);\n      for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n        Node targetNode = outEdge.getDestination();\n\n        // If we don't care about exceptions and we're just moving to the next node,\n        // do nothing special.\n        if (outEdge.getValue() == Branch.ON_EX) {\n          // This check is only needed because there might not always be an \"unknown\"\n          // (empty) path for some statement to travel down before reaching a CFG edge\n          // with an exception handler on it.\n          if (!exceptionHandlersQueue.isEmpty()) {\n            ExceptionHandler exHandler = exceptionHandlersQueue.peekLast();\n            if (exHandler != null) {\n              exHandler.addExceptionHandler(targetNode);\n            }\n          }\n        }\n\n        workQueue.offer(targetNode);\n      }\n\n    }\n\n    return ImmutableList.copyOf(exceptionHandlers);\n  }\n\n  private DiGraph<Node, Branch> getCfg() {\n    return cfg;\n  }\n\n  boolean hasExceptionHandler(Node cfgNode) {\n    // First get all the outgoing edges of the CFG node\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    \n    // Next check if any of the outgoing edges corresponds to an exception handler\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  List<ExceptionHandler> getExceptionHandlersForCfgNode(Node cfgNode) {\n    ImmutableList.Builder<ExceptionHandler> builder = ImmutableList.builder();\n    for (ExceptionHandler handler : allExceptionHandlers) {\n      if (handler.covers(cfgNode, getCfg(), exceptionHandlersQueue)) {\n        builder.add(handler);\n      }\n    }\n    return builder.build();\n  }\n\n  void addToExceptionQueue(ExceptionHandler handler) {\n    exceptionHandlersQueue.offerLast(handler);\n  }\n\n  void removeFromExceptionQueue() {\n    exceptionHandlersQueue.pollLast();\n  }\n}\n\nclass ExceptionHandler {\n  private static final String FINALLY_BLOCK_NODE_NAME = \" finally block\";\n  private static final String CATCH_BLOCK_NODE_NAME = \" catch block\";\n  \n  private final Node tryBlock;\n  private Node catchBlock;\n  private Node finallyBlock;\n  \n  private int catchAssignments = 0;\n  private boolean beforeTryCatch = false;\n  private final Set<Node> caughtExceptionNodes = new LinkedHashSet<>();\n  \n  ExceptionHandler(Node tryBlock) {\n    this.tryBlock = tryBlock;\n  }\n  \n  void addExceptionHandler(Node exceptionHandlerBlock) {\n    if (exceptionHandlerBlock.getType() == Token.CATCH) {\n      catchBlock = exceptionHandlerBlock;\n    } else if (exceptionHandlerBlock.getType() == Token.FINALLY) {\n      finallyBlock = exceptionHandlerBlock;\n    }\n  }\n  \n  void addAssignmentVariable(Node assign) {\n    if (catchBlock != null && assign.getFirstChild().getString().startsWith(catchBlock.getFirstChild().getString())) {\n      catchAssignments++;\n    }\n  }\n  \n  void addCaughtException(Node exceptionNode) {\n    caughtExceptionNodes.add(exceptionNode);\n  }\n  \n  boolean covers(Node cfgNode, DiGraph<Node, Branch> cfg, Deque<ExceptionHandler> exceptionHandlersQueue) {\n    if (finallyBlock != null &&\n        cfg.hasEdge(\n            cfgNode,\n            Branch.FINALLY_BLOCK,\n            finallyBlock)) {\n      return true;\n    }\n    \n    boolean coveredByCatch = false;\n    \n    if (catchBlock != null) {\n      Node catchCondition = getFirstCatchCondition(catchBlock);\n      \n      if (cfg.hasEdge(cfgNode, Branch.EXCEPTION, catchCondition)) {\n        catchAssignments = 0;\n        caughtExceptionNodes.clear();\n        exceptionHandlersQueue.push(this);\n        coveredByCatch = true;\n      } else if (catchAssignments > 0 &&\n                 cfg.hasEdge(cfgNode, Branch.NORMAL, catchBlock)) {\n        coveredByCatch = true;\n      }\n    }\n    \n    if (coveredByCatch) {\n      if (beforeTryCatch) {\n        return true;\n      } else {\n        return isCaughtExceptionPath(caughtExceptionNodes, cfgNode, cfg, exceptionHandlersQueue);\n      }\n    }\n    \n    boolean coveredByFinally = false;\n    if (finallyBlock != null) {\n      coveredByFinally = isFinallyPath(cfgNode, cfg, finallyBlock);\n      if (coveredByFinally) {\n        exceptionHandlersQueue.push(this);\n      }\n    }\n    \n    return coveredByFinally || beforeTryCatch;\n  }\n  \n  private boolean isFinallyPath(Node cfgNode, DiGraph<Node, Branch> cfg, Node finallyBlock) {\n    return cfg.hasEdge(cfgNode, Branch.FINALLY_BLOCK, finallyBlock);\n  }\n  \n  private boolean isCaughtExceptionPath(Set<Node> caughtExceptionNodes, Node cfgNode, DiGraph<Node, Branch> cfg, Deque<ExceptionHandler> exceptionHandlersQueue) {\n    boolean exceptionCaught = false;\n    ExceptionHandler handlerToCheck = exceptionHandlersQueue.peekLast();\n    if (handlerToCheck != null) {\n      for (Node exceptionNode : caughtExceptionNodes) {\n        if (cfg.hasEdge(exceptionNode, Branch.NORMAL, cfgNode) ||\n            cfg.hasEdge(exceptionNode, Branch.EXCEPTION, cfgNode)) {\n          exceptionCaught = true;\n          handlerToCheck.addCaughtException(exceptionNode);\n        }\n      }\n      \n      if (handlerToCheck == this && !exceptionCaught) {\n        beforeTryCatch = true;\n      }\n    } else {\n      beforeTryCatch = true;\n      for (Node exceptionNode : caughtExceptionNodes) {\n        if (cfg.hasEdge(exceptionNode, Branch.NORMAL, cfgNode) ||\n            cfg.hasEdge(exceptionNode, Branch.EXCEPTION, cfgNode)) {\n          exceptionCaught = true;\n          break;\n        }\n      }\n    }\n    return exceptionCaught;\n  }\n  \n  private Node getFirstCatchCondition(Node catchBlock) {\n    Node catchCondition = catchBlock.getFirstChild();\n    // Catch blocks have either 1 (no-ins) or 2 (w/ins) children.\n    if (catchBlock.getChildCount() == 2) {\n      catchCondition = catchCondition.getNext();\n    }\n    return catchCondition.getFirstChild();\n  }\n  \n  @Override\n  public String toString() {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"try block:\");\n    builder.append(tryBlock.getLineno());\n    \n    if (catchBlock != null) {\n      builder.append(CATCH_BLOCK_NODE_NAME);\n      builder.append(catchBlock.getLineno());\n    }\n    \n    if (finallyBlock != null) {\n      builder.append(FINALLY_BLOCK_NODE_NAME);\n      builder.append(finallyBlock.getLineno());\n    }\n    \n    return builder.toString();\n  }\n}\n\nclass ControlFlowGraph {\n  private final DiGraph<Node, Branch> cfg;\n  private final ExceptionManager exceptionManager;\n  private final Node root;\n  \n  ControlFlowGraph(Node root) {\n    this.cfg = buildCfg(root);\n    this.exceptionManager = new ExceptionManager(this.cfg);\n    this.root = root;\n  }\n\n  private DiGraph<Node, Branch> buildCfg(Node root) {\n    CfgBuilder cfgBuilder = new CfgBuilder();\n    return cfgBuilder.buildControlFlowGraph(root);\n  }\n\n  List<ExceptionHandler> getExceptionHandlersForCfgNode(Node cfgNode) {\n    return this.exceptionManager.getExceptionHandlersForCfgNode(cfgNode);\n  }\n\n  boolean hasExceptionHandler(Node cfgNode) {\n    return exceptionManager.hasExceptionHandler(cfgNode);\n  }\n\n  void addToExceptionHandlerQueue(ExceptionHandler handler) {\n    exceptionManager.addToExceptionQueue(handler);\n  }\n\n  void removeFromExceptionHandlerQueue() {\n    exceptionManager.removeFromExceptionQueue();\n  }\n\n  DiGraph<Node, Branch> getCfg() {\n    return cfg;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f18c24e3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,289 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraph;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.Set;\n+\n+class ExceptionManager {\n+  \n+  private final Deque<ExceptionHandler> exceptionHandlersQueue = new ArrayDeque<>();\n+\n+  private List<ExceptionHandler> allExceptionHandlers;\n+\n+  private final DiGraph<Node, Branch> cfg;\n+\n+  ExceptionManager(DiGraph<Node, Branch> cfg) {\n+    this.cfg = cfg;\n+    this.allExceptionHandlers = getAllExceptionHandlers();\n+  }\n+\n+  private List<ExceptionHandler> getAllExceptionHandlers() {\n+    \n+    List<Node> allNodes = cfg.getNodes();\n+    \n+    Set<Node> visitedNodes = new LinkedHashSet<>();\n+    Set<ExceptionHandler> exceptionHandlers = new LinkedHashSet<>();\n+\n+    Queue<Node> workQueue = new ArrayDeque<>(cfg.getEntryNodes());\n+    \n+    while (!workQueue.isEmpty()) {\n+      Node curNode = workQueue.poll();\n+\n+      if (visitedNodes.contains(curNode)) {\n+        continue;\n+      }\n+\n+      visitedNodes.add(curNode);\n+\n+      if (curNode.getType() == Token.TRY) {\n+        exceptionHandlers.add(new ExceptionHandler(curNode));\n+      }\n+\n+      List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(curNode);\n+      for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+        Node targetNode = outEdge.getDestination();\n+\n+        // If we don't care about exceptions and we're just moving to the next node,\n+        // do nothing special.\n+        if (outEdge.getValue() == Branch.ON_EX) {\n+          // This check is only needed because there might not always be an \"unknown\"\n+          // (empty) path for some statement to travel down before reaching a CFG edge\n+          // with an exception handler on it.\n+          if (!exceptionHandlersQueue.isEmpty()) {\n+            ExceptionHandler exHandler = exceptionHandlersQueue.peekLast();\n+            if (exHandler != null) {\n+              exHandler.addExceptionHandler(targetNode);\n+            }\n+          }\n+        }\n+\n+        workQueue.offer(targetNode);\n+      }\n+\n+    }\n+\n+    return ImmutableList.copyOf(exceptionHandlers);\n+  }\n+\n+  private DiGraph<Node, Branch> getCfg() {\n+    return cfg;\n+  }\n+\n+  boolean hasExceptionHandler(Node cfgNode) {\n+    // First get all the outgoing edges of the CFG node\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    \n+    // Next check if any of the outgoing edges corresponds to an exception handler\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    \n+    return false;\n+  }\n+\n+  List<ExceptionHandler> getExceptionHandlersForCfgNode(Node cfgNode) {\n+    ImmutableList.Builder<ExceptionHandler> builder = ImmutableList.builder();\n+    for (ExceptionHandler handler : allExceptionHandlers) {\n+      if (handler.covers(cfgNode, getCfg(), exceptionHandlersQueue)) {\n+        builder.add(handler);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  void addToExceptionQueue(ExceptionHandler handler) {\n+    exceptionHandlersQueue.offerLast(handler);\n+  }\n+\n+  void removeFromExceptionQueue() {\n+    exceptionHandlersQueue.pollLast();\n+  }\n+}\n+\n+class ExceptionHandler {\n+  private static final String FINALLY_BLOCK_NODE_NAME = \" finally block\";\n+  private static final String CATCH_BLOCK_NODE_NAME = \" catch block\";\n+  \n+  private final Node tryBlock;\n+  private Node catchBlock;\n+  private Node finallyBlock;\n+  \n+  private int catchAssignments = 0;\n+  private boolean beforeTryCatch = false;\n+  private final Set<Node> caughtExceptionNodes = new LinkedHashSet<>();\n+  \n+  ExceptionHandler(Node tryBlock) {\n+    this.tryBlock = tryBlock;\n+  }\n+  \n+  void addExceptionHandler(Node exceptionHandlerBlock) {\n+    if (exceptionHandlerBlock.getType() == Token.CATCH) {\n+      catchBlock = exceptionHandlerBlock;\n+    } else if (exceptionHandlerBlock.getType() == Token.FINALLY) {\n+      finallyBlock = exceptionHandlerBlock;\n+    }\n+  }\n+  \n+  void addAssignmentVariable(Node assign) {\n+    if (catchBlock != null && assign.getFirstChild().getString().startsWith(catchBlock.getFirstChild().getString())) {\n+      catchAssignments++;\n+    }\n+  }\n+  \n+  void addCaughtException(Node exceptionNode) {\n+    caughtExceptionNodes.add(exceptionNode);\n+  }\n+  \n+  boolean covers(Node cfgNode, DiGraph<Node, Branch> cfg, Deque<ExceptionHandler> exceptionHandlersQueue) {\n+    if (finallyBlock != null &&\n+        cfg.hasEdge(\n+            cfgNode,\n+            Branch.FINALLY_BLOCK,\n+            finallyBlock)) {\n+      return true;\n+    }\n+    \n+    boolean coveredByCatch = false;\n+    \n+    if (catchBlock != null) {\n+      Node catchCondition = getFirstCatchCondition(catchBlock);\n+      \n+      if (cfg.hasEdge(cfgNode, Branch.EXCEPTION, catchCondition)) {\n+        catchAssignments = 0;\n+        caughtExceptionNodes.clear();\n+        exceptionHandlersQueue.push(this);\n+        coveredByCatch = true;\n+      } else if (catchAssignments > 0 &&\n+                 cfg.hasEdge(cfgNode, Branch.NORMAL, catchBlock)) {\n+        coveredByCatch = true;\n+      }\n+    }\n+    \n+    if (coveredByCatch) {\n+      if (beforeTryCatch) {\n+        return true;\n+      } else {\n+        return isCaughtExceptionPath(caughtExceptionNodes, cfgNode, cfg, exceptionHandlersQueue);\n+      }\n+    }\n+    \n+    boolean coveredByFinally = false;\n+    if (finallyBlock != null) {\n+      coveredByFinally = isFinallyPath(cfgNode, cfg, finallyBlock);\n+      if (coveredByFinally) {\n+        exceptionHandlersQueue.push(this);\n+      }\n+    }\n+    \n+    return coveredByFinally || beforeTryCatch;\n+  }\n+  \n+  private boolean isFinallyPath(Node cfgNode, DiGraph<Node, Branch> cfg, Node finallyBlock) {\n+    return cfg.hasEdge(cfgNode, Branch.FINALLY_BLOCK, finallyBlock);\n+  }\n+  \n+  private boolean isCaughtExceptionPath(Set<Node> caughtExceptionNodes, Node cfgNode, DiGraph<Node, Branch> cfg, Deque<ExceptionHandler> exceptionHandlersQueue) {\n+    boolean exceptionCaught = false;\n+    ExceptionHandler handlerToCheck = exceptionHandlersQueue.peekLast();\n+    if (handlerToCheck != null) {\n+      for (Node exceptionNode : caughtExceptionNodes) {\n+        if (cfg.hasEdge(exceptionNode, Branch.NORMAL, cfgNode) ||\n+            cfg.hasEdge(exceptionNode, Branch.EXCEPTION, cfgNode)) {\n+          exceptionCaught = true;\n+          handlerToCheck.addCaughtException(exceptionNode);\n+        }\n+      }\n+      \n+      if (handlerToCheck == this && !exceptionCaught) {\n+        beforeTryCatch = true;\n+      }\n+    } else {\n+      beforeTryCatch = true;\n+      for (Node exceptionNode : caughtExceptionNodes) {\n+        if (cfg.hasEdge(exceptionNode, Branch.NORMAL, cfgNode) ||\n+            cfg.hasEdge(exceptionNode, Branch.EXCEPTION, cfgNode)) {\n+          exceptionCaught = true;\n+          break;\n+        }\n+      }\n+    }\n+    return exceptionCaught;\n+  }\n+  \n+  private Node getFirstCatchCondition(Node catchBlock) {\n+    Node catchCondition = catchBlock.getFirstChild();\n+    // Catch blocks have either 1 (no-ins) or 2 (w/ins) children.\n+    if (catchBlock.getChildCount() == 2) {\n+      catchCondition = catchCondition.getNext();\n+    }\n+    return catchCondition.getFirstChild();\n+  }\n+  \n+  @Override\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"try block:\");\n+    builder.append(tryBlock.getLineno());\n+    \n+    if (catchBlock != null) {\n+      builder.append(CATCH_BLOCK_NODE_NAME);\n+      builder.append(catchBlock.getLineno());\n+    }\n+    \n+    if (finallyBlock != null) {\n+      builder.append(FINALLY_BLOCK_NODE_NAME);\n+      builder.append(finallyBlock.getLineno());\n+    }\n+    \n+    return builder.toString();\n+  }\n+}\n+\n+class ControlFlowGraph {\n+  private final DiGraph<Node, Branch> cfg;\n+  private final ExceptionManager exceptionManager;\n+  private final Node root;\n+  \n+  ControlFlowGraph(Node root) {\n+    this.cfg = buildCfg(root);\n+    this.exceptionManager = new ExceptionManager(this.cfg);\n+    this.root = root;\n+  }\n+\n+  private DiGraph<Node, Branch> buildCfg(Node root) {\n+    CfgBuilder cfgBuilder = new CfgBuilder();\n+    return cfgBuilder.buildControlFlowGraph(root);\n+  }\n+\n+  List<ExceptionHandler> getExceptionHandlersForCfgNode(Node cfgNode) {\n+    return this.exceptionManager.getExceptionHandlersForCfgNode(cfgNode);\n+  }\n+\n+  boolean hasExceptionHandler(Node cfgNode) {\n+    return exceptionManager.hasExceptionHandler(cfgNode);\n+  }\n+\n+  void addToExceptionHandlerQueue(ExceptionHandler handler) {\n+    exceptionManager.addToExceptionQueue(handler);\n+  }\n+\n+  void removeFromExceptionHandlerQueue() {\n+    exceptionManager.removeFromExceptionQueue();\n+  }\n+\n+  DiGraph<Node, Branch> getCfg() {\n+    return cfg;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}