{
    "patch": "        List items = this.data.subList(start, end + 1);\n        List itemsCopy = new ArrayList(items.size());\n        for (Iterator iterator = items.iterator(); iterator.hasNext();) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) iterator.next();\n            try {\n                itemsCopy.add(item.clone());\n            }\n            catch (CloneNotSupportedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n        copy.data = itemsCopy;",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..13ad624 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,18 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        List items = this.data.subList(start, end + 1);\n+        List itemsCopy = new ArrayList(items.size());\n+        for (Iterator iterator = items.iterator(); iterator.hasNext();) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) iterator.next();\n+            try {\n+                itemsCopy.add(item.clone());\n+            }\n+            catch (CloneNotSupportedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        copy.data = itemsCopy;\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}