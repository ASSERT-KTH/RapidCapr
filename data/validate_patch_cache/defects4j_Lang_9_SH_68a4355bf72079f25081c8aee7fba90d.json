{
    "patch": "public static long minTimeBetween(Date d1, Date d2) {\n    if (d1 == null || d2 == null) {\n        throw new NullPointerException(\"Dates must not be null\");\n    }\n    if (d1.after(d2)) {\n        return d1.getTime() - d2.getTime();\n    } else {\n        return d2.getTime() - d1.getTime();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..bd24c40e 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,16 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+public static long minTimeBetween(Date d1, Date d2) {\n+    if (d1 == null || d2 == null) {\n+        throw new NullPointerException(\"Dates must not be null\");\n+    }\n+    if (d1.after(d2)) {\n+        return d1.getTime() - d2.getTime();\n+    } else {\n+        return d2.getTime() - d1.getTime();\n+    }\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}