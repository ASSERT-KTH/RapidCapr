{
    "patch": "      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && jsDoc.getType().hasThisType()) {\n        Node parent = n.getParent();\n        if (parent == null ||     // Don't bother with `new foo()`, `foo()` or the top level.\n            NodeUtil.isObjectLitKey(parent, n) ||  // Don't bother with object literal keys.\n            parent.isTaggedTemplateLit()) {  // Don't bother with a tagged template literal.\n          report(t, n, FUNCTION_CALL_NON_FUNC_HOST, (jsDoc.getType().hasTypeDecl() ? \"\" : \"missing @this \"));\n        } else if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n          report(t, n, FUNCTION_CALL_THIS_NON_GET);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..ba247fb3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && jsDoc.getType().hasThisType()) {\n+        Node parent = n.getParent();\n+        if (parent == null ||     // Don't bother with `new foo()`, `foo()` or the top level.\n+            NodeUtil.isObjectLitKey(parent, n) ||  // Don't bother with object literal keys.\n+            parent.isTaggedTemplateLit()) {  // Don't bother with a tagged template literal.\n+          report(t, n, FUNCTION_CALL_NON_FUNC_HOST, (jsDoc.getType().hasTypeDecl() ? \"\" : \"missing @this \"));\n+        } else if (!NodeUtil.isGet(parent) && !NodeUtil.isGetElem(parent)) {\n+          report(t, n, FUNCTION_CALL_THIS_NON_GET);\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}