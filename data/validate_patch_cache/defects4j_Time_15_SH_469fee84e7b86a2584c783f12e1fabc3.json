{
    "patch": "```\n        if(val2 == -1){\n            if(val1 == Long.MIN_VALUE){\n                throw new ArithmeticException(\"Multiplication overflows a long: \"+val1+\" * \"+val2);\n            }\n            return -val1;\n        }\n        if(val2 == 0){\n            return 0L;\n        }\n        if(val2 == 1){\n            return val1;\n        }\n        long total = (long) val1 * val2;\n        if(total != (int)total){\n            throw new ArithmeticException(\"Multiplication overflows a long: \"+val1+\" * \"+val2);\n        }\n        return total;\n```\nThis fix checks for overflow by casting the multiplication result to an int. If the multiplication result is greater than the max int value, then it will throw an ArithmeticException.",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..ee7d1520 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,26 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+```\n+        if(val2 == -1){\n+            if(val1 == Long.MIN_VALUE){\n+                throw new ArithmeticException(\"Multiplication overflows a long: \"+val1+\" * \"+val2);\n+            }\n+            return -val1;\n+        }\n+        if(val2 == 0){\n+            return 0L;\n+        }\n+        if(val2 == 1){\n+            return val1;\n+        }\n+        long total = (long) val1 * val2;\n+        if(total != (int)total){\n+            throw new ArithmeticException(\"Multiplication overflows a long: \"+val1+\" * \"+val2);\n+        }\n+        return total;\n+```\n+This fix checks for overflow by casting the multiplication result to an int. If the multiplication result is greater than the max int value, then it will throw an ArithmeticException.\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}