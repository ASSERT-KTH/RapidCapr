{
    "patch": "if (!MathUtils.equals(entry, 0, epsilon) && MathUtils.compareTo(rhs/entry, 0, epsilon) >= 0 && (minRatioPos == null || MathUtils.compareTo(rhs/entry, tableau.getEntry(minRatioPos, tableau.getWidth()-1)/tableau.getEntry(minRatioPos, col), epsilon) < 0)) {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b40..374314074 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -79,7 +79,7 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n             final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n             final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n+if (!MathUtils.equals(entry, 0, epsilon) && MathUtils.compareTo(rhs/entry, 0, epsilon) >= 0 && (minRatioPos == null || MathUtils.compareTo(rhs/entry, tableau.getEntry(minRatioPos, tableau.getWidth()-1)/tableau.getEntry(minRatioPos, col), epsilon) < 0)) {\n                 final double ratio = rhs / entry;\n                 if (ratio < minRatio) {\n                     minRatio = ratio;",
    "result_reason": "org.apache.commons.math.optimization.OptimizationException: org.apache.commons.math.MaxIterationsExceededException: Maximal number of iterations (100) exceeded",
    "test_result": "FAIL"
}