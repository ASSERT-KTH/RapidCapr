{
    "patch": "    protected final double doSolve() {\n        // Get initial solution\n        double x0 = getMin();\n        double x1 = getMax();\n        double f0 = computeObjectiveValue(x0);\n        double f1 = computeObjectiveValue(x1);\n\n        // If one of the bounds is the exact root, return it. Since these are\n        // not under-approximations or over-approximations, we can return them\n        // regardless of the allowed solutions.\n        if (f0 == 0.0) {\n            return x0;\n        }\n        if (f1 == 0.0) {\n            return x1;\n        }\n\n        // Verify bracketing of initial solution.\n        verifyBracketing(x0, x1);\n\n        // Get accuracies.\n        final double ftol = getFunctionValueAccuracy();\n        final double atol = getAbsoluteAccuracy();\n        final double rtol = getRelativeAccuracy();\n\n        // Keep track of inverted intervals, meaning that the left bound is\n        // larger than the right bound.\n        boolean inverted = false;\n\n        // Keep finding better approximations.\n        while (true) {\n            // Use Brent's method to calculate the next approximation.\n            final double oldX = inverted ? x0 : x1;\n            final double oldF = inverted ? f0 : f1;\n            final double x, f;\n            if (f0 * f1 < 0.0) {\n                // Use Brent's method with inverse quadratic interpolation.\n                x = (f0 * x1 * x1 - f1 * x0 * x0) / (f0 * x1 - f1 * x0);\n                final double tolerance = 2.0 * rtol * FastMath.abs(x) + atol;\n                f = computeObjectiveValue(x);\n                if (FastMath.abs(f - oldF) <= ftol && FastMath.abs(x - oldX) <= tolerance) {\n                    return x;\n                }\n                if ((x - x0) * (x - x1) < 0.0) {\n                    if (f * f0 < 0.0) {\n                        x1 = x;\n                        f1 = f;\n                    } else if (f * f1 < 0.0) {\n                        x0 = x;\n                        f0 = f;\n                    } else {\n                        return x;\n                    }\n                } else {\n                    f0 *= 0.25;\n                    f1 *= 0.25;\n                }\n            } else {\n                // Use Brent's method with bisection.\n                x = 0.5 * (x0 + x1);\n                f = computeObjectiveValue(x);\n                if (FastMath.abs(f - oldF) <= ftol && FastMath.abs(x - oldX) <= FastMath.min(rtol * FastMath.abs(x), atol)) {\n                    return x;\n                }\n                if (f * f1 < 0.0) {\n                    x0 = x;\n                    f0 = f;\n                    inverted = !inverted;\n                } else {\n                    x1 = x;\n                    f1 = f;\n                }\n            }\n\n            // Update from [x0, x1] to [x0, x].\n            if (FastMath.abs(f0) < FastMath.abs(f1)) {\n                double temp = x0;\n                x0 = x1;\n                x1 = temp;\n                temp = f0;\n                f0 = f1;\n                f1 = temp;\n                inverted = !inverted;\n            }\n            if (f0 == f1) {\n                return x;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..a3c10644f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -156,92 +156,61 @@ public abstract class BaseSecantSolver\n \n         // Keep finding better approximations.\n         while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n-\n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            // Use Brent's method to calculate the next approximation.\n+            final double oldX = inverted ? x0 : x1;\n+            final double oldF = inverted ? f0 : f1;\n+            final double x, f;\n+            if (f0 * f1 < 0.0) {\n+                // Use Brent's method with inverse quadratic interpolation.\n+                x = (f0 * x1 * x1 - f1 * x0 * x0) / (f0 * x1 - f1 * x0);\n+                final double tolerance = 2.0 * rtol * FastMath.abs(x) + atol;\n+                f = computeObjectiveValue(x);\n+                if (FastMath.abs(f - oldF) <= ftol && FastMath.abs(x - oldX) <= tolerance) {\n+                    return x;\n+                }\n+                if ((x - x0) * (x - x1) < 0.0) {\n+                    if (f * f0 < 0.0) {\n+                        x1 = x;\n+                        f1 = f;\n+                    } else if (f * f1 < 0.0) {\n+                        x0 = x;\n+                        f0 = f;\n+                    } else {\n+                        return x;\n+                    }\n+                } else {\n+                    f0 *= 0.25;\n+                    f1 *= 0.25;\n+                }\n+            } else {\n+                // Use Brent's method with bisection.\n+                x = 0.5 * (x0 + x1);\n+                f = computeObjectiveValue(x);\n+                if (FastMath.abs(f - oldF) <= ftol && FastMath.abs(x - oldX) <= FastMath.min(rtol * FastMath.abs(x), atol)) {\n+                    return x;\n+                }\n+                if (f * f1 < 0.0) {\n+                    x0 = x;\n+                    f0 = f;\n+                    inverted = !inverted;\n+                } else {\n+                    x1 = x;\n+                    f1 = f;\n+                }\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n+            // Update from [x0, x1] to [x0, x].\n+            if (FastMath.abs(f0) < FastMath.abs(f1)) {\n+                double temp = x0;\n                 x0 = x1;\n+                x1 = temp;\n+                temp = f0;\n                 f0 = f1;\n+                f1 = temp;\n                 inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n-\n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n+            if (f0 == f1) {\n+                return x;\n             }\n         }\n     }",
    "result_reason": "org.apache.commons.math.exception.TooManyEvaluationsException: illegal state: maximal count (100) exceeded: evaluations",
    "test_result": "FAIL"
}