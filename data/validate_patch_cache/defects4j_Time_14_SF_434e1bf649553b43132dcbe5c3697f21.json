{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n            // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            int day = 0;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n                    int month = values[i] + valueToAdd;\n                    int year = values[DateTimeFieldType.year().getIndexedField()];\n                    if (month > 12) {\n                        year += month / 12;\n                        month = month % 12;\n                    } else if (month < 1) {\n                        int rem = month % 12;\n                        year += (month / 12) - (rem == 0 ? 1 : 0);\n                        month = rem + 12;\n                    }\n                    int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n                            iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n                    day = Math.min(dayLimit, values[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n                    instant = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..4bc57a74 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -209,7 +209,24 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n             // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            int day = 0;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (i == DateTimeFieldType.monthOfYear().getIndexedField()) {\n+                    int month = values[i] + valueToAdd;\n+                    int year = values[DateTimeFieldType.year().getIndexedField()];\n+                    if (month > 12) {\n+                        year += month / 12;\n+                        month = month % 12;\n+                    } else if (month < 1) {\n+                        int rem = month % 12;\n+                        year += (month / 12) - (rem == 0 ? 1 : 0);\n+                        month = rem + 12;\n+                    }\n+                    int dayLimit = iChronology.dayOfMonth().getMaximumValue(\n+                            iChronology.yearMonth().set(iChronology.monthOfYear().set(0, year), month));\n+                    day = Math.min(dayLimit, values[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n+                    instant = iChronology.yearMonthDay().set(0, year, month, day).getMillis();\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}