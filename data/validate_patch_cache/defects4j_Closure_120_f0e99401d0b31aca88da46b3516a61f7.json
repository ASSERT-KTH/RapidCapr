{
    "patch": "  boolean isInCatchBlock = false;\n  BasicBlock block = ref.getBasicBlock();\n  while (block != null && block != block.getParent().getExceptionBlock()) {\n    block = block.getParent();\n  }\n  isInCatchBlock = block != null;\n  return isInCatchBlock;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7019c7ae 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  boolean isInCatchBlock = false;\n+  BasicBlock block = ref.getBasicBlock();\n+  while (block != null && block != block.getParent().getExceptionBlock()) {\n+    block = block.getParent();\n+  }\n+  isInCatchBlock = block != null;\n+  return isInCatchBlock;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}