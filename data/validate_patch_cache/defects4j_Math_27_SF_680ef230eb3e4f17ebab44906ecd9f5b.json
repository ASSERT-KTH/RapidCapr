{
    "patch": "public Dfp multiply(final int x) {\n    if (x == 0) {\n        return newInstance(getZero());\n    } else {\n        final Dfp prod = newInstance(this);\n        boolean carry = false;\n        int xi = x;\n        if (xi < 0) {\n            xi = -xi;\n            prod.sign = -prod.sign;\n        }\n        for (int i = 0; i < NUM_WORDS; i++) {\n            final int q = xi * mant[i] + (carry ? 1 : 0);\n            carry = (q > BASE_MASK);\n            prod.mant[i] = q & BASE_MASK;\n        }\n        if (carry) {\n            prod.shiftLeft();\n        }\n        prod.exp = exp;\n        prod.normalize();\n        return prod;\n    }\n}\n\npublic double percentageValue() {\n    return multiply(100).toDouble();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..449e26c5e 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,9 +593,34 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n-    public double percentageValue() {\n-        return multiply(100).doubleValue();\n+public Dfp multiply(final int x) {\n+    if (x == 0) {\n+        return newInstance(getZero());\n+    } else {\n+        final Dfp prod = newInstance(this);\n+        boolean carry = false;\n+        int xi = x;\n+        if (xi < 0) {\n+            xi = -xi;\n+            prod.sign = -prod.sign;\n+        }\n+        for (int i = 0; i < NUM_WORDS; i++) {\n+            final int q = xi * mant[i] + (carry ? 1 : 0);\n+            carry = (q > BASE_MASK);\n+            prod.mant[i] = q & BASE_MASK;\n+        }\n+        if (carry) {\n+            prod.shiftLeft();\n+        }\n+        prod.exp = exp;\n+        prod.normalize();\n+        return prod;\n     }\n+}\n+\n+public double percentageValue() {\n+    return multiply(100).toDouble();\n+}\n \n     /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}