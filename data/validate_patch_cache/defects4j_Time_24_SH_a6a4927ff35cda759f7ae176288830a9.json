{
    "patch": "            } catch (IllegalFieldValueException e) {\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                }\n                if (resetFields) { // bug fix\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].isSaved()) {\n                            millis = savedFields[i].reset(millis);\n                        }\n                    }\n                }\n                else {\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].isProcessed() && !savedFields[i].isSaved()) {\n                            millis = savedFields[i].skip(millis);\n                        }\n                    }\n                }\n                throw e;\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bcc2b367 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } catch (IllegalFieldValueException e) {\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                }\n+                if (resetFields) { // bug fix\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].isSaved()) {\n+                            millis = savedFields[i].reset(millis);\n+                        }\n+                    }\n+                }\n+                else {\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].isProcessed() && !savedFields[i].isSaved()) {\n+                            millis = savedFields[i].skip(millis);\n+                        }\n+                    }\n+                }\n+                throw e;\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}