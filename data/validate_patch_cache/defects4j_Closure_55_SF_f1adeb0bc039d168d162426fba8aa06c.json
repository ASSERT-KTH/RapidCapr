{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  switch (n.getToken()) {\n    case FUNCTION:\n      return true;\n    case NAME:\n      // A function name is only reduceable if the name node is the child of a variable declaration.\n      // This matches function declarations like 'function foo(){}' but not function expressions like 'var foo = function(){}'.\n      return n.getParent() != null && n.getParent().isVar();\n    case GETPROP:\n    case GETELEM:\n      // Do not blindly assume that unknown properties are not functions. Conservatively assume\n      // that they might be functions.\n      return true;\n    default:\n      return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..bd8f0cbf 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,23 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      return true;\n+    case NAME:\n+      // A function name is only reduceable if the name node is the child of a variable declaration.\n+      // This matches function declarations like 'function foo(){}' but not function expressions like 'var foo = function(){}'.\n+      return n.getParent() != null && n.getParent().isVar();\n+    case GETPROP:\n+    case GETELEM:\n+      // Do not blindly assume that unknown properties are not functions. Conservatively assume\n+      // that they might be functions.\n+      return true;\n+    default:\n+      return false;\n   }\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}