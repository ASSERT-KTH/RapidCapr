{
    "patch": "import com.google.javascript.rhino.ast.Catch;\nimport com.google.javascript.rhino.ast.TryStatement;\n\nprivate boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      Branch branch = edge.getValue();\n      if (branch.isExceptionGuard()\n          || (branch.branchType() == Branch.ON_EX && isCaughtException(edge.getEnd()))) {\n        return true;\n      }\n    }\n    return false;\n}\n\nprivate boolean isCaughtException(Node node) {\n  Node parent = node.getParent();\n  while (parent != null) {\n    if (parent instanceof Catch) {\n      TryStatement tryStmt = (TryStatement) parent.getParent();\n      if (tryStmt.getCatchClauses() != null && tryStmt.getCatchClauses().contains(parent)) {\n        return true;\n      }\n    }\n    parent = parent.getParent();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..636b36b7 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,34 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+import com.google.javascript.rhino.ast.Catch;\n+import com.google.javascript.rhino.ast.TryStatement;\n+\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      Branch branch = edge.getValue();\n+      if (branch.isExceptionGuard()\n+          || (branch.branchType() == Branch.ON_EX && isCaughtException(edge.getEnd()))) {\n+        return true;\n+      }\n+    }\n+    return false;\n+}\n+\n+private boolean isCaughtException(Node node) {\n+  Node parent = node.getParent();\n+  while (parent != null) {\n+    if (parent instanceof Catch) {\n+      TryStatement tryStmt = (TryStatement) parent.getParent();\n+      if (tryStmt.getCatchClauses() != null && tryStmt.getCatchClauses().contains(parent)) {\n+        return true;\n+      }\n+    }\n+    parent = parent.getParent();\n+  }\n+  return false;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}