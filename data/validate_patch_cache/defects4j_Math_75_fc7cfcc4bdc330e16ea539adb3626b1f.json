{
    "patch": "public double getPct(Object v) {\n        if (dataArray.length == 0)\n            return 0.0;\n\n        Comparable<?> objectToCompare = (Comparable<?>) v;\n        int totalLessOrEqual = 0;\n        for (int i = 0; i < dataArray.length; i++) {\n            if (objectToCompare.compareTo(dataArray[i]) >= 0) {\n                totalLessOrEqual++;\n            } else {\n                break;\n            }\n        }\n\n        return (double) totalLessOrEqual / dataArray.length;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..3c43970c5 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,22 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+        if (dataArray.length == 0)\n+            return 0.0;\n+\n+        Comparable<?> objectToCompare = (Comparable<?>) v;\n+        int totalLessOrEqual = 0;\n+        for (int i = 0; i < dataArray.length; i++) {\n+            if (objectToCompare.compareTo(dataArray[i]) >= 0) {\n+                totalLessOrEqual++;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        return (double) totalLessOrEqual / dataArray.length;\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}