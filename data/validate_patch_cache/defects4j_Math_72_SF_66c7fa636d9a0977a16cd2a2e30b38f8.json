{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate the function at the endpoints and the initial point\n    final double yMin = f.value(min);\n    final double yMax = f.value(max);\n    final double yInitial = f.value(initial);\n\n    // If the function value at either endpoint is zero, return that endpoint\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // Check if the initial guess is close enough to a root and return it if so\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Check if the root is bracketed by the endpoints\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x0 = min;\n    double y0 = yMin;\n\n    double x1 = initial;\n    double y1 = yInitial;\n\n    double x2 = max;\n    double y2 = yMax;\n\n    int i = 0;\n    while (true) {\n        // Calculate the parabolic interpolation\n        double denom = (y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0);\n        if (denom == 0) {\n            // Parabolic interpolation failed\n            throw new FunctionEvaluationException(\n                    \"Parabolic interpolation failed for endpoints (\" + x0 + \",\" + y0 + \"), (\" +\n                            x1 + \",\" + y1 + \"), and (\" + x2 + \",\" + y2 + \")\");\n        }\n        double a = ((y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0)) / denom;\n        double b = ((y1 - y0) * (x2 - x0) - (y2 - y0) * (x1 - x0)) / denom;\n        double c = y0 + (x1 - x0) * ((y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0)) / denom;\n\n        // Evaluate the function at the predicted root (c) and the two endpoints\n        double yPred = f.value(c);\n        double yPrev = y1;\n        double xPrev = x1;\n        if (Math.abs(yPred) <= functionValueAccuracy) {\n            // Predicted root is close enough to be the root\n            setResult(c, i);\n            return result;\n        } else if (yPred * y0 < 0) {\n            // The root is between x0 and c\n            x2 = x1;\n            y2 = y1;\n            x1 = c;\n            y1 = yPred;\n        } else if (yPred * y2 < 0) {\n            // The root is between c and x2\n            x0 = x1;\n            y0 = y1;\n            x1 = c;\n            y1 = yPred;\n        } else {\n            // Root is not bracketed by x0, x1, and x2\n            throw MathRuntimeException.createIllegalArgumentException(\n                    NON_BRACKETING_MESSAGE, x0, x2, y0, y2);\n        }\n\n        // Update the iteration count and check if it has reached the maximum\n        i++;\n        if (i >= maximalIterationCount) {\n            throw new MaxIterationsExceededException(maximalIterationCount);\n        }\n\n        // Check if the function value has decreased significantly since the previous iteration\n        if (Math.abs(yPrev - y1) < relativeThreshold * (1 + Math.abs(y1))) {\n            setResult(x1, i);\n            return result;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..d7ff84397 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,102 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    // Evaluate the function at the endpoints and the initial point\n+    final double yMin = f.value(min);\n+    final double yMax = f.value(max);\n+    final double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // If the function value at either endpoint is zero, return that endpoint\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // Check if the initial guess is close enough to a root and return it if so\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // Check if the root is bracketed by the endpoints\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n+\n+    double x0 = min;\n+    double y0 = yMin;\n+\n+    double x1 = initial;\n+    double y1 = yInitial;\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+    double x2 = max;\n+    double y2 = yMax;\n+\n+    int i = 0;\n+    while (true) {\n+        // Calculate the parabolic interpolation\n+        double denom = (y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0);\n+        if (denom == 0) {\n+            // Parabolic interpolation failed\n+            throw new FunctionEvaluationException(\n+                    \"Parabolic interpolation failed for endpoints (\" + x0 + \",\" + y0 + \"), (\" +\n+                            x1 + \",\" + y1 + \"), and (\" + x2 + \",\" + y2 + \")\");\n         }\n+        double a = ((y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0)) / denom;\n+        double b = ((y1 - y0) * (x2 - x0) - (y2 - y0) * (x1 - x0)) / denom;\n+        double c = y0 + (x1 - x0) * ((y2 - y0) * (x1 - x0) - (y1 - y0) * (x2 - x0)) / denom;\n \n-        if (yMin * yMax > 0) {\n+        // Evaluate the function at the predicted root (c) and the two endpoints\n+        double yPred = f.value(c);\n+        double yPrev = y1;\n+        double xPrev = x1;\n+        if (Math.abs(yPred) <= functionValueAccuracy) {\n+            // Predicted root is close enough to be the root\n+            setResult(c, i);\n+            return result;\n+        } else if (yPred * y0 < 0) {\n+            // The root is between x0 and c\n+            x2 = x1;\n+            y2 = y1;\n+            x1 = c;\n+            y1 = yPred;\n+        } else if (yPred * y2 < 0) {\n+            // The root is between c and x2\n+            x0 = x1;\n+            y0 = y1;\n+            x1 = c;\n+            y1 = yPred;\n+        } else {\n+            // Root is not bracketed by x0, x1, and x2\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+                    NON_BRACKETING_MESSAGE, x0, x2, y0, y2);\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        // Update the iteration count and check if it has reached the maximum\n+        i++;\n+        if (i >= maximalIterationCount) {\n+            throw new MaxIterationsExceededException(maximalIterationCount);\n+        }\n \n+        // Check if the function value has decreased significantly since the previous iteration\n+        if (Math.abs(yPrev - y1) < relativeThreshold * (1 + Math.abs(y1))) {\n+            setResult(x1, i);\n+            return result;\n+        }\n     }\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: no suitable constructor found for FunctionEvaluationException(String)",
    "test_result": "ERROR"
}