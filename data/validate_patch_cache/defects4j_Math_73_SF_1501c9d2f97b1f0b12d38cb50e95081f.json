{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n\n    // Evaluate function at endpoints and the initial guess\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    // Check if any of the endpoints or the initial guess is already a root\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    } else if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Make sure endpoints bracket a root and yMin and yMax have opposite signs\n    if (yMin * yMax >= 0) {\n        if (min == max) {\n            throw new IllegalArgumentException(\"The interval [\" + min + \"] does not bracket a root.\");\n        } else {\n            throw new IllegalArgumentException(\"The interval [\" + mi",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..9c1728098 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,50 +95,36 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-\n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    // Evaluate function at endpoints and the initial guess\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n+    // Check if any of the endpoints or the initial guess is already a root\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    } else if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n     }\n \n+    // Make sure endpoints bracket a root and yMin and yMax have opposite signs\n+    if (yMin * yMax >= 0) {\n+        if (min == max) {\n+            throw new IllegalArgumentException(\"The interval [\" + min + \"] does not bracket a root.\");\n+        } else {\n+            throw new IllegalArgumentException(\"The interval [\" + mi\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}