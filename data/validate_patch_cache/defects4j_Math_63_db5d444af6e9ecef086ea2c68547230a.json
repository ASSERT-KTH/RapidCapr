{
    "patch": "public boolean equals(Object other) {\n    if (other instanceof Dfp) {\n        Dfp otherDfp = (Dfp) other;\n        return this.getField().getRadixDigits() == otherDfp.getField().getRadixDigits() &&\n               this.getRadix() == otherDfp.getRadix() &&\n               this.getIEEEFlags() == otherDfp.getIEEEFlags() &&\n               Arrays.equals(this.mant, otherDfp.mant) &&\n               (this.exp == otherDfp.exp || (this.isNaN() && otherDfp.isNaN()));\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..733694e9b 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,9 +413,17 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n-    }\n+public boolean equals(Object other) {\n+    if (other instanceof Dfp) {\n+        Dfp otherDfp = (Dfp) other;\n+        return this.getField().getRadixDigits() == otherDfp.getField().getRadixDigits() &&\n+               this.getRadix() == otherDfp.getRadix() &&\n+               this.getIEEEFlags() == otherDfp.getIEEEFlags() &&\n+               Arrays.equals(this.mant, otherDfp.mant) &&\n+               (this.exp == otherDfp.exp || (this.isNaN() && otherDfp.isNaN()));\n+    }\n+    return false;\n+}\n \n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}