{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (!canBeFolded(n, parent)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n      if (current.isEmpty()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      elem = current;\n      current = current.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n  \n  private boolean canBeFolded(Node n, Node parent) {\n    Node value = parent.getLastChild();\n    switch (parent.getToken()) {\n      case ASSIGN:\n      case ASSIGN_ADD:\n      case ASSIGN_BITAND:\n      case ASSIGN_BITOR:\n      case ASSIGN_BITXOR:\n      case ASSIGN_DIV:\n      case ASSIGN_LSH:\n      case ASSIGN_MOD:\n      case ASSIGN_MUL:\n      case ASSIGN_RSH:\n      case ASSIGN_SUB:\n      case ASSIGN_URSH:\n        // cannot fold array access if the getelem/getprop is an assign target\n        if (n == parent.getFirstChild()) {\n          return false;\n        }\n        break;\n      default:\n        break;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..e8233a85 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1418,13 +1418,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n+    if (!canBeFolded(n, parent)) {\n       return n;\n     }\n \n@@ -1449,8 +1448,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     Node current = left.getFirstChild();\n     Node elem = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+      if (current.isEmpty()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      elem = current;\n       current = current.getNext();\n     }\n \n@@ -1470,6 +1472,32 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     reportCodeChange();\n     return elem;\n   }\n+  \n+  private boolean canBeFolded(Node n, Node parent) {\n+    Node value = parent.getLastChild();\n+    switch (parent.getToken()) {\n+      case ASSIGN:\n+      case ASSIGN_ADD:\n+      case ASSIGN_BITAND:\n+      case ASSIGN_BITOR:\n+      case ASSIGN_BITXOR:\n+      case ASSIGN_DIV:\n+      case ASSIGN_LSH:\n+      case ASSIGN_MOD:\n+      case ASSIGN_MUL:\n+      case ASSIGN_RSH:\n+      case ASSIGN_SUB:\n+      case ASSIGN_URSH:\n+        // cannot fold array access if the getelem/getprop is an assign target\n+        if (n == parent.getFirstChild()) {\n+          return false;\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+    return true;\n+  }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}