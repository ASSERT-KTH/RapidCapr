{
    "patch": "public class NumberUtils {\n\n    // ... other existing static methods here ...\n\n    //-----------------------------------------------------------------------\n    /**\n     * <p>Turns a string value into a java.lang.Number.</p>\n     *\n     * <p>First, the value is examined for a type qualifier on the end\n     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n     * trying to create successively larger type formats until one is found that\n     * can represent the value.</p>\n     *\n     * <p>If a comma has been used as a separator, it will be removed.</p>\n     *\n     * <p>Trim() is called on the input string before parsing.</p>\n     *\n     * <p>Integer.decode() is called on the trimmed input string if the string starts\n     * with <code>0x</code> or <code>0X</code> (hexadecimal) or <code>#</code>.</p>\n     *\n     * <p>If the string starts with <code>0</code> and contains\n     * more than one character, it may be interpreted as an octal\n     * value. This can be avoided by using <code>Long.valueOf</code>\n     * rather than <code>Long.decode</code>.</p>\n     *\n     * <p>If there are too many characters between the start of the String and\n     * the value (e.g. <code>\"$23,456,789.00\"</code>) the parse will fail.</p>\n     *\n     * <p>Precision is checked in this method before returning and rounding may\n     * occur if the precision is too high.</p>\n     *\n     * <p>Note, this method handles LARGE numbers and will throw an exception if\n     * the parsed number is too large for any of the types returned.  It should\n     * not be used for numbers greater then {@link Long#MAX_VALUE}.</p>\n     *\n     * @param str  a String containing a number\n     * @return a Number object created from the str\n     * @throws NumberFormatException if the value cannot be converted\n     *  to a number\n     * @since 2.1\n     * @deprecated this method will be removed in a future version of Lang\n     * as it has issues with the string form of floating point values; \n     * see LANG-294 for details. Method will be removed without replacement.\n     */\n    @Deprecated // LANG-1312 - should be made private\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for(final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen += pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // too many for Long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return creat",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..1a9a52b1 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,6 +447,51 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n+public class NumberUtils {\n+\n+    // ... other existing static methods here ...\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Turns a string value into a java.lang.Number.</p>\n+     *\n+     * <p>First, the value is examined for a type qualifier on the end\n+     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts\n+     * trying to create successively larger type formats until one is found that\n+     * can represent the value.</p>\n+     *\n+     * <p>If a comma has been used as a separator, it will be removed.</p>\n+     *\n+     * <p>Trim() is called on the input string before parsing.</p>\n+     *\n+     * <p>Integer.decode() is called on the trimmed input string if the string starts\n+     * with <code>0x</code> or <code>0X</code> (hexadecimal) or <code>#</code>.</p>\n+     *\n+     * <p>If the string starts with <code>0</code> and contains\n+     * more than one character, it may be interpreted as an octal\n+     * value. This can be avoided by using <code>Long.valueOf</code>\n+     * rather than <code>Long.decode</code>.</p>\n+     *\n+     * <p>If there are too many characters between the start of the String and\n+     * the value (e.g. <code>\"$23,456,789.00\"</code>) the parse will fail.</p>\n+     *\n+     * <p>Precision is checked in this method before returning and rounding may\n+     * occur if the precision is too high.</p>\n+     *\n+     * <p>Note, this method handles LARGE numbers and will throw an exception if\n+     * the parsed number is too large for any of the types returned.  It should\n+     * not be used for numbers greater then {@link Long#MAX_VALUE}.</p>\n+     *\n+     * @param str  a String containing a number\n+     * @return a Number object created from the str\n+     * @throws NumberFormatException if the value cannot be converted\n+     *  to a number\n+     * @since 2.1\n+     * @deprecated this method will be removed in a future version of Lang\n+     * as it has issues with the string form of floating point values; \n+     * see LANG-294 for details. Method will be removed without replacement.\n+     */\n+    @Deprecated // LANG-1312 - should be made private\n     public static Number createNumber(final String str) throws NumberFormatException {\n         if (str == null) {\n             return null;\n@@ -471,143 +516,7 @@ public class NumberUtils {\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-\n-        return createBigDecimal(str);\n-    }\n+            return creat\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}