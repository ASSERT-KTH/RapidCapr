{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n          && n.getType() == Token.GETPROP) {\n\n        Node child = n.getFirstChild().getNext();\n        boolean isPrototypeProperty = false;\n\n        if (child.getType() == Token.STRING\n            && child.getString().equals(\"prototype\")) {\n\n          if (child.getNext() != null && child.getNext().getType() == Token.GETPROP) {\n\n            Node childNext = child.getNext();\n            if (childNext != null && childNext.getType() == Token.GETPROP) {\n\n              Node childNextFirstChild = childNext.getFirstChild();\n              if (childNextFirstChild.getType() == Token.STRING\n                  && childNextFirstChild.getString().equals(\"Object\")\n                  && childNextFirstChild.getNext().getType() == Token.STRING\n                  && childNextFirstChild.getNext().getString().equals(\"prototype\")) {\n\n                isPrototypeProperty = true;\n              }\n            }\n          }\n        }\n        return isPrototypeProperty;\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..b594381b 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,38 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+    private boolean isPrototypePropertyAssign(Node assign) {\n+      Node n = assign.getFirstChild();\n+      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n+          && n.getType() == Token.GETPROP) {\n+\n+        Node child = n.getFirstChild().getNext();\n+        boolean isPrototypeProperty = false;\n+\n+        if (child.getType() == Token.STRING\n+            && child.getString().equals(\"prototype\")) {\n+\n+          if (child.getNext() != null && child.getNext().getType() == Token.GETPROP) {\n+\n+            Node childNext = child.getNext();\n+            if (childNext != null && childNext.getType() == Token.GETPROP) {\n+\n+              Node childNextFirstChild = childNext.getFirstChild();\n+              if (childNextFirstChild.getType() == Token.STRING\n+                  && childNextFirstChild.getString().equals(\"Object\")\n+                  && childNextFirstChild.getNext().getType() == Token.STRING\n+                  && childNextFirstChild.getNext().getString().equals(\"prototype\")) {\n+\n+                isPrototypeProperty = true;\n+              }\n+            }\n+          }\n+        }\n+        return isPrototypeProperty;\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}