{
    "patch": "public static boolean isNumber(String str) {\n    if (StringUtils.isEmpty(str)) {\n        return false;\n    }\n\n    int i = 0;\n    int len = str.length();\n    boolean isNegative = false;\n    boolean isDecimal = false;\n    boolean hasExponent = false;\n\n    // Check for optional negative sign.\n    if (str.charAt(i) == '-') {\n        isNegative = true;\n        i++;\n    }\n\n    // Check for infinite value.\n    if (i < len - 1 && str.substring(i, i + 3).equalsIgnoreCase(\"inf\")) {\n        return false;\n    }\n\n    // Check for NaN value.\n    if (i < len - 2 && str.substring(i, i + 3).equalsIgnoreCase(\"nan\")) {\n        return false;\n    }\n\n    // Check for optional decimal part.\n    while (i < len) {\n        char c = str.charAt(i);\n        if (Character.isDigit(c)) {\n            i++;\n        } else if (c == '.') {\n            if (isDecimal || hasExponent) {\n                return false;\n            }\n            isDecimal = true;\n            i++;\n        } else {\n            break;\n        }\n    }\n\n    // Check for optional exponent part.\n    if (i < len && (str.charAt(i) == 'e' || str.charAt(i) == 'E')) {\n        i++;\n\n        // Check for optional sign in exponent.\n        if (i < len && (str.charAt(i) == '+' || str.charAt(i) == '-')) {\n            i++;\n        }\n\n        // Check for at least one digit in exponent part.\n        if (i == len || !Character.isDigit(str.charAt(i))) {\n            return false;\n        }\n\n        hasExponent = true;\n\n        // Consume remaining digits in exponent part.\n        while (i < len) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n            i++;\n        }\n    }\n\n    // Check for optional floating-point type suffix.\n    if (i < len && (str.charAt(i) == 'f' || str.charAt(i) == 'F' || str.charAt(i) == 'd' || str.charAt(i) == 'D')) {\n        i++;\n    }\n\n    // Check for end of string.\n    return i == len && (isDecimal || hasExponent || Character.isDigit(str.charAt(len - 1)));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 4a1d8459..4012bcb0 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -1316,108 +1316,81 @@ public class NumberUtils {\n      * @param str  the <code>String</code> to check\n      * @return <code>true</code> if the string is a correctly formatted number\n      */\n-    public static boolean isNumber(String str) {\n-        if (StringUtils.isEmpty(str)) {\n-            return false;\n-        }\n-        char[] chars = str.toCharArray();\n-        int sz = chars.length;\n-        boolean hasExp = false;\n-        boolean hasDecPoint = false;\n-        boolean allowSigns = false;\n-        boolean foundDigit = false;\n-        // deal with any possible sign up front\n-        int start = (chars[0] == '-') ? 1 : 0;\n-        if (sz > start + 1) {\n-            if (chars[start] == '0' && chars[start + 1] == 'x') {\n-                int i = start + 2;\n-                if (i == sz) {\n-                    return false; // str == \"0x\"\n-                }\n-                // checking hex (it can't be anything else)\n-                for (; i < chars.length; i++) {\n-                    if ((chars[i] < '0' || chars[i] > '9')\n-                        && (chars[i] < 'a' || chars[i] > 'f')\n-                        && (chars[i] < 'A' || chars[i] > 'F')) {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-        }\n-        sz--; // don't want to loop to the last char, check it afterwords\n-              // for type qualifiers\n-        int i = start;\n-        // loop to the next to last char or to the last char if we need another digit to\n-        // make a valid number (e.g. chars[0..5] = \"1234E\")\n-        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n-            if (chars[i] >= '0' && chars[i] <= '9') {\n-                foundDigit = true;\n-                allowSigns = false;\n-\n-            } else if (chars[i] == '.') {\n-                if (hasDecPoint || hasExp) {\n-                    // two decimal points or dec in exponent   \n-                    return false;\n-                }\n-                hasDecPoint = true;\n-            } else if (chars[i] == 'e' || chars[i] == 'E') {\n-                // we've already taken care of hex.\n-                if (hasExp) {\n-                    // two E's\n-                    return false;\n-                }\n-                if (!foundDigit) {\n-                    return false;\n-                }\n-                hasExp = true;\n-                allowSigns = true;\n-            } else if (chars[i] == '+' || chars[i] == '-') {\n-                if (!allowSigns) {\n-                    return false;\n-                }\n-                allowSigns = false;\n-                foundDigit = false; // we need a digit after the E\n-            } else {\n+public static boolean isNumber(String str) {\n+    if (StringUtils.isEmpty(str)) {\n+        return false;\n+    }\n+\n+    int i = 0;\n+    int len = str.length();\n+    boolean isNegative = false;\n+    boolean isDecimal = false;\n+    boolean hasExponent = false;\n+\n+    // Check for optional negative sign.\n+    if (str.charAt(i) == '-') {\n+        isNegative = true;\n+        i++;\n+    }\n+\n+    // Check for infinite value.\n+    if (i < len - 1 && str.substring(i, i + 3).equalsIgnoreCase(\"inf\")) {\n+        return false;\n+    }\n+\n+    // Check for NaN value.\n+    if (i < len - 2 && str.substring(i, i + 3).equalsIgnoreCase(\"nan\")) {\n+        return false;\n+    }\n+\n+    // Check for optional decimal part.\n+    while (i < len) {\n+        char c = str.charAt(i);\n+        if (Character.isDigit(c)) {\n+            i++;\n+        } else if (c == '.') {\n+            if (isDecimal || hasExponent) {\n                 return false;\n             }\n+            isDecimal = true;\n             i++;\n+        } else {\n+            break;\n         }\n-        if (i < chars.length) {\n-            if (chars[i] >= '0' && chars[i] <= '9') {\n-                // no type qualifier, OK\n-                return true;\n-            }\n-            if (chars[i] == 'e' || chars[i] == 'E') {\n-                // can't have an E at the last byte\n+    }\n+\n+    // Check for optional exponent part.\n+    if (i < len && (str.charAt(i) == 'e' || str.charAt(i) == 'E')) {\n+        i++;\n+\n+        // Check for optional sign in exponent.\n+        if (i < len && (str.charAt(i) == '+' || str.charAt(i) == '-')) {\n+            i++;\n+        }\n+\n+        // Check for at least one digit in exponent part.\n+        if (i == len || !Character.isDigit(str.charAt(i))) {\n+            return false;\n+        }\n+\n+        hasExponent = true;\n+\n+        // Consume remaining digits in exponent part.\n+        while (i < len) {\n+            if (!Character.isDigit(str.charAt(i))) {\n                 return false;\n             }\n-            if (chars[i] == '.') {\n-                if (hasDecPoint || hasExp) {\n-                    // two decimal points or dec in exponent\n-                    return false;\n-                }\n-                // single trailing decimal point after non-exponent is ok\n-                return foundDigit;\n-            }\n-            if (!allowSigns\n-                && (chars[i] == 'd'\n-                    || chars[i] == 'D'\n-                    || chars[i] == 'f'\n-                    || chars[i] == 'F')) {\n-                return foundDigit;\n-            }\n-            if (chars[i] == 'l'\n-                || chars[i] == 'L') {\n-                // not allowing L with an exponent or decimal point\n-                return foundDigit && !hasExp;\n-            }\n-            // last character is illegal\n-            return false;\n+            i++;\n         }\n-        // allowSigns is true iff the val ends in 'E'\n-        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n-        return !allowSigns && foundDigit;\n     }\n+\n+    // Check for optional floating-point type suffix.\n+    if (i < len && (str.charAt(i) == 'f' || str.charAt(i) == 'F' || str.charAt(i) == 'd' || str.charAt(i) == 'D')) {\n+        i++;\n+    }\n+\n+    // Check for end of string.\n+    return i == len && (isDecimal || hasExponent || Character.isDigit(str.charAt(len - 1)));\n+}\n     \n }",
    "result_reason": "junit.framework.AssertionFailedError: isNumber(String) 16 failed",
    "test_result": "FAIL"
}