{
    "patch": "        if (block.isFunction) {\n          boolean oneAndOnlyAssign = true;\n          for (Reference ref : references) {\n            if (ref.isAssignmentToName() &&\n                !ref.getNode().getParent().equals(block.getNode())) {\n              oneAndOnlyAssign = false;\n              break;\n            }\n          }\n          return oneAndOnlyAssign;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e0b3f8c5 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          boolean oneAndOnlyAssign = true;\n+          for (Reference ref : references) {\n+            if (ref.isAssignmentToName() &&\n+                !ref.getNode().getParent().equals(block.getNode())) {\n+              oneAndOnlyAssign = false;\n+              break;\n+            }\n+          }\n+          return oneAndOnlyAssign;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}