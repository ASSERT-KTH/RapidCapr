{
    "patch": "Node child = n.getFirstChild();\n\nif (child.isCast()) {\n    child = child.getNext();\n}\n\nif (!NodeUtil.isGet(child) && !NodeUtil.isNew(child)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n}\n\n// Keep track of the context in which eval is called. It is important\n// to distinguish between \"(0, eval)()\" and \"eval()\".\nif (child.isName() &&\n    \"eval\".equals(child.getString())) {\n        child.putBooleanProp(Node.DIRECT_EVAL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..94eac047 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,22 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+Node child = n.getFirstChild();\n+\n+if (child.isCast()) {\n+    child = child.getNext();\n+}\n+\n+if (!NodeUtil.isGet(child) && !NodeUtil.isNew(child)) {\n+    n.putBooleanProp(Node.FREE_CALL, true);\n+}\n+\n+// Keep track of the context in which eval is called. It is important\n+// to distinguish between \"(0, eval)()\" and \"eval()\".\n+if (child.isName() &&\n+    \"eval\".equals(child.getString())) {\n+        child.putBooleanProp(Node.DIRECT_EVAL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}