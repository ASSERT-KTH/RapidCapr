{
    "patch": "    private void readTypeVariables() {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType instanceof WildcardType) {\n            for (Type bound : ((WildcardType) actualType).getUpperBounds()) {\n                registerTypeVariablesOn(bound);\n            }\n        } else if (actualType instanceof TypeVariable) {\n            registerTypeVariablesOn(actualType);\n        } else {\n            registerTypeVariablesOn(actualType);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6281782b3 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,21 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType instanceof WildcardType) {\n+            for (Type bound : ((WildcardType) actualType).getUpperBounds()) {\n+                registerTypeVariablesOn(bound);\n+            }\n+        } else if (actualType instanceof TypeVariable) {\n+            registerTypeVariablesOn(actualType);\n+        } else {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}