{
    "patch": "// Check that the access is not used as an assignment target\nif (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    Node assignRight = parent.getLastChild();\n    if (assignRight == n) {\n      return n;\n    }\n    if (assignRight.getType() == Token.ADD\n        && assignRight.getChildCount() == 2\n        && assignRight.getFirstChild().isEquivalentTo(n)) {\n      Node addRight = assignRight.getLastChild();\n      if (addRight.getType() != Token.NUMBER || addRight.getDouble() != 1.0) {\n        return n;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..9951bd4e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,24 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    Node assignRight = parent.getLastChild();\n+    if (assignRight == n) {\n+      return n;\n+    }\n+    if (assignRight.getType() == Token.ADD\n+        && assignRight.getChildCount() == 2\n+        && assignRight.getFirstChild().isEquivalentTo(n)) {\n+      Node addRight = assignRight.getLastChild();\n+      if (addRight.getType() != Token.NUMBER || addRight.getDouble() != 1.0) {\n+        return n;\n+      }\n+    }\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:<0> but was:<1>",
    "test_result": "FAIL"
}