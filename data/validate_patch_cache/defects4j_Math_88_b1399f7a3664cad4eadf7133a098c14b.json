{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        if (basicRow != null) {\n            int firstNonZeroColumn = getNumObjectiveFunctions() + i;\n            for (int j = firstNonZeroColumn; j < getWidth() - 1; j++) {\n                if (tableau.getEntry(basicRow, j) != 0) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        coefficients[i] = getEntry(basicRow, getRhsOffset());\n                    } else {\n                        double mostPositive = getPositiveVariableCoefficients(j);\n                        double ratio = getEntry(basicRow, getRhsOffset()) / tableau.getEntry(basicRow, j);\n                        coefficients[i] = mostPositive * ratio;\n                    }\n                    break;\n                }\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}\n\nprivate double getPositiveVariableCoefficients(int column) {\n    double mostPositive = Double.MAX_VALUE;\n    for (int i = getNumObjectiveFunctions(); i < getHeight() - 1; i++) {\n        double current = tableau.getEntry(i, column);\n        if (current > 0) {\n            Integer basicRow = getBasicRow(i);\n            if (basicRow == null || tableau.getEntry(basicRow, getRhsOffset()) / current < mostPositive) {\n                if (basicRow == null) {\n                    mostPositive = Double.MAX_VALUE;\n                } else {\n                    mostPositive = tableau.getEntry(basicRow, getRhsOffset()) / current;\n                }\n            }\n        }\n    }\n    return mostPositive == Double.MAX_VALUE ? 0.0 : mostPositive;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..cf50250da 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,48 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        if (basicRow != null) {\n+            int firstNonZeroColumn = getNumObjectiveFunctions() + i;\n+            for (int j = firstNonZeroColumn; j < getWidth() - 1; j++) {\n+                if (tableau.getEntry(basicRow, j) != 0) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        coefficients[i] = getEntry(basicRow, getRhsOffset());\n+                    } else {\n+                        double mostPositive = getPositiveVariableCoefficients(j);\n+                        double ratio = getEntry(basicRow, getRhsOffset()) / tableau.getEntry(basicRow, j);\n+                        coefficients[i] = mostPositive * ratio;\n                     }\n+                    break;\n                 }\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n+\n+private double getPositiveVariableCoefficients(int column) {\n+    double mostPositive = Double.MAX_VALUE;\n+    for (int i = getNumObjectiveFunctions(); i < getHeight() - 1; i++) {\n+        double current = tableau.getEntry(i, column);\n+        if (current > 0) {\n+            Integer basicRow = getBasicRow(i);\n+            if (basicRow == null || tableau.getEntry(basicRow, getRhsOffset()) / current < mostPositive) {\n+                if (basicRow == null) {\n+                    mostPositive = Double.MAX_VALUE;\n+                } else {\n+                    mostPositive = tableau.getEntry(basicRow, getRhsOffset()) / current;\n+                }\n+            }\n+        }\n+    }\n+    return mostPositive == Double.MAX_VALUE ? 0.0 : mostPositive;\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<7518.0> but was:<13366.0>",
    "test_result": "FAIL"
}