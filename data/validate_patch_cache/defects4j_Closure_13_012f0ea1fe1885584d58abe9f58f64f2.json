{
    "patch": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    do {\n      boolean nodeChanged = false;\n      Node c = node.getFirstChild();\n      while(c != null) {\n        traverse(c);\n        Node next = c.getNext();\n        if (c.isChanged()) {\n          nodeChanged = true;\n        }\n        c = next;\n      }\n\n      if (nodeChanged) {\n        break;\n      }\n\n      visit(node);\n      visits++;\n\n      Preconditions.checkState(visits < 10000, \"too many iterations\");\n    } while (shouldRetraverse(node));\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..93a05d8a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -109,8 +109,7 @@ class PeepholeOptimizationsPass\n     endTraversal();\n     compiler.removeChangeHandler(handler);\n   }\n-\n-  private void traverse(Node node) {\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n@@ -121,17 +120,25 @@ class PeepholeOptimizationsPass\n \n     int visits = 0;\n     do {\n+      boolean nodeChanged = false;\n       Node c = node.getFirstChild();\n       while(c != null) {\n         traverse(c);\n         Node next = c.getNext();\n+        if (c.isChanged()) {\n+          nodeChanged = true;\n+        }\n         c = next;\n       }\n \n+      if (nodeChanged) {\n+        break;\n+      }\n+\n       visit(node);\n       visits++;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n+      Preconditions.checkState(visits < 10000, \"too many iterations\");\n     } while (shouldRetraverse(node));\n \n     exitNode(node);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}