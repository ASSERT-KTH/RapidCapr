{
    "patch": "  @Test\n  public void testNamespacedFunctionStubLocal() {\n    Compiler compiler = new Compiler();\n    Scope scope = new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(), null);\n\n    String input =\n          \"var foo = {};\\n\" +\n          \"foo.bar = function() {\\n\" +\n          \"}\";\n    Node externs = parse(\"var goog = {};\\ngoog.provide = function() {};\", true);\n    Node ast = parse(input);\n\n    // Create a new scope for this test case\n    Scope testScope = new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(), scope);\n\n    NameAnalyzer nameAnalyzer = new NameAnalyzer(compiler, null, testScope);\n    nameAnalyzer.process(externs, ast);\n\n    // assert that the local function 'foo.bar' exists as a property of 'foo'\n    assertTrue(testScope.getOwnSlot(\"foo\", Token.VAR) != null);\n    assertTrue(testScope.getOwnSlot(\"foo.bar\", Token.FUNCTION) != null);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..5a51daec 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,28 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n-\n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n-    }\n+  @Test\n+  public void testNamespacedFunctionStubLocal() {\n+    Compiler compiler = new Compiler();\n+    Scope scope = new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(), null);\n+\n+    String input =\n+          \"var foo = {};\\n\" +\n+          \"foo.bar = function() {\\n\" +\n+          \"}\";\n+    Node externs = parse(\"var goog = {};\\ngoog.provide = function() {};\", true);\n+    Node ast = parse(input);\n+\n+    // Create a new scope for this test case\n+    Scope testScope = new SyntacticScopeCreator(compiler).createScope(compiler.getRoot(), scope);\n+\n+    NameAnalyzer nameAnalyzer = new NameAnalyzer(compiler, null, testScope);\n+    nameAnalyzer.process(externs, ast);\n+\n+    // assert that the local function 'foo.bar' exists as a property of 'foo'\n+    assertTrue(testScope.getOwnSlot(\"foo\", Token.VAR) != null);\n+    assertTrue(testScope.getOwnSlot(\"foo.bar\", Token.FUNCTION) != null);\n+  }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}