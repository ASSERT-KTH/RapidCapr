{
    "patch": "        int nextCount = (last == dimension ? totalSize : uniCounterOffset[last]);\n        int span = nextCount - count;\n        for (int i = last-1; i >= 0; i--) {\n            indices[i] = count / uniCounterOffset[i];\n            count %= uniCounterOffset[i];\n            nextCount /= uniCounterOffset[i];\n            if (i > 0 && count >= nextCount) {\n                throw new OutOfRangeException(count, 0L, nextCount - 1);\n            }\n        }\n\n        return indices;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..322845352 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int nextCount = (last == dimension ? totalSize : uniCounterOffset[last]);\n+        int span = nextCount - count;\n+        for (int i = last-1; i >= 0; i--) {\n+            indices[i] = count / uniCounterOffset[i];\n+            count %= uniCounterOffset[i];\n+            nextCount /= uniCounterOffset[i];\n+            if (i > 0 && count >= nextCount) {\n+                throw new OutOfRangeException(count, 0L, nextCount - 1);\n+            }\n         }\n-        --idx;\n-        indices[last] = idx;\n+\n+        return indices;\n+    }\n \n         return indices;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}