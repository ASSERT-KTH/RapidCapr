{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    final double dev = x - mean;\n    if (Double.isInfinite(dev)) {\n        return dev < 0.0 ? 0.0 : 1.0;\n    } else {\n        double result;\n        try {\n            result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n        } catch (MaxIterationsExceededException ex) {\n            throw new MathException(ex);\n        }\n        if (Double.isNaN(result)) {\n            return dev < 0.0 ? 0.0 : 1.0;\n        } else {\n            return FastMath.max(0.0, FastMath.min(1.0, result));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..dbdb3f449 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,27 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    final double dev = x - mean;\n+    if (Double.isInfinite(dev)) {\n+        return dev < 0.0 ? 0.0 : 1.0;\n+    } else {\n+        double result;\n         try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n+            result = 0.5 * (1.0 + Erf.erf(dev / (standardDeviation * FastMath.sqrt(2.0))));\n         } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n-            }\n+            throw new MathException(ex);\n+        }\n+        if (Double.isNaN(result)) {\n+            return dev < 0.0 ? 0.0 : 1.0;\n+        } else {\n+            return FastMath.max(0.0, FastMath.min(1.0, result));\n         }\n     }\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e",
    "test_result": "FAIL"
}