{
    "patch": "if (val == null) {\n    return null;\n}\nif (val.isEmpty()) {\n    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n}\nchar firstChar = val.charAt(0);\nif (!Character.isDigit(firstChar) && firstChar != '-' && firstChar != '+') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nfor (int i = 1; i < val.length(); i++) {\n    char ch = val.charAt(i);\n    if (!Character.isDigit(ch) && ch != '.' && ch != 'e' && ch != 'E' && ch != '+' && ch != '-') {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n}\nif (val.endsWith(\".\")) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.endsWith(\"e\") || val.endsWith(\"E\")) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.indexOf('.') != val.lastIndexOf('.')) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.indexOf('e') != val.lastIndexOf('e') || val.indexOf('E') != val.lastIndexOf('E')) {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\ntry {\n    return createBigDecimal(val);\n} catch (NumberFormatException ignored) {\n}\ntry {\n    return createBigInteger(val);\n} catch (NumberFormatException ignored) {\n}\ntry {\n    return createDouble(val);\n} catch (NumberFormatException ignored) {\n}\ntry {\n    return createFloat(val);\n} catch (NumberFormatException ignored) {\n}\nreturn createInteger(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..95c553d5 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,51 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val == null) {\n+    return null;\n+}\n+if (val.isEmpty()) {\n+    throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+}\n+char firstChar = val.charAt(0);\n+if (!Character.isDigit(firstChar) && firstChar != '-' && firstChar != '+') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+for (int i = 1; i < val.length(); i++) {\n+    char ch = val.charAt(i);\n+    if (!Character.isDigit(ch) && ch != '.' && ch != 'e' && ch != 'E' && ch != '+' && ch != '-') {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+}\n+if (val.endsWith(\".\")) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.endsWith(\"e\") || val.endsWith(\"E\")) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.indexOf('.') != val.lastIndexOf('.')) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.indexOf('e') != val.lastIndexOf('e') || val.indexOf('E') != val.lastIndexOf('E')) {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+try {\n+    return createBigDecimal(val);\n+} catch (NumberFormatException ignored) {\n+}\n+try {\n+    return createBigInteger(val);\n+} catch (NumberFormatException ignored) {\n+}\n+try {\n+    return createDouble(val);\n+} catch (NumberFormatException ignored) {\n+}\n+try {\n+    return createFloat(val);\n+} catch (NumberFormatException ignored) {\n+}\n+return createInteger(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}