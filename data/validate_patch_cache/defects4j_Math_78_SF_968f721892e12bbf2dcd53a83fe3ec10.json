{
    "patch": "    public Dfp multiply(final int x) {\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n        if (x == 1) {\n            return newInstance(this);\n        }\n        if (getField().getRadixDigits() != 64) {\n            return multiplyFast(x);\n        }\n        final long multiplier = x;\n        long r = 0;\n        final int[] product = new int[field.getRadixDigits()];\n        final int[] xDigits = new int[field.getRadixDigits()];\n        final long longX = x & 0xffffffffL;\n        if (longX == x) {\n            // handle small multipliers with the same method as Fast Dfp\n            final int intX = (int) longX;\n            if (intX < 0 || intX >= RADIX) {\n                return multiply(newInstance(x));\n            }\n            if (intX == 0) {\n                return newInstance(getField(), 0);\n            }\n            if (intX == 1) {\n                return newInstance(this);\n            }\n            int carry = 0;\n            for (int i = 0; i < precision; i++) {\n                r = ((long) this.mant[i] & 0xffffffffL) * intX + carry;\n                product[i] = (int) r & SINGLE_WORD_MASK;\n                carry = (int) (r >>> 32);\n            }\n\n            return newInstance(getField(), this.getSign(), this.getExponent(), product, false);\n\n        }\n\n        final Dfp dp = newInstance(this);\n\n        for (int i = 0; i < xDigits.length; i++) {\n            final long ui = multiplier & 0xffffffffL;\n            xDigits[i] = (int) ui;\n            multiplier >>>= 32;\n        }\n\n        int q = 0;\n        while (xDigits[q] == 0) {\n            ++q;\n        }\n\n        for (int i = precision - 1; i >= 0; i--) {\n            // multiply single digits and add the rest to the product\n            int carry = 0;\n            for (int j = q; j < precision; j++) {\n                r = (long) xDigits[j] * (long) mant[i] +\n                    (long) product[i + j + 1] + carry;\n                carry = (int) (r >>> 32);\n                product[i + j + 1] = (int) (r & SINGLE_WORD_MASK);\n            }\n            product[i + q] = carry;\n        }\n\n        dp.sign = sign < 0 ? -1 : 1;\n        dp.exp = exp;\n        dp.mant = product;\n        dp.normalize();\n        return dp;\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..4ebe2f488 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,102 +164,75 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n-        throws DerivativeException, EventException, ConvergenceException {\n-\n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n-                        pendingEvent = true;\n-                        return true;\n-                    }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n-                }\n-\n+    public Dfp multiply(final int x) {\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+        if (x == 1) {\n+            return newInstance(this);\n+        }\n+        if (getField().getRadixDigits() != 64) {\n+            return multiplyFast(x);\n+        }\n+        final long multiplier = x;\n+        long r = 0;\n+        final int[] product = new int[field.getRadixDigits()];\n+        final int[] xDigits = new int[field.getRadixDigits()];\n+        final long longX = x & 0xffffffffL;\n+        if (longX == x) {\n+            // handle small multipliers with the same method as Fast Dfp\n+            final int intX = (int) longX;\n+            if (intX < 0 || intX >= RADIX) {\n+                return multiply(newInstance(x));\n+            }\n+            if (intX == 0) {\n+                return newInstance(getField(), 0);\n+            }\n+            if (intX == 1) {\n+                return newInstance(this);\n+            }\n+            int carry = 0;\n+            for (int i = 0; i < precision; i++) {\n+                r = ((long) this.mant[i] & 0xffffffffL) * intX + carry;\n+                product[i] = (int) r & SINGLE_WORD_MASK;\n+                carry = (int) (r >>> 32);\n             }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+            return newInstance(getField(), this.getSign(), this.getExponent(), product, false);\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+        }\n+\n+        final Dfp dp = newInstance(this);\n+\n+        for (int i = 0; i < xDigits.length; i++) {\n+            final long ui = multiplier & 0xffffffffL;\n+            xDigits[i] = (int) ui;\n+            multiplier >>>= 32;\n+        }\n+\n+        int q = 0;\n+        while (xDigits[q] == 0) {\n+            ++q;\n+        }\n+\n+        for (int i = precision - 1; i >= 0; i--) {\n+            // multiply single digits and add the rest to the product\n+            int carry = 0;\n+            for (int j = q; j < precision; j++) {\n+                r = (long) xDigits[j] * (long) mant[i] +\n+                    (long) product[i + j + 1] + carry;\n+                carry = (int) (r >>> 32);\n+                product[i + j + 1] = (int) (r & SINGLE_WORD_MASK);\n             }\n-            throw new EventException(e);\n+            product[i + q] = carry;\n         }\n \n+        dp.sign = sign < 0 ? -1 : 1;\n+        dp.exp = exp;\n+        dp.mant = product;\n+        dp.normalize();\n+        return dp;\n+\n     }\n \n     /** Get the occurrence time of the event triggered in the current",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}