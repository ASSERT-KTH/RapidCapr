{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      while (argList.hasChildren()) {\n        Node lastArg = argList.getLastChild();\n        if (!isReferenced(lastArg, fnScope)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n\n  private boolean isReferenced(Node arg, Scope fnScope) {\n    String argName = arg.getString();\n    Var var = fnScope.getVar(argName);\n    if (referenced.contains(var)) {\n      return true;\n    }\n\n    Node function = fnScope.getRootNode();\n    Node body = NodeUtil.getFunctionBody(function);\n    NodeUtil.visitPreOrder(\n        body,\n        (NodeTraversal t, Node n, Node parent) -> {\n          if (n.matchesQualifiedName(argName) && !n.isParam()) {\n            if (NodeUtil.isLhsByDestructuring(n)) {\n              addToReferencedFromDestructuringAssignment(n, fnScope);\n            } else {\n              referenced.add(var);\n            }\n          }\n          return true;\n        });\n    return referenced.contains(var);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..498f3925 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,19 +366,8 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n@@ -390,10 +379,9 @@ class RemoveUnusedVars\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n+      while (argList.hasChildren()) {\n+        Node lastArg = argList.getLastChild();\n+        if (!isReferenced(lastArg, fnScope)) {\n           argList.removeChild(lastArg);\n           compiler.reportCodeChange();\n         } else {\n@@ -405,6 +393,30 @@ class RemoveUnusedVars\n     }\n   }\n \n+  private boolean isReferenced(Node arg, Scope fnScope) {\n+    String argName = arg.getString();\n+    Var var = fnScope.getVar(argName);\n+    if (referenced.contains(var)) {\n+      return true;\n+    }\n+\n+    Node function = fnScope.getRootNode();\n+    Node body = NodeUtil.getFunctionBody(function);\n+    NodeUtil.visitPreOrder(\n+        body,\n+        (NodeTraversal t, Node n, Node parent) -> {\n+          if (n.matchesQualifiedName(argName) && !n.isParam()) {\n+            if (NodeUtil.isLhsByDestructuring(n)) {\n+              addToReferencedFromDestructuringAssignment(n, fnScope);\n+            } else {\n+              referenced.add(var);\n+            }\n+          }\n+          return true;\n+        });\n+    return referenced.contains(var);\n+  }\n+\n \n   /**\n    * @return the LP node containing the function parameters.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}