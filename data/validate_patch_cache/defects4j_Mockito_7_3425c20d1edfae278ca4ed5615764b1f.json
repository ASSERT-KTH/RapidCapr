{
    "patch": "if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n    ParameterizedType parameterizedType = getParameterizedType((Class<?>) typeVariable.getGenericDeclaration(), typeVariable.getName());\n    if (parameterizedType != null) {\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (Type actualTypeArgument : actualTypeArguments) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n        return;\n    }\n}\nfor (Type type : typeVariable.getBounds()) {\n    registerTypeVariablesOn(type);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..eb7c34d36 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,19 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+if (typeVariable.getGenericDeclaration() instanceof Class<?>) {\n+    ParameterizedType parameterizedType = getParameterizedType((Class<?>) typeVariable.getGenericDeclaration(), typeVariable.getName());\n+    if (parameterizedType != null) {\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        for (Type actualTypeArgument : actualTypeArguments) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+        return;\n+    }\n+}\n+for (Type type : typeVariable.getBounds()) {\n+    registerTypeVariablesOn(type);\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}