{
    "patch": "if (token.type == JsDocTokenType.OPEN_CURLY) {\n    return parseRecordType(token);\n} else if (token.type == JsDocTokenType.OPEN_SQUARE) {\n    return parseArrayType(token);\n} else {\n    Node typeNode = parseTypeExpression(token);\n    if (typeNode == null) {\n        return IR.string(\"unknown\");\n    }\n    return typeNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..aa2eaae8 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,17 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+if (token.type == JsDocTokenType.OPEN_CURLY) {\n+    return parseRecordType(token);\n+} else if (token.type == JsDocTokenType.OPEN_SQUARE) {\n+    return parseArrayType(token);\n+} else {\n+    Node typeNode = parseTypeExpression(token);\n+    if (typeNode == null) {\n+        return IR.string(\"unknown\");\n+    }\n+    return typeNode;\n+}\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}