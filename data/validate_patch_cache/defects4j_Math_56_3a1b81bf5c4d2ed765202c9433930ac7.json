{
    "patch": "        int idx = 1;\n        while (count < index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= idx;\n        indices[last - 1] = idx;\n\n        // Remaining indices are computed from remaining counts\n        for (int i = last - 2; i >= 0; i--) {\n            idx = 1;\n            while (count < uniCounterOffset[i]) {\n                count += idx;\n                idx++;\n            }\n            count -= idx - 1;\n            indices[i] = idx - 1;\n        }\n\n        return indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..6d6ca2f9f 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -240,7 +240,21 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        count -= idx;\n+        indices[last - 1] = idx;\n+\n+        // Remaining indices are computed from remaining counts\n+        for (int i = last - 2; i >= 0; i--) {\n+            idx = 1;\n+            while (count < uniCounterOffset[i]) {\n+                count += idx;\n+                idx++;\n+            }\n+            count -= idx - 1;\n+            indices[i] = idx - 1;\n+        }\n+\n+        return indices;\n \n         return indices;\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}