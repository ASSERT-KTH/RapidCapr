{
    "patch": " protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n    switch (node.getType()) {\n      case Token.NAME:\n        scope.inferSlotType(node.getString(), type);\n        break;\n\n      case Token.GETPROP:\n        String qualifiedName = node.getQualifiedName();\n        Preconditions.checkNotNull(qualifiedName);\n\n        JSType origType = node.getJSType();\n        origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n        if (scope.inferQualifiedSlot(node, qualifiedName, origType, type) == null) {\n          throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n              node.toStringTree());\n        }\n        break;\n\n      // \"this\" references aren't currently modeled in the CFG.\n      case Token.THIS:\n      case Token.FUNCTION:\n        break;\n\n      default:\n        throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n            node.toStringTree());\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0345c855..b37a054b 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -154,7 +154,7 @@ public abstract class ChainableReverseAbstractInterpreter\n    * {@code node}. It must be possible to refine the type of the given node in\n    * the given scope, as determined by {@link #getTypeIfRefinable}.\n    */\n-  protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n+ protected void declareNameInScope(FlowScope scope, Node node, JSType type) {\n     switch (node.getType()) {\n       case Token.NAME:\n         scope.inferSlotType(node.getString(), type);\n@@ -166,10 +166,16 @@ public abstract class ChainableReverseAbstractInterpreter\n \n         JSType origType = node.getJSType();\n         origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;\n-        scope.inferQualifiedSlot(node, qualifiedName, origType, type);\n+        if (scope.inferQualifiedSlot(node, qualifiedName, origType, type) == null) {\n+          throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +\n+              node.toStringTree());\n+        }\n         break;\n \n-        // \"this\" references aren't currently modeled in the CFG.\n+      // \"this\" references aren't currently modeled in the CFG.\n+      case Token.THIS:\n+      case Token.FUNCTION:\n+        break;\n \n       default:\n         throw new IllegalArgumentException(\"Node cannot be refined. \\n\" +",
    "result_reason": "error: 'void' type not allowed here",
    "test_result": "ERROR"
}