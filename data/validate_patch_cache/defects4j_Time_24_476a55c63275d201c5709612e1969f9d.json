{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n                int year;\n                if (resetFields) {\n                    year = iDefaultYear;\n                } else {\n                    year = iChrono.year().get(getMillis());\n                }\n                Object savedState = savedFields[0].iField.setCopy(this, getMillis(), year);\n                for (int i = 0; i < count; i++) {\n                    try {\n                        savedFields[i].iField.set(this, getMillis(), savedFields[i].iField.get(savedState));\n                    } catch (IllegalArgumentException e) {\n                        if (text == null) {\n                            throw e;\n                        }\n                        IllegalFieldValueException ex = new IllegalFieldValueException(\n                                savedFields[i].iField.getType(), savedFields[i].iField.get(savedState), e.getMessage(), null);\n                        ex.initCause(e);\n                        ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n                        throw ex;\n                    }\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(this, millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(getMillis());\n            millis -= offset;\n            if (offset != iZone.getOffset(getMillis())) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6f1ba046 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -342,15 +342,34 @@ public class DateTimeParserBucket {\n             DurationField days = DurationFieldType.days().getField(iChrono);\n             DurationField first = savedFields[0].iField.getDurationField();\n             if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+                int year;\n+                if (resetFields) {\n+                    year = iDefaultYear;\n+                } else {\n+                    year = iChrono.year().get(getMillis());\n+                }\n+                Object savedState = savedFields[0].iField.setCopy(this, getMillis(), year);\n+                for (int i = 0; i < count; i++) {\n+                    try {\n+                        savedFields[i].iField.set(this, getMillis(), savedFields[i].iField.get(savedState));\n+                    } catch (IllegalArgumentException e) {\n+                        if (text == null) {\n+                            throw e;\n+                        }\n+                        IllegalFieldValueException ex = new IllegalFieldValueException(\n+                                savedFields[i].iField.getType(), savedFields[i].iField.get(savedState), e.getMessage(), null);\n+                        ex.initCause(e);\n+                        ex.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+                        throw ex;\n+                    }\n+                }\n             }\n         }\n \n         long millis = iMillis;\n         try {\n             for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+                millis = savedFields[i].set(this, millis, resetFields);\n             }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n@@ -358,22 +377,22 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n+            int offset = iZone.getOffsetFromLocal(getMillis());\n             millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n+            if (offset != iZone.getOffset(getMillis())) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+\n         return millis;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}