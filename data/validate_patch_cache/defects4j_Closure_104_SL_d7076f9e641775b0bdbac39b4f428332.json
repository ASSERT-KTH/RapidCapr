{
    "patch": "    }\n    if (this.isUnknownType() && that.isUnknownType()) {\n      return unknownType();\n    } else if (this.isAllType() || that.isAllType()) {\n      return getNativeType(JSTypeNative.ALL_TYPE);\n    } else if (this.isUnknownType() || that.isUnknownType()) {\n      return unknownType();\n    } else if (this.isBottom()) {\n      return that;\n    } else if (that.isBottom()) {\n      return this;\n    } else {\n      JSType result = builder.build();\n      return result;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..30ddb875 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,21 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+    }\n+    if (this.isUnknownType() && that.isUnknownType()) {\n+      return unknownType();\n+    } else if (this.isAllType() || that.isAllType()) {\n+      return getNativeType(JSTypeNative.ALL_TYPE);\n+    } else if (this.isUnknownType() || that.isUnknownType()) {\n+      return unknownType();\n+    } else if (this.isBottom()) {\n+      return that;\n+    } else if (that.isBottom()) {\n+      return this;\n+    } else {\n+      JSType result = builder.build();\n+      return result;\n+    }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}