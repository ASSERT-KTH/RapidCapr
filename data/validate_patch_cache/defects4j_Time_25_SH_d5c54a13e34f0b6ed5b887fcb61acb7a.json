{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    \n                    // fix start: if both offsets change, choose the bigger one                    \n                    int biggerOffset, smallerOffset;\n                    long nextBigger, nextSmaller;\n                    if (offsetLocal < offsetAdjusted) {\n                        biggerOffset = offsetAdjusted;\n                        nextBigger = nextAdjusted;\n                        smallerOffset = offsetLocal;\n                        nextSmaller = nextLocal;                        \n                    } else {\n                        biggerOffset = offsetLocal;\n                        nextBigger = nextLocal;\n                        smallerOffset = offsetAdjusted;\n                        nextSmaller = nextAdjusted;\n                    } // fix end\n                    \n                    if (nextBigger != nextSmaller) { // use nextBigger and biggerOffset\n                        return biggerOffset; \n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..07f81c81 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,31 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    \n+                    // fix start: if both offsets change, choose the bigger one                    \n+                    int biggerOffset, smallerOffset;\n+                    long nextBigger, nextSmaller;\n+                    if (offsetLocal < offsetAdjusted) {\n+                        biggerOffset = offsetAdjusted;\n+                        nextBigger = nextAdjusted;\n+                        smallerOffset = offsetLocal;\n+                        nextSmaller = nextLocal;                        \n+                    } else {\n+                        biggerOffset = offsetLocal;\n+                        nextBigger = nextLocal;\n+                        smallerOffset = offsetAdjusted;\n+                        nextSmaller = nextAdjusted;\n+                    } // fix end\n+                    \n+                    if (nextBigger != nextSmaller) { // use nextBigger and biggerOffset\n+                        return biggerOffset; \n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}