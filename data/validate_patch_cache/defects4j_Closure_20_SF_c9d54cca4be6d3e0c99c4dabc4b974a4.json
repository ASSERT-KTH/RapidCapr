{
    "patch": " private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null && NodeUtil.isImmutableValue(value)) {\n        String stringValue = getStringValue(value);\n        if (stringValue != null) {\n          // Fold String(a) to '' + (a) on immutable literals,\n          // which allows further optimizations\n          //\n          // We can't do this in the general case, because String(a) has\n          // slightly different semantics than '' + (a). See\n          // http://code.google.com/p/closure-compiler/issues/detail?id=759\n          Node addition = IR.string(\"\").srcref(callTarget);\n          addition.addChildToFront(IR.string(stringValue).srcref(callTarget));\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }\n    }\n    return n;\n  }\n  \n  private String getStringValue(Node node) {\n    if (node.isString()) {\n        return node.getString();\n    }\n    if (isNumber(node)) {\n        return NodeUtil.getNumberStringValue(node);\n    }\n    return null;\n  }\n  \n  private boolean isNumber(Node node) {\n    return node.isNumber() || node.isBigInt();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..34b8f8e1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -205,29 +205,44 @@ class PeepholeSubstituteAlternateSyntax\n     }\n   }\n \n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+ private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+    if (callTarget != null && callTarget.isName() && callTarget.getString().equals(\"String\")) {\n       Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n+      if (value != null && NodeUtil.isImmutableValue(value)) {\n+        String stringValue = getStringValue(value);\n+        if (stringValue != null) {\n+          // Fold String(a) to '' + (a) on immutable literals,\n+          // which allows further optimizations\n+          //\n+          // We can't do this in the general case, because String(a) has\n+          // slightly different semantics than '' + (a). See\n+          // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+          Node addition = IR.string(\"\").srcref(callTarget);\n+          addition.addChildToFront(IR.string(stringValue).srcref(callTarget));\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n       }\n     }\n     return n;\n   }\n+  \n+  private String getStringValue(Node node) {\n+    if (node.isString()) {\n+        return node.getString();\n+    }\n+    if (isNumber(node)) {\n+        return NodeUtil.getNumberStringValue(node);\n+    }\n+    return null;\n+  }\n+  \n+  private boolean isNumber(Node node) {\n+    return node.isNumber() || node.isBigInt();\n+  }\n \n   private Node tryFoldImmediateCallToBoundFunction(Node n) {\n     // Rewriting \"(fn.bind(a,b))()\" to \"fn.call(a,b)\" makes it inlinable",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}