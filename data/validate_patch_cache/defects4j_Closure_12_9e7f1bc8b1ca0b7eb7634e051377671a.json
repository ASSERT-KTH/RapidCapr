{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    for (CfgEdge outEdge : cfgNode.getOutEdges()) {\n      // Don't count catch blocks as exception handlers.\n      if (outEdge.getType() == CfgEdge.EdgeType.EXCEPTION &&\n          !outEdge.getDest().isFunctionBoundary()) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..810c3899 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -155,8 +155,17 @@ class MaybeReachingVariableUse extends\n \n     return output;\n   }\n-\n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    for (CfgEdge outEdge : cfgNode.getOutEdges()) {\n+      // Don't count catch blocks as exception handlers.\n+      if (outEdge.getType() == CfgEdge.EdgeType.EXCEPTION &&\n+          !outEdge.getDest().isFunctionBoundary()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}