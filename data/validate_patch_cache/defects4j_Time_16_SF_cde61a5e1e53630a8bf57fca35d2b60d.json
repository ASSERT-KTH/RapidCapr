{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = null;\n    \n    // Check if zone is specified in input text\n    boolean isInputZoneParsed = false;\n    int offset = 0;\n    if (iZone != null) {\n        zone = iZone;\n    } else if (iOffsetParsed) {\n        isInputZoneParsed = true;\n    }\n\n    // If zone not specified, use instant's zone\n    if (zone == null) {\n        zone = chrono.getZone();\n    }\n\n    ZoneReplacingChronology zChrono = new ZoneReplacingChronology(\n        chrono, zone, isInputZoneParsed, iDefaultYear);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instant.getMillis(), zChrono, iLocale, iPivotYear, iDefaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos < 0) {\n        instant.setMillis(bucket.computeMillis(true, text));\n        instant.setChronology(bucket.getChronology());\n    } else if (isInputZoneParsed && bucket.getOffsetInteger() != null) {\n        offset = bucket.getOffsetInteger().intValue();\n        zone = DateTimeZone.forOffsetMillis(offset);\n        chrono = zChrono.withZone(zone);\n        instant.setChronology(chrono);\n        bucket = new DateTimeParserBucket(\n            instant.getMillis(), chrono, iLocale, iPivotYear, iDefaultYear);\n        newPos = parser.parseInto(bucket, text, position);\n\n        if (newPos < 0) {\n            instant.setMillis(bucket.computeMillis(true, text));\n            instant.setZone(zone);\n            instant.setChronology(chrono);\n        } else {\n            instant.setMillis(bucket.doParseMillis(\n                isInputZoneParsed, offset, zone, text));\n            instant.setChronology(chrono);\n        }\n    } else {\n        instant.setMillis(bucket.doParseMillis(\n            isInputZoneParsed, offset, zone, text));\n        instant.setChronology(bucket.getChronology());\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..f525f3ea 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,35 +694,66 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = null;\n+    \n+    // Check if zone is specified in input text\n+    boolean isInputZoneParsed = false;\n+    int offset = 0;\n+    if (iZone != null) {\n+        zone = iZone;\n+    } else if (iOffsetParsed) {\n+        isInputZoneParsed = true;\n+    }\n+\n+    // If zone not specified, use instant's zone\n+    if (zone == null) {\n+        zone = chrono.getZone();\n+    }\n+\n+    ZoneReplacingChronology zChrono = new ZoneReplacingChronology(\n+        chrono, zone, isInputZoneParsed, iDefaultYear);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instant.getMillis(), zChrono, iLocale, iPivotYear, iDefaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos < 0) {\n+        instant.setMillis(bucket.computeMillis(true, text));\n+        instant.setChronology(bucket.getChronology());\n+    } else if (isInputZoneParsed && bucket.getOffsetInteger() != null) {\n+        offset = bucket.getOffsetInteger().intValue();\n+        zone = DateTimeZone.forOffsetMillis(offset);\n+        chrono = zChrono.withZone(zone);\n         instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        bucket = new DateTimeParserBucket(\n+            instant.getMillis(), chrono, iLocale, iPivotYear, iDefaultYear);\n+        newPos = parser.parseInto(bucket, text, position);\n+\n+        if (newPos < 0) {\n+            instant.setMillis(bucket.computeMillis(true, text));\n+            instant.setZone(zone);\n+            instant.setChronology(chrono);\n+        } else {\n+            instant.setMillis(bucket.doParseMillis(\n+                isInputZoneParsed, offset, zone, text));\n+            instant.setChronology(chrono);\n         }\n-        return newPos;\n+    } else {\n+        instant.setMillis(bucket.doParseMillis(\n+            isInputZoneParsed, offset, zone, text));\n+        instant.setChronology(bucket.getChronology());\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}