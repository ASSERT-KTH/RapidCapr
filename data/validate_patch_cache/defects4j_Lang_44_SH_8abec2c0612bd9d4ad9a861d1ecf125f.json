{
    "patch": "\npublic static boolean isAvailableLocale(Locale locale) {\n    return availableLocaleList().contains(locale);\n}\n\nprivate static List<Locale> availableLocaleList() {\n    if (cAvailableLocaleList != null) {\n        return cAvailableLocaleList;\n    }\n    List<Locale> list = new LinkedList<>();\n    String[] locales = Locale.getISOLanguages();\n    for (String locale : locales) {\n        Locale loc = new Locale(locale);\n        if (LocaleUtils.isAvailableLocale(loc)) {\n            list.add(loc);\n        }\n    }\n    cAvailableLocaleList = Collections.unmodifiableList(list);\n    return cAvailableLocaleList;\n}\n\npublic static boolean isAvailableLocale(Locale locale) {\n    return cAvailableLocaleSet.contains(locale);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..a63b65d0 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,30 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+\n+public static boolean isAvailableLocale(Locale locale) {\n+    return availableLocaleList().contains(locale);\n+}\n+\n+private static List<Locale> availableLocaleList() {\n+    if (cAvailableLocaleList != null) {\n+        return cAvailableLocaleList;\n+    }\n+    List<Locale> list = new LinkedList<>();\n+    String[] locales = Locale.getISOLanguages();\n+    for (String locale : locales) {\n+        Locale loc = new Locale(locale);\n+        if (LocaleUtils.isAvailableLocale(loc)) {\n+            list.add(loc);\n+        }\n+    }\n+    cAvailableLocaleList = Collections.unmodifiableList(list);\n+    return cAvailableLocaleList;\n+}\n+\n+public static boolean isAvailableLocale(Locale locale) {\n+    return cAvailableLocaleSet.contains(locale);\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}