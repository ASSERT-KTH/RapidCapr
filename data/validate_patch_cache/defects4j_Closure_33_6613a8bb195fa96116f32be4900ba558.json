{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph;\nimport com.google.javascript.rhino.Node;\n\nimport java.util.List;\n\n// ...\n\nprivate boolean hasExceptionHandler(Node cfgNode) {\n  LinkedDirectedGraph<Node, Branch> cfg = getCfg();\n  List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n    if (edge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..7f9d44bf 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -552,30 +552,22 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n-\n-    // Handle the case where the constraint object is a record type.\n-    //\n-    // param constraintObj {{prop: (number|undefined)}}\n-    // function f(constraintObj) {}\n-    // f({});\n-    //\n-    // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n-    // properties on this object.\n-    if (constraintObj.isRecordType()) {\n-      for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n-        if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n-          if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n-          }\n-          defineInferredProperty(prop, typeToInfer, null);\n-        }\n-      }\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.List;\n+\n+// ...\n+\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  LinkedDirectedGraph<Node, Branch> cfg = getCfg();\n+  List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+    if (edge.getValue() == Branch.ON_EX) {\n+      return true;\n     }\n   }\n+  return false;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}