{
    "patch": "        } else if (parent.isCall() && parent.getFirstChild() == n) {\n          // The lhs of the assignment is the callee, so it's used by the context. Don't\n          // associate it w/ the rhs.\n          // FYI: this fixes only the specific case where the lhs is the callee expression,\n          // but it could be nested deeper in the callee and we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(nameNode, ns);\n        } else {\n          recordDepScope(recordNode, ns);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..7c9e0e58 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,16 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n+        } else if (parent.isCall() && parent.getFirstChild() == n) {\n+          // The lhs of the assignment is the callee, so it's used by the context. Don't\n+          // associate it w/ the rhs.\n+          // FYI: this fixes only the specific case where the lhs is the callee expression,\n+          // but it could be nested deeper in the callee and we would still get a bug.\n+          // See testAssignWithCall2 for an example of this.\n+          recordDepScope(nameNode, ns);\n         } else {\n+          recordDepScope(recordNode, ns);\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}