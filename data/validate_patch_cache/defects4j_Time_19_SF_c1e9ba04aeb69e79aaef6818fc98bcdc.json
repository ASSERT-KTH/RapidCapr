{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n\n    // If local datetime is out of range\n    if (getID().charAt(0) == '+' || getID().charAt(0) == '-') {\n        return offsetLocal;\n    }\n\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetLocal == offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    final long nextLocal = nextTransition(instantAdjusted);\n    // long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n    final long nextAdjusted = nextTransition(instantLocal);\n\n    if (nextLocal == instantAdjusted) {\n        // There is a DST gap and we are in it.\n        return offsetLocal;\n    } else if (nextAdjusted <= instantAdjusted) {\n        // We are in a DST overlap.\n        final long nextAdjusted2 = nextTransition(nextAdjusted - 1);\n        if (nextAdjusted2 == nextLocal) {\n            // Overlap is simple - just use the offsetBefore\n            return offsetBefore;\n        }\n        // Overlap is more complex - find out our position in it.\n        final long midPoint = instantAdjusted + (nextAdjusted - instantAdjusted) / 2;\n        int offsetMid = getOffset(midPoint);\n        return (offsetMid == offsetLocal ? offsetBefore : offsetMid);\n    } else {\n        // We are in normal (non-DST) time, but the zone info differs, so we need to adjust the result.\n        if (nextLocal - instantAdjusted < offsetLocal - offsetAdjusted) {\n            return offsetBefore;\n        } else {\n            return offsetAfter;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..0efab6ef 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+\n+    // If local datetime is out of range\n+    if (getID().charAt(0) == '+' || getID().charAt(0) == '-') {\n+        return offsetLocal;\n+    }\n+\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetLocal == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+\n+    final long nextLocal = nextTransition(instantAdjusted);\n+    // long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+    final long nextAdjusted = nextTransition(instantLocal);\n+\n+    if (nextLocal == instantAdjusted) {\n+        // There is a DST gap and we are in it.\n+        return offsetLocal;\n+    } else if (nextAdjusted <= instantAdjusted) {\n+        // We are in a DST overlap.\n+        final long nextAdjusted2 = nextTransition(nextAdjusted - 1);\n+        if (nextAdjusted2 == nextLocal) {\n+            // Overlap is simple - just use the offsetBefore\n+            return offsetBefore;\n+        }\n+        // Overlap is more complex - find out our position in it.\n+        final long midPoint = instantAdjusted + (nextAdjusted - instantAdjusted) / 2;\n+        int offsetMid = getOffset(midPoint);\n+        return (offsetMid == offsetLocal ? offsetBefore : offsetMid);\n+    } else {\n+        // We are in normal (non-DST) time, but the zone info differs, so we need to adjust the result.\n+        if (nextLocal - instantAdjusted < offsetLocal - offsetAdjusted) {\n+            return offsetBefore;\n+        } else {\n+            return offsetAfter;\n         }\n-        return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}