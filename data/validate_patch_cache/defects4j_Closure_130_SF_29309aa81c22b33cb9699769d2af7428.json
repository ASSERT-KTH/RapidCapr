{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        boolean canInlineLocalAlias = true;\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            Name aliasName = ref.getSymbol();\n            if (aliasName.globalSets != 0 || aliasName.localSets != 1 || !aliasName.getDeclaration().getParent().isFunctionBlockScope()) {\n              canInlineLocalAlias = false;\n              break;\n            }\n          }\n        }\n        if (canInlineLocalAlias) {\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n              Name aliasName = ref.getSymbol();\n              if (inlineLocalAliasIfPossible(name, aliasName)) {\n                Namespace ns = namespace.getSlot(aliasName.getFullName());\n                ns.remove(aliasName);\n                name.removeRef(ref);\n              }\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..e9350cef 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,16 +169,29 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        boolean canInlineLocalAlias = true;\n+        for (Ref ref : name.getRefs()) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+            // {@code name} meets condition (c).\n+            Name aliasName = ref.getSymbol();\n+            if (aliasName.globalSets != 0 || aliasName.localSets != 1 || !aliasName.getDeclaration().getParent().isFunctionBlockScope()) {\n+              canInlineLocalAlias = false;\n+              break;\n+            }\n+          }\n+        }\n+        if (canInlineLocalAlias) {\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+              Name aliasName = ref.getSymbol();\n+              if (inlineLocalAliasIfPossible(name, aliasName)) {\n+                Namespace ns = namespace.getSlot(aliasName.getFullName());\n+                ns.remove(aliasName);\n+                name.removeRef(ref);\n+              }\n             }\n           }\n         }\n@@ -186,11 +199,8 @@ class CollapseProperties implements CompilerPass {\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n+      if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be added to the worklist.\n         workList.addAll(name.props);\n       }\n     }",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}