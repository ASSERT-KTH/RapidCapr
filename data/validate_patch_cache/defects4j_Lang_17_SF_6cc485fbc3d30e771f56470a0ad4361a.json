{
    "patch": "    public static String unescape(String str) {\n        if (str == null) {\n            return null;\n        }\n        int strlen = str.length();\n        StringBuilder sb = new StringBuilder(strlen);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        int unicode = 0;\n        for (int i = 0; i < strlen; i++) {\n            char ch = str.charAt(i);\n            if (inUnicode) {\n                int digit = Character.digit(ch, 16);\n                if (digit < 0) {\n                    inUnicode = false;\n                    i--;\n                }\n                else {\n                    unicode = (unicode << 4) + digit;\n                    if (++unicode == 0) {\n                        throw new IllegalArgumentException(\"Invalid unicode character\");\n                    }\n                }\n            }\n            else if (hadSlash) {\n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        sb.append('\\\\');\n                        break;\n                    case '\\'':\n                        sb.append('\\'');\n                        break;\n                    case '\\\"':\n                        sb.append('\"');\n                        break;\n                    case 'r':\n                        sb.append('\\r');\n                        break;\n                    case 'f':\n                        sb.append('\\f');\n                        break;\n                    case 't':\n                        sb.append('\\t');\n                        break;\n                    case 'n':\n                        sb.append('\\n');\n                        break;\n                    case 'b':\n                        sb.append('\\b');\n                        break;\n                    case 'u':\n                        inUnicode = true;\n                        unicode = 0;\n                        break;\n                    default:\n                        throw new IllegalArgumentException(\"Illegal escape character\");\n                }\n            }\n            else if (ch == '\\\\') {\n                hadSlash = true;\n            }\n            else {\n                sb.append(ch);\n            }\n        }\n        if (hadSlash) {\n            sb.append('\\\\');\n        }\n        return sb.toString();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..0e60affa 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,35 +72,76 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n+    public static String unescape(String str) {\n+        if (str == null) {\n+            return null;\n         }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n+        int strlen = str.length();\n+        StringBuilder sb = new StringBuilder(strlen);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        int unicode = 0;\n+        for (int i = 0; i < strlen; i++) {\n+            char ch = str.charAt(i);\n+            if (inUnicode) {\n+                int digit = Character.digit(ch, 16);\n+                if (digit < 0) {\n+                    inUnicode = false;\n+                    i--;\n+                }\n+                else {\n+                    unicode = (unicode << 4) + digit;\n+                    if (++unicode == 0) {\n+                        throw new IllegalArgumentException(\"Invalid unicode character\");\n                     }\n                 }\n-                pos--;\n             }\n-            pos++;\n+            else if (hadSlash) {\n+                hadSlash = false;\n+                switch (ch) {\n+                    case '\\\\':\n+                        sb.append('\\\\');\n+                        break;\n+                    case '\\'':\n+                        sb.append('\\'');\n+                        break;\n+                    case '\\\"':\n+                        sb.append('\"');\n+                        break;\n+                    case 'r':\n+                        sb.append('\\r');\n+                        break;\n+                    case 'f':\n+                        sb.append('\\f');\n+                        break;\n+                    case 't':\n+                        sb.append('\\t');\n+                        break;\n+                    case 'n':\n+                        sb.append('\\n');\n+                        break;\n+                    case 'b':\n+                        sb.append('\\b');\n+                        break;\n+                    case 'u':\n+                        inUnicode = true;\n+                        unicode = 0;\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Illegal escape character\");\n+                }\n+            }\n+            else if (ch == '\\\\') {\n+                hadSlash = true;\n+            }\n+            else {\n+                sb.append(ch);\n+            }\n+        }\n+        if (hadSlash) {\n+            sb.append('\\\\');\n         }\n+        return sb.toString();\n     }\n \n     /**",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}