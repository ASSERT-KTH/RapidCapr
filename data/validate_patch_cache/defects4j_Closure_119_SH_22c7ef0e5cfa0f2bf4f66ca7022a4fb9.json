{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.CATCH:\n              case Token.FUNCTION:\n              case Token.SCRIPT:\n              case Token.MODULE_BODY:\n                if (NodeUtil.isFunctionExpression(parent)) {\n                  // We ignore assignments to function expressions,\n                  // because we handle the function declaration separately.\n                  return;\n                }\n>>> [ INFILL ] <<<\n                if (isGlobalScope(scope)) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else {\n                  handleSetFromLocal(module, scope, n, parent, name);\n                }\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.OBJECTLIT:\n                if (parent.getParent().getType() == Token.CALL) {\n                  return;\n                }\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..e2c9d5b0 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -364,6 +364,69 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.CATCH:\n+              case Token.FUNCTION:\n+              case Token.SCRIPT:\n+              case Token.MODULE_BODY:\n+                if (NodeUtil.isFunctionExpression(parent)) {\n+                  // We ignore assignments to function expressions,\n+                  // because we handle the function declaration separately.\n+                  return;\n+                }\n+>>> [ INFILL ] <<<\n+                if (isGlobalScope(scope)) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else {\n+                  handleSetFromLocal(module, scope, n, parent, name);\n+                }\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              case Token.OBJECTLIT:\n+                if (parent.getParent().getType() == Token.CALL) {\n+                  return;\n+                }\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}