{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) && (n.getChildCount() <= 1 || isOnlyEmptyStatement(n));\n  }\n  \n  private boolean isOnlyEmptyStatement(Node n) {\n      if (n.getType() != Token.BLOCK) {\n          return n.getType() == Token.EMPTY;\n      }\n      if (n.getChildCount() != 1) {\n          return false;\n      }\n      Node child = n.getFirstChild();\n      return isOnlyEmptyStatement(child);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..b32e65e4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,18 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) && (n.getChildCount() <= 1 || isOnlyEmptyStatement(n));\n+  }\n+  \n+  private boolean isOnlyEmptyStatement(Node n) {\n+      if (n.getType() != Token.BLOCK) {\n+          return n.getType() == Token.EMPTY;\n+      }\n+      if (n.getChildCount() != 1) {\n+          return false;\n+      }\n+      Node child = n.getFirstChild();\n+      return isOnlyEmptyStatement(child);\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}