{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Create a list of all args that are reachable from the ARGUMENT_LIST\n    // of the function.\n    List<Node> reachableArgs = new ArrayList<>();\n    for (Node arg : argList.children()) {\n      String argName = arg.getString();\n      Var var = fnScope.getVar(argName);\n      if (referenced.contains(var)) {\n        reachableArgs.add(arg);\n      }\n    }\n\n    if (reachableArgs.size() == argList.getChildCount()) {\n      // All function parameters are used, nothing to do\n      return;\n    }\n\n    // Preserve the necessary arguments but remove any trailing unused ones\n    int lastIndex = -1;\n    for (int i = 0; i < reachableArgs.size(); i++) {\n      Node arg = reachableArgs.get(i);\n      argList.removeChild(arg);\n      lastIndex = argList.getIndexOfChild(arg);\n    }\n\n    for (int i = argList.getChildCount() - 1; i > lastIndex; i--) {\n      argList.removeChild(argList.getLastChild());\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {\n      // Optimize all call sites.\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..29edf675 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Create a list of all args that are reachable from the ARGUMENT_LIST\n+    // of the function.\n+    List<Node> reachableArgs = new ArrayList<>();\n+    for (Node arg : argList.children()) {\n+      String argName = arg.getString();\n+      Var var = fnScope.getVar(argName);\n+      if (referenced.contains(var)) {\n+        reachableArgs.add(arg);\n+      }\n+    }\n+\n+    if (reachableArgs.size() == argList.getChildCount()) {\n+      // All function parameters are used, nothing to do\n+      return;\n+    }\n+\n+    // Preserve the necessary arguments but remove any trailing unused ones\n+    int lastIndex = -1;\n+    for (int i = 0; i < reachableArgs.size(); i++) {\n+      Node arg = reachableArgs.get(i);\n+      argList.removeChild(arg);\n+      lastIndex = argList.getIndexOfChild(arg);\n+    }\n+\n+    for (int i = argList.getChildCount() - 1; i > lastIndex; i--) {\n+      argList.removeChild(argList.getLastChild());\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n+      // Optimize all call sites.\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}