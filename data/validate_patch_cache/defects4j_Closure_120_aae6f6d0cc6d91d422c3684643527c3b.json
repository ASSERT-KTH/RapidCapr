{
    "patch": "      for (BasicBlock block = ref.getBasicBlock();\n           block != null; block = block.getParent()) {\n        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          return false;\n        } else if (block.getPredecessors().size() != 1) {\n          return false;\n        } else {\n          List<DiGraphEdge<Node, Branch>> edges = block.getOutEdges();\n          if (edges.size() > 1) {\n            return false;\n          } else if (edges.size() == 1) {\n            Branch branch = edges.get(0).getValue();\n            if (branch == Branch.UNCOND || branch == Branch.TRUE) {\n              BasicBlock successor = edges.get(0).getDestination();\n              if (successor.getFirstStatement() instanceof AstLoopNode) {\n                return false;\n              }\n            } else if (branch == Branch.ON_EX) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1450fe46 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,31 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      for (BasicBlock block = ref.getBasicBlock();\n+           block != null; block = block.getParent()) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          return false;\n+        } else if (block.getPredecessors().size() != 1) {\n+          return false;\n+        } else {\n+          List<DiGraphEdge<Node, Branch>> edges = block.getOutEdges();\n+          if (edges.size() > 1) {\n+            return false;\n+          } else if (edges.size() == 1) {\n+            Branch branch = edges.get(0).getValue();\n+            if (branch == Branch.UNCOND || branch == Branch.TRUE) {\n+              BasicBlock successor = edges.get(0).getDestination();\n+              if (successor.getFirstStatement() instanceof AstLoopNode) {\n+                return false;\n+              }\n+            } else if (branch == Branch.ON_EX) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable block is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}