{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      Set<String> declaredLocalVars = new HashSet<>();\n      for (Node astParameter : astParameters.children()) {\n        if (jsDocParameter != null) {\n          // Check for duplicate local variable declarations\n          String name = astParameter.getString();\n          if (!declaredLocalVars.contains(name)) {\n            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), jsDocParameter.hasMoreThanOneChild());\n            declaredLocalVars.add(name);\n          }\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..3e0d727f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,31 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Node jsDocParameter = jsDocParameters.getFirstChild();\n+      Set<String> declaredLocalVars = new HashSet<>();\n+      for (Node astParameter : astParameters.children()) {\n+        if (jsDocParameter != null) {\n+          // Check for duplicate local variable declarations\n+          String name = astParameter.getString();\n+          if (!declaredLocalVars.contains(name)) {\n+            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), jsDocParameter.hasMoreThanOneChild());\n+            declaredLocalVars.add(name);\n+          }\n+          jsDocParameter = jsDocParameter.getNext();\n+        } else {\n+          defineSlot(astParameter, functionNode, null, true);\n+        }\n+      }\n+    }\n+  }\n+} // end declareArguments\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}