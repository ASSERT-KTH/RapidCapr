{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            // if multiple variables can take a given value \n            // then we choose the first and set the rest equal to 0\n            coefficients[i] =\n                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                            (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                double pivot = tableau.getEntry(basicRow, getNumObjectiveFunctions() + i);\n                if (Math.abs(pivot - 1.0) > EPSILON) {\n                    coefficients[i] /= pivot;\n                    for (int j = getNumObjectiveFunctions() + i + 1; j < tableau.getWidth(); j++) {\n                        tableau.setEntry(basicRow, j, tableau.getEntry(basicRow, j) / pivot);\n                    }\n                }\n                for (int j = 0; j < basicRow; j++) {\n                    double ratio = tableau.getEntry(j, getNumObjectiveFunctions() + i);\n                    if (Math.abs(ratio) > EPSILON) {\n                        coefficients[i] -= ratio * coefficients[getOriginalNumDecisionVariables() + j];\n                        for (int k = getNumObjectiveFunctions() + i + 1; k < tableau.getWidth(); k++) {\n                            tableau.setEntry(j, k, tableau.getEntry(j, k) - ratio * tableau.getEntry(basicRow, k));\n                        }\n                        tableau.setEntry(j, getNumObjectiveFunctions() + i, 0.0);\n                    }\n                }\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..039c198ee 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -328,15 +328,27 @@ class SimplexTableau implements Serializable {\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n+            // if multiple variables can take a given value \n+            // then we choose the first and set the rest equal to 0\n+            coefficients[i] =\n                     (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+                            (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                double pivot = tableau.getEntry(basicRow, getNumObjectiveFunctions() + i);\n+                if (Math.abs(pivot - 1.0) > EPSILON) {\n+                    coefficients[i] /= pivot;\n+                    for (int j = getNumObjectiveFunctions() + i + 1; j < tableau.getWidth(); j++) {\n+                        tableau.setEntry(basicRow, j, tableau.getEntry(basicRow, j) / pivot);\n+                    }\n+                }\n+                for (int j = 0; j < basicRow; j++) {\n+                    double ratio = tableau.getEntry(j, getNumObjectiveFunctions() + i);\n+                    if (Math.abs(ratio) > EPSILON) {\n+                        coefficients[i] -= ratio * coefficients[getOriginalNumDecisionVariables() + j];\n+                        for (int k = getNumObjectiveFunctions() + i + 1; k < tableau.getWidth(); k++) {\n+                            tableau.setEntry(j, k, tableau.getEntry(j, k) - ratio * tableau.getEntry(basicRow, k));\n+                        }\n+                        tableau.setEntry(j, getNumObjectiveFunctions() + i, 0.0);\n                     }\n                 }\n             }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}