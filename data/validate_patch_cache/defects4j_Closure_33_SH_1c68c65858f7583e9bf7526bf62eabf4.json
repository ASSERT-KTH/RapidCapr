{
    "patch": "    if (!(constraintObj instanceof NamedType)) {\n      return;\n    }\n    NamedType namedType = (NamedType) constraintObj;\n    ObjectType protoType = namedType.getPrototypeObject();\n    if (protoType.isRecordType()) {\n      for (String prop : protoType.getOwnPropertyNames()) {\n        JSType propType = protoType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..a78a0435 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,24 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (!(constraintObj instanceof NamedType)) {\n+      return;\n+    }\n+    NamedType namedType = (NamedType) constraintObj;\n+    ObjectType protoType = namedType.getPrototypeObject();\n+    if (protoType.isRecordType()) {\n+      for (String prop : protoType.getOwnPropertyNames()) {\n+        JSType propType = protoType.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}