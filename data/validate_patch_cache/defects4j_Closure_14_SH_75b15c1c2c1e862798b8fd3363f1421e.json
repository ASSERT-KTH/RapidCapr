{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          if (cfa != null) {\n            List<Node> succs = cfa.getCfg().getSuccessors(node);\n            if (succs.isEmpty()) {\n              return null;\n            } else {\n              return succs.get(0);\n            }\n          } else {\n            return null;\n          }\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..85d0b111 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -767,6 +767,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n+          if (cfa != null) {\n+            List<Node> succs = cfa.getCfg().getSuccessors(node);\n+            if (succs.isEmpty()) {\n+              return null;\n+            } else {\n+              return succs.get(0);\n+            }\n+          } else {\n+            return null;\n+          }\n+        }\n+    }\n+            }\n+          }\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n     }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}