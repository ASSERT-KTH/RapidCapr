{
    "patch": "protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0);\n\n        // positive cost non-artificial variables\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        for (int i = getArtificialVariableOffset() - 1; i < getWidth() - 1; i++) {\n            if (Precision.compareTo(tableau.getEntry(0, i), 0d, maxUlps) == 0) {\n                int row = -1;\n                for (int j = 1; j < getHeight(); j++) {\n                    final double entry = tableau.getEntry(j, i);\n                    if (Precision.compareTo(entry, 1d, maxUlps) == 0) {\n                        if (row == -1) {\n                            row = j;\n                        } else {\n                            row = -1; // multiple non-zero entries in the column, can't drop\n                            break;\n                        }\n                    } else if (Precision.compareTo(entry, 0d, maxUlps) != 0) {\n                        row = -1; // non-zero entry in the column, can't drop\n                        break;\n                    }\n                }\n                if (row != -1) {\n                    columnsToDrop.add(i);\n                }\n            }\n        }\n\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            final int idx = columnsToDrop.get(i);\n            if (idx < getArtificialVariableOffset()) {\n                columnLabels.remove(idx - 1);\n            } else {\n                columnLabels.remove(idx - getNumArtificialVariables() - 1); // remove artificial variable label\n            }\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..8f18309f9 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,7 +324,7 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n+protected void dropPhase1Objective() {\n         if (getNumObjectiveFunctions() == 1) {\n             return;\n         }\n@@ -341,25 +341,46 @@ class SimplexTableau implements Serializable {\n         }\n \n         // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n+        for (int i = getArtificialVariableOffset() - 1; i < getWidth() - 1; i++) {\n+            if (Precision.compareTo(tableau.getEntry(0, i), 0d, maxUlps) == 0) {\n+                int row = -1;\n+                for (int j = 1; j < getHeight(); j++) {\n+                    final double entry = tableau.getEntry(j, i);\n+                    if (Precision.compareTo(entry, 1d, maxUlps) == 0) {\n+                        if (row == -1) {\n+                            row = j;\n+                        } else {\n+                            row = -1; // multiple non-zero entries in the column, can't drop\n+                            break;\n+                        }\n+                    } else if (Precision.compareTo(entry, 0d, maxUlps) != 0) {\n+                        row = -1; // non-zero entry in the column, can't drop\n+                        break;\n+                    }\n+                }\n+                if (row != -1) {\n+                    columnsToDrop.add(i);\n+                }\n+            }\n         }\n \n         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n         for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+            int col = 0;\n+            for (int j = 0; j < getWidth(); j++) {\n+                if (!columnsToDrop.contains(j)) {\n+                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n+                }\n             }\n-          }\n         }\n \n         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+            final int idx = columnsToDrop.get(i);\n+            if (idx < getArtificialVariableOffset()) {\n+                columnLabels.remove(idx - 1);\n+            } else {\n+                columnLabels.remove(idx - getNumArtificialVariables() - 1); // remove artificial variable label\n+            }\n         }\n \n         this.tableau = new Array2DRowRealMatrix(matrix);",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_result": "FAIL"
}