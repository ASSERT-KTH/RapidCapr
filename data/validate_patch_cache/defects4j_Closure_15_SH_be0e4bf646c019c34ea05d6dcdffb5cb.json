{
    "patch": "if (n.isCall() || n.isNew()) {\n    if (mayHaveSideEffects(n)) {\n        return true;\n    } else if (n.isCall()) {\n        // If the function being called may have no side effects, but it is unknown,\n        // treat it as though it may have side effects.\n        if (unknownSideEffectFreeCalls.contains(simpleFunctionName(n))) {\n            return true;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..2de4cee9 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isCall() || n.isNew()) {\n+    if (mayHaveSideEffects(n)) {\n+        return true;\n+    } else if (n.isCall()) {\n+        // If the function being called may have no side effects, but it is unknown,\n+        // treat it as though it may have side effects.\n+        if (unknownSideEffectFreeCalls.contains(simpleFunctionName(n))) {\n+            return true;\n+        }\n+    }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}