{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        // Use the Unknown type if the constructor type is unknown\n        type = getJsScope().getDeclaredTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else {\n          // Use the Object type if the constructor is not a constructor function\n          type = getJsScope().getDeclaredTypeRegistry().getNativeType(JSTypeNative.OBJECT_TYPE);\n        }\n      }\n    }\n\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..6cc3c9e0 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,7 +1031,6 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n@@ -1041,7 +1040,8 @@ class TypeInference\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+        // Use the Unknown type if the constructor type is unknown\n+        type = getJsScope().getDeclaredTypeRegistry().getNativeType(JSTypeNative.UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n@@ -1052,9 +1052,13 @@ class TypeInference\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else {\n+          // Use the Object type if the constructor is not a constructor function\n+          type = getJsScope().getDeclaredTypeRegistry().getNativeType(JSTypeNative.OBJECT_TYPE);\n         }\n       }\n     }\n+\n     n.setJSType(type);\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}