{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    // Compute base year if parsing date with incomplete set of fields\n    if (count > 0) {\n        DateTimeFieldType firstType = savedFields[0].iField.getType();\n        if (firstType == DateTimeFieldType.monthOfYear() || firstType == DateTimeFieldType.dayOfMonth()) {\n            long millis = iMillis;\n            int year = iDefaultYear;\n            DurationField years = DurationFieldType.years().getField(iChrono);\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            long yearDuration = years.getUnitMillis();\n            long monthDuration = months.getUnitMillis();\n            long dayDuration = days.getUnitMillis();\n            long firstValue = savedFields[0].iValue;\n            int firstCount = 1;\n            // Count number of month/day fields in the list of saved fields\n            for (int i = 1; i < count; i++) {\n                DurationField field = savedFields[i].iField.getDurationField();\n                if (field == months || field == days) {\n                    firstCount++;\n                } else {\n                    break;\n                }\n            }\n            // Compute base year from year/month/day values\n            if (firstCount >= 2) {\n                long secondValue = savedFields[1].iValue;\n                Chronology chrono = iChrono.withUTC();\n                long yearMillis = 0;\n                if (firstType == DateTimeFieldType.monthOfYear()) {\n                    yearMillis = chrono.monthOfYear().set(0, firstValue)\n                            .dayOfMonth().set(0, secondValue)\n                            .millisOfDay().set(0, 0);\n                } else { // DateTimeFieldType.dayOfMonth()\n                    yearMillis = chrono.dayOfMonth().set(0, firstValue)\n                            .monthOfYear().set(0, secondValue)\n                            .millisOfDay().set(0, 0);\n                }\n                year = chrono.year().get(yearMillis);\n            }\n            // Save base year\n            saveField(DateTimeFieldType.year(), year);\n            // Remove year/month/day fields from the list of saved fields\n            int newCount = count - firstCount;\n            System.arraycopy(savedFields, firstCount, savedFields, 0, newCount);\n            count = newCount;\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..98d15fe0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,92 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    // Compute base year if parsing date with incomplete set of fields\n+    if (count > 0) {\n+        DateTimeFieldType firstType = savedFields[0].iField.getType();\n+        if (firstType == DateTimeFieldType.monthOfYear() || firstType == DateTimeFieldType.dayOfMonth()) {\n+            long millis = iMillis;\n+            int year = iDefaultYear;\n+            DurationField years = DurationFieldType.years().getField(iChrono);\n             DurationField months = DurationFieldType.months().getField(iChrono);\n             DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+            long yearDuration = years.getUnitMillis();\n+            long monthDuration = months.getUnitMillis();\n+            long dayDuration = days.getUnitMillis();\n+            long firstValue = savedFields[0].iValue;\n+            int firstCount = 1;\n+            // Count number of month/day fields in the list of saved fields\n+            for (int i = 1; i < count; i++) {\n+                DurationField field = savedFields[i].iField.getDurationField();\n+                if (field == months || field == days) {\n+                    firstCount++;\n+                } else {\n+                    break;\n+                }\n             }\n+            // Compute base year from year/month/day values\n+            if (firstCount >= 2) {\n+                long secondValue = savedFields[1].iValue;\n+                Chronology chrono = iChrono.withUTC();\n+                long yearMillis = 0;\n+                if (firstType == DateTimeFieldType.monthOfYear()) {\n+                    yearMillis = chrono.monthOfYear().set(0, firstValue)\n+                            .dayOfMonth().set(0, secondValue)\n+                            .millisOfDay().set(0, 0);\n+                } else { // DateTimeFieldType.dayOfMonth()\n+                    yearMillis = chrono.dayOfMonth().set(0, firstValue)\n+                            .monthOfYear().set(0, secondValue)\n+                            .millisOfDay().set(0, 0);\n+                }\n+                year = chrono.year().get(yearMillis);\n+            }\n+            // Save base year\n+            saveField(DateTimeFieldType.year(), year);\n+            // Remove year/month/day fields from the list of saved fields\n+            int newCount = count - firstCount;\n+            System.arraycopy(savedFields, firstCount, savedFields, 0, newCount);\n+            count = newCount;\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: no suitable method found for set(int,long)",
    "test_result": "ERROR"
}