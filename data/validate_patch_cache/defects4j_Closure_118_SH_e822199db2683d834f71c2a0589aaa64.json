{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        if (!child.isString()) {\n          if (child.isGetProp() || child.isSetProp()) {\n            handleObjectLitProperty(t, child);\n          }\n          continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }\n\n    private void handleObjectLitProperty(NodeTraversal t, Node n) {\n      if (n.isString()) {\n        String propName = n.getString();\n        Property prop = getProperty(propName);\n        if (prop != null) {\n          prop.setDeclared();\n        }\n        return;\n      }\n      Node getProp = n.getFirstChild();\n      Node propNameNode = getProp.getNext();\n      if (!propNameNode.isString()) {\n        throw new RuntimeException(\"ObjectLit property must be a string.\");\n      }\n      String propName = propNameNode.getString();\n      Property prop = getProperty(propName);\n      if (prop != null) {\n        prop.setDeclared();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..9d95994f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,56 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        if (!child.isString()) {\n+          if (child.isGetProp() || child.isSetProp()) {\n+            handleObjectLitProperty(t, child);\n+          }\n+          continue;\n+        }\n+\n+        // We should never see a mix of numbers and strings.\n+        String name = child.getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+      }\n+    }\n+\n+    private void handleObjectLitProperty(NodeTraversal t, Node n) {\n+      if (n.isString()) {\n+        String propName = n.getString();\n+        Property prop = getProperty(propName);\n+        if (prop != null) {\n+          prop.setDeclared();\n+        }\n+        return;\n+      }\n+      Node getProp = n.getFirstChild();\n+      Node propNameNode = getProp.getNext();\n+      if (!propNameNode.isString()) {\n+        throw new RuntimeException(\"ObjectLit property must be a string.\");\n+      }\n+      String propName = propNameNode.getString();\n+      Property prop = getProperty(propName);\n+      if (prop != null) {\n+        prop.setDeclared();\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}