{
    "patch": "int idx = 1;\nwhile (count <= index) {\n    count += idx;\n    ++idx;\n}\n--idx;\ncount -= idx;\n\nfor (int i = last - 1; i >= 0; i--) {\n    indices[i] = count % uniCounterOffset[i];\n    count /= uniCounterOffset[i];\n}\n\nreturn indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..c2e8cab9e 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,20 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int idx = 1;\n+while (count <= index) {\n+    count += idx;\n+    ++idx;\n+}\n+--idx;\n+count -= idx;\n+\n+for (int i = last - 1; i >= 0; i--) {\n+    indices[i] = count % uniCounterOffset[i];\n+    count /= uniCounterOffset[i];\n+}\n+\n+return indices;\n \n         return indices;\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}