{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n          // Do not fold if the expression is a function expression with a RETURN token,\n          // which might be affected by a bug in IE.\n          Node child = maybeExpr.getFirstChild();\n          if (child.getType() == Token.FUNCTION) {\n            Node block = child.getLastChild();\n            if (block != null && block.getType() == Token.BLOCK) {\n              Node last = block.getLastChild();\n              if (last != null && last.getType() == Token.RETURN) {\n                return false;\n              }\n            }\n          }\n\n          // The only legal type of block child is an expression\n          return NodeUtil.isExpressionNode(maybeExpr.getFirstChild());\n        }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b339b445 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,27 +516,33 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild()) {\n+          // Do not fold if the expression is a function expression with a RETURN token,\n+          // which might be affected by a bug in IE.\n+          Node child = maybeExpr.getFirstChild();\n+          if (child.getType() == Token.FUNCTION) {\n+            Node block = child.getLastChild();\n+            if (block != null && block.getType() == Token.BLOCK) {\n+              Node last = block.getLastChild();\n+              if (last != null && last.getType() == Token.RETURN) {\n+                return false;\n+              }\n+            }\n+          }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+          // The only legal type of block child is an expression\n+          return NodeUtil.isExpressionNode(maybeExpr.getFirstChild());\n+        }\n     }\n-\n-    return false;\n   }\n \n+  return false;\n+}\n+\n   /**\n    * @return The expression node.\n    */",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}