{
    "patch": "  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = null;\n      if (type.isFunctionType()) {\n        fnType = type.toMaybeFunctionType();\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n        if (fnType.getReturnType() != null) {\n          ensureTyped(t, n, fnType.getReturnType());\n        } else {\n          ensureTyped(t, n);\n        }\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..f375dd72 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,28 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+  private void visitNew(NodeTraversal t, Node n) {\n+    Node constructor = n.getFirstChild();\n+    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n+    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n+      FunctionType fnType = null;\n+      if (type.isFunctionType()) {\n+        fnType = type.toMaybeFunctionType();\n+        visitParameterList(t, n, fnType);\n+        ensureTyped(t, n, fnType.getInstanceType());\n+        if (fnType.getReturnType() != null) {\n+          ensureTyped(t, n, fnType.getReturnType());\n+        } else {\n+          ensureTyped(t, n);\n+        }\n+      } else {\n+        ensureTyped(t, n);\n+      }\n+    } else {\n+      report(t, n, NOT_A_CONSTRUCTOR);\n+      ensureTyped(t, n);\n+    }\n+  }\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}