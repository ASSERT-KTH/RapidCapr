{
    "patch": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\nMockitoInvocationHandler newFilter = new MockitoHandlerAdapter<T>(newMockHandler);\n((MockitoCore)mockitoCoreField.get(null)).getInvocationHandlerProvider().setMockitoSession(((MockitoSessionExecutor)Mockito.framework().getSession()).getMockitoSession());\nnewMockHandler.setMockitoCore(((MockitoCore)mockitoCoreField.get(null)));\n((Factory) mock).setCallback(newFilter);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..d72514a25 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -61,8 +61,11 @@ public class MockUtil {\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+MockitoInvocationHandler newFilter = new MockitoHandlerAdapter<T>(newMockHandler);\n+((MockitoCore)mockitoCoreField.get(null)).getInvocationHandlerProvider().setMockitoSession(((MockitoSessionExecutor)Mockito.framework().getSession()).getMockitoSession());\n+newMockHandler.setMockitoCore(((MockitoCore)mockitoCoreField.get(null)));\n+((Factory) mock).setCallback(newFilter);\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: no suitable constructor found for MockHandler(MockHandlerInterface<T>,MockSettingsImpl)",
    "test_result": "ERROR"
}