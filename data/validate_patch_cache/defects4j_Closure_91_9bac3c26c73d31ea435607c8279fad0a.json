{
    "patch": "  private static String getBestLValueName(Node n) {\n    String name;\n    if (n.isName()) {\n      name = n.getString();\n    } else if (NodeUtil.isObjectLitKey(n)) {\n      name = NodeUtil.getObjectLitKeyName(n);\n    } else {\n      Node lvalueChild = n.getFirstChild();\n      if (lvalueChild.isName()) {\n        name = lvalueChild.getString();\n      } else {\n        // Could happen if code is passing a nested qualified name as a\n        // variable declaration's name - eg, \"a.b.c = 3;\" where a is assumed to\n        // exist, but a.b might not.\n        name = null;\n      }\n    }\n    return name;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..ad9c892d 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,25 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  private static String getBestLValueName(Node n) {\n+    String name;\n+    if (n.isName()) {\n+      name = n.getString();\n+    } else if (NodeUtil.isObjectLitKey(n)) {\n+      name = NodeUtil.getObjectLitKeyName(n);\n+    } else {\n+      Node lvalueChild = n.getFirstChild();\n+      if (lvalueChild.isName()) {\n+        name = lvalueChild.getString();\n+      } else {\n+        // Could happen if code is passing a nested qualified name as a\n+        // variable declaration's name - eg, \"a.b.c = 3;\" where a is assumed to\n+        // exist, but a.b might not.\n+        name = null;\n+      }\n+    }\n+    return name;\n+ }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}