{
    "patch": "private String getRemainingJSDocLine() {\n  StringBuilder sb = new StringBuilder();\n  while (stream.peek() != null && !stream.isEndOfLine()) {\n    sb.append(stream.advance());\n  }\n  String result = sb.toString().trim();\n  // If we reached the end of the stream, return null\n  if (result.isEmpty() && stream.peek() == null) {\n    return null;\n  } \n  return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..51b3508e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,18 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() {\n+  StringBuilder sb = new StringBuilder();\n+  while (stream.peek() != null && !stream.isEndOfLine()) {\n+    sb.append(stream.advance());\n+  }\n+  String result = sb.toString().trim();\n+  // If we reached the end of the stream, return null\n+  if (result.isEmpty() && stream.peek() == null) {\n+    return null;\n+  } \n+  return result;\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}