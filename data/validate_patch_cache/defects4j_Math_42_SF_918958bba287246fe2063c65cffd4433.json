{
    "patch": "    protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n      // Initialize all coefficients to 0\n      for (int i = 0; i < coefficients.length; i++) {\n        coefficients[i] = 0;\n      }\n\n      // Iterate over the columns of the tableau\n      for (int colIndex = 0; colIndex < columnLabels.size(); colIndex++) {\n          if (columnLabels.get(colIndex).startsWith(\"x\")) {\n              Integer basicRow = getBasicRow(colIndex);\n              if (basicRows.contains(basicRow)) {\n                  // If multiple variables can take a given value,\n                  // then we choose the first and set the rest equal to 0\n                  coefficients[Integer.parseInt(columnLabels.get(colIndex).substring(1))] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n              } else {\n                  basicRows.add(basicRow);\n                  coefficients[Integer.parseInt(columnLabels.get(colIndex).substring(1))] =\n                      (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                      (restrictToNonNegative ? 0 : mostNegative);\n              }\n          }\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..7e62ec42b 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -400,25 +400,26 @@ class SimplexTableau implements Serializable {\n \n       Set<Integer> basicRows = new HashSet<Integer>();\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+      // Initialize all coefficients to 0\n       for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n-            coefficients[i] = 0;\n-            continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+        coefficients[i] = 0;\n+      }\n+\n+      // Iterate over the columns of the tableau\n+      for (int colIndex = 0; colIndex < columnLabels.size(); colIndex++) {\n+          if (columnLabels.get(colIndex).startsWith(\"x\")) {\n+              Integer basicRow = getBasicRow(colIndex);\n+              if (basicRows.contains(basicRow)) {\n+                  // If multiple variables can take a given value,\n+                  // then we choose the first and set the rest equal to 0\n+                  coefficients[Integer.parseInt(columnLabels.get(colIndex).substring(1))] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+              } else {\n+                  basicRows.add(basicRow);\n+                  coefficients[Integer.parseInt(columnLabels.get(colIndex).substring(1))] =\n+                      (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                      (restrictToNonNegative ? 0 : mostNegative);\n+              }\n           }\n       }\n       return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "java.lang.NumberFormatException: For input string: \"-\"",
    "test_result": "FAIL"
}