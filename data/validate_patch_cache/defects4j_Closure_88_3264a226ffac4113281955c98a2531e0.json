{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n\n      // assignment operator\n      if (NodeUtil.isAssignmentOp(parent)) {\n        Node rhs = parent.getLastChild();\n        Node next = n.getNext();\n        while (next != null && !next.isSameNode(rhs)) {\n          if (mayHaveSideEffects(next)) {\n            return VariableLiveness.MAYBE_LIVE;\n          }\n          next = next.getNext();\n        }\n        return VariableLiveness.KILL;\n      }\n\n      // function parameter\n      if (NodeUtil.isParamList(parent) && parent.getParent().isFunction()) {\n        return VariableLiveness.READ;\n      }\n\n      return VariableLiveness.MAYBE_LIVE;\n    }\n\n    for (Node child = n.getFirstChild(); child != null;\n         child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness subExpr = isVariableReadBeforeKill(child, variable);\n\n        if (subExpr == VariableLiveness.KILL) {\n          return VariableLiveness.KILL;\n        } else if (subExpr == VariableLiveness.MAYBE_LIVE) {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n      }\n    }\n\n    return VariableLiveness.DEAD;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..e9f51198 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,44 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n+      Node parent = n.getParent();\n+\n+      // assignment operator\n+      if (NodeUtil.isAssignmentOp(parent)) {\n+        Node rhs = parent.getLastChild();\n+        Node next = n.getNext();\n+        while (next != null && !next.isSameNode(rhs)) {\n+          if (mayHaveSideEffects(next)) {\n+            return VariableLiveness.MAYBE_LIVE;\n+          }\n+          next = next.getNext();\n+        }\n         return VariableLiveness.KILL;\n-      } else {\n+      }\n+\n+      // function parameter\n+      if (NodeUtil.isParamList(parent) && parent.getParent().isFunction()) {\n         return VariableLiveness.READ;\n       }\n+\n+      return VariableLiveness.MAYBE_LIVE;\n     }\n \n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+    for (Node child = n.getFirstChild(); child != null;\n+         child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+        VariableLiveness subExpr = isVariableReadBeforeKill(child, variable);\n+\n+        if (subExpr == VariableLiveness.KILL) {\n+          return VariableLiveness.KILL;\n+        } else if (subExpr == VariableLiveness.MAYBE_LIVE) {\n+          return VariableLiveness.MAYBE_LIVE;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+\n+    return VariableLiveness.DEAD;\n   }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}