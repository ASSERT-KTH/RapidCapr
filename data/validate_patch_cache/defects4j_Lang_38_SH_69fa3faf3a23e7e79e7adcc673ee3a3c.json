{
    "patch": "if (mTimeZoneForced) {\n    TimeZone defaultTimeZone = TimeZone.getDefault(); // save the default timezone\n    TimeZone forcedTimeZone = mTimeZone; // get the forced timezone\n    long currentTimeInMillis = calendar.getTimeInMillis(); // save the current time in milliseconds\n    calendar.setTimeZone(forcedTimeZone); // set the new time zone\n    int offsetInMillis = forcedTimeZone.getOffset(currentTimeInMillis) - defaultTimeZone.getOffset(currentTimeInMillis); // calculate the offset\n    calendar.setTimeInMillis(currentTimeInMillis + offsetInMillis); // set the new time adjusted for the offset\n} ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..9b931c97 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,14 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+if (mTimeZoneForced) {\n+    TimeZone defaultTimeZone = TimeZone.getDefault(); // save the default timezone\n+    TimeZone forcedTimeZone = mTimeZone; // get the forced timezone\n+    long currentTimeInMillis = calendar.getTimeInMillis(); // save the current time in milliseconds\n+    calendar.setTimeZone(forcedTimeZone); // set the new time zone\n+    int offsetInMillis = forcedTimeZone.getOffset(currentTimeInMillis) - defaultTimeZone.getOffset(currentTimeInMillis); // calculate the offset\n+    calendar.setTimeInMillis(currentTimeInMillis + offsetInMillis); // set the new time adjusted for the offset\n+} \n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[23]:42:16.000Z>",
    "test_result": "FAIL"
}