{
    "patch": "  private boolean mayContainType(JSType that) {\n    if (that.isBottom()) {\n      return true;\n    }\n    if (that.isTop()) {\n      return false;\n    }\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  void collectTypeMarkers(Set<TypeVar> types) {\n    for (JSType alternate : alternates) {\n      alternate.collectTypeMarkers(types);\n    }\n  }\n}\n",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..80185f99 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,29 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+  private boolean mayContainType(JSType that) {\n+    if (that.isBottom()) {\n+      return true;\n+    }\n+    if (that.isTop()) {\n+      return false;\n+    }\n+    for (JSType alternate : alternates) {\n+      if (alternate.isSubtype(that)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  void collectTypeMarkers(Set<TypeVar> types) {\n+    for (JSType alternate : alternates) {\n+      alternate.collectTypeMarkers(types);\n+    }\n+  }\n+}\n+\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}