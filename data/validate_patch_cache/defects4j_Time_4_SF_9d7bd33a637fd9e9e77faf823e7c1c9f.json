{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        int i, currUnitDifference;\n        DurationField currFieldUnit, newFieldUnit;\n        int[] newValues;\n\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        newValues = new int[newTypes.length];\n\n        currUnitDifference = Integer.MIN_VALUE;\n        currFieldUnit = null;\n        newFieldUnit = fieldType.getDurationType().getField(iChronology);\n\n        for (i = 0; i < iTypes.length; i++) {\n            DateTimeFieldType loopType = iTypes[i];\n            currFieldUnit = loopType.getDurationType().getField(iChronology);\n            if (!currFieldUnit.isSupported()) {\n                continue;\n            }\n            currUnitDifference = newFieldUnit.compareTo(currFieldUnit);\n\n            if (currUnitDifference < 0) {\n                int[] copyVals = new int[newValues.length - i];\n                System.arraycopy(newValues, i, copyVals, 0,\n                        copyVals.length);\n                System.arraycopy(iTypes, i, newTypes, i + 1,\n                        newTypes.length - i - 1);\n                System.arraycopy(iValues, i, newValues, i + 1,\n                        newValues.length - i - 1);\n\n                newTypes[i] = fieldType;\n                newValues[i] = value;\n                System.arraycopy(copyVals, 0, newValues, i + 2,\n                        copyVals.length);\n\n                System.arraycopy(iTypes, 0, newTypes, 0, i);\n                System.arraycopy(iValues, 0, newValues, 0, i);\n\n                Partial newPartial = new Partial(iChronology, newTypes, newValues);\n                iChronology.validate(newPartial, newValues);\n                return newPartial;\n            }\n            else if (currUnitDifference == 0) {\n                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                if (rangeField.compareTo(loopRangeField) < 0) {\n                    int[] copyVals = new int[newValues.length - i];\n                    System.arraycopy(newValues, i, copyVals, 0,\n                            copyVals.length);\n                    System.arraycopy(iTypes, i, newTypes, i + 1,\n                            newTypes.length - i - 1);\n                    System.arraycopy(iValues, i, newValues, i + 1,\n                            newValues.length - i - 1);\n\n                    newTypes[i] = fieldType;\n                    newValues[i] = value;\n                    System.arraycopy(copyVals, 0, newValues, i + 2,\n                            copyVals.length);\n\n                    System.arraycopy(iTypes, 0, newTypes, 0, i);\n                    System.arraycopy(iValues, 0, newValues, 0, i);\n\n                    Partial newPartial = new Partial(iChronology, newTypes, newValues);\n                    iChronology.validate(newPartial, newValues);\n                    return newPartial;\n                }\n            }\n        }\n\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n        System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n\n    if (value == getValue(index)) {\n        return this;\n    }\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..d327711d 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,56 +423,97 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+    int index = indexOf(fieldType);\n+    if (index == -1) {\n+        int i, currUnitDifference;\n+        DurationField currFieldUnit, newFieldUnit;\n+        int[] newValues;\n+\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+        newValues = new int[newTypes.length];\n+\n+        currUnitDifference = Integer.MIN_VALUE;\n+        currFieldUnit = null;\n+        newFieldUnit = fieldType.getDurationType().getField(iChronology);\n+\n+        for (i = 0; i < iTypes.length; i++) {\n+            DateTimeFieldType loopType = iTypes[i];\n+            currFieldUnit = loopType.getDurationType().getField(iChronology);\n+            if (!currFieldUnit.isSupported()) {\n+                continue;\n+            }\n+            currUnitDifference = newFieldUnit.compareTo(currFieldUnit);\n+\n+            if (currUnitDifference < 0) {\n+                int[] copyVals = new int[newValues.length - i];\n+                System.arraycopy(newValues, i, copyVals, 0,\n+                        copyVals.length);\n+                System.arraycopy(iTypes, i, newTypes, i + 1,\n+                        newTypes.length - i - 1);\n+                System.arraycopy(iValues, i, newValues, i + 1,\n+                        newValues.length - i - 1);\n+\n+                newTypes[i] = fieldType;\n+                newValues[i] = value;\n+                System.arraycopy(copyVals, 0, newValues, i + 2,\n+                        copyVals.length);\n+\n+                System.arraycopy(iTypes, 0, newTypes, 0, i);\n+                System.arraycopy(iValues, 0, newValues, 0, i);\n+\n+                Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+                iChronology.validate(newPartial, newValues);\n+                return newPartial;\n+            }\n+            else if (currUnitDifference == 0) {\n+                DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+                if (rangeField.compareTo(loopRangeField) < 0) {\n+                    int[] copyVals = new int[newValues.length - i];\n+                    System.arraycopy(newValues, i, copyVals, 0,\n+                            copyVals.length);\n+                    System.arraycopy(iTypes, i, newTypes, i + 1,\n+                            newTypes.length - i - 1);\n+                    System.arraycopy(iValues, i, newValues, i + 1,\n+                            newValues.length - i - 1);\n+\n+                    newTypes[i] = fieldType;\n+                    newValues[i] = value;\n+                    System.arraycopy(copyVals, 0, newValues, i + 2,\n+                            copyVals.length);\n+\n+                    System.arraycopy(iTypes, 0, newTypes, 0, i);\n+                    System.arraycopy(iValues, 0, newValues, 0, i);\n+\n+                    Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+                    iChronology.validate(newPartial, newValues);\n+                    return newPartial;\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n         }\n-        if (value == getValue(index)) {\n-            return this;\n-        }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        newTypes[i] = fieldType;\n+        newValues[i] = value;\n+        System.arraycopy(iTypes, 0, newTypes, 0, iTypes.length);\n+        System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n+\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n     }\n \n+    if (value == getValue(index)) {\n+        return this;\n+    }\n+    int[] newValues = getValues();\n+    newValues = getField(index).set(this, index, newValues, value);\n+    return new Partial(this, newValues);\n+}\n+\n     /**\n      * Gets a copy of this date with the specified field removed.\n      * <p>",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException",
    "test_result": "FAIL"
}