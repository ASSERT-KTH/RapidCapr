{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());\n    JSType propType = getprop.getJSType();\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride =\n          t.inGlobalScope() &&\n          NodeUtil.isAssignmentOp(parent) &&\n          parent.getFirstChild() == getprop;\n\n      JSDocInfo docInfo = null;\n      for (ObjectType objType = objectType; objType != null;\n           objType = objType.getImplicitPrototype()) {\n        docInfo = objType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null) {\n          break;\n        }\n      }\n\n      if (docInfo == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      Visibility visibility = docInfo.getVisibility();\n      if (visibility == Visibility.PRIVATE) {\n        if (isOverride) {\n          ObjectType ancestorType =\n              ObjectType.cast(objectType.getImplicitPrototype());\n          for (; ancestorType != null;\n               ancestorType = ancestorType.getImplicitPrototype()) {\n            JSDocInfo ancestorInfo =\n                ancestorType.getOwnPropertyJSDocInfo(propertyName);\n            if (ancestorInfo != null &&\n                ancestorInfo.getVisibility() != Visibility.INHERITED) {\n              NodeClassGraph.Node ancestorClass = normalizeClassType(ancestorType);\n              if (!t.getCrossScopeReferences().contains(\n                  new Var(ancestorClass.getName(), null, ancestorClass.getDeclaration()))) {\n                String errorMsg = String.format(\n                    \"Overriding private property of %s.%s.\",\n                    ancestorClass.getName(), propertyName);\n                t.report(getprop, BAD_PROPERTY_OVERRIDE, errorMsg);\n              }\n              break;\n            }\n          }\n        } else if (!t.getInput().getName().equals(docInfo.getSourceName())) {\n          // Private properties can be accessed only from inside methods\n          // of the same class.\n          Node methodNode = NodeUtil.getEnclosingFunction(getprop);\n          ObjectType methodType = null;\n          if (methodNode != null) {\n            methodType = ObjectType.cast(methodNode.getFirstChild().getJSType());\n          }\n          if (methodType == null || !methodType.equals(objectType)) {\n            NodeClassGraph.Node objClass = normalizeClassType(objectType);\n            t.report(\n                getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName, objClass.getName());\n          }\n        }\n      } else if (visibility == Visibility.PROTECTED) {\n        if (!getprop.getFirstChild().isThis()) {\n          // Any access to a protected property must occur through 'this'.\n          NodeClassGraph.Node objClass = normalizeClassType(objectType);\n          t.report(\n              getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n              propertyName, objClass.getName());\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..5228f847 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -406,95 +406,77 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    */\n   private void checkPropertyVisibility(NodeTraversal t,\n       Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    ObjectType objectType = ObjectType.cast(getprop.getFirstChild().getJSType());\n+    JSType propType = getprop.getJSType();\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n+      boolean isOverride =\n+          t.inGlobalScope() &&\n+          NodeUtil.isAssignmentOp(parent) &&\n           parent.getFirstChild() == getprop;\n \n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n       JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+      for (ObjectType objType = objectType; objType != null;\n+           objType = objType.getImplicitPrototype()) {\n+        docInfo = objType.getOwnPropertyJSDocInfo(propertyName);\n+        if (docInfo != null) {\n           break;\n         }\n       }\n \n-      if (objectType == null) {\n+      if (docInfo == null) {\n         // We couldn't find a visibility modifier; assume it's public.\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n       Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n-        }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n+      if (visibility == Visibility.PRIVATE) {\n+        if (isOverride) {\n+          ObjectType ancestorType =\n+              ObjectType.cast(objectType.getImplicitPrototype());\n+          for (; ancestorType != null;\n+               ancestorType = ancestorType.getImplicitPrototype()) {\n+            JSDocInfo ancestorInfo =\n+                ancestorType.getOwnPropertyJSDocInfo(propertyName);\n+            if (ancestorInfo != null &&\n+                ancestorInfo.getVisibility() != Visibility.INHERITED) {\n+              NodeClassGraph.Node ancestorClass = normalizeClassType(ancestorType);\n+              if (!t.getCrossScopeReferences().contains(\n+                  new Var(ancestorClass.getName(), null, ancestorClass.getDeclaration()))) {\n+                String errorMsg = String.format(\n+                    \"Overriding private property of %s.%s.\",\n+                    ancestorClass.getName(), propertyName);\n+                t.report(getprop, BAD_PROPERTY_OVERRIDE, errorMsg);\n+              }\n+              break;\n+            }\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+        } else if (!t.getInput().getName().equals(docInfo.getSourceName())) {\n+          // Private properties can be accessed only from inside methods\n+          // of the same class.\n+          Node methodNode = NodeUtil.getEnclosingFunction(getprop);\n+          ObjectType methodType = null;\n+          if (methodNode != null) {\n+            methodType = ObjectType.cast(methodNode.getFirstChild().getJSType());\n+          }\n+          if (methodType == null || !methodType.equals(objectType)) {\n+            NodeClassGraph.Node objClass = normalizeClassType(objectType);\n+            t.report(\n+                getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n+                propertyName, objClass.getName());\n           }\n         }\n+      } else if (visibility == Visibility.PROTECTED) {\n+        if (!getprop.getFirstChild().isThis()) {\n+          // Any access to a protected property must occur through 'this'.\n+          NodeClassGraph.Node objClass = normalizeClassType(objectType);\n+          t.report(\n+              getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+              propertyName, objClass.getName());\n+        }\n       }\n     }\n   }",
    "result_reason": "error: package NodeClassGraph does not exist",
    "test_result": "ERROR"
}