{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    int[] offsets = getOffset(instant - 1, instant, instant + 1);\n\n    if (offsets[0] == offsets[2]) {\n        // not in DST transition\n        return instant;\n    } else {\n        int correctedOffset = offsets[earlierOrLater ? 2 : 0];\n        return instant + (correctedOffset - offsets[1]);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..4434cb47 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,17 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    int[] offsets = getOffset(instant - 1, instant, instant + 1);\n+\n+    if (offsets[0] == offsets[2]) {\n+        // not in DST transition\n+        return instant;\n+    } else {\n+        int correctedOffset = offsets[earlierOrLater ? 2 : 0];\n+        return instant + (correctedOffset - offsets[1]);\n     }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: no suitable method found for getOffset(long,long,long)",
    "test_result": "ERROR"
}