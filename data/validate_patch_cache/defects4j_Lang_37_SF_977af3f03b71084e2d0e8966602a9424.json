{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n    T[] joinedArray;\n\n    if (type1.isPrimitive() && type2.isPrimitive()) { // both are primitive types\n        if (type1 == type2) { // same primitive types\n            joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        } else { // different primitive types\n            throw new IllegalArgumentException(\"Cannot add arrays of different primitive types\");\n        }\n    } else if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) { // at least one is non-primitive or both of them are\n        joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n    } else { // incompatible types\n        throw new IllegalArgumentException(\"Cannot add arrays of incompatible types\");\n    }\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..e08f367d 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,19 +2950,33 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+    T[] joinedArray;\n+\n+    if (type1.isPrimitive() && type2.isPrimitive()) { // both are primitive types\n+        if (type1 == type2) { // same primitive types\n+            joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        } else { // different primitive types\n+            throw new IllegalArgumentException(\"Cannot add arrays of different primitive types\");\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+    } else if (type1.isAssignableFrom(type2) || type2.isAssignableFrom(type1)) { // at least one is non-primitive or both of them are\n+        joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+    } else { // incompatible types\n+        throw new IllegalArgumentException(\"Cannot add arrays of incompatible types\");\n     }\n+    return joinedArray;\n+}\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}