{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0) {\n        // {@code name} meets condition (a).\n        if (name.type == Name.Type.OBJECTLIT ||\n            name.type == Name.Type.FUNCTION) {\n          // Add all of {@code name}'s children to the worklist.\n          workList.addAll(name.props);\n        } else if (name.type == Name.Type.VAR || name.type == Name.Type.LET) {\n          // Try to inline {@code name} if it meets condition (b).\n          inlineVariableIfPossible(name, namespace);\n        }\n      } else if (name.globalSets == 0 &&\n                 name.localSets == 1 &&\n                 name.aliasingGets > 1) {\n        // {@code name} meets condition (b) because it has exactly one\n        // local-set and more than one aliasing-get. Try to inline it.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      } else if (name.globalSets == 0 &&\n                 name.localSets == 0 &&\n                 name.aliasingGets > 0) {\n        // {@code name} meets condition (c).\n        Ref declaration = Iterables.getOnlyElement(name.getRefs());\n        if (declaration.type == Type.DECLARATION) {\n          if (declaration.node.getParent().isFunction()) {\n            // The declaration is a function parameter, so we can't inline\n            // into it. See ECMA-262, section 10.2.1.1.\n            continue;\n          }\n          Name declName = namespace.getSlotName(declaration.node);\n          if (declName == null) {\n            // This can occur if the variable is referenced but not declared.\n            // For example: \"var x = typeof x;\".\n            continue;\n          }\n          if (declName.type == Name.Type.LET &&\n              declName.localSets == 0 &&\n              declName.getChildCount() == 0) {\n            // Don't inline a declaration into a let that only contains the\n            // declaration itself, because the declaration would become\n            // uninitialized. For example: \"let x = 1; x = x + 1;\" cannot be\n            // inlined to \"let x = 1; x + 1;\". However, this is safe:\n            // \"let x; x = 1; x = x + 1;\" can be inlined to \"let x = 1; x + 1;\".\n            continue;\n          }\n          if (declName.type == Name.Type.FUNCTION ||\n              declName.type == Name.Type.OBJECTLIT) {\n            // {@code name} meets condition (d).\n            inlineAllOccurences(declName);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..3e79a6e3 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,63 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0) {\n+        // {@code name} meets condition (a).\n+        if (name.type == Name.Type.OBJECTLIT ||\n+            name.type == Name.Type.FUNCTION) {\n+          // Add all of {@code name}'s children to the worklist.\n+          workList.addAll(name.props);\n+        } else if (name.type == Name.Type.VAR || name.type == Name.Type.LET) {\n+          // Try to inline {@code name} if it meets condition (b).\n+          inlineVariableIfPossible(name, namespace);\n+        }\n+      } else if (name.globalSets == 0 &&\n+                 name.localSets == 1 &&\n+                 name.aliasingGets > 1) {\n+        // {@code name} meets condition (b) because it has exactly one\n+        // local-set and more than one aliasing-get. Try to inline it.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      } else if (name.globalSets == 0 &&\n+                 name.localSets == 0 &&\n+                 name.aliasingGets > 0) {\n+        // {@code name} meets condition (c).\n+        Ref declaration = Iterables.getOnlyElement(name.getRefs());\n+        if (declaration.type == Type.DECLARATION) {\n+          if (declaration.node.getParent().isFunction()) {\n+            // The declaration is a function parameter, so we can't inline\n+            // into it. See ECMA-262, section 10.2.1.1.\n+            continue;\n+          }\n+          Name declName = namespace.getSlotName(declaration.node);\n+          if (declName == null) {\n+            // This can occur if the variable is referenced but not declared.\n+            // For example: \"var x = typeof x;\".\n+            continue;\n+          }\n+          if (declName.type == Name.Type.LET &&\n+              declName.localSets == 0 &&\n+              declName.getChildCount() == 0) {\n+            // Don't inline a declaration into a let that only contains the\n+            // declaration itself, because the declaration would become\n+            // uninitialized. For example: \"let x = 1; x = x + 1;\" cannot be\n+            // inlined to \"let x = 1; x + 1;\". However, this is safe:\n+            // \"let x; x = 1; x = x + 1;\" can be inlined to \"let x = 1; x + 1;\".\n+            continue;\n+          }\n+          if (declName.type == Name.Type.FUNCTION ||\n+              declName.type == Name.Type.OBJECTLIT) {\n+            // {@code name} meets condition (d).\n+            inlineAllOccurences(declName);\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}