{
    "patch": "import com.google.javascript.jscomp.NodeUtil;\n\n...\n\nprivate boolean hasExceptionHandler(Node cfgNode, AbstractCompiler compiler) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        // check if the exception is caught\n        Node handler = edge.getDest().getValue();\n        if (NodeUtil.isCatchBlock(handler, cfgNode)) {\n          // if the exception is caught, we don't need an exception handler\n          return false;\n        } else {\n          // if the exception is not caught, we need an exception handler\n          return true;\n        }\n      }\n    }\n    // if no exception edges were found, we don't need an exception handler\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..ae486f10 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,28 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+import com.google.javascript.jscomp.NodeUtil;\n+\n+...\n+\n+private boolean hasExceptionHandler(Node cfgNode, AbstractCompiler compiler) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        // check if the exception is caught\n+        Node handler = edge.getDest().getValue();\n+        if (NodeUtil.isCatchBlock(handler, cfgNode)) {\n+          // if the exception is caught, we don't need an exception handler\n+          return false;\n+        } else {\n+          // if the exception is not caught, we need an exception handler\n+          return true;\n+        }\n+      }\n+    }\n+    // if no exception edges were found, we don't need an exception handler\n+    return false;\n+  }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}