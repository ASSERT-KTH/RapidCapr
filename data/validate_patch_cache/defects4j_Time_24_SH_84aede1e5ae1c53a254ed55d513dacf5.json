{
    "patch": "    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException ex) {\n        do {\n            if (resetFields) {\n                throw ex;\n            }\n            boolean found = false;\n            int savedCount = count;\n            for (int i = 0; i < savedCount; i++) {\n                try {\n                    millis = savedFields[i].set(millis, true);\n                } catch (IllegalFieldValueException ex2) {\n                    if (ex2.getIllegalFieldValue() != savedFields[i].initialValue) {\n                        throw ex2;\n                    }\n                    if (count - 1 >= i) {\n                        for (int j = i; j < count - 1; j++) {\n                            savedFields[j] = savedFields[j + 1];\n                        }\n                        count--;\n                        found = true;\n                    }\n                }\n            }\n            if (!found) {\n                throw ex;\n            }\n        } while (count > 0);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..52ff56f7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException ex) {\n+        do {\n+            if (resetFields) {\n+                throw ex;\n+            }\n+            boolean found = false;\n+            int savedCount = count;\n+            for (int i = 0; i < savedCount; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, true);\n+                } catch (IllegalFieldValueException ex2) {\n+                    if (ex2.getIllegalFieldValue() != savedFields[i].initialValue) {\n+                        throw ex2;\n+                    }\n+                    if (count - 1 >= i) {\n+                        for (int j = i; j < count - 1; j++) {\n+                            savedFields[j] = savedFields[j + 1];\n+                        }\n+                        count--;\n+                        found = true;\n+                    }\n+                }\n+            }\n+            if (!found) {\n+                throw ex;\n+            }\n+        } while (count > 0);\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: variable millis is already defined in method computeMillis(boolean,String)",
    "test_result": "ERROR"
}