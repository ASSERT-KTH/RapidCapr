{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If the indexed object is an array literal with a constant index,\n    // then fold the array access.\n    if (NodeUtil.isArrayLiteral(left) && right.isNumber()) {\n      int index = (int) right.getDouble();\n      Node arrayNode = left.getFirstChild();\n      for (int i = 0; i < index; i++) {\n        arrayNode = arrayNode.getNext();\n        // if index is out of bounds\n        if (arrayNode == null || arrayNode.isEmpty()) {\n          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n          return n;\n        }\n      }\n      arrayNode.detachFromParent();\n      n.getParent().replaceChild(n, arrayNode);\n      reportCodeChange();\n      return arrayNode;\n    }\n\n    // Check if the number can be converted to an integer\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n      // Stop if we reach the end of the list or the element is empty\n      if (elem == null || elem.isEmpty()) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      elem = elem.getNext();\n    }\n\n    if (elem == null || elem.isEmpty()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem.detachFromParent());\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..b4f66add 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,19 +1274,27 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    // If the indexed object is an array literal with a constant index,\n+    // then fold the array access.\n+    if (NodeUtil.isArrayLiteral(left) && right.isNumber()) {\n+      int index = (int) right.getDouble();\n+      Node arrayNode = left.getFirstChild();\n+      for (int i = 0; i < index; i++) {\n+        arrayNode = arrayNode.getNext();\n+        // if index is out of bounds\n+        if (arrayNode == null || arrayNode.isEmpty()) {\n+          error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+          return n;\n+        }\n+      }\n+      arrayNode.detachFromParent();\n+      n.getParent().replaceChild(n, arrayNode);\n+      reportCodeChange();\n+      return arrayNode;\n     }\n \n+    // Check if the number can be converted to an integer\n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n@@ -1300,23 +1308,22 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n+    for (int i = 0; i < intIndex; i++) {\n+      // Stop if we reach the end of the list or the element is empty\n+      if (elem == null || elem.isEmpty()) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n       elem = elem.getNext();\n     }\n \n-    if (elem == null) {\n+    if (elem == null || elem.isEmpty()) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    n.getParent().replaceChild(n, elem.detachFromParent());\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}