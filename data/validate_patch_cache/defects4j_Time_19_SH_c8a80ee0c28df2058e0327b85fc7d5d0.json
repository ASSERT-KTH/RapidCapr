{
    "patch": "        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n            if (offsetLocal >= 0 && offsetAdjusted >= 0) { // both positive offsets\n                if (offsetLocal - offsetAdjusted > 0 || (offsetLocal - offsetAdjusted == 0 && offsetLocal > 0\n                        && nextLocal < instantLocal - offsetLocal)) {\n                    return offsetLocal;\n                }\n            } else if (offsetLocal < 0 && offsetAdjusted < 0) { // both negative offsets\n                if (offsetLocal - offsetAdjusted < 0 || (offsetLocal - offsetAdjusted == 0 && offsetLocal < 0\n                        && nextLocal < instantLocal - offsetLocal)) {\n                    long prev = previousTransition(instantAdjusted);\n                    if (prev < instantAdjusted) {\n                        int offsetPrev = getOffset(prev);\n                        int diff = offsetPrev - offsetLocal;\n                        if (instantAdjusted - prev <= diff) {\n                            return offsetPrev;\n                        }\n                    }\n                    return offsetLocal;\n                }\n            } else if (offsetLocal < 0 && offsetAdjusted >= 0 || (offsetLocal >= 0 && offsetAdjusted < 0)) { // opposite\n                if (offsetLocal - offsetAdjusted >= 0) {\n                    if (nextAdjusted == instantLocal - offsetAdjusted || nextLocal <= instantLocal - offsetLocal) {\n                        return offsetLocal;\n                    }\n                } else {\n                    if (nextLocal == instantLocal - offsetLocal) {\n                        return getOffset(nextLocal);\n                    } else {\n                        return offsetAdjusted;\n                    }\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..bdfc3779 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+            if (offsetLocal >= 0 && offsetAdjusted >= 0) { // both positive offsets\n+                if (offsetLocal - offsetAdjusted > 0 || (offsetLocal - offsetAdjusted == 0 && offsetLocal > 0\n+                        && nextLocal < instantLocal - offsetLocal)) {\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal < 0 && offsetAdjusted < 0) { // both negative offsets\n+                if (offsetLocal - offsetAdjusted < 0 || (offsetLocal - offsetAdjusted == 0 && offsetLocal < 0\n+                        && nextLocal < instantLocal - offsetLocal)) {\n+                    long prev = previousTransition(instantAdjusted);\n+                    if (prev < instantAdjusted) {\n+                        int offsetPrev = getOffset(prev);\n+                        int diff = offsetPrev - offsetLocal;\n+                        if (instantAdjusted - prev <= diff) {\n+                            return offsetPrev;\n+                        }\n+                    }\n+                    return offsetLocal;\n+                }\n+            } else if (offsetLocal < 0 && offsetAdjusted >= 0 || (offsetLocal >= 0 && offsetAdjusted < 0)) { // opposite\n+                if (offsetLocal - offsetAdjusted >= 0) {\n+                    if (nextAdjusted == instantLocal - offsetAdjusted || nextLocal <= instantLocal - offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                } else {\n+                    if (nextLocal == instantLocal - offsetLocal) {\n+                        return getOffset(nextLocal);\n+                    } else {\n+                        return offsetAdjusted;\n+                    }\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}