{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp1, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp1.length; ++i) {\n                result[resultOffset + i] = 2 * tmp1[i]; // 2 * atan(y / (r + x))\n            }\n            \n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            final double[] tmp3 = Arrays.copyOf(tmp1, getSize());\n            tmp3[0] = 0.0;\n            atan(tmp1, 0, tmp1, 0);                     // atan(y / (r - x))\n            final double[] pi = newInstance(FastMath.PI);\n            add(pi, 0, pi, 0, pi, 0);                   // pi + pi = 2*pi\n            int cmp = tmp2[0] < 0 ? -1 : 1;\n            int overflow = FastMath.abs(tmp2[0]) > 1e307 ? 1 : 0;\n            cmp -= (y[yOffset] == 0) ? 0 : 2 * ((y[yOffset] < 0) ? 1 : 0);\n            cmp += (((x[xOffset] < 0) ? 1 : 0) ^ ((y[yOffset] != 0) && (tmp2[0] >= 0))) << 2 ;\n            cmp = ((overflow == 0) ? cmp + 4 : cmp) & 7;\n            switch (cmp) {\n                case 0 :\n                    result[resultOffset] = 0;\n                    break;\n                case 1 :\n                    result[resultOffset] = pi[0];\n                    break;\n                case 2 :\n                    result[resultOffset] = -pi[0];\n                    break;\n                case 3 :\n                    result[resultOffset] = tmp2[0] / 0.0;\n                    break;\n                case 4 :\n                    result[resultOffset] = tmp1[0];\n                    break;\n                case 5 :\n                    result[resultOffset] = pi[0] - tmp1[0];\n                    break;\n                case 6 :\n                    result[resultOffset] = -pi[0] + tmp1[0];\n                    break;\n                case 7 :\n                    result[resultOffset] = tmp2[0] / 0.0;\n                    break;\n                default :\n                    // this should never happen\n                    throw new MathInternalError();\n            }\n            for (int i = 1; i < tmp1.length; ++i) {\n                result[resultOffset + i] *= 2; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..07d4b6192 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1396,21 +1396,57 @@ public class DSCompiler {\n             // compute atan2(y, x) = 2 atan(y / (r + x))\n             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+            atan(tmp1, 0, tmp1, 0);                     // atan(y / (r + x))\n+            for (int i = 0; i < tmp1.length; ++i) {\n+                result[resultOffset + i] = 2 * tmp1[i]; // 2 * atan(y / (r + x))\n             }\n-\n+            \n         } else {\n \n             // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            final double[] tmp3 = Arrays.copyOf(tmp1, getSize());\n+            tmp3[0] = 0.0;\n+            atan(tmp1, 0, tmp1, 0);                     // atan(y / (r - x))\n+            final double[] pi = newInstance(FastMath.PI);\n+            add(pi, 0, pi, 0, pi, 0);                   // pi + pi = 2*pi\n+            int cmp = tmp2[0] < 0 ? -1 : 1;\n+            int overflow = FastMath.abs(tmp2[0]) > 1e307 ? 1 : 0;\n+            cmp -= (y[yOffset] == 0) ? 0 : 2 * ((y[yOffset] < 0) ? 1 : 0);\n+            cmp += (((x[xOffset] < 0) ? 1 : 0) ^ ((y[yOffset] != 0) && (tmp2[0] >= 0))) << 2 ;\n+            cmp = ((overflow == 0) ? cmp + 4 : cmp) & 7;\n+            switch (cmp) {\n+                case 0 :\n+                    result[resultOffset] = 0;\n+                    break;\n+                case 1 :\n+                    result[resultOffset] = pi[0];\n+                    break;\n+                case 2 :\n+                    result[resultOffset] = -pi[0];\n+                    break;\n+                case 3 :\n+                    result[resultOffset] = tmp2[0] / 0.0;\n+                    break;\n+                case 4 :\n+                    result[resultOffset] = tmp1[0];\n+                    break;\n+                case 5 :\n+                    result[resultOffset] = pi[0] - tmp1[0];\n+                    break;\n+                case 6 :\n+                    result[resultOffset] = -pi[0] + tmp1[0];\n+                    break;\n+                case 7 :\n+                    result[resultOffset] = tmp2[0] / 0.0;\n+                    break;\n+                default :\n+                    // this should never happen\n+                    throw new MathInternalError();\n+            }\n+            for (int i = 1; i < tmp1.length; ++i) {\n+                result[resultOffset + i] *= 2; // +/-pi - 2 * atan(y / (r - x))\n             }\n \n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}