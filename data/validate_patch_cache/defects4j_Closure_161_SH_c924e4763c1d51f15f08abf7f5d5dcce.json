{
    "patch": "if (left.getType() == Token.ARRAYLIT && left.hasOneChild() && left.getFirstChild().getType() == Token.EMPTY) {\n  if (intIndex == 0) {\n    Node newChild = NodeUtil.newNumberNode(null, 0.0);\n    left.replaceChild(left.getFirstChild(), newChild);\n    return newChild;\n  } else {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..d83918fb 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+if (left.getType() == Token.ARRAYLIT && left.hasOneChild() && left.getFirstChild().getType() == Token.EMPTY) {\n+  if (intIndex == 0) {\n+    Node newChild = NodeUtil.newNumberNode(null, 0.0);\n+    left.replaceChild(left.getFirstChild(), newChild);\n+    return newChild;\n+  } else {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}