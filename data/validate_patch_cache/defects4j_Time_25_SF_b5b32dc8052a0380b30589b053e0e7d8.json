{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final long instantBefore = instantLocal - 1;\n        int offsetBefore = getOffset(instantBefore);\n        int offsetLocal = getOffset(instantLocal);\n        if (offsetBefore != offsetLocal && (offsetBefore - offsetLocal < 0)) {\n            long nextTransition = nextTransition(instantBefore);\n            if (nextTransition + DateTimeConstants.MILLIS_PER_SECOND <= instantLocal) {\n                int offsetAfter = getOffset(instantLocal - 1);\n                if (offsetLocal != offsetAfter) {\n                    return offsetBefore;\n                }\n            }\n        }\n        return offsetLocal;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..d5672b11 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,19 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        final long instantBefore = instantLocal - 1;\n+        int offsetBefore = getOffset(instantBefore);\n+        int offsetLocal = getOffset(instantLocal);\n+        if (offsetBefore != offsetLocal && (offsetBefore - offsetLocal < 0)) {\n+            long nextTransition = nextTransition(instantBefore);\n+            if (nextTransition + DateTimeConstants.MILLIS_PER_SECOND <= instantLocal) {\n+                int offsetAfter = getOffset(instantLocal - 1);\n+                if (offsetLocal != offsetAfter) {\n+                    return offsetBefore;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+        return offsetLocal;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}