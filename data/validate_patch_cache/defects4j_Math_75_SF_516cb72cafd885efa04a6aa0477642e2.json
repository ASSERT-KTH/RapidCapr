{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        T[] copy = Arrays.copyOf(data, data.length);\n        Arrays.sort(copy);\n        int i = Arrays.binarySearch(copy, v);\n        double rank = (i >= 0) ? ((double) (i + 1)) : ((double) (-i - 1));\n        return rank / (double) data.length;\n    } else {\n        throw new IllegalArgumentException(\"Object v must be Comparable\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..cca17bd3d 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,17 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable) {\n+        T[] copy = Arrays.copyOf(data, data.length);\n+        Arrays.sort(copy);\n+        int i = Arrays.binarySearch(copy, v);\n+        double rank = (i >= 0) ? ((double) (i + 1)) : ((double) (-i - 1));\n+        return rank / (double) data.length;\n+    } else {\n+        throw new IllegalArgumentException(\"Object v must be Comparable\");\n     }\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}