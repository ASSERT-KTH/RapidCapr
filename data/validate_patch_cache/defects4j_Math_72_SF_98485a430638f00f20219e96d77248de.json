{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n\n    // Check if initial guess is one of the endpoints\n    double yInitial = f.value(initial);\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if(Math.abs(yInitial) < functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Check if endpoints bracket the root\n    if(yMin * yMax >= 0.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // Swap endpoints if necessary to ensure yMin < 0\n    boolean changed = false;\n    if(yMin > yMax) {\n        double temp = min;\n        min = max;\n        max = temp;\n\n        temp = yMin;\n        yMin = yMax;\n        yMax = temp;\n\n        changed = true;\n    }\n\n    // Set initial guess to min if it doesn't bracket the root\n    if(yInitial >= yMax || yInitial <= yMin) {\n        initial = min;\n        yInitial = yMin;\n    }\n\n    double x0 = min;\n    double y0 = yMin;\n    double x1 = initial;\n    double y1 = yInitial;\n    double x2 = initial;\n    double y2 = yInitial;\n\n    boolean done = false;\n    while(!done) {\n        double oldx2 = x2;\n\n        if(y0 != y1 && y1 != y2 && y0 != y2) {\n            // Inverse quadratic interpolation\n            x2 = x0 * y1 * y2 / ((y0 - y1) * (y0 - y2)) +\n                    x1 * y0 * y2 / ((y1 - y0) * (y1 - y2)) +\n                    x2 * y0 * y1 / ((y2 - y0) * (y2 - y1));\n        }\n        else {\n            // Secant method\n            x2 = x1 - y1 * ((x1 - x0) / (y1 - y0));\n        }\n\n        double y2Absolute = Math.abs(f.value(x2));\n        double delta = Math.abs(x2 - oldx2);\n        if(y2Absolute <= functionValueAccuracy |",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..4f05bdc1a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,54 +95,74 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // Check if initial guess is one of the endpoints\n+    double yInitial = f.value(initial);\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    if(Math.abs(yInitial) < functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // Check if endpoints bracket the root\n+    if(yMin * yMax >= 0.0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    // Swap endpoints if necessary to ensure yMin < 0\n+    boolean changed = false;\n+    if(yMin > yMax) {\n+        double temp = min;\n+        min = max;\n+        max = temp;\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+        temp = yMin;\n+        yMin = yMax;\n+        yMax = temp;\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        changed = true;\n+    }\n \n+    // Set initial guess to min if it doesn't bracket the root\n+    if(yInitial >= yMax || yInitial <= yMin) {\n+        initial = min;\n+        yInitial = yMin;\n     }\n \n+    double x0 = min;\n+    double y0 = yMin;\n+    double x1 = initial;\n+    double y1 = yInitial;\n+    double x2 = initial;\n+    double y2 = yInitial;\n+\n+    boolean done = false;\n+    while(!done) {\n+        double oldx2 = x2;\n+\n+        if(y0 != y1 && y1 != y2 && y0 != y2) {\n+            // Inverse quadratic interpolation\n+            x2 = x0 * y1 * y2 / ((y0 - y1) * (y0 - y2)) +\n+                    x1 * y0 * y2 / ((y1 - y0) * (y1 - y2)) +\n+                    x2 * y0 * y1 / ((y2 - y0) * (y2 - y1));\n+        }\n+        else {\n+            // Secant method\n+            x2 = x1 - y1 * ((x1 - x0) / (y1 - y0));\n+        }\n+\n+        double y2Absolute = Math.abs(f.value(x2));\n+        double delta = Math.abs(x2 - oldx2);\n+        if(y2Absolute <= functionValueAccuracy |\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}