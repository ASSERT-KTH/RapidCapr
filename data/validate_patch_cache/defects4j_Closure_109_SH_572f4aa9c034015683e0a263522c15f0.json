{
    "patch": "    if (token.isNumber() || token.isString() || token.isBoolean() || token.isNullable()) {\n      return new LiteralTypeNode(token.getText());\n    } else if (token.isVoid()) {\n      return new VoidTypeNode();\n    } else if (token.isAny()) {\n      return new AnyTypeNode();\n    } else if (token.isThis()) {\n      return new ThisTypeNode();\n    } else if (token.isBrace()) {\n      return parseBraceType(token);\n    } else if (token.isName()) {\n      return parseTypeName(token);\n    } else {\n      addWarning(\"Bad type annotation. type not recognized due to syntax error\");\n      return new UnknownTypeNode();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..53c0eee1 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,22 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+    if (token.isNumber() || token.isString() || token.isBoolean() || token.isNullable()) {\n+      return new LiteralTypeNode(token.getText());\n+    } else if (token.isVoid()) {\n+      return new VoidTypeNode();\n+    } else if (token.isAny()) {\n+      return new AnyTypeNode();\n+    } else if (token.isThis()) {\n+      return new ThisTypeNode();\n+    } else if (token.isBrace()) {\n+      return parseBraceType(token);\n+    } else if (token.isName()) {\n+      return parseTypeName(token);\n+    } else {\n+      addWarning(\"Bad type annotation. type not recognized due to syntax error\");\n+      return new UnknownTypeNode();\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}