{
    "patch": "```\n    Object[] rawArguments = invocation.getRawArguments();\n    for (int position = 0; position < matchers.size() && position < rawArguments.length; position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            Object argument = rawArguments[position];\n            if (isVariableArgument(invocation, position) && isVarargMatcher(m))",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..83ddf96e2 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+```\n+    Object[] rawArguments = invocation.getRawArguments();\n+    for (int position = 0; position < matchers.size() && position < rawArguments.length; position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            Object argument = rawArguments[position];\n+            if (isVariableArgument(invocation, position) && isVarargMatcher(m))\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal character: '`'",
    "test_result": "ERROR"
}