{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType.isFunctionType()) {\n          ct = constructorType.toMaybeFunctionType();\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          if (type.isInterface()) {\n            type = null;\n          }\n        }\n      }\n    }\n    if (type == null) {\n      type = getNativeType(NULL_TYPE);\n    }\n    if (!type.isUnknownType()) {\n      n.setJSType(type);\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..06e6d6b6 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,7 +1031,6 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n@@ -1044,18 +1043,23 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+        if (ct == null && constructorType.isFunctionType()) {\n+          ct = constructorType.toMaybeFunctionType();\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          if (type.isInterface()) {\n+            type = null;\n+          }\n         }\n       }\n     }\n-    n.setJSType(type);\n+    if (type == null) {\n+      type = getNativeType(NULL_TYPE);\n+    }\n+    if (!type.isUnknownType()) {\n+      n.setJSType(type);\n+    }\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected warning(s): JSC_TYPE_MISMATCH. No properties on this expression",
    "test_result": "FAIL"
}