{
    "patch": "// use public constructor to ensure full validation\n// this isn't overly efficient, but is safe\nPartial newPartial = new Partial(iChronology, newTypes, newValues);\nif (iChronology != null) {\n    try {\n        iChronology.validate(newPartial, newValues);\n    } catch (IllegalFieldValueException e) {\n        throw new IllegalArgumentException(e.getMessage());\n    }\n}\nreturn newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..9fc9f0b0 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,17 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+// use public constructor to ensure full validation\n+// this isn't overly efficient, but is safe\n+Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+if (iChronology != null) {\n+    try {\n+        iChronology.validate(newPartial, newValues);\n+    } catch (IllegalFieldValueException e) {\n+        throw new IllegalArgumentException(e.getMessage());\n+    }\n+}\n+return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}