{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values.clone();\n        }\n        Chronology chrono = partial.getChronology();\n        if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex() && !chrono.dayOfMonth().isLeap(values[ChronoField.YEAR])) {\n            int currYear = values[ChronoField.YEAR];\n            int currMonth = values[ChronoField.MONTH_OF_YEAR];\n            int currDay = values[ChronoField.DAY_OF_MONTH];\n            int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(currYear, currMonth);\n            if (currDay > maxDayOfMonth) {\n                currDay = maxDayOfMonth;\n            }\n            LocalDate date = LocalDate.of(currYear, currMonth, currDay).plusMonths(valueToAdd);\n            return FieldUtils.getValues(chrono, date.toEpochDay(), partial.getFields());\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c0d9a06d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -204,16 +204,19 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n-            return values;\n+            return values.clone();\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        Chronology chrono = partial.getChronology();\n+        if (fieldIndex == DateTimeFieldType.monthOfYear().getFieldIndex() && !chrono.dayOfMonth().isLeap(values[ChronoField.YEAR])) {\n+            int currYear = values[ChronoField.YEAR];\n+            int currMonth = values[ChronoField.MONTH_OF_YEAR];\n+            int currDay = values[ChronoField.DAY_OF_MONTH];\n+            int maxDayOfMonth = chrono.dayOfMonth().getMaximumValue(currYear, currMonth);\n+            if (currDay > maxDayOfMonth) {\n+                currDay = maxDayOfMonth;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            LocalDate date = LocalDate.of(currYear, currMonth, currDay).plusMonths(valueToAdd);\n+            return FieldUtils.getValues(chrono, date.toEpochDay(), partial.getFields());\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}