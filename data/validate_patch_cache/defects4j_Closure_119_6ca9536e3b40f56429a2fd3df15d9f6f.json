{
    "patch": "      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalueVar = n.getFirstChild();\n                type = rvalueVar == null ? Name.Type.OTHER : getValueType(rvalueVar);\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.ASSIGN:\n                //LHS is NAME\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n              }else{\n                Node grandParent = parent.getParent();\n                //Check for names used in catch block.\n                if (grandParent!=null && grandParent.getType() == Token.CATCH){\n                  return;\n                }\n              }\n              break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n              }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..614db2b3 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,114 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      switch (n.getType()) {\n+        case Token.GETTER_DEF:\n+        case Token.SETTER_DEF:\n+        case Token.STRING_KEY:\n+          // This may be a key in an object literal declaration.\n+          name = null;\n+          if (parent != null && parent.isObjectLit()) {\n+            name = getNameForObjLitKey(n);\n+          }\n+          if (name == null) {\n+            return;\n+          }\n+          isSet = true;\n+          switch (n.getType()) {\n+            case Token.STRING_KEY:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case Token.GETTER_DEF:\n+              type = Name.Type.GET;\n+              break;\n+            case Token.SETTER_DEF:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected:\" + n);\n+          }\n+          break;\n+        case Token.NAME:\n+          // This may be a variable get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.VAR:\n+                isSet = true;\n+                Node rvalueVar = n.getFirstChild();\n+                type = rvalueVar == null ? Name.Type.OTHER : getValueType(rvalueVar);\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.ASSIGN:\n+                //LHS is NAME\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+              }else{\n+                Node grandParent = parent.getParent();\n+                //Check for names used in catch block.\n+                if (grandParent!=null && grandParent.getType() == Token.CATCH){\n+                  return;\n+                }\n+              }\n+              break;\n+              case Token.GETPROP:\n+                return;\n+              case Token.FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+              }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return;\n+          }\n+          break;\n+        default:\n+          return;\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable gramps is already defined in method collect(JSModule,Scope,Node)",
    "test_result": "ERROR"
}