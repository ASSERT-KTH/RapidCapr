{
    "patch": "          // If we are coming out of the FINALLY block...\n          } else if (parent.getLastChild() == node) {\n            // If there's any 'return' statement within FINALLY block, a new fallthrough node for\n            // it to exit into must be created.\n            if (cfa != null) {\n              if (cfa.getDeferredTempVarInfo(parent) != null) {\n                computeDeferredTempVarFallthrough(parent, cfa);\n              }\n              if (!cfa.finallyMap.get(parent).isEmpty()) {\n                for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                  // Add an extra edge from finally block to the follow node of the try-catch-finally\n                  // statement.\n                  Node followNode = computeFollowNode(finallyNode, finallyNode.getParent(), cfa);\n                  if (followNode != null) {\n                    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n                  }\n                }\n              }\n            }\n            return computeFollowNode(fromNode, parent, cfa);\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..00a65235 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,28 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+          // If we are coming out of the FINALLY block...\n+          } else if (parent.getLastChild() == node) {\n+            // If there's any 'return' statement within FINALLY block, a new fallthrough node for\n+            // it to exit into must be created.\n+            if (cfa != null) {\n+              if (cfa.getDeferredTempVarInfo(parent) != null) {\n+                computeDeferredTempVarFallthrough(parent, cfa);\n+              }\n+              if (!cfa.finallyMap.get(parent).isEmpty()) {\n+                for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                  // Add an extra edge from finally block to the follow node of the try-catch-finally\n+                  // statement.\n+                  Node followNode = computeFollowNode(finallyNode, finallyNode.getParent(), cfa);\n+                  if (followNode != null) {\n+                    cfa.createEdge(finallyNode, Branch.UNCOND, followNode);\n+                  }\n+                }\n+              }\n+            }\n+            return computeFollowNode(fromNode, parent, cfa);\n+          }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: 'else' without 'if'",
    "test_result": "ERROR"
}