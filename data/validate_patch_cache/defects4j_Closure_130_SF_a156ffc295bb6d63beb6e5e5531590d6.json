{
    "patch": "import com.google.javascript.jscomp.SymbolTable.GlobalNamespace;\nimport com.google.javascript.jscomp.SymbolTable.Name;\nimport com.google.javascript.jscomp.SymbolTable.Ref;\nimport com.google.javascript.jscomp.SymbolTable.Ref.Type;\nimport com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph.Branch;\nimport com.google.common.collect.Lists;\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\nprivate void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        // Don't attempt to inline a getter or setter property as a variable.\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n            // {@code name} meets condition (b).\n            Set<String> toRemove = new HashSet<String>();\n            List<Ref> refs = Lists.newArrayList(name.getRefs());\n            for (Ref ref : refs) {\n                if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                    // {@code name} meets condition (c).\n                    String key = ref.scope.getName() + \"|\" + ref.getNode().getLineno();\n                    if (!toRemove.contains(key)) {\n                        if (inlineAliasIfPossible(ref, namespace)) {\n                            toRemove.add(key);\n                        }\n                    }\n                }\n            }\n            name.removeAllRefs(toRemove);\n        }\n\n        // Check if {@code name} has any non-inlined aliases left after the above\n        // inlining.\n        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n                && name.aliasingGets == 0 && name.props != null) {\n            // All of {@code name}'s children meet condition (a), so they can be\n            // added to the worklist.\n            workList.addAll(name.props);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..c5ce8608 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,58 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+import com.google.javascript.jscomp.SymbolTable.GlobalNamespace;\n+import com.google.javascript.jscomp.SymbolTable.Name;\n+import com.google.javascript.jscomp.SymbolTable.Ref;\n+import com.google.javascript.jscomp.SymbolTable.Ref.Type;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph.Branch;\n+import com.google.common.collect.Lists;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n+        Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+        // Don't attempt to inline a getter or setter property as a variable.\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) {\n+            // {@code name} meets condition (b).\n+            Set<String> toRemove = new HashSet<String>();\n+            List<Ref> refs = Lists.newArrayList(name.getRefs());\n+            for (Ref ref : refs) {\n+                if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                    // {@code name} meets condition (c).\n+                    String key = ref.scope.getName() + \"|\" + ref.getNode().getLineno();\n+                    if (!toRemove.contains(key)) {\n+                        if (inlineAliasIfPossible(ref, namespace)) {\n+                            toRemove.add(key);\n+                        }\n+                    }\n+                }\n             }\n-          }\n+            name.removeAllRefs(toRemove);\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        // Check if {@code name} has any non-inlined aliases left after the above\n+        // inlining.\n+        if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION)\n+                && name.aliasingGets == 0 && name.props != null) {\n+            // All of {@code name}'s children meet condition (a), so they can be\n+            // added to the worklist.\n+            workList.addAll(name.props);\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}