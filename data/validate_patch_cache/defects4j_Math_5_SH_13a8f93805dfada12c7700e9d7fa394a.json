{
    "patch": "if (real == 0.0 && imaginary == 0.0) {\n    return ZERO;\n} else {\n    return createComplex(real/(real*real + imaginary*imaginary), -imaginary/(real*real + imaginary*imaginary));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..e4e88f1bf 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -302,7 +302,11 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+if (real == 0.0 && imaginary == 0.0) {\n+    return ZERO;\n+} else {\n+    return createComplex(real/(real*real + imaginary*imaginary), -imaginary/(real*real + imaginary*imaginary));\n+}\n         }\n \n         if (isInfinite) {",
    "result_reason": "junit.framework.AssertionFailedError: expected:<(0.0, 0.0)> but was:<(Infinity, Infinity)>",
    "test_result": "FAIL"
}