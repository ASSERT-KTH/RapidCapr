{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        result[resultOffset] = 0.0; // atan2(+0.0, +0.0) = +0.0\n    } else if (x[xOffset] == 0.0 && Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {\n        result[resultOffset] = FastMath.copySign(0.0, y[yOffset]); // atan2(+0.0, -0.0) = +pi\n    } else if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) && y[yOffset] == 0.0) {\n        result[resultOffset] = FastMath.copySign(FastMath.PI, x[xOffset]); // atan2(-0.0, +0.0) = -0.0\n    } else if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) &&\n               Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {\n        result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]); // atan2(-0.0, -0.0) = -pi\n    } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n        result[resultOffset] = (Double.isInfinite(x[xOffset])) ?\n                FastMath.copySign(FastMath.PI / 2.0, x[xOffset]) :\n                FastMath.copySign(0.0, y[yOffset]); // atan2(+/-inf, ...) = +/-pi/2, atan2(..., +/-inf) = +/-0.0\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..c99df7958 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,22 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n+        result[resultOffset] = 0.0; // atan2(+0.0, +0.0) = +0.0\n+    } else if (x[xOffset] == 0.0 && Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {\n+        result[resultOffset] = FastMath.copySign(0.0, y[yOffset]); // atan2(+0.0, -0.0) = +pi\n+    } else if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) && y[yOffset] == 0.0) {\n+        result[resultOffset] = FastMath.copySign(FastMath.PI, x[xOffset]); // atan2(-0.0, +0.0) = -0.0\n+    } else if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0) &&\n+               Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(-0.0)) {\n+        result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]); // atan2(-0.0, -0.0) = -pi\n+    } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n+        result[resultOffset] = (Double.isInfinite(x[xOffset])) ?\n+                FastMath.copySign(FastMath.PI / 2.0, x[xOffset]) :\n+                FastMath.copySign(0.0, y[yOffset]); // atan2(+/-inf, ...) = +/-pi/2, atan2(..., +/-inf) = +/-0.0\n+    }\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}