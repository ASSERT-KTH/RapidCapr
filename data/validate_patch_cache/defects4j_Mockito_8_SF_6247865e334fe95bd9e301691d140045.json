{
    "patch": "private Type get(TypeVariable typeParameter) {\n    if (contextualActualTypeParameters.containsKey(typeParameter)) {\n        // check if the type variable is already present in the map\n        return contextualActualTypeParameters.get(typeParameter);\n    }\n\n    Type[] bounds = contextualActualTypeParameters.get(typeParameter.getBounds()[0]);\n    if (bounds.length > 0 && bounds[0] instanceof TypeVariable) {\n        // handle the case where the bounds are also type variables\n        return get((TypeVariable) bounds[0]);\n    }\n\n    return contextualActualTypeParameters.get(typeParameter.getBounds()[0])[0];\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..9a2aa8092 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,20 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private Type get(TypeVariable typeParameter) {\n+    if (contextualActualTypeParameters.containsKey(typeParameter)) {\n+        // check if the type variable is already present in the map\n+        return contextualActualTypeParameters.get(typeParameter);\n+    }\n+\n+    Type[] bounds = contextualActualTypeParameters.get(typeParameter.getBounds()[0]);\n+    if (bounds.length > 0 && bounds[0] instanceof TypeVariable) {\n+        // handle the case where the bounds are also type variables\n+        return get((TypeVariable) bounds[0]);\n+    }\n+\n+    return contextualActualTypeParameters.get(typeParameter.getBounds()[0])[0];\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}