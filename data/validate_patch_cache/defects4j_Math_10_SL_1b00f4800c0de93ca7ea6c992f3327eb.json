{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    result[resultOffset] = Math.atan2(Double.isNaN(y[yOffset]) ? 0.0 : y[yOffset],\n                                      Double.isNaN(x[xOffset]) ? 0.0 : x[xOffset]);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..03e4dd071 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,10 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    result[resultOffset] = Math.atan2(Double.isNaN(y[yOffset]) ? 0.0 : y[yOffset],\n+                                      Double.isNaN(x[xOffset]) ? 0.0 : x[xOffset]);\n+}\n \n     }\n ",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}