{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        if (!block.isDo()) {\n          // For the purpose of this check, a break statement found in the\n          // first iteration of a do loop does not count.\n          if (ref.getStatement().getJSDocInfo() != null\n              && ref.getStatement().getJSDocInfo().isDoNotCollapse()) {\n            break;\n          }\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a01a0b6c 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        if (!block.isDo()) {\n+          // For the purpose of this check, a break statement found in the\n+          // first iteration of a do loop does not count.\n+          if (ref.getStatement().getJSDocInfo() != null\n+              && ref.getStatement().getJSDocInfo().isDoNotCollapse()) {\n+            break;\n+          }\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}