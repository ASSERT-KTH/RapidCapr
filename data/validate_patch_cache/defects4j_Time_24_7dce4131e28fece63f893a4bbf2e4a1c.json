{
    "patch": "            for (int i = 0; i < count; i++) {\n                try {\n                    millis = savedFields[i].set(millis, resetFields);\n                } catch (IllegalFieldValueException e) {\n                    if (text != null) {\n                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n                    }\n                    throw e;\n                }\n                if (resetFields && savedFields[i].iField.getType() == DateTimeFieldType.year() && savedFields[i].iValue != savedFields[i].iField.get(millis)) {\n                    // year was invalid, restore fields and try again\n                    for (int j = 0; j <= i; j++) {\n                        millis = savedFields[j].set(millis, false);\n                    }\n                    continue;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..185563b5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,23 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            for (int i = 0; i < count; i++) {\n+                try {\n+                    millis = savedFields[i].set(millis, resetFields);\n+                } catch (IllegalFieldValueException e) {\n+                    if (text != null) {\n+                        e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+                    }\n+                    throw e;\n+                }\n+                if (resetFields && savedFields[i].iField.getType() == DateTimeFieldType.year() && savedFields[i].iValue != savedFields[i].iField.get(millis)) {\n+                    // year was invalid, restore fields and try again\n+                    for (int j = 0; j <= i; j++) {\n+                        millis = savedFields[j].set(millis, false);\n+                    }\n+                    continue;\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2010-01-04> but was:<2008-12-29>",
    "test_result": "FAIL"
}