{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long instantAdjusted = instantLocal - offsetLocal;\n\n        // check for edge conditions before DST transition.\n        long nextTransition = nextTransition(instantAdjusted);\n        if (nextTransition == instantAdjusted) {\n            // We are on a DST transition.\n            // Choose the side that has the same offset as instantLocal.\n            long prevTransition = previousTransition(instantAdjusted);\n            int offsetPrev = getOffset(prevTransition);\n            int offsetNext = getOffset(nextTransition);\n            if (offsetPrev <= offsetLocal && offsetLocal <= offsetNext) {\n                // If the offset of instant is greater than the offset of\n                // instant+1hour then instant lies in the overlap and we have to\n                // adjust down.\n                if (offsetNext > offsetLocal + 1) {\n                    instantAdjusted = prevTransition;\n                }\n            } else {\n                // We're in the \"gap\" period between standard and daylight saving\n                // time. Choose the side that is closer to instantLocal.\n                if (instantLocal - prevTransition < nextTransition - instantLocal) {\n                    instantAdjusted = prevTransition;\n                } else {\n                    instantAdjusted = nextTransition;\n                }\n            }\n        } else if (nextTransition != instantLocal - offsetLocal) {\n            // We are not in the edge case, but the offset is invalid.\n            return offsetLocal;\n        }\n        return getOffset(instantAdjusted);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..472c1bbe 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        long instantAdjusted = instantLocal - offsetLocal;\n+\n+        // check for edge conditions before DST transition.\n+        long nextTransition = nextTransition(instantAdjusted);\n+        if (nextTransition == instantAdjusted) {\n+            // We are on a DST transition.\n+            // Choose the side that has the same offset as instantLocal.\n+            long prevTransition = previousTransition(instantAdjusted);\n+            int offsetPrev = getOffset(prevTransition);\n+            int offsetNext = getOffset(nextTransition);\n+            if (offsetPrev <= offsetLocal && offsetLocal <= offsetNext) {\n+                // If the offset of instant is greater than the offset of\n+                // instant+1hour then instant lies in the overlap and we have to\n+                // adjust down.\n+                if (offsetNext > offsetLocal + 1) {\n+                    instantAdjusted = prevTransition;\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+            } else {\n+                // We're in the \"gap\" period between standard and daylight saving\n+                // time. Choose the side that is closer to instantLocal.\n+                if (instantLocal - prevTransition < nextTransition - instantLocal) {\n+                    instantAdjusted = prevTransition;\n+                } else {\n+                    instantAdjusted = nextTransition;\n                 }\n             }\n+        } else if (nextTransition != instantLocal - offsetLocal) {\n+            // We are not in the edge case, but the offset is invalid.\n+            return offsetLocal;\n         }\n-        return offsetAdjusted;\n+        return getOffset(instantAdjusted);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}