{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        int initialOffset = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        // if the offsets are equal, return the offset\n        if (initialOffset == offsetAdjusted) {\n            return initialOffset;\n        }\n\n        // If the initial time is not near a DST boundary, return the adjusted offset\n        long nextTransition = nextTransition(instantAdjusted);\n        if (nextTransition == instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n            long nextAdjusted = nextTransition(instantLocal - initialOffset);\n            if (nextAdjusted == nextTransition) {\n                return offsetAdjusted;\n            }\n        }\n\n        // If the initial time is near a DST boundary and the adjusted time is not, return the initial offset\n        long prevTransition = previousTransition(instantAdjusted);\n        if (prevTransition < instantAdjusted - (long) DateTimeConstants.MILLIS_PER_HOUR) {\n            long prevAdjusted = previousTransition(instantLocal - initialOffset);\n            if (prevAdjusted < instantAdjusted - (long) DateTimeConstants.MILLIS_PER_HOUR) {\n                return initialOffset;\n            }\n        }\n\n        // If the initial time is near a DST boundary and the adjusted time is also near a DST boundary but the\n        // boundary is not the same, return the initial offset\n        long nextAdjusted = nextTransition(instantLocal - initialOffset);\n        if (nextTransition != nextAdjusted) {\n            return initialOffset;\n        }\n\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..c0402603 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -879,34 +879,41 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        int initialOffset = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        long instantAdjusted = instantLocal - initialOffset;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+\n+        // if the offsets are equal, return the offset\n+        if (initialOffset == offsetAdjusted) {\n+            return initialOffset;\n+        }\n+\n+        // If the initial time is not near a DST boundary, return the adjusted offset\n+        long nextTransition = nextTransition(instantAdjusted);\n+        if (nextTransition == instantAdjusted + DateTimeConstants.MILLIS_PER_HOUR) {\n+            long nextAdjusted = nextTransition(instantLocal - initialOffset);\n+            if (nextAdjusted == nextTransition) {\n+                return offsetAdjusted;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        }\n+\n+        // If the initial time is near a DST boundary and the adjusted time is not, return the initial offset\n+        long prevTransition = previousTransition(instantAdjusted);\n+        if (prevTransition < instantAdjusted - (long) DateTimeConstants.MILLIS_PER_HOUR) {\n+            long prevAdjusted = previousTransition(instantLocal - initialOffset);\n+            if (prevAdjusted < instantAdjusted - (long) DateTimeConstants.MILLIS_PER_HOUR) {\n+                return initialOffset;\n             }\n         }\n+\n+        // If the initial time is near a DST boundary and the adjusted time is also near a DST boundary but the\n+        // boundary is not the same, return the initial offset\n+        long nextAdjusted = nextTransition(instantLocal - initialOffset);\n+        if (nextTransition != nextAdjusted) {\n+            return initialOffset;\n+        }\n+\n         return offsetAdjusted;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}