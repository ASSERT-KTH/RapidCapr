{
    "patch": "case REGULA_FALSI:\n    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n        final double tempX = x0;\n        final double tempF = f0;\n        x0 = x1;\n        x1 = tempX;\n        f0 = f1;\n        f1 = tempF;\n    }\n    final double denominator = f1 - f0;\n    if (FastMath.abs(denominator) <= FunctionEvaluations.EPSILON) {\n        // can't continue\n        throw new ConvergenceException(LocalizedFormats.PROBLEM_ILL_POSED);\n    }\n    final double newX = x1 - ((f1 * (x1 - x0)) / denominator);\n    if (Double.isNaN(newX)) {\n        // can't continue\n        throw new ConvergenceException(LocalizedFormats.PROBLEM_ILL_POSED);\n    }\n    // Update the bounds with the new approximation.\n    if (f1 * computeObjectiveValue(newX) < 0) {\n        // The value of x1 has switched to the other bound, thus inverting\n        // the interval.\n        x0 = x1;\n        f0 = f1;\n        x1 = newX;\n        f1 = computeObjectiveValue(x1);\n        inverted = !inverted;\n    } else {\n        if (this.method == Method.REGULA_FALSI) {\n            // No need to update the function value since it will be evaluated\n            // in the next iteration.\n            // However, we need to make sure that the new point is not equal to\n            // the old one (the case when both the cubic and linear approximations\n            // that lead to the new point share the same root).\n            if (FastMath.abs(newX - x1) > FastMath.abs(x1 - x0)) {\n                f0 *= 0.5;\n                f1 *= 0.5;\n            }\n        } else if (this.method == Method.PEGASUS) {\n            f0 *= f1 / (f1 + computeObjectiveValue(newX));\n        } else {\n            throw new MathInternalError();\n        }\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..1f71f8548 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,52 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+        final double tempX = x0;\n+        final double tempF = f0;\n+        x0 = x1;\n+        x1 = tempX;\n+        f0 = f1;\n+        f1 = tempF;\n+    }\n+    final double denominator = f1 - f0;\n+    if (FastMath.abs(denominator) <= FunctionEvaluations.EPSILON) {\n+        // can't continue\n+        throw new ConvergenceException(LocalizedFormats.PROBLEM_ILL_POSED);\n+    }\n+    final double newX = x1 - ((f1 * (x1 - x0)) / denominator);\n+    if (Double.isNaN(newX)) {\n+        // can't continue\n+        throw new ConvergenceException(LocalizedFormats.PROBLEM_ILL_POSED);\n+    }\n+    // Update the bounds with the new approximation.\n+    if (f1 * computeObjectiveValue(newX) < 0) {\n+        // The value of x1 has switched to the other bound, thus inverting\n+        // the interval.\n+        x0 = x1;\n+        f0 = f1;\n+        x1 = newX;\n+        f1 = computeObjectiveValue(x1);\n+        inverted = !inverted;\n+    } else {\n+        if (this.method == Method.REGULA_FALSI) {\n+            // No need to update the function value since it will be evaluated\n+            // in the next iteration.\n+            // However, we need to make sure that the new point is not equal to\n+            // the old one (the case when both the cubic and linear approximations\n+            // that lead to the new point share the same root).\n+            if (FastMath.abs(newX - x1) > FastMath.abs(x1 - x0)) {\n+                f0 *= 0.5;\n+                f1 *= 0.5;\n+            }\n+        } else if (this.method == Method.PEGASUS) {\n+            f0 *= f1 / (f1 + computeObjectiveValue(newX));\n+        } else {\n+            throw new MathInternalError();\n+        }\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}