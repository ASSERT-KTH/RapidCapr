{
    "patch": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n    if (start == null || end == null) { // check for null arguments\n        throw new IllegalArgumentException(\"Start or End is null.\");\n    }\n\n    if (start.compareTo(end) > 0) { // check if start is after end\n        throw new IllegalArgumentException(\"Start is after end.\");\n    }\n\n    int startIndex = getIndex(start);\n    int endIndex = getIndex(end);\n    int dataSize = this.data.size();\n\n    // check if start and end periods are outside of current series\n    if (startIndex < 0 && endIndex < 0) {\n        return new TimeSeries(getDomainDescription());\n    }\n\n    // check if start period is outside of current series\n    if (startIndex < 0) {\n        startIndex = 0;\n    }\n\n    // check if end period is outside of current series\n    if (endIndex < 0) {\n        endIndex = dataSize - 1;\n    }\n\n    // check if start period is after end period\n    if (startIndex > endIndex) {\n        return new TimeSeries(getDomainDescription());\n    }\n\n    return createCopy(startIndex, endIndex);\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 4067e3e..a7a3996 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -915,45 +915,41 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n-        throws CloneNotSupportedException {\n-\n-        if (start == null) {\n-            throw new IllegalArgumentException(\"Null 'start' argument.\");\n-        }\n-        if (end == null) {\n-            throw new IllegalArgumentException(\"Null 'end' argument.\");\n-        }\n-        if (start.compareTo(end) > 0) {\n-            throw new IllegalArgumentException(\n-                    \"Requires start on or before end.\");\n-        }\n-        boolean emptyRange = false;\n-        int startIndex = getIndex(start);\n-        if (startIndex < 0) {\n-            startIndex = -(startIndex + 1);\n-            if (startIndex == this.data.size()) {\n-                emptyRange = true;  // start is after last data item\n-            }\n-        }\n-        int endIndex = getIndex(end);\n-        if (endIndex < 0) {             // end period is not in original series\n-            endIndex = -(endIndex + 1); // this is first item AFTER end period\n-            endIndex = endIndex - 1;    // so this is last item BEFORE end\n-        }\n-        if (endIndex < 0) {\n-            emptyRange = true;\n-        }\n-        if (emptyRange) {\n-            TimeSeries copy = (TimeSeries) super.clone();\n-            copy.data = new java.util.ArrayList();\n-            return copy;\n-        }\n-        else {\n-            return createCopy(startIndex, endIndex);\n-        }\n-\n-    }\n+public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end) throws CloneNotSupportedException {\n+    if (start == null || end == null) { // check for null arguments\n+        throw new IllegalArgumentException(\"Start or End is null.\");\n+    }\n+\n+    if (start.compareTo(end) > 0) { // check if start is after end\n+        throw new IllegalArgumentException(\"Start is after end.\");\n+    }\n+\n+    int startIndex = getIndex(start);\n+    int endIndex = getIndex(end);\n+    int dataSize = this.data.size();\n+\n+    // check if start and end periods are outside of current series\n+    if (startIndex < 0 && endIndex < 0) {\n+        return new TimeSeries(getDomainDescription());\n+    }\n+\n+    // check if start period is outside of current series\n+    if (startIndex < 0) {\n+        startIndex = 0;\n+    }\n+\n+    // check if end period is outside of current series\n+    if (endIndex < 0) {\n+        endIndex = dataSize - 1;\n+    }\n+\n+    // check if start period is after end period\n+    if (startIndex > endIndex) {\n+        return new TimeSeries(getDomainDescription());\n+    }\n+\n+    return createCopy(startIndex, endIndex);\n+}\n \n     /**\n      * Tests the series for equality with an arbitrary object.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2> but was:<0>",
    "test_result": "FAIL"
}