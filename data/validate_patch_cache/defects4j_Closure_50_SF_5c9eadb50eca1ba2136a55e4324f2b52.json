{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n    boolean hasSecondArg = false;\n    String joinString = \",\";\n\n    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    if (right != null) {\n      hasSecondArg = true;\n      joinString = NodeUtil.getStringValue(right);\n      if (joinString == null) {\n        return n;\n      }\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          foldedSize += sb.length();\n          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n          sb = null;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      foldedSize += sb.length();\n      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n    }\n\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    if (arrayFoldedChildren.isEmpty()) {\n      Node emptyStringNode = IR.string(\"\");\n      n.replaceWith(emptyStringNode);\n      reportCodeChange();\n      return emptyStringNode;\n    } else if (arrayFoldedChildren.size() == 1) {\n      Node foldedStringNode = arrayFoldedChildren.get(0);\n      if (!hasSecondArg && foldedSize <= originalSize) {\n        n.replaceWith(foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      } else if (right != null && !hasSecondArg && right.isNullOrUndefined()) {\n        Node newStringNode = Node.newString(\"\");\n        n.replaceWith(newStringNode);\n        reportCodeChange();\n        return newStringNode;\n      }\n    }\n\n    if (hasSecondArg) {\n      foldedSize += InlineCostEstimator.getCost(right);\n    }\n\n    if (foldedSize <= originalSize) {\n      Node block = IR.block();\n      int i = 0;\n      for (Node node : arrayFoldedChildren) {\n        if (hasSecondArg && i > 0) {\n          block.addChildToBack(Node.newString(joinString));\n          foldedSize++;\n        }\n        block.addChildToBack(node);\n        foldedSize += InlineCostEstimator.getCost(node);\n        i++;\n      }\n\n      // Add the second argument if there is one\n      if (hasSecondArg) {\n        if (right.isString()) {\n          block.addChildToBack(right.cloneTree());\n        } else {\n          Node comma = IR.comma().srcref(right);\n          block.addChildToBack(comma);\n          block.addChildToBack(right.cloneTree());\n        }\n      }\n\n      // Create the \".join()\" function invocation\n      Node joinFunction = NodeUtil.newQName(n.getOwnerDocument(), \"join\");\n\n      Node joinInvocation = new Node(Token.CALL, joinFunction);\n      joinInvocation.putBooleanProp(Node.FREE_CALL, false);\n\n      joinInvocation.addChildToBack(arrayNode.cloneTree());\n      joinInvocation.addChildToBack(block);\n      if (hasSecondArg) {\n        if (right.isString()) {\n          joinInvocation.addChildToBack(right.cloneTree());\n        } else {\n          joinInvocation.addChildToBack(IR.comma().srcref(right));\n          joinInvocation.addChildToBack(right.cloneTree());\n        }\n      }\n\n      n.replaceWith(joinInvocation);\n      reportCodeChange();\n      return joinInvocation;\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..8a5e174c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,29 +372,32 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n+    boolean hasSecondArg = false;\n+    String joinString = \",\";\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if (arrayNode.getType() != Token.ARRAYLIT || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    if (right != null) {\n+      hasSecondArg = true;\n+      joinString = NodeUtil.getStringValue(right);\n+      if (joinString == null) {\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n         if (sb == null) {\n@@ -406,10 +409,8 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       } else {\n         if (sb != null) {\n           Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n+          foldedSize += sb.length();\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n           sb = null;\n         }\n         foldedSize += InlineCostEstimator.getCost(elem);\n@@ -421,55 +422,81 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n \n     if (sb != null) {\n       Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      foldedSize += sb.length();\n+      arrayFoldedChildren.add(Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n+\n     foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n+\n+    if (arrayFoldedChildren.isEmpty()) {\n+      Node emptyStringNode = IR.string(\"\");\n+      n.replaceWith(emptyStringNode);\n+      reportCodeChange();\n+      return emptyStringNode;\n+    } else if (arrayFoldedChildren.size() == 1) {\n+      Node foldedStringNode = arrayFoldedChildren.get(0);\n+      if (!hasSecondArg && foldedSize <= originalSize) {\n+        n.replaceWith(foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n+      } else if (right != null && !hasSecondArg && right.isNullOrUndefined()) {\n+        Node newStringNode = Node.newString(\"\");\n+        n.replaceWith(newStringNode);\n+        reportCodeChange();\n+        return newStringNode;\n+      }\n+    }\n+\n+    if (hasSecondArg) {\n+      foldedSize += InlineCostEstimator.getCost(right);\n+    }\n+\n+    if (foldedSize <= originalSize) {\n+      Node block = IR.block();\n+      int i = 0;\n+      for (Node node : arrayFoldedChildren) {\n+        if (hasSecondArg && i > 0) {\n+          block.addChildToBack(Node.newString(joinString));\n+          foldedSize++;\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+        block.addChildToBack(node);\n+        foldedSize += InlineCostEstimator.getCost(node);\n+        i++;\n+      }\n+\n+      // Add the second argument if there is one\n+      if (hasSecondArg) {\n+        if (right.isString()) {\n+          block.addChildToBack(right.cloneTree());\n+        } else {\n+          Node comma = IR.comma().srcref(right);\n+          block.addChildToBack(comma);\n+          block.addChildToBack(right.cloneTree());\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+      }\n+\n+      // Create the \".join()\" function invocation\n+      Node joinFunction = NodeUtil.newQName(n.getOwnerDocument(), \"join\");\n+\n+      Node joinInvocation = new Node(Token.CALL, joinFunction);\n+      joinInvocation.putBooleanProp(Node.FREE_CALL, false);\n+\n+      joinInvocation.addChildToBack(arrayNode.cloneTree());\n+      joinInvocation.addChildToBack(block);\n+      if (hasSecondArg) {\n+        if (right.isString()) {\n+          joinInvocation.addChildToBack(right.cloneTree());\n+        } else {\n+          joinInvocation.addChildToBack(IR.comma().srcref(right));\n+          joinInvocation.addChildToBack(right.cloneTree());\n         }\n-        reportCodeChange();\n-        break;\n+      }\n+\n+      n.replaceWith(joinInvocation);\n+      reportCodeChange();\n+      return joinInvocation;\n     }\n \n     return n;\n@@ -642,4 +669,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}