{
    "patch": "JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> scope) {\n  setResolvedTypeInternal(this);\n  call = safeResolve(call, errorReporter, scope);\n  prototype = safeResolve(prototype, errorReporter, scope);\n  typeOfThis = safeResolve(typeOfThis, errorReporter, scope);\n  if (!(typeOfThis instanceof ObjectType || typeOfThis == null)) {\n    errorReporter.error(\n        \"this type in a function type must be an object type; found \" + typeOfThis,\n        getPosition());\n  }\n\n  boolean changed = false;\n  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n  for (ObjectType iface : implementedInterfaces) {\n    if (iface instanceof FunctionType) {\n      errorReporter.error(\n          \"Interface type in a function must be an object type; found \" + iface);\n    }\n    JSType resolvedIface = safeResolve(iface, errorReporter, scope);\n\n    if (!(resolvedIface instanceof ObjectType)) {\n      errorReporter.error(\n          \"Interface type in a function must be an object type; found \" + resolvedIface);\n      resolvedInterfaces.add(iface);\n    } else {\n      ObjectType resolvedObj = (ObjectType) resolvedIface;\n      resolvedInterfaces.add(resolvedObj);\n      changed |= (resolvedObj != iface);\n    }\n  }\n  if (changed) {\n    implementedInterfaces = resolvedInterfaces.build();\n  }\n\n  if (subTypes != null) {\n    for (int i = 0; i < subTypes.size(); i++) {\n      subTypes.set(i, safeResolveSubtype(subTypes.get(i), errorReporter, scope));\n    }\n  }\n\n  return super.resolveInternal(errorReporter, scope);\n}\n\nprivate FunctionType safeResolveSubtype(\n    FunctionType subtype, ErrorReporter errorReporter, StaticScope<JSType> scope) {\n  if (subtype == null) {\n    return null;\n  }\n  JSType resolvedSubtype = safeResolve(subtype, errorReporter, scope);\n  if (resolvedSubtype instanceof FunctionType) {\n    return (FunctionType) resolvedSubtype;\n  } else {\n    errorReporter.error(\"Subtype within a function type must always be a function; found \"\n        + resolvedSubtype + \" instead\");\n    return subtype;\n  }\n}\n\nprivate JSType safeResolve(\n    JSType type, ErrorReporter errorReporter, StaticScope<JSType> scope) {\n  if (type == null) {\n    return null;\n  }\n  JSType resolved = type.resolve(errorReporter, scope);\n  if (resolved == null) {\n    return type;\n  }\n  return resolved;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..40ea456e 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,37 +859,75 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n-    setResolvedTypeInternal(this);\n-\n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-\n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n-\n-    boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n-    }\n-    if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n+JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> scope) {\n+  setResolvedTypeInternal(this);\n+  call = safeResolve(call, errorReporter, scope);\n+  prototype = safeResolve(prototype, errorReporter, scope);\n+  typeOfThis = safeResolve(typeOfThis, errorReporter, scope);\n+  if (!(typeOfThis instanceof ObjectType || typeOfThis == null)) {\n+    errorReporter.error(\n+        \"this type in a function type must be an object type; found \" + typeOfThis,\n+        getPosition());\n+  }\n+\n+  boolean changed = false;\n+  ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n+  for (ObjectType iface : implementedInterfaces) {\n+    if (iface instanceof FunctionType) {\n+      errorReporter.error(\n+          \"Interface type in a function must be an object type; found \" + iface);\n+    }\n+    JSType resolvedIface = safeResolve(iface, errorReporter, scope);\n+\n+    if (!(resolvedIface instanceof ObjectType)) {\n+      errorReporter.error(\n+          \"Interface type in a function must be an object type; found \" + resolvedIface);\n+      resolvedInterfaces.add(iface);\n+    } else {\n+      ObjectType resolvedObj = (ObjectType) resolvedIface;\n+      resolvedInterfaces.add(resolvedObj);\n+      changed |= (resolvedObj != iface);\n     }\n+  }\n+  if (changed) {\n+    implementedInterfaces = resolvedInterfaces.build();\n+  }\n \n-    if (subTypes != null) {\n-      for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n-      }\n+  if (subTypes != null) {\n+    for (int i = 0; i < subTypes.size(); i++) {\n+      subTypes.set(i, safeResolveSubtype(subTypes.get(i), errorReporter, scope));\n     }\n+  }\n \n-    return super.resolveInternal(t, scope);\n+  return super.resolveInternal(errorReporter, scope);\n+}\n+\n+private FunctionType safeResolveSubtype(\n+    FunctionType subtype, ErrorReporter errorReporter, StaticScope<JSType> scope) {\n+  if (subtype == null) {\n+    return null;\n+  }\n+  JSType resolvedSubtype = safeResolve(subtype, errorReporter, scope);\n+  if (resolvedSubtype instanceof FunctionType) {\n+    return (FunctionType) resolvedSubtype;\n+  } else {\n+    errorReporter.error(\"Subtype within a function type must always be a function; found \"\n+        + resolvedSubtype + \" instead\");\n+    return subtype;\n+  }\n+}\n+\n+private JSType safeResolve(\n+    JSType type, ErrorReporter errorReporter, StaticScope<JSType> scope) {\n+  if (type == null) {\n+    return null;\n   }\n+  JSType resolved = type.resolve(errorReporter, scope);\n+  if (resolved == null) {\n+    return type;\n+  }\n+  return resolved;\n+}\n \n   @Override\n   public String toDebugHashCodeString() {",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}