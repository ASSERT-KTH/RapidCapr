{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n      Node maybeExpr = n.getFirstChild();\n      if (NodeUtil.isExpressionNode(maybeExpr)) {\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        Node enclosingStatement = n.getParent();\n        if (NodeUtil.isFunctionExpression(enclosingStatement)) {\n          return !FunctionTypeBuilder.hasUndeclaredParameters(enclosingStatement);\n        } else if (NodeUtil.isExpressionResult(enclosingStatement)) {\n          checkState(enclosingStatement.getParent().getType() == Token.EXPR_RESULT);\n          enclosingStatement = enclosingStatement.getParent();\n          return !NodeUtil.isExpressionNode(enclosingStatement.getParent());\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..971ba532 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,21 +516,29 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.getType() == Token.BLOCK && n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstChild();\n+      if (NodeUtil.isExpressionNode(maybeExpr)) {\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        Node enclosingStatement = n.getParent();\n+        if (NodeUtil.isFunctionExpression(enclosingStatement)) {\n+          return !FunctionTypeBuilder.hasUndeclaredParameters(enclosingStatement);\n+        } else if (NodeUtil.isExpressionResult(enclosingStatement)) {\n+          checkState(enclosingStatement.getParent().getType() == Token.EXPR_RESULT);\n+          enclosingStatement = enclosingStatement.getParent();\n+          return !NodeUtil.isExpressionNode(enclosingStatement.getParent());\n+        } else {\n+          return true;\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}