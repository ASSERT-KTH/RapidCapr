{
    "patch": "options.setWarningsGuard(new WarningsGuard() {\n  @Override\n  public CheckLevel level(JSError error) {\n    return error.getType().equals(DiagnosticType.EXTERNS_VALIDATION) ? CheckLevel.OFF : null;\n  }\n});",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..2dc33e5e 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,12 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+options.setWarningsGuard(new WarningsGuard() {\n+  @Override\n+  public CheckLevel level(JSError error) {\n+    return error.getType().equals(DiagnosticType.EXTERNS_VALIDATION) ? CheckLevel.OFF : null;\n+  }\n+});\n     }\n \n     return options;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}