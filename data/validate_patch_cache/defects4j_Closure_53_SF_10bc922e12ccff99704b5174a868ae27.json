{
    "patch": "import com.google.common.collect.Lists;\nimport com.google.common.collect.Sets;\n\nprivate void replaceAssignmentExpression(Var v, Reference ref,\n                                         Map<String, String> varmap) {\n  // Compute all of the assignments necessary\n  List<Node> nodes = Lists.newArrayList();\n  Node val = ref.getAssignedValue();\n  blacklistVarReferencesInTree(val, v.scope);\n  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n  for (Node key = val.getFirstChild(); key != null;\n       key = key.getNext()) {\n    String var = key.getString();\n    Node value = key.removeFirstChild();\n    // TODO(user): Copy type information.\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)), value));\n    all.remove(var);\n  }\n\n  // TODO(user): Better source information.\n  for (String var : all) {\n    nodes.add(\n      new Node(Token.ASSIGN,\n               Node.newString(Token.NAME, varmap.get(var)),\n               NodeUtil.newUndefinedNode(null)));\n  }\n\n  Node replacement;\n    // All assignments evaluate to true, so make sure that the\n    // expr statement evaluates to true in case it matters.\n    nodes.add(new Node(Token.TRUE));\n\n    // Join these using COMMA.  A COMMA node must have 2 children, so we\n    // create a tree. In the tree the first child be the COMMA to match\n    // the parser, otherwise tree equality tests fail.\n    nodes = Lists.reverse(nodes);\n    replacement = new Node(Token.COMMA);\n    Node cur = replacement;\n    int i;\n    for (i = 0; i < nodes.size() - 2; i++) {\n      cur.addChildToFront(nodes.get(i));\n      Node t = new Node(Token.COMMA);\n      cur.addChildToFront(t);\n      cur = t;\n    }\n    cur.addChildToFront(nodes.get(i));\n    cur.addChildToFront(nodes.get(i + 1));\n\n  Node replace = ref.getParent();\n  replacement.copyInformationFromForTree(replace);\n\n  if (replace.getType() == Token.VAR) {\n    replace.getParent().replaceChild(\n        replace, NodeUtil.newExpr(replacement));\n  } else {\n    replace.getParent().replaceChild(replace, replacement);\n  }\n}\n\n/**\n * Blacklist all references to a variable that appear in a tree.\n */\nprivate void blacklistVarReferencesInTree(Node n, Scope scope) {\n  if (n.getType() == Token.NAME && scope.isDeclared(n.getString(), true)) {\n    // Blacklist all references to variables declared in the same scope as v\n    Var var = null;\n    String name = n.getString();\n    while (scope != null) {\n      var = scope.getVar(name);\n      if (var != null) {\n        break;\n      }\n      scope = scope.getParent();\n    }\n    for (Reference ref : var.getReferences()) {\n      ref.getParent().putBooleanProp(Node.IS_CONSTANT_NAME, true);\n    }\n  }\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    blacklistVarReferencesInTree(c, scope);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9061925d..6ab2c7a9 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -300,64 +300,91 @@ class InlineObjectLiterals implements CompilerPass {\n      * Note that the resulting expression will always evaluate to\n      * true, as would the x = {...} expression.\n      */\n-    private void replaceAssignmentExpression(Var v, Reference ref,\n-                                             Map<String, String> varmap) {\n-      // Compute all of the assignments necessary\n-      List<Node> nodes = Lists.newArrayList();\n-      Node val = ref.getAssignedValue();\n-      blacklistVarReferencesInTree(val, v.scope);\n-      Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n-      Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n-      for (Node key = val.getFirstChild(); key != null;\n-           key = key.getNext()) {\n-        String var = key.getString();\n-        Node value = key.removeFirstChild();\n-        // TODO(user): Copy type information.\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)), value));\n-        all.remove(var);\n-      }\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n \n-      // TODO(user): Better source information.\n-      for (String var : all) {\n-        nodes.add(\n-          new Node(Token.ASSIGN,\n-                   Node.newString(Token.NAME, varmap.get(var)),\n-                   NodeUtil.newUndefinedNode(null)));\n-      }\n+private void replaceAssignmentExpression(Var v, Reference ref,\n+                                         Map<String, String> varmap) {\n+  // Compute all of the assignments necessary\n+  List<Node> nodes = Lists.newArrayList();\n+  Node val = ref.getAssignedValue();\n+  blacklistVarReferencesInTree(val, v.scope);\n+  Preconditions.checkState(val.getType() == Token.OBJECTLIT);\n+  Set<String> all = Sets.newLinkedHashSet(varmap.keySet());\n+  for (Node key = val.getFirstChild(); key != null;\n+       key = key.getNext()) {\n+    String var = key.getString();\n+    Node value = key.removeFirstChild();\n+    // TODO(user): Copy type information.\n+    nodes.add(\n+      new Node(Token.ASSIGN,\n+               Node.newString(Token.NAME, varmap.get(var)), value));\n+    all.remove(var);\n+  }\n \n-      Node replacement;\n-        // All assignments evaluate to true, so make sure that the\n-        // expr statement evaluates to true in case it matters.\n-        nodes.add(new Node(Token.TRUE));\n-\n-        // Join these using COMMA.  A COMMA node must have 2 children, so we\n-        // create a tree. In the tree the first child be the COMMA to match\n-        // the parser, otherwise tree equality tests fail.\n-        nodes = Lists.reverse(nodes);\n-        replacement = new Node(Token.COMMA);\n-        Node cur = replacement;\n-        int i;\n-        for (i = 0; i < nodes.size() - 2; i++) {\n-          cur.addChildToFront(nodes.get(i));\n-          Node t = new Node(Token.COMMA);\n-          cur.addChildToFront(t);\n-          cur = t;\n-        }\n-        cur.addChildToFront(nodes.get(i));\n-        cur.addChildToFront(nodes.get(i + 1));\n+  // TODO(user): Better source information.\n+  for (String var : all) {\n+    nodes.add(\n+      new Node(Token.ASSIGN,\n+               Node.newString(Token.NAME, varmap.get(var)),\n+               NodeUtil.newUndefinedNode(null)));\n+  }\n \n-      Node replace = ref.getParent();\n-      replacement.copyInformationFromForTree(replace);\n+  Node replacement;\n+    // All assignments evaluate to true, so make sure that the\n+    // expr statement evaluates to true in case it matters.\n+    nodes.add(new Node(Token.TRUE));\n+\n+    // Join these using COMMA.  A COMMA node must have 2 children, so we\n+    // create a tree. In the tree the first child be the COMMA to match\n+    // the parser, otherwise tree equality tests fail.\n+    nodes = Lists.reverse(nodes);\n+    replacement = new Node(Token.COMMA);\n+    Node cur = replacement;\n+    int i;\n+    for (i = 0; i < nodes.size() - 2; i++) {\n+      cur.addChildToFront(nodes.get(i));\n+      Node t = new Node(Token.COMMA);\n+      cur.addChildToFront(t);\n+      cur = t;\n+    }\n+    cur.addChildToFront(nodes.get(i));\n+    cur.addChildToFront(nodes.get(i + 1));\n \n-      if (replace.getType() == Token.VAR) {\n-        replace.getParent().replaceChild(\n-            replace, NodeUtil.newExpr(replacement));\n-      } else {\n-        replace.getParent().replaceChild(replace, replacement);\n+  Node replace = ref.getParent();\n+  replacement.copyInformationFromForTree(replace);\n+\n+  if (replace.getType() == Token.VAR) {\n+    replace.getParent().replaceChild(\n+        replace, NodeUtil.newExpr(replacement));\n+  } else {\n+    replace.getParent().replaceChild(replace, replacement);\n+  }\n+}\n+\n+/**\n+ * Blacklist all references to a variable that appear in a tree.\n+ */\n+private void blacklistVarReferencesInTree(Node n, Scope scope) {\n+  if (n.getType() == Token.NAME && scope.isDeclared(n.getString(), true)) {\n+    // Blacklist all references to variables declared in the same scope as v\n+    Var var = null;\n+    String name = n.getString();\n+    while (scope != null) {\n+      var = scope.getVar(name);\n+      if (var != null) {\n+        break;\n       }\n+      scope = scope.getParent();\n+    }\n+    for (Reference ref : var.getReferences()) {\n+      ref.getParent().putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n+  }\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    blacklistVarReferencesInTree(c, scope);\n+  }\n+}\n \n     /**\n      * Splits up the object literal into individual variables, and",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}