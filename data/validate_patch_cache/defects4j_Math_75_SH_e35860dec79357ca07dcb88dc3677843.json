{
    "patch": "    public double getPct(Object v) {\n        if (values.size() == 0) {\n            return Double.NaN;\n        }\n        int pos = Collections.binarySearch(values, v, comparator());\n        if (pos < 0) {\n            pos = - pos - 1;\n        } else {\n            pos++; // increment position to account for inclusive counting\n        }\n        return (double) pos / (values.size() + 1); // include upper bound in count\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..b405a19b5 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -300,7 +300,18 @@ public class Frequency implements Serializable {\n      */\n     @Deprecated\n     public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+    public double getPct(Object v) {\n+        if (values.size() == 0) {\n+            return Double.NaN;\n+        }\n+        int pos = Collections.binarySearch(values, v, comparator());\n+        if (pos < 0) {\n+            pos = - pos - 1;\n+        } else {\n+            pos++; // increment position to account for inclusive counting\n+        }\n+        return (double) pos / (values.size() + 1); // include upper bound in count\n+    }\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}