{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isCall()) { // check if node is a call expression\n      return false;\n    }\n    return NodeUtil.isFunctionExpression(n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..bcc4c5e5 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,6 +114,9 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isCall()) { // check if node is a call expression\n+      return false;\n+    }\n     return NodeUtil.isFunctionExpression(n);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}