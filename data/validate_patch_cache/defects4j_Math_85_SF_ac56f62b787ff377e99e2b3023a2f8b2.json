{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n                               FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0;\n    final double growthFactor = 1.6;\n\n    do {\n        fa = function.value(a);\n        fb = function.value(b);\n\n        // Check for bracket found or converged\n        if ((fa * fb) <= 0.0) {\n            return new double[]{a, b};\n        }\n\n        if (Math.abs(fa) < Math.abs(fb)) {\n            // Exponential expansion of point a\n            double temp = b;\n            b = a + growthFactor * (a - temp);\n            a = Math.max(a - growthFactor * (temp - a), lowerBound);\n        } else {\n            // Exponential expansion of point b\n            double temp = a;\n            a = b + growthFactor * (b - temp);\n            b = Math.min(b - growthFactor * (temp - b), upperBound);\n        }\n\n        ++numIterations;\n    } while (numIterations < maximumIterations);\n\n    throw new ConvergenceException(\n            \"maximum number of iterations ({0}) exceeded in bracketing operation, \" +\n                    \"initial={1}, lower bound={2}, upper bound={3}, final a value={4}, \" +\n                    \"final b value={5}, f(a)={6}, f(b)={7}\",\n            maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..442c0e13f 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,61 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+                               FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    int numIterations = 0;\n+    final double growthFactor = 1.6;\n+\n+    do {\n+        fa = function.value(a);\n+        fb = function.value(b);\n+\n+        // Check for bracket found or converged\n+        if ((fa * fb) <= 0.0) {\n+            return new double[]{a, b};\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        if (Math.abs(fa) < Math.abs(fb)) {\n+            // Exponential expansion of point a\n+            double temp = b;\n+            b = a + growthFactor * (a - temp);\n+            a = Math.max(a - growthFactor * (temp - a), lowerBound);\n+        } else {\n+            // Exponential expansion of point b\n+            double temp = a;\n+            a = b + growthFactor * (b - temp);\n+            b = Math.min(b - growthFactor * (temp - b), upperBound);\n         }\n-        \n-        return new double[]{a, b};\n-    }\n+\n+        ++numIterations;\n+    } while (numIterations < maximumIterations);\n+\n+    throw new ConvergenceException(\n+            \"maximum number of iterations ({0}) exceeded in bracketing operation, \" +\n+                    \"initial={1}, lower bound={2}, upper bound={3}, final a value={4}, \" +\n+                    \"final b value={5}, f(a)={6}, f(b)={7}\",\n+            maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}