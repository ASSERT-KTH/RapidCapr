{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        Chronology chrono = instant.getChronology();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instant.getMillis(), chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            instant.setMillis(bucket.computeMillis(true, text));    // fix: use true to keep local time\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger())); // fix: set zone directly from the bucket\n            } else if (bucket.getZone() != null) {\n                instant.setChronology(chrono.withZone(bucket.getZone()));    // fix: set Chronology's time zone\n            }\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        } else {\n            instant.setMillis(Long.MIN_VALUE);    // fix: set to minimum value to indicate parsing failure\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..0a7ea036 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -700,25 +700,22 @@ public class DateTimeFormatter {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n         \n-        long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            instant.getMillis(), chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (newPos < 0) {\n+            instant.setMillis(bucket.computeMillis(true, text));    // fix: use true to keep local time\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger())); // fix: set zone directly from the bucket\n+            } else if (bucket.getZone() != null) {\n+                instant.setChronology(chrono.withZone(bucket.getZone()));    // fix: set Chronology's time zone\n+            }\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+        } else {\n+            instant.setMillis(Long.MIN_VALUE);    // fix: set to minimum value to indicate parsing failure\n         }\n         return newPos;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2004-05-01T12:20:30.000+09:00> but was:<-292275055-05-17T02:06:03.192+09:18:59>",
    "test_result": "FAIL"
}