{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Set<String> paramNames = new HashSet<String>();\n      for (Node astParameter : astParameters.children()) {\n        String paramName = astParameter.getString();\n        if (paramNames.contains(paramName)) {\n          compiler.report(JSError.make(astParameter, DUPLICATE_VARS, paramName));\n        } else {\n          paramNames.add(paramName);\n          Node jsDocParameter = findJsDocParameter(paramName, jsDocParameters);\n          defineSlot(astParameter, functionNode,\n              (jsDocParameter != null) ? jsDocParameter.getJSType() : null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments\n\nprivate Node findJsDocParameter(String paramName, Node jsDocParameters) {\n  for (Node jsDocParameter = jsDocParameters.getFirstChild();\n      jsDocParameter != null; jsDocParameter = jsDocParameter.getNext()) {\n    if (jsDocParameter.getString().equals(paramName)) {\n      return jsDocParameter;\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..4087aec6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,38 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n-            }\n-          }\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Set<String> paramNames = new HashSet<String>();\n+      for (Node astParameter : astParameters.children()) {\n+        String paramName = astParameter.getString();\n+        if (paramNames.contains(paramName)) {\n+          compiler.report(JSError.make(astParameter, DUPLICATE_VARS, paramName));\n+        } else {\n+          paramNames.add(paramName);\n+          Node jsDocParameter = findJsDocParameter(paramName, jsDocParameters);\n+          defineSlot(astParameter, functionNode,\n+              (jsDocParameter != null) ? jsDocParameter.getJSType() : null, true);\n         }\n       }\n-    } // end declareArguments\n+    }\n+  }\n+} // end declareArguments\n+\n+private Node findJsDocParameter(String paramName, Node jsDocParameters) {\n+  for (Node jsDocParameter = jsDocParameters.getFirstChild();\n+      jsDocParameter != null; jsDocParameter = jsDocParameter.getNext()) {\n+    if (jsDocParameter.getString().equals(paramName)) {\n+      return jsDocParameter;\n+    }\n+  }\n+  return null;\n+}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}