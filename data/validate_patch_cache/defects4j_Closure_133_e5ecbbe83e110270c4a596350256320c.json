{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, AbstractCfgBranch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, AbstractCfgBranch> edge : branchEdges) {\n      if (edge.getValue() instanceof ExceptionHandlerCfgBranch) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..728a4e26 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,15 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, AbstractCfgBranch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, AbstractCfgBranch> edge : branchEdges) {\n+      if (edge.getValue() instanceof ExceptionHandlerCfgBranch) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}