{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // trim white space and replace ',' with ''\n    str = str.trim().replaceAll(\",\", \"\");\n\n    if (str.startsWith(\"--\")) {\n        // this is protection for poorness in java.lang.BigDecimal.\n        // it accepts this as a legal value, but it does not appear\n        // to be in specification of class. OS X Java parses it to\n        // a wrong value.\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n    char lastChar = str.charAt(str.length() - 1);\n    int decPos = str.indexOf('.');\n    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n    if (expPos > -1 && decPos > -1 && expPos < decPos) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n    if (decPos == -1) {\n        if (expPos > -1) {\n            str = str.substring(0, expPos) + \".0\" + str.substring(expPos);\n            decPos = expPos + 2;\n        }\n    }\n    if (!Character.isDigit(lastChar)) {\n        if (expPos > -1 && expPos < str.length() - 1) {\n            try {\n                return createDouble(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n        }\n        if (lastChar == 'f' || lastChar == 'F') {\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n        } else if (lastChar == 'd' || lastChar == 'D') {\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    String mant;\n    String dec;\n    String exp;\n    if (decPos == -1) {\n        mant = str;\n        dec = null;\n    } else {\n        mant = str.substring(0, decPos);\n        dec = str.substring(decPos + 1, str.length());\n        int expIndex = dec.indexOf('e') + dec.indexOf('E') + 1;\n        if (expIndex > -1) {\n            exp = dec.substring(expIndex);\n            dec = dec.substring(0, expIndex);\n        } else {\n            exp = null;\n        }\n    }\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length());\n    } else {\n        exp = null;\n    }\n    if (dec == null && exp == null) {\n        return createInteger(str);\n    }\n    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    switch (lastChar) {\n        case 'f':\n        case 'F':\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            //$FALL-THROUGH$\n        case 'd':\n        case 'D':\n            try {\n                return createDouble(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            //$FALL-THROUGH$\n        case 'l':\n        case 'L':\n            if (exp == null\n                    && (numericRegex.matcher(str).matches())) {\n                try {\n                    return createLong(str);\n                } catch (NumberFormatException nfe) {\n                    //Too big for a long\n                }\n                return createBigInteger(str);\n\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        default:\n            if (exp == null\n                    && (numericRegex.matcher(str).matches())) {\n                if (dec == null) {\n                    try {\n                        return createInteger(str);\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    try {\n                        return createLong(str);\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    return createBigInteger(str);\n                } else {\n                    try {\n                        return createFloat(str);\n                    } catch (NumberFormatException nfe) {\n                        // ignore the bad number\n                    }\n                    return createDouble(str);\n                }\n\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..a80d57ca 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,158 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    // trim white space and replace ',' with ''\n+    str = str.trim().replaceAll(\",\", \"\");\n \n-        if (decPos > -1) {\n+    if (str.startsWith(\"--\")) {\n+        // this is protection for poorness in java.lang.BigDecimal.\n+        // it accepts this as a legal value, but it does not appear\n+        // to be in specification of class. OS X Java parses it to\n+        // a wrong value.\n+        return null;\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+    char lastChar = str.charAt(str.length() - 1);\n+    int decPos = str.indexOf('.');\n+    int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    if (expPos > -1 && decPos > -1 && expPos < decPos) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+    if (decPos == -1) {\n+        if (expPos > -1) {\n+            str = str.substring(0, expPos) + \".0\" + str.substring(expPos);\n+            decPos = expPos + 2;\n+        }\n+    }\n+    if (!Character.isDigit(lastChar)) {\n+        if (expPos > -1 && expPos < str.length() - 1) {\n+            try {\n+                return createDouble(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+        }\n+        if (lastChar == 'f' || lastChar == 'F') {\n+            try {\n+                Float f = createFloat(str);\n+                if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n+                    return f;\n                 }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n             }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n+        } else if (lastChar == 'd' || lastChar == 'D') {\n+            try {\n+                Double d = createDouble(str);\n+                if (!(d.isInfinite() || d.doubleValue() == 0.0D)) {\n+                    return d;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n             }\n-            dec = null;\n+        } else {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n+    }\n+    String mant;\n+    String dec;\n+    String exp;\n+    if (decPos == -1) {\n+        mant = str;\n+        dec = null;\n+    } else {\n+        mant = str.substring(0, decPos);\n+        dec = str.substring(decPos + 1, str.length());\n+        int expIndex = dec.indexOf('e') + dec.indexOf('E') + 1;\n+        if (expIndex > -1) {\n+            exp = dec.substring(expIndex);\n+            dec = dec.substring(0, expIndex);\n+        } else {\n+            exp = null;\n+        }\n+    }\n+    if (expPos > -1 && expPos < str.length() - 1) {\n+        exp = str.substring(expPos + 1, str.length());\n+    } else {\n+        exp = null;\n+    }\n+    if (dec == null && exp == null) {\n+        return createInteger(str);\n+    }\n+    boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+    switch (lastChar) {\n+        case 'f':\n+        case 'F':\n+            try {\n+                Float f = createFloat(str);\n+                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    return f;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            //$FALL-THROUGH$\n+        case 'd':\n+        case 'D':\n+            try {\n+                return createDouble(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n             }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+            //$FALL-THROUGH$\n+        case 'l':\n+        case 'L':\n+            if (exp == null\n+                    && (numericRegex.matcher(str).matches())) {\n+                try {\n+                    return createLong(str);\n+                } catch (NumberFormatException nfe) {\n+                    //Too big for a long\n+                }\n+                return createBigInteger(str);\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+            }\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        default:\n+            if (exp == null\n+                    && (numericRegex.matcher(str).matches())) {\n+                if (dec == null) {\n                     try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n+                        return createInteger(str);\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                     }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n                     try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n+                        return createLong(str);\n                     } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                     }\n+                    return createBigInteger(str);\n+                } else {\n                     try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n+                        return createFloat(str);\n+                    } catch (NumberFormatException nfe) {\n                         // ignore the bad number\n                     }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    return createDouble(str);\n                 }\n \n-                return createBigDecimal(str);\n-\n             }\n-        }\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}