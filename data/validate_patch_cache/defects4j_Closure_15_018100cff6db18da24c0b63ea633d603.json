{
    "patch": "if (n.getToken() == Token.NAME && usedVars.contains(n.getString())) {\n  return true;\n}\n\nif (n.isCall()) {\n  FunctionInformation funcInfo = callGraph.getFunctionInfo(n);\n  if (funcInfo != null) {\n    ControlFlowGraph<Node> functionCfg = funcInfo.cfg;\n    Node functionEntry = functionCfg.getEntry().getValue();\n    if (apply(functionEntry)) {\n      return true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..fdb0f300 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.getToken() == Token.NAME && usedVars.contains(n.getString())) {\n+  return true;\n+}\n+\n+if (n.isCall()) {\n+  FunctionInformation funcInfo = callGraph.getFunctionInfo(n);\n+  if (funcInfo != null) {\n+    ControlFlowGraph<Node> functionCfg = funcInfo.cfg;\n+    Node functionEntry = functionCfg.getEntry().getValue();\n+    if (apply(functionEntry)) {\n+      return true;\n+    }\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}