{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.CALL ||\n            pType == Token.OBJECTLIT ||\n            pType == Token.NEW ||\n            pType == Token.COMMA ||\n            pType == Token.HOOK ||\n            pType == Token.OR ||\n            pType == Token.AND ||\n            pType == Token.QMARK ||\n            pType == Token.COLON ||\n            pType == Token.PARAM_LIST ||\n            pType == Token.ARRAYLIT ||\n            pType == Token.CAST ||\n            pType == Token.NOT ||\n            pType == Token.INSTANCEOF ||\n            pType == Token.TYPEOF ||\n            pType == Token.VOID ||\n            pType == Token.DELETE ||\n            pType == Token.POS ||\n            pType == Token.NEG ||\n            pType == Token.BITNOT ||\n            pType == Token.ARRAY_PATTERN)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.ASSIGN &&\n          NodeUtil.isGet((parent.getFirstChild()))) {\n        Node lhs = parent.getFirstChild();\n        if (isPrototypeProperty(lhs)) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Returns true if the given node is a prototype property (or subproperty).\n   */\n  private boolean isPrototypeProperty(Node n) {\n    if (NodeUtil.isGet(n)) {\n      Node llhs = n.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n          llhs.getLastChild().getString().equals(\"prototype\")) {\n        return true;\n      }\n      if (isPrototypeProperty(llhs)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..73d24380 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,7 +79,7 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n@@ -104,14 +104,38 @@ final class CheckGlobalThis implements Callback {\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n             pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+            pType == Token.CALL ||\n+            pType == Token.OBJECTLIT ||\n+            pType == Token.NEW ||\n+            pType == Token.COMMA ||\n+            pType == Token.HOOK ||\n+            pType == Token.OR ||\n+            pType == Token.AND ||\n+            pType == Token.QMARK ||\n+            pType == Token.COLON ||\n+            pType == Token.PARAM_LIST ||\n+            pType == Token.ARRAYLIT ||\n+            pType == Token.CAST ||\n+            pType == Token.NOT ||\n+            pType == Token.INSTANCEOF ||\n+            pType == Token.TYPEOF ||\n+            pType == Token.VOID ||\n+            pType == Token.DELETE ||\n+            pType == Token.POS ||\n+            pType == Token.NEG ||\n+            pType == Token.BITNOT ||\n+            pType == Token.ARRAY_PATTERN)) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN &&\n+          NodeUtil.isGet((parent.getFirstChild()))) {\n+        Node lhs = parent.getFirstChild();\n+        if (isPrototypeProperty(lhs)) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -145,6 +169,23 @@ final class CheckGlobalThis implements Callback {\n     return true;\n   }\n \n+  /**\n+   * Returns true if the given node is a prototype property (or subproperty).\n+   */\n+  private boolean isPrototypeProperty(Node n) {\n+    if (NodeUtil.isGet(n)) {\n+      Node llhs = n.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+          llhs.getLastChild().getString().equals(\"prototype\")) {\n+        return true;\n+      }\n+      if (isPrototypeProperty(llhs)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}