{
    "patch": "boolean isNegative(double x) {\n    // 0.0 is considered non-negative and it is the only value\n    // that satisfies x == -0.0.\n    return Double.compare(x, 0.0) < 0 || Double.compare(x, 0.0) == 0 && Double.doubleToRawLongBits(x) != 0x8000000000000000L;\n  }\n\n  void addNumber(double x) {\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (isNegative(x) && prev == '-') {\n      add(\" \");\n    }\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..9f6a4fb9 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,45 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n+  void addNumber(double x) {\n+    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n+    // x--4 (which is a syntax error).\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+boolean isNegative(double x) {\n+    // 0.0 is considered non-negative and it is the only value\n+    // that satisfies x == -0.0.\n+    return Double.compare(x, 0.0) < 0 || Double.compare(x, 0.0) == 0 && Double.doubleToRawLongBits(x) != 0x8000000000000000L;\n+  }\n \n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+    if (isNegative(x) && prev == '-') {\n+      add(\" \");\n+    }\n+\n+    if ((long) x == x && !negativeZero) {\n+      long value = (long) x;\n+      long mantissa = value;\n+      int exp = 0;\n+      if (Math.abs(x) >= 100) {\n+        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+          mantissa /= 10;\n+          exp++;\n+        }\n+      }\n+      if (exp > 2) {\n+        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+      } else {\n+        add(Long.toString(value));\n+      }\n+    } else {\n+      add(String.valueOf(x));\n+    }\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}