{
    "patch": "    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n        Chronology chrono = selectChronology(bucket.getChronology());\n        int newPos = requireParser().parseInto(bucket, text, position);\n        \n        // Add this check to handle leap year day and month\n        if (bucket.getParseMode() == DateTimeParserBucket.LENIENT) {\n            LocalDate dateLocal = bucket.toLocalDate();\n            if (dateLocal != null\n                    && dateLocal.getMonthOfYear() == 2\n                    && dateLocal.getDayOfMonth() == 29\n                    && !dateLocal.getChronology().isLeapYear(dateLocal.getYear())) {\n                throw new IllegalFieldValueException(\n                        DateTimeFieldType.dayOfMonth(), \"29\",\n                        DateTimeFieldType.monthOfYear(), String.valueOf(dateLocal.getMonthOfYear()),\n                        \"Value 29 for dayOfMonth must be in the range [1,28]\"\n                );\n            }\n        }\n\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        \n        bucket.setZone(chrono.getZone());\n        bucket.setChronology(chrono);\n        \n        if (iLocale != null) {\n            bucket.setLocale(iLocale);\n        }\n        if (iPivotYear != null) {\n            bucket.setPivotYear(iPivotYear);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..ab7c8a2c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,22 +697,25 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+    public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+        Chronology chrono = selectChronology(bucket.getChronology());\n+        int newPos = requireParser().parseInto(bucket, text, position);\n         \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        // Add this check to handle leap year day and month\n+        if (bucket.getParseMode() == DateTimeParserBucket.LENIENT) {\n+            LocalDate dateLocal = bucket.toLocalDate();\n+            if (dateLocal != null\n+                    && dateLocal.getMonthOfYear() == 2\n+                    && dateLocal.getDayOfMonth() == 29\n+                    && !dateLocal.getChronology().isLeapYear(dateLocal.getYear())) {\n+                throw new IllegalFieldValueException(\n+                        DateTimeFieldType.dayOfMonth(), \"29\",\n+                        DateTimeFieldType.monthOfYear(), String.valueOf(dateLocal.getMonthOfYear()),\n+                        \"Value 29 for dayOfMonth must be in the range [1,28]\"\n+                );\n+            }\n+        }\n+\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -720,9 +723,15 @@ public class DateTimeFormatter {\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        \n+        bucket.setZone(chrono.getZone());\n+        bucket.setChronology(chrono);\n+        \n+        if (iLocale != null) {\n+            bucket.setLocale(iLocale);\n+        }\n+        if (iPivotYear != null) {\n+            bucket.setPivotYear(iPivotYear);\n         }\n         return newPos;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}