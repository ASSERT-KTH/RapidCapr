{
    "patch": "void addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x == 0 && !negativeZero) {\n        add(\"0.0\");\n    } else if ((long) x == x && !negativeZero) {\n        long value = (long) x;\n        add(Long.toString(value));\n    } else {\n        add(Double.toString(x));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..22b1b0d7 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,23 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+void addNumber(double x) {\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    if (x == 0 && !negativeZero) {\n+        add(\"0.0\");\n+    } else if ((long) x == x && !negativeZero) {\n+        long value = (long) x;\n+        add(Long.toString(value));\n+    } else {\n+        add(Double.toString(x));\n+    }\n+}\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}