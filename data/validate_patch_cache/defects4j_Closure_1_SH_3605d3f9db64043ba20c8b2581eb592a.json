{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n  Node function = fnScope.getRootNode();\n  \n  Preconditions.checkState(function.isFunction());\n  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n    // The parameters object literal setters can not be removed.\n    return;\n  }\n  \n  Node argList = getFunctionArgList(function);\n  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n  if (!modifyCallers) {\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (var == null) {\n        lastArg.detach();\n        continue;\n      }\n      if (!lastArg.hasChildren()) {\n        // For compatibility with Function.prototype.length, don't remove a\n        // parameterless element. This assumes the user is not relying on the\n        // special properties of \"length\" too much.\n        NodeUtil.removeChild(argList, lastArg);\n        continue;\n      }\n      if (!referenced.contains(var)) {\n        boolean removeUnusedVars = true;\n        for (Node functionNode : NodeUtil.getAllFunctionDeclarations(getCfg().getEntry())) {\n          if (functionNode.getLastChild() == fnScope.getRootNode() && nodeReferencesArg(lastArg, functionNode, fnScope)) {\n            removeUnusedVars = false;\n            break;\n          }\n        }\n        if (removeUnusedVars) {\n          NodeUtil.removeChild(argList, lastArg);\n          getCompiler().reportChangeToEnclosingScope(argList);\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n    }\n  } else {\n    callSiteOptimizer.optimize(fnScope, referenced);\n  }\n}\n\nprivate boolean nodeReferencesArg(Node argNode, Node functionNode, Scope scope) {\n  Preconditions.checkArgument(functionNode.isFunction() || NodeUtil.isFunctionExpression(functionNode));\n  ControlFlowAnalysis cfa = new ControlFlowAnalysis(getCompiler(), false, true);\n  cfa.process(null, functionNode);\n  Var var = scope.getVar(argNode.getString());\n  if (cfa.getReferenceUsedOutsideScopes(var, scope.getAllContainedScopes())) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..2b879a02 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,66 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+  Node function = fnScope.getRootNode();\n+  \n+  Preconditions.checkState(function.isFunction());\n+  if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    // The parameters object literal setters can not be removed.\n+    return;\n+  }\n+  \n+  Node argList = getFunctionArgList(function);\n+  boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+  if (!modifyCallers) {\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (var == null) {\n+        lastArg.detach();\n+        continue;\n+      }\n+      if (!lastArg.hasChildren()) {\n+        // For compatibility with Function.prototype.length, don't remove a\n+        // parameterless element. This assumes the user is not relying on the\n+        // special properties of \"length\" too much.\n+        NodeUtil.removeChild(argList, lastArg);\n+        continue;\n+      }\n+      if (!referenced.contains(var)) {\n+        boolean removeUnusedVars = true;\n+        for (Node functionNode : NodeUtil.getAllFunctionDeclarations(getCfg().getEntry())) {\n+          if (functionNode.getLastChild() == fnScope.getRootNode() && nodeReferencesArg(lastArg, functionNode, fnScope)) {\n+            removeUnusedVars = false;\n+            break;\n+          }\n+        }\n+        if (removeUnusedVars) {\n+          NodeUtil.removeChild(argList, lastArg);\n+          getCompiler().reportChangeToEnclosingScope(argList);\n+        } else {\n+          break;\n+        }\n+      } else {\n+        break;\n+      }\n+    }\n+  } else {\n+    callSiteOptimizer.optimize(fnScope, referenced);\n+  }\n+}\n+\n+private boolean nodeReferencesArg(Node argNode, Node functionNode, Scope scope) {\n+  Preconditions.checkArgument(functionNode.isFunction() || NodeUtil.isFunctionExpression(functionNode));\n+  ControlFlowAnalysis cfa = new ControlFlowAnalysis(getCompiler(), false, true);\n+  cfa.process(null, functionNode);\n+  Var var = scope.getVar(argNode.getString());\n+  if (cfa.getReferenceUsedOutsideScopes(var, scope.getAllContainedScopes())) {\n+    return true;\n+  }\n+  return false;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}