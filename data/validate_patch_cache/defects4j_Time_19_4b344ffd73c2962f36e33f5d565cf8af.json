{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int[] offsets = getOffset(instantLocal);\n        int initialOffset = offsets[0];\n        int currentOffset = initialOffset;\n        long instantAdjusted = instantLocal;\n\n        if (offsets[2] != 0) {\n            instantAdjusted -= offsets[2];\n            currentOffset = getOffset(instantAdjusted);\n            if (currentOffset != initialOffset) {\n                if (offsets[1] == 0 || initialOffset - currentOffset < offsets[2] - offsets[1]) {\n                    return initialOffset;\n                }\n            }\n        }\n\n        // Get the previous and next transition around \"instantLocal\", except\n        // for if its at the start (in which case we use next only) or\n        // the end (in which case we use previous only)\n        long nextTransition = nextTransition(instantAdjusted);\n\n        long previousTransition;\n        if (instantLocal == Long.MIN_VALUE) {\n            previousTransition = Long.MIN_VALUE;\n        } else {\n            previousTransition = previousTransition(instantAdjusted);\n            if (previousTransition == instantAdjusted) {\n                previousTransition = previousTransition(previousTransition - 1);\n            }\n        }\n\n        // Try using the offset at the next transition\n        if (nextTransition != instantAdjusted + millisPerHour * 12) {\n            final int nextOffset = getOffset(nextTransition);\n            if (currentOffset != nextOffset) {\n                long nextAdjusted = nextTransition - (offsets[2] + nextOffset);\n                if (nextAdjusted <= instantLocal) {\n                    // here\n                    return currentOffset;\n                }\n            }\n        }\n\n        // Try using the offset at the previous transition\n        if (previousTransition != instantAdjusted - millisPerHour * 12) {\n            final int prevOffset = getOffset(previousTransition);\n            if (currentOffset != prevOffset) {\n                long prevAdjusted = previousTransition - (offsets[2] + prevOffset);\n                if (prevAdjusted <= instantLocal &&\n                    (nextTransition <= prevAdjusted || currentOffset - prevOffset < prevAdjusted - instantLocal)) {\n                    return prevOffset;\n                }\n            }\n        }\n\n        // We don't know, but if we're within a gap assume same as current offset\n        return currentOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..954e972a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,62 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        final int[] offsets = getOffset(instantLocal);\n+        int initialOffset = offsets[0];\n+        int currentOffset = initialOffset;\n+        long instantAdjusted = instantLocal;\n+\n+        if (offsets[2] != 0) {\n+            instantAdjusted -= offsets[2];\n+            currentOffset = getOffset(instantAdjusted);\n+            if (currentOffset != initialOffset) {\n+                if (offsets[1] == 0 || initialOffset - currentOffset < offsets[2] - offsets[1]) {\n+                    return initialOffset;\n+                }\n+            }\n+        }\n+\n+        // Get the previous and next transition around \"instantLocal\", except\n+        // for if its at the start (in which case we use next only) or\n+        // the end (in which case we use previous only)\n+        long nextTransition = nextTransition(instantAdjusted);\n+\n+        long previousTransition;\n+        if (instantLocal == Long.MIN_VALUE) {\n+            previousTransition = Long.MIN_VALUE;\n+        } else {\n+            previousTransition = previousTransition(instantAdjusted);\n+            if (previousTransition == instantAdjusted) {\n+                previousTransition = previousTransition(previousTransition - 1);\n+            }\n+        }\n+\n+        // Try using the offset at the next transition\n+        if (nextTransition != instantAdjusted + millisPerHour * 12) {\n+            final int nextOffset = getOffset(nextTransition);\n+            if (currentOffset != nextOffset) {\n+                long nextAdjusted = nextTransition - (offsets[2] + nextOffset);\n+                if (nextAdjusted <= instantLocal) {\n+                    // here\n+                    return currentOffset;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+        }\n+\n+        // Try using the offset at the previous transition\n+        if (previousTransition != instantAdjusted - millisPerHour * 12) {\n+            final int prevOffset = getOffset(previousTransition);\n+            if (currentOffset != prevOffset) {\n+                long prevAdjusted = previousTransition - (offsets[2] + prevOffset);\n+                if (prevAdjusted <= instantLocal &&\n+                    (nextTransition <= prevAdjusted || currentOffset - prevOffset < prevAdjusted - instantLocal)) {\n+                    return prevOffset;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+\n+        // We don't know, but if we're within a gap assume same as current offset\n+        return currentOffset;\n     }\n \n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}