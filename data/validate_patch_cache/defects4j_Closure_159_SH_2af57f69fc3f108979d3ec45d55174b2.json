{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME && !node.getFirstChild().getString().isEmpty()) {\n      changed.add(node.getFirstChild().getString());\n    }\n    \n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..808b8d51 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,17 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkArgument(changed != null);\n+    // For each referenced function, add a new reference\n+    if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME && !node.getFirstChild().getString().isEmpty()) {\n+      changed.add(node.getFirstChild().getString());\n+    }\n+    \n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}