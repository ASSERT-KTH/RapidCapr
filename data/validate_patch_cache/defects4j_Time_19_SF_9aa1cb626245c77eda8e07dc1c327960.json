{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int offsetBefore = getOffset(instantLocal - 1);\n        int offsetAfter = getOffset(instantLocal);\n\n        if (offsetBefore >= 0 && offsetAfter >= 0) {\n            // There is no gap or overlap\n            return offsetAfter;\n        }\n\n        // Find the nearest transition point\n        long transition = instantLocal;\n        if (offsetBefore < 0 && offsetAfter >= 0) {\n            transition = nextTransition(instantLocal - 1);\n        } else if (offsetBefore >= 0 && offsetAfter < 0) {\n            transition = previousTransition(instantLocal);\n        } else {\n            // Both before and after are negative or both are positive,\n            // so we cannot determine whether there is a gap or overlap\n            return offsetAfter;\n        }\n\n        int offsetAtTransition = getOffset(transition - 1);\n        if (offsetAtTransition < 0 && offsetAfter >= 0) {\n            // There is a gap in the local timeline\n            return offsetBefore;\n        } else if (offsetAtTransition >= 0 && offsetBefore < 0) {\n            // There is overlap in the local timeline\n            return offsetAtTransition;\n        } else {\n            // We should not get here, but if we do, return the offset before\n            return offsetBefore;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..5519d064 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,37 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        int offsetBefore = getOffset(instantLocal - 1);\n+        int offsetAfter = getOffset(instantLocal);\n+\n+        if (offsetBefore >= 0 && offsetAfter >= 0) {\n+            // There is no gap or overlap\n+            return offsetAfter;\n+        }\n+\n+        // Find the nearest transition point\n+        long transition = instantLocal;\n+        if (offsetBefore < 0 && offsetAfter >= 0) {\n+            transition = nextTransition(instantLocal - 1);\n+        } else if (offsetBefore >= 0 && offsetAfter < 0) {\n+            transition = previousTransition(instantLocal);\n+        } else {\n+            // Both before and after are negative or both are positive,\n+            // so we cannot determine whether there is a gap or overlap\n+            return offsetAfter;\n+        }\n+\n+        int offsetAtTransition = getOffset(transition - 1);\n+        if (offsetAtTransition < 0 && offsetAfter >= 0) {\n+            // There is a gap in the local timeline\n+            return offsetBefore;\n+        } else if (offsetAtTransition >= 0 && offsetBefore < 0) {\n+            // There is overlap in the local timeline\n+            return offsetAtTransition;\n+        } else {\n+            // We should not get here, but if we do, return the offset before\n+            return offsetBefore;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}