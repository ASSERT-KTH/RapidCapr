{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        int lastHold = start;\n        boolean openQuoteFound = false;\n        while (pos.getIndex() < pattern.length()) {\n            char c = pattern.charAt(pos.getIndex());\n            if (escapingOn && c == QUOTE) {\n                if (openQuoteFound) {\n                    pos.setIndex(pos.getIndex() + 1);\n                    return appendTo == null ? null : appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n                } else {\n                    openQuoteFound = true;\n                    lastHold = pos.getIndex() + 1;\n                    pos.setIndex(lastHold);\n                    continue;\n                }\n            } else if (!openQuoteFound) {\n                return appendTo == null ? null : appendTo.append(pattern, start, pos.getIndex() - start);\n            }\n            pos.setIndex(pos.getIndex() + 1);\n        }\n        if (openQuoteFound) {\n            throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n        }\n        return appendTo == null ? null : appendTo.append(pattern, lastHold - 1, pos.getIndex() - lastHold + 1);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..9df753de 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,33 +414,32 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n             StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n         int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+        boolean openQuoteFound = false;\n+        while (pos.getIndex() < pattern.length()) {\n+            char c = pattern.charAt(pos.getIndex());\n+            if (escapingOn && c == QUOTE) {\n+                if (openQuoteFound) {\n+                    pos.setIndex(pos.getIndex() + 1);\n+                    return appendTo == null ? null : appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n+                } else {\n+                    openQuoteFound = true;\n+                    lastHold = pos.getIndex() + 1;\n+                    pos.setIndex(lastHold);\n+                    continue;\n+                }\n+            } else if (!openQuoteFound) {\n+                return appendTo == null ? null : appendTo.append(pattern, start, pos.getIndex() - start);\n             }\n+            pos.setIndex(pos.getIndex() + 1);\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+        if (openQuoteFound) {\n+            throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n+        }\n+        return appendTo == null ? null : appendTo.append(pattern, lastHold - 1, pos.getIndex() - lastHold + 1);\n     }\n \n     /**",
    "result_reason": "java.lang.IndexOutOfBoundsException: start 3, end 1, s.length() 25",
    "test_result": "FAIL"
}