{
    "patch": "          && n.getType() == Token.GETPROP) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getParent().getType() == Token.GETPROP\n            || (n.getParent().getType() == Token.ASSIGN\n            && NodeUtil.isObjectCallMethod(n.getParent())\n            && n.getParent().getFirstChild().getLastChild().getType() == Token.STRING\n            && n.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\"));\n\n        if (isChainedProperty) {\n          Node child = n.getFirstChild().getFirstChild().getNext();\n\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n      \n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..0fc4af4a 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,25 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getType() == Token.GETPROP) {\n+        // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty = n.getParent().getType() == Token.GETPROP\n+            || (n.getParent().getType() == Token.ASSIGN\n+            && NodeUtil.isObjectCallMethod(n.getParent())\n+            && n.getParent().getFirstChild().getLastChild().getType() == Token.STRING\n+            && n.getParent().getFirstChild().getLastChild().getString().equals(\"prototype\"));\n+\n+        if (isChainedProperty) {\n+          Node child = n.getFirstChild().getFirstChild().getNext();\n+\n+          if (child.getType() == Token.STRING &&\n+              child.getString().equals(\"prototype\")) {\n+            return true;\n+          }\n+        }\n+      }\n+      \n+      return false;\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}