{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              if (finallyNode.getNext() != null) {\n                return finallyNode.getNext(); // added\n              } else {\n                return computeFollowNode(fromNode, finallyNode.getParent(), cfa); // added\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..64c4f692 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -765,6 +765,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (finallyNode.getNext() != null) {\n+                return finallyNode.getNext(); // added\n+              } else {\n+                return computeFollowNode(fromNode, finallyNode.getParent(), cfa); // added\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}