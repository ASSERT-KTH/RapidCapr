{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild();\n      child != null;\n      child = child.getNext()) {\n    // Maybe STRING, GET, SET\n    if (!NodeUtil.isObjectLitKeyNode(child)) {\n      continue;\n    }\n\n    String name = child.getString();\n    T type = typeSystem.getType(getScope(), n, name);\n\n    Property prop = getProperty(name);\n    if (!prop.scheduleRenaming(child,\n        processProperty(t, prop, type, null))) {\n      boolean isStrProp = prop.isStringKey();\n      if (isStrProp) {\n        errorForBadProp(t, n, prop, name, type);\n      } else {\n        String propName = prop.keyNode.toString();\n        compiler.report(JSError.make(\n            t.getSourceName(),\n            prop.keyNode,\n            BAD_PROPERTY_NAME,\n            Warnings.INVALIDATION,\n            propName,\n            type == null ? \"null\" : type.toString(),\n            n.toString(),\n            \"\"));\n      }\n    }\n  }\n}\n\n private void errorForBadProp(NodeTraversal t, Node n, Property prop,\n      String name, T type) {\n    if (NodeUtil.isObjectDefinePropertyDefinition(prop.getDefinitionNode())) {\n      return;\n    }\n\n    if (propertiesToErrorFor.containsKey(name)) {\n      compiler.report(JSError.make(\n          t.getSourceName(),\n          prop.keyNode,\n          propertiesToErrorFor.get(name),\n          Warnings.INVALIDATION,\n          name,\n          type == null ? \"null\" : type.toString(),\n          n.toString(),\n          \"\"));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..06d5c793 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,58 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild();\n+      child != null;\n+      child = child.getNext()) {\n+    // Maybe STRING, GET, SET\n+    if (!NodeUtil.isObjectLitKeyNode(child)) {\n+      continue;\n+    }\n+\n+    String name = child.getString();\n+    T type = typeSystem.getType(getScope(), n, name);\n+\n+    Property prop = getProperty(name);\n+    if (!prop.scheduleRenaming(child,\n+        processProperty(t, prop, type, null))) {\n+      boolean isStrProp = prop.isStringKey();\n+      if (isStrProp) {\n+        errorForBadProp(t, n, prop, name, type);\n+      } else {\n+        String propName = prop.keyNode.toString();\n+        compiler.report(JSError.make(\n+            t.getSourceName(),\n+            prop.keyNode,\n+            BAD_PROPERTY_NAME,\n+            Warnings.INVALIDATION,\n+            propName,\n+            type == null ? \"null\" : type.toString(),\n+            n.toString(),\n+            \"\"));\n+      }\n+    }\n+  }\n+}\n+\n+ private void errorForBadProp(NodeTraversal t, Node n, Property prop,\n+      String name, T type) {\n+    if (NodeUtil.isObjectDefinePropertyDefinition(prop.getDefinitionNode())) {\n+      return;\n+    }\n+\n+    if (propertiesToErrorFor.containsKey(name)) {\n+      compiler.report(JSError.make(\n+          t.getSourceName(),\n+          prop.keyNode,\n+          propertiesToErrorFor.get(name),\n+          Warnings.INVALIDATION,\n+          name,\n+          type == null ? \"null\" : type.toString(),\n+          n.toString(),\n+          \"\"));\n+    }\n+  }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}