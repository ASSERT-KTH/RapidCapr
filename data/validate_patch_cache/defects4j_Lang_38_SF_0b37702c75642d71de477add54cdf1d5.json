{
    "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    applyRules(calendar, buf);\n    if (mTimeZoneForced) {\n        TimeZone timeZone = calendar.getTimeZone();\n        int offsetInMillis = timeZone.getOffset(calendar.getTimeInMillis());\n        if (offsetInMillis == 0) {\n            buf.append('Z');\n        } else {\n            int offsetInMinutes = offsetInMillis / (60 * 1000);\n\n            int hours = Math.abs(offsetInMinutes / 60);\n            int minutes = Math.abs(offsetInMinutes % 60);\n            buf.append(offsetInMinutes < 0 ? \"-\" : \"+\")\n               .append(hours < 10 ? \"0\" : \"\").append(hours).append(\":\")\n               .append(minutes < 10 ? \"0\" : \"\").append(minutes);\n        }\n    } else {\n        buf.append('Z');\n    }\n\n    return buf;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..83d9f114 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -867,14 +867,33 @@ public class FastDateFormat extends Format {\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n      */\n-    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n-        if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n-            calendar.setTimeZone(mTimeZone);\n+public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+    if (mTimeZoneForced) {\n+        calendar = (Calendar) calendar.clone();\n+        calendar.setTimeZone(mTimeZone);\n+    }\n+    applyRules(calendar, buf);\n+    if (mTimeZoneForced) {\n+        TimeZone timeZone = calendar.getTimeZone();\n+        int offsetInMillis = timeZone.getOffset(calendar.getTimeInMillis());\n+        if (offsetInMillis == 0) {\n+            buf.append('Z');\n+        } else {\n+            int offsetInMinutes = offsetInMillis / (60 * 1000);\n+\n+            int hours = Math.abs(offsetInMinutes / 60);\n+            int minutes = Math.abs(offsetInMinutes % 60);\n+            buf.append(offsetInMinutes < 0 ? \"-\" : \"+\")\n+               .append(hours < 10 ? \"0\" : \"\").append(hours).append(\":\")\n+               .append(minutes < 10 ? \"0\" : \"\").append(minutes);\n         }\n-        return applyRules(calendar, buf);\n+    } else {\n+        buf.append('Z');\n     }\n \n+    return buf;\n+}\n+\n     /**\n      * <p>Performs the formatting by applying the rules to the\n      * specified calendar.</p>",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T10:11:12[]> but was:<T10:11:12[Z]>",
    "test_result": "FAIL"
}