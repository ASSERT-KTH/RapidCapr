{
    "patch": "    for (int i = 0; i < numSlackVariables; i++) {\n        final int row = i + getNumObjectiveFunctions() - 1;\n        final double entry = tableau.getEntry(row, col);\n        if (entry < 0d) {\n            continue;\n        }\n        RatioTest rt = new RatioTest(tableau, row, col);\n        if (!rt.test(cb)) {\n            continue;\n        }\n        rt.pivot(row, col);\n        break;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..05462d6a8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,19 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+    for (int i = 0; i < numSlackVariables; i++) {\n+        final int row = i + getNumObjectiveFunctions() - 1;\n+        final double entry = tableau.getEntry(row, col);\n+        if (entry < 0d) {\n+            continue;\n+        }\n+        RatioTest rt = new RatioTest(tableau, row, col);\n+        if (!rt.test(cb)) {\n+            continue;\n+        }\n+        rt.pivot(row, col);\n+        break;\n+    }\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}