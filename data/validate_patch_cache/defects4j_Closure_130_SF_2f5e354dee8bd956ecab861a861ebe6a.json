{
    "patch": "  /**\n   * JSDoc type of a Name object.\n   */\n  private enum JSDocInfoType {\n    NONE,\n    NAME,\n    OBJECT_LITERAL_FUNCTION\n  }\n\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the work list meet condition (a).\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0 && canInlineName(name)) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c). Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }\n\n  /**\n   * Checks whether a name can be inlined by checking if its JSdoc info allows it.\n   */\n  private boolean canInlineName(Name name) {\n    JSDocInfoType jsDocInfoType = getJSDocInfoType(name);\n    switch (jsDocInfoType) {\n      case NONE:\n        // JSDoc info is missing so we assume we can inline the name.\n        return true;\n      case NAME:\n        // Names can never be inlined.\n        return false;\n      case OBJECT_LITERAL_FUNCTION:\n        // Only object literal functions that have an empty parameter list and don't use 'this'\n        // can be inlined.\n        if (!isFunctionEmpty(name)) {\n          return false;\n        }\n        return !mayUseThis(name);\n      default:\n        throw new IllegalStateException(\"Unexpected JSDoc type: \" + jsDocInfoType);\n    }\n  }\n\n  /**\n   * Determines the JSDoc info type for a Name object.\n   */\n  private JSDocInfoType getJSDocInfoType(Name name) {\n    JSDocInfo info = name.getJSDocInfo();\n    if (info == null) {\n      return JSDocInfoType.NONE;\n    } else if (!info.isInline()) {\n      return JSDocInfoType.NAME;\n    } else if (name.type == Name.Type.FUNCTION) {\n      return JSDocInfoType.OBJECT_LITERAL_FUNCTION;\n    } else {\n      return JSDocInfoType.NONE;\n    }\n  }\n\n  /**\n   * Determines whether a function is empty, i.e. it doesn't have any parameters or statements.\n   */\n  private boolean isFunctionEmpty(Name name) {\n    FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n    return functionType == null || functionType.hasEmptyStatement();\n  }\n\n  /**\n   * Determines whether a function may use the 'this' keyword.\n   */\n  private boolean mayUseThis(Name name) {\n    FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n    return functionType != null && functionType.isConstructor();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..80e01cf4 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,9 +158,18 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n+  /**\n+   * JSDoc type of a Name object.\n+   */\n+  private enum JSDocInfoType {\n+    NONE,\n+    NAME,\n+    OBJECT_LITERAL_FUNCTION\n+  }\n+\n   private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    // Invariant: All the names in the work list meet condition (a).\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n@@ -170,7 +179,7 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n+          name.aliasingGets > 0 && canInlineName(name)) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n@@ -196,6 +205,62 @@ class CollapseProperties implements CompilerPass {\n     }\n   }\n \n+  /**\n+   * Checks whether a name can be inlined by checking if its JSdoc info allows it.\n+   */\n+  private boolean canInlineName(Name name) {\n+    JSDocInfoType jsDocInfoType = getJSDocInfoType(name);\n+    switch (jsDocInfoType) {\n+      case NONE:\n+        // JSDoc info is missing so we assume we can inline the name.\n+        return true;\n+      case NAME:\n+        // Names can never be inlined.\n+        return false;\n+      case OBJECT_LITERAL_FUNCTION:\n+        // Only object literal functions that have an empty parameter list and don't use 'this'\n+        // can be inlined.\n+        if (!isFunctionEmpty(name)) {\n+          return false;\n+        }\n+        return !mayUseThis(name);\n+      default:\n+        throw new IllegalStateException(\"Unexpected JSDoc type: \" + jsDocInfoType);\n+    }\n+  }\n+\n+  /**\n+   * Determines the JSDoc info type for a Name object.\n+   */\n+  private JSDocInfoType getJSDocInfoType(Name name) {\n+    JSDocInfo info = name.getJSDocInfo();\n+    if (info == null) {\n+      return JSDocInfoType.NONE;\n+    } else if (!info.isInline()) {\n+      return JSDocInfoType.NAME;\n+    } else if (name.type == Name.Type.FUNCTION) {\n+      return JSDocInfoType.OBJECT_LITERAL_FUNCTION;\n+    } else {\n+      return JSDocInfoType.NONE;\n+    }\n+  }\n+\n+  /**\n+   * Determines whether a function is empty, i.e. it doesn't have any parameters or statements.\n+   */\n+  private boolean isFunctionEmpty(Name name) {\n+    FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n+    return functionType == null || functionType.hasEmptyStatement();\n+  }\n+\n+  /**\n+   * Determines whether a function may use the 'this' keyword.\n+   */\n+  private boolean mayUseThis(Name name) {\n+    FunctionTypeI functionType = (FunctionTypeI) name.getJSType();\n+    return functionType != null && functionType.isConstructor();\n+  }\n+\n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that\n     // variable's declaration. If the alias's parent is a NAME,",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}