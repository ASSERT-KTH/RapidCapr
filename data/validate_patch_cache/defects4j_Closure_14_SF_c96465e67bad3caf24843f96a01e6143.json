{
    "patch": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n    if (parent == null) {\n      // Case 1: reaching the end of the function\n      return null;\n    } else if (parent.isFunction() || (cfa != null && node == cfa.root)) {\n      // Case 2: returns in a function or a file-level code\n      FunctionTypeI fnType = null;\n      if (parent.isFunction()) {\n        fnType = JSType.toMaybeFunctionType(parent.getFirstChild().getJSType());\n      } else if (cfa != null && node == cfa.root) {\n        fnType = JSType.toMaybeFunctionType(cfa.currentScope.getRootNode().getJSType());\n      }\n      if (fnType != null) {\n        return NodeUtil.getFunctionReturns(fnType.getReturnType()).getFirstChild();\n      } else {\n        return null;\n      }\n    } else if (parent.getType() == Token.CATCH) {\n      // Case 3: in catch clause\n      return computeFollowNode(fromNode, parent.getParent(), cfa);\n    } else if (parent.getType() == Token.IF) {\n      // Case 4: after an \"if\" statement\n      Node next = parent.getNext();\n      if (next == null) {\n        // If there's no next siblings, return to the parent\n        return computeFollowNode(fromNode, parent.getParent(), cfa);\n      } else if (next.getType() == Token.ELSE) {\n        // If there's an \"else\" statement, return the next sibling\n        return computeFallThrough(next.getFirstChild());\n      } else {\n        // Otherwise, just return the next sibling\n        return computeFallThrough(next);\n      }\n    } else if (parent.getType() == Token.DO) {\n      // Case 5: after a \"do-while\" statement\n      return parent.getFirstChild();\n    } else if (parent.getType() == Token.WHILE) {\n      // Case 6: after a \"while\" statement\n      return parent.getParent();\n    } else if (parent.getType() == Token.FOR) {\n      // Case 7: after a \"for\" statement\n      Node next = parent.getNext();\n      if (next == null) {\n        // If there's no next siblings, return to the parent\n        return computeFollowNode(fromNode, parent.getParent(), cfa);\n      } else if (next.getType() == Token.EXPR_RESULT) {\n        // If the next sibling is an expression statement, return its first child\n        return next.getFirstChild();\n      } else {\n        // Otherwise, just return the next sibling\n        return computeFallThrough(next);\n      }\n    } else if ((parent.getType() == Token.TRY || parent.getType() == Token.CATCH)\n        && parent.getLastChild() == node) {\n      // Case 8: after the \"try\" block or the \"catch\" block\n      Node finallyBlock = NodeUtil.getFinallyBlock(node.getParent());\n      if (finallyBlock != null) {\n        // If there's a \"finally\" block, return the first child of its first child\n        return finallyBlock.getFirstChild().getFirstChild();\n      } else {\n        // Otherwise, just return the next sibling\n        Node next = parent.getNext();\n        return next != null ? computeFallThrough(next) : null;\n      }\n    } else {\n      // Case 9: other cases\n      Node next = node.getNext();\n      if (next != null) {\n        return next;\n      } else {\n        return computeFollowNode(fromNode, parent, cfa);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..74c4bd15 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -691,100 +691,78 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    */\n   private static Node computeFollowNode(\n       Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null) {\n+      // Case 1: reaching the end of the function\n       return null;\n-    }\n-\n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n-          } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n-          }\n-        } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n-        break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n-          return parent;\n-        } else {\n-          return parent.getFirstChild().getNext().getNext();\n-        }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n-            }\n-          }\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n-    }\n-\n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n-\n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n-    }\n-\n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+    } else if (parent.isFunction() || (cfa != null && node == cfa.root)) {\n+      // Case 2: returns in a function or a file-level code\n+      FunctionTypeI fnType = null;\n+      if (parent.isFunction()) {\n+        fnType = JSType.toMaybeFunctionType(parent.getFirstChild().getJSType());\n+      } else if (cfa != null && node == cfa.root) {\n+        fnType = JSType.toMaybeFunctionType(cfa.currentScope.getRootNode().getJSType());\n+      }\n+      if (fnType != null) {\n+        return NodeUtil.getFunctionReturns(fnType.getReturnType()).getFirstChild();\n+      } else {\n+        return null;\n+      }\n+    } else if (parent.getType() == Token.CATCH) {\n+      // Case 3: in catch clause\n+      return computeFollowNode(fromNode, parent.getParent(), cfa);\n+    } else if (parent.getType() == Token.IF) {\n+      // Case 4: after an \"if\" statement\n+      Node next = parent.getNext();\n+      if (next == null) {\n+        // If there's no next siblings, return to the parent\n+        return computeFollowNode(fromNode, parent.getParent(), cfa);\n+      } else if (next.getType() == Token.ELSE) {\n+        // If there's an \"else\" statement, return the next sibling\n+        return computeFallThrough(next.getFirstChild());\n+      } else {\n+        // Otherwise, just return the next sibling\n+        return computeFallThrough(next);\n+      }\n+    } else if (parent.getType() == Token.DO) {\n+      // Case 5: after a \"do-while\" statement\n+      return parent.getFirstChild();\n+    } else if (parent.getType() == Token.WHILE) {\n+      // Case 6: after a \"while\" statement\n+      return parent.getParent();\n+    } else if (parent.getType() == Token.FOR) {\n+      // Case 7: after a \"for\" statement\n+      Node next = parent.getNext();\n+      if (next == null) {\n+        // If there's no next siblings, return to the parent\n+        return computeFollowNode(fromNode, parent.getParent(), cfa);\n+      } else if (next.getType() == Token.EXPR_RESULT) {\n+        // If the next sibling is an expression statement, return its first child\n+        return next.getFirstChild();\n+      } else {\n+        // Otherwise, just return the next sibling\n+        return computeFallThrough(next);\n+      }\n+    } else if ((parent.getType() == Token.TRY || parent.getType() == Token.CATCH)\n+        && parent.getLastChild() == node) {\n+      // Case 8: after the \"try\" block or the \"catch\" block\n+      Node finallyBlock = NodeUtil.getFinallyBlock(node.getParent());\n+      if (finallyBlock != null) {\n+        // If there's a \"finally\" block, return the first child of its first child\n+        return finallyBlock.getFirstChild().getFirstChild();\n+      } else {\n+        // Otherwise, just return the next sibling\n+        Node next = parent.getNext();\n+        return next != null ? computeFallThrough(next) : null;\n+      }\n     } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+      // Case 9: other cases\n+      Node next = node.getNext();\n+      if (next != null) {\n+        return next;\n+      } else {\n+        return computeFollowNode(fromNode, parent, cfa);\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}