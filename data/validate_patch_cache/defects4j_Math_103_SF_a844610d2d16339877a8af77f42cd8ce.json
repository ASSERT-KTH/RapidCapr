{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        throw new MathException(LocalizedFormats.NaN_NOT_ALLOWED);\n    }\n\n    //if x is infinite return 1 or 0.\n    if (Double.isInfinite(x)) {\n        return x > 0 ? 1 : 0;\n    }\n\n    // avoid overflow and underflow \n    double dev = (x - mean) / standardDeviation;\n    double k = FastMath.floor(dev);\n    if (dev - k > 0.5) {\n        k += 1.0;\n    }\n    double v = k / SQRT2;\n    double w = v * v;\n    double ans = kurtosisFourthOrderSeries(w);\n    ans = kurtosisThirdOrderSeries(w, v, ans);\n    ans = kurtosisSecondOrderSeries(w, v, ans);\n    ans = kurtosisFirstOrderSeries(w, v, ans);\n    ans = SQRT2PI * FastMath.exp(-0.5 * v * v) * ans;\n    if (dev < 0.0) {\n        ans = tailSummation(ans);\n    }\n    return ans / 2.0;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..defc642dd 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,34 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        throw new MathException(LocalizedFormats.NaN_NOT_ALLOWED);\n     }\n+\n+    //if x is infinite return 1 or 0.\n+    if (Double.isInfinite(x)) {\n+        return x > 0 ? 1 : 0;\n+    }\n+\n+    // avoid overflow and underflow \n+    double dev = (x - mean) / standardDeviation;\n+    double k = FastMath.floor(dev);\n+    if (dev - k > 0.5) {\n+        k += 1.0;\n+    }\n+    double v = k / SQRT2;\n+    double w = v * v;\n+    double ans = kurtosisFourthOrderSeries(w);\n+    ans = kurtosisThirdOrderSeries(w, v, ans);\n+    ans = kurtosisSecondOrderSeries(w, v, ans);\n+    ans = kurtosisFirstOrderSeries(w, v, ans);\n+    ans = SQRT2PI * FastMath.exp(-0.5 * v * v) * ans;\n+    if (dev < 0.0) {\n+        ans = tailSummation(ans);\n+    }\n+    return ans / 2.0;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}