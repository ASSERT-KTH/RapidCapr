{
    "patch": "      if (name == null) {\n        String sourceName = currentScriptOrFn.getSourceName();\n        String fnName = NodeUtil.getFnName(functionNode);\n        if (fnName == null) {\n          fnName = \"\";\n        }\n        name = Node.newString(Token.NAME, fnName);\n        name.putProp(Node.ORIGINALNAME_PROP, \"\");\n        name.setStaticSourceFile(sourceName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..f21ffdbd 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,16 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      if (name == null) {\n+        String sourceName = currentScriptOrFn.getSourceName();\n+        String fnName = NodeUtil.getFnName(functionNode);\n+        if (fnName == null) {\n+          fnName = \"\";\n+        }\n+        name = Node.newString(Token.NAME, fnName);\n+        name.putProp(Node.ORIGINALNAME_PROP, \"\");\n+        name.setStaticSourceFile(sourceName);\n+      }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}