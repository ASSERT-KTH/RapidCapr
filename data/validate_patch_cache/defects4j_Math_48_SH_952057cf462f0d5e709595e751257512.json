{
    "patch": "            // Update the bounds with the new approximation.\n            if (f1 * fx < 0) {\n                // The value of x1 has switched to the other bound, thus inverting\n                // the interval.\n                x0 = x1;\n                f0 = f1;\n                inverted = !inverted;\n            } else {\n                switch (method) {\n                    case ILLINOIS:\n                        f0 *= 0.5;\n                        break;\n                    case PEGASUS:\n                        f0 *= f1 / (f1 + fx);\n                        break;\n                    case REGULA_FALSI:\n                        // Detect early that algorithm is stuck, instead of waiting\n                        // for the maximum number of iterations to be exceeded.\n                        try {\n                            double eps = FastMath.sqrt(FastMath.ulp(x1));\n                            double x = UnivariateSolverUtils.forceSide(allowed, this, x1 - eps, x1, x0, f0, f1, fx);\n                            double fx2 = computeObjectiveValue(x);\n                            if (FastMath.abs(fx2) <= FastMath.abs(fx)) {\n                                x1 = x;\n                                f1 = fx2;\n                                if (evaluations.getCount() >= getMaxEvaluations()) {\n                                    throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                                            getMaxEvaluations(),\n                                            getAbsoluteAccuracy(),\n                                            getRelativeAccuracy());\n                                }\n                            } else {\n                                if (evaluations.getCount() >= getMaxEvaluations()) {\n                                    throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                                            getMaxEvaluations(),\n                                            getAbsoluteAccuracy(),\n                                            getRelativeAccuracy());\n                                }\n                                x0 = x1;\n                                f0 = fx;\n                            }\n                        } catch (TooManyEvaluationsException ex) {\n                            throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                                    getMaxEvaluations(),\n                                    getAbsoluteAccuracy(),\n                                    getRelativeAccuracy());\n                        }\n                        break;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..e96c6852f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,56 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+            // Update the bounds with the new approximation.\n+            if (f1 * fx < 0) {\n+                // The value of x1 has switched to the other bound, thus inverting\n+                // the interval.\n+                x0 = x1;\n+                f0 = f1;\n+                inverted = !inverted;\n+            } else {\n+                switch (method) {\n+                    case ILLINOIS:\n+                        f0 *= 0.5;\n+                        break;\n+                    case PEGASUS:\n+                        f0 *= f1 / (f1 + fx);\n+                        break;\n+                    case REGULA_FALSI:\n+                        // Detect early that algorithm is stuck, instead of waiting\n+                        // for the maximum number of iterations to be exceeded.\n+                        try {\n+                            double eps = FastMath.sqrt(FastMath.ulp(x1));\n+                            double x = UnivariateSolverUtils.forceSide(allowed, this, x1 - eps, x1, x0, f0, f1, fx);\n+                            double fx2 = computeObjectiveValue(x);\n+                            if (FastMath.abs(fx2) <= FastMath.abs(fx)) {\n+                                x1 = x;\n+                                f1 = fx2;\n+                                if (evaluations.getCount() >= getMaxEvaluations()) {\n+                                    throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                                            getMaxEvaluations(),\n+                                            getAbsoluteAccuracy(),\n+                                            getRelativeAccuracy());\n+                                }\n+                            } else {\n+                                if (evaluations.getCount() >= getMaxEvaluations()) {\n+                                    throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                                            getMaxEvaluations(),\n+                                            getAbsoluteAccuracy(),\n+                                            getRelativeAccuracy());\n+                                }\n+                                x0 = x1;\n+                                f0 = fx;\n+                            }\n+                        } catch (TooManyEvaluationsException ex) {\n+                            throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                                    getMaxEvaluations(),\n+                                    getAbsoluteAccuracy(),\n+                                    getRelativeAccuracy());\n+                        }\n+                        break;\n+                }\n+            }\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: variable x is already defined in method doSolve()",
    "test_result": "ERROR"
}