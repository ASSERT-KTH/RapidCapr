{
    "patch": "private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      // Keep track of the \"this\" context of a call. A call without an\n      // explicit \"this\" is a free call.\n      Node first = n.getFirstChild();\n\n      // ignore cast nodes.\n      while (first.isCast()) {\n        first = first.getFirstChild();\n      }\n\n      if (!NodeUtil.isGet(first) && !NodeUtil.isName(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      // Keep track of the context in which eval is called. It is important\n      // to distinguish between \"(0, eval)()\" and \"eval()\".\n      if (first.isName() && \"eval\".equals(first.getString())) {\n        first.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..2b0e7315 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,26 +155,28 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n+private void annotateCalls(Node n) {\n       Preconditions.checkState(n.isCall());\n \n-      // Keep track of of the \"this\" context of a call.  A call without an\n+      // Keep track of the \"this\" context of a call. A call without an\n       // explicit \"this\" is a free call.\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      while (first.isCast()) {\n+        first = first.getFirstChild();\n+      }\n \n-      if (!NodeUtil.isGet(first)) {\n+      if (!NodeUtil.isGet(first) && !NodeUtil.isName(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);\n       }\n \n       // Keep track of the context in which eval is called. It is important\n       // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n+      if (first.isName() && \"eval\".equals(first.getString())) {\n         first.putBooleanProp(Node.DIRECT_EVAL, true);\n       }\n-    }\n+}\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}