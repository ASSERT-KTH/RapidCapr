{
    "patch": "void defineSlot(\n    Node n,\n    Node parent,\n    TypeI type,\n    InputId inputId,\n    boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualfied names.\n  boolean shouldDeclareOnGlobalThis = false;\n  if (n.isName()) {\n    switch (parent.getToken()) {\n      case FUNCTION:\n      case VAR:\n      case LET:\n      case CONST:\n      case PARAM_LIST:\n      case CLASS_MEMBERS:\n        shouldDeclareOnGlobalThis = scope.isGlobal() && parent.isVar();\n        break;\n      case CATCH:\n        shouldDeclareOnGlobalThis = scope.isGlobal();\n        break;\n    }\n  } else if (n.isGetProp()) {\n    if (n.getFirstChild().isName()\n        && scope.isDeclared(n.getFirstChild().getString(), false)) {\n      // Qualifying object is already declared.\n      // We only need to process the property name for the side effect.\n    } else {\n      // There's a new object being declared on the global scope;\n      // we'll need to define the property on its type in the externs.\n      shouldDeclareOnGlobalThis = scope.isGlobal() && parent.isVar();\n    }\n    Preconditions.checkState(\n        parent.getInferAnnotation() == null,\n        \"No parent should have an infer annotation that's a type. %s\", parent);\n  } else {\n    throw new IllegalArgumentException(\n        \"Unexpected node type for simple declaration scope operations: \" + n);\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(!variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  TypedScope scopeToDeclareIn = scope;\n\n  if (scope.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(\n        sourceName,\n        n,\n        parent,\n        oldVar,\n        variableName,\n        type,\n        getModuleNamespace(oldVar));\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n\n    scopeToDeclareIn.declare(variableName, n, type, inputId, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = inputId.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(\n            variableName,\n            type == null ? getNativeType(TOP_SCALAR) : type,\n            isExtern);\n      } else {\n        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n      }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isES6ClassConstructor() || fnType.isInterface()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getInstanceType().getPrototype(), inputId,\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                getNativeObjectType(OBJECT_TYPE)));\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..aa64ab22 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,100 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+void defineSlot(\n+    Node n,\n+    Node parent,\n+    TypeI type,\n+    InputId inputId,\n+    boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualfied names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+  if (n.isName()) {\n+    switch (parent.getToken()) {\n+      case FUNCTION:\n+      case VAR:\n+      case LET:\n+      case CONST:\n+      case PARAM_LIST:\n+      case CLASS_MEMBERS:\n+        shouldDeclareOnGlobalThis = scope.isGlobal() && parent.isVar();\n+        break;\n+      case CATCH:\n+        shouldDeclareOnGlobalThis = scope.isGlobal();\n+        break;\n+    }\n+  } else if (n.isGetProp()) {\n+    if (n.getFirstChild().isName()\n+        && scope.isDeclared(n.getFirstChild().getString(), false)) {\n+      // Qualifying object is already declared.\n+      // We only need to process the property name for the side effect.\n+    } else {\n+      // There's a new object being declared on the global scope;\n+      // we'll need to define the property on its type in the externs.\n+      shouldDeclareOnGlobalThis = scope.isGlobal() && parent.isVar();\n+    }\n+    Preconditions.checkState(\n+        parent.getInferAnnotation() == null,\n+        \"No parent should have an infer annotation that's a type. %s\", parent);\n+  } else {\n+    throw new IllegalArgumentException(\n+        \"Unexpected node type for simple declaration scope operations: \" + n);\n+  }\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(!variableName.isEmpty());\n+\n+  // If n is a property, then we should really declare it in the\n+  // scope where the root object appears. This helps out people\n+  // who declare \"global\" names in an anonymous namespace.\n+  TypedScope scopeToDeclareIn = scope;\n+\n+  if (scope.isDeclared(variableName, false)) {\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    validator.expectUndeclaredVariable(\n+        sourceName,\n+        n,\n+        parent,\n+        oldVar,\n+        variableName,\n+        type,\n+        getModuleNamespace(oldVar));\n+  } else {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+\n+    scopeToDeclareIn.declare(variableName, n, type, inputId, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = inputId.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(\n+            variableName,\n+            type == null ? getNativeType(TOP_SCALAR) : type,\n+            isExtern);\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        globalThis.defineDeclaredProperty(variableName, type, isExtern);\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isES6ClassConstructor() || fnType.isInterface()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+            fnType.getInstanceType().getPrototype(), inputId,\n+            /* declared iff there's an explicit supertype */\n+            superClassCtor == null ||\n+            superClassCtor.getInstanceType().equals(\n+                getNativeObjectType(OBJECT_TYPE)));\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}