{
    "patch": "private void fillContextualActualTypeParameters(Type classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            WildcardType wildcardType = (WildcardType) actualTypeArgument;\n            if (wildcardType.getLowerBounds().length == 0) { // upper bound\n                contextualActualTypeParameters.put(typeParameter, wildcardType.getUpperBounds()[0]);\n            } else { // lower bound\n                contextualActualTypeParameters.put(typeParameter, wildcardType.getLowerBounds()[0]);\n            }\n            contextualActualTypeParameters.putAll(fillContextualActualTypeParametersMap(wildcardType.getBounds()));\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}\n\nprivate Map<TypeVariable<?>, Type> fillContextualActualTypeParametersMap(Type[] types) {\n    Map<TypeVariable<?>, Type> contextualActualTypeParameters = new HashMap<>();\n    for (Type type : types) {\n        if (type instanceof Class) {\n            TypeVariable[] typeVariables = ((Class<?>) type).getTypeParameters();\n            for (TypeVariable<?> tv : typeVariables) {\n                contextualActualTypeParameters.put(tv, Object.class);\n            }\n        } else if (type instanceof ParameterizedType) {\n            fillContextualActualTypeParameters((ParameterizedType) type, contextualActualTypeParameters);\n        }\n    }\n    return contextualActualTypeParameters;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..d83a9b467 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,45 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private void fillContextualActualTypeParameters(Type classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) classType;\n+    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable typeParameter = typeParameters[i];\n+        Type actualTypeArgument = actualTypeArguments[i];\n+\n+        if (actualTypeArgument instanceof WildcardType) {\n+            WildcardType wildcardType = (WildcardType) actualTypeArgument;\n+            if (wildcardType.getLowerBounds().length == 0) { // upper bound\n+                contextualActualTypeParameters.put(typeParameter, wildcardType.getUpperBounds()[0]);\n+            } else { // lower bound\n+                contextualActualTypeParameters.put(typeParameter, wildcardType.getLowerBounds()[0]);\n+            }\n+            contextualActualTypeParameters.putAll(fillContextualActualTypeParametersMap(wildcardType.getBounds()));\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+}\n+\n+private Map<TypeVariable<?>, Type> fillContextualActualTypeParametersMap(Type[] types) {\n+    Map<TypeVariable<?>, Type> contextualActualTypeParameters = new HashMap<>();\n+    for (Type type : types) {\n+        if (type instanceof Class) {\n+            TypeVariable[] typeVariables = ((Class<?>) type).getTypeParameters();\n+            for (TypeVariable<?> tv : typeVariables) {\n+                contextualActualTypeParameters.put(tv, Object.class);\n+            }\n+        } else if (type instanceof ParameterizedType) {\n+            fillContextualActualTypeParameters((ParameterizedType) type, contextualActualTypeParameters);\n+        }\n+    }\n+    return contextualActualTypeParameters;\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}