{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    if (!NodeUtil.isFunctionBlock(fnNode) || NodeUtil.isEmptyBlock(block)) {\n      return CanInlineResult.NO;\n    }\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren() && block.getFirstChild().isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(\n          block.getFirstChild().getFirstChild(), compiler);\n    }\n\n    Node cArg = null;\n    Node fnParam = null;\n\n    if (!callNode.getFirstChild().isName()) {\n      cArg = callNode.getFirstFirstChild();\n      Node callee = callNode.getFirstChild().getFirstChild();\n      if (NodeUtil.isFunctionObjectApply(callee)) {\n        // We cannot inline in the presence of the apply construct\n        return CanInlineResult.NO;\n      } else if (NodeUtil.isFunctionObjectCall(callee)) {\n        if (cArg != null && !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg != null ? cArg.getNext() : null;\n      }\n    }\n\n    if (NodeUtil.isFunctionExpression(fnNode)) {\n      fnParam = fnNode.getFirstChild();\n    } else {\n      fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    }\n\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n\n          if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n              NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else if (NodeUtil.getPromisedTypeOfNode(fnParam).isUnknownType()) {\n          return CanInlineResult.MAYBE;\n        }\n\n        fnParam = fnParam.getNext();\n      }\n\n      if (cArg != null) {\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..d54dc771 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,66 +686,64 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n     Node block = fnNode.getLastChild();\n+    if (!NodeUtil.isFunctionBlock(fnNode) || NodeUtil.isEmptyBlock(block)) {\n+      return CanInlineResult.NO;\n+    }\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    if (block.hasChildren() && block.getFirstChild().isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(\n+          block.getFirstChild().getFirstChild(), compiler);\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n+    Node cArg = null;\n+    Node fnParam = null;\n+\n     if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+      cArg = callNode.getFirstFirstChild();\n+      Node callee = callNode.getFirstChild().getFirstChild();\n+      if (NodeUtil.isFunctionObjectApply(callee)) {\n+        // We cannot inline in the presence of the apply construct\n+        return CanInlineResult.NO;\n+      } else if (NodeUtil.isFunctionObjectCall(callee)) {\n+        if (cArg != null && !cArg.isThis()) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        cArg = cArg != null ? cArg.getNext() : null;\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    if (NodeUtil.isFunctionExpression(fnNode)) {\n+      fnParam = fnNode.getFirstChild();\n+    } else {\n+      fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+    }\n+\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n             return CanInlineResult.NO;\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n+\n+          if (NodeUtil.mayEffectMutableState(cArg, compiler) &&\n+              NodeUtil.getNameReferenceCount(\n                   block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n+        } else if (NodeUtil.getPromisedTypeOfNode(fnParam).isUnknownType()) {\n+          return CanInlineResult.MAYBE;\n         }\n \n-        // Move to the next name.\n         fnParam = fnParam.getNext();\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n       if (cArg != null) {\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}