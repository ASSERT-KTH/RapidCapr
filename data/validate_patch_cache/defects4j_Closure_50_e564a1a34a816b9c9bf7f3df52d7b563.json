{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || callTarget.getNext().getString() != \"join\") {\n        return n;\n    }\n\n    Node firstArg = callTarget.getNext().getNext();\n    if (firstArg == null) {\n        n.getParent().replaceChild(n, IR.string());\n        reportCodeChange();\n        return n;\n    }\n\n    List<Node> args = new ArrayList<>();\n    args.add(firstArg);\n\n    while (firstArg.getNext() != null) {\n        firstArg = firstArg.getNext();\n\n        if (!NodeUtil.isImmutableValue(firstArg)) {\n            return n;\n        }\n        args.add(firstArg);\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    String joinString = \",\";\n\n    if (args.size() == 1 && args.get(0).getType() == Token.STRING) {\n        joinString = args.get(0).getString();\n        args.clear();\n    }\n\n    if (joinString.length() == 0) {\n        n.getParent().replaceChild(n, IR.string());\n        reportCodeChange();\n        return n;\n    }\n\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    Node prev = null;\n    for (Node elem : arrayNode.children()) {\n        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n            if (sb.length() == 0) {\n                sb.append(NodeUtil.getArrayElementStringValue(elem));\n            } else {\n                sb.append(joinString).append(NodeUtil.getArrayElementStringValue(elem));\n            }\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(IR.string(sb.toString()).copyInformationFrom(prev));\n                sb = new StringBuilder();\n            }\n            arrayFoldedChildren.add(elem);\n        }\n        prev = elem;\n    }\n\n    if (sb.length() > 0) {\n        arrayFoldedChildren.add(IR.string(sb.toString()).copyInformationFrom(prev));\n    }\n\n    Node result = null;\n    if (arrayFoldedChildren.size() == 0) {\n        result = IR.string();\n    } else if (arrayFoldedChildren.size() == 1 && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n        result = arrayFoldedChildren.get(0);\n    } else {\n        List<Node> addArgs = new ArrayList<>();\n\n        for (Node elem : arrayFoldedChildren) {\n            if (elem.getType() == Token.STRING &&\n                    elem.getString().length() > 0) {\n                addArgs.add(elem);\n            } else if (elem.isAdd()) {\n                addArgs.addAll(elem.children());\n            } else {\n                addArgs.add(elem);\n            }\n\n            if (addArgs.size() > 1) {\n                if (addArgs.get(addArgs.size() - 2).getType() == Token.STRING &&\n                        addArgs.get(addArgs.size() - 1).getType() == Token.STRING) {\n                    Node str1 = addArgs.remove(addArgs.size() - 2);\n                    Node str2 = addArgs.remove(addArgs.size() - 1);\n                    addArgs.add(IR.string(str1.getString() + str2.getString()));\n                }\n            }\n        }\n\n        if (addArgs.size() == 0) {\n            result = IR.string();\n        } else {\n            Node addOp = new Node(Token.ADD, addArgs.remove(0), null);\n            for (Node elem : addArgs) {\n                addOp.addChildToFront(elem);\n            }\n            result = addOp;\n        }\n    }\n\n    if (result.getLength() > n.getLength()) {\n        return n;\n    }\n\n    // Avoid changing children if the result of the fold is an empty string.\n    if (result.isString() && result.getString().length() == 0) {\n        n.getParent().replaceChild(n, result);\n        reportCodeChange();\n        return result;\n    }\n\n    Node parent = n.getParent();\n    parent.replaceChild(n, result);\n    reportCodeChange();\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..683c07c9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,125 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n+    if (callTarget == null || callTarget.getNext().getString() != \"join\") {\n+        return n;\n     }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n+    Node firstArg = callTarget.getNext().getNext();\n+    if (firstArg == null) {\n+        n.getParent().replaceChild(n, IR.string());\n+        reportCodeChange();\n         return n;\n-      }\n+    }\n+\n+    List<Node> args = new ArrayList<>();\n+    args.add(firstArg);\n+\n+    while (firstArg.getNext() != null) {\n+        firstArg = firstArg.getNext();\n+\n+        if (!NodeUtil.isImmutableValue(firstArg)) {\n+            return n;\n+        }\n+        args.add(firstArg);\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+    String joinString = \",\";\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n+    if (args.size() == 1 && args.get(0).getType() == Token.STRING) {\n+        joinString = args.get(0).getString();\n+        args.clear();\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    if (joinString.length() == 0) {\n+        n.getParent().replaceChild(n, IR.string());\n+        reportCodeChange();\n+        return n;\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n+    StringBuilder sb = new StringBuilder();\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+    for (Node elem : arrayNode.children()) {\n+        if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+            if (sb.length() == 0) {\n+                sb.append(NodeUtil.getArrayElementStringValue(elem));\n+            } else {\n+                sb.append(joinString).append(NodeUtil.getArrayElementStringValue(elem));\n+            }\n         } else {\n-          sb.append(joinString);\n+            if (sb.length() > 0) {\n+                arrayFoldedChildren.add(IR.string(sb.toString()).copyInformationFrom(prev));\n+                sb = new StringBuilder();\n+            }\n+            arrayFoldedChildren.add(elem);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n+        prev = elem;\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (sb.length() > 0) {\n+        arrayFoldedChildren.add(IR.string(sb.toString()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n+    Node result = null;\n+    if (arrayFoldedChildren.size() == 0) {\n+        result = IR.string();\n+    } else if (arrayFoldedChildren.size() == 1 && arrayFoldedChildren.get(0).getType() == Token.STRING) {\n+        result = arrayFoldedChildren.get(0);\n+    } else {\n+        List<Node> addArgs = new ArrayList<>();\n+\n+        for (Node elem : arrayFoldedChildren) {\n+            if (elem.getType() == Token.STRING &&\n+                    elem.getString().length() > 0) {\n+                addArgs.add(elem);\n+            } else if (elem.isAdd()) {\n+                addArgs.addAll(elem.children());\n+            } else {\n+                addArgs.add(elem);\n+            }\n+\n+            if (addArgs.size() > 1) {\n+                if (addArgs.get(addArgs.size() - 2).getType() == Token.STRING &&\n+                        addArgs.get(addArgs.size() - 1).getType() == Token.STRING) {\n+                    Node str1 = addArgs.remove(addArgs.size() - 2);\n+                    Node str2 = addArgs.remove(addArgs.size() - 1);\n+                    addArgs.add(IR.string(str1.getString() + str2.getString()));\n+                }\n+            }\n         }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+\n+        if (addArgs.size() == 0) {\n+            result = IR.string();\n+        } else {\n+            Node addOp = new Node(Token.ADD, addArgs.remove(0), null);\n+            for (Node elem : addArgs) {\n+                addOp.addChildToFront(elem);\n+            }\n+            result = addOp;\n         }\n+    }\n+\n+    if (result.getLength() > n.getLength()) {\n+        return n;\n+    }\n+\n+    // Avoid changing children if the result of the fold is an empty string.\n+    if (result.isString() && result.getString().length() == 0) {\n+        n.getParent().replaceChild(n, result);\n         reportCodeChange();\n-        break;\n+        return result;\n     }\n \n-    return n;\n-  }\n+    Node parent = n.getParent();\n+    parent.replaceChild(n, result);\n+    reportCodeChange();\n+    return result;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +651,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}