{
    "patch": "private boolean isNegativeZero(double value) {\n  return value == 0 && Double.doubleToRawLongBits(value) != 0;\n}\n\nvoid addNumber(double x) {\n  // This is not pretty printing. This is to prevent misparsing of x- -4 as\n  // x--4 (which is a syntax error).\n  char prev = getLastChar();\n  boolean negativeZero = isNegativeZero(x);\n\n  if (negativeZero) {\n    add(\"-0\");\n  } else if (x < 0 && prev == '-') {\n    add(\" \");\n    add(String.valueOf(x));\n  } else {\n\n    if ((long) x == x && !negativeZero) {\n      long value = (long) x;\n      long mantissa = value;\n      int exp = 0;\n      if (Math.abs(x) >= 100) {\n        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n          mantissa /= 10;\n          exp++;\n        }\n      }\n      if (exp > 2) {\n        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n      } else {\n        add(Long.toString(value));\n      }\n    } else {\n      add(String.valueOf(x));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..538b64c9 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -242,7 +242,43 @@ abstract class CodeConsumer {\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+private boolean isNegativeZero(double value) {\n+  return value == 0 && Double.doubleToRawLongBits(value) != 0;\n+}\n+\n+void addNumber(double x) {\n+  // This is not pretty printing. This is to prevent misparsing of x- -4 as\n+  // x--4 (which is a syntax error).\n+  char prev = getLastChar();\n+  boolean negativeZero = isNegativeZero(x);\n+\n+  if (negativeZero) {\n+    add(\"-0\");\n+  } else if (x < 0 && prev == '-') {\n+    add(\" \");\n+    add(String.valueOf(x));\n+  } else {\n+\n+    if ((long) x == x && !negativeZero) {\n+      long value = (long) x;\n+      long mantissa = value;\n+      int exp = 0;\n+      if (Math.abs(x) >= 100) {\n+        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+          mantissa /= 10;\n+          exp++;\n+        }\n+      }\n+      if (exp > 2) {\n+        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+      } else {\n+        add(Long.toString(value));\n+      }\n+    } else {\n+      add(String.valueOf(x));\n+    }\n+  }\n+}\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}