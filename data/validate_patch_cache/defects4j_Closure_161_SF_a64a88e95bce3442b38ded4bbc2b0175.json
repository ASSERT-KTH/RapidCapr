{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0 ||\n        (left.getType() == Token.ARRAYLIT && intIndex >= left.getChildCount())) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else if (parent != null &&\n               (parent.getType() == Token.ASSIGN ||\n               isAssignmentOp(parent.getType()))) {\n      // This is an assignment. Keep the array node.\n      return n;\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value, if it's not an assignment.\n    if (parent != null &&\n        (parent.getType() == Token.ASSIGN ||\n        isAssignmentOp(parent.getType()))) {\n      n.replaceWith(elem);\n    } else {\n      n.getParent().replaceChild(n, elem);\n    }\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..545f1292 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,7 +1274,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n@@ -1294,7 +1293,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    if (intIndex < 0 ||\n+        (left.getType() == Token.ARRAYLIT && intIndex >= left.getChildCount())) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n@@ -1311,12 +1311,23 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     if (elem.getType() == Token.EMPTY) {\n       elem = NodeUtil.newUndefinedNode(elem);\n+    } else if (parent != null &&\n+               (parent.getType() == Token.ASSIGN ||\n+               isAssignmentOp(parent.getType()))) {\n+      // This is an assignment. Keep the array node.\n+      return n;\n     } else {\n       left.removeChild(elem);\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    // Replace the entire GETELEM with the value, if it's not an assignment.\n+    if (parent != null &&\n+        (parent.getType() == Token.ASSIGN ||\n+        isAssignmentOp(parent.getType()))) {\n+      n.replaceWith(elem);\n+    } else {\n+      n.getParent().replaceChild(n, elem);\n+    }\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}