{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    boolean quoted = false;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            if (quoted) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n                        QUOTE);\n            } else {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n            }\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n        case QUOTE:\n            if (quoted) {\n                quoted = false;\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold - 1);\n            } else {\n                quoted = true;\n                next(pos);\n                lastHold = pos.getIndex();\n            }\n            break;\n        default:\n            if (!quoted) {\n                next(pos);\n            }\n        }\n    }\n    if (quoted) {\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + lastHold);\n    }\n    return appendTo == null ? null : appendTo.append(c, lastHold,\n            pos.getIndex() - lastHold);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..7b163896 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,53 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+        StringBuffer appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    char[] c = pattern.toCharArray();\n+    if (escapingOn && c[start] == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+    int lastHold = start;\n+    boolean quoted = false;\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            if (quoted) {\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n                         QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n+            } else {\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n             }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n+            pos.setIndex(i + ESCAPED_QUOTE.length());\n+            lastHold = pos.getIndex();\n+            continue;\n+        }\n+        switch (c[pos.getIndex()]) {\n+        case QUOTE:\n+            if (quoted) {\n+                quoted = false;\n                 next(pos);\n                 return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n+                        pos.getIndex() - lastHold - 1);\n+            } else {\n+                quoted = true;\n+                next(pos);\n+                lastHold = pos.getIndex();\n+            }\n+            break;\n+        default:\n+            if (!quoted) {\n                 next(pos);\n             }\n         }\n+    }\n+    if (quoted) {\n         throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+                \"Unterminated quoted string at position \" + lastHold);\n     }\n+    return appendTo == null ? null : appendTo.append(c, lastHold,\n+            pos.getIndex() - lastHold);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "java.lang.OutOfMemoryError: Requested array size exceeds VM limit",
    "test_result": "FAIL"
}