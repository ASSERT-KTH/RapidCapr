{
    "patch": " private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = \",\";\n    if (right != null) {\n      if (NodeUtil.isString(right)) {\n        joinString = right.getString();\n      } else if (NodeUtil.isNumber(right)) {\n        joinString = \",\".repeat(right.getIntValue());\n      } else {\n        return n;\n      }\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        Node stringLiteral = Node.newString(NodeUtil.getArrayElementStringValue(elem));\n        arrayFoldedChildren.add(stringLiteral.copyInformationFrom(elem));\n      } else {\n        if (arrayFoldedChildren.size() == 0) {\n          arrayFoldedChildren.add(elem);\n        } else {\n          arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));\n          arrayFoldedChildren.add(elem);\n        }\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = IR.string(\"\").srcrefFrom(n);\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that it is coerced to a string.\n          foldedStringNode = Node.newString(\"\").srcrefFrom(n, AstFactory.TYPE_UNKNOWN)\n                              .addChildToBack(\n                                  Node.newAdd(IR.string(\"\").srcrefFrom(n),\n                                              foldedStringNode));\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        Node newStatement = IR.exprResult(n.getFirstChild().copyNode());\n        newStatement.srcrefTree(n);\n        newStatement.getLastChild().getFirstChild().addChildToFront(IR.string(joinString));\n        Node callNode = newStatement.getFirstFirstChild();\n        callNode.getLastChild().detach();\n        Node newArrayNode = IR.arraylit().srcrefFrom(callNode);\n        for (Node node : arrayFoldedChildren) {\n          newArrayNode.addChildToBack(node);\n        }\n        callNode.addChildToBack(newArrayNode);\n        Node function = NodeUtil.getEnclosingFunction(n);\n        function.getParent().addChildAfter(newStatement, function);\n        n.detach();\n        reportCodeChange();\n        break;\n    }\n\n    return null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..fa4a5a0e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,7 +364,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+ private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n \n     if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n@@ -386,93 +386,74 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+      if (NodeUtil.isString(right)) {\n+        joinString = right.getString();\n+      } else if (NodeUtil.isNumber(right)) {\n+        joinString = \",\".repeat(right.getIntValue());\n+      } else {\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        Node stringLiteral = Node.newString(NodeUtil.getArrayElementStringValue(elem));\n+        arrayFoldedChildren.add(stringLiteral.copyInformationFrom(elem));\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (arrayFoldedChildren.size() == 0) {\n+          arrayFoldedChildren.add(elem);\n+        } else {\n+          arrayFoldedChildren.add(Node.newString(joinString).copyInformationFrom(prev));\n+          arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n       elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = IR.string(\"\").srcrefFrom(n);\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n       case 1:\n         Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n+          // If the Node is not a string literal, ensure that it is coerced to a string.\n+          foldedStringNode = Node.newString(\"\").srcrefFrom(n, AstFactory.TYPE_UNKNOWN)\n+                              .addChildToBack(\n+                                  Node.newAdd(IR.string(\"\").srcrefFrom(n),\n+                                              foldedStringNode));\n         }\n         n.getParent().replaceChild(n, foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n+        Node newStatement = IR.exprResult(n.getFirstChild().copyNode());\n+        newStatement.srcrefTree(n);\n+        newStatement.getLastChild().getFirstChild().addChildToFront(IR.string(joinString));\n+        Node callNode = newStatement.getFirstFirstChild();\n+        callNode.getLastChild().detach();\n+        Node newArrayNode = IR.arraylit().srcrefFrom(callNode);\n         for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+          newArrayNode.addChildToBack(node);\n         }\n+        callNode.addChildToBack(newArrayNode);\n+        Node function = NodeUtil.getEnclosingFunction(n);\n+        function.getParent().addChildAfter(newStatement, function);\n+        n.detach();\n         reportCodeChange();\n         break;\n     }\n \n-    return n;\n+    return null;\n   }\n \n   /**\n@@ -642,4 +623,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}