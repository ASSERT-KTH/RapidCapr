{
    "patch": "      if (n.getLastChild().isFunction()) {\n        // The last child is a function definition, so we don't want to\n        // minimize the exits of its body, as that can cause problems\n        // with function return types and flow control.\n        return;\n      } else if (n.getLastChild().isClass()) {\n        // The last child is a class definition, so we don't want to\n        // minimize the exits of its body.\n        return;\n      } else if (n.getLastChild().isTry()) {\n        // Don't try to minimize the exits of try blocks, as this\n        // can cause problems if it changes the completion type of the try\n        // block.\n        return;\n      } else if (n.getLastChild().isSwitch()) {\n        // Don't try to minimize the exits of switch blocks, as these can\n        // have unusual flow-control requirements.\n        return;\n      } else if (n.getLastChild().getNodeType() == Token.BLOCK) {\n        // Check any nested blocks as well.\n        tryMinimizeExits(n.getLastChild(), exitType, labelName);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..05aafa11 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,9 +138,27 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n+      if (n.getLastChild().isFunction()) {\n+        // The last child is a function definition, so we don't want to\n+        // minimize the exits of its body, as that can cause problems\n+        // with function return types and flow control.\n+        return;\n+      } else if (n.getLastChild().isClass()) {\n+        // The last child is a class definition, so we don't want to\n+        // minimize the exits of its body.\n+        return;\n+      } else if (n.getLastChild().isTry()) {\n+        // Don't try to minimize the exits of try blocks, as this\n+        // can cause problems if it changes the completion type of the try\n+        // block.\n+        return;\n+      } else if (n.getLastChild().isSwitch()) {\n+        // Don't try to minimize the exits of switch blocks, as these can\n+        // have unusual flow-control requirements.\n+        return;\n+      } else if (n.getLastChild().getNodeType() == Token.BLOCK) {\n+        // Check any nested blocks as well.\n+        tryMinimizeExits(n.getLastChild(), exitType, labelName);\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}