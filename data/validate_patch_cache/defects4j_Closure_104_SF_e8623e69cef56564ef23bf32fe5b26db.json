{
    "patch": "  private static final JSType NO_OBJECT_TYPE = JSTypeRegistry.get().getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n  private static final JSType NO_TYPE = JSTypeRegistry.get().getNativeType(JSTypeNative.NO_TYPE);\n\n  @Override\n  public JSType greatestSubtype(JSType other) {\n    if (this.equals(other)) {\n      return this;\n    }\n\n    // Union types are not an ordering\n    if (other.isUnionType()) {\n      JSType.Builder builder = JSType.newBuilder();\n      for (JSType alternate : getAlternates()) {\n        builder.addAlternate(alternate.greatestSubtype(other));\n      }\n      for (JSType otherAlternate : ((UnionType) other).getAlternates()) {\n        builder.addAlternate(greatestSubtype(otherAlternate));\n      }\n      return builder.build();\n    }\n\n    // Handle nullable subtype\n    if (NullableType.isNullable(other)) {\n      return NullableType.create(this.greatestSubtype(NullableType.stripNullable(other)));\n    } else if (NullableType.isNullable(this)) {\n      return NullableType.create(this.stripNullable().greatestSubtype(other));\n    }\n\n    if (other.isUnknownType() || (other.isAllType() && !this.isUnknownType())) {\n      return this;\n    } else if (this.isUnknownType() || (this.isAllType() && !other.isUnknownType())) {\n      return other;\n    }\n\n    if (this.isTop() || other.isBottom()) {\n      return other;\n    } else if (this.isBottom() || other.isTop()) {\n      return this;\n    }\n\n    JSType result = JSType.meet(this, other);\n\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && other.isObject()) {\n      return NO_OBJECT_TYPE;\n    } else {\n      return NO_TYPE;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..44dbb5c0 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,56 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n+  private static final JSType NO_OBJECT_TYPE = JSTypeRegistry.get().getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+  private static final JSType NO_TYPE = JSTypeRegistry.get().getNativeType(JSTypeNative.NO_TYPE);\n+\n+  @Override\n+  public JSType greatestSubtype(JSType other) {\n+    if (this.equals(other)) {\n+      return this;\n+    }\n+\n+    // Union types are not an ordering\n+    if (other.isUnionType()) {\n+      JSType.Builder builder = JSType.newBuilder();\n+      for (JSType alternate : getAlternates()) {\n+        builder.addAlternate(alternate.greatestSubtype(other));\n+      }\n+      for (JSType otherAlternate : ((UnionType) other).getAlternates()) {\n+        builder.addAlternate(greatestSubtype(otherAlternate));\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+      return builder.build();\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+\n+    // Handle nullable subtype\n+    if (NullableType.isNullable(other)) {\n+      return NullableType.create(this.greatestSubtype(NullableType.stripNullable(other)));\n+    } else if (NullableType.isNullable(this)) {\n+      return NullableType.create(this.stripNullable().greatestSubtype(other));\n     }\n-  }\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+    if (other.isUnknownType() || (other.isAllType() && !this.isUnknownType())) {\n+      return this;\n+    } else if (this.isUnknownType() || (this.isAllType() && !other.isUnknownType())) {\n+      return other;\n     }\n-  }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n+    if (this.isTop() || other.isBottom()) {\n+      return other;\n+    } else if (this.isBottom() || other.isTop()) {\n+      return this;\n+    }\n \n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n+    JSType result = JSType.meet(this, other);\n \n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n+    if (result != null) {\n+      return result;\n+    } else if (this.isObject() && other.isObject()) {\n+      return NO_OBJECT_TYPE;\n+    } else {\n+      return NO_TYPE;\n+    }\n+  }\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}