{
    "patch": " private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.getToken() != Token.FUNCTION) {\n      return false;\n    }\n\n    Node functionBody = NodeUtil.getFunctionBody(n);\n    return functionBody != null && functionBody.hasChildren();\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..ca922ec4 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,14 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n+ private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.getToken() != Token.FUNCTION) {\n+      return false;\n+    }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+    Node functionBody = NodeUtil.getFunctionBody(n);\n+    return functionBody != null && functionBody.hasChildren();\n+ }\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}