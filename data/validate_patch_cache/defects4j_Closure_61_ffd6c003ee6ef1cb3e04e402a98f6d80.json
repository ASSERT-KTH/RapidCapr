{
    "patch": "static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name) ||\n        MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild() &&\n        OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesArgumentsCall()) {\n      // Check if the passed arguments have side effects. If there are no arguments or all arguments\n      // have trivial expressions, then the call has no side effects.\n      Node args = nameNode.getNext();\n      while (args != null) {\n        if (args.getFirstChild() != null && !NodeUtil.isLiteralValue(args.getFirstChild())) {\n          // If the argument is a destructuring pattern, check if any of the individual elements have\n          // side effects.\n          if (args.getFirstChild().getType() == Token.ARRAY_PATTERN ||\n              args.getFirstChild().getType() == Token.OBJECT_PATTERN) {\n            for (Node child = args.getFirstChild().getFirstChild(); child != null;\n                 child = child.getNext()) {\n              if (child.getType() != Token.NAME || !evaluatesToLocalValue(child)) {\n                return true;\n              }\n            }\n          } else {\n            return true;\n          }\n        }\n        args = args.getNext();\n      }\n      return false;\n    } else if (callNode.isOnlyModifiesThisCall()) {\n      if (evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n    } else {\n      // Functions in the \"Math\" namespace have no side effects.\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP &&\n            REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING &&\n            STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..1734255b 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,58 +923,80 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n-      Node callNode, @Nullable AbstractCompiler compiler) {\n-    if (callNode.getType() != Token.CALL) {\n-      throw new IllegalStateException(\n-          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n-    }\n+static boolean functionCallHasSideEffects(Node callNode, @Nullable AbstractCompiler compiler) {\n+  if (callNode.getType() != Token.CALL) {\n+    throw new IllegalStateException(\n+        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+  }\n \n-    if (callNode.isNoSideEffectsCall()) {\n+  if (callNode.isNoSideEffectsCall()) {\n+    return false;\n+  }\n+\n+  Node nameNode = callNode.getFirstChild();\n+\n+  // Built-in functions with no side effects.\n+  if (nameNode.getType() == Token.NAME) {\n+    String name = nameNode.getString();\n+    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name) ||\n+        MATH_METHODS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+      return false;\n+    }\n+  } else if (nameNode.getType() == Token.GETPROP) {\n+    if (callNode.hasOneChild() &&\n+        OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {\n       return false;\n     }\n \n-    Node nameNode = callNode.getFirstChild();\n-\n-    // Built-in functions with no side effects.\n-    if (nameNode.getType() == Token.NAME) {\n-      String name = nameNode.getString();\n-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n-        return false;\n-      }\n-    } else if (nameNode.getType() == Token.GETPROP) {\n-      if (callNode.hasOneChild()\n-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n-                nameNode.getLastChild().getString())) {\n-        return false;\n+    if (callNode.isOnlyModifiesArgumentsCall()) {\n+      // Check if the passed arguments have side effects. If there are no arguments or all arguments\n+      // have trivial expressions, then the call has no side effects.\n+      Node args = nameNode.getNext();\n+      while (args != null) {\n+        if (args.getFirstChild() != null && !NodeUtil.isLiteralValue(args.getFirstChild())) {\n+          // If the argument is a destructuring pattern, check if any of the individual elements have\n+          // side effects.\n+          if (args.getFirstChild().getType() == Token.ARRAY_PATTERN ||\n+              args.getFirstChild().getType() == Token.OBJECT_PATTERN) {\n+            for (Node child = args.getFirstChild().getFirstChild(); child != null;\n+                 child = child.getNext()) {\n+              if (child.getType() != Token.NAME || !evaluatesToLocalValue(child)) {\n+                return true;\n+              }\n+            }\n+          } else {\n+            return true;\n+          }\n+        }\n+        args = args.getNext();\n       }\n-\n-      if (callNode.isOnlyModifiesThisCall()\n-          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+      return false;\n+    } else if (callNode.isOnlyModifiesThisCall()) {\n+      if (evaluatesToLocalValue(nameNode.getFirstChild())) {\n         return false;\n       }\n-\n+    } else {\n       // Functions in the \"Math\" namespace have no side effects.\n-\n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+        if (nameNode.getFirstChild().getType() == Token.REGEXP &&\n+            REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n           return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n-            && STRING_REGEXP_METHODS.contains(\n-                nameNode.getLastChild().getString())) {\n+        } else if (nameNode.getFirstChild().getType() == Token.STRING &&\n+            STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n           Node param = nameNode.getNext();\n           if (param != null &&\n-              (param.getType() == Token.STRING\n-                  || param.getType() == Token.REGEXP))\n-          return false;\n+              (param.getType() == Token.STRING || param.getType() == Token.REGEXP)) {\n+            return false;\n+          }\n         }\n       }\n+      return true;\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether the call has a local result.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}