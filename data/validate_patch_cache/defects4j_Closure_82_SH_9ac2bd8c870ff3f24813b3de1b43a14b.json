{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {    \n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n            return true;\n        }\n        if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n            Node succNode = edge.getTarget();\n            if (hasExceptionHandler(succNode)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..cd8d1bbd 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -158,9 +158,22 @@ public abstract class JSType implements Serializable {\n   public boolean isNoObjectType() {\n     return false;\n   }\n-\n   public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+private boolean hasExceptionHandler(Node cfgNode) {    \n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+            return true;\n+        }\n+        if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n+            Node succNode = edge.getTarget();\n+            if (hasExceptionHandler(succNode)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}