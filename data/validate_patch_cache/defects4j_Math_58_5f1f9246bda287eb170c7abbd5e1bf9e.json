{
    "patch": "    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        final double[] lower = new double[guess.length];\n        Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n        final double[] upper = null;\n        final WeightedObservedPoint[] points = getObservations();\n        final WeightedObservedPoint point = points[0];\n        final double start = point.getX();\n        final double[] sigma = new double[] { Double.POSITIVE_INFINITY };\n        final double[] result = new LevenbergMarquardtOptimizer().optimize(\n            new LeastSquaresOptimizer.Observation(cost, jac),\n            new Gaussian.Parametric(), points, getWeights(), guess,\n            lower, upper);\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..29af19411 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,18 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double[] lower = new double[guess.length];\n+        Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n+        final double[] upper = null;\n+        final WeightedObservedPoint[] points = getObservations();\n+        final WeightedObservedPoint point = points[0];\n+        final double start = point.getX();\n+        final double[] sigma = new double[] { Double.POSITIVE_INFINITY };\n+        final double[] result = new LevenbergMarquardtOptimizer().optimize(\n+            new LeastSquaresOptimizer.Observation(cost, jac),\n+            new Gaussian.Parametric(), points, getWeights(), guess,\n+            lower, upper);\n+        return result;\n     }\n \n     /**",
    "result_reason": "error: package LeastSquaresOptimizer does not exist",
    "test_result": "ERROR"
}