{
    "patch": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n\n  // Just an 'exit'.\n  if (matchingExitNode(n, exitType, labelName)) {\n    // Don't remove returns in finally blocks.\n    if (exitType == Token.RETURN &&\n        NodeUtil.getEnclosingType(n, Token.FINALLY_BLOCK) != null) {\n      return;\n    }\n    // Only remove throws in a try-catch-finally statement.\n    if (exitType == Token.THROW && !NodeUtil.hasFinally(n.getGrandparent())) {\n      return;\n    }\n    // Remove the node. In some cases, we may need to adjust the tree afterward.\n    NodeUtil.removeChild(n.getParent(), n);\n    compiler.reportCodeChange();\n    return;\n  }\n\n  if (n.isIf()) {\n    // Process parent if.\n    tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n    Node elseNode = n.getFirstChild().getNext().getNext();\n    if (elseNode != null) {\n      tryMinimizeExits(elseNode, exitType, labelName);\n    }\n    return;\n  }\n\n  if (n.isTry()) {\n    tryMinimizeExits(n.getFirstChild(), exitType, labelName);\n    Node catchNode = NodeUtil.getCatchBlock(n);\n    if (NodeUtil.hasCatchHandler(catchNode)) {\n      tryMinimizeExits(catchNode.getFirstChild(), exitType, labelName);\n    }\n    // Don't try to minimize the exits of finally blocks, as this\n    // can cause problems if it changes the completion type of the finally\n    // block. See ECMA 262 Sections 8.9 & 12.14.\n    if (NodeUtil.hasFinally(n)) {\n      tryMinimizeExits(n.getLastChild(), exitType, labelName);\n    }\n    return;\n  }\n\n  if (n.isSwitch()) {\n    // Process the switch cases.\n    Node defaultNode = null;\n    for (Node caseBlock : n.getLastChild().children()) {\n      if (caseBlock.isDefaultCase()) {\n        defaultNode = caseBlock;\n      } else {\n        tryMinimizeExits(caseBlock.getLastChild(), exitType, labelName);\n      }\n    }\n    if (defaultNode != null) {\n      tryMinimizeExits(defaultNode.getLastChild(), exitType, labelName);\n    }\n    return;\n  }\n\n  if (n.isBlock()) {\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      tryMinimizeExits(child, exitType, labelName);\n      if (child != n.getLastChild()) {\n        // Previously, we were exiting immediately from this function before\n        // processing the last child of a block. Postponing the check to remove\n        // redundant blocks until after processing that last child allows\n        // redundant blocks containing a single child to be efficiently removed.\n        while (child.getNext() != null && !child.getNext().isNew()) {\n          child = child.getNext();\n        }\n        if (tryMinimizeBlock(n)) {\n          return;\n        }\n      }\n    }\n    return;\n  }\n\n  if (n.isLabel()) {\n    tryMinimizeExits(n.getLastChild(), exitType, labelName);\n    return;\n  }\n\n  // If we encounter a 'name' node, then the name may refer to a label. In this case,\n  // we continue processing the statement following the name.\n  if (n.isName()) {\n    tryMinimizeExits(n.getNext(), exitType, labelName);\n    return;\n  }\n\n  // The default case is to process the children of the node.\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    tryMinimizeExits(child, exitType, labelName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..34aa98f7 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -103,103 +103,103 @@ class MinimizeExitPoints\n    *   null otherwise.\n    * @nullable labelName non-null only for breaks within labels.\n    */\n-  void tryMinimizeExits(Node n, int exitType, String labelName) {\n+void tryMinimizeExits(Node n, int exitType, String labelName) {\n \n-    // Just an 'exit'.\n-    if (matchingExitNode(n, exitType, labelName)) {\n-      NodeUtil.removeChild(n.getParent(), n);\n-      compiler.reportCodeChange();\n+  // Just an 'exit'.\n+  if (matchingExitNode(n, exitType, labelName)) {\n+    // Don't remove returns in finally blocks.\n+    if (exitType == Token.RETURN &&\n+        NodeUtil.getEnclosingType(n, Token.FINALLY_BLOCK) != null) {\n       return;\n     }\n-\n-    // Just an 'if'.\n-    if (n.isIf()) {\n-      Node ifBlock = n.getFirstChild().getNext();\n-      tryMinimizeExits(ifBlock, exitType, labelName);\n-      Node elseBlock = ifBlock.getNext();\n-      if (elseBlock != null) {\n-        tryMinimizeExits(elseBlock, exitType, labelName);\n-      }\n+    // Only remove throws in a try-catch-finally statement.\n+    if (exitType == Token.THROW && !NodeUtil.hasFinally(n.getGrandparent())) {\n       return;\n     }\n+    // Remove the node. In some cases, we may need to adjust the tree afterward.\n+    NodeUtil.removeChild(n.getParent(), n);\n+    compiler.reportCodeChange();\n+    return;\n+  }\n \n-    // Just a 'try/catch/finally'.\n-    if (n.isTry()) {\n-      Node tryBlock = n.getFirstChild();\n-      tryMinimizeExits(tryBlock, exitType, labelName);\n-      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n-        Preconditions.checkState(allCatchNodes.hasOneChild());\n-        Node catchNode = allCatchNodes.getFirstChild();\n-        Node catchCodeBlock = catchNode.getLastChild();\n-        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n-      }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+  if (n.isIf()) {\n+    // Process parent if.\n+    tryMinimizeExits(n.getFirstChild().getNext(), exitType, labelName);\n+    Node elseNode = n.getFirstChild().getNext().getNext();\n+    if (elseNode != null) {\n+      tryMinimizeExits(elseNode, exitType, labelName);\n     }\n+    return;\n+  }\n \n-    // Just a 'label'.\n-    if (n.isLabel()) {\n-      Node labelBlock = n.getLastChild();\n-      tryMinimizeExits(labelBlock, exitType, labelName);\n+  if (n.isTry()) {\n+    tryMinimizeExits(n.getFirstChild(), exitType, labelName);\n+    Node catchNode = NodeUtil.getCatchBlock(n);\n+    if (NodeUtil.hasCatchHandler(catchNode)) {\n+      tryMinimizeExits(catchNode.getFirstChild(), exitType, labelName);\n     }\n-\n-    // TODO(johnlenz): The last case of SWITCH statement?\n-\n-    // The rest assumes a block with at least one child, bail on anything else.\n-    if (!n.isBlock() || n.getLastChild() == null) {\n-      return;\n+    // Don't try to minimize the exits of finally blocks, as this\n+    // can cause problems if it changes the completion type of the finally\n+    // block. See ECMA 262 Sections 8.9 & 12.14.\n+    if (NodeUtil.hasFinally(n)) {\n+      tryMinimizeExits(n.getLastChild(), exitType, labelName);\n     }\n+    return;\n+  }\n \n-    // Multiple if-exits can be converted in a single pass.\n-    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n-    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n-    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n-    for (Node c : n.children()) {\n-\n-      // An 'if' block to process below.\n-      if (c.isIf()) {\n-        Node ifTree = c;\n-        Node trueBlock, falseBlock;\n-\n-        // First, the true condition block.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n-            ifTree, exitType, labelName);\n-\n-        // Now the else block.\n-        // The if blocks may have changed, get them again.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        if (falseBlock != null) {\n-          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n-              ifTree, exitType, labelName);\n-        }\n-      }\n-\n-      if (c == n.getLastChild()) {\n-        break;\n+  if (n.isSwitch()) {\n+    // Process the switch cases.\n+    Node defaultNode = null;\n+    for (Node caseBlock : n.getLastChild().children()) {\n+      if (caseBlock.isDefaultCase()) {\n+        defaultNode = caseBlock;\n+      } else {\n+        tryMinimizeExits(caseBlock.getLastChild(), exitType, labelName);\n       }\n     }\n+    if (defaultNode != null) {\n+      tryMinimizeExits(defaultNode.getLastChild(), exitType, labelName);\n+    }\n+    return;\n+  }\n \n-    // Now try to minimize the exits of the last child, if it is removed\n-    // look at what has become the last child.\n-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n-      tryMinimizeExits(c, exitType, labelName);\n-      // If the node is still the last child, we are done.\n-      if (c == n.getLastChild()) {\n-        break;\n+  if (n.isBlock()) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      tryMinimizeExits(child, exitType, labelName);\n+      if (child != n.getLastChild()) {\n+        // Previously, we were exiting immediately from this function before\n+        // processing the last child of a block. Postponing the check to remove\n+        // redundant blocks until after processing that last child allows\n+        // redundant blocks containing a single child to be efficiently removed.\n+        while (child.getNext() != null && !child.getNext().isNew()) {\n+          child = child.getNext();\n+        }\n+        if (tryMinimizeBlock(n)) {\n+          return;\n+        }\n       }\n     }\n+    return;\n   }\n \n+  if (n.isLabel()) {\n+    tryMinimizeExits(n.getLastChild(), exitType, labelName);\n+    return;\n+  }\n+\n+  // If we encounter a 'name' node, then the name may refer to a label. In this case,\n+  // we continue processing the statement following the name.\n+  if (n.isName()) {\n+    tryMinimizeExits(n.getNext(), exitType, labelName);\n+    return;\n+  }\n+\n+  // The default case is to process the children of the node.\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    tryMinimizeExits(child, exitType, labelName);\n+  }\n+}\n+\n   /**\n    * Look for exits (returns, breaks, or continues, depending on the context) at\n    * the end of a block and removes them by moving the if node's siblings,",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}