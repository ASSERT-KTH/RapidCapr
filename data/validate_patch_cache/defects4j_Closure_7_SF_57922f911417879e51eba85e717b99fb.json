{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  if (\"function\".equals(value)) {\n    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n    if (resultEqualsValue && ctorType.isSubtype(type)) {\n      return ctorType;\n    } else {\n      for (String propName : type.getOwnPropertyNames()) {\n        JSType propType = type.getPropertyType(propName);\n        if (propName.equals(\"prototype\") || propType.isFunctionType()) {\n          continue;\n        } else {\n          return null;\n        }\n      }\n      return ctorType;\n    }\n  } else {\n    return \"\\\"object\\\"\".equals(value) ? type : null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..79a3b75b 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,26 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n+public JSType caseObjectType(ObjectType type) {\n+  if (\"function\".equals(value)) {\n+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+    if (resultEqualsValue && ctorType.isSubtype(type)) {\n+      return ctorType;\n+    } else {\n+      for (String propName : type.getOwnPropertyNames()) {\n+        JSType propType = type.getPropertyType(propName);\n+        if (propName.equals(\"prototype\") || propType.isFunctionType()) {\n+          continue;\n+        } else {\n+          return null;\n+        }\n       }\n-      return matchesExpectation(\"object\") ? type : null;\n+      return ctorType;\n     }\n+  } else {\n+    return \"\\\"object\\\"\".equals(value) ? type : null;\n+  }\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "junit.framework.AssertionFailedError: Expected: (Object|boolean|number|string)",
    "test_result": "FAIL"
}