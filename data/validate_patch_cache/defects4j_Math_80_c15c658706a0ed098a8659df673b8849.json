{
    "patch": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n        // flip array\n        int j = 4 * n - 1;\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        double tmp = work[n - 1];\n        work[n - 1] = work[3 * n - 1];\n        work[3 * n - 1] = tmp;\n        tmp = work[n];\n        work[n] = work[3 * n];\n        work[3 * n] = tmp;\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..1a2e38bb0 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1129,22 +1129,28 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n      * only every other element)\n      * @return true if qd array was flipped\n      */\n-    private boolean flipIfWarranted(final int n, final int step) {\n-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n-            // flip array\n-            int j = 4 * n - 1;\n-            for (int i = 0; i < j; i += 4) {\n-                for (int k = 0; k < 4; k += step) {\n-                    final double tmp = work[i + k];\n-                    work[i + k] = work[j - k];\n-                    work[j - k] = tmp;\n-                }\n-                j -= 4;\n+private boolean flipIfWarranted(final int n, final int step) {\n+    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n+        // flip array\n+        int j = 4 * n - 1;\n+        for (int i = 0; i < j; i += 4) {\n+            for (int k = 0; k < 4; k += step) {\n+                final double tmp = work[i + k];\n+                work[i + k] = work[j - k];\n+                work[j - k] = tmp;\n             }\n-            return true;\n+            j -= 4;\n         }\n-        return false;\n+        double tmp = work[n - 1];\n+        work[n - 1] = work[3 * n - 1];\n+        work[3 * n - 1] = tmp;\n+        tmp = work[n];\n+        work[n] = work[3 * n];\n+        work[3 * n] = tmp;\n+        return true;\n     }\n+    return false;\n+}\n \n     /**\n      * Compute an interval containing all realEigenvalues of a block.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<16828.208208485466> but was:<20654.74511575945>",
    "test_result": "FAIL"
}