{
    "patch": "Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Node node = newNode(Token.FUNCTION);\n      Node newNameNode;\n      if (name == null) {\n        newNameNode = new Node(Token.NAME);\n        newNameNode.setString(\"\");\n        newNameNode.setLineno(functionNode.getLineno());\n        newNameNode.setCharno(position2charno(functionNode.getAbsolutePosition()));\n      } else {\n        newNameNode = transform(name);\n      }\n      node.addChildToBack(newNameNode);\n      Node lp = new Node(Token.LP);\n      if (name == null) {\n        lp.setLineno(functionNode.getLineno());\n        lp.setCharno(position2charno(functionNode.getAbsolutePosition() + 8));\n      } else {\n        lp.setLineno(name.getLineno());\n        lp.setCharno(position2charno(name.getAbsolutePosition() + name.getLength()));\n      }\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..fa3d097c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,36 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      Node node = newNode(Token.FUNCTION);\n+      Node newNameNode;\n+      if (name == null) {\n+        newNameNode = new Node(Token.NAME);\n+        newNameNode.setString(\"\");\n+        newNameNode.setLineno(functionNode.getLineno());\n+        newNameNode.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+      } else {\n+        newNameNode = transform(name);\n+      }\n+      node.addChildToBack(newNameNode);\n+      Node lp = new Node(Token.LP);\n+      if (name == null) {\n+        lp.setLineno(functionNode.getLineno());\n+        lp.setCharno(position2charno(functionNode.getAbsolutePosition() + 8));\n+      } else {\n+        lp.setLineno(name.getLineno());\n+        lp.setCharno(position2charno(name.getAbsolutePosition() + name.getLength()));\n+      }\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}