{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        if (instantLocal > 0 && instantLocal < Long.MAX_VALUE) {\n            int offsetAdjusted = getOffset(instantAdjusted);\n            if (offsetLocal != offsetAdjusted) {\n                long nextLocal = nextTransition(instantAdjusted);\n                if (nextLocal == instantLocal) {\n                    nextLocal = nextTransition(nextLocal + 1);\n                }\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal == nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                long prev = previousTransition(instantAdjusted);\n                if (prev < instantAdjusted) {\n                    int offsetPrev = getOffset(prev);\n                    int diff = offsetPrev - offsetLocal;\n                    if (instantAdjusted - prev <= diff) {\n                        return offsetPrev;\n                    }\n                }\n            }\n        }\n        return offsetLocal;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..da267e0b 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -882,32 +882,29 @@ public abstract class DateTimeZone implements Serializable {\n         final int offsetLocal = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n+        if (instantLocal > 0 && instantLocal < Long.MAX_VALUE) {\n+            int offsetAdjusted = getOffset(instantAdjusted);\n+            if (offsetLocal != offsetAdjusted) {\n                 long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+                if (nextLocal == instantLocal) {\n+                    nextLocal = nextTransition(nextLocal + 1);\n+                }\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal == nextAdjusted) {\n                     return offsetLocal;\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+            } else {\n+                long prev = previousTransition(instantAdjusted);\n+                if (prev < instantAdjusted) {\n+                    int offsetPrev = getOffset(prev);\n+                    int diff = offsetPrev - offsetLocal;\n+                    if (instantAdjusted - prev <= diff) {\n+                        return offsetPrev;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+        return offsetLocal;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}