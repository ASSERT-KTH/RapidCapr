{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.DerivativeException;\nimport org.apache.commons.math3.exception.EventException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.solvers.BrentSolver;\nimport org.apache.commons.math3.analysis.solvers.UnivariateSolver;\n\npublic boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n\n        boolean midPointAlreadyComputed = false;\n        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n\n        for (int i = 0; i < n; ++i) {\n\n            final double temp = tb;\n            tb = Math.min(t1, t0 + (interpolator.isForward() ? convergence : -convergence) + (i + 1) * h);\n            if (tb == temp) {\n                // Avoid recomputing the same intersection twice and skipping the last step\n                continue;\n            }\n\n            // evaluate handler value at the end of the substep\n            interpolator.setInterpolatedTime(tb);\n            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            if (ta != t0 || i > 0) {  // protection against ta == t0 and infinite loop\n\n                final boolean previousPositive = (Math.abs(ga) < convergence) ? g0Positive : (ga >= 0);\n                final boolean currentPositive = (Math.abs(gb) < convergence) ? g0Positive : (gb >= 0);\n\n                if (previousPositive ^ currentPositive) {\n                    // there is a sign change: an event is expected during this step\n\n                    increasing = gb >= ga;\n\n                    final double previous = midPointAlreadyComputed ? midPoint : ta;\n                    final double current = tb;\n\n                    // the general idea of the loop below is to try to find a root of the function\n                    // g in the interval [previous, current]. If the BrentSolver fails to find the\n                    // root due to sudden jumps in the function value, we decrease the size of the\n                    // interval and try again until we either find a root or the interval size falls\n                    // below a critical value (which in practice is convergence / maxIterationCount).\n                    double midPoint;\n                    UnivariateSolver solver = new BrentSolver(convergence,\n                        convergence / maxIterationCount, solverAbsoluteAccuracy);\n                    double bracketedLo = previous;\n                    double bracketedHi = current;\n                    boolean updatedBracket = false;\n                    do {\n                        try {\n                            if (bracketedLo < bracketedHi) {\n                                midPoint = solver.solve(1000, handler.g, bracketedLo, bracketedHi, increasing);\n                                updatedBracket = true;\n                            } else {\n                                midPoint = solver.solve(1000, handler.g, bracketedHi, bracketedLo, increasing);\n                                updatedBracket = true;\n                            }\n                        } catch (TooManyEvaluationsException ex) {\n                            // if the solver fails due to convergence issues, decrease the size of the interval\n                            double bracketSize = bracketedHi - bracketedLo;\n                            bracketedLo = midPoint - bracketSize / 4.0;\n                            bracketedHi = midPoint + bracketSize / 4.0;\n                        }\n                    } while (!updatedBracket);\n\n                    if ((!Double.isNaN(pendingEventTime) &&\n                             ((t1 - pendingEventTime) * (midPoint - pendingEventTime) > 0)) ||\n                            (Math.abs(previousEventTime - midPoint) <= convergence)) {\n                        // we have already detected the pending event, or the current event\n                        // occurs too close to the previous event. We have to ignore it.\n                        ta = tb;\n                        ga = gb;\n                    } else {\n                        // we have a new event, store it\n                        pendingEventTime = midPoint;\n                        pendingEvent = true;\n                        if (Math.abs(t1 - pendingEventTime) <= convergence) {\n                            // the event is expected to occur at the end o",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..a9d32019a 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,103 +164,97 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.DerivativeException;\n+import org.apache.commons.math3.exception.EventException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.solvers.BrentSolver;\n+import org.apache.commons.math3.analysis.solvers.UnivariateSolver;\n+\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n+    try {\n \n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n \n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n+        double ta = t0;\n+        double ga = g0;\n \n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+        boolean midPointAlreadyComputed = false;\n+        double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n \n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n+        for (int i = 0; i < n; ++i) {\n+\n+            final double temp = tb;\n+            tb = Math.min(t1, t0 + (interpolator.isForward() ? convergence : -convergence) + (i + 1) * h);\n+            if (tb == temp) {\n+                // Avoid recomputing the same intersection twice and skipping the last step\n+                continue;\n+            }\n+\n+            // evaluate handler value at the end of the substep\n+            interpolator.setInterpolatedTime(tb);\n+            final double gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            if (ta != t0 || i > 0) {  // protection against ta == t0 and infinite loop\n+\n+                final boolean previousPositive = (Math.abs(ga) < convergence) ? g0Positive : (ga >= 0);\n+                final boolean currentPositive = (Math.abs(gb) < convergence) ? g0Positive : (gb >= 0);\n+\n+                if (previousPositive ^ currentPositive) {\n                     // there is a sign change: an event is expected during this step\n \n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n                     increasing = gb >= ga;\n \n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n+                    final double previous = midPointAlreadyComputed ? midPoint : ta;\n+                    final double current = tb;\n+\n+                    // the general idea of the loop below is to try to find a root of the function\n+                    // g in the interval [previous, current]. If the BrentSolver fails to find the\n+                    // root due to sudden jumps in the function value, we decrease the size of the\n+                    // interval and try again until we either find a root or the interval size falls\n+                    // below a critical value (which in practice is convergence / maxIterationCount).\n+                    double midPoint;\n+                    UnivariateSolver solver = new BrentSolver(convergence,\n+                        convergence / maxIterationCount, solverAbsoluteAccuracy);\n+                    double bracketedLo = previous;\n+                    double bracketedHi = current;\n+                    boolean updatedBracket = false;\n+                    do {\n+                        try {\n+                            if (bracketedLo < bracketedHi) {\n+                                midPoint = solver.solve(1000, handler.g, bracketedLo, bracketedHi, increasing);\n+                                updatedBracket = true;\n+                            } else {\n+                                midPoint = solver.solve(1000, handler.g, bracketedHi, bracketedLo, increasing);\n+                                updatedBracket = true;\n                             }\n+                        } catch (TooManyEvaluationsException ex) {\n+                            // if the solver fails due to convergence issues, decrease the size of the interval\n+                            double bracketSize = bracketedHi - bracketedLo;\n+                            bracketedLo = midPoint - bracketSize / 4.0;\n+                            bracketedHi = midPoint + bracketSize / 4.0;\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n+                    } while (!updatedBracket);\n+\n+                    if ((!Double.isNaN(pendingEventTime) &&\n+                             ((t1 - pendingEventTime) * (midPoint - pendingEventTime) > 0)) ||\n+                            (Math.abs(previousEventTime - midPoint) <= convergence)) {\n+                        // we have already detected the pending event, or the current event\n+                        // occurs too close to the previous event. We have to ignore it.\n                         ta = tb;\n                         ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n+                    } else {\n+                        // we have a new event, store it\n+                        pendingEventTime = midPoint;\n                         pendingEvent = true;\n-                        return true;\n-                    }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n-                }\n-\n-            }\n-\n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n-\n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n-        }\n-\n-    }\n+                        if (Math.abs(t1 - pendingEventTime) <= convergence) {\n+                            // the event is expected to occur at the end o\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}