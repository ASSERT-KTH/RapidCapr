{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.ast.Jump;\nimport com.google.javascript.rhino.jstype.JSType;\n\nimport java.util.List;\nimport java.util.Objects;\n\npublic class JavaCode {\n    private static boolean isReduceableFunctionExpression(Node n) {\n        if (n == null) {\n            return false;\n        }\n        if (n.isCall()) {\n            return false;\n        }\n        if (n.getType() == Token.NEW) {\n            return false;\n        }\n        if (NodeUtil.isGet(n)) {\n            return isReduceableFunctionExpression(n.getFirstChild());\n        }\n        if (n.getType() == Token.CAST) {\n            return isReduceableFunctionExpression(n.getSecondChild());\n        }\n        if (n.getType() == Token.ASSIGN) {\n            return isReduceableFunctionExpression(n.getLastChild());\n        }\n        if (NodeUtil.isFunctionExpression(n)) {\n            return true;\n        }\n        if (n.isString()) {\n            return true;\n        }\n        if (n.getType() == Token.THIS) {\n            return true;\n        }\n        JSType type = n.getJSType();\n        if ((type != null && type.isSubtypeOf(getType(\"goog.Promise\")))  // goog.Promise\n                || type != null && type.isSubtypeOf(getType(\"IThenable\"))) {   // IThenable\n            return true;\n        }\n        if (n.getType() == Token.RETURN) {\n            Node parent = n;\n            while (parent != null && !parent.isFunction()) {\n                if (parent instanceof Jump) {\n                    return false;\n                }\n                parent = parent.getParent();\n            }\n            return isReduceableFunctionExpression(n.getFirstChild());\n        }\n        return false;\n    }\n\n    private static JSType getType(String name) {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..38f0154c 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,65 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.ast.Jump;\n+import com.google.javascript.rhino.jstype.JSType;\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+import java.util.List;\n+import java.util.Objects;\n+\n+public class JavaCode {\n+    private static boolean isReduceableFunctionExpression(Node n) {\n+        if (n == null) {\n+            return false;\n+        }\n+        if (n.isCall()) {\n+            return false;\n+        }\n+        if (n.getType() == Token.NEW) {\n+            return false;\n+        }\n+        if (NodeUtil.isGet(n)) {\n+            return isReduceableFunctionExpression(n.getFirstChild());\n+        }\n+        if (n.getType() == Token.CAST) {\n+            return isReduceableFunctionExpression(n.getSecondChild());\n+        }\n+        if (n.getType() == Token.ASSIGN) {\n+            return isReduceableFunctionExpression(n.getLastChild());\n+        }\n+        if (NodeUtil.isFunctionExpression(n)) {\n+            return true;\n+        }\n+        if (n.isString()) {\n+            return true;\n+        }\n+        if (n.getType() == Token.THIS) {\n+            return true;\n+        }\n+        JSType type = n.getJSType();\n+        if ((type != null && type.isSubtypeOf(getType(\"goog.Promise\")))  // goog.Promise\n+                || type != null && type.isSubtypeOf(getType(\"IThenable\"))) {   // IThenable\n+            return true;\n+        }\n+        if (n.getType() == Token.RETURN) {\n+            Node parent = n;\n+            while (parent != null && !parent.isFunction()) {\n+                if (parent instanceof Jump) {\n+                    return false;\n+                }\n+                parent = parent.getParent();\n+            }\n+            return isReduceableFunctionExpression(n.getFirstChild());\n+        }\n+        return false;\n+    }\n+\n+    private static JSType getType(String name) {\n+        return null;\n+    }\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}