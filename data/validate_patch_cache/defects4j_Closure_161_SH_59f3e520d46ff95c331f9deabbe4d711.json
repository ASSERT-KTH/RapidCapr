{
    "patch": "    // Check if the parent is an assignment operation with the GETELEM node as the left hand side.\n    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n      Node assignLeft = parent.getFirstChild();\n      if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n        // If the assignment operation is not of type normal, return the node as is and don't fold.\n        if (NodeUtil.isAssignmentOp(parent) && parent.getIntProp(NodeUtil.EXPRESSION_STATEMENT_PROP) == -1) {\n          return n;\n        }\n\n        // Otherwise, we fold the GETELEM node with the constant index into its value.\n        if (right.getType() == Token.NUMBER) {\n          double index = right.getDouble();\n          int intIndex = (int) index;\n          if (intIndex == index && intIndex >= 0) {\n            Node elem = left.getFirstChild();\n            for (int i = 0; elem != null && i < intIndex; i++) {\n              elem = elem.getNext();\n            }\n            if (elem != null && elem.getType() != Token.EMPTY) {\n              left.removeChild(elem);\n              n.getParent().replaceChild(n, elem);\n              reportCodeChange();\n              return elem;\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..33b8ac27 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,34 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    // Check if the parent is an assignment operation with the GETELEM node as the left hand side.\n+    if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+      Node assignLeft = parent.getFirstChild();\n+      if (assignLeft.getType() == Token.GETELEM && assignLeft.getFirstChild().isEquivalentTo(left)) {\n+        // If the assignment operation is not of type normal, return the node as is and don't fold.\n+        if (NodeUtil.isAssignmentOp(parent) && parent.getIntProp(NodeUtil.EXPRESSION_STATEMENT_PROP) == -1) {\n+          return n;\n+        }\n+\n+        // Otherwise, we fold the GETELEM node with the constant index into its value.\n+        if (right.getType() == Token.NUMBER) {\n+          double index = right.getDouble();\n+          int intIndex = (int) index;\n+          if (intIndex == index && intIndex >= 0) {\n+            Node elem = left.getFirstChild();\n+            for (int i = 0; elem != null && i < intIndex; i++) {\n+              elem = elem.getNext();\n+            }\n+            if (elem != null && elem.getType() != Token.EMPTY) {\n+              left.removeChild(elem);\n+              n.getParent().replaceChild(n, elem);\n+              reportCodeChange();\n+              return elem;\n+            }\n+          }\n+        }\n+      }\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}