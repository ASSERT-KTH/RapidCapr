{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n                                         StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n\n    if (escapingOn && c[start] == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    int lastHold = start;\n\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            if (appendTo != null) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                appendTo.append(QUOTE);\n            }\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n\n        switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n\n                if (appendTo != null) {\n                    return appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                }\n\n                return null;\n            default:\n                next(pos);\n        }\n\n        if (pos.getIndex() - start >= MAX_QUOTED_LENGTH) {\n            throw new IllegalArgumentException(\"Unbounded quoted string at position \" + start);\n        }\n    }\n\n    if (appendTo != null) {\n        appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n    }\n    return appendTo;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..6cefd6be 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,35 +414,52 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+                                         StringBuffer appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    char[] c = pattern.toCharArray();\n+\n+    if (escapingOn && c[start] == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+\n+    int lastHold = start;\n+\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            if (appendTo != null) {\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n+                appendTo.append(QUOTE);\n             }\n-            switch (c[pos.getIndex()]) {\n+            pos.setIndex(i + ESCAPED_QUOTE.length());\n+            lastHold = pos.getIndex();\n+            continue;\n+        }\n+\n+        switch (c[pos.getIndex()]) {\n             case QUOTE:\n                 next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n+\n+                if (appendTo != null) {\n+                    return appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n+                }\n+\n+                return null;\n             default:\n                 next(pos);\n-            }\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+\n+        if (pos.getIndex() - start >= MAX_QUOTED_LENGTH) {\n+            throw new IllegalArgumentException(\"Unbounded quoted string at position \" + start);\n+        }\n     }\n \n+    if (appendTo != null) {\n+        appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n+    }\n+    return appendTo;\n+}\n+\n     /**\n      * Consume quoted string only\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}