{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node functionNode = fnScope.getRootNode();\n\n    Preconditions.checkState(functionNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(functionNode);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(functionNode);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      boolean removedArgs = false;\n      for (Node param : argList.children()) {\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n          if (removedArgs) {\n            throw new IllegalStateException(\n                \"Unused parameters can only be removed from the end, \" +\n                \"since that preserves the function's arity.\\n\" +\n                \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n                \"Removed parameter: \" + param.toStringTree());\n          }\n          argList.removeChild(param);\n          removedArgs = true;\n          compiler.reportCodeChange();\n        } else if (removedArgs) {\n          throw new IllegalStateException(\n              \"Unused parameters can only be removed from the end, \" +\n              \"since that preserves the function's arity.\\n\" +\n              \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n              \"Tried to remove parameter: \" + param.toStringTree() +\n              \" which is not at the end of the list.\");\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..74932eb5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,59 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node functionNode = fnScope.getRootNode();\n+\n+    Preconditions.checkState(functionNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(functionNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(functionNode);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(functionNode);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      boolean removedArgs = false;\n+      for (Node param : argList.children()) {\n+        Var var = fnScope.getVar(param.getString());\n+        if (!referenced.contains(var)) {\n+          if (removedArgs) {\n+            throw new IllegalStateException(\n+                \"Unused parameters can only be removed from the end, \" +\n+                \"since that preserves the function's arity.\\n\" +\n+                \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n+                \"Removed parameter: \" + param.toStringTree());\n+          }\n+          argList.removeChild(param);\n+          removedArgs = true;\n+          compiler.reportCodeChange();\n+        } else if (removedArgs) {\n+          throw new IllegalStateException(\n+              \"Unused parameters can only be removed from the end, \" +\n+              \"since that preserves the function's arity.\\n\" +\n+              \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n+              \"Tried to remove parameter: \" + param.toStringTree() +\n+              \" which is not at the end of the list.\");\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}