{
    "patch": "protected final double doSolve() {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n\n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    // Keep finding better approximations.\n    while (true) {\n        // Calculate the new midpoint approximation.\n        double xm = 0.5 * (x0 + x1);\n        double fm = computeObjectiveValue(xm);\n\n        // If the new approximation is the exact root, return it.\n        if (fm == 0.0) {\n            return xm;\n        }\n\n        // At this point we know that xm is not equal to either x0 or x1,\n        // and that f0 and f1 have opposite signs.\n\n        // Check if the approximation is good enough.\n        double delta = fm > 0.0 ? x0 - xm : x1 - xm;\n        if (FastMath.abs(delta) <= FastMath.max(rtol * FastMath.abs(xm), atol)) {\n            return xm;\n        }\n\n        // We now have three distinct points, (x0, f0), (x1, f1), and (xm, fm).\n        // We will attempt to replace one of the endpoints, x0 or x1, with xm\n        // such that the bracketing condition is maintained.\n\n        // Check if the bracket is on the left side.\n        if (f0 * fm < 0.0) {\n            x1 = xm;\n            f1 = fm;\n            inverted = !inverted;\n        }\n        // Check if the bracket is on the right side.\n        else if (fm * f1 < 0.0) {\n            x0 = xm;\n            f0 = fm;\n            inverted = !inverted;\n        }\n        // If neither bracketing condition holds, we need to divide the interval\n        // by a factor of two and start again.\n        else {\n            final double oldDelta = delta;\n            delta = 0.5 * (x1 - x0);\n            xm = x0 + delta;\n            if (oldDelta * (x0 - xm) >= 0.0) {\n                x1 = xm;\n                f1 = computeObjectiveValue(x1);\n                inverted = !inverted;\n            } else {\n                x0 = xm;\n                f0 = computeObjectiveValue(x0);\n            }\n        }\n\n        // If the function value of the last approximation is too small,\n        // given the function value accuracy, then we can't get closer to\n        // the root than we already are.\n        if (FastMath.abs(fm) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return xm;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return xm;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return xm;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (fm <= 0.0) {\n                        return xm;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (fm >= 0.0) {\n                        return xm;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // If the current interval is within the given accuracies, we\n        // are satisfied with the current approximation.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(xm), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return xm;\n                case LEFT_SIDE:\n                    return inverted ? xm : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x1 : xm;\n                case BELOW_SIDE:\n                    return (fm <= 0.0) ? xm : x0;\n                case ABOVE_SIDE:\n                    return (fm >= 0.0) ? xm : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e258c68c6..dd2410fe3 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,126 +125,137 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() {\n+    // Get initial solution\n+    double x0 = getMin();\n+    double x1 = getMax();\n+    double f0 = computeObjectiveValue(x0);\n+    double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    // If one of the bounds is the exact root, return it.\n+    if (f0 == 0.0) {\n+        return x0;\n+    }\n+    if (f1 == 0.0) {\n+        return x1;\n+    }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Verify bracketing of initial solution.\n+    verifyBracketing(x0, x1);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Get accuracies.\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    final double rtol = getRelativeAccuracy();\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    // Keep track of inverted intervals, meaning that the left bound is\n+    // larger than the right bound.\n+    boolean inverted = false;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    // Keep finding better approximations.\n+    while (true) {\n+        // Calculate the new midpoint approximation.\n+        double xm = 0.5 * (x0 + x1);\n+        double fm = computeObjectiveValue(xm);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        // If the new approximation is the exact root, return it.\n+        if (fm == 0.0) {\n+            return xm;\n+        }\n+\n+        // At this point we know that xm is not equal to either x0 or x1,\n+        // and that f0 and f1 have opposite signs.\n+\n+        // Check if the approximation is good enough.\n+        double delta = fm > 0.0 ? x0 - xm : x1 - xm;\n+        if (FastMath.abs(delta) <= FastMath.max(rtol * FastMath.abs(xm), atol)) {\n+            return xm;\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n+        // We now have three distinct points, (x0, f0), (x1, f1), and (xm, fm).\n+        // We will attempt to replace one of the endpoints, x0 or x1, with xm\n+        // such that the bracketing condition is maintained.\n+\n+        // Check if the bracket is on the left side.\n+        if (f0 * fm < 0.0) {\n+            x1 = xm;\n+            f1 = fm;\n+            inverted = !inverted;\n+        }\n+        // Check if the bracket is on the right side.\n+        else if (fm * f1 < 0.0) {\n+            x0 = xm;\n+            f0 = fm;\n+            inverted = !inverted;\n+        }\n+        // If neither bracketing condition holds, we need to divide the interval\n+        // by a factor of two and start again.\n+        else {\n+            final double oldDelta = delta;\n+            delta = 0.5 * (x1 - x0);\n+            xm = x0 + delta;\n+            if (oldDelta * (x0 - xm) >= 0.0) {\n+                x1 = xm;\n+                f1 = computeObjectiveValue(x1);\n                 inverted = !inverted;\n             } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                        // Update formula cannot make any progress: Update the\n-                        // search interval.\n-                default:\n-                    // Should never happen.\n-                }\n+                x0 = xm;\n+                f0 = computeObjectiveValue(x0);\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        }\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n+        // If the function value of the last approximation is too small,\n+        // given the function value accuracy, then we can't get closer to\n+        // the root than we already are.\n+        if (FastMath.abs(fm) <= ftol) {\n+            switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return xm;\n                 case LEFT_SIDE:\n                     if (inverted) {\n-                        return x1;\n+                        return xm;\n                     }\n                     break;\n                 case RIGHT_SIDE:\n                     if (!inverted) {\n-                        return x1;\n+                        return xm;\n                     }\n                     break;\n                 case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n+                    if (fm <= 0.0) {\n+                        return xm;\n                     }\n                     break;\n                 case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n+                    if (fm >= 0.0) {\n+                        return xm;\n                     }\n                     break;\n                 default:\n                     throw new MathInternalError();\n-                }\n             }\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n+        // If the current interval is within the given accuracies, we\n+        // are satisfied with the current approximation.\n+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(xm), atol)) {\n+            switch (allowed) {\n                 case ANY_SIDE:\n-                    return x1;\n+                    return xm;\n                 case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n+                    return inverted ? xm : x0;\n                 case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n+                    return inverted ? x1 : xm;\n                 case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n+                    return (fm <= 0.0) ? xm : x0;\n                 case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n+                    return (fm >= 0.0) ? xm : x0;\n                 default:\n                     throw new MathInternalError();\n-                }\n             }\n         }\n     }\n+}\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}