{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance, MockCandidateFilter mockCandidateFilter) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n        if (candidate != null) {\n            field.setAccessible(true);\n            try {\n                field.set(fieldInstance, candidate);\n            } catch (IllegalArgumentException e) {\n                // Ignore exception if we cannot inject the candidate\n            } catch (IllegalAccessException e) {\n                // Ignore exception if we cannot inject the candidate\n            }\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..273feb518 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,22 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance, MockCandidateFilter mockCandidateFilter) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object candidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+        if (candidate != null) {\n+            field.setAccessible(true);\n+            try {\n+                field.set(fieldInstance, candidate);\n+            } catch (IllegalArgumentException e) {\n+                // Ignore exception if we cannot inject the candidate\n+            } catch (IllegalAccessException e) {\n+                // Ignore exception if we cannot inject the candidate\n+            }\n+            return;\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}