{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // if we get to here, we know that duplicate X values are not permitted\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        XYDataItem overwritten = (XYDataItem) existing.clone();\n        existing.setY(y);\n        fireSeriesChanged();\n        return overwritten;\n    } else {\n        if (this.autoSort) {\n            // insert the new item in the correct order using binary search\n            index = Math.abs(Collections.binarySearch(this.data, new XYDataItem(x, y), \n                                                        new Comparator<XYDataItem>() {\n                                                            public int compare(XYDataItem item1, XYDataItem item2) {\n                                                                if (item1.getX().doubleValue() == item2.getX().doubleValue()) {\n                                                                    return 0;\n                                                                } else if (item1.getX().doubleValue() < item2.getX().doubleValue()) {\n                                                                    return -1;\n                                                                } else {\n                                                                    return 1;\n                                                                }\n                                                            }\n                                                        })) - 1;\n        }\n        // now we know whether to insert at index or append to the end of the list\n        if (index >= 0 || !this.autoSort || index == this.data.size()) {\n            // if the series is not sorted or no duplicate X value is not permitted or X value not found in the list\n            // then add the new item to the end of the list\n            this.data.add(index, new XYDataItem(x, y));\n            fireSeriesChanged();\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n            return null;\n        } else {\n            // if the series is sorted and no duplicate X value is permitted and X value is found in the list\n            // then replace the existing item by the new item at the index found by binary search\n            this.data.set(index, new XYDataItem(x, y));\n            fireSeriesChanged();\n            return null;\n        }\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..6c925aa 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,55 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    int index = indexOf(x);\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        // if we get to here, we know that duplicate X values are not permitted\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        XYDataItem overwritten = (XYDataItem) existing.clone();\n+        existing.setY(y);\n+        fireSeriesChanged();\n+        return overwritten;\n+    } else {\n+        if (this.autoSort) {\n+            // insert the new item in the correct order using binary search\n+            index = Math.abs(Collections.binarySearch(this.data, new XYDataItem(x, y), \n+                                                        new Comparator<XYDataItem>() {\n+                                                            public int compare(XYDataItem item1, XYDataItem item2) {\n+                                                                if (item1.getX().doubleValue() == item2.getX().doubleValue()) {\n+                                                                    return 0;\n+                                                                } else if (item1.getX().doubleValue() < item2.getX().doubleValue()) {\n+                                                                    return -1;\n+                                                                } else {\n+                                                                    return 1;\n+                                                                }\n+                                                            }\n+                                                        })) - 1;\n+        }\n+        // now we know whether to insert at index or append to the end of the list\n+        if (index >= 0 || !this.autoSort || index == this.data.size()) {\n+            // if the series is not sorted or no duplicate X value is not permitted or X value not found in the list\n+            // then add the new item to the end of the list\n+            this.data.add(index, new XYDataItem(x, y));\n+            fireSeriesChanged();\n+            // check if this addition will exceed the maximum item count...\n+            if (getItemCount() > this.maximumItemCount) {\n+                this.data.remove(0);\n+            }\n+            return null;\n+        } else {\n+            // if the series is sorted and no duplicate X value is permitted and X value is found in the list\n+            // then replace the existing item by the new item at the index found by binary search\n+            this.data.set(index, new XYDataItem(x, y));\n+            fireSeriesChanged();\n+            return null;\n+        }\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}