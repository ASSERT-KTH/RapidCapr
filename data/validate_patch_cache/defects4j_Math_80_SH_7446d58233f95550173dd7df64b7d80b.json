{
    "patch": "private boolean flipIfWarranted(final int n, final int step) {\n    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n        // flip array\n        int j = 4 * (n - 1) + pingPong;\n        for (int i = 0; i < j; i += 4) {\n            for (int k = 0; k < 4; k += step) {\n                final double tmp = work[i + k];\n                work[i + k] = work[j - k];\n                work[j - k] = tmp;\n            }\n            j -= 4;\n        }\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..1e506875d 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,22 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+private boolean flipIfWarranted(final int n, final int step) {\n+    if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n+        // flip array\n+        int j = 4 * (n - 1) + pingPong;\n+        for (int i = 0; i < j; i += 4) {\n+            for (int k = 0; k < 4; k += step) {\n+                final double tmp = work[i + k];\n+                work[i + k] = work[j - k];\n+                work[j - k] = tmp;\n+            }\n+            j -= 4;\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}