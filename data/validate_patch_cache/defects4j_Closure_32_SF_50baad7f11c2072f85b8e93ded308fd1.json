{
    "patch": "private Compiler parse(String inputJs, String... inputExterns) {\n  CompilerOptions options = createCompilerOptions();\n  List<JSError> warnings = new ArrayList<>();\n  List<JSError> errors = new ArrayList<>();\n\n  options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC, CheckLevel.OFF);\n  options.setWarningLevel(DiagnosticGroups.UNUSED_LOCAL_VARIABLES, CheckLevel.OFF);\n\n  // This line is to enable the closure pass within the parser.\n  options.setLanguageIn(LanguageMode.ECMASCRIPT6);\n  options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n  options.setParseJsDocDocumentation(com.google.javascript.jscomp.parsing.Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE);\n\n  Compiler compiler = new Compiler();\n  compiler.disableThreads();\n\n  parse(compiler, options, warnings, errors, inputJs, inputExterns);\n\n  List<JSError> allErrors = new ArrayList<>();\n  allErrors.addAll(errors);\n  allErrors.addAll(warnings);\n\n  if (!warnings.isEmpty()) {\n    for (JSError warning : warnings) {\n      System.err.println(\"Warning: \" + warning);\n    }\n  }\n\n  if (!errors.isEmpty()) {\n    for (JSError error : errors) {\n      System.err.println(\"Error: \" + error);\n    }\n    throw new RuntimeException(\"Failed to parse input\");\n  }\n\n  return compiler;\n}\n\nprivate void parse(Compiler compiler, CompilerOptions options, List<JSError> warnings,\n                   List<JSError> errors, String inputJs, String[] inputExterns) {\n\n  CompilerOptions.Environment env = options.getEnvironment();\n  SourceFile externs = SourceFile.fromCode(\"externs.js\", \"\");\n  List<SourceFile> inputs = new ArrayList<>();\n\n  inputs.add(SourceFile.fromCode(\"input.js\", inputJs));\n\n  for (int i = 0; i < inputExterns.length; ++i) {\n    // Externs are known to start with the prefix \"externs/\". Strip it off.\n    inputs.add(SourceFile.fromFile(inputExterns[i], Charset.defaultCharset()));\n  }\n\n  ErrorStream oldErrorStream = null;\n  try {\n    oldErrorStream = new LoggerErrorStream(compiler.getLogger());\n    compiler.setErrorStream(oldErrorStream);\n    compiler.init(externs, inputs, options);\n    compiler.parseInputs();\n    if (env == CompilerOptions.Environment.BROWSER && options.shouldRewriteGlobalFunctionDeclarations) {\n      new GlobalNamespace(compiler).rewriteGlobalFunctions(\n          compiler.getTopScope(), compiler.getSynthesizedExternsInput());\n    }\n    // Run typechecking.\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS)) {\n      (new TypeCheck(compiler)).processForTesting();\n    }\n    System.err.flush();\n    System.out.flush();\n  } finally {\n    if (oldErrorStream != null) {\n      compiler.setErrorStream(System.err);\n    }\n  }\n\n  for (JSError error : compiler.getErrors()) {\n    errors.add(error);\n  }\n\n  for (JSError warning : compiler.getWarnings()) {\n    warnings.add(warning);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..c6fa677f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,88 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private Compiler parse(String inputJs, String... inputExterns) {\n+  CompilerOptions options = createCompilerOptions();\n+  List<JSError> warnings = new ArrayList<>();\n+  List<JSError> errors = new ArrayList<>();\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n-\n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n-\n-    // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n-\n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+  options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC, CheckLevel.OFF);\n+  options.setWarningLevel(DiagnosticGroups.UNUSED_LOCAL_VARIABLES, CheckLevel.OFF);\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n-\n-    boolean ignoreStar = false;\n-\n-    // Track the start of the line to count whitespace that\n-    // the tokenizer skipped. Because this case is rare, it's easier\n-    // to do this here than in the tokenizer.\n-\n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+  // This line is to enable the closure pass within the parser.\n+  options.setLanguageIn(LanguageMode.ECMASCRIPT6);\n+  options.setLanguageOut(LanguageMode.ECMASCRIPT5);\n+  options.setParseJsDocDocumentation(com.google.javascript.jscomp.parsing.Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE);\n \n-            builder.append('*');\n-          }\n+  Compiler compiler = new Compiler();\n+  compiler.disableThreads();\n \n-          token = next();\n-          continue;\n+  parse(compiler, options, warnings, errors, inputJs, inputExterns);\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+  List<JSError> allErrors = new ArrayList<>();\n+  allErrors.addAll(errors);\n+  allErrors.addAll(warnings);\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n+  if (!warnings.isEmpty()) {\n+    for (JSError warning : warnings) {\n+      System.err.println(\"Warning: \" + warning);\n+    }\n+  }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+  if (!errors.isEmpty()) {\n+    for (JSError error : errors) {\n+      System.err.println(\"Error: \" + error);\n+    }\n+    throw new RuntimeException(\"Failed to parse input\");\n+  }\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n+  return compiler;\n+}\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+private void parse(Compiler compiler, CompilerOptions options, List<JSError> warnings,\n+                   List<JSError> errors, String inputJs, String[] inputExterns) {\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+  CompilerOptions.Environment env = options.getEnvironment();\n+  SourceFile externs = SourceFile.fromCode(\"externs.js\", \"\");\n+  List<SourceFile> inputs = new ArrayList<>();\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+  inputs.add(SourceFile.fromCode(\"input.js\", inputJs));\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+  for (int i = 0; i < inputExterns.length; ++i) {\n+    // Externs are known to start with the prefix \"externs/\". Strip it off.\n+    inputs.add(SourceFile.fromFile(inputExterns[i], Charset.defaultCharset()));\n+  }\n \n-          line = stream.getRemainingJSDocLine();\n+  ErrorStream oldErrorStream = null;\n+  try {\n+    oldErrorStream = new LoggerErrorStream(compiler.getLogger());\n+    compiler.setErrorStream(oldErrorStream);\n+    compiler.init(externs, inputs, options);\n+    compiler.parseInputs();\n+    if (env == CompilerOptions.Environment.BROWSER && options.shouldRewriteGlobalFunctionDeclarations) {\n+      new GlobalNamespace(compiler).rewriteGlobalFunctions(\n+          compiler.getTopScope(), compiler.getSynthesizedExternsInput());\n+    }\n+    // Run typechecking.\n+    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS)) {\n+      (new TypeCheck(compiler)).processForTesting();\n+    }\n+    System.err.flush();\n+    System.out.flush();\n+  } finally {\n+    if (oldErrorStream != null) {\n+      compiler.setErrorStream(System.err);\n+    }\n+  }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+  for (JSError error : compiler.getErrors()) {\n+    errors.add(error);\n+  }\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+  for (JSError warning : compiler.getWarnings()) {\n+    warnings.add(warning);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}