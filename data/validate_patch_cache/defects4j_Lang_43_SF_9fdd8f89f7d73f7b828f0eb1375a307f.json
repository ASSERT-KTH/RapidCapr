{
    "patch": "public static boolean isAvailableLocale(Locale locale) {\n    return availableLocaleSet().contains(locale);\n}\n\nprivate static Set<Locale> availableLocaleSet;\n\nprivate static Set<Locale> availableLocaleSet() {\n    if (availableLocaleSet == null) {\n        Set<Locale> set = new HashSet<>();\n        Locale[] availableLocales = Locale.getAvailableLocales();\n        for (Locale locale : availableLocales) {\n            set.add(locale);\n        }\n        availableLocaleSet = set;\n    }\n    return availableLocaleSet;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..cf384c5e 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,23 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n-            }\n+public static boolean isAvailableLocale(Locale locale) {\n+    return availableLocaleSet().contains(locale);\n+}\n+\n+private static Set<Locale> availableLocaleSet;\n+\n+private static Set<Locale> availableLocaleSet() {\n+    if (availableLocaleSet == null) {\n+        Set<Locale> set = new HashSet<>();\n+        Locale[] availableLocales = Locale.getAvailableLocales();\n+        for (Locale locale : availableLocales) {\n+            set.add(locale);\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+        availableLocaleSet = set;\n     }\n+    return availableLocaleSet;\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "error: generics are not supported in -source 1.3",
    "test_result": "ERROR"
}