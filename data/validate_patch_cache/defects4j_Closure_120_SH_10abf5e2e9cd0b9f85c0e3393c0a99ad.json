{
    "patch": "        if (index < references.size() && index > 0) {\n          Reference maybeDecl = references.get(index - 1);\n          if (maybeDecl.isVarDeclaration()) {\n            Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n\n            // Only consider the initializing reference if it happens before\n            // the given index.\n            Reference maybeInit = getInitializingReference();\n            if (maybeInit != null && maybeInit.getIndex() >= index) {\n              maybeInit = null;\n            }\n\n            boolean seenOneAssignment = false;\n            for (int i = index; i < size; i++) {\n              Reference ref = references.get(i);\n              if (!ref.isDeclaration()) {\n                if (seenOneAssignment ||\n                    !ref.isSimpleAssignmentToName() ||\n                    !Objects.equals(ref.getNameNode(), maybeDecl.getNameNode())) {\n                  return false;\n                }\n                seenOneAssignment = true;\n              }\n            }\n\n            if (maybeInit != null) {\n              Node valueNode = maybeInit.getValueNode();\n              if (valueNode.getToken() == Token.FUNCTION) {\n                return false;\n              }\n              return !valueNode.hasChildren() || valueNode.getFirstChild().getToken() != Token.FUNCTION;\n            }\n            return seenOneAssignment;\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6e5a8c11 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,41 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (index < references.size() && index > 0) {\n+          Reference maybeDecl = references.get(index - 1);\n+          if (maybeDecl.isVarDeclaration()) {\n+            Preconditions.checkState(!maybeDecl.isInitializingDeclaration());\n+\n+            // Only consider the initializing reference if it happens before\n+            // the given index.\n+            Reference maybeInit = getInitializingReference();\n+            if (maybeInit != null && maybeInit.getIndex() >= index) {\n+              maybeInit = null;\n+            }\n+\n+            boolean seenOneAssignment = false;\n+            for (int i = index; i < size; i++) {\n+              Reference ref = references.get(i);\n+              if (!ref.isDeclaration()) {\n+                if (seenOneAssignment ||\n+                    !ref.isSimpleAssignmentToName() ||\n+                    !Objects.equals(ref.getNameNode(), maybeDecl.getNameNode())) {\n+                  return false;\n+                }\n+                seenOneAssignment = true;\n+              }\n+            }\n+\n+            if (maybeInit != null) {\n+              Node valueNode = maybeInit.getValueNode();\n+              if (valueNode.getToken() == Token.FUNCTION) {\n+                return false;\n+              }\n+              return !valueNode.hasChildren() || valueNode.getFirstChild().getToken() != Token.FUNCTION;\n+            }\n+            return seenOneAssignment;\n+          }\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}