{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n    final int size = getSize();\n    // check for special cases\n    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        Arrays.fill(result, resultOffset, resultOffset + size, Double.NaN);\n        return;\n    }\n    if (y[yOffset] == 0.0) {\n        if (x[xOffset] >= 0.0) {\n            Arrays.fill(result, resultOffset, resultOffset + size, 0.0);\n            return;\n        } else {\n            Arrays.fill(result, resultOffset, resultOffset + size, Math.copySign(FastMath.PI, y[yOffset]));\n            return;\n        }\n    }\n    if (x[xOffset] == 0.0) {\n        Arrays.fill(result, resultOffset, resultOffset + size, y[yOffset] > 0.0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n        return;\n    }\n    if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n        Arrays.fill(result, resultOffset, resultOffset + size, Math.copySign(FastMath.PI / 4.0, x[xOffset]));\n        return;\n    }\n\n    if (FastMath.abs(x[xOffset]) >= FastMath.abs(y[yOffset])) {\n        final double z = y[yOffset] / x[xOffset];\n        final double[] tmp = new double[getSize()];\n        addScalar(1, z * z, tmp, 0);  // 1 + z^2\n        final double r = FastMath.sqrt(mantissa(log(tmp, 0, tmp, 0), 0) * 2.0 + 1.0); // r = sqrt(1 + log^2(1 + z^2))\n        double atan = atan(newInstance(z * FastMath.sqrt(2.0) / (r + 1.0)), new Dfp(0.0));\n        if (x[xOffset] < 0.0) {\n            atan = ((y[yOffset] < 0.0) ? atan.subtract(FastMath.PI) : atan.add(FastMath.PI));\n        }\n        result[resultOffset] = atan.toDouble();\n    } else {\n        final double z = x[xOffset] / y[yOffset];\n        final double[] tmp = new double[getSize()];\n        addScalar(1, z * z, tmp, 0);  // 1 + z^2\n        final double r = FastMath.sqrt(mantissa(log(tmp, 0, tmp, 0), 0) * 2.0 + 1.0); // r = sqrt(1 + log^2(1 + z^2))\n        double atan = atan(newInstance(FastMath.sqrt(2.0) / (r + 1)), new Dfp(0.0)).multiply(0.5);\n        if (y[yOffset] < 0.0) {\n            atan = atan.negate();\n        }\n        result[resultOffset] = atan.toDouble();\n        if (x[xOffset] < 0.0) {\n            result[resultOffset] = ((y[yOffset] < 0.0) ? result[resultOffset] - FastMath.PI : result[resultOffset] + FastMath.PI);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..7474dda82 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,58 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n-\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+    final int size = getSize();\n+    // check for special cases\n+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        Arrays.fill(result, resultOffset, resultOffset + size, Double.NaN);\n+        return;\n+    }\n+    if (y[yOffset] == 0.0) {\n+        if (x[xOffset] >= 0.0) {\n+            Arrays.fill(result, resultOffset, resultOffset + size, 0.0);\n+            return;\n         } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n+            Arrays.fill(result, resultOffset, resultOffset + size, Math.copySign(FastMath.PI, y[yOffset]));\n+            return;\n         }\n+    }\n+    if (x[xOffset] == 0.0) {\n+        Arrays.fill(result, resultOffset, resultOffset + size, y[yOffset] > 0.0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+        return;\n+    }\n+    if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+        Arrays.fill(result, resultOffset, resultOffset + size, Math.copySign(FastMath.PI / 4.0, x[xOffset]));\n+        return;\n+    }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n+    if (FastMath.abs(x[xOffset]) >= FastMath.abs(y[yOffset])) {\n+        final double z = y[yOffset] / x[xOffset];\n+        final double[] tmp = new double[getSize()];\n+        addScalar(1, z * z, tmp, 0);  // 1 + z^2\n+        final double r = FastMath.sqrt(mantissa(log(tmp, 0, tmp, 0), 0) * 2.0 + 1.0); // r = sqrt(1 + log^2(1 + z^2))\n+        double atan = atan(newInstance(z * FastMath.sqrt(2.0) / (r + 1.0)), new Dfp(0.0));\n+        if (x[xOffset] < 0.0) {\n+            atan = ((y[yOffset] < 0.0) ? atan.subtract(FastMath.PI) : atan.add(FastMath.PI));\n+        }\n+        result[resultOffset] = atan.toDouble();\n+    } else {\n+        final double z = x[xOffset] / y[yOffset];\n+        final double[] tmp = new double[getSize()];\n+        addScalar(1, z * z, tmp, 0);  // 1 + z^2\n+        final double r = FastMath.sqrt(mantissa(log(tmp, 0, tmp, 0), 0) * 2.0 + 1.0); // r = sqrt(1 + log^2(1 + z^2))\n+        double atan = atan(newInstance(FastMath.sqrt(2.0) / (r + 1)), new Dfp(0.0)).multiply(0.5);\n+        if (y[yOffset] < 0.0) {\n+            atan = atan.negate();\n+        }\n+        result[resultOffset] = atan.toDouble();\n+        if (x[xOffset] < 0.0) {\n+            result[resultOffset] = ((y[yOffset] < 0.0) ? result[resultOffset] - FastMath.PI : result[resultOffset] + FastMath.PI);\n+        }\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}