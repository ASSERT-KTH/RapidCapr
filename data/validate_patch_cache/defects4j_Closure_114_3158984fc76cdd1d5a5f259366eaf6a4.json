{
    "patch": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        // If the parent is a CALL node, record the dependency scope\n        // for the RHS of the assignment before calling recordDepScope to\n        // handle arguments of the CALL node. This ensures that the LHS\n        // of the assignment is handled correctly.\n        boolean isCall = parent.isCall() && parent.getLastChild() == n;\n        Node valueNode = n.getLastChild();\n        if (isCall) {\n          recordDepScope(valueNode, createNameInformation(t, valueNode));\n        }\n        // If the parent is a FOR loop and the assignment is part of the init\n        // expression, handle the scope differently.\n        if (parent.isFor() && parent.getFirstChild() == n) {\n          recordDepScope(nameNode, ns);\n        } else {\n          recordDepScope(recordNode, ns);\n          // If the parent is a CALL node, handle the arguments separately.\n          if (isCall) {\n            for (Node argNode = valueNode.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n              recordDepScope(argNode, createNameInformation(t, argNode));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..9eb95ffa 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -554,35 +554,32 @@ final class NameAnalyzer implements CompilerPass {\n           break;\n       }\n     }\n-\n     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n       Node nameNode = n.getFirstChild();\n       Node parent = n.getParent();\n       NameInformation ns = createNameInformation(t, nameNode);\n       if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n+        // If the parent is a CALL node, record the dependency scope\n+        // for the RHS of the assignment before calling recordDepScope to\n+        // handle arguments of the CALL node. This ensures that the LHS\n+        // of the assignment is handled correctly.\n+        boolean isCall = parent.isCall() && parent.getLastChild() == n;\n+        Node valueNode = n.getLastChild();\n+        if (isCall) {\n+          recordDepScope(valueNode, createNameInformation(t, valueNode));\n+        }\n+        // If the parent is a FOR loop and the assignment is part of the init\n+        // expression, handle the scope differently.\n+        if (parent.isFor() && parent.getFirstChild() == n) {\n+          recordDepScope(nameNode, ns);\n         } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n           recordDepScope(recordNode, ns);\n+          // If the parent is a CALL node, handle the arguments separately.\n+          if (isCall) {\n+            for (Node argNode = valueNode.getFirstChild(); argNode != null; argNode = argNode.getNext()) {\n+              recordDepScope(argNode, createNameInformation(t, argNode));\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}