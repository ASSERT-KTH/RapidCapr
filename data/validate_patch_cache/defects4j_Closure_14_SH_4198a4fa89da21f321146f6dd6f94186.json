{
    "patch": "            if (cfa != null) {\n              List<Node> nextNodes = cfa.getOrderedBlocksForNode(finallyNode);\n              if (!nextNodes.isEmpty()) {\n                Node follow = computeFollowNode(fromNode, nextNodes.get(0), cfa);\n                if (follow != null) {\n                  cfa.createEdge(finallyNode, Branch.UNCOND, follow);\n                }\n              }\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..52fef092 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            if (cfa != null) {\n+              List<Node> nextNodes = cfa.getOrderedBlocksForNode(finallyNode);\n+              if (!nextNodes.isEmpty()) {\n+                Node follow = computeFollowNode(fromNode, nextNodes.get(0), cfa);\n+                if (follow != null) {\n+                  cfa.createEdge(finallyNode, Branch.UNCOND, follow);\n+                }\n+              }\n+            }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}