{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n\n        int pos = 0;\n        int len = Character.codePointCount(input, 0, input.length());\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                int codePoint = Character.codePointAt(input, pos);\n                char[] c = Character.toChars(codePoint);\n                out.write(c);\n                pos += Character.charCount(codePoint);\n            } else {\n                pos += consumed;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..df2b2b7b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -79,27 +79,19 @@ public abstract class CharSequenceTranslator {\n         if (input == null) {\n             return;\n         }\n+\n         int pos = 0;\n         int len = Character.codePointCount(input, 0, input.length());\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+                int codePoint = Character.codePointAt(input, pos);\n+                char[] c = Character.toChars(codePoint);\n                 out.write(c);\n+                pos += Character.charCount(codePoint);\n+            } else {\n+                pos += consumed;\n             }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n-            }\n-            pos++;\n         }\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<\ud842\udfb7[A]> but was:<\ud842\udfb7[]>",
    "test_result": "FAIL"
}