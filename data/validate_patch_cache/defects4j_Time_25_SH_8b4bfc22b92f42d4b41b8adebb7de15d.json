{
    "patch": "                // if the estimation is inaccurate, correct it by searching for the correct offset\n                if (offsetLocal != offsetAdjusted) {\n                    int diff = offsetLocal - offsetAdjusted < 0 ? -1 : 1;\n                    long searchInstant = instantLocal;\n                    while (true) {\n                        int offset = getOffset(searchInstant);\n                        if (offset == offsetLocal) {\n                            return offsetLocal;\n                        }\n                        if (offset == offsetAdjusted) {\n                            return offsetAdjusted;\n                        }\n                        diff = offset < offsetLocal ? 1 : -1;\n                        searchInstant += diff * (60000L * 30); // add/subtract 30 minutes\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3aaab393 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if the estimation is inaccurate, correct it by searching for the correct offset\n+                if (offsetLocal != offsetAdjusted) {\n+                    int diff = offsetLocal - offsetAdjusted < 0 ? -1 : 1;\n+                    long searchInstant = instantLocal;\n+                    while (true) {\n+                        int offset = getOffset(searchInstant);\n+                        if (offset == offsetLocal) {\n+                            return offsetLocal;\n+                        }\n+                        if (offset == offsetAdjusted) {\n+                            return offsetAdjusted;\n+                        }\n+                        diff = offset < offsetLocal ? 1 : -1;\n+                        searchInstant += diff * (60000L * 30); // add/subtract 30 minutes\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}