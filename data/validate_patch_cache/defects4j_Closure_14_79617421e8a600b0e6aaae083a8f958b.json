{
    "patch": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // Handle Reach.And and Branch.ON_EX edges\n    if (fromNode != null && ControlFlowGraph.isBranch(fromNode)) {\n      if (ControlFlowGraph.isExceptionEdge(fromNode) || cfg.outEdges(fromNode).contains(\n          new DiGraphEdge<>(fromNode, node, Branch.ON_EX))) {\n        return computeExceptionThrow(node);\n      }\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n        // The follow() of any of the path from IF would be what follows IF.\n        case Token.IF:\n            return computeFollowNode(fromNode, parent, cfa);\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n            // After the body of a CASE, the control goes to the body of the next\n            // case, without having to go to the case condition.\n            Node next = parent.getNext();\n            Node sibling = getFirstChildSkippingEmptyBlocks(next);\n            return computeFollowNode(fromNode, sibling, cfa);\n        case Token.FOR:\n            if (NodeUtil.isForIn(parent)) {\n                return parent;\n            } else {\n                return parent.getFirstChild().getNext().getNext();\n            }\n        case Token.WHILE:\n        case Token.DO:\n            return parent;\n        case Token.TRY:\n            // If we are coming out of the TRY block...\n            if (parent.getFirstChild() == node) {\n                if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n                    return computeFallThrough(parent.getLastChild());\n                } else { // and have no FINALLY.\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n                // CATCH block.\n            } else if (NodeUtil.getCatchBlock(parent) == node) {\n                if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n                    return computeFallThrough(node.getNext());\n                } else {\n                    return computeFollowNode(fromNode, parent, cfa);\n                }\n                // If we are coming out of the FINALLY block...\n            } else if (parent.getLastChild() == node) {\n                if (cfa != null) {\n                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                    }\n                }\n                return computeFollowNode(fromNode, parent, cfa);\n            }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function or block.\n\n    Node nextSibling = getFirstNonChildFunctionBlock(parent, node.getNext());\n\n    if (nextSibling != null) {\n        return computeFallThrough(nextSibling);\n    } else {\n        // If there are no more siblings, control is transferred up the AST.\n        return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n\n  /**\n   * Get the first non-child node that is non-function and is non-empty.\n   *\n   * @param parent the node's parent.\n   * @param child the current child.\n   * @return the first non-child node that is non-function and is non-empty.\n   */\n  private static Node getFirstNonChildFunctionBlock(Node parent, Node child) {\n    boolean seen = false;\n\n    while (child != null && (child.isFunction() || (child.isEmpty() && !seen))) {\n      if (!child.isEmpty()) {\n        seen = true;\n      }\n      child = child.getNext();\n    }\n\n    return child;\n  }\n\n  /**\n   * Get the first child of a node, skipping empty blocks.\n   *\n   * @param node the node to get th",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..0a5d8120 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -710,84 +710,103 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n      * This will make life easier for DFAs.\n      */\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.root)) {\n       return null;\n     }\n \n+    // Handle Reach.And and Branch.ON_EX edges\n+    if (fromNode != null && ControlFlowGraph.isBranch(fromNode)) {\n+      if (ControlFlowGraph.isExceptionEdge(fromNode) || cfg.outEdges(fromNode).contains(\n+          new DiGraphEdge<>(fromNode, node, Branch.ON_EX))) {\n+        return computeExceptionThrow(node);\n+      }\n+    }\n+\n     // If we are just before a IF/WHILE/DO/FOR:\n     switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n-          } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n-          }\n-        } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n-        break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n-          return parent;\n-        } else {\n-          return parent.getFirstChild().getNext().getNext();\n-        }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n+        // The follow() of any of the path from IF would be what follows IF.\n+        case Token.IF:\n             return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+        case Token.CASE:\n+        case Token.DEFAULT_CASE:\n+            // After the body of a CASE, the control goes to the body of the next\n+            // case, without having to go to the case condition.\n+            Node next = parent.getNext();\n+            Node sibling = getFirstChildSkippingEmptyBlocks(next);\n+            return computeFollowNode(fromNode, sibling, cfa);\n+        case Token.FOR:\n+            if (NodeUtil.isForIn(parent)) {\n+                return parent;\n+            } else {\n+                return parent.getFirstChild().getNext().getNext();\n+            }\n+        case Token.WHILE:\n+        case Token.DO:\n+            return parent;\n+        case Token.TRY:\n+            // If we are coming out of the TRY block...\n+            if (parent.getFirstChild() == node) {\n+                if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+                    return computeFallThrough(parent.getLastChild());\n+                } else { // and have no FINALLY.\n+                    return computeFollowNode(fromNode, parent, cfa);\n+                }\n+                // CATCH block.\n+            } else if (NodeUtil.getCatchBlock(parent) == node) {\n+                if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+                    return computeFallThrough(node.getNext());\n+                } else {\n+                    return computeFollowNode(fromNode, parent, cfa);\n+                }\n+                // If we are coming out of the FINALLY block...\n+            } else if (parent.getLastChild() == node) {\n+                if (cfa != null) {\n+                    for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                    }\n+                }\n+                return computeFollowNode(fromNode, parent, cfa);\n             }\n-          }\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n     }\n \n     // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n+    // immediate sibling, unless its sibling is a function or block.\n \n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n-    }\n+    Node nextSibling = getFirstNonChildFunctionBlock(parent, node.getNext());\n \n     if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+        return computeFallThrough(nextSibling);\n     } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+        // If there are no more siblings, control is transferred up the AST.\n+        return computeFollowNode(fromNode, parent, cfa);\n     }\n   }\n \n+  /**\n+   * Get the first non-child node that is non-function and is non-empty.\n+   *\n+   * @param parent the node's parent.\n+   * @param child the current child.\n+   * @return the first non-child node that is non-function and is non-empty.\n+   */\n+  private static Node getFirstNonChildFunctionBlock(Node parent, Node child) {\n+    boolean seen = false;\n+\n+    while (child != null && (child.isFunction() || (child.isEmpty() && !seen))) {\n+      if (!child.isEmpty()) {\n+        seen = true;\n+      }\n+      child = child.getNext();\n+    }\n+\n+    return child;\n+  }\n+\n+  /**\n+   * Get the first child of a node, skipping empty blocks.\n+   *\n+   * @param node the node to get th\n+\n   /**\n    * Computes the destination node of n when we want to fallthrough into the\n    * subtree of n. We don't always create a CFG edge into n itself because of",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}