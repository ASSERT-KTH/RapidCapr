{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    BasicBlock block = getBlock(cfgNode);\n    if (block == null) {\n      return false;\n    }\n    List<Node> nonJumps = block.getNonJumpingCfgNodes();\n    if (!nonJumps.isEmpty()) {\n      Node last = nonJumps.get(nonJumps.size() - 1);\n      return !(last.isExprResult() && isTryFinallyOrCatch(last.getFirstChild()));\n    }\n    if (block.getJumps().size() == 1) {\n      return isTryFinallyOrCatch(block.getFirstChild());\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..07fb618c 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,21 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    BasicBlock block = getBlock(cfgNode);\n+    if (block == null) {\n+      return false;\n+    }\n+    List<Node> nonJumps = block.getNonJumpingCfgNodes();\n+    if (!nonJumps.isEmpty()) {\n+      Node last = nonJumps.get(nonJumps.size() - 1);\n+      return !(last.isExprResult() && isTryFinallyOrCatch(last.getFirstChild()));\n+    }\n+    if (block.getJumps().size() == 1) {\n+      return isTryFinallyOrCatch(block.getFirstChild());\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}