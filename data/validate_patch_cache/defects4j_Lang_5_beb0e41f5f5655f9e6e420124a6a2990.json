{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (str.startsWith(\"_\")) {\n        int underscores = countUnderscores(str);\n        if (underscores < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        // Underscore followed by language only (e.g. \"_en\")\n        return new Locale(\"\", str.substring(1));\n    }\n\n    final String[] parts = str.split(\"_\", -1);\n\n    switch (parts.length) {\n        case 1:\n            // Language only (e.g. \"en\")\n            return new Locale(parts[0]);\n        case 2:\n            // Language and country (e.g. \"en_US\")\n            if (parts[1].length() > 2) {\n                // Additional underscores in country segment with variant (e.g. \"en_GB_P\")\n                int underscores = countUnderscores(parts[1]);\n                if (underscores > 0) {\n                    String[] countryWithVariant = parts[1].split(\"_\", -1);\n                    return new Locale(parts[0], countryWithVariant[0], countryWithVariant[1]);\n                }\n            }\n\n            return new Locale(parts[0], parts[1]);\n        case 3:\n            // Language, country, and variant (e.g. \"en_US_POSIX\")\n            return new Locale(parts[0], parts[1], parts[2]);\n        default:\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n}\n\nprivate static int countUnderscores(final String str) {\n    int count = 0;\n    for (int i = 0; i < str.length(); i++) {\n        if (str.charAt(i) == '_') {\n            count++;\n        }\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..2503af03 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,56 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (str.startsWith(\"_\")) {\n+        int underscores = countUnderscores(str);\n+        if (underscores < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+        // Underscore followed by language only (e.g. \"_en\")\n+        return new Locale(\"\", str.substring(1));\n+    }\n+\n+    final String[] parts = str.split(\"_\", -1);\n+\n+    switch (parts.length) {\n+        case 1:\n+            // Language only (e.g. \"en\")\n+            return new Locale(parts[0]);\n+        case 2:\n+            // Language and country (e.g. \"en_US\")\n+            if (parts[1].length() > 2) {\n+                // Additional underscores in country segment with variant (e.g. \"en_GB_P\")\n+                int underscores = countUnderscores(parts[1]);\n+                if (underscores > 0) {\n+                    String[] countryWithVariant = parts[1].split(\"_\", -1);\n+                    return new Locale(parts[0], countryWithVariant[0], countryWithVariant[1]);\n+                }\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+\n+            return new Locale(parts[0], parts[1]);\n+        case 3:\n+            // Language, country, and variant (e.g. \"en_US_POSIX\")\n+            return new Locale(parts[0], parts[1], parts[2]);\n+        default:\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n+}\n+\n+private static int countUnderscores(final String str) {\n+    int count = 0;\n+    for (int i = 0; i < str.length(); i++) {\n+        if (str.charAt(i) == '_') {\n+            count++;\n+        }\n+    }\n+    return count;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}