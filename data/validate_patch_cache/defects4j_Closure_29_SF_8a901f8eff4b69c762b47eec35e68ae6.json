{
    "patch": "private boolean isInlinableObject(List<Reference> refs) {\n    outer:\n    for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            // A call target maybe using the object as a 'this' value.\n            if (gramps.isCall()\n                    && gramps.getFirstChild() == parent) {\n                continue;\n            }\n\n            // NOTE(nicksantos): This pass's object-splitting algorithm has\n            // a blind spot. It assumes that if a property isn't defined on an\n            // object, then the value is undefined. This is not true, because\n            // Object.prototype can have arbitrary properties on it.\n            //\n            // We short-circuit this problem by bailing out if we see a reference\n            // to a property that isn't defined on the object literal. This\n            // isn't a perfect algorithm, but it should catch most cases.\n            continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n            continue;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n            // A var with no assignment.\n            continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n            continue;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n            if (child.isGetterDef() ||\n                    child.isSetterDef()) {\n                // ES5 get/set not supported.\n                continue outer;\n            }\n\n\n            Node childVal = child.getFirstChild();\n            // Check if childVal is the parent of any of the passed in\n            // references, as that is how self-referential assignments\n            // will happen.\n            for (Reference t : refs) {\n                Node refNode = t.getParent();\n                while (!NodeUtil.isStatementBlock(refNode)) {\n                    if (refNode == childVal) {\n                        // There's a self-referential assignment\n                        continue outer;\n                    }\n                    refNode = refNode.getParent();\n                }\n            }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..f7a600a2 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,9 +152,9 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n+private boolean isInlinableObject(List<Reference> refs) {\n+    outer:\n+    for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n@@ -163,38 +163,38 @@ class InlineObjectLiterals implements CompilerPass {\n         // the function referenced by y might reference 'this').\n         //\n         if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n+            Preconditions.checkState(parent.getFirstChild() == name);\n+            // A call target maybe using the object as a 'this' value.\n+            if (gramps.isCall()\n+                    && gramps.getFirstChild() == parent) {\n+                continue;\n+            }\n \n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n+            // NOTE(nicksantos): This pass's object-splitting algorithm has\n+            // a blind spot. It assumes that if a property isn't defined on an\n+            // object, then the value is undefined. This is not true, because\n+            // Object.prototype can have arbitrary properties on it.\n+            //\n+            // We short-circuit this problem by bailing out if we see a reference\n+            // to a property that isn't defined on the object literal. This\n+            // isn't a perfect algorithm, but it should catch most cases.\n+            continue;\n         }\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+            continue;\n         }\n \n         Node val = ref.getAssignedValue();\n         if (val == null) {\n-          // A var with no assignment.\n-          continue;\n+            // A var with no assignment.\n+            continue;\n         }\n \n         // We're looking for object literal assignments only.\n         if (!val.isObjectLit()) {\n-          return false;\n+            continue;\n         }\n \n         // Make sure that the value is not self-refential. IOW,\n@@ -207,37 +207,36 @@ class InlineObjectLiterals implements CompilerPass {\n         // Also, ES5 getters/setters aren't handled by this pass.\n         for (Node child = val.getFirstChild(); child != null;\n              child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n+            if (child.isGetterDef() ||\n+                    child.isSetterDef()) {\n+                // ES5 get/set not supported.\n+                continue outer;\n+            }\n \n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n+            Node childVal = child.getFirstChild();\n+            // Check if childVal is the parent of any of the passed in\n+            // references, as that is how self-referential assignments\n+            // will happen.\n+            for (Reference t : refs) {\n+                Node refNode = t.getParent();\n+                while (!NodeUtil.isStatementBlock(refNode)) {\n+                    if (refNode == childVal) {\n+                        // There's a self-referential assignment\n+                        continue outer;\n+                    }\n+                    refNode = refNode.getParent();\n+                }\n             }\n-          }\n         }\n \n-\n         // We have found an acceptable object literal assignment. As\n         // long as there are no other assignments that mess things up,\n         // we can inline.\n-        ret = true;\n-      }\n-      return ret;\n+        return true;\n     }\n+    return false;\n+}\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}