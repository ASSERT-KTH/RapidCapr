{
    "patch": "import com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.jstype.FunctionType;\nimport com.google.javascript.rhino.jstype.JSType;\n\nimport java.util.Iterator;\n\npublic class MyProgram {\n\n  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      parameter = parameters.next();\n      if (!arguments.hasNext()) { // Check for var_args\n        checkForVarArgs(call, functionType, arguments);\n        break;\n      }\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n\n  private void checkForVarArgs(Node call, FunctionType functionType, Iterator<Node> arguments) {\n    if (functionType.isVarArgs()) {\n      while (arguments.hasNext()) {\n        Node argument = arguments.next();\n        validator.expectArgumentMatchesParameter(null, argument,\n            getJSType(argument), functionType.getVarArgsArrayType(), call, -1);\n      }\n    }\n  }\n\n  private JSType getJSType(Node node) {\n    // Implementation details not provided\n    return null;\n  }\n\n  private void report(NodeTraversal t, Node n, String warning, Object... arguments) {\n    // Implementation details not provided\n  }\n\n  private static final String WRONG_ARGUMENT_COUNT = \"JSC_WRONG_ARGUMENT_COUNT\";\n\n  private Validator validator;\n\n  // Inner classes not provided\n}\n\nclass Validator {\n  public void expectArgumentMatchesParameter(NodeTraversal t, Node argument, JSType argumentType, JSType parameterType, Node call, int ordinal) {\n    // Implementation details not provided\n  }\n\n  public String getReadableJSTypeName(Node n, boolean expandObjects) {\n    // Implementation details not provided\n    return \"\";\n  }\n} ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..371408d2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n+\n+import java.util.Iterator;\n+\n+public class MyProgram {\n+\n+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,11 +1413,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    while (parameters.hasNext()) {\n+      parameter = parameters.next();\n+      if (!arguments.hasNext()) { // Check for var_args\n+        checkForVarArgs(call, functionType, arguments);\n+        break;\n+      }\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1429,6 +1438,43 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     }\n   }\n \n+  private void checkForVarArgs(Node call, FunctionType functionType, Iterator<Node> arguments) {\n+    if (functionType.isVarArgs()) {\n+      while (arguments.hasNext()) {\n+        Node argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(null, argument,\n+            getJSType(argument), functionType.getVarArgsArrayType(), call, -1);\n+      }\n+    }\n+  }\n+\n+  private JSType getJSType(Node node) {\n+    // Implementation details not provided\n+    return null;\n+  }\n+\n+  private void report(NodeTraversal t, Node n, String warning, Object... arguments) {\n+    // Implementation details not provided\n+  }\n+\n+  private static final String WRONG_ARGUMENT_COUNT = \"JSC_WRONG_ARGUMENT_COUNT\";\n+\n+  private Validator validator;\n+\n+  // Inner classes not provided\n+}\n+\n+class Validator {\n+  public void expectArgumentMatchesParameter(NodeTraversal t, Node argument, JSType argumentType, JSType parameterType, Node call, int ordinal) {\n+    // Implementation details not provided\n+  }\n+\n+  public String getReadableJSTypeName(Node n, boolean expandObjects) {\n+    // Implementation details not provided\n+    return \"\";\n+  }\n+} \n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}