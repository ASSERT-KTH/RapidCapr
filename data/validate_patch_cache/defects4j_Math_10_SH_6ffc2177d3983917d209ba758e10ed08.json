{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        result[resultOffset] = Double.NaN;\n    } else if (x[xOffset] == 0.0 && y[yOffset] > 0.0) {\n        result[resultOffset] = FastMath.PI / 2;\n    } else if (x[xOffset] == 0.0 && y[yOffset] < 0.0) {\n        result[resultOffset] = -FastMath.PI / 2;\n    } else if (x[xOffset] > 0.0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((y[yOffset] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..415a47f7b 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,33 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n+        result[resultOffset] = Double.NaN;\n+    } else if (x[xOffset] == 0.0 && y[yOffset] > 0.0) {\n+        result[resultOffset] = FastMath.PI / 2;\n+    } else if (x[xOffset] == 0.0 && y[yOffset] < 0.0) {\n+        result[resultOffset] = -FastMath.PI / 2;\n+    } else if (x[xOffset] > 0.0) {\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n+    } else {\n+        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+        result[resultOffset] =\n+                ((y[yOffset] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+        }\n+    }\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}