{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n    FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  List<Node> parameters = functionType.getParameters();\n  List<Node> formals = parameters.subList(0, Math.min(arguments.hasNext() ?\n      parameters.size() : functionType.getMinArguments(),\n      parameters.size()));\n\n  int numArgs = call.getChildCount() - 1;\n  if (numArgs < functionType.getMinArguments()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n        functionType.getMaxArguments() != Integer.MAX_VALUE ?\n            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    return;\n  }\n  if (numArgs > functionType.getMaxArguments()) {\n    report(t, call, WRONG_ARGUMENT_COUNT,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(numArgs), String.valueOf(functionType.getMaxArguments()),\n        \"\");\n    return;\n  }\n\n  ListIterator<Node> parameterIterator = formals.listIterator();\n  Node parameter;\n  Node argument;\n\n  while (arguments.hasNext()) {\n    argument = arguments.next();\n    parameter = parameterIterator.next();\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call,\n        parameterIterator.previousIndex() + 1);\n  }\n\n  // Handle default values.\n  while (parameterIterator.hasNext()) {\n    parameter = parameterIterator.next();\n    if (parameter.hasChildren()) {\n      Node defaultValue = parameter.getLastChild();\n      validator.expectArgumentMatchesParameter(t, defaultValue, null,\n          getJSType(defaultValue), call, parameterIterator.previousIndex() + 1);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..4d8eee62 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+private void visitParameterList(NodeTraversal t, Node call,\n+    FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  List<Node> parameters = functionType.getParameters();\n+  List<Node> formals = parameters.subList(0, Math.min(arguments.hasNext() ?\n+      parameters.size() : functionType.getMinArguments(),\n+      parameters.size()));\n+\n+  int numArgs = call.getChildCount() - 1;\n+  if (numArgs < functionType.getMinArguments()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(functionType.getMinArguments()),\n+        functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+            \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+    return;\n+  }\n+  if (numArgs > functionType.getMaxArguments()) {\n+    report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(numArgs), String.valueOf(functionType.getMaxArguments()),\n+        \"\");\n+    return;\n+  }\n+\n+  ListIterator<Node> parameterIterator = formals.listIterator();\n+  Node parameter;\n+  Node argument;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+  while (arguments.hasNext()) {\n+    argument = arguments.next();\n+    parameter = parameterIterator.next();\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call,\n+        parameterIterator.previousIndex() + 1);\n+  }\n+\n+  // Handle default values.\n+  while (parameterIterator.hasNext()) {\n+    parameter = parameterIterator.next();\n+    if (parameter.hasChildren()) {\n+      Node defaultValue = parameter.getLastChild();\n+      validator.expectArgumentMatchesParameter(t, defaultValue, null,\n+          getJSType(defaultValue), call, parameterIterator.previousIndex() + 1);\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}