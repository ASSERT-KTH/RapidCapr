{
    "patch": "      if (functionType.hasInstanceType() && !functionJSDocInfo.isConstructor()) {\n        JSType returnType = functionType.getInstanceType().getReturnTypeOfMethod(\"call\");\n        if (!returnType.isSubtypeOf(getJSType(n.getFirstChild().getNext()).restrictByNotNullOrUndefined())) {\n          report(t, n, TYPE_MISMATCH, returnType.toString(), childType.toString());\n          ensureTyped(t, n);\n          return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..e13a2bc2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.hasInstanceType() && !functionJSDocInfo.isConstructor()) {\n+        JSType returnType = functionType.getInstanceType().getReturnTypeOfMethod(\"call\");\n+        if (!returnType.isSubtypeOf(getJSType(n.getFirstChild().getNext()).restrictByNotNullOrUndefined())) {\n+          report(t, n, TYPE_MISMATCH, returnType.toString(), childType.toString());\n+          ensureTyped(t, n);\n+          return;\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}