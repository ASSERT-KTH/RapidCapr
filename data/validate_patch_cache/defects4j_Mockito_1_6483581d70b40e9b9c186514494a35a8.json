{
    "patch": "            List<Object> varArgsList = new ArrayList<Object>();\n            Object[] rawArguments = invocation.getRawArguments();\n\n            for (int i = 0; i < indexOfVararg; i++) {\n                captureArgumentFromMatcher(i, rawArguments[i]);\n            }\n\n            Object varArgsObj = rawArguments[indexOfVararg];\n            int varArgsLen = Array.getLength(varArgsObj);\n            for(int i = 0; i < varArgsLen; i++) {\n                varArgsList.add(Array.get(varArgsObj, i));\n            }\n\n            if (varArgsLen == 0) {\n                captureArgumentFromMatcher(indexOfVararg, null);\n            } else {\n                for (int i = 0; i < varArgsList.size(); i++) {\n                    captureArgumentFromMatcher(indexOfVararg, varArgsList.toArray()[i]);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..538d2c681 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            List<Object> varArgsList = new ArrayList<Object>();\n+            Object[] rawArguments = invocation.getRawArguments();\n+\n+            for (int i = 0; i < indexOfVararg; i++) {\n+                captureArgumentFromMatcher(i, rawArguments[i]);\n+            }\n+\n+            Object varArgsObj = rawArguments[indexOfVararg];\n+            int varArgsLen = Array.getLength(varArgsObj);\n+            for(int i = 0; i < varArgsLen; i++) {\n+                varArgsList.add(Array.get(varArgsObj, i));\n+            }\n+\n+            if (varArgsLen == 0) {\n+                captureArgumentFromMatcher(indexOfVararg, null);\n+            } else {\n+                for (int i = 0; i < varArgsList.size(); i++) {\n+                    captureArgumentFromMatcher(indexOfVararg, varArgsList.toArray()[i]);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}