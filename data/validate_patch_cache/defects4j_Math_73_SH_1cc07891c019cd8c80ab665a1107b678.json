{
    "patch": "        // catch cases where min/max bracket the root directly, or if the initial guess is infinite or NaN, otherwise\n        // proceed with full Brent algorithm\n        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || Double.isNaN(yInitial) || Double.isInfinite(yInitia",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..40a18a594 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,9 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // catch cases where min/max bracket the root directly, or if the initial guess is infinite or NaN, otherwise\n+        // proceed with full Brent algorithm\n+        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || Double.isNaN(yInitial) || Double.isInfinite(yInitia\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}