{
    "patch": "    protected double getInitialDomain(double p) {\n        double d = getDenominatorDegreesOfFreedom();\n        if (Double.isNaN(d) || Double.isInfinite(d) || d <= 2.0) {\n            return 0.0;\n        } else {\n            return d / (d - 2.0);\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..432350b47 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -141,11 +141,12 @@ public class FDistributionImpl\n      * @return initial domain value\n      */\n     protected double getInitialDomain(double p) {\n-        double ret;\n         double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+        if (Double.isNaN(d) || Double.isInfinite(d) || d <= 2.0) {\n+            return 0.0;\n+        } else {\n+            return d / (d - 2.0);\n+        }\n     }\n     \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}