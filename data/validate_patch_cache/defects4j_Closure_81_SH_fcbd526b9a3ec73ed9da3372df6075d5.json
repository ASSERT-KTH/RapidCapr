{
    "patch": "private Node getNodeWithName(AstNode node, int type, String name) {\n  for (AstNode child : node) {\n    if (child.getType() == type && ((Name)child).getIdentifier().equals(name)) {\n      return transform(child);\n    }\n    Node result = getNodeWithName(child, type, name);\n    if (result != null) {\n      return result;\n    }\n  }\n  return null;\n}\n\n@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n    name.setLineno(functionNode.getLineno());\n  }\n\n  Node node = new Node(Token.FUNCTION);\n  node.addChildToBack(transform(name));\n\n  if (isUnnamedFunction) {\n    Node lp = new Node(Token.LP);\n    lp.setLineno(name.getLineno());\n    node.addChildToBack(lp);\n  } else {\n    Node lp = getNodeWithName(functionNode, Token.LP, \"(\", /* recurse */ false);\n    if (lp == null) {\n      throw new RuntimeException(\"Left Parenthesis not found.\");\n    }\n    node.addChildToBack(transform(lp));\n  }\n\n  for (AstNode param : functionNode.getParams()) {\n    node.getFirstChild().addChildToBack(transform(param));\n  }\n\n  node.addChildToBack(transform(functionNode.getBody()));\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..48f62602 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,52 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private Node getNodeWithName(AstNode node, int type, String name) {\n+  for (AstNode child : node) {\n+    if (child.getType() == type && ((Name)child).getIdentifier().equals(name)) {\n+      return transform(child);\n+    }\n+    Node result = getNodeWithName(child, type, name);\n+    if (result != null) {\n+      return result;\n+    }\n+  }\n+  return null;\n+}\n+\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Name name = functionNode.getFunctionName();\n+  boolean isUnnamedFunction = false;\n+  if (name == null) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+    isUnnamedFunction = true;\n+    name.setLineno(functionNode.getLineno());\n+  }\n+\n+  Node node = new Node(Token.FUNCTION);\n+  node.addChildToBack(transform(name));\n+\n+  if (isUnnamedFunction) {\n+    Node lp = new Node(Token.LP);\n+    lp.setLineno(name.getLineno());\n+    node.addChildToBack(lp);\n+  } else {\n+    Node lp = getNodeWithName(functionNode, Token.LP, \"(\", /* recurse */ false);\n+    if (lp == null) {\n+      throw new RuntimeException(\"Left Parenthesis not found.\");\n+    }\n+    node.addChildToBack(transform(lp));\n+  }\n+\n+  for (AstNode param : functionNode.getParams()) {\n+    node.getFirstChild().addChildToBack(transform(param));\n+  }\n+\n+  node.addChildToBack(transform(functionNode.getBody()));\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}