{
    "patch": "// Check if the access is used in a GETPROP.\n// This allows access to array methods without causing this error.\nif (parent.getType() == Token.GETPROP && parent.getFirstChild() == n) {\n  return n;\n}\n\n// Check if the access is used as an assignment target\n// or as the right side of a compound assignment.\nif (NodeUtil.isLValue(n) || NodeUtil.isCompoundAssignmentOp(parent.getLastChild())) {\n  return n;\n}\n\n// Check if the access is used as a parameter to ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..b7a42bf1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the access is used in a GETPROP.\n+// This allows access to array methods without causing this error.\n+if (parent.getType() == Token.GETPROP && parent.getFirstChild() == n) {\n+  return n;\n+}\n+\n+// Check if the access is used as an assignment target\n+// or as the right side of a compound assignment.\n+if (NodeUtil.isLValue(n) || NodeUtil.isCompoundAssignmentOp(parent.getLastChild())) {\n+  return n;\n+}\n+\n+// Check if the access is used as a parameter to \n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}