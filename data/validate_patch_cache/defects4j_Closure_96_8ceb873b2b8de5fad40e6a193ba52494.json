{
    "patch": "   private void visitParameterList(NodeTraversal t, Node call, \n                                   FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    int numParams = parameters.size();\n    int numArgs = call.getChildCount() - 1;\n\n    if (numArgs < functionType.getMinArguments() ||\n        numParams < numArgs ||\n        functionType.hasJrest() && numParams > numArgs + 1) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs),\n          functionType.getParameterString(),\n          functionType.getJrest() != null ? \"and no more than \"\n              + functionType.getJrest().getParameterCount()\n              + \"rest parameter(s)\" : \"\");\n    }\n\n    int ordinal = 0;\n    for (Node parameter : parameters) {\n      ordinal++;\n      if (!arguments.hasNext()) {\n        break;  // Skip missing parameters, they are verified above.\n      }\n      Node argument = arguments.next();\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..06687659 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,37 +1396,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+   private void visitParameterList(NodeTraversal t, Node call, \n+                                   FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n+    List<Node> parameters = functionType.getParameters();\n+    int numParams = parameters.size();\n+    int numArgs = call.getChildCount() - 1;\n+\n+    if (numArgs < functionType.getMinArguments() ||\n+        numParams < numArgs ||\n+        functionType.hasJrest() && numParams > numArgs + 1) {\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs),\n+          functionType.getParameterString(),\n+          functionType.getJrest() != null ? \"and no more than \"\n+              + functionType.getJrest().getParameterCount()\n+              + \"rest parameter(s)\" : \"\");\n+    }\n+\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n+    for (Node parameter : parameters) {\n       ordinal++;\n-\n+      if (!arguments.hasNext()) {\n+        break;  // Skip missing parameters, they are verified above.\n+      }\n+      Node argument = arguments.next();\n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-\n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n-    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}