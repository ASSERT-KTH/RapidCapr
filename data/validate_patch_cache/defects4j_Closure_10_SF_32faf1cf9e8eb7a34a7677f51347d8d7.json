{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allChildrenMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }\n\n  private static boolean allChildrenMatch(Node n, Predicate<Node> predicate) {\n    for (Node child : n.children()) {\n      if (!predicate.apply(child)) {\n        return false;\n      }\n      if (!allChildrenMatch(child, predicate)) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..afe75bcf 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,15 +1411,26 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return allChildrenMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n   }\n \n+  private static boolean allChildrenMatch(Node n, Predicate<Node> predicate) {\n+    for (Node child : n.children()) {\n+      if (!predicate.apply(child)) {\n+        return false;\n+      }\n+      if (!allChildrenMatch(child, predicate)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !n.isNull();",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}