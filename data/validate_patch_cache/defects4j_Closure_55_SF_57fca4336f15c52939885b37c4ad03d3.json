{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  if (n.isCall() && n.getFirstChild().isQualifiedName()) {\n    Node lastChild = n.getLastChild();\n    if (lastChild.isFunction()) {\n      // Check if function body is a block statement\n      return NodeUtil.getFunctionBody(lastChild).isBlock();\n    } else if (lastChild.isQualifiedName()) {\n      // Check if last child is a function name that has been hoisted into the call node\n      Node fnNode = lastChild.getFunctionNode();\n      return fnNode != null && NodeUtil.getFunctionBody(fnNode).isBlock();\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..fd340f48 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,26 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (n == null) {\n+    return false;\n+  }\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    return true;\n   }\n+  if (n.isCall() && n.getFirstChild().isQualifiedName()) {\n+    Node lastChild = n.getLastChild();\n+    if (lastChild.isFunction()) {\n+      // Check if function body is a block statement\n+      return NodeUtil.getFunctionBody(lastChild).isBlock();\n+    } else if (lastChild.isQualifiedName()) {\n+      // Check if last child is a function name that has been hoisted into the call node\n+      Node fnNode = lastChild.getFunctionNode();\n+      return fnNode != null && NodeUtil.getFunctionBody(fnNode).isBlock();\n+    }\n+  }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}