{
    "patch": "public class TransformDispatcher extends IRFactory.TransformDispatcher {\n\n  private final SourceFile sourceFile;\n  private final ErrorReporter errorReporter;\n  private final CompilerOptions options;\n  private final List<Comment> comments;\n\n  public TransformDispatcher(\n      Scope scope,\n      SourceFile sourceFile,\n      ErrorReporter errorReporter,\n      CompilerOptions options,\n      List<Comment> comments) {\n    super(scope);\n    this.sourceFile = sourceFile;\n    this.errorReporter = errorReporter;\n    this.options = options;\n    this.comments = comments;\n  }\n\n  @Override\n  Node processFunctionCall(FunctionCall callNode) {\n    Node node = newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n    for (AstNode child : callNode.getArguments()) {\n      node.addChildToBack(transform(child));\n    }\n\n    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n    node.setLineno(callNode.getLineno());\n    node.setCharno(position2charno(leftParamPos));\n    return node;\n  }\n\n  @Override\n  Node createName(String name) {\n    Node node = super.createName(name);\n    if (comments != null) {\n      for (Comment comment : comments) {\n        if (comment.getJsDocNode() != null) {\n          maybeSetJsDocInfo(node, comment.getJsDocNode());\n        }\n      }\n    }\n    return node;\n  }\n\n  private Node maybeSetJsDocInfo(Node node, JsDocInfo info) {\n    if (info.getParameterCount() > 0) {\n      List<String> types = Lists.newArrayList();\n\n      for (int i = 0; i < info.getParameterCount(); ++i) {\n        JSDocInfo.ParameterType parameterType = info.getParameterType(i);\n        if (parameterType != null) {\n          String paramString = parameterType.toAnnotationString();\n          if (paramString != null) {\n            types.add(paramTypeToName(paramString));\n          }\n        } else {\n          types.add(\"?\");\n        }\n      }\n      node.setJsDocInfo(new JSDocInfoBuilder(true)\n          .recordParameters(types).build(node.getStaticSourceFile()));\n    }\n\n    String returnType = info.getReturnType().toAnnotationString();\n    if (returnType != null) {\n      node.getQualifiedName();\n      node.setJsDocInfo(new JSDocInfoBuilder(true)\n          .recordReturnType(paramTypeToName(returnType)).build(node.getStaticSourceFile()));\n    }\n    return node;\n  }\n\n  private String paramTypeToName(String paramType) {\n    if (\"null\".equals(paramType)) {\n      return \"null\";\n    }\n    if (\"undefined\".equals(paramType)) {\n      return \"undefined\";\n    }\n    if (paramType.startsWith(\"function(\") || paramType.startsWith(\"(\")) {\n      return \"function\";\n    }\n\n    String[] parts = paramType.split(\"\\\\|\");\n    if (parts.length > 1) {\n      Set<String> names = new HashSet<String>();\n      for (String part : parts) {\n        names.add(paramTypeToName(part));\n      }\n      return Joiner.on(\"|\").join(names);\n    }\n\n    String baseType = null;\n    if (paramType.endsWith(\"[]\")) {\n      paramType = paramType.substring(0, paramType.length() - 2);\n      baseType = \"Array\";\n    }\n    if (paramType.startsWith(\"!\")) {\n      paramType = paramType.substring(1);\n    }\n    if (\"number\".equals(paramType)) {\n      return \"number\";\n    }\n    if (\"string\".equals(paramType)) {\n      return \"string\";\n    }\n    if (\"boolean\".equals(paramType)) {\n      return \"boolean\";\n    }\n\n    String simpleName = extractSimpleName(paramType);\n    if (baseType != null) {\n      return baseType + \"<\" + simpleName + \">\";\n    }\n    return simpleName;\n  }\n\n  private String extractSimpleName(String paramType) {\n    int lastDot = paramType.lastIndexOf('.');\n    return paramType.substring(lastDot + 1);\n  }\n\n  private Node newNode(Token type) {\n    return new Node(type);\n  }\n\n  private Node newNode(Token type, String value) {\n    Node node = newNode(type);\n    node.setString(value);\n    node.setLineno(0);\n    node.setCharno(0);\n    return node;\n  }\n\n  private Node newNode(Token type, Node first) {\n    Node node = newNode(type);\n    node.addChildToBack(first);\n    node.setLineno(0);\n    node.setCharno(0);\n    return node;\n  }\n\n  private Node newNode(Token type, Node first, Node second) {\n    Node node = newNode(type, first);\n    node.addChildToBack(second);\n    node.setLineno(0);\n    node.setCharno(0);\n    return node;\n  }\n\n  private Node newNode(Token type, int position, String value) {\n    Node node = new Node(type, position, value);\n    node.setLineno(0);\n    node.setCharno(0);\n    return node;\n  }\n\n  private String getTokenName(int tt) {\n    return Token.name(tt);\n  }\n\n  private Token transformTokenType(int type) {\n    return Token.valueOf(getTokenName(type));\n  }\n\n  private int position2charno(int pos) {\n    return new CharPreciselyStream(sourceFile.getCode()).getLineStartOffset(\n        CharPreciselyStream.getPositionBefore(pos)) + 1;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9522fe96 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,182 +384,178 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+public class TransformDispatcher extends IRFactory.TransformDispatcher {\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+  private final SourceFile sourceFile;\n+  private final ErrorReporter errorReporter;\n+  private final CompilerOptions options;\n+  private final List<Comment> comments;\n+\n+  public TransformDispatcher(\n+      Scope scope,\n+      SourceFile sourceFile,\n+      ErrorReporter errorReporter,\n+      CompilerOptions options,\n+      List<Comment> comments) {\n+    super(scope);\n+    this.sourceFile = sourceFile;\n+    this.errorReporter = errorReporter;\n+    this.options = options;\n+    this.comments = comments;\n+  }\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  @Override\n+  Node processFunctionCall(FunctionCall callNode) {\n+    Node node = newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n+    for (AstNode child : callNode.getArguments()) {\n+      node.addChildToBack(transform(child));\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n+    node.setLineno(callNode.getLineno());\n+    node.setCharno(position2charno(leftParamPos));\n+    return node;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  @Override\n+  Node createName(String name) {\n+    Node node = super.createName(name);\n+    if (comments != null) {\n+      for (Comment comment : comments) {\n+        if (comment.getJsDocNode() != null) {\n+          maybeSetJsDocInfo(node, comment.getJsDocNode());\n+        }\n       }\n-      return node;\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+  private Node maybeSetJsDocInfo(Node node, JsDocInfo info) {\n+    if (info.getParameterCount() > 0) {\n+      List<String> types = Lists.newArrayList();\n+\n+      for (int i = 0; i < info.getParameterCount(); ++i) {\n+        JSDocInfo.ParameterType parameterType = info.getParameterType(i);\n+        if (parameterType != null) {\n+          String paramString = parameterType.toAnnotationString();\n+          if (paramString != null) {\n+            types.add(paramTypeToName(paramString));\n+          }\n+        } else {\n+          types.add(\"?\");\n+        }\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n+      node.setJsDocInfo(new JSDocInfoBuilder(true)\n+          .recordParameters(types).build(node.getStaticSourceFile()));\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    String returnType = info.getReturnType().toAnnotationString();\n+    if (returnType != null) {\n+      node.getQualifiedName();\n+      node.setJsDocInfo(new JSDocInfoBuilder(true)\n+          .recordReturnType(paramTypeToName(returnType)).build(node.getStaticSourceFile()));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  private String paramTypeToName(String paramType) {\n+    if (\"null\".equals(paramType)) {\n+      return \"null\";\n     }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    if (\"undefined\".equals(paramType)) {\n+      return \"undefined\";\n     }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+    if (paramType.startsWith(\"function(\") || paramType.startsWith(\"(\")) {\n+      return \"function\";\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    String[] parts = paramType.split(\"\\\\|\");\n+    if (parts.length > 1) {\n+      Set<String> names = new HashSet<String>();\n+      for (String part : parts) {\n+        names.add(paramTypeToName(part));\n+      }\n+      return Joiner.on(\"|\").join(names);\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    String baseType = null;\n+    if (paramType.endsWith(\"[]\")) {\n+      paramType = paramType.substring(0, paramType.length() - 2);\n+      baseType = \"Array\";\n     }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    if (paramType.startsWith(\"!\")) {\n+      paramType = paramType.substring(1);\n+    }\n+    if (\"number\".equals(paramType)) {\n+      return \"number\";\n+    }\n+    if (\"string\".equals(paramType)) {\n+      return \"string\";\n+    }\n+    if (\"boolean\".equals(paramType)) {\n+      return \"boolean\";\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    String simpleName = extractSimpleName(paramType);\n+    if (baseType != null) {\n+      return baseType + \"<\" + simpleName + \">\";\n     }\n+    return simpleName;\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  private String extractSimpleName(String paramType) {\n+    int lastDot = paramType.lastIndexOf('.');\n+    return paramType.substring(lastDot + 1);\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n+  private Node newNode(Token type) {\n+    return new Node(type);\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  private Node newNode(Token type, String value) {\n+    Node node = newNode(type);\n+    node.setString(value);\n+    node.setLineno(0);\n+    node.setCharno(0);\n+    return node;\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  private Node newNode(Token type, Node first) {\n+    Node node = newNode(type);\n+    node.addChildToBack(first);\n+    node.setLineno(0);\n+    node.setCharno(0);\n+    return node;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  private Node newNode(Token type, Node first, Node second) {\n+    Node node = newNode(type, first);\n+    node.addChildToBack(second);\n+    node.setLineno(0);\n+    node.setCharno(0);\n+    return node;\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+  private Node newNode(Token type, int position, String value) {\n+    Node node = new Node(type, position, value);\n+    node.setLineno(0);\n+    node.setCharno(0);\n+    return node;\n+  }\n+\n+  private String getTokenName(int tt) {\n+    return Token.name(tt);\n+  }\n+\n+  private Token transformTokenType(int type) {\n+    return Token.valueOf(getTokenName(type));\n+  }\n+\n+  private int position2charno(int pos) {\n+    return new CharPreciselyStream(sourceFile.getCode()).getLineStartOffset(\n+        CharPreciselyStream.getPositionBefore(pos)) + 1;\n+  }\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}