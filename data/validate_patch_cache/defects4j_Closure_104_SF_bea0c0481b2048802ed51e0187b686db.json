{
    "patch": "  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public JSType greatestSubtype(JSType other) {\n    if (equals(other)) {\n      return this;\n    } else if (other.isBottom() || other.isUnknown()) {\n      return other;\n    } else if (other.isUnionType()) {\n      TypePair pair = computeGreatestSubtypeHelper(other);\n      if (pair != null) {\n        return pair.type;\n      }\n    } else if (alternates.contains(other)) {\n      return other;\n    }\n    LargestValueTypeBuilder builder = new LargestValueTypeBuilder(getCommonTypes());\n    addUnknownsToBuilder(builder);\n    if (isTop()) {\n      builder.addAlternate(this);\n    } else {\n      for (JSType otherAlternate :\n          other.isUnionType()\n          ? ((UnionType) other).getAlternates()\n          : ImmutableList.of(other)) {\n        if (otherAlternate.isBottom()) {\n        \tcontinue;\n        } else if (otherAlternate.isTop()) {\n          builder = new LargestValueTypeBuilder(getCommonTypes());\n          builder.addAlternate(otherAlternate);\n          builder.addAlternate(this);\n          return builder.build();\n        } else {\n          boolean added = false;\n          for (JSType alternate : alternates) {\n            JSType t = alternate.greatestSubtype(otherAlternate);\n            if (!t.isBottom()) {\n              builder.addAlternate(t);\n              added = true;\n            }\n          }\n          if (!added) {\n            // The otherAlternate is unrelated to all our alternates. Neither its\n            // greatest subtype nor ours is a subtype of the other, so we add them both.\n            builder.addAlternate(this);\n            builder.addAlternate(otherAlternate);\n          }\n        }\n      }\n    }\n    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && other.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }\n\n  @Override\n  public JSType leastSupertype(JSType that) {\n    if (equals(that)) {\n      return this;\n    } else if (that.isUnknown() || that.isBottom()) {\n      return this;\n    } else if (that.isUnionType()) {\n      return that.leastSupertype(this);\n    }\n    SmallestValueTypeBuilder builder = new SmallestValueTypeBuilder(getCommonTypes());\n    addUnknownsToBuilder(builder);\n    if (containsObjectType()) {\n      builder.addAlternate(that.getObjectType());\n    }\n    if (containsNull()) {\n      builder.addAlternate(getNativeType(NULL_TYPE));\n    }\n    if (that.isTop()) {\n      builder.addAlternate(getNativeType(UNKNOWN_TYPE));\n    } else {\n      for (JSType alternate : alternates) {\n        builder.addAlternate(alternate.leastSupertype(that));\n      }\n    }\n    return builder.build();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..83d1767f 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,24 +279,6 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n   /**\n    * Two union types are equal if they have the same number of alternates\n    * and all alternates are equal.\n@@ -331,6 +313,94 @@ public class UnionType extends JSType {\n     return true;\n   }\n \n+  @Override\n+  public JSType greatestSubtype(JSType other) {\n+    if (equals(other)) {\n+      return this;\n+    } else if (other.isBottom() || other.isUnknown()) {\n+      return other;\n+    } else if (other.isUnionType()) {\n+      TypePair pair = computeGreatestSubtypeHelper(other);\n+      if (pair != null) {\n+        return pair.type;\n+      }\n+    } else if (alternates.contains(other)) {\n+      return other;\n+    }\n+    LargestValueTypeBuilder builder = new LargestValueTypeBuilder(getCommonTypes());\n+    addUnknownsToBuilder(builder);\n+    if (isTop()) {\n+      builder.addAlternate(this);\n+    } else {\n+      for (JSType otherAlternate :\n+          other.isUnionType()\n+          ? ((UnionType) other).getAlternates()\n+          : ImmutableList.of(other)) {\n+        if (otherAlternate.isBottom()) {\n+        \tcontinue;\n+        } else if (otherAlternate.isTop()) {\n+          builder = new LargestValueTypeBuilder(getCommonTypes());\n+          builder.addAlternate(otherAlternate);\n+          builder.addAlternate(this);\n+          return builder.build();\n+        } else {\n+          boolean added = false;\n+          for (JSType alternate : alternates) {\n+            JSType t = alternate.greatestSubtype(otherAlternate);\n+            if (!t.isBottom()) {\n+              builder.addAlternate(t);\n+              added = true;\n+            }\n+          }\n+          if (!added) {\n+            // The otherAlternate is unrelated to all our alternates. Neither its\n+            // greatest subtype nor ours is a subtype of the other, so we add them both.\n+            builder.addAlternate(this);\n+            builder.addAlternate(otherAlternate);\n+          }\n+        }\n+      }\n+    }\n+    JSType result = builder.build();\n+    if (result != null) {\n+      return result;\n+    } else if (this.isObject() && other.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n+\n+  @Override\n+  public JSType leastSupertype(JSType that) {\n+    if (equals(that)) {\n+      return this;\n+    } else if (that.isUnknown() || that.isBottom()) {\n+      return this;\n+    } else if (that.isUnionType()) {\n+      return that.leastSupertype(this);\n+    }\n+    SmallestValueTypeBuilder builder = new SmallestValueTypeBuilder(getCommonTypes());\n+    addUnknownsToBuilder(builder);\n+    if (containsObjectType()) {\n+      builder.addAlternate(that.getObjectType());\n+    }\n+    if (containsNull()) {\n+      builder.addAlternate(getNativeType(NULL_TYPE));\n+    }\n+    if (that.isTop()) {\n+      builder.addAlternate(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+      for (JSType alternate : alternates) {\n+        builder.addAlternate(alternate.leastSupertype(that));\n+      }\n+    }\n+    return builder.build();\n+  }\n+    }\n+    return true;\n+  }\n+\n   /**\n    * A {@link UnionType} contains a given type (alternate) iff the member\n    * vector contains it.  Since the {@link #equals} method above conforms to",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}