{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // check for NaN and special cases\n        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n            for (int i = 0; i < getSize(); i++) {\n                result[resultOffset + i] = Double.NaN;\n            }\n            return;\n        } else if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n            for (int i = 0; i < getSize(); i++) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        } else if (x[xOffset] == 0.0) {\n            result[resultOffset] = y[yOffset] > 0 ? Math.PI/2 : -Math.PI/2;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        } else if (y[yOffset] == 0.0) {\n            result[resultOffset] = x[xOffset] > 0 ? 0.0 : Math.PI;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n            result[resultOffset] = y[yOffset] > 0 ? Math.PI/2 : -Math.PI/2;\n            for (int i = 1; i < getSize(); ++i) {\n                result[resultOffset + i] = 0;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        // Compute approximately atan(y/x)\n        double[] alpha = new double[2];\n        divide(y, yOffset, x, xOffset, alpha, 0);\n        atan(alpha, 0, alpha, 0);\n\n        if (x[xOffset] < 0) {\n            if (y[yOffset] < 0) {\n                result[resultOffset] = alpha[0] - Math.PI;\n                result[resultOffset + 1] = alpha[1];\n            } else {\n                result[resultOffset] = alpha[0] + Math.PI;\n                result[resultOffset + 1] = alpha[1];\n            }\n        } else {\n            result[resultOffset] = alpha[0];\n            result[resultOffset + 1] = alpha[1];\n        }\n\n        for (int i = 2; i < getSize(); ++i) {\n            result[resultOffset + i] = 0.0;\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..f99818817 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1383,6 +1383,37 @@ public class DSCompiler {\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n+        // check for NaN and special cases\n+        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+            for (int i = 0; i < getSize(); i++) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+            return;\n+        } else if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n+            for (int i = 0; i < getSize(); i++) {\n+                result[resultOffset + i] = 0.0;\n+            }\n+            return;\n+        } else if (x[xOffset] == 0.0) {\n+            result[resultOffset] = y[yOffset] > 0 ? Math.PI/2 : -Math.PI/2;\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        } else if (y[yOffset] == 0.0) {\n+            result[resultOffset] = x[xOffset] > 0 ? 0.0 : Math.PI;\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        } else if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n+            result[resultOffset] = y[yOffset] > 0 ? Math.PI/2 : -Math.PI/2;\n+            for (int i = 1; i < getSize(); ++i) {\n+                result[resultOffset + i] = 0;\n+            }\n+            return;\n+        }\n+\n         // compute r = sqrt(x^2+y^2)\n         double[] tmp1 = new double[getSize()];\n         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n@@ -1391,31 +1422,27 @@ public class DSCompiler {\n         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n \n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        // Compute approximately atan(y/x)\n+        double[] alpha = new double[2];\n+        divide(y, yOffset, x, xOffset, alpha, 0);\n+        atan(alpha, 0, alpha, 0);\n+\n+        if (x[xOffset] < 0) {\n+            if (y[yOffset] < 0) {\n+                result[resultOffset] = alpha[0] - Math.PI;\n+                result[resultOffset + 1] = alpha[1];\n+            } else {\n+                result[resultOffset] = alpha[0] + Math.PI;\n+                result[resultOffset + 1] = alpha[1];\n             }\n-\n         } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n+            result[resultOffset] = alpha[0];\n+            result[resultOffset + 1] = alpha[1];\n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        for (int i = 2; i < getSize(); ++i) {\n+            result[resultOffset + i] = 0.0;\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}