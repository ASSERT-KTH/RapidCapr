{
    "patch": "      if (NodeUtil.isFunctionCall(n) && NodeUtil.isGet(first)) {\n        Node propNode = first.getNext();\n\n        if (propNode == null || !propNode.isString()) {\n          return;\n        }\n\n        String propName = propNode.getString();\n        Var var = getScope().getVar(propName);\n        if (var != null && var.getInitialValue() == null) {\n          // If the property of the call is a global variable and doesn't\n          // have any prior assignments in the scope, mark it as a free\n          // call.\n          n.putBooleanProp(Node.FREE_CALL, true);\n        }\n      } else if (!NodeUtil.isGet(first)) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..38310569 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,24 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      if (NodeUtil.isFunctionCall(n) && NodeUtil.isGet(first)) {\n+        Node propNode = first.getNext();\n+\n+        if (propNode == null || !propNode.isString()) {\n+          return;\n+        }\n+\n+        String propName = propNode.getString();\n+        Var var = getScope().getVar(propName);\n+        if (var != null && var.getInitialValue() == null) {\n+          // If the property of the call is a global variable and doesn't\n+          // have any prior assignments in the scope, mark it as a free\n+          // call.\n+          n.putBooleanProp(Node.FREE_CALL, true);\n+        }\n+      } else if (!NodeUtil.isGet(first)) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}