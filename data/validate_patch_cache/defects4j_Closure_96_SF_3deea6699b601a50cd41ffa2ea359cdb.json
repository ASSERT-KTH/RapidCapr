{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      if (!arguments.hasNext()) {\n        parameter = parameters.next();\n        if (!functionType.isVarArgs()) {\n          // The number of formal parameters is greater than the number of\n          // actual arguments.\n          validator.tooFewArguments(\n              t, call, functionType.getMinArguments(), call.getChildCount() - 1);\n          return;\n        } else {\n          // There are no more arguments to match. Varargs parameters are\n          // optional, so this function call is ok.\n          return;\n        }\n      }\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter),\n          call, ordinal);\n    }\n\n    if (arguments.hasNext() && !functionType.isVarArgs()) {\n      // The number of actual arguments is greater than the number of\n      // formal parameters.\n      int numArgs = call.getChildCount() - 1;\n      int maxArgs = functionType.getMaxArguments();\n      validator.tooManyArguments(t, call, maxArgs, numArgs);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..19bb733e 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,8 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n+  private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n@@ -1405,27 +1404,35 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n+      if (!arguments.hasNext()) {\n         parameter = parameters.next();\n+        if (!functionType.isVarArgs()) {\n+          // The number of formal parameters is greater than the number of\n+          // actual arguments.\n+          validator.tooFewArguments(\n+              t, call, functionType.getMinArguments(), call.getChildCount() - 1);\n+          return;\n+        } else {\n+          // There are no more arguments to match. Varargs parameters are\n+          // optional, so this function call is ok.\n+          return;\n+        }\n+      }\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter),\n+          call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    if (arguments.hasNext() && !functionType.isVarArgs()) {\n+      // The number of actual arguments is greater than the number of\n+      // formal parameters.\n+      int numArgs = call.getChildCount() - 1;\n+      int maxArgs = functionType.getMaxArguments();\n+      validator.tooManyArguments(t, call, maxArgs, numArgs);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}