{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  // Don't traverse functions that are constructors or have the @this\n  // or @override annotation.\n  if (n.isFunction()) {\n    JSDocInfo jsdoc = n.getJSDocInfo();\n    if (jsdoc != null &&\n        (jsdoc.isConstructor() ||\n         jsdoc.isInterface() ||\n         jsdoc.isOverride())) {\n      return false;\n    }\n  }\n\n  // Only traverse function if it has an @this annotation or would be\n  // able to have one. Functions can have a this annotation if they are\n  // methods, are called through apply/call or if they're not closures.\n  if (n.isFunction()) {\n    JSDocInfo jsdoc = n.getJSDocInfo();\n    if (jsdoc == null) {\n      boolean validThisFunction = false;\n      if (n.getParent().isAssign()) {\n        Node assign = n.getParent();\n        Node lValue = assign.getFirstChild();\n        if (lValue.isString()) {\n          validThisFunction = true;\n        }\n      } else if (NodeUtil.isPrototypeProperty(n.getParent())) {\n        validThisFunction = true;\n      }\n      if (!validThisFunction) {\n        return false;\n      }\n    }\n  }\n\n  // Don't traverse functions that are getting lent to a prototype.\n  if (parent != null && parent.isAssign() && parent.getFirstChild().isGetProp()) {\n    Node getProp = parent.getFirstChild();\n    if (getProp.getLastChild().getString().equals(\"prototype\")) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e03e9d4c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,72 +79,52 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  // Don't traverse functions that are constructors or have the @this\n+  // or @override annotation.\n+  if (n.isFunction()) {\n+    JSDocInfo jsdoc = n.getJSDocInfo();\n+    if (jsdoc != null &&\n+        (jsdoc.isConstructor() ||\n+         jsdoc.isInterface() ||\n+         jsdoc.isOverride())) {\n+      return false;\n+    }\n+  }\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n+  // Only traverse function if it has an @this annotation or would be\n+  // able to have one. Functions can have a this annotation if they are\n+  // methods, are called through apply/call or if they're not closures.\n+  if (n.isFunction()) {\n+    JSDocInfo jsdoc = n.getJSDocInfo();\n+    if (jsdoc == null) {\n+      boolean validThisFunction = false;\n+      if (n.getParent().isAssign()) {\n+        Node assign = n.getParent();\n+        Node lValue = assign.getFirstChild();\n+        if (lValue.isString()) {\n+          validThisFunction = true;\n+        }\n+      } else if (NodeUtil.isPrototypeProperty(n.getParent())) {\n+        validThisFunction = true;\n       }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!validThisFunction) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-        }\n-      }\n+  // Don't traverse functions that are getting lent to a prototype.\n+  if (parent != null && parent.isAssign() && parent.getFirstChild().isGetProp()) {\n+    Node getProp = parent.getFirstChild();\n+    if (getProp.getLastChild().getString().equals(\"prototype\")) {\n+      return false;\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}