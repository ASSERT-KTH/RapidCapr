{
    "patch": "if (!flags.translationsFile.isEmpty()) {\n  try {\n    options.messageBundle = new XtbMessageBundle(\n        new FileInputStream(flags.translationsFile),\n        flags.translationsProject);\n  } catch (IOException e) {\n    throw new RuntimeException(\"Reading XTB file\", e);\n  }\n} else {\n  options.messageBundle = new EmptyMessageBundle();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..2cccd3ec 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,17 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+if (!flags.translationsFile.isEmpty()) {\n+  try {\n+    options.messageBundle = new XtbMessageBundle(\n+        new FileInputStream(flags.translationsFile),\n+        flags.translationsProject);\n+  } catch (IOException e) {\n+    throw new RuntimeException(\"Reading XTB file\", e);\n+  }\n+} else {\n+  options.messageBundle = new EmptyMessageBundle();\n+}\n     }\n \n     return options;",
    "result_reason": "junit.framework.AssertionFailedError: Expected no warnings or errors",
    "test_result": "FAIL"
}