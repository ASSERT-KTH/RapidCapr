{
    "patch": "    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n        if (f == null) {\n            throw new NullPointerException(\"The function f cannot be null.\");\n        }\n        if (min > max) {\n            throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n        }\n        double result = solve(f, min, max);\n        if (Double.isNaN(result) && initial >= min && initial <= max) {\n            result = solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..d519654f3 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,17 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        if (f == null) {\n+            throw new NullPointerException(\"The function f cannot be null.\");\n+        }\n+        if (min > max) {\n+            throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+        }\n+        double result = solve(f, min, max);\n+        if (Double.isNaN(result) && initial >= min && initial <= max) {\n+            result = solve(f, min, max, UnivariateRealSolverUtils.midpoint(min, max));\n+        }\n+        return result;\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}