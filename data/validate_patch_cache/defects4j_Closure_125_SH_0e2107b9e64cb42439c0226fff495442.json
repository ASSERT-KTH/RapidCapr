{
    "patch": "    JSTypeInstance returnType = null;\n    FunctionType fnType = null;\n    if (type.isFunctionType()) {\n      fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n        returnType = fnType.getReturnType();\n      }\n    }\n\n    if (type.isEmptyType() || type.isUnknownType() || returnType == null) {\n      ensureTyped(t, n);\n    } else {\n      // If the constructor function has a return type annotation, ensure\n      // the NewExpression is also annotated accordingly.\n      ensureTyped(t, n, returnType);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..a426d5cf 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,9 +1658,26 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n+    JSTypeInstance returnType = null;\n+    FunctionType fnType = null;\n+    if (type.isFunctionType()) {\n+      fnType = type.toMaybeFunctionType();\n       if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n+        returnType = fnType.getReturnType();\n+      }\n+    }\n+\n+    if (type.isEmptyType() || type.isUnknownType() || returnType == null) {\n+      ensureTyped(t, n);\n+    } else {\n+      // If the constructor function has a return type annotation, ensure\n+      // the NewExpression is also annotated accordingly.\n+      ensureTyped(t, n, returnType);\n+    }\n+        visitParameterList(t, n, fnType);\n+        ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n         ensureTyped(t, n);\n       }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}