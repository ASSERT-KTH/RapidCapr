{
    "patch": "else if (excerpt.equals(LINE_AND_COLUMN)) {\n  // Display the erroneous character indication when an exact extract is requested.\n  if (charno >= 0 &&\n      charno <= sourceExcerpt.length() &&\n      excerptFormatter.getColumnIndex() >= 0) {\n    for (int i = 0; i < excerptFormatter.getColumnIndex(); i++) {\n      b.append(' ');\n    }\n    b.append(\"^\\n\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..debe19e1 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -62,7 +62,6 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n   public String formatWarning(JSError warning) {\n     return format(warning, true);\n   }\n-\n   private String format(JSError error, boolean warning) {\n     // extract source excerpt\n     SourceExcerptProvider source = getSource();\n@@ -95,7 +94,17 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+else if (excerpt.equals(LINE_AND_COLUMN)) {\n+  // Display the erroneous character indication when an exact extract is requested.\n+  if (charno >= 0 &&\n+      charno <= sourceExcerpt.length() &&\n+      excerptFormatter.getColumnIndex() >= 0) {\n+    for (int i = 0; i < excerptFormatter.getColumnIndex(); i++) {\n+      b.append(' ');\n+    }\n+    b.append(\"^\\n\");\n+  }\n+}\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}