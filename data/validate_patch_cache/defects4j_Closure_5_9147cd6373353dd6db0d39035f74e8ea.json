{
    "patch": "        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n           return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() ||\n              child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          }\n\n          if (child.isComputedProp()) {\n            // Computed properties can't be checked.\n            return false;\n          }\n\n          String propName = child.getString();\n          if (validProperties.contains(propName)) {\n            // We don't want to allow two assignments to the same property.\n            return false;\n          }\n\n          validProperties.add(propName);\n\n          Node grandChild = child.getFirstChild();\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            Node refNode = t.getNode();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == grandChild) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..922c7fbc 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,75 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+        // Only rewrite VAR declarations or simple assignment statements\n+        if (!isVarOrAssignExprLhs(name)) {\n+           return false;\n+        }\n+\n+        Node val = ref.getAssignedValue();\n+        if (val == null) {\n+          // A var with no assignment.\n+          continue;\n+        }\n+\n+        // We're looking for object literal assignments only.\n+        if (!val.isObjectLit()) {\n+          return false;\n+        }\n+\n+        // Make sure that the value is not self-referential. IOW,\n+        // disallow things like x = {b: x.a}.\n+        //\n+        // TODO: Only exclude unorderable self-referential\n+        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+        // but x = {a: 1, b: x.a} is.\n+        //\n+        // Also, ES5 getters/setters aren't handled by this pass.\n+        for (Node child = val.getFirstChild(); child != null;\n+             child = child.getNext()) {\n+          if (child.isGetterDef() ||\n+              child.isSetterDef()) {\n+            // ES5 get/set not supported.\n+            return false;\n+          }\n+\n+          if (child.isComputedProp()) {\n+            // Computed properties can't be checked.\n+            return false;\n+          }\n+\n+          String propName = child.getString();\n+          if (validProperties.contains(propName)) {\n+            // We don't want to allow two assignments to the same property.\n+            return false;\n+          }\n+\n+          validProperties.add(propName);\n+\n+          Node grandChild = child.getFirstChild();\n+          // Check if childVal is the parent of any of the passed in\n+          // references, as that is how self-referential assignments\n+          // will happen.\n+          for (Reference t : refs) {\n+            Node refNode = t.getNode();\n+            while (!NodeUtil.isStatementBlock(refNode)) {\n+              if (refNode == grandChild) {\n+                // There's a self-referential assignment\n+                return false;\n+              }\n+              refNode = refNode.getParent();\n+            }\n+          }\n+        }\n+\n+\n+        // We have found an acceptable object literal assignment. As\n+        // long as there are no other assignments that mess things up,\n+        // we can inline.\n+        ret = true;\n+      }\n+      return ret;\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}