{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n\n      if (n.isReturn() && n.getFirstChild() != null) {\n        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n      } else if ((n.isName() || n.isGetProp()) && NodeUtil.isLValue(n)) {\n        String name;\n        if (n.isName()) {\n          name = n.getString();\n        } else {\n          name = n.getQualifiedName();\n        }\n        Scope scope = t.getScope();\n        Var var = scope.getVar(name);\n        if (var != null) {\n          Scope ownerScope = var.getScope();\n          if (ownerScope.isLocal() && !ownerScope.getParent().isLocal()) {\n            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n          }\n        }\n        // Record assigned names for function expression if possible.\n        Node functionNode = NodeUtil.getEnclosingFunction(n);\n        if (functionNode != null && functionNode.isFunction()) {\n          Node functionNameNode = functionNode.getFirstChild();\n          if (!functionNameNode.isEmpty()) {\n            String functionName = functionNameNode.getString();\n\n            if (functionName != null) {\n              data.get(functionNode).recordAssignedName(n.getString());\n            }\n          }\n        } else if (n.isGetProp() && n.isQualifiedName() && !name.equals(\"this\")) {\n          data.get(t.getScopeRoot()).recordAssignedName(name);\n        } else if (!NodeUtil.isExpressionNode(n)) {\n          // Statements like 'return', 'var i', 'throw', etc.\n          return;\n        } else if (n.hasChildren()) {\n          for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n            visit(t, child, n);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..f5ead584 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1983,7 +1983,6 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.put(n, new AstFunctionContents(n));\n       }\n     }\n-\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (t.inGlobalScope()) {\n         return;\n@@ -1993,7 +1992,52 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (t.inGlobalScope()) {\n+        return;\n+      }\n+\n+      if (n.isReturn() && n.getFirstChild() != null) {\n+        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+      } else if ((n.isName() || n.isGetProp()) && NodeUtil.isLValue(n)) {\n+        String name;\n+        if (n.isName()) {\n+          name = n.getString();\n+        } else {\n+          name = n.getQualifiedName();\n+        }\n+        Scope scope = t.getScope();\n+        Var var = scope.getVar(name);\n+        if (var != null) {\n+          Scope ownerScope = var.getScope();\n+          if (ownerScope.isLocal() && !ownerScope.getParent().isLocal()) {\n+            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+          }\n+        }\n+        // Record assigned names for function expression if possible.\n+        Node functionNode = NodeUtil.getEnclosingFunction(n);\n+        if (functionNode != null && functionNode.isFunction()) {\n+          Node functionNameNode = functionNode.getFirstChild();\n+          if (!functionNameNode.isEmpty()) {\n+            String functionName = functionNameNode.getString();\n+\n+            if (functionName != null) {\n+              data.get(functionNode).recordAssignedName(n.getString());\n+            }\n+          }\n+        } else if (n.isGetProp() && n.isQualifiedName() && !name.equals(\"this\")) {\n+          data.get(t.getScopeRoot()).recordAssignedName(name);\n+        } else if (!NodeUtil.isExpressionNode(n)) {\n+          // Statements like 'return', 'var i', 'throw', etc.\n+          return;\n+        } else if (n.hasChildren()) {\n+          for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+            visit(t, child, n);\n+          }\n+        }\n+      }\n+    }\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}