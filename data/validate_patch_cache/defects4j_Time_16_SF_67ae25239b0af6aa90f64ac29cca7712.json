{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    DateTimeZone zone = chrono.getZone();\n    chrono = selectChronology(chrono);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n    if (iZone != null) {\n        zone = iZone;\n    } else if (bucket.getZone() != null) {\n        zone = bucket.getZone();\n    }\n\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(bucket.computeMillis(false, text));\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n        return ~newPos;\n    }\n    bucket = saveTimeResetFields(bucket, instant);\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger().intValue();\n        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n    } else if (iZone == null && bucket.getZone() != null) {\n        zone = bucket.getZone();\n    }\n    instant.setMillis(bucket.computeMillis(false, text));\n    if (zone != null) {\n        instant.setZone(zone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..144b2292 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,49 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    DateTimeZone zone = chrono.getZone();\n+    chrono = selectChronology(chrono);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n+    if (iZone != null) {\n+        zone = iZone;\n+    } else if (bucket.getZone() != null) {\n+        zone = bucket.getZone();\n+    }\n+\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n         instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n+        } else if (bucket.getZone() != null) {\n+            instant.setZone(bucket.getZone());\n         }\n-        return newPos;\n+        return ~newPos;\n+    }\n+    bucket = saveTimeResetFields(bucket, instant);\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger().intValue();\n+        zone = DateTimeZone.forOffsetMillis(parsedOffset);\n+    } else if (iZone == null && bucket.getZone() != null) {\n+        zone = bucket.getZone();\n     }\n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (zone != null) {\n+        instant.setZone(zone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}