{
    "patch": "private void declareArguments(Node functionNode) {\n    Node astParameters = functionNode.getFirstChild().getNext();\n    Node body = astParameters.getNext();\n    FunctionType functionType = (FunctionType) functionNode.getJSType();\n    if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n            Node jsDocParameter = jsDocParameters.getFirstChild();\n            Set<String> declaredNames = new HashSet<>();\n            for (Node astParameter : astParameters.children()) {\n                String name = astParameter.getString();\n                if (!declaredNames.contains(name)) {\n                    declaredNames.add(name);\n                    if (jsDocParameter != null) {\n                        defineSlot(\n                            astParameter,\n                            functionNode,\n                            jsDocParameter.getJSType(),\n                            true);\n                        jsDocParameter = jsDocParameter.getNext();\n                    } else {\n                        defineSlot(astParameter, functionNode, null, true);\n                    }\n                } else {\n                    // Duplicate name. Flag as a warning.\n                    compiler.report(\n                        JSError.make(astParameter, DUPLICATE_PARAM_NAME_ERR,\n                            name));\n                }\n            }\n        }\n    }\n} // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..7a7185a9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,39 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n+private void declareArguments(Node functionNode) {\n+    Node astParameters = functionNode.getFirstChild().getNext();\n+    Node body = astParameters.getNext();\n+    FunctionType functionType = (FunctionType) functionNode.getJSType();\n+    if (functionType != null) {\n         Node jsDocParameters = functionType.getParametersNode();\n         if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+            Node jsDocParameter = jsDocParameters.getFirstChild();\n+            Set<String> declaredNames = new HashSet<>();\n+            for (Node astParameter : astParameters.children()) {\n+                String name = astParameter.getString();\n+                if (!declaredNames.contains(name)) {\n+                    declaredNames.add(name);\n+                    if (jsDocParameter != null) {\n+                        defineSlot(\n+                            astParameter,\n+                            functionNode,\n+                            jsDocParameter.getJSType(),\n+                            true);\n+                        jsDocParameter = jsDocParameter.getNext();\n+                    } else {\n+                        defineSlot(astParameter, functionNode, null, true);\n+                    }\n+                } else {\n+                    // Duplicate name. Flag as a warning.\n+                    compiler.report(\n+                        JSError.make(astParameter, DUPLICATE_PARAM_NAME_ERR,\n+                            name));\n+                }\n             }\n-          }\n         }\n-      }\n-    } // end declareArguments\n+    }\n+} // end declareArguments\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}