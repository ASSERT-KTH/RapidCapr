{
    "patch": "          String getterName = NodeUtil.getObjectLiteralKeyName(value);\n          if (getterName != null\n              && value.getParent().isAssign()\n              && value.getParent().getFirstChild().matchesQualifiedName(getterName)) {\n            return false;\n          }\n\n          // issue 216: Hide constructor properties when we remove constructors\n          if (convention.isSuperClassReference(value)) {\n            return false;\n          }\n\n          // if the value seems like a getter with side effects, be conservative\n          if (NodeUtil.mayHaveSideEffects(value, compiler)\n              && convention.isPropertyGetProp(value)) {\n            return false;\n          }\n\n          // Prototype properties are dealt with by rewriting them as\n          // assignments and we don't want to inline the call and thus\n          // make statement level detection miss something.\n          if (NodeUtil.isPrototypeProperty(value)) {\n            return false;\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..bb9bd744 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,36 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          String getterName = NodeUtil.getObjectLiteralKeyName(value);\n+          if (getterName != null\n+              && value.getParent().isAssign()\n+              && value.getParent().getFirstChild().matchesQualifiedName(getterName)) {\n+            return false;\n+          }\n+\n+          // issue 216: Hide constructor properties when we remove constructors\n+          if (convention.isSuperClassReference(value)) {\n+            return false;\n+          }\n+\n+          // if the value seems like a getter with side effects, be conservative\n+          if (NodeUtil.mayHaveSideEffects(value, compiler)\n+              && convention.isPropertyGetProp(value)) {\n+            return false;\n+          }\n+\n+          // Prototype properties are dealt with by rewriting them as\n+          // assignments and we don't want to inline the call and thus\n+          // make statement level detection miss something.\n+          if (NodeUtil.isPrototypeProperty(value)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n         }\n       }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}