{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        final RealPointValuePair[] original = simplex.clone(); // save the original simplex\n        final RealPointValuePair best = original[0];\n\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); // perform reflection step\n        if (comparator.compare(reflected, best) < 0) { // accept reflection if it leads to improvement\n\n            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // save the reflected simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator); // compute expanded simplex\n            if (comparator.compare(expanded, reflected) < 0) { // accept expansion if it leads to improvement\n                simplex = expanded.clone();\n            } else {\n                simplex = reflectedSimplex.clone();\n            }\n\n            return;\n\n        }\n\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); // compute contracted simplex\n        if (comparator.compare(contracted, best) < 0) { // accept contraction if it leads to improvement\n            simplex = contracted.clone();\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n        } else if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) { // check convergence\n          ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a3668cb24 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,43 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        final RealPointValuePair[] original = simplex.clone(); // save the original simplex\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); // perform reflection step\n+        if (comparator.compare(reflected, best) < 0) { // accept reflection if it leads to improvement\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone(); // save the reflected simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(reflectedSimplex, khi, comparator); // compute expanded simplex\n+            if (comparator.compare(expanded, reflected) < 0) { // accept expansion if it leads to improvement\n+                simplex = expanded.clone();\n+            } else {\n+                simplex = reflectedSimplex.clone();\n+            }\n \n-                return;\n+            return;\n \n-            }\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); // compute contracted simplex\n+        if (comparator.compare(contracted, best) < 0) { // accept contraction if it leads to improvement\n+            simplex = contracted.clone();\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n-\n-        }\n-\n-    }\n+        } else if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) { // check convergence\n+          \n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}