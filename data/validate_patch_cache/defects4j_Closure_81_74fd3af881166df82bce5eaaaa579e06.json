{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Boolean isUnnamedFunction = false;\n      if (name == null) {\n        name = new Name();\n        // set length to 0 explicitly\n        name.setLength(0);\n        isUnnamedFunction = true;\n      }\n      \n      // similarly, initialize line number to -1\n      Node node = newNode(Token.FUNCTION, -1);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else {\n        lp.setLineno(functionNode.getLineno());\n      }\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n     return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..9b9f0426 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,47 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      Boolean isUnnamedFunction = false;\n+      if (name == null) {\n+        name = new Name();\n+        // set length to 0 explicitly\n+        name.setLength(0);\n+        isUnnamedFunction = true;\n+      }\n+      \n+      // similarly, initialize line number to -1\n+      Node node = newNode(Token.FUNCTION, -1);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getLineno());\n+      }\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+     return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}