{
    "patch": "    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        checkState(child.isStringKey() || NodeUtil.isGetterOrSetter(child), \n            \"Object property keys must be strings or getters/setters: %s\", child);\n\n        String name;\n        if (child.isGetterDef() || child.isSetterDef()) {\n          name = child.getString();\n          if (child.isGetterDef()) {\n            // skip past the function to the GETPROP node.\n            child = child.getLastChild();\n          } else {\n            // skip past the parameter to the function to the SETPROP node.\n            child = child.getLastChild().getNext();\n          }\n        } else {\n          name = child.getString();\n        }\n\n        // We should never see a mix of numbers and strings.\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n        child = child.getNext();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..0474aa8e 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,40 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        checkState(child.isStringKey() || NodeUtil.isGetterOrSetter(child), \n+            \"Object property keys must be strings or getters/setters: %s\", child);\n+\n+        String name;\n+        if (child.isGetterDef() || child.isSetterDef()) {\n+          name = child.getString();\n+          if (child.isGetterDef()) {\n+            // skip past the function to the GETPROP node.\n+            child = child.getLastChild();\n+          } else {\n+            // skip past the parameter to the function to the SETPROP node.\n+            child = child.getLastChild().getNext();\n+          }\n+        } else {\n+          name = child.getString();\n+        }\n+\n+        // We should never see a mix of numbers and strings.\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+        child = child.getNext();\n+      }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}