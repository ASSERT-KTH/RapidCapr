{
    "patch": "  private boolean isInlinableObject(List<Reference> refs) {\n    for (Reference ref : refs) {\n      Node name = ref.getNode();\n      Node parent = ref.getParent();\n\n      // Ignore indirect references, like x.y (except x.y(), since\n      // the function referenced by y might reference 'this').\n      if (NodeUtil.isGet(parent) || NodeUtil.isOptChainGet(parent)) {\n        Node gramps = parent.getParent();\n        if (!gramps.isCall()\n            || parent != gramps.getFirstChild()\n            || NodeUtil.isPropertyTest(compiler, ref)) {\n          continue;\n        }\n      }\n\n      if (NodeUtil.isNameDeclaration(parent) || NodeUtil.isAssign(parent)) {\n        Node value = parent.getLastChild();\n        if (!value.isObjectLit()) {\n          return false;\n        }\n        for (Node key = value.getFirstChild(); key != null; key = key.getNext()) {\n          Node child = key.getFirstChild();\n          if (child == null || !child.isString()) {\n            return false;\n          }\n          String prop = child.getString();\n          if (\"__proto__\".equals(prop)) {\n            return false;\n          }\n          if (refs.stream()\n                  .anyMatch(\n                      r -> !r.isVarDeclaration()\n                          && NodeUtil.isLValue(r.getNode())\n                          && r.matchesNameOrNode(child))) {\n            return false;\n          }\n\n          // Make sure the property doesn't override a prototype property.\n          // If it does, we'll end up generating an ASSUME for this instance,\n          // which may cause type errors later if the assumptions are too strong.\n          if (NodeUtil.referencesSuper(propertyDefinitions, key)) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..c12ff720 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,92 +152,56 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n-    private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n-\n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n-\n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n+  private boolean isInlinableObject(List<Reference> refs) {\n+    for (Reference ref : refs) {\n+      Node name = ref.getNode();\n+      Node parent = ref.getParent();\n+\n+      // Ignore indirect references, like x.y (except x.y(), since\n+      // the function referenced by y might reference 'this').\n+      if (NodeUtil.isGet(parent) || NodeUtil.isOptChainGet(parent)) {\n+        Node gramps = parent.getParent();\n+        if (!gramps.isCall()\n+            || parent != gramps.getFirstChild()\n+            || NodeUtil.isPropertyTest(compiler, ref)) {\n           continue;\n         }\n+      }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+      if (NodeUtil.isNameDeclaration(parent) || NodeUtil.isAssign(parent)) {\n+        Node value = parent.getLastChild();\n+        if (!value.isObjectLit()) {\n           return false;\n         }\n-\n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+        for (Node key = value.getFirstChild(); key != null; key = key.getNext()) {\n+          Node child = key.getFirstChild();\n+          if (child == null || !child.isString()) {\n+            return false;\n+          }\n+          String prop = child.getString();\n+          if (\"__proto__\".equals(prop)) {\n+            return false;\n+          }\n+          if (refs.stream()\n+                  .anyMatch(\n+                      r -> !r.isVarDeclaration()\n+                          && NodeUtil.isLValue(r.getNode())\n+                          && r.matchesNameOrNode(child))) {\n             return false;\n           }\n \n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n+          // Make sure the property doesn't override a prototype property.\n+          // If it does, we'll end up generating an ASSUME for this instance,\n+          // which may cause type errors later if the assumptions are too strong.\n+          if (NodeUtil.referencesSuper(propertyDefinitions, key)) {\n+            return false;\n           }\n         }\n-\n-\n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+        return true;\n       }\n-      return ret;\n     }\n+    return false;\n+  }\n \n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}