{
    "patch": "      if ((name.globalSets == 1 || name.isBleedingFunction())\n          && name.localSets == 0\n          && name.aliasingGets == 0) {\n        // {@code name} meets condition (a).\n\n        if (name.shouldTryToInline()) {\n          List<Ref> refs = Lists.newArrayList(name.getRefs());\n          for (Ref ref : refs) {\n            switch (ref.type) {\n              case SET_FROM_GLOBAL:\n              case SET_FROM_LOCAL:\n                // Only support simple assignments (i.e. x = y) for now.\n                if (ref.getParent().isAssign() && ref.getParent().hasOneChild()) {\n                  Node value = ref.getParent().getLastChild();\n                  name.inlineValue(value, ref);\n                }\n                break;\n              case ALIASING_GET:\n                if (ref.scope.isLocal()) {\n                  if (inlineAliasIfPossible(ref, namespace)) {\n                    name.removeRef(ref);\n                  }\n                }\n                break;\n            }\n          }\n        }\n\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        if (name.props != null) {\n          workList.addAll(name.props);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..f1cc1d97 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,40 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.globalSets == 1 || name.isBleedingFunction())\n+          && name.localSets == 0\n+          && name.aliasingGets == 0) {\n+        // {@code name} meets condition (a).\n+\n+        if (name.shouldTryToInline()) {\n+          List<Ref> refs = Lists.newArrayList(name.getRefs());\n+          for (Ref ref : refs) {\n+            switch (ref.type) {\n+              case SET_FROM_GLOBAL:\n+              case SET_FROM_LOCAL:\n+                // Only support simple assignments (i.e. x = y) for now.\n+                if (ref.getParent().isAssign() && ref.getParent().hasOneChild()) {\n+                  Node value = ref.getParent().getLastChild();\n+                  name.inlineValue(value, ref);\n+                }\n+                break;\n+              case ALIASING_GET:\n+                if (ref.scope.isLocal()) {\n+                  if (inlineAliasIfPossible(ref, namespace)) {\n+                    name.removeRef(ref);\n+                  }\n+                }\n+                break;\n+            }\n+          }\n+        }\n+\n+        // All of {@code name}'s children meet condition (a), so they can be\n+        // added to the worklist.\n+        if (name.props != null) {\n+          workList.addAll(name.props);\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}