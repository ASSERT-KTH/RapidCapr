{
    "patch": "    public XYDataItem addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n        XYDataItem overwritten = null;\n        if (this.allowDuplicateXValues) {\n            // If duplicates are allowed, find the first item with the same X value and update it\n            for (int i = 0; i < this.data.size(); i++) {\n                XYDataItem item = (XYDataItem) this.data.get(i);\n                if (x.equals(item.getX())) {\n                    try {\n                        overwritten = (XYDataItem) item.clone();\n                    } catch (CloneNotSupportedException e) {\n                        throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                    }\n                    item.setY(y);\n                    fireSeriesChanged();\n                    return overwritten;\n                }\n            }\n        } else if (this.autoSort) {\n            // If duplicates are not allowed and auto-sort is enabled, use binary search to find the insert index\n            int index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n            if (index >= 0) {\n                // If an item with the same X value was found, update it and return the old value\n                XYDataItem existing = (XYDataItem) this.data.get(index);\n                try {\n                    overwritten = (XYDataItem) existing.clone();\n                } catch (CloneNotSupportedException e) {\n                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n                }\n                existing.setY(y);\n            } else {\n                // If no item with the same X value was found, insert a new item at the correct index\n                this.data.add(-index - 1, new XYDataItem(x, y));\n                // check if this addition will exceed the maximum item count...\n                if (getItemCount() > this.maximumItemCount) {\n                    this.data.remove(0);\n                }\n            }\n        } else {\n            // If duplicates are not allowed and auto-sort is disabled, simply add the item to the end of the list\n            this.data.add(new XYDataItem(x, y));\n            // check if this addition will exceed the maximum item count...\n            if (getItemCount() > this.maximumItemCount) {\n                this.data.remove(0);\n            }\n        }\n        fireSeriesChanged();\n        return overwritten;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..0acd601 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,57 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+    public XYDataItem addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+        XYDataItem overwritten = null;\n+        if (this.allowDuplicateXValues) {\n+            // If duplicates are allowed, find the first item with the same X value and update it\n+            for (int i = 0; i < this.data.size(); i++) {\n+                XYDataItem item = (XYDataItem) this.data.get(i);\n+                if (x.equals(item.getX())) {\n+                    try {\n+                        overwritten = (XYDataItem) item.clone();\n+                    } catch (CloneNotSupportedException e) {\n+                        throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                    }\n+                    item.setY(y);\n+                    fireSeriesChanged();\n+                    return overwritten;\n+                }\n+            }\n+        } else if (this.autoSort) {\n+            // If duplicates are not allowed and auto-sort is enabled, use binary search to find the insert index\n+            int index = Collections.binarySearch(this.data, new XYDataItem(x, y));\n+            if (index >= 0) {\n+                // If an item with the same X value was found, update it and return the old value\n+                XYDataItem existing = (XYDataItem) this.data.get(index);\n+                try {\n+                    overwritten = (XYDataItem) existing.clone();\n+                } catch (CloneNotSupportedException e) {\n+                    throw new SeriesException(\"Couldn't clone XYDataItem!\");\n+                }\n+                existing.setY(y);\n+            } else {\n+                // If no item with the same X value was found, insert a new item at the correct index\n+                this.data.add(-index - 1, new XYDataItem(x, y));\n+                // check if this addition will exceed the maximum item count...\n+                if (getItemCount() > this.maximumItemCount) {\n+                    this.data.remove(0);\n+                }\n+            }\n+        } else {\n+            // If duplicates are not allowed and auto-sort is disabled, simply add the item to the end of the list\n+            this.data.add(new XYDataItem(x, y));\n+            // check if this addition will exceed the maximum item count...\n+            if (getItemCount() > this.maximumItemCount) {\n+                this.data.remove(0);\n+            }\n+        }\n+        fireSeriesChanged();\n+        return overwritten;\n+    }\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "junit.framework.AssertionFailedError: expected:<33.3> but was:<3.3>",
    "test_result": "FAIL"
}