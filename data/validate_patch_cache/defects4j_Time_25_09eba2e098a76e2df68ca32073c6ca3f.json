{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    if (nextLocal != nextAdjusted) {\n        int prevOffset = offsetAdjusted < 0 ? getOffset(nextLocal - 1) : getOffset(nextLocal + 1);\n        int nextOffset = getOffset(nextAdjusted);\n\n        if (prevOffset < nextOffset) {\n            return offsetLocal;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f79aebfd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    if (nextLocal != nextAdjusted) {\n+        int prevOffset = offsetAdjusted < 0 ? getOffset(nextLocal - 1) : getOffset(nextLocal + 1);\n+        int nextOffset = getOffset(nextAdjusted);\n+\n+        if (prevOffset < nextOffset) {\n+            return offsetLocal;\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}