{
    "patch": "public static class SafeMean extends Mean {\n    @Override\n    public void increment(double value) {\n        if (!Double.isNaN(value)) {\n            super.increment(value);\n        }\n    }\n}\n\npublic void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n    // If mean, variance or geomean have been overridden,\n    // need to increment these\n    if (!(meanImpl instanceof Mean)) {\n        meanImpl.increment(value);\n    } else {\n        if (safeMean == null) {\n            safeMean = new SafeMean();\n        }\n        safeMean.increment(value);\n    }\n    if (!(varianceImpl instanceof Variance)) {\n        varianceImpl.increment(value);\n    }\n    if (!(geoMeanImpl instanceof GeometricMean)) {\n        geoMeanImpl.increment(value);\n    }\n    n++;\n}\n\nprivate SafeMean safeMean = null;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..399179d80 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,42 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n+public static class SafeMean extends Mean {\n+    @Override\n+    public void increment(double value) {\n+        if (!Double.isNaN(value)) {\n+            super.increment(value);\n         }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n+    }\n+}\n+\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+    // If mean, variance or geomean have been overridden,\n+    // need to increment these\n+    if (!(meanImpl instanceof Mean)) {\n+        meanImpl.increment(value);\n+    } else {\n+        if (safeMean == null) {\n+            safeMean = new SafeMean();\n         }\n-        n++;\n+        safeMean.increment(value);\n     }\n+    if (!(varianceImpl instanceof Variance)) {\n+        varianceImpl.increment(value);\n+    }\n+    if (!(geoMeanImpl instanceof GeometricMean)) {\n+        geoMeanImpl.increment(value);\n+    }\n+    n++;\n+}\n+\n+private SafeMean safeMean = null;\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>",
    "test_result": "FAIL"
}