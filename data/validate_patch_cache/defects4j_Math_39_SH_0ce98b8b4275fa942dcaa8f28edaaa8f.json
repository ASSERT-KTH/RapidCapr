{
    "patch": "stepSize = filterStep(hNew, forward, Double.isNaN(error) || error <= 1.0);\nif (stepSize < minStep) {\n    throw new NumberIsTooSmallException(stepSize, minStep, true);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..b5459dad3 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,10 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+stepSize = filterStep(hNew, forward, Double.isNaN(error) || error <= 1.0);\n+if (stepSize < minStep) {\n+    throw new NumberIsTooSmallException(stepSize, minStep, true);\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: minStep has private access in AdaptiveStepsizeIntegrator",
    "test_result": "ERROR"
}