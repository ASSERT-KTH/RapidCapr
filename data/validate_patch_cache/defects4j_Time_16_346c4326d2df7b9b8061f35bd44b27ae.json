{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instant.getMillis(), chrono, iLocale, iPivotYear, zone);\n        \n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(true, text)); // parsed text-offset may be behind the current time\n        DateTimeZone parsedZone = bucket.getZone();\n        if (parsedZone != null) {\n            zone = parsedZone;\n        } else if (bucket.getOffsetInteger() != null) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        }\n        chrono = selectChronology(bucket.getChronology());\n        \n        instant.setChronology(chrono);\n        instant.setZone(zone);\n        \n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..65938609 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,33 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+        DateTimeParser parser = requireParser();\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"Instant must not be null\");\n+        }\n+        \n+        Chronology chrono = instant.getChronology();\n+        DateTimeZone zone = chrono.getZone();\n+        \n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instant.getMillis(), chrono, iLocale, iPivotYear, zone);\n+        \n+        int newPos = parser.parseInto(bucket, text, position);\n+        instant.setMillis(bucket.computeMillis(true, text)); // parsed text-offset may be behind the current time\n+        DateTimeZone parsedZone = bucket.getZone();\n+        if (parsedZone != null) {\n+            zone = parsedZone;\n+        } else if (bucket.getOffsetInteger() != null) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        }\n+        chrono = selectChronology(bucket.getChronology());\n+        \n+        instant.setChronology(chrono);\n+        instant.setZone(zone);\n+        \n+        return newPos;\n+    }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}