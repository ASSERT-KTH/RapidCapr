{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    final double v1x = v1.getX();\n    final double v1y = v1.getY();\n    final double v1z = v1.getZ();\n\n    final double v2x = v2.getX();\n    final double v2y = v2.getY();\n    final double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double factor1 = v1x * v1x + v1y * v1y + v1z * v1z;\n    final double factor2 = v2x * v2x + v2y * v2y + v2z * v2z;\n    final double factor = FastMath.sqrt(factor1 * factor2);\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n    final double rm = FastMath.max(FastMath.max(FastMath.abs(v1x), FastMath.abs(v1y)), FastMath.abs(v1z));\n    final double sm = FastMath.max(FastMath.max(FastMath.abs(v2x), FastMath.abs(v2y)), FastMath.abs(v2z));\n    final double u1 = v1x / rm;\n    final double u2 = v2x / sm;\n    final double v1c = v1y / rm;\n    final double v2c = v2y / sm;\n    final double w1 = v1z / rm;\n    final double w2 = v2z / sm;\n    final double a = u1 * u2 + v1c * v2c + w1 * w2;\n    final double b = u1 * v2c - u2 * v1c;\n    final double c = u1 * w2 - u2 * w1;\n    final double d = v1c * w2 - v2c * w1;\n    final double acbd = (a + d) * (a - d) + (b + c) * (b - c);\n    final double rvnm = FastMath.sqrt(FastMath.abs(acbd)) * rm * sm;\n\n    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n    final double rho;\n    if (rvnm == 0) {\n        rho = Double.NaN;\n    } else {\n        final double r = acbd / (rvnm * rvnm);\n        rho = r * (r <= 0.5 ? r * (2.0 + r) : 1.0 / (2.0 - r)) / d;\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    final double resX = (v1y * v2z - v1z * v2y);\n    final double resY = (v1z * v2x - v1x * v2z);\n    final double resZ = (v1x * v2y - v1y * v2x);\n\n    return new Vector3D(resX, resY, resZ);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..b8741e7d5 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,59 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    final double v1x = v1.getX();\n+    final double v1y = v1.getY();\n+    final double v1z = v1.getZ();\n+\n+    final double v2x = v2.getX();\n+    final double v2y = v2.getY();\n+    final double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double factor1 = v1x * v1x + v1y * v1y + v1z * v1z;\n+    final double factor2 = v2x * v2x + v2y * v2y + v2z * v2z;\n+    final double factor = FastMath.sqrt(factor1 * factor2);\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+    final double rm = FastMath.max(FastMath.max(FastMath.abs(v1x), FastMath.abs(v1y)), FastMath.abs(v1z));\n+    final double sm = FastMath.max(FastMath.max(FastMath.abs(v2x), FastMath.abs(v2y)), FastMath.abs(v2z));\n+    final double u1 = v1x / rm;\n+    final double u2 = v2x / sm;\n+    final double v1c = v1y / rm;\n+    final double v2c = v2y / sm;\n+    final double w1 = v1z / rm;\n+    final double w2 = v2z / sm;\n+    final double a = u1 * u2 + v1c * v2c + w1 * w2;\n+    final double b = u1 * v2c - u2 * v1c;\n+    final double c = u1 * w2 - u2 * w1;\n+    final double d = v1c * w2 - v2c * w1;\n+    final double acbd = (a + d) * (a - d) + (b + c) * (b - c);\n+    final double rvnm = FastMath.sqrt(FastMath.abs(acbd)) * rm * sm;\n+\n+    // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double rho;\n+    if (rvnm == 0) {\n+        rho = Double.NaN;\n+    } else {\n+        final double r = acbd / (rvnm * rvnm);\n+        rho = r * (r <= 0.5 ? r * (2.0 + r) : 1.0 / (2.0 - r)) / d;\n+    }\n \n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    final double resX = (v1y * v2z - v1z * v2y);\n+    final double resY = (v1z * v2x - v1x * v2z);\n+    final double resZ = (v1x * v2y - v1y * v2x);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    return new Vector3D(resX, resY, resZ);\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}