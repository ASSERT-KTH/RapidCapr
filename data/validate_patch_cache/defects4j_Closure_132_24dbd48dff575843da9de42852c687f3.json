{
    "patch": "private Node tryMinimizeIf(Node n) {\n\n  Node parent = n.getParent();\n\n  Node cond = n.getFirstChild();\n\n  /* If the condition is a literal, we'll let other\n   * optimizations try to remove useless code.\n   */\n  if (NodeUtil.isLiteralValue(cond, true)) {\n    return n;\n  }\n\n  Node thenBranch = cond.getNext();\n  Node elseBranch = thenBranch.getNext();\n\n  if (elseBranch == null) {\n    if (isFoldableExpressBlock(thenBranch)) {\n      Node expression = getBlockExpression(thenBranch);\n\n      if (cond.isNot()) {\n        Node newExpr = IR.or(cond.removeFirstChild(), expression.removeFirstChild()).srcref(n);\n        n.detachChildren();\n        parent.replaceChild(n, newExpr);\n        reportCodeChange();\n\n        return newExpr;\n      }\n\n      Node newExpr = IR.and(cond, expression.removeFirstChild()).srcref(n);\n      n.detachChildren();\n      parent.replaceChild(n, newExpr);\n      reportCodeChange();\n      return newExpr;\n    }\n\n    // Try to combine two IF-ELSE\n    if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {\n      Node innerIf = thenBranch.getFirstChild();\n\n      if (innerIf.isIf()) {\n        Node innerCond = innerIf.getFirstChild();\n        Node innerThenBranch = innerCond.getNext();\n        Node innerElseBranch = innerThenBranch.getNext();\n\n        if (innerElseBranch == null &&\n            !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n              isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n          n.detachChildren();\n          n.addChildToBack(IR.and(\n                  cond.detachFromParent(),\n                  innerCond.detachFromParent())\n              .srcref(cond));\n          n.addChildrenToBack(innerThenBranch.detachFromParent());\n          reportCodeChange();\n          return n;\n        }\n      }\n    }\n\n    return n;\n  }\n\n  /* TODO(dcc) This modifies the siblings of n, which is undesirable for a\n   * peephole optimization. This should probably get moved to another pass.\n   */\n  tryRemoveRepeatedStatements(n);\n\n  // if(!x)foo();else bar(); -> if(x)bar();else foo();\n  if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n    n.replaceChild(cond, cond.removeFirstChild());\n    n.removeChild(thenBranch);\n    n.addChildToBack(thenBranch);\n    reportCodeChange();\n    return n;\n  }\n\n  // if(x)return 1;else return 2; -> return x?1:2;\n  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n    Node thenReturn = thenBranch.getFirstChild();\n    Node elseReturn = elseBranch.getFirstChild();\n    Node thenExpr = thenReturn.removeFirstChild();\n    Node elseExpr = elseReturn.removeFirstChild();\n\n    if (NodeUtil.mayThrowException(thenExpr) || NodeUtil.mayThrowException(elseExpr)) {\n      return n;\n    }\n\n    if (NodeUtil.isNameOrStringKey(thenReturn.getLastChild(), \"undefined\")) {\n      thenExpr = IR.voidNode().srcref(thenReturn);\n    }\n\n    if (NodeUtil.isNameOrStringKey(elseReturn.getLastChild(), \"undefined\")) {\n      elseExpr = IR.voidNode().srcref(elseReturn);\n    }\n\n    Node hook = new Node(Token.HOOK, cond.detachFromParent(), thenExpr, elseExpr).srcref(n);\n    Node returnNode = IR.returnNode(hook).srcref(n);\n    parent.replaceChild(n, returnNode);\n    reportCodeChange();\n    return returnNode;\n  }\n\n  boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n  boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n    Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n    Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n    if (thenOp.getType() == elseOp.getType() &&\n        NodeUtil.isAssignmentOp(thenOp)) {\n      Node lhs = thenOp.getFirstChild();\n      if (!mayHaveSideEffects(lhs) &&\n          areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n        Node assignName = thenOp.removeFirstChild();\n        Node thenExpr = thenOp.removeFirstChild();\n        Node elseExpr = elseOp.getLastChild();\n        elseOp.removeChild(elseExpr);\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);\n        Node expr = NodeUtil.newExpr(assign);\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n\n        return expr;\n      }\n    } else {\n      // if(x)foo();else bar(); -> x?foo():bar()\n      n.removeChild(cond);\n      Node thenNode = getBlockExpression(thenBranch).removeFirstChild();\n      Node elseNode = getBlockExpression(elseBranch).removeFirstChild();\n      Node hookNode = IR.hook(cond, thenNode, elseNode).srcref(n);\n      Node newExpr = NodeUtil.newExpr(hookNode);\n      parent.replaceChild(n, newExpr);\n      reportCodeChange();\n\n      return newExpr;\n    }\n  }\n\n  boolean thenBranchIsVar = isVarBlock(thenBranch);\n  boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n  // if(x)var y=1;else y=2  ->  var y=x?1:2\n  if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n      getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n    Node var = getBlockVar(thenBranch);\n    Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n    Node name1 = var.getFirstChild();\n    Node maybeName2 = elseAssign.getFirstChild();\n\n    if (name1.hasChildren()\n        && maybeName2.isName()\n        && name1.getString().equals(maybeName2.getString())) {\n      Node thenExpr = name1.removeChildren();\n      Node elseExpr = elseAssign.getLastChild().detachFromParent();\n      cond.detachFromParent();\n      Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n      var.detachFromParent();\n      name1.addChildrenToBack(hookNode);\n      parent.replaceChild(n, var);\n      reportCodeChange();\n\n      return var;\n    }\n\n  // if(x)y=1;else var y=2  ->  var y=x?1",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..8aed4c1a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,175 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+private Node tryMinimizeIf(Node n) {\n+\n+  Node parent = n.getParent();\n+\n+  Node cond = n.getFirstChild();\n+\n+  /* If the condition is a literal, we'll let other\n+   * optimizations try to remove useless code.\n+   */\n+  if (NodeUtil.isLiteralValue(cond, true)) {\n+    return n;\n+  }\n+\n+  Node thenBranch = cond.getNext();\n+  Node elseBranch = thenBranch.getNext();\n+\n+  if (elseBranch == null) {\n+    if (isFoldableExpressBlock(thenBranch)) {\n+      Node expression = getBlockExpression(thenBranch);\n+\n+      if (cond.isNot()) {\n+        Node newExpr = IR.or(cond.removeFirstChild(), expression.removeFirstChild()).srcref(n);\n+        n.detachChildren();\n+        parent.replaceChild(n, newExpr);\n+        reportCodeChange();\n+\n+        return newExpr;\n+      }\n+\n+      Node newExpr = IR.and(cond, expression.removeFirstChild()).srcref(n);\n+      n.detachChildren();\n+      parent.replaceChild(n, newExpr);\n+      reportCodeChange();\n+      return newExpr;\n+    }\n+\n+    // Try to combine two IF-ELSE\n+    if (NodeUtil.isStatementBlock(thenBranch) && thenBranch.hasOneChild()) {\n+      Node innerIf = thenBranch.getFirstChild();\n+\n+      if (innerIf.isIf()) {\n+        Node innerCond = innerIf.getFirstChild();\n+        Node innerThenBranch = innerCond.getNext();\n+        Node innerElseBranch = innerThenBranch.getNext();\n+\n+        if (innerElseBranch == null &&\n+            !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&\n+              isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {\n+          n.detachChildren();\n+          n.addChildToBack(IR.and(\n+                  cond.detachFromParent(),\n+                  innerCond.detachFromParent())\n+              .srcref(cond));\n+          n.addChildrenToBack(innerThenBranch.detachFromParent());\n+          reportCodeChange();\n+          return n;\n+        }\n+      }\n+    }\n+\n+    return n;\n+  }\n+\n+  /* TODO(dcc) This modifies the siblings of n, which is undesirable for a\n+   * peephole optimization. This should probably get moved to another pass.\n+   */\n+  tryRemoveRepeatedStatements(n);\n+\n+  // if(!x)foo();else bar(); -> if(x)bar();else foo();\n+  if (cond.isNot() && !consumesDanglingElse(elseBranch)) {\n+    n.replaceChild(cond, cond.removeFirstChild());\n+    n.removeChild(thenBranch);\n+    n.addChildToBack(thenBranch);\n+    reportCodeChange();\n+    return n;\n+  }\n+\n+  // if(x)return 1;else return 2; -> return x?1:2;\n+  if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {\n+    Node thenReturn = thenBranch.getFirstChild();\n+    Node elseReturn = elseBranch.getFirstChild();\n+    Node thenExpr = thenReturn.removeFirstChild();\n+    Node elseExpr = elseReturn.removeFirstChild();\n+\n+    if (NodeUtil.mayThrowException(thenExpr) || NodeUtil.mayThrowException(elseExpr)) {\n+      return n;\n+    }\n+\n+    if (NodeUtil.isNameOrStringKey(thenReturn.getLastChild(), \"undefined\")) {\n+      thenExpr = IR.voidNode().srcref(thenReturn);\n+    }\n+\n+    if (NodeUtil.isNameOrStringKey(elseReturn.getLastChild(), \"undefined\")) {\n+      elseExpr = IR.voidNode().srcref(elseReturn);\n+    }\n+\n+    Node hook = new Node(Token.HOOK, cond.detachFromParent(), thenExpr, elseExpr).srcref(n);\n+    Node returnNode = IR.returnNode(hook).srcref(n);\n+    parent.replaceChild(n, returnNode);\n+    reportCodeChange();\n+    return returnNode;\n+  }\n+\n+  boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n+  boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n+\n+  if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {\n+    Node thenOp = getBlockExpression(thenBranch).getFirstChild();\n+    Node elseOp = getBlockExpression(elseBranch).getFirstChild();\n+    if (thenOp.getType() == elseOp.getType() &&\n+        NodeUtil.isAssignmentOp(thenOp)) {\n+      Node lhs = thenOp.getFirstChild();\n+      if (!mayHaveSideEffects(lhs) &&\n+          areNodesEqualForInlining(lhs, elseOp.getFirstChild())) {\n+        Node assignName = thenOp.removeFirstChild();\n+        Node thenExpr = thenOp.removeFirstChild();\n+        Node elseExpr = elseOp.getLastChild();\n+        elseOp.removeChild(elseExpr);\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node assign = new Node(thenOp.getType(), assignName, hookNode).srcref(thenOp);\n+        Node expr = NodeUtil.newExpr(assign);\n+        parent.replaceChild(n, expr);\n+        reportCodeChange();\n+\n+        return expr;\n+      }\n+    } else {\n+      // if(x)foo();else bar(); -> x?foo():bar()\n+      n.removeChild(cond);\n+      Node thenNode = getBlockExpression(thenBranch).removeFirstChild();\n+      Node elseNode = getBlockExpression(elseBranch).removeFirstChild();\n+      Node hookNode = IR.hook(cond, thenNode, elseNode).srcref(n);\n+      Node newExpr = NodeUtil.newExpr(hookNode);\n+      parent.replaceChild(n, newExpr);\n+      reportCodeChange();\n+\n+      return newExpr;\n+    }\n+  }\n+\n+  boolean thenBranchIsVar = isVarBlock(thenBranch);\n+  boolean elseBranchIsVar = isVarBlock(elseBranch);\n+\n+  // if(x)var y=1;else y=2  ->  var y=x?1:2\n+  if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n+      getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n+\n+    Node var = getBlockVar(thenBranch);\n+    Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n+\n+    Node name1 = var.getFirstChild();\n+    Node maybeName2 = elseAssign.getFirstChild();\n+\n+    if (name1.hasChildren()\n+        && maybeName2.isName()\n+        && name1.getString().equals(maybeName2.getString())) {\n+      Node thenExpr = name1.removeChildren();\n+      Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+      cond.detachFromParent();\n+      Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+      var.detachFromParent();\n+      name1.addChildrenToBack(hookNode);\n+      parent.replaceChild(n, var);\n+      reportCodeChange();\n+\n+      return var;\n+    }\n+\n+  // if(x)y=1;else var y=2  ->  var y=x?1\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}