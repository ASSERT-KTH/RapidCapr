{
    "patch": "    if (left.getType() == Token.ARRAYLIT) {\n      if (right.getType() != Token.NUMBER) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n      }\n      \n      double index = right.getDouble();\n      int intIndex = (int) index;\n      if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n\n      if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      Node elem = null;\n      for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n        // Check if the child represents the indexed element and store it\n        if (child.getType() == Token.NUMBER && child.getDouble() == index) {\n          elem = child.getNext();\n          break;\n        }\n      }\n\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n\n      // Replace the entire GETELEM with the value\n      parent.replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..1fec1548 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,50 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT) {\n+      if (right.getType() != Token.NUMBER) {\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n+      }\n+      \n+      double index = right.getDouble();\n+      int intIndex = (int) index;\n+      if (intIndex != index) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n+\n+      if (intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      Node elem = null;\n+      for (Node child = left.getFirstChild(); child != null; child = child.getNext()) {\n+        // Check if the child represents the indexed element and store it\n+        if (child.getType() == Token.NUMBER && child.getDouble() == index) {\n+          elem = child.getNext();\n+          break;\n+        }\n+      }\n+\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+\n+      // Replace the entire GETELEM with the value\n+      parent.replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 0.0 1 [source_file: testcode] at testcode line 1 : 10 expected:<0> but was:<1>",
    "test_result": "FAIL"
}