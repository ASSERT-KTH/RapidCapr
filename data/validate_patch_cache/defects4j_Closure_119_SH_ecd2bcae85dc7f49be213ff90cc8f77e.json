{
    "patch": "public void collect(JSModule module, Scope scope, Node n) {\n      Node parent = n.getParent();\n\n      String name;\n      boolean isSet = false;\n      Name.Type type = Name.Type.OTHER;\n      boolean isPropAssign = false;\n\n      switch (n.getToken()) {\n        case GETTER_DEF:\n        case SETTER_DEF:\n        case STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getToken()) {\n            case STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getToken()) {\n              case VAR:\n                // check for variable declaration without initialization\n                if (n.hasChildren() && n.getFirstChild().getToken() == EMPTY) {\n                  return;\n                }\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case GETPROP:\n                return;\n              case FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case INC:\n              case DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                } else if (NodeUtil.isUnaryOp(parent) &&\n                    parent.getToken() == Token.TYPEOF) {\n                  // `typeof val` is a read access\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getToken()) {\n              case ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case INC:\n              case DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return;\n          }\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        handleGet(module, scope, n, parent, name);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..b467cc46 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,139 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+public void collect(JSModule module, Scope scope, Node n) {\n+      Node parent = n.getParent();\n+\n+      String name;\n+      boolean isSet = false;\n+      Name.Type type = Name.Type.OTHER;\n+      boolean isPropAssign = false;\n+\n+      switch (n.getToken()) {\n+        case GETTER_DEF:\n+        case SETTER_DEF:\n+        case STRING_KEY:\n+          // This may be a key in an object literal declaration.\n+          name = null;\n+          if (parent != null && parent.isObjectLit()) {\n+            name = getNameForObjLitKey(n);\n+          }\n+          if (name == null) {\n+            return;\n+          }\n+          isSet = true;\n+          switch (n.getToken()) {\n+            case STRING_KEY:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case GETTER_DEF:\n+              type = Name.Type.GET;\n+              break;\n+            case SETTER_DEF:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected:\" + n);\n+          }\n+          break;\n+        case NAME:\n+          // This may be a variable get or set.\n+          if (parent != null) {\n+            switch (parent.getToken()) {\n+              case VAR:\n+                // check for variable declaration without initialization\n+                if (n.hasChildren() && n.getFirstChild().getToken() == EMPTY) {\n+                  return;\n+                }\n+                isSet = true;\n+                Node rvalue = n.getFirstChild();\n+                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+                break;\n+              case ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                }\n+                break;\n+              case GETPROP:\n+                return;\n+              case FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                break;\n+              case INC:\n+              case DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                } else if (NodeUtil.isUnaryOp(parent) &&\n+                    parent.getToken() == Token.TYPEOF) {\n+                  // `typeof val` is a read access\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getToken()) {\n+              case ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case INC:\n+              case DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case GETPROP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return;\n+          }\n+          break;\n+        default:\n+          return;\n+      }\n+\n+      // We are only interested in global names.\n+      if (!isGlobalNameReference(name, scope)) {\n+        return;\n+      }\n+\n+      if (isSet) {\n+        if (isGlobalScope(scope)) {\n+          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+        } else {\n+          handleSetFromLocal(module, scope, n, parent, name);\n+        }\n+      } else {\n+        handleGet(module, scope, n, parent, name);\n+      }\n+    }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}