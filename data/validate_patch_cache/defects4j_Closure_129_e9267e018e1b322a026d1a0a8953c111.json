{
    "patch": "if (!NodeUtil.isGet(first) && !NodeUtil.isCall(first) && !NodeUtil.isCast(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n\n  // Keep track of the context in which eval is called. It is important\n  // to distinguish between \"(0, eval)()\" and \"eval()\".\n  if (n.getParent().isExprResult() && first.isName() && \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..7aa97073 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,15 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+if (!NodeUtil.isGet(first) && !NodeUtil.isCall(first) && !NodeUtil.isCast(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+\n+  // Keep track of the context in which eval is called. It is important\n+  // to distinguish between \"(0, eval)()\" and \"eval()\".\n+  if (n.getParent().isExprResult() && first.isName() && \"eval\".equals(first.getString())) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}