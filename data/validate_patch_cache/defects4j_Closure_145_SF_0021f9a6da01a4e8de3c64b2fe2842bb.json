{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n    // are skipped. \n    if (n.getType() == Token.BLOCK) {\n      List<Node> children = n.children();\n      if (children.isEmpty() || children.size() > 1) {\n        return false;\n      }\n      n = children.get(0);\n    } else if (n.getType() == Token.LABEL) {\n      Node labeledStatement = n.getFirstChild();\n      if (labeledStatement.getType() == Token.BLOCK) {\n        List<Node> children = labeledStatement.children();\n        if (children.isEmpty() || children.size() > 1) {\n          return false;\n        }\n        n = children.get(0);\n      } else {\n        n = labeledStatement;\n      }\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..6be50136 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,27 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    // For labels with block children, we need to ensure that a labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n+    // are skipped. \n+    if (n.getType() == Token.BLOCK) {\n+      List<Node> children = n.children();\n+      if (children.isEmpty() || children.size() > 1) {\n+        return false;\n+      }\n+      n = children.get(0);\n+    } else if (n.getType() == Token.LABEL) {\n+      Node labeledStatement = n.getFirstChild();\n+      if (labeledStatement.getType() == Token.BLOCK) {\n+        List<Node> children = labeledStatement.children();\n+        if (children.isEmpty() || children.size() > 1) {\n+          return false;\n+        }\n+        n = children.get(0);\n+      } else {\n+        n = labeledStatement;\n+      }\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}