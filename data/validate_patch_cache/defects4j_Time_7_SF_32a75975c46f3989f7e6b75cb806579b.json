{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        \n        // get the default year, or use the pivot (or specified) year if specified\n        int defaultYear;\n        if (iPivotYear != null) {\n            defaultYear = iPivotYear.intValue();\n        } else {\n            defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n            defaultYear = defaultYear < 0 ? -defaultYear : defaultYear;\n            if (iDefaultYear != null) {\n                defaultYear = iDefaultYear.intValue();\n            }\n        }\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, defaultYear, iPivotYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..e846cfb2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,15 +702,23 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n         \n+        // get the default year, or use the pivot (or specified) year if specified\n+        int defaultYear;\n+        if (iPivotYear != null) {\n+            defaultYear = iPivotYear.intValue();\n+        } else {\n+            defaultYear = DateTimeUtils.getChronology(chrono).year().get(instantMillis);\n+            defaultYear = defaultYear < 0 ? -defaultYear : defaultYear;\n+            if (iDefaultYear != null) {\n+                defaultYear = iDefaultYear.intValue();\n+            }\n+        }\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instantMillis, chrono, iLocale, defaultYear, iPivotYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: incomparable types: int and <null>",
    "test_result": "ERROR"
}