{
    "patch": "            } else {\n                long difference = updatedOffset - iOffset;\n                if (difference != 0) {\n                    millis -= difference;\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].isSaved()) {\n                            DateTimeField field = savedFields[i].getField();\n                            if (field.getType() == DateTimeFieldType.zone()) {\n                                continue;\n                            }\n                            millis = field.set(millis, savedFields[i].getValue(), resetFields);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..a3a69946 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            } else {\n+                long difference = updatedOffset - iOffset;\n+                if (difference != 0) {\n+                    millis -= difference;\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].isSaved()) {\n+                            DateTimeField field = savedFields[i].getField();\n+                            if (field.getType() == DateTimeFieldType.zone()) {\n+                                continue;\n+                            }\n+                            millis = field.set(millis, savedFields[i].getValue(), resetFields);\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        \n+        return millis;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}