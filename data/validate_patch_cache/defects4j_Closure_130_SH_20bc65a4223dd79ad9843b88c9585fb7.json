{
    "patch": "      if ((name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets == 0 && name.getTotalRefs() == 1) ||\n          (name.props != null && name.aliasingGets == 0)) {\n        // {@code name} meets condition (a), but it's possible that its props\n        // don't meet condition (a). So we have to add all its props to the\n        // evaluation queue.\n        workList.addAll(name.props);\n      } else if (name.getTotalRefs() == 2 && name.localSets == 1 &&\n          name.aliasingGets == 0) {\n        // {@code name} meets condition (b), so we try to inline it.\n        Ref ref = name.getDeclaration();\n        Preconditions.checkState(ref != null);\n        if (inlineAliasIfPossible(ref, namespace)) {\n          name.removeRef(ref);\n        }\n      } else if (name.getLocalSets() == 0 && name.globalSets == 0 &&\n                 name.aliasingGets == 1 && name.getTotalRefs() == 2) {\n        // {@code name} meets condition (c), so we try to inline it.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              break;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..9baa6db5 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,34 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.globalSets == 1 && name.localSets == 0 &&\n+           name.aliasingGets == 0 && name.getTotalRefs() == 1) ||\n+          (name.props != null && name.aliasingGets == 0)) {\n+        // {@code name} meets condition (a), but it's possible that its props\n+        // don't meet condition (a). So we have to add all its props to the\n+        // evaluation queue.\n+        workList.addAll(name.props);\n+      } else if (name.getTotalRefs() == 2 && name.localSets == 1 &&\n+          name.aliasingGets == 0) {\n+        // {@code name} meets condition (b), so we try to inline it.\n+        Ref ref = name.getDeclaration();\n+        Preconditions.checkState(ref != null);\n+        if (inlineAliasIfPossible(ref, namespace)) {\n+          name.removeRef(ref);\n+        }\n+      } else if (name.getLocalSets() == 0 && name.globalSets == 0 &&\n+                 name.aliasingGets == 1 && name.getTotalRefs() == 2) {\n+        // {@code name} meets condition (c), so we try to inline it.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+              break;\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}