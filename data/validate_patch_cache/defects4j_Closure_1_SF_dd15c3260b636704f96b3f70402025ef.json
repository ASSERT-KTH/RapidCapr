{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers) {\n      // Remove the unused arguments after checking for potential destructuring patterns.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        NodeUtil.removeChild(argList, lastArg);\n        compiler.reportCodeChange();\n\n        if (!lastArg.hasChildren()) {\n          // Node made invalid by NodeUtil.removeChild, so create a new one here.\n          lastArg = new Node(Token.DEFAULT_VALUE);\n        }\n        lastArg = lastArg.getPrevious();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..19e308a5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -367,19 +367,9 @@ class RemoveUnusedVars\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n+\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n@@ -388,17 +378,19 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n+\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+      // Remove the unused arguments after checking for potential destructuring patterns.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        NodeUtil.removeChild(argList, lastArg);\n+        compiler.reportCodeChange();\n+\n+        if (!lastArg.hasChildren()) {\n+          // Node made invalid by NodeUtil.removeChild, so create a new one here.\n+          lastArg = new Node(Token.DEFAULT_VALUE);\n         }\n+        lastArg = lastArg.getPrevious();\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}