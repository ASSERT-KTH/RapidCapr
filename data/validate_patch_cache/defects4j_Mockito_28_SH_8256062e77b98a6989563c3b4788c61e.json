{
    "patch": "for(Field injectionCandidateField : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n    Optional<Object> filteredCandidate = mockCandidateFilter.filterCandidate(mocks, injectionCandidateField, fieldInstance);\n    if (filteredCandidate.isPresent()) {\n        Injections.inject(fieldInstance, injectionCandidateField, filteredCandidate.get());\n        break;\n    } else if (injectionCandidateField.getType().isAssignableFrom(MockitoAnnotationsHelper.class)){\n        Injections.inject(fieldInstance, injectionCandidateField, mockitoAnnotationsHelper);\n        break;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9d3286f53 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,16 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+for(Field injectionCandidateField : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+    Optional<Object> filteredCandidate = mockCandidateFilter.filterCandidate(mocks, injectionCandidateField, fieldInstance);\n+    if (filteredCandidate.isPresent()) {\n+        Injections.inject(fieldInstance, injectionCandidateField, filteredCandidate.get());\n+        break;\n+    } else if (injectionCandidateField.getType().isAssignableFrom(MockitoAnnotationsHelper.class)){\n+        Injections.inject(fieldInstance, injectionCandidateField, mockitoAnnotationsHelper);\n+        break;\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}