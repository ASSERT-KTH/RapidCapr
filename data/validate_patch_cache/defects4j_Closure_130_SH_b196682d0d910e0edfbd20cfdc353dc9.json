{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0) {\n        // {@code name} meets condition (b).\n        if (name.getDeclaration() != null &&\n            !NodeUtil.isConstantName(name.getDeclaration())) {\n          // Don't inline global variables that are marked as constants.\n          name.addChildrenToNamespace(namespace);\n          name.removeAllRefs();\n        }\n      } else if (name.aliasingGets > 0) { // Add this line\n        // {@code name} meets condition (c).\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..78bebeb6 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,25 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0) {\n+        // {@code name} meets condition (b).\n+        if (name.getDeclaration() != null &&\n+            !NodeUtil.isConstantName(name.getDeclaration())) {\n+          // Don't inline global variables that are marked as constants.\n+          name.addChildrenToNamespace(namespace);\n+          name.removeAllRefs();\n+        }\n+      } else if (name.aliasingGets > 0) { // Add this line\n+        // {@code name} meets condition (c).\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}