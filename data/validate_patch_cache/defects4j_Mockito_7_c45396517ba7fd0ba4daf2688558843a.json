{
    "patch": "    private void readTypeVariables() {\n        TypeVariable<?>[] typeParameters = containingClass.getTypeParameters();\n        if (typeParameters.length != actualTypeArguments.length) {\n            throw new RuntimeException(\"Can't handle missing type parameters\");\n        }\n\n        for (int i = 0; i < typeParameters.length; i++) {\n            TypeVariable<?> typeVariable = typeParameters[i];\n            Type actualType = actualTypeArguments[i];\n            declaredTypeArguments.put(typeVariable, actualType);\n            registerTypeVariablesOn(actualType);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..42fccb46a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,19 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        TypeVariable<?>[] typeParameters = containingClass.getTypeParameters();\n+        if (typeParameters.length != actualTypeArguments.length) {\n+            throw new RuntimeException(\"Can't handle missing type parameters\");\n+        }\n+\n+        for (int i = 0; i < typeParameters.length; i++) {\n+            TypeVariable<?> typeVariable = typeParameters[i];\n+            Type actualType = actualTypeArguments[i];\n+            declaredTypeArguments.put(typeVariable, actualType);\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}