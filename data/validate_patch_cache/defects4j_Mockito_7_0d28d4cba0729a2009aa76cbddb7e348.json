{
    "patch": "    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n        Type[] bounds = typeVariable.getBounds();\n        for (Type bound : bounds) {\n            registerTypeVariablesOn(bound);\n            if (bound instanceof ParameterizedType) {\n                return ((ParameterizedType) bound).getActualTypeArguments()[0];\n            }\n        }\n        return typeVariable;\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..64c1a5da7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,16 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+        Type[] bounds = typeVariable.getBounds();\n+        for (Type bound : bounds) {\n+            registerTypeVariablesOn(bound);\n+            if (bound instanceof ParameterizedType) {\n+                return ((ParameterizedType) bound).getActualTypeArguments()[0];\n+            }\n+        }\n+        return typeVariable;\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}