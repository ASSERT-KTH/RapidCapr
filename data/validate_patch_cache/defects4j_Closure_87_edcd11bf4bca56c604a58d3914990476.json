{
    "patch": "private String insertOrOperatorIfNeeded(Node n) {\n  if (n.getType() == Token.FUNCTION) {\n    Node body = n.getLastChild();\n    if (body.getChildCount() == 1) {\n      Node statement = body.getFirstChild();\n      if (statement.getType() == Token.EXPR_RESULT) {\n        Node call = statement.getFirstChild();\n        if (call.getType() == Token.CALL) {\n          String callexpr = outputTokenString(call.getFirstChild(), false /* keep going */);\n          if (callexpr.length() > 0 && !callexpr.endsWith(\".\") &&\n              !callexpr.endsWith(\"[\")) {\n            Node arg = call.getChildAtIndex(1);\n            String argName = arg != null ? outputTokenString(arg.getFirstChild(), false /* keep going */) : null;\n            if (argName == null || argName.isEmpty() || argName.endsWith(\")\") || argName.equals(\"undefined\")) {\n              argName = \"''\";\n            } else if (argName.equals(\"null\")) {\n              argName = \"null\";\n            } else if (!argName.contains(\"||\")) {\n              argName = argName + \" || ''\";\n            }\n            call.replaceChild(arg, createStringNode(argName));\n            return null;\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\nprivate Node createStringNode(String value) {\n  Node stringNode = Node.newString(value);\n  stringNode.setLength(value.length());\n  stringNode.setLineno(0);\n  stringNode.setCharno(0);\n  stringNode.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n  stringNode.makeNonIndexable();\n  return stringNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..bedc56e3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,45 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+private String insertOrOperatorIfNeeded(Node n) {\n+  if (n.getType() == Token.FUNCTION) {\n+    Node body = n.getLastChild();\n+    if (body.getChildCount() == 1) {\n+      Node statement = body.getFirstChild();\n+      if (statement.getType() == Token.EXPR_RESULT) {\n+        Node call = statement.getFirstChild();\n+        if (call.getType() == Token.CALL) {\n+          String callexpr = outputTokenString(call.getFirstChild(), false /* keep going */);\n+          if (callexpr.length() > 0 && !callexpr.endsWith(\".\") &&\n+              !callexpr.endsWith(\"[\")) {\n+            Node arg = call.getChildAtIndex(1);\n+            String argName = arg != null ? outputTokenString(arg.getFirstChild(), false /* keep going */) : null;\n+            if (argName == null || argName.isEmpty() || argName.endsWith(\")\") || argName.equals(\"undefined\")) {\n+              argName = \"''\";\n+            } else if (argName.equals(\"null\")) {\n+              argName = \"null\";\n+            } else if (!argName.contains(\"||\")) {\n+              argName = argName + \" || ''\";\n+            }\n+            call.replaceChild(arg, createStringNode(argName));\n+            return null;\n+          }\n+        }\n       }\n     }\n-\n-    return false;\n   }\n+  return null;\n+}\n+\n+private Node createStringNode(String value) {\n+  Node stringNode = Node.newString(value);\n+  stringNode.setLength(value.length());\n+  stringNode.setLineno(0);\n+  stringNode.setCharno(0);\n+  stringNode.setJSType(registry.getNativeType(JSTypeNative.STRING_TYPE));\n+  stringNode.makeNonIndexable();\n+  return stringNode;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}