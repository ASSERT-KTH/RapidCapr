{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // TODO: Protect from ArrayIndexOutOfBounds\n        if (input.length() <= index + 1) {\n            return 0;\n        }\n        int codePoint;\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if (firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n            }\n\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n            if (end == input.length()) {\n                return 0;\n            }\n\n            int radix = isHex ? 16 : 10;\n            String str = input.subSequence(start, end).toString();\n            try {\n                codePoint = Integer.parseInt(str, radix);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n            if (codePoint > MAX_CODE_POINT) {\n                return 0;\n            }\n            out.write(codePoint);\n            return end - index + 1;\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..7464291c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,36 +32,42 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n         // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        if (input.length() <= index + 1) {\n+            return 0;\n+        }\n+        int codePoint;\n+        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n             char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n+            if (firstChar == 'x' || firstChar == 'X') {\n                 start++;\n                 isHex = true;\n             }\n \n             int end = start;\n-            while(input.charAt(end) != ';') {\n+            while (end < input.length() && input.charAt(end) != ';') {\n                 end++;\n             }\n+            if (end == input.length()) {\n+                return 0;\n+            }\n \n-            int entityValue;\n+            int radix = isHex ? 16 : 10;\n+            String str = input.subSequence(start, end).toString();\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n+                codePoint = Integer.parseInt(str, radix);\n+            } catch (NumberFormatException nfe) {\n                 return 0;\n             }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            if (codePoint > MAX_CODE_POINT) {\n+                return 0;\n+            }\n+            out.write(codePoint);\n+            return end - index + 1;\n         }\n         return 0;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}