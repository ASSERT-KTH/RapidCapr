{
    "patch": "public static double[] bracket(final UnivariateRealFunction function,\n                               final double initial,\n                               final double lowerBound,\n                               final double upperBound,\n                               final int maximumIterations)\n        throws ConvergenceException, FunctionEvaluationException {\n    \n    if (function == null) {\n        throw new IllegalArgumentException(\"Function must not be null\");\n    }\n    if (maximumIterations <= 0) {\n        throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n    }\n    if (!Double.isFinite(initial) || !Double.isFinite(lowerBound) || !Double.isFinite(upperBound)) {\n        throw new IllegalArgumentException(\"Invalid argument value: \" +\n                                             \"initial=\" + initial +\n                                             \", lower bound=\" + lowerBound +\n                                             \", upper bound=\" + upperBound);\n    }\n    if (initial < lowerBound || initial > upperBound) {\n        throw new IllegalArgumentException(\"Initial value must be within the bounds: \" +\n                                             \"initial=\" + initial +\n                                             \", lower bound=\" + lowerBound +\n                                             \", upper bound=\" + upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa = function.value(a);\n    double fb;\n    int numIterations = 1;\n\n    final double growthLimit = 1.5;\n    final double stagnationLimit = 0.1;\n\n    double previousInterval = Double.MAX_VALUE;\n    while (numIterations < maximumIterations) {\n        if (fa * fb <= 0.0) {\n            return new double[] { a, b };\n        }\n\n        if (Math.abs(fa) < Math.abs(fb)) {\n            final double tmp1 = a;\n            a = b;\n            b = tmp1;\n            final double tmp2 = fa;\n            fa = fb;\n            fb = tmp2;\n        }\n\n        double delta = 0.5 * (b - a);\n        double oldA = a;\n        double oldFa = fa;\n        if (guessOutOfInterval(delta, growthLimit, stagnationLimit)) {\n            a = Math.max(b - delta, lowerBound);\n            fa = function.value(a);\n            ++numIterations;\n        } else if (guessOutOfInterval(delta, stagnationLimit, growthLimit)) {\n            b = Math.min(a + delta, upperBound);\n            fb = function.value(b);\n            ++numIterations;\n        } else {\n            a = Math.max(b - delta, lowerBound);\n            fa = function.value(a);\n            ++numIterations;\n            if (Math.abs(fa) < Math.abs(oldFa)) {\n                delta = 1.5 * (b - a);\n                b = oldA;\n                a -= delta;\n                if (a == oldA) {\n                    delta = Math.abs(0.5 * delta);\n                }\n            }\n        }\n\n        if (Math.abs(delta) < getAbsoluteAccuracy() || Math.abs(fa) == 0) {\n            return new double[] { a, a };\n        }\n        previousInterval = Math.abs(b - oldA);\n    }\n\n    throw new ConvergenceException(\"maximum iterations ({0}) exceeded\", maximumIterations);\n}\n\nprivate static boolean guessOutOfInterval(final double jump, final double small, final double big) {\n    return jump <= (small * big);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..27d0c7601 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,94 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+public static double[] bracket(final UnivariateRealFunction function,\n+                               final double initial,\n+                               final double lowerBound,\n+                               final double upperBound,\n+                               final int maximumIterations)\n+        throws ConvergenceException, FunctionEvaluationException {\n+    \n+    if (function == null) {\n+        throw new IllegalArgumentException(\"Function must not be null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n+    }\n+    if (!Double.isFinite(initial) || !Double.isFinite(lowerBound) || !Double.isFinite(upperBound)) {\n+        throw new IllegalArgumentException(\"Invalid argument value: \" +\n+                                             \"initial=\" + initial +\n+                                             \", lower bound=\" + lowerBound +\n+                                             \", upper bound=\" + upperBound);\n+    }\n+    if (initial < lowerBound || initial > upperBound) {\n+        throw new IllegalArgumentException(\"Initial value must be within the bounds: \" +\n+                                             \"initial=\" + initial +\n+                                             \", lower bound=\" + lowerBound +\n+                                             \", upper bound=\" + upperBound);\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fa = function.value(a);\n+    double fb;\n+    int numIterations = 1;\n+\n+    final double growthLimit = 1.5;\n+    final double stagnationLimit = 0.1;\n+\n+    double previousInterval = Double.MAX_VALUE;\n+    while (numIterations < maximumIterations) {\n+        if (fa * fb <= 0.0) {\n+            return new double[] { a, b };\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+\n+        if (Math.abs(fa) < Math.abs(fb)) {\n+            final double tmp1 = a;\n+            a = b;\n+            b = tmp1;\n+            final double tmp2 = fa;\n+            fa = fb;\n+            fb = tmp2;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+\n+        double delta = 0.5 * (b - a);\n+        double oldA = a;\n+        double oldFa = fa;\n+        if (guessOutOfInterval(delta, growthLimit, stagnationLimit)) {\n+            a = Math.max(b - delta, lowerBound);\n             fa = function.value(a);\n-            \n+            ++numIterations;\n+        } else if (guessOutOfInterval(delta, stagnationLimit, growthLimit)) {\n+            b = Math.min(a + delta, upperBound);\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            ++numIterations;\n+        } else {\n+            a = Math.max(b - delta, lowerBound);\n+            fa = function.value(a);\n+            ++numIterations;\n+            if (Math.abs(fa) < Math.abs(oldFa)) {\n+                delta = 1.5 * (b - a);\n+                b = oldA;\n+                a -= delta;\n+                if (a == oldA) {\n+                    delta = Math.abs(0.5 * delta);\n+                }\n+            }\n+        }\n+\n+        if (Math.abs(delta) < getAbsoluteAccuracy() || Math.abs(fa) == 0) {\n+            return new double[] { a, a };\n         }\n-        \n-        return new double[]{a, b};\n+        previousInterval = Math.abs(b - oldA);\n     }\n \n+    throw new ConvergenceException(\"maximum iterations ({0}) exceeded\", maximumIterations);\n+}\n+\n+private static boolean guessOutOfInterval(final double jump, final double small, final double big) {\n+    return jump <= (small * big);\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}