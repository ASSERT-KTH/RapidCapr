{
    "patch": "        final ParametricUnivariateSolver solver = new BrentSolver();\n        final double[] optimized =\n                solver.solve(maxEval, new UnivariateFunction() {\n            public double value(final double x) throws ConvergenceException {\n                return MathArrays.distance(getObservations(), new Gaussian.Parametric().value(x, guess));\n            }\n        }, min, max, getObservations()[0].getX());\n        return new Gaussian.Parametric().value(optimized[0], guess);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..2df4b7507 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,14 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final ParametricUnivariateSolver solver = new BrentSolver();\n+        final double[] optimized =\n+                solver.solve(maxEval, new UnivariateFunction() {\n+            public double value(final double x) throws ConvergenceException {\n+                return MathArrays.distance(getObservations(), new Gaussian.Parametric().value(x, guess));\n+            }\n+        }, min, max, getObservations()[0].getX());\n+        return new Gaussian.Parametric().value(optimized[0], guess);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}