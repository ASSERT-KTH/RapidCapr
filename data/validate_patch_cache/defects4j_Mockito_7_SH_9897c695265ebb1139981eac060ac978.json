{
    "patch": "public <T> void process(Field field, DeepSerializableState<T> state) throws IllegalAccessException, NotFoundException {\n    if (field.getType().equals(state.getTarget().getClass())) {\n        field.setAccessible(true);\n        field.set(state.getParent(), state.getTarget());\n    } else if (state.getTarget() instanceof DeepMock) {\n        DeepMock mock = (DeepMock)state.getTarget();\n        MockitoFrameworkLoader.instance().resetMock(mock);\n        field.setAccessible(true);\n        field.set(state.getParent(), mock);\n    } else {\n        DeepSerializationContext context = new DeepSerializationContext(mockHandler, objectPool);\n        DeepSerializableState<T> newState = context.initialize((Class<T>) field.getType());\n        newState.getParent().setParent(state.getParent());\n        field.setAccessible(true);\n        field.set(state.getParent(), newState.getParent());\n    }\n    if (field.getGenericType() instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) field.getGenericType();\n        readTypeVariables(typeVariable);\n    }\n}\n\nprivate void readTypeVariables(TypeVariable<?> typeVariable) {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n    if(actualTypeArgument != null) {\n        registerTypeVariablesOn(actualTypeArgument);\n    }\n}\n\nprivate void registerTypeVariablesOn(Type type) {\n    if (type instanceof ParameterizedType) {\n        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n        for (Type actualTypeArgument : actualTypeArguments) {\n            if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n                readTypeVariables(tv);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..6bd2ed9ee 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,49 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+public <T> void process(Field field, DeepSerializableState<T> state) throws IllegalAccessException, NotFoundException {\n+    if (field.getType().equals(state.getTarget().getClass())) {\n+        field.setAccessible(true);\n+        field.set(state.getParent(), state.getTarget());\n+    } else if (state.getTarget() instanceof DeepMock) {\n+        DeepMock mock = (DeepMock)state.getTarget();\n+        MockitoFrameworkLoader.instance().resetMock(mock);\n+        field.setAccessible(true);\n+        field.set(state.getParent(), mock);\n+    } else {\n+        DeepSerializationContext context = new DeepSerializationContext(mockHandler, objectPool);\n+        DeepSerializableState<T> newState = context.initialize((Class<T>) field.getType());\n+        newState.getParent().setParent(state.getParent());\n+        field.setAccessible(true);\n+        field.set(state.getParent(), newState.getParent());\n+    }\n+    if (field.getGenericType() instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) field.getGenericType();\n+        readTypeVariables(typeVariable);\n+    }\n+}\n+\n+private void readTypeVariables(TypeVariable<?> typeVariable) {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type actualTypeArgument = getActualTypeArgumentFor(typeVariable);\n+    if(actualTypeArgument != null) {\n+        registerTypeVariablesOn(actualTypeArgument);\n+    }\n+}\n+\n+private void registerTypeVariablesOn(Type type) {\n+    if (type instanceof ParameterizedType) {\n+        Type[] actualTypeArguments = ((ParameterizedType) type).getActualTypeArguments();\n+        for (Type actualTypeArgument : actualTypeArguments) {\n+            if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> tv = (TypeVariable<?>) actualTypeArgument;\n+                readTypeVariables(tv);\n+            }\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}