{
    "patch": "                case Token.IF:\n                  // If a reference is in a condition we can't track it since we\n                  // can't determine which branch executed.\n                  return;\n                default:\n                  if (NodeUtil.isAssignmentOp(parent) &&\n                      parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = Name.Type.OTHER;\n                  }\n              }\n            }\n            name = n.getString();\n            break;\n          case Token.GETPROP:\n            // This may be a namespaced name get or set.\n            if (parent != null) {\n              switch (parent.getType()) {\n                case Token.ASSIGN:\n                  if (parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = getValueType(n.getNext());\n                    isPropAssign = true;\n                  }\n                  break;\n                case Token.INC:\n                case Token.DEC:\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  break;\n                case Token.GETPROP:\n                  return;\n                case Token.IF:\n                  // If a reference is in a condition we can't track it since we\n                  // can't determine which branch executed.\n                  return;\n                default:\n                  if (NodeUtil.isAssignmentOp(parent) &&\n                      parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = Name.Type.OTHER;\n                  }\n              }\n            }\n            name = n.getQualifiedName();\n            if (name == null) {\n              return;\n            }\n            break;\n          default:\n            return;\n        }\n\n        // We are only interested in global names.\n        if (!isGlobalNameReference(name, scope)) {\n          return;\n        }\n\n        if (isSet) {\n          if (isGlobalScope(scope)) {\n            handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n          } else {\n            handleSetFromLocal(module, scope, n, parent, name);\n          }\n        } else {\n          handleGet(module, scope, n, parent, name);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..1126845f 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,74 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+                case Token.IF:\n+                  // If a reference is in a condition we can't track it since we\n+                  // can't determine which branch executed.\n+                  return;\n+                default:\n+                  if (NodeUtil.isAssignmentOp(parent) &&\n+                      parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = Name.Type.OTHER;\n+                  }\n+              }\n+            }\n+            name = n.getString();\n+            break;\n+          case Token.GETPROP:\n+            // This may be a namespaced name get or set.\n+            if (parent != null) {\n+              switch (parent.getType()) {\n+                case Token.ASSIGN:\n+                  if (parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = getValueType(n.getNext());\n+                    isPropAssign = true;\n+                  }\n+                  break;\n+                case Token.INC:\n+                case Token.DEC:\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  break;\n+                case Token.GETPROP:\n+                  return;\n+                case Token.IF:\n+                  // If a reference is in a condition we can't track it since we\n+                  // can't determine which branch executed.\n+                  return;\n+                default:\n+                  if (NodeUtil.isAssignmentOp(parent) &&\n+                      parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = Name.Type.OTHER;\n+                  }\n+              }\n+            }\n+            name = n.getQualifiedName();\n+            if (name == null) {\n+              return;\n+            }\n+            break;\n+          default:\n+            return;\n+        }\n+\n+        // We are only interested in global names.\n+        if (!isGlobalNameReference(name, scope)) {\n+          return;\n+        }\n+\n+        if (isSet) {\n+          if (isGlobalScope(scope)) {\n+            handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+          } else {\n+            handleSetFromLocal(module, scope, n, parent, name);\n+          }\n+        } else {\n+          handleGet(module, scope, n, parent, name);\n+        }\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}