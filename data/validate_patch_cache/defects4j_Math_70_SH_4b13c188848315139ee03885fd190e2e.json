{
    "patch": "        double tolerance = getAbsoluteAccuracy();\n        int maxIterations = getMaximalIterationCount();\n\n        if (initial < min || initial > max) {\n            initial = (min + max) / 2.0;\n        }\n\n        double result;\n        int iterations = 0;\n        double x0 = min;\n        double x1 = initial;\n        double x2 = max;\n\n\n        while (true) {\n            double oldx2 = x2;\n            double oldx1 = x1;\n\n            double deltaX = (x2 - x0) / 4.0;\n            double x3 = x1 + deltaX;\n            double x4 = x2 - deltaX;\n\n            double f3 = 0.0;\n            try {\n                f3 = f.value(x3);\n            } catch (FunctionEvaluationException e) {\n                throw e;\n            }\n\n            double f4 = 0.0;\n            try {\n                f4 = f.value(x4);\n            } catch (FunctionEvaluationException e) {\n                throw e;\n            }\n\n            double minBound = Math.min(x3, x4);\n            double maxBound = Math.max(x3, x4);\n\n            if (f3 < f4) {\n                x2 = oldx1;\n                x1 = minBound;\n                result = x3;\n            } else {\n                x0 = oldx1;\n                x1 = maxBound;\n                result = x4;\n            }\n\n            if (Math.abs(x2 - x0) <= tolerance ||\n                    ++iterations >= maxIterations ||\n                    Math.abs(result - initial) <= tolerance) {\n                break;\n            }\n\n            if (f.value(result) < f.value(initial)) {\n                initial = result;\n            }\n        }\n\n        return initial;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..fcd252235 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,67 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        double tolerance = getAbsoluteAccuracy();\n+        int maxIterations = getMaximalIterationCount();\n+\n+        if (initial < min || initial > max) {\n+            initial = (min + max) / 2.0;\n+        }\n+\n+        double result;\n+        int iterations = 0;\n+        double x0 = min;\n+        double x1 = initial;\n+        double x2 = max;\n+\n+\n+        while (true) {\n+            double oldx2 = x2;\n+            double oldx1 = x1;\n+\n+            double deltaX = (x2 - x0) / 4.0;\n+            double x3 = x1 + deltaX;\n+            double x4 = x2 - deltaX;\n+\n+            double f3 = 0.0;\n+            try {\n+                f3 = f.value(x3);\n+            } catch (FunctionEvaluationException e) {\n+                throw e;\n+            }\n+\n+            double f4 = 0.0;\n+            try {\n+                f4 = f.value(x4);\n+            } catch (FunctionEvaluationException e) {\n+                throw e;\n+            }\n+\n+            double minBound = Math.min(x3, x4);\n+            double maxBound = Math.max(x3, x4);\n+\n+            if (f3 < f4) {\n+                x2 = oldx1;\n+                x1 = minBound;\n+                result = x3;\n+            } else {\n+                x0 = oldx1;\n+                x1 = maxBound;\n+                result = x4;\n+            }\n+\n+            if (Math.abs(x2 - x0) <= tolerance ||\n+                    ++iterations >= maxIterations ||\n+                    Math.abs(result - initial) <= tolerance) {\n+                break;\n+            }\n+\n+            if (f.value(result) < f.value(initial)) {\n+                initial = result;\n+            }\n+        }\n+\n+        return initial;\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<3.199998474121094>",
    "test_result": "FAIL"
}