{
    "patch": "    if (typeOfThis != null) {\n        JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n        if (resolvedTypeOfThis.isTruthy()) {\n            ObjectType objectTypeOfThis = resolvedTypeOfThis.autoboxAsObject();\n            if (objectTypeOfThis != null) {\n                typeOfThis = objectTypeOfThis;\n            } else {\n                t.report(ErrorType.WRONG_ARGUMENT_TYPE, typeOfThis.getName(), \"Object\", \"this\");\n                typeOfThis = JSType.UNKNOWN;\n            }\n        } else {\n            typeOfThis = JSType.UNKNOWN;\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..1e653a72 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,20 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+        JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+        if (resolvedTypeOfThis.isTruthy()) {\n+            ObjectType objectTypeOfThis = resolvedTypeOfThis.autoboxAsObject();\n+            if (objectTypeOfThis != null) {\n+                typeOfThis = objectTypeOfThis;\n+            } else {\n+                t.report(ErrorType.WRONG_ARGUMENT_TYPE, typeOfThis.getName(), \"Object\", \"this\");\n+                typeOfThis = JSType.UNKNOWN;\n+            }\n+        } else {\n+            typeOfThis = JSType.UNKNOWN;\n+        }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}