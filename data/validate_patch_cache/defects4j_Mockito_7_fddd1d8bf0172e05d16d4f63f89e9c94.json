{
    "patch": "private Type getActualTypeArgumentFor(TypeVariable tv) {\n    Type[] actualTypes = typeArgumentsMap.get(tv.getName());\n    if (actualTypes != null && actualTypes.length > 0) {\n        // If we have actual arguments, return the first one\n        return actualTypes[0];\n    } else {\n        // If we don't have actual arguments, return null\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d995e7a67 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -372,12 +372,16 @@ public abstract class GenericMetadataSupport {\n             registerTypeParametersOn(typeParameters);\n         }\n \n-        private void readTypeVariables() {\n-            for (Type type : typeVariable.getBounds()) {\n-                registerTypeVariablesOn(type);\n-            }\n-            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n-        }\n+private Type getActualTypeArgumentFor(TypeVariable tv) {\n+    Type[] actualTypes = typeArgumentsMap.get(tv.getName());\n+    if (actualTypes != null && actualTypes.length > 0) {\n+        // If we have actual arguments, return the first one\n+        return actualTypes[0];\n+    } else {\n+        // If we don't have actual arguments, return null\n+        return null;\n+    }\n+}\n \n         @Override\n         public Class<?> rawType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}