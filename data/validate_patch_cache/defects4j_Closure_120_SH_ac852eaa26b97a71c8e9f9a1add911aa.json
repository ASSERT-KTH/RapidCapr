{
    "patch": " boolean isInCatchBlock = false;\n BasicBlock currentBlock = ref.getBasicBlock();\n while (currentBlock != null) {\n   if (currentBlock.isCatch) {\n     isInCatchBlock = true;\n     break;\n   } else if (currentBlock.isFunction) {\n     break;\n   }\n   currentBlock = currentBlock.getParentBlock();\n }\n return !isInCatchBlock;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..34f8cfe4 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,18 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+ boolean isInCatchBlock = false;\n+ BasicBlock currentBlock = ref.getBasicBlock();\n+ while (currentBlock != null) {\n+   if (currentBlock.isCatch) {\n+     isInCatchBlock = true;\n+     break;\n+   } else if (currentBlock.isFunction) {\n+     break;\n+   }\n+   currentBlock = currentBlock.getParentBlock();\n+ }\n+ return !isInCatchBlock;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}