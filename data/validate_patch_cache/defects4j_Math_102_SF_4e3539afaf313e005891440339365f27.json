{
    "patch": "import java.util.Random;\n\npublic class ExampleClass {\n    public static void main(String[] args) {\n        double[] expected = {10.0d, 10.0d, 10.0d};\n        long[] observed = new long[3];\n        Random rand = new Random();\n        for (int i = 0; i < observed.length; i++) {\n            observed[i] = (long) rand.nextInt(20);\n        }\n        double chiSquare = chiSquare(expected, observed);\n        System.out.println(chiSquare);\n    }\n\n    public static double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n        if ((expected.length < 2) || (expected.length != observed.length)) {\n            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n        }\n        if (!isPositive(expected) || !isNonNegative(observed)) {\n            throw new IllegalArgumentException(\n                    \"observed counts must be non-negative and expected counts must be postive\");\n        }\n        double sumSq = 0.0d;\n        double dev = 0.0d;\n        for (int i = 0; i < observed.length; i++) {\n            dev = ((double) observed[i] - expected[i]);\n            sumSq += dev * dev / expected[i];\n        }\n        return sumSq;\n    }\n\n    public static boolean isPositive(double[] values) {\n        for (double d : values) {\n            if (d <= 0.0d) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean isNonNegative(long[] values) {\n        for (long l : values) {\n            if (l < 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..da9a827f0 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,25 +61,56 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n+import java.util.Random;\n+\n+public class ExampleClass {\n+    public static void main(String[] args) {\n+        double[] expected = {10.0d, 10.0d, 10.0d};\n+        long[] observed = new long[3];\n+        Random rand = new Random();\n+        for (int i = 0; i < observed.length; i++) {\n+            observed[i] = (long) rand.nextInt(20);\n+        }\n+        double chiSquare = chiSquare(expected, observed);\n+        System.out.println(chiSquare);\n+    }\n+\n+    public static double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n         if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+            throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n         }\n         if (!isPositive(expected) || !isNonNegative(observed)) {\n             throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+                    \"observed counts must be non-negative and expected counts must be postive\");\n         }\n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+            dev = ((double) observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n         }\n         return sumSq;\n     }\n \n+    public static boolean isPositive(double[] values) {\n+        for (double d : values) {\n+            if (d <= 0.0d) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean isNonNegative(long[] values) {\n+        for (long l : values) {\n+            if (l < 0) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+\n     /**\n      * {@inheritDoc}\n      * <p><strong>Note: </strong>This implementation rescales the ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}