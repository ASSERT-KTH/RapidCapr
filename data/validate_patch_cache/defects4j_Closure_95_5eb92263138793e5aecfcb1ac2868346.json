{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualfied names.\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n                parent.getType() == Token.FUNCTION ||\n                parent.getType() == Token.VAR ||\n                parent.getType() == Token.LET ||\n                parent.getType() == Token.CONST ||\n                parent.getType() == Token.CLASS ||\n                parent.getType() == Token.PARAM_LIST ||\n                parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n                (parent.getType() == Token.VAR ||\n                        parent.getType() == Token.FUNCTION);\n    } else {\n        Preconditions.checkArgument(\n                n.getType() == Token.GETPROP &&\n                        (parent.getType() == Token.ASSIGN ||\n                                parent.getType() == Token.EXPR_RESULT));\n    }\n    // Only allow declarations with non-empty names.\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    if (scope.isDeclared(variableName, false)) {\n        // If the variable is already declared in a descendant scope, do nothing.\n        return;\n    }\n\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope;\n\n    if (shouldDeclareOnGlobalThis) {\n        scopeToDeclareIn = scope.getGlobalScope();\n    }\n\n    // Get the CompilerInput object corresponding to the current source file.\n    CompilerInput input = compiler.getInput(sourceName);\n\n    if (inferred) {\n        // If the variable type is inferred, just store its deferred type information. Do not declare it yet.\n        setDeferredType(n, type);\n    } else {\n        // Declare the variable in the given scope.\n        if (scopeToDeclareIn.isGlobal() && input.isExtern()) {\n            // If the variable is declared in the global scope and was declared in an externs file, also declare it\n            // on the \"global this\" object, unless it's already declared there or on the externExports object.\n            if (!compiler.getExternExports().containsKey(variableName)\n                    && !typeRegistry.getNativeType(JSTypeNative.GLOBAL_THIS).hasProperty(variableName)) {\n                ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n                globalThis.defineDeclaredProperty(variableName, type, true);\n            }\n        }\n        scopeToDeclareIn.declare(variableName, n, type, input, false);\n    }\n\n    if (parent.getType() == Token.CLASS) {\n        // If the variable is in a class, declare it also as a property on the class prototype.\n        JSType classType = parent.getJSType();\n        if (classType != null) {\n            ObjectType classInstance = ObjectType.cast(classType).getImplicitPrototype();\n            Preconditions.checkNotNull(classInstance, \"Parent class type must not be null\");\n            classInstance.defineDeclaredProperty(variableName, type, false);\n        }\n    }\n\n    if (scopeToDeclareIn.isGlobal() && !(type instanceof FunctionType) && !(type instanceof NamespaceType)) {\n        // If we're in the global scope and the variable is not a function or namespace definition, declare it\n        // on the externExports object, unless it's already declared there.\n        if (!compiler.getExternExports().containsKey(variableName)) {\n            compiler.getExternExports().put(variableName, type);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..5bdcb57f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,85 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n+    // Only allow declarations of NAMEs and qualfied names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n+                parent.getType() == Token.FUNCTION ||\n+                parent.getType() == Token.VAR ||\n+                parent.getType() == Token.LET ||\n+                parent.getType() == Token.CONST ||\n+                parent.getType() == Token.CLASS ||\n+                parent.getType() == Token.PARAM_LIST ||\n+                parent.getType() == Token.CATCH);\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n+                (parent.getType() == Token.VAR ||\n+                        parent.getType() == Token.FUNCTION);\n+    } else {\n         Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+                n.getType() == Token.GETPROP &&\n+                        (parent.getType() == Token.ASSIGN ||\n+                                parent.getType() == Token.EXPR_RESULT));\n+    }\n+    // Only allow declarations with non-empty names.\n+    String variableName = n.getQualifiedName();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    if (scope.isDeclared(variableName, false)) {\n+        // If the variable is already declared in a descendant scope, do nothing.\n+        return;\n+    }\n+\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    Scope scopeToDeclareIn = scope;\n+\n+    if (shouldDeclareOnGlobalThis) {\n+        scopeToDeclareIn = scope.getGlobalScope();\n+    }\n+\n+    // Get the CompilerInput object corresponding to the current source file.\n+    CompilerInput input = compiler.getInput(sourceName);\n+\n+    if (inferred) {\n+        // If the variable type is inferred, just store its deferred type information. Do not declare it yet.\n+        setDeferredType(n, type);\n+    } else {\n+        // Declare the variable in the given scope.\n+        if (scopeToDeclareIn.isGlobal() && input.isExtern()) {\n+            // If the variable is declared in the global scope and was declared in an externs file, also declare it\n+            // on the \"global this\" object, unless it's already declared there or on the externExports object.\n+            if (!compiler.getExternExports().containsKey(variableName)\n+                    && !typeRegistry.getNativeType(JSTypeNative.GLOBAL_THIS).hasProperty(variableName)) {\n+                ObjectType globalThis = typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+                globalThis.defineDeclaredProperty(variableName, type, true);\n+            }\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+        scopeToDeclareIn.declare(variableName, n, type, input, false);\n+    }\n+\n+    if (parent.getType() == Token.CLASS) {\n+        // If the variable is in a class, declare it also as a property on the class prototype.\n+        JSType classType = parent.getJSType();\n+        if (classType != null) {\n+            ObjectType classInstance = ObjectType.cast(classType).getImplicitPrototype();\n+            Preconditions.checkNotNull(classInstance, \"Parent class type must not be null\");\n+            classInstance.defineDeclaredProperty(variableName, type, false);\n         }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+    if (scopeToDeclareIn.isGlobal() && !(type instanceof FunctionType) && !(type instanceof NamespaceType)) {\n+        // If we're in the global scope and the variable is not a function or namespace definition, declare it\n+        // on the externExports object, unless it's already declared there.\n+        if (!compiler.getExternExports().containsKey(variableName)) {\n+            compiler.getExternExports().put(variableName, type);\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}