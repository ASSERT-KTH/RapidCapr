{
    "patch": "      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.CLASS:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  private static boolean isImmutableValue(Node node) {\n    switch (node.getToken()) {\n      // function, regexp, and object/array literals with only literal children\n      // are treated as immutable for the purposes of dataflow analysis.\n      // A CANNOT_CHANGE_PROPERTY property is added to these objects so that,\n      // if a client sees one of these values, it can statically reason that the\n      // contents of the value won't change.\n      case Token.CLASS:\n      case Token.FUNCTION:\n      case Token.REGEXP:\n        return true;\n      case Token.ARRAYLIT:\n        for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n          if (!isImmutableValue(child)) {\n            return false;\n          }\n        }\n        return true;\n      case Token.OBJECTLIT:\n        for (Node key = node.getFirstChild(); key != null; key = key.getNext()) {\n          if (!isImmutableValue(key.getFirstChild())) {\n            return false;\n          }\n        }\n        return true;\n      default:\n        return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..01c52ed9 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,58 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+      case Token.CLASS:\n+        // Literals objects with non-literal children are allowed.\n+        return true;\n+      default:\n+        // Other op force a local value:\n+        //  x = '' + g (x is now an local string)\n+        //  x -= g (x is now an local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n+    }\n+  }\n+\n+  private static boolean isImmutableValue(Node node) {\n+    switch (node.getToken()) {\n+      // function, regexp, and object/array literals with only literal children\n+      // are treated as immutable for the purposes of dataflow analysis.\n+      // A CANNOT_CHANGE_PROPERTY property is added to these objects so that,\n+      // if a client sees one of these values, it can statically reason that the\n+      // contents of the value won't change.\n+      case Token.CLASS:\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+        return true;\n+      case Token.ARRAYLIT:\n+        for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+          if (!isImmutableValue(child)) {\n+            return false;\n+          }\n+        }\n         return true;\n+      case Token.OBJECTLIT:\n+        for (Node key = node.getFirstChild(); key != null; key = key.getNext()) {\n+          if (!isImmutableValue(key.getFirstChild())) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}