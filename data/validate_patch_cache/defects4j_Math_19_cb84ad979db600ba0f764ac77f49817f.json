{
    "patch": "                if (boundaries != null) {\n                    for (int i = 0; i < init.length; i++) {\n                        if (Double.isInfinite(boundaries[0][i]) || Double.isInfinite(boundaries[1][i])) {\n                            throw new MathUnsupportedOperationException();\n                        }\n                    }\n                    final double norm = Boundaries.normalize(boundaries, init, inputSigma);\n                    if (norm >= Double.POSITIVE_INFINITY) {\n                        throw new NumberIsTooLargeException(norm, Double.POSITIVE_INFINITY, false);\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..1c2ae1ca6 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,17 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+                if (boundaries != null) {\n+                    for (int i = 0; i < init.length; i++) {\n+                        if (Double.isInfinite(boundaries[0][i]) || Double.isInfinite(boundaries[1][i])) {\n+                            throw new MathUnsupportedOperationException();\n+                        }\n+                    }\n+                    final double norm = Boundaries.normalize(boundaries, init, inputSigma);\n+                    if (norm >= Double.POSITIVE_INFINITY) {\n+                        throw new NumberIsTooLargeException(norm, Double.POSITIVE_INFINITY, false);\n+                    }\n+                }\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}