{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    int argCount = invocation.getRawArguments().length;\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher m = matchers.get(position);\n        if (m instanceof CapturesArguments) {\n            if (!invocation.getMethod().isVarArgs() || position < invocation.getMethod().getParameterCount() - 1) {\n                ((CapturesArguments) m).captureFrom(argCount > position ? invocation.getRawArguments()[position] : null);\n            } else {\n                Object varArgs = invocation.getRawArguments()[position];\n                // Check if the vararg is an array or not\n                if (varArgs != null && varArgs.getClass().isArray()) {\n                    int length = Array.getLength(varArgs);\n                    for (int i = 0; i < length; i++) {\n                        Object varArg = Array.get(varArgs, i);\n                        ((CapturesArguments) m).captureFrom(varArg);\n                    }\n                } else {\n                  ",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5758e1f3f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,24 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n-                }\n-            }\n-        }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n-    }\n+public void captureArgumentsFrom(Invocation invocation) {\n+    int argCount = invocation.getRawArguments().length;\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher m = matchers.get(position);\n+        if (m instanceof CapturesArguments) {\n+            if (!invocation.getMethod().isVarArgs() || position < invocation.getMethod().getParameterCount() - 1) {\n+                ((CapturesArguments) m).captureFrom(argCount > position ? invocation.getRawArguments()[position] : null);\n+            } else {\n+                Object varArgs = invocation.getRawArguments()[position];\n+                // Check if the vararg is an array or not\n+                if (varArgs != null && varArgs.getClass().isArray()) {\n+                    int length = Array.getLength(varArgs);\n+                    for (int i = 0; i < length; i++) {\n+                        Object varArg = Array.get(varArgs, i);\n+                        ((CapturesArguments) m).captureFrom(varArg);\n+                    }\n+                } else {\n+                  \n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}