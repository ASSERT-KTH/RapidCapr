{
    "patch": "import java.util.LinkedHashSet;\n\nif (cfa != null) {\n  List<Node> allFollowers = new LinkedHashSet<Node>();\n  allFollowers.add(finallyNode);\n  if (NodeUtil.hasFinally(parent)) {\n    List<Node> finallyFollowers = cfa.getNodeEnds(parent.getLastChild());\n    allFollowers.addAll(finallyFollowers);\n  }\n  for (Node follower : allFollowers) {\n    cfa.createEdge(fromNode, Branch.UNCOND, follower);\n  }\n} else {\n  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..2878e85e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,21 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+import java.util.LinkedHashSet;\n+\n+if (cfa != null) {\n+  List<Node> allFollowers = new LinkedHashSet<Node>();\n+  allFollowers.add(finallyNode);\n+  if (NodeUtil.hasFinally(parent)) {\n+    List<Node> finallyFollowers = cfa.getNodeEnds(parent.getLastChild());\n+    allFollowers.addAll(finallyFollowers);\n+  }\n+  for (Node follower : allFollowers) {\n+    cfa.createEdge(fromNode, Branch.UNCOND, follower);\n+  }\n+} else {\n+  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}