{
    "patch": "            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n                Object vararg = Array.get(invocation.getRawArguments(), indexOfVararg);\n                if (vararg.getClass().isArray()) {\n                    Object[] args = (Object[]) vararg;\n                    for (Object arg : args) {\n                        ((CapturesArguments) m).captureFrom(arg);\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(vararg);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..eb74436a3 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n+                Object vararg = Array.get(invocation.getRawArguments(), indexOfVararg);\n+                if (vararg.getClass().isArray()) {\n+                    Object[] args = (Object[]) vararg;\n+                    for (Object arg : args) {\n+                        ((CapturesArguments) m).captureFrom(arg);\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(vararg);\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}