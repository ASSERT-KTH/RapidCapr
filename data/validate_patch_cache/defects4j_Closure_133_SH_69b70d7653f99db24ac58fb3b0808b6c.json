{
    "patch": "private String getRemainingJSDocLine() {\n    StringBuilder sb = new StringBuilder();\n    while (true) {\n        char c = stream.peekChar();\n        if (c == '\\0') {\n            break;\n        }\n        stream.advance(1);\n        if (c == '\\n' || c == '\\r') {\n            if (sb.length() > 0) {\n                break;\n            }\n        } else if (c != '*') {\n            sb.append(c);\n        }\n    }\n    return sb.toString().trim();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..f02496d1 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,24 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private String getRemainingJSDocLine() {\n+    StringBuilder sb = new StringBuilder();\n+    while (true) {\n+        char c = stream.peekChar();\n+        if (c == '\\0') {\n+            break;\n+        }\n+        stream.advance(1);\n+        if (c == '\\n' || c == '\\r') {\n+            if (sb.length() > 0) {\n+                break;\n+            }\n+        } else if (c != '*') {\n+            sb.append(c);\n+        }\n+    }\n+    return sb.toString().trim();\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}