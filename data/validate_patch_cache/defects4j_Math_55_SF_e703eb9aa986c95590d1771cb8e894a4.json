{
    "patch": "    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n        final double v1Magnitude = v1.getNorm();\n        final double v2Magnitude = v2.getNorm();\n        final double max = Math.max(v1Magnitude, v2Magnitude);\n        final double scale1 = max / v1Magnitude;\n        final double scale2 = max / v2Magnitude;\n        final double scaledV1x = v1.x * scale1;\n        final double scaledV1y = v1.y * scale1;\n        final double scaledV1z = v1.z * scale1;\n        final double scaledV2x = v2.x * scale2;\n        final double scaledV2y = v2.y * scale2;\n        final double scaledV2z = v2.z * scale2;\n\n        final double v1v2 = scaledV1x * scaledV2x + scaledV1y * scaledV2y + scaledV1z * scaledV2z;\n\n        final double SPLIT = 134217729.0; // 2^27+1, threshold for normalization\n        double f = SPLIT * scaledV1x;\n        double cros1x = f - (f - scaledV1x);\n        f = SPLIT * scaledV1y;\n        double cros1y = f - (f - scaledV1y);\n        f = SPLIT * scaledV1z;\n        double cros1z = f - (f - scaledV1z);\n        f = SPLIT * scaledV2x;\n        double cros2x = f - (f - scaledV2x);\n        f = SPLIT * scaledV2y;\n        double cros2y = f - (f - scaledV2y);\n        f = SPLIT * scaledV2z;\n        double cros2z = f - (f - scaledV2z);\n\n        double tx = scaledV1y * scaledV2z;\n        double ty = scaledV1z * scaledV2x;\n        double tz = scaledV1x * scaledV2y;\n        double cx = cros1y * cros2z;\n        double cy = cros1z * cros2x;\n        double cz = cros1x * cros2y;\n        final double x = cx - cy;\n        final double y = cz - cx;\n        final double z = cy - cz;\n\n        if (v1v2 > 0.0) {\n            return new Vector3D(-x, -y, -z);\n        }\n        tx -= ty;\n        ty -= tz;\n        tz -= tx;\n        if (cros1x != 0) {\n            final double d = ty / cros1x;\n            cz = cz + d * cros2y;\n            cy = cy - d * cros2z;\n        } else if (cros1y != 0) {\n            final double d = tz / cros1y;\n            cx = cx - d * cros2z;\n            cz = cz + d * cros2x;\n        } else if (cros1z != 0) {\n            final double d = tx / cros1z;\n            cy = cy - d * cros2x;\n            cx = cx - d * cros2y;\n        }\n        final double inv = 1.0 / Math.sqrt(cx * cx + cy * cy + cz * cz);\n        return new Vector3D(inv * x, inv * y, inv * z);\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..a20740c47 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,69 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+        final double v1Magnitude = v1.getNorm();\n+        final double v2Magnitude = v2.getNorm();\n+        final double max = Math.max(v1Magnitude, v2Magnitude);\n+        final double scale1 = max / v1Magnitude;\n+        final double scale2 = max / v2Magnitude;\n+        final double scaledV1x = v1.x * scale1;\n+        final double scaledV1y = v1.y * scale1;\n+        final double scaledV1z = v1.z * scale1;\n+        final double scaledV2x = v2.x * scale2;\n+        final double scaledV2y = v2.y * scale2;\n+        final double scaledV2z = v2.z * scale2;\n+\n+        final double v1v2 = scaledV1x * scaledV2x + scaledV1y * scaledV2y + scaledV1z * scaledV2z;\n+\n+        final double SPLIT = 134217729.0; // 2^27+1, threshold for normalization\n+        double f = SPLIT * scaledV1x;\n+        double cros1x = f - (f - scaledV1x);\n+        f = SPLIT * scaledV1y;\n+        double cros1y = f - (f - scaledV1y);\n+        f = SPLIT * scaledV1z;\n+        double cros1z = f - (f - scaledV1z);\n+        f = SPLIT * scaledV2x;\n+        double cros2x = f - (f - scaledV2x);\n+        f = SPLIT * scaledV2y;\n+        double cros2y = f - (f - scaledV2y);\n+        f = SPLIT * scaledV2z;\n+        double cros2z = f - (f - scaledV2z);\n+\n+        double tx = scaledV1y * scaledV2z;\n+        double ty = scaledV1z * scaledV2x;\n+        double tz = scaledV1x * scaledV2y;\n+        double cx = cros1y * cros2z;\n+        double cy = cros1z * cros2x;\n+        double cz = cros1x * cros2y;\n+        final double x = cx - cy;\n+        final double y = cz - cx;\n+        final double z = cy - cz;\n+\n+        if (v1v2 > 0.0) {\n+            return new Vector3D(-x, -y, -z);\n+        }\n+        tx -= ty;\n+        ty -= tz;\n+        tz -= tx;\n+        if (cros1x != 0) {\n+            final double d = ty / cros1x;\n+            cz = cz + d * cros2y;\n+            cy = cy - d * cros2z;\n+        } else if (cros1y != 0) {\n+            final double d = tz / cros1y;\n+            cx = cx - d * cros2z;\n+            cz = cz + d * cros2x;\n+        } else if (cros1z != 0) {\n+            final double d = tx / cros1z;\n+            cy = cy - d * cros2x;\n+            cx = cx - d * cros2y;\n+        }\n+        final double inv = 1.0 / Math.sqrt(cx * cx + cy * cy + cz * cz);\n+        return new Vector3D(inv * x, inv * y, inv * z);\n \n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+    }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}