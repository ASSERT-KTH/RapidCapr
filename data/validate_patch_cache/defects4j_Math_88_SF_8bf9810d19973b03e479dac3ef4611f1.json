{
    "patch": "protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        int basicRowIndex =\n                getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRowIndex == -1 ? 0 : getEntry(basicRowIndex, getRhsOffset());\n        boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()];\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRowIndex = getBasicRow(getNumObjectiveFunctions() + i);\n            if (basicRowIndex != -1) {\n                double basicValue = getEntry(basicRowIndex, getRhsOffset());\n                coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n                foundBasicRow[i] = true;\n                for (int j = 0; j < coefficients.length; j++) {\n                    if (j != i) {\n                        coefficients[j] -= coefficients[i] * tableau.getEntry(basicRowIndex, getNumObjectiveFunctions() + j);\n                    }\n                }\n            }\n        }\n        double[] solution = new double[coefficients.length];\n        for (int i = 0; i < coefficients.length; i++) {\n            if (foundBasicRow[i]) {\n                int row = getBasicRow(getNumObjectiveFunctions() + i);\n                solution[i] = getEntry(row, getRhsOffset()) / coefficients[i];\n            }\n        }\n        double value = computeObjectiveValue(solution);\n        return new RealPointValuePair(solution, value);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..ea8f5a2a7 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,27 +321,34 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n+protected RealPointValuePair getSolution() {\n         double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        int basicRowIndex =\n+                getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+        double mostNegative = basicRowIndex == -1 ? 0 : getEntry(basicRowIndex, getRhsOffset());\n+        boolean[] foundBasicRow = new boolean[getOriginalNumDecisionVariables()];\n         for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+            basicRowIndex = getBasicRow(getNumObjectiveFunctions() + i);\n+            if (basicRowIndex != -1) {\n+                double basicValue = getEntry(basicRowIndex, getRhsOffset());\n+                coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n+                foundBasicRow[i] = true;\n+                for (int j = 0; j < coefficients.length; j++) {\n+                    if (j != i) {\n+                        coefficients[j] -= coefficients[i] * tableau.getEntry(basicRowIndex, getNumObjectiveFunctions() + j);\n                     }\n                 }\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        double[] solution = new double[coefficients.length];\n+        for (int i = 0; i < coefficients.length; i++) {\n+            if (foundBasicRow[i]) {\n+                int row = getBasicRow(getNumObjectiveFunctions() + i);\n+                solution[i] = getEntry(row, getRhsOffset()) / coefficients[i];\n+            }\n+        }\n+        double value = computeObjectiveValue(solution);\n+        return new RealPointValuePair(solution, value);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}