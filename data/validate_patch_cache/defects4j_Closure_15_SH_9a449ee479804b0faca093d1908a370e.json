{
    "patch": "Set<Node> inProcess = new HashSet<>();\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      // When seeing the nodes for the second time, exit the procedure\n      // to avoid infinite loops. Normally there should be no second time\n      // with the exception of finally blocks.\n      if (!inProcess.contains(c)) {\n        inProcess.add(c);\n        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n          return true;\n        }\n        inProcess.remove(c);\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..9cb2bdbe 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,20 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+Set<Node> inProcess = new HashSet<>();\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      // When seeing the nodes for the second time, exit the procedure\n+      // to avoid infinite loops. Normally there should be no second time\n+      // with the exception of finally blocks.\n+      if (!inProcess.contains(c)) {\n+        inProcess.add(c);\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+          return true;\n+        }\n+        inProcess.remove(c);\n+      }\n+    }\n+    return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}