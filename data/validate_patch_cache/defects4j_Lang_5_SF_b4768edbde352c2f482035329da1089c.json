{
    "patch": "import java.util.HashSet;\nimport java.util.Locale;\nimport java.util.Set;\n\npublic class LocaleUtils {\n    // Initialize the available locale set with all the available locales.\n    private static final Set<Locale> AVAILABLE_LOCALES = new HashSet<>(List.of(Locale.getAvailableLocales()));\n\n    public static boolean isAvailableLocale(Locale locale) {\n        // Use the available locales set initialized above.\n        return AVAILABLE_LOCALES.contains(locale);\n    }\n\n    public static Locale toLocale(final String str) {\n        if (str == null) {\n            return null;\n        }\n        final int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch0 = str.charAt(0);\n        final char ch1 = str.charAt(1);\n        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str);\n        }\n        if (len < 5 || str.charAt(2) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final char ch3 = str.charAt(3);\n        if (ch3 == '_') {\n            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n        }\n        final char ch4 = str.charAt(4);\n        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 5) {\n            return new Locale(str.substring(0, 2), str.substring(3, 5));\n        }\n        if (len < 7 || str.charAt(5) != '_') {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..9232edb4 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,6 +85,19 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n+import java.util.HashSet;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+public class LocaleUtils {\n+    // Initialize the available locale set with all the available locales.\n+    private static final Set<Locale> AVAILABLE_LOCALES = new HashSet<>(List.of(Locale.getAvailableLocales()));\n+\n+    public static boolean isAvailableLocale(Locale locale) {\n+        // Use the available locales set initialized above.\n+        return AVAILABLE_LOCALES.contains(locale);\n+    }\n+\n     public static Locale toLocale(final String str) {\n         if (str == null) {\n             return null;\n@@ -94,38 +107,33 @@ public class LocaleUtils {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        final char ch1 = str.charAt(1);\n+        if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 2) {\n+            return new Locale(str);\n+        }\n+        if (len < 5 || str.charAt(2) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        final char ch3 = str.charAt(3);\n+        if (ch3 == '_') {\n+            return new Locale(str.substring(0, 2), \"\", str.substring(4));\n+        }\n+        final char ch4 = str.charAt(4);\n+        if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (len == 5) {\n+            return new Locale(str.substring(0, 2), str.substring(3, 5));\n+        }\n+        if (len < 7 || str.charAt(5) != '_') {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}