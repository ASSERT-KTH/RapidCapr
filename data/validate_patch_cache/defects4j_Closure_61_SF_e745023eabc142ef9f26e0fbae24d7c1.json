{
    "patch": "static boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n      String namespace = null;\n      Node function = null;\n      if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getQualifiedName().equals(\"Math\")) {\n        function = nameNode.getSecondChild();\n        namespace = \"Math\";\n      } else if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.NAME) {\n        String name = nameNode.getFirstChild().getString();\n        if (compiler != null && compiler.getCodingConvention().isPropertyRenameFunction(name)) {\n          name = compiler.getCodingConvention().describeProperty(name);\n        }\n        if (GLOBAL_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n          function = nameNode.getLastChild();\n          namespace = \"GLOBAL\";\n        }\n      }\n\n      if (namespace != null && function != null) {\n        String functionName = function.getString();\n        if (FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(namespace + \".\" + functionName)) {\n          return false;\n        }\n      }\n      \n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild() != null &&\n            nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild() != null &&\n            nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..d26538ee 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,7 +923,7 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n+static boolean functionCallHasSideEffects(\n       Node callNode, @Nullable AbstractCompiler compiler) {\n     if (callNode.getType() != Token.CALL) {\n       throw new IllegalStateException(\n@@ -955,12 +955,36 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+      String namespace = null;\n+      Node function = null;\n+      if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getQualifiedName().equals(\"Math\")) {\n+        function = nameNode.getSecondChild();\n+        namespace = \"Math\";\n+      } else if (nameNode.getFirstChild() != null && nameNode.getFirstChild().getType() == Token.NAME) {\n+        String name = nameNode.getFirstChild().getString();\n+        if (compiler != null && compiler.getCodingConvention().isPropertyRenameFunction(name)) {\n+          name = compiler.getCodingConvention().describeProperty(name);\n+        }\n+        if (GLOBAL_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+          function = nameNode.getLastChild();\n+          namespace = \"GLOBAL\";\n+        }\n+      }\n \n+      if (namespace != null && function != null) {\n+        String functionName = function.getString();\n+        if (FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(namespace + \".\" + functionName)) {\n+          return false;\n+        }\n+      }\n+      \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n+        if (nameNode.getFirstChild() != null &&\n+            nameNode.getFirstChild().getType() == Token.REGEXP\n             && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n           return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n+        } else if (nameNode.getFirstChild() != null &&\n+            nameNode.getFirstChild().getType() == Token.STRING\n             && STRING_REGEXP_METHODS.contains(\n                 nameNode.getLastChild().getString())) {\n           Node param = nameNode.getNext();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}