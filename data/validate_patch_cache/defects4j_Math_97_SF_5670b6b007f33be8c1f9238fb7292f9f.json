{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;\nimport org.apache.commons.math3.analysis.integration.SimpsonIntegrator;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class FixedSolver extends BaseAbstractUnivariateIntegrator {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -4205672796793124520L;\n\n    /** Function to solve. */\n    private final UnivariateFunction f;\n\n    /**\n     * Construct an integrator for the given function.\n     *\n     * @param f Function to integrate.\n     * @param relativeAccuracy Relative accuracy of the result.\n     * @param absoluteAccuracy Absolute accuracy of the result.\n     * @param minimalIterationCount Minimum number of iterations.\n     * @param maximalIterationCount Maximum number of iterations.\n     */\n    public FixedSolver(UnivariateFunction f,\n            double relativeAccuracy,\n            double absoluteAccuracy,\n            int minimalIterationCount,\n            int maximalIterationCount) {\n        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);\n        this.f = f;\n    }\n\n    /**\n     * Construct an integrator with default settings.\n     *\n     * @param f Function to integrate.\n     */\n    public FixedSolver(UnivariateFunction f) {\n        this(f, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,\n            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,\n            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,\n            BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);\n    }\n\n    /**\n     * If the function value at {@code x} is zero within the given tolerance, returns\n     * {@code x} as a root of the function.\n     *\n     * @param x Point at which to evaluate the function.\n     * @return {@code x} as a root of the function if the function value at {@code x}\n     *  is zero within the given tolerance, {@code Double.NaN} otherwise.\n     */\n    private double checkAbsoluteError(double x) {\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double fx = f.value(x);\n        if (Precision.equals(fx, 0d, absoluteAccuracy)) {\n            return x;\n        }\n        return Double.NaN;\n    }\n\n    /**\n     * If either of the endpoints of the interval are roots, return it.\n     *\n     * @param min Left endpoint of the interval.\n     * @param max Right endpoint of the interval.\n     * @return A root of the function at endpoints if it satisfies the absolute accuracy,\n     * {@code Double.NaN} otherwise.\n     */\n    private double getBisectionRoot(double min, double max) {\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double fmin = f.value(min);\n        if (Precision.equals(fmin, 0d, absoluteAccuracy)) {\n            return min;\n        }\n        final double fmax ",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..5afdc1247 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,84 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;\n+import org.apache.commons.math3.analysis.integration.SimpsonIntegrator;\n+import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class FixedSolver extends BaseAbstractUnivariateIntegrator {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = -4205672796793124520L;\n+\n+    /** Function to solve. */\n+    private final UnivariateFunction f;\n+\n+    /**\n+     * Construct an integrator for the given function.\n+     *\n+     * @param f Function to integrate.\n+     * @param relativeAccuracy Relative accuracy of the result.\n+     * @param absoluteAccuracy Absolute accuracy of the result.\n+     * @param minimalIterationCount Minimum number of iterations.\n+     * @param maximalIterationCount Maximum number of iterations.\n+     */\n+    public FixedSolver(UnivariateFunction f,\n+            double relativeAccuracy,\n+            double absoluteAccuracy,\n+            int minimalIterationCount,\n+            int maximalIterationCount) {\n+        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);\n+        this.f = f;\n+    }\n \n-        return ret;\n+    /**\n+     * Construct an integrator with default settings.\n+     *\n+     * @param f Function to integrate.\n+     */\n+    public FixedSolver(UnivariateFunction f) {\n+        this(f, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);\n     }\n+\n+    /**\n+     * If the function value at {@code x} is zero within the given tolerance, returns\n+     * {@code x} as a root of the function.\n+     *\n+     * @param x Point at which to evaluate the function.\n+     * @return {@code x} as a root of the function if the function value at {@code x}\n+     *  is zero within the given tolerance, {@code Double.NaN} otherwise.\n+     */\n+    private double checkAbsoluteError(double x) {\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        final double fx = f.value(x);\n+        if (Precision.equals(fx, 0d, absoluteAccuracy)) {\n+            return x;\n+        }\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * If either of the endpoints of the interval are roots, return it.\n+     *\n+     * @param min Left endpoint of the interval.\n+     * @param max Right endpoint of the interval.\n+     * @return A root of the function at endpoints if it satisfies the absolute accuracy,\n+     * {@code Double.NaN} otherwise.\n+     */\n+    private double getBisectionRoot(double min, double max) {\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        final double fmin = f.value(min);\n+        if (Precision.equals(fmin, 0d, absoluteAccuracy)) {\n+            return min;\n+        }\n+        final double fmax \n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}