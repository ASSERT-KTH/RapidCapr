{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && name.isExported()) {\n        // {@code name} meets condition (a).\n        name.removeProp(Node.IS_NAMESPACE);\n        name.removeProp(Node.IS_MODULE_NAME);\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.EXPORT) {\n            ref.node.getParent().replaceChild(ref.node, new Node(Token.EMPTY));\n          }\n        }\n        name.props = null;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..749ec1a3 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,17 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && name.isExported()) {\n+        // {@code name} meets condition (a).\n+        name.removeProp(Node.IS_NAMESPACE);\n+        name.removeProp(Node.IS_MODULE_NAME);\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.EXPORT) {\n+            ref.node.getParent().replaceChild(ref.node, new Node(Token.EMPTY));\n+          }\n+        }\n+        name.props = null;\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}