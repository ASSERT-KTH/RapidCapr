{
    "patch": "public void addValue(double value) {\n    sumImpl.increment(value);\n    sumsqImpl.increment(value);\n    minImpl.increment(value);\n    maxImpl.increment(value);\n    sumLogImpl.increment(value);\n    secondMoment.increment(value);\n\n    if (!(meanImpl instanceof Mean)) {\n        meanImpl.increment(value);\n    } else {\n        // If meanImpl is an instance of default Mean implementation,\n        // calculate the mean using the new value and the current sum.\n        double currentSum = meanImpl.getResult() * n;\n        double newSum = currentSum + value;\n        double newMean = newSum / (n + 1);\n        meanImpl.increment(newMean - meanImpl.getResult());\n    }\n\n    if (!(varianceImpl instanceof Variance)) {\n        varianceImpl.increment(value);\n    } else {\n        // If varianceImpl is an instance of default Variance implementation,\n        // calculate the variance using the new value, the current mean,\n        // and the current sum of squares.\n        double currentMean = meanImpl.getResult();\n        double delta = value - currentMean;\n        double currentSumSqs = varianceImpl.getResult() * (n - 1);\n        double newSumSqs = currentSumSqs + delta * delta;\n        double newVariance = newSumSqs / n;\n        varianceImpl.increment(newVariance - varianceImpl.getResult());\n    }\n\n    if (!(geoMeanImpl instanceof GeometricMean)) {\n        geoMeanImpl.increment(value);\n    }\n    n++;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\nindex 1203d516c..3d5a87139 100644\n--- a/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n+++ b/src/main/java/org/apache/commons/math/stat/descriptive/SummaryStatistics.java\n@@ -146,26 +146,44 @@ public class SummaryStatistics implements StatisticalSummary, Serializable {\n      * Add a value to the data\n      * @param value the value to add\n      */\n-    public void addValue(double value) {\n-        sumImpl.increment(value);\n-        sumsqImpl.increment(value);\n-        minImpl.increment(value);\n-        maxImpl.increment(value);\n-        sumLogImpl.increment(value);\n-        secondMoment.increment(value);\n-        // If mean, variance or geomean have been overridden,\n-        // need to increment these\n-        if (!(meanImpl instanceof Mean)) {\n-            meanImpl.increment(value);\n-        }\n-        if (!(varianceImpl instanceof Variance)) {\n-            varianceImpl.increment(value);\n-        }\n-        if (!(geoMeanImpl instanceof GeometricMean)) {\n-            geoMeanImpl.increment(value);\n-        }\n-        n++;\n-    }\n+public void addValue(double value) {\n+    sumImpl.increment(value);\n+    sumsqImpl.increment(value);\n+    minImpl.increment(value);\n+    maxImpl.increment(value);\n+    sumLogImpl.increment(value);\n+    secondMoment.increment(value);\n+\n+    if (!(meanImpl instanceof Mean)) {\n+        meanImpl.increment(value);\n+    } else {\n+        // If meanImpl is an instance of default Mean implementation,\n+        // calculate the mean using the new value and the current sum.\n+        double currentSum = meanImpl.getResult() * n;\n+        double newSum = currentSum + value;\n+        double newMean = newSum / (n + 1);\n+        meanImpl.increment(newMean - meanImpl.getResult());\n+    }\n+\n+    if (!(varianceImpl instanceof Variance)) {\n+        varianceImpl.increment(value);\n+    } else {\n+        // If varianceImpl is an instance of default Variance implementation,\n+        // calculate the variance using the new value, the current mean,\n+        // and the current sum of squares.\n+        double currentMean = meanImpl.getResult();\n+        double delta = value - currentMean;\n+        double currentSumSqs = varianceImpl.getResult() * (n - 1);\n+        double newSumSqs = currentSumSqs + delta * delta;\n+        double newVariance = newSumSqs / n;\n+        varianceImpl.increment(newVariance - varianceImpl.getResult());\n+    }\n+\n+    if (!(geoMeanImpl instanceof GeometricMean)) {\n+        geoMeanImpl.increment(value);\n+    }\n+    n++;\n+}\n \n     /**\n      * Returns the number of available values",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2.5> but was:<NaN>",
    "test_result": "FAIL"
}