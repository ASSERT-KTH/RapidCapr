{
    "patch": "if (Double.isNaN(r)) {\n    // NaN result\n    Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n    return;\n} else if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n    if (y[yOffset] == 0d) {\n        if (x[xOffset] >= 0d) {\n            // +0 / +inf\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0d);\n            return;\n        } else {\n            // +0 / -inf\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.copySign(FastMath.PI, y[yOffset]));\n            return;\n        }\n    } else if (Double.isInfinite(y[yOffset])) {\n        if (y[yOffset] > 0d) {\n            // y > 0\n            double val = (x[xOffset] >= 0d) ? FastMath.PI/2 : -FastMath.PI/2;\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), val);\n            return;\n        } else {\n            // y < 0\n            double val = (x[xOffset] >= 0d) ? -FastMath.PI/2 : FastMath.PI/2;\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), val);\n            return;\n        }\n    } else if (Double.isInfinite(x[xOffset])) {\n        if (x[xOffset] > 0d) {\n            // x > 0\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0d);\n            return;\n        } else {\n            // x < 0\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI);\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..16e5f51a8 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,45 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(r)) {\n+    // NaN result\n+    Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n+    return;\n+} else if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n+    if (y[yOffset] == 0d) {\n+        if (x[xOffset] >= 0d) {\n+            // +0 / +inf\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0d);\n+            return;\n+        } else {\n+            // +0 / -inf\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.copySign(FastMath.PI, y[yOffset]));\n+            return;\n+        }\n+    } else if (Double.isInfinite(y[yOffset])) {\n+        if (y[yOffset] > 0d) {\n+            // y > 0\n+            double val = (x[xOffset] >= 0d) ? FastMath.PI/2 : -FastMath.PI/2;\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), val);\n+            return;\n+        } else {\n+            // y < 0\n+            double val = (x[xOffset] >= 0d) ? -FastMath.PI/2 : FastMath.PI/2;\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), val);\n+            return;\n+        }\n+    } else if (Double.isInfinite(x[xOffset])) {\n+        if (x[xOffset] > 0d) {\n+            // x > 0\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0d);\n+            return;\n+        } else {\n+            // x < 0\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI);\n+            return;\n+        }\n+    }\n+}\n \n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}