{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int fieldCount = iTypes.length;\n    int targetIndex = -1;\n    // Find the index where the new fieldtype should be inserted.\n    for (int i = 0; i < fieldCount; i++) {\n        DateTimeFieldType currentFieldType = iTypes[i];\n        int compareResult = fieldType.compareTo(currentFieldType);\n        if (compareResult == 0) {\n            // The target fieldtype already exists in the partial.\n            if (value == iValues[i]) {\n                // The value is the same, so return the original partial.\n                return this;\n            } else {\n                // The value is different, replace it and return a new partial.\n                int[] newValues = iValues.clone();\n                newValues[i] = value;\n                return new Partial(iChronology, iTypes.clone(), newValues);\n            }\n        } else if (compareResult < 0) {\n            // The target fieldtype does not exist in the partial, so insert it.\n            targetIndex = i;\n            break;\n        }\n    }\n\n    // Create a new partial with the target fieldtype added.\n    if (targetIndex == -1) {\n        targetIndex = fieldCount;\n    }\n    DateTimeFieldType[] newTypes = new DateTimeFieldType[fieldCount + 1];\n    System.arraycopy(iTypes, 0, newTypes, 0, targetIndex);\n    newTypes[targetIndex] = fieldType;\n    System.arraycopy(iTypes, targetIndex, newTypes, targetIndex + 1, fieldCount - targetIndex);\n    int[] newValues = new int[fieldCount + 1];\n    System.arraycopy(iValues, 0, newValues, 0, targetIndex);\n    newValues[targetIndex] = value;\n    System.arraycopy(iValues, targetIndex, newValues, targetIndex + 1, fieldCount - targetIndex);\n    // Use public constructor to ensure full validation.\n    Partial newPartial = new Partial(iChronology, newTypes, newValues);\n    iChronology.validate(newPartial, newValues);\n    return newPartial;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..1f57ce1e 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,51 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+    int fieldCount = iTypes.length;\n+    int targetIndex = -1;\n+    // Find the index where the new fieldtype should be inserted.\n+    for (int i = 0; i < fieldCount; i++) {\n+        DateTimeFieldType currentFieldType = iTypes[i];\n+        int compareResult = fieldType.compareTo(currentFieldType);\n+        if (compareResult == 0) {\n+            // The target fieldtype already exists in the partial.\n+            if (value == iValues[i]) {\n+                // The value is the same, so return the original partial.\n+                return this;\n+            } else {\n+                // The value is different, replace it and return a new partial.\n+                int[] newValues = iValues.clone();\n+                newValues[i] = value;\n+                return new Partial(iChronology, iTypes.clone(), newValues);\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n-        }\n-        if (value == getValue(index)) {\n-            return this;\n-        }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n-    }\n+        } else if (compareResult < 0) {\n+            // The target fieldtype does not exist in the partial, so insert it.\n+            targetIndex = i;\n+            break;\n+        }\n+    }\n+\n+    // Create a new partial with the target fieldtype added.\n+    if (targetIndex == -1) {\n+        targetIndex = fieldCount;\n+    }\n+    DateTimeFieldType[] newTypes = new DateTimeFieldType[fieldCount + 1];\n+    System.arraycopy(iTypes, 0, newTypes, 0, targetIndex);\n+    newTypes[targetIndex] = fieldType;\n+    System.arraycopy(iTypes, targetIndex, newTypes, targetIndex + 1, fieldCount - targetIndex);\n+    int[] newValues = new int[fieldCount + 1];\n+    System.arraycopy(iValues, 0, newValues, 0, targetIndex);\n+    newValues[targetIndex] = value;\n+    System.arraycopy(iValues, targetIndex, newValues, targetIndex + 1, fieldCount - targetIndex);\n+    // Use public constructor to ensure full validation.\n+    Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+    iChronology.validate(newPartial, newValues);\n+    return newPartial;\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}