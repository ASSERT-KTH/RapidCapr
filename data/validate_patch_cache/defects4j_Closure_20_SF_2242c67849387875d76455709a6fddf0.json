{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n            callTarget.getString().equals(\"String\")) {\n      Node value = callTarget.getNext();\n      if (value != null) {\n        if (value.isString() && value.getString().isEmpty()) {\n          // String() => \"\"\n          Node newString = IR.string(\"\").srcref(callTarget);\n          n.getParent().replaceChild(n, newString);\n          reportCodeChange();\n          return newString;\n        } else if (value.getNext() == null) {\n          // String(a) => '' + (a)\n          Node emptyString = IR.string(\"\").srcref(callTarget);\n          Node addition = IR.add(emptyString, value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        } else if (value.getNext().isString()) {\n          // String(\"a\", \"b\", \"c\", ...) => \"abc...\"\n          StringBuilder stringBuilder = new StringBuilder();\n          stringBuilder.append(value.getString());\n          Node stringNode = value.getNext();\n          while (stringNode != null) {\n            if (NodeUtil.isImmutableValue(stringNode) && stringNode.isString()) {\n              stringBuilder.append(stringNode.getString());\n              stringNode = stringNode.getNext();\n            } else {\n              break;\n            }\n          }\n          if (stringNode == null) {\n            Node newString = IR.string(stringBuilder.toString()).srcref(n);\n            n.getParent().replaceChild(n, newString);\n            reportCodeChange();\n            return newString;\n          }\n        }\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..3d93b76b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -209,21 +209,42 @@ class PeepholeSubstituteAlternateSyntax\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+            callTarget.getString().equals(\"String\")) {\n       Node value = callTarget.getNext();\n       if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n+        if (value.isString() && value.getString().isEmpty()) {\n+          // String() => \"\"\n+          Node newString = IR.string(\"\").srcref(callTarget);\n+          n.getParent().replaceChild(n, newString);\n+          reportCodeChange();\n+          return newString;\n+        } else if (value.getNext() == null) {\n+          // String(a) => '' + (a)\n+          Node emptyString = IR.string(\"\").srcref(callTarget);\n+          Node addition = IR.add(emptyString, value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        } else if (value.getNext().isString()) {\n+          // String(\"a\", \"b\", \"c\", ...) => \"abc...\"\n+          StringBuilder stringBuilder = new StringBuilder();\n+          stringBuilder.append(value.getString());\n+          Node stringNode = value.getNext();\n+          while (stringNode != null) {\n+            if (NodeUtil.isImmutableValue(stringNode) && stringNode.isString()) {\n+              stringBuilder.append(stringNode.getString());\n+              stringNode = stringNode.getNext();\n+            } else {\n+              break;\n+            }\n+          }\n+          if (stringNode == null) {\n+            Node newString = IR.string(stringBuilder.toString()).srcref(n);\n+            n.getParent().replaceChild(n, newString);\n+            reportCodeChange();\n+            return newString;\n+          }\n+        }\n       }\n     }\n     return n;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}