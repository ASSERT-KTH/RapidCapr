{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean resolved;\n    if (getParentScope() != null && !getParentScope().isGlobal()) { // Fixed: getParentScope() can be null\n      // We only try to resolve types in the global scope once the parser is\n      // done, to prevent metavariable resolution from interfering.\n      resolved = resolveViaProperties(t, enclosing);\n      if (!resolved) {\n        resolved = resolveViaRegistry(t, enclosing);\n      }\n    } else {\n      resolved = resolveViaRegistry(t, enclosing);\n      if (!resolved) {\n        resolved = resolveViaProperties(t, enclosing);\n      }\n    }\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n\n    super.resolveInternal(t, enclosing);\n    if (isResolved()) {\n      finishPropertyContinuations();\n    }\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..d62ae0bb 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -182,23 +182,20 @@ class NamedType extends ProxyObjectType {\n    */\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+    boolean resolved;\n+    if (getParentScope() != null && !getParentScope().isGlobal()) { // Fixed: getParentScope() can be null\n+      // We only try to resolve types in the global scope once the parser is\n+      // done, to prevent metavariable resolution from interfering.\n+      resolved = resolveViaProperties(t, enclosing);\n+      if (!resolved) {\n+        resolved = resolveViaRegistry(t, enclosing);\n+      }\n+    } else {\n+      resolved = resolveViaRegistry(t, enclosing);\n+      if (!resolved) {\n+        resolved = resolveViaProperties(t, enclosing);\n+      }\n     }\n-\n-    resolveViaProperties(t, enclosing);\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}