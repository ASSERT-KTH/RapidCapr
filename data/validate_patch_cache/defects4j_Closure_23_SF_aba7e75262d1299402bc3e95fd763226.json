{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    if (!right.isNumber() || !isInteger(right.getDouble())) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    int index = (int) right.getDouble();\n\n    if (index < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    if (left.isArrayLit() && index < left.getChildCount()) {\n        Node elem = left.getChildAtIndex(index);\n        if (elem.isEmpty()) {\n            elem = NodeUtil.newUndefinedNode(elem);\n        } else {\n            left.removeChild(elem);\n        }\n\n        // Replace the entire GETELEM with the value\n        n.getParent().replaceChild(n, elem);\n        reportCodeChange();\n        return elem;\n    } else if (left.isName()) {\n        String name = left.getString();\n\n        if (externs.containsKey(name) && externs.get(name) == Type.ARRAY) {\n            Node elem = Node.newString(\"undefined\");\n            // Replace the entire GETELEM with the undefined value\n            n.getParent().replaceChild(n, elem);\n            reportCodeChange();\n            return elem;\n        }\n    }\n\n    return n;\n}\n\nprivate static boolean isInteger(double n) {\n    return n == Math.floor(n) && !Double.isInfinite(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..bd208dad 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1419,57 +1419,49 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n-      return n;\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+    if (!right.isNumber() || !isInteger(right.getDouble())) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+    int index = (int) right.getDouble();\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (index < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n+    if (left.isArrayLit() && index < left.getChildCount()) {\n+        Node elem = left.getChildAtIndex(index);\n+        if (elem.isEmpty()) {\n+            elem = NodeUtil.newUndefinedNode(elem);\n+        } else {\n+            left.removeChild(elem);\n+        }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        // Replace the entire GETELEM with the value\n+        n.getParent().replaceChild(n, elem);\n+        reportCodeChange();\n+        return elem;\n+    } else if (left.isName()) {\n+        String name = left.getString();\n+\n+        if (externs.containsKey(name) && externs.get(name) == Type.ARRAY) {\n+            Node elem = Node.newString(\"undefined\");\n+            // Replace the entire GETELEM with the undefined value\n+            n.getParent().replaceChild(n, elem);\n+            reportCodeChange();\n+            return elem;\n+        }\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+    return n;\n+}\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+private static boolean isInteger(double n) {\n+    return n == Math.floor(n) && !Double.isInfinite(n);\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}