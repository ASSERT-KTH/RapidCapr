{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    Factory factoryMock = (Factory) mock;\n    Callback[] callbacks = factoryMock.getCallbacks();\n    // Create new InvocationHandlerChain containing newFilter as the first interceptor\n    if (callbacks == null) { // Initialize callback list if it is null\n        callbacks = new Callback[] { newFilter };\n        factoryMock.setCallbacks(callbacks);\n        factoryMock.setCallbackFilter(new CallbackFilter() { // Add dummy filter to enable callbacks\n            @Override\n            public int accept(Method method) {\n                return 0;\n            }\n        });\n        return;\n    }\n    // Replace old filter with newFilter\n    for (int i = 0; i < callbacks.length; i++) {\n        if (callbacks[i] instanceof MethodInterceptorFilter) {\n            callbacks[i] = newFilter;\n            return;\n        }\n    }\n    // Prepend newFilter to existing chain\n    Callback[] newCallbacks = new Callback[callbacks.length + 1];\n    newCallbacks[0] = newFilter;\n    System.arraycopy(callbacks, 0, newCallbacks, 1, callbacks.length);\n    factoryMock.setCallbacks(newCallbacks);\n    Class<?>[] callbackTypes = new Class<?>[newCallbacks.length];\n    Arrays.fill(callbackTypes, MethodInterceptorFilter.class);\n    factoryMock.setCallbackTypes(callbackTypes);\n    factoryMock.setCallbackFilter(new CallbackFilter() { // Add dummy filter to enable callbacks\n        @Override\n        public int accept(Method method) {\n            return 0;\n        }\n    });\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..8a2ab91a0 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,46 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    Factory factoryMock = (Factory) mock;\n+    Callback[] callbacks = factoryMock.getCallbacks();\n+    // Create new InvocationHandlerChain containing newFilter as the first interceptor\n+    if (callbacks == null) { // Initialize callback list if it is null\n+        callbacks = new Callback[] { newFilter };\n+        factoryMock.setCallbacks(callbacks);\n+        factoryMock.setCallbackFilter(new CallbackFilter() { // Add dummy filter to enable callbacks\n+            @Override\n+            public int accept(Method method) {\n+                return 0;\n+            }\n+        });\n+        return;\n+    }\n+    // Replace old filter with newFilter\n+    for (int i = 0; i < callbacks.length; i++) {\n+        if (callbacks[i] instanceof MethodInterceptorFilter) {\n+            callbacks[i] = newFilter;\n+            return;\n+        }\n+    }\n+    // Prepend newFilter to existing chain\n+    Callback[] newCallbacks = new Callback[callbacks.length + 1];\n+    newCallbacks[0] = newFilter;\n+    System.arraycopy(callbacks, 0, newCallbacks, 1, callbacks.length);\n+    factoryMock.setCallbacks(newCallbacks);\n+    Class<?>[] callbackTypes = new Class<?>[newCallbacks.length];\n+    Arrays.fill(callbackTypes, MethodInterceptorFilter.class);\n+    factoryMock.setCallbackTypes(callbackTypes);\n+    factoryMock.setCallbackFilter(new CallbackFilter() { // Add dummy filter to enable callbacks\n+        @Override\n+        public int accept(Method method) {\n+            return 0;\n+        }\n+    });\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}