{
    "patch": "Map<TypeAndName, List<Node>> defs = curBlock.getAllDefs();\nIterator<Entry<TypeAndName, List<Node>>> itrDefs = defs.entrySet().iterator();\nwhile (itrDefs.hasNext()) {\n  Entry<TypeAndName, List<Node>> entry = itrDefs.next();\n  TypeAndName def = entry.getKey();\n  if (!curBlkNode.getBlock().getPosition().equals(def.getName().getPosition())) {\n    continue;\n  }\n  List<Node> defNodes = entry.getValue();\n  for (Node defNode : defNodes) {\n    if (defNode instanceof LValueExpr) {\n      LValueExpr lValueExpr = (LValueExpr) defNode;\n      if (variablesToRemove.contains(lValueExpr.getName())) {\n        modified = modified || curBlock.remove(defNode);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}