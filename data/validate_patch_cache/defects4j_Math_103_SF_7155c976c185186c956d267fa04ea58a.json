{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        if(Double.isNaN(x)) {\n            throw new MathException(\"Input is not a number.\");\n        } else if(Double.isInfinite(x) && x > 0.0) {\n            return 1.0;\n        } else if(Double.isInfinite(x) && x < 0.0) {\n            return 0.0;\n        } else {\n            double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n            double result = 0.5 * Erf.erfc(-z / Math.sqrt(2));\n            if (result > 1.0) {\n                return 1.0;\n            } else if (result < 0.0) {\n                return 0.0;\n            } else {\n                return result;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..54fea8557 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,23 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        if(Double.isNaN(x)) {\n+            throw new MathException(\"Input is not a number.\");\n+        } else if(Double.isInfinite(x) && x > 0.0) {\n+            return 1.0;\n+        } else if(Double.isInfinite(x) && x < 0.0) {\n+            return 0.0;\n+        } else {\n+            double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n+            double result = 0.5 * Erf.erfc(-z / Math.sqrt(2));\n+            if (result > 1.0) {\n+                return 1.0;\n+            } else if (result < 0.0) {\n+                return 0.0;\n+            } else {\n+                return result;\n+            }\n+        }\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}