{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    List<String> fnParamNames = NodeUtil.getFunctionParameterNames(fnNode);\n    int numParams = fnParamNames.size();\n\n    // Gather the argument values.\n    List<Node> argVals = new ArrayList<>(numParams);\n    int numArgs = 0;\n    while (cArg != null) {\n      Node arg = cArg.removeFirstChild();\n      argVals.add(arg);\n      ++numArgs;\n      cArg = cArg.getNext();\n    }\n\n    if (!NodeUtil.isVarArgsFunction(fnNode)) {\n      // If there are unused arguments this can't be inlined.\n      if (numArgs > numParams) {\n        return CanInlineResult.NO;\n      } else {\n        // Pad with undefineds.\n        while (numArgs < numParams) {\n          argVals.add(null);\n          ++numArgs;\n        }\n      }\n    }\n\n    Preconditions.checkState(numArgs <= numParams);\n    Map<String, Node> argMap = new LinkedHashMap<>();\n    for (int i = 0; i < numArgs; i++) {\n      argMap.put(fnParamNames.get(i), argVals.get(i));\n    }\n\n    Node replacementNode = NodeUtil.replaceWithIndependentCopy(fnNode);\n    new Es6SyntacticScopeCreator(compiler).injectReplacementScope(replacementNode);\n    InlineArgsAnalysis inlineArgAnalysis = new InlineArgsAnalysis(\n        argMap, block, hasSideEffects, compiler, compiler.getReverseAbstractInterpreter());\n\n    return inlineArgAnalysis.canInlineCall(callNode) ? CanInlineResult.YES\n        : CanInlineResult.NO;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..11e02227 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -692,7 +692,7 @@ class FunctionInjector {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n@@ -702,6 +702,7 @@ class FunctionInjector {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n+\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n     Node cArg = callNode.getFirstChild().getNext();\n \n@@ -721,40 +722,45 @@ class FunctionInjector {\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    List<String> fnParamNames = NodeUtil.getFunctionParameterNames(fnNode);\n+    int numParams = fnParamNames.size();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+    // Gather the argument values.\n+    List<Node> argVals = new ArrayList<>(numParams);\n+    int numArgs = 0;\n+    while (cArg != null) {\n+      Node arg = cArg.removeFirstChild();\n+      argVals.add(arg);\n+      ++numArgs;\n+      cArg = cArg.getNext();\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+    if (!NodeUtil.isVarArgsFunction(fnNode)) {\n+      // If there are unused arguments this can't be inlined.\n+      if (numArgs > numParams) {\n+        return CanInlineResult.NO;\n+      } else {\n+        // Pad with undefineds.\n+        while (numArgs < numParams) {\n+          argVals.add(null);\n+          ++numArgs;\n         }\n-        cArg = cArg.getNext();\n       }\n     }\n \n-    return CanInlineResult.YES;\n+    Preconditions.checkState(numArgs <= numParams);\n+    Map<String, Node> argMap = new LinkedHashMap<>();\n+    for (int i = 0; i < numArgs; i++) {\n+      argMap.put(fnParamNames.get(i), argVals.get(i));\n+    }\n+\n+    Node replacementNode = NodeUtil.replaceWithIndependentCopy(fnNode);\n+    new Es6SyntacticScopeCreator(compiler).injectReplacementScope(replacementNode);\n+    InlineArgsAnalysis inlineArgAnalysis = new InlineArgsAnalysis(\n+        argMap, block, hasSideEffects, compiler, compiler.getReverseAbstractInterpreter());\n+\n+    return inlineArgAnalysis.canInlineCall(callNode) ? CanInlineResult.YES\n+        : CanInlineResult.NO;\n   }\n \n   /**",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}