{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              /* We don't want to follow through the finally block more\n               * than once, so we specially mark the finalyNode as the\n               * destination of all edges coming from the finally block.\n               */\n              if (cfa != null) {\n                for (Node finallyNode2 : cfa.finallyMap.get(parent)) {\n                  cfa.createEdge(finallyNode2, Branch.UNCOND, finallyNode);\n                }\n              }\n              return finallyNode;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..123b5ebc 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -765,6 +765,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              /* We don't want to follow through the finally block more\n+               * than once, so we specially mark the finalyNode as the\n+               * destination of all edges coming from the finally block.\n+               */\n+              if (cfa != null) {\n+                for (Node finallyNode2 : cfa.finallyMap.get(parent)) {\n+                  cfa.createEdge(finallyNode2, Branch.UNCOND, finallyNode);\n+                }\n+              }\n+              return finallyNode;\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_MISSING_RETURN_STATEMENT. Missing return statement. Function expected to return number. at testcode line 1 : 24 expected:<0> but was:<1>",
    "test_result": "FAIL"
}