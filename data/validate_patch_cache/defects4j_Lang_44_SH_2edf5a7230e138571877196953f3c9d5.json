{
    "patch": "if (val.startsWith(\"--\")) {\n    return null;\n}\nif (!Character.isDigit(val.charAt(0)) && val.charAt(0) != '-' && val.charAt(0) != '+') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n    return createInteger(val);\n}\nint lastCharIndex = val.length() - 1;\nchar lastChar = val.charAt(lastCharIndex);\nif (!Character.isDigit(lastChar)) {\n    if (lastChar == 'l' || lastChar == 'L') {\n        String numeric = val.substring(0, lastCharIndex);\n        if (!isDigits(numeric)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (val.contains(\"F\") || val.contains(\"f\")) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        if (val.contains(\"D\") || val.contains(\"d\")) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        try {\n            return createLong(numeric);\n        } catch (NumberFormatException ignored) {}\n        return createBigInteger(numeric);\n    }\n    if (lastChar == 'f' || lastChar == 'F') {\n        String numeric = val.substring(0, lastCharIndex);\n        if (!isFloatNumber(numeric)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        return createFloat(numeric);\n    }\n    if (lastChar == 'd' || lastChar == 'D') {\n        String numeric = val.substring(0, lastCharIndex);\n        if (!isDoubleNumber(numeric)) {\n            throw new NumberFormatException(val + \" is not a valid number.\");\n        }\n        return createDouble(numeric);\n    }\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.contains(\"F\") || val.contains(\"f\")) {\n    String numeric = val.substring(0, lastCharIndex);\n    if (!isFloatNumber(numeric)) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    return createFloat(numeric);\n}\nif (val.contains(\"D\") || val.contains(\"d\")) {\n    String numeric = val.substring(0, lastCharIndex);\n    if (!isDoubleNumber(numeric)) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n    return createDouble(numeric);\n}\nreturn createNumber(val);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f5b311c0 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,65 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.startsWith(\"--\")) {\n+    return null;\n+}\n+if (!Character.isDigit(val.charAt(0)) && val.charAt(0) != '-' && val.charAt(0) != '+') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+    return createInteger(val);\n+}\n+int lastCharIndex = val.length() - 1;\n+char lastChar = val.charAt(lastCharIndex);\n+if (!Character.isDigit(lastChar)) {\n+    if (lastChar == 'l' || lastChar == 'L') {\n+        String numeric = val.substring(0, lastCharIndex);\n+        if (!isDigits(numeric)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        if (val.contains(\"F\") || val.contains(\"f\")) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        if (val.contains(\"D\") || val.contains(\"d\")) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        try {\n+            return createLong(numeric);\n+        } catch (NumberFormatException ignored) {}\n+        return createBigInteger(numeric);\n+    }\n+    if (lastChar == 'f' || lastChar == 'F') {\n+        String numeric = val.substring(0, lastCharIndex);\n+        if (!isFloatNumber(numeric)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        return createFloat(numeric);\n+    }\n+    if (lastChar == 'd' || lastChar == 'D') {\n+        String numeric = val.substring(0, lastCharIndex);\n+        if (!isDoubleNumber(numeric)) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n+        return createDouble(numeric);\n+    }\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.contains(\"F\") || val.contains(\"f\")) {\n+    String numeric = val.substring(0, lastCharIndex);\n+    if (!isFloatNumber(numeric)) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    return createFloat(numeric);\n+}\n+if (val.contains(\"D\") || val.contains(\"d\")) {\n+    String numeric = val.substring(0, lastCharIndex);\n+    if (!isDoubleNumber(numeric)) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+    return createDouble(numeric);\n+}\n+return createNumber(val);\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}