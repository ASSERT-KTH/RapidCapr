{
    "patch": "FunctionType fnType = type.restrictByNotNullOrUndefined().toMaybeFunctionType();\nif (fnType != null) {\n  visitParameterList(t, n, fnType);\n  ensureTyped(t, n, fnType.getInstanceType());\n} else {\n  ensureTyped(t, n);\n  report(t, n, NOT_A_CONSTRUCTOR);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..a5665d90 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,14 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+FunctionType fnType = type.restrictByNotNullOrUndefined().toMaybeFunctionType();\n+if (fnType != null) {\n+  visitParameterList(t, n, fnType);\n+  ensureTyped(t, n, fnType.getInstanceType());\n+} else {\n+  ensureTyped(t, n);\n+  report(t, n, NOT_A_CONSTRUCTOR);\n+}\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}