{
    "patch": "                int codePoint = Character.codePointAt(input, pos);\n                int charCount = Character.charCount(codePoint);\n                pos += charCount;\n                if (charCount > 1) {\n                    out.write(getEscapeSequence(codePoint));\n                    continue;\n                }\n                char c = (char) codePoint;\n                if (c == FIELD_DELIMITER || c == VALUE_DELIMITER ||\n                        c == DOUBLE_QUOTE_CHAR || c == LF || c == CR) {\n                    out.write(DOUBLE_QUOTE_CHAR);\n                    out.write(c);\n                    out.write(DOUBLE_QUOTE_CHAR);\n                } else {\n                    out.write(c);\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..8b7ab782 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,22 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codePoint = Character.codePointAt(input, pos);\n+                int charCount = Character.charCount(codePoint);\n+                pos += charCount;\n+                if (charCount > 1) {\n+                    out.write(getEscapeSequence(codePoint));\n+                    continue;\n+                }\n+                char c = (char) codePoint;\n+                if (c == FIELD_DELIMITER || c == VALUE_DELIMITER ||\n+                        c == DOUBLE_QUOTE_CHAR || c == LF || c == CR) {\n+                    out.write(DOUBLE_QUOTE_CHAR);\n+                    out.write(c);\n+                    out.write(DOUBLE_QUOTE_CHAR);\n+                } else {\n+                    out.write(c);\n+                }\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}