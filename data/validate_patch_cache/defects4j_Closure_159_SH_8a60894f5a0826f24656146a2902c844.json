{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      } else if (child.getType() == Token.GETPROP && child.getFirstChild().getType() == Token.NAME) {\n        changed.add(child.getFirstChild().getString());\n      } else if (child.getType() == Token.GETELEM && child.getFirstChild().getType() == Token.STRING) {\n        changed.add(child.getFirstChild().getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..09020618 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -778,6 +778,17 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n+      } else if (child.getType() == Token.GETPROP && child.getFirstChild().getType() == Token.NAME) {\n+        changed.add(child.getFirstChild().getString());\n+      } else if (child.getType() == Token.GETELEM && child.getFirstChild().getType() == Token.STRING) {\n+        changed.add(child.getFirstChild().getString());\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}