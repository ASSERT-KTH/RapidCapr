{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalArgumentException ex) {\n        // clear the remaining fields to avoid inconsistent state\n        for (int j = i + 1; j < count; j++) {\n            savedFields[j].saveField(-1, resetFields);\n        }\n\n        if (text != null) {\n            ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n        }\n\n        throw ex;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c7c6c760 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalArgumentException ex) {\n+        // clear the remaining fields to avoid inconsistent state\n+        for (int j = i + 1; j < count; j++) {\n+            savedFields[j].saveField(-1, resetFields);\n+        }\n+\n+        if (text != null) {\n+            ex = new IllegalArgumentException(\"Cannot parse \\\"\" + text + \"\\\": \" + ex.getMessage(), ex);\n+        }\n+\n+        throw ex;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}