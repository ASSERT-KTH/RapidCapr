{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // adjust instantLocal using the estimate and recalc the offset\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n    // if the offsets differ, we must be near a DST boundary\n    if (offsetLocal != offsetAdjusted) {\n        // we need to ensure that time is always after the DST gap\n        // this happens naturally for positive offsets, but not for negative\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // if we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n            if (nextLocal != nextAdjusted) {\n                // if nextLocal is positive then we need to add the non-zero offset\n                // since we subtracted it earlier\n                if (nextLocal > instantLocal) {\n                    int offset = getOffset(nextLocal);\n                    if (offset > offsetAdjusted) {\n                        // need to add the offset difference\n                        nextAdjusted = nextTransition(instantLocal - offset);\n                    }\n                }\n                return getOffset(nextAdjusted - offsetLocal);\n            }\n        }\n    } else if (offsetLocal > 0) {\n        long prevAdjusted = previousTransition(instantAdjusted);\n        if (prevAdjusted < instantAdjusted) {\n            int offsetPrev = getOffset(prevAdjusted);\n            int diff = offsetLocal - offsetPrev;\n            long prevLocal = previousTransition(instantLocal - offsetLocal);\n            long nextLocal = nextTransition(prevLocal);\n            if (nextLocal == nextTransition(prevAdjusted) &&\n                    (instantLocal - prevLocal) <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6e208471 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,50 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // adjust instantLocal using the estimate and recalc the offset\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+    // if the offsets differ, we must be near a DST boundary\n+    if (offsetLocal != offsetAdjusted) {\n+        // we need to ensure that time is always after the DST gap\n+        // this happens naturally for positive offsets, but not for negative\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            // if we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+            if (nextLocal != nextAdjusted) {\n+                // if nextLocal is positive then we need to add the non-zero offset\n+                // since we subtracted it earlier\n+                if (nextLocal > instantLocal) {\n+                    int offset = getOffset(nextLocal);\n+                    if (offset > offsetAdjusted) {\n+                        // need to add the offset difference\n+                        nextAdjusted = nextTransition(instantLocal - offset);\n+                    }\n                 }\n+                return getOffset(nextAdjusted - offsetLocal);\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        }\n+    } else if (offsetLocal > 0) {\n+        long prevAdjusted = previousTransition(instantAdjusted);\n+        if (prevAdjusted < instantAdjusted) {\n+            int offsetPrev = getOffset(prevAdjusted);\n+            int diff = offsetLocal - offsetPrev;\n+            long prevLocal = previousTransition(instantLocal - offsetLocal);\n+            long nextLocal = nextTransition(prevLocal);\n+            if (nextLocal == nextTransition(prevAdjusted) &&\n+                    (instantLocal - prevLocal) <= diff) {\n+                return offsetPrev;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}