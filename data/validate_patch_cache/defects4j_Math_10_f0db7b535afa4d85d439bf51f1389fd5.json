{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // special case handling for (0, 0)\n    if (y[yOffset] == 0 && x[xOffset] == 0) {\n        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n        return;\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else {\n\n        // special case handling for (+0, y) and (-0, y)\n        if (x[xOffset] == 0d && y[yOffset] != 0d) {\n            result[resultOffset] = ((y[yOffset] > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = Double.NaN;\n            }\n            return;\n        }\n\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        result[resultOffset] =\n                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n    }\n\n    // special case handling for (+/- infinity, y) and (x, +/- infinity)\n    if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n        if (y[yOffset] > 0) {\n            result[resultOffset] = FastMath.PI / 2.0;\n        } else if (y[yOffset] < 0) {\n            result[resultOffset] = -FastMath.PI / 2.0;\n        } else if (x[xOffset] >= 0) {\n            result[resultOffset] = y[yOffset] / x[xOffset];\n        } else {\n            result[resultOffset] = ((y[yOffset] >= 0) ? FastMath.PI : -FastMath.PI);\n        }\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..bfef318d8 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,72 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // special case handling for (0, 0)\n+    if (y[yOffset] == 0 && x[xOffset] == 0) {\n+        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n+        return;\n+    }\n+\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (x[xOffset] >= 0) {\n+\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n+\n+    } else {\n+\n+        // special case handling for (+0, y) and (-0, y)\n+        if (x[xOffset] == 0d && y[yOffset] != 0d) {\n+            result[resultOffset] = ((y[yOffset] > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+            for (int i = 1; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+            return;\n+        }\n+\n+        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+        result[resultOffset] =\n+                ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+        }\n+    }\n+\n+    // special case handling for (+/- infinity, y) and (x, +/- infinity)\n+    if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n+        if (y[yOffset] > 0) {\n+            result[resultOffset] = FastMath.PI / 2.0;\n+        } else if (y[yOffset] < 0) {\n+            result[resultOffset] = -FastMath.PI / 2.0;\n+        } else if (x[xOffset] >= 0) {\n+            result[resultOffset] = y[yOffset] / x[xOffset];\n+        } else {\n+            result[resultOffset] = ((y[yOffset] >= 0) ? FastMath.PI : -FastMath.PI);\n+        }\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+    }\n+}\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}