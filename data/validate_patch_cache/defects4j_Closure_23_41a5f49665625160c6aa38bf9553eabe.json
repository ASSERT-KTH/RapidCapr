{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    // We only fold constant array accesses.\n    if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n\n    Node element = null;\n    if (left.isArrayLit()) {\n        int childCount = left.getChildCount();\n        if (childCount == 0) {\n            // [].x always returns undefined.\n            element = NodeUtil.newUndefinedNode(n);\n        } else if (intIndex < 0 || intIndex >= childCount) {\n            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n            return n;\n        } else {\n            element = left.removeFirstChild();\n            for (int i = 1; i <= intIndex; i++) {\n                element = left.removeFirstChild();\n            }\n        }\n    } else if (left.isStringLit() && left.getString().length() == 1) {\n        // Handle string.charAt(123) folding.\n        try {\n            String str = left.getString();\n            int newCharIndex = (int) Math.floor(index);\n            if (newCharIndex < 0 || newCharIndex >= str.length()) {\n                error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n                return n;\n            }\n            char newChar = str.charAt(newCharIndex);\n            element = Node.newString(Token.STRING, String.valueOf(newChar));\n        } catch (Exception e) {\n            return n;\n        }\n    }\n\n    if (element == null) {\n        return n;\n    }\n\n    NodeUtil.markFunctionsDeleted(n);\n    n.getParent().replaceChild(n, element);\n    reportCodeChange();\n    return element;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..bf33eb0e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1418,58 +1418,62 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n-    if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+    // We only fold constant array accesses.\n+    if (!right.isNumber() || !NodeUtil.isImmutableValue(left)) {\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    Node element = null;\n+    if (left.isArrayLit()) {\n+        int childCount = left.getChildCount();\n+        if (childCount == 0) {\n+            // [].x always returns undefined.\n+            element = NodeUtil.newUndefinedNode(n);\n+        } else if (intIndex < 0 || intIndex >= childCount) {\n+            error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+            return n;\n+        } else {\n+            element = left.removeFirstChild();\n+            for (int i = 1; i <= intIndex; i++) {\n+                element = left.removeFirstChild();\n+            }\n+        }\n+    } else if (left.isStringLit() && left.getString().length() == 1) {\n+        // Handle string.charAt(123) folding.\n+        try {\n+            String str = left.getString();\n+            int newCharIndex = (int) Math.floor(index);\n+            if (newCharIndex < 0 || newCharIndex >= str.length()) {\n+                error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+                return n;\n+            }\n+            char newChar = str.charAt(newCharIndex);\n+            element = Node.newString(Token.STRING, String.valueOf(newChar));\n+        } catch (Exception e) {\n+            return n;\n+        }\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+    if (element == null) {\n+        return n;\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    NodeUtil.markFunctionsDeleted(n);\n+    n.getParent().replaceChild(n, element);\n     reportCodeChange();\n-    return elem;\n-  }\n+    return element;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}