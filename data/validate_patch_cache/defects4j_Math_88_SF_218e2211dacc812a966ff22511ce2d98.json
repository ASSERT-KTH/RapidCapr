{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n            // if multiple variables can take a given value\n            // set the coefficient of the first encountered non-zero basic row to 1 and the rest to 0\n            for (int j = getNumObjectiveFunctions() + i; j < tableau.getWidth() - 1; j++) {\n                if (tableau.getEntry(basicRow, j) != 0) {\n                    if (coefficients[i] == 0) {\n                        coefficients[i] = tableau.getEntry(basicRow, getRhsOffset()) /\n                                tableau.getEntry(basicRow, j);\n                    } else {\n                        coefficients[i] = 0;\n                    }\n                    break;\n                }\n            }\n\n            coefficients[i] -= restrictToNonNegative ? 0 : mostNegative;\n        }\n\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..99433a372 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -323,24 +323,29 @@ class SimplexTableau implements Serializable {\n      */\n     protected RealPointValuePair getSolution() {\n         double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+        Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+\n+            // if multiple variables can take a given value\n+            // set the coefficient of the first encountered non-zero basic row to 1 and the rest to 0\n+            for (int j = getNumObjectiveFunctions() + i; j < tableau.getWidth() - 1; j++) {\n+                if (tableau.getEntry(basicRow, j) != 0) {\n+                    if (coefficients[i] == 0) {\n+                        coefficients[i] = tableau.getEntry(basicRow, getRhsOffset()) /\n+                                tableau.getEntry(basicRow, j);\n+                    } else {\n+                        coefficients[i] = 0;\n                     }\n+                    break;\n                 }\n             }\n+\n+            coefficients[i] -= restrictToNonNegative ? 0 : mostNegative;\n         }\n+\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}