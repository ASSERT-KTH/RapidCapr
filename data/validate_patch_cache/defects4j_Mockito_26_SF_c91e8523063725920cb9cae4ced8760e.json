{
    "patch": "public class MyPrimitives {\n\n    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n\n    static {\n        primitiveTypes.put(Boolean.class, boolean.class);\n        primitiveTypes.put(Character.class, char.class);\n        primitiveTypes.put(Byte.class, byte.class);\n        primitiveTypes.put(Short.class, short.class);\n        primitiveTypes.put(Integer.class, int.class);\n        primitiveTypes.put(Long.class, long.class);\n        primitiveTypes.put(Float.class, float.class);\n        primitiveTypes.put(Double.class, double.class);\n    }\n\n    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n\n    static {\n        wrapperReturnValues.put(Boolean.class, false);\n        wrapperReturnValues.put(Character.class, '\\u0000');\n        wrapperReturnValues.put(Byte.class, (byte) 0);\n        wrapperReturnValues.put(Short.class, (short) 0);\n        wrapperReturnValues.put(Integer.class, 0);\n        wrapperReturnValues.put(Long.class, 0L);\n        wrapperReturnValues.put(Float.class, 0F);\n        wrapperReturnValues.put(Double.class, 0D);\n    }\n\n    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n\n    static {\n        primitiveValues.put(boolean.class, false);\n        primitiveValues.put(char.class, '\\u0000');\n        primitiveValues.put(byte.class, (byte) 0);\n        primitiveValues.put(short.class, (short) 0);\n        primitiveValues.put(int.class, 0);\n        primitiveValues.put(long.class, 0L);\n        primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0D);\n    }\n\n    public static Object returnFor(Class<?> clazz) {\n        if (wrapperReturnValues.containsKey(clazz)) {\n            return wrapperReturnValues.get(clazz);\n        } else if (primitiveValues.containsKey(clazz)) {\n            return primitiveValues.get(clazz);\n        } else {\n            throw new IllegalArgumentException(\"Class \" + clazz.getName() + \" is not a primitive or a wrapper class.\");\n        }\n    }\n\n    public static boolean isPrimitive(Class<?> clazz) {\n        return primitiveValues.containsKey(clazz) || primitiveTypes.containsKey(clazz);\n    }\n\n    public static boolean isWrapper(Class<?> clazz) {\n        return wrapperReturnValues.containsKey(clazz) || primitiveTypes.containsValue(clazz);\n    }\n\n    public static Class<?> getPrimitiveType(Class<?> wrapperType) {\n        return primitiveTypes.get(wrapperType);\n    }\n\n    public static Class<?> getWrapperType(Class<?> primitiveType) {\n        for (Map.Entry<Class<?>, Class<?>> entry : primitiveTypes.entrySet()) {\n            if (entry.getValue().equals(primitiveType)) {\n                return entry.getKey();\n            }\n        }\n        throw new IllegalArgumentException(\"Class \" + primitiveType.getName() + \" is not a primitive type.\");\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..da6dfe8b7 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -31,38 +31,76 @@ public class Primitives {\n     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n-\n-    static {\n-        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n-        primitiveTypes.put(Character.class, Character.TYPE);\n-        primitiveTypes.put(Byte.class, Byte.TYPE);\n-        primitiveTypes.put(Short.class, Short.TYPE);\n-        primitiveTypes.put(Integer.class, Integer.TYPE);\n-        primitiveTypes.put(Long.class, Long.TYPE);\n-        primitiveTypes.put(Float.class, Float.TYPE);\n-        primitiveTypes.put(Double.class, Double.TYPE);\n-    }\n-\n-    static {\n-        wrapperReturnValues.put(Boolean.class, false);\n-        wrapperReturnValues.put(Character.class, '\\u0000');\n-        wrapperReturnValues.put(Byte.class, (byte) 0);\n-        wrapperReturnValues.put(Short.class, (short) 0);\n-        wrapperReturnValues.put(Integer.class, 0);\n-        wrapperReturnValues.put(Long.class, 0L);\n-        wrapperReturnValues.put(Float.class, 0F);\n-        wrapperReturnValues.put(Double.class, 0D);\n-    }\n-\n-    static {\n-        primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, '\\u0000');\n-        primitiveValues.put(byte.class, (byte) 0);\n-        primitiveValues.put(short.class, (short) 0);\n-        primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0L);\n-        primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n-    }\n-}\n\\ No newline at end of file\n+public class MyPrimitives {\n+\n+    private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n+\n+    static {\n+        primitiveTypes.put(Boolean.class, boolean.class);\n+        primitiveTypes.put(Character.class, char.class);\n+        primitiveTypes.put(Byte.class, byte.class);\n+        primitiveTypes.put(Short.class, short.class);\n+        primitiveTypes.put(Integer.class, int.class);\n+        primitiveTypes.put(Long.class, long.class);\n+        primitiveTypes.put(Float.class, float.class);\n+        primitiveTypes.put(Double.class, double.class);\n+    }\n+\n+    private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n+\n+    static {\n+        wrapperReturnValues.put(Boolean.class, false);\n+        wrapperReturnValues.put(Character.class, '\\u0000');\n+        wrapperReturnValues.put(Byte.class, (byte) 0);\n+        wrapperReturnValues.put(Short.class, (short) 0);\n+        wrapperReturnValues.put(Integer.class, 0);\n+        wrapperReturnValues.put(Long.class, 0L);\n+        wrapperReturnValues.put(Float.class, 0F);\n+        wrapperReturnValues.put(Double.class, 0D);\n+    }\n+\n+    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n+\n+    static {\n+        primitiveValues.put(boolean.class, false);\n+        primitiveValues.put(char.class, '\\u0000');\n+        primitiveValues.put(byte.class, (byte) 0);\n+        primitiveValues.put(short.class, (short) 0);\n+        primitiveValues.put(int.class, 0);\n+        primitiveValues.put(long.class, 0L);\n+        primitiveValues.put(float.class, 0F);\n+        primitiveValues.put(double.class, 0D);\n+    }\n+\n+    public static Object returnFor(Class<?> clazz) {\n+        if (wrapperReturnValues.containsKey(clazz)) {\n+            return wrapperReturnValues.get(clazz);\n+        } else if (primitiveValues.containsKey(clazz)) {\n+            return primitiveValues.get(clazz);\n+        } else {\n+            throw new IllegalArgumentException(\"Class \" + clazz.getName() + \" is not a primitive or a wrapper class.\");\n+        }\n+    }\n+\n+    public static boolean isPrimitive(Class<?> clazz) {\n+        return primitiveValues.containsKey(clazz) || primitiveTypes.containsKey(clazz);\n+    }\n+\n+    public static boolean isWrapper(Class<?> clazz) {\n+        return wrapperReturnValues.containsKey(clazz) || primitiveTypes.containsValue(clazz);\n+    }\n+\n+    public static Class<?> getPrimitiveType(Class<?> wrapperType) {\n+        return primitiveTypes.get(wrapperType);\n+    }\n+\n+    public static Class<?> getWrapperType(Class<?> primitiveType) {\n+        for (Map.Entry<Class<?>, Class<?>> entry : primitiveTypes.entrySet()) {\n+            if (entry.getValue().equals(primitiveType)) {\n+                return entry.getKey();\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Class \" + primitiveType.getName() + \" is not a primitive type.\");\n+    }\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}