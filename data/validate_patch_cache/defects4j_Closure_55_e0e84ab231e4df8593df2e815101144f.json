{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isCall()) {\n        Node fn = n.getFirstChild();\n        if (fn.isName()) {\n            return false; // named functions are not reduceable\n        }\n        n = fn;\n    }\n    return NodeUtil.isFunctionExpression(n);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..df10905a 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,16 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isCall()) {\n+        Node fn = n.getFirstChild();\n+        if (fn.isName()) {\n+            return false; // named functions are not reduceable\n+        }\n+        n = fn;\n+    }\n     return NodeUtil.isFunctionExpression(n);\n-  }\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}