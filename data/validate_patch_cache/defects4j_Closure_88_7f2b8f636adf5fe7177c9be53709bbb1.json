{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n)) {\n      return VariableLiveness.KILL;\n    } else {\n      return VariableLiveness.READ;\n    }\n  } else {\n    if (n.isFunction()) {\n      // This is the closing brace of a function, not a new CFG block.\n      return VariableLiveness.MAYBE_LIVE;\n    } else if (NodeUtil.mayContainFunctionDeclaration(n)) {\n      // Don't go into functions.  We treat them as opaque blocks.\n      return VariableLiveness.MAYBE_LIVE;\n    } else {\n      // Expressions are evaluated left-right, depth first.\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state == VariableLiveness.KILL) {\n          // Consider the variable to be definitely killed if it is killed in any child.\n          return state;\n        } else if (state == VariableLiveness.READ) {\n          // Consider the variable to be definitely read if it is read in any child.\n          return state;\n        }\n      }\n    }\n  }\n  // The variable may be live.\n  return VariableLiveness.MAYBE_LIVE;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..96c64a6b 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,35 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n+  if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    if (NodeUtil.isLhs(n)) {\n+      return VariableLiveness.KILL;\n+    } else {\n+      return VariableLiveness.READ;\n     }\n-\n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+  } else {\n+    if (n.isFunction()) {\n+      // This is the closing brace of a function, not a new CFG block.\n+      return VariableLiveness.MAYBE_LIVE;\n+    } else if (NodeUtil.mayContainFunctionDeclaration(n)) {\n+      // Don't go into functions.  We treat them as opaque blocks.\n+      return VariableLiveness.MAYBE_LIVE;\n+    } else {\n+      // Expressions are evaluated left-right, depth first.\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n+        if (state == VariableLiveness.KILL) {\n+          // Consider the variable to be definitely killed if it is killed in any child.\n+          return state;\n+        } else if (state == VariableLiveness.READ) {\n+          // Consider the variable to be definitely read if it is read in any child.\n           return state;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n   }\n+  // The variable may be live.\n+  return VariableLiveness.MAYBE_LIVE;\n+}\n }",
    "result_reason": "error: method isLhs in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}