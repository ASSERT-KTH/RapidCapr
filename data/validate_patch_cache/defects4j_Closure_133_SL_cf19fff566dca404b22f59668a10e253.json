{
    "patch": "private static boolean anyResultMatches(Node n, Predicate<Node> predicate) {\n    for (Node child : n.children()) {\n        if (predicate.apply(child)) {\n            return true;\n        }\n        if (anyResultMatches(child, predicate)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..65828f1e 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2398,6 +2398,17 @@ public final class JsDocInfoParser {\n    */\n   private String getRemainingJSDocLine() {\n     String result = stream.getRemainingJSDocLine();\n+private static boolean anyResultMatches(Node n, Predicate<Node> predicate) {\n+    for (Node child : n.children()) {\n+        if (predicate.apply(child)) {\n+            return true;\n+        }\n+        if (anyResultMatches(child, predicate)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n     return result;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}