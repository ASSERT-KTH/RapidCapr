{
    "patch": "      switch (n.getType()) {\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            name = getNameForObjLitKey(n);\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected: \" + n);\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent!= null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  isFunctionname = true;\n                  name = n.getString();\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER; // 'arguments++'\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                } else if (NodeUtil.isFunctionDeclaration(parent)) {\n                  isFunctionname = true;\n                  name = n.getString();\n                }\n            }\n          }\n          if (!isFunctionname) {\n            name = n.getString();\n          }\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER; // 'foo.bar++'\n                break;\n              case Token.GETPROP:\n                return; // 'foo.bar.baz'\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                } else if (parent.getType() == Token.CLASS && n == parent.getFirstChild()) {\n                  isClassname = true;\n                }\n            }\n          }\n          name = n.getQualifiedName();\n          if (name == null) {\n            return; // e.g. super.x\n          }\n          break;\n        case Token.MEMBER_FUNCTION_DEF:\n        case Token.GETTER_DEF:\n        case Token.SETTER_DEF:\n        case Token.STRING_KEY:\n          // This may be a key in an object literal declaration.\n          name = null;\n          if (parent != null && parent.isObjectLit()) {\n            if (n.isQuotedString()) {\n              name = n.getString();\n            } else if (n.getFirstChild().isName()) {\n              name = n.getFirstChild().getString();\n            }\n          }\n          if (name == null) {\n            return;\n          }\n          isSet = true;\n          switch (n.getType()) {\n            case Token.STRING_KEY:\n              type = getValueType(n.getFirstChild());\n              break;\n            case Token.MEMBER_FUNCTION_DEF:\n              type = Name.Type.FUNCTION;\n              break;\n            case Token.GETTER_DEF:\n              type = Name.Type.GET;\n              break;\n            case Token.SETTER_DEF:\n              type = Name.Type.SET;\n              break;\n            default:\n              throw new IllegalStateException(\"unexpected:\" + n);\n          }\n          break;\n        case Token.MEMBER_DEF:\n          // This may be a key in an object literal declaration.\n          // We only care about quoted string keys with a function value.\n          if (!n.isQuotedString() || !parent.isObjectLit() ||\n              n.getNext().getType() != Token.FUNCTION) {\n            return;\n          }\n          isSet = true;\n          type = Name.Type.FUNCTION;\n          name = n.getString();\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        if (isClassname) {\n          handleGet(module, scope, n, parent, name, Name.Type.CLASS);\n        } else {\n          handleGet(module, scope, n, parent, name);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..feafc482 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,175 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      switch (n.getType()) {\n+        case Token.GETTER_DEF:\n+        case Token.SETTER_DEF:\n+        case Token.STRING_KEY:\n+          // This may be a key in an object literal declaration.\n+          name = null;\n+          if (parent != null && parent.isObjectLit()) {\n+            name = getNameForObjLitKey(n);\n+          }\n+          if (name == null) {\n+            return;\n+          }\n+          isSet = true;\n+          switch (n.getType()) {\n+            case Token.STRING_KEY:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case Token.GETTER_DEF:\n+              type = Name.Type.GET;\n+              break;\n+            case Token.SETTER_DEF:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected: \" + n);\n+          }\n+          break;\n+        case Token.NAME:\n+          // This may be a variable get or set.\n+          if (parent!= null) {\n+            switch (parent.getType()) {\n+              case Token.VAR:\n+                isSet = true;\n+                Node rvalue = n.getFirstChild();\n+                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+                break;\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                }\n+                break;\n+              case Token.FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  isFunctionname = true;\n+                  name = n.getString();\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER; // 'arguments++'\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                } else if (NodeUtil.isFunctionDeclaration(parent)) {\n+                  isFunctionname = true;\n+                  name = n.getString();\n+                }\n+            }\n+          }\n+          if (!isFunctionname) {\n+            name = n.getString();\n+          }\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER; // 'foo.bar++'\n+                break;\n+              case Token.GETPROP:\n+                return; // 'foo.bar.baz'\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                } else if (parent.getType() == Token.CLASS && n == parent.getFirstChild()) {\n+                  isClassname = true;\n+                }\n+            }\n+          }\n+          name = n.getQualifiedName();\n+          if (name == null) {\n+            return; // e.g. super.x\n+          }\n+          break;\n+        case Token.MEMBER_FUNCTION_DEF:\n+        case Token.GETTER_DEF:\n+        case Token.SETTER_DEF:\n+        case Token.STRING_KEY:\n+          // This may be a key in an object literal declaration.\n+          name = null;\n+          if (parent != null && parent.isObjectLit()) {\n+            if (n.isQuotedString()) {\n+              name = n.getString();\n+            } else if (n.getFirstChild().isName()) {\n+              name = n.getFirstChild().getString();\n+            }\n+          }\n+          if (name == null) {\n+            return;\n+          }\n+          isSet = true;\n+          switch (n.getType()) {\n+            case Token.STRING_KEY:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case Token.MEMBER_FUNCTION_DEF:\n+              type = Name.Type.FUNCTION;\n+              break;\n+            case Token.GETTER_DEF:\n+              type = Name.Type.GET;\n+              break;\n+            case Token.SETTER_DEF:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected:\" + n);\n+          }\n+          break;\n+        case Token.MEMBER_DEF:\n+          // This may be a key in an object literal declaration.\n+          // We only care about quoted string keys with a function value.\n+          if (!n.isQuotedString() || !parent.isObjectLit() ||\n+              n.getNext().getType() != Token.FUNCTION) {\n+            return;\n+          }\n+          isSet = true;\n+          type = Name.Type.FUNCTION;\n+          name = n.getString();\n+          break;\n+        default:\n+          return;\n+      }\n+\n+      // We are only interested in global names.\n+      if (!isGlobalNameReference(name, scope)) {\n+        return;\n+      }\n+\n+      if (isSet) {\n+        if (isGlobalScope(scope)) {\n+          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+        } else {\n+          handleSetFromLocal(module, scope, n, parent, name);\n+        }\n+      } else {\n+        if (isClassname) {\n+          handleGet(module, scope, n, parent, name, Name.Type.CLASS);\n+        } else {\n+          handleGet(module, scope, n, parent, name);\n+        }\n+      }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable rvalue is already defined in method collect(JSModule,Scope,Node)",
    "test_result": "ERROR"
}