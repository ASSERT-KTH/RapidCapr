{
    "patch": "      if (NodeUtil.isExpressionResultUsed(n) && !parent.isExprResult()) {\n        // The rhs of the assignment is the caller, so it's used by the\n        // context. Don't associate it w/ the lhs.\n        // FYI: this fixes only the specific case where the assignment is the\n        // caller expression, but it could be nested deeper in the caller and\n        // we would still get a bug.\n        // See testAssignWithCall2 for an example of this.\n        Node rhsNode = n.getLastChild();\n        Preconditions.checkState(NodeUtil.isCall(rhsNode),\n            \"Expected a call, but found: %s\", rhsNode);\n        for (Node child = rhsNode.getFirstChild(); child != null; child = child.getNext()) {\n          addDependencies(t, ns, child);\n        }\n      } else if (NodeUtil.isAssignmentOp(n)) {\n        recordDepScope(recordNode, ns);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..aa94912b 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -554,7 +554,6 @@ final class NameAnalyzer implements CompilerPass {\n           break;\n       }\n     }\n-\n     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n       Node nameNode = n.getFirstChild();\n       Node parent = n.getParent();\n@@ -575,7 +574,22 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+      if (NodeUtil.isExpressionResultUsed(n) && !parent.isExprResult()) {\n+        // The rhs of the assignment is the caller, so it's used by the\n+        // context. Don't associate it w/ the lhs.\n+        // FYI: this fixes only the specific case where the assignment is the\n+        // caller expression, but it could be nested deeper in the caller and\n+        // we would still get a bug.\n+        // See testAssignWithCall2 for an example of this.\n+        Node rhsNode = n.getLastChild();\n+        Preconditions.checkState(NodeUtil.isCall(rhsNode),\n+            \"Expected a call, but found: %s\", rhsNode);\n+        for (Node child = rhsNode.getFirstChild(); child != null; child = child.getNext()) {\n+          addDependencies(t, ns, child);\n+        }\n+      } else if (NodeUtil.isAssignmentOp(n)) {\n+        recordDepScope(recordNode, ns);\n+      }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}