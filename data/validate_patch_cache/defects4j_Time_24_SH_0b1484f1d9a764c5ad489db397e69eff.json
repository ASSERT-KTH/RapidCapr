{
    "patch": "} catch (IllegalFieldValueException e) {\n    boolean hasTimeField = false;\n    for(int i=0; i<count; i++){\n        if(savedFields[i].iField.getType().equals(DateTimeFieldType.clockhourOfDay()) ||\n           savedFields[i].iField.getType().equals(DateTimeFieldType.hourOfDay()) ||\n           savedFields[i].iField.getType().equals(DateTimeFieldType.minuteOfDay()) ||\n           savedFields[i].iField.getType().equals(DateTimeFieldType.secondOfDay()) ||\n           savedFields[i].iField.getType().equals(DateTimeFieldType.millisOfDay())\n          ){\n            hasTimeField = true;\n            break;\n        }\n    }\n    if (hasTimeField) {\n        throw new IllegalArgumentException(\"Time of day exceeds maximum value: \" + text);\n    } else {\n        throw new IllegalArgumentException(\"Invalid date: \" + text);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..bd59e505 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,25 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+} catch (IllegalFieldValueException e) {\n+    boolean hasTimeField = false;\n+    for(int i=0; i<count; i++){\n+        if(savedFields[i].iField.getType().equals(DateTimeFieldType.clockhourOfDay()) ||\n+           savedFields[i].iField.getType().equals(DateTimeFieldType.hourOfDay()) ||\n+           savedFields[i].iField.getType().equals(DateTimeFieldType.minuteOfDay()) ||\n+           savedFields[i].iField.getType().equals(DateTimeFieldType.secondOfDay()) ||\n+           savedFields[i].iField.getType().equals(DateTimeFieldType.millisOfDay())\n+          ){\n+            hasTimeField = true;\n+            break;\n+        }\n+    }\n+    if (hasTimeField) {\n+        throw new IllegalArgumentException(\"Time of day exceeds maximum value: \" + text);\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid date: \" + text);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}