{
    "patch": "        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if (Double.isNaN(result[resultOffset])) {\n\n            // special cases for dealing with +/- infinity\n            if (Double.isInfinite(x[xOffset])) {\n                if (Double.isInfinite(y[yOffset]) && x[xOffset] == y[yOffset]) {\n                    result[resultOffset] = (x[xOffset] > 0 ? FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0);\n                } else {\n                    result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n                }\n            } else if (Double.isInfinite(y[yOffset])) {\n                result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n            }\n\n            // special cases for dealing with +/-0.0\n            if (Double.doubleToRawLongBits(x[xOffset]) == 0L) {\n                if (Double.doubleToRawLongBits(y[yOffset]) == 0L) {\n                    throw new RuntimeException(\"Invalid atan2 arguments\");\n                } else {\n                    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n                }\n            } else if (Double.doubleToRawLongBits(y[yOffset]) == 0L) {\n                result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n            }\n\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..0ded7fc68 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,32 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(result[resultOffset])) {\n+\n+            // special cases for dealing with +/- infinity\n+            if (Double.isInfinite(x[xOffset])) {\n+                if (Double.isInfinite(y[yOffset]) && x[xOffset] == y[yOffset]) {\n+                    result[resultOffset] = (x[xOffset] > 0 ? FastMath.PI / 4.0 : 3.0 * FastMath.PI / 4.0);\n+                } else {\n+                    result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n+                }\n+            } else if (Double.isInfinite(y[yOffset])) {\n+                result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+            }\n+\n+            // special cases for dealing with +/-0.0\n+            if (Double.doubleToRawLongBits(x[xOffset]) == 0L) {\n+                if (Double.doubleToRawLongBits(y[yOffset]) == 0L) {\n+                    throw new RuntimeException(\"Invalid atan2 arguments\");\n+                } else {\n+                    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+                }\n+            } else if (Double.doubleToRawLongBits(y[yOffset]) == 0L) {\n+                result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n+            }\n+\n+        }\n \n     }\n ",
    "result_reason": "java.lang.RuntimeException: Invalid atan2 arguments",
    "test_result": "FAIL"
}