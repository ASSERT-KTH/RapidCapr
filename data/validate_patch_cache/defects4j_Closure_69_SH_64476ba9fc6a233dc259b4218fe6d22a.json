{
    "patch": "      ObjectType typeOfThis = functionType.getTypeOfThis();\n      if (typeOfThis != null) {\n        Node typeOfThisNode = typeOfThis.getReferenceNode();\n        if (typeOfThisNode != null &&\n            !NodeUtil.isGet(typeOfThisNode) &&\n            !NodeUtil.isName(typeOfThisNode) &&\n            !NodeUtil.isStringKey(typeOfThisNode)) {\n          report(t, n, INVALID_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..9abe18d2 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      ObjectType typeOfThis = functionType.getTypeOfThis();\n+      if (typeOfThis != null) {\n+        Node typeOfThisNode = typeOfThis.getReferenceNode();\n+        if (typeOfThisNode != null &&\n+            !NodeUtil.isGet(typeOfThisNode) &&\n+            !NodeUtil.isName(typeOfThisNode) &&\n+            !NodeUtil.isStringKey(typeOfThisNode)) {\n+          report(t, n, INVALID_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}