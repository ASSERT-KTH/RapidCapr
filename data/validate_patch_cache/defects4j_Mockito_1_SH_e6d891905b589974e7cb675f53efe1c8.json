{
    "patch": "    Object[] args = invocation.getRawArguments();\n    int argCount = args.length;\n    for (int i = 0; i < matchers.size(); i++) {\n        Matcher Matcher = matchers.get(i);\n        if (Matcher instanceof CapturesArguments) {\n            if (i < argCount) {\n                ((CapturesArguments) Matcher)",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..37eeb2ed9 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] args = invocation.getRawArguments();\n+    int argCount = args.length;\n+    for (int i = 0; i < matchers.size(); i++) {\n+        Matcher Matcher = matchers.get(i);\n+        if (Matcher instanceof CapturesArguments) {\n+            if (i < argCount) {\n+                ((CapturesArguments) Matcher)\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}