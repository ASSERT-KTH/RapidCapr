{
    "patch": "      Node child = first.getNext();\n      while (child != null) {\n        if (child.isName() && child.isDeclaredVar()) {\n          Var var = getDeclarScope().getVar(child.getString());\n          if (var == null || !var.isExtern()) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n            break;\n          }\n        } else {\n          break;\n        }\n        child = child.getNext();\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..69ee4a10 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,19 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node child = first.getNext();\n+      while (child != null) {\n+        if (child.isName() && child.isDeclaredVar()) {\n+          Var var = getDeclarScope().getVar(child.getString());\n+          if (var == null || !var.isExtern()) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+            break;\n+          }\n+        } else {\n+          break;\n+        }\n+        child = child.getNext();\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}