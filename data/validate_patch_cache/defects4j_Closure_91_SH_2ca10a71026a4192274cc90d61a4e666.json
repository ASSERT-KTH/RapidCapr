{
    "patch": " if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n        return true;\n      }\n    } else if (objectRefNeedsTraversal(lhs)) {\n      return true;\n    }\n\n    return false;\n  }\n  \n  return true;\n}\n\nprivate boolean objectRefNeedsTraversal(Node n) {\n  if (NodeUtil.isGet(n) && n.getType() == Token.GETPROP) {\n    Node objectRef = n.getFirstChild();\n    String objectName = objectRef.getQualifiedName();\n    if (objectName != null && objectName.equals(\"prototype\")) {\n      return false;\n    }\n    while (objectRef.getType() == Token.GETPROP) {\n      objectRef = objectRef.getFirstChild();\n    }\n    if (objectRef.getType() == Token.NAME &&\n        !t.getScope().getVar(objectRef.getString()).isGlobal()) {\n      return false;\n    }\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..1fe10294 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,46 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+ if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+        return true;\n+      }\n+    } else if (objectRefNeedsTraversal(lhs)) {\n+      return true;\n+    }\n+\n+    return false;\n+  }\n+  \n+  return true;\n+}\n+\n+private boolean objectRefNeedsTraversal(Node n) {\n+  if (NodeUtil.isGet(n) && n.getType() == Token.GETPROP) {\n+    Node objectRef = n.getFirstChild();\n+    String objectName = objectRef.getQualifiedName();\n+    if (objectName != null && objectName.equals(\"prototype\")) {\n+      return false;\n+    }\n+    while (objectRef.getType() == Token.GETPROP) {\n+      objectRef = objectRef.getFirstChild();\n+    }\n+    if (objectRef.getType() == Token.NAME &&\n+        !t.getScope().getVar(objectRef.getString()).isGlobal()) {\n+      return false;\n+    }\n+    return true;\n+  }\n+  return false;\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}