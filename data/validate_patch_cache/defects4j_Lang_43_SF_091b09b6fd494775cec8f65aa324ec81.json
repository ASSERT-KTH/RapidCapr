{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    boolean inQuote = false;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        char current = c[i];\n        if (current == QUOTE) {\n            if (escapingOn && i < pattern.length() - 1 && c[i+1] == QUOTE) {\n                // Double quote, skip both\n                pos.setIndex(i + 2);\n                continue;\n            } else {\n                inQuote = !inQuote;\n            }\n        }\n        if (inQuote) {\n            continue;\n        }\n        switch (current) {\n        case QUOTE:\n            next(pos);\n            return appendTo == null ? null : appendTo.append(c, lastHold,\n                    pos.getIndex() - lastHold);\n        default:\n            next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..a216a2d9 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,41 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+        StringBuffer appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    char[] c = pattern.toCharArray();\n+    if (escapingOn && c[start] == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+    int lastHold = start;\n+    boolean inQuote = false;\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        char current = c[i];\n+        if (current == QUOTE) {\n+            if (escapingOn && i < pattern.length() - 1 && c[i+1] == QUOTE) {\n+                // Double quote, skip both\n+                pos.setIndex(i + 2);\n                 continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+            } else {\n+                inQuote = !inQuote;\n             }\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+        if (inQuote) {\n+            continue;\n+        }\n+        switch (current) {\n+        case QUOTE:\n+            next(pos);\n+            return appendTo == null ? null : appendTo.append(c, lastHold,\n+                    pos.getIndex() - lastHold);\n+        default:\n+            next(pos);\n+        }\n     }\n+    throw new IllegalArgumentException(\n+            \"Unterminated quoted string at position \" + start);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "java.lang.OutOfMemoryError: Requested array size exceeds VM limit",
    "test_result": "FAIL"
}