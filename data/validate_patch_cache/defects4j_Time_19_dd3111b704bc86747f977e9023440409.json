{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        if (offsetLocal != offsetAdjusted) {\n\n            if (isNearDSTTransition(instantAdjusted)) {\n                final int diff = offsetLocal - offsetAdjusted;\n                final long nextTransition = nextTransition(instantAdjusted);\n                final long nextTransitionAdjusted = nextTransition - diff;\n\n                if (instantLocal < nextTransitionAdjusted) {\n                    return offsetLocal;\n                }\n\n            } else {\n                return offsetAdjusted;\n            }\n\n        } else if (offsetLocal > 0 && isNearDSTTransition(instantAdjusted)) {\n\n            final long prevTransition = previousTransition(instantAdjusted);\n            final int offsetPrevTransition = getOffset(prevTransition);\n\n            if (offsetPrevTransition < offsetLocal) {\n                return offsetPrevTransition;\n            }\n        }\n\n        return offsetAdjusted;\n    }\n\n    private boolean isNearDSTTransition(final long instant) {\n        final int offsetBefore = getOffset(instant - 1L);\n        final int offsetAfter = getOffset(instant + 1L);\n        final boolean isNearTransition = (offsetBefore - offsetAfter) != 0;\n        return isNearTransition;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..1ed0e9d7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,38 +878,45 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n+\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+\n+            if (isNearDSTTransition(instantAdjusted)) {\n+                final int diff = offsetLocal - offsetAdjusted;\n+                final long nextTransition = nextTransition(instantAdjusted);\n+                final long nextTransitionAdjusted = nextTransition - diff;\n+\n+                if (instantLocal < nextTransitionAdjusted) {\n                     return offsetLocal;\n                 }\n+\n+            } else {\n+                return offsetAdjusted;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+\n+        } else if (offsetLocal > 0 && isNearDSTTransition(instantAdjusted)) {\n+\n+            final long prevTransition = previousTransition(instantAdjusted);\n+            final int offsetPrevTransition = getOffset(prevTransition);\n+\n+            if (offsetPrevTransition < offsetLocal) {\n+                return offsetPrevTransition;\n             }\n         }\n+\n         return offsetAdjusted;\n     }\n \n+    private boolean isNearDSTTransition(final long instant) {\n+        final int offsetBefore = getOffset(instant - 1L);\n+        final int offsetAfter = getOffset(instant + 1L);\n+        final boolean isNearTransition = (offsetBefore - offsetAfter) != 0;\n+        return isNearTransition;\n+    }\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}