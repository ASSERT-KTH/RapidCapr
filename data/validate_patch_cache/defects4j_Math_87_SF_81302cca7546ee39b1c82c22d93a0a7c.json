{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            if (MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n                continue; // skip this iteration if the entry is zero\n            }\n            if (row == null) {\n                row = i;\n            } else {\n                if (MathUtils.equals(getEntry(row, col), getEntry(i, col), epsilon)) {\n                    row = null;\n                    break; // return null if we find two non-zero entries with the same value\n                } else {\n                    return null; // return null if we find two non-zero entries with different values\n                }\n            }\n        }\n        return row;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..035e1b807 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -272,11 +272,17 @@ class SimplexTableau implements Serializable {\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n+            if (MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n+                continue; // skip this iteration if the entry is zero\n+            }\n+            if (row == null) {\n                 row = i;\n+            } else {\n+                if (MathUtils.equals(getEntry(row, col), getEntry(i, col), epsilon)) {\n+                    row = null;\n+                    break; // return null if we find two non-zero entries with the same value\n                 } else {\n-                return null;\n+                    return null; // return null if we find two non-zero entries with different values\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<10.0> but was:<0.0>",
    "test_result": "FAIL"
}