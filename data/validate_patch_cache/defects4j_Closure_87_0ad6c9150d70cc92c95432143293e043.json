{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        // If the BLOCK node is a TRY block, we don't want to fold EXPR_RESULT\n        // node into other expressions. It might break the try-catch flow.\n        if (n.getParent() != null && n.getParent().getType() == Token.TRY) {\n          return false;\n        }\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.isExprResult()) {\n          maybeExpr = maybeExpr.getFirstChild();\n          // The following check addresses the case mentioned in the comment above.\n          if (NodeUtil.referencesThis(maybeExpr)) {\n            return false;\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..65c14889 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -519,21 +519,22 @@ public class PeepholeSubstituteAlternateSyntax\n   private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n+        // If the BLOCK node is a TRY block, we don't want to fold EXPR_RESULT\n+        // node into other expressions. It might break the try-catch flow.\n+        if (n.getParent() != null && n.getParent().getType() == Token.TRY) {\n+          return false;\n+        }\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (maybeExpr.isExprResult()) {\n+          maybeExpr = maybeExpr.getFirstChild();\n+          // The following check addresses the case mentioned in the comment above.\n+          if (NodeUtil.referencesThis(maybeExpr)) {\n+            return false;\n+          }\n+        }\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n-\n     return false;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}