{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    final double x = v1.y * v2.z - v1.z * v2.y;\n    final double y = v1.z * v2.x - v1.x * v2.z;\n    final double z = v1.x * v2.y - v1.y * v2.x;\n\n    double vx = x;\n    double vy = y;\n    double vz = z;\n\n    double comp1 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n    double q1 = 0.6;\n\n    double factor;\n    if (comp1 >= 0.0) {\n        final double inv = 1.0 / (1.0 + comp1);\n        factor = (inv * inv) * q1;\n    } else {\n        final double tmp = 1.0 + comp1;\n        factor = tmp * tmp * q1;\n        if (factor < 0.0 || factor > 4.0 * q1) {\n            // should not happen unless we have a NaN or infinite comp1\n            return new Vector3D(x, y, z);\n        }\n    }\n\n    double eps = factor * (vx * vx + vy * vy + vz * vz);\n    if (eps > 1.0e-8) {\n\n        // apply Gram-Schmidt correction to VX / sqrt(eps)\n        final double baseX = vx / Math.sqrt(eps);\n        comp1 = Vector3D.dotProduct(v1, v2) / Vector3D.dotProduct(v2, v2);\n        final Vector3D correctedV1 = new Vector3D(v1.x - comp1 * v2.x, v1.y - comp1 * v2.y, v1.z - comp1 * v2.z);\n        comp1 = Vector3D.dotProduct(correctedV1, v2) / Vector3D.dotProduct(v2, v2);\n        final Vector3D projectedCorrectedV1 = new Vector3D(correctedV1.x - comp1 * v2.x, correctedV1.y - comp1 * v2.y, correctedV1.z - comp1 * v2.z);\n\n        // apply Gram-Schmidt correction to VY\n        final double baseY = Vector3D.dotProduct(projectedCorrectedV1, correctedV1);\n        eps *= baseY;\n        if (eps > 1.0e-8 * baseY) {\n            final double inv = 1.0 / Math.sqrt(eps);\n            final double correctedX = baseX * inv;\n            comp1 = Vector3D.dotProduct(projectedCorrectedV1, v2) / Vector3D.dotProduct(v2, v2);\n            final Vector3D correctedV2 = new Vector3D(v2.x - comp1 * projectedCorrectedV1.x, v2.y - comp1 * projectedCorrectedV1.y, v2.z - comp1 * projectedCorrectedV1.z);\n            final double correctedY = Vector3D.dotProduct(projectedCorrectedV1, correctedV2) * inv;\n            comp1 = Vector3D.dotProduct(correctedV2, projectedCorrectedV1);\n            final Vector3D correctedV3 = new Vector3D(correctedV2.x - comp1 * projectedCorrectedV1.x, correctedV2.y - comp1 * projectedCorrectedV1.y, correctedV2.z - comp1 * projectedCorrectedV1.z);\n            final double correctedZ = Vector3D.dotProduct(correctedV3, projectedCorrectedV1) * inv * inv;\n            vx = correctedX;\n            vy = correctedY;\n            vz = correctedZ;\n        }\n    }\n\n    return new Vector3D(vx, vy, vz);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..1477d5698 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,61 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    final double x = v1.y * v2.z - v1.z * v2.y;\n+    final double y = v1.z * v2.x - v1.x * v2.z;\n+    final double z = v1.x * v2.y - v1.y * v2.x;\n+\n+    double vx = x;\n+    double vy = y;\n+    double vz = z;\n+\n+    double comp1 = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;\n+    double q1 = 0.6;\n+\n+    double factor;\n+    if (comp1 >= 0.0) {\n+        final double inv = 1.0 / (1.0 + comp1);\n+        factor = (inv * inv) * q1;\n+    } else {\n+        final double tmp = 1.0 + comp1;\n+        factor = tmp * tmp * q1;\n+        if (factor < 0.0 || factor > 4.0 * q1) {\n+            // should not happen unless we have a NaN or infinite comp1\n+            return new Vector3D(x, y, z);\n+        }\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    double eps = factor * (vx * vx + vy * vy + vz * vz);\n+    if (eps > 1.0e-8) {\n+\n+        // apply Gram-Schmidt correction to VX / sqrt(eps)\n+        final double baseX = vx / Math.sqrt(eps);\n+        comp1 = Vector3D.dotProduct(v1, v2) / Vector3D.dotProduct(v2, v2);\n+        final Vector3D correctedV1 = new Vector3D(v1.x - comp1 * v2.x, v1.y - comp1 * v2.y, v1.z - comp1 * v2.z);\n+        comp1 = Vector3D.dotProduct(correctedV1, v2) / Vector3D.dotProduct(v2, v2);\n+        final Vector3D projectedCorrectedV1 = new Vector3D(correctedV1.x - comp1 * v2.x, correctedV1.y - comp1 * v2.y, correctedV1.z - comp1 * v2.z);\n+\n+        // apply Gram-Schmidt correction to VY\n+        final double baseY = Vector3D.dotProduct(projectedCorrectedV1, correctedV1);\n+        eps *= baseY;\n+        if (eps > 1.0e-8 * baseY) {\n+            final double inv = 1.0 / Math.sqrt(eps);\n+            final double correctedX = baseX * inv;\n+            comp1 = Vector3D.dotProduct(projectedCorrectedV1, v2) / Vector3D.dotProduct(v2, v2);\n+            final Vector3D correctedV2 = new Vector3D(v2.x - comp1 * projectedCorrectedV1.x, v2.y - comp1 * projectedCorrectedV1.y, v2.z - comp1 * projectedCorrectedV1.z);\n+            final double correctedY = Vector3D.dotProduct(projectedCorrectedV1, correctedV2) * inv;\n+            comp1 = Vector3D.dotProduct(correctedV2, projectedCorrectedV1);\n+            final Vector3D correctedV3 = new Vector3D(correctedV2.x - comp1 * projectedCorrectedV1.x, correctedV2.y - comp1 * projectedCorrectedV1.y, correctedV2.z - comp1 * projectedCorrectedV1.z);\n+            final double correctedZ = Vector3D.dotProduct(correctedV3, projectedCorrectedV1) * inv * inv;\n+            vx = correctedX;\n+            vy = correctedY;\n+            vz = correctedZ;\n+        }\n+    }\n \n-  }\n+    return new Vector3D(vx, vy, vz);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1.5707963267948968>",
    "test_result": "FAIL"
}