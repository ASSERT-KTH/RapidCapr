{
    "patch": "import com.google.javascript.rhino.Token;\n\npublic class AstAnalyzer {\n  private final ControlFlowGraph<Node> cfg;\n\n  public AstAnalyzer(ControlFlowGraph<Node> cfg) {\n    this.cfg = cfg;\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private static boolean canNodeThrow(Node node) {\n    switch (node.getToken()) {\n      case Token.TRY:\n        return false;\n      case Token.THROW:\n        return true;\n      default:\n        if (NodeUtil.mayThrowException(node)) {\n          return true;\n        } else {\n          for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            if (canNodeThrow(c)) {\n              return true;\n            }\n          }\n          return false;\n        }\n    }\n  }\n\n  public boolean isDependent(Node actuallyMutates, Node reading) {\n    ControlFlowGraph<Node> cfg = ControlFlowAnalysis.computeCFG(actuallyMutates);\n    AstAnalyzer analyzer = new AstAnalyzer(cfg);\n    return analyzer.run(reading);\n  }\n\n  private boolean run(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n      return false;\n    }\n\n    // TODO(user): We only care about calls to functions that\n    // passes one of the dependent variable to a non-side-effect free\n    // function.\n    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n      return true;\n    }\n\n    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n      return true;\n    }\n\n    if (n.isForIn() || n.isForOf()) {\n      return true;\n    }\n\n    if (canNodeThrow(n)) {\n      return true;\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && run(c)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..9425ab27 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,85 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+import com.google.javascript.rhino.Token;\n+\n+public class AstAnalyzer {\n+  private final ControlFlowGraph<Node> cfg;\n+\n+  public AstAnalyzer(ControlFlowGraph<Node> cfg) {\n+    this.cfg = cfg;\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static boolean canNodeThrow(Node node) {\n+    switch (node.getToken()) {\n+      case Token.TRY:\n+        return false;\n+      case Token.THROW:\n+        return true;\n+      default:\n+        if (NodeUtil.mayThrowException(node)) {\n+          return true;\n+        } else {\n+          for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+            if (canNodeThrow(c)) {\n+              return true;\n+            }\n+          }\n+          return false;\n+        }\n+    }\n+  }\n+\n+  public boolean isDependent(Node actuallyMutates, Node reading) {\n+    ControlFlowGraph<Node> cfg = ControlFlowAnalysis.computeCFG(actuallyMutates);\n+    AstAnalyzer analyzer = new AstAnalyzer(cfg);\n+    return analyzer.run(reading);\n+  }\n+\n+  private boolean run(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement)\n+    if (n == null) {\n+      return false;\n+    }\n+\n+    // TODO(user): We only care about calls to functions that\n+    // passes one of the dependent variable to a non-side-effect free\n+    // function.\n+    if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+      return true;\n+    }\n+\n+    if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+      return true;\n+    }\n+\n+    if (n.isForIn() || n.isForOf()) {\n+      return true;\n+    }\n+\n+    if (canNodeThrow(n)) {\n+      return true;\n+    }\n+\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && run(c)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}