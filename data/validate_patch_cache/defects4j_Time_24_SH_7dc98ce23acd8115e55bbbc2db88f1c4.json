{
    "patch": "for (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    } catch (ArithmeticException e) {\n        if (text != null) {\n            e =\n              new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n        }\n        throw new IllegalFieldValueException(\n          savedFields[i].iField.getType(),\n          Integer.valueOf(savedFields[i].iValue),\n          null,\n          e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..04a4525b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    } catch (ArithmeticException e) {\n+        if (text != null) {\n+            e =\n+              new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": \" + e.getMessage());\n+        }\n+        throw new IllegalFieldValueException(\n+          savedFields[i].iField.getType(),\n+          Integer.valueOf(savedFields[i].iValue),\n+          null,\n+          e);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: no suitable constructor found for IllegalFieldValueException(String)",
    "test_result": "ERROR"
}