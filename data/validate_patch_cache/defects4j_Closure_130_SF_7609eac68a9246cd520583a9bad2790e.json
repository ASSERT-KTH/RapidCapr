{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET ||\n          name.getDeclaration() == null ||\n          name.getDeclaration().isFunctionDeclaration() ||\n          name.getDeclaration().getClosestHoistScope() != null) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b). Find all of its local aliases\n        // and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() &&\n              !namespace.getReferencedPropertyOf().contains(ref)) {\n            // {@code name} meets condition (c).\n            if (!inlineAliasIfPossible(ref, namespace)) {\n              continue;\n            }\n            name.removeRef(ref);\n            NodeUtil.markFunctionsDeleted(ref.getBasicBlock(), getCompiler());\n            for (Name prop : name.props) {\n              if (!prop.canCollapse()) {\n                workList.add(prop);\n              }\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        for (Name prop : name.props) {\n          if (!prop.canCollapse()) {\n            workList.add(prop);\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..c18a469c 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -165,7 +165,10 @@ class CollapseProperties implements CompilerPass {\n       Name name = workList.pop();\n \n       // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET ||\n+          name.getDeclaration() == null ||\n+          name.getDeclaration().isFunctionDeclaration() ||\n+          name.getDeclaration().getClosestHoistScope() != null) {\n         continue;\n       }\n \n@@ -175,10 +178,18 @@ class CollapseProperties implements CompilerPass {\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal() &&\n+              !namespace.getReferencedPropertyOf().contains(ref)) {\n+            // {@code name} meets condition (c).\n+            if (!inlineAliasIfPossible(ref, namespace)) {\n+              continue;\n+            }\n+            name.removeRef(ref);\n+            NodeUtil.markFunctionsDeleted(ref.getBasicBlock(), getCompiler());\n+            for (Name prop : name.props) {\n+              if (!prop.canCollapse()) {\n+                workList.add(prop);\n+              }\n             }\n           }\n         }\n@@ -191,7 +202,11 @@ class CollapseProperties implements CompilerPass {\n           name.aliasingGets == 0 && name.props != null) {\n         // All of {@code name}'s children meet condition (a), so they can be\n         // added to the worklist.\n-        workList.addAll(name.props);\n+        for (Name prop : name.props) {\n+          if (!prop.canCollapse()) {\n+            workList.add(prop);\n+          }\n+        }\n       }\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}