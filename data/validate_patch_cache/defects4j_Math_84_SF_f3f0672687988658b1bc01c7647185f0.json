{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    replaceWorstPoint(reflected, comparator);\n                } else {\n                    // replace the worst point in the simplex with the reflected point\n                    replaceWorstPoint(reflected, comparator);\n                }\n                continue;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                replaceWorstPoint(contracted, comparator);\n                continue;\n            }\n\n            // perform a shrink step\n            final RealPointValuePair[] shrunkSimplex = shrinkSimplex(original, comparator);\n            simplex = shrunkSimplex;\n\n            // check convergence\n            if (isConverged()) {\n                return;\n            }\n        }\n    }\n\n    private void replaceWorstPoint(final RealPointValuePair point, final Comparator<RealPointValuePair> comparator) {\n        final int n = simplex.length;\n        final int indexWorst = n - 1;\n\n        if (comparator.compare(point, simplex[indexWorst]) < 0) {\n            simplex[indexWorst] = point;\n            Arrays.sort(simplex, comparator);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7d020bec2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -74,14 +74,15 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    replaceWorstPoint(reflected, comparator);\n+                } else {\n+                    // replace the worst point in the simplex with the reflected point\n+                    replaceWorstPoint(reflected, comparator);\n                 }\n-\n-                return;\n+                continue;\n \n             }\n \n@@ -89,13 +90,29 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                replaceWorstPoint(contracted, comparator);\n+                continue;\n+            }\n+\n+            // perform a shrink step\n+            final RealPointValuePair[] shrunkSimplex = shrinkSimplex(original, comparator);\n+            simplex = shrunkSimplex;\n \n             // check convergence\n+            if (isConverged()) {\n                 return;\n             }\n-\n         }\n+    }\n \n+    private void replaceWorstPoint(final RealPointValuePair point, final Comparator<RealPointValuePair> comparator) {\n+        final int n = simplex.length;\n+        final int indexWorst = n - 1;\n+\n+        if (comparator.compare(point, simplex[indexWorst]) < 0) {\n+            simplex[indexWorst] = point;\n+            Arrays.sort(simplex, comparator);\n+        }\n     }\n \n     /** Compute and evaluate a new simplex.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}