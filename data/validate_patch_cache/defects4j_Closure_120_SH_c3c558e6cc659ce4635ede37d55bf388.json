{
    "patch": "if (block.isFunction) {\n  break;\n} else if (block.isLoop) {\n    return false;\n} else {\n    int endIndex = references.lastIndexOf(ref);\n    int nextIndex = endIndex + 1;\n    if (nextIndex < references.size()) {\n        Reference nextRef = references.get(nextIndex);\n        if (nextRef.isSimpleAssignmentToName()) {\n            return false;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..5532ece3 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,20 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (block.isFunction) {\n+  break;\n+} else if (block.isLoop) {\n+    return false;\n+} else {\n+    int endIndex = references.lastIndexOf(ref);\n+    int nextIndex = endIndex + 1;\n+    if (nextIndex < references.size()) {\n+        Reference nextRef = references.get(nextIndex);\n+        if (nextRef.isSimpleAssignmentToName()) {\n+            return false;\n+        }\n+    }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}