{
    "patch": "public static String unescape(String str) {\n    if (str == null) {\n        return null;\n    }\n    int len = str.length();\n    StringBuilder sb = new StringBuilder(len);\n    for (int i = 0; i < len; i++) {\n        char c = str.charAt(i);\n        if (c == '\\\\') {\n            if (++i >= len) {\n                throw new IllegalArgumentException(\"Invalid escape sequence in argument: \" + str);\n            }\n            c = str.charAt(i);\n            switch (c) {\n                case 't':\n                    c = '\\t';\n                    break;\n                case 'r':\n                    c = '\\r';\n                    break;\n                case 'n':\n                    c = '\\n';\n                    break;\n                case 'f':\n                    c = '\\f';\n                    break;\n                case 'b':\n                    c = '\\b';\n                    break;\n                case '\"':\n                case '\\'':\n                case '\\\\':\n                    break;\n                case 'u':\n                    if (i + 4 >= len) {\n                        throw new IllegalArgumentException(\"Invalid unicode escape sequence in argument: \" + str);\n                    }\n                    int codePoint = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n                    sb.appendCodePoint(codePoint);\n                    i += 4;\n                    continue;\n                default:\n                    throw new IllegalArgumentException(\"Invalid escape sequence in argument: \" + str);\n            }\n        }\n        sb.append(c);\n    }\n    if (str.equals(sb.toString())) {\n        return str;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..6b3d014d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,58 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n+public static String unescape(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    int len = str.length();\n+    StringBuilder sb = new StringBuilder(len);\n+    for (int i = 0; i < len; i++) {\n+        char c = str.charAt(i);\n+        if (c == '\\\\') {\n+            if (++i >= len) {\n+                throw new IllegalArgumentException(\"Invalid escape sequence in argument: \" + str);\n             }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n+            c = str.charAt(i);\n+            switch (c) {\n+                case 't':\n+                    c = '\\t';\n+                    break;\n+                case 'r':\n+                    c = '\\r';\n+                    break;\n+                case 'n':\n+                    c = '\\n';\n+                    break;\n+                case 'f':\n+                    c = '\\f';\n+                    break;\n+                case 'b':\n+                    c = '\\b';\n+                    break;\n+                case '\"':\n+                case '\\'':\n+                case '\\\\':\n+                    break;\n+                case 'u':\n+                    if (i + 4 >= len) {\n+                        throw new IllegalArgumentException(\"Invalid unicode escape sequence in argument: \" + str);\n                     }\n-                }\n-                pos--;\n+                    int codePoint = Integer.parseInt(str.substring(i + 1, i + 5), 16);\n+                    sb.appendCodePoint(codePoint);\n+                    i += 4;\n+                    continue;\n+                default:\n+                    throw new IllegalArgumentException(\"Invalid escape sequence in argument: \" + str);\n             }\n-            pos++;\n         }\n+        sb.append(c);\n+    }\n+    if (str.equals(sb.toString())) {\n+        return str;\n     }\n+    return sb.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}