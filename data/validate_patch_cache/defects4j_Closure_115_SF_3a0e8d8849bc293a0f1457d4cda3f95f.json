{
    "patch": "    private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = NodeUtil.getFunctionBody(fnNode);\n\n    boolean hasSideEffects = false;\n    if (block != null && NodeUtil.isBlock(block)) {\n      Preconditions.checkState(block.hasOneChild());\n      Node stmt = block.getFirstChild();\n      if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n\n    Node parameters = NodeUtil.getFunctionParameters(fnNode);\n    int paramCount = parameters.getChildCount();\n    if (callNode.getChildCount() - 1 != paramCount) {\n      return CanInlineResult.NO;\n    }\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    Node cArg = callNode.getFirstChild().getNext();\n    boolean isApplyCall = NodeUtil.isFunctionObjectApply(callNode);\n    Node fnArg = parameters.getFirstChild();\n\n    while (fnArg != null || cArg != null) {\n      if (fnArg != null) {\n        Node nameNode = fnArg.getFirstChild();\n        if (!nameNode.getString().isEmpty()) {\n          String name = nameNode.getString();\n          if (cArg != null) {\n            if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n              return CanInlineResult.NO;\n            }\n\n            if (!nameNode.getBooleanProp(Node.IS_INFERRED_REST_PARAMETER)\n                && NodeUtil.mayEffectMutableState(cArg, compiler)\n                && NodeUtil.getNameReferenceCount(\n                        block, name, /*stopBefore=*/ callNode) > 1) {\n              return CanInlineResult.NO;\n            }\n\n            if (!cArg.isName() && !cArg.isFunction()) {\n              // Check if the argument can be inlined.\n              final CompilerInput input = compiler.getInput(callNode.getSourceFileName());\n              final int cArgOffset = (int) NodeUtil.getSourceNameOffset(\n                  input.getSourceFile().getName(), cArg.getSourceFileName());\n              final CheckSideEffects checkSideEffects =\n                  new CheckSideEffects(compiler, cArgOffset, cArg);\n              if (!checkSideEffects.canModifyArguments()) {\n                // Check if the argument is a const or is used only once. Either of these properties\n                // could cause the argument to be an alias of a value and therefore a candidate for\n                // inlining. This is better than not inlining it.\n                if (!NodeUtil.isImmutableValue(cArg)\n                    && NodeUtil.getNameReferenceCount(\n                            block, cArg.getString(), /*stopBefore=*/ callNode) > 1) {\n                  return CanInlineResult.NO;\n                }\n              } else {\n                return CanInlineResult.NO;\n              }\n            }\n            cArg = cArg.getNext();\n          }\n        }\n        fnArg = nameNode.getNext();\n\n        // Skip over inferred rest parameters\n        while (fnArg != null\n            && fnArg.getBooleanProp(Node.IS_INFERRED_REST_PARAMETER)) {\n          fnArg = fnArg.getNext();\n        }\n      } else if (cArg != null && !isApplyCall) {\n        return CanInlineResult.NO;\n      } else {\n        break;\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..3169df35 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,71 +686,87 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n+    private CanInlineResult canInlineReferenceDirectly(\n       Node callNode, Node fnNode) {\n     if (!isDirectCallNodeReplacementPossible(fnNode)) {\n       return CanInlineResult.NO;\n     }\n \n-    Node block = fnNode.getLastChild();\n+    Node block = NodeUtil.getFunctionBody(fnNode);\n \n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n+    if (block != null && NodeUtil.isBlock(block)) {\n       Preconditions.checkState(block.hasOneChild());\n       Node stmt = block.getFirstChild();\n       if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+\n+    Node parameters = NodeUtil.getFunctionParameters(fnNode);\n+    int paramCount = parameters.getChildCount();\n+    if (callNode.getChildCount() - 1 != paramCount) {\n+      return CanInlineResult.NO;\n+    }\n \n     // Functions called via 'call' and 'apply' have a this-object as\n     // the first parameter, but this is not part of the called function's\n     // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n-            return CanInlineResult.NO;\n-          }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+    Node cArg = callNode.getFirstChild().getNext();\n+    boolean isApplyCall = NodeUtil.isFunctionObjectApply(callNode);\n+    Node fnArg = parameters.getFirstChild();\n+\n+    while (fnArg != null || cArg != null) {\n+      if (fnArg != null) {\n+        Node nameNode = fnArg.getFirstChild();\n+        if (!nameNode.getString().isEmpty()) {\n+          String name = nameNode.getString();\n+          if (cArg != null) {\n+            if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+              return CanInlineResult.NO;\n+            }\n+\n+            if (!nameNode.getBooleanProp(Node.IS_INFERRED_REST_PARAMETER)\n+                && NodeUtil.mayEffectMutableState(cArg, compiler)\n+                && NodeUtil.getNameReferenceCount(\n+                        block, name, /*stopBefore=*/ callNode) > 1) {\n+              return CanInlineResult.NO;\n+            }\n+\n+            if (!cArg.isName() && !cArg.isFunction()) {\n+              // Check if the argument can be inlined.\n+              final CompilerInput input = compiler.getInput(callNode.getSourceFileName());\n+              final int cArgOffset = (int) NodeUtil.getSourceNameOffset(\n+                  input.getSourceFile().getName(), cArg.getSourceFileName());\n+              final CheckSideEffects checkSideEffects =\n+                  new CheckSideEffects(compiler, cArgOffset, cArg);\n+              if (!checkSideEffects.canModifyArguments()) {\n+                // Check if the argument is a const or is used only once. Either of these properties\n+                // could cause the argument to be an alias of a value and therefore a candidate for\n+                // inlining. This is better than not inlining it.\n+                if (!NodeUtil.isImmutableValue(cArg)\n+                    && NodeUtil.getNameReferenceCount(\n+                            block, cArg.getString(), /*stopBefore=*/ callNode) > 1) {\n+                  return CanInlineResult.NO;\n+                }\n+              } else {\n+                return CanInlineResult.NO;\n+              }\n+            }\n+            cArg = cArg.getNext();\n           }\n         }\n+        fnArg = nameNode.getNext();\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+        // Skip over inferred rest parameters\n+        while (fnArg != null\n+            && fnArg.getBooleanProp(Node.IS_INFERRED_REST_PARAMETER)) {\n+          fnArg = fnArg.getNext();\n         }\n-        cArg = cArg.getNext();\n+      } else if (cArg != null && !isApplyCall) {\n+        return CanInlineResult.NO;\n+      } else {\n+        break;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}