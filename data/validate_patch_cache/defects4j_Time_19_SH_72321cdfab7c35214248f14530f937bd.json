{
    "patch": "        if (offsetLocal == offsetAdjusted) {\n            return offsetAdjusted;\n        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            if (offsetLocal - offsetAdjusted > 1) {\n                long prevTransitionAdjusted = previousTransition(instantAdjusted);\n                int offsetPrevAdjusted = getOffset(prevTransitionAdjusted); \n                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n                int offsetNextAdjusted = getOffset(nextTransitionAdjusted); \n                if (offsetPrevAdjusted < offsetLocal && offsetPrevAdjusted >= offsetAdjusted \n                        && (offsetNextAdjusted > offsetLocal || nextTransitionAdjusted != instantLocal - offsetLocal)) {\n                    return offsetPrevAdjusted;\n                } else if (offsetNextAdjusted < offsetLocal && offsetNextAdjusted >= offsetAdjusted) {\n                    return offsetNextAdjusted;\n                }\n            }\n            return offsetAdjusted;\n        } else if (offsetLocal < 0 && offsetAdjusted < 0 && offsetLocal - offsetAdjusted < -1) {\n            long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n            int offsetNextLocal = getOffset(nextTransitionLocal); \n            if (offsetNextLocal < offsetAdjusted || offsetNextLocal >= offsetLocal) {\n                return offsetAdjusted;\n            }\n            long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n            if (instantLocal - prevTransitionLocal <= GAP_DURATION) {\n                int offsetPrevLocal = getOffset(prevTransitionLocal);\n                if (offsetPrevLocal >= offsetAdjusted) {\n                    return offsetPrevLocal;\n                }\n            }\n            return offsetLocal;\n        } else {\n            if (offsetLocal < 0 && offsetAdjusted >= 0) {\n                offsetAdjusted = -1;\n            } else if (offsetAdjusted < 0 && offsetLocal >= 0) {\n                offsetAdjusted = 0;\n            }\n            long prevTransitionAdjusted = previousTransition(instantAdjusted);\n            int offsetPrevAdjusted = getOffset(prevTransitionAdjusted); \n            if (instantAdjusted - prevTransitionAdjusted < GAP_DURATION) {\n                int offsetPrevLocal = getOffset(previousTransition(instantLocal - offsetLocal));\n                if (offsetPrevLocal < offsetLocal && offsetPrevLocal >= offsetPrevAdjusted) {\n                    return offsetPrevLocal;\n                }\n            }\n            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n            int offsetNextAdjusted = getOffset(nextTransitionAdjusted); \n            if (offsetNextAdjusted < offsetLocal && offsetNextAdjusted >= offsetAdjusted && (offsetPrevAdjusted < offsetAdjusted || nextTransitionAdjusted != instantLocal - offsetLocal)) {\n                return offsetNextAdjusted;\n            } else if (offsetPrevAdjusted < offsetLocal && offsetPrevAdjusted >= offsetAdjusted) {\n                return offsetPrevAdjusted;\n            }\n            return offsetAdjusted;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..0bad84cb 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,59 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal == offsetAdjusted) {\n+            return offsetAdjusted;\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            if (offsetLocal - offsetAdjusted > 1) {\n+                long prevTransitionAdjusted = previousTransition(instantAdjusted);\n+                int offsetPrevAdjusted = getOffset(prevTransitionAdjusted); \n+                long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+                int offsetNextAdjusted = getOffset(nextTransitionAdjusted); \n+                if (offsetPrevAdjusted < offsetLocal && offsetPrevAdjusted >= offsetAdjusted \n+                        && (offsetNextAdjusted > offsetLocal || nextTransitionAdjusted != instantLocal - offsetLocal)) {\n+                    return offsetPrevAdjusted;\n+                } else if (offsetNextAdjusted < offsetLocal && offsetNextAdjusted >= offsetAdjusted) {\n+                    return offsetNextAdjusted;\n+                }\n+            }\n+            return offsetAdjusted;\n+        } else if (offsetLocal < 0 && offsetAdjusted < 0 && offsetLocal - offsetAdjusted < -1) {\n+            long nextTransitionLocal = nextTransition(instantLocal - offsetLocal);\n+            int offsetNextLocal = getOffset(nextTransitionLocal); \n+            if (offsetNextLocal < offsetAdjusted || offsetNextLocal >= offsetLocal) {\n+                return offsetAdjusted;\n+            }\n+            long prevTransitionLocal = previousTransition(instantLocal - offsetLocal);\n+            if (instantLocal - prevTransitionLocal <= GAP_DURATION) {\n+                int offsetPrevLocal = getOffset(prevTransitionLocal);\n+                if (offsetPrevLocal >= offsetAdjusted) {\n+                    return offsetPrevLocal;\n+                }\n+            }\n+            return offsetLocal;\n+        } else {\n+            if (offsetLocal < 0 && offsetAdjusted >= 0) {\n+                offsetAdjusted = -1;\n+            } else if (offsetAdjusted < 0 && offsetLocal >= 0) {\n+                offsetAdjusted = 0;\n+            }\n+            long prevTransitionAdjusted = previousTransition(instantAdjusted);\n+            int offsetPrevAdjusted = getOffset(prevTransitionAdjusted); \n+            if (instantAdjusted - prevTransitionAdjusted < GAP_DURATION) {\n+                int offsetPrevLocal = getOffset(previousTransition(instantLocal - offsetLocal));\n+                if (offsetPrevLocal < offsetLocal && offsetPrevLocal >= offsetPrevAdjusted) {\n+                    return offsetPrevLocal;\n+                }\n+            }\n+            long nextTransitionAdjusted = nextTransition(instantAdjusted);\n+            int offsetNextAdjusted = getOffset(nextTransitionAdjusted); \n+            if (offsetNextAdjusted < offsetLocal && offsetNextAdjusted >= offsetAdjusted && (offsetPrevAdjusted < offsetAdjusted || nextTransitionAdjusted != instantLocal - offsetLocal)) {\n+                return offsetNextAdjusted;\n+            } else if (offsetPrevAdjusted < offsetLocal && offsetPrevAdjusted >= offsetAdjusted) {\n+                return offsetPrevAdjusted;\n+            }\n+            return offsetAdjusted;\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}