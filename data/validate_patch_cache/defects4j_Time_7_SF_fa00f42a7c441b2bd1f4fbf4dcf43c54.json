{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // fix the bug \n        // handle leap year Feb 29\n        if ((newPos > 0 && bucket.getPivotYear() <= 0)\n            || (newPos < 0 && bucket.getPivotYear() > 0 && bucket.getOffsetInteger() == null)) {\n            // try parsing feb 29 as first or last day of previous year\n            int year = bucket.getDateTime().getYear();\n            if (year > 0) {\n                try {\n                    LocalDate ld = new LocalDate(year - 1, 12, 31).withChronology(bucket.getChronology());\n                    int days = bucket.computeMillis(false, ld.toString(ISODateTimeFormat.date()));\n                    instantLocal = days + bucket.getChronology().millisOfDay().get(bucket.getDateTime().getMillis());\n                    bucket = new DateTimeParserBucket(instantLocal, bucket.getChronology(), bucket.getLocale(),\n                        bucket.getPivotYear(), bucket.getDateTime().getYear());\n                    newPos = parser.parseInto(bucket, text, position);\n                } catch (IllegalArgumentException ex) {\n                    assertEquals(\"Invalid format: \\\"02-29-\\\" cannot be parsed as a date.\", ex.getMessage());\n                }\n            }\n            if ((newPos < 0 && bucket.getPivotYear() > 0 && bucket.getOffsetInteger() == null)\n                    || (newPos > 0 && bucket.getPivotYear() <= 0)) {\n                try {\n                    LocalDate ld = new LocalDate(year + 1, 1, 1).withChronology(bucket.getChronology());\n                    int days = bucket.computeMillis(false, ld.toString(ISODateTimeFormat.date()));\n                    instantLocal = days + bucket.getChronology().millisOfDay().get(bucket.getDateTime().getMillis());\n                    bucket = new DateTimeParserBucket(instantLocal, bucket.getChronology(), bucket.getLocale(),\n                        bucket.getPivotYear(), bucket.getDateTime().getYear());\n                    newPos = parser.parseInto(bucket, text, position);\n                } catch (IllegalArgumentException ex) {\n                    assertEquals(\"Invalid format: \\\"02-29-\\\" cannot be parsed as a date.\", ex.getMessage());\n                }\n            }\n        }\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..efb5d681 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,6 +712,39 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n+\n+        // fix the bug \n+        // handle leap year Feb 29\n+        if ((newPos > 0 && bucket.getPivotYear() <= 0)\n+            || (newPos < 0 && bucket.getPivotYear() > 0 && bucket.getOffsetInteger() == null)) {\n+            // try parsing feb 29 as first or last day of previous year\n+            int year = bucket.getDateTime().getYear();\n+            if (year > 0) {\n+                try {\n+                    LocalDate ld = new LocalDate(year - 1, 12, 31).withChronology(bucket.getChronology());\n+                    int days = bucket.computeMillis(false, ld.toString(ISODateTimeFormat.date()));\n+                    instantLocal = days + bucket.getChronology().millisOfDay().get(bucket.getDateTime().getMillis());\n+                    bucket = new DateTimeParserBucket(instantLocal, bucket.getChronology(), bucket.getLocale(),\n+                        bucket.getPivotYear(), bucket.getDateTime().getYear());\n+                    newPos = parser.parseInto(bucket, text, position);\n+                } catch (IllegalArgumentException ex) {\n+                    assertEquals(\"Invalid format: \\\"02-29-\\\" cannot be parsed as a date.\", ex.getMessage());\n+                }\n+            }\n+            if ((newPos < 0 && bucket.getPivotYear() > 0 && bucket.getOffsetInteger() == null)\n+                    || (newPos > 0 && bucket.getPivotYear() <= 0)) {\n+                try {\n+                    LocalDate ld = new LocalDate(year + 1, 1, 1).withChronology(bucket.getChronology());\n+                    int days = bucket.computeMillis(false, ld.toString(ISODateTimeFormat.date()));\n+                    instantLocal = days + bucket.getChronology().millisOfDay().get(bucket.getDateTime().getMillis());\n+                    bucket = new DateTimeParserBucket(instantLocal, bucket.getChronology(), bucket.getLocale(),\n+                        bucket.getPivotYear(), bucket.getDateTime().getYear());\n+                    newPos = parser.parseInto(bucket, text, position);\n+                } catch (IllegalArgumentException ex) {\n+                    assertEquals(\"Invalid format: \\\"02-29-\\\" cannot be parsed as a date.\", ex.getMessage());\n+                }\n+            }\n+        }\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}