{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone(); // clone the array to avoid modifying the original\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = copySimplex(reflected, simplex, 0);\n            } else {\n                simplex = copySimplex(expanded, simplex, 0);\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = copySimplex(contracted, simplex, 0);\n            } else {\n                // perform a shrink step\n                for (int i = 1; i < simplex.length; i++) {\n                    final RealPointValuePair[] shrunkSimplex = evaluateNewSimplex(original, rho,\n                            comparator, i);\n                    simplex = copySimplex(shrunkSimplex[0], simplex, i);\n                }\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n        }\n    }\n}\n\n/**\n * Copy the given point value pair to the simplex array at the specified index\n * and return the modified simplex array.\n * \n * @param pvp the point value pair to copy\n * @param simplex the simplex array\n * @param index the index to copy the point value pair to\n * @return the modified simplex array\n */\nprivate RealPointValuePair[] copySimplex(final RealPointValuePair pvp, final RealPointValuePair[] simplex,\n        final int index) {\n    final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n    System.arraycopy(simplex, 0, newSimplex, 0, simplex.length);\n    newSimplex[index] = pvp;\n    return newSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..aa9058136 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,75 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n+        incrementIterationsCounter();\n \n-            incrementIterationsCounter();\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone(); // clone the array to avoid modifying the original\n+        final RealPointValuePair best = original[0];\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = copySimplex(reflected, simplex, 0);\n+            } else {\n+                simplex = copySimplex(expanded, simplex, 0);\n+            }\n \n+            // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n-\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                simplex = copySimplex(contracted, simplex, 0);\n+            } else {\n+                // perform a shrink step\n+                for (int i = 1; i < simplex.length; i++) {\n+                    final RealPointValuePair[] shrunkSimplex = evaluateNewSimplex(original, rho,\n+                            comparator, i);\n+                    simplex = copySimplex(shrunkSimplex[0], simplex, i);\n+                }\n+            }\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n-\n         }\n-\n     }\n+}\n+\n+/**\n+ * Copy the given point value pair to the simplex array at the specified index\n+ * and return the modified simplex array.\n+ * \n+ * @param pvp the point value pair to copy\n+ * @param simplex the simplex array\n+ * @param index the index to copy the point value pair to\n+ * @return the modified simplex array\n+ */\n+private RealPointValuePair[] copySimplex(final RealPointValuePair pvp, final RealPointValuePair[] simplex,\n+        final int index) {\n+    final RealPointValuePair[] newSimplex = new RealPointValuePair[simplex.length];\n+    System.arraycopy(simplex, 0, newSimplex, 0, simplex.length);\n+    newSimplex[index] = pvp;\n+    return newSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}