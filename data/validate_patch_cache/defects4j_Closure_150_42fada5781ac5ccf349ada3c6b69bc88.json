{
    "patch": "    if (n.getType() != Token.IF && n.getType() != Token.HOOK) {\n      return;\n    }\n    Node falseChild = NodeUtil.getTwoChildren(n).getSecondChild();\n    if (falseChild != null) {\n      maybeRemoveUnreachableNodes(cfg, falseChild);\n      needsCfgUpdate = true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d5ccd4d9 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.getType() != Token.IF && n.getType() != Token.HOOK) {\n+      return;\n+    }\n+    Node falseChild = NodeUtil.getTwoChildren(n).getSecondChild();\n+    if (falseChild != null) {\n+      maybeRemoveUnreachableNodes(cfg, falseChild);\n+      needsCfgUpdate = true;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}