{
    "patch": "private static Map<Class<?>, Class<?>> primitiveToWrapperMap = new HashMap<Class<?>, Class<?>>();\nprivate static Map<Class<?>, Object> wrapperToDefaultValueMap = new HashMap<Class<?>, Object>();\nprivate static Map<Class<?>, Object> primitiveToDefaultValueMap = new HashMap<Class<?>, Object>();\n\nstatic {\n    primitiveToWrapperMap.put(boolean.class, Boolean.class);\n    primitiveToWrapperMap.put(char.class, Character.class);\n    primitiveToWrapperMap.put(byte.class, Byte.class);\n    primitiveToWrapperMap.put(short.class, Short.class);\n    primitiveToWrapperMap.put(int.class, Integer.class);\n    primitiveToWrapperMap.put(long.class, Long.class);\n    primitiveToWrapperMap.put(float.class, Float.class);\n    primitiveToWrapperMap.put(double.class, Double.class);\n\n    wrapperToDefaultValueMap.put(Boolean.class, false);\n    wrapperToDefaultValueMap.put(Character.class, '\\u0000');\n    wrapperToDefaultValueMap.put(Byte.class, (byte) 0);\n    wrapperToDefaultValueMap.put(Short.class, (short) 0);\n    wrapperToDefaultValueMap.put(Integer.class, 0);\n    wrapperToDefaultValueMap.put(Long.class, 0L);\n    wrapperToDefaultValueMap.put(Float.class, 0.0f);\n    wrapperToDefaultValueMap.put(Double.class, 0.0d);\n\n    primitiveToDefaultValueMap.put(boolean.class, false);\n    primitiveToDefaultValueMap.put(char.class, '\\u0000');\n    primitiveToDefaultValueMap.put(byte.class, (byte) 0);\n    primitiveToDefaultValueMap.put(short.class, (short) 0);\n    primitiveToDefaultValueMap.put(int.class, 0);\n    primitiveToDefaultValueMap.put(long.class, 0L);\n    primitiveToDefaultValueMap.put(float.class, 0.0f);\n    primitiveToDefaultValueMap.put(double.class, 0.0d);\n}\n\npublic static Object defaultValueOf(Class<?> type) {\n    if (type.isPrimitive()) {\n        return primitiveToDefaultValueMap.get(type);\n    } else {\n        return wrapperToDefaultValueMap.get(type);\n    }\n}\n\npublic static Class<?> convertToWrapper(Class<?> clazz) {\n    return primitiveToWrapperMap.get(clazz);\n}\n\npublic static boolean isWrapperType(Class<?> clazz) {\n    return wrapperToDefaultValueMap.containsKey(clazz);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..5b061e479 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -31,38 +31,52 @@ public class Primitives {\n     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n-\n-    static {\n-        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n-        primitiveTypes.put(Character.class, Character.TYPE);\n-        primitiveTypes.put(Byte.class, Byte.TYPE);\n-        primitiveTypes.put(Short.class, Short.TYPE);\n-        primitiveTypes.put(Integer.class, Integer.TYPE);\n-        primitiveTypes.put(Long.class, Long.TYPE);\n-        primitiveTypes.put(Float.class, Float.TYPE);\n-        primitiveTypes.put(Double.class, Double.TYPE);\n-    }\n-\n-    static {\n-        wrapperReturnValues.put(Boolean.class, false);\n-        wrapperReturnValues.put(Character.class, '\\u0000');\n-        wrapperReturnValues.put(Byte.class, (byte) 0);\n-        wrapperReturnValues.put(Short.class, (short) 0);\n-        wrapperReturnValues.put(Integer.class, 0);\n-        wrapperReturnValues.put(Long.class, 0L);\n-        wrapperReturnValues.put(Float.class, 0F);\n-        wrapperReturnValues.put(Double.class, 0D);\n-    }\n-\n-    static {\n-        primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, '\\u0000');\n-        primitiveValues.put(byte.class, (byte) 0);\n-        primitiveValues.put(short.class, (short) 0);\n-        primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0L);\n-        primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n-    }\n-}\n\\ No newline at end of file\n+private static Map<Class<?>, Class<?>> primitiveToWrapperMap = new HashMap<Class<?>, Class<?>>();\n+private static Map<Class<?>, Object> wrapperToDefaultValueMap = new HashMap<Class<?>, Object>();\n+private static Map<Class<?>, Object> primitiveToDefaultValueMap = new HashMap<Class<?>, Object>();\n+\n+static {\n+    primitiveToWrapperMap.put(boolean.class, Boolean.class);\n+    primitiveToWrapperMap.put(char.class, Character.class);\n+    primitiveToWrapperMap.put(byte.class, Byte.class);\n+    primitiveToWrapperMap.put(short.class, Short.class);\n+    primitiveToWrapperMap.put(int.class, Integer.class);\n+    primitiveToWrapperMap.put(long.class, Long.class);\n+    primitiveToWrapperMap.put(float.class, Float.class);\n+    primitiveToWrapperMap.put(double.class, Double.class);\n+\n+    wrapperToDefaultValueMap.put(Boolean.class, false);\n+    wrapperToDefaultValueMap.put(Character.class, '\\u0000');\n+    wrapperToDefaultValueMap.put(Byte.class, (byte) 0);\n+    wrapperToDefaultValueMap.put(Short.class, (short) 0);\n+    wrapperToDefaultValueMap.put(Integer.class, 0);\n+    wrapperToDefaultValueMap.put(Long.class, 0L);\n+    wrapperToDefaultValueMap.put(Float.class, 0.0f);\n+    wrapperToDefaultValueMap.put(Double.class, 0.0d);\n+\n+    primitiveToDefaultValueMap.put(boolean.class, false);\n+    primitiveToDefaultValueMap.put(char.class, '\\u0000');\n+    primitiveToDefaultValueMap.put(byte.class, (byte) 0);\n+    primitiveToDefaultValueMap.put(short.class, (short) 0);\n+    primitiveToDefaultValueMap.put(int.class, 0);\n+    primitiveToDefaultValueMap.put(long.class, 0L);\n+    primitiveToDefaultValueMap.put(float.class, 0.0f);\n+    primitiveToDefaultValueMap.put(double.class, 0.0d);\n+}\n+\n+public static Object defaultValueOf(Class<?> type) {\n+    if (type.isPrimitive()) {\n+        return primitiveToDefaultValueMap.get(type);\n+    } else {\n+        return wrapperToDefaultValueMap.get(type);\n+    }\n+}\n+\n+public static Class<?> convertToWrapper(Class<?> clazz) {\n+    return primitiveToWrapperMap.get(clazz);\n+}\n+\n+public static boolean isWrapperType(Class<?> clazz) {\n+    return wrapperToDefaultValueMap.containsKey(clazz);\n+}\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}