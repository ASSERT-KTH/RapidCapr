{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    ControlFlowGraph<Node> cfg = NodeUtil.buildCFG(cfgNode);\n    List<DiGraphEdge<Node, ControlFlowGraph.Branch>> edges =\n        cfg.getOutEdges(cfg.getEntry().getValue());\n    for (DiGraphEdge<Node, ControlFlowGraph.Branch> edge : edges) {\n      if (edge.getValue() == ControlFlowGraph.Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..d19b2f35 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,17 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    ControlFlowGraph<Node> cfg = NodeUtil.buildCFG(cfgNode);\n+    List<DiGraphEdge<Node, ControlFlowGraph.Branch>> edges =\n+        cfg.getOutEdges(cfg.getEntry().getValue());\n+    for (DiGraphEdge<Node, ControlFlowGraph.Branch> edge : edges) {\n+      if (edge.getValue() == ControlFlowGraph.Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}