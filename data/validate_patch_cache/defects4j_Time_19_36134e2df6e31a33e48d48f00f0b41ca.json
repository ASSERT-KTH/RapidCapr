{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // if instantLocal is in a gap, we return the previous offset\n        if (offsetLocal > 0) {\n            long prev = previousTransition(instantLocal);\n            if (prev <= instantLocal) {\n                int offsetPrev = getOffset(prev);\n                if (offsetPrev == offsetLocal) {\n                    return offsetLocal;\n                }\n            }\n            long next = nextTransition(instantLocal);\n            if (next < instantLocal + DateTimeConstants.MILLIS_PER_HOUR) {\n                int offsetNext = getOffset(next);\n                if (offsetLocal < offsetNext) {\n                    return offsetLocal;\n                }\n            }\n        }\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            if ((offsetLocal - offsetAdjusted) < 0) {\n                // if we just return offsetAdjusted then the time is pushed\n                // back before the transition, whereas it should be\n                // on or after the transition\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..6c47a2af 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -880,6 +880,23 @@ public abstract class DateTimeZone implements Serializable {\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n+        // if instantLocal is in a gap, we return the previous offset\n+        if (offsetLocal > 0) {\n+            long prev = previousTransition(instantLocal);\n+            if (prev <= instantLocal) {\n+                int offsetPrev = getOffset(prev);\n+                if (offsetPrev == offsetLocal) {\n+                    return offsetLocal;\n+                }\n+            }\n+            long next = nextTransition(instantLocal);\n+            if (next < instantLocal + DateTimeConstants.MILLIS_PER_HOUR) {\n+                int offsetNext = getOffset(next);\n+                if (offsetLocal < offsetNext) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n         // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n@@ -897,15 +914,6 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}