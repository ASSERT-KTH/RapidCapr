{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check for the valid input and index values\n    if(input == null || index < 0 || index >= input.length()) {\n        return 0;\n    }\n\n    // Check if the input contains the '&' followed by '#'\n    if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    // Initialize variables for parsing input\n    int start = index + 2;\n    boolean isHex = false;\n\n    // Check if the input contains hexadecimal escape sequence\n    if(start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        isHex = true;\n        start++;\n    }\n\n    int end = start;\n\n    // Find the end of the entity\n    while(end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n\n    // Check if the entity has an ending semicolon\n    if(end == input.length()) {\n        return 0;\n    }\n\n    // Parse the entity value\n    String entityValue = input.subSequence(start, end).toString();\n    if(entityValue.isEmpty()) {\n        return 0;\n    }\n\n    int unicodeValue;\n    try {\n        unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n    } catch(NumberFormatException e) {\n        return 0;\n    }\n\n    // Check if the unicode value is valid\n    if(!Character.isValidCodePoint(unicodeValue)) {\n        return 0;\n    }\n\n    // Write the unicode character to the output writer\n    char[] chars = Character.toChars(unicodeValue);\n    out.write(chars);\n\n    // Return the number of characters processed\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..04477140 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,62 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // Check for the valid input and index values\n+    if(input == null || index < 0 || index >= input.length()) {\n+        return 0;\n+    }\n+\n+    // Check if the input contains the '&' followed by '#'\n+    if(input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n+\n+    // Initialize variables for parsing input\n+    int start = index + 2;\n+    boolean isHex = false;\n+\n+    // Check if the input contains hexadecimal escape sequence\n+    if(start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        isHex = true;\n+        start++;\n+    }\n+\n+    int end = start;\n+\n+    // Find the end of the entity\n+    while(end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    // Check if the entity has an ending semicolon\n+    if(end == input.length()) {\n+        return 0;\n+    }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    // Parse the entity value\n+    String entityValue = input.subSequence(start, end).toString();\n+    if(entityValue.isEmpty()) {\n+        return 0;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    int unicodeValue;\n+    try {\n+        unicodeValue = Integer.parseInt(entityValue, isHex ? 16 : 10);\n+    } catch(NumberFormatException e) {\n+        return 0;\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    // Check if the unicode value is valid\n+    if(!Character.isValidCodePoint(unicodeValue)) {\n         return 0;\n     }\n+\n+    // Write the unicode character to the output writer\n+    char[] chars = Character.toChars(unicodeValue);\n+    out.write(chars);\n+\n+    // Return the number of characters processed\n+    return end - index + 1;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}