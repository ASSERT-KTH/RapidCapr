{
    "patch": "if (n.isFunction()) {\n    Node functionNameNode = NodeUtil.getFunctionNameNode(n);\n    boolean hasFunctionName = functionNameNode != null && !NodeUtil.isNameAnonymousFunction(functionNameNode);\n    Node functionBody = NodeUtil.getFunctionBody(n);\n    return hasFunctionName && functionBody != null && !NodeUtil.isEmptyBlock(functionBody);\n} else {\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..64e5f303 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,14 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+if (n.isFunction()) {\n+    Node functionNameNode = NodeUtil.getFunctionNameNode(n);\n+    boolean hasFunctionName = functionNameNode != null && !NodeUtil.isNameAnonymousFunction(functionNameNode);\n+    Node functionBody = NodeUtil.getFunctionBody(n);\n+    return hasFunctionName && functionBody != null && !NodeUtil.isEmptyBlock(functionBody);\n+} else {\n+    return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}