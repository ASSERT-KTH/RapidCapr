{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        int curFieldIndex = -1;\n        long instant = 0L;\n        int originalDayOfMonth = 0;\n        boolean changedDayOfMonth = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            int value = partial.getField(i).get(instant);\n            if (i == fieldIndex) {\n                value += valueToAdd;\n            }\n            if (changedDayOfMonth == false && i == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n                originalDayOfMonth = value;\n                changedDayOfMonth = true;\n                // Adjust the month to ensure we don't overflow/underflow the day\n                int month = partial.getField(DateTimeFieldType.monthOfYear()).get(instant);\n                int year = partial.getField(DateTimeFieldType.year()).get(instant);\n                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n                if (originalDayOfMonth > maxDayOfMonth) {\n                    value = maxDayOfMonth;\n                }\n                if (originalDayOfMonth < 1) {\n                    value = 1;\n                }\n            }\n            curFieldIndex = partial.getFieldType(i).getFieldIndex(iChronology);\n            values[curFieldIndex] = value;\n        }\n        if (changedDayOfMonth) {\n            instant = iChronology.set(partial, 0L, values);\n            int dayOfMonth = iChronology.getDayOfMonth(instant);\n            if (dayOfMonth != originalDayOfMonth) {\n                if (dayOfMonth < originalDayOfMonth) {\n                    instant = iChronology.add(instant, iChronology.months(), 1);\n                }\n                int month = partial.getField(DateTimeFieldType.monthOfYear()).get(instant);\n                int year = partial.getField(DateTimeFieldType.year()).get(instant);\n                int day = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(year, month));\n                curFieldIndex = DateTimeFieldType.dayOfMonth().getFieldIndex(iChronology);\n                values[curFieldIndex] = day;\n            }\n        }\n        return values;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..658a7f1f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,17 +206,47 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int curFieldIndex = -1;\n+        long instant = 0L;\n+        int originalDayOfMonth = 0;\n+        boolean changedDayOfMonth = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            int value = partial.getField(i).get(instant);\n+            if (i == fieldIndex) {\n+                value += valueToAdd;\n+            }\n+            if (changedDayOfMonth == false && i == DateTimeFieldType.dayOfMonth().getFieldIndex()) {\n+                originalDayOfMonth = value;\n+                changedDayOfMonth = true;\n+                // Adjust the month to ensure we don't overflow/underflow the day\n+                int month = partial.getField(DateTimeFieldType.monthOfYear()).get(instant);\n+                int year = partial.getField(DateTimeFieldType.year()).get(instant);\n+                int maxDayOfMonth = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                if (originalDayOfMonth > maxDayOfMonth) {\n+                    value = maxDayOfMonth;\n+                }\n+                if (originalDayOfMonth < 1) {\n+                    value = 1;\n+                }\n+            }\n+            curFieldIndex = partial.getFieldType(i).getFieldIndex(iChronology);\n+            values[curFieldIndex] = value;\n+        }\n+        if (changedDayOfMonth) {\n+            instant = iChronology.set(partial, 0L, values);\n+            int dayOfMonth = iChronology.getDayOfMonth(instant);\n+            if (dayOfMonth != originalDayOfMonth) {\n+                if (dayOfMonth < originalDayOfMonth) {\n+                    instant = iChronology.add(instant, iChronology.months(), 1);\n+                }\n+                int month = partial.getField(DateTimeFieldType.monthOfYear()).get(instant);\n+                int year = partial.getField(DateTimeFieldType.year()).get(instant);\n+                int day = Math.min(dayOfMonth, iChronology.dayOfMonth().getMaximumValue(year, month));\n+                curFieldIndex = DateTimeFieldType.dayOfMonth().getFieldIndex(iChronology);\n+                values[curFieldIndex] = day;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return values;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}