{
    "patch": "StringBuilder sb = new StringBuilder(s.length() + 2);\nsb.append(quote);\nfor (int i = 0; i < s.length(); i++) {\n  char c = s.charAt(i);\n  switch (c) {\n    // Escape sequences as per ECMA-262 5th Edition\n    case '\\'': sb.append(\"\\\\'\"); break;\n    case '\\\"': sb.append(\"\\\\\\\"\"); break;\n    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n    case '\\b': sb.append(\"\\\\b\"); break;  // '\\u0008': backspace (BS)\n    case '\\f': sb.append(\"\\\\f\"); break;  // '\\u000C': form feed (FF)\n    case '\\n': sb.append(\"\\\\n\"); break;  // '\\u000A': line feed (LF)\n    case '\\r': sb.append(\"\\\\r\"); break;  // '\\u000D': carriage return (CR)\n    case '\\t': sb.append(\"\\\\t\"); break;  // '\\u0009': horizontal tab (HT)\n    case '\\0': sb.append(\"\\\\0\"); break;  // '\\u0000': null character (NUL)\n    default:\n      if (Character.isISOControl(c)) {\n        // Unicode-escape the character.\n        appendHexJavaScriptRepresentation(sb, c);\n      } else {\n        sb.append(c);\n      }\n      break;\n  }\n}\nsb.append(quote);\nreturn sb.toString();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 6117a89b..31f0726f 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1012,7 +1012,33 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\0\"); break;\n+StringBuilder sb = new StringBuilder(s.length() + 2);\n+sb.append(quote);\n+for (int i = 0; i < s.length(); i++) {\n+  char c = s.charAt(i);\n+  switch (c) {\n+    // Escape sequences as per ECMA-262 5th Edition\n+    case '\\'': sb.append(\"\\\\'\"); break;\n+    case '\\\"': sb.append(\"\\\\\\\"\"); break;\n+    case '\\\\': sb.append(\"\\\\\\\\\"); break;\n+    case '\\b': sb.append(\"\\\\b\"); break;  // '\\u0008': backspace (BS)\n+    case '\\f': sb.append(\"\\\\f\"); break;  // '\\u000C': form feed (FF)\n+    case '\\n': sb.append(\"\\\\n\"); break;  // '\\u000A': line feed (LF)\n+    case '\\r': sb.append(\"\\\\r\"); break;  // '\\u000D': carriage return (CR)\n+    case '\\t': sb.append(\"\\\\t\"); break;  // '\\u0009': horizontal tab (HT)\n+    case '\\0': sb.append(\"\\\\0\"); break;  // '\\u0000': null character (NUL)\n+    default:\n+      if (Character.isISOControl(c)) {\n+        // Unicode-escape the character.\n+        appendHexJavaScriptRepresentation(sb, c);\n+      } else {\n+        sb.append(c);\n+      }\n+      break;\n+  }\n+}\n+sb.append(quote);\n+return sb.toString();\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;",
    "result_reason": "error: case, default, or '}' expected",
    "test_result": "ERROR"
}