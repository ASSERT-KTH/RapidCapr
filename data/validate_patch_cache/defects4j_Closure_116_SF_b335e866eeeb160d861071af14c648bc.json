{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams.getFirstChild();\n  Node argNodes = callNode.removeFirstChild().removeNext();\n  int argIndex = 0;\n\n  while (argNodes != null || fnParam != null) {\n    if (argNodes != null && fnParam != null) {\n      if (NodeUtil.mayEffectMutableState(argNodes, getCompiler())\n          && NodeUtil.getNameReferenceCount(fnNode.getLastChild(),\n          fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      argNodes = argNodes.getNext();\n      argIndex++;\n    } else if (fnParam != null) {\n      if (!fnParam.isOptionalArg() && !fnParam.isRest()) {\n        return CanInlineResult.NO;\n      }\n    } else {\n      if (argNodes == null) {\n        return CanInlineResult.YES;\n      }\n      if (NodeUtil.mayHaveSideEffects(argNodes, getCompiler())) {\n        return CanInlineResult.NO;\n      }\n      argNodes = argNodes.getNext();\n      argIndex++;\n    }\n    fnParam = (fnParam != null && !fnParam.isOptionalArg())\n        ? fnParam.getNext() : fnParams.getChildAtIndex(argIndex);\n  }\n\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..d24dd3ec 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,48 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n \n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+  Node fnParam = fnParams.getFirstChild();\n+  Node argNodes = callNode.removeFirstChild().removeNext();\n+  int argIndex = 0;\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+  while (argNodes != null || fnParam != null) {\n+    if (argNodes != null && fnParam != null) {\n+      if (NodeUtil.mayEffectMutableState(argNodes, getCompiler())\n+          && NodeUtil.getNameReferenceCount(fnNode.getLastChild(),\n+          fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      argNodes = argNodes.getNext();\n+      argIndex++;\n+    } else if (fnParam != null) {\n+      if (!fnParam.isOptionalArg() && !fnParam.isRest()) {\n+        return CanInlineResult.NO;\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    } else {\n+      if (argNodes == null) {\n+        return CanInlineResult.YES;\n       }\n+      if (NodeUtil.mayHaveSideEffects(argNodes, getCompiler())) {\n+        return CanInlineResult.NO;\n+      }\n+      argNodes = argNodes.getNext();\n+      argIndex++;\n     }\n-\n-    return CanInlineResult.YES;\n+    fnParam = (fnParam != null && !fnParam.isOptionalArg())\n+        ? fnParam.getNext() : fnParams.getChildAtIndex(argIndex);\n   }\n \n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}