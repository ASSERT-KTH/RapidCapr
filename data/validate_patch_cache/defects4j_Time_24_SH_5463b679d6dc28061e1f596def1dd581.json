{
    "patch": "        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n            }\n            if (resetFields) {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].isSaved()) {\n                        millis = savedFields[i].reset(iMillis); // fixed line\n                    }\n                }\n            } else {\n                for (int i = 0; i < count; i++) {\n                    if (savedFields[i].isProcessed() && !savedFields[i].isSaved()) {\n                        millis = savedFields[i].skip(millis);\n                    }\n                }\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4d7ca27f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,47 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long millis = iMillis;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\\\"');\n+            }\n+            if (resetFields) {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].isSaved()) {\n+                        millis = savedFields[i].reset(iMillis); // fixed line\n+                    }\n+                }\n+            } else {\n+                for (int i = 0; i < count; i++) {\n+                    if (savedFields[i].isProcessed() && !savedFields[i].isSaved()) {\n+                        millis = savedFields[i].skip(millis);\n+                    }\n+                }\n+            }\n+            throw e;\n+        }\n+\n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+        \n+        return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: variable millis is already defined in method computeMillis(boolean,String)",
    "test_result": "ERROR"
}