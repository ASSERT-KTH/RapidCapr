{
    "patch": "// step size is too large for the current interval: reduce it\ndouble factor = FastMath.min(maxStep, 0.25 * remainingTime) / remainingTime;\nif (factor <= 0) {\n    h = remainingTime;\n    nextT = t;\n} else {\n    h = factor * remainingTime;\n    nextT = t + h;\n}\n// check if next step will be the last one\nfinal boolean nextIsLast = forward ? (nextT >= end) : (nextT <= end);\nif (nextIsLast) {\n    h = remainingTime;\n    nextT = end;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..eb1cfcde3 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,21 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+// step size is too large for the current interval: reduce it\n+double factor = FastMath.min(maxStep, 0.25 * remainingTime) / remainingTime;\n+if (factor <= 0) {\n+    h = remainingTime;\n+    nextT = t;\n+} else {\n+    h = factor * remainingTime;\n+    nextT = t + h;\n+}\n+// check if next step will be the last one\n+final boolean nextIsLast = forward ? (nextT >= end) : (nextT <= end);\n+if (nextIsLast) {\n+    h = remainingTime;\n+    nextT = end;\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: maxStep has private access in AdaptiveStepsizeIntegrator",
    "test_result": "ERROR"
}