{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node callee = callNode.getFirstChild();\n    List<Node> callArgs = Lists.newArrayList(callee.getNext().children());\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node lp = NodeUtil.getFunctionParameters(fnNode);\n    Preconditions.checkState(lp.isParamList(), lp);\n    List<Node> fnParams = Lists.newArrayList(lp.children());\n\n    if (callArgs.isEmpty()) {\n      return fnParams.isEmpty() ? CanInlineResult.YES : CanInlineResult.NO;\n    }\n\n    if (callNode.getFirstChild().isObjectLit()) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.isFunctionObjectCall(callNode)) {\n      // Function object call.\n      if (callArgs.get(0).isThis()) {\n        callArgs = callArgs.subList(1, callArgs.size());\n      } else {\n        return CanInlineResult.NO;\n      }\n    } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n      // Function apply call.\n      if (callArgs.size() != 2) {\n        return CanInlineResult.NO;\n      }\n      Node arg1 = callArgs.get(1);\n      if (!arg1.isArrayLit() && !arg1.isName() && !arg1.isOr() && !arg1.isGetProp()) {\n        return CanInlineResult.NO;\n      }\n\n      // Pick arguments from array literal or Arguments.\n      // Here we can't use `ArgArrayNode` because the arguments\n      // might be an array literal with spread in which case it is not an Arguments.\n      // We don't support calls of the form apply(foo, {...}).  This is hard to analyze\n      // statically and is a rare case anyway.\n      Node arg0 = callArgs.get(0);\n      if (arg1.isName() || NodeUtil.isEntirelyLocalOrSimpleArray(arg1)) {\n        Symbol declared = getScope().getDeclaredName(arg1.getString());\n        if (declared != null && declared.getDecl() == arg1) {\n          arg1 = declared.getNameNode();\n        }\n        getBodyAnalyzer().traverseChildrenToStringBuilder(arg1.getParent(), outboundEdgeMap);\n        return CanInlineResult.NO;\n      } else {\n        for (Node n : arg1.children()) {\n          callArgs.add(n);\n        }\n        callArgs.remove(0);\n      }\n    }\n\n    if (callArgs.size() > fnParams.size()) {\n      return CanInlineResult.NO;\n    }\n\n    Map<Node, Node> argToParam = new HashMap<>();\n    boolean hasUndefined = false;\n    for (int i = 0; i < callArgs.size(); i++) {\n      Node callArg = callArgs.get(i);\n      Node fnParam = i < fnParams.size() ? fnParams.get(i) : null;\n      if (fnParam == null && !hasUndefined) {\n        hasUndefined = true;\n      } else if (fnParam == null) {\n        continue;\n      }\n      if (NodeUtil.mayEffectMutableState(callArg, compiler)\n          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      argToParam.put(callArg, fnParam);\n    }\n\n    if (!hasUndefined && argToParam.size() < fnParams.size()) {\n      return CanInlineResult.NO;\n    }\n\n    for (int i = 0; i < fnParams.size(); i++) {\n      Node fnParam = fnParams.get(i);\n      if (!argToParam.containsValue(fnParam) && !hasUndefined) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..7d22976c 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -694,54 +694,90 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n-\n     // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    Node callee = callNode.getFirstChild();\n+    List<Node> callArgs = Lists.newArrayList(callee.getNext().children());\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n+    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+    Node lp = NodeUtil.getFunctionParameters(fnNode);\n+    Preconditions.checkState(lp.isParamList(), lp);\n+    List<Node> fnParams = Lists.newArrayList(lp.children());\n+\n+    if (callArgs.isEmpty()) {\n+      return fnParams.isEmpty() ? CanInlineResult.YES : CanInlineResult.NO;\n+    }\n+\n+    if (callNode.getFirstChild().isObjectLit()) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    if (NodeUtil.isFunctionObjectCall(callNode)) {\n+      // Function object call.\n+      if (callArgs.get(0).isThis()) {\n+        callArgs = callArgs.subList(1, callArgs.size());\n+      } else {\n+        return CanInlineResult.NO;\n+      }\n+    } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n+      // Function apply call.\n+      if (callArgs.size() != 2) {\n+        return CanInlineResult.NO;\n+      }\n+      Node arg1 = callArgs.get(1);\n+      if (!arg1.isArrayLit() && !arg1.isName() && !arg1.isOr() && !arg1.isGetProp()) {\n+        return CanInlineResult.NO;\n+      }\n+\n+      // Pick arguments from array literal or Arguments.\n+      // Here we can't use `ArgArrayNode` because the arguments\n+      // might be an array literal with spread in which case it is not an Arguments.\n+      // We don't support calls of the form apply(foo, {...}).  This is hard to analyze\n+      // statically and is a rare case anyway.\n+      Node arg0 = callArgs.get(0);\n+      if (arg1.isName() || NodeUtil.isEntirelyLocalOrSimpleArray(arg1)) {\n+        Symbol declared = getScope().getDeclaredName(arg1.getString());\n+        if (declared != null && declared.getDecl() == arg1) {\n+          arg1 = declared.getNameNode();\n         }\n-        cArg = cArg.getNext();\n+        getBodyAnalyzer().traverseChildrenToStringBuilder(arg1.getParent(), outboundEdgeMap);\n+        return CanInlineResult.NO;\n       } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n+        for (Node n : arg1.children()) {\n+          callArgs.add(n);\n+        }\n+        callArgs.remove(0);\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (callArgs.size() > fnParams.size()) {\n+      return CanInlineResult.NO;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    Map<Node, Node> argToParam = new HashMap<>();\n+    boolean hasUndefined = false;\n+    for (int i = 0; i < callArgs.size(); i++) {\n+      Node callArg = callArgs.get(i);\n+      Node fnParam = i < fnParams.size() ? fnParams.get(i) : null;\n+      if (fnParam == null && !hasUndefined) {\n+        hasUndefined = true;\n+      } else if (fnParam == null) {\n+        continue;\n       }\n+      if (NodeUtil.mayEffectMutableState(callArg, compiler)\n+          && NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n+      }\n+      argToParam.put(callArg, fnParam);\n+    }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    if (!hasUndefined && argToParam.size() < fnParams.size()) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    for (int i = 0; i < fnParams.size(); i++) {\n+      Node fnParam = fnParams.get(i);\n+      if (!argToParam.containsValue(fnParam) && !hasUndefined) {\n+        return CanInlineResult.NO;\n       }\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}