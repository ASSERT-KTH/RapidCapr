{
    "patch": "    // Handle the case where the constraint object is a record type.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n\n    // Handle the case where the constraint object is a constructor.\n    if (constraintObj.isNominalConstructor()) {\n      if (isGeneric()) {\n        JSType instantiatedGenericType = getInstanceAsJSType();\n        if (instantiatedGenericType.isLoose()) {\n          instantiatedGenericType =\n              getTypeOfThis().getInstantiatedType(getTemplateTypeMap());\n        }\n        instantiatedGenericType.matchConstraint(constraintObj.getInstanceAsObjectType());\n        return;\n      }\n      if (isBuiltin() && getBuiltinObjectKind() == BuiltinObjectKind.ARRAY) {\n        JSType elementType = constraintObj.getHasElementTypes() ?\n            constraintObj.getIndexedType() : constraintObj.getNullableSubtype();\n        if (elementType == null) {\n          elementType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        }\n        ElementsReceiver paramReceiver = getElementsReceiver();\n        if (paramReceiver != null) {\n          if (hasProperty(\"length\")) {\n            paramReceiver.matchProperty(\"length\", getNativeType(JSTypeNative.NUMBER_TYPE));\n          }\n          paramReceiver.matchIndexTo(elementType, Collections.<String>emptySet());\n        }\n      } else {\n        matchConstructor(constraintObj.asNominalConstructor());\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..572b3736 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,49 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    // Handle the case where the constraint object is a record type.\n+    if (constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    }\n+\n+    // Handle the case where the constraint object is a constructor.\n+    if (constraintObj.isNominalConstructor()) {\n+      if (isGeneric()) {\n+        JSType instantiatedGenericType = getInstanceAsJSType();\n+        if (instantiatedGenericType.isLoose()) {\n+          instantiatedGenericType =\n+              getTypeOfThis().getInstantiatedType(getTemplateTypeMap());\n+        }\n+        instantiatedGenericType.matchConstraint(constraintObj.getInstanceAsObjectType());\n+        return;\n+      }\n+      if (isBuiltin() && getBuiltinObjectKind() == BuiltinObjectKind.ARRAY) {\n+        JSType elementType = constraintObj.getHasElementTypes() ?\n+            constraintObj.getIndexedType() : constraintObj.getNullableSubtype();\n+        if (elementType == null) {\n+          elementType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        }\n+        ElementsReceiver paramReceiver = getElementsReceiver();\n+        if (paramReceiver != null) {\n+          if (hasProperty(\"length\")) {\n+            paramReceiver.matchProperty(\"length\", getNativeType(JSTypeNative.NUMBER_TYPE));\n+          }\n+          paramReceiver.matchIndexTo(elementType, Collections.<String>emptySet());\n+        }\n+      } else {\n+        matchConstructor(constraintObj.asNominalConstructor());\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}