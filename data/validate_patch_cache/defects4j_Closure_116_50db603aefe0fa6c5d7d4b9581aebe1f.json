{
    "patch": "private CanInlineResult canInlineReferenceDirectly(\n    Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node cArg = null;\n  if (NodeUtil.isNormalOrOptChainCall(callNode)) {\n    cArg = callNode.getFirstChild().getNext();\n  } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n    // Variables for list of extra arguments\n    Node extraArgs = cArg = callNode.getFirstChild().getNext().getNext();\n    // Get the number of extra arguments in the list\n    int extraArgCount = 0;\n    for (Node extra : extraArgs.children()) {\n      if (!extra.isEmpty()) {\n        cArg = extra;\n        extraArgCount++;\n      }\n    }\n    // If there are no extra arguments, the function being called is treated as regular function\n    // call and unrolling happens as normal.\n    if (extraArgCount == 0) {\n      cArg = callNode.getFirstChild().getNext();\n    }\n  } else {\n    return CanInlineResult.NO;\n  }\n\n  boolean hasUnusedArgs = false;\n  while (fnParam != null && cArg != null) {\n    if (!isAppropriateParameter(fnParam, cArg)) {\n      return CanInlineResult.NO;\n    }\n    // Move to the next name.\n    fnParam = fnParam.getNext();\n\n    // For every call argument check for side-effects, even if there\n    // isn't a named parameter to match.\n    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n      return CanInlineResult.NO;\n    }\n\n    cArg = cArg.getNext();\n  }\n\n  // Return NO if only some of the arguments were used\n  if (cArg != null && !hasUnusedArgs(cArg)) {\n    return CanInlineResult.NO;\n  }\n\n  // If there are more arguments or parameters then we cannot inline.\n  if (fnParam != null || (cArg != null && hasUnusedArgs)) {\n    return CanInlineResult.NO;\n  }\n\n  return CanInlineResult.YES;\n}\n\nprivate boolean isAppropriateParameter(Node fnParam, Node cArg) {\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (fnParam.isThis()) {\n    return cArg.isThis() || cArg.isName() || cArg.isGetProp() || cArg.isGetElem();\n  }\n  if (cArg.isSpread()) {\n    // Spread operator requires parameter to be an ARRAY or an ARGUMENTS object.\n    return NodeUtil.getKnownValueType(fnParam) == Token.ARRAYLIT\n        || NodeUtil.getKnownValueType(fnParam) == Token.NAME\n            && fnParam.getString().equals(\"arguments\");\n  }\n  return cArg.isName() || cArg.isGetProp() || cArg.isGetElem()\n      || (fnParam.getDefaultValue() == null && !cArg.isSpread());\n}\n\nprivate boolean hasUnusedArgs(Node cArg) {\n  for (Node n = cArg; n != null; n = n.getNext()) {\n    // skip empty children\n    if (n.isEmpty()) {\n      continue;\n    }\n    if (!n.getNext().isEmpty()) {\n      // Arguments used outside of a destructing pattern i.e., fn(a,b,c)[0]\n      return true;\n    } else if (NodeUtil.isNameDeclOrSimpleAssignment(n.getParent())\n        || NodeUtil.isObjectPattern(n.getParent()) || NodeUtil.isArrayPattern(n.getParent())) {\n      // If the current argument is used as part of a parameter declaration/assignment,\n      // skip the next argument which would correspond to the default value or another destructing pattern\n      n = n.getNext();\n    } else {\n      // Arguments used only for the purpose of de-structuring\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..be473e31 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,67 +686,109 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+private CanInlineResult canInlineReferenceDirectly(\n+    Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  Node block = fnNode.getLastChild();\n+\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node cArg = null;\n+  if (NodeUtil.isNormalOrOptChainCall(callNode)) {\n+    cArg = callNode.getFirstChild().getNext();\n+  } else if (NodeUtil.isFunctionObjectApply(callNode)) {\n+    // Variables for list of extra arguments\n+    Node extraArgs = cArg = callNode.getFirstChild().getNext().getNext();\n+    // Get the number of extra arguments in the list\n+    int extraArgCount = 0;\n+    for (Node extra : extraArgs.children()) {\n+      if (!extra.isEmpty()) {\n+        cArg = extra;\n+        extraArgCount++;\n+      }\n+    }\n+    // If there are no extra arguments, the function being called is treated as regular function\n+    // call and unrolling happens as normal.\n+    if (extraArgCount == 0) {\n+      cArg = callNode.getFirstChild().getNext();\n+    }\n+  } else {\n+    return CanInlineResult.NO;\n+  }\n+\n+  boolean hasUnusedArgs = false;\n+  while (fnParam != null && cArg != null) {\n+    if (!isAppropriateParameter(fnParam, cArg)) {\n       return CanInlineResult.NO;\n     }\n+    // Move to the next name.\n+    fnParam = fnParam.getNext();\n \n-    Node block = fnNode.getLastChild();\n+    // For every call argument check for side-effects, even if there\n+    // isn't a named parameter to match.\n+    if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      return CanInlineResult.NO;\n+    }\n \n+    cArg = cArg.getNext();\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Return NO if only some of the arguments were used\n+  if (cArg != null && !hasUnusedArgs(cArg)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+  // If there are more arguments or parameters then we cannot inline.\n+  if (fnParam != null || (cArg != null && hasUnusedArgs)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+  return CanInlineResult.YES;\n+}\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n+private boolean isAppropriateParameter(Node fnParam, Node cArg) {\n+  // Functions called via 'call' and 'apply' have a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (fnParam.isThis()) {\n+    return cArg.isThis() || cArg.isName() || cArg.isGetProp() || cArg.isGetElem();\n+  }\n+  if (cArg.isSpread()) {\n+    // Spread operator requires parameter to be an ARRAY or an ARGUMENTS object.\n+    return NodeUtil.getKnownValueType(fnParam) == Token.ARRAYLIT\n+        || NodeUtil.getKnownValueType(fnParam) == Token.NAME\n+            && fnParam.getString().equals(\"arguments\");\n+  }\n+  return cArg.isName() || cArg.isGetProp() || cArg.isGetElem()\n+      || (fnParam.getDefaultValue() == null && !cArg.isSpread());\n+}\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      }\n+private boolean hasUnusedArgs(Node cArg) {\n+  for (Node n = cArg; n != null; n = n.getNext()) {\n+    // skip empty children\n+    if (n.isEmpty()) {\n+      continue;\n+    }\n+    if (!n.getNext().isEmpty()) {\n+      // Arguments used outside of a destructing pattern i.e., fn(a,b,c)[0]\n+      return true;\n+    } else if (NodeUtil.isNameDeclOrSimpleAssignment(n.getParent())\n+        || NodeUtil.isObjectPattern(n.getParent()) || NodeUtil.isArrayPattern(n.getParent())) {\n+      // If the current argument is used as part of a parameter declaration/assignment,\n+      // skip the next argument which would correspond to the default value or another destructing pattern\n+      n = n.getNext();\n+    } else {\n+      // Arguments used only for the purpose of de-structuring\n+      return true;\n     }\n-\n-    return CanInlineResult.YES;\n   }\n+  return false;\n+}\n \n   /**\n    * Determine if inlining the function is likely to reduce the code size.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}