{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    while (cfgNode != null && !cfgNode.isScript()) {\n      if (cfgNode.getType() == Token.TRY) {\n        return true;\n      }\n      // If we find an exception handler on any parent, we can stop searching\n      if (cfgNode.getType() == Token.CATCH || cfgNode.getType() == Token.FINALLY) {\n        return true;\n      }\n      cfgNode = cfgNode.getParent();\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..84e446d7 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -157,6 +157,19 @@ class MaybeReachingVariableUse extends\n   }\n \n   private boolean hasExceptionHandler(Node cfgNode) {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    while (cfgNode != null && !cfgNode.isScript()) {\n+      if (cfgNode.getType() == Token.TRY) {\n+        return true;\n+      }\n+      // If we find an exception handler on any parent, we can stop searching\n+      if (cfgNode.getType() == Token.CATCH || cfgNode.getType() == Token.FINALLY) {\n+        return true;\n+      }\n+      cfgNode = cfgNode.getParent();\n+    }\n+    return false;\n+  }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}