{
    "patch": "Chronology parsedChrono = bucket.getEffectiveChronology();\nbucket.saveField(DateTimeFieldType.year(), parsedChrono.year().get(parsedLocal));\nbucket.saveField(DateTimeFieldType.monthOfYear(), parseInt(fieldValue));\ninstantLocal = bucket.computeMillis(false, text);\nchrono = selectChronology(parsedChrono);\nlong parsedLocal = instantLocal - chrono.getZone().getOffset(instantLocal);\nbucket.restoreState(textIndex);\nbucket.setZone(chrono.getZone());\ninstantLocal = parsedLocal;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..7faac2a9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,15 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+Chronology parsedChrono = bucket.getEffectiveChronology();\n+bucket.saveField(DateTimeFieldType.year(), parsedChrono.year().get(parsedLocal));\n+bucket.saveField(DateTimeFieldType.monthOfYear(), parseInt(fieldValue));\n+instantLocal = bucket.computeMillis(false, text);\n+chrono = selectChronology(parsedChrono);\n+long parsedLocal = instantLocal - chrono.getZone().getOffset(instantLocal);\n+bucket.restoreState(textIndex);\n+bucket.setZone(chrono.getZone());\n+instantLocal = parsedLocal;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}