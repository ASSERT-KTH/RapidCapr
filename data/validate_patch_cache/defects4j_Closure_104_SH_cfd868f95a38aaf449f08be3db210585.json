{
    "patch": "    if (result != null && !result.isBottom()) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  UnionType flatten() {\n    UnionType.Builder builder = new UnionType.Builder();\n    for (JSType alternate : alternates) {\n      if (alternate.isUnionType()) {\n        builder.addFromUnionType((UnionType) alternate);\n      } else if (!alternate.isBottom()) {\n        builder.addAlternate(alternate);\n      }\n    }\n    return builder.build();\n  }\n\n  @Override\n  JSType getGreatestSubtypeHelper(\n      Set<Pair<JSType, JSType>> cache,\n      JSType other,\n      SubtypeCache subSuperMap) {\n    // The greatest subtype of an empty union type is bottom.\n    if (alternates.isEmpty()) {\n      return JSType.bottom();\n    }\n    JSType result = null;\n    boolean sawBottom = false;\n    for (JSType alternate : alternates) {\n      if (alternate.isBottom()) {\n        sawBottom = true;\n      } else if (result == null) {\n        result = alternate.getGreatestSubtype(other, cache, subSuperMap);\n      } else {\n        result = result.getGreatestSubtype(alternate, cache, subSuperMap);\n        if (result.isBottom()) {\n          break;\n        }\n      }\n    }\n    if (result != null && !result.isBottom()) {\n      return result;\n    } else if (sawBottom) {\n      return JSType.bottom();\n    } else {\n      return null;\n    }\n  }\n\n  @Override\n  JSType getLeastSupertypeHelper(\n      Set<Pair<JSType, JSType>> cache,\n      JSType other,\n      SubtypeCache subSuperMap) {\n    // The least supertype of an empty union type is `unknown`.\n    if (alternates.isEmpty()) {\n      return JSType.top();\n    }\n\n    // If this type is a union with a subtype of `other`, return this type.\n    if (other.isUnionType()) {\n      for (JSType alternate : ((UnionType) other).alternates) {\n        JSType leastSupertype = getLeastSupertypeHelper(cache, alternate, subSuperMap);\n        if (leastSupertype != null) {\n          return this;\n        }\n      }\n    } else if (isTop()) {\n      return other;\n    }\n\n    JSType result = null;\n    boolean sawTop = false;\n    for (JSType alternate : alternates) {\n      if (alternate.isTop()) {\n        sawTop = true;\n      } else if (result == null) {\n        result = alternate.getLeastSupertype(other, cache, subSuperMap);\n      } else {\n        result = result.getLeastSupertype(alternate, cache, subSuperMap);\n        if (result.isTop()) {\n          break;\n        }\n      }\n    }\n\n    if (result != null && !result.isTop()) {\n      return result;\n    } else if (sawTop) {\n      return JSType.top();\n    } else {\n      return null;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..4d0ab582 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,139 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+    if (result != null && !result.isBottom()) {\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n+\n+  /**\n+   * Two union types are equal if they have the same number of alternates\n+   * and all alternates are equal.\n+   */\n+  @Override\n+  public boolean equals(Object object) {\n+    if (object instanceof UnionType) {\n+      UnionType that = (UnionType) object;\n+      return alternates.equals(that.alternates);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return alternates.hashCode();\n+  }\n+\n+  @Override\n+  public boolean isUnionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isObject()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  UnionType flatten() {\n+    UnionType.Builder builder = new UnionType.Builder();\n+    for (JSType alternate : alternates) {\n+      if (alternate.isUnionType()) {\n+        builder.addFromUnionType((UnionType) alternate);\n+      } else if (!alternate.isBottom()) {\n+        builder.addAlternate(alternate);\n+      }\n+    }\n+    return builder.build();\n+  }\n+\n+  @Override\n+  JSType getGreatestSubtypeHelper(\n+      Set<Pair<JSType, JSType>> cache,\n+      JSType other,\n+      SubtypeCache subSuperMap) {\n+    // The greatest subtype of an empty union type is bottom.\n+    if (alternates.isEmpty()) {\n+      return JSType.bottom();\n+    }\n+    JSType result = null;\n+    boolean sawBottom = false;\n+    for (JSType alternate : alternates) {\n+      if (alternate.isBottom()) {\n+        sawBottom = true;\n+      } else if (result == null) {\n+        result = alternate.getGreatestSubtype(other, cache, subSuperMap);\n+      } else {\n+        result = result.getGreatestSubtype(alternate, cache, subSuperMap);\n+        if (result.isBottom()) {\n+          break;\n+        }\n+      }\n+    }\n+    if (result != null && !result.isBottom()) {\n+      return result;\n+    } else if (sawBottom) {\n+      return JSType.bottom();\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  @Override\n+  JSType getLeastSupertypeHelper(\n+      Set<Pair<JSType, JSType>> cache,\n+      JSType other,\n+      SubtypeCache subSuperMap) {\n+    // The least supertype of an empty union type is `unknown`.\n+    if (alternates.isEmpty()) {\n+      return JSType.top();\n+    }\n+\n+    // If this type is a union with a subtype of `other`, return this type.\n+    if (other.isUnionType()) {\n+      for (JSType alternate : ((UnionType) other).alternates) {\n+        JSType leastSupertype = getLeastSupertypeHelper(cache, alternate, subSuperMap);\n+        if (leastSupertype != null) {\n+          return this;\n+        }\n+      }\n+    } else if (isTop()) {\n+      return other;\n+    }\n+\n+    JSType result = null;\n+    boolean sawTop = false;\n+    for (JSType alternate : alternates) {\n+      if (alternate.isTop()) {\n+        sawTop = true;\n+      } else if (result == null) {\n+        result = alternate.getLeastSupertype(other, cache, subSuperMap);\n+      } else {\n+        result = result.getLeastSupertype(alternate, cache, subSuperMap);\n+        if (result.isTop()) {\n+          break;\n+        }\n+      }\n+    }\n+\n+    if (result != null && !result.isTop()) {\n+      return result;\n+    } else if (sawTop) {\n+      return JSType.top();\n+    } else {\n+      return null;\n+    }\n+  }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}