{
    "patch": "            case Token.FUNCTION:\n              Node gramps = parent.getParent();\n              if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                return;\n              }\n              isSet = true;\n              type = Name.Type.FUNCTION;\n              break;\n            case Token.CALL:\n              if (!parent.isExprResult() && !parent.isHook()) {\n                // This call's result is used, so don't warn if the call\n                // itself generated warnings.\n                return;\n              }\n              // fallthrough\n            default:\n              if (NodeUtil.isAssignmentOp(parent) &&\n                  parent.getFirstChild() == n) {\n                isSet = true;\n                type = Name.Type.OTHER;\n              }\n          }\n        }\n        name = n.getString();\n        break;\n      case Token.GETPROP:\n        // This may be a namespaced name get or set.\n        if (parent != null) {\n          switch (parent.getType()) {\n            case Token.ASSIGN:\n              if (parent.getFirstChild() == n) {\n                isSet = true;\n                type = getValueType(n.getNext());\n                isPropAssign = true;\n              }\n              break;\n            case Token.CALL:\n              if (!parent.isExprResult() && !parent.isHook()) {\n                // This call's result is used, so don't warn if the call\n                // itself generated warnings.\n                return;\n              }\n              // fallthrough\n            default:\n              if (NodeUtil.isAssignmentOp(parent) &&\n                  parent.getFirstChild() == n) {\n                isSet = true;\n                type = Name.Type.OTHER;\n              }\n          }\n        }\n        name = n.getQualifiedName();\n        if (name == null) {\n          return;\n        }\n        break;\n      default:\n        return;\n    }\n\n    // We are only interested in global names.\n    if (!isGlobalNameReference(name, scope)) {\n      return;\n    }\n\n    if (isSet) {\n      if (isGlobalScope(scope)) {\n        handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n      } else {\n        handleSetFromLocal(module, scope, n, parent, name);\n      }\n    } else {\n      handleGet(module, scope, n, parent, name);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..9ed9bc5b 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,81 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+            case Token.FUNCTION:\n+              Node gramps = parent.getParent();\n+              if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                return;\n+              }\n+              isSet = true;\n+              type = Name.Type.FUNCTION;\n+              break;\n+            case Token.CALL:\n+              if (!parent.isExprResult() && !parent.isHook()) {\n+                // This call's result is used, so don't warn if the call\n+                // itself generated warnings.\n+                return;\n+              }\n+              // fallthrough\n+            default:\n+              if (NodeUtil.isAssignmentOp(parent) &&\n+                  parent.getFirstChild() == n) {\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+              }\n+          }\n+        }\n+        name = n.getString();\n+        break;\n+      case Token.GETPROP:\n+        // This may be a namespaced name get or set.\n+        if (parent != null) {\n+          switch (parent.getType()) {\n+            case Token.ASSIGN:\n+              if (parent.getFirstChild() == n) {\n+                isSet = true;\n+                type = getValueType(n.getNext());\n+                isPropAssign = true;\n+              }\n+              break;\n+            case Token.CALL:\n+              if (!parent.isExprResult() && !parent.isHook()) {\n+                // This call's result is used, so don't warn if the call\n+                // itself generated warnings.\n+                return;\n+              }\n+              // fallthrough\n+            default:\n+              if (NodeUtil.isAssignmentOp(parent) &&\n+                  parent.getFirstChild() == n) {\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+              }\n+          }\n+        }\n+        name = n.getQualifiedName();\n+        if (name == null) {\n+          return;\n+        }\n+        break;\n+      default:\n+        return;\n+    }\n+\n+    // We are only interested in global names.\n+    if (!isGlobalNameReference(name, scope)) {\n+      return;\n+    }\n+\n+    if (isSet) {\n+      if (isGlobalScope(scope)) {\n+        handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+      } else {\n+        handleSetFromLocal(module, scope, n, parent, name);\n+      }\n+    } else {\n+      handleGet(module, scope, n, parent, name);\n+    }\n+  }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}