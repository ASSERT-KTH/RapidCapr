{
    "patch": "        if (currentNode instanceof PrimitiveTypeNode) {\n            // primitive type, e.g., string, number, boolean\n            return currentNode;\n        } else if (currentNode instanceof NamedTypeNode) {\n            // named type, e.g., MyClass\n            return currentNode;\n        } else if (currentNode instanceof ArrayTypeNode) {\n            // array type, e.g., string[]\n            return currentNode;\n        } else {\n            // type with qualifiers, e.g., !function(): string\n            return parseQualifiedTypeName(token);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..4e4b4767 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1905,7 +1905,19 @@ public final class JsDocInfoParser {\n    * For expressions on the right hand side of a this: or new:\n    */\n   private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+        if (currentNode instanceof PrimitiveTypeNode) {\n+            // primitive type, e.g., string, number, boolean\n+            return currentNode;\n+        } else if (currentNode instanceof NamedTypeNode) {\n+            // named type, e.g., MyClass\n+            return currentNode;\n+        } else if (currentNode instanceof ArrayTypeNode) {\n+            // array type, e.g., string[]\n+            return currentNode;\n+        } else {\n+            // type with qualifiers, e.g., !function(): string\n+            return parseQualifiedTypeName(token);\n+        }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}