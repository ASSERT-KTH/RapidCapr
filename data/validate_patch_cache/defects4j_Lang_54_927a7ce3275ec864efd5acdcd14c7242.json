{
    "patch": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n        int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (!isAlpha(ch0) || !isAlpha(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            String country = \"\";\n            int start = 3;\n            if (len >= 5 && isAlpha(str.charAt(3)) && isAlpha(str.charAt(4))) {\n                country = str.substring(3, 5);\n                start = 5;\n            }\n            if (len == start) {\n                return new Locale(str.substring(0, 2), country);\n            } else {\n                if (str.charAt(start) != '_') {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                String variant = \"\";\n                int end = start + 1;\n                if (len > (start + 1)) {\n                    variant = str.substring(start + 1);\n                    end = len;\n                }\n                return new Locale(str.substring(0, 2), country, variant);\n            }\n        }\n    }\n    \n    private static boolean isAlpha(char ch) {\n        return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..575878c7 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -96,12 +96,12 @@ public class LocaleUtils {\n             return null;\n         }\n         int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n+        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         char ch0 = str.charAt(0);\n         char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n+        if (!isAlpha(ch0) || !isAlpha(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n         if (len == 2) {\n@@ -110,21 +110,32 @@ public class LocaleUtils {\n             if (str.charAt(2) != '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            String country = \"\";\n+            int start = 3;\n+            if (len >= 5 && isAlpha(str.charAt(3)) && isAlpha(str.charAt(4))) {\n+                country = str.substring(3, 5);\n+                start = 5;\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            if (len == start) {\n+                return new Locale(str.substring(0, 2), country);\n             } else {\n-                if (str.charAt(5) != '_') {\n+                if (str.charAt(start) != '_') {\n                     throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                 }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+                String variant = \"\";\n+                int end = start + 1;\n+                if (len > (start + 1)) {\n+                    variant = str.substring(start + 1);\n+                    end = len;\n+                }\n+                return new Locale(str.substring(0, 2), country, variant);\n             }\n         }\n     }\n+    \n+    private static boolean isAlpha(char ch) {\n+        return ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z';\n+    }\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: Should fail if not lowercase",
    "test_result": "FAIL"
}