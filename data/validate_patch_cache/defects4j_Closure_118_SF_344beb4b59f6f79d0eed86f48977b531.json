{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        if (child.isString()) { // Only process string child nodes\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child,\n              processProperty(t, prop, type,\n                  prop.getType() != null && prop.getType().isEnumElementType()))) {\n            // TODO(user): It doesn't look like the user can do much in this case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(\n                  JSError.make(\n                      t.getSourceName(),\n                      child,\n                      propertiesToErrorFor.get(name).getErrorMessage(name),\n                      Warnings.INVALIDATION,\n                      name,\n                      (type == null ? \"null\" : type.toString()),\n                      n.toString(),\n                      \"\"));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..c74121bb 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,25 +488,31 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n \n         // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+        if (child.isString()) { // Only process string child nodes\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child,\n+              processProperty(t, prop, type,\n+                  prop.getType() != null && prop.getType().isEnumElementType()))) {\n+            // TODO(user): It doesn't look like the user can do much in this case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(\n+                  JSError.make(\n+                      t.getSourceName(),\n+                      child,\n+                      propertiesToErrorFor.get(name).getErrorMessage(name),\n+                      Warnings.INVALIDATION,\n+                      name,\n+                      (type == null ? \"null\" : type.toString()),\n+                      n.toString(),\n+                      \"\"));\n+            }\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}