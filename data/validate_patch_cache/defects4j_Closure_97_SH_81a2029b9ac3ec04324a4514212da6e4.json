{
    "patch": "switch (n.getType()) {\n  case Token.LSH:\n    result = lvalInt << rvalInt;\n    break;\n  case Token.RSH:\n    result = lvalInt >> rvalInt;\n    break;\n  case Token.URSH:\n    // Convert the signed int to an unsigned long by adding 2^32.\n    long lvalUnsigned = lvalInt & 0xFFFFFFFFL;\n    result = lvalUnsigned >>> (int) rval;\n    break;\n  default:\n    throw new AssertionError(\"Unknown shift operator: \" +\n          Node.tokenToName(n.getType()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..256c4e49 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,22 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+switch (n.getType()) {\n+  case Token.LSH:\n+    result = lvalInt << rvalInt;\n+    break;\n+  case Token.RSH:\n+    result = lvalInt >> rvalInt;\n+    break;\n+  case Token.URSH:\n+    // Convert the signed int to an unsigned long by adding 2^32.\n+    long lvalUnsigned = lvalInt & 0xFFFFFFFFL;\n+    result = lvalUnsigned >>> (int) rval;\n+    break;\n+  default:\n+    throw new AssertionError(\"Unknown shift operator: \" +\n+          Node.tokenToName(n.getType()));\n+}\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}