{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        long offsetBefore = getOffset(instant - 1);\n        long offsetAfter = getOffset(instant + 1);\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n        \n        // work out range of instants that have duplicate local times\n        long minOffset = Math.min(offsetBefore, offsetAfter);\n        long maxOffset = Math.max(offsetBefore, offsetAfter);\n        long local = convertUTCToLocal(instant);\n        long max = convertLocalToUTC(local, false, maxOffset);\n        long min = convertLocalToUTC(local, false, minOffset);\n        if (earlierOrLater) {\n            return (instant == max ? min : max);\n        } else {\n            return (instant == max ? max : min);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..66f1c586 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1162,6 +1162,8 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n         // a bit messy, but will work in all non-pathological cases\n+        long offsetBefore = getOffset(instant - 1);\n+        long offsetAfter = getOffset(instant + 1);\n         \n         // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n@@ -1171,12 +1173,16 @@ public abstract class DateTimeZone implements Serializable {\n         }\n         \n         // work out range of instants that have duplicate local times\n+        long minOffset = Math.min(offsetBefore, offsetAfter);\n+        long maxOffset = Math.max(offsetBefore, offsetAfter);\n         long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+        long max = convertLocalToUTC(local, false, maxOffset);\n+        long min = convertLocalToUTC(local, false, minOffset);\n+        if (earlierOrLater) {\n+            return (instant == max ? min : max);\n+        } else {\n+            return (instant == max ? max : min);\n+        }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T02:15:00.000+02:00> was not:<2007-10-28T02:15:00.000+01:00>",
    "test_result": "FAIL"
}