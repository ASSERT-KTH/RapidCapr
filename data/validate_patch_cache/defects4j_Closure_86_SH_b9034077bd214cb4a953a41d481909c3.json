{
    "patch": "    case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return false;\n    case Token.FUNCTION:\n        // fall through\n    case Token.REGEXP:\n        // fall through\n    case Token.ARRAYLIT:\n        // fall through\n    case Token.OBJECTLIT:\n        // Literal objects with non-literal children are allowed.\n        return true;\n    case Token.IN:\n        return true;\n    default:\n        // Other op force a local value:\n        // x = '' + g (x is now a local string)\n        // x -= g (x is now a local number)\n        if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n            return true;\n        }\n\n        throw new IllegalStateException(\"Unexpected expression node\" + value +\n                \"\\n parent:\" + value.getParent());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..dad7a2bd 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,32 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n+    case Token.NEW:\n+        // TODO(nicksantos): This needs to be changed so that it\n+        // returns true iff we're sure the value was never aliased from inside\n+        // the constructor (similar to callHasLocalResult)\n+        return false;\n+    case Token.FUNCTION:\n+        // fall through\n+    case Token.REGEXP:\n+        // fall through\n+    case Token.ARRAYLIT:\n+        // fall through\n+    case Token.OBJECTLIT:\n+        // Literal objects with non-literal children are allowed.\n+        return true;\n+    case Token.IN:\n         return true;\n+    default:\n+        // Other op force a local value:\n+        // x = '' + g (x is now a local string)\n+        // x -= g (x is now a local number)\n+        if (isAssignmentOp(value) || isSimpleOperator(value) || isImmutableValue(value)) {\n+            return true;\n+        }\n+\n+        throw new IllegalStateException(\"Unexpected expression node\" + value +\n+                \"\\n parent:\" + value.getParent());\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}