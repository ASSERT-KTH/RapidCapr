{
    "patch": "    protected CompilerOptions createOptions() {\n        CompilerOptions options = new CompilerOptions();\n        if (flags.processJqueryPrimitives) {\n            options.setCodingConvention(new JqueryCodingConvention());\n        } else {\n            options.setCodingConvention(new ClosureCodingConvention());\n        }\n\n        options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n        CompilationLevel level = flags.compilationLevel;\n        level.setOptionsForCompilationLevel(options);\n\n        if (flags.debug) {\n            level.setDebugOptionsForCompilationLevel(options);\n        }\n\n        if (flags.useTypesForOptimization) {\n            level.setTypeBasedOptimizationOptions(options);\n        }\n\n        if (flags.generateExports) {\n            options.setGenerateExports(true);\n        }\n\n        WarningLevel wLevel = flags.warningLevel;\n        wLevel.setOptionsForWarningLevel(options);\n        for (FormattingOption formattingOption : flags.formatting) {\n            formattingOption.applyToOptions(options);\n        }\n\n        if (flags.processClosurePrimitives) {\n            options.setProcessCommonJSModules(false);\n            options.setProcessES6Modules(false);\n            options.setRewritePolyfills(false);\n        }\n\n        options.setProcessClosurePrimitives(flags.processClosurePrimitives);\n\n        options.setProcessJqueryPrimitives(flags.processJqueryPrimitives);\n\n        options.setAngularPass(flags.angularPass);\n\n        if (!flags.translationsFile.isEmpty()) {\n            try {\n                options.messageBundle = new XtbMessageBundle(\n                        new FileInputStream(flags.translationsFile),\n                        flags.translationsProject);\n            } catch (IOException e) {\n                throw new RuntimeException(\"Reading XTB file\", e);\n            }\n        } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n            options.messageBundle = new EmptyMessageBundle();\n        }\n\n        return options;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..cfde147d 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -803,66 +803,63 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n-    CompilerOptions options = new CompilerOptions();\n-    if (flags.processJqueryPrimitives) {\n-      options.setCodingConvention(new JqueryCodingConvention());\n-    } else {\n-      options.setCodingConvention(new ClosureCodingConvention());\n-    }\n+    protected CompilerOptions createOptions() {\n+        CompilerOptions options = new CompilerOptions();\n+        if (flags.processJqueryPrimitives) {\n+            options.setCodingConvention(new JqueryCodingConvention());\n+        } else {\n+            options.setCodingConvention(new ClosureCodingConvention());\n+        }\n \n-    options.setExtraAnnotationNames(flags.extraAnnotationName);\n+        options.setExtraAnnotationNames(flags.extraAnnotationName);\n \n-    CompilationLevel level = flags.compilationLevel;\n-    level.setOptionsForCompilationLevel(options);\n+        CompilationLevel level = flags.compilationLevel;\n+        level.setOptionsForCompilationLevel(options);\n \n-    if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n-    }\n+        if (flags.debug) {\n+            level.setDebugOptionsForCompilationLevel(options);\n+        }\n \n-    if (flags.useTypesForOptimization) {\n-      level.setTypeBasedOptimizationOptions(options);\n-    }\n+        if (flags.useTypesForOptimization) {\n+            level.setTypeBasedOptimizationOptions(options);\n+        }\n \n-    if (flags.generateExports) {\n-      options.setGenerateExports(flags.generateExports);\n-    }\n+        if (flags.generateExports) {\n+            options.setGenerateExports(true);\n+        }\n \n-    WarningLevel wLevel = flags.warningLevel;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n+        WarningLevel wLevel = flags.warningLevel;\n+        wLevel.setOptionsForWarningLevel(options);\n+        for (FormattingOption formattingOption : flags.formatting) {\n+            formattingOption.applyToOptions(options);\n+        }\n \n-    options.closurePass = flags.processClosurePrimitives;\n+        if (flags.processClosurePrimitives) {\n+            options.setProcessCommonJSModules(false);\n+            options.setProcessES6Modules(false);\n+            options.setRewritePolyfills(false);\n+        }\n \n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n+        options.setProcessClosurePrimitives(flags.processClosurePrimitives);\n \n-    options.angularPass = flags.angularPass;\n+        options.setProcessJqueryPrimitives(flags.processJqueryPrimitives);\n \n-    if (!flags.translationsFile.isEmpty()) {\n-      try {\n-        options.messageBundle = new XtbMessageBundle(\n-            new FileInputStream(flags.translationsFile),\n-            flags.translationsProject);\n-      } catch (IOException e) {\n-        throw new RuntimeException(\"Reading XTB file\", e);\n-      }\n-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n-    }\n+        options.setAngularPass(flags.angularPass);\n \n-    return options;\n-  }\n+        if (!flags.translationsFile.isEmpty()) {\n+            try {\n+                options.messageBundle = new XtbMessageBundle(\n+                        new FileInputStream(flags.translationsFile),\n+                        flags.translationsProject);\n+            } catch (IOException e) {\n+                throw new RuntimeException(\"Reading XTB file\", e);\n+            }\n+        } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+            options.messageBundle = new EmptyMessageBundle();\n+        }\n+\n+        return options;\n+    }\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}