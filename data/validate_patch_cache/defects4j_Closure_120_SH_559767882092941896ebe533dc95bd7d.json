{
    "patch": "if (index > 0 && index < references.size()) {\n    Reference maybeDecl = references.get(index - 1);\n    if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n        Reference maybeInit = references.get(index);\n\n        if (maybeInit.isFunctionExpression() || maybeInit.isFunctionDeclaration() || maybeInit.isSimpleAssignmentToName()) {\n            return true;\n        }\n    }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..03768d36 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,17 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+if (index > 0 && index < references.size()) {\n+    Reference maybeDecl = references.get(index - 1);\n+    if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n+        Reference maybeInit = references.get(index);\n+\n+        if (maybeInit.isFunctionExpression() || maybeInit.isFunctionDeclaration() || maybeInit.isSimpleAssignmentToName()) {\n+            return true;\n+        }\n+    }\n+}\n+return false;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}