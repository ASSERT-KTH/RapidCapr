{
    "patch": "if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.translationsFile.isEmpty()) {\n  options.setMessageBundle(null);\n} else if (!flags.translationsFile.isEmpty()) {\n  try {\n    options.messageBundle = new XtbMessageBundle(new FileInputStream(flags.translationsFile), flags.translationsProject);\n  } catch (IOException e) {\n    throw new RuntimeException(\"Reading XTB file\", e);\n  }\n}\noptions.setMessageBundle(new EmptyMessageBundle());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..a5ead937 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,16 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level && flags.translationsFile.isEmpty()) {\n+  options.setMessageBundle(null);\n+} else if (!flags.translationsFile.isEmpty()) {\n+  try {\n+    options.messageBundle = new XtbMessageBundle(new FileInputStream(flags.translationsFile), flags.translationsProject);\n+  } catch (IOException e) {\n+    throw new RuntimeException(\"Reading XTB file\", e);\n+  }\n+}\n+options.setMessageBundle(new EmptyMessageBundle());\n     }\n \n     return options;",
    "result_reason": "junit.framework.AssertionFailedError: Expected no warnings or errors",
    "test_result": "FAIL"
}