{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    ObjectType objectType = null;\n    if (child.isQualifiedName()) {\n      QualifiedName qname = child.getQualifiedName();\n      objectType = ObjectType.cast(qname.getOwner().getJSType());\n      if (objectType != null && objectType.hasProperty(qname.getRightChild().getString())) {\n        JSType methodType = objectType.getPropertyType(\n            qname.getSymbolTable(), qname.getRightChild().getString()).autobox();\n        // Check if the result of the GETPROP is an unbound function.\n        if (methodType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n          FunctionType functionType = methodType.toMaybeFunctionType();\n          if (functionType != null) {\n            visitParameterList(t, n, functionType);\n            ensureTyped(t, n, functionType.getReturnType());\n            return;\n          }\n        }\n        ensureTyped(t, n, methodType.restrictByNotNullOrUndefined());\n        return;\n      }\n    }\n\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    FunctionType functionType = childType.toMaybeFunctionType();\n    if (functionType != null) {\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        isExtern = !functionJSDocInfo.getAnnotations().isEmpty();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()\n              || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..398ffd72 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1543,41 +1543,52 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    */\n   private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n+    ObjectType objectType = null;\n+    if (child.isQualifiedName()) {\n+      QualifiedName qname = child.getQualifiedName();\n+      objectType = ObjectType.cast(qname.getOwner().getJSType());\n+      if (objectType != null && objectType.hasProperty(qname.getRightChild().getString())) {\n+        JSType methodType = objectType.getPropertyType(\n+            qname.getSymbolTable(), qname.getRightChild().getString()).autobox();\n+        // Check if the result of the GETPROP is an unbound function.\n+        if (methodType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n+          FunctionType functionType = methodType.toMaybeFunctionType();\n+          if (functionType != null) {\n+            visitParameterList(t, n, functionType);\n+            ensureTyped(t, n, functionType.getReturnType());\n+            return;\n+          }\n+        }\n+        ensureTyped(t, n, methodType.restrictByNotNullOrUndefined());\n+        return;\n+      }\n+    }\n+\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n+    if (!childType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n       ensureTyped(t, n);\n       return;\n     }\n \n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n+    FunctionType functionType = childType.toMaybeFunctionType();\n+    if (functionType != null) {\n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+      if (functionJSDocInfo != null) {\n+        isExtern = !functionJSDocInfo.getAnnotations().isEmpty();\n       }\n \n       // Non-native constructors should not be called directly\n       // unless they specify a return type and are defined\n       // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+      if (functionType.isConstructor() && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()\n+              || !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n-\n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n     } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}