{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(n);\n      if (docInfo != null) {\n        isExtern = !docInfo.isInline() && !\"\".equals(docInfo.getFilename());\n        isExtern |= NodeUtil.isFromTypeSummary(n, docInfo.getUnparsedParameterDocs());\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      ObjectType thisType = functionType.getTypeOfThis();\n      if (thisType != null) {\n        Node parent = n.getParent();\n        if (parent.isGetProp() || parent.isGetElem()) {\n          ensureTyped(t, parent.getFirstChild(), thisType);\n        } else {\n          report(t, n, FUNCTION_CALL_BAD_THIS, childType.toString());\n        }\n      } else if (n.getParent().isCall() && n.getParent().getFirstChild() == n &&\n                 !functionType.isConstructor()) {\n        report(t, n, FUNCTION_CALL_NO_ARGS, childType.toString());\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO(b/112188110): Add something to check for calls of RegExp objects,\n    // which is not supported by IE. Either say something about the return type\n    // or warn about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..8a2a6b8d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,64 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+  private void visitCall(NodeTraversal t, Node n) {\n+    Node child = n.getFirstChild();\n+    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n+\n+    if (!childType.canBeCalled()) {\n+      report(t, n, NOT_CALLABLE, childType.toString());\n+      ensureTyped(t, n);\n+      return;\n+    }\n+\n+    // A couple of types can be called as if they were functions.\n+    // If it is a function type, then validate parameters.\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n+\n+      boolean isExtern = false;\n+      JSDocInfo docInfo = NodeUtil.getBestJSDocInfo(n);\n+      if (docInfo != null) {\n+        isExtern = !docInfo.isInline() && !\"\".equals(docInfo.getFilename());\n+        isExtern |= NodeUtil.isFromTypeSummary(n, docInfo.getUnparsedParameterDocs());\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      ObjectType thisType = functionType.getTypeOfThis();\n+      if (thisType != null) {\n+        Node parent = n.getParent();\n+        if (parent.isGetProp() || parent.isGetElem()) {\n+          ensureTyped(t, parent.getFirstChild(), thisType);\n+        } else {\n+          report(t, n, FUNCTION_CALL_BAD_THIS, childType.toString());\n+        }\n+      } else if (n.getParent().isCall() && n.getParent().getFirstChild() == n &&\n+                 !functionType.isConstructor()) {\n+        report(t, n, FUNCTION_CALL_NO_ARGS, childType.toString());\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      ensureTyped(t, n, functionType.getReturnType());\n+    } else {\n+      ensureTyped(t, n);\n+    }\n+\n+    // TODO(b/112188110): Add something to check for calls of RegExp objects,\n+    // which is not supported by IE. Either say something about the return type\n+    // or warn about the non-portability of the call or both.\n+  }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}