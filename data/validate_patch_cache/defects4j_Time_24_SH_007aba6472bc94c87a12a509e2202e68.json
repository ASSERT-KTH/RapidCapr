{
    "patch": "for (int i = 0; i < count; i++) {\n    int iType = savedFields[i].iType;\n    if (iType == YEAR_TYPE ||\n        iType == YEAR_OF_ERA_TYPE ||\n        iType == WEEKYEAR_TYPE) {\n        int year = (int) savedFields[i].set(millis, resetFields);\n        int weekyear = calculateWeekyear(year);\n        if (iType == YEAR_TYPE) {\n            millis = setYear(millis, weekyear);\n        } else if (iType == YEAR_OF_ERA_TYPE) {\n            millis = setYearOfEra(millis, weekyear >= 1 ? weekyear : 1);\n        } else {\n            millis = setWeekyear(millis, weekyear);\n        }\n        continue;\n    }\n    millis = savedFields[i].set(millis, resetFields);\n}\n\nprivate int calculateWeekyear(int year) {\n    if (iChrono == null || iChrono == ISOChronology.getInstanceUTC()) {\n        return ISOWeekOfWeekyear.getWeekyear(year, iMillis);\n    } else {\n        int firstWeekInYear = iChrono.weeksInYear(year);\n        int lastWeekInYear = iChrono.weeksInYear(year - 1);\n        int weekOfWeekYear = iChrono.weekOfWeekyear().get(iMillis);\n        if (weekOfWeekYear == firstWeekInYear + 1 && firstWeekInYear > lastWeekInYear) {\n            return year;\n        } else if (weekOfWeekYear == lastWeekInYear && firstWeekInYear < lastWeekInYear) {\n            return year - 1;\n        }\n        return year;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..d4726b91 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,40 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    int iType = savedFields[i].iType;\n+    if (iType == YEAR_TYPE ||\n+        iType == YEAR_OF_ERA_TYPE ||\n+        iType == WEEKYEAR_TYPE) {\n+        int year = (int) savedFields[i].set(millis, resetFields);\n+        int weekyear = calculateWeekyear(year);\n+        if (iType == YEAR_TYPE) {\n+            millis = setYear(millis, weekyear);\n+        } else if (iType == YEAR_OF_ERA_TYPE) {\n+            millis = setYearOfEra(millis, weekyear >= 1 ? weekyear : 1);\n+        } else {\n+            millis = setWeekyear(millis, weekyear);\n+        }\n+        continue;\n+    }\n+    millis = savedFields[i].set(millis, resetFields);\n+}\n+\n+private int calculateWeekyear(int year) {\n+    if (iChrono == null || iChrono == ISOChronology.getInstanceUTC()) {\n+        return ISOWeekOfWeekyear.getWeekyear(year, iMillis);\n+    } else {\n+        int firstWeekInYear = iChrono.weeksInYear(year);\n+        int lastWeekInYear = iChrono.weeksInYear(year - 1);\n+        int weekOfWeekYear = iChrono.weekOfWeekyear().get(iMillis);\n+        if (weekOfWeekYear == firstWeekInYear + 1 && firstWeekInYear > lastWeekInYear) {\n+            return year;\n+        } else if (weekOfWeekYear == lastWeekInYear && firstWeekInYear < lastWeekInYear) {\n+            return year - 1;\n+        }\n+        return year;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}