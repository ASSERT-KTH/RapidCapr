{
    "patch": "    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (!(resolvedTypeOfThis instanceof ObjectType || resolvedTypeOfThis instanceof NamedType)) {\n      t.report(JSError.make(n, TYPE_BEFORE_PROP, \"Expected an object or named type, but found {0}\", resolvedTypeOfThis.toString()));\n      resolvedTypeOfThis = JSType.UNKNOWN;\n    }\n    if (resolvedTypeOfThis instanceof ObjectType) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else { // resolvedTypeOfThis is a NamedType, so try resolving it\n      FunctionType resolved = resolveFunctionTypeFromName(((NamedType) resolvedTypeOfThis), t, scope);\n      if (resolved != null) {\n        if (!(resolved.getTypeOfThis() == null || resolved.getTypeOfThis() instanceof ObjectType)) {\n          t.report(JSError.make(n, TYPE_BEFORE_PROP, \"Expected an object type for the 'this' type of \" + ((NamedType) resolvedTypeOfThis).getName() + \" but found \" + resolved.getTypeOfThis().toString()));\n        }\n        typeOfThis = (ObjectType) resolved.getTypeOfThis();\n      } else {\n        typeOfThis = ObjectType.makeObjectType(objectTypeRegistry, objectPrototype);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..217e1213 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,24 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (!(resolvedTypeOfThis instanceof ObjectType || resolvedTypeOfThis instanceof NamedType)) {\n+      t.report(JSError.make(n, TYPE_BEFORE_PROP, \"Expected an object or named type, but found {0}\", resolvedTypeOfThis.toString()));\n+      resolvedTypeOfThis = JSType.UNKNOWN;\n+    }\n+    if (resolvedTypeOfThis instanceof ObjectType) {\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n+    } else { // resolvedTypeOfThis is a NamedType, so try resolving it\n+      FunctionType resolved = resolveFunctionTypeFromName(((NamedType) resolvedTypeOfThis), t, scope);\n+      if (resolved != null) {\n+        if (!(resolved.getTypeOfThis() == null || resolved.getTypeOfThis() instanceof ObjectType)) {\n+          t.report(JSError.make(n, TYPE_BEFORE_PROP, \"Expected an object type for the 'this' type of \" + ((NamedType) resolvedTypeOfThis).getName() + \" but found \" + resolved.getTypeOfThis().toString()));\n+        }\n+        typeOfThis = (ObjectType) resolved.getTypeOfThis();\n+      } else {\n+        typeOfThis = ObjectType.makeObjectType(objectTypeRegistry, objectPrototype);\n+      }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}