{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      JSDocInfo jsDocFunction = getFunctionJsDocInfo(n);\n      if (jsDocFunction != null &&\n          (jsDocFunction.isConstructor() ||\n              jsDocFunction.isInterface() ||\n              jsDocFunction.hasThisType() ||\n              jsDocFunction.isOverride())) {\n        return false;\n      }\n\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n        return false;\n      }\n\n      if (parent.getSecondChild() != n) {\n        if (n.getFirstChild().getType() == Token.NAME) {\n          String name = n.getFirstChild().getString();\n          if (name != null && name.endsWith(LI_SUFFIX)) {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9d730ead 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,68 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      JSDocInfo jsDocFunction = getFunctionJsDocInfo(n);\n+      if (jsDocFunction != null &&\n+          (jsDocFunction.isConstructor() ||\n+              jsDocFunction.isInterface() ||\n+              jsDocFunction.hasThisType() ||\n+              jsDocFunction.isOverride())) {\n+        return false;\n+      }\n+\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+\n+          // object literal keys\n+          pType == Token.STRING ||\n+          pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      if (parent.getSecondChild() != n) {\n+        if (n.getFirstChild().getType() == Token.NAME) {\n+          String name = n.getFirstChild().getString();\n+          if (name != null && name.endsWith(LI_SUFFIX)) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = lhs.getNext();\n+\n+      if (n == lhs) {\n+        // Always traverse the left side of the assignment. To handle\n+        // nested assignments properly (e.g., (a = this).property = c;),\n+        // assignLhsChild should not be overridden.\n+        if (assignLhsChild == null) {\n+          assignLhsChild = lhs;\n+        }\n+      } else {\n+        if (NodeUtil.isGet(lhs)) {\n+          if (lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+          Node llhs = lhs.getFirstChild();\n+          if (llhs.getType() == Token.GETPROP &&\n+              llhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}