{
    "patch": "private String getRemainingJSDocLine() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    int nextChar = stream.read();\n    while (nextChar != -1 && nextChar != '\\n' && nextChar != '\\r') {\n        sb.append((char) nextChar);\n        nextChar = stream.read();\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..b0bec3cc 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,15 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine() throws IOException {\n+    StringBuilder sb = new StringBuilder();\n+    int nextChar = stream.read();\n+    while (nextChar != -1 && nextChar != '\\n' && nextChar != '\\r') {\n+        sb.append((char) nextChar);\n+        nextChar = stream.read();\n+    }\n+    return sb.toString();\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}