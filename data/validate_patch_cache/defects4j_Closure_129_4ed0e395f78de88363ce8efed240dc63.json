{
    "patch": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n      \n      // Keep track of of the \"this\" context of a call.  A call without an\n      // explicit \"this\" is a free call.\n      Node firstNode = n.getFirstChild();\n      if (NodeUtil.isAstNodeType(firstNode, Token.CAST)) {\n        firstNode = firstNode.getFirstChild();\n      }\n      \n      if (NodeUtil.isGet(firstNode)) {\n        Node objNode = firstNode.getFirstChild();\n        if (objNode != null) {\n          switch (objNode.getType()) {\n            case Token.NAME:\n              if (\"this\".equals(objNode.getString())) {\n                n.putBooleanProp(Node.EXPLICIT_CALL_WITH_THIS, true);\n              }\n              break;\n            case Token.GETPROP:\n              if (NodeUtil.isGet(objNode)) {\n                Node nameNode = objNode.getLastChild();\n                if (\"prototype\".equals(nameNode.getString())) {\n                  n.putBooleanProp(Node.EXPLICIT_CALL_WITH_NON_THIS = true);\n                }\n              }\n              break;\n            case Token.THIS:\n              n.putBooleanProp(Node.EXPLICIT_CALL_WITH_THIS, true);\n              break;\n          }\n        }\n      } else {\n        n.putBooleanProp(Node.FREE_CALL);\n        if (firstNode.isName() && \"eval\".equals(firstNode.getString())) {\n          firstNode.putBooleanProp(Node.DIRECT_EVAL, true);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..07f2bc6d 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,45 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    private void annotateCalls(Node n) {\n+      Preconditions.checkState(n.isCall());\n+      \n+      // Keep track of of the \"this\" context of a call.  A call without an\n+      // explicit \"this\" is a free call.\n+      Node firstNode = n.getFirstChild();\n+      if (NodeUtil.isAstNodeType(firstNode, Token.CAST)) {\n+        firstNode = firstNode.getFirstChild();\n+      }\n+      \n+      if (NodeUtil.isGet(firstNode)) {\n+        Node objNode = firstNode.getFirstChild();\n+        if (objNode != null) {\n+          switch (objNode.getType()) {\n+            case Token.NAME:\n+              if (\"this\".equals(objNode.getString())) {\n+                n.putBooleanProp(Node.EXPLICIT_CALL_WITH_THIS, true);\n+              }\n+              break;\n+            case Token.GETPROP:\n+              if (NodeUtil.isGet(objNode)) {\n+                Node nameNode = objNode.getLastChild();\n+                if (\"prototype\".equals(nameNode.getString())) {\n+                  n.putBooleanProp(Node.EXPLICIT_CALL_WITH_NON_THIS = true);\n+                }\n+              }\n+              break;\n+            case Token.THIS:\n+              n.putBooleanProp(Node.EXPLICIT_CALL_WITH_THIS, true);\n+              break;\n+          }\n+        }\n+      } else {\n+        n.putBooleanProp(Node.FREE_CALL);\n+        if (firstNode.isName() && \"eval\".equals(firstNode.getString())) {\n+          firstNode.putBooleanProp(Node.DIRECT_EVAL, true);\n+        }\n+      }\n+    }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}