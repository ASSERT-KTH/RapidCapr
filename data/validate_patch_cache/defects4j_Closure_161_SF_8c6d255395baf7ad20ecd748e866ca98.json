{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target or DELETE operand, the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    //    delete [][0]\n\n    if (parent.getType() == Token.ASSIGN ||\n        parent.getType() == Token.ASSIGN_ADD ||\n        parent.getType() == Token.ASSIGN_SUB ||\n        parent.getType() == Token.ASSIGN_MUL ||\n        parent.getType() == Token.ASSIGN_DIV ||\n        parent.getType() == Token.ASSIGN_MOD ||\n        parent.getType() == Token.ASSIGN_BITOR ||\n        parent.getType() == Token.ASSIGN_BITXOR ||\n        parent.getType() == Token.ASSIGN_BITAND ||\n        parent.getType() == Token.INC ||\n        parent.getType() == Token.DEC ||\n        parent.getType() == Token.DELPROP)\n    {\n      return n;\n    }\n\n    if (right.getType() != Token.NUMBER || (left.getType() == Token.NAME && \"NaN\".equals(left.getString()))) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods. Other times, the\n      // literal is NaN, which is not a valid array index.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..e9ceb0d3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,16 +1274,33 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n+    // If GETPROP/GETELEM is used as assignment target or DELETE operand, the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    //    delete [][0]\n+\n+    if (parent.getType() == Token.ASSIGN ||\n+        parent.getType() == Token.ASSIGN_ADD ||\n+        parent.getType() == Token.ASSIGN_SUB ||\n+        parent.getType() == Token.ASSIGN_MUL ||\n+        parent.getType() == Token.ASSIGN_DIV ||\n+        parent.getType() == Token.ASSIGN_MOD ||\n+        parent.getType() == Token.ASSIGN_BITOR ||\n+        parent.getType() == Token.ASSIGN_BITXOR ||\n+        parent.getType() == Token.ASSIGN_BITAND ||\n+        parent.getType() == Token.INC ||\n+        parent.getType() == Token.DEC ||\n+        parent.getType() == Token.DELPROP)\n+    {\n+      return n;\n+    }\n \n-    if (right.getType() != Token.NUMBER) {\n+    if (right.getType() != Token.NUMBER || (left.getType() == Token.NAME && \"NaN\".equals(left.getString()))) {\n       // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n+      // arrays, or strings to index into array methods. Other times, the\n+      // literal is NaN, which is not a valid array index.\n       return n;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}