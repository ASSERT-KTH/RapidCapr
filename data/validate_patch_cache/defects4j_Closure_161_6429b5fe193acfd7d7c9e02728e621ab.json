{
    "patch": "  \tprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n\t\tNode parent = n.getParent();\n\t\t// If GETPROP/GETELEM is used as assignment target the array literal is\n\t\t// acting as a temporary we can't fold it here:\n\t\t// \"[][0] += 1\"\n\n\t\tif (right.getType() != Token.NUMBER) {\n\t\t\t// Sometimes people like to use complex expressions to index into\n\t\t\t// arrays, or strings to index into array methods.\n\t\t\treturn n;\n\t\t}\n\n\t\tdouble index = right.getDouble();\n\t\tint intIndex = (int) index;\n\t\tif (intIndex != index) {\n\t\t\terror(INVALID_GETELEM_INDEX_ERROR, right);\n\t\t\treturn n;\n\t\t}\n\n\t\tif(intIndex >= getArrayLength(left)) {\n\t\t\terror(INDEX_OUT_OF_BOUNDS_ERROR, right);\n\t\t\treturn n;\n\t\t}\n\n\t\tNode elem = left.getFirstChild();\n\t\tfor (int i = 0; elem != null && i < intIndex; i++) {\n\t\t\telem = elem.getNext();\n\t\t}\n\n\t\tif (elem == null) {\n\t\t\terror(INDEX_OUT_OF_BOUNDS_ERROR, right);\n\t\t\treturn n;\n\t\t}\n\n\t\tif (elem.getType() == Token.EMPTY) {\n\t\t\telem = NodeUtil.newUndefinedNode(elem);\n\t\t} else {\n\t\t\tleft.removeChild(elem);\n\t\t}\n\n\t\t// Replace the entire GETELEM with the value\n\t\tn.getParent().replaceChild(n, elem);\n\t\treportCodeChange();\n\t\treturn elem;\n\t}\n\n\tprivate int getArrayLength(Node node) {\n\t\tif(!node.isArrayLit()) {\n\t\t\treturn -1;\n\t\t}\n\t\t\n\t\tint length = 0;\n\t\tNode current = node.getFirstChild();\n\t\twhile(current != null) {\n\t\t\tlength++;\n\t\t\tcurrent = current.getNext();\n\t\t}\n\t\t\n\t\treturn length;\n\t}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..dc7a917b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,52 +1274,66 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+  \tprivate Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+\t\tNode parent = n.getParent();\n+\t\t// If GETPROP/GETELEM is used as assignment target the array literal is\n+\t\t// acting as a temporary we can't fold it here:\n+\t\t// \"[][0] += 1\"\n+\n+\t\tif (right.getType() != Token.NUMBER) {\n+\t\t\t// Sometimes people like to use complex expressions to index into\n+\t\t\t// arrays, or strings to index into array methods.\n+\t\t\treturn n;\n+\t\t}\n+\n+\t\tdouble index = right.getDouble();\n+\t\tint intIndex = (int) index;\n+\t\tif (intIndex != index) {\n+\t\t\terror(INVALID_GETELEM_INDEX_ERROR, right);\n+\t\t\treturn n;\n+\t\t}\n+\n+\t\tif(intIndex >= getArrayLength(left)) {\n+\t\t\terror(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+\t\t\treturn n;\n+\t\t}\n+\n+\t\tNode elem = left.getFirstChild();\n+\t\tfor (int i = 0; elem != null && i < intIndex; i++) {\n+\t\t\telem = elem.getNext();\n+\t\t}\n+\n+\t\tif (elem == null) {\n+\t\t\terror(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+\t\t\treturn n;\n+\t\t}\n+\n+\t\tif (elem.getType() == Token.EMPTY) {\n+\t\t\telem = NodeUtil.newUndefinedNode(elem);\n+\t\t} else {\n+\t\t\tleft.removeChild(elem);\n+\t\t}\n+\n+\t\t// Replace the entire GETELEM with the value\n+\t\tn.getParent().replaceChild(n, elem);\n+\t\treportCodeChange();\n+\t\treturn elem;\n+\t}\n+\n+\tprivate int getArrayLength(Node node) {\n+\t\tif(!node.isArrayLit()) {\n+\t\t\treturn -1;\n+\t\t}\n+\t\t\n+\t\tint length = 0;\n+\t\tNode current = node.getFirstChild();\n+\t\twhile(current != null) {\n+\t\t\tlength++;\n+\t\t\tcurrent = current.getNext();\n+\t\t}\n+\t\t\n+\t\treturn length;\n+\t}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}