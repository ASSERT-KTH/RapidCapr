{
    "patch": "    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        if (lastArg.hasChildren()) {\n          // We can't just set the type to missing here, because if this\n          // is a recursive function then the entire AST for that function\n          // will be missing. Recursion isn't all that common, though.\n          Node value = lastArg.getFirstChild();\n          value.detach();\n          lastArg.getParent().addChildToFront(value);\n        } else {\n          argList.removeChild(lastArg);\n        }\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..273d43c6 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,26 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        if (lastArg.hasChildren()) {\n+          // We can't just set the type to missing here, because if this\n+          // is a recursive function then the entire AST for that function\n+          // will be missing. Recursion isn't all that common, though.\n+          Node value = lastArg.getFirstChild();\n+          value.detach();\n+          lastArg.getParent().addChildToFront(value);\n+        } else {\n+          argList.removeChild(lastArg);\n+        }\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}