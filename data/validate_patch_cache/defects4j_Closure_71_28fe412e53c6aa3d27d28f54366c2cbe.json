{
    "patch": "      boolean isOverride = false;\n      Node value = getprop.getNext();\n      if (parent.getType() == Token.ASSIGN &&\n          value != null &&\n          value.getType() != Token.FUNCTION) {\n        isOverride = true;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..88bf6777 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      Node value = getprop.getNext();\n+      if (parent.getType() == Token.ASSIGN &&\n+          value != null &&\n+          value.getType() != Token.FUNCTION) {\n+        isOverride = true;\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}