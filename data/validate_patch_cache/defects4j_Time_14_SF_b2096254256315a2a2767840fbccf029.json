{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        int[] newValues;\n        if (valueToAdd > 0) {\n            newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n        } else {\n            newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n            // check before/after and adjust\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                int newValue = newValues[i];\n                if (newValue != values[i]) {\n                    instant = field.set(instant, newValue);\n                    // rollback the change and try next biggest\n                    int nextFieldIndex = i + 1;\n                    while (nextFieldIndex < isize) {\n                        DurationFieldType type = partial.getFieldType(nextFieldIndex).getDurationType();\n                        if (type.equals(DurationFieldType.months()) ||\n                                type.equals(DurationFieldType.years()) ||\n                                type.equals(DurationFieldType.weekyears()) ||\n                                type.equals(DurationFieldType.centuries()) ||\n                                type.equals(DurationFieldType.eras())) {\n                            instant = partial.getFieldType(nextFieldIndex).getField(iChronology).set(instant, partial.getValue(nextFieldIndex));\n                            newValues = iChronology.add(partial, nextFieldIndex, iChronology.get(partial, instant), 1);\n                            valueToAdd++;\n                            i = -1;\n                            break;\n                        }\n                        nextFieldIndex++;\n                    }\n                    if (i < 0) {\n                        continue;\n                    }\n                }\n                instant = field.set(instant, newValue);\n            }\n            int[] valuesUntilField = Arrays.copyOf(newValues, fieldIndex + 1);\n            int[] valuesFromField = Arrays.copyOfRange(newValues, fieldIndex + 1, newValues.length);\n            for (int i = 0, isize = valuesFromField.length; i < isize; i++) {\n                DateTimeField field = partial.getFieldType(i + fieldIndex + 1).getField(iChronology);\n                if (valuesFromField[i] != newValues[i + fieldIndex + 1]) {\n                    int maxValue = field.getMaximumValue(instant);\n                    int minValue = field.getMinimumValue(instant);\n                    if (valuesFromField[i] > maxValue) {\n                        valuesFromField[i] = minValue;\n                    } else if (valuesFromField[i] < minValue) {\n                        valuesFromField[i] = maxValue;\n                    }\n                }\n                instant = field.set(instant, valuesFromField[i]);\n            }\n            newValues = new int[valuesUntilField.length + valuesFromField.length];\n            System.arraycopy(valuesUntilField, 0, newValues, 0, valuesUntilField.length);\n            System.arraycopy(valuesFromField, 0, newValues, valuesUntilField.length, valuesFromField.length);\n        }\n        return newValues;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..6ce5ba89 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,76 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        int[] newValues;\n+        if (valueToAdd > 0) {\n+            newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n+        } else {\n+            newValues = iChronology.add(partial, fieldIndex, values, valueToAdd);\n+            // check before/after and adjust\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+                int newValue = newValues[i];\n+                if (newValue != values[i]) {\n+                    instant = field.set(instant, newValue);\n+                    // rollback the change and try next biggest\n+                    int nextFieldIndex = i + 1;\n+                    while (nextFieldIndex < isize) {\n+                        DurationFieldType type = partial.getFieldType(nextFieldIndex).getDurationType();\n+                        if (type.equals(DurationFieldType.months()) ||\n+                                type.equals(DurationFieldType.years()) ||\n+                                type.equals(DurationFieldType.weekyears()) ||\n+                                type.equals(DurationFieldType.centuries()) ||\n+                                type.equals(DurationFieldType.eras())) {\n+                            instant = partial.getFieldType(nextFieldIndex).getField(iChronology).set(instant, partial.getValue(nextFieldIndex));\n+                            newValues = iChronology.add(partial, nextFieldIndex, iChronology.get(partial, instant), 1);\n+                            valueToAdd++;\n+                            i = -1;\n+                            break;\n+                        }\n+                        nextFieldIndex++;\n+                    }\n+                    if (i < 0) {\n+                        continue;\n+                    }\n+                }\n+                instant = field.set(instant, newValue);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int[] valuesUntilField = Arrays.copyOf(newValues, fieldIndex + 1);\n+            int[] valuesFromField = Arrays.copyOfRange(newValues, fieldIndex + 1, newValues.length);\n+            for (int i = 0, isize = valuesFromField.length; i < isize; i++) {\n+                DateTimeField field = partial.getFieldType(i + fieldIndex + 1).getField(iChronology);\n+                if (valuesFromField[i] != newValues[i + fieldIndex + 1]) {\n+                    int maxValue = field.getMaximumValue(instant);\n+                    int minValue = field.getMinimumValue(instant);\n+                    if (valuesFromField[i] > maxValue) {\n+                        valuesFromField[i] = minValue;\n+                    } else if (valuesFromField[i] < minValue) {\n+                        valuesFromField[i] = maxValue;\n+                    }\n+                }\n+                instant = field.set(instant, valuesFromField[i]);\n+            }\n+            newValues = new int[valuesUntilField.length + valuesFromField.length];\n+            System.arraycopy(valuesUntilField, 0, newValues, 0, valuesUntilField.length);\n+            System.arraycopy(valuesFromField, 0, newValues, valuesUntilField.length, valuesFromField.length);\n         }\n+        return newValues;\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: no suitable method found for add(ReadablePartial,int,int[],int)",
    "test_result": "ERROR"
}