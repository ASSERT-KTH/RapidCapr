{
    "patch": "private static class TypePair {\n  final JSType typeA;\n  final JSType typeB;\n\n  TypePair(JSType a, JSType b) {\n    typeA = a;\n    typeB = b;\n  }\n\n  TypePair canonicalize() {\n    if (typeA == null) {\n      return new TypePair(typeB, null);\n    } else if (typeB == null) {\n      return this;\n    } else if (typeA.isSubtype(typeB)) {\n      return new TypePair(typeA, null);\n    } else if (typeB.isSubtype(typeA)) {\n      return new TypePair(typeB, null);\n    } else {\n      return this;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..cf280a84 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,29 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n-    if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n-    }\n+private static class TypePair {\n+  final JSType typeA;\n+  final JSType typeB;\n \n-    // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n+  TypePair(JSType a, JSType b) {\n+    typeA = a;\n+    typeB = b;\n+  }\n \n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n+  TypePair canonicalize() {\n+    if (typeA == null) {\n+      return new TypePair(typeB, null);\n+    } else if (typeB == null) {\n+      return this;\n+    } else if (typeA.isSubtype(typeB)) {\n+      return new TypePair(typeA, null);\n+    } else if (typeB.isSubtype(typeA)) {\n+      return new TypePair(typeB, null);\n+    } else {\n+      return this;\n     }\n-\n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n   }\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: TypePair has private access in JSType",
    "test_result": "ERROR"
}