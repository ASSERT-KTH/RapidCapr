{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n == null || !n.isName() || n.hasChildren() || !n.getParent().isVar()) {\n          continue;\n        }\n        String name = n.getString();\n        Var aliasVar = scope.getVar(name);\n        if (aliasVar == null || aliasVar.getInitialValue() == null \n            || !aliasVar.getInitialValue().isQualifiedName()) {\n          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n          continue;\n        }\n        aliases.put(name, aliasVar);\n        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n        transformation.addAlias(name, qualifiedName);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..3d7ad482 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -268,31 +268,23 @@ class ScopedAliases implements HotSwapCompilerPass {\n       compiler.report(t.makeError(n, error, arguments));\n       hasErrors = true;\n     }\n-\n     private void findAliases(NodeTraversal t) {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        if (n == null || !n.isName() || n.hasChildren() || !n.getParent().isVar()) {\n+          continue;\n         }\n+        String name = n.getString();\n+        Var aliasVar = scope.getVar(name);\n+        if (aliasVar == null || aliasVar.getInitialValue() == null \n+            || !aliasVar.getInitialValue().isQualifiedName()) {\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+          continue;\n         }\n+        aliases.put(name, aliasVar);\n+        String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+        transformation.addAlias(name, qualifiedName);\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}