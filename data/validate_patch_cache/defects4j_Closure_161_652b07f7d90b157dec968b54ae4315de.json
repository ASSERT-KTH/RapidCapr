{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int)index;\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null || elem.getType() == Token.EMPTY) {\n      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n      if (elem == null) {\n        left.addChildToBack(undefinedNode);\n      } else {\n        left.replaceChild(elem, undefinedNode);\n      }\n      elem = undefinedNode;\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..e91b720d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,13 +1274,8 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n@@ -1288,11 +1283,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+    int intIndex = (int)index;\n \n     if (intIndex < 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n@@ -1304,19 +1295,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       elem = elem.getNext();\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    if (elem == null || elem.getType() == Token.EMPTY) {\n+      Node undefinedNode = NodeUtil.newUndefinedNode(n);\n+      if (elem == null) {\n+        left.addChildToBack(undefinedNode);\n+      } else {\n+        left.replaceChild(elem, undefinedNode);\n+      }\n+      elem = undefinedNode;\n     } else {\n       left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}