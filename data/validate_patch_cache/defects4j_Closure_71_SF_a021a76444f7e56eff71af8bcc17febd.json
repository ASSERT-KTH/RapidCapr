{
    "patch": "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType == null) {\n      return;\n    }\n\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    boolean isOverride = parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    JSDocInfo docInfo = null;\n    JSDocInfo tempDocInfo = null;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      tempDocInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (tempDocInfo != null &&\n          tempDocInfo.getVisibility() != Visibility.INHERITED) {\n        if (isOverride) {\n          if (tempDocInfo.getVisibility() == Visibility.PRIVATE) {\n            // private properties can only be overriden within the same file.\n            compiler.report(\n                t.makeError(getprop, CheckJSDoc.PRIVATE_OVERRIDE,\n                    propertyName));\n            return;\n          }\n          // Check that the property can actually be overridden.\n          if (tempDocInfo.getVisibility() == Visibility.PROTECTED &&\n              currentClass == null) {\n            // invalid override attempt on a protected property.\n            compiler.report(\n                t.makeError(getprop, CheckJSDoc.INVALID_OVERRIDE,\n                    propertyName));\n            return;\n          }\n          // Check that the visibility of the override is the same as the\n          // visibility of the original property.\n          JSDocInfo overridingInfo = parent.getJSDocInfo();\n          Visibility overridingVisibility =\n              overridingInfo == null ?\n                  Visibility.INHERITED : overridingInfo.getVisibility();\n          if (!Visibility.validateVisibilityChange(\n              tempDocInfo.getVisibility(), overridingVisibility)) {\n            compiler.report(t.makeError(getprop, CheckJSDoc.INVALID_OVERRIDE,\n                propertyName));\n          }\n          break;\n        } else {\n          docInfo = tempDocInfo;\n          break;\n        }\n      }\n    }\n\n    if (docInfo == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    if (t.getInput().getName().equals(docInfo.getSourceFileName())) {\n      // Access is always allowed in the same file.\n      return;\n    }\n\n    Visibility visibility = docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType, getprop, t);\n\n    // are we trying to access a private or protected property?\n    if (visibility == Visibility.PRIVATE) {\n      if (currentClass == null ||\n          !ownerType.getDisplayName().equals(currentClass.getDisplayName())) {\n        String visibilityString = visibility.toString();\n        String targetType = ownerType.toString();\n        String typeString = validator.getReadableJSTypeName(\n            getprop.getFirstChild().getJSType(), true);\n        compiler.report(\n            t.makeError(getprop, CheckJSDoc.BAD_PRIVATE_PROPERTY_ACCESS,\n                propertyName, targetType, typeString));\n      }\n    } else if (visibility == Visibility.PROTECTED) {\n      if (currentClass == null ||\n          !currentClass.isSubclass(ownerType.getDisplayName())) {\n        String targetType;\n        if (ownerType instanceof FunctionType) {\n          targetType = \"Function\";\n        } else {\n          targetType = ownerType.toString();\n        }\n        compiler.report(\n            t.makeError(getprop, CheckJSDoc.BAD_PROTECTED_PROPERTY_ACCESS,\n                propertyName, targetType));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..24b790b4 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,99 +404,108 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n+private void checkPropertyVisibility(NodeTraversal t,\n       Node getprop, Node parent) {\n     ObjectType objectType =\n         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n-      }\n+    if (objectType == null) {\n+      return;\n+    }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n-      }\n+    // Is this a normal property access, or are we trying to override\n+    // an existing property?\n+    boolean isOverride = parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+    if (isOverride) {\n+      objectType = objectType.getImplicitPrototype();\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n-        }\n-      } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+    // Find the lowest property defined on a class with visibility\n+    // information.\n+    JSDocInfo docInfo = null;\n+    JSDocInfo tempDocInfo = null;\n+    for (; objectType != null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      tempDocInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (tempDocInfo != null &&\n+          tempDocInfo.getVisibility() != Visibility.INHERITED) {\n+        if (isOverride) {\n+          if (tempDocInfo.getVisibility() == Visibility.PRIVATE) {\n+            // private properties can only be overriden within the same file.\n+            compiler.report(\n+                t.makeError(getprop, CheckJSDoc.PRIVATE_OVERRIDE,\n+                    propertyName));\n             return;\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n+          // Check that the property can actually be overridden.\n+          if (tempDocInfo.getVisibility() == Visibility.PROTECTED &&\n+              currentClass == null) {\n+            // invalid override attempt on a protected property.\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+                t.makeError(getprop, CheckJSDoc.INVALID_OVERRIDE,\n+                    propertyName));\n+            return;\n+          }\n+          // Check that the visibility of the override is the same as the\n+          // visibility of the original property.\n+          JSDocInfo overridingInfo = parent.getJSDocInfo();\n+          Visibility overridingVisibility =\n+              overridingInfo == null ?\n+                  Visibility.INHERITED : overridingInfo.getVisibility();\n+          if (!Visibility.validateVisibilityChange(\n+              tempDocInfo.getVisibility(), overridingVisibility)) {\n+            compiler.report(t.makeError(getprop, CheckJSDoc.INVALID_OVERRIDE,\n+                propertyName));\n           }\n+          break;\n+        } else {\n+          docInfo = tempDocInfo;\n+          break;\n         }\n       }\n     }\n+\n+    if (docInfo == null) {\n+      // We couldn't find a visibility modifier; assume it's public.\n+      return;\n+    }\n+\n+    if (t.getInput().getName().equals(docInfo.getSourceFileName())) {\n+      // Access is always allowed in the same file.\n+      return;\n+    }\n+\n+    Visibility visibility = docInfo.getVisibility();\n+    JSType ownerType = normalizeClassType(objectType, getprop, t);\n+\n+    // are we trying to access a private or protected property?\n+    if (visibility == Visibility.PRIVATE) {\n+      if (currentClass == null ||\n+          !ownerType.getDisplayName().equals(currentClass.getDisplayName())) {\n+        String visibilityString = visibility.toString();\n+        String targetType = ownerType.toString();\n+        String typeString = validator.getReadableJSTypeName(\n+            getprop.getFirstChild().getJSType(), true);\n+        compiler.report(\n+            t.makeError(getprop, CheckJSDoc.BAD_PRIVATE_PROPERTY_ACCESS,\n+                propertyName, targetType, typeString));\n+      }\n+    } else if (visibility == Visibility.PROTECTED) {\n+      if (currentClass == null ||\n+          !currentClass.isSubclass(ownerType.getDisplayName())) {\n+        String targetType;\n+        if (ownerType instanceof FunctionType) {\n+          targetType = \"Function\";\n+        } else {\n+          targetType = ownerType.toString();\n+        }\n+        compiler.report(\n+            t.makeError(getprop, CheckJSDoc.BAD_PROTECTED_PROPERTY_ACCESS,\n+                propertyName, targetType));\n+      }\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}