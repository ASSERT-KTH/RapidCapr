{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    final List<Node> referencedArgs = Lists.newLinkedList();\n    // Look for uses of all the arguments\n    checkArgumentUsage(fnScope, referenced, referencedArgs, function, true);\n    // Strip unreferenced args off the end of the function declaration.\n    Node lastArg;\n    while ((lastArg = argList.getLastChild()) != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referencedArgs.contains(lastArg)) {\n        argList.removeChild(lastArg);\n        compiler.reportCodeChange();\n      } else {\n        break;\n      }\n    }\n\n    // If any remaining argument nodes have names that are\n    // invalid identifiers or duplicates of the names of variables\n    // declared inside the function, we rename them here\n    checkAndRenumberParameters(fnScope, function);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..78a129ba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,36 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    final List<Node> referencedArgs = Lists.newLinkedList();\n+    // Look for uses of all the arguments\n+    checkArgumentUsage(fnScope, referenced, referencedArgs, function, true);\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node lastArg;\n+    while ((lastArg = argList.getLastChild()) != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referencedArgs.contains(lastArg)) {\n+        argList.removeChild(lastArg);\n+        compiler.reportCodeChange();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    // If any remaining argument nodes have names that are\n+    // invalid identifiers or duplicates of the names of variables\n+    // declared inside the function, we rename them here\n+    checkAndRenumberParameters(fnScope, function);\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}