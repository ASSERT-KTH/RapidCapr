{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node child = n.getFirstChild();\n    if (child.getJSType() == null || !child.getJSType().isFunctionType()) {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n      FunctionType constructorType = child.getJSType().toMaybeFunctionType();\n      if (constructorType.isConstructor()) {\n        JSType instanceType = constructorType.getInstanceType();\n        if (instanceType == null) {\n          n.setJSType(getNativeType(UNKNOWN_TYPE));\n        } else {\n          n.setJSType(instanceType);\n        }\n      }\n    }\n    for (Node argument = child.getNext(); argument != null; argument = argument.getNext()) {\n      scope = traverse(argument, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..0740a0de 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,33 +1031,23 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+    Node child = n.getFirstChild();\n+    if (child.getJSType() == null || !child.getJSType().isFunctionType()) {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+      FunctionType constructorType = child.getJSType().toMaybeFunctionType();\n+      if (constructorType.isConstructor()) {\n+        JSType instanceType = constructorType.getInstanceType();\n+        if (instanceType == null) {\n+          n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        } else {\n+          n.setJSType(instanceType);\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+    for (Node argument = child.getNext(); argument != null; argument = argument.getNext()) {\n+      scope = traverse(argument, scope);\n     }\n     return scope;\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}