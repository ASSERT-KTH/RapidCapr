{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        Chronology chrono = selectChronology(instant.getChronology());\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (bucket.restoreState() != null) {\n            DateTimeParserBucket.State state = bucket.restoreState();\n            if (iOffsetParsed) {\n                int parsedOffset = state.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                if (iZone != null) {\n                    parsedZone = iZone;\n                }\n                state.setZone(parsedZone);\n            } else if (state.getZone() != null) {\n                if (iZone != null) {\n                    state.getZone().setFixedSavings(iZone.getStandardOffset());\n                }\n            }\n            instant.setMillis(state.computeMillis());\n            instant.setChronology(state.getChronology());\n            instant.setZone(state.getZone());\n        } else {\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iOffsetParsed) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                if (iZone != null) {\n                    parsedZone = iZone;\n                }\n                chrono = chrono.withZone(parsedZone);\n                instant.setChronology(chrono);\n            } else if (bucket.getZone() != null) {\n                if (iZone != null) {\n                    bucket.getZone().setFixedSavings(iZone.getStandardOffset());\n                }\n                instant.setChronology(bucket.getChronology());\n                instant.setZone(bucket.getZone());\n            } else if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        \n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..4c3a7f08 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -700,26 +700,49 @@ public class DateTimeFormatter {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n         \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n+        Chronology chrono = selectChronology(instant.getChronology());\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (bucket.restoreState() != null) {\n+            DateTimeParserBucket.State state = bucket.restoreState();\n+            if (iOffsetParsed) {\n+                int parsedOffset = state.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                if (iZone != null) {\n+                    parsedZone = iZone;\n+                }\n+                state.setZone(parsedZone);\n+            } else if (state.getZone() != null) {\n+                if (iZone != null) {\n+                    state.getZone().setFixedSavings(iZone.getStandardOffset());\n+                }\n+            }\n+            instant.setMillis(state.computeMillis());\n+            instant.setChronology(state.getChronology());\n+            instant.setZone(state.getZone());\n+        } else {\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iOffsetParsed) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                if (iZone != null) {\n+                    parsedZone = iZone;\n+                }\n+                chrono = chrono.withZone(parsedZone);\n+                instant.setChronology(chrono);\n+            } else if (bucket.getZone() != null) {\n+                if (iZone != null) {\n+                    bucket.getZone().setFixedSavings(iZone.getStandardOffset());\n+                }\n+                instant.setChronology(bucket.getChronology());\n+                instant.setZone(bucket.getZone());\n+            } else if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n+        \n         return newPos;\n     }\n ",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(Chronology,Locale,Integer,int)",
    "test_result": "ERROR"
}