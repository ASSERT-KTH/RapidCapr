{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal (first estimate).\n    int offsetLocal = getOffset(instantLocal);\n\n    // Adjust instantLocal using the estimate and recalculate the offset.\n    long instantAdjusted = instantLocal - offsetLocal;\n    int offsetAdjusted = getOffset(instantAdjusted);\n\n    // If the offsets differ, we must be near a DST boundary.\n    if (offsetLocal != offsetAdjusted) {\n        // We need to ensure that time is always after the DST gap.\n        // This happens naturally for positive offsets, but not for negative.\n        if ((offsetLocal - offsetAdjusted) < 0) {\n            // If we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition.\n\n            // Check whether there's a next transition after instantLocal\n            // that's different from instantAdjusted.\n            long nextLocal = nextTransition(instantAdjusted);\n            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            }\n        } else {\n            // If we just return offsetAdjusted then the time is pushed\n            // forward beyond the transition, whereas it should stay\n            // at or before the transition.\n\n            // Check whether there's a previous transition before instantLocal\n            // that's different from instantAdjusted.\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n            if (prevLocal >= 0 && prevLocal != prevAdjusted) {\n                return getOffset(prevLocal);\n            }\n        }\n    } else if (offsetLocal > 0) {\n        // We need to ensure that time is always after the DST gap.\n        // This happens naturally for positive offsets, but not for negative.\n\n        // Check whether there's a previous transition before instantAdjusted\n        // that's in the overlap period.\n        long prev = previousTransition(instantAdjusted);\n        if (prev >= 0) {\n            int offsetPrev = getOffset(prev);\n            int diff = offsetPrev - offsetLocal;\n            long next = nextTransition(prev);\n            if (next == instantAdjusted && diff >= 0 ||\n                instantAdjusted - prev <= diff) {\n                return offsetPrev;\n            }\n        }\n    }\n\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..f9b9cfc9 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,39 +877,64 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at instantLocal (first estimate).\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // Adjust instantLocal using the estimate and recalculate the offset.\n+    long instantAdjusted = instantLocal - offsetLocal;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    // If the offsets differ, we must be near a DST boundary.\n+    if (offsetLocal != offsetAdjusted) {\n+        // We need to ensure that time is always after the DST gap.\n+        // This happens naturally for positive offsets, but not for negative.\n+        if ((offsetLocal - offsetAdjusted) < 0) {\n+            // If we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition.\n+\n+            // Check whether there's a next transition after instantLocal\n+            // that's different from instantAdjusted.\n+            long nextLocal = nextTransition(instantAdjusted);\n+            long nextAdjusted = nextTransition(instantLocal - offsetLocal + 1);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        } else {\n+            // If we just return offsetAdjusted then the time is pushed\n+            // forward beyond the transition, whereas it should stay\n+            // at or before the transition.\n+\n+            // Check whether there's a previous transition before instantLocal\n+            // that's different from instantAdjusted.\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+            if (prevLocal >= 0 && prevLocal != prevAdjusted) {\n+                return getOffset(prevLocal);\n+            }\n+        }\n+    } else if (offsetLocal > 0) {\n+        // We need to ensure that time is always after the DST gap.\n+        // This happens naturally for positive offsets, but not for negative.\n+\n+        // Check whether there's a previous transition before instantAdjusted\n+        // that's in the overlap period.\n+        long prev = previousTransition(instantAdjusted);\n+        if (prev >= 0) {\n+            int offsetPrev = getOffset(prev);\n+            int diff = offsetPrev - offsetLocal;\n+            long next = nextTransition(prev);\n+            if (next == instantAdjusted && diff >= 0 ||\n+                instantAdjusted - prev <= diff) {\n+                return offsetPrev;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    return offsetAdjusted;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}