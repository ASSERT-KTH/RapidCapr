{
    "patch": "        private void readTypeVariables() {\n            for (Type type : typeVariable.getBounds()) {\n                registerTypeVariablesOn(type);\n            }\n            Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n            if (actualTypeArguments.length > 0 && actualTypeArguments[0] instanceof TypeVariable) {\n                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) actualTypeArguments[0]));\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..21fe76391 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,15 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+        private void readTypeVariables() {\n+            for (Type type : typeVariable.getBounds()) {\n+                registerTypeVariablesOn(type);\n+            }\n+            Type[] actualTypeArguments = typeVariable.getActualTypeArguments();\n+            if (actualTypeArguments.length > 0 && actualTypeArguments[0] instanceof TypeVariable) {\n+                registerTypeVariablesOn(getActualTypeArgumentFor((TypeVariable<?>) actualTypeArguments[0]));\n+            }\n+        }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}