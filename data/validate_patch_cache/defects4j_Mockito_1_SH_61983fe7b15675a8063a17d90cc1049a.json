{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nint argCount = rawArguments.length;\nfor (int i = 0; i < matchers.size(); i++) {\n    Matcher m = matchers.get(i);\n    if (m instanceof CapturesArguments) {\n        Object arg;\n        if (i < argCount) {\n            arg = rawArguments[i];\n            if(isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n                Object varArg = arg;\n                if (varArg != null && varArg.getClass().isArray()) {\n                    int varArgLength = Array.getLength(varArg);\n                    Object[] varArgArray = new Object[varArgLength];\n                    for (int j = 0; j < varArgLength; j++) {\n                        varArgArray[j] = Array.get(varArg, j);\n                    }\n                    arg = varArgArray;\n                } else {\n                    arg = new Object[]{varArg};\n                }\n            }\n        } else {\n            arg = null;\n        }\n        ((CapturesArguments) m).captureFrom(arg);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..4c6fa79ab 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,33 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+int argCount = rawArguments.length;\n+for (int i = 0; i < matchers.size(); i++) {\n+    Matcher m = matchers.get(i);\n+    if (m instanceof CapturesArguments) {\n+        Object arg;\n+        if (i < argCount) {\n+            arg = rawArguments[i];\n+            if(isVariableArgument(invocation, i) && isVarargMatcher(m)) {\n+                Object varArg = arg;\n+                if (varArg != null && varArg.getClass().isArray()) {\n+                    int varArgLength = Array.getLength(varArg);\n+                    Object[] varArgArray = new Object[varArgLength];\n+                    for (int j = 0; j < varArgLength; j++) {\n+                        varArgArray[j] = Array.get(varArg, j);\n+                    }\n+                    arg = varArgArray;\n+                } else {\n+                    arg = new Object[]{varArg};\n+                }\n+            }\n+        } else {\n+            arg = null;\n+        }\n+        ((CapturesArguments) m).captureFrom(arg);\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}