{
    "patch": "```\nret = (other instanceof Complex) && ((Complex) other).real == this.real && ((Complex) other).imaginary == this.imaginary && ((Complex) other).isNaN() == this.isNaN();\n``` \nThis line compares the real and imaginary parts of the current object with those of the other object and also checks if both objects have the same NaN value.",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..749d0e2d5 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,10 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+```\n+ret = (other instanceof Complex) && ((Complex) other).real == this.real && ((Complex) other).imaginary == this.imaginary && ((Complex) other).isNaN() == this.isNaN();\n+``` \n+This line compares the real and imaginary parts of the current object with those of the other object and also checks if both objects have the same NaN value.\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}