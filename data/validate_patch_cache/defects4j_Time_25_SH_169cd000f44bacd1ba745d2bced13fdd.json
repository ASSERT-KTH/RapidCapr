{
    "patch": "                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    \n                    // fix start: if both offsets change, choose the bigger one\n                    if (offsetLocal < offsetAdjusted) {\n                        int biggerOffset = offsetAdjusted;\n                        long nextBigger = nextAdjusted;\n                        int smallerOffset = offsetLocal;\n                        long nextSmaller = nextLocal;                        \n                    } else {\n                        int biggerOffset = offsetLocal;\n                        long nextBigger = nextLocal;\n                        int smallerOffset = offsetAdjusted;\n                        long nextSmaller = nextAdjusted;\n                    } // fix end\n                    \n                    if (nextBigger != nextSmaller) { // use nextBigger and biggerOffset\n                        return biggerOffset; \n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1fd1ab59 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    \n+                    // fix start: if both offsets change, choose the bigger one\n+                    if (offsetLocal < offsetAdjusted) {\n+                        int biggerOffset = offsetAdjusted;\n+                        long nextBigger = nextAdjusted;\n+                        int smallerOffset = offsetLocal;\n+                        long nextSmaller = nextLocal;                        \n+                    } else {\n+                        int biggerOffset = offsetLocal;\n+                        long nextBigger = nextLocal;\n+                        int smallerOffset = offsetAdjusted;\n+                        long nextSmaller = nextAdjusted;\n+                    } // fix end\n+                    \n+                    if (nextBigger != nextSmaller) { // use nextBigger and biggerOffset\n+                        return biggerOffset; \n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}