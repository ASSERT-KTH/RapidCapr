{
    "patch": "if (offsetLocal < offsetAdjusted) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantAdjusted + 1);\n    if (nextLocal == nextAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetLocal > offsetAdjusted) {\n    long prevLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_DAY - 1);\n    long prevAdjusted = previousTransition(instantAdjusted - 1);\n    if (prevLocal == prevAdjusted) {\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3eae8d70 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal < offsetAdjusted) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantAdjusted + 1);\n+    if (nextLocal == nextAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal > offsetAdjusted) {\n+    long prevLocal = previousTransition(instantAdjusted + DateTimeConstants.MILLIS_PER_DAY - 1);\n+    long prevAdjusted = previousTransition(instantAdjusted - 1);\n+    if (prevLocal == prevAdjusted) {\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}