{
    "patch": "// If GETPROP/GETELEM is used as assignment target the array literal is\n// acting as a temporary we can't fold it here:\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\n\nif (parent.getType() == Token.ASSIGN) {\n  Node assignLeft = parent.getFirstChild();\n  if (assignLeft.isEquivalentTo(n)) {\n    Node grandParent = parent.getParent();\n    if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n      return n;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..4e56c20d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,19 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// If GETPROP/GETELEM is used as assignment target the array literal is\n+// acting as a temporary we can't fold it here:\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+\n+if (parent.getType() == Token.ASSIGN) {\n+  Node assignLeft = parent.getFirstChild();\n+  if (assignLeft.isEquivalentTo(n)) {\n+    Node grandParent = parent.getParent();\n+    if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+      return n;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}