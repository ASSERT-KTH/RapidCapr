{
    "patch": "  private boolean hasExceptionHandler(Node cfgNode) {\n    ControlFlowGraph<Node> cfg = getCfg();\n    List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n      Branch value = outEdge.getValue();\n      if (value == Branch.ON_EX || value == Branch.ON_EX_X) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..01d5599b 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,17 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    ControlFlowGraph<Node> cfg = getCfg();\n+    List<DiGraphEdge<Node, Branch>> outEdges = cfg.getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+      Branch value = outEdge.getValue();\n+      if (value == Branch.ON_EX || value == Branch.ON_EX_X) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}