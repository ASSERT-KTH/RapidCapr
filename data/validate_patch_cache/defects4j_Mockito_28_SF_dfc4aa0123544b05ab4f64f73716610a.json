{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {\n            continue;\n        }\n        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if (mockCandidate != null) {\n            try {\n                field.setAccessible(true);\n                field.set(fieldInstance, mockCandidate);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..c27d55b39 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,23 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        if (field.getType().isAssignableFrom(fieldInstance.getClass())) {\n+            continue;\n+        }\n+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if (mockCandidate != null) {\n+            try {\n+                field.setAccessible(true);\n+                field.set(fieldInstance, mockCandidate);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n+            }\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}