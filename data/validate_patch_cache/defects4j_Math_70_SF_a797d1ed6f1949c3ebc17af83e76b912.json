{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    \n    if (f == null) {\n        throw new NullPointerException(\"The function f cannot be null.\");\n    }\n    if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n        throw new IllegalArgumentException(\"The initial value is invalid.\");\n    }\n    if (min > max) {\n        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n    }\n    \n    double result = Double.NaN;\n    if (initial >= min && initial <= max) {\n        try {\n            result = solve(f, min, max);\n        } catch (NullPointerException e) {\n            double nextInitial = UnivariateRealSolverUtils.midpoint(min, max);\n            if (nextInitial == initial) {\n                throw e; // we have tried both endpoints, give up\n            }\n            result = solve(f, min, max, nextInitial);\n        }\n    } else if (initial < min) {\n        result = solve(f, min, max, min);\n    } else if (initial > max) {\n        result = solve(f, min, max, max);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..0b0855de3 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,37 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    \n+    if (f == null) {\n+        throw new NullPointerException(\"The function f cannot be null.\");\n     }\n+    if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n+        throw new IllegalArgumentException(\"The initial value is invalid.\");\n+    }\n+    if (min > max) {\n+        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+    }\n+    \n+    double result = Double.NaN;\n+    if (initial >= min && initial <= max) {\n+        try {\n+            result = solve(f, min, max);\n+        } catch (NullPointerException e) {\n+            double nextInitial = UnivariateRealSolverUtils.midpoint(min, max);\n+            if (nextInitial == initial) {\n+                throw e; // we have tried both endpoints, give up\n+            }\n+            result = solve(f, min, max, nextInitial);\n+        }\n+    } else if (initial < min) {\n+        result = solve(f, min, max, min);\n+    } else if (initial > max) {\n+        result = solve(f, min, max, max);\n+    }\n+    return result;\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}