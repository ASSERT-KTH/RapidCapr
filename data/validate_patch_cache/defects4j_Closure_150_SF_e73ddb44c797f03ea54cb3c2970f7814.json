{
    "patch": "    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) {\n        return;\n      }\n\n      boolean isFunctionName =\n          n.isName()\n              && n.getFirstChild() != null\n              && n.getFirstChild().isFirstChildOf(n)\n              && n.getFirstChild().isFunction();\n      if (n.isFunction() && (isFunctionName || !parent.isQualifiedName())) {\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getToken()) {\n        case FUNCTION:\n          if (parent.getToken() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case CATCH:\n          defineCatch(n, parent);\n          break;\n        case VAR:\n        case LET:\n          defineNameDeclaration(n, parent);\n          break;\n        case CONST:\n          if (NodeUtil.getDeclaredTypeExpression(n) == null) {\n            // Constants must have an associated type annotation.\n            registerMismatch(\n                n,\n                \"const\",\n                JSTypeNative.UNDEFINED_TYPE,\n                errorType(\"const_without_type\"));\n          } else {\n            defineNameDeclaration(n, parent);\n          }\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..40aa63a2 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,27 +1440,47 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) {\n+        return;\n+      }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      boolean isFunctionName =\n+          n.isName()\n+              && n.getFirstChild() != null\n+              && n.getFirstChild().isFirstChildOf(n)\n+              && n.getFirstChild().isFunction();\n+      if (n.isFunction() && (isFunctionName || !parent.isQualifiedName())) {\n         return;\n       }\n \n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+      switch (n.getToken()) {\n+        case FUNCTION:\n+          if (parent.getToken() == Token.NAME) {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n           break;\n-        case Token.CATCH:\n+        case CATCH:\n           defineCatch(n, parent);\n           break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n+        case VAR:\n+        case LET:\n+          defineNameDeclaration(n, parent);\n+          break;\n+        case CONST:\n+          if (NodeUtil.getDeclaredTypeExpression(n) == null) {\n+            // Constants must have an associated type annotation.\n+            registerMismatch(\n+                n,\n+                \"const\",\n+                JSTypeNative.UNDEFINED_TYPE,\n+                errorType(\"const_without_type\"));\n+          } else {\n+            defineNameDeclaration(n, parent);\n+          }\n           break;\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}