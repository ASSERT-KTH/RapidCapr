{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    // Get the class of the array elements\n    final Class<?> type1 = array1.getClass().getComponentType();\n\n    // Create a new array with the same type as array1 and and size equals to array1 and array2 lengths\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n\n    // Copy the elements of array1 to the new array\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n\n    // Copy the elements of array2 to the new array\n    int offset = array1.length;\n    for (T element : array2) {\n        // Make sure the element is compatible with the array type\n        if (!type1.isInstance(element)) {\n            throw new ArrayStoreException(\"Cannot store \" + element.getClass().getName() + \" in an array of \" + type1.getName());\n        }\n        joinedArray[offset++] = element;\n    }\n\n    return joinedArray;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..440b37ea 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,35 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    // Get the class of the array elements\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+\n+    // Create a new array with the same type as array1 and and size equals to array1 and array2 lengths\n+    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+\n+    // Copy the elements of array1 to the new array\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+\n+    // Copy the elements of array2 to the new array\n+    int offset = array1.length;\n+    for (T element : array2) {\n+        // Make sure the element is compatible with the array type\n+        if (!type1.isInstance(element)) {\n+            throw new ArrayStoreException(\"Cannot store \" + element.getClass().getName() + \" in an array of \" + type1.getName());\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n-        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n-        return joinedArray;\n+        joinedArray[offset++] = element;\n     }\n \n+    return joinedArray;\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "java.lang.ArrayStoreException: Cannot store java.lang.Long in an array of java.lang.Integer",
    "test_result": "FAIL"
}