{
    "patch": "    protected double doSolve() {\n        double min = getMin();\n        double max = getMax();\n\n        double fMin = computeObjectiveValue(min);\n        double fMax = computeObjectiveValue(max);\n\n        if (fMin == 0.0) {\n            return min;\n        }\n        if (fMax == 0.0) {\n            return max;\n        }\n\n        verifyBracketing(min, max);\n\n        double m = 0.5 * (min + max);\n        double fM = computeObjectiveValue(m);\n        double d = 0;\n        double e = 0;\n\n        double s = m;\n        double fS = fM;\n        double lastDelta = Double.POSITIVE_INFINITY;\n        for (int i = 0; i < getMaxEvaluations(); ++i) {\n            double previousE = e;\n\n            d = 0.5 * (fMin - fMax);\n            double absD = Math.abs(d);\n            double absFM = Math.abs(fM);\n\n            if (absD <= functionValueAccuracy && absFM <= functionValueAccuracy) {\n                return m;\n            }\n\n            if (absD > functionValueAccuracy && absFM > functionValueAccuracy) {\n                // Construct modified secant polynomial\n                double weight = 0;\n                double denom = (fMax - fMin) * (fM - fMin) * (fMax - fM);\n                double termA = (m - max) * (fMin - fM) - (min - m) * (fM - fMax);\n                double termB = (m - max) * (m - max) * (fMin - fM) -\n                             (min - m) * (min - m) * (fM - fMax);\n                double c = termA / denom;\n                double a = termB / denom;\n\n                if (Double.isNaN(c) || Double.isInfinite(c) ||\n                        Double.isNaN(a) || Double.isInfinite(a)) {\n                    // If the weights are not finite numbers (which happens\n                    // if the denominator above is zero), then simply bisect.\n                    m = 0.5 * (min + max);\n                    e = m - min;\n                } else {\n                    // Compute weights and test whether a bisection is required.\n                    if (Math.abs(a) < Math.abs(c)) {\n                        e = d / c;\n                        s = m;\n                        fS = fM;\n                        lastDelta = weight * e;\n                        weight = 1;\n                    } else {\n                        weight = c / a;\n                        double sc = weight * (max - m);\n                        lastDelta = e;\n                        e = d / a;\n                        if (Math.abs(sc) >= Math.abs(e)) {\n                            s = m;\n                            fS = fM;\n                            e = m - min;\n                        } else {\n                            m = max;\n                            max = m + e;\n                            fMax = computeObjectiveValue(max);\n                            continue;\n                        }\n                    }\n\n                    // Determine if the interpolation conditions are satisfied.\n                    if (2 * Math.abs(e) < Math.min(lastDelta, 3 * Math.abs(previousE) - functionValueAccuracy * Math.abs(weight))) {\n                        // Interpolation satisfies the conditions.\n                        lastDelta = Math.abs(e);\n                        double tmp = m;\n                        m = s + e;\n                        if (tmp - min < 0.5 * functionValueAccuracy || max - tmp < 0.5 * functionValueAccuracy) {\n                            e = Math.signum(d) * functionValueAccuracy;\n                        }\n                    } else {\n                        // Interpolation failed -- bisect instead.\n                        lastDelta = e;\n                        e = (d >= 0) ? (min - m) : (max - m);\n                    }\n                }\n            } else {\n                // At least one of the function values is close to zero.\n                if (absFMin < absFMax) {\n                    m = min;\n                    fM = fMi",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..19b340997 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,132 +125,102 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+    protected double doSolve() {\n+        double min = getMin();\n+        double max = getMax();\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n+        double fMin = computeObjectiveValue(min);\n+        double fMax = computeObjectiveValue(max);\n+\n+        if (fMin == 0.0) {\n+            return min;\n         }\n-        if (f1 == 0.0) {\n-            return x1;\n+        if (fMax == 0.0) {\n+            return max;\n         }\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+        verifyBracketing(min, max);\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+        double m = 0.5 * (min + max);\n+        double fM = computeObjectiveValue(m);\n+        double d = 0;\n+        double e = 0;\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+        double s = m;\n+        double fS = fM;\n+        double lastDelta = Double.POSITIVE_INFINITY;\n+        for (int i = 0; i < getMaxEvaluations(); ++i) {\n+            double previousE = e;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+            d = 0.5 * (fMin - fMax);\n+            double absD = Math.abs(d);\n+            double absFM = Math.abs(fM);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n+            if (absD <= functionValueAccuracy && absFM <= functionValueAccuracy) {\n+                return m;\n             }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n-                case ILLINOIS:\n-                    f0 *= 0.5;\n-                    break;\n-                case PEGASUS:\n-                    f0 *= f1 / (f1 + fx);\n-                    break;\n-                case REGULA_FALSI:\n-                    // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+            if (absD > functionValueAccuracy && absFM > functionValueAccuracy) {\n+                // Construct modified secant polynomial\n+                double weight = 0;\n+                double denom = (fMax - fMin) * (fM - fMin) * (fMax - fM);\n+                double termA = (m - max) * (fMin - fM) - (min - m) * (fM - fMax);\n+                double termB = (m - max) * (m - max) * (fMin - fM) -\n+                             (min - m) * (min - m) * (fM - fMax);\n+                double c = termA / denom;\n+                double a = termB / denom;\n+\n+                if (Double.isNaN(c) || Double.isInfinite(c) ||\n+                        Double.isNaN(a) || Double.isInfinite(a)) {\n+                    // If the weights are not finite numbers (which happens\n+                    // if the denominator above is zero), then simply bisect.\n+                    m = 0.5 * (min + max);\n+                    e = m - min;\n+                } else {\n+                    // Compute weights and test whether a bisection is required.\n+                    if (Math.abs(a) < Math.abs(c)) {\n+                        e = d / c;\n+                        s = m;\n+                        fS = fM;\n+                        lastDelta = weight * e;\n+                        weight = 1;\n+                    } else {\n+                        weight = c / a;\n+                        double sc = weight * (max - m);\n+                        lastDelta = e;\n+                        e = d / a;\n+                        if (Math.abs(sc) >= Math.abs(e)) {\n+                            s = m;\n+                            fS = fM;\n+                            e = m - min;\n+                        } else {\n+                            m = max;\n+                            max = m + e;\n+                            fMax = computeObjectiveValue(max);\n+                            continue;\n+                        }\n                     }\n-                    break;\n-                default:\n-                    // Should never happen.\n-                    throw new MathInternalError();\n-                }\n-            }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    if (inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case RIGHT_SIDE:\n-                    if (!inverted) {\n-                        return x1;\n-                    }\n-                    break;\n-                case BELOW_SIDE:\n-                    if (f1 <= 0) {\n-                        return x1;\n-                    }\n-                    break;\n-                case ABOVE_SIDE:\n-                    if (f1 >= 0) {\n-                        return x1;\n+                    // Determine if the interpolation conditions are satisfied.\n+                    if (2 * Math.abs(e) < Math.min(lastDelta, 3 * Math.abs(previousE) - functionValueAccuracy * Math.abs(weight))) {\n+                        // Interpolation satisfies the conditions.\n+                        lastDelta = Math.abs(e);\n+                        double tmp = m;\n+                        m = s + e;\n+                        if (tmp - min < 0.5 * functionValueAccuracy || max - tmp < 0.5 * functionValueAccuracy) {\n+                            e = Math.signum(d) * functionValueAccuracy;\n+                        }\n+                    } else {\n+                        // Interpolation failed -- bisect instead.\n+                        lastDelta = e;\n+                        e = (d >= 0) ? (min - m) : (max - m);\n                     }\n-                    break;\n-                default:\n-                    throw new MathInternalError();\n                 }\n-            }\n-\n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n-                case ANY_SIDE:\n-                    return x1;\n-                case LEFT_SIDE:\n-                    return inverted ? x1 : x0;\n-                case RIGHT_SIDE:\n-                    return inverted ? x0 : x1;\n-                case BELOW_SIDE:\n-                    return (f1 <= 0) ? x1 : x0;\n-                case ABOVE_SIDE:\n-                    return (f1 >= 0) ? x1 : x0;\n-                default:\n-                    throw new MathInternalError();\n-                }\n-            }\n-        }\n-    }\n+            } else {\n+                // At least one of the function values is close to zero.\n+                if (absFMin < absFMax) {\n+                    m = min;\n+                    fM = fMi\n \n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}