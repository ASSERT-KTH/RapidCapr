{
    "patch": "  /**\n   * Determines whether the given node is an assignment to a prototype property.\n   *\n   * @param assign the assignment node to check\n   * @return true if the node is an assignment to a prototype property; false otherwise\n   */\n  private boolean isPrototypePropertyAssign(Node assign) {\n    Node left = assign.getFirstChild();\n    if (!left.isGetProp()) {\n      return false;\n    }\n    Node root = left.getFirstChild();\n    if (!root.isName()) {\n      return false;\n    }\n    String rootVarName = root.getString();\n    if (!NodeUtil.isLhsByDestructuring(left)) {\n      // If the object being assigned to is not being destructured, we check that it's the\n      // name of the current function or is aliased to it.\n      Scope currentScope = t.getScope();\n      Var var = currentScope.getVar(rootVarName);\n      if (var == null) {\n        // If we can't find a declaration for the variable, it's possibly from an outer scope.\n        // In this case we're conservative and assume the property is not being assigned.\n        return false;\n      }\n      Node nameNode = var.getNameNode();\n      if (!NodeUtil.isFunctionDeclaration(nameNode)) {\n        // If it's not the name of the current function, it may be an alias.\n        return NodeUtil.isReferenceTo(nameNode, root);\n      }\n    }\n    return left.getLastChild().getString().equals(\"prototype\");\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..e643071d 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,40 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n-\n+  /**\n+   * Determines whether the given node is an assignment to a prototype property.\n+   *\n+   * @param assign the assignment node to check\n+   * @return true if the node is an assignment to a prototype property; false otherwise\n+   */\n+  private boolean isPrototypePropertyAssign(Node assign) {\n+    Node left = assign.getFirstChild();\n+    if (!left.isGetProp()) {\n       return false;\n     }\n+    Node root = left.getFirstChild();\n+    if (!root.isName()) {\n+      return false;\n+    }\n+    String rootVarName = root.getString();\n+    if (!NodeUtil.isLhsByDestructuring(left)) {\n+      // If the object being assigned to is not being destructured, we check that it's the\n+      // name of the current function or is aliased to it.\n+      Scope currentScope = t.getScope();\n+      Var var = currentScope.getVar(rootVarName);\n+      if (var == null) {\n+        // If we can't find a declaration for the variable, it's possibly from an outer scope.\n+        // In this case we're conservative and assume the property is not being assigned.\n+        return false;\n+      }\n+      Node nameNode = var.getNameNode();\n+      if (!NodeUtil.isFunctionDeclaration(nameNode)) {\n+        // If it's not the name of the current function, it may be an alias.\n+        return NodeUtil.isReferenceTo(nameNode, root);\n+      }\n+    }\n+    return left.getLastChild().getString().equals(\"prototype\");\n+  }\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}