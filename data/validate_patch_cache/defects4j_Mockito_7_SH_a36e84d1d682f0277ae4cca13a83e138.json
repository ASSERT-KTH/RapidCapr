{
    "patch": "private void readTypeVariables() {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length > 0) {\n        for (Type type : bounds) {\n            registerTypeVariablesOn(type);\n        }\n    } else {\n        Type actualType = getActualTypeArgumentFor(typeVariable);\n        if (actualType != null) {\n            registerTypeVariablesOn(actualType);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d139ea486 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,19 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length > 0) {\n+        for (Type type : bounds) {\n+            registerTypeVariablesOn(type);\n+        }\n+    } else {\n+        Type actualType = getActualTypeArgumentFor(typeVariable);\n+        if (actualType != null) {\n+            registerTypeVariablesOn(actualType);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}