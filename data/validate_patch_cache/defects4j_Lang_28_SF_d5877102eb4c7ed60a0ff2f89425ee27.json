{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        // Check for ArrayIndexOutOfBoundsException\n        if (index + 2 >= input.length()) {\n            return 0;\n        }\n\n        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int radix = 10; // default to decimal\n            int start = index + 2;\n            boolean isHex = false;\n\n            if (input.charAt(start) == 'x') {\n                isHex = true;\n                start++; // skip 'x'\n                radix = 16;\n            } else if (input.charAt(start) == 'X') {\n                isHex = true;\n                start++; // skip 'X'\n                radix = 16;\n            }\n\n            // Find the end index of the number\n            int end = start;\n            while (end < input.length() && input.charAt(end) != ';') {\n                end++;\n            }\n\n            // Check for incomplete entity\n            if (end == input.length()) {\n                return 0;\n            }\n\n            // Parse the number (hexadecimal or decimal)\n            int entityValue;\n            try {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), radix);\n            } catch (NumberFormatException nfe) {\n                return 0;\n            }\n\n            // Check if the parsed number is a valid Unicode code point\n            if (entityValue < 0 || entityValue > 0x10ffff || (entityValue >= 0xd800 && entityValue <= 0xdfff)) {\n                return 0;\n            }\n\n            // Write the Unicode character to the output stream\n            if (entityValue <= 0xffff) {\n                out.write(entityValue);\n            } else {\n                out.write(Character.highSurrogate(entityValue));\n                out.write(Character.lowSurrogate(entityValue));\n            }\n\n            // Return the total length of the entity (including the '&' and ';' characters)\n            return end - index + 1;\n        }\n\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..6ccabf2a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -33,36 +33,62 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      */\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        // Check for ArrayIndexOutOfBoundsException\n+        if (index + 2 >= input.length()) {\n+            return 0;\n+        }\n+\n+        if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+            int radix = 10; // default to decimal\n             int start = index + 2;\n             boolean isHex = false;\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n+            if (input.charAt(start) == 'x') {\n+                isHex = true;\n+                start++; // skip 'x'\n+                radix = 16;\n+            } else if (input.charAt(start) == 'X') {\n                 isHex = true;\n+                start++; // skip 'X'\n+                radix = 16;\n             }\n \n+            // Find the end index of the number\n             int end = start;\n-            while(input.charAt(end) != ';') {\n+            while (end < input.length() && input.charAt(end) != ';') {\n                 end++;\n             }\n \n+            // Check for incomplete entity\n+            if (end == input.length()) {\n+                return 0;\n+            }\n+\n+            // Parse the number (hexadecimal or decimal)\n             int entityValue;\n             try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), radix);\n+            } catch (NumberFormatException nfe) {\n                 return 0;\n             }\n \n+            // Check if the parsed number is a valid Unicode code point\n+            if (entityValue < 0 || entityValue > 0x10ffff || (entityValue >= 0xd800 && entityValue <= 0xdfff)) {\n+                return 0;\n+            }\n+\n+            // Write the Unicode character to the output stream\n+            if (entityValue <= 0xffff) {\n                 out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            } else {\n+                out.write(Character.highSurrogate(entityValue));\n+                out.write(Character.lowSurrogate(entityValue));\n+            }\n+\n+            // Return the total length of the entity (including the '&' and ';' characters)\n+            return end - index + 1;\n         }\n+\n         return 0;\n     }\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 55295 expected:<\ud7ff[?]> but was:<\ud7ff[&#xd800;]>",
    "test_result": "FAIL"
}