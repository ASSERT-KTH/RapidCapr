{
    "patch": "private void checkThisReference(NodeTraversal t, NodeTraversal.Callback cb, Node n) {\n  if (n.getBooleanProp(Node.IS_ARGUMENTS)) {\n    Node caller = NodeUtil.getEnclosingFunction(n);\n\n    // Check that n is not a Reference to arguments and that the function\n    // callee is not strict mode.\n    if (caller.getBooleanProp(Node.FUNCTION_IS_STRICT)\n        || !NodeUtil.references(argumentsReservedName, n)) {\n      return;\n    }\n    t.report(n, cb, CheckLevel.WARNING, VIRTUAL_THIS_DEAD_CODE,\n        \"dangerous use of the global this object\");\n  } else if (n.isThis()) {\n    t.report(n, cb, CheckLevel.WARNING, VIRTUAL_THIS_DEAD_CODE,\n        \"dangerous use of the global this object\");\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..f35db10a 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,23 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+private void checkThisReference(NodeTraversal t, NodeTraversal.Callback cb, Node n) {\n+  if (n.getBooleanProp(Node.IS_ARGUMENTS)) {\n+    Node caller = NodeUtil.getEnclosingFunction(n);\n+\n+    // Check that n is not a Reference to arguments and that the function\n+    // callee is not strict mode.\n+    if (caller.getBooleanProp(Node.FUNCTION_IS_STRICT)\n+        || !NodeUtil.references(argumentsReservedName, n)) {\n+      return;\n+    }\n+    t.report(n, cb, CheckLevel.WARNING, VIRTUAL_THIS_DEAD_CODE,\n+        \"dangerous use of the global this object\");\n+  } else if (n.isThis()) {\n+    t.report(n, cb, CheckLevel.WARNING, VIRTUAL_THIS_DEAD_CODE,\n+        \"dangerous use of the global this object\");\n+  }\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}