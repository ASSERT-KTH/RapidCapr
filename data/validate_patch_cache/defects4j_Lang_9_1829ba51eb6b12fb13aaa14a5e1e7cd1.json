{
    "patch": "    private void init() {\n        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.find()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        do {\n            String nextFormatField = null;\n            if (patternMatcher.end() < pattern.length()) {\n                nextFormatField= pattern.substring(patternMatcher.end(), patternMatcher.end() + 1);\n            }\n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n            if (!patternMatcher.find()) {\n                break;\n            }\n        } while(nextStrategy != null);\n\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n        strategies= collector.toArray(new Strategy[collector.size()]);\n        parsePattern= Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..82f15340 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -121,26 +121,28 @@ public class FastDateParser implements DateParser, Serializable {\n         List<Strategy> collector = new ArrayList<Strategy>();\n \n         Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n+        if(!patternMatcher.find()) {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n \n         currentFormatField= patternMatcher.group();\n         Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n+        do {\n+            String nextFormatField = null;\n+            if (patternMatcher.end() < pattern.length()) {\n+                nextFormatField= pattern.substring(patternMatcher.end(), patternMatcher.end() + 1);\n             }\n-            String nextFormatField= patternMatcher.group();\n             nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n-        }\n+            if (!patternMatcher.find()) {\n+                break;\n+            }\n+        } while(nextStrategy != null);\n+\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}