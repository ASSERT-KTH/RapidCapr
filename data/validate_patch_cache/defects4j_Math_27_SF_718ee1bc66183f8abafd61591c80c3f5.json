{
    "patch": "public double percentageValue() {\n    if (this.field.getRadixDigits() <= 2) {\n        // special case tiny numbers\n        return multiply(100).doubleValue();\n    } else {\n        if (getClass() == Dfp.class) {\n            Dfp ln10 = newInstance(10).ln();\n            Dfp factor = ln10.multiply(newInstance(-100));\n            return multiply(factor).doubleValue();\n        } else {\n            return multiply(0.01).doubleValue();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..3b98bc7c3 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,9 +593,20 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n-    public double percentageValue() {\n+public double percentageValue() {\n+    if (this.field.getRadixDigits() <= 2) {\n+        // special case tiny numbers\n         return multiply(100).doubleValue();\n+    } else {\n+        if (getClass() == Dfp.class) {\n+            Dfp ln10 = newInstance(10).ln();\n+            Dfp factor = ln10.multiply(newInstance(-100));\n+            return multiply(factor).doubleValue();\n+        } else {\n+            return multiply(0.01).doubleValue();\n+        }\n     }\n+}\n \n     /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}