{
    "patch": "import com.google.javascript.rhino.Node;\nimport java.util.function.Predicate;\n\nclass NodeUtil {\n\n  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.test(value.getFirstChild())\n                && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals)\n           && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.test(value);\n      case Token.NAME:\n        return NodeUtil.isImmutableValue(value) || locals.test(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);\n      case Token.CALL:\n        return NodeUtil.callHasLocalResult(value)\n            || NodeUtil.isToStringMethodCall(value)\n            || locals.test(value);\n      case Token.NEW:\n        return NodeUtil.newHasLocalResult(value)\n               || locals.test(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        return true;\n      case Token.IN:\n        return true;\n      default:\n        if (NodeUtil.isAssignmentOp(value)\n            || NodeUtil.isSimpleOperator(value)\n            || NodeUtil.isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n  \n  static boolean isImmutableValue(Node n) {\n    switch (n.getType()) {\n      case Token.FUNCTION:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.STRING:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n      case Token.VOID:\n      case Token.TRUE:\n        return true;\n      case Token.NAME:\n        String name = n.getString();\n        return \"NaN\".equals(name) || \"Infinity\".equals(name);\n      default:\n        break;\n    }\n    return false;\n  }\n\n  static boolean callHasLocalResult(Node c) {\n    checkState(c.getType() == Token.CALL);\n    return isAssign(c.getParent())\n        && c.getParent().getFirstChild() == c\n        && NodeUtil.isLocalName(c.getFirstChild());\n  }\n\n  private static boolean isLocalName(Node n) {\n    checkNotNull(n);\n    return n.getType() == Token.NAME && n.getBooleanProp(Node.ISLOCAL);\n  }\n\n  static boolean isToStringMethodCall(Node n) {\n    return isCallToMethod(n, \"toString\");\n  }\n\n  static boolean newHasLocalResult(Node n) {\n    checkState(n.getType() == Token.NEW);\n    return isAssign(n.getParent())\n        && n.getParent().getFirstChild() == n\n        && NodeUtil.isLocalName(n.getFirstChild());\n  }\n\n  static boolean isSimpleOperator(Node n) {\n    switch (n.getType()) {\n      case Token.OR:\n      case Token.AND:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.ADD:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  static boolean isAssignmentOp(Node n) {\n    switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SHL:\n      case Token.ASSIGN shr:\n      case Token.ASSIGN_SAR:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_EXPONENT:\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private static boolean isCallToMethod(Node n, String methodName) {\n    return n.getType() == Token.CALL && n.getFirstChild().getLastChild().getString().equals(methodName);\n  }\n\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..7b6c348f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,172 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n+import com.google.javascript.rhino.Node;\n+import java.util.function.Predicate;\n+\n+class NodeUtil {\n+\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.test(value.getFirstChild())\n+                && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals)\n+           && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+           && NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.test(value);\n+      case Token.NAME:\n+        return NodeUtil.isImmutableValue(value) || locals.test(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        return NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);\n+      case Token.CALL:\n+        return NodeUtil.callHasLocalResult(value)\n+            || NodeUtil.isToStringMethodCall(value)\n+            || locals.test(value);\n+      case Token.NEW:\n+        return NodeUtil.newHasLocalResult(value)\n+               || locals.test(value);\n+      case Token.FUNCTION:\n+      case Token.REGEXP:\n+      case Token.ARRAYLIT:\n+      case Token.OBJECTLIT:\n+        return true;\n       case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n         return true;\n       default:\n-        return false;\n+        if (NodeUtil.isAssignmentOp(value)\n+            || NodeUtil.isSimpleOperator(value)\n+            || NodeUtil.isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n     }\n   }\n-\n-  static boolean isUndefined(Node n) {\n+  \n+  static boolean isImmutableValue(Node n) {\n     switch (n.getType()) {\n+      case Token.FUNCTION:\n+      case Token.FALSE:\n+      case Token.NULL:\n+      case Token.NUMBER:\n+      case Token.STRING:\n+      case Token.OBJECTLIT:\n+      case Token.ARRAYLIT:\n+      case Token.REGEXP:\n       case Token.VOID:\n+      case Token.TRUE:\n         return true;\n       case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n+        String name = n.getString();\n+        return \"NaN\".equals(name) || \"Infinity\".equals(name);\n+      default:\n+        break;\n     }\n     return false;\n   }\n \n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n+  static boolean callHasLocalResult(Node c) {\n+    checkState(c.getType() == Token.CALL);\n+    return isAssign(c.getParent())\n+        && c.getParent().getFirstChild() == c\n+        && NodeUtil.isLocalName(c.getFirstChild());\n   }\n \n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n+  private static boolean isLocalName(Node n) {\n+    checkNotNull(n);\n+    return n.getType() == Token.NAME && n.getBooleanProp(Node.ISLOCAL);\n   }\n \n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n+  static boolean isToStringMethodCall(Node n) {\n+    return isCallToMethod(n, \"toString\");\n+  }\n+\n+  static boolean newHasLocalResult(Node n) {\n+    checkState(n.getType() == Token.NEW);\n+    return isAssign(n.getParent())\n+        && n.getParent().getFirstChild() == n\n+        && NodeUtil.isLocalName(n.getFirstChild());\n+  }\n+\n+  static boolean isSimpleOperator(Node n) {\n+    switch (n.getType()) {\n+      case Token.OR:\n+      case Token.AND:\n+      case Token.BITOR:\n+      case Token.BITXOR:\n+      case Token.BITAND:\n+      case Token.SHEQ:\n+      case Token.SHNE:\n+      case Token.EQ:\n+      case Token.NE:\n+      case Token.LT:\n+      case Token.GT:\n+      case Token.LE:\n+      case Token.GE:\n+      case Token.INSTANCEOF:\n+      case Token.IN:\n+      case Token.LSH:\n+      case Token.RSH:\n+      case Token.URSH:\n+      case Token.ADD:\n+      case Token.SUB:\n+      case Token.MUL:\n+      case Token.DIV:\n+      case Token.MOD:\n+      case Token.NOT:\n+      case Token.BITNOT:\n+      case Token.POS:\n+      case Token.NEG:\n+        return true;\n+      default:\n+        return false;\n     }\n   }\n \n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n+  static boolean isAssignmentOp(Node n) {\n+    switch (n.getType()) {\n+      case Token.ASSIGN:\n+      case Token.ASSIGN_ADD:\n+      case Token.ASSIGN_BITOR:\n+      case Token.ASSIGN_BITXOR:\n+      case Token.ASSIGN_BITAND:\n+      case Token.ASSIGN_SHL:\n+      case Token.ASSIGN shr:\n+      case Token.ASSIGN_SAR:\n+      case Token.ASSIGN_DIV:\n+      case Token.ASSIGN_MOD:\n+      case Token.ASSIGN_MUL:\n+      case Token.ASSIGN_EXPONENT:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n \n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  private static boolean isCallToMethod(Node n, String methodName) {\n+    return n.getType() == Token.CALL && n.getFirstChild().getLastChild().getString().equals(methodName);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n+}\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}