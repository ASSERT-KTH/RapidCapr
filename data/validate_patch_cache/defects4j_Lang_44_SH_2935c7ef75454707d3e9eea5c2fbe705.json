{
    "patch": "        int sz = val.length();\n        int startIndex = 0;\n        if (sz > 0 && val.charAt(0) == '-') {\n            startIndex = 1;\n            if (sz > 1 && val.charAt(1) == '-') { // protection from too many '-' signs\n                return null;\n            }\n        } else if (sz > 0 && val.charAt(0) == '+') {\n            startIndex = 1;\n        }\n        if (sz > startIndex + 1 && val.charAt(startIndex) == '0' && !val.contains(\".\")) {\n            if (val.charAt(startIndex + 1) == 'x' || val.charAt(startIndex + 1) == 'X') {\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException e) {\n                    // let it fall through\n                }\n            } else {\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException e) {\n                    // let it fall through\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..e9d5901c 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,31 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        int sz = val.length();\n+        int startIndex = 0;\n+        if (sz > 0 && val.charAt(0) == '-') {\n+            startIndex = 1;\n+            if (sz > 1 && val.charAt(1) == '-') { // protection from too many '-' signs\n+                return null;\n+            }\n+        } else if (sz > 0 && val.charAt(0) == '+') {\n+            startIndex = 1;\n+        }\n+        if (sz > startIndex + 1 && val.charAt(startIndex) == '0' && !val.contains(\".\")) {\n+            if (val.charAt(startIndex + 1) == 'x' || val.charAt(startIndex + 1) == 'X') {\n+                try {\n+                    return createInteger(val);\n+                } catch (NumberFormatException e) {\n+                    // let it fall through\n+                }\n+            } else {\n+                try {\n+                    return createInteger(val);\n+                } catch (NumberFormatException e) {\n+                    // let it fall through\n+                }\n+            }\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "java.lang.StringIndexOutOfBoundsException: String index out of range: 0",
    "test_result": "FAIL"
}