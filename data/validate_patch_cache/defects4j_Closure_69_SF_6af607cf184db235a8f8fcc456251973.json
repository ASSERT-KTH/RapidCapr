{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceFileName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        ensureTyped(t, n);\n        return;\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSType thisType = functionType.getTypeOfThis();\n      if (thisType != null &&\n          !isGetPropOrGetElem(child.getParent()) &&\n          !isVarArgsMethod(childType)) {\n        report(t, n, HASTHIS_NOTGETPROP,\n            functionType.getDisplayName(), childType.toString());\n        ensureTyped(t, n);\n        return;\n      }\n\n      // Validate parameter types.\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n  \n  private boolean isGetPropOrGetElem(Node n) {\n    if (n == null) {\n      return false;\n    } else if (n.isGetProp() || n.isGetElem()) {\n      return true;\n    } else {\n      return isGetPropOrGetElem(n.getParent());\n    }\n  }\n  \n  private boolean isVarArgsMethod(JSType type) {\n    if (!(type instanceof FunctionType)) {\n      return false;\n    }\n    FunctionType funType = (FunctionType) type;\n    if (!funType.hasRestFormals()) {\n      return false;\n    }\n    Node jsDocNode = funType.getJSDocInfo().getNode();\n    String typeString =\n        jsDocNode.getJSDocInfo().getParameterTypeString(funType.getNumberOfParameters() - 1);\n   return hasExistingTypeString(typeString, \"...*\");\n  }\n\n  private boolean hasExistingTypeString(String typeString, String query) {\n    return typeString != null && typeString.contains(query);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..bd164181 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,7 +1541,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n+private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n@@ -1559,7 +1559,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n       if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+        String sourceName = functionJSDocInfo.getSourceFileName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n         isExtern = functionSource.isExtern();\n       }\n@@ -1573,11 +1573,23 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n            functionType.getReturnType().isVoidType() ||\n            !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        ensureTyped(t, n);\n+        return;\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType thisType = functionType.getTypeOfThis();\n+      if (thisType != null &&\n+          !isGetPropOrGetElem(child.getParent()) &&\n+          !isVarArgsMethod(childType)) {\n+        report(t, n, HASTHIS_NOTGETPROP,\n+            functionType.getDisplayName(), childType.toString());\n+        ensureTyped(t, n);\n+        return;\n+      }\n \n+      // Validate parameter types.\n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n     } else {\n@@ -1588,6 +1600,34 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // supported by IE.  Either say something about the return type or warn\n     // about the non-portability of the call or both.\n   }\n+  \n+  private boolean isGetPropOrGetElem(Node n) {\n+    if (n == null) {\n+      return false;\n+    } else if (n.isGetProp() || n.isGetElem()) {\n+      return true;\n+    } else {\n+      return isGetPropOrGetElem(n.getParent());\n+    }\n+  }\n+  \n+  private boolean isVarArgsMethod(JSType type) {\n+    if (!(type instanceof FunctionType)) {\n+      return false;\n+    }\n+    FunctionType funType = (FunctionType) type;\n+    if (!funType.hasRestFormals()) {\n+      return false;\n+    }\n+    Node jsDocNode = funType.getJSDocInfo().getNode();\n+    String typeString =\n+        jsDocNode.getJSDocInfo().getParameterTypeString(funType.getNumberOfParameters() - 1);\n+   return hasExistingTypeString(typeString, \"...*\");\n+  }\n+\n+  private boolean hasExistingTypeString(String typeString, String query) {\n+    return typeString != null && typeString.contains(query);\n+  }\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}