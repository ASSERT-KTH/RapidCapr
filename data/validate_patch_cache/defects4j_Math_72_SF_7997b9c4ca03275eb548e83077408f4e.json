{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x = initial;\n    double y = yInitial;\n\n    double xMin = min;\n    double yMinTemp = yMin;\n\n    double xMax = max;\n    double yMaxTemp = yMax;\n\n\n    boolean bracketed = false;\n    boolean oldDirection = false;\n\n    for (int i = 0; i < maximumIterations; i++) {\n\n        // check for convergence\n        if (Math.abs(y) <= functionValueAccuracy) {\n            setResult(x, i);\n            return result;\n        }\n\n        if (i % 1 == 0) { // converged root is not too close to one of the interval endpoints\n            // if the last move was in the same direction as the current move, we choose\n            // as the next point the one that is farthest from the point where we started.\n            // so that the bisection procedure has a chance of providing adequate reduction\n            // of the interval range.\n            if (bracketed && ((x - xMin) * (xMax - x) > 0.0)) {\n                double delta;\n                double maxDelta;\n                if (oldDirection) {\n                    // Move according to the last move was greater than the one before.\n                    delta = x - xMin;\n                    maxDelta = xMax - x;\n                } else {\n                    // Move according to the last move was greater than or equal to the one before.\n                    delta = xMax - x;\n                    maxDelta = x - xMin;\n                }\n                if (2.0 * delt",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..f31f2741a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,76 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+    double x = initial;\n+    double y = yInitial;\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    double xMin = min;\n+    double yMinTemp = yMin;\n \n-    }\n+    double xMax = max;\n+    double yMaxTemp = yMax;\n+\n+\n+    boolean bracketed = false;\n+    boolean oldDirection = false;\n+\n+    for (int i = 0; i < maximumIterations; i++) {\n+\n+        // check for convergence\n+        if (Math.abs(y) <= functionValueAccuracy) {\n+            setResult(x, i);\n+            return result;\n+        }\n+\n+        if (i % 1 == 0) { // converged root is not too close to one of the interval endpoints\n+            // if the last move was in the same direction as the current move, we choose\n+            // as the next point the one that is farthest from the point where we started.\n+            // so that the bisection procedure has a chance of providing adequate reduction\n+            // of the interval range.\n+            if (bracketed && ((x - xMin) * (xMax - x) > 0.0)) {\n+                double delta;\n+                double maxDelta;\n+                if (oldDirection) {\n+                    // Move according to the last move was greater than the one before.\n+                    delta = x - xMin;\n+                    maxDelta = xMax - x;\n+                } else {\n+                    // Move according to the last move was greater than or equal to the one before.\n+                    delta = xMax - x;\n+                    maxDelta = x - xMin;\n+                }\n+                if (2.0 * delt\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}