{
    "patch": "    public static int gcd(int u, int v) {\n        if (u == 0 || v == 0) {\n            return Math.abs(u) + Math.abs(v);\n        }\n\n        if (u > 0) {\n            u = -u;\n        } \n        if (v > 0) {\n            v = -v;\n        } \n        int k = 0;\n\n        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n            u /= 2;\n            v /= 2;\n            k++; \n        }\n        if (k == 31) {\n            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n        }\n\n        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n        do {\n            while ((t & 1) == 0) { \n                t /= 2;\n            }\n            if (t > 0) {\n                u = -t;\n            } else {\n                v = t;\n            }\n            t = (v - u) / 2;\n        } while (t != 0);\n        return -u * (1 << k); \n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342aeb3..97ab7290d 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,42 @@ public final class MathUtils {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if (u * v == 0) {\n+    public static int gcd(int u, int v) {\n+        if (u == 0 || v == 0) {\n+            return Math.abs(u) + Math.abs(v);\n+        }\n+\n+        if (u > 0) {\n+            u = -u;\n+        } \n+        if (v > 0) {\n+            v = -v;\n+        } \n+        int k = 0;\n+\n+        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { \n+            u /= 2;\n+            v /= 2;\n+            k++; \n+        }\n+        if (k == 31) {\n+            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n+        }\n+\n+        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n+        do {\n+            while ((t & 1) == 0) { \n+                t /= 2;\n+            }\n+            if (t > 0) {\n+                u = -t;\n+            } else {\n+                v = t;\n+            }\n+            t = (v - u) / 2;\n+        } while (t != 0);\n+        return -u * (1 << k); \n+    }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}