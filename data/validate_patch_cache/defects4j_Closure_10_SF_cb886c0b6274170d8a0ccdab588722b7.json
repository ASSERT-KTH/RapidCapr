{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelperImpl(n);\n    }\n  }\n\n  private static boolean mayBeStringHelperImpl(Node n) {\n    if (n.isString()) {\n      return true;\n    }\n    if (n.isRegExp()) {\n      return true;\n    }\n    if (n.isTemplateLit()) {\n      return true;\n    }\n    if (n.isArrayLit()) {\n      for (Node child : n.children()) {\n        if (!mayBeStringHelperImpl(child)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..b7b1f28f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1416,8 +1416,29 @@ public final class NodeUtil {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      return mayBeStringHelperImpl(n);\n+    }\n+  }\n+\n+  private static boolean mayBeStringHelperImpl(Node n) {\n+    if (n.isString()) {\n+      return true;\n+    }\n+    if (n.isRegExp()) {\n+      return true;\n     }\n+    if (n.isTemplateLit()) {\n+      return true;\n+    }\n+    if (n.isArrayLit()) {\n+      for (Node child : n.children()) {\n+        if (!mayBeStringHelperImpl(child)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    return false;\n   }\n \n   static boolean mayBeStringHelper(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}