{
    "patch": "  private JSType greatestSubtypeInternal(JSType that) {\n    checkNotNull(that);\n\n    if (this.isUnknownType() || this.equals(that)) {\n      return that;\n    }\n\n    if (that.isUnknownType()) {\n      return this;\n    }\n\n    if (this.isAllType() || that.isNoType() || this.equals(that)) {\n      return this;\n    }\n\n    if (this.isNoType() || that.isAllType()) {\n      return that;\n    }\n\n    if (this.isUnionType()) {\n      return ((UnionType) this).greatestSubtype(that);\n    }\n    if (that.isUnionType()) {\n      return ((UnionType) that).greatestSubtype(this);\n    }\n\n    if (isObject()) {\n      if (!that.isObject()) {\n        return that;\n      }\n      ObjectType thiz = (ObjectType) this;\n      ObjectType other = (ObjectType) that;\n      if (other.isStructurallyEquivalentTo(thiz)) {\n        return other;\n      }\n    }\n    return JSTypeNative.NO_OBJECT_TYPE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..e95eb904 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,55 +279,45 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+  private JSType greatestSubtypeInternal(JSType that) {\n+    checkNotNull(that);\n+\n+    if (this.isUnknownType() || this.equals(that)) {\n+      return that;\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+\n+    if (that.isUnknownType()) {\n+      return this;\n     }\n-  }\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+    if (this.isAllType() || that.isNoType() || this.equals(that)) {\n+      return this;\n     }\n-  }\n \n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n+    if (this.isNoType() || that.isAllType()) {\n+      return that;\n+    }\n \n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n+    if (this.isUnionType()) {\n+      return ((UnionType) this).greatestSubtype(that);\n+    }\n+    if (that.isUnionType()) {\n+      return ((UnionType) that).greatestSubtype(this);\n+    }\n \n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n+    if (isObject()) {\n+      if (!that.isObject()) {\n+        return that;\n+      }\n+      ObjectType thiz = (ObjectType) this;\n+      ObjectType other = (ObjectType) that;\n+      if (other.isStructurallyEquivalentTo(thiz)) {\n+        return other;\n       }\n     }\n+    return JSTypeNative.NO_OBJECT_TYPE;\n+  }\n+    }\n     return true;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}