{
    "patch": "    private Integer getBasicRow(final int col) {\n        Integer row = null;\n        double maxValue = 0.0;\n        for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n            double absValue = Math.abs(getEntry(i, col));\n            if (absValue > maxValue && !MathUtils.equals(absValue, 0.0, epsilon)) {\n                row = i;\n                maxValue = absValue;\n            } else if (absValue > 0 && absValue == maxValue) {\n                row = null;\n            }\n        }\n        return row;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 0ab790cd6..ca420fec3 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -271,13 +271,14 @@ class SimplexTableau implements Serializable {\n      */\n     private Integer getBasicRow(final int col) {\n         Integer row = null;\n+        double maxValue = 0.0;\n         for (int i = getNumObjectiveFunctions(); i < getHeight(); i++) {\n-            if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {\n-                if (row == null) {\n+            double absValue = Math.abs(getEntry(i, col));\n+            if (absValue > maxValue && !MathUtils.equals(absValue, 0.0, epsilon)) {\n                 row = i;\n-                } else {\n-                return null;\n-                }\n+                maxValue = absValue;\n+            } else if (absValue > 0 && absValue == maxValue) {\n+                row = null;\n             }\n         }\n         return row;",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<3.694872120962248E7>",
    "test_result": "FAIL"
}