{
    "patch": "        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n            \n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n      \n        try {\n            iChronology.validate(newPartial, newValues);\n        } catch (IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Invalid field type: \" + fieldType, ex);\n        }\n            \n        return newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..f1f8e7c5 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,18 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        // use public constructor to ensure full validation\n+        // this isn't overly efficient, but is safe\n+            \n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+      \n+        try {\n+            iChronology.validate(newPartial, newValues);\n+        } catch (IllegalArgumentException ex) {\n+            throw new IllegalArgumentException(\"Invalid field type: \" + fieldType, ex);\n+        }\n+            \n+        return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}