{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Check for hex (0x) or octal (0) prefix\n    final int length = str.length();\n    final boolean isHex = (length > 1 && str.charAt(0) == '0' && (str.charAt(1) == 'x' || str.charAt(1) == 'X'));\n    final boolean isOctal = (length > 1 && str.charAt(0) == '0' && str.charAt(1) != 'x' && str.charAt(1) != 'X');\n    if (isHex) {\n        try {\n            return createHexNumber(str);\n        } catch (final NumberFormatException nfe) {\n            // Ignore, fallback to decimal processing\n        }\n    } else if (isOctal) {\n        try {\n            return createLong(str);\n        } catch (final NumberFormatException nfe) {\n            // Ignore, fallback to decimal processing\n        }\n    }\n\n    // Check for floating point suffixes\n    final char lastChar = str.charAt(length - 1);\n    final int decPos = str.indexOf('.');\n    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n    boolean isFloat = false;\n    boolean isDouble = false;\n\n    // Handle Float suffixes\n    if (lastChar == 'f' || lastChar == 'F') {\n        if (expPos == length - 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        isFloat = true;\n    }\n\n    // Handle Double suffixes\n    if (lastChar == 'd' || lastChar == 'D') {\n        if (expPos == length - 1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        isDouble = true;\n    }\n\n    // Parse decimal or scientific notation values without trailing F/D\n    if (isFloat || isDouble) {\n        final double val = parseDouble(str.substring(0, length - 1));\n        if (isFloat) {\n            final float floatVal = (float) val;\n            if (floatVal == val && !(floatVal == 0 && !isAllZeros(str))) {\n                return floatVal;\n            }\n        } else {\n            return val;\n        }\n    }\n\n    // Delegate to standard Number parsing methods\n    if (expPos > 0) {\n        return createBigDecimal(str);\n    } else if (decPos < 0) {\n        return isHex ? createLong(str) : createInteger(str);\n    } else {\n        if (isAllZeros(str.substring(decPos + 1)) && !isOctal) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        return isFloat ? createFloat(str) : createDouble(str);\n    }\n}\n\nprivate static Float createHexNumber(final String str) throws NumberFormatException {\n    Long val = Long.decode(str);\n    if (val >= Float.MIN_VALUE && val <= Float.MAX_VALUE) {\n        return Float.valueOf(val.floatValue());\n    }\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}\n\nprivate static boolean isAllZeros(final String str) {\n    if (StringUtils.isEmpty(str)) {\n        return true;\n    }\n    for (int i = str.length() - 1; i >= 0; i--) {\n        if (str.charAt(i) != '0') {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..aa968ecb 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,167 +447,100 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    // Check for hex (0x) or octal (0) prefix\n+    final int length = str.length();\n+    final boolean isHex = (length > 1 && str.charAt(0) == '0' && (str.charAt(1) == 'x' || str.charAt(1) == 'X'));\n+    final boolean isOctal = (length > 1 && str.charAt(0) == '0' && str.charAt(1) != 'x' && str.charAt(1) != 'X');\n+    if (isHex) {\n+        try {\n+            return createHexNumber(str);\n+        } catch (final NumberFormatException nfe) {\n+            // Ignore, fallback to decimal processing\n         }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n+    } else if (isOctal) {\n+        try {\n+            return createLong(str);\n+        } catch (final NumberFormatException nfe) {\n+            // Ignore, fallback to decimal processing\n         }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n+    }\n+\n+    // Check for floating point suffixes\n+    final char lastChar = str.charAt(length - 1);\n+    final int decPos = str.indexOf('.');\n+    final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+    boolean isFloat = false;\n+    boolean isDouble = false;\n+\n+    // Handle Float suffixes\n+    if (lastChar == 'f' || lastChar == 'F') {\n+        if (expPos == length - 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+        isFloat = true;\n+    }\n+\n+    // Handle Double suffixes\n+    if (lastChar == 'd' || lastChar == 'D') {\n+        if (expPos == length - 1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+        isDouble = true;\n+    }\n \n+    // Parse decimal or scientific notation values without trailing F/D\n+    if (isFloat || isDouble) {\n+        final double val = parseDouble(str.substring(0, length - 1));\n+        if (isFloat) {\n+            final float floatVal = (float) val;\n+            if (floatVal == val && !(floatVal == 0 && !isAllZeros(str))) {\n+                return floatVal;\n             }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n         } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            return createBigInteger(str);\n+            return val;\n         }\n+    }\n \n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+    // Delegate to standard Number parsing methods\n+    if (expPos > 0) {\n+        return createBigDecimal(str);\n+    } else if (decPos < 0) {\n+        return isHex ? createLong(str) : createInteger(str);\n+    } else {\n+        if (isAllZeros(str.substring(decPos + 1)) && !isOctal) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n+        return isFloat ? createFloat(str) : createDouble(str);\n+    }\n+}\n \n-        return createBigDecimal(str);\n+private static Float createHexNumber(final String str) throws NumberFormatException {\n+    Long val = Long.decode(str);\n+    if (val >= Float.MIN_VALUE && val <= Float.MAX_VALUE) {\n+        return Float.valueOf(val.floatValue());\n     }\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n+\n+private static boolean isAllZeros(final String str) {\n+    if (StringUtils.isEmpty(str)) {\n+        return true;\n+    }\n+    for (int i = str.length() - 1; i >= 0; i--) {\n+        if (str.charAt(i) != '0') {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: method isAllZeros(String) is already defined in class NumberUtils",
    "test_result": "ERROR"
}