{
    "patch": "import org.hamcrest.StringDescription;\nimport org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\nimport org.mockito.exceptions.verification.junit.MockitoAssertionError;\nimport org.mockito.internal.verification.VerificationOverTimeImpl;\nimport org.mockito.verification.VerificationData;\n\npublic void verify(VerificationData data) {\n    AssertionError error = null;\n\n    VerificationOverTimeImpl verificationOverTime = new VerificationOverTimeImpl(timeout, pollingPeriod);\n    verificationOverTime.start();\n\n    try {\n        delegate.verify(data);\n        if (returnOnSuccess) {\n            return;\n        } else {\n            error = null;\n        }\n    } catch (MockitoAssertionError | ArgumentsAreDifferent e) {\n        error = handleVerifyException(e);\n    }\n\n    verificationOverTime.update();\n    long elapsedTime = verificationOverTime.durationInMilliseconds();\n\n    if (error != null) {\n        throw error;\n    } else {\n        if (elapsedTime >= timeout) {\n            throw new AssertionError(String.format(\"Verification of %s timed out after %d milliseconds.\", data.getDescription(), elapsedTime));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..1a47ad22e 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -72,31 +72,40 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *\n      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n      */\n-    public void verify(VerificationData data) {\n-        AssertionError error = null;\n-\n-        timer.start();\n-        while (timer.isCounting()) {\n-            try {\n-                delegate.verify(data);\n-\n-                if (returnOnSuccess) {\n-                    return;\n-                } else {\n-                    error = null;\n-                }\n-            } catch (MockitoAssertionError e) {\n-                error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n-                error = handleVerifyException(e);\n-            }\n+import org.hamcrest.StringDescription;\n+import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;\n+import org.mockito.exceptions.verification.junit.MockitoAssertionError;\n+import org.mockito.internal.verification.VerificationOverTimeImpl;\n+import org.mockito.verification.VerificationData;\n+\n+public void verify(VerificationData data) {\n+    AssertionError error = null;\n+\n+    VerificationOverTimeImpl verificationOverTime = new VerificationOverTimeImpl(timeout, pollingPeriod);\n+    verificationOverTime.start();\n+\n+    try {\n+        delegate.verify(data);\n+        if (returnOnSuccess) {\n+            return;\n+        } else {\n+            error = null;\n         }\n+    } catch (MockitoAssertionError | ArgumentsAreDifferent e) {\n+        error = handleVerifyException(e);\n+    }\n \n-        if (error != null) {\n-            throw error;\n+    verificationOverTime.update();\n+    long elapsedTime = verificationOverTime.durationInMilliseconds();\n+\n+    if (error != null) {\n+        throw error;\n+    } else {\n+        if (elapsedTime >= timeout) {\n+            throw new AssertionError(String.format(\"Verification of %s timed out after %d milliseconds.\", data.getDescription(), elapsedTime));\n         }\n     }\n+}\n \n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}