{
    "patch": "int indexOfDot = namespace != null ? namespace.lastIndexOf('.') : -1;\nif (indexOfDot > 0 && indexOfDot != namespace.length() - 1) {\n  // There is a dot not at the beginning or end of the namespace.\n  ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n  Preconditions.checkNotNull(parentName);\n  Preconditions.checkNotNull(parentName.replacementNode);\n  parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n} else {\n  // Handle the cases where the dot is at the beginning or end of the namespace, or where there are no dots.\n  compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..6c35703f 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,17 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+int indexOfDot = namespace != null ? namespace.lastIndexOf('.') : -1;\n+if (indexOfDot > 0 && indexOfDot != namespace.length() - 1) {\n+  // There is a dot not at the beginning or end of the namespace.\n+  ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n+  Preconditions.checkNotNull(parentName);\n+  Preconditions.checkNotNull(parentName.replacementNode);\n+  parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n+} else {\n+  // Handle the cases where the dot is at the beginning or end of the namespace, or where there are no dots.\n+  compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);\n+}\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "java.lang.IllegalArgumentException",
    "test_result": "FAIL"
}