{
    "patch": "return (Double.isNaN(min) || Double.isNaN(max) || f == null) ? Double.NaN :\n        (f.value(min) * f.value(max) > 0) ? Double.NaN :\n        solve(f, min, initial) * solve(f, initial, max) > 0 ? Double.NaN :\n        solve(f, min, initial) != Double.NaN ? solve(f, min, initial) :\n        solve(f, initial, max);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..b3258ef22 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,11 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+return (Double.isNaN(min) || Double.isNaN(max) || f == null) ? Double.NaN :\n+        (f.value(min) * f.value(max) > 0) ? Double.NaN :\n+        solve(f, min, initial) * solve(f, initial, max) > 0 ? Double.NaN :\n+        solve(f, min, initial) != Double.NaN ? solve(f, min, initial) :\n+        solve(f, initial, max);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<NaN>",
    "test_result": "FAIL"
}