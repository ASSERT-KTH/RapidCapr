{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    ReferenceMap references = new ReferenceMap();\n    int pos = 0;\n    for (Node currentArg : argList.children()) {\n      Var var = fnScope.getVar(currentArg.getString());\n      references.addRoot(var);\n      if (referenced.contains(var)) {\n        pos++;\n      } else {\n        boolean lastArg = currentArg == argList.getLastChild();\n        Node block = NodeUtil.getEnclosingNode(currentArg);\n        if (currentArg.isDefaultValue()\n            && NodeUtil.isImmutableValue(currentArg.getLastChild())) {\n          // Handle the case where the unreferenced parameter has a default value.\n          block.removeChild(currentArg);\n          if (block.isParamList()\n              && lastArg\n              && block.getChildCount() > pos) {\n            List<Node> toRename = new ArrayList<>();\n            toRename.addAll(references.getOriginalNameSet(var));\n            for (Node renameNode : toRename) {\n              argumentRenamer.add(renameNode, currentArg, currentArg.getNext());\n              compiler.reportCodeChange();\n            }\n          }\n        } else if (lastArg && nodeIsSimple(block)) {\n          // If the function has only one argument (the one removed) and that\n          // argument is defined as \"simple\",\n          // we can't remove it.\n          return;\n        } else if (lastArg && !removeFirstArgInExterns\n            && block.getParent().isFunction()\n            && block.getNext() == null) {\n          // In externs, we don't attempt to remove the 1st argument since it could\n          // be defining a property.\n          //\n          // We can also not remove the first argument if it's\n          // the only one in the param list, where the param list is shared\n          // with a function expression sibling.\n          return;\n        } else {\n          if (lastArg) {\n            // If the last argument cannot be renamed, we cannot remove it\n            for (Node n = currentArg.getNext();\n                n != null;\n                n = n.getNext()) {\n              if (n.isName()) {\n                // the argument could be renamed\n                List<Node> toRename = new ArrayList<>();\n                toRename.addAll(references.getOriginalNameSet(var));\n                for (Node renameNode : toRename) {\n                  argumentRenamer.add(\n                      renameNode,\n                      currentArg,\n                      currentArg.getNext());\n                  compiler.reportCodeChange();\n                }\n              } else {\n                // there is at least one parameter after the last parameter\n                return;\n              }\n            }\n          }\n          Node nameNode = currentArg.getFirstChild();\n          NodeUtil.removeChild(argList, currentArg);\n          scope.getVar(nameNode.getString()).removeReference(nameNode);\n          compiler.reportCodeChange();\n          if (block.isParamList() && block.getChildCount() > pos) {\n            List<Node> toRename = new ArrayList<>();\n            toRename.addAll(references.getOriginalNameSet(var));\n            for (Node renameNode : toRename) {\n              argumentRenamer.add(\n                  renameNode,\n                  currentArg,\n                  currentArg.getNext());\n              compiler.reportCodeChange();\n            }\n          }\n        }\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0ffe28e2 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,101 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    ReferenceMap references = new ReferenceMap();\n+    int pos = 0;\n+    for (Node currentArg : argList.children()) {\n+      Var var = fnScope.getVar(currentArg.getString());\n+      references.addRoot(var);\n+      if (referenced.contains(var)) {\n+        pos++;\n+      } else {\n+        boolean lastArg = currentArg == argList.getLastChild();\n+        Node block = NodeUtil.getEnclosingNode(currentArg);\n+        if (currentArg.isDefaultValue()\n+            && NodeUtil.isImmutableValue(currentArg.getLastChild())) {\n+          // Handle the case where the unreferenced parameter has a default value.\n+          block.removeChild(currentArg);\n+          if (block.isParamList()\n+              && lastArg\n+              && block.getChildCount() > pos) {\n+            List<Node> toRename = new ArrayList<>();\n+            toRename.addAll(references.getOriginalNameSet(var));\n+            for (Node renameNode : toRename) {\n+              argumentRenamer.add(renameNode, currentArg, currentArg.getNext());\n+              compiler.reportCodeChange();\n+            }\n+          }\n+        } else if (lastArg && nodeIsSimple(block)) {\n+          // If the function has only one argument (the one removed) and that\n+          // argument is defined as \"simple\",\n+          // we can't remove it.\n+          return;\n+        } else if (lastArg && !removeFirstArgInExterns\n+            && block.getParent().isFunction()\n+            && block.getNext() == null) {\n+          // In externs, we don't attempt to remove the 1st argument since it could\n+          // be defining a property.\n+          //\n+          // We can also not remove the first argument if it's\n+          // the only one in the param list, where the param list is shared\n+          // with a function expression sibling.\n+          return;\n+        } else {\n+          if (lastArg) {\n+            // If the last argument cannot be renamed, we cannot remove it\n+            for (Node n = currentArg.getNext();\n+                n != null;\n+                n = n.getNext()) {\n+              if (n.isName()) {\n+                // the argument could be renamed\n+                List<Node> toRename = new ArrayList<>();\n+                toRename.addAll(references.getOriginalNameSet(var));\n+                for (Node renameNode : toRename) {\n+                  argumentRenamer.add(\n+                      renameNode,\n+                      currentArg,\n+                      currentArg.getNext());\n+                  compiler.reportCodeChange();\n+                }\n+              } else {\n+                // there is at least one parameter after the last parameter\n+                return;\n+              }\n+            }\n+          }\n+          Node nameNode = currentArg.getFirstChild();\n+          NodeUtil.removeChild(argList, currentArg);\n+          scope.getVar(nameNode.getString()).removeReference(nameNode);\n+          compiler.reportCodeChange();\n+          if (block.isParamList() && block.getChildCount() > pos) {\n+            List<Node> toRename = new ArrayList<>();\n+            toRename.addAll(references.getOriginalNameSet(var));\n+            for (Node renameNode : toRename) {\n+              argumentRenamer.add(\n+                  renameNode,\n+                  currentArg,\n+                  currentArg.getNext());\n+              compiler.reportCodeChange();\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}