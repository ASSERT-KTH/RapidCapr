{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    boolean hasSideEffects = false;\n    if (block.hasChildren()) {\n      // Check that the block has exactly one child before getting the first one\n      Preconditions.checkState(block.hasOneChild());\n\n      Node stmt = block.getFirstChild();\n      if (stmt.isExprResult() && stmt.getFirstChild().isQualifiedName()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      } else if (stmt.isReturn()) {\n        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n      }\n    }\n\n    Node cArg = callNode.getFirstChild().getNext();\n\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      if (fnParam != null) {\n        if (cArg != null) {\n          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n            return CanInlineResult.NO;\n          }\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n        } else if (!fnParam.isOptionalArg()) {\n          return CanInlineResult.NO;\n        }\n\n        fnParam = fnParam.getNext();\n      } else {\n        if (cArg.isSpread()) {\n          // If the last argument is a spread, we can't inline directly so we can avoid\n          // checking the other arguments.\n          return CanInlineResult.NO;\n        }\n        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..e05494a4 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -696,57 +696,53 @@ class FunctionInjector {\n \n     boolean hasSideEffects = false;\n     if (block.hasChildren()) {\n+      // Check that the block has exactly one child before getting the first one\n       Preconditions.checkState(block.hasOneChild());\n+\n       Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n+      if (stmt.isExprResult() && stmt.getFirstChild().isQualifiedName()) {\n+        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+      } else if (stmt.isReturn()) {\n         hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n       }\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+\n     Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n     if (!callNode.getFirstChild().isName()) {\n       if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n         if (cArg == null || !cArg.isThis()) {\n           return CanInlineResult.NO;\n         }\n         cArg = cArg.getNext();\n       } else {\n-        // \".apply\" call should be filtered before this.\n         Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n       }\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n     while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n         if (cArg != null) {\n           if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n             return CanInlineResult.NO;\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n           if (NodeUtil.mayEffectMutableState(cArg, compiler)\n               && NodeUtil.getNameReferenceCount(\n                   block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n+        } else if (!fnParam.isOptionalArg()) {\n+          return CanInlineResult.NO;\n         }\n \n-        // Move to the next name.\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n+      } else {\n+        if (cArg.isSpread()) {\n+          // If the last argument is a spread, we can't inline directly so we can avoid\n+          // checking the other arguments.\n+          return CanInlineResult.NO;\n+        }\n         if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n           return CanInlineResult.NO;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}