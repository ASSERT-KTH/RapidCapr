{
    "patch": "private static String extractClassNameIfGoog(Node node, Node parent,\n                                             String functionName) {\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n        if (target != null && target.getType() == Token.STRING) {\n          className = target.getString();\n        }\n      }\n    }\n  }\n  return className;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..a27f4cf6 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -194,7 +194,23 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null) {\n+private static String extractClassNameIfGoog(Node node, Node parent,\n+                                             String functionName) {\n+  String className = null;\n+  if (NodeUtil.isExprCall(parent)) {\n+    Node callee = node.getFirstChild();\n+    if (callee != null && callee.getType() == Token.GETPROP) {\n+      String qualifiedName = callee.getQualifiedName();\n+      if (functionName.equals(qualifiedName)) {\n+        Node target = callee.getNext();\n+        if (target != null && target.getType() == Token.STRING) {\n+          className = target.getString();\n+        }\n+      }\n+    }\n+  }\n+  return className;\n+}\n             className = target.getString();\n           }\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}