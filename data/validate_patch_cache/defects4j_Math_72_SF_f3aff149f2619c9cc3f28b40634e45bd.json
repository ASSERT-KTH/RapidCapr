{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate function at min, max, and initial\n    final double yMin = f.value(min);\n    final double yMax = f.value(max);\n    final double yInitial = f.value(initial);\n\n    // If either min or max is a root, return that endpoint\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    }\n    if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // If initial is already a root, return it\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Check that min and max bracket the root\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    // Redefining variables to have consistent names with the original code\n    // to make below explanation clearer\n    double newInitial = initial;\n    double newFunctionValue = yInitial;\n\n    // Reducing the intervals containing the root\n    double delta = 0;\n    double oldDelta = Double.MAX_VALUE;\n    while (true) {\n        // Set xMin and xMax to the two endpoints that bracket the root\n        double xMin = newInitial < max ? newInitial : max;\n        double xMax = newInitial > min ? newInitial : min;\n\n        // Set variable tolerance to the maximum of relative tolerance times x value\n        // and absolute tolerance\n        double tolerance = Math.max(relativeAccuracy * Math.abs(newInitial), absoluteAccuracy);\n\n        // Check if change in initial is sufficiently small\n        if (Math.abs(oldDelta) <= tolerance) {\n            setResult(newInitial, 0);\n            return result;\n        }\n\n        oldDelta = delta;\n\n        // Try quadratic interpolation, if it is accurate and leads\n        // to a better approximation, use it\n        double newDelta = Double.MAX_VALUE;\n        double a = (yMin - 2 * yInitial + yMax) / (xMin - 2 * newInitial + xMax);\n        double b = (",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..4a8cfff1d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,70 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    // Evaluate function at min, max, and initial\n+    final double yMin = f.value(min);\n+    final double yMax = f.value(max);\n+    final double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // If either min or max is a root, return that endpoint\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+    if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // If initial is already a root, return it\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // Check that min and max bracket the root\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    // Redefining variables to have consistent names with the original code\n+    // to make below explanation clearer\n+    double newInitial = initial;\n+    double newFunctionValue = yInitial;\n+\n+    // Reducing the intervals containing the root\n+    double delta = 0;\n+    double oldDelta = Double.MAX_VALUE;\n+    while (true) {\n+        // Set xMin and xMax to the two endpoints that bracket the root\n+        double xMin = newInitial < max ? newInitial : max;\n+        double xMax = newInitial > min ? newInitial : min;\n+\n+        // Set variable tolerance to the maximum of relative tolerance times x value\n+        // and absolute tolerance\n+        double tolerance = Math.max(relativeAccuracy * Math.abs(newInitial), absoluteAccuracy);\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        // Check if change in initial is sufficiently small\n+        if (Math.abs(oldDelta) <= tolerance) {\n+            setResult(newInitial, 0);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        oldDelta = delta;\n \n-    }\n+        // Try quadratic interpolation, if it is accurate and leads\n+        // to a better approximation, use it\n+        double newDelta = Double.MAX_VALUE;\n+        double a = (yMin - 2 * yInitial + yMax) / (xMin - 2 * newInitial + xMax);\n+        double b = (\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}