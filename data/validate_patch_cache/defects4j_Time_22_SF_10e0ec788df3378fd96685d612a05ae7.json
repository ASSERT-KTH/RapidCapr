{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    if (duration >= JodaConstants.MILLIS_PER_YEAR || duration <= -JodaConstants.MILLIS_PER_YEAR) {\n        setValue(ChronoUnit.YEARS, duration / JodaConstants.MILLIS_PER_YEAR);\n        duration %= JodaConstants.MILLIS_PER_YEAR;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_MONTH || duration <= -JodaConstants.MILLIS_PER_MONTH) {\n        setValue(ChronoUnit.MONTHS, duration / JodaConstants.MILLIS_PER_MONTH);\n        duration %= JodaConstants.MILLIS_PER_MONTH;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_WEEK || duration <= -JodaConstants.MILLIS_PER_WEEK) {\n        setValue(ChronoUnit.WEEKS, duration / JodaConstants.MILLIS_PER_WEEK);\n        duration %= JodaConstants.MILLIS_PER_WEEK;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_DAY || duration <= -JodaConstants.MILLIS_PER_DAY) {\n        setValue(ChronoUnit.DAYS, duration / JodaConstants.MILLIS_PER_DAY);\n        duration %= JodaConstants.MILLIS_PER_DAY;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_HOUR || duration <= -JodaConstants.MILLIS_PER_HOUR) {\n        setValue(ChronoUnit.HOURS, duration / JodaConstants.MILLIS_PER_HOUR);\n        duration %= JodaConstants.MILLIS_PER_HOUR;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_MINUTE || duration <= -JodaConstants.MILLIS_PER_MINUTE) {\n        setValue(ChronoUnit.MINUTES, duration / JodaConstants.MILLIS_PER_MINUTE);\n        duration %= JodaConstants.MILLIS_PER_MINUTE;\n    }\n    if (duration >= JodaConstants.MILLIS_PER_SECOND || duration <= -JodaConstants.MILLIS_PER_SECOND) {\n        setValue(ChronoUnit.SECONDS, duration / JodaConstants.MILLIS_PER_SECOND);\n        duration %= JodaConstants.MILLIS_PER_SECOND;\n    }\n    setValue(ChronoUnit.MILLIS, duration);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..5e346d68 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -218,10 +218,38 @@ public abstract class BasePeriod\n      *\n      * @param duration  the duration, in milliseconds\n      */\n-    protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+protected BasePeriod(long duration) {\n+    super();\n+    if (duration >= JodaConstants.MILLIS_PER_YEAR || duration <= -JodaConstants.MILLIS_PER_YEAR) {\n+        setValue(ChronoUnit.YEARS, duration / JodaConstants.MILLIS_PER_YEAR);\n+        duration %= JodaConstants.MILLIS_PER_YEAR;\n     }\n+    if (duration >= JodaConstants.MILLIS_PER_MONTH || duration <= -JodaConstants.MILLIS_PER_MONTH) {\n+        setValue(ChronoUnit.MONTHS, duration / JodaConstants.MILLIS_PER_MONTH);\n+        duration %= JodaConstants.MILLIS_PER_MONTH;\n+    }\n+    if (duration >= JodaConstants.MILLIS_PER_WEEK || duration <= -JodaConstants.MILLIS_PER_WEEK) {\n+        setValue(ChronoUnit.WEEKS, duration / JodaConstants.MILLIS_PER_WEEK);\n+        duration %= JodaConstants.MILLIS_PER_WEEK;\n+    }\n+    if (duration >= JodaConstants.MILLIS_PER_DAY || duration <= -JodaConstants.MILLIS_PER_DAY) {\n+        setValue(ChronoUnit.DAYS, duration / JodaConstants.MILLIS_PER_DAY);\n+        duration %= JodaConstants.MILLIS_PER_DAY;\n+    }\n+    if (duration >= JodaConstants.MILLIS_PER_HOUR || duration <= -JodaConstants.MILLIS_PER_HOUR) {\n+        setValue(ChronoUnit.HOURS, duration / JodaConstants.MILLIS_PER_HOUR);\n+        duration %= JodaConstants.MILLIS_PER_HOUR;\n+    }\n+    if (duration >= JodaConstants.MILLIS_PER_MINUTE || duration <= -JodaConstants.MILLIS_PER_MINUTE) {\n+        setValue(ChronoUnit.MINUTES, duration / JodaConstants.MILLIS_PER_MINUTE);\n+        duration %= JodaConstants.MILLIS_PER_MINUTE;\n+    }\n+    if (duration >= JodaConstants.MILLIS_PER_SECOND || duration <= -JodaConstants.MILLIS_PER_SECOND) {\n+        setValue(ChronoUnit.SECONDS, duration / JodaConstants.MILLIS_PER_SECOND);\n+        duration %= JodaConstants.MILLIS_PER_SECOND;\n+    }\n+    setValue(ChronoUnit.MILLIS, duration);\n+}\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}