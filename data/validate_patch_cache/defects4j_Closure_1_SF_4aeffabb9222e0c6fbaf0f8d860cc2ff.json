{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      boolean shouldStop = false;\n      for (Node arg = argList.getFirstChild(); arg != null && !shouldStop;) {\n        Node nextArg = arg.getNext();\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        if (var != null && !referenced.contains(var)) {\n          if (unusedFunctionArgs == null) {\n            unusedFunctionArgs = new ArrayList<>();\n          }\n          unusedFunctionArgs.add(arg);\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n          arg = nextArg;\n        } else {\n          shouldStop = true;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..cc9d01f3 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -367,16 +367,6 @@ class RemoveUnusedVars\n    * @param fnScope The scope inside the function\n    */\n   private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n     Node function = fnScope.getRootNode();\n \n     Preconditions.checkState(function.isFunction());\n@@ -390,14 +380,21 @@ class RemoveUnusedVars\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+      boolean shouldStop = false;\n+      for (Node arg = argList.getFirstChild(); arg != null && !shouldStop;) {\n+        Node nextArg = arg.getNext();\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        if (var != null && !referenced.contains(var)) {\n+          if (unusedFunctionArgs == null) {\n+            unusedFunctionArgs = new ArrayList<>();\n+          }\n+          unusedFunctionArgs.add(arg);\n+          argList.removeChild(arg);\n           compiler.reportCodeChange();\n+          arg = nextArg;\n         } else {\n-          break;\n+          shouldStop = true;\n         }\n       }\n     } else {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}