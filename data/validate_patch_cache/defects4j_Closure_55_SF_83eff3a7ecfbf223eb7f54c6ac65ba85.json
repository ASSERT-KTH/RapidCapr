{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (!NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n    if (info != null && info.isConstructor()) {\n      return false;\n    }\n    Block functionBody = NodeUtil.getFunctionBody(n);\n    // Return true only if the function body is not empty and none of the child nodes is an object literal.\n    if (functionBody != null && !functionBody.isEmpty()) {\n      for (Node child : functionBody.children()) {\n        if (child.isObjectLit() || child.isClass()) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..7ffb865d 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,24 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (!NodeUtil.isFunctionExpression(n)) {\n+      return false;\n+    }\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+    if (info != null && info.isConstructor()) {\n+      return false;\n+    }\n+    Block functionBody = NodeUtil.getFunctionBody(n);\n+    // Return true only if the function body is not empty and none of the child nodes is an object literal.\n+    if (functionBody != null && !functionBody.isEmpty()) {\n+      for (Node child : functionBody.children()) {\n+        if (child.isObjectLit() || child.isClass()) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}