{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (n == null) {\n    return false;\n  }\n  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  return (n.isCall() && n.getFirstChild().isQualifiedName() && n.getLastChild().isFunction()\n      && NodeUtil.getFunctionBody(n.getLastChild()).isBlock());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..2d1335b9 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,16 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (n == null) {\n+    return false;\n   }\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    return true;\n+  }\n+  return (n.isCall() && n.getFirstChild().isQualifiedName() && n.getLastChild().isFunction()\n+      && NodeUtil.getFunctionBody(n.getLastChild()).isBlock());\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}