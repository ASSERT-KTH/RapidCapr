{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                if (n.getFirstChild().isName()) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  name = n.getFirstChild().getString();\n                }\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  Node lvalue = n.getFirstChild();\n                  name = lvalue.isName() ? lvalue.getString() : null;\n                }\n            }\n          }\n          break;\n        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalue = n.getFirstChild();\n                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n                name = n.getString();\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  name = n.getFirstChild().getString();\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node gramps = parent.getParent();\n                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                name = n.getString();\n                break;\n            }\n          }\n          break;\n        case Token.GETPROP:\n          // This may be a namespaced name get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                  isPropAssign = true;\n                }\n                break;\n              case Token.INC:\n              case Token.DEC:\n                if (n.getFirstChild().isGetProp()) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  name = n.getFirstChild().getQualifiedName();\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  name = n.getFirstChild().getQualifiedName();\n                }\n            }\n          }\n          break;\n        default:\n          return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..b675ebca 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -364,6 +364,95 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                if (n.getFirstChild().isName()) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  name = n.getFirstChild().getString();\n+                }\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  Node lvalue = n.getFirstChild();\n+                  name = lvalue.isName() ? lvalue.getString() : null;\n+                }\n+            }\n+          }\n+          break;\n+        case Token.NAME:\n+          // This may be a variable get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.VAR:\n+                isSet = true;\n+                Node rvalue = n.getFirstChild();\n+                type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+                name = n.getString();\n+                break;\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  name = n.getFirstChild().getString();\n+                }\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              case Token.FUNCTION:\n+                Node gramps = parent.getParent();\n+                if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                name = n.getString();\n+                break;\n+            }\n+          }\n+          break;\n+        case Token.GETPROP:\n+          // This may be a namespaced name get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                  isPropAssign = true;\n+                }\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                if (n.getFirstChild().isGetProp()) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  name = n.getFirstChild().getQualifiedName();\n+                }\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  name = n.getFirstChild().getQualifiedName();\n+                }\n+            }\n+          }\n+          break;\n+        default:\n+          return;\n+      }\n+\n+      // We are only interested in global names.\n+      if (!isGlobalNameReference(name, scope)) {\n+        return;\n+      }\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}