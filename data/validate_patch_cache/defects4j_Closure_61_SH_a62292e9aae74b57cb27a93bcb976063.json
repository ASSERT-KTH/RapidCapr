{
    "patch": "    if (nameNode.isQualifiedName()) {\n      Node targetNode = nameNode.getFirstChild();\n      while (targetNode.getType() == Token.GETPROP) {\n        targetNode = targetNode.getFirstChild();\n      }\n      if (targetNode.getType() == Token.NAME) {\n        String targetName = targetNode.getString();\n        if (targetName.equals(\"Math\") || targetName.equals(\"console\") || targetName.equals(\"JSON\")) {\n          return false;\n        }\n        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n          if (nameNode.getFirstChild().getType() == Token.REGEXP\n              && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n            return false;\n          } else if (nameNode.getFirstChild().getType() == Token.STRING\n              && STRING_REGEXP_METHODS.contains(\n                  nameNode.getLastChild().getString())) {\n            Node param = nameNode.getNext();\n            if (param != null &&\n                (param.getType() == Token.STRING\n                    || param.getType() == Token.REGEXP))\n            return false;\n          }\n        }\n      }\n    } else if (nameNode.getType() == Token.NAME) {\n      String name = nameNode.getString();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n    } else if (nameNode.getType() == Token.GETPROP) {\n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n    }\n\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..20a7589c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -955,6 +955,50 @@ public final class NodeUtil {\n       }\n \n       // Functions in the \"Math\" namespace have no side effects.\n+    if (nameNode.isQualifiedName()) {\n+      Node targetNode = nameNode.getFirstChild();\n+      while (targetNode.getType() == Token.GETPROP) {\n+        targetNode = targetNode.getFirstChild();\n+      }\n+      if (targetNode.getType() == Token.NAME) {\n+        String targetName = targetNode.getString();\n+        if (targetName.equals(\"Math\") || targetName.equals(\"console\") || targetName.equals(\"JSON\")) {\n+          return false;\n+        }\n+        if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+          if (nameNode.getFirstChild().getType() == Token.REGEXP\n+              && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n+            return false;\n+          } else if (nameNode.getFirstChild().getType() == Token.STRING\n+              && STRING_REGEXP_METHODS.contains(\n+                  nameNode.getLastChild().getString())) {\n+            Node param = nameNode.getNext();\n+            if (param != null &&\n+                (param.getType() == Token.STRING\n+                    || param.getType() == Token.REGEXP))\n+            return false;\n+          }\n+        }\n+      }\n+    } else if (nameNode.getType() == Token.NAME) {\n+      String name = nameNode.getString();\n+      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+        return false;\n+      }\n+    } else if (nameNode.getType() == Token.GETPROP) {\n+      if (callNode.hasOneChild()\n+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+                nameNode.getLastChild().getString())) {\n+        return false;\n+      }\n+\n+      if (callNode.isOnlyModifiesThisCall()\n+          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+        return false;\n+      }\n+    }\n+\n+    return true;\n \n       if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n         if (nameNode.getFirstChild().getType() == Token.REGEXP",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}