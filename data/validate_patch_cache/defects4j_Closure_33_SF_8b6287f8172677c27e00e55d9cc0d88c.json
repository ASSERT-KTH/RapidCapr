{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (propType == null) {\n          propType = getNativeType(JSTypeNative.NO_TYPE);\n        }\n        if (!isPropertyTypeDeclared(prop)) {\n          if (!hasProperty(prop)) {\n            defineInferredProperty(prop, propType, null);            \n          } else {\n            JSType declType = getPropertyType(prop);\n            // Parameters may be declared multiple times for overloading\n            // methods, but not with different types\n            Preconditions.checkState(\n                getPropDeclaredType(prop).equals(declType == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) : declType) ||\n                    declType == null,\n                    \"Unexpected declaration: in:\\n%s\\nwith prop: %s. DeclType: %s, propType: %s\",\n                    this, prop, declType, propType);\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..4df8fbb0 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -567,13 +567,23 @@ class PrototypeObjectType extends ObjectType {\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n         JSType propType = constraintObj.getPropertyType(prop);\n+        if (propType == null) {\n+          propType = getNativeType(JSTypeNative.NO_TYPE);\n+        }\n         if (!isPropertyTypeDeclared(prop)) {\n-          JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+            defineInferredProperty(prop, propType, null);            \n+          } else {\n+            JSType declType = getPropertyType(prop);\n+            // Parameters may be declared multiple times for overloading\n+            // methods, but not with different types\n+            Preconditions.checkState(\n+                getPropDeclaredType(prop).equals(declType == null ?\n+                    getNativeType(JSTypeNative.NO_TYPE) : declType) ||\n+                    declType == null,\n+                    \"Unexpected declaration: in:\\n%s\\nwith prop: %s. DeclType: %s, propType: %s\",\n+                    this, prop, declType, propType);\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}