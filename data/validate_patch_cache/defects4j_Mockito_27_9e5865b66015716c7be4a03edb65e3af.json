{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n   \n    // Iterate over all callbacks and replace the MethodInterceptorFilter\n    // This allows us to handle cases where the index of the callback we want to change is not 0\n    for (Callback callback : ((Factory)mock).getCallbacks()) {\n        if (callback instanceof MethodInterceptorFilter) {\n            MethodInterceptorFilter oldFilter = (MethodInterceptorFilter) callback;\n            if (oldFilter.getMockHandler() == oldMockHandler) {\n                ((Factory)mock).setCallback(((Factory)mock).getCallbacks().indexOf(oldFilter), newFilter);\n                return;\n            }\n        }\n    }\n    throw new IllegalStateException(\"Unable to find callback to replace\");\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..f60a160ec 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,24 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+   \n+    // Iterate over all callbacks and replace the MethodInterceptorFilter\n+    // This allows us to handle cases where the index of the callback we want to change is not 0\n+    for (Callback callback : ((Factory)mock).getCallbacks()) {\n+        if (callback instanceof MethodInterceptorFilter) {\n+            MethodInterceptorFilter oldFilter = (MethodInterceptorFilter) callback;\n+            if (oldFilter.getMockHandler() == oldMockHandler) {\n+                ((Factory)mock).setCallback(((Factory)mock).getCallbacks().indexOf(oldFilter), newFilter);\n+                return;\n+            }\n+        }\n+    }\n+    throw new IllegalStateException(\"Unable to find callback to replace\");\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}