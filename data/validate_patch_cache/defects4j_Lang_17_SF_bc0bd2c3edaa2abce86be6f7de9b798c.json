{
    "patch": "public static String unescape(String s) {\n    StringBuilder sb = new StringBuilder(s.length());\n    int i = 0;\n    while (i < s.length()) {\n        char c = s.charAt(i);\n        if (c == '\\\\') {\n            if (i + 1 < s.length()) {\n                char c2 = s.charAt(i + 1);\n                switch (c2) {\n                case '\\\\':\n                    sb.append('\\\\');\n                    break;\n                case 'n':\n                    sb.append('\\n');\n                    break;\n                case 't':\n                    sb.append('\\t');\n                    break;\n                case 'r':\n                    sb.append('\\r');\n                    break;\n                case 'b':\n                    sb.append('\\b');\n                    break;\n                case 'f':\n                    sb.append('\\f');\n                    break;\n                case '\\'':\n                    sb.append('\\'');\n                    break;\n                case '\\\"':\n                    sb.append('\\\"');\n                    break;\n                case 'u':\n                    if (i + 5 < s.length()) {\n                        int codePoint = Integer.parseInt(s.substring(i + 2, i + 6), 16);\n                        sb.append(Character.toChars(codePoint));\n                        i += 4;\n                    } else {\n                        sb.append('\\\\');\n                    }\n                    break;\n                default:\n                    sb.append('\\\\');\n                    sb.append(c2);\n                    break;\n                }\n                i++;\n            } else {\n                sb.append('\\\\');\n            }\n        } else {\n            sb.append(c);\n        }\n        i++;\n    }\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..f3a536c1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,64 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescape(String s) {\n+    StringBuilder sb = new StringBuilder(s.length());\n+    int i = 0;\n+    while (i < s.length()) {\n+        char c = s.charAt(i);\n+        if (c == '\\\\') {\n+            if (i + 1 < s.length()) {\n+                char c2 = s.charAt(i + 1);\n+                switch (c2) {\n+                case '\\\\':\n+                    sb.append('\\\\');\n+                    break;\n+                case 'n':\n+                    sb.append('\\n');\n+                    break;\n+                case 't':\n+                    sb.append('\\t');\n+                    break;\n+                case 'r':\n+                    sb.append('\\r');\n+                    break;\n+                case 'b':\n+                    sb.append('\\b');\n+                    break;\n+                case 'f':\n+                    sb.append('\\f');\n+                    break;\n+                case '\\'':\n+                    sb.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    sb.append('\\\"');\n+                    break;\n+                case 'u':\n+                    if (i + 5 < s.length()) {\n+                        int codePoint = Integer.parseInt(s.substring(i + 2, i + 6), 16);\n+                        sb.append(Character.toChars(codePoint));\n+                        i += 4;\n                     } else {\n-                        pos++;\n+                        sb.append('\\\\');\n                     }\n+                    break;\n+                default:\n+                    sb.append('\\\\');\n+                    sb.append(c2);\n+                    break;\n                 }\n-                pos--;\n+                i++;\n+            } else {\n+                sb.append('\\\\');\n             }\n-            pos++;\n+        } else {\n+            sb.append(c);\n         }\n+        i++;\n     }\n+    return sb.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}