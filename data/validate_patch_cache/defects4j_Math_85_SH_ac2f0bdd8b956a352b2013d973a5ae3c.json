{
    "patch": "        double previous = Double.POSITIVE_INFINITY;\n        while (numIterations < maximumIterations) {\n            a = Math.max(initial - range, lowerBound);\n            b = Math.min(initial + range, upperBound);\n            fa = function.value(a);\n            fb = function.value(b);\n            if (fa * fb <= 0.0) {\n                return (fa == 0.0) ? new double[]{a, a} :\n                       (fb == 0.0) ? new double[]{b, b} :\n                       new double[]{a, b};\n            }\n\n            final double delta = (numIterations % 2 == 0) ? (a - initial) : (b - initial);\n            if (FastMath.abs(delta) <= FastMath.abs(0.5 * previous)) {\n                previous = delta;\n            } else {\n                previous = 0.5 * delta;\n            }\n            initial += previous;\n            ++numIterations;\n        }\n\n        throw new ConvergenceException(MessageFormat.format(\n                \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}\",\n                numIterations, maximumIterations, initial, lowerBound, upperBound));",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..2c4184fc8 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -195,7 +195,31 @@ public class UnivariateRealSolverUtils {\n         } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n                 ((a > lowerBound) || (b < upperBound)));\n    \n-        if (fa * fb >= 0.0 ) {\n+        double previous = Double.POSITIVE_INFINITY;\n+        while (numIterations < maximumIterations) {\n+            a = Math.max(initial - range, lowerBound);\n+            b = Math.min(initial + range, upperBound);\n+            fa = function.value(a);\n+            fb = function.value(b);\n+            if (fa * fb <= 0.0) {\n+                return (fa == 0.0) ? new double[]{a, a} :\n+                       (fb == 0.0) ? new double[]{b, b} :\n+                       new double[]{a, b};\n+            }\n+\n+            final double delta = (numIterations % 2 == 0) ? (a - initial) : (b - initial);\n+            if (FastMath.abs(delta) <= FastMath.abs(0.5 * previous)) {\n+                previous = delta;\n+            } else {\n+                previous = 0.5 * delta;\n+            }\n+            initial += previous;\n+            ++numIterations;\n+        }\n+\n+        throw new ConvergenceException(MessageFormat.format(\n+                \"number of iterations={0}, maximum iterations={1}, initial={2}, lower bound={3}, upper bound={4}\",\n+                numIterations, maximumIterations, initial, lowerBound, upperBound));\n             throw new ConvergenceException(\n                       \"number of iterations={0}, maximum iterations={1}, \" +\n                       \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}