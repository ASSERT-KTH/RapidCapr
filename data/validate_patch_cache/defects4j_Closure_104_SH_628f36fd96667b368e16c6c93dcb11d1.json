{
    "patch": "    if (result != null && !result.isBottom()) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n      // We don't know in advance all properties an object has, and the set of all properties that\n      // all alternates have in common can be empty.\n    }\n    return true;\n  }\n\n  @Override\n  public boolean mayHaveProp(JSType other, String prop) {\n    for (JSType alternate : alternates) {\n      if (!alternate.mayHaveProp(other, prop)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public boolean hasProp(String prop) {\n    for (JSType alternate : alternates) {\n      if (alternate.hasProp(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  public boolean hasConstantProp(String prop) {\n    for (JSType alternate : alternates) {\n      if (alternate.hasConstantProp(prop)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  public boolean isTruthy() {\n    for (JSType alternate : alternates) {\n      if (alternate.isTruthy()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  public boolean isConstructor() {\n    for (JSType alternate : alternates) {\n      if (alternate.isConstructor()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  public boolean isInterface() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isInterface()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public boolean isEnumType() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isEnumType()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public ObjectType getObjTypeIfSingletonObj() {\n    if (getAlternates().size() == 1) {\n      ObjectType objType = getAlternates().get(0).getObjTypeIfSingletonObj();\n      if (objType != null) {\n        return objType;\n      }\n    }\n    return null;\n  }\n\n  @Override\n  public Collection<String> getPropertyNames() {\n    Set<String> result = Sets.newHashSet();\n    for (JSType alternate : alternates) {\n      result.addAll(alternate.getPropertyNames());\n    }\n    return result;\n  }\n\n  @Override\n  public JSType meetWith(JSType that) {\n    if (that == null) {\n      return this;\n    } else if (that.isBottom()) {\n      return that;\n    } else if (that.isUnknown() || that.isTop()) {\n      return this;\n    } else if (that.isUnionType()) {\n      UnionTypeBuilder builder = new UnionTypeBuilder(this.getTypeRegistry());\n      builder.addAlternate(that);\n      for (JSType alternate : alternates) {\n        JSType newAlternate = alternate.meetWith(that);\n        if (!newAlternate.isBottom()) {\n          builder.addAlternate(newAlternate);\n        }\n      }\n      return builder.build();\n    } else {\n      UnionTypeBuilder builder = new UnionTypeBuilder(this.getTypeRegistry());\n      for (JSType alternate : alternates) {\n        builder.addAlternate(alternate.meetWith(that));\n      }\n      return builder.build();\n    }\n  }\n\n  @Override\n  public String toString() {\n    return Joiner.on('|').join(alternates);\n  }\n}``",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..3be7590e 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,173 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+    if (result != null && !result.isBottom()) {\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n+\n+  /**\n+   * Two union types are equal if they have the same number of alternates\n+   * and all alternates are equal.\n+   */\n+  @Override\n+  public boolean equals(Object object) {\n+    if (object instanceof UnionType) {\n+      UnionType that = (UnionType) object;\n+      return alternates.equals(that.alternates);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return alternates.hashCode();\n+  }\n+\n+  @Override\n+  public boolean isUnionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isObject()) {\n+        return false;\n+      }\n+      // We don't know in advance all properties an object has, and the set of all properties that\n+      // all alternates have in common can be empty.\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean mayHaveProp(JSType other, String prop) {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.mayHaveProp(other, prop)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean hasProp(String prop) {\n+    for (JSType alternate : alternates) {\n+      if (alternate.hasProp(prop)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean hasConstantProp(String prop) {\n+    for (JSType alternate : alternates) {\n+      if (alternate.hasConstantProp(prop)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isTruthy() {\n+    for (JSType alternate : alternates) {\n+      if (alternate.isTruthy()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isConstructor() {\n+    for (JSType alternate : alternates) {\n+      if (alternate.isConstructor()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public boolean isInterface() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isInterface()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isEnumType() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isEnumType()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public ObjectType getObjTypeIfSingletonObj() {\n+    if (getAlternates().size() == 1) {\n+      ObjectType objType = getAlternates().get(0).getObjTypeIfSingletonObj();\n+      if (objType != null) {\n+        return objType;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public Collection<String> getPropertyNames() {\n+    Set<String> result = Sets.newHashSet();\n+    for (JSType alternate : alternates) {\n+      result.addAll(alternate.getPropertyNames());\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public JSType meetWith(JSType that) {\n+    if (that == null) {\n+      return this;\n+    } else if (that.isBottom()) {\n+      return that;\n+    } else if (that.isUnknown() || that.isTop()) {\n+      return this;\n+    } else if (that.isUnionType()) {\n+      UnionTypeBuilder builder = new UnionTypeBuilder(this.getTypeRegistry());\n+      builder.addAlternate(that);\n+      for (JSType alternate : alternates) {\n+        JSType newAlternate = alternate.meetWith(that);\n+        if (!newAlternate.isBottom()) {\n+          builder.addAlternate(newAlternate);\n+        }\n+      }\n+      return builder.build();\n+    } else {\n+      UnionTypeBuilder builder = new UnionTypeBuilder(this.getTypeRegistry());\n+      for (JSType alternate : alternates) {\n+        builder.addAlternate(alternate.meetWith(that));\n+      }\n+      return builder.build();\n+    }\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return Joiner.on('|').join(alternates);\n+  }\n+}``\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}