{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    \n    Map<String, Var> referencedArgVar = new HashMap<>();\n    for (Var refVar : referenced) {\n      if (refVar.getParentNode() == argList) {\n        referencedArgVar.put(refVar.getName(), refVar);\n      }\n    }\n    \n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          Node prevArg = lastArg.getPrevious();\n          argList.removeChild(lastArg);\n          if (AnnotationInjector.regularInjectsAnnotations(compiler)) {\n            String argName = lastArg.getString();\n            NodeUtil.addNewStringNode(\"@\" + CONSOLE_ANNO, argName, lastArg, NodeUtil.Side.LEFT, compiler);\n            Var argVar = fnScope.getVar(argName);\n            argVar.setFromFunctionNode(false);\n            argVar.setInputName(\"\");\n            argVar.setParameter(true);\n          }\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n        lastArg = prevArg;\n      }\n      Node firstArg = argList.getFirstChild();\n      while (firstArg != null) {\n        if (!referencedArgVar.containsKey(firstArg.getString())) {\n          return;\n        }\n        firstArg = firstArg.getNext();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..12c1b979 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,57 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    \n+    Map<String, Var> referencedArgVar = new HashMap<>();\n+    for (Var refVar : referenced) {\n+      if (refVar.getParentNode() == argList) {\n+        referencedArgVar.put(refVar.getName(), refVar);\n+      }\n+    }\n+    \n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null) {\n+        Var var = fnScope.getVar(lastArg.getString());\n+        if (!referenced.contains(var)) {\n+          Node prevArg = lastArg.getPrevious();\n+          argList.removeChild(lastArg);\n+          if (AnnotationInjector.regularInjectsAnnotations(compiler)) {\n+            String argName = lastArg.getString();\n+            NodeUtil.addNewStringNode(\"@\" + CONSOLE_ANNO, argName, lastArg, NodeUtil.Side.LEFT, compiler);\n+            Var argVar = fnScope.getVar(argName);\n+            argVar.setFromFunctionNode(false);\n+            argVar.setInputName(\"\");\n+            argVar.setParameter(true);\n+          }\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+        lastArg = prevArg;\n+      }\n+      Node firstArg = argList.getFirstChild();\n+      while (firstArg != null) {\n+        if (!referencedArgVar.containsKey(firstArg.getString())) {\n+          return;\n+        }\n+        firstArg = firstArg.getNext();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}