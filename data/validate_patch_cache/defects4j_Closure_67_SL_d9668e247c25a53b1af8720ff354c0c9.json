{
    "patch": "```\n&& assign.getParent() != null \n   && NodeUtil.isStatement(assign.getParent())\n   && (assign.getNext() == null || assign.getNext().getType() == Token.EMPTY)\n   && n != null \n   && n.getType() == Token.GETPROP \n   && n.getFirstChild() != null \n   && n.getFirstChild().getType",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..62966679 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,14 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+```\n+&& assign.getParent() != null \n+   && NodeUtil.isStatement(assign.getParent())\n+   && (assign.getNext() == null || assign.getNext().getType() == Token.EMPTY)\n+   && n != null \n+   && n.getType() == Token.GETPROP \n+   && n.getFirstChild() != null \n+   && n.getFirstChild().getType\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}