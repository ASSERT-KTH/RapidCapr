{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (elem.getType() != Token.STRING) {\n        return n;\n      }\n      if (elem.getNext() != null && elem.getNext().getType() == Token.STRING) {\n        if (joinString.isEmpty()) {\n          return n;\n        }\n        joinString = NodeUtil.getStringValue(elem).concat(joinString)\n            .concat(elem.getNext().getString());\n        elem = elem.getNext().getNext();\n      } else if (joinString.isEmpty() & (elem == arrayNode.getFirstChild())) {\n        return n;\n      } else {\n        arrayFoldedChildren.add(elem);\n        elem = elem.getNext();\n      }\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedStringNode.getType() != Token.STRING) {\n          Node replacement = NodeUtil.getStringNode(\"\");\n          replacement = new Node(Token.ADD,\n              replacement.copyInformationFrom(n),\n              foldedStringNode).srcref(n);\n          foldedStringNode = replacement;\n        }\n        Node newStringNode = Node.newString(NodeUtil.getStringValue(foldedStringNode)\n            .concat(joinString)).srcref(n);\n        n.getParent().replaceChild(n, newStringNode);\n        reportCodeChange();\n        return newStringNode;\n      default:\n        int kJoinOverhead = \"[].join()\".length();\n        int foldedSize = InlineCostEstimator.getCost(NodeUtil.newArrayNode(\n            arrayFoldedChildren.toArray(new Node[0])));\n\n        if (joinString.isEmpty()) {\n          foldedSize += kJoinOverhead;\n        } else {\n          foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1)\n              + kJoinOverhead;\n        }\n\n        if (foldedSize > originalSize) {\n          return n;\n        }\n\n        if (joinString.isEmpty()) {\n          arrayNode.detachChildren();\n        } else {\n          arrayFoldedChildren.add(0, NodeUtil.newStringNode(\"\"));\n          arrayNode.detachChildren();\n          arrayNode.addChildToBack(NodeUtil.newStringNode(joinString));\n        }\n\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n\n        reportCodeChange();\n        break;\n    }\n\n    return arrayNode;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..0d17c2a1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -386,48 +386,29 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n+      if (elem.getType() != Token.STRING) {\n+        return n;\n+      }\n+      if (elem.getNext() != null && elem.getNext().getType() == Token.STRING) {\n+        if (joinString.isEmpty()) {\n+          return n;\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        joinString = NodeUtil.getStringValue(elem).concat(joinString)\n+            .concat(elem.getNext().getString());\n+        elem = elem.getNext().getNext();\n+      } else if (joinString.isEmpty() & (elem == arrayNode.getFirstChild())) {\n+        return n;\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n+        elem = elem.getNext();\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n@@ -438,41 +419,51 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         return emptyStringNode;\n       case 1:\n         Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n+          Node replacement = NodeUtil.getStringNode(\"\");\n+          replacement = new Node(Token.ADD,\n+              replacement.copyInformationFrom(n),\n+              foldedStringNode).srcref(n);\n           foldedStringNode = replacement;\n         }\n-        n.getParent().replaceChild(n, foldedStringNode);\n+        Node newStringNode = Node.newString(NodeUtil.getStringValue(foldedStringNode)\n+            .concat(joinString)).srcref(n);\n+        n.getParent().replaceChild(n, newStringNode);\n         reportCodeChange();\n-        return foldedStringNode;\n+        return newStringNode;\n       default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n         int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+        int foldedSize = InlineCostEstimator.getCost(NodeUtil.newArrayNode(\n+            arrayFoldedChildren.toArray(new Node[0])));\n+\n+        if (joinString.isEmpty()) {\n+          foldedSize += kJoinOverhead;\n+        } else {\n+          foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1)\n+              + kJoinOverhead;\n+        }\n+\n         if (foldedSize > originalSize) {\n           return n;\n         }\n-        arrayNode.detachChildren();\n+\n+        if (joinString.isEmpty()) {\n+          arrayNode.detachChildren();\n+        } else {\n+          arrayFoldedChildren.add(0, NodeUtil.newStringNode(\"\"));\n+          arrayNode.detachChildren();\n+          arrayNode.addChildToBack(NodeUtil.newStringNode(joinString));\n+        }\n+\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n+\n         reportCodeChange();\n         break;\n     }\n \n-    return n;\n+    return arrayNode;\n   }\n \n   /**\n@@ -642,4 +633,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}