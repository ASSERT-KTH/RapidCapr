{
    "patch": "import org.apache.commons.math3.analysis.UnivariateFunction;\nimport org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;\nimport org.apache.commons.math3.analysis.integration.SimpsonIntegrator;\nimport org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.exception.TooManyEvaluationsException;\nimport org.apache.commons.math3.util.MathUtils;\nimport org.apache.commons.math3.util.Precision;\n\npublic class FixedSolver extends BaseAbstractUnivariateIntegrator {\n\n    /** Serializable version identifier */\n    private static final long serialVersionUID = -4205672796793124520L;\n\n    /** Function to solve. */\n    private final UnivariateFunction f;\n\n    /**\n     * Construct an integrator for the given function.\n     *\n     * @param f Function to integrate.\n     * @param relativeAccuracy Relative accuracy of the result.\n     * @param absoluteAccuracy Absolute accuracy of the result.\n     * @param minimalIterationCount Minimum number of iterations.\n     * @param maximalIterationCount Maximum number of iterations.\n     */\n    public FixedSolver(UnivariateFunction f,\n            double relativeAccuracy,\n            double absoluteAccuracy,\n            int minimalIterationCount,\n            int maximalIterationCount) {\n        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);\n        this.f = f;\n    }\n\n    /**\n     * Construct an integrator with default settings.\n     *\n     * @param f Function to integrate.\n     */\n    public FixedSolver(UnivariateFunction f) {\n        this(f, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,\n            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,\n            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,\n            BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);\n    }\n\n    /**\n     * If the function value at {@code x} is zero within the given tolerance, returns\n     * {@code x} as a root of the function.\n     *\n     * @param x Point at which to evaluate the function.\n     * @return {@code x} as a root of the function if the function value at {@code x}\n     *  is zero within the given tolerance, {@code Double.NaN} otherwise.\n     */\n    private double checkAbsoluteError(double x) {\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double fx = f.value(x);\n        if (Precision.equals(fx, 0d, absoluteAccuracy)) {\n            return x;\n        }\n        return Double.NaN;\n    }\n\n    /**\n     * If either of the endpoints of the interval are roots, return it.\n     *\n     * @param min Left endpoint of the interval.\n     * @param max Right endpoint of the interval.\n     * @return A root of the function at endpoints if it satisfies the absolute accuracy,\n     * {@code Double.NaN} otherwise.\n     */\n    private double getBisectionRoot(double min, double max) {\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double fmin = f.value(min);\n        if (Precision.equals(fmin, 0d, absoluteAccuracy)) {\n            return min;\n        }\n        final double fmax = f.value(max);\n        if (Precision.equals(fmax, 0d, absoluteAccuracy)) {\n            return max;\n        }\n        return Double.NaN;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    @Override\n    protected double doIntegrate()\n        throws TooManyEvaluationsException, MaxCountExceededException {\n        verifyInterval(getMin(), getMax());\n        final double min = getMin();\n        final double max = getMax();\n        final double initial = (min + max) / 2;\n        double oldt = stage(f, min, max, initial, 1);\n        final int i = 2;\n        for (;;) {\n            final double t = stage(f, min, max, initial, i);\n            if (i >= getMinimalIterationCount()) {\n                final double delta = Math.abs(t - oldt);\n                final double rLimit = getRelativeAccuracy() * (Math.abs(oldt) + Math.abs(t)) / 2;\n                if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) {\n                    return t;\n                }\n            }\n            if (Double.isInfinite(t)) {\n                throw new TooManyEvaluationsException();\n            }\n            oldt = t;\n        }\n    }\n\n    /**\n     * Compute the n-th stage integral of local approximation, on the\n     * interval [a,b].\n     * The function computes the integral {@code T(f,(a+b)/2,s,(b-a)/2))} by\n     * applying the Newton-Cotes integration rules recursively. The interval\n     * is divided into 2 segments of equal width. At each iteration, the\n     * integral over each segment is approximated by the corresponding\n     * Newton-Cotes rule, and may be recursively subdivided.\n     *\n     * @param f Function to integrate.\n     * @param a Lower bound of the integration interval.\n     * @param b Upper bound of the integration interval.\n     * @param s Current value of the function at the mid-point of the interval\n     * ({@code s = f((a+b)/2)}).\n     * @param n Number of previous bisections (equal to the sub-intervals number + 1).\n     * @return Integral of the function over the (a,b) interval.\n     * @throws TooManyEvaluationsException if the maximum number of evaluations\n     * is exceeded.\n     */\n    private double stage(final UnivariateFunction f,\n                         final double a,\n                         final double b,\n                         final double s,\n                         final int n)\n        throws TooManyEvaluationsException {\n        final SimpsonIntegrator si = new SimpsonIntegrator();\n        final double integral1 = si.stage(f, a, b, s, n);\n        final double integral2 = si.stage(f, a, (a + b) / 2, f.value((a + b) / 2), n - 1);\n        final double integral3 = si.stage(f, (a + b) / 2, b, f.value((a + b) / 2), n - 1);\n        return integral2 + integral3 - integral1;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * If the function value at {@code x} is zero within the given tolerance, returns\n     * {@code x} as a root of the function. If either of the endpoints of the\n     * interval are roots, return it.\n     */\n    @Override\n    protected double doSolve()\n        throws TooManyEvaluationsException, MaxCountExceededException {\n        final double min = getMin();\n        final double max = getMax();\n        final double initial = getStartValue();\n        verifyInterval(min, max);\n        final double absoluteAccuracy = getAbsoluteAccuracy();\n        final double relativeAccuracy = getRelativeAccuracy();\n        final double functionValueAccuracy = getFunctionValueAccuracy();\n        MathUtils.checkOrder(min, initial, max);\n        final double yInitial = f.value(initial);\n        final double absInit = Math.abs(yInitial);\n        if (absInit <= functionValueAccuracy) {\n            return initial;\n        }\n        final double yMin = f.value(min);\n        final double absMin = Math.abs(yMin);\n        if (absMin <= functionValueAccuracy) {\n            return min;\n        }\n        final double yMax = f.value(max);\n        final double absMax = Math.abs(yMax);\n        if (absMax <= functionValueAccuracy) {\n            return max;\n        }\n        final double sign = yMin * yMax;\n        if (sign >= 0) {\n            // check if either value is close to a zero\n            final double minRoot = checkAbsoluteError(min);\n            if (!Double.isNaN(minRoot)) {\n                return minRoot;\n            }\n            final double maxRoot = checkAbsoluteError(max);\n            if (!Double.isNaN(maxRoot)) {\n                return maxRoot;\n            }\n            // neither value is close to zero and min and max do not bracket root.\n            final double factory = (2d - sign) / 3d;\n            double x0 = min;\n            double y0 = yMin;\n            double x2 = max;\n            double y2 = yMax;\n            double x1 = initial;\n            double y1 = yInitial;\n            double oldX = Double.POSITIVE_INFINITY;\n            while (true) {\n                if (MathUtils.equals(x0, oldX, relativeAccuracy)) {\n                    // We have not converged: try to switch to another algorithm\n                    return getBisectionRoot(min, max);\n                }\n                oldX = x0;\n                final double delta1 = y1 - y0;\n                final double delta2 = y2 - y1;\n                final double w1 = x1 - x0;\n                final double w2 = x2 - x1;\n                final double w3 = w1 + w2;\n                final double t1 = delta1 * w2;\n                final double t2 = delta2 * w1;\n\n                final double p = Math.abs(t1 - t2);\n                if ((p <= (factory * relativeAccuracy * w3)) ||\n                    (p <= absoluteAccuracy)) {\n                    // We have converged!\n                    return x1;\n                }\n                final double t12 = t1 + t2;\n                final double d1 = t12 >= 0 ? Math.sqrt(t12)\n                                : -Math.sqrt(-t12);\n                final double dx = p / d1;\n                final double tempX = x1 - (w2 * dx / w3);\n                if (MathUtils.equals(tempX, x1, relativeAccuracy)) {\n                    // We have not converged: try to switch to another algorithm\n                    return getBisectionRoot(min, max);\n                }\n                final double newX = x1 - dx;\n                final double newY = f.value(newX);\n                if ((newY == 0) ||\n                    (Math.abs(newY) < functionValueAccuracy)) {\n                    return newX;\n                }\n                if (sign * (y1 - newY) > 0)  {\n                    if (sign * (y0 - y1) > 0) {\n                        x0 = newX;\n                        y0 = newY;\n                    } else if (sign * (y2 - y1) > 0) {\n                        x2 = newX;\n                        y2 = newY;\n                    } else {\n                        x0 = x1;\n                        y0 = y1;\n                        x2 = newX;\n                        y2 = newY;\n                    }\n                } else {\n                    if (sign * (y0 - y1) > 0) {\n                        x2 = x1;\n                        y2 = y1;\n                        x0 = newX;\n                        y0 = newY;\n                    } else if (sign * (y2 - y1) > 0) {\n                        x0 = x1;\n                        y0 = y1;\n                        x2 = newX;\n                        y2 = newY;\n                    } else {\n                        if (absInit < absMin) {\n                            x0 = initial;\n                            y0 = yInitial;\n                        } else {\n                            x2 = initial;\n                            y2 = yInitial;\n                        }\n                        x1 = newX;\n                        y1 = newY;\n                    }\n                }\n            }\n        } else {\n            return getBisectionRoot(min, max);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..d27cc958e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,280 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+import org.apache.commons.math3.analysis.integration.BaseAbstractUnivariateIntegrator;\n+import org.apache.commons.math3.analysis.integration.SimpsonIntegrator;\n+import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.exception.TooManyEvaluationsException;\n+import org.apache.commons.math3.util.MathUtils;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class FixedSolver extends BaseAbstractUnivariateIntegrator {\n+\n+    /** Serializable version identifier */\n+    private static final long serialVersionUID = -4205672796793124520L;\n+\n+    /** Function to solve. */\n+    private final UnivariateFunction f;\n+\n+    /**\n+     * Construct an integrator for the given function.\n+     *\n+     * @param f Function to integrate.\n+     * @param relativeAccuracy Relative accuracy of the result.\n+     * @param absoluteAccuracy Absolute accuracy of the result.\n+     * @param minimalIterationCount Minimum number of iterations.\n+     * @param maximalIterationCount Maximum number of iterations.\n+     */\n+    public FixedSolver(UnivariateFunction f,\n+            double relativeAccuracy,\n+            double absoluteAccuracy,\n+            int minimalIterationCount,\n+            int maximalIterationCount) {\n+        super(relativeAccuracy, absoluteAccuracy, minimalIterationCount, maximalIterationCount);\n+        this.f = f;\n+    }\n+\n+    /**\n+     * Construct an integrator with default settings.\n+     *\n+     * @param f Function to integrate.\n+     */\n+    public FixedSolver(UnivariateFunction f) {\n+        this(f, BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_ABSOLUTE_ACCURACY,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_MIN_ITERATIONS_COUNT,\n+            BaseAbstractUnivariateIntegrator.DEFAULT_MAX_ITERATIONS_COUNT);\n+    }\n+\n+    /**\n+     * If the function value at {@code x} is zero within the given tolerance, returns\n+     * {@code x} as a root of the function.\n+     *\n+     * @param x Point at which to evaluate the function.\n+     * @return {@code x} as a root of the function if the function value at {@code x}\n+     *  is zero within the given tolerance, {@code Double.NaN} otherwise.\n+     */\n+    private double checkAbsoluteError(double x) {\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        final double fx = f.value(x);\n+        if (Precision.equals(fx, 0d, absoluteAccuracy)) {\n+            return x;\n+        }\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * If either of the endpoints of the interval are roots, return it.\n+     *\n+     * @param min Left endpoint of the interval.\n+     * @param max Right endpoint of the interval.\n+     * @return A root of the function at endpoints if it satisfies the absolute accuracy,\n+     * {@code Double.NaN} otherwise.\n+     */\n+    private double getBisectionRoot(double min, double max) {\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        final double fmin = f.value(min);\n+        if (Precision.equals(fmin, 0d, absoluteAccuracy)) {\n+            return min;\n+        }\n+        final double fmax = f.value(max);\n+        if (Precision.equals(fmax, 0d, absoluteAccuracy)) {\n+            return max;\n+        }\n+        return Double.NaN;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    protected double doIntegrate()\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n+        verifyInterval(getMin(), getMax());\n+        final double min = getMin();\n+        final double max = getMax();\n+        final double initial = (min + max) / 2;\n+        double oldt = stage(f, min, max, initial, 1);\n+        final int i = 2;\n+        for (;;) {\n+            final double t = stage(f, min, max, initial, i);\n+            if (i >= getMinimalIterationCount()) {\n+                final double delta = Math.abs(t - oldt);\n+                final double rLimit = getRelativeAccuracy() * (Math.abs(oldt) + Math.abs(t)) / 2;\n+                if ((delta <= rLimit) || (delta <= getAbsoluteAccuracy())) {\n+                    return t;\n+                }\n+            }\n+            if (Double.isInfinite(t)) {\n+                throw new TooManyEvaluationsException();\n+            }\n+            oldt = t;\n+        }\n+    }\n+\n+    /**\n+     * Compute the n-th stage integral of local approximation, on the\n+     * interval [a,b].\n+     * The function computes the integral {@code T(f,(a+b)/2,s,(b-a)/2))} by\n+     * applying the Newton-Cotes integration rules recursively. The interval\n+     * is divided into 2 segments of equal width. At each iteration, the\n+     * integral over each segment is approximated by the corresponding\n+     * Newton-Cotes rule, and may be recursively subdivided.\n+     *\n+     * @param f Function to integrate.\n+     * @param a Lower bound of the integration interval.\n+     * @param b Upper bound of the integration interval.\n+     * @param s Current value of the function at the mid-point of the interval\n+     * ({@code s = f((a+b)/2)}).\n+     * @param n Number of previous bisections (equal to the sub-intervals number + 1).\n+     * @return Integral of the function over the (a,b) interval.\n+     * @throws TooManyEvaluationsException if the maximum number of evaluations\n+     * is exceeded.\n+     */\n+    private double stage(final UnivariateFunction f,\n+                         final double a,\n+                         final double b,\n+                         final double s,\n+                         final int n)\n+        throws TooManyEvaluationsException {\n+        final SimpsonIntegrator si = new SimpsonIntegrator();\n+        final double integral1 = si.stage(f, a, b, s, n);\n+        final double integral2 = si.stage(f, a, (a + b) / 2, f.value((a + b) / 2), n - 1);\n+        final double integral3 = si.stage(f, (a + b) / 2, b, f.value((a + b) / 2), n - 1);\n+        return integral2 + integral3 - integral1;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * If the function value at {@code x} is zero within the given tolerance, returns\n+     * {@code x} as a root of the function. If either of the endpoints of the\n+     * interval are roots, return it.\n+     */\n+    @Override\n+    protected double doSolve()\n+        throws TooManyEvaluationsException, MaxCountExceededException {\n+        final double min = getMin();\n+        final double max = getMax();\n+        final double initial = getStartValue();\n         verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n+        final double absoluteAccuracy = getAbsoluteAccuracy();\n+        final double relativeAccuracy = getRelativeAccuracy();\n+        final double functionValueAccuracy = getFunctionValueAccuracy();\n+        MathUtils.checkOrder(min, initial, max);\n+        final double yInitial = f.value(initial);\n+        final double absInit = Math.abs(yInitial);\n+        if (absInit <= functionValueAccuracy) {\n+            return initial;\n+        }\n+        final double yMin = f.value(min);\n+        final double absMin = Math.abs(yMin);\n+        if (absMin <= functionValueAccuracy) {\n+            return min;\n+        }\n+        final double yMax = f.value(max);\n+        final double absMax = Math.abs(yMax);\n+        if (absMax <= functionValueAccuracy) {\n+            return max;\n+        }\n+        final double sign = yMin * yMax;\n         if (sign >= 0) {\n             // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+            final double minRoot = checkAbsoluteError(min);\n+            if (!Double.isNaN(minRoot)) {\n+                return minRoot;\n+            }\n+            final double maxRoot = checkAbsoluteError(max);\n+            if (!Double.isNaN(maxRoot)) {\n+                return maxRoot;\n+            }\n+            // neither value is close to zero and min and max do not bracket root.\n+            final double factory = (2d - sign) / 3d;\n+            double x0 = min;\n+            double y0 = yMin;\n+            double x2 = max;\n+            double y2 = yMax;\n+            double x1 = initial;\n+            double y1 = yInitial;\n+            double oldX = Double.POSITIVE_INFINITY;\n+            while (true) {\n+                if (MathUtils.equals(x0, oldX, relativeAccuracy)) {\n+                    // We have not converged: try to switch to another algorithm\n+                    return getBisectionRoot(min, max);\n+                }\n+                oldX = x0;\n+                final double delta1 = y1 - y0;\n+                final double delta2 = y2 - y1;\n+                final double w1 = x1 - x0;\n+                final double w2 = x2 - x1;\n+                final double w3 = w1 + w2;\n+                final double t1 = delta1 * w2;\n+                final double t2 = delta2 * w1;\n+\n+                final double p = Math.abs(t1 - t2);\n+                if ((p <= (factory * relativeAccuracy * w3)) ||\n+                    (p <= absoluteAccuracy)) {\n+                    // We have converged!\n+                    return x1;\n+                }\n+                final double t12 = t1 + t2;\n+                final double d1 = t12 >= 0 ? Math.sqrt(t12)\n+                                : -Math.sqrt(-t12);\n+                final double dx = p / d1;\n+                final double tempX = x1 - (w2 * dx / w3);\n+                if (MathUtils.equals(tempX, x1, relativeAccuracy)) {\n+                    // We have not converged: try to switch to another algorithm\n+                    return getBisectionRoot(min, max);\n+                }\n+                final double newX = x1 - dx;\n+                final double newY = f.value(newX);\n+                if ((newY == 0) ||\n+                    (Math.abs(newY) < functionValueAccuracy)) {\n+                    return newX;\n+                }\n+                if (sign * (y1 - newY) > 0)  {\n+                    if (sign * (y0 - y1) > 0) {\n+                        x0 = newX;\n+                        y0 = newY;\n+                    } else if (sign * (y2 - y1) > 0) {\n+                        x2 = newX;\n+                        y2 = newY;\n+                    } else {\n+                        x0 = x1;\n+                        y0 = y1;\n+                        x2 = newX;\n+                        y2 = newY;\n+                    }\n+                } else {\n+                    if (sign * (y0 - y1) > 0) {\n+                        x2 = x1;\n+                        y2 = y1;\n+                        x0 = newX;\n+                        y0 = newY;\n+                    } else if (sign * (y2 - y1) > 0) {\n+                        x0 = x1;\n+                        y0 = y1;\n+                        x2 = newX;\n+                        y2 = newY;\n+                    } else {\n+                        if (absInit < absMin) {\n+                            x0 = initial;\n+                            y0 = yInitial;\n+                        } else {\n+                            x2 = initial;\n+                            y2 = yInitial;\n+                        }\n+                        x1 = newX;\n+                        y1 = newY;\n+                    }\n+                }\n+            }\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            return getBisectionRoot(min, max);\n         }\n-\n-        return ret;\n     }\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}