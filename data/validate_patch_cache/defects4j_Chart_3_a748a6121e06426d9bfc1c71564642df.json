{
    "patch": "    public String generateToolTipFragment(String toolTipText) {\n        if ((toolTipText == null) || (toolTipText.equals(\"\"))) {\n            return \"\";\n        }\n        String tooltip = ImageMapUtilities.htmlEscape(toolTipText);\n        StringBuffer fragment = new StringBuffer(\"\\\" title=\\\"\");\n        for (int i = 0; i < tooltip.length(); i++) {\n            char c = tooltip.charAt(i);\n            switch (c) {\n                case '\\r':\n                    fragment.append(\"&#013;\");\n                    break;\n                case '\\\"':\n                    fragment.append(\"&quot;\");\n                    break;\n                case '\\'':\n                    fragment.append(\"&#039;\");\n                    break;\n                case '<':\n                    fragment.append(\"&lt;\");\n                    break;\n                case '>':\n                    fragment.append(\"&gt;\");\n                    break;\n                case '\\\\':\n                    fragment.append(\"&#092;\");\n                    break;\n                case '&':\n                    fragment.append(\"&amp;\");\n                    break;\n                default:\n                    fragment.append(c);\n                    break;\n            }\n        }\n        return fragment.append(\"\\\" alt=\\\"\\\"\").toString();\n    }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..50ff732 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,43 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+    public String generateToolTipFragment(String toolTipText) {\n+        if ((toolTipText == null) || (toolTipText.equals(\"\"))) {\n+            return \"\";\n+        }\n+        String tooltip = ImageMapUtilities.htmlEscape(toolTipText);\n+        StringBuffer fragment = new StringBuffer(\"\\\" title=\\\"\");\n+        for (int i = 0; i < tooltip.length(); i++) {\n+            char c = tooltip.charAt(i);\n+            switch (c) {\n+                case '\\r':\n+                    fragment.append(\"&#013;\");\n+                    break;\n+                case '\\\"':\n+                    fragment.append(\"&quot;\");\n+                    break;\n+                case '\\'':\n+                    fragment.append(\"&#039;\");\n+                    break;\n+                case '<':\n+                    fragment.append(\"&lt;\");\n+                    break;\n+                case '>':\n+                    fragment.append(\"&gt;\");\n+                    break;\n+                case '\\\\':\n+                    fragment.append(\"&#092;\");\n+                    break;\n+                case '&':\n+                    fragment.append(\"&amp;\");\n+                    break;\n+                default:\n+                    fragment.append(c);\n+                    break;\n+            }\n+        }\n+        return fragment.append(\"\\\" alt=\\\"\\\"\").toString();\n+    }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}