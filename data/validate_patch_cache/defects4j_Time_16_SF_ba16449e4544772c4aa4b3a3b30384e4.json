{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        long offsetMillis = 0;\n\n        if (iOffsetParsed) {\n            DateTimeZone parsedZone = null;\n            int pos = position;\n            if (pos < text.length()) {\n                char c = text.charAt(pos);\n                if (c == '+' || c == '-') {\n                    Integer[] parsed = parseIntoWithOffset(text, pos, false);\n                    int newOffset = parsed[1].intValue();\n                    parsedZone = DateTimeZone.forOffsetMillis(newOffset);\n                    offsetMillis = parsed[1].intValue();\n                    if (newOffset != parsedZone.getOffset(instantMillis)) {\n                        chrono = chrono.withZone(parsedZone);\n                        instantMillis = parsedZone.getMillisKeepLocal(\n                                chrono, instantMillis);\n                    }\n                    pos = parsed[0].intValue();\n                }\n            }\n            if (parsedZone == null) {\n                chrono = selectChronology(chrono);\n                offsetMillis = chrono.getZone().getOffset(instantMillis);\n            }\n            position = pos;\n        } else if (iZone != null) {\n            chrono = selectChronology(chrono).withZone(iZone);\n            offsetMillis = iZone.getOffset(instantMillis);\n        } else {\n            chrono = selectChronology(chrono);\n        }\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis + offsetMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                offsetMillis = bucket.getOffsetInteger().intValue();\n            }\n        }\n\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed) {\n            if (offsetMillis != 0) {\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offsetMillis);\n                chrono = chrono.withZone(parsedZone == null ? DateTimeZone.UTC : parsedZone);\n                instant.setChronology(chrono);\n                if (parsedZone != null) {\n                    instant.setZone(parsedZone);\n                }\n            }\n        } else if (iZone != null) {\n            instant.setChronology(chrono);\n            instant.setZone(iZone);\n        } else {\n            instant.setChronology(chrono);\n        }\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..1abc577f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,27 +699,68 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n+        long instantMillis = instant.getMillis();\n+        long offsetMillis = 0;\n+\n+        if (iOffsetParsed) {\n+            DateTimeZone parsedZone = null;\n+            int pos = position;\n+            if (pos < text.length()) {\n+                char c = text.charAt(pos);\n+                if (c == '+' || c == '-') {\n+                    Integer[] parsed = parseIntoWithOffset(text, pos, false);\n+                    int newOffset = parsed[1].intValue();\n+                    parsedZone = DateTimeZone.forOffsetMillis(newOffset);\n+                    offsetMillis = parsed[1].intValue();\n+                    if (newOffset != parsedZone.getOffset(instantMillis)) {\n+                        chrono = chrono.withZone(parsedZone);\n+                        instantMillis = parsedZone.getMillisKeepLocal(\n+                                chrono, instantMillis);\n+                    }\n+                    pos = parsed[0].intValue();\n+                }\n+            }\n+            if (parsedZone == null) {\n+                chrono = selectChronology(chrono);\n+                offsetMillis = chrono.getZone().getOffset(instantMillis);\n+            }\n+            position = pos;\n+        } else if (iZone != null) {\n+            chrono = selectChronology(chrono).withZone(iZone);\n+            offsetMillis = iZone.getOffset(instantMillis);\n+        } else {\n+            chrono = selectChronology(chrono);\n+        }\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            instantMillis + offsetMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                offsetMillis = bucket.getOffsetInteger().intValue();\n+            }\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n+\n+        instant.setMillis(bucket.computeMillis(false, text));\n+        if (iOffsetParsed) {\n+            if (offsetMillis != 0) {\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(offsetMillis);\n+                chrono = chrono.withZone(parsedZone == null ? DateTimeZone.UTC : parsedZone);\n+                instant.setChronology(chrono);\n+                if (parsedZone != null) {\n+                    instant.setZone(parsedZone);\n+                }\n+            }\n+        } else if (iZone != null) {\n+            instant.setChronology(chrono);\n             instant.setZone(iZone);\n+        } else {\n+            instant.setChronology(chrono);\n         }\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}