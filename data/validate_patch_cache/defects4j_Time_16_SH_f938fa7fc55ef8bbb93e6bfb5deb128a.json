{
    "patch": "        // Compute the offset to use based on whether we are parsing an offset or zone\n        Integer offset = null;\n        if (bucket.getOffsetInteger() != null) {\n            offset = bucket.getOffsetInteger();\n        } else if (bucket.getZone() != null) {\n            offset = bucket.getZone().getOffsetFromLocal(instantLocal);\n        }\n        long instantMillis = instantLocal - (offset != null ? offset.intValue() : 0);\n        instant.setMillis(instantMillis);\n        \n        if (iOffsetParsed && offset != null) {\n            instant.setZone(DateTimeZone.forOffsetMillis(offset.intValue()));\n        }\n        \n        if (bucket.getChronology() != null) {\n            instant.setChronology(bucket.getChronology());\n        }\n        \n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..3a37dc61 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,28 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        // Compute the offset to use based on whether we are parsing an offset or zone\n+        Integer offset = null;\n+        if (bucket.getOffsetInteger() != null) {\n+            offset = bucket.getOffsetInteger();\n+        } else if (bucket.getZone() != null) {\n+            offset = bucket.getZone().getOffsetFromLocal(instantLocal);\n+        }\n+        long instantMillis = instantLocal - (offset != null ? offset.intValue() : 0);\n+        instant.setMillis(instantMillis);\n+        \n+        if (iOffsetParsed && offset != null) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(offset.intValue()));\n+        }\n+        \n+        if (bucket.getChronology() != null) {\n+            instant.setChronology(bucket.getChronology());\n+        }\n+        \n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return newPos;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}