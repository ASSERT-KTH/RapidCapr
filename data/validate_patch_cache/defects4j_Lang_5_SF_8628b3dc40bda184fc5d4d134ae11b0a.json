{
    "patch": "    public static Locale toLocale(final String str) {\n        if (str == null || str.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (str.charAt(0) == '_') {\n            if (str.length() < 3 || str.charAt(1) == '_') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            final int index = str.indexOf('_', 2);\n            if (index == -1) {\n                return new Locale(\"\", str.substring(1));\n            } else {\n                return new Locale(\"\", str.substring(1, index), str.substring(index + 1));\n            }\n        }\n        final String[] parts = str.split(\"_\", -1);\n        final int len = parts.length;\n        if (len == 1) {\n            return new Locale(parts[0]);\n        } else if (len == 2) {\n            return new Locale(parts[0], parts[1]);\n        } else if (len == 3) {\n            return new Locale(parts[0], parts[1], parts[2]);\n        } else {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..68d80033 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -86,45 +86,31 @@ public class LocaleUtils {\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n     public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+        if (str == null || str.isEmpty()) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n+        if (str.charAt(0) == '_') {\n+            if (str.length() < 3 || str.charAt(1) == '_') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            final int index = str.indexOf('_', 2);\n+            if (index == -1) {\n+                return new Locale(\"\", str.substring(1));\n+            } else {\n+                return new Locale(\"\", str.substring(1, index), str.substring(index + 1));\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        }\n+        final String[] parts = str.split(\"_\", -1);\n+        final int len = parts.length;\n+        if (len == 1) {\n+            return new Locale(parts[0]);\n+        } else if (len == 2) {\n+            return new Locale(parts[0], parts[1]);\n+        } else if (len == 3) {\n+            return new Locale(parts[0], parts[1], parts[2]);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: Must be uppercase if starts with underscore",
    "test_result": "FAIL"
}