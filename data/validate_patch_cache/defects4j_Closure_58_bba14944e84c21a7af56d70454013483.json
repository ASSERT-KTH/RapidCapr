{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n    if (n == null) {\n      return;\n    }\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF: {\n        Node condition = NodeUtil.getConditionExpression(n);\n        computeGenKill(condition, gen, kill, true);\n        Node block = n.getLastChild();\n        if (block.getType() == Token.BLOCK) {\n          block = block.getFirstChild();\n        }\n        computeGenKill(block, gen, kill, conditional);\n        return;\n      }\n\n      case Token.FOR: {\n        Node init = n.getFirstChild();\n        if (init.getType() != Token.EMPTY) {\n          computeGenKill(init, gen, kill, true);\n        }\n\n        Node conditionNext = init.getNext();\n        if (conditionNext.getType() != Token.EMPTY) {\n          computeGenKill(conditionNext, gen, kill, true);\n        }\n\n        Node block = n.getLastChild();\n        if (block.getType() == Token.BLOCK) {\n          block = block.getFirstChild();\n        }\n        computeGenKill(block, gen, kill, conditional);\n        return;\n      }\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (NodeUtil.isNameDeclaration(c)) {\n            if (c.getFirstChild() != null) {\n              addToSetIfLocal(c.getFirstChild(), gen);\n              if (!conditional) {\n                addToSetIfLocal(c.getFirstChild(), kill);\n              }\n            }\n          } else {\n            computeGenKill(c.getFirstChild(), gen, kill, true);\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (lhs.isVar() && lhs.getFirstChild() != null) {\n            lhs = lhs.getFirstChild();\n          }\n          if (lhs.getType() == Token.NAME) {\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, true);\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, true);\n          }\n        }\n        return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..bd30b218 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -177,6 +177,9 @@ class LiveVariablesAnalysis extends\n    */\n   private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n+    if (n == null) {\n+      return;\n+    }\n \n     switch (n.getType()) {\n       case Token.SCRIPT:\n@@ -186,50 +189,59 @@ class LiveVariablesAnalysis extends\n \n       case Token.WHILE:\n       case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+      case Token.IF: {\n+        Node condition = NodeUtil.getConditionExpression(n);\n+        computeGenKill(condition, gen, kill, true);\n+        Node block = n.getLastChild();\n+        if (block.getType() == Token.BLOCK) {\n+          block = block.getFirstChild();\n+        }\n+        computeGenKill(block, gen, kill, conditional);\n         return;\n+      }\n \n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+      case Token.FOR: {\n+        Node init = n.getFirstChild();\n+        if (init.getType() != Token.EMPTY) {\n+          computeGenKill(init, gen, kill, true);\n         }\n+\n+        Node conditionNext = init.getNext();\n+        if (conditionNext.getType() != Token.EMPTY) {\n+          computeGenKill(conditionNext, gen, kill, true);\n+        }\n+\n+        Node block = n.getLastChild();\n+        if (block.getType() == Token.BLOCK) {\n+          block = block.getFirstChild();\n+        }\n+        computeGenKill(block, gen, kill, conditional);\n         return;\n+      }\n \n       case Token.VAR:\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+          if (NodeUtil.isNameDeclaration(c)) {\n+            if (c.getFirstChild() != null) {\n+              addToSetIfLocal(c.getFirstChild(), gen);\n+              if (!conditional) {\n+                addToSetIfLocal(c.getFirstChild(), kill);\n+              }\n             }\n+          } else {\n+            computeGenKill(c.getFirstChild(), gen, kill, true);\n           }\n         }\n         return;\n \n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n@@ -245,17 +257,19 @@ class LiveVariablesAnalysis extends\n       default:\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n           Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n+          if (lhs.isVar() && lhs.getFirstChild() != null) {\n+            lhs = lhs.getFirstChild();\n           }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n+          if (lhs.getType() == Token.NAME) {\n             addToSetIfLocal(lhs, gen);\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n+          computeGenKill(lhs.getNext(), gen, kill, true);\n+          if (!conditional) {\n+            addToSetIfLocal(lhs, kill);\n+          }\n         } else {\n           for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+            computeGenKill(c, gen, kill, true);\n           }\n         }\n         return;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}