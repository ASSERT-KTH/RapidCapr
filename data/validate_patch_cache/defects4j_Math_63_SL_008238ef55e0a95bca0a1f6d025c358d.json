{
    "patch": "import java.text.DecimalFormat;\n\npublic class Fraction {\n    private final int numerator;\n    private final int denominator;\n\n    public Fraction(int numerator, int denominator) {\n        this.numerator = numerator;\n        this.denominator = denominator;\n    }\n\n    public double doubleValue() {\n        return (double) numerator / denominator;\n    }\n\n    public double percentageValue() {\n        double percentage = multiply(100).doubleValue();\n        DecimalFormat df = new DecimalFormat(\"0.0000000000\");\n        return Double.parseDouble(df.format(percentage));\n    }\n\n    public Fraction multiply(int n) {\n        return new Fraction(numerator * n, denominator);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..5c6ea894f 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -414,7 +414,31 @@ public final class MathUtils {\n      * @return {@code true} if the values are equal.\n      */\n     public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+import java.text.DecimalFormat;\n+\n+public class Fraction {\n+    private final int numerator;\n+    private final int denominator;\n+\n+    public Fraction(int numerator, int denominator) {\n+        this.numerator = numerator;\n+        this.denominator = denominator;\n+    }\n+\n+    public double doubleValue() {\n+        return (double) numerator / denominator;\n+    }\n+\n+    public double percentageValue() {\n+        double percentage = multiply(100).doubleValue();\n+        DecimalFormat df = new DecimalFormat(\"0.0000000000\");\n+        return Double.parseDouble(df.format(percentage));\n+    }\n+\n+    public Fraction multiply(int n) {\n+        return new Fraction(numerator * n, denominator);\n+    }\n+}\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}