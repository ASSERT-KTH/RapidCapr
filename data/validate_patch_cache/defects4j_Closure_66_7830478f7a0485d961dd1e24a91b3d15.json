{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n\tList<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n\tfor (DiGraphEdge<Node, Branch> edge : branchEdges) {\n\t   if (edge.getValue() == Branch.ON_EX) {\n\t\t   return true;\n\t   }\n\t}\n\treturn false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..b3c58cee 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+\tList<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+\tfor (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+\t   if (edge.getValue() == Branch.ON_EX) {\n+\t\t   return true;\n+\t   }\n+\t}\n+\treturn false;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}