{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object fieldValue = null;\n        try {\n            field.setAccessible(true);\n            fieldValue = field.get(fieldInstance);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n        }\n        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n        if (mockCandidate == null) {\n            continue;\n        }\n        if (fieldValue == mockCandidate) {\n            // skip when the field is already set to the same mock\n            continue;\n        }\n        if (!field.getType().isAssignableFrom(mockCandidate.getClass())) {\n            continue;\n        }\n        try {\n            field.setAccessible(true);\n            field.set(fieldInstance, mockCandidate);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..65cfd417a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,35 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object fieldValue = null;\n+        try {\n+            field.setAccessible(true);\n+            fieldValue = field.get(fieldInstance);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n+        }\n+        Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+        if (mockCandidate == null) {\n+            continue;\n+        }\n+        if (fieldValue == mockCandidate) {\n+            // skip when the field is already set to the same mock\n+            continue;\n+        }\n+        if (!field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+            continue;\n+        }\n+        try {\n+            field.setAccessible(true);\n+            field.set(fieldInstance, mockCandidate);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@6cee8f5d> was not:<mockedBean>",
    "test_result": "FAIL"
}