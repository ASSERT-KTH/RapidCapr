{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        int type = n.getType();\n        Node parent = n.getParent();\n        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n            String name = n.getString();\n            Var aliasVar = null;\n            if (v.isExtern() || v.isGlobal()) {\n                // Check all the global scopes for a matching variable.\n                for (Var g : scope.getGlobalScope().getVarIterable()) {\n                    if (name.equals(g.getName())) {\n                        aliasVar = g;\n                        break;\n                    }\n                }\n            } else {\n                aliasVar = scope.getVar(name);\n            }\n            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n                aliases.put(name, aliasVar);\n                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                transformation.addAlias(name, qualifiedName);\n            } else if (aliasVar == null) {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..6b07bbbc 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -268,33 +268,36 @@ class ScopedAliases implements HotSwapCompilerPass {\n       compiler.report(t.makeError(n, error, arguments));\n       hasErrors = true;\n     }\n-\n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+        if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+            String name = n.getString();\n+            Var aliasVar = null;\n+            if (v.isExtern() || v.isGlobal()) {\n+                // Check all the global scopes for a matching variable.\n+                for (Var g : scope.getGlobalScope().getVarIterable()) {\n+                    if (name.equals(g.getName())) {\n+                        aliasVar = g;\n+                        break;\n+                    }\n+                }\n+            } else {\n+                aliasVar = scope.getVar(name);\n+            }\n+            if (aliasVar != null && aliasVar.getInitialValue() != null) {\n+                aliases.put(name, aliasVar);\n+                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                transformation.addAlias(name, qualifiedName);\n+            } else if (aliasVar == null) {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, name);\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. expected:<1> but was:<0>",
    "test_result": "FAIL"
}