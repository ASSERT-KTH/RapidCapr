{
    "patch": "import java.util.Set;\nimport com.google.common.collect.Sets;\n\npublic class PrototypeObjectType extends ObjectType {\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 1000;\n\n  private boolean prettyPrint = true;\n\n  public PrototypeObjectType(String referenceName, Registry registry) {\n    super(referenceName, registry);\n  }\n\n  public boolean canBeCalled() {\n    return isRegexpType() || isFunctionType();\n  }\n\n  @Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n           current != null && !current.isNativeObjectType() &&\n               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n           current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        JSType propertyType = getPropertyType(property);\n        if (propertyType.canBeCalled() && !propertyType.isBottom()) {\n          if (i > 0) {\n            sb.append(\", \");\n          }\n          sb.append(property);\n          sb.append(\": \");\n          sb.append(propertyType.toStringHelper(forAnnotations));\n          ++i;\n          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n            sb.append(\", ...\");\n            break;\n          }\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..9eeadc21 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,8 +345,20 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+import java.util.Set;\n+import com.google.common.collect.Sets;\n+\n+public class PrototypeObjectType extends ObjectType {\n+  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 1000;\n+\n+  private boolean prettyPrint = true;\n+\n+  public PrototypeObjectType(String referenceName, Registry registry) {\n+    super(referenceName, registry);\n+  }\n+\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return isRegexpType() || isFunctionType();\n   }\n \n   @Override\n@@ -371,18 +383,19 @@ class PrototypeObjectType extends ObjectType {\n \n       int i = 0;\n       for (String property : propertyNames) {\n-        if (i > 0) {\n-          sb.append(\", \");\n-        }\n-\n-        sb.append(property);\n-        sb.append(\": \");\n-        sb.append(getPropertyType(property).toString());\n-\n-        ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n-          sb.append(\", ...\");\n-          break;\n+        JSType propertyType = getPropertyType(property);\n+        if (propertyType.canBeCalled() && !propertyType.isBottom()) {\n+          if (i > 0) {\n+            sb.append(\", \");\n+          }\n+          sb.append(property);\n+          sb.append(\": \");\n+          sb.append(propertyType.toStringHelper(forAnnotations));\n+          ++i;\n+          if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+            sb.append(\", ...\");\n+            break;\n+          }\n         }\n       }\n \n@@ -394,6 +407,7 @@ class PrototypeObjectType extends ObjectType {\n       return \"{...}\";\n     }\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}