{
    "patch": "public double solve(final UnivariateRealFunction f,\n                        final double min, final double max, final double initial)\n            throws MaxIterationsExceededException, FunctionEvaluationException {\n\n        clearResult();\n        verifySequence(min, initial, max);\n\n        double yInitial = f.value(initial);\n        if (Math.abs(yInitial) <= functionValueAccuracy) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        boolean bracketed = (yMax > 0 ? yMin < 0 : yMin > 0);\n        if (!bracketed && Math.abs(yMin) > functionValueAccuracy && Math.abs(yMax) > functionValueAccuracy) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        } else if (yMin == 0.0) {\n            setResult(min, 0);\n            return result;\n        } else if (yMax == 0.0) {\n            setResult(max, 0);\n            return result;\n        }\n\n        double x = initial;\n        double fx = yInitial;\n        double dx = max - min;\n        double e = relativeAccuracy;\n        double lastE = 0.0;\n        int i = 0;\n        while (i < maximalIterationCount) {\n            if (bracketed && isBracketing(min, max, x, fx)) {\n                setResult(x, i);\n                return result;\n            }\n\n            double prevX = x;\n            double prevFx = fx;\n            double prevDx = dx;\n\n            if (Math.abs(lastE) > e) {\n                dx = 0.5 * (max - min);\n                x = min + dx;\n            } else {\n                dx = x - prevX;\n                if (dx == 0.0) {\n                    dx = relativeAccuracy;\n                    if (x != 0.0) {\n                        dx *= x;\n                    } else {\n                        dx = relativeAccuracy;\n                    }\n                }\n                double s = (fx - prevFx) / dx;\n                double u;\n                double v;\n                if (prevFx * s > 0.0) {\n                    v = Math.abs(0.5 * prevDx * s);\n                    u = dx > prevDx ? -v : v;\n                } else {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..ecf576297 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,69 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n+public double solve(final UnivariateRealFunction f,\n                         final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n+            throws MaxIterationsExceededException, FunctionEvaluationException {\n \n         clearResult();\n         verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n         double yInitial = f.value(initial);\n         if (Math.abs(yInitial) <= functionValueAccuracy) {\n             setResult(initial, 0);\n             return result;\n         }\n \n-        // return the first endpoint if it is good enough\n         double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n-\n-        // return the second endpoint if it is good enough\n         double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+        boolean bracketed = (yMax > 0 ? yMin < 0 : yMin > 0);\n+        if (!bracketed && Math.abs(yMin) > functionValueAccuracy && Math.abs(yMax) > functionValueAccuracy) {\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        } else if (yMin == 0.0) {\n+            setResult(min, 0);\n+            return result;\n+        } else if (yMax == 0.0) {\n+            setResult(max, 0);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n-\n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n-        }\n+        double x = initial;\n+        double fx = yInitial;\n+        double dx = max - min;\n+        double e = relativeAccuracy;\n+        double lastE = 0.0;\n+        int i = 0;\n+        while (i < maximalIterationCount) {\n+            if (bracketed && isBracketing(min, max, x, fx)) {\n+                setResult(x, i);\n+                return result;\n+            }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+            double prevX = x;\n+            double prevFx = fx;\n+            double prevDx = dx;\n \n-    }\n+            if (Math.abs(lastE) > e) {\n+                dx = 0.5 * (max - min);\n+                x = min + dx;\n+            } else {\n+                dx = x - prevX;\n+                if (dx == 0.0) {\n+                    dx = relativeAccuracy;\n+                    if (x != 0.0) {\n+                        dx *= x;\n+                    } else {\n+                        dx = relativeAccuracy;\n+                    }\n+                }\n+                double s = (fx - prevFx) / dx;\n+                double u;\n+                double v;\n+                if (prevFx * s > 0.0) {\n+                    v = Math.abs(0.5 * prevDx * s);\n+                    u = dx > prevDx ? -v : v;\n+                } else {\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}