{
    "patch": "\tcase Token.CATCH:\n\t  Node catchBlock = n.getLastChild().getFirstChild();\n\t  Node exception = catchBlock.getFirstChild();\n\t  isSet = true;\n\t  type = Name.Type.OTHER;\n\t  name = NodeUtil.getBestLValueName(exception);\n\t  break;\n\tcase Token.GETPROP:\n\t  // This may be a namespaced name get or set.\n\t  if (parent != null) {\n\t    switch (parent.getType()) {\n\t      case Token.ASSIGN:\n\t        if (parent.getFirstChild() == n) {\n\t          isSet = true;\n\t          type = getValueType(n.getNext());\n\t          isPropAssign = true;\n\t        }\n\t        break;\n\t      case Token.INC:\n\t      case Token.DEC:\n\t        // checking additional uses of expression\n\t        if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent) || NodeUtil.referencesName(parent.getLastChild(), n.getString())) {\n\t          isSet = true;\n\t          type = Name.Type.OTHER;\n\t        }\n\t        break;\n\t      case Token.GETPROP:\n\t        return;\n\t      default:\n\t        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n\t          isSet = true;\n\t          type = Name.Type.OTHER;\n\t        }\n\t    }\n\t  }\n\t  name = n.getQualifiedName();\n\t  if (name == null) {\n\t    return;\n\t  }\n\t  break;\n\tdefault:\n\t  return;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..4e1031ba 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,48 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+\tcase Token.CATCH:\n+\t  Node catchBlock = n.getLastChild().getFirstChild();\n+\t  Node exception = catchBlock.getFirstChild();\n+\t  isSet = true;\n+\t  type = Name.Type.OTHER;\n+\t  name = NodeUtil.getBestLValueName(exception);\n+\t  break;\n+\tcase Token.GETPROP:\n+\t  // This may be a namespaced name get or set.\n+\t  if (parent != null) {\n+\t    switch (parent.getType()) {\n+\t      case Token.ASSIGN:\n+\t        if (parent.getFirstChild() == n) {\n+\t          isSet = true;\n+\t          type = getValueType(n.getNext());\n+\t          isPropAssign = true;\n+\t        }\n+\t        break;\n+\t      case Token.INC:\n+\t      case Token.DEC:\n+\t        // checking additional uses of expression\n+\t        if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent) || NodeUtil.referencesName(parent.getLastChild(), n.getString())) {\n+\t          isSet = true;\n+\t          type = Name.Type.OTHER;\n+\t        }\n+\t        break;\n+\t      case Token.GETPROP:\n+\t        return;\n+\t      default:\n+\t        if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+\t          isSet = true;\n+\t          type = Name.Type.OTHER;\n+\t        }\n+\t    }\n+\t  }\n+\t  name = n.getQualifiedName();\n+\t  if (name == null) {\n+\t    return;\n+\t  }\n+\t  break;\n+\tdefault:\n+\t  return;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}