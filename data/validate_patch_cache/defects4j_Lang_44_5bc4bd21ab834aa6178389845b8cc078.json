{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n        if (val.startsWith(\"--\")) {\n            return null;\n        }\n        if (val.contains(\"e\") || val.contains(\"E\")) {\n            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n                try {\n                    return Float.parseFloat(val);\n                } catch (NumberFormatException nfe) {\n                    // Ignore the exception and continue\n                }\n            } else if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n                try {\n                    return Double.parseDouble(val);\n                } catch (NumberFormatException nfe) {\n                    // Ignore the exception and continue\n                }\n            } else {\n                try {\n                    return new BigDecimal(val);\n                } catch (NumberFormatException nfe) {\n                    // Ignore the exception and continue\n                }\n            }\n        } else {\n            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n                try {\n                    Float f = Float.parseFloat(val);\n                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n                        return f;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore the exception and continue\n                }\n            } else if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n                try {\n                    Double d = Double.parseDouble(val);\n                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n                        return d;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore the exception and continue\n                }\n            } else {\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException e) {\n                    // Ignore the exception and continue\n                }\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException e) {\n                    // Ignore the exception and continue\n                }\n                try {\n                    BigInteger bi = new BigInteger(val);\n                    if (bi.bitLength() <= 31) {\n                        return bi.intValue();\n                    } else if (bi.bitLength() <= 63) {\n                        return bi.longValue();\n                    } else {\n                        return bi;\n                    }\n                } catch (NumberFormatException e) {\n                    // Ignore the exception and continue\n                }\n            }\n        }\n        throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..73953394 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,77 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+        if (val.startsWith(\"--\")) {\n+            return null;\n+        }\n+        if (val.contains(\"e\") || val.contains(\"E\")) {\n+            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+                try {\n+                    return Float.parseFloat(val);\n+                } catch (NumberFormatException nfe) {\n+                    // Ignore the exception and continue\n+                }\n+            } else if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n+                try {\n+                    return Double.parseDouble(val);\n+                } catch (NumberFormatException nfe) {\n+                    // Ignore the exception and continue\n+                }\n+            } else {\n+                try {\n+                    return new BigDecimal(val);\n+                } catch (NumberFormatException nfe) {\n+                    // Ignore the exception and continue\n+                }\n+            }\n+        } else {\n+            if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+                try {\n+                    Float f = Float.parseFloat(val);\n+                    if (!f.isInfinite() && !(f.floatValue() == 0.0F && !isAllZeros(val))) {\n+                        return f;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // Ignore the exception and continue\n+                }\n+            } else if (val.endsWith(\"d\") || val.endsWith(\"D\")) {\n+                try {\n+                    Double d = Double.parseDouble(val);\n+                    if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !isAllZeros(val))) {\n+                        return d;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // Ignore the exception and continue\n+                }\n+            } else {\n+                try {\n+                    return createInteger(val);\n+                } catch (NumberFormatException e) {\n+                    // Ignore the exception and continue\n+                }\n+                try {\n+                    return createLong(val);\n+                } catch (NumberFormatException e) {\n+                    // Ignore the exception and continue\n+                }\n+                try {\n+                    BigInteger bi = new BigInteger(val);\n+                    if (bi.bitLength() <= 31) {\n+                        return bi.intValue();\n+                    } else if (bi.bitLength() <= 63) {\n+                        return bi.longValue();\n+                    } else {\n+                        return bi;\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // Ignore the exception and continue\n+                }\n+            }\n+        }\n+        throw new NumberFormatException(\"\\\"\" + val + \"\\\" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}