{
    "patch": "  private String format(JSError error, boolean warning) {\n    // extract source excerpt\n    SourceExcerptProvider source = getSource();\n    String sourceExcerpt = source == null ? null :\n        excerpt.get(\n            source, error.sourceName, error.lineNumber, excerptFormatter);\n\n    // formatting the message\n    StringBuilder b = new StringBuilder();\n    if (error.sourceName != null) {\n      b.append(error.sourceName);\n      if (error.lineNumber > 0) {\n        b.append(':');\n        b.append(error.lineNumber);\n      }\n      b.append(\": \");\n    }\n\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n\n    b.append(error.description);\n    b.append('\\n');\n    if (sourceExcerpt != null) {\n      int lineLength = sourceExcerpt.length();\n      String trimmedExcerpt = sourceExcerpt.trim();\n      int charsBeforeTrim = sourceExcerpt.length() - trimmedExcerpt.length();\n      int charno = error.getCharno() - charsBeforeTrim - 1;\n      \n      b.append(sourceExcerpt);\n      b.append('\\n');\n      \n      // padding equal to the excerpt and arrow at the end\n      // charno == lineLength means something is missing at the end of the line\n      if (excerpt.equals(LINE) && charno >= 0 && charno <= lineLength) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (Character.isWhitespace(c)) {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        \n        // FIX: append \"(space)\" at the end of the line\n        b.append(debugFormatter.format(\" (space)\"));\n        \n        b.append('\\n');\n\n        for (int i = 0; i < charno; i++) {\n          b.append(' ');\n        }\n        b.append(\"^\\n\");\n      } else if (!(excerpt.equals(CONTEXT) && error.getCharno() == 0)) {\n        int offset = error.getCharno();\n        for (int i = 0; i < lineLength; i++) {\n          if (Character.isWhitespace(sourceExcerpt.charAt(i))) {\n            if (--offset < 0) {\n              b.append(' ');\n              break;\n            }\n          }\n          b.append(sourceExcerpt.charAt(i));\n        }\n        b.append('\\n');\n      }\n    }\n    return b.toString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..1f106817 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -62,7 +62,6 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n   public String formatWarning(JSError warning) {\n     return format(warning, true);\n   }\n-\n   private String format(JSError error, boolean warning) {\n     // extract source excerpt\n     SourceExcerptProvider source = getSource();\n@@ -87,15 +86,17 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n     b.append(error.description);\n     b.append('\\n');\n     if (sourceExcerpt != null) {\n+      int lineLength = sourceExcerpt.length();\n+      String trimmedExcerpt = sourceExcerpt.trim();\n+      int charsBeforeTrim = sourceExcerpt.length() - trimmedExcerpt.length();\n+      int charno = error.getCharno() - charsBeforeTrim - 1;\n+      \n       b.append(sourceExcerpt);\n       b.append('\\n');\n-      int charno = error.getCharno();\n-\n+      \n       // padding equal to the excerpt and arrow at the end\n-      // charno == sourceExpert.length() means something is missing\n-      // at the end of the line\n-      if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      // charno == lineLength means something is missing at the end of the line\n+      if (excerpt.equals(LINE) && charno >= 0 && charno <= lineLength) {\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {\n@@ -104,7 +105,28 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n             b.append(' ');\n           }\n         }\n+        \n+        // FIX: append \"(space)\" at the end of the line\n+        b.append(debugFormatter.format(\" (space)\"));\n+        \n+        b.append('\\n');\n+\n+        for (int i = 0; i < charno; i++) {\n+          b.append(' ');\n+        }\n         b.append(\"^\\n\");\n+      } else if (!(excerpt.equals(CONTEXT) && error.getCharno() == 0)) {\n+        int offset = error.getCharno();\n+        for (int i = 0; i < lineLength; i++) {\n+          if (Character.isWhitespace(sourceExcerpt.charAt(i))) {\n+            if (--offset < 0) {\n+              b.append(' ');\n+              break;\n+            }\n+          }\n+          b.append(sourceExcerpt.charAt(i));\n+        }\n+        b.append('\\n');\n       }\n     }\n     return b.toString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}