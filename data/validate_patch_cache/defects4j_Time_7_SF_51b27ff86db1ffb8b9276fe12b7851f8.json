{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n    \n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    \n    // A leap year must be taken into account and its value added to the computed millis\n    if (bucket.getLeapYear() > 0 && !isValidDayOfMonth(instant.getLocalMillis())) {\n        throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Value \" + bucket.getDayOfMonth() + \" for dayOfMonth must be in the range [1,\" + maximumDayOfMonth(bucket.getMonth(), isLeapYear(bucket.getLeapYear())) + \"]\", DateTimeFieldType.dayOfMonth(), bucket.getDayOfMonth(), null);\n    }\n    instant.setMillis(bucket.computeMillis(true, text));\n    \n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}\n    \nprivate boolean isLeapYear(int year) {\n    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n}\n\nprivate int maximumDayOfMonth(int month, boolean leapYear) {\n    switch (month) {\n    case 2:\n        return leapYear ? 29 : 28;\n    case 4:\n    case 6:\n    case 9:\n    case 11:\n        return 30;\n    default:\n        return 31;\n    }\n}\n\nprivate boolean isValidDayOfMonth(long localMillis) {\n    DurationField field = ISOChronology.getInstanceUTC().millis();\n    int dayOfMonth = ISOChronology.getInstanceUTC().dayOfMonth().get(localMillis);\n    long last = field.roundFloor(localMillis);\n    long next = field.add(last, 1);\n    int lastDOM = ISOChronology.getInstanceUTC().dayOfMonth().get(last);\n    if (lastDOM >= dayOfMonth) {\n        return ISOChronology.getInstanceUTC().dayOfMonth().get(next) != dayOfMonth;\n    } \n    int lengthOfMonth = ISOChronology.getInstanceUTC().dayOfMonth().getMaximumValue(next);\n    return dayOfMonth <= lengthOfMonth;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..05c226fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,71 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+    \n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+    int newPos = parser.parseInto(bucket, text, position);\n+    \n+    // A leap year must be taken into account and its value added to the computed millis\n+    if (bucket.getLeapYear() > 0 && !isValidDayOfMonth(instant.getLocalMillis())) {\n+        throw new IllegalFieldValueException(\"Cannot parse \\\"\" + text + \"\\\": Value \" + bucket.getDayOfMonth() + \" for dayOfMonth must be in the range [1,\" + maximumDayOfMonth(bucket.getMonth(), isLeapYear(bucket.getLeapYear())) + \"]\", DateTimeFieldType.dayOfMonth(), bucket.getDayOfMonth(), null);\n+    }\n+    instant.setMillis(bucket.computeMillis(true, text));\n+    \n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n+    \n+private boolean isLeapYear(int year) {\n+    return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);\n+}\n+\n+private int maximumDayOfMonth(int month, boolean leapYear) {\n+    switch (month) {\n+    case 2:\n+        return leapYear ? 29 : 28;\n+    case 4:\n+    case 6:\n+    case 9:\n+    case 11:\n+        return 30;\n+    default:\n+        return 31;\n     }\n+}\n+\n+private boolean isValidDayOfMonth(long localMillis) {\n+    DurationField field = ISOChronology.getInstanceUTC().millis();\n+    int dayOfMonth = ISOChronology.getInstanceUTC().dayOfMonth().get(localMillis);\n+    long last = field.roundFloor(localMillis);\n+    long next = field.add(last, 1);\n+    int lastDOM = ISOChronology.getInstanceUTC().dayOfMonth().get(last);\n+    if (lastDOM >= dayOfMonth) {\n+        return ISOChronology.getInstanceUTC().dayOfMonth().get(next) != dayOfMonth;\n+    } \n+    int lengthOfMonth = ISOChronology.getInstanceUTC().dayOfMonth().getMaximumValue(next);\n+    return dayOfMonth <= lengthOfMonth;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}