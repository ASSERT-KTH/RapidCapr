{
    "patch": "            MockCandidateFilter.Result result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (result != null) {\n                result.thenInject(fieldInstance);\n                return;\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..3a033c361 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,11 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            MockCandidateFilter.Result result = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (result != null) {\n+                result.thenInject(fieldInstance);\n+                return;\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}