{
    "patch": "            Matcher lastMatcher = matchers.get(matchers.size() - 1);\n            if (lastMatcher instanceof CapturesArguments) {\n                Object[] varargs = invocation.getArgumentAt(indexOfVararg, Object[].class);\n                ((CapturesArguments) lastMatcher).captureFrom(varargs);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d17374464 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Matcher lastMatcher = matchers.get(matchers.size() - 1);\n+            if (lastMatcher instanceof CapturesArguments) {\n+                Object[] varargs = invocation.getArgumentAt(indexOfVararg, Object[].class);\n+                ((CapturesArguments) lastMatcher).captureFrom(varargs);\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}