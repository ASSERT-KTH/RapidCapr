{
    "patch": "private double calculateAsymptoticPValue(final double Umin,\n                                          final int n1,\n                                          final int n2)\n            throws ConvergenceException, MaxCountExceededException {\n\n        final int n1n2prod = n1 * n2;\n\n        // Use a correction factor to adjust for small datasets\n        final double correctionFactor = (n1 + n2 + 1) / (double)(2 * n1n2prod);\n        final double EU = n1n2prod / 2.0;\n        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0 * correctionFactor;\n\n        final double z = (Umin - EU) / Math.sqrt(VarU);\n\n        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n\n        return 2 * standardNormal.cumulativeProbability(z);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..8905053a2 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,18 +165,19 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n-        throws ConvergenceException, MaxCountExceededException {\n+private double calculateAsymptoticPValue(final double Umin,\n+                                          final int n1,\n+                                          final int n2)\n+            throws ConvergenceException, MaxCountExceededException {\n \n         final int n1n2prod = n1 * n2;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n+        // Use a correction factor to adjust for small datasets\n+        final double correctionFactor = (n1 + n2 + 1) / (double)(2 * n1n2prod);\n         final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n+        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0 * correctionFactor;\n \n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+        final double z = (Umin - EU) / Math.sqrt(VarU);\n \n         final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}