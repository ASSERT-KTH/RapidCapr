{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double y0 = tmp2[0];\n            if (y0 > 0) {\n                result[resultOffset] = (tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI;\n                result[resultOffset] = result[resultOffset] - 2 * tmp2[0];\n                for (int i = 1; i < tmp2.length; ++i) {\n                    result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n                }\n            } else {\n                double usualSum = 2 * tmp2[0]; // the usual sum of the angle ...\n                double inverse = computeInverse(x[xOffset], y0);\n                if(Double.isNaN(inverse)) {\n                    for (int i = 0; i < tmp2.length; ++i) {\n                        result[resultOffset + i] = Double.NaN;\n                    }\n                } else if (inverse == 0.0) {\n                    for (int i = 0; i < tmp2.length; ++i) {\n                        result[resultOffset + i] = fixResult(usualSum);\n                    }\n                } else {\n                    // adjust the sum of the angle to the other side of the branch cut\n                    double[] doubleHighPart = new double[getSize()];\n                    double[] doubleLowPart = new double[getSize()];\n                    subtract(y, yOffset, inverse, doubleHighPart, doubleLowPart); // y - pi/2\n                    double d1 = quotient(doubleHighPart, doubleLowPart, r, doubleHighPart);\n                    doubleDoubleToExtended(doubleHighPart, doubleLowPart, tmp1);\n                    doubleDoubleToExtended(r, 0.0, tmp2);\n                    doubleDoubleToExtended(inverse, 0.0, tmp1);\n                    tmp2[1 - getHighPrecisionElementIndex()] = -tmp2[1 - getHighPrecisionElementIndex()];\n                    multiply(tmp1, tmp2, tmp2);\n                    subtract(doubleHighPart, doubleLowPart, tmp2[0], tmp2);\n                    atan(tmp1, 0, tmp2, 0);\n                    result[resultOffset] = fixResult(usualSum + tmp2[0]); // atan(y/x) + atan((r - fix(y))/x)\n                    for (int i = 1; i < tmp2.length; ++i) {\n                        result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n                    }\n                }\n            }\n        }\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        fixSpecialCases(y, yOffset, x, xOffset, result, resultOffset);\n    }\n\n    private double quotient(double[] aH, double[] aL, double b, double[] result) {\n        double c = FastMath.floor(aH[0] / b + 0.5);\n        doubleDoubleToExtended(b * c, 0.0, result);\n        double[] temp = new double[getSize()];\n        subtract(aH, 0, result, 0, temp, 0);\n        multiply(temp, 0, ONE_OVER_2PI_HIGH_PRECISION, ONE_OVER_2PI_LOW_PRECISION, temp, 0);\n        doubleDoubleToExtended(b * c, 0.0, result);\n        add(temp, 0, aL, 0, temp, 0);\n        if (compare(temp, result) >= 0) {\n            subtract(temp, 0, result, 0, temp, 0);\n        }\n        return c + temp[0];\n    }\n\n    private double computeInverse(double x, double y) {\n        double r = FastMath.sqrt(x * x + y * y);\n        double gamma = FastMath.atan2(y, x);\n        double deflection = gam1pi(-gamma);\n        if (r < 2.0 * FastMath.PI || (r == 2.0 * FastMath.PI && deflection < 0.0)) {\n            return (FastMath.PI / 2) - r;\n        } else {\n            return (3 * FastMath.PI / 2) - r;\n        }               \n    }\n\n    private double fixResult(double result) {\n        if (result > 0.0) {\n            return result - FastMath.PI;\n        } else {\n            return result + FastMath.PI;\n        }\n    }\n\n    private void fixSpecialCases(final double[] y, final int yOffset,\n            final double[] x, final int xOffset,\n            final double[] results, final int resultOffset) {\n        // handle infinite values\n        boolean infiniteOccurred = false;\n        for (int i = 0; i < y.length; ++i) {\n            if (Double.isInfinite(y[i]) || Double.isInfinite(x[i])) {\n                infiniteOccurred = true;\n                if (Double.isNaN(results[resultOffset + i])) {\n                    if (y[i] > 0) {\n                        results[resultOffset + i] = FastMath.PI / 2;\n                    } else if (y[i] < 0) {\n                        results[resultOffset + i] = -FastMath.PI / 2;\n                    } else { // y == 0\n                        if (x[i] > 0) {\n                            results[resultOffset + i] = 0;\n                        } else if (x[i] < 0) {\n                            results[resultOffset + i] = FastMath.PI;\n                        } else {\n                            results[resultOffset + i] = Double.NaN;\n                        }\n                    }\n                }\n            }\n        }\n        if (!infiniteOccurred) {\n            for (int i = 0; i < y.length; ++i) {\n                if (Double.isNaN(y[i]) || Double.isNaN(x[i])) {\n                    results[resultOffset + i] = Double.NaN;\n                } else if (y[i] == 0) {\n                    if (Double.doubleToLongBits(x[i]) == Double.doubleToLongBits(0.0)) {\n                        results[resultOffset + i] = Double.NaN;\n                    } else if (x[i] > 0) {\n                        results[resultOffset + i] = 0;\n                    } else {\n                        results[resultOffset + i] = FastMath.PI;\n                    }\n                }\n            }\n        }\n    }\n\n    private double gam1pi(final double x) {\n        final double div = x * 0.3183098861837907;\n        final double dx = FastMath.rint(div);\n        return (x - dx * 3.14159265358979323846) * 0.3183098861837907;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..8fe675182 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1407,16 +1407,127 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            double y0 = tmp2[0];\n+            if (y0 > 0) {\n+                result[resultOffset] = (tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI;\n+                result[resultOffset] = result[resultOffset] - 2 * tmp2[0];\n+                for (int i = 1; i < tmp2.length; ++i) {\n+                    result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+                }\n+            } else {\n+                double usualSum = 2 * tmp2[0]; // the usual sum of the angle ...\n+                double inverse = computeInverse(x[xOffset], y0);\n+                if(Double.isNaN(inverse)) {\n+                    for (int i = 0; i < tmp2.length; ++i) {\n+                        result[resultOffset + i] = Double.NaN;\n+                    }\n+                } else if (inverse == 0.0) {\n+                    for (int i = 0; i < tmp2.length; ++i) {\n+                        result[resultOffset + i] = fixResult(usualSum);\n+                    }\n+                } else {\n+                    // adjust the sum of the angle to the other side of the branch cut\n+                    double[] doubleHighPart = new double[getSize()];\n+                    double[] doubleLowPart = new double[getSize()];\n+                    subtract(y, yOffset, inverse, doubleHighPart, doubleLowPart); // y - pi/2\n+                    double d1 = quotient(doubleHighPart, doubleLowPart, r, doubleHighPart);\n+                    doubleDoubleToExtended(doubleHighPart, doubleLowPart, tmp1);\n+                    doubleDoubleToExtended(r, 0.0, tmp2);\n+                    doubleDoubleToExtended(inverse, 0.0, tmp1);\n+                    tmp2[1 - getHighPrecisionElementIndex()] = -tmp2[1 - getHighPrecisionElementIndex()];\n+                    multiply(tmp1, tmp2, tmp2);\n+                    subtract(doubleHighPart, doubleLowPart, tmp2[0], tmp2);\n+                    atan(tmp1, 0, tmp2, 0);\n+                    result[resultOffset] = fixResult(usualSum + tmp2[0]); // atan(y/x) + atan((r - fix(y))/x)\n+                    for (int i = 1; i < tmp2.length; ++i) {\n+                        result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+                    }\n+                }\n             }\n+        }\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        fixSpecialCases(y, yOffset, x, xOffset, result, resultOffset);\n+    }\n \n+    private double quotient(double[] aH, double[] aL, double b, double[] result) {\n+        double c = FastMath.floor(aH[0] / b + 0.5);\n+        doubleDoubleToExtended(b * c, 0.0, result);\n+        double[] temp = new double[getSize()];\n+        subtract(aH, 0, result, 0, temp, 0);\n+        multiply(temp, 0, ONE_OVER_2PI_HIGH_PRECISION, ONE_OVER_2PI_LOW_PRECISION, temp, 0);\n+        doubleDoubleToExtended(b * c, 0.0, result);\n+        add(temp, 0, aL, 0, temp, 0);\n+        if (compare(temp, result) >= 0) {\n+            subtract(temp, 0, result, 0, temp, 0);\n         }\n+        return c + temp[0];\n+    }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    private double computeInverse(double x, double y) {\n+        double r = FastMath.sqrt(x * x + y * y);\n+        double gamma = FastMath.atan2(y, x);\n+        double deflection = gam1pi(-gamma);\n+        if (r < 2.0 * FastMath.PI || (r == 2.0 * FastMath.PI && deflection < 0.0)) {\n+            return (FastMath.PI / 2) - r;\n+        } else {\n+            return (3 * FastMath.PI / 2) - r;\n+        }               \n+    }\n+\n+    private double fixResult(double result) {\n+        if (result > 0.0) {\n+            return result - FastMath.PI;\n+        } else {\n+            return result + FastMath.PI;\n+        }\n+    }\n+\n+    private void fixSpecialCases(final double[] y, final int yOffset,\n+            final double[] x, final int xOffset,\n+            final double[] results, final int resultOffset) {\n+        // handle infinite values\n+        boolean infiniteOccurred = false;\n+        for (int i = 0; i < y.length; ++i) {\n+            if (Double.isInfinite(y[i]) || Double.isInfinite(x[i])) {\n+                infiniteOccurred = true;\n+                if (Double.isNaN(results[resultOffset + i])) {\n+                    if (y[i] > 0) {\n+                        results[resultOffset + i] = FastMath.PI / 2;\n+                    } else if (y[i] < 0) {\n+                        results[resultOffset + i] = -FastMath.PI / 2;\n+                    } else { // y == 0\n+                        if (x[i] > 0) {\n+                            results[resultOffset + i] = 0;\n+                        } else if (x[i] < 0) {\n+                            results[resultOffset + i] = FastMath.PI;\n+                        } else {\n+                            results[resultOffset + i] = Double.NaN;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        if (!infiniteOccurred) {\n+            for (int i = 0; i < y.length; ++i) {\n+                if (Double.isNaN(y[i]) || Double.isNaN(x[i])) {\n+                    results[resultOffset + i] = Double.NaN;\n+                } else if (y[i] == 0) {\n+                    if (Double.doubleToLongBits(x[i]) == Double.doubleToLongBits(0.0)) {\n+                        results[resultOffset + i] = Double.NaN;\n+                    } else if (x[i] > 0) {\n+                        results[resultOffset + i] = 0;\n+                    } else {\n+                        results[resultOffset + i] = FastMath.PI;\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n+    private double gam1pi(final double x) {\n+        final double div = x * 0.3183098861837907;\n+        final double dx = FastMath.rint(div);\n+        return (x - dx * 3.14159265358979323846) * 0.3183098861837907;\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.",
    "result_reason": "error: method subtract in class DSCompiler cannot be applied to given types;",
    "test_result": "ERROR"
}