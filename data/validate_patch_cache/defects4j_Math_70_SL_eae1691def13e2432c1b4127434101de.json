{
    "patch": "if(Double.isNaN(min) || Double.isNaN(max) || f == null) {\n    return Double.NaN;\n}\n\ndouble fMin = f.value(min);\ndouble fMax = f.value(max);\n\nif(Double.isNaN(fMin) || Double.isNaN(fMax)) {\n    return Double.NaN;\n}\n\nif(fMin * fMax > 0) {\n    return Double.NaN;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..07389909e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,21 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if(Double.isNaN(min) || Double.isNaN(max) || f == null) {\n+    return Double.NaN;\n+}\n+\n+double fMin = f.value(min);\n+double fMax = f.value(max);\n+\n+if(Double.isNaN(fMin) || Double.isNaN(fMax)) {\n+    return Double.NaN;\n+}\n+\n+if(fMin * fMax > 0) {\n+    return Double.NaN;\n+}\n+\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: missing return statement",
    "test_result": "ERROR"
}