{
    "patch": "    private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n        double minRatio = Double.MAX_VALUE;\n        Integer minRatioPos = null;\n        int numObjectiveFunctions = tableau.getNumObjectiveFunctions();\n        int height = tableau.getHeight();\n        for (int i = numObjectiveFunctions; i < height; i++) {\n            final double rhs = tableau.getEntr",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\nindex 8309d7b40..688c168b1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java\n@@ -76,19 +76,10 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n     private Integer getPivotRow(final int col, final SimplexTableau tableau) {\n         double minRatio = Double.MAX_VALUE;\n         Integer minRatioPos = null;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-            if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {\n-                final double ratio = rhs / entry;\n-                if (ratio < minRatio) {\n-                    minRatio = ratio;\n-                    minRatioPos = i; \n-                }\n-            }\n-        }\n-        return minRatioPos;\n-    }\n+        int numObjectiveFunctions = tableau.getNumObjectiveFunctions();\n+        int height = tableau.getHeight();\n+        for (int i = numObjectiveFunctions; i < height; i++) {\n+            final double rhs = tableau.getEntr\n \n \n     /**",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}