{
    "patch": "public Dfp multiplyFast(int y) {\n\n    int[] product = new int[mant.length + 1];\n    int carry = 0;\n    int len = mant.length;\n\n    for (int i = 0; i < len; i++) {\n        int p = mant[i] * y + carry;\n        product[i] = p % RADIX;\n        carry = p / RADIX;\n    }\n    product[len] = carry;\n\n    return newInstance(sign, exp, product, nans);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..88c51cca3 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,9 +413,21 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+public Dfp multiplyFast(int y) {\n+\n+    int[] product = new int[mant.length + 1];\n+    int carry = 0;\n+    int len = mant.length;\n+\n+    for (int i = 0; i < len; i++) {\n+        int p = mant[i] * y + carry;\n+        product[i] = p % RADIX;\n+        carry = p / RADIX;\n     }\n+    product[len] = carry;\n+\n+    return newInstance(sign, exp, product, nans);\n+}\n \n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}