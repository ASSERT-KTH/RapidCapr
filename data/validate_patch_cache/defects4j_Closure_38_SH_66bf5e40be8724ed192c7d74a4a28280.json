{
    "patch": "  String getNextToken() {\n    String token = getNextTokenInternal();\n    while (token != null && token.isEmpty()) {\n      token = getNextTokenInternal();\n    }\n    return token;\n  }\n  \n  private String getNextTokenInternal() {\n\n    if (pos == input.length()) {\n      return null;\n    }\n\n    char c = input.charAt(pos);\n    if (Character.isWhitespace(c)) {\n      ++pos;\n      return \"\";\n    }\n    if (isOperatorChar(c)) {\n      ++pos;\n      return String.valueOf(c);\n    }\n    if (Character.isDigit(c)) {\n      return getNumber();\n    }\n    if (Character.isJavaIdentifierStart(c)) {\n      return getName();\n    }\n    throw new AssertionError(\"Unexpected character \" + c);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..b10e8897 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,42 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+  String getNextToken() {\n+    String token = getNextTokenInternal();\n+    while (token != null && token.isEmpty()) {\n+      token = getNextTokenInternal();\n+    }\n+    return token;\n+  }\n+  \n+  private String getNextTokenInternal() {\n+\n+    if (pos == input.length()) {\n+      return null;\n+    }\n+\n+    char c = input.charAt(pos);\n+    if (Character.isWhitespace(c)) {\n+      ++pos;\n+      return \"\";\n+    }\n+    if (isOperatorChar(c)) {\n+      ++pos;\n+      return String.valueOf(c);\n+    }\n+    if (Character.isDigit(c)) {\n+      return getNumber();\n+    }\n+    if (Character.isJavaIdentifierStart(c)) {\n+      return getName();\n+    }\n+    throw new AssertionError(\"Unexpected character \" + c);\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}