{
    "patch": "if (NodeUtil.isFunctionExpression(n)) {\n  if (t.getScopeDepth() <= 2) {\n    // The first-order function analyzer looks at two types of variables:\n    //\n    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n    //\n    // 2) Local variables that are assigned more than once.\n    //\n    // We treat all global variables as escaped by default, so there's\n    // no reason to do this extra computation for them.\n    return;\n  } else {\n    t.getScope().traverse(\n        new FindFirstClassFunctionTraversalCallback(\n            t.getScopeRoot(),\n            data.get(t.getScopeRoot())));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..4d092b3e 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,24 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+if (NodeUtil.isFunctionExpression(n)) {\n+  if (t.getScopeDepth() <= 2) {\n+    // The first-order function analyzer looks at two types of variables:\n+    //\n+    // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n+    //\n+    // 2) Local variables that are assigned more than once.\n+    //\n+    // We treat all global variables as escaped by default, so there's\n+    // no reason to do this extra computation for them.\n+    return;\n+  } else {\n+    t.getScope().traverse(\n+        new FindFirstClassFunctionTraversalCallback(\n+            t.getScopeRoot(),\n+            data.get(t.getScopeRoot())));\n+  }\n+}\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}