{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        long instantMillis = instant.getMillis();\n        Object parsed = parser.parseInto(new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, iDefaultYear), text, position);\n        if (parsed == null) {\n            return ~position;\n        }\n        if (iOffsetParsed) {\n            DateTimeZone parsedZone = null;\n            if (parsed instanceof DateTimeWithOffset) {\n                DateTimeWithOffset dtwo = (DateTimeWithOffset) parsed;\n                instant.setMillis(dtwo.getMillis());\n                parsedZone = dtwo.getZone();\n            } else if (parsed instanceof ReadableInstant) {\n                ReadableInstant rinst = (ReadableInstant) parsed;\n                instant.setMillis(rinst.getMillis());\n                if (rinst.getZone() != null) {\n                    chrono = chrono.withZone(rinst.getZone());\n                }\n            } else {\n                DateTimeParserBucket bucket = (DateTimeParserBucket) parsed;\n                instant.setMillis(bucket.computeMillis(false, text));\n                parsedZone = bucket.getZone();\n            }\n            if (parsedZone != null) {\n                chrono = chrono.withZone(parsedZone);\n            }\n        } else {\n            if (parsed instanceof ReadableInstant) {\n                ReadableInstant rinst = (ReadableInstant) parsed;\n                instant.setMillis(rinst.getMillis());\n                if (rinst.getZone() != null) {\n                    chrono = chrono.withZone(rinst.getZone());\n                }\n            } else {\n                DateTimeParserBucket bucket = (DateTimeParserBucket) parsed;\n                instant.setMillis(bucket.computeMillis(false, text));\n                if (bucket.getZone() != null) {\n                    chrono = chrono.withZone(bucket.getZone());\n                }\n            }\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return ((ReadWritableInstant)instant).getFormatter().parseInto((ReadWritableInstant)instant, text, position);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..aa86b6e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,28 +699,53 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        long instantMillis = instant.getMillis();\n+        Object parsed = parser.parseInto(new DateTimeParserBucket(instantMillis, chrono, iLocale, iPivotYear, iDefaultYear), text, position);\n+        if (parsed == null) {\n+            return ~position;\n+        }\n+        if (iOffsetParsed) {\n+            DateTimeZone parsedZone = null;\n+            if (parsed instanceof DateTimeWithOffset) {\n+                DateTimeWithOffset dtwo = (DateTimeWithOffset) parsed;\n+                instant.setMillis(dtwo.getMillis());\n+                parsedZone = dtwo.getZone();\n+            } else if (parsed instanceof ReadableInstant) {\n+                ReadableInstant rinst = (ReadableInstant) parsed;\n+                instant.setMillis(rinst.getMillis());\n+                if (rinst.getZone() != null) {\n+                    chrono = chrono.withZone(rinst.getZone());\n+                }\n+            } else {\n+                DateTimeParserBucket bucket = (DateTimeParserBucket) parsed;\n+                instant.setMillis(bucket.computeMillis(false, text));\n+                parsedZone = bucket.getZone();\n+            }\n+            if (parsedZone != null) {\n+                chrono = chrono.withZone(parsedZone);\n+            }\n+        } else {\n+            if (parsed instanceof ReadableInstant) {\n+                ReadableInstant rinst = (ReadableInstant) parsed;\n+                instant.setMillis(rinst.getMillis());\n+                if (rinst.getZone() != null) {\n+                    chrono = chrono.withZone(rinst.getZone());\n+                }\n+            } else {\n+                DateTimeParserBucket bucket = (DateTimeParserBucket) parsed;\n+                instant.setMillis(bucket.computeMillis(false, text));\n+                if (bucket.getZone() != null) {\n+                    chrono = chrono.withZone(bucket.getZone());\n+                }\n+            }\n         }\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n-        return newPos;\n+        return ((ReadWritableInstant)instant).getFormatter().parseInto((ReadWritableInstant)instant, text, position);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}