{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n\n        } else { // If the reflected vertex is worse than best\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair[] contractedSimplex = simplex;\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex;\n\n                // check convergence\n                if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                        original[0], simplex[0])) {\n                    return;\n                }\n\n            } else { // If contracted vertex is still worse than best\n\n                // shrink the simplex around the best point\n                final RealPointValuePair[] shrinked = simplex;\n                for (int i = 1; i < simplex.length; i++) {\n                    final RealPointValuePair vp = simplex[i];\n                    for (int j = 0; j < vp.getPointRef().length; j++) {\n                        vp.getPointRef()[j] = best.getPoint()[j] + delta * (vp.getPoint()[j] - best.getPoint()[j]);\n                    }\n                    vp.setValue(computeObjectiveValue(vp.getPoint()));\n                }\n                Arrays.sort(simplex, comparator);\n\n                // check convergence\n                if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                        original[0], simplex[0])) {\n                    return;\n                }\n\n                // check if simplex has been shrunk too much\n                // If yes, just return\n                if (comparator.compare(original[0], simplex[0]) <= 0) {\n                    return;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..a5e5641b0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,78 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            }\n \n+            // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n-\n             }\n \n+        } else { // If the reflected vertex is worse than best\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair[] contractedSimplex = simplex;\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contractedSimplex;\n \n-            // check convergence\n-                return;\n-            }\n+                // check convergence\n+                if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                        original[0], simplex[0])) {\n+                    return;\n+                }\n \n-        }\n+            } else { // If contracted vertex is still worse than best\n+\n+                // shrink the simplex around the best point\n+                final RealPointValuePair[] shrinked = simplex;\n+                for (int i = 1; i < simplex.length; i++) {\n+                    final RealPointValuePair vp = simplex[i];\n+                    for (int j = 0; j < vp.getPointRef().length; j++) {\n+                        vp.getPointRef()[j] = best.getPoint()[j] + delta * (vp.getPoint()[j] - best.getPoint()[j]);\n+                    }\n+                    vp.setValue(computeObjectiveValue(vp.getPoint()));\n+                }\n+                Arrays.sort(simplex, comparator);\n+\n+                // check convergence\n+                if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                        original[0], simplex[0])) {\n+                    return;\n+                }\n \n+                // check if simplex has been shrunk too much\n+                // If yes, just return\n+                if (comparator.compare(original[0], simplex[0]) <= 0) {\n+                    return;\n+                }\n+            }\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}