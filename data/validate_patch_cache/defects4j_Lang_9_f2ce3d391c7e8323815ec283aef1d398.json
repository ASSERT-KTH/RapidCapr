{
    "patch": "private void init() {\n    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues = new ConcurrentHashMap<Integer, Object[]>();\n\n    StringBuilder regex = new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher = formatPattern.matcher(pattern);\n    if (!patternMatcher.find()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    currentFormatField = patternMatcher.group();\n    Strategy currentStrategy = getStrategy(currentFormatField);\n    while (patternMatcher.find()) {\n        String nextFormatField = patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n\n        // Skip any patterns inside quotes\n        if (currentStrategy instanceof QuotedStrategy && nextStrategy instanceof QuotedStrategy) {\n            currentFormatField += nextFormatField;\n            continue;\n        }\n\n        // Add preceding string as a TextStrategy\n        if (currentStrategy instanceof TextStrategy) {\n            String precedingString = pattern.substring(patternMatcher.start() - currentFormatField.length(), patternMatcher.start());\n            if (precedingString.length() > 0) {\n                collector.add(new TextStrategy(precedingString));\n            }\n        }\n\n        if (currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField = nextFormatField;\n        currentStrategy = nextStrategy;\n    }\n    if (currentStrategy.addRegex(this, regex)) {\n        collector.add(currentStrategy);\n    }\n\n    // Add last string as a TextStrategy, if any\n    if (currentStrategy instanceof TextStrategy && currentFormatField.length() > 0) {\n        collector.add(currentStrategy);\n    }\n\n    currentFormatField = null;\n    strategies = collector.toArray(new Strategy[0]);\n    parsePattern = Pattern.compile(regex.toString());\n    parsePos.setIndex(0);\n    parseCalendar.setTimeZone(timeZone);\n    parseCalendar.clear();\n    parseCalendar.setLenient(false);\n\n    // Make sure that the parsed year is not earlier than the minimum or later than the maximum year.\n    int yearIndex = -1;\n    for (int i = 0; i < strategies.length; i++) {\n        if (strategies[i].getClass().equals(NumberStrategy.class)) {\n            NumberStrategy ns = (NumberStrategy) strategies[i];\n            if (ns.isParseable() && ns.getField() == Calendar.YEAR) {\n                yearIndex = i;\n                break;\n            }\n        }\n    }\n    if (yearIndex != -1) {\n        int minYear = getFieldValue(Calendar.YEAR, \"yyyyMMdd\", \"00010101\");\n        int maxYear = getFieldValue(Calendar.YEAR, \"yyyyMMdd\", \"99991231\");\n        int parsedYear = (Integer) nameValues.get(strategies[yearIndex].getArgumentNumbers()[0])[0];\n        if (parsedYear < minYear) {\n            setFieldValue(Calendar.YEAR, minYear);\n        } else if (parsedYear > maxYear) {\n            setFieldValue(Calendar.YEAR, maxYear);\n        }\n    }\n}\n\nprivate void setFieldValue(int field, int value) {\n    if (value == ((Number) nameValues.get(field)[0]).intValue()) {\n        return;  // Value is already set as expected\n    }\n    nameValues.put(field, new Number[] { value });\n}\n\nprivate int getFieldValue(int field, String pattern, String source) {\n    try {\n        SimpleDateFormat format = new SimpleDateFormat(pattern);\n        format.setLenient(false);\n        Calendar cal = Calendar.getInstance(Locale.US);\n        cal.setTime(format.parse(source));\n        return cal.get(field);\n    } catch (ParseException e) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..dbc9579f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,103 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private void init() {\n+    thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    nameValues = new ConcurrentHashMap<Integer, Object[]>();\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    StringBuilder regex = new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n+    Matcher patternMatcher = formatPattern.matcher(pattern);\n+    if (!patternMatcher.find()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+\n+    currentFormatField = patternMatcher.group();\n+    Strategy currentStrategy = getStrategy(currentFormatField);\n+    while (patternMatcher.find()) {\n+        String nextFormatField = patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n+\n+        // Skip any patterns inside quotes\n+        if (currentStrategy instanceof QuotedStrategy && nextStrategy instanceof QuotedStrategy) {\n+            currentFormatField += nextFormatField;\n+            continue;\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n+        // Add preceding string as a TextStrategy\n+        if (currentStrategy instanceof TextStrategy) {\n+            String precedingString = pattern.substring(patternMatcher.start() - currentFormatField.length(), patternMatcher.start());\n+            if (precedingString.length() > 0) {\n+                collector.add(new TextStrategy(precedingString));\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n         }\n-        if(currentStrategy.addRegex(this, regex)) {\n+\n+        if (currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        currentFormatField = nextFormatField;\n+        currentStrategy = nextStrategy;\n     }\n+    if (currentStrategy.addRegex(this, regex)) {\n+        collector.add(currentStrategy);\n+    }\n+\n+    // Add last string as a TextStrategy, if any\n+    if (currentStrategy instanceof TextStrategy && currentFormatField.length() > 0) {\n+        collector.add(currentStrategy);\n+    }\n+\n+    currentFormatField = null;\n+    strategies = collector.toArray(new Strategy[0]);\n+    parsePattern = Pattern.compile(regex.toString());\n+    parsePos.setIndex(0);\n+    parseCalendar.setTimeZone(timeZone);\n+    parseCalendar.clear();\n+    parseCalendar.setLenient(false);\n+\n+    // Make sure that the parsed year is not earlier than the minimum or later than the maximum year.\n+    int yearIndex = -1;\n+    for (int i = 0; i < strategies.length; i++) {\n+        if (strategies[i].getClass().equals(NumberStrategy.class)) {\n+            NumberStrategy ns = (NumberStrategy) strategies[i];\n+            if (ns.isParseable() && ns.getField() == Calendar.YEAR) {\n+                yearIndex = i;\n+                break;\n+            }\n+        }\n+    }\n+    if (yearIndex != -1) {\n+        int minYear = getFieldValue(Calendar.YEAR, \"yyyyMMdd\", \"00010101\");\n+        int maxYear = getFieldValue(Calendar.YEAR, \"yyyyMMdd\", \"99991231\");\n+        int parsedYear = (Integer) nameValues.get(strategies[yearIndex].getArgumentNumbers()[0])[0];\n+        if (parsedYear < minYear) {\n+            setFieldValue(Calendar.YEAR, minYear);\n+        } else if (parsedYear > maxYear) {\n+            setFieldValue(Calendar.YEAR, maxYear);\n+        }\n+    }\n+}\n+\n+private void setFieldValue(int field, int value) {\n+    if (value == ((Number) nameValues.get(field)[0]).intValue()) {\n+        return;  // Value is already set as expected\n+    }\n+    nameValues.put(field, new Number[] { value });\n+}\n+\n+private int getFieldValue(int field, String pattern, String source) {\n+    try {\n+        SimpleDateFormat format = new SimpleDateFormat(pattern);\n+        format.setLenient(false);\n+        Calendar cal = Calendar.getInstance(Locale.US);\n+        cal.setTime(format.parse(source));\n+        return cal.get(field);\n+    } catch (ParseException e) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}