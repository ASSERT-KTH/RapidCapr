{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        for (Node node : block.getNodes()) {\n          if (node.getType() == Token.FOR\n              || node.getType() == Token.DO\n              || node.getType() == Token.WHILE) {\n            return false;\n          }\n        }\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..0e6a5f78 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        for (Node node : block.getNodes()) {\n+          if (node.getType() == Token.FOR\n+              || node.getType() == Token.DO\n+              || node.getType() == Token.WHILE) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}