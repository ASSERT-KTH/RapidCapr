{
    "patch": "  private boolean isInitializingAssignmentAt(int index) {\n      if (index > 0 && index < references.size()) {\n          Reference maybeDecl = references.get(index - 1);\n          if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n              Reference maybeInit = references.get(index);\n\n              if (maybeInit.isFunctionExpression() || maybeInit.isFunctionDeclaration() || maybeInit.isSimpleAssignmentToName()) {\n                  return true;\n              }\n          }\n      }\n      return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..c8a8b6c7 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,19 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+  private boolean isInitializingAssignmentAt(int index) {\n+      if (index > 0 && index < references.size()) {\n+          Reference maybeDecl = references.get(index - 1);\n+          if (maybeDecl.isVarDeclaration() && !maybeDecl.isInitializingDeclaration()) {\n+              Reference maybeInit = references.get(index);\n+\n+              if (maybeInit.isFunctionExpression() || maybeInit.isFunctionDeclaration() || maybeInit.isSimpleAssignmentToName()) {\n+                  return true;\n+              }\n+          }\n+      }\n+      return false;\n+  }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}