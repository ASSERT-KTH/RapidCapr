{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      // Determine how many undefined elements need to be added\n      int numToAdd = intIndex - (left.getChildCount() - 1);\n      for (int i = 0; i < numToAdd; i++) {\n        Node undefinedElement = NodeUtil.newUndefinedNode(left);\n        left.addChildToBack(undefinedElement);\n      }\n      elem = NodeUtil.newUndefinedNode(right);\n      left.addChildToBack(elem);\n    } else if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..099cf6ea 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1305,14 +1305,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.getType() == Token.EMPTY) {\n+      // Determine how many undefined elements need to be added\n+      int numToAdd = intIndex - (left.getChildCount() - 1);\n+      for (int i = 0; i < numToAdd; i++) {\n+        Node undefinedElement = NodeUtil.newUndefinedNode(left);\n+        left.addChildToBack(undefinedElement);\n+      }\n+      elem = NodeUtil.newUndefinedNode(right);\n+      left.addChildToBack(elem);\n+    } else if (elem.getType() == Token.EMPTY) {\n       elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}