{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialOffset = getOffset(instantLocal);\n    final long localInstant = instantLocal + initialOffset;\n    int[] offsets = getSaveMillis(localInstant);\n    if (offsets == null) {\n        return initialOffset;\n    }\n    final int lastBefore = offsets[0];\n    final int lastAfter = offsets[1];\n    long instantBefore = localInstant - lastBefore;\n    long instantAfter = localInstant - lastAfter;\n    if (initialOffset < lastBefore) {\n        //Daylight Saving Time is in effect, and the instant is in the overlap\n        //It is ambiguous and should be resolved by the immediate next transition\n        instantBefore = nextTransition(instantBefore);\n        instantAfter = nextTransition(instantAfter);\n    } else if (initialOffset > lastBefore) {\n        //Standard Time is in effect, and the instant is in the gap\n        //It is nonexistent and should be subtracted by the length of the gap\n        instantBefore = previousTransition(instantBefore - 1) + 1;\n        instantAfter = previousTransition(instantAfter - 1) + 1;\n    } else {\n        // initialOffset == lastBefore\n        //If the time is between the lastBefore and lastAfter, use isStandardOffset\n        boolean isBeforeStd = isStandardOffset(instantBefore);\n        boolean isAfterStd = isStandardOffset(instantAfter);\n        if (isBeforeStd == isAfterStd) {\n            return initialOffset;\n        }\n        if (isBeforeStd) {\n            instantBefore = previousTransition(instantBefore - 1) + 1;\n        } else {\n            instantAfter = nextTransition(instantAfter);\n        }\n    }\n    // Compare the two transitions\n    int offsetBefore = getOffset(instantBefore);\n    int offsetAfter = getOffset(instantAfter);\n    long gap = instantAfter - instantBefore;\n    if (offsetBefore < offsetAfter) {\n        gap = -gap;\n    }\n    if (initialOffset < lastBefore) {\n        if (initialOffset >= (lastBefore + gap)) {\n            return lastAfter;\n        }\n        return lastBefore;\n    }\n    if (initialOffset > lastBefore) {\n        if (initialOffset < (lastAfter + gap)) {\n            return lastBefore;\n        }\n        return lastAfter;\n    }\n    // initialOffset == lastBefore\n    if (offsetBefore < offsetAfter) {\n        if (initialOffset >= (lastBefore + gap)) {\n            return lastAfter;\n        }\n        return lastBefore;\n    } else {\n        if (initialOffset >= lastBefore) {\n            return lastBefore;\n        }\n        if (initialOffset < (lastBefore + gap)) {\n            return lastBefore;\n        }\n        return lastAfter;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7b729488 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,76 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialOffset = getOffset(instantLocal);\n+    final long localInstant = instantLocal + initialOffset;\n+    int[] offsets = getSaveMillis(localInstant);\n+    if (offsets == null) {\n+        return initialOffset;\n+    }\n+    final int lastBefore = offsets[0];\n+    final int lastAfter = offsets[1];\n+    long instantBefore = localInstant - lastBefore;\n+    long instantAfter = localInstant - lastAfter;\n+    if (initialOffset < lastBefore) {\n+        //Daylight Saving Time is in effect, and the instant is in the overlap\n+        //It is ambiguous and should be resolved by the immediate next transition\n+        instantBefore = nextTransition(instantBefore);\n+        instantAfter = nextTransition(instantAfter);\n+    } else if (initialOffset > lastBefore) {\n+        //Standard Time is in effect, and the instant is in the gap\n+        //It is nonexistent and should be subtracted by the length of the gap\n+        instantBefore = previousTransition(instantBefore - 1) + 1;\n+        instantAfter = previousTransition(instantAfter - 1) + 1;\n+    } else {\n+        // initialOffset == lastBefore\n+        //If the time is between the lastBefore and lastAfter, use isStandardOffset\n+        boolean isBeforeStd = isStandardOffset(instantBefore);\n+        boolean isAfterStd = isStandardOffset(instantAfter);\n+        if (isBeforeStd == isAfterStd) {\n+            return initialOffset;\n         }\n-        return offsetAdjusted;\n+        if (isBeforeStd) {\n+            instantBefore = previousTransition(instantBefore - 1) + 1;\n+        } else {\n+            instantAfter = nextTransition(instantAfter);\n+        }\n+    }\n+    // Compare the two transitions\n+    int offsetBefore = getOffset(instantBefore);\n+    int offsetAfter = getOffset(instantAfter);\n+    long gap = instantAfter - instantBefore;\n+    if (offsetBefore < offsetAfter) {\n+        gap = -gap;\n     }\n+    if (initialOffset < lastBefore) {\n+        if (initialOffset >= (lastBefore + gap)) {\n+            return lastAfter;\n+        }\n+        return lastBefore;\n+    }\n+    if (initialOffset > lastBefore) {\n+        if (initialOffset < (lastAfter + gap)) {\n+            return lastBefore;\n+        }\n+        return lastAfter;\n+    }\n+    // initialOffset == lastBefore\n+    if (offsetBefore < offsetAfter) {\n+        if (initialOffset >= (lastBefore + gap)) {\n+            return lastAfter;\n+        }\n+        return lastBefore;\n+    } else {\n+        if (initialOffset >= lastBefore) {\n+            return lastBefore;\n+        }\n+        if (initialOffset < (lastBefore + gap)) {\n+            return lastBefore;\n+        }\n+        return lastAfter;\n+    }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}