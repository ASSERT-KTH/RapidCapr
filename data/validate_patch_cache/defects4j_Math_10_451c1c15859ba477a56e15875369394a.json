{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // special cases\n        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n            Arrays.fill(result, resultOffset, resultOffset + result.length, Double.NaN);\n            return;\n        }\n        if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n            if (y[yOffset] == 0.0) {\n                if (x[xOffset] > 0.0) {\n                    Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n                    return;\n                } else if (x[xOffset] < 0.0) {\n                    Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n                    result[resultOffset] = FastMath.copySign(Math.PI, y[yOffset]);\n                    return;\n                }\n            } else if (y[yOffset] > 0.0) {\n                Arrays.fill(result, resultOffset, resultOffset + result.length, 0.5 * Math.PI);\n                return;\n            } else {\n                Arrays.fill(result, resultOffset, resultOffset + result.length, -0.5 * Math.PI);\n                return;\n            }\n        }\n        if (y[yOffset] == 0.0) {\n            if (x[xOffset] >= 0.0) {\n                Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n                return;\n            }\n            Arrays.fill(result, resultOffset, resultOffset + result.length, FastMath.copySign(Math.PI, y[yOffset]));\n            return;\n        } else if (x[xOffset] == 0.0) {\n            Arrays.fill(result, resultOffset, resultOffset + result.length, 0.5 * FastMath.PI);\n            if (y[yOffset] < 0) {\n                DoubleArrays.scale(result, resultOffset, result, resultOffset, 1, -1);\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        final double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        final double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0.0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            result[resultOffset] =\n                    (y[yOffset] >= 0 ? 1 : -1) * Math.PI - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..0e785f294 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,19 +1379,57 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n+public void atan2(final double[] y, final int yOffset,\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n+        // special cases\n+        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+            Arrays.fill(result, resultOffset, resultOffset + result.length, Double.NaN);\n+            return;\n+        }\n+        if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) {\n+            if (y[yOffset] == 0.0) {\n+                if (x[xOffset] > 0.0) {\n+                    Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n+                    return;\n+                } else if (x[xOffset] < 0.0) {\n+                    Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n+                    result[resultOffset] = FastMath.copySign(Math.PI, y[yOffset]);\n+                    return;\n+                }\n+            } else if (y[yOffset] > 0.0) {\n+                Arrays.fill(result, resultOffset, resultOffset + result.length, 0.5 * Math.PI);\n+                return;\n+            } else {\n+                Arrays.fill(result, resultOffset, resultOffset + result.length, -0.5 * Math.PI);\n+                return;\n+            }\n+        }\n+        if (y[yOffset] == 0.0) {\n+            if (x[xOffset] >= 0.0) {\n+                Arrays.fill(result, resultOffset, resultOffset + result.length, 0.0);\n+                return;\n+            }\n+            Arrays.fill(result, resultOffset, resultOffset + result.length, FastMath.copySign(Math.PI, y[yOffset]));\n+            return;\n+        } else if (x[xOffset] == 0.0) {\n+            Arrays.fill(result, resultOffset, resultOffset + result.length, 0.5 * FastMath.PI);\n+            if (y[yOffset] < 0) {\n+                DoubleArrays.scale(result, resultOffset, result, resultOffset, 1, -1);\n+            }\n+            return;\n+        }\n+\n         // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n+        final double[] tmp1 = new double[getSize()];\n         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n+        final double[] tmp2 = new double[getSize()];\n         multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n         add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n         rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n \n-        if (x[xOffset] >= 0) {\n+        if (x[xOffset] >= 0.0) {\n \n             // compute atan2(y, x) = 2 atan(y / (r + x))\n             add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n@@ -1408,7 +1446,7 @@ public class DSCompiler {\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n             result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+                    (y[yOffset] >= 0 ? 1 : -1) * Math.PI - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n             for (int i = 1; i < tmp2.length; ++i) {\n                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}