{
    "patch": "        case Token.NAME:\n          // This may be a variable get or set.\n          if (parent != null) {\n            switch (parent.getType()) {\n              case Token.VAR:\n                isSet = true;\n                Node rvalueVar = n.getFirstChild();\n                type = rvalueVar == null ? Name.Type.OTHER : getValueType(rvalueVar);\n                break;\n              case Token.ASSIGN:\n                if (parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = getValueType(n.getNext());\n                }\n                break;\n              case Token.GETPROP:\n                return;\n              case Token.FUNCTION:\n                Node grampsFunction = parent.getParent();\n                if (grampsFunction == null || NodeUtil.isFunctionExpression(parent)) {\n                  return;\n                }\n                isSet = true;\n                type = Name.Type.FUNCTION;\n                break;\n              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                if (isGlobalScope(scope)) {\n                  for (Scope.Var var : scope.getVarIterable()) {\n                    if (!var.isGlobal() || !name.equals(var.getName())) {\n                      continue;\n                    }\n                    Node nameNode = var.getNameNode();\n                    if (var.isExtern() ||\n                        (nameNode != null && nameNode.getSourceFileName() != null &&\n                        (nameNode.getSourceFileName().endsWith(\"goog/base.js\") ||\n                            nameNode.getSourceFileName().endsWith(\"base.js\")))) {\n                      // If the var is declared in base.js (or a file included\n                      // by base.js), we don't bother warning.\n                      return;\n                    }\n                  }\n                }\n            }\n          }\n          name = n.getString();\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..86eddd02 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,62 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+        case Token.NAME:\n+          // This may be a variable get or set.\n+          if (parent != null) {\n+            switch (parent.getType()) {\n+              case Token.VAR:\n+                isSet = true;\n+                Node rvalueVar = n.getFirstChild();\n+                type = rvalueVar == null ? Name.Type.OTHER : getValueType(rvalueVar);\n+                break;\n+              case Token.ASSIGN:\n+                if (parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = getValueType(n.getNext());\n+                }\n+                break;\n+              case Token.GETPROP:\n+                return;\n+              case Token.FUNCTION:\n+                Node grampsFunction = parent.getParent();\n+                if (grampsFunction == null || NodeUtil.isFunctionExpression(parent)) {\n+                  return;\n+                }\n+                isSet = true;\n+                type = Name.Type.FUNCTION;\n+                break;\n+              case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+                if (isGlobalScope(scope)) {\n+                  for (Scope.Var var : scope.getVarIterable()) {\n+                    if (!var.isGlobal() || !name.equals(var.getName())) {\n+                      continue;\n+                    }\n+                    Node nameNode = var.getNameNode();\n+                    if (var.isExtern() ||\n+                        (nameNode != null && nameNode.getSourceFileName() != null &&\n+                        (nameNode.getSourceFileName().endsWith(\"goog/base.js\") ||\n+                            nameNode.getSourceFileName().endsWith(\"base.js\")))) {\n+                      // If the var is declared in base.js (or a file included\n+                      // by base.js), we don't bother warning.\n+                      return;\n+                    }\n+                  }\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable name might not have been initialized",
    "test_result": "ERROR"
}