{
    "patch": "    if (n.getType() != Token.IF && n.getType() != Token.HOOK) {\n      return;\n    }\n    // The true branch is entered by default, so if the false branch exists, we can assume\n    // it has an exception handler.\n    if (NodeUtil.getTwoChildren n).getSecondChild() != null) {\n      maybeRemoveUnreachableNodes(cfg, NodeUtil.getTwoChildren n).getSecondChild());\n      needsCfgUpdate = true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..90631308 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,15 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+    if (n.getType() != Token.IF && n.getType() != Token.HOOK) {\n+      return;\n+    }\n+    // The true branch is entered by default, so if the false branch exists, we can assume\n+    // it has an exception handler.\n+    if (NodeUtil.getTwoChildren n).getSecondChild() != null) {\n+      maybeRemoveUnreachableNodes(cfg, NodeUtil.getTwoChildren n).getSecondChild());\n+      needsCfgUpdate = true;\n+    }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}