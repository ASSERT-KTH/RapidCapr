{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            // determine if error was \"thrown\" by date fields\n            boolean hasDateField = false;\n            for (int i = 0; i < count; i++) {\n                hasDateField |= DateTimeFieldType.forField(savedFields[i].getField()).isDateField();\n            }\n            if (hasDateField) {\n                // let's assume that the illegal value is the one that caused the problem\n                throw e;\n            } else {\n                // error must have been from a time-only field\n                if (!resetFields) {\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].isSaved()) {\n                            savedFields[i].save();\n                        }\n                    }\n                    long dtMillis = computeMillis(true, text);\n                    for (int i = 0; i < count; i++) {\n                        if (savedFields[i].isSaved()) {\n                            if (!savedFields[i].restore(dtMillis)) {\n                                resetFields = true;\n                            }\n                        }\n                    }\n                }\n                if (resetFields) {\n                    for (int i = 0; i < count; i++) {\n                        savedFields[i].reset();\n                    }\n                    return computeMillis(true, text);\n                } else {\n                    String message = \"Cannot parse \\\"\" + text + '\"';\n                    if (e.getMessage().startsWith(\"Negative\")) {\n                        message = \"Invalid format: \\\"\" + text + \"\\\" is a negative time\";\n                    } else if (e.getMessage().startsWith(\"Positive\")) {\n                        message = \"Invalid format: \\\"\" + text + \"\\\" is an unparsable positive duration\";\n                    }\n                    throw new IllegalArgumentException(message, e);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..7a62109f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,52 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            // determine if error was \"thrown\" by date fields\n+            boolean hasDateField = false;\n+            for (int i = 0; i < count; i++) {\n+                hasDateField |= DateTimeFieldType.forField(savedFields[i].getField()).isDateField();\n+            }\n+            if (hasDateField) {\n+                // let's assume that the illegal value is the one that caused the problem\n+                throw e;\n+            } else {\n+                // error must have been from a time-only field\n+                if (!resetFields) {\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].isSaved()) {\n+                            savedFields[i].save();\n+                        }\n+                    }\n+                    long dtMillis = computeMillis(true, text);\n+                    for (int i = 0; i < count; i++) {\n+                        if (savedFields[i].isSaved()) {\n+                            if (!savedFields[i].restore(dtMillis)) {\n+                                resetFields = true;\n+                            }\n+                        }\n+                    }\n+                }\n+                if (resetFields) {\n+                    for (int i = 0; i < count; i++) {\n+                        savedFields[i].reset();\n+                    }\n+                    return computeMillis(true, text);\n+                } else {\n+                    String message = \"Cannot parse \\\"\" + text + '\"';\n+                    if (e.getMessage().startsWith(\"Negative\")) {\n+                        message = \"Invalid format: \\\"\" + text + \"\\\" is a negative time\";\n+                    } else if (e.getMessage().startsWith(\"Positive\")) {\n+                        message = \"Invalid format: \\\"\" + text + \"\\\" is an unparsable positive duration\";\n+                    }\n+                    throw new IllegalArgumentException(message, e);\n+                }\n+            }\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}