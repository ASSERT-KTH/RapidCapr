{
    "patch": "private boolean isDirective(Node n) {\n  if (n == null) return false;\n\n  int nType = n.getType();\n  return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n      n.getFirstChild().getType() == Token.STRING &&\n      ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..693bb3b1 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,14 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+private boolean isDirective(Node n) {\n+  if (n == null) return false;\n+\n+  int nType = n.getType();\n+  return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n+      n.getFirstChild().getType() == Token.STRING &&\n+      ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}