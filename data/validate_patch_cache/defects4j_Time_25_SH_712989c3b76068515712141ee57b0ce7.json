{
    "patch": "            if (offsetLocal > offsetAdjusted || (offsetLocal == offsetAdjusted && \n                (getOffset(instantAdjusted - 1) != offsetLocal ||\n                 getOffset(instantLocal + 1) != offsetAdjusted))) {\n                long prevLocal = previousTransition(instantAdjusted - 1);\n                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n                if (prevLocal != prevAdjusted) {\n                    return offsetLocal;\n                }\n            } else {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..763e9dd5 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,21 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if (offsetLocal > offsetAdjusted || (offsetLocal == offsetAdjusted && \n+                (getOffset(instantAdjusted - 1) != offsetLocal ||\n+                 getOffset(instantLocal + 1) != offsetAdjusted))) {\n+                long prevLocal = previousTransition(instantAdjusted - 1);\n+                long prevAdjusted = previousTransition(instantLocal - offsetAdjusted - 1);\n+                if (prevLocal != prevAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-11-04T01:00:00.000-05:00 expected:<2007-11-04T0[2]:00:00.000-05:00> but was:<2007-11-04T0[1]:00:00.000-05:00>",
    "test_result": "FAIL"
}