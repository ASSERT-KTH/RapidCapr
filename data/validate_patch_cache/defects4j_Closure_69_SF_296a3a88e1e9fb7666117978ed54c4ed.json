{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    Iterable<BasicBlock> successors = cfgNode.getNext(); \n    for (BasicBlock successor : successors) {\n        ControlFlowGraph.Branch branch = successor.getIncomingBranch(cfgNode);      \n        if (branch == Branch.ON_EX || \n            branch == Branch.ON_TRUE_EXCEPTION || \n            branch == Branch.ON_FALSE_EXCEPTION || \n            branch == Branch.ON_SUCCESSFUL_GUARD ||\n            branch == Branch.ON_FAILED_GUARD) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..56ef7056 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,53 +1541,20 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n-    Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n-      return;\n-    }\n-\n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n-\n-      boolean isExtern = false;\n-      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n-        CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n-      }\n-\n-      // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n-      }\n-\n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n-\n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n-      ensureTyped(t, n);\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    Iterable<BasicBlock> successors = cfgNode.getNext(); \n+    for (BasicBlock successor : successors) {\n+        ControlFlowGraph.Branch branch = successor.getIncomingBranch(cfgNode);      \n+        if (branch == Branch.ON_EX || \n+            branch == Branch.ON_TRUE_EXCEPTION || \n+            branch == Branch.ON_FALSE_EXCEPTION || \n+            branch == Branch.ON_SUCCESSFUL_GUARD ||\n+            branch == Branch.ON_FAILED_GUARD) {\n+            return true;\n+        }\n     }\n-\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n-  }\n+    return false;\n+}\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}