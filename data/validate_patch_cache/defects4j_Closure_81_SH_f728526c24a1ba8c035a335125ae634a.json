{
    "patch": "    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n      Node target = edge.getTarget();\n\n      if ((edge.getValue() == Branch.ON_TRUE ||\n           edge.getValue() == Branch.ON_FALSE) &&\n           (target.getType() == Token.CATCH)) {\n        return true;\n      }\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..93747e0a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,20 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+      Node target = edge.getTarget();\n+\n+      if ((edge.getValue() == Branch.ON_TRUE ||\n+           edge.getValue() == Branch.ON_FALSE) &&\n+           (target.getType() == Token.CATCH)) {\n+        return true;\n+      }\n+    }\n+    return false;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}