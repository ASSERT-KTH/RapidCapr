{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n\n      Node value = callTarget.getNext();\n      if (value != null && value.getNext() == null && (!value.isString() || !value.getString().isEmpty())) {\n        \n        Node addition = IR.add(\n            IR.string(\"\").srcref(callTarget),\n            value.detachFromParent());\n        \n        addition.srcrefTree(n);\n        n.replaceWith(addition);\n\n        reportCodeChange();\n        return addition;\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..0acd1629 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -204,24 +204,22 @@ class PeepholeSubstituteAlternateSyntax\n       }\n     }\n   }\n-\n-  private Node tryFoldSimpleFunctionCall(Node n) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n           callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+      if (value != null && value.getNext() == null && (!value.isString() || !value.getString().isEmpty())) {\n+        \n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n+        \n+        addition.srcrefTree(n);\n+        n.replaceWith(addition);\n+\n         reportCodeChange();\n         return addition;\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}