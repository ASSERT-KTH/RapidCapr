{
    "patch": "static {\n    // Read in the properties file\n    try {\n        InputStream is = LocaleUtils.class.getResourceAsStream(\"/org/apache/commons/lang/LocaleUtils.properties\");\n        try {\n            localeData = new Properties();\n            localeData.load(is);\n        } finally {\n            closeQuietly(is);\n        }\n    } catch (IOException ex) {\n        throw new RuntimeException(ex);\n    }\n\n    // Initialize the available locale set\n    cAvailableLocaleSet = Collections.synchronizedSet(new HashSet<Locale>());\n\n    String availableLocaleList = localeData.getProperty(KEY_AVAILABLE_LOCALE_LIST);\n    if (availableLocaleList != null && availableLocaleList.length() > 0) {\n        String[] localeNames = availableLocaleList.split(\",\");\n        for (String localeName : localeNames) {\n            cAvailableLocaleSet.add(LocaleUtils.toLocale(localeName.trim()));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..355af131 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,31 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+static {\n+    // Read in the properties file\n+    try {\n+        InputStream is = LocaleUtils.class.getResourceAsStream(\"/org/apache/commons/lang/LocaleUtils.properties\");\n+        try {\n+            localeData = new Properties();\n+            localeData.load(is);\n+        } finally {\n+            closeQuietly(is);\n+        }\n+    } catch (IOException ex) {\n+        throw new RuntimeException(ex);\n+    }\n+\n+    // Initialize the available locale set\n+    cAvailableLocaleSet = Collections.synchronizedSet(new HashSet<Locale>());\n+\n+    String availableLocaleList = localeData.getProperty(KEY_AVAILABLE_LOCALE_LIST);\n+    if (availableLocaleList != null && availableLocaleList.length() > 0) {\n+        String[] localeNames = availableLocaleList.split(\",\");\n+        for (String localeName : localeNames) {\n+            cAvailableLocaleSet.add(LocaleUtils.toLocale(localeName.trim()));\n+        }\n+    }\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}