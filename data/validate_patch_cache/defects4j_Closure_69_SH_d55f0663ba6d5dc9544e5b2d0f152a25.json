{
    "patch": "      final TypeI typeOfThis = functionType.getTypeOfThis();\n      if (typeOfThis != null && !NodeUtil.isGet(child.getParent())) {\n        if(!(typeOfThis instanceof ObjectType) ||\n            !(( ObjectType) typeOfThis).getConstructor().isFromExtern()) {\n          report(t, n, INCORRECT_THIS_TYPE, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..85863bc8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      final TypeI typeOfThis = functionType.getTypeOfThis();\n+      if (typeOfThis != null && !NodeUtil.isGet(child.getParent())) {\n+        if(!(typeOfThis instanceof ObjectType) ||\n+            !(( ObjectType) typeOfThis).getConstructor().isFromExtern()) {\n+          report(t, n, INCORRECT_THIS_TYPE, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}