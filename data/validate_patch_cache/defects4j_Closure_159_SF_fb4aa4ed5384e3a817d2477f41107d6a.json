{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    if (changed == null) {\n      throw new IllegalArgumentException(\"Changed functions set cannot be null.\");\n    }\n    if (node == null) {\n      return;\n    }\n\n    // For each referenced function, add a new reference\n    switch (node.getType()) {\n      case Token.CALL:\n        Node child = node.getFirstChild();\n        if (child != null && child.getType() == Token.NAME) {\n          changed.add(child.getString());\n        }\n        while (child != null) {\n          findCalledFunctions(child, changed);\n          child = child.getNext();\n        }\n        break;\n      case Token.FUNCTION:\n        changed.add(node.getFirstChild().getString());\n        break;\n      default:\n        Node firstChild = node.getFirstChild();\n        while (firstChild != null) {\n          findCalledFunctions(firstChild, changed);\n          firstChild = firstChild.getNext();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..8dc54aaa 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,37 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    if (changed == null) {\n+      throw new IllegalArgumentException(\"Changed functions set cannot be null.\");\n+    }\n+    if (node == null) {\n+      return;\n     }\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    // For each referenced function, add a new reference\n+    switch (node.getType()) {\n+      case Token.CALL:\n+        Node child = node.getFirstChild();\n+        if (child != null && child.getType() == Token.NAME) {\n+          changed.add(child.getString());\n+        }\n+        while (child != null) {\n+          findCalledFunctions(child, changed);\n+          child = child.getNext();\n+        }\n+        break;\n+      case Token.FUNCTION:\n+        changed.add(node.getFirstChild().getString());\n+        break;\n+      default:\n+        Node firstChild = node.getFirstChild();\n+        while (firstChild != null) {\n+          findCalledFunctions(firstChild, changed);\n+          firstChild = firstChild.getNext();\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}