{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null && array2 == null) {\n        throw new IllegalArgumentException(\"Cannot add two null arrays.\");\n    } else if (array1 == null) {\n        return array2.clone();\n    } else if (array2 == null) {\n        return array1.clone();\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (type1 == null && type2 == null) {\n        throw new IllegalArgumentException(\"Cannot add arrays with unknown type.\");\n    }\n\n    if (type1 == null || type2 == null) {\n        final Class<?> type = type1 != null ? type1 : type2;\n        final T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n        return joinedArray;\n    }\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n    }\n\n    fina",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..d1d27a30 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,36 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n-        }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null && array2 == null) {\n+        throw new IllegalArgumentException(\"Cannot add two null arrays.\");\n+    } else if (array1 == null) {\n+        return array2.clone();\n+    } else if (array2 == null) {\n+        return array1.clone();\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    if (type1 == null && type2 == null) {\n+        throw new IllegalArgumentException(\"Cannot add arrays with unknown type.\");\n+    }\n+\n+    if (type1 == null || type2 == null) {\n+        final Class<?> type = type1 != null ? type1 : type2;\n+        final T[] joinedArray = (T[]) Array.newInstance(type, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         return joinedArray;\n     }\n \n+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n+    }\n+\n+    fina\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}