{
    "patch": "        LocalTime localTime = new LocalTime(instantLocal, chronoLocal);\n        ChronoLocalDate chronoLocalDate = bucket.computeLocalDate(localTime.getChronology());\n        Chronology chrono = selectChronology(chronoLocalDate.getChronology());\n        LocalDateTime dt = null;\n        \n        try {\n            dt = new LocalDateTime(\n>>> [ INFILL ] <<<\n                    localTime.getMillisOfSecond(),\n                    chrono);\n        } catch (IllegalArgumentException ex) {\n            if (dt == null) {\n                long localMillis = chronoLocalDate.getLocalMillis();\n                if (!chronoLocalDate.getChronology().hourOfDay().roundFloor(localMillis).equals(localMillis)) {\n                    return ~position;\n                } else {\n                    return (int) (localMillis - instantLocal) / MILLIS_PER_SECOND;\n                }\n            }\n        }\n        \n        DateTimeZone zone;\n        if (bucket.getOffsetInteger() != null) {\n            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n        } else {\n            zone = dt.getZone();\n            if (iZone != null) {\n                zone = iZone;\n            }\n        }\n        instant.setMillis(dt.toDateTime(zone).getMillis());\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return bucket.getParsePosition();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..559fa99b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,42 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        LocalTime localTime = new LocalTime(instantLocal, chronoLocal);\n+        ChronoLocalDate chronoLocalDate = bucket.computeLocalDate(localTime.getChronology());\n+        Chronology chrono = selectChronology(chronoLocalDate.getChronology());\n+        LocalDateTime dt = null;\n+        \n+        try {\n+            dt = new LocalDateTime(\n+>>> [ INFILL ] <<<\n+                    localTime.getMillisOfSecond(),\n+                    chrono);\n+        } catch (IllegalArgumentException ex) {\n+            if (dt == null) {\n+                long localMillis = chronoLocalDate.getLocalMillis();\n+                if (!chronoLocalDate.getChronology().hourOfDay().roundFloor(localMillis).equals(localMillis)) {\n+                    return ~position;\n+                } else {\n+                    return (int) (localMillis - instantLocal) / MILLIS_PER_SECOND;\n+                }\n+            }\n+        }\n+        \n+        DateTimeZone zone;\n+        if (bucket.getOffsetInteger() != null) {\n+            zone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+        } else {\n+            zone = dt.getZone();\n+            if (iZone != null) {\n+                zone = iZone;\n+            }\n+        }\n+        instant.setMillis(dt.toDateTime(zone).getMillis());\n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return bucket.getParsePosition();\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}