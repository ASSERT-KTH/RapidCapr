{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (left.isArrayLit()) {\n      if (intIndex < left.getChildCount()) {\n        return left.removeChildAtIndex(intIndex);\n      }\n      error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    } else if (left.isCall()) {\n      // Cases like \"foo()[index]\"\n      return n;\n    } else if (left.isGetElem() && isIndexValue(left.getLastChild())) {\n      // Cases like x[y][z] and x[y][z][w][v]\n      // (but not if x is an array literal)\n      Node target = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n      if (target.isObjectLit() || target.isArrayLit()) {\n        // We don't fold cases like \"{}[x]\", but we do fold cases like \"a()[x]\"\n        return n;\n      }\n      return tryFoldArrayAccess(left, target, right);\n    } else {\n      // Cases like \"x[y]\"\n      Node current = left;\n      Node elem = null;\n      for (int i = 0; current != null && i <= intIndex; i++) {\n        if (i == intIndex) {\n          elem = current;\n          break;\n        }\n        if (current.isObjectLit()) {\n          elem = NodeUtil.newUndefinedNode(left);\n          break;\n        }\n        current = current.getNext();\n      }\n\n      if (elem == null) {\n        error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.isEmpty()) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        parent.replaceChild(n, elem);\n      }\n      return elem;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..ce9bcca2 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1441,34 +1441,52 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (left.isArrayLit()) {\n+      if (intIndex < left.getChildCount()) {\n+        return left.removeChildAtIndex(intIndex);\n+      }\n+      error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    } else if (left.isCall()) {\n+      // Cases like \"foo()[index]\"\n       return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    } else if (left.isGetElem() && isIndexValue(left.getLastChild())) {\n+      // Cases like x[y][z] and x[y][z][w][v]\n+      // (but not if x is an array literal)\n+      Node target = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n+      if (target.isObjectLit() || target.isArrayLit()) {\n+        // We don't fold cases like \"{}[x]\", but we do fold cases like \"a()[x]\"\n+        return n;\n+      }\n+      return tryFoldArrayAccess(left, target, right);\n     } else {\n-      left.removeChild(elem);\n-    }\n+      // Cases like \"x[y]\"\n+      Node current = left;\n+      Node elem = null;\n+      for (int i = 0; current != null && i <= intIndex; i++) {\n+        if (i == intIndex) {\n+          elem = current;\n+          break;\n+        }\n+        if (current.isObjectLit()) {\n+          elem = NodeUtil.newUndefinedNode(left);\n+          break;\n+        }\n+        current = current.getNext();\n+      }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n+      if (elem == null) {\n+        error(JSC_INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      if (elem.isEmpty()) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        parent.replaceChild(n, elem);\n+      }\n+      return elem;\n+    }\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}