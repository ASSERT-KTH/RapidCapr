{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (!NodeUtil.isFunctionExpression(n)) {\n      return false;\n  }\n  Scope scope = n.getScope();\n  if (scope.isDeclared(\"arguments\", false)) {\n      return false;\n  }\n  Node functionNameNode = NodeUtil.getFunctionNameNode(n);\n  if (NodeUtil.isNameDeclaration(functionNameNode)) {\n      return false;\n  }\n  if (NodeUtil.isNameReference(functionNameNode)\n          && scope.getVar(functionNameNode.getString(), functionNameNode)\n                  .getParentNode()\n                  .isFunction()) {\n      return false;\n  }\n  return NodeUtil.getFunctionParameters(n).isEmpty()\n          && NodeUtil.getFunctionBody(n).hasChildren();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..22d61506 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,27 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (!NodeUtil.isFunctionExpression(n)) {\n+      return false;\n   }\n+  Scope scope = n.getScope();\n+  if (scope.isDeclared(\"arguments\", false)) {\n+      return false;\n+  }\n+  Node functionNameNode = NodeUtil.getFunctionNameNode(n);\n+  if (NodeUtil.isNameDeclaration(functionNameNode)) {\n+      return false;\n+  }\n+  if (NodeUtil.isNameReference(functionNameNode)\n+          && scope.getVar(functionNameNode.getString(), functionNameNode)\n+                  .getParentNode()\n+                  .isFunction()) {\n+      return false;\n+  }\n+  return NodeUtil.getFunctionParameters(n).isEmpty()\n+          && NodeUtil.getFunctionBody(n).hasChildren();\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}