{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType() == null ? null \n        : constructor.getJSType().restrictByNotNullOrUndefined();\n\n    // If constructorType is null, there's an issue with the argument type checking\n    // Later code requires a non-null ct variable.\n    FunctionType ct = null;\n    if (constructorType != null) {\n      ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType.isFunctionType()) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n    }\n\n    JSType type;\n    if (ct == null) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else if (ct.isConstructor()) {\n      type = ct.getThisType();\n    } else { // function, object, etc.\n      // We still allocate an object *if* a object or function, to avoid type information loss.\n      // E.g. don't widen away {function()} or {string}.\n      type = getNativeType(OBJECT_TYPE);\n    }\n    n.setJSType(type);\n\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..74239160 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,34 +1031,41 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n+    JSType constructorType = constructor.getJSType() == null ? null \n+        : constructor.getJSType().restrictByNotNullOrUndefined();\n+\n+    // If constructorType is null, there's an issue with the argument type checking\n+    // Later code requires a non-null ct variable.\n+    FunctionType ct = null;\n     if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+      ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType.isFunctionType()) {\n+        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n+        // return null. But NoObjectType implements the FunctionType\n+        // interface, precisely because it can validly construct objects.\n+        ct = (FunctionType) constructorType;\n       }\n     }\n+\n+    JSType type;\n+    if (ct == null) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else if (ct.isConstructor()) {\n+      type = ct.getThisType();\n+    } else { // function, object, etc.\n+      // We still allocate an object *if* a object or function, to avoid type information loss.\n+      // E.g. don't widen away {function()} or {string}.\n+      type = getNativeType(OBJECT_TYPE);\n+    }\n     n.setJSType(type);\n+\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }\n+\n     return scope;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}