{
    "patch": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (Exception e) {\n                error = handleVerifyException(e);\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }\n\n    private AssertionError handleVerifyException(Exception e) {\n        return new AssertionError(e.getMessage(), e);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..9fc518c4b 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -85,10 +85,7 @@ public class VerificationOverTimeImpl implements VerificationMode {\n                 } else {\n                     error = null;\n                 }\n-            } catch (MockitoAssertionError e) {\n-                error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+            } catch (Exception e) {\n                 error = handleVerifyException(e);\n             }\n         }\n@@ -98,6 +95,10 @@ public class VerificationOverTimeImpl implements VerificationMode {\n         }\n     }\n \n+    private AssertionError handleVerifyException(Exception e) {\n+        return new AssertionError(e.getMessage(), e);\n+    }\n+\n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {\n             sleep(pollingPeriodMillis);",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}