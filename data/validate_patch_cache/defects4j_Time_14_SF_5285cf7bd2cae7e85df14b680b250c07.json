{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changedDay = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) {\n                    // add to value\n                    int curValue = partial.getFieldType(i).getField(iChronology).get(instant);\n                    int wrappedValue = FieldUtils.getWrappedValue(curValue, valueToAdd, 1, partial.getFieldType(i).getMaximumValue(), partial.getFieldType(i).getMinimumValue());\n                    if (wrappedValue != curValue) {\n                        // must be a month or year wrap\n                        int day = partial.getFieldType(0).getField(iChronology).get(instant);\n                        instant = partial.getFieldType(i).getField(iChronology).set(instant, wrappedValue);\n                        if (day > 28) {  // try to retain same day of month\n                            int dayRolled = iChronology.dayOfMonth().getMaximumValue(instant);\n                            if (day > dayRolled) {\n                                day = dayRolled;\n                            }\n                            instant = iChronology.dayOfMonth().set(instant, day);\n                                changedDay = true;\n                            }\n                    }\n                } else {\n                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n                }\n            }\n            if (changedDay) {\n                // check if day overflowed\n                int month = iChronology.monthOfYear().get(instant);\n                if (month != values[DateTimeFieldType.monthOfYear()]) {\n                    throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), Integer.valueOf(month), null, null);\n                }\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..d93dd8f8 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,11 +206,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changedDay = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == fieldIndex) {\n+                    // add to value\n+                    int curValue = partial.getFieldType(i).getField(iChronology).get(instant);\n+                    int wrappedValue = FieldUtils.getWrappedValue(curValue, valueToAdd, 1, partial.getFieldType(i).getMaximumValue(), partial.getFieldType(i).getMinimumValue());\n+                    if (wrappedValue != curValue) {\n+                        // must be a month or year wrap\n+                        int day = partial.getFieldType(0).getField(iChronology).get(instant);\n+                        instant = partial.getFieldType(i).getField(iChronology).set(instant, wrappedValue);\n+                        if (day > 28) {  // try to retain same day of month\n+                            int dayRolled = iChronology.dayOfMonth().getMaximumValue(instant);\n+                            if (day > dayRolled) {\n+                                day = dayRolled;\n+                            }\n+                            instant = iChronology.dayOfMonth().set(instant, day);\n+                                changedDay = true;\n+                            }\n+                    }\n+                } else {\n+                    instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                }\n+            }\n+            if (changedDay) {\n+                // check if day overflowed\n+                int month = iChronology.monthOfYear().get(instant);\n+                if (month != values[DateTimeFieldType.monthOfYear()]) {\n+                    throw new org.joda.time.IllegalFieldValueException(DateTimeFieldType.monthOfYear(), Integer.valueOf(month), null, null);\n+                }\n             }\n             instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}