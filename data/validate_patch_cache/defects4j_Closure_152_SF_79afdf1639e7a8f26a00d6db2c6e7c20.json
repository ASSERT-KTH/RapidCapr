{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = safeResolve(call, t, scope).autobox();\n    prototype = safeResolve(prototype, t, scope).autobox();\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    typeOfThis = safeResolve(typeOfThis, t, scope).autobox();\n\n    boolean changed = false;\n    ImmutableList.Builder<JSType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (JSType iface : implementedInterfaces) {\n      JSType resolvedIface = iface.resolve(t, scope).autobox();\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build()\n        .stream().map(iface -> (ObjectType) iface).collect(Collectors.toList());\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox().toMaybeFunctionType());\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..29fa11b7 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -862,29 +862,30 @@ public class FunctionType extends PrototypeObjectType {\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    call = safeResolve(call, t, scope).autobox();\n+    prototype = safeResolve(prototype, t, scope).autobox();\n \n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    typeOfThis = safeResolve(typeOfThis, t, scope).autobox();\n \n     boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n+    ImmutableList.Builder<JSType> resolvedInterfaces =\n         ImmutableList.builder();\n-    for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+    for (JSType iface : implementedInterfaces) {\n+      JSType resolvedIface = iface.resolve(t, scope).autobox();\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n     if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n+      implementedInterfaces = resolvedInterfaces.build()\n+        .stream().map(iface -> (ObjectType) iface).collect(Collectors.toList());\n     }\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, subTypes.get(i).resolve(t, scope).autobox().toMaybeFunctionType());\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}