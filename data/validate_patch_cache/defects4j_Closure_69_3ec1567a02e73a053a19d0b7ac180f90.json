{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType.isFunctionType()) {\n      FunctionType functionType = childType.toMaybeFunctionType();\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null && functionJSDocInfo.isFromExterns()) {\n        String sourceName = functionJSDocInfo.getFileoverview().getName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource != null && functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      if (functionType.getThisType() != null &&\n          NodeUtil.getEnclosingType(n.getParent()) == null &&\n          !mayBeInArrowFunction(t.getScope())) {\n        report(t, n, ILLEGAL_THIS);\n      }\n\n      visitParameterList(t, n, functionType);\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }\n  \n  private static boolean mayBeInArrowFunction(Node fnNode) {\n    return (fnNode.isFunction()\n            && !fnNode.getBooleanProp(Node.IS_ARROW_FUNCTION))\n        || (fnNode.getParent().isFunction()\n            && fnNode.getParent().isArrowFunction());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..a774e558 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,7 +1541,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n+private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n@@ -1553,15 +1553,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n     // A couple of types can be called as if they were functions.\n     // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n+    if (childType.isFunctionType()) {\n+      FunctionType functionType = childType.toMaybeFunctionType();\n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n-        String sourceName = functionJSDocInfo.getSourceName();\n+      if(functionJSDocInfo != null && functionJSDocInfo.isFromExterns()) {\n+        String sourceName = functionJSDocInfo.getFileoverview().getName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n-        isExtern = functionSource.isExtern();\n+        isExtern = functionSource != null && functionSource.isExtern();\n       }\n \n       // Non-native constructors should not be called directly\n@@ -1575,8 +1575,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      if (functionType.getThisType() != null &&\n+          NodeUtil.getEnclosingType(n.getParent()) == null &&\n+          !mayBeInArrowFunction(t.getScope())) {\n+        report(t, n, ILLEGAL_THIS);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n@@ -1588,6 +1591,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     // supported by IE.  Either say something about the return type or warn\n     // about the non-portability of the call or both.\n   }\n+  \n+  private static boolean mayBeInArrowFunction(Node fnNode) {\n+    return (fnNode.isFunction()\n+            && !fnNode.getBooleanProp(Node.IS_ARROW_FUNCTION))\n+        || (fnNode.getParent().isFunction()\n+            && fnNode.getParent().isArrowFunction());\n+  }\n \n   /**\n    * Visits the parameters of a CALL or a NEW node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}