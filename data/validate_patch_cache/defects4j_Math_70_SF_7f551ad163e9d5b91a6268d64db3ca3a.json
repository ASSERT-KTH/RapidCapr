{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    if (f == null) {\n        throw new NullPointerException(\"The function f cannot be null.\");\n    }\n    if (min > max) {\n        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n    }\n\n    final int defaultMaxIterations = 100;\n    final double defaultAbsoluteAccuracy = 1e-6;\n\n    double result = Double.NaN;\n    double x = initial;\n    double fMin = Double.NaN;\n    double fMax = Double.NaN;\n    double fInitial = f.value(initial);\n\n    if (fInitial == 0.0) {\n        return initial;\n    } else if (fInitial < 0.0) {\n        fMin = fInitial;\n        fMax = f.value(max);\n        x = min;\n    } else {\n        fMin = f.value(min);\n        fMax = fInitial;\n        x = max;\n    }\n\n    double lastX = Double.NaN;\n    while (true) {\n        double nextX = UnivariateRealSolverUtils.midpoint(min, max);\n\n        double fNext = f.value(nextX);\n        if (fNext == 0.0) {\n            return nextX;\n        } else if (fNext < 0.0) {\n            fMin = fNext;\n            max = nextX;\n        } else {\n            fMax = fNext;\n            min = nextX;\n        }\n\n        if (lastX != Double.NaN && Math.abs(nextX - lastX) < defaultAbsoluteAccuracy) {\n            result = nextX;\n            break;\n        }\n\n        lastX = nextX;\n\n        if (--defaultMaxIterations == 0) {\n            throw new MaxIterationsExceededException(defaultMaxIterations);\n        }\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..d7f7ad333 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,64 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    if (f == null) {\n+        throw new NullPointerException(\"The function f cannot be null.\");\n     }\n+    if (min > max) {\n+        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+    }\n+\n+    final int defaultMaxIterations = 100;\n+    final double defaultAbsoluteAccuracy = 1e-6;\n+\n+    double result = Double.NaN;\n+    double x = initial;\n+    double fMin = Double.NaN;\n+    double fMax = Double.NaN;\n+    double fInitial = f.value(initial);\n+\n+    if (fInitial == 0.0) {\n+        return initial;\n+    } else if (fInitial < 0.0) {\n+        fMin = fInitial;\n+        fMax = f.value(max);\n+        x = min;\n+    } else {\n+        fMin = f.value(min);\n+        fMax = fInitial;\n+        x = max;\n+    }\n+\n+    double lastX = Double.NaN;\n+    while (true) {\n+        double nextX = UnivariateRealSolverUtils.midpoint(min, max);\n+\n+        double fNext = f.value(nextX);\n+        if (fNext == 0.0) {\n+            return nextX;\n+        } else if (fNext < 0.0) {\n+            fMin = fNext;\n+            max = nextX;\n+        } else {\n+            fMax = fNext;\n+            min = nextX;\n+        }\n+\n+        if (lastX != Double.NaN && Math.abs(nextX - lastX) < defaultAbsoluteAccuracy) {\n+            result = nextX;\n+            break;\n+        }\n+\n+        lastX = nextX;\n+\n+        if (--defaultMaxIterations == 0) {\n+            throw new MaxIterationsExceededException(defaultMaxIterations);\n+        }\n+    }\n+    return result;\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "error: cannot assign a value to final variable defaultMaxIterations",
    "test_result": "ERROR"
}