{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long nextTransition = nextTransition(instantLocal);\n        if (nextTransition == instantLocal + millisPerHour()) {\n            // ambiguous local time, prefer older offset (typically summer time)\n            nextTransition = nextTransition(nextTransition);\n        }\n        if (nextTransition > instantLocal + millisPerHour()) {\n            // (gap) normal case, assume spring forwards\n            LocalDateTime localDateTime = new LocalDateTime(instantLocal, DateTimeZone.forOffsetMillis(offsetLocal));\n            long newInstant = nextTransition - 1;\n            LocalDateTime newLocalDateTime = new LocalDateTime(newInstant, DateTimeZone.forOffsetMillis(offsetLocal));\n            return (int) ((newInstant - instantLocal + (localDateTime.getZone().getOffset(newLocalDateTime) - offsetLocal)) / 2);\n        } else {\n            // (overlap) we are near the autumn transition and have two valid choices, favor the higher offset (typically winter time)\n            long previousTransition = previousTransition(instantLocal);\n            int offsetPrevious = getOffset(previousTransition);\n            return offsetPrevious;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..f01a9368 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,24 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        long nextTransition = nextTransition(instantLocal);\n+        if (nextTransition == instantLocal + millisPerHour()) {\n+            // ambiguous local time, prefer older offset (typically summer time)\n+            nextTransition = nextTransition(nextTransition);\n+        }\n+        if (nextTransition > instantLocal + millisPerHour()) {\n+            // (gap) normal case, assume spring forwards\n+            LocalDateTime localDateTime = new LocalDateTime(instantLocal, DateTimeZone.forOffsetMillis(offsetLocal));\n+            long newInstant = nextTransition - 1;\n+            LocalDateTime newLocalDateTime = new LocalDateTime(newInstant, DateTimeZone.forOffsetMillis(offsetLocal));\n+            return (int) ((newInstant - instantLocal + (localDateTime.getZone().getOffset(newLocalDateTime) - offsetLocal)) / 2);\n+        } else {\n+            // (overlap) we are near the autumn transition and have two valid choices, favor the higher offset (typically winter time)\n+            long previousTransition = previousTransition(instantLocal);\n+            int offsetPrevious = getOffset(previousTransition);\n+            return offsetPrevious;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}