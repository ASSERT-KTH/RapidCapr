{
    "patch": "if (f0 * fx < 0) {\n    x1 = x;\n    f1 = fx;\n} else if (f0 * f1 > 0) {\n    x0 = x;\n    f0 = fx;\n} else {\n    double dx = FastMath.max(rtol * FastMath.abs(x1), atol);\n    double oldf1 = f1;\n    double x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n    double f2 = computeObjectiveValue(x2);\n    double df = f2 - f1;\n    double ddf = df - (f1 - f0);\n    double dx2 = (2 * ftol * FastMath.abs(x1)) / FastMath.abs(ddf);\n    if (FastMath.abs(dx2) < FastMath.min(dx, FastMath.abs(x1 - x0) / 100.0)) {\n        dx = FastMath.abs(dx2);\n        // If we want to adjust the bracketing interval to stay at least as strict as\n        // the current accuracy, we need to respect the allowed solution side.\n        if (f1 > f0) {\n            x0 = x1 - dx;\n        } else {\n            x1 = x1 + dx;\n        }\n    } else {\n        if (df > 0) {\n            if (inverted) {\n                x0 = x1;\n            } else {\n                x1 = x0;\n            }\n            f1 = f0;\n        }\n        x0 = x1;\n        f0 = f1;\n        x1 = x2;\n        f1 = f2;\n    }\n    // Update inverted status.\n    inverted = x1 < x0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..f3897eece 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,46 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (f0 * fx < 0) {\n+    x1 = x;\n+    f1 = fx;\n+} else if (f0 * f1 > 0) {\n+    x0 = x;\n+    f0 = fx;\n+} else {\n+    double dx = FastMath.max(rtol * FastMath.abs(x1), atol);\n+    double oldf1 = f1;\n+    double x2 = x1 - (f1 * (x1 - x0)) / (f1 - f0);\n+    double f2 = computeObjectiveValue(x2);\n+    double df = f2 - f1;\n+    double ddf = df - (f1 - f0);\n+    double dx2 = (2 * ftol * FastMath.abs(x1)) / FastMath.abs(ddf);\n+    if (FastMath.abs(dx2) < FastMath.min(dx, FastMath.abs(x1 - x0) / 100.0)) {\n+        dx = FastMath.abs(dx2);\n+        // If we want to adjust the bracketing interval to stay at least as strict as\n+        // the current accuracy, we need to respect the allowed solution side.\n+        if (f1 > f0) {\n+            x0 = x1 - dx;\n+        } else {\n+            x1 = x1 + dx;\n+        }\n+    } else {\n+        if (df > 0) {\n+            if (inverted) {\n+                x0 = x1;\n+            } else {\n+                x1 = x0;\n+            }\n+            f1 = f0;\n+        }\n+        x0 = x1;\n+        f0 = f1;\n+        x1 = x2;\n+        f1 = f2;\n+    }\n+    // Update inverted status.\n+    inverted = x1 < x0;\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}