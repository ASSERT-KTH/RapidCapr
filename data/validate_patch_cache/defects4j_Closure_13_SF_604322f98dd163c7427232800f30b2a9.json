{
    "patch": "private void traverse(Node node) {\n   if (!shouldVisit(node)) {\n      return;\n   }\n\n   LinkedList<Node> nodeQueue = new LinkedList<>();\n   nodeQueue.add(node);\n\n   while (!nodeQueue.isEmpty()) {\n      Node current = nodeQueue.poll();\n      visit(current);\n\n      Node child = current.getFirstChild();\n      while (child != null) {\n         nodeQueue.add(child);\n         child = child.getNext();\n      }\n\n      if (shouldRetraverse(current)) {\n         nodeQueue.add(current);\n      }\n   }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..a143ddf6 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,29 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n-    if (!shouldVisit(node)) {\n+private void traverse(Node node) {\n+   if (!shouldVisit(node)) {\n       return;\n-    }\n+   }\n \n-    int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+   LinkedList<Node> nodeQueue = new LinkedList<>();\n+   nodeQueue.add(node);\n \n-      visit(node);\n-      visits++;\n+   while (!nodeQueue.isEmpty()) {\n+      Node current = nodeQueue.poll();\n+      visit(current);\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+      Node child = current.getFirstChild();\n+      while (child != null) {\n+         nodeQueue.add(child);\n+         child = child.getNext();\n+      }\n \n-    exitNode(node);\n-  }\n+      if (shouldRetraverse(current)) {\n+         nodeQueue.add(current);\n+      }\n+   }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}