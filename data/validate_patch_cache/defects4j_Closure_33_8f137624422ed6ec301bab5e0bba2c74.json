{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n    if (this.getNominalType() != null) {\n      return;\n    }\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getOwnPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer =\n                JSType.join(getNativeType(JSTypeNative.VOID_TYPE), propType);\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..64d4b122 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,7 +554,9 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n-\n+    if (this.getNominalType() != null) {\n+      return;\n+    }\n     // Handle the case where the constraint object is a record type.\n     //\n     // param constraintObj {{prop: (number|undefined)}}\n@@ -566,12 +568,12 @@ class PrototypeObjectType extends ObjectType {\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n-        JSType propType = constraintObj.getPropertyType(prop);\n+        JSType propType = constraintObj.getOwnPropertyType(prop);\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+            typeToInfer =\n+                JSType.join(getNativeType(JSTypeNative.VOID_TYPE), propType);\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}