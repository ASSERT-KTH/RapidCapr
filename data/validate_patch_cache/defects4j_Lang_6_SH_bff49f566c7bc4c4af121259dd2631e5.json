{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                char[] c = Character.toChars(Character.codePointAt(input, pos));\n                out.write(c);\n                pos+= c.length;\n                continue;\n            }\n            int codepoint = Character.codePointAt(input, pos);\n            pos += Character.charCount(codepoint);\n            char[] repl = getReplacement(codepoint);\n            if (repl != null) {\n                out.write(repl);\n            } else {\n                out.write(codepoint);\n            }\n        }\n    }\n\n    protected char[][] uPosixReplacements;\n\n    protected char[][] javaReplacements;\n\n    private void buildLookup() {\n        final int[][] sorted = new int[uPosixReplacements.length][2];\n        for (int i=0; i<uPosixReplacements.length; i++) {\n            sorted[i][0] = uPosixReplacements[i][0];\n            sorted[i][1] = i;\n        }\n        Arrays.sort(sorted, Comparator.comparingInt(o -> o[0]));\n\n        javaReplacements = new char[uPosixReplacements.length][];\n        for (int i=0; i<uPosixReplacements.length; i++) {\n            javaReplacements[i] = null;\n        }\n        int last_end = Integer.MIN_VALUE;\n        int last_src_end = Integer.MIN_VALUE;\n        for (int i=0; i<uPosixReplacements.length; /**/) {\n            int start = sorted[i][0];\n            int end   = uPosixReplacements[sorted[i][1]][1];\n            int src_start = sorted[i][0];\n            boolean collision = false;\n            for (int j=i+1; j<uPosixReplacements.length; j++) {\n                if (uPosixReplacements[sorted[j][1]][0] > end) {\n                    break;\n                }\n                if (uPosixReplacements[sorted[j][1]][1] > end) {\n                    collision = true;\n                }\n            }\n            if (end != last_src_end && start != last_end) {\n                char[] repl = new char[end-start+1];\n                int k = 0;\n                for (int j=i; j<uPosixReplacements.length; j++) {\n                    if (uPosixReplacements[sorted[j][1]][0] > end) {\n                        break;\n                    }\n                    int pos = uPosixReplacements[sorted[j][1]][0] - src_start;\n                    final char[] piece = uPosixReplacements[sorted[j][1]];\n                    System.arraycopy(piece, 2, repl, pos, piece.length - 2);\n                }\n                javaReplacements[i] = repl;\n                last_end  = end;\n                last_src_end = end;\n            }\n            if (collision) {\n                last_end = Integer.MIN_VALUE;\n                last_src_end = end;\n            }\n            i += (collision ? 1 : 0) + 1;\n        }\n    }\n\n    private static final UnicodeUnescaper UNESCAPER =\n            new UnicodeUnescaper(\n     // BEGIN GENERATED BY UnicodeEscaperCodeGen.java\n     // GENERATED FROM u_posix_decimal_digits\n                        new int[] {10,0,12,0,48,10,49,10,50,10,51,10,52,10,53,10,\n         54,10,55,10,56,10,57,10,83,73,73,10,17,240,159,128,128,17,240,\n         159,128,129,17,240,159,128,130,17,240,159,128,131,17,240,159,128,132,\n         17,240,159,128,133,17,240,159,128,134,17,240,159,128,135,17,240,159,128,\n         136,17,240,159,128,137,17,240,159,128,138,17,240,159,128,139,17,240,159,\n         128,140,17,240,159,128,141,17,240,159,128,142,17,240,159,128,143,17,240,\n         159,128,144,17,240,159,128,145,17,240,159,128,146,17,240,159,128,147,17,\n         240,159,128,148,17,240,159,128,149,17,240,159,128,150,17,240,159,128,151,\n         17,240,159,128,152,17,240,159,128,153,17,240,159,128,154,17,240,159,128,\n         155,17,240,159,128,156,17,240,159,128,157,17,240,159,128,158,17,240,159,\n         128,159,17,240,159,128,160,17,240,159,128,161,17,240,159,128,162,17,240,\n         159,128,163,17,240,159,128,164,17,240,159,128,165,17,240,159,128,166,17,\n         240,159,128,167,17,240,159,128,168,17,240,159,128,169,17,240,159,128,170,\n         17,240,159,128,171,17,240,159,128,172,17,240,159,128,173,17,240,159,128,\n         174,17,240,159,128,175,17,240,159,128,176,17,240,159,128,177,17,240,159,\n         128,178,17,240,159,128,179,17,240,159,128,180,17,240,159,128,181,17,240,\n         159,128,182,17,240,159,128,183,17,240,159,128,184,17,240,159,128,185,17,\n         240,159,128,186,17,240,159,128,187,17,240,159,128,188,17,240,159,128,189,\n         17,240,159,128,190,17,240,159,128,191,17,240,159,129,128,17,240,159,129,\n         129,17,240,159,129,130,17,240,159,129,131,17,240,159,129,132,17,240,159,\n         129,133,17,240,159,129,134,17,240,159,129,135,17,240,159,129,136,17,240,\n         159,129,137,17,240,159,129,138,17,240,159,129,139,17,240,159,129,140,17,\n         240,159,129,141,17,240,159,129,142,17,240,159,129,143,17,240,159,129,144,\n         17,240,159,129,145,17,240,159,129,146,17,240,159,129,147,17,240,159,129,\n         148,17,240,159,129,149,17,240,159,129,150,17,240,159,129,151,17,240,159,\n         129,152,17,240,159,129,153,17,240,159,129,154,17,240,159,129,155,17,240,\n         159,129,156,17,240,159,129,157,17,240,159,129,158,17,240,159,129,159,17,\n         240,159,129,160,17,240,159,129,161,17,240,159,129,162,17,240,159,129,163,\n         17,240,159,129,164,17,240,159,129,165,17,240,159,129,166,17,240,159,129,\n         167,17,240,159,129,168,17,240,159,129,169,17,240,159,129,170,17,240,159,\n         129,171,17,240,159,129,172,17,240,159,129,173,17,240,159,129,174,17,240,\n         159,129,175,17,240,159,129,176,17,240,159,129,177,17,240,159,129,178,17,\n         240,159,129,179,17,240,159,129,180,17,240,159,129,181,17,240,159,129,182,\n         17,240,159,129,183,17,240,159,129,184,17,240,159,129,185,17,240,159,129,\n         186,17,240,159,129,187,17,240,159,129,188,17,240,159,129,189,17,240,159,\n         129,190,17,240,159,129,191,17,240,159,130,128,17,240,159,130,129,17,240,\n         159,130,130,17,240,159,130,131,17,240,159,130,132,17,240,159,130,133,17,\n         240,159,130,134,17,240,159,130,135,17,240,159,130,136,17,240,159,130,137,\n         17,240,159,130,138,17,240,159,130,139,17,240,159,130,140,17,240,159,130,\n         141,17,240,159,130,142,17,240,159,130,143,17,240,159,130,144,17,240,159,\n         130,145,17,240,159,130,146,17,240,159,130,147,17,240,159,130,148,17,240,\n         159,130,149,17,240,159,130,150,17,240,159,130,151,17,240,159,130,152,17,\n         240,159,130,153,17,240,159,130,154,17,240,159,130,155,17,240,159,130,156,\n         17,240,159,130,157,17,240,159,130,158,17,240,159,130,159,17,240,159,130,\n         160,17,240,159,130,161,17,240,159,130,162,17,240,159,130,163,17,240,159,\n         130,164,17,240,159,130,165,17,240,159,130,166,17,240,159,130,167,17,240,\n         159,130,168,17,240,159,130,169,17,240,159,130,170,17,240,159,130,171,17,\n         240,159,130,172,17,240,159,130,173,17,240,159,130,174,17,240,159,130,175,\n         17,240,159,130,176,17,240,159,130,177,17,240,159,130,178,17,240,159,130,\n         179,17,240,159,130,180,17,240,159,130,181,17,240,159,130,182,17,240,159,\n         130,183,17,240,159,130,184,17,240,159,130,185,17,240,159,130,186,17,240,\n         159,130,187,17,240,159,130,188,17,240,159,130,189,17,240,159,130,190,17,\n         240,159,130,191,17,240,159,131,128,17,240,159,131,129,17,240,159,131,130,\n         17,240,159,131,131,17,240,159,131,132,17,240,159,131,133,17,240,159,131,\n         134,17,240,159,131,135,17,240,159,131,136,17,240,159,131,137,17,240,159,\n         131,138,17,240,159,131,139,17,240,159,131,140,17,240,159,131,141,17,240,\n         159,131,142,17,240,159,131,143,17,240,159,131,144,17,240,159,131,145,17,\n         240,159,131,146,17,240,159,131,147,17,240,159,131,148,17,240,159,131,149,\n         17,240,159,131,150,17,240,159,131,151,17,240,159,131,152,17,240,159,131,\n         153,17,240,159,131,154,17,240,159,131,155,17,240,159,131,156,17,240,159,\n         131,157,17,240,159,131,158,17,240,159,131,159,17,240,159,131,160,17,240,\n         159,131,161,17,240,159,131,162,17,240,159,131,163,17,240,159,131,164,17,\n         240,159,131,165,17,240,159,131,166,17,240,159,131,167,17,240,159,131,168,\n         17,240,159,131,169,17,240,159,131,170,17,240,159,131,171,17,240,159,131,\n         172,17,240,159,131,173,17,240,159,131,174,17,240,159,131,175,17,240,159,\n         131,176,17,240,159,131,177,17,240,159,131,178,17,240,159,131,179,17,240,\n         159,131,180,17,240,159,131,181,17,240,159,131,182,17,240,159,131,183,17,\n         240,159,131,184,17,240,159,131,185,17,240,159,131,186,17,240,159,131,187,\n       ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..9b11c4bf 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,161 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+        if (out == null) {\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n+        }\n+        if (input == null) {\n+            return;\n+        }\n+        int pos = 0;\n+        int len = input.length();\n+        while (pos < len) {\n+            int consumed = translate(input, pos, out);\n+            if (consumed == 0) {\n+                char[] c = Character.toChars(Character.codePointAt(input, pos));\n+                out.write(c);\n+                pos+= c.length;\n+                continue;\n+            }\n+            int codepoint = Character.codePointAt(input, pos);\n+            pos += Character.charCount(codepoint);\n+            char[] repl = getReplacement(codepoint);\n+            if (repl != null) {\n+                out.write(repl);\n+            } else {\n+                out.write(codepoint);\n+            }\n+        }\n+    }\n+\n+    protected char[][] uPosixReplacements;\n+\n+    protected char[][] javaReplacements;\n+\n+    private void buildLookup() {\n+        final int[][] sorted = new int[uPosixReplacements.length][2];\n+        for (int i=0; i<uPosixReplacements.length; i++) {\n+            sorted[i][0] = uPosixReplacements[i][0];\n+            sorted[i][1] = i;\n+        }\n+        Arrays.sort(sorted, Comparator.comparingInt(o -> o[0]));\n+\n+        javaReplacements = new char[uPosixReplacements.length][];\n+        for (int i=0; i<uPosixReplacements.length; i++) {\n+            javaReplacements[i] = null;\n+        }\n+        int last_end = Integer.MIN_VALUE;\n+        int last_src_end = Integer.MIN_VALUE;\n+        for (int i=0; i<uPosixReplacements.length; /**/) {\n+            int start = sorted[i][0];\n+            int end   = uPosixReplacements[sorted[i][1]][1];\n+            int src_start = sorted[i][0];\n+            boolean collision = false;\n+            for (int j=i+1; j<uPosixReplacements.length; j++) {\n+                if (uPosixReplacements[sorted[j][1]][0] > end) {\n+                    break;\n+                }\n+                if (uPosixReplacements[sorted[j][1]][1] > end) {\n+                    collision = true;\n+                }\n+            }\n+            if (end != last_src_end && start != last_end) {\n+                char[] repl = new char[end-start+1];\n+                int k = 0;\n+                for (int j=i; j<uPosixReplacements.length; j++) {\n+                    if (uPosixReplacements[sorted[j][1]][0] > end) {\n+                        break;\n+                    }\n+                    int pos = uPosixReplacements[sorted[j][1]][0] - src_start;\n+                    final char[] piece = uPosixReplacements[sorted[j][1]];\n+                    System.arraycopy(piece, 2, repl, pos, piece.length - 2);\n+                }\n+                javaReplacements[i] = repl;\n+                last_end  = end;\n+                last_src_end = end;\n+            }\n+            if (collision) {\n+                last_end = Integer.MIN_VALUE;\n+                last_src_end = end;\n+            }\n+            i += (collision ? 1 : 0) + 1;\n+        }\n+    }\n+\n+    private static final UnicodeUnescaper UNESCAPER =\n+            new UnicodeUnescaper(\n+     // BEGIN GENERATED BY UnicodeEscaperCodeGen.java\n+     // GENERATED FROM u_posix_decimal_digits\n+                        new int[] {10,0,12,0,48,10,49,10,50,10,51,10,52,10,53,10,\n+         54,10,55,10,56,10,57,10,83,73,73,10,17,240,159,128,128,17,240,\n+         159,128,129,17,240,159,128,130,17,240,159,128,131,17,240,159,128,132,\n+         17,240,159,128,133,17,240,159,128,134,17,240,159,128,135,17,240,159,128,\n+         136,17,240,159,128,137,17,240,159,128,138,17,240,159,128,139,17,240,159,\n+         128,140,17,240,159,128,141,17,240,159,128,142,17,240,159,128,143,17,240,\n+         159,128,144,17,240,159,128,145,17,240,159,128,146,17,240,159,128,147,17,\n+         240,159,128,148,17,240,159,128,149,17,240,159,128,150,17,240,159,128,151,\n+         17,240,159,128,152,17,240,159,128,153,17,240,159,128,154,17,240,159,128,\n+         155,17,240,159,128,156,17,240,159,128,157,17,240,159,128,158,17,240,159,\n+         128,159,17,240,159,128,160,17,240,159,128,161,17,240,159,128,162,17,240,\n+         159,128,163,17,240,159,128,164,17,240,159,128,165,17,240,159,128,166,17,\n+         240,159,128,167,17,240,159,128,168,17,240,159,128,169,17,240,159,128,170,\n+         17,240,159,128,171,17,240,159,128,172,17,240,159,128,173,17,240,159,128,\n+         174,17,240,159,128,175,17,240,159,128,176,17,240,159,128,177,17,240,159,\n+         128,178,17,240,159,128,179,17,240,159,128,180,17,240,159,128,181,17,240,\n+         159,128,182,17,240,159,128,183,17,240,159,128,184,17,240,159,128,185,17,\n+         240,159,128,186,17,240,159,128,187,17,240,159,128,188,17,240,159,128,189,\n+         17,240,159,128,190,17,240,159,128,191,17,240,159,129,128,17,240,159,129,\n+         129,17,240,159,129,130,17,240,159,129,131,17,240,159,129,132,17,240,159,\n+         129,133,17,240,159,129,134,17,240,159,129,135,17,240,159,129,136,17,240,\n+         159,129,137,17,240,159,129,138,17,240,159,129,139,17,240,159,129,140,17,\n+         240,159,129,141,17,240,159,129,142,17,240,159,129,143,17,240,159,129,144,\n+         17,240,159,129,145,17,240,159,129,146,17,240,159,129,147,17,240,159,129,\n+         148,17,240,159,129,149,17,240,159,129,150,17,240,159,129,151,17,240,159,\n+         129,152,17,240,159,129,153,17,240,159,129,154,17,240,159,129,155,17,240,\n+         159,129,156,17,240,159,129,157,17,240,159,129,158,17,240,159,129,159,17,\n+         240,159,129,160,17,240,159,129,161,17,240,159,129,162,17,240,159,129,163,\n+         17,240,159,129,164,17,240,159,129,165,17,240,159,129,166,17,240,159,129,\n+         167,17,240,159,129,168,17,240,159,129,169,17,240,159,129,170,17,240,159,\n+         129,171,17,240,159,129,172,17,240,159,129,173,17,240,159,129,174,17,240,\n+         159,129,175,17,240,159,129,176,17,240,159,129,177,17,240,159,129,178,17,\n+         240,159,129,179,17,240,159,129,180,17,240,159,129,181,17,240,159,129,182,\n+         17,240,159,129,183,17,240,159,129,184,17,240,159,129,185,17,240,159,129,\n+         186,17,240,159,129,187,17,240,159,129,188,17,240,159,129,189,17,240,159,\n+         129,190,17,240,159,129,191,17,240,159,130,128,17,240,159,130,129,17,240,\n+         159,130,130,17,240,159,130,131,17,240,159,130,132,17,240,159,130,133,17,\n+         240,159,130,134,17,240,159,130,135,17,240,159,130,136,17,240,159,130,137,\n+         17,240,159,130,138,17,240,159,130,139,17,240,159,130,140,17,240,159,130,\n+         141,17,240,159,130,142,17,240,159,130,143,17,240,159,130,144,17,240,159,\n+         130,145,17,240,159,130,146,17,240,159,130,147,17,240,159,130,148,17,240,\n+         159,130,149,17,240,159,130,150,17,240,159,130,151,17,240,159,130,152,17,\n+         240,159,130,153,17,240,159,130,154,17,240,159,130,155,17,240,159,130,156,\n+         17,240,159,130,157,17,240,159,130,158,17,240,159,130,159,17,240,159,130,\n+         160,17,240,159,130,161,17,240,159,130,162,17,240,159,130,163,17,240,159,\n+         130,164,17,240,159,130,165,17,240,159,130,166,17,240,159,130,167,17,240,\n+         159,130,168,17,240,159,130,169,17,240,159,130,170,17,240,159,130,171,17,\n+         240,159,130,172,17,240,159,130,173,17,240,159,130,174,17,240,159,130,175,\n+         17,240,159,130,176,17,240,159,130,177,17,240,159,130,178,17,240,159,130,\n+         179,17,240,159,130,180,17,240,159,130,181,17,240,159,130,182,17,240,159,\n+         130,183,17,240,159,130,184,17,240,159,130,185,17,240,159,130,186,17,240,\n+         159,130,187,17,240,159,130,188,17,240,159,130,189,17,240,159,130,190,17,\n+         240,159,130,191,17,240,159,131,128,17,240,159,131,129,17,240,159,131,130,\n+         17,240,159,131,131,17,240,159,131,132,17,240,159,131,133,17,240,159,131,\n+         134,17,240,159,131,135,17,240,159,131,136,17,240,159,131,137,17,240,159,\n+         131,138,17,240,159,131,139,17,240,159,131,140,17,240,159,131,141,17,240,\n+         159,131,142,17,240,159,131,143,17,240,159,131,144,17,240,159,131,145,17,\n+         240,159,131,146,17,240,159,131,147,17,240,159,131,148,17,240,159,131,149,\n+         17,240,159,131,150,17,240,159,131,151,17,240,159,131,152,17,240,159,131,\n+         153,17,240,159,131,154,17,240,159,131,155,17,240,159,131,156,17,240,159,\n+         131,157,17,240,159,131,158,17,240,159,131,159,17,240,159,131,160,17,240,\n+         159,131,161,17,240,159,131,162,17,240,159,131,163,17,240,159,131,164,17,\n+         240,159,131,165,17,240,159,131,166,17,240,159,131,167,17,240,159,131,168,\n+         17,240,159,131,169,17,240,159,131,170,17,240,159,131,171,17,240,159,131,\n+         172,17,240,159,131,173,17,240,159,131,174,17,240,159,131,175,17,240,159,\n+         131,176,17,240,159,131,177,17,240,159,131,178,17,240,159,131,179,17,240,\n+         159,131,180,17,240,159,131,181,17,240,159,131,182,17,240,159,131,183,17,\n+         240,159,131,184,17,240,159,131,185,17,240,159,131,186,17,240,159,131,187,\n+       \n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}