{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredPropType = objType.getPropertyType(prop);\n            if (!declaredPropType.isSubtype(propType)) {\n              warnings.add(JSError.make(n, TypeValidator.TYPE_MISMATCH_WARNING,\n                  prop, propType.toString(), declaredPropType.toString()));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..56a47b36 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1130,10 +1130,17 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            if (!declaredPropType.isSubtype(propType)) {\n+              warnings.add(JSError.make(n, TypeValidator.TYPE_MISMATCH_WARNING,\n+                  prop, propType.toString(), declaredPropType.toString()));\n+            }\n           }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}