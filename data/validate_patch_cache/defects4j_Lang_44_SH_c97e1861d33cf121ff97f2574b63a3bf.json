{
    "patch": "        if (val.startsWith(\"+\")) {\n            val = val.substring(1);\n        }\n\n        boolean isHex = false;\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            isHex = true;\n            if (val.charAt(0) == '-') {\n                val = \"-\".concat(val.substring(3));\n            } else {\n                val = val.substring(2);\n            }\n        }\n\n        final int valLength = val.length();\n        final char lastChar = val.charAt(valLength - 1);\n\n        if (Character.isDigit(lastChar)) {\n            if (isHex) {\n                try {\n                    return createInteger(Long.parseLong(val, 16));\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n            }\n\n            final char secondLastChar = valLength > 1 ? val.charAt(valLength - 2) : 0;\n            final boolean isFloatingPoint = val.contains(\".\") || val.contains(\"e\") || val.contains(\"E\");\n\n            if (!isFloatingPoint && secondLastChar != 'e' && secondLastChar != 'E') {\n                try {\n                    return createInteger(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                try {\n                    return createLong(val);\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n\n                return createBigInteger(val);\n\n            } else {\n                try {\n                    final Float floatValue = createFloat(val);\n                    if (!floatValue.isInfinite() && !(floatValue.floatValue() == 0.0F && !isAllZeros(val))) {\n                        return floatValue;\n                    }\n                } catch(NumberFormatException exFloat) {\n                    // Do nothing\n                }\n\n                try {\n                    final Double doubleValue = createDouble(val);\n                    if (!doubleValue.isInfinite() && !(doubleValue.doubleValue() == 0.0D && !isAllZeros(val))) {\n                        return doubleValue;\n                    }\n                } catch(NumberFormatException exDouble) {\n                    // Do nothing\n                }\n\n                return createBigDecimal(val);\n\n            }\n        }\n        throw new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..4e96861f 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,74 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"+\")) {\n+            val = val.substring(1);\n+        }\n+\n+        boolean isHex = false;\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            isHex = true;\n+            if (val.charAt(0) == '-') {\n+                val = \"-\".concat(val.substring(3));\n+            } else {\n+                val = val.substring(2);\n+            }\n+        }\n+\n+        final int valLength = val.length();\n+        final char lastChar = val.charAt(valLength - 1);\n+\n+        if (Character.isDigit(lastChar)) {\n+            if (isHex) {\n+                try {\n+                    return createInteger(Long.parseLong(val, 16));\n+                } catch (NumberFormatException nfe) {\n+                    // ignore the bad number\n+                }\n+            }\n+\n+            final char secondLastChar = valLength > 1 ? val.charAt(valLength - 2) : 0;\n+            final boolean isFloatingPoint = val.contains(\".\") || val.contains(\"e\") || val.contains(\"E\");\n+\n+            if (!isFloatingPoint && secondLastChar != 'e' && secondLastChar != 'E') {\n+                try {\n+                    return createInteger(val);\n+                } catch (NumberFormatException nfe) {\n+                    // ignore the bad number\n+                }\n+\n+                try {\n+                    return createLong(val);\n+                } catch (NumberFormatException nfe) {\n+                    // ignore the bad number\n+                }\n+\n+                return createBigInteger(val);\n+\n+            } else {\n+                try {\n+                    final Float floatValue = createFloat(val);\n+                    if (!floatValue.isInfinite() && !(floatValue.floatValue() == 0.0F && !isAllZeros(val))) {\n+                        return floatValue;\n+                    }\n+                } catch(NumberFormatException exFloat) {\n+                    // Do nothing\n+                }\n+\n+                try {\n+                    final Double doubleValue = createDouble(val);\n+                    if (!doubleValue.isInfinite() && !(doubleValue.doubleValue() == 0.0D && !isAllZeros(val))) {\n+                        return doubleValue;\n+                    }\n+                } catch(NumberFormatException exDouble) {\n+                    // Do nothing\n+                }\n+\n+                return createBigDecimal(val);\n+\n+            }\n+        }\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: method createInteger in class NumberUtils cannot be applied to given types;",
    "test_result": "ERROR"
}