{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n            return;\n\n        } else {\n        \n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        \n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n            } else {\n                // perform a shrinking step\n                final RealPointValuePair[] shrunkSimplex = contractInside(original, comparator);\n                if (comparator.compare(shrunkSimplex[0], best) < 0) {\n                    // keep the better simplex\n                    simplex = shrunkSimplex;\n                } else {\n                    // perform a one-dimensional contraction\n                    simplex = contractAroundBest(original, comparator);\n                }\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n        }\n    }\n}\n\n/**\n * Contracts the simplex around the best point and returns a new simplex.\n *\n * @param simplex Initial simplex.\n * @param comparator Comparator for sorting the simplex.\n * @return New simplex after the one-dimensional contraction.\n */\nprivate RealPointValuePair[] contractAroundBest(final RealPointValuePair[] simplex,\n        final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair best = simplex[0];\n    final int n = simplex.length;\n    final double[] contracted = new double[n];\n\n    for (int i = 0; i < n; i++) {\n        final double[] original = simplex[i].getPointRef();\n        final double[] center = best.getPointRef();\n        contracted[i] = center[i] + rho * (original[i] - center[i]);\n    }\n\n    final double[] originalBest = simplex[0].getPointRef();\n    final RealPointValuePair contractedBest = new RealPointValuePair(contracted, computeObjectiveValue(contracted),\n            false);\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n\n    contractedSimplex[0] = contractedBest;\n    for (int i = 1; i < n; ++i) {\n        final double[] original = simplex[i].getPointRef();\n        final double[] contractedPoint = new double[n];\n        for (int j = 0; j < n; j++) {\n            contractedPoint[j] = contracted[j] + sigma * (original[j] - originalBest[j]);\n        }\n        final RealPointValuePair contractedVertex = new RealPointValuePair(contractedPoint,\n                computeObjectiveValue(contractedPoint),\n                false);\n        contractedSimplex[i] = contractedVertex;\n    }\n\n    Arrays.sort(contractedSimplex, comparator);\n\n    return contractedSimplex;\n\n}\n\n/**\n * Contracts the simplex inside the domain defined by the best point\n * and returns a new simplex.\n *\n * @param simplex Initial simplex.\n * @param comparator Comparator for sorting the simplex.\n * @return New simplex after the shrinking operation.\n */\nprivate RealPointValuePair[] contractInside(final RealPointValuePair[] simplex,\n        final Comparator<RealPointValuePair> comparator) {\n\n    final RealPointValuePair best = simplex[0];\n    final int n = simplex.length;\n    final double[] contracted = new double[n];\n\n    for (int i = 0; i < n; i++) {\n        final double[] original = simplex[i].getPointRef();\n        final double[] center = best.getPointRef();\n        contracted[i] = center[i] + sigma * (original[i] - center[i]);\n    }\n\n    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n    for (int i = 0; i < n; ++i) {\n        final double[] contractedPoint = new double[n];\n        for (int j = 0; j < n; j++) {\n            contractedPoint[j] = simplex[i].getPoint()[j] + sigma * (best.getPointRef()[j] - simplex[i].getPointRef()[j]);\n        }\n        final RealPointValuePair contractedVertex = new RealPointValuePair(contractedPoint,\n                computeObjectiveValue(contractedPoint),\n                false);\n        contractedSimplex[i] = contractedVertex;\n    }\n\n    Arrays.sort(contractedSimplex, comparator);\n\n    return contractedSimplex;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6548168ff 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,144 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n \n+            return;\n+\n+        } else {\n+        \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        \n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+            } else {\n+                // perform a shrinking step\n+                final RealPointValuePair[] shrunkSimplex = contractInside(original, comparator);\n+                if (comparator.compare(shrunkSimplex[0], best) < 0) {\n+                    // keep the better simplex\n+                    simplex = shrunkSimplex;\n+                } else {\n+                    // perform a one-dimensional contraction\n+                    simplex = contractAroundBest(original, comparator);\n+                }\n+            }\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n+        }\n+    }\n+}\n+\n+/**\n+ * Contracts the simplex around the best point and returns a new simplex.\n+ *\n+ * @param simplex Initial simplex.\n+ * @param comparator Comparator for sorting the simplex.\n+ * @return New simplex after the one-dimensional contraction.\n+ */\n+private RealPointValuePair[] contractAroundBest(final RealPointValuePair[] simplex,\n+        final Comparator<RealPointValuePair> comparator) {\n+\n+    final RealPointValuePair best = simplex[0];\n+    final int n = simplex.length;\n+    final double[] contracted = new double[n];\n+\n+    for (int i = 0; i < n; i++) {\n+        final double[] original = simplex[i].getPointRef();\n+        final double[] center = best.getPointRef();\n+        contracted[i] = center[i] + rho * (original[i] - center[i]);\n+    }\n \n+    final double[] originalBest = simplex[0].getPointRef();\n+    final RealPointValuePair contractedBest = new RealPointValuePair(contracted, computeObjectiveValue(contracted),\n+            false);\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n+\n+    contractedSimplex[0] = contractedBest;\n+    for (int i = 1; i < n; ++i) {\n+        final double[] original = simplex[i].getPointRef();\n+        final double[] contractedPoint = new double[n];\n+        for (int j = 0; j < n; j++) {\n+            contractedPoint[j] = contracted[j] + sigma * (original[j] - originalBest[j]);\n         }\n+        final RealPointValuePair contractedVertex = new RealPointValuePair(contractedPoint,\n+                computeObjectiveValue(contractedPoint),\n+                false);\n+        contractedSimplex[i] = contractedVertex;\n+    }\n+\n+    Arrays.sort(contractedSimplex, comparator);\n+\n+    return contractedSimplex;\n+\n+}\n+\n+/**\n+ * Contracts the simplex inside the domain defined by the best point\n+ * and returns a new simplex.\n+ *\n+ * @param simplex Initial simplex.\n+ * @param comparator Comparator for sorting the simplex.\n+ * @return New simplex after the shrinking operation.\n+ */\n+private RealPointValuePair[] contractInside(final RealPointValuePair[] simplex,\n+        final Comparator<RealPointValuePair> comparator) {\n \n+    final RealPointValuePair best = simplex[0];\n+    final int n = simplex.length;\n+    final double[] contracted = new double[n];\n+\n+    for (int i = 0; i < n; i++) {\n+        final double[] original = simplex[i].getPointRef();\n+        final double[] center = best.getPointRef();\n+        contracted[i] = center[i] + sigma * (original[i] - center[i]);\n+    }\n+\n+    final RealPointValuePair[] contractedSimplex = new RealPointValuePair[n];\n+    for (int i = 0; i < n; ++i) {\n+        final double[] contractedPoint = new double[n];\n+        for (int j = 0; j < n; j++) {\n+            contractedPoint[j] = simplex[i].getPoint()[j] + sigma * (best.getPointRef()[j] - simplex[i].getPointRef()[j]);\n+        }\n+        final RealPointValuePair contractedVertex = new RealPointValuePair(contractedPoint,\n+                computeObjectiveValue(contractedPoint),\n+                false);\n+        contractedSimplex[i] = contractedVertex;\n     }\n \n+    Arrays.sort(contractedSimplex, comparator);\n+\n+    return contractedSimplex;\n+\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}