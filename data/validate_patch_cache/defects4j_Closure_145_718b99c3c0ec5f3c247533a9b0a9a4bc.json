{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (n.hasChildren()) {\n      Node child = n.getFirstChild();\n      if (child.getType() == Token.BLOCK) {\n        if (child.getChildCount() != 1) {\n          return false;\n        }\n        child = child.getFirstChild();\n      }\n      return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..82410733 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,12 +706,17 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+    if (n.hasChildren()) {\n+      Node child = n.getFirstChild();\n+      if (child.getType() == Token.BLOCK) {\n+        if (child.getChildCount() != 1) {\n+          return false;\n+        }\n+        child = child.getFirstChild();\n+      }\n+      return (child.getType() == Token.FUNCTION || child.getType() == Token.DO);\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){if(e1)[{function goo(){return true}]}else foo()}> but was:<function(){if(e1)[function goo(){return true]}else foo()}>",
    "test_result": "FAIL"
}