{
    "patch": "public Dfp multiply(final int x) {\n    int[] product = new int[nWords + 1];\n\n    Dfp result = newInstance(getField(), 0);\n\n    boolean carry = false;\n\n    for (int i = 0; i < nWords; i++) {\n        long r = (unsigned(word[i]) * unsigned(x)) +\n                (carry ? 1 : 0);\n\n        carry = (r > 0xffffffffL);\n\n        product[i] = (int)r;\n    }\n\n    product[nWords] = carry ? 1 : 0;\n\n    for (int i = 0; i < nWords; i++) {\n        result.word[i] = product[i];\n    }\n\n    result = dotrap(DfpField.OVERFLOW, \"multiply\", result, result);\n\n    rounded = result.round(product[nWords] != 0);\n    dotrap(DfpField.UNDERFLOW, \"multiply\", result, result);\n\n    return dotrap(DfpField.INVALID, \"multiply\", newInstance(getField(), product), result);\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..9e30f8723 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,10 +1599,37 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    int[] product = new int[nWords + 1];\n+\n+    Dfp result = newInstance(getField(), 0);\n+\n+    boolean carry = false;\n+\n+    for (int i = 0; i < nWords; i++) {\n+        long r = (unsigned(word[i]) * unsigned(x)) +\n+                (carry ? 1 : 0);\n+\n+        carry = (r > 0xffffffffL);\n+\n+        product[i] = (int)r;\n     }\n \n+    product[nWords] = carry ? 1 : 0;\n+\n+    for (int i = 0; i < nWords; i++) {\n+        result.word[i] = product[i];\n+    }\n+\n+    result = dotrap(DfpField.OVERFLOW, \"multiply\", result, result);\n+\n+    rounded = result.round(product[nWords] != 0);\n+    dotrap(DfpField.UNDERFLOW, \"multiply\", result, result);\n+\n+    return dotrap(DfpField.INVALID, \"multiply\", newInstance(getField(), product), result);\n+}\n+\n+\n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.\n      * @param x multiplicand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}