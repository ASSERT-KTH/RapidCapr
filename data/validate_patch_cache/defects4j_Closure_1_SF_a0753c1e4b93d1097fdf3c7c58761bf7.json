{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      boolean isRestArgPresent = argList.getLastChild() != null &&\n          argList.getLastChild().isRest();\n      Node prevArg = null;\n      for (Node arg : argList.children()) {\n        if (arg.isRest()) {\n          break;\n        }\n        Var var = fnScope.getVar(arg.getString());\n        if (referenced.contains(var)) {\n          prevArg = arg;\n        } else {\n          if (prevArg == null) {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n          } else {\n            argList.removeChild(arg);\n            compiler.reportCodeChange();\n            checkArgument(prevArg.isName());\n            removeTrailingComma(prevArg);\n            prevArg = prevArg.getNext();\n          }\n        }\n      }\n      if (isRestArgPresent) {\n        prevArg = argList.getLastChild().getPrevious();\n      }\n      while (prevArg != null) {\n        argList.removeChild(prevArg);\n        compiler.reportCodeChange();\n        checkArgument(prevArg.isName());\n        removeTrailingComma(prevArg);\n        prevArg = prevArg.getPrevious();\n      }\n      argList.setOptionalArity();\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..e6f6c0b0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -389,17 +389,40 @@ class RemoveUnusedVars\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n+      boolean isRestArgPresent = argList.getLastChild() != null &&\n+          argList.getLastChild().isRest();\n+      Node prevArg = null;\n+      for (Node arg : argList.children()) {\n+        if (arg.isRest()) {\n           break;\n         }\n+        Var var = fnScope.getVar(arg.getString());\n+        if (referenced.contains(var)) {\n+          prevArg = arg;\n+        } else {\n+          if (prevArg == null) {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+          } else {\n+            argList.removeChild(arg);\n+            compiler.reportCodeChange();\n+            checkArgument(prevArg.isName());\n+            removeTrailingComma(prevArg);\n+            prevArg = prevArg.getNext();\n+          }\n+        }\n+      }\n+      if (isRestArgPresent) {\n+        prevArg = argList.getLastChild().getPrevious();\n+      }\n+      while (prevArg != null) {\n+        argList.removeChild(prevArg);\n+        compiler.reportCodeChange();\n+        checkArgument(prevArg.isName());\n+        removeTrailingComma(prevArg);\n+        prevArg = prevArg.getPrevious();\n       }\n+      argList.setOptionalArity();\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}