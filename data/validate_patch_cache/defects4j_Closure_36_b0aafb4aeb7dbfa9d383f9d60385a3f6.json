{
    "patch": "if (value.isFunction()) {\n  Node callNode = reference.getParent();\n  if (callNode != null && callNode.isCall()) {\n    CodingConvention convention = compiler.getCodingConvention();\n    // Bug 2388531: Don't inline subclass definitions into class defining\n    // calls as this confused class removing logic.\n    SubclassRelationship relationship =\n        convention.getClassesDefinedByCall(callNode);\n    if (relationship != null) {\n      return false;\n    }\n\n    // issue 668: Don't inline singleton getter methods\n    // calls as this confused class removing logic.\n    // There are a few approaches to detecting singleton getters:\n    //   1) Match a known method name\n    //   2) Match a known type returned, e.g. /** @return {!Foo} */\n    //   3) Match the instance variable name they get, e.g. this.s\n    if (callNode.getFirstChild().isName()) {\n      String methodName = callNode.getFirstChild().getString();\n      if (convention.getSingletonGetterClassName(value) != null\n          && convention.getSingletonGetterCallName().equals(methodName)) {\n        return false;\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..2da491c6 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,33 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+if (value.isFunction()) {\n+  Node callNode = reference.getParent();\n+  if (callNode != null && callNode.isCall()) {\n+    CodingConvention convention = compiler.getCodingConvention();\n+    // Bug 2388531: Don't inline subclass definitions into class defining\n+    // calls as this confused class removing logic.\n+    SubclassRelationship relationship =\n+        convention.getClassesDefinedByCall(callNode);\n+    if (relationship != null) {\n+      return false;\n+    }\n+\n+    // issue 668: Don't inline singleton getter methods\n+    // calls as this confused class removing logic.\n+    // There are a few approaches to detecting singleton getters:\n+    //   1) Match a known method name\n+    //   2) Match a known type returned, e.g. /** @return {!Foo} */\n+    //   3) Match the instance variable name they get, e.g. this.s\n+    if (callNode.getFirstChild().isName()) {\n+      String methodName = callNode.getFirstChild().getString();\n+      if (convention.getSingletonGetterClassName(value) != null\n+          && convention.getSingletonGetterCallName().equals(methodName)) {\n+        return false;\n+      }\n+    }\n+  }\n+}\n         }\n       }\n ",
    "result_reason": "error: variable callNode is already defined in method canInline(Reference,Reference,Reference)",
    "test_result": "ERROR"
}