{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int initialOffset = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n\n        if (initialOffset == offsetAdjusted) {\n            if (initialOffset < 0) {\n                final long nextTransition = nextTransition(instantAdjusted);\n                final long shiftedNextTransition = nextTransition + offsetAdjusted;\n                if (instantLocal < shiftedNextTransition) {\n                    return getOffset(nextTransition - initialOffset);\n                }\n            } else {\n                final long previousTransition = previousTransition(instantAdjusted);\n                if (previousTransition < instantAdjusted - offsetAdjusted) {\n                    final int offsetPrevious = getOffset(previousTransition);\n                    if (offsetPrevious == offsetAdjusted) {\n                        return offsetAdjusted;\n                    }\n                }\n            }\n        }\n\n        return initialOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..c506b82a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,29 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        final int initialOffset = getOffset(instantLocal);\n+        final long instantAdjusted = instantLocal - initialOffset;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+\n+        if (initialOffset == offsetAdjusted) {\n+            if (initialOffset < 0) {\n+                final long nextTransition = nextTransition(instantAdjusted);\n+                final long shiftedNextTransition = nextTransition + offsetAdjusted;\n+                if (instantLocal < shiftedNextTransition) {\n+                    return getOffset(nextTransition - initialOffset);\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+            } else {\n+                final long previousTransition = previousTransition(instantAdjusted);\n+                if (previousTransition < instantAdjusted - offsetAdjusted) {\n+                    final int offsetPrevious = getOffset(previousTransition);\n+                    if (offsetPrevious == offsetAdjusted) {\n+                        return offsetAdjusted;\n+                    }\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+\n+        return initialOffset;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2002-06-03T00:00:00.000-00:01:15> but was:<2002-06-02T00:00:00.000-00:01:15>",
    "test_result": "FAIL"
}