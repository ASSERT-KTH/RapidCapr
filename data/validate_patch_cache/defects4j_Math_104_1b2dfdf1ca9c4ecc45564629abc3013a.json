{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        Dfp result = create(getField(), getZero());\n        Dfp powerOfTwo = newInstance(2);\n        boolean neg = false;\n\n        if (x < 0) {\n            neg = true;\n            x = -x;\n        }\n\n        for (int i = 0; x != 0; i++) {\n\n            if ((x & 1) != 0) {\n                result = result.add(powerOfTwo);\n            }\n\n            powerOfTwo = powerOfTwo.add(powerOfTwo);\n\n            // early exit in case of infinite loop due to a bug\n            // in multiplication of 10E+309 with itself in radix 2\n            if (i == 1536) {\n                final int msb = this.getMsb();\n                if (msb >= getField().getRadixDigits() - 4) {\n                    final Dfp a = newInstance(getSign(), getField().getRadixDigits() / 2, getZero());\n                    a.dotShiftLeft(10);\n                    final Dfp b = newInstance(getSign(), getField().getRadixDigits() / 2, getZero());\n                    b.dotShiftRight(10);\n                    final Dfp upper = a.add(b);\n                    final Dfp lower = this.subtract(upper);\n                    result = result.multiply(upper).add(result.multiply(lower)).add(this.multiply(this)).divide(upper.add(lower)).divide(newInstance(2).pow(1536));\n                    return result;\n                }\n            }\n\n            x >>>= 1;\n        }\n\n        if (neg) {\n            result = newInstance(-1).divide(result);\n        }\n\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..bc8f3c2b8 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,53 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        Dfp result = create(getField(), getZero());\n+        Dfp powerOfTwo = newInstance(2);\n+        boolean neg = false;\n+\n+        if (x < 0) {\n+            neg = true;\n+            x = -x;\n+        }\n+\n+        for (int i = 0; x != 0; i++) {\n+\n+            if ((x & 1) != 0) {\n+                result = result.add(powerOfTwo);\n+            }\n+\n+            powerOfTwo = powerOfTwo.add(powerOfTwo);\n+\n+            // early exit in case of infinite loop due to a bug\n+            // in multiplication of 10E+309 with itself in radix 2\n+            if (i == 1536) {\n+                final int msb = this.getMsb();\n+                if (msb >= getField().getRadixDigits() - 4) {\n+                    final Dfp a = newInstance(getSign(), getField().getRadixDigits() / 2, getZero());\n+                    a.dotShiftLeft(10);\n+                    final Dfp b = newInstance(getSign(), getField().getRadixDigits() / 2, getZero());\n+                    b.dotShiftRight(10);\n+                    final Dfp upper = a.add(b);\n+                    final Dfp lower = this.subtract(upper);\n+                    result = result.multiply(upper).add(result.multiply(lower)).add(this.multiply(this)).divide(upper.add(lower)).divide(newInstance(2).pow(1536));\n+                    return result;\n+                }\n+            }\n+\n+            x >>>= 1;\n+        }\n+\n+        if (neg) {\n+            result = newInstance(-1).divide(result);\n+        }\n+\n+        return result;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}