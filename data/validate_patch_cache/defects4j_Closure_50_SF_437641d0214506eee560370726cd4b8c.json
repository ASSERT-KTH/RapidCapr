{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    String joinString = \"\";\n    if (right != null) {\n      joinString = NodeUtil.getStringValue(right);\n      if (joinString == null) {\n        return n;\n      }\n    }\n\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    boolean hasConstElement = false;\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        hasConstElement = true;\n        // ensure the element is coerced to a string\n        Node stringValue = NodeUtil.getArrayElement(elem);\n        if (stringValue == null) {\n          stringValue = new Node(Token.EMPTY);\n        }\n        arrayFoldedChildren.add(stringValue);\n      } else {\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      elem = elem.getNext();\n    }\n\n    if (!hasConstElement) {\n      return n;\n    }\n\n    // add cost of separator after the first element\n    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    if (arrayFoldedChildren.size() == 1) {\n      Node foldedStringNode = arrayFoldedChildren.remove(0);\n      if (foldedSize > originalSize) {\n        return n;\n      }\n      arrayNode.detachChildren();\n      if (foldedStringNode.getType() != Token.STRING) {\n        // If the Node is not a string literal, ensure that\n        // it is coerced to a string.\n        foldedStringNode = new Node(Token.ADD,\n            new Node(Token.EMPTY), foldedStringNode);\n      }\n      n.getParent().replaceChild(n, foldedStringNode);\n      reportCodeChange();\n      return foldedStringNode;\n    }\n\n    int kJoinOverhead = \"[].join()\".length();\n    foldedSize += kJoinOverhead;\n    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n    if (foldedSize > originalSize) {\n      return n;\n    }\n\n    Node result = new Node(Token.ADD, arrayFoldedChildren.get(0),\n        Node.newString(joinString));\n    for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n      Node elemNode = new Node(Token.ADD, Node.newString(joinString),\n          arrayFoldedChildren.get(i));\n      result = new Node(Token.ADD, result, elemNode);\n    }\n    arrayNode.getParent().replaceChild(arrayNode, result);\n    reportCodeChange();\n\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..4b12d3a7 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,10 +372,8 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n@@ -386,93 +384,78 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \"\";\n+    if (right != null) {\n+      joinString = NodeUtil.getStringValue(right);\n+      if (joinString == null) {\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n     int foldedSize = 0;\n-    Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n+    boolean hasConstElement = false;\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n+        hasConstElement = true;\n+        // ensure the element is coerced to a string\n+        Node stringValue = NodeUtil.getArrayElement(elem);\n+        if (stringValue == null) {\n+          stringValue = new Node(Token.EMPTY);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        arrayFoldedChildren.add(stringValue);\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n       elem = elem.getNext();\n     }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (!hasConstElement) {\n+      return n;\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+\n+    // add cost of separator after the first element\n+    foldedSize += joinString.length() * (arrayFoldedChildren.size() - 1);\n \n     int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    if (arrayFoldedChildren.size() == 1) {\n+      Node foldedStringNode = arrayFoldedChildren.remove(0);\n+      if (foldedSize > originalSize) {\n+        return n;\n+      }\n+      arrayNode.detachChildren();\n+      if (foldedStringNode.getType() != Token.STRING) {\n+        // If the Node is not a string literal, ensure that\n+        // it is coerced to a string.\n+        foldedStringNode = new Node(Token.ADD,\n+            new Node(Token.EMPTY), foldedStringNode);\n+      }\n+      n.getParent().replaceChild(n, foldedStringNode);\n+      reportCodeChange();\n+      return foldedStringNode;\n+    }\n+\n+    int kJoinOverhead = \"[].join()\".length();\n+    foldedSize += kJoinOverhead;\n+    foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n+    if (foldedSize > originalSize) {\n+      return n;\n+    }\n+\n+    Node result = new Node(Token.ADD, arrayFoldedChildren.get(0),\n+        Node.newString(joinString));\n+    for (int i = 1; i < arrayFoldedChildren.size(); i++) {\n+      Node elemNode = new Node(Token.ADD, Node.newString(joinString),\n+          arrayFoldedChildren.get(i));\n+      result = new Node(Token.ADD, result, elemNode);\n     }\n+    arrayNode.getParent().replaceChild(arrayNode, result);\n+    reportCodeChange();\n \n-    return n;\n+    return result;\n   }\n \n   /**\n@@ -642,4 +625,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}