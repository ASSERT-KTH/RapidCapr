{
    "patch": "public class Complex {\n\n    // ...\n\n    @Override\n    public boolean equals(Object other) {\n        if (this == other) { \n            return true;\n        } else if (other == null || !(other instanceof Complex)) {\n            return false;\n        } else  {\n            Complex rhs = (Complex)other;\n            if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.real) || Double.isNaN(rhs.imaginary)) {\n                return false;\n            } else {\n                return Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()); \n            }\n        }\n    }\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        long temp;\n        temp = Double.doubleToLongBits(imaginary);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        temp = Double.doubleToLongBits(real);\n        result = prime * result + (int) (temp ^ (temp >>> 32));\n        return result;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..7d98a5e25 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -242,29 +242,38 @@ public class Complex implements Serializable  {\n      *         not equal to this Complex instance\n      * \n      */\n+public class Complex {\n+\n+    // ...\n+\n+    @Override\n     public boolean equals(Object other) {\n-        boolean ret;\n-        \n         if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n+            return true;\n+        } else if (other == null || !(other instanceof Complex)) {\n+            return false;\n         } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n+            Complex rhs = (Complex)other;\n+            if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(rhs.real) || Double.isNaN(rhs.imaginary)) {\n+                return false;\n+            } else {\n+                return Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal()) && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()); \n             }\n         }\n-      \n-        return ret;\n     }\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 31;\n+        int result = 1;\n+        long temp;\n+        temp = Double.doubleToLongBits(imaginary);\n+        result = prime * result + (int) (temp ^ (temp >>> 32));\n+        temp = Double.doubleToLongBits(real);\n+        result = prime * result + (int) (temp ^ (temp >>> 32));\n+        return result;\n+    }\n+}\n     \n     /**\n      * Get a hashCode for the complex number.",
    "result_reason": "error: class Complex is already defined in package org.apache.commons.math.complex",
    "test_result": "ERROR"
}