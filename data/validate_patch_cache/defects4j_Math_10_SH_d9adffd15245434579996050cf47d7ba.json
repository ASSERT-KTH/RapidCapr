{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n  if (x[xOffset] == 0) {\n    if (y[yOffset] > 0) {\n      result[resultOffset] = FastMath.PI / 2.0;\n    } else if (y[yOffset] < 0) {\n      result[resultOffset] = -FastMath.PI / 2.0;\n    } else {\n      result[resultOffset] = 0.0;\n    }\n  } else if (y[yOffset] == 0) {\n    if (x[xOffset] > 0) {\n      result[resultOffset] = 0.0;\n    } else {\n      result[resultOffset] = FastMath.PI;\n    }\n  } else {\n    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..5031ce675 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,25 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+  if (x[xOffset] == 0) {\n+    if (y[yOffset] > 0) {\n+      result[resultOffset] = FastMath.PI / 2.0;\n+    } else if (y[yOffset] < 0) {\n+      result[resultOffset] = -FastMath.PI / 2.0;\n+    } else {\n+      result[resultOffset] = 0.0;\n+    }\n+  } else if (y[yOffset] == 0) {\n+    if (x[xOffset] > 0) {\n+      result[resultOffset] = 0.0;\n+    } else {\n+      result[resultOffset] = FastMath.PI;\n+    }\n+  } else {\n+    result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+  }\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}