{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  if (parent == null || !parent.isAssign()) {\n    // Not an assignment\n    return n;\n  }\n\n  if (!NodeUtil.isGet(parent.getFirstChild()) && !NodeUtil.isGetElem(parent.getFirstChild())) {\n    // Not an assignment to a GETPROP/GETELEM\n    return n;\n  }\n\n  // If GETPROP/GETELEM is used as assignment target the array literal is acting as a temporary we can't fold it here:\n  // \"[][0] += 1\"\n  if (NodeUtil.isCompoundAssignmentValueType(parent)) {\n    return n;\n  }\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(n, INVALID_GETELEM_INDEX_ERROR);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n    return n;\n  }\n\n  Node elem;\n  if (NodeUtil.isGet(parent.getFirstChild())) {\n    elem = left.getLastChild();\n  } else {\n    elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n  }\n\n  if (elem == null) {\n    error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n    return n;\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    if (NodeUtil.isGet(parent.getFirstChild())) {\n      elem = elem.cloneNode();\n    } else {\n      left.removeChild(elem);\n    }\n  }\n\n  // Replace the entire GETELEM/GETPROP with the value\n  parent.replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..ebd435cc 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,53 +1274,73 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  if (parent == null || !parent.isAssign()) {\n+    // Not an assignment\n+    return n;\n+  }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+  if (!NodeUtil.isGet(parent.getFirstChild()) && !NodeUtil.isGetElem(parent.getFirstChild())) {\n+    // Not an assignment to a GETPROP/GETELEM\n+    return n;\n+  }\n \n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  // If GETPROP/GETELEM is used as assignment target the array literal is acting as a temporary we can't fold it here:\n+  // \"[][0] += 1\"\n+  if (NodeUtil.isCompoundAssignmentValueType(parent)) {\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (right.getType() != Token.NUMBER) {\n+    // Sometimes people like to use complex expressions to index into\n+    // arrays, or strings to index into array methods.\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(n, INVALID_GETELEM_INDEX_ERROR);\n+    return n;\n+  }\n \n-    Node elem = left.getFirstChild();\n+  if (intIndex < 0) {\n+    error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n+    return n;\n+  }\n+\n+  Node elem;\n+  if (NodeUtil.isGet(parent.getFirstChild())) {\n+    elem = left.getLastChild();\n+  } else {\n+    elem = left.getFirstChild();\n     for (int i = 0; elem != null && i < intIndex; i++) {\n       elem = elem.getNext();\n     }\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  if (elem == null) {\n+    error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n+    return n;\n+  }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+  if (elem.getType() == Token.EMPTY) {\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  } else {\n+    if (NodeUtil.isGet(parent.getFirstChild())) {\n+      elem = elem.cloneNode();\n     } else {\n       left.removeChild(elem);\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n   }\n \n+  // Replace the entire GETELEM/GETPROP with the value\n+  parent.replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}