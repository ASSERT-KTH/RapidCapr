{
    "patch": "int remainingIndex = index;\nfor (int i = 0; i < last; i++) {\n    final int offset = uniCounterOffset[i];\n    int idx = 0;\n    while (remainingIndex >= offset) {\n        remainingIndex -= offset;\n        ++idx;\n    }\n    indices[i] = idx;\n}\nif (remainingIndex != 0) {\n    throw new OutOfRangeException(index, 0, totalSize);\n}\nindices[last] = remainingIndex;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..051e0c375 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,20 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+for (int i = 0; i < last; i++) {\n+    final int offset = uniCounterOffset[i];\n+    int idx = 0;\n+    while (remainingIndex >= offset) {\n+        remainingIndex -= offset;\n+        ++idx;\n+    }\n+    indices[i] = idx;\n+}\n+if (remainingIndex != 0) {\n+    throw new OutOfRangeException(index, 0, totalSize);\n+}\n+indices[last] = remainingIndex;\n \n         return indices;\n     }",
    "result_reason": "org.apache.commons.math.exception.OutOfRangeException: 1 out of [0, 24] range",
    "test_result": "FAIL"
}