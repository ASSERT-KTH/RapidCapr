{
    "patch": "        if (offsetLocal == offsetAdjusted) {\n            return offsetLocal;\n        }\n        // we must be near a DST boundary\n        if (offsetLocal < 0 && offsetAdjusted >= 0 && getOffset(nextTransition(instantAdjusted)) == offsetLocal) {\n            // handle case when local time is in a DST gap and offsetLocal is negative\n           return offsetLocal;\n        }\n        // we need to ensure that time is always after the DST gap\n        if (offsetLocal >= 0 || offsetLocal - offsetAdjusted <= 1) {\n            // handle case when local time is in a DST gap and offsetLocal is zero or positive\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prev <= diff) {\n                    return offsetPrev;\n                }\n            }\n            return offsetLocal;\n        }\n        // handle case when we are near DST overlap and local time is after the overlap\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..cc7edc75 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal == offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+        // we must be near a DST boundary\n+        if (offsetLocal < 0 && offsetAdjusted >= 0 && getOffset(nextTransition(instantAdjusted)) == offsetLocal) {\n+            // handle case when local time is in a DST gap and offsetLocal is negative\n+           return offsetLocal;\n+        }\n+        // we need to ensure that time is always after the DST gap\n+        if (offsetLocal >= 0 || offsetLocal - offsetAdjusted <= 1) {\n+            // handle case when local time is in a DST gap and offsetLocal is zero or positive\n+            long prev = previousTransition(instantAdjusted);\n+            if (prev < instantAdjusted) {\n+                int offsetPrev = getOffset(prev);\n+                int diff = offsetPrev - offsetLocal;\n+                if (instantAdjusted - prev <= diff) {\n+                    return offsetPrev;\n+                }\n+            }\n+            return offsetLocal;\n+        }\n+        // handle case when we are near DST overlap and local time is after the overlap\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        return offsetAdjusted;\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}