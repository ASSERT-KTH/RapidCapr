{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nthrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = simplexWithBest(original);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = simplexWithBest(original);\n            simplex[original.length - 1] = contracted;\n        } else {\n          \t// Check convergence\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                if (Math.abs(best.getSecond() - simplex[i].getSecond()) > relativeThreshold * (Math.abs(best.getSecond()) + Math.abs(simplex[i].getSecond())) * 0.5) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged || getIterations() >= maxIterations) {\n                return;\n            }\n        }\n\n    }\n\n}\n\n/** Replace the worst point */\nprivate RealPointValuePair[] simplexWithBest(RealPointValuePair[] original) {\n    final RealPointValuePair[] simplex = new RealPointValuePair[original.length];\n    simplex[0] = original[0];\n    for (int i = 1; i < original.length; i++) {\n        final double[] point = original[i].getPoint();\n        final double[] replaced = new double[point.length];\n        System.arraycopy(point, 0, replaced, 0, point.length);\n        simplex[i] = new RealPointValuePair(replaced, Double.NaN, false);\n    }\n    return simplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..0791d8624 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,72 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = simplexWithBest(original);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n+        }\n+\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = simplexWithBest(original);\n+            simplex[original.length - 1] = contracted;\n+        } else {\n+          \t// Check convergence\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                if (Math.abs(best.getSecond() - simplex[i].getSecond()) > relativeThreshold * (Math.abs(best.getSecond()) + Math.abs(simplex[i].getSecond())) * 0.5) {\n+                    converged = false;\n+                    break;\n+                }\n+            }\n+            if (converged || getIterations() >= maxIterations) {\n                 return;\n             }\n-\n         }\n \n     }\n \n+}\n+\n+/** Replace the worst point */\n+private RealPointValuePair[] simplexWithBest(RealPointValuePair[] original) {\n+    final RealPointValuePair[] simplex = new RealPointValuePair[original.length];\n+    simplex[0] = original[0];\n+    for (int i = 1; i < original.length; i++) {\n+        final double[] point = original[i].getPoint();\n+        final double[] replaced = new double[point.length];\n+        System.arraycopy(point, 0, replaced, 0, point.length);\n+        simplex[i] = new RealPointValuePair(replaced, Double.NaN, false);\n+    }\n+    return simplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}