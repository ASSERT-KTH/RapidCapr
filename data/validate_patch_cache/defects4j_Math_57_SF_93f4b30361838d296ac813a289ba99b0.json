{
    "patch": "import java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.Random;\n\npublic class KMeans<T extends Clusterable<T>> {\n\n    private final Random random;\n\n    private EmptyClusterStrategy emptyStrategy = EmptyClusterStrategy.LARGEST_POINTS_NUMBER;\n\n    /**\n     * Create a new clusterer.\n     *\n     * @param random random generator to use for choosing initial centers\n     */\n    public KMeans(final Random random) {\n        this.random = random;\n    }\n\n    /**\n     * Get the strategy for handling empty clusters.\n     *\n     * @return the current strategy for empty clusters\n     */\n    public EmptyClusterStrategy getEmptyClusterStrategy() {\n        return emptyStrategy;\n    }\n\n    /**\n     * Set the strategy for handling empty clusters.\n     *\n     * @param strategy Strategy to use for empty clusters\n     */\n    public void setEmptyClusterStrategy(final EmptyClusterStrategy strategy) {\n        emptyStrategy = strategy;\n    }\n\n    /**\n     * Cluster the given points into k clusters.\n     *\n     * @param points the points to cluster\n     * @param k the number of clusters\n     * @param maxIterations the maximum number of iterations to run the clustering algorithm for,\n     *                      or {@code -1} to run until convergence is achieved\n     * @return the resulting clusters\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points,\n                                    final int k,\n                                    final int maxIterations) {\n        // Create the initial clusters\n        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n        assignPointsToClusters(clusters, points);\n\n        // Iterate through updating the centers until we're done\n        boolean converged = false;\n        for (int iteration = 0; !converged && iteration < maxIterations; iteration++) {\n            converged = true;\n            List<Cluster<T>> newClusters = new ArrayList<>();\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE:\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER:\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..3ee11828b 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,113 +89,77 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n \n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n-            for (final Cluster<T> cluster : clusters) {\n-                final T newCenter;\n-                if (cluster.getPoints().isEmpty()) {\n-                    switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n-                            newCenter = getPointFromLargestVarianceCluster(clusters);\n-                            break;\n-                        case LARGEST_POINTS_NUMBER :\n-                            newCenter = getPointFromLargestNumberCluster(clusters);\n-                            break;\n-                        case FARTHEST_POINT :\n-                            newCenter = getFarthestPoint(clusters);\n-                            break;\n-                        default :\n-                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n-                    }\n-                    clusteringChanged = true;\n-                } else {\n-                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n-                }\n-                newClusters.add(new Cluster<T>(newCenter));\n-            }\n-            if (!clusteringChanged) {\n-                return clusters;\n-            }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n-        }\n-        return clusters;\n-    }\n+public class KMeans<T extends Clusterable<T>> {\n+\n+    private final Random random;\n+\n+    private EmptyClusterStrategy emptyStrategy = EmptyClusterStrategy.LARGEST_POINTS_NUMBER;\n \n     /**\n-     * Adds the given points to the closest {@link Cluster}.\n+     * Create a new clusterer.\n      *\n-     * @param <T> type of the points to cluster\n-     * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n+     * @param random random generator to use for choosing initial centers\n      */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n-        for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n-            cluster.addPoint(p);\n-        }\n+    public KMeans(final Random random) {\n+        this.random = random;\n     }\n \n     /**\n-     * Use K-means++ to choose the initial centers.\n+     * Get the strategy for handling empty clusters.\n      *\n-     * @param <T> type of the points to cluster\n-     * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n-     * @return the initial centers\n+     * @return the current strategy for empty clusters\n      */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n+    public EmptyClusterStrategy getEmptyClusterStrategy() {\n+        return emptyStrategy;\n+    }\n \n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n-            }\n-        }\n+    /**\n+     * Set the strategy for handling empty clusters.\n+     *\n+     * @param strategy Strategy to use for empty clusters\n+     */\n+    public void setEmptyClusterStrategy(final EmptyClusterStrategy strategy) {\n+        emptyStrategy = strategy;\n+    }\n \n-        return resultSet;\n+    /**\n+     * Cluster the given points into k clusters.\n+     *\n+     * @param points the points to cluster\n+     * @param k the number of clusters\n+     * @param maxIterations the maximum number of iterations to run the clustering algorithm for,\n+     *                      or {@code -1} to run until convergence is achieved\n+     * @return the resulting clusters\n+     */\n+    public List<Cluster<T>> cluster(final Collection<T> points,\n+                                    final int k,\n+                                    final int maxIterations) {\n+        // Create the initial clusters\n+        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n+        assignPointsToClusters(clusters, points);\n \n-    }\n+        // Iterate through updating the centers until we're done\n+        boolean converged = false;\n+        for (int iteration = 0; !converged && iteration < maxIterations; iteration++) {\n+            converged = true;\n+            List<Cluster<T>> newClusters = new ArrayList<>();\n+            for (final Cluster<T> cluster : clusters) {\n+                final T newCenter;\n+                if (cluster.getPoints().isEmpty()) {\n+                    switch (emptyStrategy) {\n+                        case LARGEST_VARIANCE:\n+                            newCenter = getPointFromLargestVarianceCluster(clusters);\n+                            break;\n+                        case LARGEST_POINTS_NUMBER:\n+                            newCenter = getPointFromLargestNumberCluster(clusters);\n+                            break;\n+                        case \n \n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}