{
    "patch": "case Token.CATCH:\n  Node exception = n.getFirstChild();\n  Node exceptionName = exception.getFirstChild();\n  String catchName = null;\n\n  if (!exceptionName.isName()) {\n    throw new IllegalStateException(\"Expected NAME node for catch parameter.\");\n  }\n\n  catchName = exceptionName.getString();\n  Var var = scope.getVar(catchName);\n  if (var == null) {\n    String msg = \"e is never defined\";\n    JSError err = JSError.make(\n        JSErrorType.UNDEFINED_NAME, exceptionName,\n        msg);\n    compiler.report(err);\n    return;\n  }\n\n  if (isGlobalScope(scope)) {\n    handleSetFromGlobal(module, scope, n, null, catchName, /* isPropAssign */false, Name.Type.OTHER);\n  } else {\n    handleSetFromLocal(module, scope, n, null, catchName);\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..8a31ee15 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,32 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.CATCH:\n+  Node exception = n.getFirstChild();\n+  Node exceptionName = exception.getFirstChild();\n+  String catchName = null;\n+\n+  if (!exceptionName.isName()) {\n+    throw new IllegalStateException(\"Expected NAME node for catch parameter.\");\n+  }\n+\n+  catchName = exceptionName.getString();\n+  Var var = scope.getVar(catchName);\n+  if (var == null) {\n+    String msg = \"e is never defined\";\n+    JSError err = JSError.make(\n+        JSErrorType.UNDEFINED_NAME, exceptionName,\n+        msg);\n+    compiler.report(err);\n+    return;\n+  }\n+\n+  if (isGlobalScope(scope)) {\n+    handleSetFromGlobal(module, scope, n, null, catchName, /* isPropAssign */false, Name.Type.OTHER);\n+  } else {\n+    handleSetFromLocal(module, scope, n, null, catchName);\n+  }\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}