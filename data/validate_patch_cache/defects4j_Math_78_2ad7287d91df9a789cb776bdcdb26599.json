{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final double t0 = interpolator.getPreviousTime();\n        final double dt = t1 - t0;\n\n        final int maxIterationCount = handler.getMaxIterationCount();\n        final double convergence = handler.getConvergence();\n        final double rootFindingAccuracy = handler.getRootFindingAccuracy();\n        final boolean findRoots = handler.isBracketing();\n\n        // check if we need to find roots (there are event functions and we aren't there already)\n        if (findRoots) {\n\n            final double eps = getEpsilon() * (forward ? 1.0 : -1.0);\n            final int maxIteration = getMaxIteration();\n            double ta = t0;\n            double ga = g0;\n            boolean signChange = false;\n\n            final double[] previousEvent = new double[2];\n            previousEvent[0] = t0 - dt - 2 * convergence;\n            previousEvent[1] = Double.NaN;\n\n            int remainingIterations = maxIteration;\n\n            do {\n\n                // evaluate handler value at the end of the substep\n                final double tb = ta + eps;\n                interpolator.setInterpolatedTime(tb);\n                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n\n                // check events occurrence\n                if (EventHandler.continueAfterEvent(ga, gb)) {\n                    // the function has a consistent sign and we do not stop there\n                    signChange = false;\n                    ta = tb;\n                } else if (ga * gb < 0) {\n                    // there is a sign change: an event is expected during this step\n                    signChange = true;\n                    pendingEventTime = brentFindRoot(handler.g(), ta, tb, convergence, rootFindingAccuracy);\n                    if (!Double.isNaN(pendingEventTime) && (Math.abs(pendingEventTime - t0) < Math.abs(dt))) {\n                        // the event is indeed in the current step\n                        pendingEvent = true;\n                        return true;\n                    }\n                    // the event needs to be computed in another step\n                    // store the event information to handle cases when the solver doesn't converge\n                    previousEvent[0] = ta;\n                    previousEvent[1] = tb;\n                    ta += eps;\n                } else { // (signChange == true && ga * gb > 0)\n                    // if we previously had a sign change and we don't have a new one\n                    // the event must have been missed because the step size was too\n                    // large to notice it, we recompute its date with a smaller step\n                    if (previousEvent[1] >= t0 - convergence) {\n                        pendingEventTime = brentFindRoot(handler.g(), previousEvent[0], previousEvent[1], convergence, rootFindingAccuracy);\n                        if (!Double.isNaN(pendingEventTime) && (Math.abs(pendingEventTime - t0) < Math.abs(dt))) {\n                            pendingEvent = true;\n                            return true;\n                        }\n                    }\n                    signChange = false;\n                    ta += eps;\n                }\n\n                ga = gb;\n\n            } while (--remainingIterations > 0);\n\n            // no event found in the remaining iterations\n            pendingEventTime = Double.NaN;\n            pendingEvent = false;\n            return false;\n\n        } else {\n\n            // there are no event functions, just propagate the solution\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLast);\n            }\n            return false;\n\n        }\n\n    } catch (final FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..3a69ecd09 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,104 +164,108 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n+    try {\n \n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final double t0 = interpolator.getPreviousTime();\n+        final double dt = t1 - t0;\n \n+        final int maxIterationCount = handler.getMaxIterationCount();\n+        final double convergence = handler.getConvergence();\n+        final double rootFindingAccuracy = handler.getRootFindingAccuracy();\n+        final boolean findRoots = handler.isBracketing();\n+\n+        // check if we need to find roots (there are event functions and we aren't there already)\n+        if (findRoots) {\n+\n+            final double eps = getEpsilon() * (forward ? 1.0 : -1.0);\n+            final int maxIteration = getMaxIteration();\n             double ta = t0;\n             double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n+            boolean signChange = false;\n+\n+            final double[] previousEvent = new double[2];\n+            previousEvent[0] = t0 - dt - 2 * convergence;\n+            previousEvent[1] = Double.NaN;\n+\n+            int remainingIterations = maxIteration;\n+\n+            do {\n \n                 // evaluate handler value at the end of the substep\n-                tb += h;\n+                final double tb = ta + eps;\n                 interpolator.setInterpolatedTime(tb);\n                 final double gb = handler.g(tb, interpolator.getInterpolatedState());\n \n                 // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n+                if (EventHandler.continueAfterEvent(ga, gb)) {\n+                    // the function has a consistent sign and we do not stop there\n+                    signChange = false;\n+                    ta = tb;\n+                } else if (ga * gb < 0) {\n                     // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n-                        }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n-                        pendingEventTime = root;\n-                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n-                            // we were already waiting for this event which was\n-                            // found during a previous call for a step that was\n-                            // rejected, this step must now be accepted since it\n-                            // properly ends exactly at the event occurrence\n-                            return false;\n-                        }\n-                        // either we were not waiting for the event or it has\n-                        // moved in such a way the step cannot be accepted\n+                    signChange = true;\n+                    pendingEventTime = brentFindRoot(handler.g(), ta, tb, convergence, rootFindingAccuracy);\n+                    if (!Double.isNaN(pendingEventTime) && (Math.abs(pendingEventTime - t0) < Math.abs(dt))) {\n+                        // the event is indeed in the current step\n                         pendingEvent = true;\n                         return true;\n                     }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n+                    // the event needs to be computed in another step\n+                    // store the event information to handle cases when the solver doesn't converge\n+                    previousEvent[0] = ta;\n+                    previousEvent[1] = tb;\n+                    ta += eps;\n+                } else { // (signChange == true && ga * gb > 0)\n+                    // if we previously had a sign change and we don't have a new one\n+                    // the event must have been missed because the step size was too\n+                    // large to notice it, we recompute its date with a smaller step\n+                    if (previousEvent[1] >= t0 - convergence) {\n+                        pendingEventTime = brentFindRoot(handler.g(), previousEvent[0], previousEvent[1], convergence, rootFindingAccuracy);\n+                        if (!Double.isNaN(pendingEventTime) && (Math.abs(pendingEventTime - t0) < Math.abs(dt))) {\n+                            pendingEvent = true;\n+                            return true;\n+                        }\n+                    }\n+                    signChange = false;\n+                    ta += eps;\n                 }\n \n-            }\n+                ga = gb;\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n+            } while (--remainingIterations > 0);\n+\n+            // no event found in the remaining iterations\n             pendingEventTime = Double.NaN;\n+            pendingEvent = false;\n             return false;\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n+        } else {\n+\n+            // there are no event functions, just propagate the solution\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLast);\n             }\n-            throw new EventException(e);\n+            return false;\n+\n         }\n \n+    } catch (final FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n     }\n \n+}\n+\n     /** Get the occurrence time of the event triggered in the current\n      * step.\n      * @return occurrence time of the event triggered in the current",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}