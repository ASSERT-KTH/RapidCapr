{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (t.inGlobalScope()) {\n      return;\n    }\n\n    if (n.isReturn() && n.getFirstChild() != null) {\n      data.get(t.getScopeRoot()).recordNonEmptyReturn();\n      return;\n    }\n\n    if (t.getScopeDepth() <= 2) {\n      return;\n    }\n\n    switch (n.getToken()) {\n      case NAME:\n        if (NodeUtil.isLValue(n) && isDeclaredInNonGlobalScope(t, n)) {\n          Var var = t.getScope().getVar(n.getString());\n          if (var != null && !var.isGlobal()) {\n            Scope ownerScope = var.getScope();\n            if (ownerScope.isLocal()) {\n              data.get(ownerScope.getRootNode()).recordAssignedName(n.getString());\n            }\n            if (ownerScope != t.getScope()) {\n              data.get(ownerScope.getRootNode()).recordEscapedVarName(n.getString());\n            }\n          }\n        }\n        break;\n      case GETPROP:\n        if (NodeUtil.isLValue(n)) {\n          if (isDeclaredInNonGlobalScope(t, n.getFirstChild())) {\n            String rootName = n.getFirstChild().getString();\n            Var var = t.getScope().getVar(rootName);\n            if (var != null && !var.isGlobal()) {\n              Scope ownerScope = var.getScope();\n              if (ownerScope.isLocal()) {\n                data.get(ownerScope.getRootNode()).recordAssignedName(rootName);\n              }\n              if (ownerScope != t.getScope()) {\n                data.get(ownerScope.getRootNode())\n                    .recordEscapedQualifiedName(n.getQualifiedName());\n              }\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private boolean isDeclaredInNonGlobalScope(NodeTraversal t, Node n) {\n    String name = n.getString();\n    Scope currentScope = t.getScope();\n    if (currentScope.isDeclared(name, true)) {\n      return true;\n    }\n    for (Scope s : t.getScopes()) {\n      if (s.getRootNode() == currentScope.getRootNode()) {\n        break;\n      }\n      if (s.isDeclared(name, false)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..4d43b69a 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1983,59 +1983,75 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.put(n, new AstFunctionContents(n));\n       }\n     }\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (t.inGlobalScope()) {\n+      return;\n+    }\n \n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (t.inGlobalScope()) {\n-        return;\n-      }\n-\n-      if (n.isReturn() && n.getFirstChild() != null) {\n-        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n-      }\n-\n-      if (t.getScopeDepth() <= 2) {\n-        // The first-order function analyzer looks at two types of variables:\n-        //\n-        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n-        //\n-        // 2) Local variables that are assigned more than once.\n-        //\n-        // We treat all global variables as escaped by default, so there's\n-        // no reason to do this extra computation for them.\n-        return;\n-      }\n+    if (n.isReturn() && n.getFirstChild() != null) {\n+      data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+      return;\n+    }\n \n-      if (n.isName() && NodeUtil.isLValue(n) &&\n-          // Be careful of bleeding functions, which create variables\n-          // in the inner scope, not the scope where the name appears.\n-          !NodeUtil.isBleedingFunctionName(n)) {\n-        String name = n.getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n-          }\n+    if (t.getScopeDepth() <= 2) {\n+      return;\n+    }\n \n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+    switch (n.getToken()) {\n+      case NAME:\n+        if (NodeUtil.isLValue(n) && isDeclaredInNonGlobalScope(t, n)) {\n+          Var var = t.getScope().getVar(n.getString());\n+          if (var != null && !var.isGlobal()) {\n+            Scope ownerScope = var.getScope();\n+            if (ownerScope.isLocal()) {\n+              data.get(ownerScope.getRootNode()).recordAssignedName(n.getString());\n+            }\n+            if (ownerScope != t.getScope()) {\n+              data.get(ownerScope.getRootNode()).recordEscapedVarName(n.getString());\n+            }\n           }\n         }\n-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n-          NodeUtil.isLValue(n)) {\n-        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode())\n-                .recordEscapedQualifiedName(n.getQualifiedName());\n+        break;\n+      case GETPROP:\n+        if (NodeUtil.isLValue(n)) {\n+          if (isDeclaredInNonGlobalScope(t, n.getFirstChild())) {\n+            String rootName = n.getFirstChild().getString();\n+            Var var = t.getScope().getVar(rootName);\n+            if (var != null && !var.isGlobal()) {\n+              Scope ownerScope = var.getScope();\n+              if (ownerScope.isLocal()) {\n+                data.get(ownerScope.getRootNode()).recordAssignedName(rootName);\n+              }\n+              if (ownerScope != t.getScope()) {\n+                data.get(ownerScope.getRootNode())\n+                    .recordEscapedQualifiedName(n.getQualifiedName());\n+              }\n+            }\n           }\n         }\n+        break;\n+      default:\n+        break;\n+    }\n+  }\n+\n+  private boolean isDeclaredInNonGlobalScope(NodeTraversal t, Node n) {\n+    String name = n.getString();\n+    Scope currentScope = t.getScope();\n+    if (currentScope.isDeclared(name, true)) {\n+      return true;\n+    }\n+    for (Scope s : t.getScopes()) {\n+      if (s.getRootNode() == currentScope.getRootNode()) {\n+        break;\n+      }\n+      if (s.isDeclared(name, false)) {\n+        return true;\n       }\n     }\n+    return false;\n+  }\n   }\n \n   private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}