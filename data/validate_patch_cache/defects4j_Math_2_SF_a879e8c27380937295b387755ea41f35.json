{
    "patch": "public double getNumericalMean() {\n    if (getPopulationSize() <= 0) { // invalid population size\n        return Double.NaN; // return NaN\n    } else if (getSampleSize() < 0 || getNumberOfSuccesses() < 0) { // invalid sample size or number of successes\n        return Double.NaN; // return NaN\n    } else {\n        double sampleSize = (double) getSampleSize(); // convert to double\n        double numSuccesses = (double) getNumberOfSuccesses(); // convert to double\n        double populationSize = (double) getPopulationSize(); // convert to double\n        if (numSuccesses > sampleSize || sampleSize > populationSize) { // invalid values\n            return Double.NaN; // return NaN\n        } else {\n            return sampleSize * numSuccesses / populationSize; // calculate mean\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..80aa46967 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -264,9 +264,22 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * For population size {@code N}, number of successes {@code m}, and sample\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n-    public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+public double getNumericalMean() {\n+    if (getPopulationSize() <= 0) { // invalid population size\n+        return Double.NaN; // return NaN\n+    } else if (getSampleSize() < 0 || getNumberOfSuccesses() < 0) { // invalid sample size or number of successes\n+        return Double.NaN; // return NaN\n+    } else {\n+        double sampleSize = (double) getSampleSize(); // convert to double\n+        double numSuccesses = (double) getNumberOfSuccesses(); // convert to double\n+        double populationSize = (double) getPopulationSize(); // convert to double\n+        if (numSuccesses > sampleSize || sampleSize > populationSize) { // invalid values\n+            return Double.NaN; // return NaN\n+        } else {\n+            return sampleSize * numSuccesses / populationSize; // calculate mean\n+        }\n     }\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}