{
    "patch": "      boolean isMethod =\n          /* is a \"...prototype.method\" */\n          NodeUtil.isObjectLitKey(getprop)\n          && parentFunctionType != null;\n      boolean isOverride;\n      StaticSlot slot = null;\n      if (isMethod) {\n        slot = objectType.getSlot(propertyName);\n        boolean propertyDefinedOnClass =\n            slot != null\n            && !slot.isPropertyPrivate();\n        isOverride = parentFunctionType.isConstructor()\n            && propertyDefinedOnClass;\n      } else {\n        // is a \".property\"\n        isOverride =\n            t.inGlobalScope() &&\n            parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild().matchesQualifiedName(\n              getprop.getFirstChild().getQualifiedName());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..e09cc8f8 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,27 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isMethod =\n+          /* is a \"...prototype.method\" */\n+          NodeUtil.isObjectLitKey(getprop)\n+          && parentFunctionType != null;\n+      boolean isOverride;\n+      StaticSlot slot = null;\n+      if (isMethod) {\n+        slot = objectType.getSlot(propertyName);\n+        boolean propertyDefinedOnClass =\n+            slot != null\n+            && !slot.isPropertyPrivate();\n+        isOverride = parentFunctionType.isConstructor()\n+            && propertyDefinedOnClass;\n+      } else {\n+        // is a \".property\"\n+        isOverride =\n+            t.inGlobalScope() &&\n+            parent.getType() == Token.ASSIGN &&\n+            parent.getFirstChild().matchesQualifiedName(\n+              getprop.getFirstChild().getQualifiedName());\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}