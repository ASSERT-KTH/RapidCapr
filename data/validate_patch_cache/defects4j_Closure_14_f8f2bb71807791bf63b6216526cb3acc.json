{
    "patch": "              // In some cases, the finally block jumps to the return block of\n              // the parent function. We should explicitly add that edge.\n              if (node.getParent().isFunction()) {\n                Node lastInFunction = NodeUtil.getFunctionBody(node.getParent()).getLastChild();\n                Iterable<Node> returns = ControlFlowGraph.getReturns(lastInFunction);\n                for (Node returnNode : returns) {\n                  cfa.createEdge(fromNode, Branch.UNCOND, returnNode);\n                }\n              }\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..ab439db2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,6 +764,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+              // In some cases, the finally block jumps to the return block of\n+              // the parent function. We should explicitly add that edge.\n+              if (node.getParent().isFunction()) {\n+                Node lastInFunction = NodeUtil.getFunctionBody(node.getParent()).getLastChild();\n+                Iterable<Node> returns = ControlFlowGraph.getReturns(lastInFunction);\n+                for (Node returnNode : returns) {\n+                  cfa.createEdge(fromNode, Branch.UNCOND, returnNode);\n+                }\n+              }\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}