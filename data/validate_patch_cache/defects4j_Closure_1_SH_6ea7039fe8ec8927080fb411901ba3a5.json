{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    Preconditions.checkState(cfgNode.isTry() || cfgNode.isFunction());\n    if (cfgNode.isFunction()) {\n      List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n          return true;\n        }\n      }\n    } else if (cfgNode.isTry()) {\n      Try t = NodeUtil.getTryFinallyAt(cfgNode);\n      if (t != null && t.getFinallyBlock() != null) {\n        return true;\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..6a8e93e9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,23 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    Preconditions.checkState(cfgNode.isTry() || cfgNode.isFunction());\n+    if (cfgNode.isFunction()) {\n+      List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+          return true;\n+        }\n+      }\n+    } else if (cfgNode.isTry()) {\n+      Try t = NodeUtil.getTryFinallyAt(cfgNode);\n+      if (t != null && t.getFinallyBlock() != null) {\n+        return true;\n+      }\n+    }\n+    return false;\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}