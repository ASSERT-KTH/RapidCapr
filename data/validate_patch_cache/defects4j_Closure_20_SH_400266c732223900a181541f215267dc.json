{
    "patch": "private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();     \n    if (callTarget != null && callTarget.isName()) {\n      String functionName = callTarget.getString();\n      if (functionName.equals(\"String\") && n.getChildCount() == 2) {\n        Node value = callTarget.getNext();\n        Node folded = tryFoldLiteral(value);\n        if (folded != null) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              folded);\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }\n    }\n    return n;\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9d5cafc3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -204,7 +204,6 @@ class PeepholeSubstituteAlternateSyntax\n       }\n     }\n   }\n-\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n@@ -217,7 +216,26 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n+private Node tryFoldSimpleFunctionCall(Node n) {\n+    Preconditions.checkState(n.isCall());\n+    Node callTarget = n.getFirstChild();     \n+    if (callTarget != null && callTarget.isName()) {\n+      String functionName = callTarget.getString();\n+      if (functionName.equals(\"String\") && n.getChildCount() == 2) {\n+        Node value = callTarget.getNext();\n+        Node folded = tryFoldLiteral(value);\n+        if (folded != null) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              folded);\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n+      }\n+    }\n+    return n;\n+ }\n         Node addition = IR.add(\n             IR.string(\"\").srcref(callTarget),\n             value.detachFromParent());",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}