{
    "patch": "        if (firstModule == minimumModule) {\n          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n        } else {\n          // In this case, the name was implicitly provided by two independent\n          // modules. We need to move this code up to a common module.\n>>> [ INFILL ] <<<\n          int indexOfDot = namespace.indexOf('.');\n          if (indexOfDot == -1) {\n            // Any old place is fine.\n            compiler.getNodeForCodeInsertion(minimumModule)\n                .addChildToBack(replacementNode);\n          } else {\n            // Add it after the parent namespace.\n            ProvidedName parentName =\n                providedNames.get(namespace.substring(0, indexOfDot));\n            Preconditions.checkNotNull(parentName);\n            Preconditions.checkNotNull(parentName.replacementNode);\n            parentName.replacementNode.getParent().addChildAfter(\n                replacementNode, parentName.replacementNode);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..2eb38133 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,6 +786,12 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n+        if (firstModule == minimumModule) {\n+          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n+        } else {\n+          // In this case, the name was implicitly provided by two independent\n+          // modules. We need to move this code up to a common module.\n+>>> [ INFILL ] <<<\n           int indexOfDot = namespace.indexOf('.');\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n@@ -800,6 +806,20 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n             parentName.replacementNode.getParent().addChildAfter(\n                 replacementNode, parentName.replacementNode);\n           }\n+        }\n+          if (indexOfDot == -1) {\n+            // Any old place is fine.\n+            compiler.getNodeForCodeInsertion(minimumModule)\n+                .addChildToBack(replacementNode);\n+          } else {\n+            // Add it after the parent namespace.\n+            ProvidedName parentName =\n+                providedNames.get(namespace.substring(0, indexOfDot));\n+            Preconditions.checkNotNull(parentName);\n+            Preconditions.checkNotNull(parentName.replacementNode);\n+            parentName.replacementNode.getParent().addChildAfter(\n+                replacementNode, parentName.replacementNode);\n+          }\n         }\n         if (explicitNode != null) {\n           explicitNode.detachFromParent();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}