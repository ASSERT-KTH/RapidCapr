{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        changed.add(functionName);\n        if (!getFunctions().containsKey(functionName)) { // Check if the function is already in the map\n          Node functionBody = getFunctionBody(child, getScopeRoot()); // Get the body of the called function\n          if (functionBody != null) {\n            getFunctions().put(functionName, functionBody);\n            findCalledFunctions(functionBody, changed); // Recursively check for any other functions called within this function\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..01c949c9 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,22 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        changed.add(functionName);\n+        if (!getFunctions().containsKey(functionName)) { // Check if the function is already in the map\n+          Node functionBody = getFunctionBody(child, getScopeRoot()); // Get the body of the called function\n+          if (functionBody != null) {\n+            getFunctions().put(functionName, functionBody);\n+            findCalledFunctions(functionBody, changed); // Recursively check for any other functions called within this function\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}