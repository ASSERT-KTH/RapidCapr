{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val == null) {\n        return false;\n    } else if (val.isString() || val.isNumber() || val.isTrue() || val.isFalse()) {\n        return true;\n    } else if (val.isBinary()) {\n        Node left = val.getFirstChild();\n        Node right = val.getLastChild();\n        return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n    } else if (val.isUnary()) {\n        Node child = val.getFirstChild();\n        return isValidDefineValue(child, defines);\n    } else if (val.isName()) {\n        return defines.contains(val.getString());\n    } else if (val.isGetProp()) {\n        Node object = val.getFirstChild();\n        Node property = object.getNext();\n        if (object.isName()) {\n            return defines.contains(object.getString() + \".\" + property.getString());\n        } else if (isValidDefineValue(object, defines)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..b3f9ab12 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,31 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val == null) {\n+        return false;\n+    } else if (val.isString() || val.isNumber() || val.isTrue() || val.isFalse()) {\n         return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n-\n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n+    } else if (val.isBinary()) {\n+        Node left = val.getFirstChild();\n+        Node right = val.getLastChild();\n+        return isValidDefineValue(left, defines) && isValidDefineValue(right, defines);\n+    } else if (val.isUnary()) {\n+        Node child = val.getFirstChild();\n+        return isValidDefineValue(child, defines);\n+    } else if (val.isName()) {\n+        return defines.contains(val.getString());\n+    } else if (val.isGetProp()) {\n+        Node object = val.getFirstChild();\n+        Node property = object.getNext();\n+        if (object.isName()) {\n+            return defines.contains(object.getString() + \".\" + property.getString());\n+        } else if (isValidDefineValue(object, defines)) {\n+            return true;\n         }\n     }\n     return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}