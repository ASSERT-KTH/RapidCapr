{
    "patch": "    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        boolean isFunctionDeclaration = parent.getType() == Token.FUNCTION;\n        boolean isVarDeclaration = parent.getType() == Token.VAR;\n        boolean isCatchBlock = parent.getType() == Token.CATCH;\n        Preconditions.checkArgument(isFunctionDeclaration || isVarDeclaration || isCatchBlock);\n\n        shouldDeclareOnGlobalThis = scope.isGlobal() && isVarDeclaration;\n\n        if (scope.isFunctionScope()) {\n          shouldDeclareOnGlobalThis |= isFunctionDeclaration && n.getFirstChild().getString().equals(\"arguments\");\n        }\n      } else {\n        boolean isAssignToken = parent.getType() == Token.ASSIGN;\n        boolean isExprResultToken = parent.getType() == Token.EXPR_RESULT;\n        Preconditions.checkArgument(n.getType() == Token.GETPROP && (isAssignToken || isExprResultToken));\n      }\n      String variableName = n.getQualifiedName();\n      Preconditions.checkArgument(!variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // don't try to declare in the global scope if there's\n      // already a symbol there with this name.\n\n      // declared in closest scope?\n      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        validator.expectUndeclaredVariable(\n                sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n                  typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                    type == null ?\n                            getNativeType(JSTypeNative.NO_TYPE) :\n                            type,\n                    isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                    fnType.getPrototype(), compiler.getInput(sourceName),\n                    /* declared iff there's an explicit supertype */\n                    superClassCtor == null ||\n                            superClassCtor.getInstanceType().equals(\n                                    getNativeType(OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..d73e8d12 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -872,22 +872,23 @@ final class TypedScopeCreator implements ScopeCreator {\n     void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n+        boolean isFunctionDeclaration = parent.getType() == Token.FUNCTION;\n+        boolean isVarDeclaration = parent.getType() == Token.VAR;\n+        boolean isCatchBlock = parent.getType() == Token.CATCH;\n+        Preconditions.checkArgument(isFunctionDeclaration || isVarDeclaration || isCatchBlock);\n+\n+        shouldDeclareOnGlobalThis = scope.isGlobal() && isVarDeclaration;\n+\n+        if (scope.isFunctionScope()) {\n+          shouldDeclareOnGlobalThis |= isFunctionDeclaration && n.getFirstChild().getString().equals(\"arguments\");\n+        }\n       } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+        boolean isAssignToken = parent.getType() == Token.ASSIGN;\n+        boolean isExprResultToken = parent.getType() == Token.EXPR_RESULT;\n+        Preconditions.checkArgument(n.getType() == Token.GETPROP && (isAssignToken || isExprResultToken));\n       }\n       String variableName = n.getQualifiedName();\n       Preconditions.checkArgument(!variableName.isEmpty());\n@@ -897,14 +898,14 @@ final class TypedScopeCreator implements ScopeCreator {\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      // don't try to declare in the global scope if there's\n+      // already a symbol there with this name.\n \n       // declared in closest scope?\n       if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar = scopeToDeclareIn.getVar(variableName);\n         validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+                sourceName, n, parent, oldVar, variableName, type);\n       } else {\n         if (!inferred) {\n           setDeferredType(n, type);\n@@ -914,14 +915,14 @@ final class TypedScopeCreator implements ScopeCreator {\n \n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+                  typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n           boolean isExtern = input.isExtern();\n           if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n+                    type == null ?\n+                            getNativeType(JSTypeNative.NO_TYPE) :\n+                            type,\n+                    isExtern);\n           } else {\n             globalThis.defineDeclaredProperty(variableName, type, isExtern);\n           }\n@@ -934,11 +935,11 @@ final class TypedScopeCreator implements ScopeCreator {\n           if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                    fnType.getPrototype(), compiler.getInput(sourceName),\n+                    /* declared iff there's an explicit supertype */\n+                    superClassCtor == null ||\n+                            superClassCtor.getInstanceType().equals(\n+                                    getNativeType(OBJECT_TYPE)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}