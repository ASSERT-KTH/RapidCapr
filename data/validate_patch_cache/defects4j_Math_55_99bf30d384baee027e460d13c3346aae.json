{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    double s1 = v1.getNorm();\n    double s2 = v2.getNorm();\n    if (s1 == 0 || s2 == 0) {\n        return Vector3D.ZERO;\n    }\n\n    final double factor = FastMath.sqrt(s1 * s2);\n    final Vector3D v1Cor = new Vector3D(v1.getX() / factor, v1.getY() / factor, v1.getZ() / factor);\n\n    final double dot21 = v2.getX() * v1Cor.getX() + v2.getY() * v1Cor.getY() + v2.getZ() * v1Cor.getZ();\n    final Vector3D v3    = new Vector3D(-dot21 * v2.getY() + v1Cor.getY(), dot21 * v2.getX() - v1Cor.getX(), 0.0);\n\n    return new Vector3D(v1Cor.getY() * v2.getZ() - v1Cor.getZ() * v2.getY() + v3.getZ(),\n                        v1Cor.getZ() * v2.getX() - v1Cor.getX() * v2.getZ() + v3.getX(),\n                        v1Cor.getX() * v2.getY() - v1Cor.getY() * v2.getX() + v3.getY());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..767175272 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,27 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n \n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    double s1 = v1.getNorm();\n+    double s2 = v2.getNorm();\n+    if (s1 == 0 || s2 == 0) {\n+        return Vector3D.ZERO;\n+    }\n \n+    final double factor = FastMath.sqrt(s1 * s2);\n+    final Vector3D v1Cor = new Vector3D(v1.getX() / factor, v1.getY() / factor, v1.getZ() / factor);\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    final double dot21 = v2.getX() * v1Cor.getX() + v2.getY() * v1Cor.getY() + v2.getZ() * v1Cor.getZ();\n+    final Vector3D v3    = new Vector3D(-dot21 * v2.getY() + v1Cor.getY(), dot21 * v2.getX() - v1Cor.getX(), 0.0);\n \n-  }\n+    return new Vector3D(v1Cor.getY() * v2.getZ() - v1Cor.getZ() * v2.getY() + v3.getZ(),\n+                        v1Cor.getZ() * v2.getX() - v1Cor.getX() * v2.getZ() + v3.getX(),\n+                        v1Cor.getX() * v2.getY() - v1Cor.getY() * v2.getX() + v3.getY());\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<1.5707963267948968>",
    "test_result": "FAIL"
}