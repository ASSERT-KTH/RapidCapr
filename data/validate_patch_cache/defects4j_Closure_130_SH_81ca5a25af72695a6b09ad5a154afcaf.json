{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        boolean isAliasInlined = false;\n        // Find a local alias of {@code name} and try to inline it.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              isAliasInlined = true;\n              break;\n            }\n          }\n        }\n        if (isAliasInlined) {\n          // If an alias was inlined, don't add {@code name} back to the\n          // worklist. This is because we've already handled all the aliases\n          // of {@code name}.\n          continue;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..2e6aa56f 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -171,6 +171,28 @@ class CollapseProperties implements CompilerPass {\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        boolean isAliasInlined = false;\n+        // Find a local alias of {@code name} and try to inline it.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+              isAliasInlined = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (isAliasInlined) {\n+          // If an alias was inlined, don't add {@code name} back to the\n+          // worklist. This is because we've already handled all the aliases\n+          // of {@code name}.\n+          continue;\n+        }\n+      }\n+          name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}