{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            if (propType.isUnknownType() || propType.isNullType()) {\n              typeToInfer = getNativeType(JSTypeNative.NO_TYPE);\n            } else if (propType.isVoidType()) {\n              typeToInfer = getNativeType(JSTypeNative.UNDEFINED_TYPE);\n            } else {\n              typeToInfer =\n                  getNativeType(JSTypeNative.NO_TYPE)\n                      .getLeastSupertype(propType);\n            }\n          }\n          defineInferredProperty(prop, typeToInfer, null);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..155e326f 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -562,7 +562,7 @@ class PrototypeObjectType extends ObjectType {\n     // f({});\n     //\n     // We want to modify the object literal to match the constraint, by\n-    // taking any each property on the record and trying to match\n+    // taking each property on the record and trying to match\n     // properties on this object.\n     if (constraintObj.isRecordType()) {\n       for (String prop : constraintObj.getOwnPropertyNames()) {\n@@ -570,8 +570,15 @@ class PrototypeObjectType extends ObjectType {\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+            if (propType.isUnknownType() || propType.isNullType()) {\n+              typeToInfer = getNativeType(JSTypeNative.NO_TYPE);\n+            } else if (propType.isVoidType()) {\n+              typeToInfer = getNativeType(JSTypeNative.UNDEFINED_TYPE);\n+            } else {\n+              typeToInfer =\n+                  getNativeType(JSTypeNative.NO_TYPE)\n+                      .getLeastSupertype(propType);\n+            }\n           }\n           defineInferredProperty(prop, typeToInfer, null);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}