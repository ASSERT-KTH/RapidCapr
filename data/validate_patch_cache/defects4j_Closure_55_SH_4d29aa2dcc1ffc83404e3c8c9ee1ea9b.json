{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  switch (n.getToken()) {\n    case FUNCTION:\n      return NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null;\n    case CALL:\n      return false;\n    default:\n      return false;\n   }\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..5b98b502 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,16 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  switch (n.getToken()) {\n+    case FUNCTION:\n+      return NodeUtil.getFunctionName(n) != null && NodeUtil.getFunctionBody(n) != null;\n+    case CALL:\n+      return false;\n+    default:\n+      return false;\n+   }\n+ }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}