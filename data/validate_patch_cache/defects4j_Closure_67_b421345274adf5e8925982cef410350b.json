{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node lhs = assign.getFirstChild();\n      Node rhs = assign.getLastChild();\n      // check if the left-hand side of the assignment is a property access\n      if (NodeUtil.isGet(lhs)) {\n        Node prop = lhs.getLastChild();\n        if (NodeUtil.isName(prop) && prop.getString().equals(\"prototype\")\n          && rhs != null) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..acc82fe8 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,26 +310,17 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n+      Node lhs = assign.getFirstChild();\n+      Node rhs = assign.getLastChild();\n+      // check if the left-hand side of the assignment is a property access\n+      if (NodeUtil.isGet(lhs)) {\n+        Node prop = lhs.getLastChild();\n+        if (NodeUtil.isName(prop) && prop.getString().equals(\"prototype\")\n+          && rhs != null) {\n+          return true;\n         }\n       }\n-\n       return false;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}