{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          if (n.getBooleanProp(Node.FUNCTION_PROPERTY_METHOD)) {\n            maybeDeclareClass(n.getParent(), parent);\n          }\n          unscopedHoistFunctionDeclaration(n.getFirstChild(), false);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..2fb3d58d 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,6 +1448,14 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n+    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (n == scope.getRootNode()) return;\n+\n+      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+        handleFunctionInputs(parent);\n+        return;\n+      }\n+\n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n@@ -1455,6 +1463,10 @@ final class TypedScopeCreator implements ScopeCreator {\n             return;\n           }\n           defineDeclaredFunction(n, parent);\n+          if (n.getBooleanProp(Node.FUNCTION_PROPERTY_METHOD)) {\n+            maybeDeclareClass(n.getParent(), parent);\n+          }\n+          unscopedHoistFunctionDeclaration(n.getFirstChild(), false);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);\n@@ -1464,6 +1476,7 @@ final class TypedScopeCreator implements ScopeCreator {\n           break;\n       }\n     }\n+    }\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}