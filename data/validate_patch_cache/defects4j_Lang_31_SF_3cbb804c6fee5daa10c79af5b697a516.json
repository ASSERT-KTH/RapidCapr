{
    "patch": "public static boolean containsAny(String str, char[] searchChars) {\n    if (str == null || searchChars == null) {\n        return false;\n    }\n    int strLen = str.length();\n    int searchLen = searchChars.length;\n    for (int i = 0; i < strLen; i++) {\n        char ch = str.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            if (i + 1 < strLen && Character.isLowSurrogate(str.charAt(i + 1))) {\n                ch = Character.toCodePoint(ch, str.charAt(i + 1));\n                i++;\n            }\n        }\n        for (int j = 0; j < searchLen; j++) {\n            char searchChar = searchChars[j];\n            if (Character.isHighSurrogate(searchChar)) {\n                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n                    searchChar = Character.toCodePoint(searchChar, searchChars[j + 1]);\n                    j++;\n                }\n            }\n            if (ch == searchChar) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..b899d5ab 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,35 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(String str, char[] searchChars) {\n+    if (str == null || searchChars == null) {\n+        return false;\n+    }\n+    int strLen = str.length();\n+    int searchLen = searchChars.length;\n+    for (int i = 0; i < strLen; i++) {\n+        char ch = str.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            if (i + 1 < strLen && Character.isLowSurrogate(str.charAt(i + 1))) {\n+                ch = Character.toCodePoint(ch, str.charAt(i + 1));\n+                i++;\n+            }\n+        }\n+        for (int j = 0; j < searchLen; j++) {\n+            char searchChar = searchChars[j];\n+            if (Character.isHighSurrogate(searchChar)) {\n+                if (j + 1 < searchLen && Character.isLowSurrogate(searchChars[j + 1])) {\n+                    searchChar = Character.toCodePoint(searchChar, searchChars[j + 1]);\n+                    j++;\n+                }\n+            }\n+            if (ch == searchChar) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}