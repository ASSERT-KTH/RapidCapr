{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null && providedModule != module) {\n          if (!moduleGraph.dependsOn(module, providedModule)) {\n            compiler.report(\n                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(),\n                    module.getName()));\n          } else if (module.getRunId() > providedModule.getRunId()) {\n            // Do not report an error for module cycles where this module\n            // is consumed in a later pass than its provided module since the\n            // dependence will eventually be resolved.\n          } else if (!provided.ignoreTraversal && (provided.traversalId == null\n              || !provided.traversalId.equals(t.getTraversalId()))) {\n            // Do not report an error for valid external modules that are built-in to\n            // Closure Library, for example. Those modules have an explicit traversal ID.\n            compiler.report(\n                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                    providedModule.getName(),\n                    module.getName()));\n          }\n        } else if (provided.ignoreTraversal) {\n          // If this module was ignored during traversal, it might be valid. Set up its traversal\n          // ID so that we can find it during the next traversal and verify that it's valid.\n          provided.traversalId = t.getTraversalId();\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      if (provided != null) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..2009e942 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,7 +292,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n@@ -308,13 +308,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         Preconditions.checkNotNull(providedModule);\n \n         JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+        if (moduleGraph != null && providedModule != module) {\n+          if (!moduleGraph.dependsOn(module, providedModule)) {\n+            compiler.report(\n+                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                    providedModule.getName(),\n+                    module.getName()));\n+          } else if (module.getRunId() > providedModule.getRunId()) {\n+            // Do not report an error for module cycles where this module\n+            // is consumed in a later pass than its provided module since the\n+            // dependence will eventually be resolved.\n+          } else if (!provided.ignoreTraversal && (provided.traversalId == null\n+              || !provided.traversalId.equals(t.getTraversalId()))) {\n+            // Do not report an error for valid external modules that are built-in to\n+            // Closure Library, for example. Those modules have an explicit traversal ID.\n+            compiler.report(\n+                t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                    providedModule.getName(),\n+                    module.getName()));\n+          }\n+        } else if (provided.ignoreTraversal) {\n+          // If this module was ignored during traversal, it might be valid. Set up its traversal\n+          // ID so that we can find it during the next traversal and verify that it's valid.\n+          provided.traversalId = t.getTraversalId();\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}