{
    "patch": "import com.google.common.collect.Sets;\nimport java.util.Set;\n\npublic class ObjectType {\n  private boolean prettyPrint;\n\n  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 100;\n\n  public boolean canBeCalled() {\n    return !isRegexpType();\n  }\n\n  private boolean isRegexpType() {\n    // implementation details\n    return false;\n  }\n\n  private String getReferenceName() {\n    // implementation details\n    return \"\";\n  }\n\n  private boolean hasReferenceName() {\n    // implementation details\n    return false;\n  }\n\n  private ObjectType getImplicitPrototype() {\n    // implementation details\n    return null;\n  }\n  \n  private Set<String> getOwnPropertyNames() {\n    // implementation details\n    return Sets.newHashSet();\n  }\n  \n  private Object getPropertyType(String property) {\n    // implementation details\n    return \"\";\n  }\n  \n  private boolean isNativeObjectType() {\n    // implementation details\n    return false;\n  }\n  \n  private boolean isStructuralInterface() {\n    // implementation details\n    return false;\n  }\n\n  @Override\n  public String toString() {\n    return toStringHelper(false);\n  }\n\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      Set<String> propertyNames = Sets.newTreeSet();\n      for (ObjectType current = this;\n          current != null && !current.isNativeObjectType() && \n          propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES &&\n          !current.isStructuralInterface();\n          current = current.getImplicitPrototype()) {\n        propertyNames.addAll(current.getOwnPropertyNames());\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i >= MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..d54fbcbd 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,11 +345,63 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n+import com.google.common.collect.Sets;\n+import java.util.Set;\n+\n+public class ObjectType {\n+  private boolean prettyPrint;\n+\n+  private static final int MAX_PRETTY_PRINTED_PROPERTIES = 100;\n+\n   public boolean canBeCalled() {\n-    return isRegexpType();\n+    return !isRegexpType();\n+  }\n+\n+  private boolean isRegexpType() {\n+    // implementation details\n+    return false;\n+  }\n+\n+  private String getReferenceName() {\n+    // implementation details\n+    return \"\";\n+  }\n+\n+  private boolean hasReferenceName() {\n+    // implementation details\n+    return false;\n+  }\n+\n+  private ObjectType getImplicitPrototype() {\n+    // implementation details\n+    return null;\n+  }\n+  \n+  private Set<String> getOwnPropertyNames() {\n+    // implementation details\n+    return Sets.newHashSet();\n+  }\n+  \n+  private Object getPropertyType(String property) {\n+    // implementation details\n+    return \"\";\n+  }\n+  \n+  private boolean isNativeObjectType() {\n+    // implementation details\n+    return false;\n+  }\n+  \n+  private boolean isStructuralInterface() {\n+    // implementation details\n+    return false;\n   }\n \n   @Override\n+  public String toString() {\n+    return toStringHelper(false);\n+  }\n+\n   String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n@@ -360,9 +412,10 @@ class PrototypeObjectType extends ObjectType {\n       // Use a tree set so that the properties are sorted.\n       Set<String> propertyNames = Sets.newTreeSet();\n       for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n+          current != null && !current.isNativeObjectType() && \n+          propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES &&\n+          !current.isStructuralInterface();\n+          current = current.getImplicitPrototype()) {\n         propertyNames.addAll(current.getOwnPropertyNames());\n       }\n \n@@ -380,7 +433,7 @@ class PrototypeObjectType extends ObjectType {\n         sb.append(getPropertyType(property).toString());\n \n         ++i;\n-        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n+        if (i >= MAX_PRETTY_PRINTED_PROPERTIES) {\n           sb.append(\", ...\");\n           break;\n         }\n@@ -394,6 +447,7 @@ class PrototypeObjectType extends ObjectType {\n       return \"{...}\";\n     }\n   }\n+}\n \n   void setPrettyPrint(boolean prettyPrint) {\n     this.prettyPrint = prettyPrint;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}