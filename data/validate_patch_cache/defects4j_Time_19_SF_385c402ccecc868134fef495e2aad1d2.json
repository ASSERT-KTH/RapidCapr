{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsetLocal;\n\n        // get the offset at instantAdjusted (the actual instant being tested)\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets match, we're done\n        if (offsetLocal == offsetAdjusted) {\n            return offsetLocal;\n        }\n\n        // if not, we need to determine whether we're in a gap or overlap\n        final long nextAdjusted = nextTransition(instantAdjusted);\n        final long prevAdjusted = previousTransition(instantAdjusted);\n\n        if (nextAdjusted == instantLocal || (prevAdjusted > nextAdjusted && nextAdjusted < instantLocal)) {\n            // we're in a gap, so use the original offset\n            return offsetLocal;\n        } else if (prevAdjusted == instantLocal || (prevAdjusted < nextAdjusted && prevAdjusted < instantLocal)) {\n            // we're in an overlap\n            if (offsetLocal < offsetAdjusted) {\n                // we're in the first (later) offset so use that\n                return offsetLocal;\n            } else {\n                // we're in the second (earlier) offset so use that\n                return offsetAdjusted;\n            }\n        } else {\n            throw new IllegalArgumentException(\"The instant is invalid\");\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..66000e70 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n+\n+        // get the offset at instantAdjusted (the actual instant being tested)\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        // if the offsets match, we're done\n+        if (offsetLocal == offsetAdjusted) {\n+            return offsetLocal;\n+        }\n+\n+        // if not, we need to determine whether we're in a gap or overlap\n+        final long nextAdjusted = nextTransition(instantAdjusted);\n+        final long prevAdjusted = previousTransition(instantAdjusted);\n+\n+        if (nextAdjusted == instantLocal || (prevAdjusted > nextAdjusted && nextAdjusted < instantLocal)) {\n+            // we're in a gap, so use the original offset\n+            return offsetLocal;\n+        } else if (prevAdjusted == instantLocal || (prevAdjusted < nextAdjusted && prevAdjusted < instantLocal)) {\n+            // we're in an overlap\n+            if (offsetLocal < offsetAdjusted) {\n+                // we're in the first (later) offset so use that\n+                return offsetLocal;\n+            } else {\n+                // we're in the second (earlier) offset so use that\n+                return offsetAdjusted;\n             }\n+        } else {\n+            throw new IllegalArgumentException(\"The instant is invalid\");\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}