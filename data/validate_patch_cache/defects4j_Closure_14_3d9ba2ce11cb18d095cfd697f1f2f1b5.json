{
    "patch": "if (parent.getType() == Token.TRY) {\n  if (parent.getFirstChild() == node) { // If we are coming out of the TRY block.\n    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n      return computeFallThrough(parent.getLastChild());\n    } else { // and have no FINALLY.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  } else if (NodeUtil.getCatchBlock(parent) == node){ // CATCH block.\n    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n      return computeFallThrough(node.getNext());\n    } else {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  } else if (parent.getLastChild() == node){ // If we are coming out of the FINALLY block.\n    if (cfa != null) {\n      for (Node finallyBlock : cfa.finallyMap.get(parent)) {\n        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyBlock, finallyBlock, cfa));\n      }\n    }\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..9c0c229b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,28 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (parent.getType() == Token.TRY) {\n+  if (parent.getFirstChild() == node) { // If we are coming out of the TRY block.\n+    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+      return computeFallThrough(parent.getLastChild());\n+    } else { // and have no FINALLY.\n+      return computeFollowNode(fromNode, parent, cfa);\n+    }\n+  } else if (NodeUtil.getCatchBlock(parent) == node){ // CATCH block.\n+    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+      return computeFallThrough(node.getNext());\n+    } else {\n+      return computeFollowNode(fromNode, parent, cfa);\n+    }\n+  } else if (parent.getLastChild() == node){ // If we are coming out of the FINALLY block.\n+    if (cfa != null) {\n+      for (Node finallyBlock : cfa.finallyMap.get(parent)) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(finallyBlock, finallyBlock, cfa));\n+      }\n+    }\n+    return computeFollowNode(fromNode, parent, cfa);\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}