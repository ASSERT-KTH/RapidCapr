{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            Chronology chrono = partial.getChronology();\n            int field = partial.getFieldIndex(DateTimeFieldType.monthOfYear());\n            int year = 0;\n            int monthInYear = 0;\n            if (field >= 0) {\n                int value = values[field] + valueToAdd;\n                year = partial.getField(DateTimeFieldType.year()).get(values[field], value);\n                monthInYear = chrono.monthOfYear().set(year, value);\n            } else {\n                field = partial.getFieldIndex(DateTimeFieldType.year());\n                year = partial.getField(DateTimeFieldType.year()).addWrapField(values[field], valueToAdd);\n                field = partial.getFieldIndex(DateTimeFieldType.dayOfMonth());\n                int day = Math.min(chrono.dayOfMonth().getMaximumValue(year, monthInYear), partial.getField(DateTimeFieldType.dayOfMonth()).getMaximumValue(year, monthInYear, values[field]));\n                monthInYear = chrono.monthOfYear().set(year, monthInYear, day);\n            }\n            int[] newValues = new int[partial.size()];\n            for (int i = 0; i < newValues.length; i++) {\n                if (i == field) {\n                    newValues[i] = monthInYear;\n                } else {\n                    newValues[i] = partial.getFieldType(i).getField(chrono).getMinimumValue();\n                }\n            }\n            partial = partial.withValues(newValues);\n            return newValues;\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..aa21a900 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,34 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        \n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+            Chronology chrono = partial.getChronology();\n+            int field = partial.getFieldIndex(DateTimeFieldType.monthOfYear());\n+            int year = 0;\n+            int monthInYear = 0;\n+            if (field >= 0) {\n+                int value = values[field] + valueToAdd;\n+                year = partial.getField(DateTimeFieldType.year()).get(values[field], value);\n+                monthInYear = chrono.monthOfYear().set(year, value);\n+            } else {\n+                field = partial.getFieldIndex(DateTimeFieldType.year());\n+                year = partial.getField(DateTimeFieldType.year()).addWrapField(values[field], valueToAdd);\n+                field = partial.getFieldIndex(DateTimeFieldType.dayOfMonth());\n+                int day = Math.min(chrono.dayOfMonth().getMaximumValue(year, monthInYear), partial.getField(DateTimeFieldType.dayOfMonth()).getMaximumValue(year, monthInYear, values[field]));\n+                monthInYear = chrono.monthOfYear().set(year, monthInYear, day);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            int[] newValues = new int[partial.size()];\n+            for (int i = 0; i < newValues.length; i++) {\n+                if (i == field) {\n+                    newValues[i] = monthInYear;\n+                } else {\n+                    newValues[i] = partial.getFieldType(i).getField(chrono).getMinimumValue();\n+                }\n+            }\n+            partial = partial.withValues(newValues);\n+            return newValues;\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}