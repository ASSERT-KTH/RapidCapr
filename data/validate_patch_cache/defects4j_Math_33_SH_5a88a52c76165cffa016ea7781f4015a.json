{
    "patch": "if (Precision.compareTo(entry, 0d, maxUlps) < 0) {\n   boolean allZero = true;\n   for (int j = getNumObjectiveFunctions(); j < getWidth(); j++) {\n       if (Precision.compareTo(tableau.getEntry(0, j), 0d, maxUlps) != 0) {\n           allZero = false;\n           break;\n       }\n   }\n   if (allZero) {\n       throw new UnboundedSolutionException();\n   }\n   continue;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..2ce58d961 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,19 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+if (Precision.compareTo(entry, 0d, maxUlps) < 0) {\n+   boolean allZero = true;\n+   for (int j = getNumObjectiveFunctions(); j < getWidth(); j++) {\n+       if (Precision.compareTo(tableau.getEntry(0, j), 0d, maxUlps) != 0) {\n+           allZero = false;\n+           break;\n+       }\n+   }\n+   if (allZero) {\n+       throw new UnboundedSolutionException();\n+   }\n+   continue;\n+}\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}