{
    "patch": "        TypedScope otherScope = that.getScope();\n        TypedScope thisScope = this.getScope();\n\n        // If in different scopes, they are not equal under inequality.\n        if (!thisScope.equals(otherScope)) {\n          return new TypePair(this, that);\n        }\n\n        // Short-circuit if they have same key.\n        if (this.structureEquals(that)) {\n          return new TypePair(null, null);\n        }\n\n        // Check prototype chain equality.\n        if (this.isSubtype(that) && that.isSubtype(this)) {\n          return new TypePair(null, null);\n        }\n\n        return new TypePair(this, that);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..9fe2aab2 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,25 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        TypedScope otherScope = that.getScope();\n+        TypedScope thisScope = this.getScope();\n+\n+        // If in different scopes, they are not equal under inequality.\n+        if (!thisScope.equals(otherScope)) {\n+          return new TypePair(this, that);\n+        }\n+\n+        // Short-circuit if they have same key.\n+        if (this.structureEquals(that)) {\n+          return new TypePair(null, null);\n+        }\n+\n+        // Check prototype chain equality.\n+        if (this.isSubtype(that) && that.isSubtype(this)) {\n+          return new TypePair(null, null);\n+        }\n+\n+        return new TypePair(this, that);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}