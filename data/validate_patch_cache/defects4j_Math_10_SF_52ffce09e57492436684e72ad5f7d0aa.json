{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    final double r;\n    final int index = FastMath.abs(y[yOffset]) > FastMath.abs(x[xOffset]) ? 1 : 0;\n    final double den = x[xOffset + index] + y[yOffset + 1 - index];\n    if (den == 0 || Double.isNaN(den)) {\n        result[resultOffset] = Double.NaN;\n        return;\n    }\n    final double x2 = x[xOffset + index] * x[xOffset + index];\n    final double y2 = y[yOffset + 1 - index] * y[yOffset + 1 - index];\n    final double atan = FastMath.atan(FastMath.abs((y[yOffset + 1 - index] -\n                                                      x[xOffset + index]) / den));\n    if (x[xOffset + index] >= 0) {\n        r = internalSqrt(x2 + y2);\n        result[resultOffset]       = 0.5 * (FastMath.PI - atan);\n        result[resultOffset + 1]   = internalAtan(y[yOffset + 1 - index], x[xOffset + index]) + \n                                     ((y[yOffset + 1 - index] < 0) ? -r : r);\n    } else {\n        r = internalSqrt(x2 + y2);\n        result[resultOffset]       = 0.5 * ((y[yOffset + 1 - index] < 0) ? -FastMath.PI : FastMath.PI) + atan;\n        result[resultOffset + 1]   = internalAtan(y[yOffset + 1 - index], x[xOffset + index]) + \n                                      ((y[yOffset + 1 - index] < 0) ? r : -r);\n    }\n\n    // Fix negative zero case\n    if (Double.doubleToRawLongBits(result[resultOffset]) == Double.doubleToRawLongBits(-0.0)) {\n        result[resultOffset] = 0.0;\n    }\n    if (Double.doubleToRawLongBits(result[resultOffset + 1]) == Double.doubleToRawLongBits(-0.0)) {\n        result[resultOffset + 1] = 0.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..70e7451f1 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,41 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n-\n-        } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n-        }\n-\n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    final double r;\n+    final int index = FastMath.abs(y[yOffset]) > FastMath.abs(x[xOffset]) ? 1 : 0;\n+    final double den = x[xOffset + index] + y[yOffset + 1 - index];\n+    if (den == 0 || Double.isNaN(den)) {\n+        result[resultOffset] = Double.NaN;\n+        return;\n+    }\n+    final double x2 = x[xOffset + index] * x[xOffset + index];\n+    final double y2 = y[yOffset + 1 - index] * y[yOffset + 1 - index];\n+    final double atan = FastMath.atan(FastMath.abs((y[yOffset + 1 - index] -\n+                                                      x[xOffset + index]) / den));\n+    if (x[xOffset + index] >= 0) {\n+        r = internalSqrt(x2 + y2);\n+        result[resultOffset]       = 0.5 * (FastMath.PI - atan);\n+        result[resultOffset + 1]   = internalAtan(y[yOffset + 1 - index], x[xOffset + index]) + \n+                                     ((y[yOffset + 1 - index] < 0) ? -r : r);\n+    } else {\n+        r = internalSqrt(x2 + y2);\n+        result[resultOffset]       = 0.5 * ((y[yOffset + 1 - index] < 0) ? -FastMath.PI : FastMath.PI) + atan;\n+        result[resultOffset + 1]   = internalAtan(y[yOffset + 1 - index], x[xOffset + index]) + \n+                                      ((y[yOffset + 1 - index] < 0) ? r : -r);\n+    }\n \n+    // Fix negative zero case\n+    if (Double.doubleToRawLongBits(result[resultOffset]) == Double.doubleToRawLongBits(-0.0)) {\n+        result[resultOffset] = 0.0;\n+    }\n+    if (Double.doubleToRawLongBits(result[resultOffset + 1]) == Double.doubleToRawLongBits(-0.0)) {\n+        result[resultOffset + 1] = 0.0;\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}