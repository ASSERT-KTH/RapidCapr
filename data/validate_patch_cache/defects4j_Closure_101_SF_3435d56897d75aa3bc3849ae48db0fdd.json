{
    "patch": "protected CompilerOptions createOptions() {\n  CompilerOptions options = new CompilerOptions();\n  options.setCodingConvention(new ClosureCodingConvention());\n  CompilationLevel level = flags.compilation_level;\n  level.setOptionsForCompilationLevel(options);\n  if (flags.debug) {\n    level.setDebugOptionsForCompilationLevel(options);\n  }\n\n  WarningLevel wLevel = flags.warning_level;\n  wLevel.setOptionsForWarningLevel(options);\n  for (FormattingOption formattingOption : flags.formatting) {\n    formattingOption.applyToOptions(options);\n  }\n  if (flags.process_closure_primitives != null) {\n    if (flags.process_closure_primitives instanceof Boolean) {\n      options.closurePass = ((Boolean) flags.process_closure_primitives).booleanValue();\n    } else if (flags.process_closure_primitives instanceof String) {\n      options.closurePass = Boolean.parseBoolean((String) flags.process_closure_primitives);\n    }\n  }\n\n  initOptionsFromFlags(options);\n  return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..8bc8f312 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,28 +416,32 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n-    CompilerOptions options = new CompilerOptions();\n-    options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n-    }\n+protected CompilerOptions createOptions() {\n+  CompilerOptions options = new CompilerOptions();\n+  options.setCodingConvention(new ClosureCodingConvention());\n+  CompilationLevel level = flags.compilation_level;\n+  level.setOptionsForCompilationLevel(options);\n+  if (flags.debug) {\n+    level.setDebugOptionsForCompilationLevel(options);\n+  }\n \n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n-    }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+  WarningLevel wLevel = flags.warning_level;\n+  wLevel.setOptionsForWarningLevel(options);\n+  for (FormattingOption formattingOption : flags.formatting) {\n+    formattingOption.applyToOptions(options);\n+  }\n+  if (flags.process_closure_primitives != null) {\n+    if (flags.process_closure_primitives instanceof Boolean) {\n+      options.closurePass = ((Boolean) flags.process_closure_primitives).booleanValue();\n+    } else if (flags.process_closure_primitives instanceof String) {\n+      options.closurePass = Boolean.parseBoolean((String) flags.process_closure_primitives);\n     }\n-\n-    initOptionsFromFlags(options);\n-    return options;\n   }\n \n+  initOptionsFromFlags(options);\n+  return options;\n+}\n+\n   @Override\n   protected Compiler createCompiler() {\n     return new Compiler(getErrorPrintStream());",
    "result_reason": "error: incomparable types: boolean and <null>",
    "test_result": "ERROR"
}