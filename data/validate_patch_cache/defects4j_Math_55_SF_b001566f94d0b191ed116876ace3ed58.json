{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n\n    final double factor1 = v1.getNormSq() * v2.getNorm();\n    final double factor2 = v2.getNormSq() * v1.getNorm();\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision. See Kahan lecture\n    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n    final double compPar1 = v1.dotProduct(v2);\n    final double compPar2 = v2.dotProduct(v1);\n\n    final Vector3D v3;\n    if (compPar1 == 0.0) {\n        v3 = v1;\n    } else if (compPar2 == 0.0) {\n        v3 = v2;\n    } else {\n        // include 6 extra bits to avoid rounding errors\n        final double rho = FastMath.min(FastMath.scalb(compPar1, -26) + FastMath.scalb(compPar2, -26), FastMath.sqrt(factor1 / factor2));\n        v3 = v1.subtract(v2.scalarMultiply(rho));\n    }\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n                        v3.getX() * v2.getY() - v3.getY() * v2.getX());\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..937bc6dcf 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,40 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+\n+    final double factor1 = v1.getNormSq() * v2.getNorm();\n+    final double factor2 = v2.getNormSq() * v1.getNorm();\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision. See Kahan lecture\n+    // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+    // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+    final double compPar1 = v1.dotProduct(v2);\n+    final double compPar2 = v2.dotProduct(v1);\n+\n+    final Vector3D v3;\n+    if (compPar1 == 0.0) {\n+        v3 = v1;\n+    } else if (compPar2 == 0.0) {\n+        v3 = v2;\n+    } else {\n+        // include 6 extra bits to avoid rounding errors\n+        final double rho = FastMath.min(FastMath.scalb(compPar1, -26) + FastMath.scalb(compPar2, -26), FastMath.sqrt(factor1 / factor2));\n+        v3 = v1.subtract(v2.scalarMultiply(rho));\n+    }\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    return new Vector3D(v3.getY() * v2.getZ() - v3.getZ() * v2.getY(),\n+                        v3.getZ() * v2.getX() - v3.getX() * v2.getZ(),\n+                        v3.getX() * v2.getY() - v3.getY() * v2.getX());\n \n-  }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: method dotProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}