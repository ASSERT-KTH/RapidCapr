{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n                getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            double basicValue = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n            coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                if (basicValue != 0) {\n                    for (int j = getNumObjectiveFunctions(); j < tableauNumCols - 1; j++) {\n                        if ((j - getNumObjectiveFunctions()) != i) {\n                            double value = tableau.getEntry(basicRow, j);\n                            if (Math.abs(value) > getPrecision()) {\n                                coefficients[i] = 0;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..4bb6bb268 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -324,19 +324,22 @@ class SimplexTableau implements Serializable {\n     protected RealPointValuePair getSolution() {\n         double[] coefficients = new double[getOriginalNumDecisionVariables()];\n         Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+                getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+            double basicValue = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+            coefficients[i] = basicValue - (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                if (basicValue != 0) {\n+                    for (int j = getNumObjectiveFunctions(); j < tableauNumCols - 1; j++) {\n+                        if ((j - getNumObjectiveFunctions()) != i) {\n+                            double value = tableau.getEntry(basicRow, j);\n+                            if (Math.abs(value) > getPrecision()) {\n+                                coefficients[i] = 0;\n+                                break;\n+                            }\n+                        }\n                     }\n                 }\n             }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}