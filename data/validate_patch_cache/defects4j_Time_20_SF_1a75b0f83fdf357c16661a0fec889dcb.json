{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    int length = str.length();\n    \n    for (String id : ALL_IDS) {\n        int idLength = id.length();\n        if (length >= idLength && str.startsWith(id)) {\n            char c = (length > idLength) ? str.charAt(idLength) : '\\0';\n            if (c == '/' || Character.isWhitespace(c)) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + idLength;\n            }\n        }\n    }\n    \n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..910742ad 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,23 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n-            }\n-            return ~position;\n-        }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    int length = str.length();\n+    \n+    for (String id : ALL_IDS) {\n+        int idLength = id.length();\n+        if (length >= idLength && str.startsWith(id)) {\n+            char c = (length > idLength) ? str.charAt(idLength) : '\\0';\n+            if (c == '/' || Character.isWhitespace(c)) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + idLength;\n+            }\n+        }\n+    }\n+    \n+    return ~position;\n+}\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "java.lang.IllegalArgumentException: Invalid format: \"2007-03-04 12:30 +09:00 Asia/Tokyo\" is malformed at \"Asia/Tokyo\"",
    "test_result": "FAIL"
}