{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!left.isGetProp() || !right.isString()) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.matchesName(\"join\")) {\n        return;\n    }\n\n    String joinString = right.getString();\n    List<Node> arrayFoldedChildren = new ArrayList<>();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    for (Node elem : arrayNode.children()) {\n        if (NodeUtil.isImmutableValue(elem) && elem.isString()) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            sb.append(elem.getString());\n        } else {\n            if (sb.length() > 0) {\n                // + 2 for the quotes.\n                foldedSize += sb.length() + 2;\n                arrayFoldedChildren.add(IR.string(sb.toString()).srcref(elem));\n                sb = new StringBuilder();\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n    }\n\n    if (sb.length() > 0) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(IR.string(sb.toString()).srcref(arrayNode.getLastChild()));\n    }\n\n    // one for each comma.\n    foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);\n\n    if (arrayFoldedChildren.size() == 0) {\n        parent.replaceChild(n, IR.string(\"\").srcref(n));\n    } else if (arrayFoldedChildren.size() == 1) {\n        Node foldedChild = arrayFoldedChildren.get(0);\n        if (IR.string(\"\").getString().equals(foldedChild.getString())) {\n            parent.replaceChild(left, NodeUtil.newArrayNode(t.getCompiler(), new ArrayList<Node>()));\n        } else if (foldedChild.isString()) {\n            if (foldedSize <= InlineCostEstimator.getCost(n) && left.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n                parent.replaceChild(n, foldedChild);\n            }\n        } else {\n            // If the Node is not a string literal, ensure that it is coerced to a string.\n            Node replacement = IR.add(\n                    IR.string(\"\").srcref(left),\n                    foldedChild.cloneTree()).srcref(n);\n            parent.replaceChild(n, replacement);\n        }\n    } else {\n        if (foldedSize <= InlineCostEstimator.getCost(n)) {\n            Node newArrayNode = NodeUtil.newArrayNode(t.getCompiler(), arrayFoldedChildren.toArray(new Node[0]));\n            newArrayNode.putBooleanProp(Node.IS_CONSTANT_NAME, left.getBooleanProp(Node.IS_CONSTANT_NAME));\n            parent.replaceChild(left, newArrayNode);\n\n            Node call = NodeUtil.newCallNode(left.removeFirstChild(), right);\n            parent.replaceChild(n, call);\n        }\n    }\n    t.getCompiler().reportChangeToEnclosingScope(parent);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..b33fc65b 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,95 +1458,78 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n-    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n+    if (!left.isGetProp() || !right.isString()) {\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.matchesName(\"join\")) {\n+        return;\n     }\n \n-    String joinString = NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    String joinString = right.getString();\n+    List<Node> arrayFoldedChildren = new ArrayList<>();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+    for (Node elem : arrayNode.children()) {\n+        if (NodeUtil.isImmutableValue(elem) && elem.isString()) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            sb.append(elem.getString());\n+        } else {\n+            if (sb.length() > 0) {\n+                // + 2 for the quotes.\n+                foldedSize += sb.length() + 2;\n+                arrayFoldedChildren.add(IR.string(sb.toString()).srcref(elem));\n+                sb = new StringBuilder();\n+            }\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(IR.string(sb.toString()).srcref(arrayNode.getLastChild()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n+    // one for each comma.\n+    foldedSize += Math.max(arrayFoldedChildren.size() - 1, 0);\n+\n+    if (arrayFoldedChildren.size() == 0) {\n+        parent.replaceChild(n, IR.string(\"\").srcref(n));\n+    } else if (arrayFoldedChildren.size() == 1) {\n+        Node foldedChild = arrayFoldedChildren.get(0);\n+        if (IR.string(\"\").getString().equals(foldedChild.getString())) {\n+            parent.replaceChild(left, NodeUtil.newArrayNode(t.getCompiler(), new ArrayList<Node>()));\n+        } else if (foldedChild.isString()) {\n+            if (foldedSize <= InlineCostEstimator.getCost(n) && left.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+                parent.replaceChild(n, foldedChild);\n+            }\n+        } else {\n+            // If the Node is not a string literal, ensure that it is coerced to a string.\n+            Node replacement = IR.add(\n+                    IR.string(\"\").srcref(left),\n+                    foldedChild.cloneTree()).srcref(n);\n+            parent.replaceChild(n, replacement);\n         }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+    } else {\n+        if (foldedSize <= InlineCostEstimator.getCost(n)) {\n+            Node newArrayNode = NodeUtil.newArrayNode(t.getCompiler(), arrayFoldedChildren.toArray(new Node[0]));\n+            newArrayNode.putBooleanProp(Node.IS_CONSTANT_NAME, left.getBooleanProp(Node.IS_CONSTANT_NAME));\n+            parent.replaceChild(left, newArrayNode);\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n+            Node call = NodeUtil.newCallNode(left.removeFirstChild(), right);\n+            parent.replaceChild(n, call);\n         }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        break;\n     }\n-    t.getCompiler().reportCodeChange();\n-  }\n+    t.getCompiler().reportChangeToEnclosingScope(parent);\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}