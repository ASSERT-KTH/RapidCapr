{
    "patch": "    Node fnNode = fnScope.getRootNode();\n    Preconditions.checkState(fnNode.isFunction());\n\n    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(fnNode);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(fnNode);\n\n    // Get the number of used args in the function\n    int usedArgsCount = 0;\n    Node currArg = argList.getFirstChild();\n    while (currArg != null) {\n      Var var = fnScope.getVar(currArg.getString());\n      if (referenced.contains(var)) {\n        usedArgsCount++;\n      }\n      currArg = currArg.getNext();\n    }\n\n    if (usedArgsCount == argList.getChildCount()) {\n      // All arguments are used, no need to do anything.\n      return;\n    }\n\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        argList.removeChild(lastArg);\n        lastArg = argList.getLastChild();\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..ce1c6552 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,45 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node fnNode = fnScope.getRootNode();\n+    Preconditions.checkState(fnNode.isFunction());\n+\n+    if (NodeUtil.isGetOrSetKey(fnNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(fnNode);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(fnNode);\n+\n+    // Get the number of used args in the function\n+    int usedArgsCount = 0;\n+    Node currArg = argList.getFirstChild();\n+    while (currArg != null) {\n+      Var var = fnScope.getVar(currArg.getString());\n+      if (referenced.contains(var)) {\n+        usedArgsCount++;\n+      }\n+      currArg = currArg.getNext();\n+    }\n+\n+    if (usedArgsCount == argList.getChildCount()) {\n+      // All arguments are used, no need to do anything.\n+      return;\n+    }\n+\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        argList.removeChild(lastArg);\n+        lastArg = argList.getLastChild();\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable argList is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}