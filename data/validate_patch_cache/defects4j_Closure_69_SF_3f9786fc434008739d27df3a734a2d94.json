{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n\n    if (getJSType(child).restrictByNotNullOrUndefined().equals(getNativeType(JSTypeNative.REGEXP))) {\n      report(t, n, REGEXP_CONSTRUCTOR_BADNESS);\n      return;\n    }\n\n    FunctionType ft = JSType.toMaybeFunctionType(getJSType(child).restrictByNotNullOrUndefined());\n    if (ft != null) {\n      visitFunctionCall(t, n, ft);\n    } else {\n      visitNormalCall(t, n, child.getString());\n    }\n  }\n\n  private void visitFunctionCall(NodeTraversal t, Node n, FunctionType functionType) {\n      String functionName = n.getFirstChild().getString();\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Native functions should not be called directly\n      if (isExtern && functionType.isNativeObjectType() && !NativeJS.Class.CONSTRUCTOR.toString().equals(functionName)) {\n          report(t, n, METHOD_CALL_ON_NATIVE_UNSUPPORTED_TYPE);\n          // Make sure that a type is set for the reference to the function or method.\n          ensureTyped(t, n);\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, functionType.toString());\n      }\n\n      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        if (parent == null || parent.getType() != Token.GETPROP) {\n          report(t, n, FUNCTION_CALL_WITH_BAD_THIS, functionType.toString());\n        }\n      }\n  }\n\n  private void visitNormalCall(NodeTraversal t, Node n, String functionName) {\n      if (REGEXP_CONSTRUCTOR_FUNCTION_NAME.equals(functionName)) {\n          report(t, n, REGEXP_CONSTRUCTOR_BADNESS);\n          return;\n      }\n\n      // TODO: Make sure that the function is defined.\n      ensureTyped(t, n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..b181ffa9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1543,19 +1543,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    */\n   private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n-    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n \n-    if (!childType.canBeCalled()) {\n-      report(t, n, NOT_CALLABLE, childType.toString());\n-      ensureTyped(t, n);\n+    if (getJSType(child).restrictByNotNullOrUndefined().equals(getNativeType(JSTypeNative.REGEXP))) {\n+      report(t, n, REGEXP_CONSTRUCTOR_BADNESS);\n       return;\n     }\n \n-    // A couple of types can be called as if they were functions.\n-    // If it is a function type, then validate parameters.\n-    if (childType instanceof FunctionType) {\n-      FunctionType functionType = (FunctionType) childType;\n+    FunctionType ft = JSType.toMaybeFunctionType(getJSType(child).restrictByNotNullOrUndefined());\n+    if (ft != null) {\n+      visitFunctionCall(t, n, ft);\n+    } else {\n+      visitNormalCall(t, n, child.getString());\n+    }\n+  }\n \n+  private void visitFunctionCall(NodeTraversal t, Node n, FunctionType functionType) {\n+      String functionName = n.getFirstChild().getString();\n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n       if(functionJSDocInfo != null) {\n@@ -1564,6 +1567,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n         isExtern = functionSource.isExtern();\n       }\n \n+      // Native functions should not be called directly\n+      if (isExtern && functionType.isNativeObjectType() && !NativeJS.Class.CONSTRUCTOR.toString().equals(functionName)) {\n+          report(t, n, METHOD_CALL_ON_NATIVE_UNSUPPORTED_TYPE);\n+          // Make sure that a type is set for the reference to the function or method.\n+          ensureTyped(t, n);\n+      }\n+\n       // Non-native constructors should not be called directly\n       // unless they specify a return type and are defined\n       // in an extern.\n@@ -1572,21 +1582,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n           (functionType.getReturnType().isUnknownType() ||\n            functionType.getReturnType().isVoidType() ||\n            !isExtern)) {\n-        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, functionType.toString());\n+      }\n+\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        if (parent == null || parent.getType() != Token.GETPROP) {\n+          report(t, n, FUNCTION_CALL_WITH_BAD_THIS, functionType.toString());\n+        }\n       }\n+  }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+  private void visitNormalCall(NodeTraversal t, Node n, String functionName) {\n+      if (REGEXP_CONSTRUCTOR_FUNCTION_NAME.equals(functionName)) {\n+          report(t, n, REGEXP_CONSTRUCTOR_BADNESS);\n+          return;\n+      }\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n-    } else {\n+      // TODO: Make sure that the function is defined.\n       ensureTyped(t, n);\n-    }\n-\n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}