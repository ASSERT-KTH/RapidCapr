{
    "patch": "    private void init() {\n        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n        nameValues = new ConcurrentHashMap<>();\n        StringBuilder regex = new StringBuilder();\n        List<Strategy> collector = new ArrayList<>();\n        Matcher patternMatcher = formatPattern.matcher(pattern);\n\n        if (!patternMatcher.matches()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        for (int i = 1; i <= patternMatcher.groupCount(); i++) {\n            String fieldName = patternMatcher.group(i);\n            Strategy currentStrategy = getStrategy(fieldName);\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n        }\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..3ff4d005 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -113,40 +113,25 @@ public class FastDateParser implements DateParser, Serializable {\n      * This is called from constructor and from readObject (de-serialization)\n      */\n     private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+        thisYear = Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+        nameValues = new ConcurrentHashMap<>();\n+        StringBuilder regex = new StringBuilder();\n+        List<Strategy> collector = new ArrayList<>();\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n-\n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n+        if (!patternMatcher.matches()) {\n             throw new IllegalArgumentException(\"Invalid pattern\");\n         }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+        for (int i = 1; i <= patternMatcher.groupCount(); i++) {\n+            String fieldName = patternMatcher.group(i);\n+            Strategy currentStrategy = getStrategy(fieldName);\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n     }\n \n     // Accessors",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}