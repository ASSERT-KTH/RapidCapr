{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        int curMonth = -1;\n        int curYear = -1;\n        for (int i = 0; i <= fieldIndex; i++) {\n            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                curMonth = values[i];\n            } else if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n                curYear = values[i];\n            }\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial) && curMonth != -1 && curYear != -1) {\n            int newMonth = ((curMonth - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n            int monthsToAdd = ((curMonth - 1 + valueToAdd) / 12);\n            int newYear = curYear + monthsToAdd;\n            int maxDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(0, newYear), newMonth), 1));\n            int newDay = Math.min(maxDay, values[DateTimeUtils.getChronology(partial).dayOfMonth().getFieldIndex()]);\n            return new int[]{newYear, newMonth, newDay};\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f9651546 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -201,19 +201,26 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n \n     //-----------------------------------------------------------------------\n     public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int curMonth = -1;\n+        int curYear = -1;\n+        for (int i = 0; i <= fieldIndex; i++) {\n+            if (partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                curMonth = values[i];\n+            } else if (partial.getFieldType(i).equals(DateTimeFieldType.year())) {\n+                curYear = values[i];\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        }\n+        // month is largest field and being added to, such as month-day\n+        if (DateTimeUtils.isContiguous(partial) && curMonth != -1 && curYear != -1) {\n+            int newMonth = ((curMonth - 1 + valueToAdd) % 12 + 12) % 12 + 1;\n+            int monthsToAdd = ((curMonth - 1 + valueToAdd) / 12);\n+            int newYear = curYear + monthsToAdd;\n+            int maxDay = iChronology.dayOfMonth().getMaximumValue(iChronology.dayOfMonth().set(iChronology.monthOfYear().set(iChronology.year().set(0, newYear), newMonth), 1));\n+            int newDay = Math.min(maxDay, values[DateTimeUtils.getChronology(partial).dayOfMonth().getFieldIndex()]);\n+            return new int[]{newYear, newMonth, newDay};\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: method getChronology in class DateTimeUtils cannot be applied to given types;",
    "test_result": "ERROR"
}