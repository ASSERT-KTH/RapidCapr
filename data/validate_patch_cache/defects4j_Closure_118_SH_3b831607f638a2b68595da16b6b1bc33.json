{
    "patch": "String name = child.getString();\nNodeUtil.ReactCompatProp reactCompatProp =\n    NodeUtil.getReactCompatPropFromName(name);\nif (reactCompatProp != null) {\n  Node parent = child.getParent();\n  if (parent.isObjectLit() && parent.getParent().isFunction()) {\n    switch (reactCompatProp) {\n      case STATE:\n        if (parent.getParent().isStaticMember()) {\n          // Class properties are not supported in React yet, ignore.\n          break;\n        }\n        NodeUtil.setErrorTree(parent.getParent(),\n            \"State properties should not be declared on the instance itself. \"\n            + \"Instead add a getInitialState method to the class definition which \"\n            + \"returns the state, and initialize state in the constructor if needed. \"\n            + \"More info: https://fb.me/react-internal-state\");\n        break;\n      case PROPS:\n        NodeUtil.setErrorTree(parent.getParent(),\n            \"Props should not be set directly on the instance. \"\n            + \"Instead pass them in the constructor or use default props. \"\n            + \"More info: https://fb.me/react-props-must-be-read-only\");\n        break;\n      case DEFAULT_PROPS:\n        NodeUtil.setErrorTree(parent.getParent(),\n            \"Do not set default props on the instance. \"\n            + \"Instead declare defaultProps as a property on the component itself. \"\n            + \"More info: https://fb.me/react-internal-multiple-components\");\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..f574bfc4 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,41 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+String name = child.getString();\n+NodeUtil.ReactCompatProp reactCompatProp =\n+    NodeUtil.getReactCompatPropFromName(name);\n+if (reactCompatProp != null) {\n+  Node parent = child.getParent();\n+  if (parent.isObjectLit() && parent.getParent().isFunction()) {\n+    switch (reactCompatProp) {\n+      case STATE:\n+        if (parent.getParent().isStaticMember()) {\n+          // Class properties are not supported in React yet, ignore.\n+          break;\n+        }\n+        NodeUtil.setErrorTree(parent.getParent(),\n+            \"State properties should not be declared on the instance itself. \"\n+            + \"Instead add a getInitialState method to the class definition which \"\n+            + \"returns the state, and initialize state in the constructor if needed. \"\n+            + \"More info: https://fb.me/react-internal-state\");\n+        break;\n+      case PROPS:\n+        NodeUtil.setErrorTree(parent.getParent(),\n+            \"Props should not be set directly on the instance. \"\n+            + \"Instead pass them in the constructor or use default props. \"\n+            + \"More info: https://fb.me/react-props-must-be-read-only\");\n+        break;\n+      case DEFAULT_PROPS:\n+        NodeUtil.setErrorTree(parent.getParent(),\n+            \"Do not set default props on the instance. \"\n+            + \"Instead declare defaultProps as a property on the component itself. \"\n+            + \"More info: https://fb.me/react-internal-multiple-components\");\n+        break;\n+      default:\n+        throw new AssertionError();\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}