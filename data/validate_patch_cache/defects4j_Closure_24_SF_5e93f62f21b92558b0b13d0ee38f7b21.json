{
    "patch": "private void findAliases(NodeTraversal t) {\n    Scope scope = t.getScope();\n    Node root = t.getCompiler().getJsRoot();\n\n    for (Node child : root.children()) {\n        if (child.isCall() && child.hasOneChild() && child.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n            Node func = child.getFirstFirstChild();\n\n            if (func != null && func.isFunction()) {\n                Scope funcScope = func.getScope();\n                for (Var v : funcScope.getVarIterable()) {\n                    Node n = v.getNode();\n                    if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                        String name = n.getString();\n                        Var aliasVar = funcScope.getVar(name);\n                        if (aliasVar != null) {\n                            aliases.put(name, aliasVar);\n                            if (aliasVar.getInitialValue() != null) {\n                                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                                transformation.addAlias(name, qualifiedName);\n                            } else {\n                                // scoped variables defined without assignment are not aliases\n                            }\n                        }\n                    } else {\n                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n                    }\n                }\n            } else {\n                report(t, child, GOOG_SCOPE_MUST_BE_FN_SCOPE);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..e00cb9cf 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -269,32 +269,40 @@ class ScopedAliases implements HotSwapCompilerPass {\n       hasErrors = true;\n     }\n \n-    private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+private void findAliases(NodeTraversal t) {\n+    Scope scope = t.getScope();\n+    Node root = t.getCompiler().getJsRoot();\n+\n+    for (Node child : root.children()) {\n+        if (child.isCall() && child.hasOneChild() && child.getFirstChild().matchesQualifiedName(\"goog.scope\")) {\n+            Node func = child.getFirstFirstChild();\n+\n+            if (func != null && func.isFunction()) {\n+                Scope funcScope = func.getScope();\n+                for (Var v : funcScope.getVarIterable()) {\n+                    Node n = v.getNode();\n+                    if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                        String name = n.getString();\n+                        Var aliasVar = funcScope.getVar(name);\n+                        if (aliasVar != null) {\n+                            aliases.put(name, aliasVar);\n+                            if (aliasVar.getInitialValue() != null) {\n+                                String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                                transformation.addAlias(name, qualifiedName);\n+                            } else {\n+                                // scoped variables defined without assignment are not aliases\n+                            }\n+                        }\n+                    } else {\n+                        report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+                    }\n+                }\n+            } else {\n+                report(t, child, GOOG_SCOPE_MUST_BE_FN_SCOPE);\n+            }\n         }\n-      }\n     }\n+}\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {\n       if (preprocessorSymbolTable != null) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}