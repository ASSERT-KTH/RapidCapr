{
    "patch": "public void verify(VerificationData data) {\n    AssertionError error = null;\n\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n            error = handleVerifyException(e);\n        }\n    }\n\n    if (error != null) {\n        if (error.getMessage() != null && error.getMessage().contains(delegate.getClass().getName())) {\n            throw new AssertionError(String.format(\"'%s' has some dependency to JUnit\", delegate.getClass().getName()));\n        } else {\n            // If the original error is a JUnit failure, re-throw it directly\n            if (error instanceof AssertionError && isJUnitFailure(error.getClass())) {\n                throw error;\n            } else {\n                throw new AssertionError(error.getMessage(), error);\n            }\n        }\n    }\n}\n\nprivate boolean isJUnitFailure(Class<?> errorClass) {\n    if (errorClass == AssertionError.class) {\n        return true;\n    } else if (errorClass.getSuperclass() != null) {\n        return isJUnitFailure(errorClass.getSuperclass());\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..73c71d69d 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -72,31 +72,49 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *\n      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n      */\n-    public void verify(VerificationData data) {\n-        AssertionError error = null;\n-\n-        timer.start();\n-        while (timer.isCounting()) {\n-            try {\n-                delegate.verify(data);\n-\n-                if (returnOnSuccess) {\n-                    return;\n-                } else {\n-                    error = null;\n-                }\n-            } catch (MockitoAssertionError e) {\n-                error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n-                error = handleVerifyException(e);\n+public void verify(VerificationData data) {\n+    AssertionError error = null;\n+\n+    timer.start();\n+    while (timer.isCounting()) {\n+        try {\n+            delegate.verify(data);\n+\n+            if (returnOnSuccess) {\n+                return;\n+            } else {\n+                error = null;\n             }\n+        } catch (MockitoAssertionError e) {\n+            error = handleVerifyException(e);\n+        } catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+            error = handleVerifyException(e);\n         }\n+    }\n \n-        if (error != null) {\n-            throw error;\n+    if (error != null) {\n+        if (error.getMessage() != null && error.getMessage().contains(delegate.getClass().getName())) {\n+            throw new AssertionError(String.format(\"'%s' has some dependency to JUnit\", delegate.getClass().getName()));\n+        } else {\n+            // If the original error is a JUnit failure, re-throw it directly\n+            if (error instanceof AssertionError && isJUnitFailure(error.getClass())) {\n+                throw error;\n+            } else {\n+                throw new AssertionError(error.getMessage(), error);\n+            }\n         }\n     }\n+}\n+\n+private boolean isJUnitFailure(Class<?> errorClass) {\n+    if (errorClass == AssertionError.class) {\n+        return true;\n+    } else if (errorClass.getSuperclass() != null) {\n+        return isJUnitFailure(errorClass.getSuperclass());\n+    } else {\n+        return false;\n+    }\n+}\n \n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {",
    "result_reason": "junit.framework.AssertionFailedError: 'org.mockito.internal.verification.VerificationOverTimeImpl' has some dependency to JUnit",
    "test_result": "FAIL"
}