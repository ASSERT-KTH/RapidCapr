{
    "patch": "private Type get(TypeVariable typeParameter) {\n    Type type = contextualActualTypeParameters.get(typeParameter);\n    if (type == null) {\n        Type[] bounds = typeParameter.getBounds();\n        if (bounds.length == 0) {\n            type = Object.class;\n        } else {\n            Type bound = bounds[0];\n            if (bound instanceof TypeVariable) {\n                type = get((TypeVariable) bound);\n            } else {\n                type = bound;\n            }\n        }\n    }\n    return type;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..c95bcf4a0 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,23 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private Type get(TypeVariable typeParameter) {\n+    Type type = contextualActualTypeParameters.get(typeParameter);\n+    if (type == null) {\n+        Type[] bounds = typeParameter.getBounds();\n+        if (bounds.length == 0) {\n+            type = Object.class;\n+        } else {\n+            Type bound = bounds[0];\n+            if (bound instanceof TypeVariable) {\n+                type = get((TypeVariable) bound);\n+            } else {\n+                type = bound;\n+            }\n+        }\n+    }\n+    return type;\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}