{
    "patch": "public boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement)\n    if (n == null) {\n      return false;\n    }\n\n    // TODO(user): We only care about calls to functions that\n    // passes one of the dependent variable to a non-side-effect free\n    // function.\n    if (n.isCall() || n.isNew()) {\n      boolean hasSideEffects;\n      if (n.isCall()) {\n        hasSideEffects = NodeUtil.functionCallHasSideEffects(n);\n      } else {\n        hasSideEffects = NodeUtil.constructorCallHasSideEffects(n);\n      }\n      if (hasSideEffects) {\n        return true;\n      }\n      FunctionType ft = null;\n      if (n.isCall()) {\n        ft = NodeUtil.getFunctionType(n.getFirstChild());\n      } else {\n        ft = n.getJSType().toMaybeFunctionType();\n      }\n      if (ft != null) {\n        for (int i = 0; i < ft.getParameterCount(); i++) {\n          JSType paramType = ft.getParameterType(i);\n          if (paramType.isSubtype(dependentVarType)) {\n            if (hasNoSideEffectOnParam(ft, i)) {\n              continue;\n            }\n            return true;\n          }\n        }\n      }\n    }\n\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..c4288ff4 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,52 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n-        }\n-\n+public boolean apply(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement)\n+    if (n == null) {\n+      return false;\n+    }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    // TODO(user): We only care about calls to functions that\n+    // passes one of the dependent variable to a non-side-effect free\n+    // function.\n+    if (n.isCall() || n.isNew()) {\n+      boolean hasSideEffects;\n+      if (n.isCall()) {\n+        hasSideEffects = NodeUtil.functionCallHasSideEffects(n);\n+      } else {\n+        hasSideEffects = NodeUtil.constructorCallHasSideEffects(n);\n+      }\n+      if (hasSideEffects) {\n+        return true;\n+      }\n+      FunctionType ft = null;\n+      if (n.isCall()) {\n+        ft = NodeUtil.getFunctionType(n.getFirstChild());\n+      } else {\n+        ft = n.getJSType().toMaybeFunctionType();\n+      }\n+      if (ft != null) {\n+        for (int i = 0; i < ft.getParameterCount(); i++) {\n+          JSType paramType = ft.getParameterType(i);\n+          if (paramType.isSubtype(dependentVarType)) {\n+            if (hasNoSideEffectOnParam(ft, i)) {\n+              continue;\n+            }\n             return true;\n           }\n         }\n-        return false;\n       }\n+    }\n+\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}