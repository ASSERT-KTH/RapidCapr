{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max,\n                    final double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n    double yInitial = f.value(initial);\n\n    // check if any of the endpoints is a root\n    if (Math.abs(yMin) <= functionValueAccuracy) {\n        setResult(min, 0);\n        return result;\n    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n        setResult(max, 0);\n        return result;\n    }\n\n    // check if initial guess is a root\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // check if min and max bracket the root\n    if (yMin * yMax > 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x = initial;\n    double f1 = yInitial;\n    double f2 = yInitial;\n    double fMin = yMin;\n    double fMax = yMax;\n    double tmp1, s, q, c, d;\n    double eps = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);\n\n    for (int i = 0; i < maximalIterationCount; ++i) {\n        // calculate the bisecting value and check for convergence\n        double oldX = x;\n        x = 0.5 * (min + max);\n        double f3 = f.value(x);\n        double dx = x - oldX;\n        if (Math.abs(f3) <= functionValueAccuracy || Math.abs(dx) <= eps) {\n            setResult(x, i);\n            return result;\n        }\n\n        // choose which to use as the trial value\n        if (f1 != f3 && f2 != f3) {\n            // Inverse quadratic interpolation\n            double numerator = f1 * (Math.pow(x - f2, 2)) + f2 * (Math.pow(x - f1, 2))\n                    + f3 * (Math.pow(f1 - f2, 2));\n            double denominator = (f1 - f2) * (f1 - f3) * (f2 - f3);\n            s = numerator / denominator;\n      ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..d7c808924 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,64 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n+public double solve(final UnivariateRealFunction f, final double min, final double max,\n+                    final double initial) throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    // check if any of the endpoints is a root\n+    if (Math.abs(yMin) <= functionValueAccuracy) {\n+        setResult(min, 0);\n+        return result;\n+    } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // check if initial guess is a root\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n+    // check if min and max bracket the root\n+    if (yMin * yMax > 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    double x = initial;\n+    double f1 = yInitial;\n+    double f2 = yInitial;\n+    double fMin = yMin;\n+    double fMax = yMax;\n+    double tmp1, s, q, c, d;\n+    double eps = Math.max(relativeAccuracy * Math.abs(x), absoluteAccuracy);\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    for (int i = 0; i < maximalIterationCount; ++i) {\n+        // calculate the bisecting value and check for convergence\n+        double oldX = x;\n+        x = 0.5 * (min + max);\n+        double f3 = f.value(x);\n+        double dx = x - oldX;\n+        if (Math.abs(f3) <= functionValueAccuracy || Math.abs(dx) <= eps) {\n+            setResult(x, i);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n-\n-    }\n+        // choose which to use as the trial value\n+        if (f1 != f3 && f2 != f3) {\n+            // Inverse quadratic interpolation\n+            double numerator = f1 * (Math.pow(x - f2, 2)) + f2 * (Math.pow(x - f1, 2))\n+                    + f3 * (Math.pow(f1 - f2, 2));\n+            double denominator = (f1 - f2) * (f1 - f3) * (f2 - f3);\n+            s = numerator / denominator;\n+      \n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}