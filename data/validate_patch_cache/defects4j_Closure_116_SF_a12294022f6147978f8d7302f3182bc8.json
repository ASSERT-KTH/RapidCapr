{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = fnNode.getLastChild();\n\n  // Resolve arguments\n  List<Node> args = new ArrayList<>();\n  // Skip the function name\n  Node argNode = callNode.getFirstChild().getNext();\n  while (argNode != null) {\n    args.add(argNode);\n    argNode = argNode.getNext();\n  }\n\n  // Resolve parameters\n  List<String> params = new ArrayList<>();\n  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n  while (paramNode != null) {\n    String identifier = paramNode.getString();\n    params.add(identifier);\n    paramNode = paramNode.getNext();\n  }\n\n  // Functions called via 'call' and 'apply' have a this-object as\n  // the first parameter, but this is not part of the called function's\n  // parameter list.\n  if (!callNode.getFirstChild().isName()\n      && NodeUtil.isFunctionObjectCall(callNode)) {\n    args.remove(0);\n  }\n\n  // Check that the number of arguments matches the number of parameters\n  if (args.size() != params.size()) {\n    return CanInlineResult.NO;\n  }\n\n  boolean mayHaveSideEffects = false;\n\n  for (int i = 0; i < args.size(); i++) {\n    Node arg = args.get(i);\n    String param = params.get(i);\n    Node paramNodeInBlock = NodeUtil.getMatchingChildForName(block, param);\n\n    if (NodeUtil.mayEffectMutableState(arg, compiler)\n        && NodeUtil.getNameReferenceCount(block, param) > 1) {\n      return CanInlineResult.NO;\n    }\n\n    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n      mayHaveSideEffects = true;\n    }\n\n    // If there's an explicit parameter reference in the block\n    if (paramNodeInBlock != null) {\n      if (arg.getLastChild().isObjectLit()) {\n        // Do not inline object literals\n        return CanInlineResult.NO;\n      }\n      if (arg.getLastChild().isFunction()) {\n        // Do not inline function literals\n        return CanInlineResult.NO;\n      }\n    }\n  }\n\n  return mayHaveSideEffects ? CanInlineResult.MAYBE : CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..b404ad11 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,76 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = fnNode.getLastChild();\n \n+  // Resolve arguments\n+  List<Node> args = new ArrayList<>();\n+  // Skip the function name\n+  Node argNode = callNode.getFirstChild().getNext();\n+  while (argNode != null) {\n+    args.add(argNode);\n+    argNode = argNode.getNext();\n+  }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+  // Resolve parameters\n+  List<String> params = new ArrayList<>();\n+  Node paramNode = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n+  while (paramNode != null) {\n+    String identifier = paramNode.getString();\n+    params.add(identifier);\n+    paramNode = paramNode.getNext();\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+  // Functions called via 'call' and 'apply' have a this-object as\n+  // the first parameter, but this is not part of the called function's\n+  // parameter list.\n+  if (!callNode.getFirstChild().isName()\n+      && NodeUtil.isFunctionObjectCall(callNode)) {\n+    args.remove(0);\n+  }\n+\n+  // Check that the number of arguments matches the number of parameters\n+  if (args.size() != params.size()) {\n+    return CanInlineResult.NO;\n+  }\n+\n+  boolean mayHaveSideEffects = false;\n+\n+  for (int i = 0; i < args.size(); i++) {\n+    Node arg = args.get(i);\n+    String param = params.get(i);\n+    Node paramNodeInBlock = NodeUtil.getMatchingChildForName(block, param);\n+\n+    if (NodeUtil.mayEffectMutableState(arg, compiler)\n+        && NodeUtil.getNameReferenceCount(block, param) > 1) {\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+      mayHaveSideEffects = true;\n+    }\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+    // If there's an explicit parameter reference in the block\n+    if (paramNodeInBlock != null) {\n+      if (arg.getLastChild().isObjectLit()) {\n+        // Do not inline object literals\n+        return CanInlineResult.NO;\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+      if (arg.getLastChild().isFunction()) {\n+        // Do not inline function literals\n+        return CanInlineResult.NO;\n       }\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  return mayHaveSideEffects ? CanInlineResult.MAYBE : CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}