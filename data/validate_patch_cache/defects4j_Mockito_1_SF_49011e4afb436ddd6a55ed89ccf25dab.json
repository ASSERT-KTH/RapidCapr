{
    "patch": "public void captureArgumentsFrom(Invocation invocation) {\n    Object[] rawArguments = invocation.getRawArguments();\n    for (int position = 0; position < matchers.size(); position++) {\n        Matcher matcher = matchers.get(position);\n        if (matcher instanceof CapturesArguments) {\n            if (position >= rawArguments.length) {\n                ((CapturesArguments) matcher).captureFrom(null);\n            } else if (invocation.getMethod().isVarArgs() && position == invocation.getMethod().getParameterCount() - 1 && matcher instanceof VarargMatcher) {\n                Object array = rawArguments[position];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    ((CapturesArguments) matcher).captureFrom(Array.get(array, i));\n                }\n                return;\n            } else {\n                ((CapturesArguments) matcher).captureFrom(rawArguments[position]);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..e30cd86e1 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -117,37 +117,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n         return invocation.getLocation();\n     }\n \n-    public void captureArgumentsFrom(Invocation invocation) {\n-        if (invocation.getMethod().isVarArgs()) {\n-            int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n-\n-        } else {\n-            for (int position = 0; position < matchers.size(); position++) {\n-                Matcher m = matchers.get(position);\n-                if (m instanceof CapturesArguments) {\n-                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+public void captureArgumentsFrom(Invocation invocation) {\n+    Object[] rawArguments = invocation.getRawArguments();\n+    for (int position = 0; position < matchers.size(); position++) {\n+        Matcher matcher = matchers.get(position);\n+        if (matcher instanceof CapturesArguments) {\n+            if (position >= rawArguments.length) {\n+                ((CapturesArguments) matcher).captureFrom(null);\n+            } else if (invocation.getMethod().isVarArgs() && position == invocation.getMethod().getParameterCount() - 1 && matcher instanceof VarargMatcher) {\n+                Object array = rawArguments[position];\n+                for (int i = 0; i < Array.getLength(array); i++) {\n+                    ((CapturesArguments) matcher).captureFrom(Array.get(array, i));\n                 }\n+                return;\n+            } else {\n+                ((CapturesArguments) matcher).captureFrom(rawArguments[position]);\n             }\n         }\n-\n-//        for (int position = 0; position < matchers.size(); position++) {\n-//            Matcher m = matchers.get(position);\n-//            if (m instanceof CapturesArguments && invocation.getRawArguments().length > position) {\n-//                //TODO SF - this whole lot can be moved captureFrom implementation\n-//                if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n-//                    Object array = invocation.getRawArguments()[position];\n-//                    for (int i = 0; i < Array.getLength(array); i++) {\n-//                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n-//                    }\n-//                    //since we've captured all varargs already, it does not make sense to process other matchers.\n-//                    return;\n-//                } else {\n-//                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[position]);\n-//                }\n-//            }\n-//        }\n     }\n+}\n \n     private boolean isVarargMatcher(Matcher matcher) {\n         Matcher actualMatcher = matcher;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}