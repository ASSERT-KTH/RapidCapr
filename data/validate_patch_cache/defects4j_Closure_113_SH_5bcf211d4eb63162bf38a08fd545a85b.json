{
    "patch": "  if (provided == null || !provided.isExplicitlyProvided() || provided.explicitModule == null) {\n    unrecognizedRequires.add(\n        new UnrecognizedRequire(n, ns, t.getSourceName()));\n  } else {\n    JSModule providedModule = provided.explicitModule;\n    JSModule currentModule = t.getModule();\n\n    if (moduleGraph != null && providedModule != currentModule &&\n        !moduleGraph.dependsOn(currentModule, providedModule)) {\n      compiler.report(\n          t.makeError(n,\n              XMODULE_REQUIRE_ERROR, ns,\n              providedModule.getName(),\n              currentModule.getName()));\n    }\n  }\n\n  maybeAddToSymbolTable(left);\n  maybeAddStringNodeToSymbolTable(arg);\n  parent.detachFromParent();\n  compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..71bcad55 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,27 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+  if (provided == null || !provided.isExplicitlyProvided() || provided.explicitModule == null) {\n+    unrecognizedRequires.add(\n+        new UnrecognizedRequire(n, ns, t.getSourceName()));\n+  } else {\n+    JSModule providedModule = provided.explicitModule;\n+    JSModule currentModule = t.getModule();\n+\n+    if (moduleGraph != null && providedModule != currentModule &&\n+        !moduleGraph.dependsOn(currentModule, providedModule)) {\n+      compiler.report(\n+          t.makeError(n,\n+              XMODULE_REQUIRE_ERROR, ns,\n+              providedModule.getName(),\n+              currentModule.getName()));\n+    }\n+  }\n+\n+  maybeAddToSymbolTable(left);\n+  maybeAddStringNodeToSymbolTable(arg);\n+  parent.detachFromParent();\n+  compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}