{
    "patch": "Node followNode;\nif (cfa != null) {\n  for (Node fNode : cfa.finallyMap.get(parent)) {\n    followNode = computeFollowNode(fromNode, fNode, cfa);\n    if (followNode != null) {\n      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n    }\n  }\n}\nreturn computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..4dfe8d17 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+Node followNode;\n+if (cfa != null) {\n+  for (Node fNode : cfa.finallyMap.get(parent)) {\n+    followNode = computeFollowNode(fromNode, fNode, cfa);\n+    if (followNode != null) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, followNode);\n+    }\n+  }\n+}\n+return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}