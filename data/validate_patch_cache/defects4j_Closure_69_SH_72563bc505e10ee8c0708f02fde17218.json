{
    "patch": "      if (functionType.getTypeOfThis() != null) {\n        Node parent = n.getParent();\n        boolean whileLoop = false;\n        while (parent != null && (parent.isCast() || parent.isFunction() || parent.isTypeOf() || parent.isParen() || parent.isVoid())) {\n          if (parent.isWhile()) {\n            whileLoop = true;\n          }\n          parent = parent.getParent();\n        }\n        if (!(parent != null && (parent.isGetProp() || parent.isGetElem()) || whileLoop)) {\n          report(t, n, TYPE_INVALID_THIS, childType.toString());\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..1fa3a812 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,19 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        Node parent = n.getParent();\n+        boolean whileLoop = false;\n+        while (parent != null && (parent.isCast() || parent.isFunction() || parent.isTypeOf() || parent.isParen() || parent.isVoid())) {\n+          if (parent.isWhile()) {\n+            whileLoop = true;\n+          }\n+          parent = parent.getParent();\n+        }\n+        if (!(parent != null && (parent.isGetProp() || parent.isGetElem()) || whileLoop)) {\n+          report(t, n, TYPE_INVALID_THIS, childType.toString());\n+        }\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}