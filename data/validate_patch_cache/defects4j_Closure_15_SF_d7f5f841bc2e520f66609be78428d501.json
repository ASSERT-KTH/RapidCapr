{
    "patch": "public boolean apply(Node n) {\n    // When the node is null it means, we reached the implicit return\n    // where the function returns (possibly without an return statement).\n    if (n == null) {\n        return false;\n    }\n\n    // Check for calls to the \"noSideEffects\" function.\n    if (n.isCall()) {\n        Node callee = n.getFirstChild();\n        if (callee.isQualifiedName() &&\n            callee.getLastChild().getString().equals(\"noSideEffects\")) {\n            return true;\n        }\n    }\n\n    // Check for calls to functions that have side effects.\n    if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n)) ||\n        (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))) {\n        return true;\n    }\n\n    // Recurse on child nodes.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n            return true;\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..8876a10c 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,37 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n+public boolean apply(Node n) {\n+    // When the node is null it means, we reached the implicit return\n+    // where the function returns (possibly without an return statement).\n+    if (n == null) {\n+        return false;\n+    }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+    // Check for calls to the \"noSideEffects\" function.\n+    if (n.isCall()) {\n+        Node callee = n.getFirstChild();\n+        if (callee.isQualifiedName() &&\n+            callee.getLastChild().getString().equals(\"noSideEffects\")) {\n+            return true;\n         }\n+    }\n \n+    // Check for calls to functions that have side effects.\n+    if ((n.isCall() && NodeUtil.functionCallHasSideEffects(n)) ||\n+        (n.isNew() && NodeUtil.constructorCallHasSideEffects(n))) {\n+        return true;\n+    }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+    // Recurse on child nodes.\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(child) && apply(child)) {\n             return true;\n-          }\n         }\n-        return false;\n-      }\n+    }\n+\n+    return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}