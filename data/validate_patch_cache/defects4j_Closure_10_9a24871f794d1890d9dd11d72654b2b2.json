{
    "patch": "      List<Node> results = new ArrayList<Node>();\n      n.accept(new NodeVisitor() {\n        @Override\n        public boolean visit(Node node) {\n          if (mayBeStringHelper(node)) {\n            results.add(node);\n          }\n          return true;\n        }\n      });\n      return results.stream().distinct().count() > 0;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..3f50d4d7 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,10 +1411,19 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      List<Node> results = new ArrayList<Node>();\n+      n.accept(new NodeVisitor() {\n+        @Override\n+        public boolean visit(Node node) {\n+          if (mayBeStringHelper(node)) {\n+            results.add(node);\n+          }\n+          return true;\n+        }\n+      });\n+      return results.stream().distinct().count() > 0;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}