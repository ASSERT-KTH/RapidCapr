{
    "patch": "case REGULA_FALSI:\n    if (Precision.equals(f0, f1)) {\n        throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n                getMaximalIterationCount(), getAbsoluteAccuracy(), getRelativeAccuracy());\n    } else {\n        x = (x1 * f0 - x0 * f1) / (f0 - f1);\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..ea27994bd 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,14 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    if (Precision.equals(f0, f1)) {\n+        throw new ConvergenceException(LocalizedFormats.FAILED_BRACKETING,\n+                getMaximalIterationCount(), getAbsoluteAccuracy(), getRelativeAccuracy());\n+    } else {\n+        x = (x1 * f0 - x0 * f1) / (f0 - f1);\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}