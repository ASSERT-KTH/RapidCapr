{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DateTimeField monthField = null; \n            DateTimeField dayField = null;\n            for(int i = 0;i<count;i++){\n                DateTimeField field = savedFields[i].iField;\n                if(field.getType() == DateTimeFieldType.monthOfYear()){\n                    monthField = field;\n                    break;\n                }\n                if(field.getType() == DateTimeFieldType.dayOfMonth()){\n                    dayField = field;\n                    break;\n                }\n            }\n            if (compareReverse(monthField,DurationFieldType.months().getField(iChrono)) >= 0 && compareReverse(dayField,DurationFieldType.days().getField(iChrono)) <= 0) {\n                // Save year value based on current date/time\n                int year = iDefaultYear;\n                if (resetFields) {\n                    long millis = System.currentTimeMillis();\n                    millis += iZone.getOffset(millis);\n                    year = iChrono.year().get(millis);\n                }\n                saveField(DateTimeFieldType.year(), year);\n                return computeMillis(resetFields, text);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n\n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n\n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..48c7c944 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,7 +328,7 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n+public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n         if (iSavedFieldsShared) {\n@@ -338,11 +338,28 @@ public class DateTimeParserBucket {\n         sort(savedFields, count);\n         if (count > 0) {\n             // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n+            DateTimeField monthField = null; \n+            DateTimeField dayField = null;\n+            for(int i = 0;i<count;i++){\n+                DateTimeField field = savedFields[i].iField;\n+                if(field.getType() == DateTimeFieldType.monthOfYear()){\n+                    monthField = field;\n+                    break;\n+                }\n+                if(field.getType() == DateTimeFieldType.dayOfMonth()){\n+                    dayField = field;\n+                    break;\n+                }\n+            }\n+            if (compareReverse(monthField,DurationFieldType.months().getField(iChrono)) >= 0 && compareReverse(dayField,DurationFieldType.days().getField(iChrono)) <= 0) {\n+                // Save year value based on current date/time\n+                int year = iDefaultYear;\n+                if (resetFields) {\n+                    long millis = System.currentTimeMillis();\n+                    millis += iZone.getOffset(millis);\n+                    year = iChrono.year().get(millis);\n+                }\n+                saveField(DateTimeFieldType.year(), year);\n                 return computeMillis(resetFields, text);\n             }\n         }\n@@ -358,7 +375,7 @@ public class DateTimeParserBucket {\n             }\n             throw e;\n         }\n-        \n+\n         if (iZone == null) {\n             millis -= iOffset;\n         } else {\n@@ -366,14 +383,14 @@ public class DateTimeParserBucket {\n             millis -= offset;\n             if (offset != iZone.getOffset(millis)) {\n                 String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                        \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n         }\n-        \n+\n         return millis;\n     }\n     ",
    "result_reason": "error: method compareReverse in class DateTimeParserBucket cannot be applied to given types;",
    "test_result": "ERROR"
}