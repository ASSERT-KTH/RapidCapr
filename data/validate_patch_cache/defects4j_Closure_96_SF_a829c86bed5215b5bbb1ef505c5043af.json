{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = functionType.hasRestFormals();\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      if (parameters.hasNext()) {\n          parameter = parameters.next();\n          ordinal++;\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, ordinal);\n      } else if (hasVarArgs) {\n          validateVarArgsArguments(t, argument, functionType.getRestFormalsType(), call);\n      } else {\n          String expectedMessage = \"expected at most \" + ordinal + \" argument(s)\";\n          if (functionType.getMinArguments() > 0) {\n            expectedMessage = \"expected at least \" + functionType.getMinArguments() + \" argument(s), \" + expectedMessage;\n          }\n          report(t, argument, WRONG_ARGUMENT_COUNT,\n                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n                  expectedMessage,\n                  \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\", \"\");\n       }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if ((hasVarArgs && numArgs < minArgs - 1) || (!hasVarArgs && (minArgs > numArgs || maxArgs < numArgs))) {\n      String expectedMessage = \"expected at most \" + maxArgs + \" argument(s)\";\n      if (minArgs > 0) {\n        expectedMessage = \"expected at least \" + minArgs + \" argument(s), \" + expectedMessage;\n      }\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              \"has \" + numArgs + \" argument(s)\", expectedMessage, \"\");\n    }\n  }\n\n  private void validateVarArgsArguments(NodeTraversal t, Node restNode, JSType restType, Node callNode) {\n    Preconditions.checkNotNull(restType);\n    NodeUtil.getFunctionParametersSkipArrowFunctions(restNode);\n    int ordinal = 0;\n    for (Node restChild : restNode.children()) {\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, restChild,\n            getJSType(restChild), restType, callNode, ordinal);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..2786a80f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,27 +1405,50 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean hasVarArgs = functionType.hasRestFormals();\n+    while (arguments.hasNext()) {\n       argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      if (parameters.hasNext()) {\n+          parameter = parameters.next();\n+          ordinal++;\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else if (hasVarArgs) {\n+          validateVarArgsArguments(t, argument, functionType.getRestFormalsType(), call);\n+      } else {\n+          String expectedMessage = \"expected at most \" + ordinal + \" argument(s)\";\n+          if (functionType.getMinArguments() > 0) {\n+            expectedMessage = \"expected at least \" + functionType.getMinArguments() + \" argument(s), \" + expectedMessage;\n+          }\n+          report(t, argument, WRONG_ARGUMENT_COUNT,\n+                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                  expectedMessage,\n+                  \"and no more than \" + functionType.getMaxArguments() + \" argument(s)\", \"\");\n+       }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if ((hasVarArgs && numArgs < minArgs - 1) || (!hasVarArgs && (minArgs > numArgs || maxArgs < numArgs))) {\n+      String expectedMessage = \"expected at most \" + maxArgs + \" argument(s)\";\n+      if (minArgs > 0) {\n+        expectedMessage = \"expected at least \" + minArgs + \" argument(s), \" + expectedMessage;\n+      }\n       report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              \"has \" + numArgs + \" argument(s)\", expectedMessage, \"\");\n+    }\n+  }\n+\n+  private void validateVarArgsArguments(NodeTraversal t, Node restNode, JSType restType, Node callNode) {\n+    Preconditions.checkNotNull(restType);\n+    NodeUtil.getFunctionParametersSkipArrowFunctions(restNode);\n+    int ordinal = 0;\n+    for (Node restChild : restNode.children()) {\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, restChild,\n+            getJSType(restChild), restType, callNode, ordinal);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}