{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (n.isString()) {\n      return true;\n    }\n    if (n.isTemplateLiteral()) {\n      return true;\n    }\n    if (n.getToken() == Token.ADD) {\n      return mayBeString(n.getFirstChild(), recurse) || mayBeString(n.getLastChild(), recurse);\n    }\n    if (n.isTemplateLitSub()) {\n      return mayBeString(n.getFirstChild(), recurse);\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..cafcdee3 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,13 +1411,20 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n+    if (n.isString()) {\n+      return true;\n     }\n+    if (n.isTemplateLiteral()) {\n+      return true;\n+    }\n+    if (n.getToken() == Token.ADD) {\n+      return mayBeString(n.getFirstChild(), recurse) || mayBeString(n.getLastChild(), recurse);\n+    }\n+    if (n.isTemplateLitSub()) {\n+      return mayBeString(n.getFirstChild(), recurse);\n+    }\n+    return false;\n   }\n \n   static boolean mayBeStringHelper(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}