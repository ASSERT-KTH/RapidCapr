{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    if (x == null) {\n        return new double[0];\n    }\n    double[] repaired = new double[x.length];\n    for (int i = 0; i < x.length; i++) {\n        if (Double.isNaN(x[i]) || Double.isInfinite(x[i])) {\n            repaired[i] = 0.0; // replace NaN or infinite values with 0.0\n        } else {\n            repaired[i] = x[i];\n        }\n    }\n    return decode(repaired);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..a96aed0bd 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,20 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    if (x == null) {\n+        return new double[0];\n+    }\n+    double[] repaired = new double[x.length];\n+    for (int i = 0; i < x.length; i++) {\n+        if (Double.isNaN(x[i]) || Double.isInfinite(x[i])) {\n+            repaired[i] = 0.0; // replace NaN or infinite values with 0.0\n+        } else {\n+            repaired[i] = x[i];\n         }\n+    }\n+    return decode(repaired);\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: Out of bounds (0.5847655297257006 > 0.5)",
    "test_result": "FAIL"
}