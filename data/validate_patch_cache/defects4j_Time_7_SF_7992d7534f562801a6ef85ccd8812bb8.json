{
    "patch": "import org.joda.time.DateTimeZone;\nimport org.joda.time.ReadWritableInstant;\nimport org.joda.time.chrono.Chronology;\nimport org.joda.time.chrono.ISOChronology;\nimport org.joda.time.chrono.ZonedChronology;\nimport org.joda.time.format.DateTimeParser;\nimport org.joda.time.format.DateTimeParserBucket;\nimport org.joda.time.format.DateTimeParserRef;\nimport org.joda.time.format.InternalParser;\nimport org.joda.time.zone.ZoneOffsetInfo;\nimport org.joda.time.zone.ZoneOffsetTransition;\nimport org.joda.time.zone.ZoneOffsetTransitionList;\nimport org.joda.time.zone.ZoneRules;\nimport org.joda.time.zone.ZoneRulesProvider;\nimport org.joda.time.zone.ZoneUpdater;\n\npublic int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    ZoneOffsetInfo instantInfo = chrono.getZone().getOffsetInfo(instantMillis);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis + instantInfo.getStandardOffset(), chrono, iLocale, iPivotYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    if (newPos < 0) {\n        instant.setMillis(instantMillis);\n        return newPos;\n    }\n\n    // Determine date fields\n    chrono = selectChronology(bucket.getChronology());\n    long newInstantMillis = bucket.computeMillis(true, text) - instantInfo.getStandardOffset();\n\n    // Determine new offset\n    ZoneOffsetInfo newInfo = chrono.getZone().getOffsetInfo(newInstantMillis);\n    if (!instantInfo.isTransition() && newInfo.isTransition()) {\n        // Gap between offsets\n        ZoneOffsetTransition transition = newInfo.getTransition();\n        if (instantMillis > transition.getMillis()) {\n            // Move to new offset occurring after the old one\n            int nextOffset = newInfo.getStandardOffset();\n            int prevOffset = instantInfo.getOffsetAfter();\n            newInstantMillis += nextOffset - prevOffset;\n        }\n    } else if (instantInfo.isTransition() && !newInfo.isTransition()) {\n        // Overlap between offsets\n        ZoneOffsetTransition transition = instantInfo.getTransition();\n        if (newInstantMillis < transition.getMillis() + transition.getDuration()) {\n            // Move to new offset occurring before the old one\n            int nextOffset = instantInfo.getStandardOffset();\n            int prevOffset = newInfo.getOffsetBefore();\n            newInstantMillis += nextOffset - prevOffset;\n        }\n    } else if (newInfo.getStandardOffset() != instantInfo.getStandardOffset()) {\n        // Standard offset change\n        int nextOffset = newInfo.getStandardOffset();\n        int prevOffset = instantInfo.getStandardOffset();\n        newInstantMillis += nextOffset - prevOffset;\n    }\n\n    instant.setMillis(newInstantMillis);\n    instant.setChronology(chrono);\n\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d7704118 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,36 +697,81 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadWritableInstant;\n+import org.joda.time.chrono.Chronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.ZonedChronology;\n+import org.joda.time.format.DateTimeParser;\n+import org.joda.time.format.DateTimeParserBucket;\n+import org.joda.time.format.DateTimeParserRef;\n+import org.joda.time.format.InternalParser;\n+import org.joda.time.zone.ZoneOffsetInfo;\n+import org.joda.time.zone.ZoneOffsetTransition;\n+import org.joda.time.zone.ZoneOffsetTransitionList;\n+import org.joda.time.zone.ZoneRules;\n+import org.joda.time.zone.ZoneRulesProvider;\n+import org.joda.time.zone.ZoneUpdater;\n+\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    ZoneOffsetInfo instantInfo = chrono.getZone().getOffsetInfo(instantMillis);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            instantMillis + instantInfo.getStandardOffset(), chrono, iLocale, iPivotYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    if (newPos < 0) {\n+        instant.setMillis(instantMillis);\n+        return newPos;\n+    }\n+\n+    // Determine date fields\n+    chrono = selectChronology(bucket.getChronology());\n+    long newInstantMillis = bucket.computeMillis(true, text) - instantInfo.getStandardOffset();\n+\n+    // Determine new offset\n+    ZoneOffsetInfo newInfo = chrono.getZone().getOffsetInfo(newInstantMillis);\n+    if (!instantInfo.isTransition() && newInfo.isTransition()) {\n+        // Gap between offsets\n+        ZoneOffsetTransition transition = newInfo.getTransition();\n+        if (instantMillis > transition.getMillis()) {\n+            // Move to new offset occurring after the old one\n+            int nextOffset = newInfo.getStandardOffset();\n+            int prevOffset = instantInfo.getOffsetAfter();\n+            newInstantMillis += nextOffset - prevOffset;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+    } else if (instantInfo.isTransition() && !newInfo.isTransition()) {\n+        // Overlap between offsets\n+        ZoneOffsetTransition transition = instantInfo.getTransition();\n+        if (newInstantMillis < transition.getMillis() + transition.getDuration()) {\n+            // Move to new offset occurring before the old one\n+            int nextOffset = instantInfo.getStandardOffset();\n+            int prevOffset = newInfo.getOffsetBefore();\n+            newInstantMillis += nextOffset - prevOffset;\n         }\n-        return newPos;\n+    } else if (newInfo.getStandardOffset() != instantInfo.getStandardOffset()) {\n+        // Standard offset change\n+        int nextOffset = newInfo.getStandardOffset();\n+        int prevOffset = instantInfo.getStandardOffset();\n+        newInstantMillis += nextOffset - prevOffset;\n+    }\n+\n+    instant.setMillis(newInstantMillis);\n+    instant.setChronology(chrono);\n+\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n     }\n \n+    return newPos;\n+}\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}