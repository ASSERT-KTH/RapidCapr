{
    "patch": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n    final int length = searchStr.length();\n    if (length == 0) {\n        return true;\n    }\n    final char firstChar = searchStr.charAt(0);\n    final int strLength = str.length() - length + 1;\n    for (int i = 0; i < strLength; i++) {\n        if (str.charAt(i) == firstChar\n                && regionMatches(str, true, i, searchStr, 0, length)) {\n            return true;\n        } else if (Character.toLowerCase(str.charAt(i)) == Character.toLowerCase(firstChar)\n                && regionMatches(str, true, i, searchStr, 0, length)) {\n            return true;\n        } else if (Character.toUpperCase(firstChar) == 'S' && firstChar != 's' && str.charAt(i) == 's'\n                && regionMatches(str, true, i, \"ss\", 0, length)) {\n            return true;\n        } else if (Character.toUpperCase(firstChar) == 'S' && firstChar != 's' && str.charAt(i) == '\u00df'\n                && regionMatches(str, true, i, \"ss\", 0, length)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nprivate static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart,\n        CharSequence substring, int start, int length) {\n    if (cs instanceof String && substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    } else {\n        int index1 = thisStart;\n        int index2 = start;\n        int tmpLength = length;\n\n        while (tmpLength-- > 0) {\n            char c1 = cs.charAt(index1++);\n            char c2 = substring.charAt(index2++);\n            if (c1 == c2) {\n                continue;\n            }\n            if (!ignoreCase) {\n                return false;\n            }\n            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)\n                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 72b4a491..1d537102 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1045,7 +1045,61 @@ public class StringUtils {\n         if (str == null || searchStr == null) {\n             return false;\n         }\n-        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+public static boolean containsIgnoreCase(String str, String searchStr) {\n+    if (str == null || searchStr == null) {\n+        return false;\n+    }\n+    final int length = searchStr.length();\n+    if (length == 0) {\n+        return true;\n+    }\n+    final char firstChar = searchStr.charAt(0);\n+    final int strLength = str.length() - length + 1;\n+    for (int i = 0; i < strLength; i++) {\n+        if (str.charAt(i) == firstChar\n+                && regionMatches(str, true, i, searchStr, 0, length)) {\n+            return true;\n+        } else if (Character.toLowerCase(str.charAt(i)) == Character.toLowerCase(firstChar)\n+                && regionMatches(str, true, i, searchStr, 0, length)) {\n+            return true;\n+        } else if (Character.toUpperCase(firstChar) == 'S' && firstChar != 's' && str.charAt(i) == 's'\n+                && regionMatches(str, true, i, \"ss\", 0, length)) {\n+            return true;\n+        } else if (Character.toUpperCase(firstChar) == 'S' && firstChar != 's' && str.charAt(i) == '\u00df'\n+                && regionMatches(str, true, i, \"ss\", 0, length)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+private static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart,\n+        CharSequence substring, int start, int length) {\n+    if (cs instanceof String && substring instanceof String) {\n+        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+    } else {\n+        int index1 = thisStart;\n+        int index2 = start;\n+        int tmpLength = length;\n+\n+        while (tmpLength-- > 0) {\n+            char c1 = cs.charAt(index1++);\n+            char c2 = substring.charAt(index2++);\n+            if (c1 == c2) {\n+                continue;\n+            }\n+            if (!ignoreCase) {\n+                return false;\n+            }\n+            if (Character.toUpperCase(c1) != Character.toUpperCase(c2)\n+                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}\n     }\n \n     // IndexOfAny chars",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}