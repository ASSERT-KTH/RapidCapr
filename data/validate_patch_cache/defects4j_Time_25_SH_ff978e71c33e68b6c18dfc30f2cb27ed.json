{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    if ((offsetLocal - offsetAdjusted) < 0) {\n        // if we just return offsetAdjusted then the time is pushed\n        // back before the transition, whereas it should be\n        // on or after the transition\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n        // Second possible problem: if the instant is already at the next\n        // offset, but would be in a DST gap if parsed using the zone, then\n        // we shouldn't skip over the gap.\n        if (offsetLocal > 0) {\n            long nextGap = nextTransition(nextAdjusted);\n            if (nextAdjusted + offsetLocal < nextGap) {\n                return offsetLocal;\n            }\n        }\n    }\n    else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n        if (prevLocal != prevAdjusted) {\n            int offsetPrevAdjusted = getOffset(prevAdjusted);\n            int diff = offsetPrevAdjusted - offsetLocal;\n            if (instantLocal - diff < prevLocal) {\n                // before gap in local time\n                return offsetPrevAdjusted;\n            }\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3d5e8af3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,42 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    if ((offsetLocal - offsetAdjusted) < 0) {\n+        // if we just return offsetAdjusted then the time is pushed\n+        // back before the transition, whereas it should be\n+        // on or after the transition\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+        // Second possible problem: if the instant is already at the next\n+        // offset, but would be in a DST gap if parsed using the zone, then\n+        // we shouldn't skip over the gap.\n+        if (offsetLocal > 0) {\n+            long nextGap = nextTransition(nextAdjusted);\n+            if (nextAdjusted + offsetLocal < nextGap) {\n+                return offsetLocal;\n+            }\n+        }\n+    }\n+    else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetLocal);\n+        if (prevLocal != prevAdjusted) {\n+            int offsetPrevAdjusted = getOffset(prevAdjusted);\n+            int diff = offsetPrevAdjusted - offsetLocal;\n+            if (instantLocal - diff < prevLocal) {\n+                // before gap in local time\n+                return offsetPrevAdjusted;\n+            }\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}