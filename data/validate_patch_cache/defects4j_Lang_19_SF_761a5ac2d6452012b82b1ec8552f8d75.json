{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    int seqEnd = input.length();\n\n    if (index + 2 >= seqEnd) {\n        // \"&# too short, return original character\n        return 0;\n    }\n\n    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n        int start = index + 2;\n        boolean isHex = false;\n\n        char firstChar = input.charAt(start);\n        if (firstChar == 'x' || firstChar == 'X') {\n            start++;\n            isHex = true;\n\n            if (start >= seqEnd) {\n                // \"&#x too short, return original character\n                return 0;\n            }\n        }\n\n        int end = start;\n\n        while (end < seqEnd && input.charAt(end) != ';') {\n            end++;\n        }\n\n        if (end == seqEnd) {\n            // Unfinished entity, return original character\n            return 0;\n        }\n\n        int entityValue;\n        try {\n            if (isHex) {\n                // Skip leading zeroes in hex numbers\n                int offset = start;\n                while (offset < end && input.charAt(offset) == '0') {\n                    offset++;\n                }\n\n                if (offset == end) {\n                    entityValue = 0;\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(offset, end).toString(), 16);\n                }\n            } else {\n                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n            }\n        } catch (NumberFormatException nfe) {\n            // Invalid entity, return original character\n            return 0;\n        }\n\n        if (entityValue > 0xFFFF) {\n            char[] chrs = Character.toChars(entityValue);\n            out.write(chrs[0]);\n            out.write(chrs[1]);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        } else if (entityValue == 0x00) {\n            // NUL is an illegal character in XML 1.0, return original character\n            return 0;\n        } else if (entityValue == 0x3C) {\n            // Less-than sign is an illegal character in XML, but allowed in CDATA sections\n            // Replaced with its entity reference &lt;\n            out.write(\"&lt;\");\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        } else if (entityValue == 0x26) {\n            // Ampersand is an illegal character in XML, but allowed in CDATA sections\n            // Replaced with its entity reference &amp;\n            out.write(\"&amp;\");\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        } else {\n            out.write(entityValue);\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n    }\n\n    return 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..153505a2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -34,51 +34,86 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        int seqEnd = input.length();\n-        // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    int seqEnd = input.length();\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n+    if (index + 2 >= seqEnd) {\n+        // \"&# too short, return original character\n+        return 0;\n+    }\n \n-                // Check there's more than just an x after the &#\n-            }\n+    if (input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n+        int start = index + 2;\n+        boolean isHex = false;\n \n-            int end = start;\n-            // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n-            {\n-                end++;\n-            }\n+        char firstChar = input.charAt(start);\n+        if (firstChar == 'x' || firstChar == 'X') {\n+            start++;\n+            isHex = true;\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+            if (start >= seqEnd) {\n+                // \"&#x too short, return original character\n                 return 0;\n             }\n+        }\n+\n+        int end = start;\n+\n+        while (end < seqEnd && input.charAt(end) != ';') {\n+            end++;\n+        }\n+\n+        if (end == seqEnd) {\n+            // Unfinished entity, return original character\n+            return 0;\n+        }\n \n-            if(entityValue > 0xFFFF) {\n-                char[] chrs = Character.toChars(entityValue);\n-                out.write(chrs[0]);\n-                out.write(chrs[1]);\n+        int entityValue;\n+        try {\n+            if (isHex) {\n+                // Skip leading zeroes in hex numbers\n+                int offset = start;\n+                while (offset < end && input.charAt(offset) == '0') {\n+                    offset++;\n+                }\n+\n+                if (offset == end) {\n+                    entityValue = 0;\n+                } else {\n+                    entityValue = Integer.parseInt(input.subSequence(offset, end).toString(), 16);\n+                }\n             } else {\n-                out.write(entityValue);\n+                entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n             }\n+        } catch (NumberFormatException nfe) {\n+            // Invalid entity, return original character\n+            return 0;\n+        }\n \n-\n+        if (entityValue > 0xFFFF) {\n+            char[] chrs = Character.toChars(entityValue);\n+            out.write(chrs[0]);\n+            out.write(chrs[1]);\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else if (entityValue == 0x00) {\n+            // NUL is an illegal character in XML 1.0, return original character\n+            return 0;\n+        } else if (entityValue == 0x3C) {\n+            // Less-than sign is an illegal character in XML, but allowed in CDATA sections\n+            // Replaced with its entity reference &lt;\n+            out.write(\"&lt;\");\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else if (entityValue == 0x26) {\n+            // Ampersand is an illegal character in XML, but allowed in CDATA sections\n+            // Replaced with its entity reference &amp;\n+            out.write(\"&amp;\");\n+            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        } else {\n+            out.write(entityValue);\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n-        return 0;\n     }\n+\n+    return 0;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 0 expected:<[]\u0001> but was:<[&#x0;]\u0001>",
    "test_result": "FAIL"
}