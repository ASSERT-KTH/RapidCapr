{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        boolean isLastArgUsed = false;\n        for (Node functionNode : NodeUtil.getAllFunctionDeclarations(function)) {\n          Scope functionScope = lastArg.getScope();\n          if (functionNode.getLastChild() == functionScope.getRootNode()) {\n            if (isArgumentUsed(lastArg, functionNode, functionScope)) {\n              isLastArgUsed = true;\n              break;\n            }\n          }\n        }\n        if (!isLastArgUsed) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  private boolean isArgumentUsed(Node argNode, Node function, Scope functionScope) {\n    String argName = argNode.getString();\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n    cfa.process(null, function);\n    if (cfa.getReferenceUsedOutsideScopes(argName, functionScope.getAllContainedScopes())) {\n      return true;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c981d6e5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,52 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg;\n+      while ((lastArg = argList.getLastChild()) != null) {\n+        boolean isLastArgUsed = false;\n+        for (Node functionNode : NodeUtil.getAllFunctionDeclarations(function)) {\n+          Scope functionScope = lastArg.getScope();\n+          if (functionNode.getLastChild() == functionScope.getRootNode()) {\n+            if (isArgumentUsed(lastArg, functionNode, functionScope)) {\n+              isLastArgUsed = true;\n+              break;\n+            }\n+          }\n+        }\n+        if (!isLastArgUsed) {\n+          argList.removeChild(lastArg);\n+          compiler.reportCodeChange();\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n+  \n+  private boolean isArgumentUsed(Node argNode, Node function, Scope functionScope) {\n+    String argName = argNode.getString();\n+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);\n+    cfa.process(null, function);\n+    if (cfa.getReferenceUsedOutsideScopes(argName, functionScope.getAllContainedScopes())) {\n+      return true;\n+    }\n+    return false;\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}