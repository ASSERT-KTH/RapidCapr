{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\nthrows FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = simplexWithBest(original);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = replaceWorstPoint(original, contracted);\n        } else {\n            // Check convergence\n            boolean converged = true;\n            for (int i = 1; i < simplex.length; i++) {\n                if (Math.abs(best.getValue() - simplex[i].getValue()) > relativeThreshold * (Math.abs(best.getValue()) + Math.abs(simplex[i].getValue())) * 0.5) {\n                    converged = false;\n                    break;\n                }\n            }\n            if (converged || getIterations() >= maxIterations) {\n                return;\n            }\n        }\n\n    }\n\n}\n\n/** Replace the worst point */\nprivate RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair replacement) {\n    final RealPointValuePair[] simplex = Arrays.copyOf(original, original.length);\n    simplex[original.length - 1] = replacement;\n    Arrays.sort(simplex, new Comparator<RealPointValuePair>() {\n        /** {@inheritDoc} */\n        public int compare(final RealPointValuePair o1, final RealPointValuePair o2) {\n            return Double.compare(o1.getValue(), o2.getValue());\n        }\n    });\n    return simplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..eeef03ab0 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,46 +58,71 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = simplexWithBest(original);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n+        }\n+\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = replaceWorstPoint(original, contracted);\n+        } else {\n+            // Check convergence\n+            boolean converged = true;\n+            for (int i = 1; i < simplex.length; i++) {\n+                if (Math.abs(best.getValue() - simplex[i].getValue()) > relativeThreshold * (Math.abs(best.getValue()) + Math.abs(simplex[i].getValue())) * 0.5) {\n+                    converged = false;\n+                    break;\n+                }\n+            }\n+            if (converged || getIterations() >= maxIterations) {\n                 return;\n             }\n-\n         }\n \n     }\n \n+}\n+\n+/** Replace the worst point */\n+private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] original, RealPointValuePair replacement) {\n+    final RealPointValuePair[] simplex = Arrays.copyOf(original, original.length);\n+    simplex[original.length - 1] = replacement;\n+    Arrays.sort(simplex, new Comparator<RealPointValuePair>() {\n+        /** {@inheritDoc} */\n+        public int compare(final RealPointValuePair o1, final RealPointValuePair o2) {\n+            return Double.compare(o1.getValue(), o2.getValue());\n+        }\n+    });\n+    return simplex;\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}