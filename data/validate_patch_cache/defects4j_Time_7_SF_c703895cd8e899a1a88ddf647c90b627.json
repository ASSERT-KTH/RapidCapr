{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantMillis);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(parsedLeapYear(bucket, defaultYear)));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n    \n    private boolean parsedLeapYear(DateTimeParserBucket bucket, int defaultYear) {\n        if (bucket.restoreState() != null) {\n            return bucket.restoreState().isLeapYear();\n        }\n        return bucket.isLeapYear(defaultYear);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..6ba1371f 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,14 +705,13 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n+        int defaultYear = chrono.year().get(instantMillis);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n+        instant.setMillis(bucket.computeMillis(parsedLeapYear(bucket, defaultYear)));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n@@ -726,6 +725,13 @@ public class DateTimeFormatter {\n         }\n         return newPos;\n     }\n+    \n+    private boolean parsedLeapYear(DateTimeParserBucket bucket, int defaultYear) {\n+        if (bucket.restoreState() != null) {\n+            return bucket.restoreState().isLeapYear();\n+        }\n+        return bucket.isLeapYear(defaultYear);\n+    }\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: method restoreState in class DateTimeParserBucket cannot be applied to given types;",
    "test_result": "ERROR"
}