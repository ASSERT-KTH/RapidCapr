{
    "patch": "        final double[] fitted = fit(new Gaussian.Parametric(), guess);\n        final double[] observations = getObservations();\n        if (!Double.isNaN(observations[0]) && observations.length > guess.length) {\n            final double[] residuals = Residuals.create(new Gaussian.Parametric(), observations, getData(), fitted);\n            final double chiSquare = new ChiSquareTest().chiSquare(observations, fitted);\n            final double m = guess.length;\n            final double n = observations.length - m;\n            final double s = FastMath.sqrt(chiSquare / n);\n            final double[] optimalStep = new double[m];\n            for (int i = 0; i < m; i++) {\n                optimalStep[i] = s / FastMath.abs(residuals[i]);\n            }\n            final double[] newGuess = new LevenbergMarquardtOptimizer().optimize(getObservations(), getData(), new\n                    Gaussian.Parametric(), fitted,\n                    getWeights(), getStart(), getEnd(), optimalStep);\n            return newGuess;\n        }\n        return guess;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..c0f6210d7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,24 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double[] fitted = fit(new Gaussian.Parametric(), guess);\n+        final double[] observations = getObservations();\n+        if (!Double.isNaN(observations[0]) && observations.length > guess.length) {\n+            final double[] residuals = Residuals.create(new Gaussian.Parametric(), observations, getData(), fitted);\n+            final double chiSquare = new ChiSquareTest().chiSquare(observations, fitted);\n+            final double m = guess.length;\n+            final double n = observations.length - m;\n+            final double s = FastMath.sqrt(chiSquare / n);\n+            final double[] optimalStep = new double[m];\n+            for (int i = 0; i < m; i++) {\n+                optimalStep[i] = s / FastMath.abs(residuals[i]);\n+            }\n+            final double[] newGuess = new LevenbergMarquardtOptimizer().optimize(getObservations(), getData(), new\n+                    Gaussian.Parametric(), fitted,\n+                    getWeights(), getStart(), getEnd(), optimalStep);\n+            return newGuess;\n+        }\n+        return guess;\n     }\n \n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}