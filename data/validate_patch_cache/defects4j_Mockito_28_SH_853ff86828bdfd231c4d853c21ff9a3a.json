{
    "patch": "    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n        for (Field injectionField : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n            MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, injectionField, fieldInstance);\n            if (mockCandidate.isMockAssignableToField()) {\n                mockCandidate.thenInject();\n                return;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..1a77a36da 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,15 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+        for (Field injectionField : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+            MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, injectionField, fieldInstance);\n+            if (mockCandidate.isMockAssignableToField()) {\n+                mockCandidate.thenInject();\n+                return;\n+            }\n+        }\n+    }\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}