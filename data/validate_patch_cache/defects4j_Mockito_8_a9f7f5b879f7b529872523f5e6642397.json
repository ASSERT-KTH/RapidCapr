{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable) {\n                // resolve any embedded type variables\n                TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n                String name = variable.getName();\n                \n                Type resolvedType = contextualActualTypeParameters.get(name);\n\n                if (resolvedType == null) {\n                    Type[] bounds = variable.getBounds();\n                    if (bounds.length == 0) {\n                        // bounds check null\n                        resolvedType = Object.class;\n                    } else {\n                        if (bounds.length == 1) {\n                            // java standards implies only one bound can be set (extends X)\n                            resolvedType = bounds[0];\n                        } else {\n                            // throws exception when more than one bound is set.\n                            throw new IllegalArgumentException(String.format(\"Expected a type with only one bound but found '%s'.\", Arrays.toString(bounds)));\n                        }\n                     }\n                }\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..02e101de9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,32 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+                // resolve any embedded type variables\n+                TypeVariable<?> variable = (TypeVariable<?>) actualTypeArgument;\n+                String name = variable.getName();\n+                \n+                Type resolvedType = contextualActualTypeParameters.get(name);\n+\n+                if (resolvedType == null) {\n+                    Type[] bounds = variable.getBounds();\n+                    if (bounds.length == 0) {\n+                        // bounds check null\n+                        resolvedType = Object.class;\n+                    } else {\n+                        if (bounds.length == 1) {\n+                            // java standards implies only one bound can be set (extends X)\n+                            resolvedType = bounds[0];\n+                        } else {\n+                            // throws exception when more than one bound is set.\n+                            throw new IllegalArgumentException(String.format(\"Expected a type with only one bound but found '%s'.\", Arrays.toString(bounds)));\n+                        }\n+                     }\n+                }\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}