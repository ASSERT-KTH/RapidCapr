{
    "patch": "protected double getInitialDomain(double p) {\n    double d = getDenominatorDegreesOfFreedom();\n    if (Double.isNaN(d) || !Double.isFinite(d) || d <= 2.0) {\n        return 0.0;\n    } else if (d == Double.POSITIVE_INFINITY) {\n        return Double.POSITIVE_INFINITY;\n    } else {\n        return Math.abs(d - 2.0) >= Double.MIN_VALUE ? d / (d - 2.0) : Double.MAX_VALUE;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..455d7a691 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,13 +140,16 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n-        double ret;\n-        double d = getDenominatorDegreesOfFreedom();\n-            // use mean\n-            ret = d / (d - 2.0);\n-        return ret;\n+protected double getInitialDomain(double p) {\n+    double d = getDenominatorDegreesOfFreedom();\n+    if (Double.isNaN(d) || !Double.isFinite(d) || d <= 2.0) {\n+        return 0.0;\n+    } else if (d == Double.POSITIVE_INFINITY) {\n+        return Double.POSITIVE_INFINITY;\n+    } else {\n+        return Math.abs(d - 2.0) >= Double.MIN_VALUE ? d / (d - 2.0) : Double.MAX_VALUE;\n     }\n+}\n     \n     /**\n      * Modify the numerator degrees of freedom.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}