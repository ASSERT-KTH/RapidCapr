{
    "patch": "  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    options.setAcceptConstKeyword(true);\n    options.setCodingConvention(flags.processJqueryPrimitives ? new JqueryCodingConvention() : new ClosureCodingConvention());\n\n    if (!flags.extraAnnotationName.isEmpty()) {\n      options.setExtraAnnotationNames(flags.extraAnnotationName);\n    }\n\n    options.setCheckTypes(true);\n\n    if(flags.generateExports) {\n      options.setGenerateExports(true);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.closurePass = flags.processClosurePrimitives;\n\n    if (flags.jqueryPass) {\n      if (level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n        throw new RuntimeException(\"The jquery pass only works with \" +\n            \"advanced optimizations\");\n      }\n      options.setProcessjQueryPrimitives(true);\n    }\n\n    if (flags.angularPass) {\n      options.setAngularPass(true);\n    }\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(new FileInputStream(flags.translationsFile), flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (level == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n      options.messageBundle = new EmptyMessageBundle();\n      options.messageBundle.setDoNotCrunch(true);\n    } else {\n      options.messageBundle = new EmptyMessageBundle();\n    }\n\n    return options;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..f2389087 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -805,13 +805,6 @@ public class CommandLineRunner extends\n   @Override\n   protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    if (flags.processJqueryPrimitives) {\n-      options.setCodingConvention(new JqueryCodingConvention());\n-    } else {\n-      options.setCodingConvention(new ClosureCodingConvention());\n-    }\n-\n-    options.setExtraAnnotationNames(flags.extraAnnotationName);\n \n     CompilationLevel level = flags.compilationLevel;\n     level.setOptionsForCompilationLevel(options);\n@@ -824,40 +817,50 @@ public class CommandLineRunner extends\n       level.setTypeBasedOptimizationOptions(options);\n     }\n \n-    if (flags.generateExports) {\n-      options.setGenerateExports(flags.generateExports);\n+    options.setAcceptConstKeyword(true);\n+    options.setCodingConvention(flags.processJqueryPrimitives ? new JqueryCodingConvention() : new ClosureCodingConvention());\n+\n+    if (!flags.extraAnnotationName.isEmpty()) {\n+      options.setExtraAnnotationNames(flags.extraAnnotationName);\n+    }\n+\n+    options.setCheckTypes(true);\n+\n+    if(flags.generateExports) {\n+      options.setGenerateExports(true);\n     }\n \n     WarningLevel wLevel = flags.warningLevel;\n     wLevel.setOptionsForWarningLevel(options);\n+\n     for (FormattingOption formattingOption : flags.formatting) {\n       formattingOption.applyToOptions(options);\n     }\n \n     options.closurePass = flags.processClosurePrimitives;\n \n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n+    if (flags.jqueryPass) {\n+      if (level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+        throw new RuntimeException(\"The jquery pass only works with \" +\n+            \"advanced optimizations\");\n+      }\n+      options.setProcessjQueryPrimitives(true);\n+    }\n \n-    options.angularPass = flags.angularPass;\n+    if (flags.angularPass) {\n+      options.setAngularPass(true);\n+    }\n \n     if (!flags.translationsFile.isEmpty()) {\n       try {\n-        options.messageBundle = new XtbMessageBundle(\n-            new FileInputStream(flags.translationsFile),\n-            flags.translationsProject);\n+        options.messageBundle = new XtbMessageBundle(new FileInputStream(flags.translationsFile), flags.translationsProject);\n       } catch (IOException e) {\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n+    } else if (level == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+      options.messageBundle = new EmptyMessageBundle();\n+      options.messageBundle.setDoNotCrunch(true);\n+    } else {\n       options.messageBundle = new EmptyMessageBundle();\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}