{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if (!changed.contains(functionName)) {\n          changed.add(functionName);\n          addRefToChangedFunctions(functionName);\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }\n\n  private void addRefToChangedFunctions(String functionName) {\n    FunctionInformation functionInformation = getFunctionInfo(functionName);\n    if (functionInformation == null) {\n      return;\n    }\n    for (String ref : functionInformation.getReferencedFunctions()) {\n      addChangedFunction(ref);\n    }\n  }\n\n  private FunctionInformation getFunctionInfo(String functionName) {\n    if (functionsByName == null) {\n      init();\n    }\n    return functionsByName.get(functionName);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..08886499 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,40 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkArgument(changed != null);\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if (!changed.contains(functionName)) {\n+          changed.add(functionName);\n+          addRefToChangedFunctions(functionName);\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n+\n+  private void addRefToChangedFunctions(String functionName) {\n+    FunctionInformation functionInformation = getFunctionInfo(functionName);\n+    if (functionInformation == null) {\n+      return;\n+    }\n+    for (String ref : functionInformation.getReferencedFunctions()) {\n+      addChangedFunction(ref);\n+    }\n+  }\n+\n+  private FunctionInformation getFunctionInfo(String functionName) {\n+    if (functionsByName == null) {\n+      init();\n+    }\n+    return functionsByName.get(functionName);\n+  }\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}