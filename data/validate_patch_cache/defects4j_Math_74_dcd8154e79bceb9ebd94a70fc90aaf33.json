{
    "patch": "  public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n          throws DerivativeException, IntegratorException {\n\n    resetInternalState();\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    final boolean forward = t > t0;\n    stepStart = t0;\n    this.initialized = false;\n    double previousT = Double.NaN;\n    boolean firstTime = true;\n\n    // initialize time\n    time = t0;\n\n    // set up an interpolator sharing the integrator arrays\n    AbstractStepInterpolator interpolator;\n    interpolator = new DummyStepInterpolator(y0, forward);\n\n    if (y != y0) {\n      System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n\n    final double[] yDot = new double[equations.getDimension()];\n    final double[] y1 = new double[equations.getDimension()];\n    final double[] yTmp = new double[equations.getDimension()];\n\n    final double[] k = new double[7];\n    for (StepHandler handler : stepHandlers) {\n      handler.reset();\n    }\n    if ((! eventsHandlersManager.isEmpty()) || requiresDenseOutput()) {\n      final RungeKuttaStepInterpolator rki =\n              (RungeKuttaStepInterpolator) prototype.copy();\n      rki.reinitialize(this, yTmp, yDot, forward);\n      interpolator = rki;\n      interpolator.storeTime(time);\n    }\n    boolean isLast = false;\n\n    stepSize = initializeStep(forward, 2, y, yDot, equations::computeDerivatives);\n    while (! isLast) {\n      interpolator.shift();\n      final double nextT = time + stepSize;\n      if ((forward && nextT > t) || (!forward && nextT < t)) {\n        stepSize = t - time;\n        isLast   = true;\n      }\n\n      computeInterpolatedState(stepSize, y, yDot, yTmp);\n      interpolator.storeTime(time + stepSize);\n      if ((! eventsHandlersManager.isEmpty()) ||\n              requiresDenseOutput()) {\n        ((RungeKuttaStepInterpolator) interpolator).saveStep(stepSize, yDot, yTmp, true);\n      }\n\n      System.arraycopy(yTmp, 0, y, 0, y0.length);\n      final double previousT1 = previousT;\n      try {\n        previousT = time;\n        time = stepStart = acceptStep(interpolator, y, equations);\n        if (Double.isNaN(time)) {\n          return previousT1;\n        }\n      } catch (final RuntimeException re) {\n        if (! recoverable(re)) {\n          throw re;\n        }\n        previousT = Double.NaN;\n        time = previousT1;\n        isLast = false;\n        stepSize = resetInternalState();\n        System.arraycopy(y, 0, yTmp, 0, y0.length);\n        System.arraycopy(y, 0, y1, 0, y0.length);\n        for (int i = 0; i < k.length; ++i) {\n          k[i] = Double.NaN;\n        }\n        interpolator.reinitialize(this, yTmp, yDot, forward);\n        interpolator.storeTime(previousT1);\n      }\n      if (Double.isNaN(previousT)) {\n        previousT = previousT1;\n      }\n      firstTime = false;\n      if (! isLast) {\n        stepSize = filterStep(stepSize, forward, false);\n      }\n      if ((! eventsHandlersManager.isEmpty()) ||\n              requiresDenseOutput()) {\n        ((RungeKuttaStepInterpolator) interpolator).reinitialize(this, y, yDot, forward);\n      }\n      for (StepHandler handler : stepHandlers) {\n        handler.handleStep(interpolator, isLast);\n      }\n      isLast = (isLast || manager.stop());\n      if (!isLast) {\n        interpolator.storeTime(time);\n        try {\n          for (int i = 0; i < k.length; ++i) {\n            k[i] = stepSize;\n          }\n          equations.computeDerivatives(time, y, yDot);\n        } catch (final DerivativeException de) {\n          throw new IntegratorException(de);\n        }\n        computeDerivatives(time, y, yDot);\n        interpolator.storeTime(time);\n        if (manager.evaluateStep(interpolator)) {\n          final double hNew = manager.getEventTime() - stepStart;\n          isLast = (forward && (time + hNew >= t)) || ((! forward) && (time + hNew <= t));\n          System.arraycopy(y, 0, y1, 0, y0.length);\n          System.arraycopy(y0, 0, y, 0, y0.length);\n          for (final EventHandler eh : manager.getEventsHandlers()) {\n            if (eh.reset(eventOccurred(eh, interpolator))) {\n              // the event handlers manager may change the state,\n              // so we save the state and re-initialize from scratch\n              System.arraycopy(y1, 0, y, 0, y0.length);\n              equations.computeDerivatives(time, y, yDot);\n              computeDerivatives(time, y, yDot);\n              interpolator.reinitialize(this, y, yDot, forward);\n              stepStart = previousT;\n              isLast = false;\n              throw new RecoverableIntegratorException(LocalizedFormats.EVENT_PROBLEM, time);\n            }\n          }\n          stepSize = hNew;\n          continue;\n        }\n      }\n      if (manager.reset(time, y) ||\n              resetOccurred) {\n        if (resetOccurred) {\n          // when a reset occurred, we reset all events regardless of\n          // their state so they can trigger again in the next step\n          resetEvents();\n          resetOccurred = false;\n        }\n        try {\n          for (int i = 0; i < k.length; ++i) {\n            k[i] = stepSize;\n          }\n          equations.computeDerivatives(time, y, yDot);\n        } catch (final DerivativeException de) {\n          throw new IntegratorException(de);\n        }\n        computeDerivatives(time, y, yDot);\n        if ((! eventsHandlersManager.isEmpty()) ||\n                requiresDenseOutput()) {\n          interpolator.reinitialize(this, y, yDot, forward);\n        }\n        interpolator.storeTime(time);\n      }\n    }\n    resetInternalState();\n    return time;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..67a0223b5 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -192,170 +192,160 @@ public abstract class EmbeddedRungeKuttaIntegrator\n   public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,\n                           final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n+          throws DerivativeException, IntegratorException {\n \n+    resetInternalState();\n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n-    resetEvaluations();\n     final boolean forward = t > t0;\n+    stepStart = t0;\n+    this.initialized = false;\n+    double previousT = Double.NaN;\n+    boolean firstTime = true;\n \n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n-    if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n-    }\n-    final double[][] yDotK = new double[stages][y0.length];\n-    final double[] yTmp = new double[y0.length];\n+    // initialize time\n+    time = t0;\n \n     // set up an interpolator sharing the integrator arrays\n     AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n-    } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+    interpolator = new DummyStepInterpolator(y0, forward);\n+\n+    if (y != y0) {\n+      System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n-    interpolator.storeTime(t0);\n \n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n+    final double[] yDot = new double[equations.getDimension()];\n+    final double[] y1 = new double[equations.getDimension()];\n+    final double[] yTmp = new double[equations.getDimension()];\n+\n+    final double[] k = new double[7];\n     for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n+      handler.reset();\n     }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n-\n-    // main integration loop\n-    while (!lastStep) {\n+    if ((! eventsHandlersManager.isEmpty()) || requiresDenseOutput()) {\n+      final RungeKuttaStepInterpolator rki =\n+              (RungeKuttaStepInterpolator) prototype.copy();\n+      rki.reinitialize(this, yTmp, yDot, forward);\n+      interpolator = rki;\n+      interpolator.storeTime(time);\n+    }\n+    boolean isLast = false;\n \n+    stepSize = initializeStep(forward, 2, y, yDot, equations::computeDerivatives);\n+    while (! isLast) {\n       interpolator.shift();\n+      final double nextT = time + stepSize;\n+      if ((forward && nextT > t) || (!forward && nextT < t)) {\n+        stepSize = t - time;\n+        isLast   = true;\n+      }\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+      computeInterpolatedState(stepSize, y, yDot, yTmp);\n+      interpolator.storeTime(time + stepSize);\n+      if ((! eventsHandlersManager.isEmpty()) ||\n+              requiresDenseOutput()) {\n+        ((RungeKuttaStepInterpolator) interpolator).saveStep(stepSize, yDot, yTmp, true);\n+      }\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n+      System.arraycopy(yTmp, 0, y, 0, y0.length);\n+      final double previousT1 = previousT;\n+      try {\n+        previousT = time;\n+        time = stepStart = acceptStep(interpolator, y, equations);\n+        if (Double.isNaN(time)) {\n+          return previousT1;\n         }\n-\n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n-            } else {\n-              scale = vecAbsoluteTolerance;\n-            }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n+      } catch (final RuntimeException re) {\n+        if (! recoverable(re)) {\n+          throw re;\n         }\n-\n-        stepSize = hNew;\n-\n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n-            }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n-\n+        previousT = Double.NaN;\n+        time = previousT1;\n+        isLast = false;\n+        stepSize = resetInternalState();\n+        System.arraycopy(y, 0, yTmp, 0, y0.length);\n+        System.arraycopy(y, 0, y1, 0, y0.length);\n+        for (int i = 0; i < k.length; ++i) {\n+          k[i] = Double.NaN;\n         }\n-\n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n+        interpolator.reinitialize(this, yTmp, yDot, forward);\n+        interpolator.storeTime(previousT1);\n+      }\n+      if (Double.isNaN(previousT)) {\n+        previousT = previousT1;\n+      }\n+      firstTime = false;\n+      if (! isLast) {\n+        stepSize = filterStep(stepSize, forward, false);\n+      }\n+      if ((! eventsHandlersManager.isEmpty()) ||\n+              requiresDenseOutput()) {\n+        ((RungeKuttaStepInterpolator) interpolator).reinitialize(this, y, yDot, forward);\n+      }\n+      for (StepHandler handler : stepHandlers) {\n+        handler.handleStep(interpolator, isLast);\n+      }\n+      isLast = (isLast || manager.stop());\n+      if (!isLast) {\n+        interpolator.storeTime(time);\n+        try {\n+          for (int i = 0; i < k.length; ++i) {\n+            k[i] = stepSize;\n           }\n-          yTmp[j] = y[j] + stepSize * sum;\n+          equations.computeDerivatives(time, y, yDot);\n+        } catch (final DerivativeException de) {\n+          throw new IntegratorException(de);\n         }\n-\n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n+        computeDerivatives(time, y, yDot);\n+        interpolator.storeTime(time);\n+        if (manager.evaluateStep(interpolator)) {\n+          final double hNew = manager.getEventTime() - stepStart;\n+          isLast = (forward && (time + hNew >= t)) || ((! forward) && (time + hNew <= t));\n+          System.arraycopy(y, 0, y1, 0, y0.length);\n+          System.arraycopy(y0, 0, y, 0, y0.length);\n+          for (final EventHandler eh : manager.getEventsHandlers()) {\n+            if (eh.reset(eventOccurred(eh, interpolator))) {\n+              // the event handlers manager may change the state,\n+              // so we save the state and re-initialize from scratch\n+              System.arraycopy(y1, 0, y, 0, y0.length);\n+              equations.computeDerivatives(time, y, yDot);\n+              computeDerivatives(time, y, yDot);\n+              interpolator.reinitialize(this, y, yDot, forward);\n+              stepStart = previousT;\n+              isLast = false;\n+              throw new RecoverableIntegratorException(LocalizedFormats.EVENT_PROBLEM, time);\n+            }\n           }\n-\n-        } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+          stepSize = hNew;\n+          continue;\n         }\n-\n       }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n+      if (manager.reset(time, y) ||\n+              resetOccurred) {\n+        if (resetOccurred) {\n+          // when a reset occurred, we reset all events regardless of\n+          // their state so they can trigger again in the next step\n+          resetEvents();\n+          resetOccurred = false;\n+        }\n+        try {\n+          for (int i = 0; i < k.length; ++i) {\n+            k[i] = stepSize;\n+          }\n+          equations.computeDerivatives(time, y, yDot);\n+        } catch (final DerivativeException de) {\n+          throw new IntegratorException(de);\n+        }\n+        computeDerivatives(time, y, yDot);\n+        if ((! eventsHandlersManager.isEmpty()) ||\n+                requiresDenseOutput()) {\n+          interpolator.reinitialize(this, y, yDot, forward);\n+        }\n+        interpolator.storeTime(time);\n       }\n-\n     }\n-\n-    final double stopTime = stepStart;\n     resetInternalState();\n-    return stopTime;\n-\n+    return time;\n   }\n \n   /** Get the minimal reduction factor for stepsize control.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}