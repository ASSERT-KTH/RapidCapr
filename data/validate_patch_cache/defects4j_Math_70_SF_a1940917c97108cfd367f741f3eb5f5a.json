{
    "patch": "public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    if (f == null) {\n        throw new NullPointerException(\"The function f cannot be null.\");\n    }\n    if (min > max) {\n        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n    }\n    \n    double result;\n    double i = initial;\n    boolean initialInBounds = (min <= i && i <= max);\n\n    if (initialInBounds) {\n        result = solve(f, min, max, i);\n    } else {\n        // Try midpoint then endpoints as initial guess.\n        double midpoint = UnivariateRealSolverUtils.midpoint(min, max);\n        result = solveWithInitialGuess(f, min, max, midpoint);\n        if (Double.isNaN(result)) {\n            result = solveWithInitialGuess(f, min, max, min);\n            if (Double.isNaN(result)) {\n                result = solveWithInitialGuess(f, min, max, max);\n            }\n        }\n    }\n    \n    return result;\n}\n\nprivate double solveWithInitialGuess(UnivariateRealFunction f, double min, double max, double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    try {\n        return solve(f, min, max, initial);\n    } catch (NullPointerException e) {\n        return Double.NaN;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..2b3035c92 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,10 +67,44 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    if (f == null) {\n+        throw new NullPointerException(\"The function f cannot be null.\");\n     }\n+    if (min > max) {\n+        throw new IllegalArgumentException(\"The lower bound of the interval must be less than or equal to the upper bound.\");\n+    }\n+    \n+    double result;\n+    double i = initial;\n+    boolean initialInBounds = (min <= i && i <= max);\n+\n+    if (initialInBounds) {\n+        result = solve(f, min, max, i);\n+    } else {\n+        // Try midpoint then endpoints as initial guess.\n+        double midpoint = UnivariateRealSolverUtils.midpoint(min, max);\n+        result = solveWithInitialGuess(f, min, max, midpoint);\n+        if (Double.isNaN(result)) {\n+            result = solveWithInitialGuess(f, min, max, min);\n+            if (Double.isNaN(result)) {\n+                result = solveWithInitialGuess(f, min, max, max);\n+            }\n+        }\n+    }\n+    \n+    return result;\n+}\n+\n+private double solveWithInitialGuess(UnivariateRealFunction f, double min, double max, double initial)\n+        throws MaxIterationsExceededException, FunctionEvaluationException {\n+    try {\n+        return solve(f, min, max, initial);\n+    } catch (NullPointerException e) {\n+        return Double.NaN;\n+    }\n+}\n \n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max)",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}