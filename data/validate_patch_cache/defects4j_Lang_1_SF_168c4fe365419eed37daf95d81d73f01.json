{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // Handle hex numbers\n    int pfxLen = 0;\n    char firstChar = str.charAt(0);\n    if (str.length() > 1 && firstChar == '0') {\n        char secondChar = str.charAt(1);\n        if (secondChar == 'x' || secondChar == 'X') {\n            pfxLen += 2;\n        } else if (secondChar == '-') {\n            pfxLen += 2;\n            firstChar = '-';\n        } else if (Character.isDigit(secondChar)) {\n            // 0[not xX-] is octal (LANG-822); degenerate case or not?\n            pfxLen++;\n        } else {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n\n    Number result;\n    if (pfxLen > 0) {\n        // hex number\n        if (pfxLen == str.length()) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        try {\n            if (firstChar == '-') {\n                result = createLong(str.substring(pfxLen), 16);\n            } else {\n                result = createLong(str.substring(pfxLen), 16);\n            }\n        } catch (NumberFormatException e) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        // not a hex number\n        final char lastChar = str.charAt(str.length() - 1);\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            }\n        }\n\n        if (expPos > -1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        String mant = getMantissa(str, decPos, expPos);\n\n        if (exp == null && (dec == null || numDecimals == 0)) {\n            // integer\n            result = createInteger(mant);\n        } else if (exp == null && dec != null && numDecimals > 0 && numDecimals <= 7) {\n            // float\n            float f = Float.parseFloat(str);\n            if (!Float.isInfinite(f)) {\n                result = f;\n            } else {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else if (exp == null && dec != null && numDecimals > 0 && numDecimals <= 16) {\n            // double\n            double d = Double.parseDouble(str);\n            if (!Double.isInfinite(d)) {\n                result = d;\n            } else {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        } else {\n            // BigDecimal\n            BigDecimal bd = new BigDecimal(str);\n            if (bd.scale() <= 0) {\n                result = bd.longValue();\n            } else {\n                result = bd;\n            }\n        }\n    }\n\n    return result;\n}\n\nprivate static String getMantissa(final String str, final int decPos, final int expPos) {\n    if (decPos > -1) {\n        if (expPos > -1) {\n            if (expPos < decPos || expPos > str.length()) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            return str.substring(0, expPos);\n        }\n        return str;\n    }\n    if (expPos > -1) {\n        if (expPos > str.length()) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        return str.substring(0, expPos);\n    }\n    return str;\n}\n\npublic static Long createLong(final String str, final int radix) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n\n    // handle sign\n    boolean negate = false;\n    int start = 0;\n    final char firstChar = str.charAt(0);\n    if (firstChar == '-') {\n        negate = true;\n        start++;\n    } else if (firstChar == '+') {\n        start++;\n    }\n\n    // handle radix\n    if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {\n        throw new NumberFormatException(\"The radix must be between \" + Character.MIN_RADIX + \" and \" + Character.MAX_RADIX);\n    }\n    if (radix == 16 && (start + 1) < str.length() && str.charAt(start) == '0' && (str.charAt(start+1) == 'x' || str.charAt(start+1) == 'X')) {\n        start += 2;\n    }\n\n    // handle empty string or just a sign\n    if (start >= str.length()) {\n        throw new NumberFormatException(str + \" is not a valid number.\");\n    }\n\n    // handle base 16\n    long result = 0;\n    if (radix == 16) {\n        for (int i = start; i < str.length(); i++) {\n            final char digit = str.charAt(i);\n            if (digit == 'l' || digit == 'L') {\n                if (i == str.length() - 1) {\n                    return negate ? -result : result;\n                } else {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n            }\n            final int value = Character.digit(digit, 16);\n            if (value == -1) {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n            result = (result << 4) | value;\n        }\n        return negate ? -result : result;\n    }\n\n    // general case\n    final long max = Long.MAX_VALUE / radix;\n    for (int i = start; i < str.length(); i++) {\n        final char digit = str.charAt(i);\n        if (digit == 'l' || digit == 'L') {\n            if (i == str.length() - 1) {\n                return negate ? -result : result;\n            } else {\n                throw new NumberFormatException(str + \" is not a valid number.\");\n            }\n        }\n        final int value = Character.digit(digit, radix);\n        if (value == -1) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        if (result < max) {\n            result = result * radix + value;\n        } else {\n            // overflow\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    }\n    return negate ? -result : result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..964419e2 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,44 +447,57 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    // Handle hex numbers\n+    int pfxLen = 0;\n+    char firstChar = str.charAt(0);\n+    if (str.length() > 1 && firstChar == '0') {\n+        char secondChar = str.charAt(1);\n+        if (secondChar == 'x' || secondChar == 'X') {\n+            pfxLen += 2;\n+        } else if (secondChar == '-') {\n+            pfxLen += 2;\n+            firstChar = '-';\n+        } else if (Character.isDigit(secondChar)) {\n+            // 0[not xX-] is octal (LANG-822); degenerate case or not?\n+            pfxLen++;\n+        } else {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n+    }\n+\n+    Number result;\n+    if (pfxLen > 0) {\n+        // hex number\n+        if (pfxLen == str.length()) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n+        try {\n+            if (firstChar == '-') {\n+                result = createLong(str.substring(pfxLen), 16);\n+            } else {\n+                result = createLong(str.substring(pfxLen), 16);\n             }\n-            return createInteger(str);\n+        } catch (NumberFormatException e) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n         }\n+    } else {\n+        // not a hex number\n         final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n         String dec;\n         String exp;\n         final int decPos = str.indexOf('.');\n         final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n \n         int numDecimals = 0; // Check required precision (LANG-693)\n         if (decPos > -1) { // there is a decimal point\n-\n             if (expPos > -1) { // there is an exponent\n                 if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n@@ -493,125 +506,151 @@ public class NumberUtils {\n             } else {\n                 dec = str.substring(decPos + 1);\n             }\n-            mant = str.substring(0, decPos);\n             numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n         } else {\n             if (expPos > -1) {\n                 if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n             }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n \n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n+        if (expPos > -1) {\n             exp = str.substring(expPos + 1, str.length());\n         } else {\n             exp = null;\n         }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+        String mant = getMantissa(str, decPos, expPos);\n+\n+        if (exp == null && (dec == null || numDecimals == 0)) {\n+            // integer\n+            result = createInteger(mant);\n+        } else if (exp == null && dec != null && numDecimals > 0 && numDecimals <= 7) {\n+            // float\n+            float f = Float.parseFloat(str);\n+            if (!Float.isInfinite(f)) {\n+                result = f;\n+            } else {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+        } else if (exp == null && dec != null && numDecimals > 0 && numDecimals <= 16) {\n+            // double\n+            double d = Double.parseDouble(str);\n+            if (!Double.isInfinite(d)) {\n+                result = d;\n+            } else {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+        } else {\n+            // BigDecimal\n+            BigDecimal bd = new BigDecimal(str);\n+            if (bd.scale() <= 0) {\n+                result = bd.longValue();\n+            } else {\n+                result = bd;\n             }\n-            return createBigInteger(str);\n         }\n+    }\n \n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n+    return result;\n+}\n+\n+private static String getMantissa(final String str, final int decPos, final int expPos) {\n+    if (decPos > -1) {\n+        if (expPos > -1) {\n+            if (expPos < decPos || expPos > str.length()) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            return str.substring(0, expPos);\n         }\n-        try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n+        return str;\n+    }\n+    if (expPos > -1) {\n+        if (expPos > str.length()) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        return str.substring(0, expPos);\n+    }\n+    return str;\n+}\n+\n+public static Long createLong(final String str, final int radix) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+\n+    // handle sign\n+    boolean negate = false;\n+    int start = 0;\n+    final char firstChar = str.charAt(0);\n+    if (firstChar == '-') {\n+        negate = true;\n+        start++;\n+    } else if (firstChar == '+') {\n+        start++;\n+    }\n+\n+    // handle radix\n+    if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {\n+        throw new NumberFormatException(\"The radix must be between \" + Character.MIN_RADIX + \" and \" + Character.MAX_RADIX);\n+    }\n+    if (radix == 16 && (start + 1) < str.length() && str.charAt(start) == '0' && (str.charAt(start+1) == 'x' || str.charAt(start+1) == 'X')) {\n+        start += 2;\n+    }\n+\n+    // handle empty string or just a sign\n+    if (start >= str.length()) {\n+        throw new NumberFormatException(str + \" is not a valid number.\");\n+    }\n+\n+    // handle base 16\n+    long result = 0;\n+    if (radix == 16) {\n+        for (int i = start; i < str.length(); i++) {\n+            final char digit = str.charAt(i);\n+            if (digit == 'l' || digit == 'L') {\n+                if (i == str.length() - 1) {\n+                    return negate ? -result : result;\n+                } else {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n             }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n+            final int value = Character.digit(digit, 16);\n+            if (value == -1) {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+            result = (result << 4) | value;\n         }\n+        return negate ? -result : result;\n+    }\n \n-        return createBigDecimal(str);\n+    // general case\n+    final long max = Long.MAX_VALUE / radix;\n+    for (int i = start; i < str.length(); i++) {\n+        final char digit = str.charAt(i);\n+        if (digit == 'l' || digit == 'L') {\n+            if (i == str.length() - 1) {\n+                return negate ? -result : result;\n+            } else {\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+            }\n+        }\n+        final int value = Character.digit(digit, radix);\n+        if (value == -1) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        if (result < max) {\n+            result = result * radix + value;\n+        } else {\n+            // overflow\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n     }\n+    return negate ? -result : result;\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: variable dec might not have been initialized",
    "test_result": "ERROR"
}