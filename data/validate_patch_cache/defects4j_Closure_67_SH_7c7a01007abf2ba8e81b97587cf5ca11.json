{
    "patch": "  private boolean isPrototypePropertyAssign(Node assign) {\n    Node n = assign.getFirstChild();\n    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n        && n.getType() == Token.GETPROP \n        && n.getLastChild() != null\n        && \"prototype\".equals(n.getLastChild().getString())) {\n      Node obj = n.getFirstChild();\n      return obj != null && obj.getType() == Token.GETPROP;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..2515e061 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,17 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+  private boolean isPrototypePropertyAssign(Node assign) {\n+    Node n = assign.getFirstChild();\n+    if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n+        && n.getType() == Token.GETPROP \n+        && n.getLastChild() != null\n+        && \"prototype\".equals(n.getLastChild().getString())) {\n+      Node obj = n.getFirstChild();\n+      return obj != null && obj.getType() == Token.GETPROP;\n+    }\n+    return false;\n+  }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}