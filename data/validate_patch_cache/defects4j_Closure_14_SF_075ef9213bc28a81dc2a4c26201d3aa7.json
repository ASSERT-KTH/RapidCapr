{
    "patch": "private static Node computeFallThrough(Node node) {\n  Node next = node;\n\n  switch (next.getType()) {\n    case Token.EMPTY:\n    case Token.BLOCK:\n    case Token.SCRIPT:\n    case Token.LABEL:\n    case Token.VAR:\n      for (Node child = next.getFirstChild(); child != null; child = child.getNext()) {\n        Node n = computeFallThrough(child);\n        if (n != null) {\n          return n;\n        }\n      }\n\n      break;\n\n    case Token.WHILE:\n    case Token.DO:\n    case Token.FOR:\n    case Token.FOR_IN:\n    case Token.IF:\n    case Token.HOOK:\n      next = next.getFirstChild();\n      break;\n\n    case Token.TRY:\n      next = next.getFirstChild();\n      if (next.getType() != Token.BLOCK) { // this is a catch\n        next = next.getNext().getNext();\n      }\n      break;\n\n    case Token.CASE:\n    case Token.DEFAULT_CASE:\n      // An empty block can follow the case/default, but in this case, the\n      // actual next control flow will be determined by the switch statement.\n      next = next.getNext();\n      if (next.getType() == Token.EMPTY) {\n        next = next.getNext();\n      }\n      break;\n\n    case Token.FUNCTION:\n      // Control flow does not fall through an entire function definition.\n      return null;\n\n    case Token.RETURN:\n    case Token.THROW:\n      // Early return.\n      return null;\n\n    default:\n      // other nodes (including statements) just continue\n      // through the next sibling statement\n      break;\n  }\n\n  while (next != null) {\n    int type = next.getType();\n    int childType = next.getFirstChild() == null\n        ? Token.EMPTY\n        : next.getFirstChild().getType();\n    switch (type) {\n      case Token.EMPTY:\n        next = next.getNext();\n        break;\n\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.VAR:\n      case Token.LABEL:\n        next = computeFallThrough(next.getFirstChild());\n        break;\n\n      case Token.CONTINUE:\n        if (next.hasMoreThanOneChild()) {\n          // continue with label\n          return null;\n        }\n        // fall through\n      case Token.BREAK:\n        if (next.getFirstChild() != null) {\n          return null;\n        }\n        // fall through\n      case Token.EXPR_VOID:\n      case Token.EXPR_RESULT:\n        next = next.getNext();\n        break;\n\n      case Token.IF:\n        Node elseBranch = NodeUtil.getElseBranch(next);\n        if (elseBranch != null) {\n          Node endOfThen = computeEnd(next.getFirstChild().getNext());\n          Node endOfElse = computeEnd(elseBranch.getFirstChild());\n          if (endOfThen == endOfElse) {\n            next = endOfThen;\n          } else {\n            return null;\n          }\n        } else {\n          if (childType == Token.BLOCK) {\n            next = next.getFirstChild();\n          } else {\n            return null;\n          }\n        }\n        break;\n\n      case Token.DO:\n        next = computeEnd(next.getFirstChild());\n        if (next != null && next.getType() == Token.WHILE) {\n          next = next.getFirstChild();\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.WHILE:\n        if (childType == Token.BLOCK) {\n          next = next.getFirstChild();\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.FOR:\n        if (NodeUtil.isForIn(next)) {\n          Node obj = next.getFirstChild().getNext();\n          if (obj.getNext().getType() != Token.BLOCK) {\n            return null;\n          }\n        } else if (next.getChildCount() == 3) {\n          if (childType != Token.BLOCK) {\n            return null;\n          }\n          next = next.getFirstChild().getNext();\n        } else {\n          if (childType != Token.EMPTY) {\n            return null;\n          }\n        }\n        break;\n\n      case Token.TRY:\n        next = next.getFirstChild();\n        break;\n\n      case Token.CATCH:\n        next = next.getFirstChild().getNext();\n        break;\n\n      case Token.SWITCH:\n        next = computeEnd(next.getFirstChild());\n        break;\n\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        Preconditions.checkState(\n            false, \"Should have been handled earlier in the function.\");\n        break;\n\n      case Token.RETURN:\n      case Token.THROW:\n        return null;\n\n      default:\n        return null;\n    }\n  }\n\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..58588d81 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,105 +689,182 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n-    Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+private static Node computeFallThrough(Node node) {\n+  Node next = node;\n+\n+  switch (next.getType()) {\n+    case Token.EMPTY:\n+    case Token.BLOCK:\n+    case Token.SCRIPT:\n+    case Token.LABEL:\n+    case Token.VAR:\n+      for (Node child = next.getFirstChild(); child != null; child = child.getNext()) {\n+        Node n = computeFallThrough(child);\n+        if (n != null) {\n+          return n;\n+        }\n+      }\n+\n+      break;\n+\n+    case Token.WHILE:\n+    case Token.DO:\n+    case Token.FOR:\n+    case Token.FOR_IN:\n+    case Token.IF:\n+    case Token.HOOK:\n+      next = next.getFirstChild();\n+      break;\n+\n+    case Token.TRY:\n+      next = next.getFirstChild();\n+      if (next.getType() != Token.BLOCK) { // this is a catch\n+        next = next.getNext().getNext();\n+      }\n+      break;\n+\n+    case Token.CASE:\n+    case Token.DEFAULT_CASE:\n+      // An empty block can follow the case/default, but in this case, the\n+      // actual next control flow will be determined by the switch statement.\n+      next = next.getNext();\n+      if (next.getType() == Token.EMPTY) {\n+        next = next.getNext();\n+      }\n+      break;\n+\n+    case Token.FUNCTION:\n+      // Control flow does not fall through an entire function definition.\n       return null;\n-    }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n+    case Token.RETURN:\n+    case Token.THROW:\n+      // Early return.\n+      return null;\n+\n+    default:\n+      // other nodes (including statements) just continue\n+      // through the next sibling statement\n+      break;\n+  }\n+\n+  while (next != null) {\n+    int type = next.getType();\n+    int childType = next.getFirstChild() == null\n+        ? Token.EMPTY\n+        : next.getFirstChild().getType();\n+    switch (type) {\n+      case Token.EMPTY:\n+        next = next.getNext();\n+        break;\n+\n+      case Token.BLOCK:\n+      case Token.SCRIPT:\n+      case Token.VAR:\n+      case Token.LABEL:\n+        next = computeFallThrough(next.getFirstChild());\n+        break;\n+\n+      case Token.CONTINUE:\n+        if (next.hasMoreThanOneChild()) {\n+          // continue with label\n+          return null;\n+        }\n+        // fall through\n+      case Token.BREAK:\n+        if (next.getFirstChild() != null) {\n+          return null;\n+        }\n+        // fall through\n+      case Token.EXPR_VOID:\n+      case Token.EXPR_RESULT:\n+        next = next.getNext();\n+        break;\n+\n       case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n+        Node elseBranch = NodeUtil.getElseBranch(next);\n+        if (elseBranch != null) {\n+          Node endOfThen = computeEnd(next.getFirstChild().getNext());\n+          Node endOfElse = computeEnd(elseBranch.getFirstChild());\n+          if (endOfThen == endOfElse) {\n+            next = endOfThen;\n           } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n+            return null;\n           }\n         } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n+          if (childType == Token.BLOCK) {\n+            next = next.getFirstChild();\n+          } else {\n+            return null;\n+          }\n         }\n         break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n-          return parent;\n+\n+      case Token.DO:\n+        next = computeEnd(next.getFirstChild());\n+        if (next != null && next.getType() == Token.WHILE) {\n+          next = next.getFirstChild();\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          return null;\n         }\n+        break;\n+\n       case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n+        if (childType == Token.BLOCK) {\n+          next = next.getFirstChild();\n+        } else {\n+          return null;\n+        }\n+        break;\n+\n+      case Token.FOR:\n+        if (NodeUtil.isForIn(next)) {\n+          Node obj = next.getFirstChild().getNext();\n+          if (obj.getNext().getType() != Token.BLOCK) {\n+            return null;\n           }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n-          } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+        } else if (next.getChildCount() == 3) {\n+          if (childType != Token.BLOCK) {\n+            return null;\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n-            }\n+          next = next.getFirstChild().getNext();\n+        } else {\n+          if (childType != Token.EMPTY) {\n+            return null;\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n         }\n-    }\n+        break;\n+\n+      case Token.TRY:\n+        next = next.getFirstChild();\n+        break;\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n+      case Token.CATCH:\n+        next = next.getFirstChild().getNext();\n+        break;\n \n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n-    }\n+      case Token.SWITCH:\n+        next = computeEnd(next.getFirstChild());\n+        break;\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+      case Token.CASE:\n+      case Token.DEFAULT_CASE:\n+        Preconditions.checkState(\n+            false, \"Should have been handled earlier in the function.\");\n+        break;\n+\n+      case Token.RETURN:\n+      case Token.THROW:\n+        return null;\n+\n+      default:\n+        return null;\n     }\n   }\n \n+  return null;\n+}\n+\n   /**\n    * Computes the destination node of n when we want to fallthrough into the\n    * subtree of n. We don't always create a CFG edge into n itself because of",
    "result_reason": "error: method computeFallThrough(Node) is already defined in class ControlFlowAnalysis",
    "test_result": "ERROR"
}