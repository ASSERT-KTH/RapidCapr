{
    "patch": "              // Note: mayEffectMutableState does not consider if rhs has side effects, so if lhs\n              // has a non-side effecting reference to rhs, there may be a problem.\n              Node rhs = thenOp.getLastChild();\n              if (rhs.hasSideEffects() ||\n                  !mayEffectMutableState(lhs)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..06c8e23a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,11 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // Note: mayEffectMutableState does not consider if rhs has side effects, so if lhs\n+              // has a non-side effecting reference to rhs, there may be a problem.\n+              Node rhs = thenOp.getLastChild();\n+              if (rhs.hasSideEffects() ||\n+                  !mayEffectMutableState(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}