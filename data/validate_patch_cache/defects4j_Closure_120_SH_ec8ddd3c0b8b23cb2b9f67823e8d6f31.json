{
    "patch": "boolean isAssignedOnceInLifetime() {\n    Reference maybeDecl = null;\n    Reference maybeInit = null;\n    boolean isAssigned = false;\n\n    int size = references.size();\n    for (int i = 0; i < size; i++) {\n        if (isInitializingDeclarationAt(i)) {\n        Preconditions.checkState(maybeDecl == null);\n        Preconditions.checkState(maybeInit == null);\n        maybeDecl = references.get(i);\n        } else if (isInitializingAssignmentAt(i)) {\n        Preconditions.checkState(maybeDecl == null);\n        Preconditions.checkState(maybeInit == null);\n        maybeInit = references.get(i);\n        } else if (isSimpleAssignmentAt(i)) {\n        Reference rhs = references.get(i).getRhsOfAssign();\n        if (rhs != null && rhs == maybeInit) {\n            isAssigned = true;\n            maybeDecl = null;\n        } else {\n            maybeDecl = null;\n            maybeInit = null;\n        }\n        } else {\n        maybeDecl = null;\n        maybeInit = null;\n        }\n    }\n\n    return isAssigned;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..141445e6 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,38 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean isAssignedOnceInLifetime() {\n+    Reference maybeDecl = null;\n+    Reference maybeInit = null;\n+    boolean isAssigned = false;\n+\n+    int size = references.size();\n+    for (int i = 0; i < size; i++) {\n+        if (isInitializingDeclarationAt(i)) {\n+        Preconditions.checkState(maybeDecl == null);\n+        Preconditions.checkState(maybeInit == null);\n+        maybeDecl = references.get(i);\n+        } else if (isInitializingAssignmentAt(i)) {\n+        Preconditions.checkState(maybeDecl == null);\n+        Preconditions.checkState(maybeInit == null);\n+        maybeInit = references.get(i);\n+        } else if (isSimpleAssignmentAt(i)) {\n+        Reference rhs = references.get(i).getRhsOfAssign();\n+        if (rhs != null && rhs == maybeInit) {\n+            isAssigned = true;\n+            maybeDecl = null;\n+        } else {\n+            maybeDecl = null;\n+            maybeInit = null;\n+        }\n+        } else {\n+        maybeDecl = null;\n+        maybeInit = null;\n+        }\n+    }\n+\n+    return isAssigned;\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}