{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis() + getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n\n    int years = 0;\n    int months = 0;\n    if (type.isSupported(DurationFieldType.years())) {\n        years = getYears();\n        if (type.isSupported(DurationFieldType.months())) {\n            years += getMonths() / 12;\n            months = getMonths() % 12;\n        } else {\n            years += getMonths() / 12;\n        }\n    } else if (type.isSupported(DurationFieldType.months())) {\n        months = getYears() * 12 + getMonths();\n    }\n\n    return Period.years(years).withMonths(months).withMillis(millis).withType(type).normalizedStandard(ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..6a43377c 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,29 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis() + getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n+            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n+            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n+            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n+            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+\n+    int years = 0;\n+    int months = 0;\n+    if (type.isSupported(DurationFieldType.years())) {\n+        years = getYears();\n+        if (type.isSupported(DurationFieldType.months())) {\n+            years += getMonths() / 12;\n+            months = getMonths() % 12;\n+        } else {\n+            years += getMonths() / 12;\n         }\n-        return result;\n+    } else if (type.isSupported(DurationFieldType.months())) {\n+        months = getYears() * 12 + getMonths();\n     }\n \n+    return Period.years(years).withMonths(months).withMillis(millis).withType(type).normalizedStandard(ISOChronology.getInstanceUTC());\n+}\n+\n }",
    "result_reason": "error: method withMillis in class Period cannot be applied to given types;",
    "test_result": "ERROR"
}