{
    "patch": "public void testCreateCopy3() throws CloneNotSupportedException {\n    TimeSeries s1 = new TimeSeries(\"S1\");\n    s1.add(new Minute(0, 15, 1, 1970), 100.0);\n    s1.add(new Minute(30, 9, 12, 1970), 50.0);\n    s1.add(new Minute(2, 12, 2, 1971), 150.0);\n    TimeSeries s2 = (TimeSeries) s1.clone();\n    TimeSeries s3 = s1.createCopy(0, s1.getItemCount() - 1);\n    \n    assertEquals(s1.getItemCount(), s2.getItemCount());\n    assertEquals(s1.getItemCount(), s3.getItemCount());\n    \n    for (int i = 0; i < s1.getItemCount(); i++) {\n        TimeSeriesDataItem item1 = s1.getDataItem(i);\n        TimeSeriesDataItem item2 = s2.getDataItem(i);\n        TimeSeriesDataItem item3 = s3.getDataItem(i);\n        assertEquals(item1, item2);\n        assertEquals(item1, item3);\n\n        // Compare y-values with a tolerance of EPSILON.\n        assertEquals(item1.getValue().doubleValue(), item2.getValue().doubleValue(), EPSILON);\n        assertEquals(item1.getValue().doubleValue(), item3.getValue().doubleValue(), EPSILON);\n    }\n    \n    assertEquals(100.0, s1.getMaxY(), EPSILON);\n    assertEquals(100.0, s2.getMaxY(), EPSILON);\n    assertEquals(100.0, s3.getMaxY(), EPSILON);\n    \n    s1.delete(0, 1);\n    assertEquals(50.0, s1.getMinY(), EPSILON);\n    assertEquals(150.0, s1.getMaxY(), EPSILON);\n    \n    assertEquals(100.0, s2.getMinY(), EPSILON);\n    assertEquals(100.0, s2.getMaxY(), EPSILON);\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..98ecec2 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1045,31 +1045,40 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n      *\n      * @throws CloneNotSupportedException if there is a cloning problem.\n      */\n-    public TimeSeries createCopy(int start, int end)\n-            throws CloneNotSupportedException {\n-        if (start < 0) {\n-            throw new IllegalArgumentException(\"Requires start >= 0.\");\n-        }\n-        if (end < start) {\n-            throw new IllegalArgumentException(\"Requires start <= end.\");\n-        }\n-        TimeSeries copy = (TimeSeries) super.clone();\n-        copy.data = new java.util.ArrayList();\n-        if (this.data.size() > 0) {\n-            for (int index = start; index <= end; index++) {\n-                TimeSeriesDataItem item\n-                        = (TimeSeriesDataItem) this.data.get(index);\n-                TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n-                try {\n-                    copy.add(clone);\n-                }\n-                catch (SeriesException e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n-        return copy;\n-    }\n+public void testCreateCopy3() throws CloneNotSupportedException {\n+    TimeSeries s1 = new TimeSeries(\"S1\");\n+    s1.add(new Minute(0, 15, 1, 1970), 100.0);\n+    s1.add(new Minute(30, 9, 12, 1970), 50.0);\n+    s1.add(new Minute(2, 12, 2, 1971), 150.0);\n+    TimeSeries s2 = (TimeSeries) s1.clone();\n+    TimeSeries s3 = s1.createCopy(0, s1.getItemCount() - 1);\n+    \n+    assertEquals(s1.getItemCount(), s2.getItemCount());\n+    assertEquals(s1.getItemCount(), s3.getItemCount());\n+    \n+    for (int i = 0; i < s1.getItemCount(); i++) {\n+        TimeSeriesDataItem item1 = s1.getDataItem(i);\n+        TimeSeriesDataItem item2 = s2.getDataItem(i);\n+        TimeSeriesDataItem item3 = s3.getDataItem(i);\n+        assertEquals(item1, item2);\n+        assertEquals(item1, item3);\n+\n+        // Compare y-values with a tolerance of EPSILON.\n+        assertEquals(item1.getValue().doubleValue(), item2.getValue().doubleValue(), EPSILON);\n+        assertEquals(item1.getValue().doubleValue(), item3.getValue().doubleValue(), EPSILON);\n+    }\n+    \n+    assertEquals(100.0, s1.getMaxY(), EPSILON);\n+    assertEquals(100.0, s2.getMaxY(), EPSILON);\n+    assertEquals(100.0, s3.getMaxY(), EPSILON);\n+    \n+    s1.delete(0, 1);\n+    assertEquals(50.0, s1.getMinY(), EPSILON);\n+    assertEquals(150.0, s1.getMaxY(), EPSILON);\n+    \n+    assertEquals(100.0, s2.getMinY(), EPSILON);\n+    assertEquals(100.0, s2.getMaxY(), EPSILON);\n+}\n \n     /**\n      * Creates a new timeseries by copying a subset of the data in this time",
    "result_reason": "error: no suitable constructor found for Minute(int,int,int,int)",
    "test_result": "ERROR"
}