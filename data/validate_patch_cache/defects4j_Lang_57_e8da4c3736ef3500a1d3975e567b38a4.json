{
    "patch": "    private static Set<String> initializeAvailableLocaleSet() {\n        Set<String> set = new HashSet<String>();\n        Locale[] availableLocales = DateFormat.getAvailableLocales();\n        for (Locale locale : availableLocales) {\n            set.add(locale.toString());\n        }\n        cAvailableLocaleSet = set;\n        return set;\n    }\n\n    public static boolean isAvailableLocale(Locale locale) {\n        if (cAvailableLocaleSet == null) {\n            initializeAvailableLocaleSet();\n        }\n        return cAvailableLocaleSet.contains(locale.toString());\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex ceb886e8..f57eca05 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -220,7 +220,22 @@ public class LocaleUtils {\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n-        return cAvailableLocaleSet.contains(locale);\n+    private static Set<String> initializeAvailableLocaleSet() {\n+        Set<String> set = new HashSet<String>();\n+        Locale[] availableLocales = DateFormat.getAvailableLocales();\n+        for (Locale locale : availableLocales) {\n+            set.add(locale.toString());\n+        }\n+        cAvailableLocaleSet = set;\n+        return set;\n+    }\n+\n+    public static boolean isAvailableLocale(Locale locale) {\n+        if (cAvailableLocaleSet == null) {\n+            initializeAvailableLocaleSet();\n+        }\n+        return cAvailableLocaleSet.contains(locale.toString());\n+    }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}