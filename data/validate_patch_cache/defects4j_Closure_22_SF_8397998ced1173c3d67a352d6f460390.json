{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.isComma() || n.isEmpty()) {\n        return;\n    }\n\n    if (parent == null) {\n        return;\n    }\n\n    if (n.isFunction()) {\n        // Always visit the function body, even if it's not being used.\n        t.visitChildren(n, false);\n        return;\n    }\n\n    if (parent.getType() == Token.COMMA) {\n        Node gramps = parent.getParent();\n        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n                return;\n            }\n        } else {\n            for (Node an : parent.getAncestors()) {\n                int ancestorType = an.getType();\n                if (ancestorType == Token.COMMA) {\n                    continue;\n                } else if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n                    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n                        return;\n                    }\n                } else if (ancestorType == Token.IF || ancestorType == Token.WHILE || ancestorType == Token.FOR || ancestorType == Token.DO || ancestorType == Token.CASE) {\n                    if (ancestorType == Token.IF && parent.hasChildren() && parent.getFirstChild() == n) {\n                        return;\n                    } else if (ancestorType == Token.DO && parent.hasChildren() && parent.getLastChild() == n) {\n                        return;\n                    } else if (ancestorType == Token.WHILE && parent.hasChildren() && parent.getFirstChild().getNext() == n) {\n                        return;\n                    } else if (ancestorType == Token.FOR && parent.hasChildren() && (parent.getChildAtIndex(1) == n || parent.getChildAtIndex(2) == n)) {\n                        return;\n                    } else if (ancestorType == Token.CASE && parent.hasChildren() && parent.getFirstChild() == n) {\n                        return;\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n    } else if (parent.isFor() && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n        // Check if the node is part of a for loop initializer or update expression\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n        // Check if the node has a parent which is not an expression statement or a block\n        return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n            return;\n        } else if (n.isExprResult()) {\n            return;\n        }\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        if (n.isString()) {\n            msg = \"Is there a missing '+' on the previous line?\";\n        } else if (isSimpleOp) {\n            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n        }\n\n        t.getCompiler().report(t.makeError(n, Level.WARNING, USELESS_CODE_ERROR, msg));\n        problemNodes.add(n);\n    } else {\n        t.visitChildren(n, true);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex b9aa412c..46ee639f 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,78 +81,81 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.isComma() || n.isEmpty()) {\n+        return;\n     }\n \n     if (parent == null) {\n-      return;\n+        return;\n     }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (parent.getType() == Token.COMMA) {\n-      Node gramps = parent.getParent();\n-      if (gramps.isCall() && parent == gramps.getFirstChild()) {\n-        if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n-      return;\n-        }\n+    if (n.isFunction()) {\n+        // Always visit the function body, even if it's not being used.\n+        t.visitChildren(n, false);\n+        return;\n     }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA)\n-            continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)\n-            return;\n-          else\n-            break;\n+    if (parent.getType() == Token.COMMA) {\n+        Node gramps = parent.getParent();\n+        if (gramps.isCall() && parent == gramps.getFirstChild()) {\n+            if (n == parent.getFirstChild() && parent.getChildCount() == 2 && n.getNext().isName() && \"eval\".equals(n.getNext().getString())) {\n+                return;\n+            }\n+        } else {\n+            for (Node an : parent.getAncestors()) {\n+                int ancestorType = an.getType();\n+                if (ancestorType == Token.COMMA) {\n+                    continue;\n+                } else if (ancestorType == Token.EXPR_RESULT || ancestorType == Token.BLOCK) {\n+                    if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+                        return;\n+                    }\n+                } else if (ancestorType == Token.IF || ancestorType == Token.WHILE || ancestorType == Token.FOR || ancestorType == Token.DO || ancestorType == Token.CASE) {\n+                    if (ancestorType == Token.IF && parent.hasChildren() && parent.getFirstChild() == n) {\n+                        return;\n+                    } else if (ancestorType == Token.DO && parent.hasChildren() && parent.getLastChild() == n) {\n+                        return;\n+                    } else if (ancestorType == Token.WHILE && parent.hasChildren() && parent.getFirstChild().getNext() == n) {\n+                        return;\n+                    } else if (ancestorType == Token.FOR && parent.hasChildren() && (parent.getChildAtIndex(1) == n || parent.getChildAtIndex(2) == n)) {\n+                        return;\n+                    } else if (ancestorType == Token.CASE && parent.hasChildren() && parent.getFirstChild() == n) {\n+                        return;\n+                    }\n+                } else {\n+                    break;\n+                }\n+            }\n         }\n-      }\n+    } else if (parent.isFor() && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext())) {\n+        // Check if the node is part of a for loop initializer or update expression\n     } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||\n-           n == parent.getFirstChild().getNext().getNext())) {\n-      } else {\n-      return;\n-      }\n+        // Check if the node has a parent which is not an expression statement or a block\n+        return;\n     }\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (!isResultUsed &&\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-        return;\n-      } else if (n.isExprResult()) {\n-        return;\n-      }\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n-      }\n+    if (!isResultUsed && (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+        if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+            return;\n+        } else if (n.isExprResult()) {\n+            return;\n+        }\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        if (n.isString()) {\n+            msg = \"Is there a missing '+' on the previous line?\";\n+        } else if (isSimpleOp) {\n+            msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() + \"' operator is not being used.\";\n+        }\n \n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n+        t.getCompiler().report(t.makeError(n, Level.WARNING, USELESS_CODE_ERROR, msg));\n         problemNodes.add(n);\n-      }\n+    } else {\n+        t.visitChildren(n, true);\n     }\n-  }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}