{
    "patch": "private static final int MAX_VISITS = 10000;\n\nprivate void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    for (int visits = 0; visits < MAX_VISITS; visits++) {\n        boolean shouldRetraverse = shouldRetraverse(node);\n        visit(node);\n\n        if (!shouldRetraverse) {\n            Node child = node.getFirstChild();\n            while (child != null) {\n                traverse(child);\n                child = child.getNext();\n            }\n        }\n\n        if (!shouldRetraverse || visits == MAX_VISITS - 1) {\n            break;\n        }\n    }\n\n    Preconditions.checkState(!shouldRetraverse(node), \"too many iterations\");\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..042c2ba3 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,38 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private static final int MAX_VISITS = 10000;\n+\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n-    int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+    for (int visits = 0; visits < MAX_VISITS; visits++) {\n+        boolean shouldRetraverse = shouldRetraverse(node);\n+        visit(node);\n \n-      visit(node);\n-      visits++;\n+        if (!shouldRetraverse) {\n+            Node child = node.getFirstChild();\n+            while (child != null) {\n+                traverse(child);\n+                child = child.getNext();\n+            }\n+        }\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+        if (!shouldRetraverse || visits == MAX_VISITS - 1) {\n+            break;\n+        }\n+    }\n+\n+    Preconditions.checkState(!shouldRetraverse(node), \"too many iterations\");\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}