{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // union types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      if (p.typeA == null) {\n        return new TypePair(this, p.typeB);\n      } else if (p.typeB == null) {\n        return new TypePair(p.typeA, this);\n      } else {\n        if (p.typeA.testForEquality(this) != TestValueType.FALSE) {\n          p.typeA = p.typeA.getGreatestSubtype(this);\n          p.typeB = p.typeB.getLeastSupertype(this);\n        } else if (p.typeB.testForEquality(this) != TestValueType.FALSE) {\n          p.typeA = p.typeA.getLeastSupertype(this);\n          p.typeB = p.typeB.getGreatestSubtype(this);\n        }\n        return new TypePair(p.typeB, p.typeA);\n      }\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n      case FALSE:\n        if (!(that.isUnknownType() || that.isEmptyType())) {\n          return new TypePair(this, that);\n        }\n        break;\n      case UNKNOWN:\n        break;\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..40c9d34a 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,21 +693,37 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n+public TypePair getTypesUnderInequality(JSType that) {\n+    // union types\n     if (that instanceof UnionType) {\n       TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n+      if (p.typeA == null) {\n+        return new TypePair(this, p.typeB);\n+      } else if (p.typeB == null) {\n+        return new TypePair(p.typeA, this);\n+      } else {\n+        if (p.typeA.testForEquality(this) != TestValueType.FALSE) {\n+          p.typeA = p.typeA.getGreatestSubtype(this);\n+          p.typeB = p.typeB.getLeastSupertype(this);\n+        } else if (p.typeB.testForEquality(this) != TestValueType.FALSE) {\n+          p.typeA = p.typeA.getLeastSupertype(this);\n+          p.typeB = p.typeB.getGreatestSubtype(this);\n+        }\n+        return new TypePair(p.typeB, p.typeA);\n+      }\n     }\n \n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n         return new TypePair(null, null);\n-\n       case FALSE:\n+        if (!(that.isUnknownType() || that.isEmptyType())) {\n+          return new TypePair(this, that);\n+        }\n+        break;\n       case UNKNOWN:\n-        return new TypePair(this, that);\n+        break;\n     }\n \n     // switch case is exhaustive",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}