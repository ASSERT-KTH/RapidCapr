{
    "patch": "public int[] getCounts(int index) {\n    if (index < 0 ||\n        index >= totalSize) {\n        throw new OutOfRangeException(index, 0, totalSize);\n    }\n\n    final int[] indices = new int[dimension];\n\n    int count = 0;\n    for (int i = 0; i < last; i++) {\n        int idx = 0;\n        final int offset = uniCounterOffset[i];\n        while (count + offset <= index) {\n            count += offset;\n            ++idx;\n        }\n        indices[i] = idx;\n    }\n    \n    // compute last index based on remaining count\n    int remainingCount = index - count;\n    int lastIndex = 0;\n    while (remainingCount > 0) {\n        remainingCount -= lastIndex + 1;\n        lastIndex++;\n    }\n    indices[last] = lastIndex;\n\n    return indices;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..9f77b1e8b 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -213,37 +213,36 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n      * @throws OutOfRangeException if {@code index} is not between\n      * {@code 0} and the value returned by {@link #getSize()} (excluded).\n      */\n-    public int[] getCounts(int index) {\n-        if (index < 0 ||\n-            index >= totalSize) {\n-            throw new OutOfRangeException(index, 0, totalSize);\n-        }\n+public int[] getCounts(int index) {\n+    if (index < 0 ||\n+        index >= totalSize) {\n+        throw new OutOfRangeException(index, 0, totalSize);\n+    }\n \n-        final int[] indices = new int[dimension];\n+    final int[] indices = new int[dimension];\n \n-        int count = 0;\n-        for (int i = 0; i < last; i++) {\n-            int idx = 0;\n-            final int offset = uniCounterOffset[i];\n-            while (count <= index) {\n-                count += offset;\n-                ++idx;\n-            }\n-            --idx;\n-            count -= offset;\n-            indices[i] = idx;\n-        }\n-\n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n+    int count = 0;\n+    for (int i = 0; i < last; i++) {\n+        int idx = 0;\n+        final int offset = uniCounterOffset[i];\n+        while (count + offset <= index) {\n+            count += offset;\n             ++idx;\n         }\n-        --idx;\n-        indices[last] = idx;\n-\n-        return indices;\n+        indices[i] = idx;\n+    }\n+    \n+    // compute last index based on remaining count\n+    int remainingCount = index - count;\n+    int lastIndex = 0;\n+    while (remainingCount > 0) {\n+        remainingCount -= lastIndex + 1;\n+        lastIndex++;\n     }\n+    indices[last] = lastIndex;\n+\n+    return indices;\n+}\n \n     /**\n      * Convert to unidimensional counter.",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [3][2] expected:<3> but was:<2>",
    "test_result": "FAIL"
}