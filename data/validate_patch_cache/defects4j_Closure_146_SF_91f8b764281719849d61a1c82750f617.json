{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    if (that == null) {\n      return new TypePair(this, null);\n    }\n    if (this.isUnknown()) {\n      return new TypePair(that, null);\n    }\n\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n        return new TypePair(this, that);\n\n      case UNKNOWN:\n        ObjectType maybeObjectType = that.toMaybeObjectType();\n        if (maybeObjectType != null && !this.isBottom()) {\n          return new TypePair(this.getRestrictedType(maybeObjectType), that);\n        }\n        break;\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..1d7ffdba 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,7 +693,14 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n+public TypePair getTypesUnderInequality(JSType that) {\n+    if (that == null) {\n+      return new TypePair(this, null);\n+    }\n+    if (this.isUnknown()) {\n+      return new TypePair(that, null);\n+    }\n+\n     // unions types\n     if (that instanceof UnionType) {\n       TypePair p = that.getTypesUnderInequality(this);\n@@ -706,8 +713,14 @@ public abstract class JSType implements Serializable {\n         return new TypePair(null, null);\n \n       case FALSE:\n-      case UNKNOWN:\n         return new TypePair(this, that);\n+\n+      case UNKNOWN:\n+        ObjectType maybeObjectType = that.toMaybeObjectType();\n+        if (maybeObjectType != null && !this.isBottom()) {\n+          return new TypePair(this.getRestrictedType(maybeObjectType), that);\n+        }\n+        break;\n     }\n \n     // switch case is exhaustive",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}