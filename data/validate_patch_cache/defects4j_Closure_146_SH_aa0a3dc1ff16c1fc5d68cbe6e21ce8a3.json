{
    "patch": "      case TRUE:\n        JSType thisResolved = this.isResolved() ? this.resolvedType : this;\n        JSType thatResolved = that.isResolved() ? that.resolvedType : that;\n        if (thisResolved.isSubtypeOf(thatResolved)) {\n          return new TypePair(thisResolved, thatResolved);\n        } else if (thatResolved.isSubtypeOf(thisResolved)) {\n          return new TypePair(thatResolved, thisResolved);\n        } else {\n          break;\n        }\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..35d74403 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,20 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+      case TRUE:\n+        JSType thisResolved = this.isResolved() ? this.resolvedType : this;\n+        JSType thatResolved = that.isResolved() ? that.resolvedType : that;\n+        if (thisResolved.isSubtypeOf(thatResolved)) {\n+          return new TypePair(thisResolved, thatResolved);\n+        } else if (thatResolved.isSubtypeOf(thisResolved)) {\n+          return new TypePair(thatResolved, thisResolved);\n+        } else {\n+          break;\n+        }\n+\n+      case FALSE:\n+      case UNKNOWN:\n+        return new TypePair(this, that);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}