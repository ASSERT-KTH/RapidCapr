{
    "patch": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n                case QUOTE:\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold,\n                          pos.getIndex() - lastHold - 1);\n                default:\n                    next(pos);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..c3bc93b9 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -415,7 +415,7 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @return <code>appendTo</code>\n      */\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n+        StringBuffer appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n@@ -424,19 +424,19 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int lastHold = start;\n         for (int i = pos.getIndex(); i < pattern.length(); i++) {\n             if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n                         QUOTE);\n                 pos.setIndex(i + ESCAPED_QUOTE.length());\n                 lastHold = pos.getIndex();\n                 continue;\n             }\n             switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+                case QUOTE:\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c, lastHold,\n+                          pos.getIndex() - lastHold - 1);\n+                default:\n+                    next(pos);\n             }\n         }\n         throw new IllegalArgumentException(",
    "result_reason": "java.lang.OutOfMemoryError: Requested array size exceeds VM limit",
    "test_result": "FAIL"
}