{
    "patch": "    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n            throws MaxIterationsExceededException, FunctionEvaluationException {\n        if (f == null) {\n            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n        }\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        if ((yMin * yMax) > 0.0) {\n            throw new NoBracketingException(min, max, yMin, yMax);\n        }\n        // Provide an initial guess if not in [min,max].\n        if (initial < min || initial > max) {\n            initial = 0.5 * (min + max);\n        }\n        return solve(f, min, max, initial, getAbsoluteAccuracy());\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..ef394457b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,22 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n+            throws MaxIterationsExceededException, FunctionEvaluationException {\n+        if (f == null) {\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n+        }\n+        double yMin = f.value(min);\n+        double yMax = f.value(max);\n+        if ((yMin * yMax) > 0.0) {\n+            throw new NoBracketingException(min, max, yMin, yMax);\n+        }\n+        // Provide an initial guess if not in [min,max].\n+        if (initial < min || initial > max) {\n+            initial = 0.5 * (min + max);\n+        }\n+        return solve(f, min, max, initial, getAbsoluteAccuracy());\n+    }\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}