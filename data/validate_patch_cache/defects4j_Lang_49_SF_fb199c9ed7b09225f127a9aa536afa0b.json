{
    "patch": "    public Fraction reduce() {\n        if (numerator == 0) {\n            return new Fraction(0, 1);\n        }\n        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n        int reducedNum = numerator / gcd;\n        int reducedDenom = denominator / gcd;\n        if (reducedDenom < 0) {\n            reducedDenom = -reducedDenom;\n            reducedNum = -reducedNum;\n        }\n        return new Fraction(reducedNum, reducedDenom);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/Fraction.java b/src/java/org/apache/commons/lang/math/Fraction.java\nindex 5f8e5655..902ddbd3 100644\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n@@ -463,11 +463,17 @@ public final class Fraction extends Number implements Comparable {\n      * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n-        int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n-        if (gcd == 1) {\n-            return this;\n+        if (numerator == 0) {\n+            return new Fraction(0, 1);\n+        }\n+        int gcd = greatestCommonDivisor(Math.abs(numerator), Math.abs(denominator));\n+        int reducedNum = numerator / gcd;\n+        int reducedDenom = denominator / gcd;\n+        if (reducedDenom < 0) {\n+            reducedDenom = -reducedDenom;\n+            reducedNum = -reducedNum;\n         }\n-        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+        return new Fraction(reducedNum, reducedDenom);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<-2/3> was not:<-2/3>",
    "test_result": "FAIL"
}