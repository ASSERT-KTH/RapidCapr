{
    "patch": "public double[] fit() {\n    final MultivariateFunction function = new ParametricGaussianFunction();\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    final int maxEvaluations = 1000;\n    final double[] lower = new double[guess.length];\n    Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n    final double[] upper = null;\n    final GoalType goal = GoalType.MINIMIZE;\n    final MaxEval maxEval = new MaxEval(maxEvaluations);\n    final ObjectiveFunction objective = new ObjectiveFunction(function);\n    final MultiStartOptimizer multiStartOptimizer = new MultiStartSimplexOptimizer(new SimplexOptimizer(1e-10, 1e-30), 10, 5);\n    final PointValuePair result = multiStartOptimizer.optimize(\n            new MaxEval(1000),\n            objective,\n            goal,\n            new InitialGuess(guess),\n            new SimpleBounds(lower, upper));\n    return result.getPoint();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..bdb689e15 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,25 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n-    }\n+public double[] fit() {\n+    final MultivariateFunction function = new ParametricGaussianFunction();\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    final int maxEvaluations = 1000;\n+    final double[] lower = new double[guess.length];\n+    Arrays.fill(lower, Double.NEGATIVE_INFINITY);\n+    final double[] upper = null;\n+    final GoalType goal = GoalType.MINIMIZE;\n+    final MaxEval maxEval = new MaxEval(maxEvaluations);\n+    final ObjectiveFunction objective = new ObjectiveFunction(function);\n+    final MultiStartOptimizer multiStartOptimizer = new MultiStartSimplexOptimizer(new SimplexOptimizer(1e-10, 1e-30), 10, 5);\n+    final PointValuePair result = multiStartOptimizer.optimize(\n+            new MaxEval(1000),\n+            objective,\n+            goal,\n+            new InitialGuess(guess),\n+            new SimpleBounds(lower, upper));\n+    return result.getPoint();\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}