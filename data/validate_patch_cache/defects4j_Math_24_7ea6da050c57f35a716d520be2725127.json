{
    "patch": "   protected UnivariatePointValuePair doOptimize() {\n        final double min = getMin();\n        final double max = getMax();\n        final double startValue = getStartValue();\n        final double target = getTarget();\n\n        final double rel = getRelativeAccuracy();\n        final double abstol = getAbsoluteAccuracy();\n\n        if (rel < 0) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.RELATIVE_TOLERANCE_NOT_POSITIVE, rel);\n        }\n\n        if (abstol < 0) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.ABSOLUTE_TOLERANCE_NOT_POSITIVE, abstol);\n        }\n\n        if (min >= max) {\n            throw new MathIllegalArgumentException(LocalizedOptimFormats.ENDPOINTS_NOT_AN_INTERVAL, min, max);\n        }\n\n        double a = min;\n        double fa = computeObjectiveValue(a) - target;\n        if (FastMath.abs(fa) <= abstol) {\n            return new UnivariatePointValuePair(a, fa + target);\n        }\n\n        double b = max;\n        double fb = computeObjectiveValue(b) - target;\n        if (FastMath.abs(fb) <= abstol) {\n            return new UnivariatePointValuePair(b, fb + target);\n        }\n\n        verifyBracketing(a, b);\n\n        double c = a;\n        double fc = fa;\n        double d = b - c;\n        double e = d;\n\n        UnivariatePointValuePair best = null;\n        while (true) {\n            if (FastMath.abs(fc) < FastMath.abs(fb)) {\n                a = b;\n                b = c;\n                c = a;\n                fa = fb;\n                fb = fc;\n                fc = fa;\n            }\n\n            final double tol = FastMath.max(rel * FastMath.abs(b), abstol);\n            final double m = 0.5 * (c - b);\n\n            if (FastMath.abs(m) <= tol ||\n                Precision.equals(fb, 0.0, FastMath.max(FastMath.abs(fa), FastMath.abs(fb)) * rel + abstol)) {\n                best = new UnivariatePointValuePair(b, fb + target);\n                break;\n            }\n\n            if (FastMath.abs(e) < tol || FastMath.abs(fa) <= FastMath.abs(fb)) {\n                /",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\nindex b6ce68ef3..0333aa21f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java\n@@ -106,169 +106,68 @@ public class BrentOptimizer extends BaseAbstractUnivariateOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected UnivariatePointValuePair doOptimize() {\n-        final boolean isMinim = getGoalType() == GoalType.MINIMIZE;\n-        final double lo = getMin();\n-        final double mid = getStartValue();\n-        final double hi = getMax();\n+   protected UnivariatePointValuePair doOptimize() {\n+        final double min = getMin();\n+        final double max = getMax();\n+        final double startValue = getStartValue();\n+        final double target = getTarget();\n \n-        // Optional additional convergence criteria.\n-        final ConvergenceChecker<UnivariatePointValuePair> checker\n-            = getConvergenceChecker();\n+        final double rel = getRelativeAccuracy();\n+        final double abstol = getAbsoluteAccuracy();\n \n-        double a;\n-        double b;\n-        if (lo < hi) {\n-            a = lo;\n-            b = hi;\n-        } else {\n-            a = hi;\n-            b = lo;\n+        if (rel < 0) {\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.RELATIVE_TOLERANCE_NOT_POSITIVE, rel);\n         }\n \n-        double x = mid;\n-        double v = x;\n-        double w = x;\n-        double d = 0;\n-        double e = 0;\n-        double fx = computeObjectiveValue(x);\n-        if (!isMinim) {\n-            fx = -fx;\n+        if (abstol < 0) {\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.ABSOLUTE_TOLERANCE_NOT_POSITIVE, abstol);\n         }\n-        double fv = fx;\n-        double fw = fx;\n-\n-        UnivariatePointValuePair previous = null;\n-        UnivariatePointValuePair current\n-            = new UnivariatePointValuePair(x, isMinim ? fx : -fx);\n-\n-        int iter = 0;\n-        while (true) {\n-            final double m = 0.5 * (a + b);\n-            final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;\n-            final double tol2 = 2 * tol1;\n \n-            // Default stopping criterion.\n-            final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);\n-            if (!stop) {\n-                double p = 0;\n-                double q = 0;\n-                double r = 0;\n-                double u = 0;\n-\n-                if (FastMath.abs(e) > tol1) { // Fit parabola.\n-                    r = (x - w) * (fx - fv);\n-                    q = (x - v) * (fx - fw);\n-                    p = (x - v) * q - (x - w) * r;\n-                    q = 2 * (q - r);\n-\n-                    if (q > 0) {\n-                        p = -p;\n-                    } else {\n-                        q = -q;\n-                    }\n-\n-                    r = e;\n-                    e = d;\n+        if (min >= max) {\n+            throw new MathIllegalArgumentException(LocalizedOptimFormats.ENDPOINTS_NOT_AN_INTERVAL, min, max);\n+        }\n \n-                    if (p > q * (a - x) &&\n-                        p < q * (b - x) &&\n-                        FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {\n-                        // Parabolic interpolation step.\n-                        d = p / q;\n-                        u = x + d;\n+        double a = min;\n+        double fa = computeObjectiveValue(a) - target;\n+        if (FastMath.abs(fa) <= abstol) {\n+            return new UnivariatePointValuePair(a, fa + target);\n+        }\n \n-                        // f must not be evaluated too close to a or b.\n-                        if (u - a < tol2 || b - u < tol2) {\n-                            if (x <= m) {\n-                                d = tol1;\n-                            } else {\n-                                d = -tol1;\n-                            }\n-                        }\n-                    } else {\n-                        // Golden section step.\n-                        if (x < m) {\n-                            e = b - x;\n-                        } else {\n-                            e = a - x;\n-                        }\n-                        d = GOLDEN_SECTION * e;\n-                    }\n-                } else {\n-                    // Golden section step.\n-                    if (x < m) {\n-                        e = b - x;\n-                    } else {\n-                        e = a - x;\n-                    }\n-                    d = GOLDEN_SECTION * e;\n-                }\n+        double b = max;\n+        double fb = computeObjectiveValue(b) - target;\n+        if (FastMath.abs(fb) <= abstol) {\n+            return new UnivariatePointValuePair(b, fb + target);\n+        }\n \n-                // Update by at least \"tol1\".\n-                if (FastMath.abs(d) < tol1) {\n-                    if (d >= 0) {\n-                        u = x + tol1;\n-                    } else {\n-                        u = x - tol1;\n-                    }\n-                } else {\n-                    u = x + d;\n-                }\n+        verifyBracketing(a, b);\n \n-                double fu = computeObjectiveValue(u);\n-                if (!isMinim) {\n-                    fu = -fu;\n-                }\n+        double c = a;\n+        double fc = fa;\n+        double d = b - c;\n+        double e = d;\n \n-                // User-defined convergence checker.\n-                previous = current;\n-                current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);\n+        UnivariatePointValuePair best = null;\n+        while (true) {\n+            if (FastMath.abs(fc) < FastMath.abs(fb)) {\n+                a = b;\n+                b = c;\n+                c = a;\n+                fa = fb;\n+                fb = fc;\n+                fc = fa;\n+            }\n \n-                if (checker != null) {\n-                    if (checker.converged(iter, previous, current)) {\n-                        return current;\n-                    }\n-                }\n+            final double tol = FastMath.max(rel * FastMath.abs(b), abstol);\n+            final double m = 0.5 * (c - b);\n \n-                // Update a, b, v, w and x.\n-                if (fu <= fx) {\n-                    if (u < x) {\n-                        b = x;\n-                    } else {\n-                        a = x;\n-                    }\n-                    v = w;\n-                    fv = fw;\n-                    w = x;\n-                    fw = fx;\n-                    x = u;\n-                    fx = fu;\n-                } else {\n-                    if (u < x) {\n-                        a = u;\n-                    } else {\n-                        b = u;\n-                    }\n-                    if (fu <= fw ||\n-                        Precision.equals(w, x)) {\n-                        v = w;\n-                        fv = fw;\n-                        w = u;\n-                        fw = fu;\n-                    } else if (fu <= fv ||\n-                               Precision.equals(v, x) ||\n-                               Precision.equals(v, w)) {\n-                        v = u;\n-                        fv = fu;\n-                    }\n-                }\n-            } else { // Default termination (Brent's criterion).\n-                return current;\n+            if (FastMath.abs(m) <= tol ||\n+                Precision.equals(fb, 0.0, FastMath.max(FastMath.abs(fa), FastMath.abs(fb)) * rel + abstol)) {\n+                best = new UnivariatePointValuePair(b, fb + target);\n+                break;\n             }\n-            ++iter;\n-        }\n-    }\n+\n+            if (FastMath.abs(e) < tol || FastMath.abs(fa) <= FastMath.abs(fb)) {\n+                /\n \n     /**\n      * Selects the best of two points.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}