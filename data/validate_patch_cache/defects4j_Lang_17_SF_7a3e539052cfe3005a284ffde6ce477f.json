{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = Character.codePointCount(input, 0, input.length());\n    while (pos < len) {\n        int[] translatedCodePoints = translateCodePoints(input, pos);\n        for (int cp : translatedCodePoints) {\n            out.write(cp);\n        }\n        pos += translatedCodePoints.length == 0 ? 1 : translatedCodePoints.length;\n    }\n}\n\nprivate int[] translateCodePoints(CharSequence input, int pos) {\n    int cp = Character.codePointAt(input, pos);\n    int[] translatedCodePoints = translate(cp);\n    return translatedCodePoints != null ? translatedCodePoints : new int[]{cp};\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..bfd8ccc9 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,29 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n-            }\n-            pos++;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = Character.codePointCount(input, 0, input.length());\n+    while (pos < len) {\n+        int[] translatedCodePoints = translateCodePoints(input, pos);\n+        for (int cp : translatedCodePoints) {\n+            out.write(cp);\n         }\n+        pos += translatedCodePoints.length == 0 ? 1 : translatedCodePoints.length;\n     }\n+}\n+\n+private int[] translateCodePoints(CharSequence input, int pos) {\n+    int cp = Character.codePointAt(input, pos);\n+    int[] translatedCodePoints = translate(cp);\n+    return translatedCodePoints != null ? translatedCodePoints : new int[]{cp};\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(int)",
    "test_result": "ERROR"
}