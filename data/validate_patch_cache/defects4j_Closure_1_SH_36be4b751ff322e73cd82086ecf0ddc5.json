{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node param = argList.getFirstChild();\n    while (param != null) {\n      Node next = param.getNext();\n      Var var = fnScope.getVar(param.getString());\n      if (var != null && referenced.contains(var)) {\n        List<Var> varList = referenced.get(var.getName());\n        Set<Node> nameNodes = new HashSet<>();\n        for (Var v : varList) {\n          Node nameNode = v.getNameNode();\n          while (nameNode != null && nameNode.isDefaultValue()) {\n            nameNode = nameNode.getFirstChild();\n          }\n          nameNodes.add(nameNode);\n\n        }\n        boolean hasAll = true;\n        for (Node nameNode : nameNodes) {\n          if (nameNode == null || !NodeUtil.references(nodeFinder, function, nameNode)) {\n            hasAll = false;\n            break;\n          }\n        }\n        if (!hasAll) {\n          argList.removeChild(param);\n          compiler.reportChangeToEnclosingScope(argList);\n        }\n      } else {\n        argList.removeChild(param);\n        compiler.reportChangeToEnclosingScope(argList);\n      }\n      param = next;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..23017421 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,55 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node param = argList.getFirstChild();\n+    while (param != null) {\n+      Node next = param.getNext();\n+      Var var = fnScope.getVar(param.getString());\n+      if (var != null && referenced.contains(var)) {\n+        List<Var> varList = referenced.get(var.getName());\n+        Set<Node> nameNodes = new HashSet<>();\n+        for (Var v : varList) {\n+          Node nameNode = v.getNameNode();\n+          while (nameNode != null && nameNode.isDefaultValue()) {\n+            nameNode = nameNode.getFirstChild();\n+          }\n+          nameNodes.add(nameNode);\n+\n+        }\n+        boolean hasAll = true;\n+        for (Node nameNode : nameNodes) {\n+          if (nameNode == null || !NodeUtil.references(nodeFinder, function, nameNode)) {\n+            hasAll = false;\n+            break;\n+          }\n+        }\n+        if (!hasAll) {\n+          argList.removeChild(param);\n+          compiler.reportChangeToEnclosingScope(argList);\n+        }\n+      } else {\n+        argList.removeChild(param);\n+        compiler.reportChangeToEnclosingScope(argList);\n+      }\n+      param = next;\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}