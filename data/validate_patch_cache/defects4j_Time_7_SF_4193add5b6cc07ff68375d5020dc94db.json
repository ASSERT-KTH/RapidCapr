{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n    \n    Chronology chrono = selectChronology(instant.getChronology());\n    long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n\n    // check if current date is Feb 29 and it is not a leap year\n    boolean isLeapYear = chrono.year().isLeap(instantLocal);\n    if (!isLeapYear) {\n        int currentMonth = chrono.monthOfYear().get(instantLocal);\n        if (currentMonth == 2) {\n            int currentDay = chrono.dayOfMonth().get(instantLocal);\n            if (currentDay == 29) {\n                // current date is Feb 29 of a non-leap year, adjust the day to 28\n                MutableDateTime mdt = new MutableDateTime(instantLocal, chrono);\n                mdt.setDayOfMonth(28);\n                instantLocal = mdt.getMillis();\n            }\n        }\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantLocal, chrono, iLocale, iPivotYear);\n    bucket.setZone(chrono.getZone());\n    \n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos < 0) {\n        instant.setMillis(instantLocal);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }\n    \n    instant.setMillis(bucket.computeMillis(false, text));\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..037e36a8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,58 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+    \n+    Chronology chrono = selectChronology(instant.getChronology());\n+    long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n+\n+    // check if current date is Feb 29 and it is not a leap year\n+    boolean isLeapYear = chrono.year().isLeap(instantLocal);\n+    if (!isLeapYear) {\n+        int currentMonth = chrono.monthOfYear().get(instantLocal);\n+        if (currentMonth == 2) {\n+            int currentDay = chrono.dayOfMonth().get(instantLocal);\n+            if (currentDay == 29) {\n+                // current date is Feb 29 of a non-leap year, adjust the day to 28\n+                MutableDateTime mdt = new MutableDateTime(instantLocal, chrono);\n+                mdt.setDayOfMonth(28);\n+                instantLocal = mdt.getMillis();\n+            }\n         }\n-        instant.setChronology(chrono);\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantLocal, chrono, iLocale, iPivotYear);\n+    bucket.setZone(chrono.getZone());\n+    \n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos < 0) {\n+        instant.setMillis(instantLocal);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n         return newPos;\n     }\n+    \n+    instant.setMillis(bucket.computeMillis(false, text));\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "java.lang.ExceptionInInitializerError",
    "test_result": "FAIL"
}