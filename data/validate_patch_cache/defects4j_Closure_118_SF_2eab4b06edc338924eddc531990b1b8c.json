{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      Set<String> childNames = new HashSet<>();\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        if (!childNames.add(name)) {\n          compiler.report(JSError.make(\n              t.getSourceName(), child, Warnings.DUPLICATE_OBJECT_KEY,\n              \"Duplicate property name: \" + name));\n        }\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..9a135cf6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,15 +488,17 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+      Set<String> childNames = new HashSet<>();\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n-\n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n+        if (!childNames.add(name)) {\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, Warnings.DUPLICATE_OBJECT_KEY,\n+              \"Duplicate property name: \" + name));\n+        }\n         T type = typeSystem.getType(getScope(), n, name);\n-\n         Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n                                    processProperty(t, prop, type, null))) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}