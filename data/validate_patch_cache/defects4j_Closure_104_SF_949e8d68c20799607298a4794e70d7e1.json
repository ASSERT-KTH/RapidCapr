{
    "patch": "  @Override\n  public JSType greatestSubtype(JSType that, SubtypeCache cache) {\n    if (this.isBottom()) {\n      return this;\n    } else if (that.isTop()) {\n      return that;\n    } else if (this.isUnknownType()) {\n      return that;\n    } else if (that.isUnknownType()) {\n      return this;\n    }\n    // Check if the types are already equal\n    if (this.equals(that)) {\n      return this;\n    }\n    // Compute the greatest subtype of two union types\n    if (that.isUnionType()) {\n      UnionTypeBuilder builder = new UnionTypeBuilder(getCommonTypes());\n      for (JSType alternate : ((UnionType) that).alternates) {\n        JSType greatestOfOneAlternate = this.greatestSubtype(alternate, cache);\n        if (!greatestOfOneAlternate.isBottom()) {\n          builder.addAlternate(greatestOfOneAlternate);\n        }\n      }\n      if (builder.isEmpty()) {\n        return JSType.BOTTOM;\n      } else {\n        return builder.build();\n      }\n    }\n    // Compute the greatest subtype of two non-union types\n    if (this.isNumber() && that.isNumber()) {\n      if ((this.isTruthy() || this.isFalsey()) && (that.isTruthy() || that.isFalsey())) {\n        return JSType.BOOLEAN;\n      } else if (this.isUnknownType() || that.isUnknownType()) {\n        return JSType.NUMBER;\n      } else {\n        NumberKind kind1 = this.getNumberKind();\n        NumberKind kind2 = that.getNumberKind();\n        if (kind1 != null && kind2 != null) {\n          return JSType.fromTypeAndExtraInfo(JSTypeNative.NUMBER_TYPE,\n              kind1.leastCommonKind(kind2));\n        } else {\n          return JSType.NUMBER;\n        }\n      }\n    } else if (this.isNullOrUndef() && that.isNullOrUndef()) {\n      return this.getNativeType(JSTypeNative.NULL_TYPE);\n    } else if (this.isString() && that.isString()) {\n      return JSType.STRING;\n    } else if (this.isNullOrUndef() && that.isBoolean()) {\n      return that;\n    } else if (this.isBoolean() && that.isNullOrUndef()) {\n      return this;\n    } else if (this.isNullOrUndef()) {\n      return that;\n    } else if (that.isNullOrUndef()) {\n      return this;\n    } else if (this.isObjectType() && that.isObjectType()) {\n      ObjectType thisAsObjType = (ObjectType) this;\n      ObjectType thatAsObjType = (ObjectType) that;\n      if (thisAsObjType.isStructurallyEquivalentTo(thatAsObjType)) {\n        ObjectType result = ObjectType.join(thisAsObjType, thatAsObjType);\n        return result == null ? JSType.BOTTOM : result;\n      } else {\n        return JSType.BOTTOM;\n      }\n    } else if (this.isFunctionType() && that.isFunctionType()) {\n      FunctionType thisAsFuncType = (FunctionType) this;\n      FunctionType thatAsFuncType = (FunctionType) that;\n      FunctionType merged = FunctionType.mergedTypeWithUnknowns(thisAsFuncType, thatAsFuncType);\n      return merged == null ? JSType.BOTTOM : merged;\n    } else if (this.isEnumElementType() && that.isEnumElementType()) {\n      if (this.equals(that)) {\n        return this;\n      } else {\n        return JSType.BOTTOM;\n      }\n    }\n    return JSType.BOTTOM;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..f06c533c 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,87 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+  @Override\n+  public JSType greatestSubtype(JSType that, SubtypeCache cache) {\n+    if (this.isBottom()) {\n+      return this;\n+    } else if (that.isTop()) {\n+      return that;\n+    } else if (this.isUnknownType()) {\n+      return that;\n+    } else if (that.isUnknownType()) {\n+      return this;\n+    }\n+    // Check if the types are already equal\n+    if (this.equals(that)) {\n+      return this;\n+    }\n+    // Compute the greatest subtype of two union types\n+    if (that.isUnionType()) {\n+      UnionTypeBuilder builder = new UnionTypeBuilder(getCommonTypes());\n+      for (JSType alternate : ((UnionType) that).alternates) {\n+        JSType greatestOfOneAlternate = this.greatestSubtype(alternate, cache);\n+        if (!greatestOfOneAlternate.isBottom()) {\n+          builder.addAlternate(greatestOfOneAlternate);\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+      if (builder.isEmpty()) {\n+        return JSType.BOTTOM;\n+      } else {\n+        return builder.build();\n+      }\n     }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+    // Compute the greatest subtype of two non-union types\n+    if (this.isNumber() && that.isNumber()) {\n+      if ((this.isTruthy() || this.isFalsey()) && (that.isTruthy() || that.isFalsey())) {\n+        return JSType.BOOLEAN;\n+      } else if (this.isUnknownType() || that.isUnknownType()) {\n+        return JSType.NUMBER;\n+      } else {\n+        NumberKind kind1 = this.getNumberKind();\n+        NumberKind kind2 = that.getNumberKind();\n+        if (kind1 != null && kind2 != null) {\n+          return JSType.fromTypeAndExtraInfo(JSTypeNative.NUMBER_TYPE,\n+              kind1.leastCommonKind(kind2));\n+        } else {\n+          return JSType.NUMBER;\n+        }\n+      }\n+    } else if (this.isNullOrUndef() && that.isNullOrUndef()) {\n+      return this.getNativeType(JSTypeNative.NULL_TYPE);\n+    } else if (this.isString() && that.isString()) {\n+      return JSType.STRING;\n+    } else if (this.isNullOrUndef() && that.isBoolean()) {\n+      return that;\n+    } else if (this.isBoolean() && that.isNullOrUndef()) {\n+      return this;\n+    } else if (this.isNullOrUndef()) {\n+      return that;\n+    } else if (that.isNullOrUndef()) {\n+      return this;\n+    } else if (this.isObjectType() && that.isObjectType()) {\n+      ObjectType thisAsObjType = (ObjectType) this;\n+      ObjectType thatAsObjType = (ObjectType) that;\n+      if (thisAsObjType.isStructurallyEquivalentTo(thatAsObjType)) {\n+        ObjectType result = ObjectType.join(thisAsObjType, thatAsObjType);\n+        return result == null ? JSType.BOTTOM : result;\n+      } else {\n+        return JSType.BOTTOM;\n+      }\n+    } else if (this.isFunctionType() && that.isFunctionType()) {\n+      FunctionType thisAsFuncType = (FunctionType) this;\n+      FunctionType thatAsFuncType = (FunctionType) that;\n+      FunctionType merged = FunctionType.mergedTypeWithUnknowns(thisAsFuncType, thatAsFuncType);\n+      return merged == null ? JSType.BOTTOM : merged;\n+    } else if (this.isEnumElementType() && that.isEnumElementType()) {\n+      if (this.equals(that)) {\n+        return this;\n+      } else {\n+        return JSType.BOTTOM;\n+      }\n     }\n+    return JSType.BOTTOM;\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}