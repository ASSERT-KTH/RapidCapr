{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean changed = false;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == DateTimeFieldType.monthOfYear().getIndexedField() && values[i] == 2 && DateTimeUtils.isLeapYear(partial.get(DateTimeFieldType.year()))) {\n                    int daysInMonth = iChronology.daysInMonth(partial, partial.getFieldValue(DateTimeFieldType.year()) * 100 + values[i]);\n                    if (values[DateTimeFieldType.dayOfMonth().getIndexedField()] > daysInMonth) {\n                        values[DateTimeFieldType.dayOfMonth().getIndexedField()] = daysInMonth;\n                        changed = true;\n                    }\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            if (changed) {\n                try {\n                    instant = partial.getFieldType(DateTimeFieldType.dayOfMonth().getIndexedField()).getField(iChronology).set(instant, values[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n                } catch (IllegalFieldValueException ex) {\n                    // revert date to nearest sane value.\n                    int newDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth());\n                    instant = partial.getFieldType(DateTimeFieldType.dayOfMonth().getIndexedField()).getField(iChronology).set(instant, newDay);\n                }\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..85f4b7d1 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean changed = false;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (i == DateTimeFieldType.monthOfYear().getIndexedField() && values[i] == 2 && DateTimeUtils.isLeapYear(partial.get(DateTimeFieldType.year()))) {\n+                    int daysInMonth = iChronology.daysInMonth(partial, partial.getFieldValue(DateTimeFieldType.year()) * 100 + values[i]);\n+                    if (values[DateTimeFieldType.dayOfMonth().getIndexedField()] > daysInMonth) {\n+                        values[DateTimeFieldType.dayOfMonth().getIndexedField()] = daysInMonth;\n+                        changed = true;\n+                    }\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n+            if (changed) {\n+                try {\n+                    instant = partial.getFieldType(DateTimeFieldType.dayOfMonth().getIndexedField()).getField(iChronology).set(instant, values[DateTimeFieldType.dayOfMonth().getIndexedField()]);\n+                } catch (IllegalFieldValueException ex) {\n+                    // revert date to nearest sane value.\n+                    int newDay = iChronology.getMaximumValue(DateTimeFieldType.dayOfMonth());\n+                    instant = partial.getFieldType(DateTimeFieldType.dayOfMonth().getIndexedField()).getField(iChronology).set(instant, newDay);\n+                }\n+            }\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}