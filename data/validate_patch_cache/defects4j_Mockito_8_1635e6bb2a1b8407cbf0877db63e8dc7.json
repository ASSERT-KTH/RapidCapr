{
    "patch": "if (!(classType instanceof ParameterizedType)) {\n    return;\n}\nParameterizedType parameterizedType = (ParameterizedType) classType;\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\nMap<TypeVariable<?>, Type> contextualActualTypeParameters = new ConcurrentHashMap<TypeVariable<?>, Type>();\nSet<TypeVariable<?>> encounteredTypeVariables = new HashSet<TypeVariable<?>>();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\n    TypeVariable<?> typeVariable = ((Class<?>) parameterizedType.getRawType()).getTypeParameters()[i];\n    Type actualTypeArgument = actualTypeArguments[i];\n    if (actualTypeArgument instanceof ParameterizedType) {\n        contextualActualTypeParameters.putAll(calculateContextualTypeParameters((ParameterizedType) actualTypeArgument, encounteringClass, encounterIndex, encounteringTypeParameter, enclosureInstance, enclosureInstanceIndex));\n    } else if (actualTypeArgument instanceof TypeVariable) {\n        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n        if (encounteredTypeVariables.contains(actualTypeVariable)) {\n            // Already encountered this type variable, break the recursion to prevent stack overflow\n            contextualActualTypeParameters.put(typeVariable, null);\n        } else {\n            encounteredTypeVariables.add(actualTypeVariable);\n            Type type = this.contextualActualTypeParameters.get(actualTypeVariable);\n            if (type != null) {\n                contextualActualTypeParameters.put(typeVariable, type);\n            } else { // if the type is null, it means that there is not such a type parameter in the outer context\n                contextualActualTypeParameters.put(typeVariable, actualTypeArgument);\n            }\n        }\n    } else {\n        contextualActualTypeParameters.put(typeVariable, actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..472dd0905 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,36 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+if (!(classType instanceof ParameterizedType)) {\n+    return;\n+}\n+ParameterizedType parameterizedType = (ParameterizedType) classType;\n+Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+Map<TypeVariable<?>, Type> contextualActualTypeParameters = new ConcurrentHashMap<TypeVariable<?>, Type>();\n+Set<TypeVariable<?>> encounteredTypeVariables = new HashSet<TypeVariable<?>>();\n+for (int i = 0; i < actualTypeArguments.length; i++) {\n+    TypeVariable<?> typeVariable = ((Class<?>) parameterizedType.getRawType()).getTypeParameters()[i];\n+    Type actualTypeArgument = actualTypeArguments[i];\n+    if (actualTypeArgument instanceof ParameterizedType) {\n+        contextualActualTypeParameters.putAll(calculateContextualTypeParameters((ParameterizedType) actualTypeArgument, encounteringClass, encounterIndex, encounteringTypeParameter, enclosureInstance, enclosureInstanceIndex));\n+    } else if (actualTypeArgument instanceof TypeVariable) {\n+        TypeVariable<?> actualTypeVariable = (TypeVariable<?>) actualTypeArgument;\n+        if (encounteredTypeVariables.contains(actualTypeVariable)) {\n+            // Already encountered this type variable, break the recursion to prevent stack overflow\n+            contextualActualTypeParameters.put(typeVariable, null);\n+        } else {\n+            encounteredTypeVariables.add(actualTypeVariable);\n+            Type type = this.contextualActualTypeParameters.get(actualTypeVariable);\n+            if (type != null) {\n+                contextualActualTypeParameters.put(typeVariable, type);\n+            } else { // if the type is null, it means that there is not such a type parameter in the outer context\n+                contextualActualTypeParameters.put(typeVariable, actualTypeArgument);\n+            }\n+        }\n+    } else {\n+        contextualActualTypeParameters.put(typeVariable, actualTypeArgument);\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}