{
    "patch": "Node function = fnScope.getRootNode();\nPreconditions.checkState(function.isFunction());\nif (NodeUtil.isGetOrSetKey(function.getParent())) {\n  // The parameters object literal setters can not be removed.\n  return;\n}\n\nNode argList = getFunctionArgList(function);\n// Remove unreferenced function arguments\nfor (Node arg : argList.children()) {\n  String argName = arg.getString();\n  Var var = fnScope.getVar(argName);\n  if (var == null) {\n    // Ignore vars that aren't variables (eg, strict mode lends to arguments object hijinks)\n    continue;\n  }\n  if (!referenced.contains(var)) {\n    arg.detach();\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a412875e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,27 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+Preconditions.checkState(function.isFunction());\n+if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+  // The parameters object literal setters can not be removed.\n+  return;\n+}\n+\n+Node argList = getFunctionArgList(function);\n+// Remove unreferenced function arguments\n+for (Node arg : argList.children()) {\n+  String argName = arg.getString();\n+  Var var = fnScope.getVar(argName);\n+  if (var == null) {\n+    // Ignore vars that aren't variables (eg, strict mode lends to arguments object hijinks)\n+    continue;\n+  }\n+  if (!referenced.contains(var)) {\n+    arg.detach();\n+    compiler.reportCodeChange();\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}