{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    if (node == null || changed == null) {\n      throw new IllegalArgumentException(\"Node and set cannot be null\");\n    }\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      while (child != null) {\n        if (child.getType() == Token.NAME) {\n          changed.add(child.getString());\n        } else {\n          findCalledFunctions(child, changed);\n        }\n        child = child.getNext();\n      }\n    } else if (node.getType() == Token.FUNCTION) {\n      Node functionNameNode = node.getFirstChild();\n      if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n        changed.add(functionNameNode.getString());\n      }\n      Node functionBlockNode = node.getLastChild();\n      if (functionBlockNode != null) {\n        findCalledFunctions(functionBlockNode, changed);\n      }\n    } else if (node.getType() == Token.BLOCK) {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        if (c.getType() == Token.FUNCTION) {\n          findCalledFunctions(c, changed);\n        } else if (c.getType() == Token.CALL) {\n          findCalledFunctions(c, changed);\n        } else {\n          findCalledFunctions(c, new HashSet<String>());\n        }\n      }\n    } else {\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..2823c4b1 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,19 +770,43 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    if (node == null || changed == null) {\n+      throw new IllegalArgumentException(\"Node and set cannot be null\");\n+    }\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      while (child != null) {\n+        if (child.getType() == Token.NAME) {\n+          changed.add(child.getString());\n+        } else {\n+          findCalledFunctions(child, changed);\n+        }\n+        child = child.getNext();\n+      }\n+    } else if (node.getType() == Token.FUNCTION) {\n+      Node functionNameNode = node.getFirstChild();\n+      if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n+        changed.add(functionNameNode.getString());\n+      }\n+      Node functionBlockNode = node.getLastChild();\n+      if (functionBlockNode != null) {\n+        findCalledFunctions(functionBlockNode, changed);\n+      }\n+    } else if (node.getType() == Token.BLOCK) {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        if (c.getType() == Token.FUNCTION) {\n+          findCalledFunctions(c, changed);\n+        } else if (c.getType() == Token.CALL) {\n+          findCalledFunctions(c, changed);\n+        } else {\n+          findCalledFunctions(c, new HashSet<String>());\n+        }\n+      }\n+    } else {\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n       }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}