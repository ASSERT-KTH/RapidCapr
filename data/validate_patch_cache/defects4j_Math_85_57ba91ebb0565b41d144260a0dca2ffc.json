{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n\n    double fa = function.value(initial);\n    double fb = Double.NaN;\n    double a = initial;\n    double b = initial;\n    int numIterations = 0;\n\n    // Ensure that f(a) and f(b) have opposite signs\n    while (numIterations < 10 || fa * fb > 0.0) {\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n        }\n        double step;\n        if (numIterations < 5) {\n            step = 0.5;\n        } else {\n            step = Math.abs(b - a) * 1.0E-8;\n        }\n        if ((a - step) < lowerBound) {\n            step = a - lowerBound;\n        }\n        fb = function.value(b + step);\n        if (fa * fb <= 0.0) {\n            break;\n        }\n        if ((b + step) > upperBound) {\n            step = upperBound - b;\n        }\n        fa = function.value(a - step);\n        if (fa * fb <= 0.0) {\n            break;\n        }\n        a -= step;\n        b += step;\n        numIterations++;\n    }\n\n    // Perform bisection method to find a root\n    double x1 = a;\n    double x2 = b;\n    for (int i = 0; i < maximumIterations; i++) {\n        double xMid = 0.5 * (x1 + x2);\n        double fMid = function.value(xMid);\n        if (fMid == 0.0) {\n            return new double[]{xMid, xMid};\n        } else if (fMid * fa < 0.0) {\n            x2 = xMid;\n            fb = fMid;\n        } else if (fMid * fb < 0.0) {\n            x1 = xMid;\n            fa = fMid;\n        } else {\n            throw new ConvergenceException(\"Stagnation in bisection method\");\n        }\n        if (Math.abs(x2 - x1) <= Math.ulp(x1)) {\n            break;\n        }\n    }\n\n    if (fa * fb > 0.0 ) {\n        throw new ConvergenceException(\n                  \"number of iterations={0}, maximum iterations={1}, \" +\n                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n                  numIterations, maximumIterations, initial,\n                  lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{x1, x2};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..da5384ddf 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,94 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public static double[] bracket(UnivariateRealFunction function,\n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations) throws ConvergenceException, \n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0)  {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+              lowerBound, initial, upperBound);\n+    }\n+\n+    double fa = function.value(initial);\n+    double fb = Double.NaN;\n+    double a = initial;\n+    double b = initial;\n+    int numIterations = 0;\n+\n+    // Ensure that f(a) and f(b) have opposite signs\n+    while (numIterations < 10 || fa * fb > 0.0) {\n+        if (numIterations >= maximumIterations) {\n+            throw new ConvergenceException(\"Maximum number of iterations exceeded\");\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        double step;\n+        if (numIterations < 5) {\n+            step = 0.5;\n+        } else {\n+            step = Math.abs(b - a) * 1.0E-8;\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if ((a - step) < lowerBound) {\n+            step = a - lowerBound;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        fb = function.value(b + step);\n+        if (fa * fb <= 0.0) {\n+            break;\n+        }\n+        if ((b + step) > upperBound) {\n+            step = upperBound - b;\n+        }\n+        fa = function.value(a - step);\n+        if (fa * fb <= 0.0) {\n+            break;\n+        }\n+        a -= step;\n+        b += step;\n+        numIterations++;\n+    }\n+\n+    // Perform bisection method to find a root\n+    double x1 = a;\n+    double x2 = b;\n+    for (int i = 0; i < maximumIterations; i++) {\n+        double xMid = 0.5 * (x1 + x2);\n+        double fMid = function.value(xMid);\n+        if (fMid == 0.0) {\n+            return new double[]{xMid, xMid};\n+        } else if (fMid * fa < 0.0) {\n+            x2 = xMid;\n+            fb = fMid;\n+        } else if (fMid * fb < 0.0) {\n+            x1 = xMid;\n+            fa = fMid;\n+        } else {\n+            throw new ConvergenceException(\"Stagnation in bisection method\");\n+        }\n+        if (Math.abs(x2 - x1) <= Math.ulp(x1)) {\n+            break;\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n+    if (fa * fb > 0.0 ) {\n+        throw new ConvergenceException(\n+                  \"number of iterations={0}, maximum iterations={1}, \" +\n+                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                  numIterations, maximumIterations, initial,\n+                  lowerBound, upperBound, a, b, fa, fb);\n+    }\n+\n+    return new double[]{x1, x2};\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "Test timed out after 300 seconds",
    "test_result": "ERROR"
}