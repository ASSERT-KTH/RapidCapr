{
    "patch": "private NameInformation createNameInformation(NodeTraversal t, Node nameNode, Node valueNode) {\n  String name = null;\n  boolean isPrototype = false;\n  boolean onlyAffectsClassDef = false;\n  String prototypeProperty = null;\n  String prototypeClass = null;\n\n  if (NodeUtil.isName(nameNode)) {\n    name = nameNode.getString();\n\n    if (name.equals(\"prototype\")) { // Prototype property\n      isPrototype = true;\n      Node parent = nameNode.getParent();\n      if (NodeUtil.isGet(parent)) {\n        prototypeProperty = parent.getLastChild().getString();\n        prototypeClass = parent.getFirstChild().getQualifiedName();\n      }\n    } else if (NodeUtil.isFunctionExpression(valueNode)) { // Class definition\n      onlyAffectsClassDef = true;\n      Node parent = nameNode.getParent();\n      if (NodeUtil.isAssign(parent)) {\n        JsClass clazz = getJsClass(HandleIdParam.create(t, parent.getLastChild()));\n        if (clazz != null) {\n          prototypeClass = clazz.getName();\n        }\n      }\n    }\n  } else if (NodeUtil.isStringKey(nameNode)) { // Object literal key\n    name = nameNode.getString();\n  }\n\n  if (name != null) {\n    return new NameInformation(name, isPrototype, onlyAffectsClassDef, prototypeProperty, prototypeClass);\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..f73c2e33 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,42 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n+private NameInformation createNameInformation(NodeTraversal t, Node nameNode, Node valueNode) {\n+  String name = null;\n+  boolean isPrototype = false;\n+  boolean onlyAffectsClassDef = false;\n+  String prototypeProperty = null;\n+  String prototypeClass = null;\n+\n+  if (NodeUtil.isName(nameNode)) {\n+    name = nameNode.getString();\n+\n+    if (name.equals(\"prototype\")) { // Prototype property\n+      isPrototype = true;\n+      Node parent = nameNode.getParent();\n+      if (NodeUtil.isGet(parent)) {\n+        prototypeProperty = parent.getLastChild().getString();\n+        prototypeClass = parent.getFirstChild().getQualifiedName();\n       }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+    } else if (NodeUtil.isFunctionExpression(valueNode)) { // Class definition\n+      onlyAffectsClassDef = true;\n+      Node parent = nameNode.getParent();\n+      if (NodeUtil.isAssign(parent)) {\n+        JsClass clazz = getJsClass(HandleIdParam.create(t, parent.getLastChild()));\n+        if (clazz != null) {\n+          prototypeClass = clazz.getName();\n         }\n       }\n     }\n+  } else if (NodeUtil.isStringKey(nameNode)) { // Object literal key\n+    name = nameNode.getString();\n+  }\n+\n+  if (name != null) {\n+    return new NameInformation(name, isPrototype, onlyAffectsClassDef, prototypeProperty, prototypeClass);\n+  }\n+  return null;\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: NameAnalyzer.FindDeclarationsAndSetters is not abstract and does not override abstract method visit(NodeTraversal,Node,Node) in Callback",
    "test_result": "ERROR"
}