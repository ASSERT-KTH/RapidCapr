{
    "patch": "import java.math.BigDecimal;\nimport java.math.MathContext;\nimport java.math.RoundingMode;\n\npublic double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isPositive(expected) || !isNonNegative(observed)) {\n        throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n    }\n    BigDecimal sumSq = BigDecimal.ZERO;\n    BigDecimal dev = BigDecimal.ZERO;\n    BigDecimal observedValue;\n    BigDecimal expectedValue;\n    BigDecimal one = BigDecimal.valueOf(1L);\n    MathContext mc = new MathContext(20, RoundingMode.HALF_UP);\n    for (int i = 0; i < observed.length; i++) {\n        observedValue = BigDecimal.valueOf(observed[i]);\n        expectedValue = BigDecimal.valueOf(expected[i]);\n        dev = observedValue.subtract(expectedValue);\n        sumSq = sumSq.add(dev.multiply(dev, mc).divide(expectedValue, mc));\n    }\n    return sumSq.doubleValue();\n}\n",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..4c4087a67 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,32 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n-        }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n-        }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n-        }\n-        return sumSq;\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+import java.math.RoundingMode;\n+\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if ((expected.length < 2) || (expected.length != observed.length)) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    if (!isPositive(expected) || !isNonNegative(observed)) {\n+        throw new IllegalArgumentException(\"observed counts must be non-negative and expected counts must be positive\");\n     }\n+    BigDecimal sumSq = BigDecimal.ZERO;\n+    BigDecimal dev = BigDecimal.ZERO;\n+    BigDecimal observedValue;\n+    BigDecimal expectedValue;\n+    BigDecimal one = BigDecimal.valueOf(1L);\n+    MathContext mc = new MathContext(20, RoundingMode.HALF_UP);\n+    for (int i = 0; i < observed.length; i++) {\n+        observedValue = BigDecimal.valueOf(observed[i]);\n+        expectedValue = BigDecimal.valueOf(expected[i]);\n+        dev = observedValue.subtract(expectedValue);\n+        sumSq = sumSq.add(dev.multiply(dev, mc).divide(expectedValue, mc));\n+    }\n+    return sumSq.doubleValue();\n+}\n+\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}