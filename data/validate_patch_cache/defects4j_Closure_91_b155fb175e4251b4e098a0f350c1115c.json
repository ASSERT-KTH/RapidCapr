{
    "patch": "      if (parent != null && parent.getType() == Token.CALL &&\n          n == parent.getFirstChild() &&\n          NodeUtil.isObjectDefinePropertiesDefinition(parent.getLastChild())) {\n        Node obj = parent.getLastChild().getFirstChild();\n        if (obj.getType() == Token.OBJECTLIT) {\n          for (Node key = obj.getFirstChild(); key != null; key = key.getNext()) {\n            if (key.isComputedProp() ||\n                !Token.STRING.equals(key.getFirstChild().getType())) {\n              return false;\n            }\n          }\n        }\n        return true;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..30417e20 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.CALL &&\n+          n == parent.getFirstChild() &&\n+          NodeUtil.isObjectDefinePropertiesDefinition(parent.getLastChild())) {\n+        Node obj = parent.getLastChild().getFirstChild();\n+        if (obj.getType() == Token.OBJECTLIT) {\n+          for (Node key = obj.getFirstChild(); key != null; key = key.getNext()) {\n+            if (key.isComputedProp() ||\n+                !Token.STRING.equals(key.getFirstChild().getType())) {\n+              return false;\n+            }\n+          }\n+        }\n+        return true;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}