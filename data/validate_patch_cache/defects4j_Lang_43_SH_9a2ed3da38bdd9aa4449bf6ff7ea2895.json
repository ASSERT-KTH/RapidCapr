{
    "patch": "            if (escapingOn && c[pos.getIndex()] == QUOTE) {\n                next(pos);\n                return appendTo == null ? null : appendTo.append(QUOTE);\n            }\n            int lastHold = pos.getIndex();\n            for (int i = pos.getIndex(); i < pattern.length(); i++) {\n                if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                            QUOTE);\n                    pos.setIndex(i + ESCAPED_QUOTE.length());\n                    lastHold = pos.getIndex();\n                    continue;\n                }\n                switch (c[pos.getIndex()]) {\n                case QUOTE:\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold,\n                            pos.getIndex() - lastHold);\n                default:\n                    next(pos);\n                }\n            }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..8f6defb7 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,28 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+            if (escapingOn && c[pos.getIndex()] == QUOTE) {\n+                next(pos);\n+                return appendTo == null ? null : appendTo.append(QUOTE);\n+            }\n+            int lastHold = pos.getIndex();\n+            for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+                if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                            QUOTE);\n+                    pos.setIndex(i + ESCAPED_QUOTE.length());\n+                    lastHold = pos.getIndex();\n+                    continue;\n+                }\n+                switch (c[pos.getIndex()]) {\n+                case QUOTE:\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c, lastHold,\n+                            pos.getIndex() - lastHold);\n+                default:\n+                    next(pos);\n+                }\n+            }\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "junit.framework.ComparisonFailure: format Pattern=[1: {0,date,short}], locale=[null] expected:<1: [1/23]/07> but was:<1: [23/01]/07>",
    "test_result": "FAIL"
}