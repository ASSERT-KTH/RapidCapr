{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getParent())) {\n        Node grandparent = parent.getParent();\n        if (grandparent.getType() == Token.EXPR_RESULT &&\n            !grandparent.getFirstChild().isName()) {\n          // Checks the value being assigned to the prototype property.\n          // If it's not a function, skip the function.\n          Node valueNode = lhs.getNext();\n          if (valueNode == null || valueNode.getType() != Token.FUNCTION) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b8a466d5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,19 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent) && NodeUtil.isGet(parent.getParent())) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent.getType() == Token.EXPR_RESULT &&\n+            !grandparent.getFirstChild().isName()) {\n+          // Checks the value being assigned to the prototype property.\n+          // If it's not a function, skip the function.\n+          Node valueNode = lhs.getNext();\n+          if (valueNode == null || valueNode.getType() != Token.FUNCTION) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}