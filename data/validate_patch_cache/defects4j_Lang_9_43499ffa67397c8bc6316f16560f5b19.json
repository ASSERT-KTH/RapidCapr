{
    "patch": "    /**\n     * Creates a random array of ints.\n     *\n     * @param size The size of the array to create.\n     * @param seed The seed for the pseudorandom number generator.\n     * @return The random array of integers.\n     */\n    public static int[] getRandomArray(int size, long seed) {\n        Random random = new Random(seed);\n        int[] arr = new int[size];\n        for (int i = 0; i < size; i++) {\n            arr[i] = random.nextInt();\n        }\n        return arr;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..596e0ea6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,21 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+    /**\n+     * Creates a random array of ints.\n+     *\n+     * @param size The size of the array to create.\n+     * @param seed The seed for the pseudorandom number generator.\n+     * @return The random array of integers.\n+     */\n+    public static int[] getRandomArray(int size, long seed) {\n+        Random random = new Random(seed);\n+        int[] arr = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            arr[i] = random.nextInt();\n+        }\n+        return arr;\n+    }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}