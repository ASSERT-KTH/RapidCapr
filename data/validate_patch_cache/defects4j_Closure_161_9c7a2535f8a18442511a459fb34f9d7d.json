{
    "patch": "    if (left.getType() == Token.ARRAYLIT) {\n      if (right.getType() != Token.NUMBER) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n      }\n\n      double index = right.getDouble();\n      int length = NodeUtil.getLengthOfArrayLiteral(left);\n      int intIndex = (int) index;\n      if (intIndex != index || intIndex < 0 || intIndex >= length) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      Node elem = NodeUtil.getArrayElement(left, intIndex);\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n\n      // Replace the entire GETELEM with the value\n      parent.replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..2c817044 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,12 +1274,43 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.getType() == Token.ARRAYLIT) {\n+      if (right.getType() != Token.NUMBER) {\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n+      }\n+\n+      double index = right.getDouble();\n+      int length = NodeUtil.getLengthOfArrayLiteral(left);\n+      int intIndex = (int) index;\n+      if (intIndex != index || intIndex < 0 || intIndex >= length) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      Node elem = NodeUtil.getArrayElement(left, intIndex);\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+\n+      // Replace the entire GETELEM with the value\n+      parent.replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}