{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      // track whether an object literal with no issues was found\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n          // A call target maybe using the object as a 'this' value.\n          if (gramps.isCall()\n              && gramps.getFirstChild() == parent) {\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n        // We're looking for object literal assignments only.\n        if (!val.isObjectLit()) {\n          return false;\n        }\n\n        // Check if this object literal has any issues.\n        if (!isObjectLiteralValidForInlining(val)) {\n          return false;\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }\n\nprivate boolean isObjectLiteralValidForInlining(Node objLit) {\n  // Make sure that the value is not self-refential. IOW,\n  // disallow things like x = {b: x.a}.\n  //\n  // TODO: Only exclude unorderable self-referential\n  // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n  // but x = {a: 1, b: x.a} is.\n  //\n  // Also, ES5 getters/setters aren't handled by this pass.\n  for (Node child = objLit.getFirstChild(); child != null;\n       child = child.getNext()) {\n    if (child.isGetterDef() || child.isSetterDef()) {\n      // ES5 get/set not supported.\n      return false;\n    }\n\n    if (child.hasChildren()) {\n      // If this object literal has a child object literal, recursively check\n      // its validity before moving on.\n      if (!isObjectLiteralValidForInlining(child)) {\n        return false;\n      }\n    }\n\n    // Look for self-referential assignments in the current child node.\n    Node childVal = child.getFirstChild();\n    if (childVal != null) {\n      // Check if childVal is the parent of any of the passed in\n      // references, as that is how self-referential assignments\n      // will happen.\n      LinkedList<Node> toBeSearched = new LinkedList<>();\n      for (Node grandchild = childVal.getFirstChild(); grandchild != null;\n           grandchild = grandchild.getNext()) {\n        toBeSearched.addLast(grandchild);\n      }\n\n      // Breadth first search for any descendant nodes that are references to\n      // parents in `refs`.\n      while (!toBeSearched.isEmpty()) {\n        Node node = toBeSearched.removeFirst();\n        if (node != null) {\n          if (node.isName()) {\n            Node foundNode = node;\n            while (foundNode != null && !NodeUtil.isStatementBlock(foundNode)) {\n              for (Reference t : refSet) {\n                if (t.getParent() == foundNode) {\n                  // There's a self-referential assignment\n                  return false;\n                }\n              }\n              foundNode = foundNode.getParent();\n            }\n          } else if (node.hasChildren()) {\n            for (Node grandchild = node.getFirstChild(); grandchild != null;\n                 grandchild = grandchild.getNext()) {\n              toBeSearched.addLast(grandchild);\n            }\n          }\n        }\n      }\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..2556ad4d 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -153,6 +153,7 @@ class InlineObjectLiterals implements CompilerPass {\n      * </pre>\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n+      // track whether an object literal with no issues was found\n       boolean ret = false;\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n@@ -183,7 +184,7 @@ class InlineObjectLiterals implements CompilerPass {\n \n         // Only rewrite VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+          return false;\n         }\n \n         Node val = ref.getAssignedValue();\n@@ -197,40 +198,11 @@ class InlineObjectLiterals implements CompilerPass {\n           return false;\n         }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n-          }\n-\n-\n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n-              }\n-              refNode = refNode.getParent();\n-            }\n-          }\n+        // Check if this object literal has any issues.\n+        if (!isObjectLiteralValidForInlining(val)) {\n+          return false;\n         }\n \n-\n         // We have found an acceptable object literal assignment. As\n         // long as there are no other assignments that mess things up,\n         // we can inline.\n@@ -239,6 +211,71 @@ class InlineObjectLiterals implements CompilerPass {\n       return ret;\n     }\n \n+private boolean isObjectLiteralValidForInlining(Node objLit) {\n+  // Make sure that the value is not self-refential. IOW,\n+  // disallow things like x = {b: x.a}.\n+  //\n+  // TODO: Only exclude unorderable self-referential\n+  // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n+  // but x = {a: 1, b: x.a} is.\n+  //\n+  // Also, ES5 getters/setters aren't handled by this pass.\n+  for (Node child = objLit.getFirstChild(); child != null;\n+       child = child.getNext()) {\n+    if (child.isGetterDef() || child.isSetterDef()) {\n+      // ES5 get/set not supported.\n+      return false;\n+    }\n+\n+    if (child.hasChildren()) {\n+      // If this object literal has a child object literal, recursively check\n+      // its validity before moving on.\n+      if (!isObjectLiteralValidForInlining(child)) {\n+        return false;\n+      }\n+    }\n+\n+    // Look for self-referential assignments in the current child node.\n+    Node childVal = child.getFirstChild();\n+    if (childVal != null) {\n+      // Check if childVal is the parent of any of the passed in\n+      // references, as that is how self-referential assignments\n+      // will happen.\n+      LinkedList<Node> toBeSearched = new LinkedList<>();\n+      for (Node grandchild = childVal.getFirstChild(); grandchild != null;\n+           grandchild = grandchild.getNext()) {\n+        toBeSearched.addLast(grandchild);\n+      }\n+\n+      // Breadth first search for any descendant nodes that are references to\n+      // parents in `refs`.\n+      while (!toBeSearched.isEmpty()) {\n+        Node node = toBeSearched.removeFirst();\n+        if (node != null) {\n+          if (node.isName()) {\n+            Node foundNode = node;\n+            while (foundNode != null && !NodeUtil.isStatementBlock(foundNode)) {\n+              for (Reference t : refSet) {\n+                if (t.getParent() == foundNode) {\n+                  // There's a self-referential assignment\n+                  return false;\n+                }\n+              }\n+              foundNode = foundNode.getParent();\n+            }\n+          } else if (node.hasChildren()) {\n+            for (Node grandchild = node.getFirstChild(); grandchild != null;\n+                 grandchild = grandchild.getNext()) {\n+              toBeSearched.addLast(grandchild);\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+  return true;\n+}\n+\n     private boolean isVarOrAssignExprLhs(Node n) {\n       Node parent = n.getParent();\n       return parent.isVar() ||",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}