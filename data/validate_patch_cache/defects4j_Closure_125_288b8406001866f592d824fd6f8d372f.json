{
    "patch": "    if (type.isFunctionType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      visitParameterList(t, n, fnType);\n      ensureTyped(t, n, fnType.isConstructor() ? fnType.getInstanceType() : JSType.UNDEFINED);\n    } else if (type.isUnionType() && type.isTruthy()) {\n      ensureTyped(t, n, JSType.UNKNOWN);\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..76a4d0ce 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1658,7 +1658,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n       FunctionType fnType = type.toMaybeFunctionType();\n-      if (fnType != null) {\n+    if (type.isFunctionType()) {\n+      FunctionType fnType = type.toMaybeFunctionType();\n+      visitParameterList(t, n, fnType);\n+      ensureTyped(t, n, fnType.isConstructor() ? fnType.getInstanceType() : JSType.UNDEFINED);\n+    } else if (type.isUnionType() && type.isTruthy()) {\n+      ensureTyped(t, n, JSType.UNKNOWN);\n+    } else {\n+      report(t, n, NOT_A_CONSTRUCTOR);\n+      ensureTyped(t, n);\n+    }\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n       } else {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}