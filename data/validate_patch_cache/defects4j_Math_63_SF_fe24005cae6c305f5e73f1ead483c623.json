{
    "patch": "import java.math.BigInteger;\n\npublic class FactorialUtils {\n\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Must have n >= 0 for factorial\");\n        }\n        BigInteger factorial = BigInteger.ONE;\n        for (int i = 2; i <= n; ++i) {\n            factorial = factorial.multiply(BigInteger.valueOf(i));\n        }\n        return factorial.longValue();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..a77120d07 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,9 +413,21 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+import java.math.BigInteger;\n+\n+public class FactorialUtils {\n+\n+    public static long factorial(int n) {\n+        if (n < 0) {\n+            throw new IllegalArgumentException(\"Must have n >= 0 for factorial\");\n+        }\n+        BigInteger factorial = BigInteger.ONE;\n+        for (int i = 2; i <= n; ++i) {\n+            factorial = factorial.multiply(BigInteger.valueOf(i));\n+        }\n+        return factorial.longValue();\n     }\n+}\n \n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}