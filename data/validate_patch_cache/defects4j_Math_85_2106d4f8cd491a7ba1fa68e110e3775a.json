{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n                               FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double fa = function.value(lowerBound);\n    if (fa * function.value(upperBound) > 0.0) {\n        throw new ConvergenceException(\n                \"function values at endpoints have the same sign: f({0})={1}, f({2})={3}\",\n                lowerBound, fa, upperBound, function.value(upperBound));\n    }\n\n    double a = initial;\n    double b = initial;\n    double fb = function.value(b);\n    double delta = Math.abs(upperBound - lowerBound);\n    double previousDelta = delta;\n    int numIterations = 0;\n\n    while (fb * fa > 0.0 && numIterations < maximumIterations) {\n        if (Math.abs(delta) > Math.ulp(b) && fb != 0.0) {\n            // Inverse quadratic interpolation:\n            double cb = function.value(b - delta);\n            double sab = (fb - fa) / (b - a);\n            double sacb = (cb - fa) / (b - (b - delta));\n            double sadcb = (cb - fb) / ((b - delta) - b);\n            double numer = sab * sacb * sadcb;\n            double denom = (sab - sacb) * (sab - sadcb) * (sacb - sadcb);\n            double c = b - 0.5 * numer / denom;\n            double fc = function.value(c);\n\n            // Check for convergence:\n            delta = previousDelta;\n            previousDelta = b - a;\n            if (Math.abs(fc) < Math.abs(fb)) {\n                a = b;\n                b = c;\n                fa = fb;\n                fb = fc;\n            } else if (Math.abs(chop(delta) * fc / fb) < Math.ulp(c)) {\n                // Avoid dividing by a very small number:\n                a = b;\n                b = c;\n                fa = fb;\n                fb = fc;\n                delta = 0.5 * delta;\n            } else {\n                a = c;\n                fa = fc;\n                delta = 0.5 * delta;\n            }\n        } else {\n            // Bisection:\n            delta = 0.5 * delta;\n            double c = a + delta;\n            double fc = function.value(c);\n            if (fb * fc >= 0.0) {\n                b = c;\n                fb = fc;\n            } else {\n                a = b;\n                b = c;\n                fa = fb;\n                fb = fc;\n            }\n        }\n\n        numIterations++;\n    }\n\n    if (fb * fa > 0.0) {\n        throw new ConvergenceException(\n                \"number of iterations={0}, maximum iterations={1}, \" +\n                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n                numIterations, maximumIterations, initial,\n                lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{a, b};\n}\n\nprivate static double chop(double d) {\n    return Double.longBitsToDouble(Double.doubleToLongBits(d) & (-1L << 27));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..151fda5a6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,105 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+                               FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double fa = function.value(lowerBound);\n+    if (fa * function.value(upperBound) > 0.0) {\n+        throw new ConvergenceException(\n+                \"function values at endpoints have the same sign: f({0})={1}, f({2})={3}\",\n+                lowerBound, fa, upperBound, function.value(upperBound));\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fb = function.value(b);\n+    double delta = Math.abs(upperBound - lowerBound);\n+    double previousDelta = delta;\n+    int numIterations = 0;\n+\n+    while (fb * fa > 0.0 && numIterations < maximumIterations) {\n+        if (Math.abs(delta) > Math.ulp(b) && fb != 0.0) {\n+            // Inverse quadratic interpolation:\n+            double cb = function.value(b - delta);\n+            double sab = (fb - fa) / (b - a);\n+            double sacb = (cb - fa) / (b - (b - delta));\n+            double sadcb = (cb - fb) / ((b - delta) - b);\n+            double numer = sab * sacb * sadcb;\n+            double denom = (sab - sacb) * (sab - sadcb) * (sacb - sadcb);\n+            double c = b - 0.5 * numer / denom;\n+            double fc = function.value(c);\n+\n+            // Check for convergence:\n+            delta = previousDelta;\n+            previousDelta = b - a;\n+            if (Math.abs(fc) < Math.abs(fb)) {\n+                a = b;\n+                b = c;\n+                fa = fb;\n+                fb = fc;\n+            } else if (Math.abs(chop(delta) * fc / fb) < Math.ulp(c)) {\n+                // Avoid dividing by a very small number:\n+                a = b;\n+                b = c;\n+                fa = fb;\n+                fb = fc;\n+                delta = 0.5 * delta;\n+            } else {\n+                a = c;\n+                fa = fc;\n+                delta = 0.5 * delta;\n+            }\n+        } else {\n+            // Bisection:\n+            delta = 0.5 * delta;\n+            double c = a + delta;\n+            double fc = function.value(c);\n+            if (fb * fc >= 0.0) {\n+                b = c;\n+                fb = fc;\n+            } else {\n+                a = b;\n+                b = c;\n+                fa = fb;\n+                fb = fc;\n+            }\n         }\n-        \n-        return new double[]{a, b};\n+\n+        numIterations++;\n+    }\n+\n+    if (fb * fa > 0.0) {\n+        throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n     }\n \n+    return new double[]{a, b};\n+}\n+\n+private static double chop(double d) {\n+    return Double.longBitsToDouble(Double.doubleToLongBits(d) & (-1L << 27));\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}