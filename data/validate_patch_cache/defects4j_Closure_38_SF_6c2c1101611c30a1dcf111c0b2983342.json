{
    "patch": "void addNumber(double x) {\n    char prev = getLastChar();\n    boolean isNegativeZero = isNegativeZero(x);\n    boolean hasDecimal = String.valueOf(x).contains(\".\");\n\n    if (x < 0 && prev == '-') {\n        add(\" \");\n    }\n    else if (isNegativeZero && (prev == '+' || prev == '-')) {\n        add(\" \");\n    }\n    else if (prev == ' ' && hasDecimal) {\n        add(\"\");\n    }\n\n    if (Math.floor(x) == x && !isNegativeZero) {\n        long value = (long) x;\n        long mantissa = value;\n        int exp = 0;\n\n        if (Math.abs(x) >= 100) {\n            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n                mantissa /= 10;\n                exp++;\n            }\n        }\n\n        if (exp > 2) {\n            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n        } else {\n            add(Long.toString(value));\n        }\n    } else {\n        add(String.valueOf(x));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..33c28fbe 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -237,34 +237,42 @@ abstract class CodeConsumer {\n     }\n   }\n \n-  void addNumber(double x) {\n-    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n-    // x--4 (which is a syntax error).\n+void addNumber(double x) {\n     char prev = getLastChar();\n-    boolean negativeZero = isNegativeZero(x);\n+    boolean isNegativeZero = isNegativeZero(x);\n+    boolean hasDecimal = String.valueOf(x).contains(\".\");\n+\n     if (x < 0 && prev == '-') {\n-      add(\" \");\n+        add(\" \");\n+    }\n+    else if (isNegativeZero && (prev == '+' || prev == '-')) {\n+        add(\" \");\n     }\n+    else if (prev == ' ' && hasDecimal) {\n+        add(\"\");\n+    }\n+\n+    if (Math.floor(x) == x && !isNegativeZero) {\n+        long value = (long) x;\n+        long mantissa = value;\n+        int exp = 0;\n \n-    if ((long) x == x && !negativeZero) {\n-      long value = (long) x;\n-      long mantissa = value;\n-      int exp = 0;\n-      if (Math.abs(x) >= 100) {\n-        while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n-          mantissa /= 10;\n-          exp++;\n+        if (Math.abs(x) >= 100) {\n+            while (mantissa / 10 * Math.pow(10, exp + 1) == value) {\n+                mantissa /= 10;\n+                exp++;\n+            }\n+        }\n+\n+        if (exp > 2) {\n+            add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n+        } else {\n+            add(Long.toString(value));\n         }\n-      }\n-      if (exp > 2) {\n-        add(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n-      } else {\n-        add(Long.toString(value));\n-      }\n     } else {\n-      add(String.valueOf(x));\n+        add(String.valueOf(x));\n     }\n-  }\n+}\n \n   static boolean isNegativeZero(double x) {\n     return x == 0.0 && Math.copySign(1, x) == -1.0;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}