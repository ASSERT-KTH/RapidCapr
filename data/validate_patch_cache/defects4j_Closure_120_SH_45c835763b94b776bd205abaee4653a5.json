{
    "patch": "    boolean isAssignedOnceInLifetime() {\n        int numAssignments = 0;\n        BasicBlock assignmentBlock = null;\n        List<BasicBlock> visited = Lists.newArrayList();\n        for (Reference ref : references) {\n          if (ref.isDeclaration()) {\n            continue;\n          }\n\n          BasicBlock refBlock = ref.getBasicBlock();\n          // Check if this is the first assignment we've seen.\n          if (numAssignments == 0) {\n            numAssignments++;\n            assignmentBlock = refBlock;\n          } else if (refBlock != assignmentBlock && \n              !visited.contains(refBlock)) {\n            // If we've seen more than one assignment and it's not in the same\n            // basic block, we won't know the lifetime.\n            return false;\n          }\n          visited.add(refBlock);\n        }\n        return numAssignments <= 1;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..1177e560 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,30 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+    boolean isAssignedOnceInLifetime() {\n+        int numAssignments = 0;\n+        BasicBlock assignmentBlock = null;\n+        List<BasicBlock> visited = Lists.newArrayList();\n+        for (Reference ref : references) {\n+          if (ref.isDeclaration()) {\n+            continue;\n+          }\n+\n+          BasicBlock refBlock = ref.getBasicBlock();\n+          // Check if this is the first assignment we've seen.\n+          if (numAssignments == 0) {\n+            numAssignments++;\n+            assignmentBlock = refBlock;\n+          } else if (refBlock != assignmentBlock && \n+              !visited.contains(refBlock)) {\n+            // If we've seen more than one assignment and it's not in the same\n+            // basic block, we won't know the lifetime.\n+            return false;\n+          }\n+          visited.add(refBlock);\n+        }\n+        return numAssignments <= 1;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}