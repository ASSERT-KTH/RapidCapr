{
    "patch": "                // if the offsets differ, we must be at a DST boundary\n                if (offsetLocal != offsetAdjusted) {\n                    long transitionMillis = nextTransition(instantAdjusted);\n                    if (transitionMillis == instantAdjusted) {\n                        return offsetLocal;\n                    } else {\n                        int correctedOffset = getOffset(transitionMillis);\n                        if (offsetLocal < offsetAdjusted && offsetLocal < correctedOffset) {\n                            return offsetLocal;\n                        } else if (offsetLocal > offsetAdjusted && offsetAdjusted < correctedOffset) {\n                            return offsetAdjusted;\n                        } else {\n                            return correctedOffset;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..34a6b388 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                // if the offsets differ, we must be at a DST boundary\n+                if (offsetLocal != offsetAdjusted) {\n+                    long transitionMillis = nextTransition(instantAdjusted);\n+                    if (transitionMillis == instantAdjusted) {\n+                        return offsetLocal;\n+                    } else {\n+                        int correctedOffset = getOffset(transitionMillis);\n+                        if (offsetLocal < offsetAdjusted && offsetLocal < correctedOffset) {\n+                            return offsetLocal;\n+                        } else if (offsetLocal > offsetAdjusted && offsetAdjusted < correctedOffset) {\n+                            return offsetAdjusted;\n+                        } else {\n+                            return correctedOffset;\n+                        }\n+                    }\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}