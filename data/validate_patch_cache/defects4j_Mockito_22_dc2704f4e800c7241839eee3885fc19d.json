{
    "patch": "public static boolean areEqual(Object o1, Object o2) {\n    if (o1 == null && o2 == null) {\n        return true;\n    } else if (o1 == null || o2 == null) {\n        return false;\n    } else if (isArray(o1)) {\n        return isArray(o2) && areArraysEqual(o1, o2);\n    } else {\n        return o1.equals(o2);\n    }\n}\n\nprivate static boolean isArray(Object obj) {\n    return obj.getClass().isArray();\n}\n\nprivate static boolean areArraysEqual(Object obj1, Object obj2) {\n    String obj1String = Arrays.deepToString(new Object[] { obj1 });\n    String obj2String = Arrays.deepToString(new Object[] { obj2 });\n    return obj1String.equals(obj2String);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/matchers/Equality.java b/src/org/mockito/internal/matchers/Equality.java\nindex 43e11fca9..e1cdf7aea 100644\n--- a/src/org/mockito/internal/matchers/Equality.java\n+++ b/src/org/mockito/internal/matchers/Equality.java\n@@ -10,7 +10,27 @@ import java.lang.reflect.Array;\n public class Equality {\n \n     public static boolean areEqual(Object o1, Object o2) {\n-        if (o1 == null || o2 == null) {\n+public static boolean areEqual(Object o1, Object o2) {\n+    if (o1 == null && o2 == null) {\n+        return true;\n+    } else if (o1 == null || o2 == null) {\n+        return false;\n+    } else if (isArray(o1)) {\n+        return isArray(o2) && areArraysEqual(o1, o2);\n+    } else {\n+        return o1.equals(o2);\n+    }\n+}\n+\n+private static boolean isArray(Object obj) {\n+    return obj.getClass().isArray();\n+}\n+\n+private static boolean areArraysEqual(Object obj1, Object obj2) {\n+    String obj1String = Arrays.deepToString(new Object[] { obj1 });\n+    String obj2String = Arrays.deepToString(new Object[] { obj2 });\n+    return obj1String.equals(obj2String);\n+}\n             return o1 == null && o2 == null;\n         } else if (isArray(o1)) {\n             return isArray(o2) && areArraysEqual(o1, o2);\n@@ -38,4 +58,4 @@ public class Equality {\n     static boolean isArray(Object o) {\n         return o.getClass().isArray();\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}