{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      return; // The parameters object literal setters can not be removed.\n    }\n    \n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n\n    if (!modifyCallers && argList.hasChildren()) {\n      Node currentThingToCheck = argList.getFirstChild();\n      \n      int i = 0;\n      while(currentThingToCheck != null && !referenced.contains(fnScope.getVar(currentThingToCheck.getString()))) {\n          argList.removeChild(currentThingToCheck);\n          compiler.reportCodeChange();\n          currentThingToCheck = argList.getFirstChild();\n          i++;\n      }\n\n      List<Node> children = argList.children();\n      if (children.size() != i) {\n        for (int j = children.size() - 1; j >= i; j--) {\n          Node argument = children.get(j);\n          if (!referenced.contains(fnScope.getVar(argument.getString()))) {\n            argList.removeChild(argument);\n            compiler.reportCodeChange();\n          }\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..01dc4c06 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,41 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+      return; // The parameters object literal setters can not be removed.\n+    }\n+    \n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (!modifyCallers && argList.hasChildren()) {\n+      Node currentThingToCheck = argList.getFirstChild();\n+      \n+      int i = 0;\n+      while(currentThingToCheck != null && !referenced.contains(fnScope.getVar(currentThingToCheck.getString()))) {\n+          argList.removeChild(currentThingToCheck);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n+          currentThingToCheck = argList.getFirstChild();\n+          i++;\n+      }\n+\n+      List<Node> children = argList.children();\n+      if (children.size() != i) {\n+        for (int j = children.size() - 1; j >= i; j--) {\n+          Node argument = children.get(j);\n+          if (!referenced.contains(fnScope.getVar(argument.getString()))) {\n+            argList.removeChild(argument);\n+            compiler.reportCodeChange();\n+          }\n         }\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}