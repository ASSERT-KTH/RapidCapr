{
    "patch": "  private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..fcb868cf 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -772,11 +772,10 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n    */\n   private void findCalledFunctions(\n       Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child != null && child.getType() == Token.NAME) {\n         changed.add(child.getString());\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}