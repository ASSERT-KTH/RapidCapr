{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = real + rhs.getReal();\n    double newImaginary = imaginary + rhs.getImaginary();\n    // Check if either real or imaginary part is NaN\n    if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    // Check if both real and imaginary part are infinite with the same sign\n    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) \n        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())\n        && Math.signum(real) == Math.signum(rhs.getReal()) \n        && Math.signum(imaginary) == Math.signum(rhs.getImaginary())) {\n        return createComplex(real, imaginary);\n    }\n    // Check if both real and imaginary part are infinite with different signs\n    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) \n        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())\n        && (Math.signum(real) != Math.signum(rhs.getReal()) \n        || Math.signum(imaginary) != Math.signum(rhs.getImaginary()))) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    // Check if either real or imaginary part is infinite\n    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n        double sign = (newReal >= 0) ? 1.0 : -1.0;\n        return createComplex(sign * Double.POSITIVE_INFINITY, sign * newImaginary);\n    }\n    // If none of the above cases, then return calculated complex number\n    return createComplex(newReal, newImaginary);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..bc40c3f38 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,36 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = real + rhs.getReal();\n+    double newImaginary = imaginary + rhs.getImaginary();\n+    // Check if either real or imaginary part is NaN\n+    if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n+        return createComplex(Double.NaN, Double.NaN);\n+    }\n+    // Check if both real and imaginary part are infinite with the same sign\n+    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) \n+        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())\n+        && Math.signum(real) == Math.signum(rhs.getReal()) \n+        && Math.signum(imaginary) == Math.signum(rhs.getImaginary())) {\n+        return createComplex(real, imaginary);\n     }\n+    // Check if both real and imaginary part are infinite with different signs\n+    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal()) \n+        && Double.isInfinite(imaginary) && Double.isInfinite(rhs.getImaginary())\n+        && (Math.signum(real) != Math.signum(rhs.getReal()) \n+        || Math.signum(imaginary) != Math.signum(rhs.getImaginary()))) {\n+        return createComplex(Double.NaN, Double.NaN);\n+    }\n+    // Check if either real or imaginary part is infinite\n+    if (Double.isInfinite(newReal) || Double.isInfinite(newImaginary)) {\n+        double sign = (newReal >= 0) ? 1.0 : -1.0;\n+        return createComplex(sign * Double.POSITIVE_INFINITY, sign * newImaginary);\n+    }\n+    // If none of the above cases, then return calculated complex number\n+    return createComplex(newReal, newImaginary);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}