{
    "patch": "import java.lang.reflect.Method;\nimport java.util.Arrays;\n\npublic boolean hasSameMethod(Invocation candidate) {\n    //not using method.equals() for 1 good reason:\n    //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n    Method m1 = invocation.getMethod();\n    Method m2 = candidate.getMethod();\n\n    /* Avoid unnecessary cloning */\n    return m1.getName().equals(m2.getName()) &&\n            m1.getReturnType() == m2.getReturnType() &&\n            Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..7883b474f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -89,15 +89,20 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         return !overloadedButSameArgs;\n     }\n \n-    public boolean hasSameMethod(Invocation candidate) {        \n-        //not using method.equals() for 1 good reason:\n-        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n-        Method m1 = invocation.getMethod();\n-        Method m2 = candidate.getMethod();\n-        \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n-    }\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+\n+public boolean hasSameMethod(Invocation candidate) {\n+    //not using method.equals() for 1 good reason:\n+    //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n+    Method m1 = invocation.getMethod();\n+    Method m2 = candidate.getMethod();\n+\n+    /* Avoid unnecessary cloning */\n+    return m1.getName().equals(m2.getName()) &&\n+            m1.getReturnType() == m2.getReturnType() &&\n+            Arrays.equals(m1.getParameterTypes(), m2.getParameterTypes());\n+}\n     \n     public Location getLocation() {\n         return invocation.getLocation();\n@@ -126,4 +131,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}