{
    "patch": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    return switch (value.getType()) {\n      case Token.ASSIGN -> NodeUtil.isImmutableValue(value.getLastChild())\n              || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA -> evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND, Token.OR -> evaluatesToLocalValue(value.getFirstChild(), locals)\n              && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK -> evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n              && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC, Token.DEC -> value.getBooleanProp(Node.INCRDECR_PROP) ?\n              evaluatesToLocalValue(value.getFirstChild(), locals) : true;\n      case Token.THIS -> locals.apply(value);\n      case Token.NAME -> isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM, Token.GETPROP -> locals.apply(value);\n      case Token.CALL -> callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n      case Token.NEW -> newHasLocalResult(value) || locals.apply(value);\n      case Token.FUNCTION, Token.REGEXP, Token.ARRAYLIT, Token.OBJECTLIT -> true;\n      case Token.IN -> true;\n      default ->\n           isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value);\n    };\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 08fb954f..58598bd1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1239,70 +1239,30 @@ public final class NodeUtil {\n     return valueCheck(n, BOOLEAN_RESULT_PREDICATE);\n   }\n \n-  static boolean isBooleanResultHelper(Node n) {\n-    switch (n.getType()) {\n-      // Primitives\n-      case Token.TRUE:\n-      case Token.FALSE:\n-      // Comparisons\n-      case Token.EQ:\n-      case Token.NE:\n-      case Token.SHEQ:\n-      case Token.SHNE:\n-      case Token.LT:\n-      case Token.GT:\n-      case Token.LE:\n-      case Token.GE:\n-      // Queryies\n-      case Token.IN:\n-      case Token.INSTANCEOF:\n-      // Inversion\n-      case Token.NOT:\n-      // delete operator returns a boolean.\n-        return true;\n-      default:\n-        return false;\n-    }\n-  }\n-\n-  static boolean isUndefined(Node n) {\n-    switch (n.getType()) {\n-      case Token.VOID:\n-        return true;\n-      case Token.NAME:\n-        return n.getString().equals(\"undefined\");\n-    }\n-    return false;\n-  }\n-\n-  static boolean isNull(Node n) {\n-    return n.getType() == Token.NULL;\n-  }\n-\n-  static boolean isNullOrUndefined(Node n) {\n-    return isNull(n) || isUndefined(n);\n-  }\n-\n-  static class MayBeStringResultPredicate implements Predicate<Node> {\n-    public boolean apply(Node n) {\n-      return mayBeStringHelper(n);\n-    }\n-  }\n-\n-  static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =\n-      new MayBeStringResultPredicate();\n-\n-  /**\n-   * @returns Whether the results is possibly a string.\n-   */\n-  static boolean mayBeString(Node n) {\n-    return mayBeString(n, true);\n+  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n+    return switch (value.getType()) {\n+      case Token.ASSIGN -> NodeUtil.isImmutableValue(value.getLastChild())\n+              || (locals.apply(value) && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA -> evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND, Token.OR -> evaluatesToLocalValue(value.getFirstChild(), locals)\n+              && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK -> evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+              && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC, Token.DEC -> value.getBooleanProp(Node.INCRDECR_PROP) ?\n+              evaluatesToLocalValue(value.getFirstChild(), locals) : true;\n+      case Token.THIS -> locals.apply(value);\n+      case Token.NAME -> isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM, Token.GETPROP -> locals.apply(value);\n+      case Token.CALL -> callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+      case Token.NEW -> newHasLocalResult(value) || locals.apply(value);\n+      case Token.FUNCTION, Token.REGEXP, Token.ARRAYLIT, Token.OBJECTLIT -> true;\n+      case Token.IN -> true;\n+      default ->\n+           isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value);\n+    };\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return valueCheck(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n       return mayBeStringHelper(n);\n     }\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}