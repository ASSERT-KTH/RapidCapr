{
    "patch": "      Node target;\n      if (first.isCall() || first.isTaggedTemplateLit()) {\n        target = first.getFirstChild();\n      } else if (first.isGetElem()) {\n        target = first.getFirstChild().getNext();\n      } else if (first.isGetProp()) {\n        target = first.getNext();\n      } else {\n        return;\n      }\n\n      if (!NodeUtil.isName(target)) {\n        return;\n      }\n\n      Var var = getScope().getVar(target.getString());\n      if (var == null) {\n        return;\n      }\n\n      // if the call is to a function with a `this` argument,\n      // then it is not a free call.\n      JSDocInfo fnJSDoc = var.getJSDocInfo();\n      if (fnJSDoc != null) {\n        int thisCount = fnJSDoc.getParameterCount();\n        if (fnJSDoc.getParameterCount() != 0\n            && first.getChildCount() > thisCount) {\n          return;\n        }\n      }\n      n.putBooleanProp(Node.FREE_CALL, true);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..701b24f0 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,37 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node target;\n+      if (first.isCall() || first.isTaggedTemplateLit()) {\n+        target = first.getFirstChild();\n+      } else if (first.isGetElem()) {\n+        target = first.getFirstChild().getNext();\n+      } else if (first.isGetProp()) {\n+        target = first.getNext();\n+      } else {\n+        return;\n+      }\n+\n+      if (!NodeUtil.isName(target)) {\n+        return;\n+      }\n+\n+      Var var = getScope().getVar(target.getString());\n+      if (var == null) {\n+        return;\n+      }\n+\n+      // if the call is to a function with a `this` argument,\n+      // then it is not a free call.\n+      JSDocInfo fnJSDoc = var.getJSDocInfo();\n+      if (fnJSDoc != null) {\n+        int thisCount = fnJSDoc.getParameterCount();\n+        if (fnJSDoc.getParameterCount() != 0\n+            && first.getChildCount() > thisCount) {\n+          return;\n+        }\n+      }\n+      n.putBooleanProp(Node.FREE_CALL, true);\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}