{
    "patch": "        final Gaussian.Parametric function = new Gaussian.Parametric();\n        final double[] weights = new double[getObservations().length];\n        Arrays.fill(weights, 1.0);\n        return fit(new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1e-15).withParameterRelativeTolerance(1e-15).withOrthoTolerance(1e-15).withInitialStepBoundFactor(1e7).withMaxIterations(1000), function, guess, weights);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..15532d639 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,10 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final Gaussian.Parametric function = new Gaussian.Parametric();\n+        final double[] weights = new double[getObservations().length];\n+        Arrays.fill(weights, 1.0);\n+        return fit(new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1e-15).withParameterRelativeTolerance(1e-15).withOrthoTolerance(1e-15).withInitialStepBoundFactor(1e7).withMaxIterations(1000), function, guess, weights);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}