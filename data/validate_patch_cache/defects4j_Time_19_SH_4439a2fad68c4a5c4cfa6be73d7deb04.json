{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n\n    // Fix hunk starts here\n    if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n        if (nextLocal != nextAdjusted) {\n            return offsetLocal;\n        }\n    } else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n        if (getOffset(nextLocal) >= 0) {\n            return offsetLocal;\n        } else if (getOffset(previousTransition(nextAdjusted)) >= 0) {\n            return getOffset(previousTransition(nextAdjusted));\n        }\n    } else if (offsetLocal < 0 && offsetAdjusted >= 0) {\n        if (getOffset(nextLocal) >= 0) {\n            return offsetLocal;\n        }\n    } else {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            return getOffset(prevLocal);\n        }\n    }\n    // Fix hunk ends here\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..92d650f2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,38 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+\n+    // Fix hunk starts here\n+    if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+        if (nextLocal != nextAdjusted) {\n+            return offsetLocal;\n+        }\n+    } else if (offsetLocal >= 0 && offsetAdjusted < 0) {\n+        if (getOffset(nextLocal) >= 0) {\n+            return offsetLocal;\n+        } else if (getOffset(previousTransition(nextAdjusted)) >= 0) {\n+            return getOffset(previousTransition(nextAdjusted));\n+        }\n+    } else if (offsetLocal < 0 && offsetAdjusted >= 0) {\n+        if (getOffset(nextLocal) >= 0) {\n+            return offsetLocal;\n+        }\n+    } else {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            return getOffset(prevLocal);\n+        }\n+    }\n+    // Fix hunk ends here\n+\n+}\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}