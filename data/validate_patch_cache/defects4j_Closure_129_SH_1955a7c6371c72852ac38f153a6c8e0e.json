{
    "patch": "if (NodeUtil.isGet(first) && NodeUtil.isTypeOf(first.getFirstChild(), Token.EXPORT)) {\n  // An exported property call. For now just continue to treat it as a\n  // regular call (because non-property-call expressions cannot be exported).\n  // In the future we may want to track property calls separately.\n} else if (!NodeUtil.isGet(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..1e974df9 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,13 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+if (NodeUtil.isGet(first) && NodeUtil.isTypeOf(first.getFirstChild(), Token.EXPORT)) {\n+  // An exported property call. For now just continue to treat it as a\n+  // regular call (because non-property-call expressions cannot be exported).\n+  // In the future we may want to track property calls separately.\n+} else if (!NodeUtil.isGet(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}