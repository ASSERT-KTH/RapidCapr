{
    "patch": "public void process(Node externs, Node root) {\n    NodeTraversal t = new NodeTraversal(compiler, new Es6SyntacticScopeCreator(compiler));\n    t.traverse(externs, root);\n\n    NodeTraversal.traverse(compiler, root, new DuplicateDeclarationRemoval());\n\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n        t = new NodeTraversal(compiler, renamer);\n        t.traverseRoots(externs, root);\n    }\n\n    new PropagateConstantAnnotations(compiler, assertOnChange)\n            .process(externs, root);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..4d2327c3 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -84,17 +84,21 @@ class Normalize implements CompilerPass, Callback {\n   }\n \n   @Override\n-  public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root, this);\n+public void process(Node externs, Node root) {\n+    NodeTraversal t = new NodeTraversal(compiler, new Es6SyntacticScopeCreator(compiler));\n+    t.traverse(externs, root);\n+\n+    NodeTraversal.traverse(compiler, root, new DuplicateDeclarationRemoval());\n+\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n-      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n-      NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n+        MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n+        t = new NodeTraversal(compiler, renamer);\n+        t.traverseRoots(externs, root);\n     }\n-    removeDuplicateDeclarations(root);\n-    new PropogateConstantAnnotations(compiler, assertOnChange)\n-        .process(externs, root);\n-  }\n+\n+    new PropagateConstantAnnotations(compiler, assertOnChange)\n+            .process(externs, root);\n+}\n \n   @Override\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}