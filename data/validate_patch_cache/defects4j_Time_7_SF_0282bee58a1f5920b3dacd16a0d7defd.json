{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            long newMillis = bucket.computeMillis(true, text);\n            if (chrono.year().isLeap(defaultYear)) {\n                // If the year is a leap year, we need to check if the date after it is Feb. 29th,\n                // which only occurs once every four years.\n                if (bucket.getDateTime().getDayOfMonth() == 29 && bucket.getDateTime().getMonthOfYear() == 3) {\n                    newMillis = chrono.year().add(newMillis, 1);\n                }\n            }\n            instant.setMillis(newMillis);\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..960f44fb 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,17 +712,27 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (newPos >= 0) {\n+            long newMillis = bucket.computeMillis(true, text);\n+            if (chrono.year().isLeap(defaultYear)) {\n+                // If the year is a leap year, we need to check if the date after it is Feb. 29th,\n+                // which only occurs once every four years.\n+                if (bucket.getDateTime().getDayOfMonth() == 29 && bucket.getDateTime().getMonthOfYear() == 3) {\n+                    newMillis = chrono.year().add(newMillis, 1);\n+                }\n+            }\n+            instant.setMillis(newMillis);\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}