{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n\n    int index = indexOf(fieldType);\n\n    if (index == -1) {\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int[] newValues = new int[newTypes.length];\n\n        // find correct insertion point to keep largest-smallest order\n        int i = 0;\n        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n\n        if (unitField.isSupported()) {\n            for (; i < iTypes.length; i++) {\n                DateTimeFieldType loopType = iTypes[i];\n\n                if (loopType == null) {\n                    newTypes[i] = fieldType;\n                    newValues[i] = value;\n\n                    return withLater(null, i, newTypes, newValues);\n                }\n                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n\n                if (loopUnitField.isSupported()) {\n                    int compare = unitField.compareTo(loopUnitField);\n\n                    if (compare > 0) {\n                        break;\n                    } else if (compare == 0) {\n                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n\n                        if (rangeField.compareTo(loopRangeField) > 0) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n\n        return withLater(null, i, newTypes, newValues);\n    } else {\n        if (value == getValue(index)) {\n          return this;\n        }\n\n        int[] newValues = iValues.clone();\n        newValues = getField(index).set(this, index, newValues, value);\n\n        return new Partial(this, iTypes.clone(), newValues);\n    }\n}\n\nprivate Partial withLater(DateTimeFieldType[] types, int setIndex, DateTimeFieldType[] newTypes, int[] newValues) {\n    if (types == null || newTypes[setIndex] != types[setIndex]) {\n        // either the array is empty or the field types differ\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n\n        return newPartial;\n    }\n\n    DateTimeFieldType[] combinedTypes = iTypes.clone();\n    combinedTypes[setIndex] = newTypes[setIndex];\n\n    iChronology.validate(this, newValues);\n\n    return new Partial(iChronology, combinedTypes, newValues);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..beb974d6 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,86 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+\n+    int index = indexOf(fieldType);\n+\n+    if (index == -1) {\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+        int[] newValues = new int[newTypes.length];\n+\n+        // find correct insertion point to keep largest-smallest order\n+        int i = 0;\n+        DurationField unitField = fieldType.getDurationType().getField(iChronology);\n+\n+        if (unitField.isSupported()) {\n+            for (; i < iTypes.length; i++) {\n+                DateTimeFieldType loopType = iTypes[i];\n+\n+                if (loopType == null) {\n+                    newTypes[i] = fieldType;\n+                    newValues[i] = value;\n+\n+                    return withLater(null, i, newTypes, newValues);\n+                }\n+                DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+\n+                if (loopUnitField.isSupported()) {\n+                    int compare = unitField.compareTo(loopUnitField);\n+\n+                    if (compare > 0) {\n+                        break;\n+                    } else if (compare == 0) {\n+                        DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n+                        DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+\n+                        if (rangeField.compareTo(loopRangeField) > 0) {\n                             break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n                         }\n                     }\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n         }\n+\n+        System.arraycopy(iTypes, 0, newTypes, 0, i);\n+        System.arraycopy(iValues, 0, newValues, 0, i);\n+        newTypes[i] = fieldType;\n+        newValues[i] = value;\n+        System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n+        System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n+\n+        return withLater(null, i, newTypes, newValues);\n+    } else {\n         if (value == getValue(index)) {\n-            return this;\n+          return this;\n         }\n-        int[] newValues = getValues();\n+\n+        int[] newValues = iValues.clone();\n         newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        return new Partial(this, iTypes.clone(), newValues);\n     }\n+}\n+\n+private Partial withLater(DateTimeFieldType[] types, int setIndex, DateTimeFieldType[] newTypes, int[] newValues) {\n+    if (types == null || newTypes[setIndex] != types[setIndex]) {\n+        // either the array is empty or the field types differ\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+\n+        return newPartial;\n+    }\n+\n+    DateTimeFieldType[] combinedTypes = iTypes.clone();\n+    combinedTypes[setIndex] = newTypes[setIndex];\n+\n+    iChronology.validate(this, newValues);\n+\n+    return new Partial(iChronology, combinedTypes, newValues);\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: no suitable constructor found for Partial(Partial,DateTimeFieldType[],int[])",
    "test_result": "ERROR"
}