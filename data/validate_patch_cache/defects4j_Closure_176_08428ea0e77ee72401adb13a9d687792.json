{
    "patch": "  void ensurePropertyDefined(Node getprop, JSType rightType) {\n    String propName = getprop.getLastChild().getString();\n    Node obj = getprop.getFirstChild();\n\n    JSType nodeType = getJSType(obj);\n    ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());\n    boolean propCreationInConstructor = obj.isThis() &&\n        getJSType(syntacticScope.getRootNode()).isConstructor();\n\n    if (objectType != null && objectType.hasProperty(propName)) {\n      return;\n    }\n\n    if (objectType == null && nodeType.isUnknown()) {\n      registry.registerPropertyOnType(propName, unknownType);\n      objectType = unknownType;\n    } else {\n      objectType = objectType == null ?\n          registry.createAnonymousObjectType(objectType != null && objectType.isStruct()) :\n          objectType;\n      registry.defineAccessType(obj, objectType,\n          getDefaultDefineType(obj.isFromExterns()), false);\n      registry.defineProperty(objectType, propName,\n          rightType, obj, getDefaultDefineType(obj.isFromExterns()));\n    }\n\n    boolean staticPropCreation = false;\n    boolean isPrototypeDeclaration =\n        NodeUtil.isPrototypePropertyDeclaration(getprop.getParent().getParent());\n    Node maybeAssignStm = getprop.getParent().getParent();\n    if (getJSType(obj).isFunctionType() && isPrototypeDeclaration) {\n      obj = NodeUtil.getPrototypeClass(obj);\n      objectType = ObjectType.cast(\n          obj.getFirstChild().getFirstChild().getJSType());\n      staticPropCreation = objectType != null &&\n          syntacticScope.isGlobal() &&\n          objectType.getOwnerFunction().getReferenceName().equals(\n              maybeAssignStm.getFirstChild().getQualifiedName());\n    } else if (getJSType(obj).isConstructor()) {\n      objectType = ObjectType.cast(getJSType(obj).toMaybeObjectType());\n      staticPropCreation = objectType != null &&\n          syntacticScope.isGlobal() &&\n          objectType.hasOwnProperty(propName) &&\n          objectType.getSlot(propName).getDeclaringType().equals(objectType);\n    }\n\n    boolean isStructProp = false;\n    if (nodeType.isStruct()) {\n      if (objectType.getReferenceName() != null &&\n          syntacticScope.isClassOrPrototypeMethod()) {\n        // This is a property being defined on \"this\" inside a class prototype\n        // method. It's not a struct property.\n      } else if (isPrototypeDeclaration || staticPropCreation) {\n        // This is a prototype property, treat it like a normal property.\n      } else {\n        // This is a struct property and objectType can only be null or a struct.\n        isStructProp = true;\n      }\n    }\n    if (isStructProp) {\n      JSError error = JSError.make(\n          getprop,\n          TypeCheck.UNDEFINED_PROPERTY_ERROR,\n          propName,\n          nodeType.toString());\n      compiler.report(error);\n    }\n\n    if (objectType != null && objectType.isStruct()) {\n      return;  // We're done.\n    }\n\n    ObjectType ownerType = getObjectAccessType(getprop.getParent());\n    if (objectType != null && ownerType != null && ownerType.isStruct()) {\n      return;\n    }\n\n    boolean isNew = false;\n    ObjectType type;\n    if (getJSType(obj).isFunctionType()) {\n      FunctionType fType = getJSType(obj).toMaybeFunctionType();\n      type = propertyNameIsNumeric(propName) ?\n          fType.getPrototype() : fType.getInstanceType();\n      if (!objectType.isUnknown() &&\n          objectType.getOwnPropertyNames().contains(propName)) {\n        if (objectType.getSlot(propName).isConstant()) {\n          return;\n        }\n        isNew = objectType.getSlot(propName).getType().isUnknown();\n      }\n    } else {\n      type = objectType;\n      isNew = objectType == null || !objectType.hasProperty(propName);\n\n      boolean objectHasDeclaredType =\n          objectType != null ? hasTypeInformationForObjectNode(obj) : false;\n      boolean objIsThis = obj.isThis();\n\n      if (objIsThis) {\n        if (!objectHasDeclaredType && !declaredProperties.contains(obj)) {\n          declaredProperties.add(obj);\n          JSError warning =\n              JSError.make(obj, TypeValidator.CANNOT_ADD_PROPERTIES_TO_THIS);\n          compiler.report(warning);\n        }\n      } else if (!objectHasDeclaredType || isNew) {\n        boolean warn = true;\n        // We'll warn if we're processing code for later check passes or\n        // if we're a struct or if we're a scope other than a function.\n        if (!syntacticScope.isFunctionScope()) {\n          if (getprop.getSourceFileName().contains(\"externs\")) {\n            // If we're in externs, this is a property on a DOM element that\n            // doesn't have any type information.  We don't want to be\n            // overly aggressive and warn about everything.  Only warn\n            // about certain specific cases.\n            warn = isNodeUnannotatedBuiltInFunction(getprop) ||\n                propNameToPositionInGoogleMaps(propName) != null;\n          } else if (syntacticScope.isGlobal()) {\n            if (isNodeUnannotatedBuiltInFunction(getprop)) {\n              // Same thing here as with externs.  Don't want to warn about\n              // everything, just certain cases.\n              warn = true;\n            } else {\n              return;\n            }\n          } else if (!syntacticScope.isFunctionPrototypeScope()) {\n            warn = false;\n          }\n        } else if (objectType != null && objectType.isStruct()) {\n          warn = false;\n        } else if (isNew && ownerType != null && ownerType.isFunctionPrototypeType()) {\n          warn = false;\n        } else if (isNew && obj.getParent().isName() &&\n            syntaxVersion == LanguageMode.ECMASCRIPT3) {\n          // Don't warn about undeclared properties on legacy constructor\n          // functions. JSCompiler can't tell if the property was added just to\n          // be a polyfill.\n          warn = false;\n        }\n        if (warn && !declaredProperties.contains(obj)) {\n          declaredProperties.add(obj);\n          if (ownerType == null) {\n            JSError warning = JSError.make(getprop,\n                TypeValidator.UNDECLARED_PROPERTY,\n                propName,\n                syntacticScope.getClosestHoistScope(getprop)\n                    .getVarName(obj),\n                type.toString());\n            compiler.report(warning);\n          } else {\n            JSError warning = JSError.make(getprop,\n                TypeValidator.UNDECLARED_PROPERTY,\n                propName,\n                ownerType.getReferenceName(),\n                type.toString());\n            compiler.report(warning);\n          }\n        }\n      }\n    }\n\n    if (isNew) {\n      ensureTypedScopeInitialized(obj);\n      registry.defineProperty(type, propName,\n          rightType, obj, getDefaultDefineType(obj.isFromExterns()));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex c43a7d1a..f8e38066 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -521,109 +521,174 @@ class TypeInference\n    * an assignment or a type cast.\n    */\n   private void updateScopeForTypeChange(\n-      FlowScope scope, Node left, JSType leftType, JSType resultType) {\n-    Preconditions.checkNotNull(resultType);\n-    switch (left.getType()) {\n-      case Token.NAME:\n-        String varName = left.getString();\n-        Var var = syntacticScope.getVar(varName);\n-        boolean isVarDeclaration = left.hasChildren();\n-\n-        // When looking at VAR initializers for declared VARs, we tend\n-        // to use the declared type over the type it's being\n-        // initialized to in the global scope.\n-        //\n-        // For example,\n-        // /** @param {number} */ var f = goog.abstractMethod;\n-        // it's obvious that the programmer wants you to use\n-        // the declared function signature, not the inferred signature.\n-        //\n-        // Or,\n-        // /** @type {Object.<string>} */ var x = {};\n-        // the one-time anonymous object on the right side\n-        // is as narrow as it can possibly be, but we need to make\n-        // sure we back-infer the <string> element constraint on\n-        // the left hand side, so we use the left hand side.\n-\n-        boolean isVarTypeBetter = !isVarDeclaration || var == null || var.isTypeInferred();\n-            // Makes it easier to check for NPEs.\n-\n-        // TODO(nicksantos): This might be a better check once we have\n-        // back-inference of object/array constraints.  It will probably\n-        // introduce more type warnings.  It uses the result type iff it's\n-        // strictly narrower than the declared var type.\n-        //\n-        //boolean isVarTypeBetter = isVarDeclaration &&\n-        //    (varType.restrictByNotNullOrUndefined().isSubtype(resultType)\n-        //     || !resultType.isSubtype(varType));\n-\n-\n-        if (isVarTypeBetter) {\n-          redeclareSimpleVar(scope, left, resultType);\n-        }\n-        left.setJSType(isVarDeclaration || leftType == null ?\n-            resultType : null);\n-\n-        if (var != null && var.isTypeInferred()) {\n-          JSType oldType = var.getType();\n-          var.setType(oldType == null ?\n-              resultType : oldType.getLeastSupertype(resultType));\n-        }\n-        break;\n-      case Token.GETPROP:\n-        String qualifiedName = left.getQualifiedName();\n-        if (qualifiedName != null) {\n-          scope.inferQualifiedSlot(left, qualifiedName,\n-              leftType == null ? unknownType : leftType,\n-              resultType);\n-        }\n-\n-        left.setJSType(resultType);\n-        ensurePropertyDefined(left, resultType);\n-        break;\n-    }\n-  }\n-\n-  /**\n-   * Defines a property if the property has not been defined yet.\n-   */\n-  private void ensurePropertyDefined(Node getprop, JSType rightType) {\n+  void ensurePropertyDefined(Node getprop, JSType rightType) {\n     String propName = getprop.getLastChild().getString();\n     Node obj = getprop.getFirstChild();\n+\n     JSType nodeType = getJSType(obj);\n     ObjectType objectType = ObjectType.cast(\n         nodeType.restrictByNotNullOrUndefined());\n     boolean propCreationInConstructor = obj.isThis() &&\n         getJSType(syntacticScope.getRootNode()).isConstructor();\n \n-    if (objectType == null) {\n-      registry.registerPropertyOnType(propName, nodeType);\n+    if (objectType != null && objectType.hasProperty(propName)) {\n+      return;\n+    }\n+\n+    if (objectType == null && nodeType.isUnknown()) {\n+      registry.registerPropertyOnType(propName, unknownType);\n+      objectType = unknownType;\n+    } else {\n+      objectType = objectType == null ?\n+          registry.createAnonymousObjectType(objectType != null && objectType.isStruct()) :\n+          objectType;\n+      registry.defineAccessType(obj, objectType,\n+          getDefaultDefineType(obj.isFromExterns()), false);\n+      registry.defineProperty(objectType, propName,\n+          rightType, obj, getDefaultDefineType(obj.isFromExterns()));\n+    }\n+\n+    boolean staticPropCreation = false;\n+    boolean isPrototypeDeclaration =\n+        NodeUtil.isPrototypePropertyDeclaration(getprop.getParent().getParent());\n+    Node maybeAssignStm = getprop.getParent().getParent();\n+    if (getJSType(obj).isFunctionType() && isPrototypeDeclaration) {\n+      obj = NodeUtil.getPrototypeClass(obj);\n+      objectType = ObjectType.cast(\n+          obj.getFirstChild().getFirstChild().getJSType());\n+      staticPropCreation = objectType != null &&\n+          syntacticScope.isGlobal() &&\n+          objectType.getOwnerFunction().getReferenceName().equals(\n+              maybeAssignStm.getFirstChild().getQualifiedName());\n+    } else if (getJSType(obj).isConstructor()) {\n+      objectType = ObjectType.cast(getJSType(obj).toMaybeObjectType());\n+      staticPropCreation = objectType != null &&\n+          syntacticScope.isGlobal() &&\n+          objectType.hasOwnProperty(propName) &&\n+          objectType.getSlot(propName).getDeclaringType().equals(objectType);\n+    }\n+\n+    boolean isStructProp = false;\n+    if (nodeType.isStruct()) {\n+      if (objectType.getReferenceName() != null &&\n+          syntacticScope.isClassOrPrototypeMethod()) {\n+        // This is a property being defined on \"this\" inside a class prototype\n+        // method. It's not a struct property.\n+      } else if (isPrototypeDeclaration || staticPropCreation) {\n+        // This is a prototype property, treat it like a normal property.\n+      } else {\n+        // This is a struct property and objectType can only be null or a struct.\n+        isStructProp = true;\n+      }\n+    }\n+    if (isStructProp) {\n+      JSError error = JSError.make(\n+          getprop,\n+          TypeCheck.UNDEFINED_PROPERTY_ERROR,\n+          propName,\n+          nodeType.toString());\n+      compiler.report(error);\n+    }\n+\n+    if (objectType != null && objectType.isStruct()) {\n+      return;  // We're done.\n+    }\n+\n+    ObjectType ownerType = getObjectAccessType(getprop.getParent());\n+    if (objectType != null && ownerType != null && ownerType.isStruct()) {\n+      return;\n+    }\n+\n+    boolean isNew = false;\n+    ObjectType type;\n+    if (getJSType(obj).isFunctionType()) {\n+      FunctionType fType = getJSType(obj).toMaybeFunctionType();\n+      type = propertyNameIsNumeric(propName) ?\n+          fType.getPrototype() : fType.getInstanceType();\n+      if (!objectType.isUnknown() &&\n+          objectType.getOwnPropertyNames().contains(propName)) {\n+        if (objectType.getSlot(propName).isConstant()) {\n+          return;\n+        }\n+        isNew = objectType.getSlot(propName).getType().isUnknown();\n+      }\n     } else {\n-      if (nodeType.isStruct() && !objectType.hasProperty(propName)) {\n-        // In general, we don't want to define a property on a struct object,\n-        // b/c TypeCheck will later check for improper property creation on\n-        // structs. There are two exceptions.\n-        // 1) If it's a property created inside the constructor, on the newly\n-        //    created instance, allow it.\n-        // 2) If it's a prototype property, allow it. For example:\n-        //    Foo.prototype.bar = baz;\n-        //    where Foo.prototype is a struct and the assignment happens at the\n-        //    top level and the constructor Foo is defined in the same file.\n-        boolean staticPropCreation = false;\n-        Node maybeAssignStm = getprop.getParent().getParent();\n-        if (syntacticScope.isGlobal() &&\n-            NodeUtil.isPrototypePropertyDeclaration(maybeAssignStm)) {\n-          String propCreationFilename = maybeAssignStm.getSourceFileName();\n-          Node ctor = objectType.getOwnerFunction().getSource();\n-          if (ctor != null &&\n-              ctor.getSourceFileName().equals(propCreationFilename)) {\n-            staticPropCreation = true;\n+      type = objectType;\n+      isNew = objectType == null || !objectType.hasProperty(propName);\n+\n+      boolean objectHasDeclaredType =\n+          objectType != null ? hasTypeInformationForObjectNode(obj) : false;\n+      boolean objIsThis = obj.isThis();\n+\n+      if (objIsThis) {\n+        if (!objectHasDeclaredType && !declaredProperties.contains(obj)) {\n+          declaredProperties.add(obj);\n+          JSError warning =\n+              JSError.make(obj, TypeValidator.CANNOT_ADD_PROPERTIES_TO_THIS);\n+          compiler.report(warning);\n+        }\n+      } else if (!objectHasDeclaredType || isNew) {\n+        boolean warn = true;\n+        // We'll warn if we're processing code for later check passes or\n+        // if we're a struct or if we're a scope other than a function.\n+        if (!syntacticScope.isFunctionScope()) {\n+          if (getprop.getSourceFileName().contains(\"externs\")) {\n+            // If we're in externs, this is a property on a DOM element that\n+            // doesn't have any type information.  We don't want to be\n+            // overly aggressive and warn about everything.  Only warn\n+            // about certain specific cases.\n+            warn = isNodeUnannotatedBuiltInFunction(getprop) ||\n+                propNameToPositionInGoogleMaps(propName) != null;\n+          } else if (syntacticScope.isGlobal()) {\n+            if (isNodeUnannotatedBuiltInFunction(getprop)) {\n+              // Same thing here as with externs.  Don't want to warn about\n+              // everything, just certain cases.\n+              warn = true;\n+            } else {\n+              return;\n+            }\n+          } else if (!syntacticScope.isFunctionPrototypeScope()) {\n+            warn = false;\n           }\n+        } else if (objectType != null && objectType.isStruct()) {\n+          warn = false;\n+        } else if (isNew && ownerType != null && ownerType.isFunctionPrototypeType()) {\n+          warn = false;\n+        } else if (isNew && obj.getParent().isName() &&\n+            syntaxVersion == LanguageMode.ECMASCRIPT3) {\n+          // Don't warn about undeclared properties on legacy constructor\n+          // functions. JSCompiler can't tell if the property was added just to\n+          // be a polyfill.\n+          warn = false;\n         }\n-        if (!propCreationInConstructor && !staticPropCreation) {\n-          return; // Early return to avoid creating the property below.\n+        if (warn && !declaredProperties.contains(obj)) {\n+          declaredProperties.add(obj);\n+          if (ownerType == null) {\n+            JSError warning = JSError.make(getprop,\n+                TypeValidator.UNDECLARED_PROPERTY,\n+                propName,\n+                syntacticScope.getClosestHoistScope(getprop)\n+                    .getVarName(obj),\n+                type.toString());\n+            compiler.report(warning);\n+          } else {\n+            JSError warning = JSError.make(getprop,\n+                TypeValidator.UNDECLARED_PROPERTY,\n+                propName,\n+                ownerType.getReferenceName(),\n+                type.toString());\n+            compiler.report(warning);\n+          }\n         }\n       }\n+    }\n+\n+    if (isNew) {\n+      ensureTypedScopeInitialized(obj);\n+      registry.defineProperty(type, propName,\n+          rightType, obj, getDefaultDefineType(obj.isFromExterns()));\n+    }\n+  }\n \n       if (ensurePropertyDeclaredHelper(getprop, objectType)) {\n         return;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}