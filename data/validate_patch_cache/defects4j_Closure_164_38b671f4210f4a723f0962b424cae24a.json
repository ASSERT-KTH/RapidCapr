{
    "patch": "public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      boolean thisOptional = thisParam.isOptionalArg();\n      boolean thatOptional = thatParam.isOptionalArg();\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      if (thisOptional && !thatOptional) {\n        break;\n      }\n\n      if (thatOptional && !thisOptional) {\n        thatParam = thatParam.getNext();\n        continue;\n      }\n\n      // paramType[i] <: that.paramType[j] (covariant)\n      if (thisParamType != null && thatParamType != null) {\n        if (!thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      } else if (thisParamType == null && thatParamType == null) {\n        // This is already covered by the previous check\n      } else {\n        return false;\n      }\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicate the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        break;\n      }\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    if (thisParam != null && !thisParam.isOptionalArg()) {\n      return false;\n    }\n    \n    // Check if the toString property type and the type of the property it overrides\n    // are compatible\n    JSType thisToStringType = this.getPropType(\"toString\");\n    JSType thatToStringType = that.getPropType(\"toString\");\n    if (thisToStringType == null || thatToStringType == null) {\n      return true;\n    }\n    return thatToStringType.isSubtype(thisToStringType);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..ab079965 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -77,7 +77,7 @@ final class ArrowType extends JSType {\n   }\n \n   @Override\n-  public boolean isSubtype(JSType other) {\n+public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n       return false;\n     }\n@@ -113,25 +113,36 @@ final class ArrowType extends JSType {\n     // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n-      if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n-          return false;\n-        }\n-      }\n+\n+      boolean thisOptional = thisParam.isOptionalArg();\n+      boolean thatOptional = thatParam.isOptionalArg();\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+      if (thisOptional && !thatOptional) {\n+        break;\n+      }\n+\n+      if (thatOptional && !thisOptional) {\n+        thatParam = thatParam.getNext();\n+        continue;\n+      }\n+\n+      // paramType[i] <: that.paramType[j] (covariant)\n+      if (thisParamType != null && thatParamType != null) {\n+        if (!thatParamType.isSubtype(thisParamType)) {\n+          return false;\n+        }\n+      } else if (thisParamType == null && thatParamType == null) {\n+        // This is already covered by the previous check\n+      } else {\n+        return false;\n+      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -141,16 +152,25 @@ final class ArrowType extends JSType {\n         thatParam = thatParam.getNext();\n       }\n \n-      // both var_args indicates the end\n+      // both var_args indicate the end\n       if (thisIsVarArgs && thatIsVarArgs) {\n-        thisParam = null;\n-        thatParam = null;\n+        break;\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n-    return true;\n+    // \"that\" can't be a supertype, because it's missing a required argument.\n+    if (thisParam != null && !thisParam.isOptionalArg()) {\n+      return false;\n+    }\n+    \n+    // Check if the toString property type and the type of the property it overrides\n+    // are compatible\n+    JSType thisToStringType = this.getPropType(\"toString\");\n+    JSType thatToStringType = that.getPropType(\"toString\");\n+    if (thisToStringType == null || thatToStringType == null) {\n+      return true;\n+    }\n+    return thatToStringType.isSubtype(thisToStringType);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}