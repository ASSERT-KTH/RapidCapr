{
    "patch": "    protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n      for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n          }\n          Integer basicRow = getBasicRow(colIndex);\n              // if the basic row is found to be the objective function row\n              // set the coefficient to 0 -> this case handles unconstrained \n              // variables that are still part of the objective function\n          if (basicRows.contains(basicRow)) {\n              // if multiple variables can take a given value\n              // then we choose the first and set the rest equal to 0\n              coefficients[i] = restrictToNonNegative ? 0 : -Math.abs(mostNegative);\n          } else {\n              basicRows.add(basicRow);\n              if(basicRow == null) {\n                  coefficients[i] = 0;\n              } else if(restrictToNonNegative && getEntry(basicRow, getRhsOffset()) < 0) {\n                  coefficients = null;\n                  break;\n              } else {\n                  coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n              }\n          }\n      }\n      if(coefficients != null) {\n          return new RealPointValuePair(coefficients, f.getValue(coefficients));\n      } else {\n          return null;\n      }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..37afa0eb8 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -413,15 +413,24 @@ class SimplexTableau implements Serializable {\n           if (basicRows.contains(basicRow)) {\n               // if multiple variables can take a given value\n               // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+              coefficients[i] = restrictToNonNegative ? 0 : -Math.abs(mostNegative);\n           } else {\n               basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+              if(basicRow == null) {\n+                  coefficients[i] = 0;\n+              } else if(restrictToNonNegative && getEntry(basicRow, getRhsOffset()) < 0) {\n+                  coefficients = null;\n+                  break;\n+              } else {\n+                  coefficients[i] = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n+              }\n           }\n       }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+      if(coefficients != null) {\n+          return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+      } else {\n+          return null;\n+      }\n     }\n \n     /**",
    "result_reason": "java.lang.NullPointerException",
    "test_result": "FAIL"
}