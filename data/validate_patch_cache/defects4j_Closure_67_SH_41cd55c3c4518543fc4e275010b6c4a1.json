{
    "patch": "          ){\n\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty =\n                n.getFirstChild().getType() == Token.GETPROP &&\n                n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n                n.getFirstChild().getFirstChild().getNext().getString().equals(\"prototype\");\n\n\n        if (isChainedProperty) {\n          return true;\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..146010eb 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,22 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ){\n+\n+        // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty =\n+                n.getFirstChild().getType() == Token.GETPROP &&\n+                n.getFirstChild().getFirstChild().getNext().getType() == Token.STRING &&\n+                n.getFirstChild().getFirstChild().getNext().getString().equals(\"prototype\");\n+\n+\n+        if (isChainedProperty) {\n+          return true;\n+        }\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}