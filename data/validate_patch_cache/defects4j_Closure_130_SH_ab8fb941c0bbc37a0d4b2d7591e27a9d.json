{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n        // {@code name} meets condition (a) and (b), so let's try to inline it.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.CALL_GET && ref.name != null && ref.name.type == Name.Type.OBJECTLIT &&\n              ref.getTwin() != null && ref.getTwin().type == Type.SET_FROM_GLOBAL) {\n            Name alias = ref.name;\n            // If the alias of {@code name} has a property with the same name as\n            // {@code name} and the property stops {@code name} from being inlined,\n            // then we cannot inline the alias.\n            if (alias.aliasingGets == 0 && !hasSameNamedProp(alias.props)) {\n              if (inlineNameIfPossible(alias, name)) {\n                // If the alias is inlined, remove references to it.\n                name.removeRef(ref);\n                alias.removeRef(ref.getTwin());\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..813432be 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,26 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n+        // {@code name} meets condition (a) and (b), so let's try to inline it.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.CALL_GET && ref.name != null && ref.name.type == Name.Type.OBJECTLIT &&\n+              ref.getTwin() != null && ref.getTwin().type == Type.SET_FROM_GLOBAL) {\n+            Name alias = ref.name;\n+            // If the alias of {@code name} has a property with the same name as\n+            // {@code name} and the property stops {@code name} from being inlined,\n+            // then we cannot inline the alias.\n+            if (alias.aliasingGets == 0 && !hasSameNamedProp(alias.props)) {\n+              if (inlineNameIfPossible(alias, name)) {\n+                // If the alias is inlined, remove references to it.\n+                name.removeRef(ref);\n+                alias.removeRef(ref.getTwin());\n+              }\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}