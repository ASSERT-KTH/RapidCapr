{
    "patch": "// Check that the access is not used as an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\nNode grandparent = parent.getParent();\nif (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n  Node assignRight = parent.getLastChild();\n  if (NodeUtil.isImmutableValue(assignRight)) {\n    return n;\n  }\n}\nif (grandparent != null && grandparen",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..fceeb082 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,21 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+Node grandparent = parent.getParent();\n+if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+  Node assignRight = parent.getLastChild();\n+  if (NodeUtil.isImmutableValue(assignRight)) {\n+    return n;\n+  }\n+}\n+if (grandparent != null && grandparen\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}