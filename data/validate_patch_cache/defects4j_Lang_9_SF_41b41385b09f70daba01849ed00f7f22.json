{
    "patch": "private void init() {\n    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n\n    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n\n    StringBuilder regex= new StringBuilder();\n    List<Strategy> collector = new ArrayList<Strategy>();\n\n    Matcher patternMatcher= formatPattern.matcher(pattern);\n    if(!patternMatcher.lookingAt()) {\n        throw new IllegalArgumentException(\"Invalid pattern\");\n    }\n\n    currentFormatField= patternMatcher.group();\n    Strategy currentStrategy= getStrategy(currentFormatField);\n    while(true) {\n        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n        if(!patternMatcher.lookingAt()) {\n            nextStrategy = null;\n            if (currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            break;\n        }\n        String nextFormatField= patternMatcher.group();\n        nextStrategy = getStrategy(nextFormatField);\n        if(currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= nextFormatField;\n        currentStrategy= nextStrategy;\n    }\n\n    currentFormatField= null;\n    strategies= collector.toArray(new Strategy[collector.size()]);\n    parsePattern= Pattern.compile(regex.toString());\n\n    // Parse default date into a Calendar object\n    Calendar calendar = Calendar.getInstance(timeZone, locale);\n    Matcher matcher = parsePattern.matcher(\"\");\n    matcher.reset(defaultPattern);\n\n    if (matcher.matches() && !calendar.isSet(Calendar.YEAR)) {\n        int year = parseDefaultYear(matcher.group(1));\n\n        calendar.set(Calendar.YEAR, year);\n        calendar.set(Calendar.MONTH, Integer.parseInt(matcher.group(2))-1);\n        calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(matcher.group(3)));\n\n        for (int i=4; i<=matcher.groupCount(); i++) {\n            String capitalizedName= getName(matcher.group(i));\n            final int j = i; // For access from inner class\n            KeyValue keyValue= new KeyValue() {\n                public void addRegex(CalendarParser calendarParser, StringBuilder regex) {\n                    getStrategy(capitalizedName).addRegex(calendarParser, regex);\n                }\n                public int setValue(Calendar calendar, String value, int pos) {\n                    return getStrategy(capitalizedName).setValue(calendar, value, pos, j);\n                }\n            };\n            int key= getKey(i);\n            KeyValue[] oldValues= nameValues.get(key);\n            KeyValue[] newValues= (oldValues == null) ? new KeyValue[j+1] : new KeyValue[j+1];\n            System.arraycopy(oldValues, 0, newValues, 0, oldValues.length);\n            newValues[j]= keyValue;\n            nameValues.put(key, newValues);\n        }\n    }\n    defaultCenturyStart = calendar.getTimeInMillis();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..7e7c745b 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,43 +112,77 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private void init() {\n+    thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    StringBuilder regex= new StringBuilder();\n+    List<Strategy> collector = new ArrayList<Strategy>();\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+    Matcher patternMatcher= formatPattern.matcher(pattern);\n+    if(!patternMatcher.lookingAt()) {\n+        throw new IllegalArgumentException(\"Invalid pattern\");\n+    }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n+    currentFormatField= patternMatcher.group();\n+    Strategy currentStrategy= getStrategy(currentFormatField);\n+    while(true) {\n+        patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+        if(!patternMatcher.lookingAt()) {\n+            nextStrategy = null;\n+            if (currentStrategy.addRegex(this, regex)) {\n                 collector.add(currentStrategy);\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n+            break;\n         }\n+        String nextFormatField= patternMatcher.group();\n+        nextStrategy = getStrategy(nextFormatField);\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+        currentFormatField= nextFormatField;\n+        currentStrategy= nextStrategy;\n     }\n \n+    currentFormatField= null;\n+    strategies= collector.toArray(new Strategy[collector.size()]);\n+    parsePattern= Pattern.compile(regex.toString());\n+\n+    // Parse default date into a Calendar object\n+    Calendar calendar = Calendar.getInstance(timeZone, locale);\n+    Matcher matcher = parsePattern.matcher(\"\");\n+    matcher.reset(defaultPattern);\n+\n+    if (matcher.matches() && !calendar.isSet(Calendar.YEAR)) {\n+        int year = parseDefaultYear(matcher.group(1));\n+\n+        calendar.set(Calendar.YEAR, year);\n+        calendar.set(Calendar.MONTH, Integer.parseInt(matcher.group(2))-1);\n+        calendar.set(Calendar.DAY_OF_MONTH, Integer.parseInt(matcher.group(3)));\n+\n+        for (int i=4; i<=matcher.groupCount(); i++) {\n+            String capitalizedName= getName(matcher.group(i));\n+            final int j = i; // For access from inner class\n+            KeyValue keyValue= new KeyValue() {\n+                public void addRegex(CalendarParser calendarParser, StringBuilder regex) {\n+                    getStrategy(capitalizedName).addRegex(calendarParser, regex);\n+                }\n+                public int setValue(Calendar calendar, String value, int pos) {\n+                    return getStrategy(capitalizedName).setValue(calendar, value, pos, j);\n+                }\n+            };\n+            int key= getKey(i);\n+            KeyValue[] oldValues= nameValues.get(key);\n+            KeyValue[] newValues= (oldValues == null) ? new KeyValue[j+1] : new KeyValue[j+1];\n+            System.arraycopy(oldValues, 0, newValues, 0, oldValues.length);\n+            newValues[j]= keyValue;\n+            nameValues.put(key, newValues);\n+        }\n+    }\n+    defaultCenturyStart = calendar.getTimeInMillis();\n+}\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /* (non-Javadoc)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}