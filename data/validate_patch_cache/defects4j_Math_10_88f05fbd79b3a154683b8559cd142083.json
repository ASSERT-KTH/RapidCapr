{
    "patch": "if (Double.isNaN(result[resultOffset])) {\n    if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n    } else if (y[yOffset] == 0.0 && x[xOffset] == 0.0) {\n        result[resultOffset] = Double.NaN;\n    } else if (y[yOffset] >= 0.0 && x[xOffset] == 0.0) {\n        result[resultOffset] = FastMath.PI / 2.0;\n    } else if (y[yOffset] < 0.0 && x[xOffset] == 0.0) {\n        result[resultOffset] = -FastMath.PI / 2.0;\n    } else if (Double.isInfinite(y[yOffset]) && x[xOffset] > 0.0) {\n        result[resultOffset] = FastMath.copySign(0.0, y[yOffset]);\n    } else if (Double.isInfinite(y[yOffset]) && x[xOffset] < 0.0) {\n        result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]);\n    } else if (Double.isInfinite(x[xOffset]) && y[yOffset] >= 0.0) {\n        result[resultOffset] = FastMath.PI / 2.0 * FastMath.signum(y[yOffset]);\n    } else if (Double.isInfinite(x[xOffset]) && y[yOffset] < 0.0) {\n        result[resultOffset] = -FastMath.PI / 2.0 * FastMath.signum(y[yOffset]);\n    } else {\n        throw new MathInternalError();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..cc348ae95 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,27 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(result[resultOffset])) {\n+    if (Double.isInfinite(y[yOffset]) || Double.isInfinite(x[xOffset])) {\n+        result[resultOffset] = FastMath.atan2(y[yOffset], x[xOffset]);\n+    } else if (y[yOffset] == 0.0 && x[xOffset] == 0.0) {\n+        result[resultOffset] = Double.NaN;\n+    } else if (y[yOffset] >= 0.0 && x[xOffset] == 0.0) {\n+        result[resultOffset] = FastMath.PI / 2.0;\n+    } else if (y[yOffset] < 0.0 && x[xOffset] == 0.0) {\n+        result[resultOffset] = -FastMath.PI / 2.0;\n+    } else if (Double.isInfinite(y[yOffset]) && x[xOffset] > 0.0) {\n+        result[resultOffset] = FastMath.copySign(0.0, y[yOffset]);\n+    } else if (Double.isInfinite(y[yOffset]) && x[xOffset] < 0.0) {\n+        result[resultOffset] = FastMath.copySign(FastMath.PI, y[yOffset]);\n+    } else if (Double.isInfinite(x[xOffset]) && y[yOffset] >= 0.0) {\n+        result[resultOffset] = FastMath.PI / 2.0 * FastMath.signum(y[yOffset]);\n+    } else if (Double.isInfinite(x[xOffset]) && y[yOffset] < 0.0) {\n+        result[resultOffset] = -FastMath.PI / 2.0 * FastMath.signum(y[yOffset]);\n+    } else {\n+        throw new MathInternalError();\n+    }\n+}\n \n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}