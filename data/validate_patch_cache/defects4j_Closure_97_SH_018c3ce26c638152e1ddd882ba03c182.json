{
    "patch": "case Token.URSH:\n  // JavaScript handles zero shifts on signed numbers differently than\n  // Java as an Java int can not represent the unsigned 32-bit number\n  // where JavaScript can so use a long here.\n  result = lvalInt >>> rvalInt;\n  break;\ncase Token.URSH2:\n  // applied after signed conversions so we just need to make the value unsigned\n  result = (lvalInt >> rvalInt);\n  if (lval < 0) {\n    result &= ((1 << (32 - rvalInt)) - 1) << rvalInt;\n    result |= 0x80000000 >>> rvalInt;\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..f061da02 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -695,7 +695,20 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n+case Token.URSH:\n+  // JavaScript handles zero shifts on signed numbers differently than\n+  // Java as an Java int can not represent the unsigned 32-bit number\n+  // where JavaScript can so use a long here.\n+  result = lvalInt >>> rvalInt;\n+  break;\n+case Token.URSH2:\n+  // applied after signed conversions so we just need to make the value unsigned\n+  result = (lvalInt >> rvalInt);\n+  if (lval < 0) {\n+    result &= ((1 << (32 - rvalInt)) - 1) << rvalInt;\n+    result |= 0x80000000 >>> rvalInt;\n+  }\n+  break;\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}