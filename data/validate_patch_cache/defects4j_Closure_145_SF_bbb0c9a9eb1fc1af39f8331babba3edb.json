{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n        // For labels with block children, we need to ensure that a\n        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n        // are skipped. \n        boolean isEmptyStatement = (n.getType() == Token.EMPTY);\n        boolean isBlockWithMoreThanOneChild = (n.getType() == Token.BLOCK && n.getChildCount() > 1);\n        return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) && !isEmptyStatement && !isBlockWithMoreThanOneChild;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..03672bd7 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -709,9 +709,9 @@ class CodeGenerator {\n         // For labels with block children, we need to ensure that a\n         // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n         // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+        boolean isEmptyStatement = (n.getType() == Token.EMPTY);\n+        boolean isBlockWithMoreThanOneChild = (n.getType() == Token.BLOCK && n.getChildCount() > 1);\n+        return (n.getType() == Token.FUNCTION || n.getType() == Token.DO) && !isEmptyStatement && !isBlockWithMoreThanOneChild;\n   }\n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}