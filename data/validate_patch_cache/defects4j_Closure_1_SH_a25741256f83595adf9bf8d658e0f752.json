{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // Strip unreferenced args off the end of the function declaration.\n    Node param = argList.getFirstChild();    \n    while (param != null) {\n      Node next = param.getNext();\n      \n      if (referenced.contains(fnScope.getVar(param.getString()))) {\n        List<Var> varList = referenced.get(fnScope.getVar(param.getString()).getName());\n        Set<Node> nameNodes = Sets.newHashSet();\n        for (Var var : varList) {\n          Node nameNode = var.getNameNode();\n          while (nameNode != null && nameNode.isDefaultValue()) {\n            nameNode = nameNode.getFirstChild();\n          }\n          nameNodes.add(nameNode);\n\n        }\n        \n        boolean hasAll = true;\n        for (Node nameNode : nameNodes) {\n          if (nameNode == null || \n            !NodeUtil.references(nodeFinder, function, nameNode)) {\n            hasAll = false;\n            break;\n          }\n        }\n\n        if (!hasAll) {\n          argList.removeChild(param);\n          compiler.reportCodeChange();\n        }\n      } else {\n        argList.removeChild(param);\n        compiler.reportChangeToEnclosingScope(argList);\n      }\n\n      param = next;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f1176f6e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,59 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node param = argList.getFirstChild();    \n+    while (param != null) {\n+      Node next = param.getNext();\n+      \n+      if (referenced.contains(fnScope.getVar(param.getString()))) {\n+        List<Var> varList = referenced.get(fnScope.getVar(param.getString()).getName());\n+        Set<Node> nameNodes = Sets.newHashSet();\n+        for (Var var : varList) {\n+          Node nameNode = var.getNameNode();\n+          while (nameNode != null && nameNode.isDefaultValue()) {\n+            nameNode = nameNode.getFirstChild();\n+          }\n+          nameNodes.add(nameNode);\n+\n+        }\n+        \n+        boolean hasAll = true;\n+        for (Node nameNode : nameNodes) {\n+          if (nameNode == null || \n+            !NodeUtil.references(nodeFinder, function, nameNode)) {\n+            hasAll = false;\n+            break;\n+          }\n+        }\n+\n+        if (!hasAll) {\n+          argList.removeChild(param);\n+          compiler.reportCodeChange();\n+        }\n+      } else {\n+        argList.removeChild(param);\n+        compiler.reportChangeToEnclosingScope(argList);\n+      }\n+\n+      param = next;\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}