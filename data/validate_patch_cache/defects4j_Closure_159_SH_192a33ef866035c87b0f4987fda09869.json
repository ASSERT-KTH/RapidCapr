{
    "patch": " private void findCalledFunctions(\n      Node node, Set<String> changed) {\n    Preconditions.checkArgument(changed != null);\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n        FunctionInformation functionInfo = getFunctionRegistry().getFunctionInformation(child.getString());\n        if (functionInfo != null) {\n          Node args = child.getNext();\n          for (int i = 0; i < functionInfo.getParamsCount(); i++) {\n            if (args == null) break;\n            Node argNode = args.getFirstChild();\n            args = args.getNext();\n            while (argNode != null && argNode.getType() == Token.COMMA) {\n              argNode = argNode.getNext();\n            }\n            if (argNode == null) continue;\n            findChangedInformations(argNode, changed);\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..4550bede 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,35 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n+ private void findCalledFunctions(\n+      Node node, Set<String> changed) {\n+    Preconditions.checkArgument(changed != null);\n+    // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n+        FunctionInformation functionInfo = getFunctionRegistry().getFunctionInformation(child.getString());\n+        if (functionInfo != null) {\n+          Node args = child.getNext();\n+          for (int i = 0; i < functionInfo.getParamsCount(); i++) {\n+            if (args == null) break;\n+            Node argNode = args.getFirstChild();\n+            args = args.getNext();\n+            while (argNode != null && argNode.getType() == Token.COMMA) {\n+              argNode = argNode.getNext();\n+            }\n+            if (argNode == null) continue;\n+            findChangedInformations(argNode, changed);\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}