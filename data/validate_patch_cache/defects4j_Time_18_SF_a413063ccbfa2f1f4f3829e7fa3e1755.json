{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException {\n    \n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n    \n    // Date is before the start of the Gregorian calendar.\n    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 15)))) {\n        // Date is in range of Julian calendar date.\n        try {\n            return iJulianChronology.getDateTimeMillis(year, monthOfYear,\n                    dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        } catch (IllegalArgumentException ex) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n\n    // Date is in range of Gregorian calendar dates.\n    return iGregorianChronology.getDateTimeMillis(year, monthOfYear,\n            dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..028853e8 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,36 +347,33 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+        throws IllegalArgumentException {\n+    \n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+    \n+    // Date is before the start of the Gregorian calendar.\n+    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth < 15)))) {\n+        // Date is in range of Julian calendar date.\n+        try {\n+            return iJulianChronology.getDateTimeMillis(year, monthOfYear,\n+                    dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalArgumentException ex) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n         }\n-        return instant;\n     }\n \n+    // Date is in range of Gregorian calendar dates.\n+    return iGregorianChronology.getDateTimeMillis(year, monthOfYear,\n+            dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "java.lang.IllegalArgumentException: Specified date does not exist",
    "test_result": "FAIL"
}