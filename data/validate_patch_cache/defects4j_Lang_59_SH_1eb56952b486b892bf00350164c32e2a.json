{
    "patch": "int padLen = width - strLen;\nif (padLen <= 0) {\n    return this.append(str);\n}\n// check if the pad char is a single character\nString padStr = String.valueOf(padChar);\nif (padLen > padStr.length()) {\n    char[] padding = new char[padLen];\n    Arrays.fill(padding, padChar);\n    padStr = new String(padding);\n} else if (padLen == 1) {\n    padStr = String.valueOf(padChar);\n}\nthis.append(str).append(padStr);\nreturn this;",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/StrBuilder.java b/src/java/org/apache/commons/lang/text/StrBuilder.java\nindex 886d424e..cfcdc4b7 100644\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n@@ -881,7 +881,21 @@ public class StrBuilder implements Cloneable {\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n             if (strLen >= width) {\n-                str.getChars(0, strLen, buffer, size);\n+int padLen = width - strLen;\n+if (padLen <= 0) {\n+    return this.append(str);\n+}\n+// check if the pad char is a single character\n+String padStr = String.valueOf(padChar);\n+if (padLen > padStr.length()) {\n+    char[] padding = new char[padLen];\n+    Arrays.fill(padding, padChar);\n+    padStr = new String(padding);\n+} else if (padLen == 1) {\n+    padStr = String.valueOf(padChar);\n+}\n+this.append(str).append(padStr);\n+return this;\n             } else {\n                 int padLen = width - strLen;\n                 str.getChars(0, strLen, buffer, size);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}