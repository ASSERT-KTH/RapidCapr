{
    "patch": "    private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n                                              StringBuilder appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        if (escapingOn && pattern.charAt(start)==QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        boolean quotesFound = false;\n        while (!quotesFound && pos.getIndex() < pattern.length()) {\n            char ch = pattern.charAt(pos.getIndex());\n            switch (ch) {\n                case QUOTE:\n                    quotesFound = true;\n                    if (lastHold != pos.getIndex() && appendTo != null) {\n                        appendTo.append(pattern, lastHold, pos.getIndex()-lastHold);\n                    }\n                    pos.setIndex(pos.getIndex()+1);\n                    break;\n                case ESCAPE_CHAR:\n                    next(pos);\n                    if (pos.getIndex() == pattern.length()) {\n                        throw new IllegalArgumentException(\"Unescaped character at position \" + (pos.getIndex()-1));\n                    }\n                    // Ignore the escaped char\n                    break;\n                default:\n                    next(pos);\n            }\n        }\n        if (!quotesFound) {\n            throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n        }\n        return appendTo;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..8e8e60fb 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,33 +414,39 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n+    private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n+                                              StringBuilder appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n+        if (escapingOn && pattern.charAt(start)==QUOTE) {\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n-            }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+        boolean quotesFound = false;\n+        while (!quotesFound && pos.getIndex() < pattern.length()) {\n+            char ch = pattern.charAt(pos.getIndex());\n+            switch (ch) {\n+                case QUOTE:\n+                    quotesFound = true;\n+                    if (lastHold != pos.getIndex() && appendTo != null) {\n+                        appendTo.append(pattern, lastHold, pos.getIndex()-lastHold);\n+                    }\n+                    pos.setIndex(pos.getIndex()+1);\n+                    break;\n+                case ESCAPE_CHAR:\n+                    next(pos);\n+                    if (pos.getIndex() == pattern.length()) {\n+                        throw new IllegalArgumentException(\"Unescaped character at position \" + (pos.getIndex()-1));\n+                    }\n+                    // Ignore the escaped char\n+                    break;\n+                default:\n+                    next(pos);\n             }\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n+        if (!quotesFound) {\n+            throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n+        }\n+        return appendTo;\n     }\n \n     /**",
    "result_reason": "error: method appendQuotedString in class ExtendedMessageFormat cannot be applied to given types;",
    "test_result": "ERROR"
}