{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT &&\n          parent.getFirstChild().getType() == Token.ASSIGN) {\n        handleFunctionInputs(parent.getFirstChild().getSecondChild());\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.ASSIGN) {\n            defineStubFunction(n, parent.getFirstChild());\n          } else if (parent.getType() == Token.NAME) {\n            return;\n          } else {\n            defineDeclaredFunction(n, parent);\n          }\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..e58d8219 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,18 +1443,22 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+      if (n.getType() == Token.LP && parent.getType() == Token.EXPR_RESULT &&\n+          parent.getFirstChild().getType() == Token.ASSIGN) {\n+        handleFunctionInputs(parent.getFirstChild().getSecondChild());\n         return;\n       }\n \n       attachLiteralTypes(n);\n       switch (n.getType()) {\n         case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n+          if (parent.getType() == Token.ASSIGN) {\n+            defineStubFunction(n, parent.getFirstChild());\n+          } else if (parent.getType() == Token.NAME) {\n             return;\n+          } else {\n+            defineDeclaredFunction(n, parent);\n           }\n-          defineDeclaredFunction(n, parent);\n           break;\n         case Token.CATCH:\n           defineCatch(n, parent);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}