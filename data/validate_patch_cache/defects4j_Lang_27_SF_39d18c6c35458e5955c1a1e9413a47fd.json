{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }  \n\n    if (str.startsWith(\"--\") || str.startsWith(\"-+\")) {\n        // These are invalid formats\n        return null;\n    }\n\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    char lastChar = str.charAt(str.length() - 1);\n\n    // Check if the string ends with Infinity or NaN\n    if (lastChar == 'y' || lastChar == 'N') {\n        return null;\n    }\n\n    String mantissa;\n    String decimalPart;\n    String exponent;\n    int decimalPointIndex = str.indexOf('.');\n    int exponentIndex = Math.max(str.indexOf('e'), str.indexOf('E'));\n\n    if (exponentIndex > -1) {\n        exponent = str.substring(exponentIndex + 1);\n    } else {\n        exponent = null;\n    }\n\n    if (decimalPointIndex > -1) {\n        if (exponentIndex > -1 && exponentIndex < decimalPointIndex) {\n            // Invalid format: exponential notation comes before decimal point\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        decimalPart = str.substring(decimalPointIndex + 1);\n        mantissa = str.substring(0, decimalPointIndex);\n    } else {\n        decimalPart = null;\n        if (exponentIndex > -1) {\n            mantissa = str.substring(0, exponentIndex);\n        } else {\n            mantissa = str;\n        }\n    }\n\n    if (!Character.isDigit(lastChar) && lastChar != '.') {\n        if (exponent != null && (exponent.charAt(0) == '+' || exponent.charAt(0) == '-')) {\n            exponent = exponent.substring(1);\n        }\n\n        String numeric = str.substring(0, str.length() - 1);\n        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n\n        switch (lastChar) {\n            case 'd':\n            case 'D':\n                try {\n                    Double d = createDouble(numeric);\n                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                return createBigDecimal(numeric);\n\n            case 'f':\n            case 'F':\n                try {\n                    Float f = createFloat(numeric);\n                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // ignore the bad number\n                }\n                //$FALL-THROUGH$\n            case 'l':\n            case 'L':\n                if (decimalPart != null || exponent != null) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                if (numeric.charAt(0) == '-') {\n                    if (isDigits(numeric.substring(1))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    } else {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                } else {\n                    if (isDigits(numeric)) {\n                        try {\n                            return createLong(numeric);\n                        } catch (NumberFormatException nfe) {\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n                    } else {\n                        throw new NumberFormatException(str + \" is not a valid number.\");\n                    }\n                }\n            default :\n                throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n    } else {\n        if (exponent != null && exponent.charAt(0) == '+') {\n            exponent = exponent.substring(1);\n        }\n        if (decimalPart == null && exponent == null) {\n            // Must be an integer\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n        } else {\n            // Must be a floating-point number\n            boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n            try {\n                Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n            try {\n                Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // ignore the bad number\n            }\n\n            return createBigDecimal(str);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..746e70d3 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,163 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n \n-        if (decPos > -1) {\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }  \n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n+    if (str.startsWith(\"--\") || str.startsWith(\"-+\")) {\n+        // These are invalid formats\n+        return null;\n+    }\n+\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n+\n+    char lastChar = str.charAt(str.length() - 1);\n+\n+    // Check if the string ends with Infinity or NaN\n+    if (lastChar == 'y' || lastChar == 'N') {\n+        return null;\n+    }\n+\n+    String mantissa;\n+    String decimalPart;\n+    String exponent;\n+    int decimalPointIndex = str.indexOf('.');\n+    int exponentIndex = Math.max(str.indexOf('e'), str.indexOf('E'));\n+\n+    if (exponentIndex > -1) {\n+        exponent = str.substring(exponentIndex + 1);\n+    } else {\n+        exponent = null;\n+    }\n+\n+    if (decimalPointIndex > -1) {\n+        if (exponentIndex > -1 && exponentIndex < decimalPointIndex) {\n+            // Invalid format: exponential notation comes before decimal point\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        decimalPart = str.substring(decimalPointIndex + 1);\n+        mantissa = str.substring(0, decimalPointIndex);\n+    } else {\n+        decimalPart = null;\n+        if (exponentIndex > -1) {\n+            mantissa = str.substring(0, exponentIndex);\n         } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n+            mantissa = str;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+    }\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n+    if (!Character.isDigit(lastChar) && lastChar != '.') {\n+        if (exponent != null && (exponent.charAt(0) == '+' || exponent.charAt(0) == '-')) {\n+            exponent = exponent.substring(1);\n+        }\n \n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+        String numeric = str.substring(0, str.length() - 1);\n+        boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n \n-            }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n+        switch (lastChar) {\n+            case 'd':\n+            case 'D':\n                 try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n+                    Double d = createDouble(numeric);\n+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        return d;\n+                    }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                return createBigInteger(str);\n+                return createBigDecimal(numeric);\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            case 'f':\n+            case 'F':\n                 try {\n-                    Float f = createFloat(str);\n+                    Float f = createFloat(numeric);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n                     // ignore the bad number\n                 }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n+                //$FALL-THROUGH$\n+            case 'l':\n+            case 'L':\n+                if (decimalPart != null || exponent != null) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n+                if (numeric.charAt(0) == '-') {\n+                    if (isDigits(numeric.substring(1))) {\n+                        try {\n+                            return createLong(numeric);\n+                        } catch (NumberFormatException nfe) {\n+                            // Too big for a long\n+                        }\n+                        return createBigInteger(numeric);\n+                    } else {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n+                    }\n+                } else {\n+                    if (isDigits(numeric)) {\n+                        try {\n+                            return createLong(numeric);\n+                        } catch (NumberFormatException nfe) {\n+                            // Too big for a long\n+                        }\n+                        return createBigInteger(numeric);\n+                    } else {\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n                     }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n                 }\n-\n-                return createBigDecimal(str);\n-\n+            default :\n+                throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+    } else {\n+        if (exponent != null && exponent.charAt(0) == '+') {\n+            exponent = exponent.substring(1);\n+        }\n+        if (decimalPart == null && exponent == null) {\n+            // Must be an integer\n+            try {\n+                return createInteger(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n+                return createLong(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            return createBigInteger(str);\n+        } else {\n+            // Must be a floating-point number\n+            boolean allZeros = isAllZeros(mantissa) && isAllZeros(exponent);\n+            try {\n+                Float f = createFloat(str);\n+                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    return f;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n+            }\n+            try {\n+                Double d = createDouble(str);\n+                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    return d;\n+                }\n+            } catch (NumberFormatException nfe) {\n+                // ignore the bad number\n             }\n+\n+            return createBigDecimal(str);\n         }\n     }\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "java.lang.NumberFormatException: 1.1E-700F is not a valid number.",
    "test_result": "FAIL"
}