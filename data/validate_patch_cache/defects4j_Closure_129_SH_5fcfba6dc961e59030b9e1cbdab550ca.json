{
    "patch": "if (!NodeUtil.isGet(first) && !NodeUtil.isCast(first)) {\n  n.putBooleanProp(Node.FREE_CALL, true);\n} else if (NodeUtil.isCast(first)) {\n  annotateCalls(first);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..4da2f126 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,11 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+if (!NodeUtil.isGet(first) && !NodeUtil.isCast(first)) {\n+  n.putBooleanProp(Node.FREE_CALL, true);\n+} else if (NodeUtil.isCast(first)) {\n+  annotateCalls(first);\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}