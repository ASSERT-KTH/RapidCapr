{
    "patch": "    private void findAliases(NodeTraversal t) {\n      Scope scope = t.getScope();\n      for (Var v : scope.getVarIterable()) {\n        Node n = v.getNode();\n        if (n != null && n.getParent() != null && n.getParent().getType() == Token.NAME) {\n          Node grandparent = n.getParent().getParent();\n          if (grandparent != null && grandparent.getType() == Token.VAR) {\n            if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP) {\n              String name = n.getString();\n              Var aliasVar = scope.getVar(name);\n              if (aliasVar == null) {\n                continue;\n              }\n              // Only consider local aliases (i.e. not external symbols).\n              // Also, only consider aliases that are assigned to objects with\n              // methods or properties. (i.e. not aliases to strings, numbers, etc.)\n              if (aliasVar.isLocal() && isAssignableToExpression(aliasVar)) {\n                aliases.put(name, aliasVar);\n                if (aliasVar != null && aliasVar.getInitialValue() != null\n                    && aliasVar.getInitialValue().getQualifiedName() != null) {\n                  String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n                  transformation.addAlias(name, qualifiedName);\n                }\n              }\n            } else {\n              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..5189fd96 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -268,30 +268,34 @@ class ScopedAliases implements HotSwapCompilerPass {\n       compiler.report(t.makeError(n, error, arguments));\n       hasErrors = true;\n     }\n-\n     private void findAliases(NodeTraversal t) {\n       Scope scope = t.getScope();\n       for (Var v : scope.getVarIterable()) {\n         Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-        }\n+        if (n != null && n.getParent() != null && n.getParent().getType() == Token.NAME) {\n+          Node grandparent = n.getParent().getParent();\n+          if (grandparent != null && grandparent.getType() == Token.VAR) {\n+            if (n.getFirstChild() != null && n.getFirstChild().getType() == Token.GETPROP) {\n+              String name = n.getString();\n+              Var aliasVar = scope.getVar(name);\n+              if (aliasVar == null) {\n+                continue;\n+              }\n+              // Only consider local aliases (i.e. not external symbols).\n+              // Also, only consider aliases that are assigned to objects with\n+              // methods or properties. (i.e. not aliases to strings, numbers, etc.)\n+              if (aliasVar.isLocal() && isAssignableToExpression(aliasVar)) {\n+                aliases.put(name, aliasVar);\n+                if (aliasVar != null && aliasVar.getInitialValue() != null\n+                    && aliasVar.getInitialValue().getQualifiedName() != null) {\n+                  String qualifiedName = aliasVar.getInitialValue().getQualifiedName();\n+                  transformation.addAlias(name, qualifiedName);\n+                }\n+              }\n+            } else {\n+              report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+            }\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}