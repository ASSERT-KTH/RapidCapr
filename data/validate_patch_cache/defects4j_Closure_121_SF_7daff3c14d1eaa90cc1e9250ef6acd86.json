{
    "patch": "private void inlineWellDefinedVariable(Var v, Node value,\n    List<Reference> refs) {\n  for (Reference ref : refs) {\n    NodeUtil.removeChild(ref.getNode().getParent(), ref.getNode());\n  }\n\n  Node valueParent = value.getParent();\n  if (valueParent.isAssign() && valueParent.getLastChild() == value) {\n    flattenSingleExpressionTree(valueParent);\n  }\n\n  Reference initRef = new Reference(v.getName(), v.getNode());\n  final Node toInline = value.isComma() ? value.getLastChild() : value;\n  initRef.getScope().declare(nameNode.getString(),\n      initRef, initRef.getScope());\n  Node parent = refs.get(0).getNode().getParent();\n  Node insertionMarker = refs.get(0).getNode();\n\n  if (toInline.isAssign() || toInline.isInc() || toInline.isDec()) {\n    final Node lvalue = toInline.getFirstChild();\n    final Node rvalue = toInline.getLastChild();\n    final boolean isIncDec = toInline.isInc() || toInline.isDec();\n    // transform \"x = e\" into \"(x = e)\" and \"x++\" into \"(x++)\"\n    Node replacement = new Node(\n        isIncDec ? (toInline.isInc() ? Token.INC : Token.DEC) : Token.ASSIGN,\n        lvalue, rvalue);\n    NodeUtil.removeChild(toInline.getParent(), toInline);\n    toInline = replacement;\n  }\n\n  // Replace duplicated arguments with the value directly.\n  for (int i = refs.size() - 1; i > 0; i--) {\n    Node current = refs.get(i).getNode();\n    if (isDuplicatedArgument(current)) {\n      current.replaceWith(toInline.cloneTree());\n    } else {\n      NodeUtil.insertBefore(current, toInline.cloneTree());\n    }\n  }\n\n  Node replacement = toInline.cloneTree();\n  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(replacement),\n      \"Inlining would destroy side effects in %s\", replacement);\n  NodeUtil.insertBefore(insertionMarker, replacement);\n}\n\nprivate boolean isDuplicatedArgument(Node n) {\n  Node argList = n.getParent().getLastChild();\n  for (Node sibling = argList.getFirstChild();\n       sibling != null;\n       sibling = sibling.getNext()) {\n    if (sibling != n &&\n        sibling.isName() &&\n        sibling.getString().equals(n.getString())) {\n      return true;\n    }\n  }\n  return false;\n}\n\nprivate void inlineNonConstants(\n    Var v, ReferenceCollection referenceInfo,\n    boolean maybeModifiedArguments) {\n  int refCount = referenceInfo.references.size();\n  Reference declaration = referenceInfo.references.get(0);\n  Reference init = referenceInfo.getInitializingReference();\n  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n\n  if (refCount > 1 &&\n      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n    // if the variable is referenced more than once, we can only\n    // inline it if it's immutable and never defined before referenced.\n    Node value;\n    if (init != null) {\n      value = init.getAssignedValue();\n    } else {\n      // Create a new node for variable that is never initialized.\n      Node srcLocation = declaration.getNode();\n      value = NodeUtil.newUndefinedNode(srcLocation);\n    }\n    Preconditions.checkNotNull(value);\n    inlineWellDefinedVariable(v, value, referenceInfo.references);\n    staleVars.add(v);\n  } else if (refCount == firstRefAfterInit) {\n    // The variable likely only read once, try some more\n    // complex inlining heuristics.\n    Reference reference = referenceInfo.references.get(\n        firstRefAfterInit - 1);\n    if (canInline(declaration, init, reference)) {\n      inline(v, declaration, init, reference);\n      staleVars.add(v);\n    }\n  } else if (declaration != init && refCount == 2) {\n    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n      // The only reference is the initialization, remove the assignment and\n      // the variable declaration.\n      Node value = init.getAssignedValue();\n      Preconditions.checkNotNull(value);\n      inlineWellDefinedVariable(v, value, referenceInfo.references);\n      staleVars.add(v);\n    }\n  }\n\n  // If this variable was not inlined normally, check if we can\n  // inline an alias of it. (If the variable was inlined, then the\n  // reference data is out of sync. We're better off just waiting for\n  // the next pass.)\n  if (!maybeModifiedArguments &&\n      !staleVars.contains(v) &&\n      referenceInfo.isWellDefined() &&\n      (referenceInfo.isAssignedOnceInLifetime() ||\n       isConstantDeclaration(declaration))) {\n    List<Reference> refs = referenceInfo.references;\n    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n      Node nameNode = refs.get(i).getNode();\n      if (aliasCandidates.containsKey(nameNode)) {\n        AliasCandidate candidate = aliasCandidates.get(nameNode);\n        if (!staleVars.contains(candidate.alias) &&\n            !isVarInlineForbidden(candidate.alias)) {\n          Reference aliasInit;\n          aliasInit = candidate.refInfo.getInitializingReference();\n          Node value = aliasInit.getAssignedValue();\n          Preconditions.checkNotNull(value);\n          inlineWellDefinedVariable(candidate.alias,\n              value,\n              candidate.refInfo.references);\n          staleVars.add(candidate.alias);\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 376abd40..4a95ee8e 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -251,80 +251,138 @@ class InlineVariables implements CompilerPass {\n           && parent.getFirstChild() == n));\n     }\n \n-    private void inlineNonConstants(\n-        Var v, ReferenceCollection referenceInfo,\n-        boolean maybeModifiedArguments) {\n-      int refCount = referenceInfo.references.size();\n-      Reference declaration = referenceInfo.references.get(0);\n-      Reference init = referenceInfo.getInitializingReference();\n-      int firstRefAfterInit = (declaration == init) ? 2 : 3;\n-\n-      if (refCount > 1 &&\n-          isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n-        // if the variable is referenced more than once, we can only\n-        // inline it if it's immutable and never defined before referenced.\n-        Node value;\n-        if (init != null) {\n-          value = init.getAssignedValue();\n-        } else {\n-          // Create a new node for variable that is never initialized.\n-          Node srcLocation = declaration.getNode();\n-          value = NodeUtil.newUndefinedNode(srcLocation);\n-        }\n-        Preconditions.checkNotNull(value);\n-        inlineWellDefinedVariable(v, value, referenceInfo.references);\n-        staleVars.add(v);\n-      } else if (refCount == firstRefAfterInit) {\n-        // The variable likely only read once, try some more\n-        // complex inlining heuristics.\n-        Reference reference = referenceInfo.references.get(\n-            firstRefAfterInit - 1);\n-        if (canInline(declaration, init, reference)) {\n-          inline(v, declaration, init, reference);\n-          staleVars.add(v);\n-        }\n-      } else if (declaration != init && refCount == 2) {\n-        if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n-          // The only reference is the initialization, remove the assignment and\n-          // the variable declaration.\n-          Node value = init.getAssignedValue();\n-          Preconditions.checkNotNull(value);\n-          inlineWellDefinedVariable(v, value, referenceInfo.references);\n-          staleVars.add(v);\n-        }\n-      }\n+private void inlineWellDefinedVariable(Var v, Node value,\n+    List<Reference> refs) {\n+  for (Reference ref : refs) {\n+    NodeUtil.removeChild(ref.getNode().getParent(), ref.getNode());\n+  }\n \n-      // If this variable was not inlined normally, check if we can\n-      // inline an alias of it. (If the variable was inlined, then the\n-      // reference data is out of sync. We're better off just waiting for\n-      // the next pass.)\n-      if (!maybeModifiedArguments &&\n-          !staleVars.contains(v) &&\n-          referenceInfo.isWellDefined() &&\n-          referenceInfo.isAssignedOnceInLifetime()) {\n-          // Inlining the variable based solely on well-defined and assigned\n-          // once is *NOT* correct. We relax the correctness requirement if\n-          // the variable is declared constant.\n-        List<Reference> refs = referenceInfo.references;\n-        for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n-          Node nameNode = refs.get(i).getNode();\n-          if (aliasCandidates.containsKey(nameNode)) {\n-            AliasCandidate candidate = aliasCandidates.get(nameNode);\n-            if (!staleVars.contains(candidate.alias) &&\n-                !isVarInlineForbidden(candidate.alias)) {\n-              Reference aliasInit;\n-              aliasInit = candidate.refInfo.getInitializingReference();\n-              Node value = aliasInit.getAssignedValue();\n-              Preconditions.checkNotNull(value);\n-              inlineWellDefinedVariable(candidate.alias,\n-                  value,\n-                  candidate.refInfo.references);\n-              staleVars.add(candidate.alias);\n-            }\n-          }\n+  Node valueParent = value.getParent();\n+  if (valueParent.isAssign() && valueParent.getLastChild() == value) {\n+    flattenSingleExpressionTree(valueParent);\n+  }\n+\n+  Reference initRef = new Reference(v.getName(), v.getNode());\n+  final Node toInline = value.isComma() ? value.getLastChild() : value;\n+  initRef.getScope().declare(nameNode.getString(),\n+      initRef, initRef.getScope());\n+  Node parent = refs.get(0).getNode().getParent();\n+  Node insertionMarker = refs.get(0).getNode();\n+\n+  if (toInline.isAssign() || toInline.isInc() || toInline.isDec()) {\n+    final Node lvalue = toInline.getFirstChild();\n+    final Node rvalue = toInline.getLastChild();\n+    final boolean isIncDec = toInline.isInc() || toInline.isDec();\n+    // transform \"x = e\" into \"(x = e)\" and \"x++\" into \"(x++)\"\n+    Node replacement = new Node(\n+        isIncDec ? (toInline.isInc() ? Token.INC : Token.DEC) : Token.ASSIGN,\n+        lvalue, rvalue);\n+    NodeUtil.removeChild(toInline.getParent(), toInline);\n+    toInline = replacement;\n+  }\n+\n+  // Replace duplicated arguments with the value directly.\n+  for (int i = refs.size() - 1; i > 0; i--) {\n+    Node current = refs.get(i).getNode();\n+    if (isDuplicatedArgument(current)) {\n+      current.replaceWith(toInline.cloneTree());\n+    } else {\n+      NodeUtil.insertBefore(current, toInline.cloneTree());\n+    }\n+  }\n+\n+  Node replacement = toInline.cloneTree();\n+  Preconditions.checkState(!NodeUtil.mayHaveSideEffects(replacement),\n+      \"Inlining would destroy side effects in %s\", replacement);\n+  NodeUtil.insertBefore(insertionMarker, replacement);\n+}\n+\n+private boolean isDuplicatedArgument(Node n) {\n+  Node argList = n.getParent().getLastChild();\n+  for (Node sibling = argList.getFirstChild();\n+       sibling != null;\n+       sibling = sibling.getNext()) {\n+    if (sibling != n &&\n+        sibling.isName() &&\n+        sibling.getString().equals(n.getString())) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n+private void inlineNonConstants(\n+    Var v, ReferenceCollection referenceInfo,\n+    boolean maybeModifiedArguments) {\n+  int refCount = referenceInfo.references.size();\n+  Reference declaration = referenceInfo.references.get(0);\n+  Reference init = referenceInfo.getInitializingReference();\n+  int firstRefAfterInit = (declaration == init) ? 2 : 3;\n+\n+  if (refCount > 1 &&\n+      isImmutableAndWellDefinedVariable(v, referenceInfo)) {\n+    // if the variable is referenced more than once, we can only\n+    // inline it if it's immutable and never defined before referenced.\n+    Node value;\n+    if (init != null) {\n+      value = init.getAssignedValue();\n+    } else {\n+      // Create a new node for variable that is never initialized.\n+      Node srcLocation = declaration.getNode();\n+      value = NodeUtil.newUndefinedNode(srcLocation);\n+    }\n+    Preconditions.checkNotNull(value);\n+    inlineWellDefinedVariable(v, value, referenceInfo.references);\n+    staleVars.add(v);\n+  } else if (refCount == firstRefAfterInit) {\n+    // The variable likely only read once, try some more\n+    // complex inlining heuristics.\n+    Reference reference = referenceInfo.references.get(\n+        firstRefAfterInit - 1);\n+    if (canInline(declaration, init, reference)) {\n+      inline(v, declaration, init, reference);\n+      staleVars.add(v);\n+    }\n+  } else if (declaration != init && refCount == 2) {\n+    if (isValidDeclaration(declaration) && isValidInitialization(init)) {\n+      // The only reference is the initialization, remove the assignment and\n+      // the variable declaration.\n+      Node value = init.getAssignedValue();\n+      Preconditions.checkNotNull(value);\n+      inlineWellDefinedVariable(v, value, referenceInfo.references);\n+      staleVars.add(v);\n+    }\n+  }\n+\n+  // If this variable was not inlined normally, check if we can\n+  // inline an alias of it. (If the variable was inlined, then the\n+  // reference data is out of sync. We're better off just waiting for\n+  // the next pass.)\n+  if (!maybeModifiedArguments &&\n+      !staleVars.contains(v) &&\n+      referenceInfo.isWellDefined() &&\n+      (referenceInfo.isAssignedOnceInLifetime() ||\n+       isConstantDeclaration(declaration))) {\n+    List<Reference> refs = referenceInfo.references;\n+    for (int i = 1 /* start from a read */; i < refs.size(); i++) {\n+      Node nameNode = refs.get(i).getNode();\n+      if (aliasCandidates.containsKey(nameNode)) {\n+        AliasCandidate candidate = aliasCandidates.get(nameNode);\n+        if (!staleVars.contains(candidate.alias) &&\n+            !isVarInlineForbidden(candidate.alias)) {\n+          Reference aliasInit;\n+          aliasInit = candidate.refInfo.getInitializingReference();\n+          Node value = aliasInit.getAssignedValue();\n+          Preconditions.checkNotNull(value);\n+          inlineWellDefinedVariable(candidate.alias,\n+              value,\n+              candidate.refInfo.references);\n+          staleVars.add(candidate.alias);\n         }\n       }\n     }\n+  }\n+}\n \n     /**\n      * If there are any variable references in the given node tree, blacklist",
    "result_reason": "error: method inlineWellDefinedVariable(Var,Node,List<Reference>) is already defined in class InlineVariables.InliningBehavior",
    "test_result": "ERROR"
}