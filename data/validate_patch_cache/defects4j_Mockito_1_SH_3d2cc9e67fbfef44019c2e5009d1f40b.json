{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                Object arg = null;\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object argArray = invocation.getArgumentAt(position, Object[].class);\n                    if (argArray != null) {\n                        for (Object varArg : (Object[]) argArray) {\n                            ((CapturesArguments) m).captureFrom(varArg);\n                        }\n                    }\n                } else {\n                    arg = invocation.getArgumentAt(position, Object.class);\n                    ((CapturesArguments) m).captureFrom(arg);\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..72f1a154c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,24 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                Object arg = null;\n+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                    Object argArray = invocation.getArgumentAt(position, Object[].class);\n+                    if (argArray != null) {\n+                        for (Object varArg : (Object[]) argArray) {\n+                            ((CapturesArguments) m).captureFrom(varArg);\n+                        }\n+                    }\n+                } else {\n+                    arg = invocation.getArgumentAt(position, Object.class);\n+                    ((CapturesArguments) m).captureFrom(arg);\n+                }\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}