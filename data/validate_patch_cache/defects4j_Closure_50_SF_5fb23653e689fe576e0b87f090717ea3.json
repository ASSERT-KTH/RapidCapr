{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null) {\n      if (!NodeUtil.isImmutableValue(right)) {\n        return n;\n      }\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    int foldedSize = 0;\n    Node prev = null;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        foldStringNode(arrayFoldedChildren, joinString + NodeUtil.getArrayElementStringValue(elem), prev, foldedSize);\n      } else {\n        if (!TryFoldArrayJoinHelper.isTypedArray(elem)) {\n          if (elem.getType() == Token.ADD) {\n            Node additionNode = elem;\n            int additionFoldedSize = 0;\n            List<Node> additionFoldedChildren = Lists.newLinkedList();\n            while (additionNode != null) {\n              if (NodeUtil.isImmutableValue(additionNode)) {\n                foldStringNode(additionFoldedChildren, NodeUtil.getStringValue(additionNode), prev, additionFoldedSize);\n              } else if (TryFoldArrayJoinHelper.isTypedArray(elem)) {\n                break;\n              } else {\n                additionFoldedSize += InlineCostEstimator.getCost(additionNode);\n                additionFoldedChildren.add(additionNode.cloneNode());\n              }\n              prev = additionNode;\n              additionNode = additionNode.getNext();\n            }\n            if (additionNode == null) {\n              if (!additionFoldedChildren.isEmpty()) {\n                Node additionFoldedNode = NodeUtil.joinNodes(\n                    additionFoldedChildren,\n                    NodeUtil.newStringNode(factory, \"+\"), n);\n                foldStringNode(arrayFoldedChildren, NodeUtil.getStringValue(additionFoldedNode), null, foldedSize);\n              } else {\n                arrayFoldedChildren.add(elem.cloneNode());\n              }\n            } else {\n              arrayFoldedChildren.add(elem.cloneNode());\n            }\n          } else {\n            foldArrayNode(TryFoldArrayJoinHelper.getFunctionNameString(elem), arrayFoldedChildren, foldedSize, elem, joinString, prev);\n          }\n        } else {\n          arrayFoldedChildren.add(elem.cloneNode());\n        }\n      }\n      prev = elem;\n      elem = elem.getNext();\n    }\n    Node lastNode = arrayNode.getLastChild();\n    if (!NodeUtil.isImmutableValue(lastNode)) {\n      foldArrayNode(TryFoldArrayJoinHelper.getFunctionNameString(lastNode), arrayFoldedChildren, foldedSize, lastNode, joinString, prev);\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\").srcref(n);\n        n.getParent().replaceChild(n, emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").srcref(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.getParent().replaceChild(n, foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }\n\n  private void foldStringNode(List<Node> arrayFoldedChildren, String stringValue, Node prev, int foldedSize) {\n    if (arrayFoldedChildren.isEmpty()) {\n      Node stringNode = NodeUtil.stringNode(stringValue, factory);\n      arrayFoldedChildren.add(stringNode);\n      foldedSize += InlineCostEstimator.getCost(stringNode);\n    } else {\n      Preconditions.checkNotNull(prev);\n      Node prevLastChild = prev.getLastChild();\n      if (prevLastChild != null && prevLastChild.getType() == Token.STRING) {\n        String prevLastStringValue = NodeUtil.getStringValue(prevLastChild);\n        NodeUtil.removeChild(prev, prevLastChild);\n        stringFor(childOf(prevLastChild)).append(prevLastStringValue);\n        stringFor(childOf(prevLastChild)).append(stringValue);\n        Node newString = NodeUtil.stringNode(stringFor(childOf(prevLastChild)).toString(), factory);\n        arrayFoldedChildren.add(newString);\n        foldedSize += InlineCostEstimator.getCost(newString) - InlineCostEstimator.getCost(prevLastChild);\n      } else {\n        Node stringNode = NodeUtil.stringNode(stringValue, factory);\n        arrayFoldedChildren.add(stringNode);\n        foldedSize += InlineCostEstimator.getCost(stringNode);\n      }\n    }\n  }\n\n  private void foldArrayNode(String functionNameString, List<Node> arrayFoldedChildren, int foldedSize, Node elem, String joinString, Node prev) {\n    FunctionType functionType = TryFoldArrayJoinHelper.getFontendFunctionType(elem, typeRegistry);\n    if (functionType != null && functionType.isEquivalentTo(typeRegistry.getNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE))) {\n      Node objectNameNode = TryFoldArrayJoinHelper.getObjectNameNode(elem.getFirstChild(),\n          typeRegistry.getNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE));\n      if (objectNameNode == null || !NodeUtil.isName(objectNameNode) || !objectNameNode.getString().equals(\"Array\")) {\n        return;\n      }\n\n      Node newArgsList = elem.getFirstChild().getNext().cloneNode();\n      Node newCall = NodeUtil.newCallNode(\n          new Node(Token.GETPROP,\n              new Node(Token.NAME, \"Array\", elem.getFirstChild()),\n              new Node(Token.STRING, \"prototype\", elem.getFirstChild())->srcref(elem.getUserData())));\n      newCall.putBooleanProp(Node.FREE_CALL, true);\n      newCall.addChildrenToFront(newArgsList);\n      elem.getParent().replaceChild(elem, newCall);\n      reportCodeChange();\n      return;\n    }\n\n    if (\"concat\".equals(functionNameString)) {\n      if (TryFoldArrayJoinHelper.doesConcatenateStrings(elem, typeRegistry)) {\n        String newStringValue = TryFoldArrayJoinHelper.concatenateAdjacentStringLiterals(\n            elem.getFirstChild(), joinString);\n        if (newStringValue != null) {\n          foldStringNode(arrayFoldedChildren, newStringValue, prev, foldedSize);\n        } else {\n          arrayFoldedChildren.add(elem.cloneNode());\n        }\n      } else {\n        arrayFoldedChildren.add(elem.cloneNode());\n      }\n    } else if (\"slice\".equals(functionNameString) && TryFoldArrayJoinHelper.isSliceOnStringConcatenation(elem)) {\n      String joinSeparator = Joiner.on(\"\").join(\"\", Collections.nCopies(\n          (int) Double.parseDouble(NodeUtil.getStringValue(elem.getSecondChild())), joinString));\n      Node slicedString = elem.getFirstChild().cloneNode();\n      Node sliceIndex = elem.getSecondChild().cloneNode();\n      Node newCall = NodeUtil.newCallNode(\n          new Node(Token.GETPROP,\n              slicedString,\n              new Node(Token.STRING, \"slice\", slicedString)));\n      newCall.addChildrenToBack(NodeUtil.newNumberNode(slicedString, 0, 0));\n      newCall.addChildrenToBack(sliceIndex);\n      elem.getParent().replaceChild(elem, NodeUtil.stringNode(joinSeparator, factory));\n      reportCodeChange();\n      return;\n    } else {\n      arrayFoldedChildren.add(elem.cloneNode());\n    }\n  }\n\n  private Map<StaticSourceFile, StringConcatenationSummary> stringSummaries = Maps.newLinkedHashMap();\n  // We cache subexpression results so we don't output the same one twice.\n  // This happens when a subexpression is shared by multiple concatenations.\n  private IdentityHashMap<Node, String> subExpressionCache = Maps.newIdentityHashMap();\n  private int MAX_SUB_EXPR_LENGTH = 100;\n\n  private StringBuilder stringFor(Object nodeOrString) {\n    String existing = subExpressionCache.get(nodeOrString);\n    if (existing != null) {\n      return new StringBuilder(existing);\n    } else {\n      StringBuilder result = new StringBuilder();\n      subExpressionCache.put(nodeOrString, result.toString());\n      return result;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..5ba98f28 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -386,45 +386,59 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n+    // \",\" is the default, it doesn't need to be explicit\n     String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n     int foldedSize = 0;\n     Node prev = null;\n     Node elem = arrayNode.getFirstChild();\n     // Merges adjacent String nodes.\n     while (elem != null) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        foldStringNode(arrayFoldedChildren, joinString + NodeUtil.getArrayElementStringValue(elem), prev, foldedSize);\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (!TryFoldArrayJoinHelper.isTypedArray(elem)) {\n+          if (elem.getType() == Token.ADD) {\n+            Node additionNode = elem;\n+            int additionFoldedSize = 0;\n+            List<Node> additionFoldedChildren = Lists.newLinkedList();\n+            while (additionNode != null) {\n+              if (NodeUtil.isImmutableValue(additionNode)) {\n+                foldStringNode(additionFoldedChildren, NodeUtil.getStringValue(additionNode), prev, additionFoldedSize);\n+              } else if (TryFoldArrayJoinHelper.isTypedArray(elem)) {\n+                break;\n+              } else {\n+                additionFoldedSize += InlineCostEstimator.getCost(additionNode);\n+                additionFoldedChildren.add(additionNode.cloneNode());\n+              }\n+              prev = additionNode;\n+              additionNode = additionNode.getNext();\n+            }\n+            if (additionNode == null) {\n+              if (!additionFoldedChildren.isEmpty()) {\n+                Node additionFoldedNode = NodeUtil.joinNodes(\n+                    additionFoldedChildren,\n+                    NodeUtil.newStringNode(factory, \"+\"), n);\n+                foldStringNode(arrayFoldedChildren, NodeUtil.getStringValue(additionFoldedNode), null, foldedSize);\n+              } else {\n+                arrayFoldedChildren.add(elem.cloneNode());\n+              }\n+            } else {\n+              arrayFoldedChildren.add(elem.cloneNode());\n+            }\n+          } else {\n+            foldArrayNode(TryFoldArrayJoinHelper.getFunctionNameString(elem), arrayFoldedChildren, foldedSize, elem, joinString, prev);\n+          }\n+        } else {\n+          arrayFoldedChildren.add(elem.cloneNode());\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n       elem = elem.getNext();\n     }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    Node lastNode = arrayNode.getLastChild();\n+    if (!NodeUtil.isImmutableValue(lastNode)) {\n+      foldArrayNode(TryFoldArrayJoinHelper.getFunctionNameString(lastNode), arrayFoldedChildren, foldedSize, lastNode, joinString, prev);\n     }\n     // one for each comma.\n     foldedSize += arrayFoldedChildren.size() - 1;\n@@ -432,7 +446,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = Node.newString(\"\").srcref(n);\n         n.getParent().replaceChild(n, emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n@@ -446,7 +460,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n           // If the Node is not a string literal, ensure that\n           // it is coerced to a string.\n           Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n+              Node.newString(\"\").srcref(n),\n               foldedStringNode);\n           foldedStringNode = replacement;\n         }\n@@ -475,6 +489,99 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     return n;\n   }\n \n+  private void foldStringNode(List<Node> arrayFoldedChildren, String stringValue, Node prev, int foldedSize) {\n+    if (arrayFoldedChildren.isEmpty()) {\n+      Node stringNode = NodeUtil.stringNode(stringValue, factory);\n+      arrayFoldedChildren.add(stringNode);\n+      foldedSize += InlineCostEstimator.getCost(stringNode);\n+    } else {\n+      Preconditions.checkNotNull(prev);\n+      Node prevLastChild = prev.getLastChild();\n+      if (prevLastChild != null && prevLastChild.getType() == Token.STRING) {\n+        String prevLastStringValue = NodeUtil.getStringValue(prevLastChild);\n+        NodeUtil.removeChild(prev, prevLastChild);\n+        stringFor(childOf(prevLastChild)).append(prevLastStringValue);\n+        stringFor(childOf(prevLastChild)).append(stringValue);\n+        Node newString = NodeUtil.stringNode(stringFor(childOf(prevLastChild)).toString(), factory);\n+        arrayFoldedChildren.add(newString);\n+        foldedSize += InlineCostEstimator.getCost(newString) - InlineCostEstimator.getCost(prevLastChild);\n+      } else {\n+        Node stringNode = NodeUtil.stringNode(stringValue, factory);\n+        arrayFoldedChildren.add(stringNode);\n+        foldedSize += InlineCostEstimator.getCost(stringNode);\n+      }\n+    }\n+  }\n+\n+  private void foldArrayNode(String functionNameString, List<Node> arrayFoldedChildren, int foldedSize, Node elem, String joinString, Node prev) {\n+    FunctionType functionType = TryFoldArrayJoinHelper.getFontendFunctionType(elem, typeRegistry);\n+    if (functionType != null && functionType.isEquivalentTo(typeRegistry.getNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE))) {\n+      Node objectNameNode = TryFoldArrayJoinHelper.getObjectNameNode(elem.getFirstChild(),\n+          typeRegistry.getNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE));\n+      if (objectNameNode == null || !NodeUtil.isName(objectNameNode) || !objectNameNode.getString().equals(\"Array\")) {\n+        return;\n+      }\n+\n+      Node newArgsList = elem.getFirstChild().getNext().cloneNode();\n+      Node newCall = NodeUtil.newCallNode(\n+          new Node(Token.GETPROP,\n+              new Node(Token.NAME, \"Array\", elem.getFirstChild()),\n+              new Node(Token.STRING, \"prototype\", elem.getFirstChild())->srcref(elem.getUserData())));\n+      newCall.putBooleanProp(Node.FREE_CALL, true);\n+      newCall.addChildrenToFront(newArgsList);\n+      elem.getParent().replaceChild(elem, newCall);\n+      reportCodeChange();\n+      return;\n+    }\n+\n+    if (\"concat\".equals(functionNameString)) {\n+      if (TryFoldArrayJoinHelper.doesConcatenateStrings(elem, typeRegistry)) {\n+        String newStringValue = TryFoldArrayJoinHelper.concatenateAdjacentStringLiterals(\n+            elem.getFirstChild(), joinString);\n+        if (newStringValue != null) {\n+          foldStringNode(arrayFoldedChildren, newStringValue, prev, foldedSize);\n+        } else {\n+          arrayFoldedChildren.add(elem.cloneNode());\n+        }\n+      } else {\n+        arrayFoldedChildren.add(elem.cloneNode());\n+      }\n+    } else if (\"slice\".equals(functionNameString) && TryFoldArrayJoinHelper.isSliceOnStringConcatenation(elem)) {\n+      String joinSeparator = Joiner.on(\"\").join(\"\", Collections.nCopies(\n+          (int) Double.parseDouble(NodeUtil.getStringValue(elem.getSecondChild())), joinString));\n+      Node slicedString = elem.getFirstChild().cloneNode();\n+      Node sliceIndex = elem.getSecondChild().cloneNode();\n+      Node newCall = NodeUtil.newCallNode(\n+          new Node(Token.GETPROP,\n+              slicedString,\n+              new Node(Token.STRING, \"slice\", slicedString)));\n+      newCall.addChildrenToBack(NodeUtil.newNumberNode(slicedString, 0, 0));\n+      newCall.addChildrenToBack(sliceIndex);\n+      elem.getParent().replaceChild(elem, NodeUtil.stringNode(joinSeparator, factory));\n+      reportCodeChange();\n+      return;\n+    } else {\n+      arrayFoldedChildren.add(elem.cloneNode());\n+    }\n+  }\n+\n+  private Map<StaticSourceFile, StringConcatenationSummary> stringSummaries = Maps.newLinkedHashMap();\n+  // We cache subexpression results so we don't output the same one twice.\n+  // This happens when a subexpression is shared by multiple concatenations.\n+  private IdentityHashMap<Node, String> subExpressionCache = Maps.newIdentityHashMap();\n+  private int MAX_SUB_EXPR_LENGTH = 100;\n+\n+  private StringBuilder stringFor(Object nodeOrString) {\n+    String existing = subExpressionCache.get(nodeOrString);\n+    if (existing != null) {\n+      return new StringBuilder(existing);\n+    } else {\n+      StringBuilder result = new StringBuilder();\n+      subExpressionCache.put(nodeOrString, result.toString());\n+      return result;\n+    }\n+  }\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +749,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}