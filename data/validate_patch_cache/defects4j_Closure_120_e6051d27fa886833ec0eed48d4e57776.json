{
    "patch": "boolean foundAssignment = false;\nint size = references.size();\nfor (int i = 1; i < size; i++) {\n  if (isInitializingAssignmentAt(i)) {\n    if (foundAssignment) {\n      return false;\n    } else {\n      foundAssignment = true;\n    }\n  } else if (isInitializingDeclarationAt(i)) {\n    if (foundAssignment) {\n      return false;\n    }\n    // If we found a declaration, and it doesn't include an assignment, then the variable\n    // is assigned once.\n    if (!references.get(i).isInitializingDeclaration()) {\n      return true;\n    }\n  }\n}\nreturn foundAssignment",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..e017f821 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+boolean foundAssignment = false;\n+int size = references.size();\n+for (int i = 1; i < size; i++) {\n+  if (isInitializingAssignmentAt(i)) {\n+    if (foundAssignment) {\n+      return false;\n+    } else {\n+      foundAssignment = true;\n+    }\n+  } else if (isInitializingDeclarationAt(i)) {\n+    if (foundAssignment) {\n+      return false;\n+    }\n+    // If we found a declaration, and it doesn't include an assignment, then the variable\n+    // is assigned once.\n+    if (!references.get(i).isInitializingDeclaration()) {\n+      return true;\n+    }\n+  }\n+}\n+return foundAssignment\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}