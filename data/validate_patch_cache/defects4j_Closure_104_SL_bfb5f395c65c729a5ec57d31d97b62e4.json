{
    "patch": "  @Override\n  public JSType greatestSubtype(JSType other) {\n    if (other instanceof UnionType) {\n      UnionType.Builder builder = new UnionType.Builder(getCommonTypes());\n      for (JSType thisAlternate : alternates) {\n        for (JSType otherAlternate : ((UnionType) other).alternates) {\n          JSType greatestSubtype = thisAlternate.greatestSubtype(otherAlternate);\n          if (!greatestSubtype.isBottom()) {  // ADD THIS LINE\n            builder.addAlternate(greatestSubtype);\n          }\n        }\n      }\n      return builder.build();\n    } else if (this.isSubtype(other)) {\n      return this;\n    } else if (this.isBottom() || other.isBottom()) {\n      return JSType.BOTTOM;\n    } else {\n      return other;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..a24e89c6 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,27 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+  @Override\n+  public JSType greatestSubtype(JSType other) {\n+    if (other instanceof UnionType) {\n+      UnionType.Builder builder = new UnionType.Builder(getCommonTypes());\n+      for (JSType thisAlternate : alternates) {\n+        for (JSType otherAlternate : ((UnionType) other).alternates) {\n+          JSType greatestSubtype = thisAlternate.greatestSubtype(otherAlternate);\n+          if (!greatestSubtype.isBottom()) {  // ADD THIS LINE\n+            builder.addAlternate(greatestSubtype);\n+          }\n+        }\n+      }\n+      return builder.build();\n+    } else if (this.isSubtype(other)) {\n+      return this;\n+    } else if (this.isBottom() || other.isBottom()) {\n+      return JSType.BOTTOM;\n+    } else {\n+      return other;\n+    }\n+  }\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}