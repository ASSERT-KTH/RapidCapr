{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal (first estimate).\n    int initialOffset = getOffset(instantLocal);\n    // If instantLocal is in a gap, get the previous offset.\n    if (initialOffset > 0) {\n        long previousTransition = previousTransition(instantLocal);\n        int previousOffset = getOffset(previousTransition);\n        if (previousOffset < initialOffset) {\n            return previousOffset;\n        }\n    }\n    // Adjust instantLocal using the estimate and calculate the offset.\n    long instantAdjusted = instantLocal - initialOffset;\n    int offsetAdjusted = getOffset(instantAdjusted);\n    // If the offsets differ, we must be near a DST boundary.\n    if (initialOffset != offsetAdjusted) {\n        long nextTransition = nextTransition(instantAdjusted);\n        long previousTransition = previousTransition(instantAdjusted);\n        if (nextTransition == instantAdjusted) {\n            // We are in a gap.\n            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n        } else if (previousTransition == instantAdjusted) {\n            // We are in an overlap. Check which side of the overlap the instant is on.\n            long nextInstant = nextTransition(instantLocal - initialOffset);\n            if (nextInstant < nextTransition) {\n                // The instant is in the early overlap.\n                return initialOffset;\n            } else {\n                // The instant is in the late overlap.\n                return offsetAdjusted;\n            }\n        }\n    }\n    // Otherwise, return the adjusted offset.\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..57621ef8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,42 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at instantLocal (first estimate).\n+    int initialOffset = getOffset(instantLocal);\n+    // If instantLocal is in a gap, get the previous offset.\n+    if (initialOffset > 0) {\n+        long previousTransition = previousTransition(instantLocal);\n+        int previousOffset = getOffset(previousTransition);\n+        if (previousOffset < initialOffset) {\n+            return previousOffset;\n+        }\n+    }\n+    // Adjust instantLocal using the estimate and calculate the offset.\n+    long instantAdjusted = instantLocal - initialOffset;\n+    int offsetAdjusted = getOffset(instantAdjusted);\n+    // If the offsets differ, we must be near a DST boundary.\n+    if (initialOffset != offsetAdjusted) {\n+        long nextTransition = nextTransition(instantAdjusted);\n+        long previousTransition = previousTransition(instantAdjusted);\n+        if (nextTransition == instantAdjusted) {\n+            // We are in a gap.\n+            throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" + new DateTime(instantLocal));\n+        } else if (previousTransition == instantAdjusted) {\n+            // We are in an overlap. Check which side of the overlap the instant is on.\n+            long nextInstant = nextTransition(instantLocal - initialOffset);\n+            if (nextInstant < nextTransition) {\n+                // The instant is in the early overlap.\n+                return initialOffset;\n+            } else {\n+                // The instant is in the late overlap.\n+                return offsetAdjusted;\n             }\n         }\n-        return offsetAdjusted;\n     }\n+    // Otherwise, return the adjusted offset.\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}