{
    "patch": "int remainingIndex = index;\nfor (int i = 0; i < last; i++) {\n    final int offset = uniCounterOffset[i];\n    int idx = remainingIndex / offset;\n    remainingIndex -= idx * offset;\n    indices[i] = idx - 1;\n}\nindices[last] = remainingIndex;\n\nif (indices[last] == -1) {\n    for (int i = last - 1; i >= 0; i--) {\n        if (indices[i] == 0) {\n            indices[i] = uniCounter[i] - 1;\n        } else {\n            indices[i] -= 1;\n            break;\n        }\n    }\n    indices[last] = uniCounter[last] - 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..72d6f9378 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,26 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+int remainingIndex = index;\n+for (int i = 0; i < last; i++) {\n+    final int offset = uniCounterOffset[i];\n+    int idx = remainingIndex / offset;\n+    remainingIndex -= idx * offset;\n+    indices[i] = idx - 1;\n+}\n+indices[last] = remainingIndex;\n+\n+if (indices[last] == -1) {\n+    for (int i = last - 1; i >= 0; i--) {\n+        if (indices[i] == 0) {\n+            indices[i] = uniCounter[i] - 1;\n+        } else {\n+            indices[i] -= 1;\n+            break;\n         }\n-        --idx;\n-        indices[last] = idx;\n+    }\n+    indices[last] = uniCounter[last] - 1;\n+}\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}