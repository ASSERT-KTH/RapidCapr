{
    "patch": "I apologize again for the mistake. Here is the corrected hunk:\n```\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors, interfaces, or have the @this,\n      // @override, or @implements annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride() ||\n           jsDoc.isImplements())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype or have the @this,\n      // @override, or @implements annotation.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          if (NodeUtil.isGet(lhs)) {\n            if (lhs.getType() == Token.GETPROP &&\n                lhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n            Node llhs = lhs.getFirstChild();\n            if (llhs.getType() == Token.GETPROP &&\n                llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n            }\n          }\n\n          if (rhs.getType() == Token.FUNCTION) {\n            JSDocInfo rhsJsDoc = NodeUtil.getBestJSDocInfo(rhs);\n            if (rhsJsDoc != null &&\n                (rhsJsDoc.isConstructor() || rhsJsDoc.isInterface() || rhsJsDoc.isOverride()\n                    || rhsJsDoc.isImplements() || rhsJsDoc.hasThisType())) {\n              return false;\n            }\n            // Functions being lent shouldn't have returns or other side effects.\n            NodeTraversal lendingTraversal =\n                new NodeTraversal(compiler, new LendingFunctionCallback());\n            lendingTraversal.traverseInnerNode(rhs, parent);\n\n            // In general assigning a pseudonym to a function is an unsafe thing\n            // to do if the function uses the 'this' keyword. However we allow\n            // it in some simple situations, as follows.\n            if (rhsJsDoc == null || !rhsJsDoc.hasThisType()) {\n              isSimpleLValue = true;\n            }\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..532a7910 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,95 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+I apologize again for the mistake. Here is the corrected hunk:\n+```\n+ public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors, interfaces, or have the @this,\n+      // @override, or @implements annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride() ||\n+           jsDoc.isImplements())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype or have the @this,\n+      // @override, or @implements annotation.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          if (NodeUtil.isGet(lhs)) {\n+            if (lhs.getType() == Token.GETPROP &&\n+                lhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+            Node llhs = lhs.getFirstChild();\n+            if (llhs.getType() == Token.GETPROP &&\n+                llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n+            }\n+          }\n+\n+          if (rhs.getType() == Token.FUNCTION) {\n+            JSDocInfo rhsJsDoc = NodeUtil.getBestJSDocInfo(rhs);\n+            if (rhsJsDoc != null &&\n+                (rhsJsDoc.isConstructor() || rhsJsDoc.isInterface() || rhsJsDoc.isOverride()\n+                    || rhsJsDoc.isImplements() || rhsJsDoc.hasThisType())) {\n+              return false;\n+            }\n+            // Functions being lent shouldn't have returns or other side effects.\n+            NodeTraversal lendingTraversal =\n+                new NodeTraversal(compiler, new LendingFunctionCallback());\n+            lendingTraversal.traverseInnerNode(rhs, parent);\n+\n+            // In general assigning a pseudonym to a function is an unsafe thing\n+            // to do if the function uses the 'this' keyword. However we allow\n+            // it in some simple situations, as follows.\n+            if (rhsJsDoc == null || !rhsJsDoc.hasThisType()) {\n+              isSimpleLValue = true;\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    return true;\n+  }\n+```\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}