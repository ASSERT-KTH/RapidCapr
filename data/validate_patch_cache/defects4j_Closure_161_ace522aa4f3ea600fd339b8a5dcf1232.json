{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex < 0) {\n      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n      return n;\n    }\n\n    if (intIndex >= getEffectiveChildrenCount(left)) {\n      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem == null) {\n      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n      return n;\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(elem);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n}\n\nprivate static void error(Node n, DiagnosticType errorType) {\n    JSError error = JSError.make(n, errorType);\n    throw new RuntimeException(error.toString());\n}\n\nprivate static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n    DiagnosticType.error(\"JSC_INDEX_OUT_OF_BOUNDS_ERROR\", \"Array index out of bounds: {0}\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..edc25b5e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,8 +1274,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n@@ -1289,13 +1288,13 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+    if (intIndex < 0) {\n+      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (intIndex >= getEffectiveChildrenCount(left)) {\n+      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n       return n;\n     }\n \n@@ -1305,7 +1304,7 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      error(n, INDEX_OUT_OF_BOUNDS_ERROR);\n       return n;\n     }\n \n@@ -1316,10 +1315,18 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n-  }\n+}\n+\n+private static void error(Node n, DiagnosticType errorType) {\n+    JSError error = JSError.make(n, errorType);\n+    throw new RuntimeException(error.toString());\n+}\n+\n+private static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n+    DiagnosticType.error(\"JSC_INDEX_OUT_OF_BOUNDS_ERROR\", \"Array index out of bounds: {0}\");\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: variable INDEX_OUT_OF_BOUNDS_ERROR is already defined in class PeepholeFoldConstants",
    "test_result": "ERROR"
}