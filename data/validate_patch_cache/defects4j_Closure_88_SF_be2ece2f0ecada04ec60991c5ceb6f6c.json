{
    "patch": "private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        Node variableParent = n.getParent();\n        if (variableParent.isAssign() && variableParent.getFirstChild() == n) {\n          return VariableLiveness.WRITE;\n        } else {\n          return VariableLiveness.KILL;\n        }\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..f5e7ead0 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,22 +320,25 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+        Node variableParent = n.getParent();\n+        if (variableParent.isAssign() && variableParent.getFirstChild() == n) {\n+          return VariableLiveness.WRITE;\n+        } else {\n+          return VariableLiveness.KILL;\n+        }\n       } else {\n         return VariableLiveness.READ;\n       }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}