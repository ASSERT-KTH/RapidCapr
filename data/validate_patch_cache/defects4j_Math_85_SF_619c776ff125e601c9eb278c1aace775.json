{
    "patch": "public Dfp multiply(final int x) {\n    Dfp result = newInstance();\n    if (x >= 0 && x < RADIX) {\n        for (int i = 0; i < nDigits; ++i) {\n            result.digits[i] = muladd(digits[i], x, 0);\n        }\n        result.normalize();\n    } else {\n        // split the integer into two parts\n        int xH = x / HALF_RADIX;\n        int xL = x - xH * HALF_RADIX;\n\n        Dfp hProduct = newInstance();\n        Dfp lProduct = newInstance();\n\n        // compute the high product hProduct\n        for (int i = 0; i < nDigits; ++i) {\n            hProduct.digits[i+1] = muladd(digits[i], xH, 0);\n        }\n        hProduct.sign = sign;\n\n        // compute the low product lProduct\n        for (int i = 0; i < nDigits; ++i) {\n            lProduct.digits[i] = muladd(digits[i], xL, 0);\n        }\n\n        // add lProduct to the least significant half of hProduct\n        for (int i = 0; i < nDigits; ++i) {\n            lProduct.digits[i+1] += hProduct.digits[i];\n        }\n\n        // propagate carry from lProduct to hProduct\n        for (int i = 0; i < nDigits; ++i) {\n            hProduct.digits[i] += lProduct.digits[i] / RADIX;\n            lProduct.digits[i] %= RADIX;\n        }\n\n        // combine the high and low products\n        for (int i = 0; i < nDigits; ++i) {\n            result.digits[i] = hProduct.digits[i];\n        }\n        result.digits[nDigits] = lProduct.digits[nDigits-1];\n\n        result.sign = sign;\n        result.normalize();\n    }\n    return result;\n}\n\nprivate void normalize() {\n    int i;\n    for (i = nDigits - 1; i > 0 && digits[i] == 0; --i) {\n        // do nothing\n    }\n    nDigits = i + 1;\n\n    if (nDigits == 1 && digits[0] == 0) {\n        sign = (byte) 0; // declare zero\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..fe69e8807 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,66 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public Dfp multiply(final int x) {\n+    Dfp result = newInstance();\n+    if (x >= 0 && x < RADIX) {\n+        for (int i = 0; i < nDigits; ++i) {\n+            result.digits[i] = muladd(digits[i], x, 0);\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        result.normalize();\n+    } else {\n+        // split the integer into two parts\n+        int xH = x / HALF_RADIX;\n+        int xL = x - xH * HALF_RADIX;\n+\n+        Dfp hProduct = newInstance();\n+        Dfp lProduct = newInstance();\n+\n+        // compute the high product hProduct\n+        for (int i = 0; i < nDigits; ++i) {\n+            hProduct.digits[i+1] = muladd(digits[i], xH, 0);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        hProduct.sign = sign;\n+\n+        // compute the low product lProduct\n+        for (int i = 0; i < nDigits; ++i) {\n+            lProduct.digits[i] = muladd(digits[i], xL, 0);\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        // add lProduct to the least significant half of hProduct\n+        for (int i = 0; i < nDigits; ++i) {\n+            lProduct.digits[i+1] += hProduct.digits[i];\n+        }\n+\n+        // propagate carry from lProduct to hProduct\n+        for (int i = 0; i < nDigits; ++i) {\n+            hProduct.digits[i] += lProduct.digits[i] / RADIX;\n+            lProduct.digits[i] %= RADIX;\n         }\n-        \n-        return new double[]{a, b};\n+\n+        // combine the high and low products\n+        for (int i = 0; i < nDigits; ++i) {\n+            result.digits[i] = hProduct.digits[i];\n+        }\n+        result.digits[nDigits] = lProduct.digits[nDigits-1];\n+\n+        result.sign = sign;\n+        result.normalize();\n+    }\n+    return result;\n+}\n+\n+private void normalize() {\n+    int i;\n+    for (i = nDigits - 1; i > 0 && digits[i] == 0; --i) {\n+        // do nothing\n+    }\n+    nDigits = i + 1;\n+\n+    if (nDigits == 1 && digits[0] == 0) {\n+        sign = (byte) 0; // declare zero\n     }\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}