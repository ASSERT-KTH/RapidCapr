{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n    double v1x = v1.getX();\n    double v1y = v1.getY();\n    double v1z = v1.getZ();\n    double v2x = v2.getX();\n    double v2y = v2.getY();\n    double v2z = v2.getZ();\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    double sqlen1 = v1x * v1x + v1y * v1y + v1z * v1z;\n    double sqlen2 = v2x * v2x + v2y * v2y + v2z * v2z;\n    double factor1 = sqlen2 / sqlen1;\n    double factor2 = sqlen1 / sqlen2;\n\n    // we reduce cancellation errors by preconditioning,\n    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n    // v3 without loss of precision\n    double rho = (v1x * v2x + v1y * v2y + v1z * v2z) / sqlen2;\n    double absRho = FastMath.abs(rho);\n    if (absRho < 0.125) {\n        rho *= ((2.0 + rho) - factor2 * rho * rho) / (1.0 + rho);\n    } else {\n        rho *= 0.5 / (1.0 + FastMath.sqrt(1.0 + factor1));\n    }\n\n    double v3x = v1x - rho * v2x;\n    double v3y = v1y - rho * v2y;\n    double v3z = v1z - rho * v2z;\n\n    // compute cross product from v3 and v2 instead of v1 and v2\n    double crossX = v3y * v2z - v3z * v2y;\n    double crossY = v3z * v2x - v3x * v2z;\n    double crossZ = v3x * v2y - v3y * v2x;\n\n    // apply normalization\n    double invNorm = FastMath.invSqrt(crossX * crossX + crossY * crossY + crossZ * crossZ);\n    return new Vector3D(crossX * invNorm, crossY * invNorm, crossZ * invNorm);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..0f6a57ce2 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,45 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+    double v1x = v1.getX();\n+    double v1y = v1.getY();\n+    double v1z = v1.getZ();\n+    double v2x = v2.getX();\n+    double v2y = v2.getY();\n+    double v2z = v2.getZ();\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    double sqlen1 = v1x * v1x + v1y * v1y + v1z * v1z;\n+    double sqlen2 = v2x * v2x + v2y * v2y + v2z * v2z;\n+    double factor1 = sqlen2 / sqlen1;\n+    double factor2 = sqlen1 / sqlen2;\n+\n+    // we reduce cancellation errors by preconditioning,\n+    // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+    // v3 without loss of precision\n+    double rho = (v1x * v2x + v1y * v2y + v1z * v2z) / sqlen2;\n+    double absRho = FastMath.abs(rho);\n+    if (absRho < 0.125) {\n+        rho *= ((2.0 + rho) - factor2 * rho * rho) / (1.0 + rho);\n+    } else {\n+        rho *= 0.5 / (1.0 + FastMath.sqrt(1.0 + factor1));\n+    }\n \n+    double v3x = v1x - rho * v2x;\n+    double v3y = v1y - rho * v2y;\n+    double v3z = v1z - rho * v2z;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v3 and v2 instead of v1 and v2\n+    double crossX = v3y * v2z - v3z * v2y;\n+    double crossY = v3z * v2x - v3x * v2z;\n+    double crossZ = v3x * v2y - v3y * v2x;\n \n-  }\n+    // apply normalization\n+    double invNorm = FastMath.invSqrt(crossX * crossX + crossY * crossY + crossZ * crossZ);\n+    return new Vector3D(crossX * invNorm, crossY * invNorm, crossZ * invNorm);\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}