{
    "patch": "            if (m instanceof CapturesArguments) {\n                if(isVariableArgument(invocation, indexOfVararg) && isVarargMatcher(m)) {\n                    Object array = invocation.getRawArguments()[indexOfVararg];\n                    for (int i = 0; i < Array.getLength(array); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                    }\n                    //since we've captured all varargs already, it does not make sense to process other matchers.\n                    return;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[indexOfVararg]);\n                }\n            }\n            throw new UnsupportedOperationException();",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d8ebf38ed 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,10 +116,21 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n+            if (m instanceof CapturesArguments) {\n+                if(isVariableArgument(invocation, indexOfVararg) && isVarargMatcher(m)) {\n+                    Object array = invocation.getRawArguments()[indexOfVararg];\n+                    for (int i = 0; i < Array.getLength(array); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                    }\n+                    //since we've captured all varargs already, it does not make sense to process other matchers.\n+                    return;\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(invocation.getRawArguments()[indexOfVararg]);\n+                }\n+            }\n             throw new UnsupportedOperationException();\n \n         } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}