{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal = real + rhs.getReal();\n    double newImaginary = imaginary + rhs.getImaginary();\n    if (!Double.isFinite(newReal) || !Double.isFinite(newImaginary)) {\n        if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n            return createComplex(Double.NaN, Double.NaN);\n        } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n            if (Math.signum(newReal) == Math.signum(newImaginary)) {\n                double infSign = Math.signum(newReal);\n                return createComplex(infSign * Double.POSITIVE_INFINITY, infSign * Double.POSITIVE_INFINITY);\n            } else {\n                return createComplex(Double.NaN, Double.NaN);\n            }\n        } else if (Double.isInfinite(newReal)) {\n            double overflowSign = Math.signum(newReal);\n            return createComplex(overflowSign * Double.POSITIVE_INFINITY, newImaginary);\n        } else if (Double.isInfinite(newImaginary)) {\n            double overflowSign = Math.signum(newImaginary);\n            return createComplex(newReal, overflowSign * Double.POSITIVE_INFINITY);\n        }\n    }\n    return createComplex(newReal, newImaginary);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..b06199016 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,30 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal = real + rhs.getReal();\n+    double newImaginary = imaginary + rhs.getImaginary();\n+    if (!Double.isFinite(newReal) || !Double.isFinite(newImaginary)) {\n+        if (Double.isNaN(newReal) || Double.isNaN(newImaginary)) {\n+            return createComplex(Double.NaN, Double.NaN);\n+        } else if (Double.isInfinite(newReal) && Double.isInfinite(newImaginary)) {\n+            if (Math.signum(newReal) == Math.signum(newImaginary)) {\n+                double infSign = Math.signum(newReal);\n+                return createComplex(infSign * Double.POSITIVE_INFINITY, infSign * Double.POSITIVE_INFINITY);\n+            } else {\n+                return createComplex(Double.NaN, Double.NaN);\n+            }\n+        } else if (Double.isInfinite(newReal)) {\n+            double overflowSign = Math.signum(newReal);\n+            return createComplex(overflowSign * Double.POSITIVE_INFINITY, newImaginary);\n+        } else if (Double.isInfinite(newImaginary)) {\n+            double overflowSign = Math.signum(newImaginary);\n+            return createComplex(newReal, overflowSign * Double.POSITIVE_INFINITY);\n+        }\n     }\n+    return createComplex(newReal, newImaginary);\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}