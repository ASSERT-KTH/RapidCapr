{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // Get the offset at instantLocal (first estimate).\n    final int initialOffset = getOffset(instantLocal);\n\n    // Adjust instantLocal using the estimate and recalculate the offset.\n    final long adjustedInstant = instantLocal - initialOffset;\n    final int adjustedOffset = getOffset(adjustedInstant);\n\n    // If the offsets differ, we must be near a DST boundary.\n    if (initialOffset != adjustedOffset) {\n        // We need to ensure that time is always on or after the DST gap.\n        // This happens naturally for positive offsets, but not for negative.\n        if ((initialOffset - adjustedOffset) < 0) {\n            // If we just return offsetAdjusted then the time is pushed\n            // back before the transition, whereas it should be\n            // on or after the transition. To handle this case, we need\n            // to check whether the next transition is within the current\n            // gap. If so, return the initial offset to push the time\n            // after the gap boundary.\n            long nextLocal = nextTransition(adjustedInstant);\n            long nextAdjusted = nextTransition(instantLocal - adjustedOffset);\n            if (nextLocal == nextAdjusted || instantLocal >= nextLocal - adjustedOffset) {\n                return initialOffset;\n            }\n        }\n    } else if (initialOffset > 0) {\n        // If the offsets are the same and positive, then it's possible that\n        // the current time is in a DST overlap period.\n        long prev = previousTransition(adjustedInstant);\n        if (prev < adjustedInstant) {\n            int prevOffset = getOffset(prev);\n            int diff = initialOffset - prevOffset;\n            if (adjustedInstant - prev < diff) {\n                // If the current time is within the overlap period, pick the\n                // offset that is in effect before the overlap starts.\n                return prevOffset;\n            }\n        }\n    }\n\n    return adjustedOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..4b743b59 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,39 +877,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // Get the offset at instantLocal (first estimate).\n+    final int initialOffset = getOffset(instantLocal);\n+\n+    // Adjust instantLocal using the estimate and recalculate the offset.\n+    final long adjustedInstant = instantLocal - initialOffset;\n+    final int adjustedOffset = getOffset(adjustedInstant);\n+\n+    // If the offsets differ, we must be near a DST boundary.\n+    if (initialOffset != adjustedOffset) {\n+        // We need to ensure that time is always on or after the DST gap.\n+        // This happens naturally for positive offsets, but not for negative.\n+        if ((initialOffset - adjustedOffset) < 0) {\n+            // If we just return offsetAdjusted then the time is pushed\n+            // back before the transition, whereas it should be\n+            // on or after the transition. To handle this case, we need\n+            // to check whether the next transition is within the current\n+            // gap. If so, return the initial offset to push the time\n+            // after the gap boundary.\n+            long nextLocal = nextTransition(adjustedInstant);\n+            long nextAdjusted = nextTransition(instantLocal - adjustedOffset);\n+            if (nextLocal == nextAdjusted || instantLocal >= nextLocal - adjustedOffset) {\n+                return initialOffset;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        }\n+    } else if (initialOffset > 0) {\n+        // If the offsets are the same and positive, then it's possible that\n+        // the current time is in a DST overlap period.\n+        long prev = previousTransition(adjustedInstant);\n+        if (prev < adjustedInstant) {\n+            int prevOffset = getOffset(prev);\n+            int diff = initialOffset - prevOffset;\n+            if (adjustedInstant - prev < diff) {\n+                // If the current time is within the overlap period, pick the\n+                // offset that is in effect before the overlap starts.\n+                return prevOffset;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n+    return adjustedOffset;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}