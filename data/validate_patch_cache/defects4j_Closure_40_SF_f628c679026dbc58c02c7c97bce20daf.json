{
    "patch": "class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n\n  private final Set<String> names = new HashSet<>();\n  private final AbstractCompiler compiler;\n  private final ScopeCreator scopeCreator;\n\n  FindDeclarationsAndSetters(\n      AbstractCompiler compiler, ScopeCreator scopeCreator) {\n    this.compiler = compiler;\n    this.scopeCreator = scopeCreator;\n  }\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    // Record global variable and function declarations\n    if (t.inGlobalScope()) {\n      if (NodeUtil.isVarDeclaration(n)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        Preconditions.checkNotNull(ns);\n        recordSet(ns.name, n);\n      } else if (NodeUtil.isFunctionDeclaration(n)) {\n        Node nameNode = n.getFirstChild();\n        NameInformation ns = createNameInformation(t, nameNode, n);\n        if (ns != null) {\n          JsName nameInfo = getName(nameNode.getString(), true);\n          recordSet(nameInfo.name, nameNode);\n        }\n      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n        NameInformation ns = createNameInformation(t, n, parent);\n        if (ns != null) {\n          recordSet(ns.name, n);\n        }\n      }\n    }\n\n    // Record assignments and call sites\n    if (n.isAssign()) {\n      Node nameNode = n.getFirstChild();\n\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null) {\n        if (ns.isPrototype) {\n          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n        } else {\n          recordSet(ns.name, nameNode);\n        }\n      }\n    } else if (n.isCall()) {\n      Node nameNode = n.getFirstChild();\n      NameInformation ns = createNameInformation(t, nameNode, n);\n      if (ns != null && ns.onlyAffectsClassDef) {\n        JsName name = getName(ns.name, false);\n        if (name != null) {\n          refNodes.add(new ClassDefiningFunctionNode(\n              name, n, parent, parent.getParent()));\n        }\n      }\n    }\n  }\n\n  private JsName getName(String name, boolean create) {\n    return compiler.getNameForJsSrc(name, create);\n  }\n\n  private NameInformation createNameInformation(\n      NodeTraversal t, Node nameNode, Node enclosingNode) {\n    Node ownerNode = null;\n    boolean isPrototype = false;\n    boolean onlyAffectsClassDef = false;\n\n    switch (nameNode.getType()) {\n      case Token.NAME:\n        ownerNode = NodeUtil.getBestLValueOwner(nameNode);\n        if (ownerNode != null && ownerNode.getType() == Token.GETPROP) {\n          isPrototype = ownerNode.getLastChild().getString().equals(\"prototype\");\n          if (isPrototype) {\n            ownerNode = ownerNode.getFirstChild();\n            onlyAffectsClassDef = true;\n          }\n        } else if (NodeUtil.isFunctionExpression(nameNode.getParent())) {\n          ownerNode = nameNode.getGrandparent();\n          onlyAffectsClassDef = NodeUtil.isClassDeclaration(ownerNode);\n        }\n        break;\n      case Token.GETPROP:\n        if (nameNode.getLastChild().getString().equals(\"prototype\")) {\n          onlyAffectsClassDef = true;\n        }\n        ownerNode = nameNode.getFirstChild();\n        isPrototype = true;\n        break;\n    }\n\n    if (ownerNode == null) {\n      return null;\n    }\n\n    Var var = t.getScope().getVar(ownerNode.getString());\n    if (var == null || var.getNameNode() != ownerNode) {\n      return null;\n    }\n\n    Var baseVar;\n    Node baseVarNode = var.getParentNode();\n    if (NodeUtil.isNameDeclaration(baseVarNode)) {\n      baseVar = scopeCreator.declareName(var.getName(), baseVarNode.getFirstChild());\n    } else {\n      Preconditions.checkState(NodeUtil.isAssignment(baseVarNode));\n      baseVar = var;\n    }\n\n    if (nameNode.getType() == Token.NAME) {\n      if (onlyAffectsClassDef) {\n        registerReference(t, nameNode.getString());\n      } else {\n        registerDeclaration(baseVar, nameNode.getString());\n      }\n    }\n\n    if (isPrototype) {\n      Node classNode = NodeUtil.getEnclosingClass(baseVarNode);\n      return new NameInformation(\n          baseVar.getName(), true, classNode,\n          NodeUtil.getPrototypePropertyName(nameNode), onlyAffectsClassDef);\n    } else {\n      return new NameInformation(baseVar.getName(), false, null, null, onlyAffectsClassDef);\n    }\n  }\n\n  private void registerDeclaration(Var var, String name) {\n    if (var == null) {\n      return;\n    }\n    // Ignore function parameters and catch variables\n    if (var.getParentNode().isFunction() &&\n        (var.getParentNode().getFirstChild() == var.getParentNode().getLastChild())) {\n      return;\n    }\n    String fullname = var.getName() + \".\" + name;\n    if (names.contains(fullname)) {\n      return;\n    }\n    JsName jsName = getName(fullname, true);\n    recordSet(jsName, var.getNameNode());\n    names.add(fullname);\n  }\n\n  void recordSet(JsName name, Node n) {\n    if (!name.isObfuscatable()) {\n      return;\n    }\n    Var var = name.getVar();\n    boolean isGlobal = (var == null) || (var.isGlobal());\n    ScopedName newScope = ScopedName.from(this.compiler, n);\n\n    // This check shouldn't be necessary.  It's here in case you run the analyzer twice.\n    ScopedName oldScope = name.getScope();\n    if (oldScope != null) {\n      if (oldScope.equals(newScope)) {\n        return;\n      } else {\n        oldScope.removeName(name);\n      }\n    }\n\n    if (isGlobal) {\n      name.setStaticRef(n);\n    }\n    newScope.addName(name);\n  }\n\n  private void recordPrototypeSet(Node classNode, String propertyName, Node n) {\n    JsName prototypeName =\n        getName(NodeUtil.getBestLValueName(classNode) + \".prototype\", true);\n    if (prototypeName == null) {\n      return;\n    }\n    StringBuilder qName = new StringBuilder(prototypeName.getFullName());\n    qName.append('.').append(propertyName);\n\n    JsName jsName = getName(qName.toString(), true);\n    recordSet(jsName, n);\n  }\n\n  private void registerReference(NodeTraversal t, String name) {\n    if (t.getScope().getVar(name) != null) {\n      return;\n    }\n\n    JsName jsName = getName(name, true);\n    if (!jsName.isObfuscatable() || (jsName.getStaticRef() != null)) {\n      return;\n    }\n    refNodes.add(new BadAffectingScopeNode(jsName));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..652f0f4d 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,54 +593,203 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n+class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n+\n+  private final Set<String> names = new HashSet<>();\n+  private final AbstractCompiler compiler;\n+  private final ScopeCreator scopeCreator;\n+\n+  FindDeclarationsAndSetters(\n+      AbstractCompiler compiler, ScopeCreator scopeCreator) {\n+    this.compiler = compiler;\n+    this.scopeCreator = scopeCreator;\n+  }\n \n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    // Record global variable and function declarations\n+    if (t.inGlobalScope()) {\n+      if (NodeUtil.isVarDeclaration(n)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        Preconditions.checkNotNull(ns);\n+        recordSet(ns.name, n);\n+      } else if (NodeUtil.isFunctionDeclaration(n)) {\n+        Node nameNode = n.getFirstChild();\n+        NameInformation ns = createNameInformation(t, nameNode, n);\n+        if (ns != null) {\n+          JsName nameInfo = getName(nameNode.getString(), true);\n+          recordSet(nameInfo.name, nameNode);\n+        }\n+      } else if (NodeUtil.isObjectLitKey(n, parent)) {\n+        NameInformation ns = createNameInformation(t, n, parent);\n+        if (ns != null) {\n           recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n         }\n       }\n+    }\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+    // Record assignments and call sites\n+    if (n.isAssign()) {\n+      Node nameNode = n.getFirstChild();\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null) {\n+        if (ns.isPrototype) {\n+          recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n+        } else {\n+          recordSet(ns.name, nameNode);\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n+      }\n+    } else if (n.isCall()) {\n+      Node nameNode = n.getFirstChild();\n+      NameInformation ns = createNameInformation(t, nameNode, n);\n+      if (ns != null && ns.onlyAffectsClassDef) {\n+        JsName name = getName(ns.name, false);\n+        if (name != null) {\n           refNodes.add(new ClassDefiningFunctionNode(\n               name, n, parent, parent.getParent()));\n+        }\n+      }\n+    }\n+  }\n+\n+  private JsName getName(String name, boolean create) {\n+    return compiler.getNameForJsSrc(name, create);\n+  }\n+\n+  private NameInformation createNameInformation(\n+      NodeTraversal t, Node nameNode, Node enclosingNode) {\n+    Node ownerNode = null;\n+    boolean isPrototype = false;\n+    boolean onlyAffectsClassDef = false;\n+\n+    switch (nameNode.getType()) {\n+      case Token.NAME:\n+        ownerNode = NodeUtil.getBestLValueOwner(nameNode);\n+        if (ownerNode != null && ownerNode.getType() == Token.GETPROP) {\n+          isPrototype = ownerNode.getLastChild().getString().equals(\"prototype\");\n+          if (isPrototype) {\n+            ownerNode = ownerNode.getFirstChild();\n+            onlyAffectsClassDef = true;\n           }\n+        } else if (NodeUtil.isFunctionExpression(nameNode.getParent())) {\n+          ownerNode = nameNode.getGrandparent();\n+          onlyAffectsClassDef = NodeUtil.isClassDeclaration(ownerNode);\n+        }\n+        break;\n+      case Token.GETPROP:\n+        if (nameNode.getLastChild().getString().equals(\"prototype\")) {\n+          onlyAffectsClassDef = true;\n         }\n+        ownerNode = nameNode.getFirstChild();\n+        isPrototype = true;\n+        break;\n+    }\n+\n+    if (ownerNode == null) {\n+      return null;\n+    }\n+\n+    Var var = t.getScope().getVar(ownerNode.getString());\n+    if (var == null || var.getNameNode() != ownerNode) {\n+      return null;\n+    }\n+\n+    Var baseVar;\n+    Node baseVarNode = var.getParentNode();\n+    if (NodeUtil.isNameDeclaration(baseVarNode)) {\n+      baseVar = scopeCreator.declareName(var.getName(), baseVarNode.getFirstChild());\n+    } else {\n+      Preconditions.checkState(NodeUtil.isAssignment(baseVarNode));\n+      baseVar = var;\n+    }\n+\n+    if (nameNode.getType() == Token.NAME) {\n+      if (onlyAffectsClassDef) {\n+        registerReference(t, nameNode.getString());\n+      } else {\n+        registerDeclaration(baseVar, nameNode.getString());\n       }\n     }\n \n+    if (isPrototype) {\n+      Node classNode = NodeUtil.getEnclosingClass(baseVarNode);\n+      return new NameInformation(\n+          baseVar.getName(), true, classNode,\n+          NodeUtil.getPrototypePropertyName(nameNode), onlyAffectsClassDef);\n+    } else {\n+      return new NameInformation(baseVar.getName(), false, null, null, onlyAffectsClassDef);\n+    }\n+  }\n+\n+  private void registerDeclaration(Var var, String name) {\n+    if (var == null) {\n+      return;\n+    }\n+    // Ignore function parameters and catch variables\n+    if (var.getParentNode().isFunction() &&\n+        (var.getParentNode().getFirstChild() == var.getParentNode().getLastChild())) {\n+      return;\n+    }\n+    String fullname = var.getName() + \".\" + name;\n+    if (names.contains(fullname)) {\n+      return;\n+    }\n+    JsName jsName = getName(fullname, true);\n+    recordSet(jsName, var.getNameNode());\n+    names.add(fullname);\n+  }\n+\n+  void recordSet(JsName name, Node n) {\n+    if (!name.isObfuscatable()) {\n+      return;\n+    }\n+    Var var = name.getVar();\n+    boolean isGlobal = (var == null) || (var.isGlobal());\n+    ScopedName newScope = ScopedName.from(this.compiler, n);\n+\n+    // This check shouldn't be necessary.  It's here in case you run the analyzer twice.\n+    ScopedName oldScope = name.getScope();\n+    if (oldScope != null) {\n+      if (oldScope.equals(newScope)) {\n+        return;\n+      } else {\n+        oldScope.removeName(name);\n+      }\n+    }\n+\n+    if (isGlobal) {\n+      name.setStaticRef(n);\n+    }\n+    newScope.addName(name);\n+  }\n+\n+  private void recordPrototypeSet(Node classNode, String propertyName, Node n) {\n+    JsName prototypeName =\n+        getName(NodeUtil.getBestLValueName(classNode) + \".prototype\", true);\n+    if (prototypeName == null) {\n+      return;\n+    }\n+    StringBuilder qName = new StringBuilder(prototypeName.getFullName());\n+    qName.append('.').append(propertyName);\n+\n+    JsName jsName = getName(qName.toString(), true);\n+    recordSet(jsName, n);\n+  }\n+\n+  private void registerReference(NodeTraversal t, String name) {\n+    if (t.getScope().getVar(name) != null) {\n+      return;\n+    }\n+\n+    JsName jsName = getName(name, true);\n+    if (!jsName.isObfuscatable() || (jsName.getStaticRef() != null)) {\n+      return;\n+    }\n+    refNodes.add(new BadAffectingScopeNode(jsName));\n+  }\n+}\n+\n     /**\n      * Records the assignment of a value to a global name.\n      *",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}