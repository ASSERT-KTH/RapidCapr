{
    "patch": "          ) &&\n          NodeUtil.isGet(n.getFirstChild())) {\n\n        Node getprop = n.getFirstChild();\n        Node obj = getprop.getFirstChild();\n        Node prop = getprop.getLastChild();\n        if (obj.getType() == Token.NAME && obj.getString().equals(\"Object\")\n            && prop.getType() == Token.STRING && prop.getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..75db4b59 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,20 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) &&\n+          NodeUtil.isGet(n.getFirstChild())) {\n+\n+        Node getprop = n.getFirstChild();\n+        Node obj = getprop.getFirstChild();\n+        Node prop = getprop.getLastChild();\n+        if (obj.getType() == Token.NAME && obj.getString().equals(\"Object\")\n+            && prop.getType() == Token.STRING && prop.getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}