{
    "patch": "          ) && assign.getNext() != null\n          && assign.getNext().getType() == Token.EXPR_VOID) {\n\n        Node call = assign.getNext().getFirstChild();\n        if (call.getType() == Token.CALL) {\n          Node target = call.getFirstChild();\n          if (target.getType() == Token.GETPROP) {\n            Node obj = target.getFirstChild();\n            Node prop = target.getLastChild();\n            if (isPrototype(obj) && prop.getString().equals(\"hasOwnProperty\")) {\n              return true;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..d74dd502 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,25 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) && assign.getNext() != null\n+          && assign.getNext().getType() == Token.EXPR_VOID) {\n+\n+        Node call = assign.getNext().getFirstChild();\n+        if (call.getType() == Token.CALL) {\n+          Node target = call.getFirstChild();\n+          if (target.getType() == Token.GETPROP) {\n+            Node obj = target.getFirstChild();\n+            Node prop = target.getLastChild();\n+            if (isPrototype(obj) && prop.getString().equals(\"hasOwnProperty\")) {\n+              return true;\n+            }\n+          }\n+        }\n+      }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}