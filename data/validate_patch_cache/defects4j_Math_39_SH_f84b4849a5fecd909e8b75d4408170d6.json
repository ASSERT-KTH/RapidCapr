{
    "patch": "if (stepSize >= Math.abs(t - stepStart)) {\n    // take one step to reach the final time\n    hNew = t - stepStart;\n} else {\n    // try to increase step size\n    final double factor = \n        FastMath.min(maxGrowth, \n                     FastMath.max(minReduction,\n                                   safety * FastMath.pow(error, exp)));\n    hNew = filterStep(stepSize * factor, forward, false);\n\n    final double nextStepStart = stepStart + hNew;\n    final boolean nextIsLast = forward ? (nextStepStart >= t) : (nextStepStart <= t);\n    if (nextIsLast) {\n        // next step would overstep end time\n        hNew = t - stepStart;\n    } else {\n        // check if the new step size reaches the end time\n        final double nextStepEnd = nextStepStart + hNew;\n        final boolean nextEndsAtT = forward ? (nextStepEnd >= t) : (nextStepEnd <= t);\n        if (nextEndsAtT) {\n            hNew = t - stepStart;\n        }\n    }\n}\n\n// check if the step size is less than the minimum step size\nif (Math.abs(hNew) < minStep) {\n    throw new NumberIsTooSmallException(hNew, minStep, false);\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..961ecb7db 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,37 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+if (stepSize >= Math.abs(t - stepStart)) {\n+    // take one step to reach the final time\n+    hNew = t - stepStart;\n+} else {\n+    // try to increase step size\n+    final double factor = \n+        FastMath.min(maxGrowth, \n+                     FastMath.max(minReduction,\n+                                   safety * FastMath.pow(error, exp)));\n+    hNew = filterStep(stepSize * factor, forward, false);\n+\n+    final double nextStepStart = stepStart + hNew;\n+    final boolean nextIsLast = forward ? (nextStepStart >= t) : (nextStepStart <= t);\n+    if (nextIsLast) {\n+        // next step would overstep end time\n+        hNew = t - stepStart;\n+    } else {\n+        // check if the new step size reaches the end time\n+        final double nextStepEnd = nextStepStart + hNew;\n+        final boolean nextEndsAtT = forward ? (nextStepEnd >= t) : (nextStepEnd <= t);\n+        if (nextEndsAtT) {\n+            hNew = t - stepStart;\n+        }\n+    }\n+}\n+\n+// check if the step size is less than the minimum step size\n+if (Math.abs(hNew) < minStep) {\n+    throw new NumberIsTooSmallException(hNew, minStep, false);\n+}\n+\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: minStep has private access in AdaptiveStepsizeIntegrator",
    "test_result": "ERROR"
}