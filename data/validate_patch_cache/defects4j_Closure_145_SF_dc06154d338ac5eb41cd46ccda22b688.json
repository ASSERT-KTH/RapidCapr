{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    // Check for labeled statements with a single BLOCK child\n    if (NodeUtil.isLabel(n) && n.hasChildren() && n.getFirstChild().getType() == Token.BLOCK\n          && n.getFirstChild().hasOneChild()) {\n      n = n.getFirstChild();\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..ec697473 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,13 +705,13 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    // Check for labeled statements with a single BLOCK child\n+    if (NodeUtil.isLabel(n) && n.hasChildren() && n.getFirstChild().getType() == Token.BLOCK\n+          && n.getFirstChild().hasOneChild()) {\n+      n = n.getFirstChild();\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}