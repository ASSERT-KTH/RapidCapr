{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent)) {\n        if (NodeUtil.isPropertyTestOfLValue(parent, getParent())) {\n          // Don't traverse the function if it's being set as the value\n          // of an object literal property that has a non-trivial getter.\n          Node rValue = NodeUtil.getRValueOfLValue(parent);\n          if (rValue == n || !NodeUtil.mayHaveSideEffects(rValue)) {\n            return false;\n          }\n        } else {\n          // Don't traverse the function if it's being assigned to a named variable or property,\n          // or if it's inside of a try-finally block that is part of an object literal.\n          Node lValue = NodeUtil.getBestLValueRepresentation(parent.getFirstChild());\n          Node grandparent = getParent().getParent();\n          if (NodeUtil.isAnyForIn(parent, grandparent) ||\n              NodeUtil.isObjectLitKey(grandparent) ||\n              NodeUtil.isObjectDefinePropertiesDefinition(grandparent) ||\n              NodeUtil.isGoogDefineClassNode(grandparent) ||\n              NodeUtil.isGoogModuleCall(grandparent)) {\n            // No problem.\n          } else if (NodeUtil.isQualifiedName(lValue)) {\n            // If the LHS of the assignment is a property access on a qualified name, then we\n            // don't know whether the property already exists or not, so we can't be certain\n            // whether the function is being lent or not. Assume the worst.\n            return false;\n          } else {\n            Node rhs = NodeUtil.getRValueOfLValue(parent);\n            if (!NodeUtil.doesNodeReferenceOwnDeclaredVariables(rhs, t.getScope())) {\n              return false;\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2966e550 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,39 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        if (NodeUtil.isPropertyTestOfLValue(parent, getParent())) {\n+          // Don't traverse the function if it's being set as the value\n+          // of an object literal property that has a non-trivial getter.\n+          Node rValue = NodeUtil.getRValueOfLValue(parent);\n+          if (rValue == n || !NodeUtil.mayHaveSideEffects(rValue)) {\n+            return false;\n+          }\n+        } else {\n+          // Don't traverse the function if it's being assigned to a named variable or property,\n+          // or if it's inside of a try-finally block that is part of an object literal.\n+          Node lValue = NodeUtil.getBestLValueRepresentation(parent.getFirstChild());\n+          Node grandparent = getParent().getParent();\n+          if (NodeUtil.isAnyForIn(parent, grandparent) ||\n+              NodeUtil.isObjectLitKey(grandparent) ||\n+              NodeUtil.isObjectDefinePropertiesDefinition(grandparent) ||\n+              NodeUtil.isGoogDefineClassNode(grandparent) ||\n+              NodeUtil.isGoogModuleCall(grandparent)) {\n+            // No problem.\n+          } else if (NodeUtil.isQualifiedName(lValue)) {\n+            // If the LHS of the assignment is a property access on a qualified name, then we\n+            // don't know whether the property already exists or not, so we can't be certain\n+            // whether the function is being lent or not. Assume the worst.\n+            return false;\n+          } else {\n+            Node rhs = NodeUtil.getRValueOfLValue(parent);\n+            if (!NodeUtil.doesNodeReferenceOwnDeclaredVariables(rhs, t.getScope())) {\n+              return false;\n+            }\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}