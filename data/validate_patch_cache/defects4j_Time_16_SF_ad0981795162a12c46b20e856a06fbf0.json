{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Use a new temporary object to hold the parsed fields\n    MutableDateTime tempDateTime = new MutableDateTime(instant.getMillis(), instant.getChronology());\n    int newPos = parser.parseInto(tempDateTime, text, position);\n\n    // Copy the date and time fields from the temporary object to the original object\n    instant.setMillis(tempDateTime.getMillis());\n    instant.setChronology(tempDateTime.getChronology());\n    instant.setZone(tempDateTime.getZone());\n    instant.year().set(tempDateTime.year().get());\n    instant.monthOfYear().set(tempDateTime.monthOfYear().get());\n    instant.dayOfMonth().set(tempDateTime.dayOfMonth().get());\n    instant.hourOfDay().set(tempDateTime.hourOfDay().get());\n    instant.minuteOfHour().set(tempDateTime.minuteOfHour().get());\n    instant.secondOfMinute().set(tempDateTime.secondOfMinute().get());\n    instant.millisOfSecond().set(tempDateTime.millisOfSecond().get());\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..b5e1a8b2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,30 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n-    }\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    // Use a new temporary object to hold the parsed fields\n+    MutableDateTime tempDateTime = new MutableDateTime(instant.getMillis(), instant.getChronology());\n+    int newPos = parser.parseInto(tempDateTime, text, position);\n+\n+    // Copy the date and time fields from the temporary object to the original object\n+    instant.setMillis(tempDateTime.getMillis());\n+    instant.setChronology(tempDateTime.getChronology());\n+    instant.setZone(tempDateTime.getZone());\n+    instant.year().set(tempDateTime.year().get());\n+    instant.monthOfYear().set(tempDateTime.monthOfYear().get());\n+    instant.dayOfMonth().set(tempDateTime.dayOfMonth().get());\n+    instant.hourOfDay().set(tempDateTime.hourOfDay().get());\n+    instant.minuteOfHour().set(tempDateTime.minuteOfHour().get());\n+    instant.secondOfMinute().set(tempDateTime.secondOfMinute().get());\n+    instant.millisOfSecond().set(tempDateTime.millisOfSecond().get());\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: method parseInto in interface DateTimeParser cannot be applied to given types;",
    "test_result": "ERROR"
}