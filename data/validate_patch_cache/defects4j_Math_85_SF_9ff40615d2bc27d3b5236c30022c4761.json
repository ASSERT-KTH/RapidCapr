{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial,\n            double lowerBound, double upperBound, int maximumIterations)\n            throws ConvergenceException, FunctionEvaluationException {\n\n        if (function == null) {\n            throw new IllegalArgumentException(\"Function must not be null\");\n        }\n        if (maximumIterations <= 0) {\n            throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw new IllegalArgumentException(\"Invalid bracketing parameters: \" +\n                                         \"lower bound=\" + lowerBound +\n                                         \", initial=\" + initial +\n                                         \", upper bound=\" + upperBound);\n        }\n\n        double a = initial;\n        double b = initial;\n        double fa = function.value(a);\n        double fb;\n        int numIterations = 1;\n\n        // find first \"a\" while bracketing a root\n        while (a > lowerBound && a < upperBound && numIterations < maximumIterations) {\n            double xa = a - 1.0;\n            double xb = a + 1.0;\n            double fa1 = function.value(xa);\n            double fa2 = function.value(xb);\n            if (fa * fa1 > 0.0 && fa * fa2 > 0.0) {\n                // brackets not yet found, continue to search.\n                if (fa1 < fa2) {\n                    a = xa;\n                    fa = fa1;\n                } else {\n                    a = xb;\n                    fa = fa2;\n                }\n                numIterations++;\n            } else {\n                break;\n            }\n        }\n        \n        // find first \"b\" while bracketing a root\n        numIterations = 1;\n        while (b > lowerBound && b < upperBound && numIterations < maximumIterations) {\n            double xa = b - 1.0;\n            double xb = b + 1.0;\n            double fb1 = function.value(xa);\n            double fb2 = function.value(xb);\n            if (fa * fb1 > 0.0 && fa * fb2 > 0.0) {\n                // brackets not yet found, continue to search.\n                if (fb1 < fb2) {\n                    b = xa;\n                } else {\n                    b = xb;\n                }\n                numIterations++;\n            } else {\n                break;\n            }\n        }\n\n        fa = function.value(a);\n        fb = function.value(b);\n\n        // verify bracket is valid, and we're done.\n        if (fa * fb > 0.0 ) {\n            throw new ConvergenceException(\"maximum iterations ({0}) exceeded\", maximumIterations);\n        }\n\n        if (fa > fb) {\n            double tmp = a;\n            a = b;\n            b = tmp;\n            tmp = fa;\n            fa = fb;\n            fb = tmp;\n        }\n\n        return new double[]{a, b};\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..fa716c2a6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,48 +162,87 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+public static double[] bracket(UnivariateRealFunction function, double initial,\n+            double lowerBound, double upperBound, int maximumIterations)\n+            throws ConvergenceException, FunctionEvaluationException {\n+\n         if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+            throw new IllegalArgumentException(\"Function must not be null\");\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        if (maximumIterations <= 0) {\n+            throw new IllegalArgumentException(\"Bad value for maximum iterations number: \" + maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+            throw new IllegalArgumentException(\"Invalid bracketing parameters: \" +\n+                                         \"lower bound=\" + lowerBound +\n+                                         \", initial=\" + initial +\n+                                         \", upper bound=\" + upperBound);\n         }\n+\n         double a = initial;\n         double b = initial;\n-        double fa;\n+        double fa = function.value(a);\n         double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+        int numIterations = 1;\n+\n+        // find first \"a\" while bracketing a root\n+        while (a > lowerBound && a < upperBound && numIterations < maximumIterations) {\n+            double xa = a - 1.0;\n+            double xb = a + 1.0;\n+            double fa1 = function.value(xa);\n+            double fa2 = function.value(xb);\n+            if (fa * fa1 > 0.0 && fa * fa2 > 0.0) {\n+                // brackets not yet found, continue to search.\n+                if (fa1 < fa2) {\n+                    a = xa;\n+                    fa = fa1;\n+                } else {\n+                    a = xb;\n+                    fa = fa2;\n+                }\n+                numIterations++;\n+            } else {\n+                break;\n+            }\n         }\n         \n+        // find first \"b\" while bracketing a root\n+        numIterations = 1;\n+        while (b > lowerBound && b < upperBound && numIterations < maximumIterations) {\n+            double xa = b - 1.0;\n+            double xb = b + 1.0;\n+            double fb1 = function.value(xa);\n+            double fb2 = function.value(xb);\n+            if (fa * fb1 > 0.0 && fa * fb2 > 0.0) {\n+                // brackets not yet found, continue to search.\n+                if (fb1 < fb2) {\n+                    b = xa;\n+                } else {\n+                    b = xb;\n+                }\n+                numIterations++;\n+            } else {\n+                break;\n+            }\n+        }\n+\n+        fa = function.value(a);\n+        fb = function.value(b);\n+\n+        // verify bracket is valid, and we're done.\n+        if (fa * fb > 0.0 ) {\n+            throw new ConvergenceException(\"maximum iterations ({0}) exceeded\", maximumIterations);\n+        }\n+\n+        if (fa > fb) {\n+            double tmp = a;\n+            a = b;\n+            b = tmp;\n+            tmp = fa;\n+            fa = fb;\n+            fb = tmp;\n+        }\n+\n         return new double[]{a, b};\n     }\n ",
    "result_reason": "Test timed out after 300 seconds",
    "test_result": "ERROR"
}