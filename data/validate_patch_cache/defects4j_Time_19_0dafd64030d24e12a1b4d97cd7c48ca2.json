{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int[] offsets = getOffset(instantLocal);\n        final int initialOffset = offsets[0];\n        final int currentOffset = offsets[0];\n        final long nextTransition = nextTransition(instantLocal);\n        final long nextTransitionGap = nextTransition - millisPerHour;\n        final long previousTransitionGap = previousTransition(instantLocal) + millisPerHour;\n        final long previousTransition = previousTransition(previousTransitionGap);\n\n        if (currentOffset == getOffset(currentOffset, nextTransitionGap) && currentOffset == getOffset(currentOffset, previousTransitionGap)) {\n            return currentOffset; \n        }\n\n        if (nextTransition - instantLocal < previousTransition - instantLocal) {\n            return getOffset(currentOffset, nextTransitionGap);\n        } else {\n            return getOffset(currentOffset, previousTransitionGap);\n        }\n    }\n\n    private int getOffset(int oldOffset, long instant) {\n        final int[] offsets = getOffset(instant);\n        final int offset = offsets[0];\n        if (oldOffset > offset && oldOffset > offsets[1]) {\n            return oldOffset;\n        }\n\n        if (oldOffset < offset && oldOffset < offsets[2]) {\n            return oldOffset;\n        }\n\n        return offset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..98cbde44 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,37 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        final int[] offsets = getOffset(instantLocal);\n+        final int initialOffset = offsets[0];\n+        final int currentOffset = offsets[0];\n+        final long nextTransition = nextTransition(instantLocal);\n+        final long nextTransitionGap = nextTransition - millisPerHour;\n+        final long previousTransitionGap = previousTransition(instantLocal) + millisPerHour;\n+        final long previousTransition = previousTransition(previousTransitionGap);\n+\n+        if (currentOffset == getOffset(currentOffset, nextTransitionGap) && currentOffset == getOffset(currentOffset, previousTransitionGap)) {\n+            return currentOffset; \n         }\n-        return offsetAdjusted;\n+\n+        if (nextTransition - instantLocal < previousTransition - instantLocal) {\n+            return getOffset(currentOffset, nextTransitionGap);\n+        } else {\n+            return getOffset(currentOffset, previousTransitionGap);\n+        }\n+    }\n+\n+    private int getOffset(int oldOffset, long instant) {\n+        final int[] offsets = getOffset(instant);\n+        final int offset = offsets[0];\n+        if (oldOffset > offset && oldOffset > offsets[1]) {\n+            return oldOffset;\n+        }\n+\n+        if (oldOffset < offset && oldOffset < offsets[2]) {\n+            return oldOffset;\n+        }\n+\n+        return offset;\n     }\n \n     /**",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}