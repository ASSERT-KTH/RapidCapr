{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n              conditional);\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            if (lhs.hasChildren()) {\n              lhs = lhs.getLastChild();\n            }\n          }\n          if (lhs.hasChildren()) {\n            addToSetIfLocal(lhs, kill);\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(rhs, gen, kill, conditional);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c, kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional && lhs.hasChildren()) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n) && lhs.hasChildren()) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..1c23f172 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,9 +175,8 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n+private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n-\n     switch (n.getType()) {\n       case Token.SCRIPT:\n       case Token.BLOCK:\n@@ -201,10 +200,14 @@ class LiveVariablesAnalysis extends\n           Node rhs = lhs.getNext();\n           if (NodeUtil.isVar(lhs)) {\n             // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+            if (lhs.hasChildren()) {\n+              lhs = lhs.getLastChild();\n+            }\n           }\n+          if (lhs.hasChildren()) {\n             addToSetIfLocal(lhs, kill);\n             addToSetIfLocal(lhs, gen);\n+          }\n           computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n@@ -245,10 +248,10 @@ class LiveVariablesAnalysis extends\n       default:\n         if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n           Node lhs = n.getFirstChild();\n-          if (!conditional) {\n+          if (!conditional && lhs.hasChildren()) {\n             addToSetIfLocal(lhs, kill);\n           }\n-          if (!NodeUtil.isAssign(n)) {\n+          if (!NodeUtil.isAssign(n) && lhs.hasChildren()) {\n             // assignments such as a += 1 reads a.\n             addToSetIfLocal(lhs, gen);\n           }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}