{
    "patch": "    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n        if (p1 == null) {\n            return (p2 == null);\n        }\n        if (p2 == null) {\n            return false;\n        }\n        if (p1.getWindingRule() != p2.getWindingRule()) {\n            return false;\n        }\n        PathIterator iterator = p1.getPathIterator(null);\n        double[] d = new double[6];\n        boolean done = iterator.isDone();\n        while (!done) {\n            PathIterator iterator2 = p2.getPathIterator(null);\n            int seg1 = iterator.currentSegment(d);\n            int seg2 = iterator2.currentSegment(d);\n            if (seg1 != seg2) {\n                return false;\n            }\n            if (!Arrays.equals(d, d)) {\n                return false;\n            }\n            iterator.next();\n            done = iterator.isDone();\n        }\n        return true;\n    }",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..6a7cadb 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,34 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+    public static boolean equal(GeneralPath p1, GeneralPath p2) {\n+        if (p1 == null) {\n+            return (p2 == null);\n+        }\n+        if (p2 == null) {\n+            return false;\n+        }\n+        if (p1.getWindingRule() != p2.getWindingRule()) {\n+            return false;\n+        }\n+        PathIterator iterator = p1.getPathIterator(null);\n+        double[] d = new double[6];\n+        boolean done = iterator.isDone();\n+        while (!done) {\n+            PathIterator iterator2 = p2.getPathIterator(null);\n+            int seg1 = iterator.currentSegment(d);\n+            int seg2 = iterator2.currentSegment(d);\n+            if (seg1 != seg2) {\n+                return false;\n+            }\n+            if (!Arrays.equals(d, d)) {\n+                return false;\n+            }\n+            iterator.next();\n+            done = iterator.isDone();\n+        }\n+        return true;\n+    }\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}