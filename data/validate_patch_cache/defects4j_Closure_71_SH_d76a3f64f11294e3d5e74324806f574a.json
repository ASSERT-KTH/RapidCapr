{
    "patch": "      boolean isMethod =\n          /* is a \"...prototype.method\" */\n          NodeUtil.isObjectLitKey(getprop)\n          && parentFunctionType != null;\n      boolean isOverride = false;\n      if (isMethod) {\n        StaticSlot slot = objectType.getSlot(propertyName);\n        boolean propertyDefinedOnClass =\n            slot != null\n            && !slot.isPropertyPrivate();\n        isOverride = parentFunctionType.isConstructor()\n                     && propertyDefinedOnClass;\n      } else if (parent.isAssign()) {\n        isOverride = t.inGlobalScope()\n                     && NodeUtil.isObjectLiteralKey(parent.getFirstChild(),\n                                                    getprop);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..82919a4d 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,23 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isMethod =\n+          /* is a \"...prototype.method\" */\n+          NodeUtil.isObjectLitKey(getprop)\n+          && parentFunctionType != null;\n+      boolean isOverride = false;\n+      if (isMethod) {\n+        StaticSlot slot = objectType.getSlot(propertyName);\n+        boolean propertyDefinedOnClass =\n+            slot != null\n+            && !slot.isPropertyPrivate();\n+        isOverride = parentFunctionType.isConstructor()\n+                     && propertyDefinedOnClass;\n+      } else if (parent.isAssign()) {\n+        isOverride = t.inGlobalScope()\n+                     && NodeUtil.isObjectLiteralKey(parent.getFirstChild(),\n+                                                    getprop);\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}