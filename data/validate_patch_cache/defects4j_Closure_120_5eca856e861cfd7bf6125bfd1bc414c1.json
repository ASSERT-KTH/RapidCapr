{
    "patch": "      BlockDeclaration decl = getDeclaration().getNode();\n      if (decl != null) {\n          Graph<Node, Branch> controlFlowGraph = decl.getControlFlowGraph();\n          Node entryNode = controlFlowGraph.getNode(decl.getEntry().getValue());\n          List<BasicBlock> preds = controlFlowGraph.getPredecessors(entryNode);\n          if (preds.size() == 1) {\n            return preds.get(0).getTerminatingInstruction();\n          }\n      }\n      return null;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..dafbb5c6 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,16 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      BlockDeclaration decl = getDeclaration().getNode();\n+      if (decl != null) {\n+          Graph<Node, Branch> controlFlowGraph = decl.getControlFlowGraph();\n+          Node entryNode = controlFlowGraph.getNode(decl.getEntry().getValue());\n+          List<BasicBlock> preds = controlFlowGraph.getPredecessors(entryNode);\n+          if (preds.size() == 1) {\n+            return preds.get(0).getTerminatingInstruction();\n+          }\n+      }\n+      return null;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}