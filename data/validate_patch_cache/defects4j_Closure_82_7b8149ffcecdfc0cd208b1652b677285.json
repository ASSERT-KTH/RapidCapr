{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutgoingEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n      if (edge.getValue() == Branch.ON_EX || edge.getValue() == Branch.EXC_RET) {\n        return true;\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..0010efa0 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -158,10 +158,15 @@ public abstract class JSType implements Serializable {\n   public boolean isNoObjectType() {\n     return false;\n   }\n-\n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n-  }\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutgoingEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+      if (edge.getValue() == Branch.ON_EX || edge.getValue() == Branch.EXC_RET) {\n+        return true;\n+      }\n+    }\n+    return false;\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}