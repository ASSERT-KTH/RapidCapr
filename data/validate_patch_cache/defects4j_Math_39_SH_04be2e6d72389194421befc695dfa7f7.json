{
    "patch": "if (stepSize >= Math.abs(t - stepStart)) {\n    hNew = t - stepStart;\n} else {\n    // next stepsize\n    final double factor = \n        FastMath.min(maxGrowth, \n                     FastMath.max(minReduction,\n                                   safety * FastMath.pow(error, exp)));\n    hNew = filterStep(stepSize * factor, forward, false);\n    final double nextStepStart = stepStart + hNew;\n    final boolean nextIsLast = forward ? (nextStepStart >= t) : (nextStepStart <= t);\n    if (nextIsLast) {\n        hNew = t - stepStart;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..00765b4a9 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,21 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+if (stepSize >= Math.abs(t - stepStart)) {\n+    hNew = t - stepStart;\n+} else {\n+    // next stepsize\n+    final double factor = \n+        FastMath.min(maxGrowth, \n+                     FastMath.max(minReduction,\n+                                   safety * FastMath.pow(error, exp)));\n+    hNew = filterStep(stepSize * factor, forward, false);\n+    final double nextStepStart = stepStart + hNew;\n+    final boolean nextIsLast = forward ? (nextStepStart >= t) : (nextStepStart <= t);\n+    if (nextIsLast) {\n+        hNew = t - stepStart;\n+    }\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "org.apache.commons.math.exception.NumberIsTooSmallException: minimal step size (9.65E-01) reached, integration needs 1.25E00",
    "test_result": "FAIL"
}