{
    "patch": "void addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x == 0) {\n      // Check for negative zero\n      if (negativeZero) {\n        add(\"-0.0\");\n        return;\n      } else {\n        add(\"0.0\");\n        return;\n      }\n    }\n    if (x < 0) {\n      add(\"-\");\n      x = -x;\n    }\n    // Append the number to the output buffer\n    String numberString = String.valueOf(x);\n    if (numberString.contains(\"E\")) {\n      add(numberString);\n      return;\n    }\n    int decimalIndex = numberString.indexOf('.');\n    if (decimalIndex == -1) {\n      add(numberString);\n      return;\n    }\n    // Count the number of significant digits\n    int significantDigits = 0;\n    for (int i = 0; i < numberString.length(); i++) {\n      char c = numberString.charAt(i);\n      if (c == '.' || c == '-') {\n        continue;\n      }\n      if (c == '0' && significantDigits == 0) {\n        continue;\n      }\n      if (c == 'e' || c == 'E') {\n        break;\n      }\n      significantDigits++;\n    }\n    // Round the number\n    BigDecimal bd = new BigDecimal(x).setScale(sigFigs - significantDigits, RoundingMode.HALF_UP);\n    add(bd.toString());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..c6664a66 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,58 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+void addNumber(double x) {\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    if (x == 0) {\n+      // Check for negative zero\n+      if (negativeZero) {\n+        add(\"-0.0\");\n+        return;\n+      } else {\n+        add(\"0.0\");\n+        return;\n+      }\n+    }\n+    if (x < 0) {\n+      add(\"-\");\n+      x = -x;\n+    }\n+    // Append the number to the output buffer\n+    String numberString = String.valueOf(x);\n+    if (numberString.contains(\"E\")) {\n+      add(numberString);\n+      return;\n+    }\n+    int decimalIndex = numberString.indexOf('.');\n+    if (decimalIndex == -1) {\n+      add(numberString);\n+      return;\n+    }\n+    // Count the number of significant digits\n+    int significantDigits = 0;\n+    for (int i = 0; i < numberString.length(); i++) {\n+      char c = numberString.charAt(i);\n+      if (c == '.' || c == '-') {\n+        continue;\n+      }\n+      if (c == '0' && significantDigits == 0) {\n+        continue;\n+      }\n+      if (c == 'e' || c == 'E') {\n+        break;\n+      }\n+      significantDigits++;\n+    }\n+    // Round the number\n+    BigDecimal bd = new BigDecimal(x).setScale(sigFigs - significantDigits, RoundingMode.HALF_UP);\n+    add(bd.toString());\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}