{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualfied names.\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n    } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n    }\n\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope;\n    String variableName = n.getQualifiedName();\n    Preconditions.checkArgument(!variableName.isEmpty());\n\n    // don't try to declare in the global scope if there's already a symbol there with this name.\n    if (scopeToDeclareIn.isGlobal()) {\n        Var var = scopeToDeclareIn.getOwnSlot(variableName);\n        if (var != null) {\n            validator.expectUndeclaredVariable(\n                sourceName, n, parent, var, variableName, type);\n            return;\n        }\n    }\n\n    CompilerInput input = compiler.getInput(sourceName);\n\n    // declared in closest scope?\n    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n        Var oldVar = scopeToDeclareIn.getVar(variableName);\n        if (!oldVar.isExtern()) {\n            validator.expectUndeclaredVariable(\n                sourceName, n, parent, oldVar, variableName, type);\n            return;\n        }\n        // If it's an extern, it's going to be deleted anyway.\n        // So, keep going and redeclare it.\n    }\n\n    // Declare the variable on the right scope, along with its parent object.\n    ObjectType objectType = null;\n    if (n.getType() == Token.GETPROP) {\n        n = getPropAccessTypeReference(n);\n        if (parent.getType() == Token.ASSIGN) {\n            objectType = envGetTypeForProperty(n.getFirstChild(), false);\n        } else if (type != null) {\n            if (type.isConstructor() || (type.isInterface() && !type.isFinalizable())) {\n                objectType = JSType.toObjectType(type);\n                if (type.isConstructor()) {\n                    FunctionType ft = (FunctionType) type;\n                    objectType =\n                        normalizeConstructorProperty(objectType, ft.getPrototype(), n);\n                }\n            }\n        }\n        if (objectType != null && shouldDeclareOnGlobalThis && scopeToDeclareIn.isGlobal()) {\n            ObjectType globalThis =\n                typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n            boolean isExtern = input.isExtern();\n            if (inferred) {\n                globalThis.defineInferredProperty(variableName,\n                    type == null ?\n                        getNativeType(JSTypeNative.NO_TYPE) :\n                        type,\n                    isExtern);\n            } else {\n                globalThis.defineDeclaredProperty(variableName, type, isExtern);\n            }\n        }\n    }\n\n    if (!inferred) {\n        setDeferredType(n, type);\n    }\n\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n    if (objectType != null) {\n        objectType.defineDeclaredProperty(variableName, type, input.isExtern());\n    }\n\n    // If we're in the global scope, also declare var.prototype in the scope chain.\n    if (objectType != null && scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n        FunctionType fnType = (FunctionType) type;\n        if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(OBJECT_TYPE)));\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..91c860f1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,12 +869,12 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n+    // Only allow declarations of NAMEs and qualfied names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n@@ -883,55 +883,89 @@ final class TypedScopeCreator implements ScopeCreator {\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n             (parent.getType() == Token.VAR ||\n              parent.getType() == Token.FUNCTION);\n-      } else {\n+    } else {\n         Preconditions.checkArgument(\n             n.getType() == Token.GETPROP &&\n             (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n+    }\n \n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    Scope scopeToDeclareIn = scope;\n+    String variableName = n.getQualifiedName();\n+    Preconditions.checkArgument(!variableName.isEmpty());\n+\n+    // don't try to declare in the global scope if there's already a symbol there with this name.\n+    if (scopeToDeclareIn.isGlobal()) {\n+        Var var = scopeToDeclareIn.getOwnSlot(variableName);\n+        if (var != null) {\n+            validator.expectUndeclaredVariable(\n+                sourceName, n, parent, var, variableName, type);\n+            return;\n+        }\n+    }\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+    CompilerInput input = compiler.getInput(sourceName);\n \n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    // declared in closest scope?\n+    if (scopeToDeclareIn.isDeclared(variableName, false)) {\n         Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n+        if (!oldVar.isExtern()) {\n+            validator.expectUndeclaredVariable(\n+                sourceName, n, parent, oldVar, variableName, type);\n+            return;\n         }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+        // If it's an extern, it's going to be deleted anyway.\n+        // So, keep going and redeclare it.\n+    }\n+\n+    // Declare the variable on the right scope, along with its parent object.\n+    ObjectType objectType = null;\n+    if (n.getType() == Token.GETPROP) {\n+        n = getPropAccessTypeReference(n);\n+        if (parent.getType() == Token.ASSIGN) {\n+            objectType = envGetTypeForProperty(n.getFirstChild(), false);\n+        } else if (type != null) {\n+            if (type.isConstructor() || (type.isInterface() && !type.isFinalizable())) {\n+                objectType = JSType.toObjectType(type);\n+                if (type.isConstructor()) {\n+                    FunctionType ft = (FunctionType) type;\n+                    objectType =\n+                        normalizeConstructorProperty(objectType, ft.getPrototype(), n);\n+                }\n+            }\n         }\n+        if (objectType != null && shouldDeclareOnGlobalThis && scopeToDeclareIn.isGlobal()) {\n+            ObjectType globalThis =\n+                typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+            boolean isExtern = input.isExtern();\n+            if (inferred) {\n+                globalThis.defineInferredProperty(variableName,\n+                    type == null ?\n+                        getNativeType(JSTypeNative.NO_TYPE) :\n+                        type,\n+                    isExtern);\n+            } else {\n+                globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+            }\n+        }\n+    }\n+\n+    if (!inferred) {\n+        setDeferredType(n, type);\n+    }\n+\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+    if (objectType != null) {\n+        objectType.defineDeclaredProperty(variableName, type, input.isExtern());\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n+    // If we're in the global scope, also declare var.prototype in the scope chain.\n+    if (objectType != null && scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        FunctionType fnType = (FunctionType) type;\n+        if (fnType.isConstructor() || fnType.isInterface()) {\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                 fnType.getPrototype(), compiler.getInput(sourceName),\n@@ -939,10 +973,9 @@ final class TypedScopeCreator implements ScopeCreator {\n                 superClassCtor == null ||\n                 superClassCtor.getInstanceType().equals(\n                     getNativeType(OBJECT_TYPE)));\n-          }\n         }\n-      }\n     }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}