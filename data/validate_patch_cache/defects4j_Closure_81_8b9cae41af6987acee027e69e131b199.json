{
    "patch": "    Node node = newNode(Token.FUNCTION);\n    Boolean isUnnamedFunction = false;\n    if (functionNode.getFunctionName() == null) {\n      node.addChildToBack(new Node(Token.EMPTY));\n      isUnnamedFunction = true;\n    } else {\n      node.addChildToBack(transform(functionNode.getFunctionName()));\n    }\n\n    Node lp = newNode(Token.LP);\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n\n    Node rp = newNode(Token.RP);\n    lp.addChildToBack(rp);\n\n    // On the same line as the start of the function.\n    lp.setLineno(functionNode.getLineno());\n    int lpCol = functionNode.getFunctionName() == null\n        ? functionNode.getAbsolutePosition() + 9\n        : functionNode.getFunctionName().getAbsolutePosition() +\n          functionNode.getFunctionName().getLength() + 1;\n    lp.setCharno(position2charno(lpCol));\n    rp.setLineno(functionNode.getLineno());\n    rp.setCharno(position2charno(lpCol + 1));\n\n    node.addChildToBack(lp);\n    node.addChildToBack(transform(functionNode.getBody()));\n    return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..fd503755 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,36 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    Node node = newNode(Token.FUNCTION);\n+    Boolean isUnnamedFunction = false;\n+    if (functionNode.getFunctionName() == null) {\n+      node.addChildToBack(new Node(Token.EMPTY));\n+      isUnnamedFunction = true;\n+    } else {\n+      node.addChildToBack(transform(functionNode.getFunctionName()));\n+    }\n+\n+    Node lp = newNode(Token.LP);\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n+    }\n+\n+    Node rp = newNode(Token.RP);\n+    lp.addChildToBack(rp);\n+\n+    // On the same line as the start of the function.\n+    lp.setLineno(functionNode.getLineno());\n+    int lpCol = functionNode.getFunctionName() == null\n+        ? functionNode.getAbsolutePosition() + 9\n+        : functionNode.getFunctionName().getAbsolutePosition() +\n+          functionNode.getFunctionName().getLength() + 1;\n+    lp.setCharno(position2charno(lpCol));\n+    rp.setLineno(functionNode.getLineno());\n+    rp.setCharno(position2charno(lpCol + 1));\n+\n+    node.addChildToBack(lp);\n+    node.addChildToBack(transform(functionNode.getBody()));\n+    return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}