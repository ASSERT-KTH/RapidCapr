{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> arguments = call.removeChildren();\n    arguments.remove(0); // remove the function name\n    if (functionType.hasOptionalFormals()) {\n      adjustArgumentListForOptionalFormals(arguments, functionType, call);\n    }\n    if (functionType.hasRestFormals()) {\n      adjustArgumentListForRestFormals(arguments, functionType, call);\n    }\n    for (int i = 0; i < arguments.size(); i++) {\n      Node argument = arguments.get(i);\n      if (i < functionType.getParametersCount()) {\n        Node parameter = functionType.getParameterNode(i);\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, i + 1);\n      } else {\n        Node lastParameter = functionType.getParameterNode(functionType.getParametersCount() - 1);\n        JSType restType = functionType.getRestFormalsType();\n        validateRestArguments(t, argument, lastParameter, restType, call, i + 1);\n      }\n    }\n    validateArgumentCount(t, call, functionType, arguments);\n    call.addChildrenToFront(arguments);\n  }\n\n  private void adjustArgumentListForOptionalFormals(List<Node> arguments, FunctionType functionType,\n      Node callNode) {\n    int expectedParams = functionType.getParametersCount();\n    int optionalCount = functionType.getOptionalFormalsCount();\n    int numArgs = arguments.size();\n    int numMissing = expectedParams - numArgs;\n    if (numMissing > 0 && numMissing <= optionalCount) {\n      for (int i = 0; i < numMissing; i++) {\n        JSType optionalType = functionType.getOptionalFormalParameterType(expectedParams - numMissing + i);\n        arguments.add(createDefaultExpression(optionalType));\n      }\n    } else if (numMissing > optionalCount) {\n      report(t, callNode, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(callNode.getFirstChild(), false),\n          \"has only \" + numArgs + \" argument(s) but \" + expectedParams + \" are required\",\n          null, null);\n    }\n  }\n\n  private Node createDefaultExpression(JSType optionalType) {\n    Node defaultValue = null;\n    if (optionalType != null) {\n      Object defaultValueObject = optionalType.getDefaultValue();\n      String defaultValueString = (defaultValueObject == null) ? \"null\"\n          : defaultValueObject.toString();\n      defaultValue = Node.newString(defaultValueString);\n    } else {\n      defaultValue = new Node(Token.NULL);\n    }\n    return defaultValue;\n  }\n\n  private void adjustArgumentListForRestFormals(List<Node> arguments, FunctionType functionType,\n      Node callNode) {\n    int paramsCount = functionType.getParametersCount();\n    if (paramsCount < arguments.size()) {\n      List<Node> restArguments = arguments.subList(paramsCount, arguments.size());\n      JSType restType = functionType.getRestFormalsType();\n      adjustRestArguments(restArguments, restType, callNode);\n    }\n  }\n\n  private void adjustRestArguments(List<Node> arguments, JSType restType, Node callNode) {\n    if (arguments.isEmpty()) {\n      return;\n    }\n    if (restType != null) {\n      for (int i = 0; i < arguments.size(); ++i) {\n        Node arg = arguments.get(i);\n        validator.expectArgumentMatchesParameter(t, arg,\n          getJSType(arg), restType, callNode, i + 1);\n      }\n    } else {\n      Node firstArg = arguments.get(0);\n      report(t, firstArg, INVALID_REST_PARAMETER_TYPE, \"Rest parameter must be an array\",\n              validator.getReadableJSTypeName(firstArg, false), null, null);\n    }\n  }\n\n  private void validateRestArguments(NodeTraversal t, Node restNode, Node lastParameter, JSType restType,\n      Node callNode, int argIndex) {\n    if (restNode.isSpread()) {\n      validator.expectArgumentMatchesParameter(t, restNode.getOnlyChild(),\n          getJSType(restNode.getOnlyChild()), restType, callNode, argIndex);\n    } else {\n      checkNotNull(lastParameter);\n      String restExpr = \"(...)\";\n      String expectedTypes = TypesRegistry.get().getParameterTypeSummary(lastParameter);\n      report(t, restNode, MISTYPED_REST_PARAMETER, \"Only a spread argument can appear after \" + restExpr,\n          \"(\" + expectedTypes + \")\", null, null);\n    }\n  }\n\n  private void validateArgumentCount(NodeTraversal t, Node call, FunctionType functionType,\n      List<Node> arguments) {\n    int argsCount = arguments.size();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    int expectedParams = functionType.getParametersCount();\n    int optionalCount = functionType.getOptionalFormalsCount();\n    boolean hasRestFormal = functionType.hasRestFormals();\n    boolean missingParam = argsCount < expectedParams - optionalCount;\n    boolean wrongNumArgs = !hasRestFormal && (argsCount > maxArgs || argsCount < minArgs);\n    boolean tooManyArgs = hasRestFormal && argsCount > expectedParams;\n    if (missingParam || tooManyArgs || wrongNumArgs) {\n      String fnName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n      if (missingParam) {\n        int missingParams = expectedParams - optionalCount - argsCount;\n        if (missingParams == 1) {\n          report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n              argsCount + \" argument(s) instead of \" + expectedParams, null, null);\n        } else {\n          report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n              argsCount + \" argument(s) instead of \" + expectedParams, null,\n              \" missing \" + missingParams + \" required argument(s)\");\n        }\n      } else if (tooManyArgs) {\n        report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n            argsCount + \" argument(s) instead of \" + expectedParams, null, null);\n      } else {\n        report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n            argsCount + \" argument(s)\", \"should not exceed \" + maxArgs + \" argument(s)\", null);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..480d0db0 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1398,34 +1398,133 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    */\n   private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+    List<Node> arguments = call.removeChildren();\n+    arguments.remove(0); // remove the function name\n+    if (functionType.hasOptionalFormals()) {\n+      adjustArgumentListForOptionalFormals(arguments, functionType, call);\n     }\n+    if (functionType.hasRestFormals()) {\n+      adjustArgumentListForRestFormals(arguments, functionType, call);\n+    }\n+    for (int i = 0; i < arguments.size(); i++) {\n+      Node argument = arguments.get(i);\n+      if (i < functionType.getParametersCount()) {\n+        Node parameter = functionType.getParameterNode(i);\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, i + 1);\n+      } else {\n+        Node lastParameter = functionType.getParameterNode(functionType.getParametersCount() - 1);\n+        JSType restType = functionType.getRestFormalsType();\n+        validateRestArguments(t, argument, lastParameter, restType, call, i + 1);\n+      }\n+    }\n+    validateArgumentCount(t, call, functionType, arguments);\n+    call.addChildrenToFront(arguments);\n+  }\n+\n+  private void adjustArgumentListForOptionalFormals(List<Node> arguments, FunctionType functionType,\n+      Node callNode) {\n+    int expectedParams = functionType.getParametersCount();\n+    int optionalCount = functionType.getOptionalFormalsCount();\n+    int numArgs = arguments.size();\n+    int numMissing = expectedParams - numArgs;\n+    if (numMissing > 0 && numMissing <= optionalCount) {\n+      for (int i = 0; i < numMissing; i++) {\n+        JSType optionalType = functionType.getOptionalFormalParameterType(expectedParams - numMissing + i);\n+        arguments.add(createDefaultExpression(optionalType));\n+      }\n+    } else if (numMissing > optionalCount) {\n+      report(t, callNode, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(callNode.getFirstChild(), false),\n+          \"has only \" + numArgs + \" argument(s) but \" + expectedParams + \" are required\",\n+          null, null);\n+    }\n+  }\n+\n+  private Node createDefaultExpression(JSType optionalType) {\n+    Node defaultValue = null;\n+    if (optionalType != null) {\n+      Object defaultValueObject = optionalType.getDefaultValue();\n+      String defaultValueString = (defaultValueObject == null) ? \"null\"\n+          : defaultValueObject.toString();\n+      defaultValue = Node.newString(defaultValueString);\n+    } else {\n+      defaultValue = new Node(Token.NULL);\n+    }\n+    return defaultValue;\n+  }\n+\n+  private void adjustArgumentListForRestFormals(List<Node> arguments, FunctionType functionType,\n+      Node callNode) {\n+    int paramsCount = functionType.getParametersCount();\n+    if (paramsCount < arguments.size()) {\n+      List<Node> restArguments = arguments.subList(paramsCount, arguments.size());\n+      JSType restType = functionType.getRestFormalsType();\n+      adjustRestArguments(restArguments, restType, callNode);\n+    }\n+  }\n \n-    int numArgs = call.getChildCount() - 1;\n+  private void adjustRestArguments(List<Node> arguments, JSType restType, Node callNode) {\n+    if (arguments.isEmpty()) {\n+      return;\n+    }\n+    if (restType != null) {\n+      for (int i = 0; i < arguments.size(); ++i) {\n+        Node arg = arguments.get(i);\n+        validator.expectArgumentMatchesParameter(t, arg,\n+          getJSType(arg), restType, callNode, i + 1);\n+      }\n+    } else {\n+      Node firstArg = arguments.get(0);\n+      report(t, firstArg, INVALID_REST_PARAMETER_TYPE, \"Rest parameter must be an array\",\n+              validator.getReadableJSTypeName(firstArg, false), null, null);\n+    }\n+  }\n+\n+  private void validateRestArguments(NodeTraversal t, Node restNode, Node lastParameter, JSType restType,\n+      Node callNode, int argIndex) {\n+    if (restNode.isSpread()) {\n+      validator.expectArgumentMatchesParameter(t, restNode.getOnlyChild(),\n+          getJSType(restNode.getOnlyChild()), restType, callNode, argIndex);\n+    } else {\n+      checkNotNull(lastParameter);\n+      String restExpr = \"(...)\";\n+      String expectedTypes = TypesRegistry.get().getParameterTypeSummary(lastParameter);\n+      report(t, restNode, MISTYPED_REST_PARAMETER, \"Only a spread argument can appear after \" + restExpr,\n+          \"(\" + expectedTypes + \")\", null, null);\n+    }\n+  }\n+\n+  private void validateArgumentCount(NodeTraversal t, Node call, FunctionType functionType,\n+      List<Node> arguments) {\n+    int argsCount = arguments.size();\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    int expectedParams = functionType.getParametersCount();\n+    int optionalCount = functionType.getOptionalFormalsCount();\n+    boolean hasRestFormal = functionType.hasRestFormals();\n+    boolean missingParam = argsCount < expectedParams - optionalCount;\n+    boolean wrongNumArgs = !hasRestFormal && (argsCount > maxArgs || argsCount < minArgs);\n+    boolean tooManyArgs = hasRestFormal && argsCount > expectedParams;\n+    if (missingParam || tooManyArgs || wrongNumArgs) {\n+      String fnName = validator.getReadableJSTypeName(call.getFirstChild(), false);\n+      if (missingParam) {\n+        int missingParams = expectedParams - optionalCount - argsCount;\n+        if (missingParams == 1) {\n+          report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n+              argsCount + \" argument(s) instead of \" + expectedParams, null, null);\n+        } else {\n+          report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n+              argsCount + \" argument(s) instead of \" + expectedParams, null,\n+              \" missing \" + missingParams + \" required argument(s)\");\n+        }\n+      } else if (tooManyArgs) {\n+        report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n+            argsCount + \" argument(s) instead of \" + expectedParams, null, null);\n+      } else {\n+        report(t, call, WRONG_ARGUMENT_COUNT, fnName,\n+            argsCount + \" argument(s)\", \"should not exceed \" + maxArgs + \" argument(s)\", null);\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}