{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    int strLen = str.length();\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        int idx = str.indexOf(id);\n        while (idx >= 0) {\n            // check if id starts at the beginning of the string or after whitespace\n            if (idx == 0 || Character.isWhitespace(str.charAt(idx - 1))) {\n                // check if there is whitespace or / after id\n                if (idx + idLen == strLen || Character.isWhitespace(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '/') {\n                    // check that the id is not part of a longer time zone ID\n                    char nextChar = idx + idLen < strLen ? str.charAt(idx + idLen) : '\\0';\n                    if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n                        bucket.setZone(DateTimeZone.forID(id));\n                        return position + idx + idLen;\n                    }\n                }\n            }\n            idx = str.indexOf(id, idx + 1);\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..c5f02c38 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,31 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    int strLen = str.length();\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        int idx = str.indexOf(id);\n+        while (idx >= 0) {\n+            // check if id starts at the beginning of the string or after whitespace\n+            if (idx == 0 || Character.isWhitespace(str.charAt(idx - 1))) {\n+                // check if there is whitespace or / after id\n+                if (idx + idLen == strLen || Character.isWhitespace(str.charAt(idx + idLen)) || str.charAt(idx + idLen) == '/') {\n+                    // check that the id is not part of a longer time zone ID\n+                    char nextChar = idx + idLen < strLen ? str.charAt(idx + idLen) : '\\0';\n+                    if (!Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n+                        bucket.setZone(DateTimeZone.forID(id));\n+                        return position + idx + idLen;\n+                    }\n                 }\n             }\n-            return ~position;\n+            idx = str.indexOf(id, idx + 1);\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}