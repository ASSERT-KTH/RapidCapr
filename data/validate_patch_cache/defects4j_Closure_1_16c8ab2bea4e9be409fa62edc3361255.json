{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraphInterface;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph;\nimport com.google.javascript.rhino.Node;\n\nimport java.util.Collection;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\npublic class MyAutomatedProgramRepairTool {\n  private final Collection<Node> entryPoints;\n  private final DiGraphInterface<Node, Branch> cfg;\n\n  public MyAutomatedProgramRepairTool(Collection<Node> entryPoints, DiGraphInterface<Node, Branch> cfg) {\n    this.entryPoints = entryPoints;\n    this.cfg = cfg;\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    Preconditions.checkState(cfgNode.isNormalBlock());\n    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private static Set<Var> getReferencedVars(Node node) {\n    Set<Var> vars = new HashSet<>();\n    node.visit(\n        new NodeTraversal.Callback() {\n          @Override\n          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n            return !n.isFunction() && !n.isCatch();\n          }\n\n          @Override\n          public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n            if (n.isName()) {\n              Var var = nodeTraversal.getScope().getVar(n.getString());\n              if (var != null) {\n                vars.add(var);\n              }\n            }\n          }\n        });\n    return vars;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..7a88dacc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,59 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraphInterface;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class MyAutomatedProgramRepairTool {\n+  private final Collection<Node> entryPoints;\n+  private final DiGraphInterface<Node, Branch> cfg;\n+\n+  public MyAutomatedProgramRepairTool(Collection<Node> entryPoints, DiGraphInterface<Node, Branch> cfg) {\n+    this.entryPoints = entryPoints;\n+    this.cfg = cfg;\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    Preconditions.checkState(cfgNode.isNormalBlock());\n+    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  private static Set<Var> getReferencedVars(Node node) {\n+    Set<Var> vars = new HashSet<>();\n+    node.visit(\n+        new NodeTraversal.Callback() {\n+          @Override\n+          public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            return !n.isFunction() && !n.isCatch();\n+          }\n+\n+          @Override\n+          public void visit(NodeTraversal nodeTraversal, Node n, Node parent) {\n+            if (n.isName()) {\n+              Var var = nodeTraversal.getScope().getVar(n.getString());\n+              if (var != null) {\n+                vars.add(var);\n+              }\n+            }\n+          }\n+        });\n+    return vars;\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}