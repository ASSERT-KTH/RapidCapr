{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.StaticScope;\nimport com.google.javascript.rhino.StaticSymbolTable;\nimport com.google.javascript.rhino.Symbol;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSType;\n\nimport java.util.ArrayDeque;\nimport java.util.Deque;\nimport java.util.List;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\n\nimport com.google.common.collect.Lists;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref;\nimport com.google.javascript.jscomp.GlobalNamespace.Ref.Type;\nimport com.google.javascript.jscomp.GlobalNamespace.Name;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n\nclass Main {\n  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            // Don't inline if it could cause the globalSets count to exceed 1.\n            if (ref.isLValue() && name.getGlobalSets() + ref.getNode().getSideEffect().ordinal()\n                > 1) {\n              continue;\n            }\n            // Try to inline the alias.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              // Increment globalSets because the alias has been inlined into the parent scope.\n              name.incrementGlobalSets();\n            }\n          }\n        }\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }\n\n  // Other methods...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..34c416e1 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,6 +158,37 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.StaticScope;\n+import com.google.javascript.rhino.StaticSymbolTable;\n+import com.google.javascript.rhino.Symbol;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n+\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n+import java.util.List;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.GlobalNamespace.Ref;\n+import com.google.javascript.jscomp.GlobalNamespace.Ref.Type;\n+import com.google.javascript.jscomp.GlobalNamespace.Name;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+\n+class Main {\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n@@ -171,14 +202,22 @@ class CollapseProperties implements CompilerPass {\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+            // {@code name} meets condition (c).\n+            // Don't inline if it could cause the globalSets count to exceed 1.\n+            if (ref.isLValue() && name.getGlobalSets() + ref.getNode().getSideEffect().ordinal()\n+                > 1) {\n+              continue;\n+            }\n+            // Try to inline the alias.\n             if (inlineAliasIfPossible(ref, namespace)) {\n               name.removeRef(ref);\n+              // Increment globalSets because the alias has been inlined into the parent scope.\n+              name.incrementGlobalSets();\n             }\n           }\n         }\n@@ -196,6 +235,9 @@ class CollapseProperties implements CompilerPass {\n     }\n   }\n \n+  // Other methods...\n+}\n+\n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that\n     // variable's declaration. If the alias's parent is a NAME,",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}