{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        final double compareReflected = comparator.compare(reflected, best);\n        if (compareReflected < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            final double compareExpanded = comparator.compare(expanded, best);\n            if (compareExpanded < 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the expanded simplex\n                simplex = evaluateNewSimplex(original, gamma, comparator);\n            }\n\n            return;\n\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        final double compareContracted = comparator.compare(contracted, best);\n        if (compareContracted < 0) {\n            // accept the contracted simplex\n            simplex = evaluateNewSimplex(original, rho, comparator);\n        } else {\n            // perform a shrink step\n            performShrink(comparator);\n        }\n\n        // check convergence\n        if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n\nprivate void performShrink(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n    final RealPointValuePair best = simplex[0];\n    for (int i = 1; i < simplex.length; i++) {\n        final RealPointValuePair[] point = simplex.clone();\n        for (int j = 0; j < point[i].getPointRef().length; j++) {\n            point[i].getPointRef()[j] = best.getPointRef()[j] + sigma * (point[i].getPointRef()[j] - best.getPointRef()[j]);\n        }\n        point[i] = new RealPointValuePair(point[i].getPoint(), computeObjectiveValue(point[i].getPoint()));\n        simplex[i] = point[i];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..7aa4c9d5a 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,66 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException {\n+\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        final double compareReflected = comparator.compare(reflected, best);\n+        if (compareReflected < 0) {\n+\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            final double compareExpanded = comparator.compare(expanded, best);\n+            if (compareExpanded < 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the expanded simplex\n+                simplex = evaluateNewSimplex(original, gamma, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        final double compareContracted = comparator.compare(contracted, best);\n+        if (compareContracted < 0) {\n+            // accept the contracted simplex\n+            simplex = evaluateNewSimplex(original, rho, comparator);\n+        } else {\n+            // perform a shrink step\n+            performShrink(comparator);\n         }\n \n+        // check convergence\n+        if (getConvergenceChecker().converged(getIterations(), original[0], simplex[0])) {\n+            return;\n+        }\n     }\n+}\n+\n+private void performShrink(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+    final RealPointValuePair best = simplex[0];\n+    for (int i = 1; i < simplex.length; i++) {\n+        final RealPointValuePair[] point = simplex.clone();\n+        for (int j = 0; j < point[i].getPointRef().length; j++) {\n+            point[i].getPointRef()[j] = best.getPointRef()[j] + sigma * (point[i].getPointRef()[j] - best.getPointRef()[j]);\n+        }\n+        point[i] = new RealPointValuePair(point[i].getPoint(), computeObjectiveValue(point[i].getPoint()));\n+        simplex[i] = point[i];\n+    }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}