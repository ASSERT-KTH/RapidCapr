{
    "patch": "private static final ImmutableSet<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n    ImmutableSet.<String>builder()\n        .add(\"Array\")\n        .add(\"Boolean\")\n        .add(\"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\")\n        .add(\"Error\")\n        .add(\"eval\")\n        .add(\"Infinity\")\n        .add(\"isFinite\")\n        .add(\"isNaN\")\n        .add(\"JSON\")\n        .add(\"Math\")\n        .add(\"NaN\")\n        .add(\"null\")\n        .add(\"Number\")\n        .add(\"Object\")\n        .add(\"parseFloat\")\n        .add(\"parseInt\")\n        .add(\"RegExp\")\n        .add(\"String\")\n        .add(\"true\")\n        .add(\"undefined\")\n        .add(\"unescape\")\n        .build();\n\nstatic boolean functionCallHasSideEffects(\n    Node callNode, @Nullable AbstractCompiler compiler) {\n  if (callNode.getType() != Token.CALL) {\n    throw new IllegalStateException(\n        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n  }\n\n  if (callNode.isNoSideEffectsCall()) {\n    return false;\n  }\n\n  Node nameNode = callNode.getFirstChild();\n\n  // Built-in functions with no side effects.\n  if (nameNode.getType() == Token.NAME) {\n    String name = nameNode.getString();\n    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n      return false;\n    }\n  } else if (nameNode.getType() == Token.GETPROP) {\n    if (callNode.hasOneChild()\n        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n              nameNode.getLastChild().getString())) {\n      return false;\n    }\n\n    if (callNode.isOnlyModifiesThisCall()\n        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n      return false;\n    }\n\n    // Functions in the \"Math\" namespace have no side effects.\n    if (nameNode.getFirstChild().matchesQualifiedName(\"Math\")) {\n      return false;\n    }\n\n    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n      if (nameNode.getFirstChild().getType() == Token.REGEXP\n          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n        return false;\n      } else if (nameNode.getFirstChild().getType() == Token.STRING\n          && STRING_REGEXP_METHODS.contains(\n              nameNode.getLastChild().getString())) {\n        Node param = nameNode.getNext();\n        if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))\n        return false;\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..e0cebd7e 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,58 +923,84 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n-      Node callNode, @Nullable AbstractCompiler compiler) {\n-    if (callNode.getType() != Token.CALL) {\n-      throw new IllegalStateException(\n-          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+private static final ImmutableSet<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n+    ImmutableSet.<String>builder()\n+        .add(\"Array\")\n+        .add(\"Boolean\")\n+        .add(\"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\")\n+        .add(\"Error\")\n+        .add(\"eval\")\n+        .add(\"Infinity\")\n+        .add(\"isFinite\")\n+        .add(\"isNaN\")\n+        .add(\"JSON\")\n+        .add(\"Math\")\n+        .add(\"NaN\")\n+        .add(\"null\")\n+        .add(\"Number\")\n+        .add(\"Object\")\n+        .add(\"parseFloat\")\n+        .add(\"parseInt\")\n+        .add(\"RegExp\")\n+        .add(\"String\")\n+        .add(\"true\")\n+        .add(\"undefined\")\n+        .add(\"unescape\")\n+        .build();\n+\n+static boolean functionCallHasSideEffects(\n+    Node callNode, @Nullable AbstractCompiler compiler) {\n+  if (callNode.getType() != Token.CALL) {\n+    throw new IllegalStateException(\n+        \"Expected CALL node, got \" + Token.name(callNode.getType()));\n+  }\n+\n+  if (callNode.isNoSideEffectsCall()) {\n+    return false;\n+  }\n+\n+  Node nameNode = callNode.getFirstChild();\n+\n+  // Built-in functions with no side effects.\n+  if (nameNode.getType() == Token.NAME) {\n+    String name = nameNode.getString();\n+    if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+      return false;\n+    }\n+  } else if (nameNode.getType() == Token.GETPROP) {\n+    if (callNode.hasOneChild()\n+        && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+              nameNode.getLastChild().getString())) {\n+      return false;\n     }\n \n-    if (callNode.isNoSideEffectsCall()) {\n+    if (callNode.isOnlyModifiesThisCall()\n+        && evaluatesToLocalValue(nameNode.getFirstChild())) {\n       return false;\n     }\n \n-    Node nameNode = callNode.getFirstChild();\n+    // Functions in the \"Math\" namespace have no side effects.\n+    if (nameNode.getFirstChild().matchesQualifiedName(\"Math\")) {\n+      return false;\n+    }\n \n-    // Built-in functions with no side effects.\n-    if (nameNode.getType() == Token.NAME) {\n-      String name = nameNode.getString();\n-      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n+    if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n+      if (nameNode.getFirstChild().getType() == Token.REGEXP\n+          && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n         return false;\n-      }\n-    } else if (nameNode.getType() == Token.GETPROP) {\n-      if (callNode.hasOneChild()\n-          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n-                nameNode.getLastChild().getString())) {\n-        return false;\n-      }\n-\n-      if (callNode.isOnlyModifiesThisCall()\n-          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n+      } else if (nameNode.getFirstChild().getType() == Token.STRING\n+          && STRING_REGEXP_METHODS.contains(\n+              nameNode.getLastChild().getString())) {\n+        Node param = nameNode.getNext();\n+        if (param != null && (param.getType() == Token.STRING || param.getType() == Token.REGEXP))\n         return false;\n       }\n-\n-      // Functions in the \"Math\" namespace have no side effects.\n-\n-      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n-        if (nameNode.getFirstChild().getType() == Token.REGEXP\n-            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n-          return false;\n-        } else if (nameNode.getFirstChild().getType() == Token.STRING\n-            && STRING_REGEXP_METHODS.contains(\n-                nameNode.getLastChild().getString())) {\n-          Node param = nameNode.getNext();\n-          if (param != null &&\n-              (param.getType() == Token.STRING\n-                  || param.getType() == Token.REGEXP))\n-          return false;\n-        }\n-      }\n     }\n-\n-    return true;\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether the call has a local result.\n    */",
    "result_reason": "error: variable BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS is already defined in class NodeUtil",
    "test_result": "ERROR"
}