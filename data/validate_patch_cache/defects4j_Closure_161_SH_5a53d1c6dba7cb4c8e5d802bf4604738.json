{
    "patch": "// Check that the access is not used as an assignment target\nif (NodeUtil.isLValue(n) && !NodeUtil.isAssignmentOp(parent)) {\n  Node grandParent = parent.getParent();\n  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n    return n;\n  }\n  Node assignRight = parent.getLastChild();\n  if (NodeUtil.isImmutableValue(assignRight)) {\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..1b636467 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,17 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not used as an assignment target\n+if (NodeUtil.isLValue(n) && !NodeUtil.isAssignmentOp(parent)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent != null && grandParent.getType() == Token.EXPR_RESULT) {\n+    return n;\n+  }\n+  Node assignRight = parent.getLastChild();\n+  if (NodeUtil.isImmutableValue(assignRight)) {\n+    return n;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:<0> but was:<1>",
    "test_result": "FAIL"
}