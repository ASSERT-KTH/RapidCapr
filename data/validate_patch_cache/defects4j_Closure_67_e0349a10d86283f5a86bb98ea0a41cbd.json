{
    "patch": "          ) &&\n          assign.getNext().getType() == Token.FUNCTION) {\n\n        // We want to exclude the assignment itself from the usage list\n        Node propName = n.getLastChild();\n\n        if (propName.getType() == Token.STRING &&\n            propName.getString().equals(\"prototype\")) {\n          return true;\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..fbba4044 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,24 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) &&\n+          assign.getNext().getType() == Token.FUNCTION) {\n+\n+        // We want to exclude the assignment itself from the usage list\n+        Node propName = n.getLastChild();\n+\n+        if (propName.getType() == Token.STRING &&\n+            propName.getString().equals(\"prototype\")) {\n+          return true;\n+        }\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}