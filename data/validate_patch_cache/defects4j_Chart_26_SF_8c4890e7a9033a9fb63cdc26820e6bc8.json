{
    "patch": "protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea,\n                              RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n    // Validate input arguments\n    Validate.notNull(g2, \"Null 'g2' argument.\");\n    Validate.notNull(dataArea, \"Null 'dataArea' argument.\");\n    Validate.notNull(edge, \"Null 'edge' argument.\");\n    Validate.notNull(state, \"Null 'state' argument.\");\n\n    if ((label == null) || (label.isEmpty())) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    g2.setFont(font);\n    Paint paint = getLabelPaint();\n    g2.setPaint(paint);\n    Float topInset = state.getCursor();\n    RectangleInsets insets = getLabelInsets();\n    double labelWidth = TextUtilities.getTextWidth(label, g2);\n    double labelHeight = TextUtilities.getTextHeight(label, g2);\n\n    Shape hotspot = null;\n    double labelX = 0.0;\n    double labelY = 0.0;\n\n    // Compute the labelX and labelY coordinates based on the edge\n    if (edge == RectangleEdge.TOP) {\n        labelX = dataArea.getCenterX();\n        labelY = topInset.doubleValue() - insets.getBottom() - labelHeight / 2.0;\n        hotspot = new Rectangle2D.Double(labelX - labelWidth / 2.0 , labelY, labelWidth, labelHeight);\n        topInset = Float.valueOf(topInset.floatValue() - labelHeight - insets.getBottom() - insets.getTop());\n    } else if (edge == RectangleEdge.BOTTOM) {\n        labelX = dataArea.getCenterX();\n        labelY = state.getCursor() + insets.getTop() + labelHeight / 2.0;\n        hotspot = new Rectangle2D.Double(labelX - labelWidth / 2.0, labelY - labelHeight, labelWidth, labelHeight);\n        topInset = Float.valueOf(topInset.floatValue() + labelHeight + insets.getBottom() + insets.getTop());\n    } else if (edge == RectangleEdge.LEFT) {\n        labelX = state.getCursor() - insets.getRight() - labelWidth / 2.0;\n        labelY = dataArea.getCenterY();\n        hotspot = new Rectangle2D.Double(labelX, labelY - labelHeight / 2.0, labelWidth, labelHeight);\n        stat",
    "patch_diff": "diff --git a/source/org/jfree/chart/axis/Axis.java b/source/org/jfree/chart/axis/Axis.java\nindex 78a6c66..50be832 100644\n--- a/source/org/jfree/chart/axis/Axis.java\n+++ b/source/org/jfree/chart/axis/Axis.java\n@@ -1089,115 +1089,47 @@ public abstract class Axis implements Cloneable, Serializable {\n      *\n      * @return Information about the axis.\n      */\n-    protected AxisState drawLabel(String label, Graphics2D g2, \n-            Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n-            AxisState state, PlotRenderingInfo plotState) {\n-\n-        // it is unlikely that 'state' will be null, but check anyway...\n-        if (state == null) {\n-            throw new IllegalArgumentException(\"Null 'state' argument.\");\n-        }\n-        \n-        if ((label == null) || (label.equals(\"\"))) {\n-            return state;\n-        }\n-\n-        Font font = getLabelFont();\n-        RectangleInsets insets = getLabelInsets();\n-        g2.setFont(font);\n-        g2.setPaint(getLabelPaint());\n-        FontMetrics fm = g2.getFontMetrics();\n-        Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n-        Shape hotspot = null;\n-        \n-        if (edge == RectangleEdge.TOP) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() - insets.getBottom() \n-                    - h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorUp(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.BOTTOM) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle(), labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) dataArea.getCenterX();\n-            float labely = (float) (state.getCursor() + insets.getTop() \n-                    + h / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorDown(insets.getTop() + labelBounds.getHeight() \n-                    + insets.getBottom());\n-        }\n-        else if (edge == RectangleEdge.LEFT) {\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n-                    labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() - insets.getRight() \n-                    - w / 2.0);\n-            float labely = (float) dataArea.getCenterY();\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-        }\n-        else if (edge == RectangleEdge.RIGHT) {\n-\n-            AffineTransform t = AffineTransform.getRotateInstance(\n-                    getLabelAngle() + Math.PI / 2.0, \n-                    labelBounds.getCenterX(), labelBounds.getCenterY());\n-            Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n-            labelBounds = rotatedLabelBounds.getBounds2D();\n-            float w = (float) labelBounds.getWidth();\n-            float h = (float) labelBounds.getHeight();\n-            float labelx = (float) (state.getCursor() \n-                            + insets.getLeft() + w / 2.0);\n-            float labely = (float) (dataArea.getY() + dataArea.getHeight() \n-                    / 2.0);\n-            TextUtilities.drawRotatedString(label, g2, labelx, labely, \n-                    TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n-                    TextAnchor.CENTER);\n-            hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n-                    labely - h / 2.0f, w, h);\n-            state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n-                    + insets.getRight());\n-\n-        }\n-        if (plotState != null && hotspot != null) {\n-            ChartRenderingInfo owner = plotState.getOwner();\n-                EntityCollection entities = owner.getEntityCollection();\n-                if (entities != null) {\n-                    entities.add(new AxisLabelEntity(this, hotspot, \n-                            this.labelToolTip, this.labelURL));\n-                }\n-        }\n-        return state;\n-\n-    }\n+protected AxisState drawLabel(String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea,\n+                              RectangleEdge edge, AxisState state, PlotRenderingInfo plotState) {\n+    // Validate input arguments\n+    Validate.notNull(g2, \"Null 'g2' argument.\");\n+    Validate.notNull(dataArea, \"Null 'dataArea' argument.\");\n+    Validate.notNull(edge, \"Null 'edge' argument.\");\n+    Validate.notNull(state, \"Null 'state' argument.\");\n+\n+    if ((label == null) || (label.isEmpty())) {\n+        return state;\n+    }\n+\n+    Font font = getLabelFont();\n+    g2.setFont(font);\n+    Paint paint = getLabelPaint();\n+    g2.setPaint(paint);\n+    Float topInset = state.getCursor();\n+    RectangleInsets insets = getLabelInsets();\n+    double labelWidth = TextUtilities.getTextWidth(label, g2);\n+    double labelHeight = TextUtilities.getTextHeight(label, g2);\n+\n+    Shape hotspot = null;\n+    double labelX = 0.0;\n+    double labelY = 0.0;\n+\n+    // Compute the labelX and labelY coordinates based on the edge\n+    if (edge == RectangleEdge.TOP) {\n+        labelX = dataArea.getCenterX();\n+        labelY = topInset.doubleValue() - insets.getBottom() - labelHeight / 2.0;\n+        hotspot = new Rectangle2D.Double(labelX - labelWidth / 2.0 , labelY, labelWidth, labelHeight);\n+        topInset = Float.valueOf(topInset.floatValue() - labelHeight - insets.getBottom() - insets.getTop());\n+    } else if (edge == RectangleEdge.BOTTOM) {\n+        labelX = dataArea.getCenterX();\n+        labelY = state.getCursor() + insets.getTop() + labelHeight / 2.0;\n+        hotspot = new Rectangle2D.Double(labelX - labelWidth / 2.0, labelY - labelHeight, labelWidth, labelHeight);\n+        topInset = Float.valueOf(topInset.floatValue() + labelHeight + insets.getBottom() + insets.getTop());\n+    } else if (edge == RectangleEdge.LEFT) {\n+        labelX = state.getCursor() - insets.getRight() - labelWidth / 2.0;\n+        labelY = dataArea.getCenterY();\n+        hotspot = new Rectangle2D.Double(labelX, labelY - labelHeight / 2.0, labelWidth, labelHeight);\n+        stat\n \n     /**\n      * Draws an axis line at the current cursor position and edge.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}