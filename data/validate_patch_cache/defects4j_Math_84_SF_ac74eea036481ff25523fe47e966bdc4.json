{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // Save the original vertex\n        final RealPointValuePair[] original = simplex.clone();\n        final RealPointValuePair best = original[0];\n\n        // Perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // Compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(expanded, reflected) < 0) {\n                simplex = reflectedSimplex.clone(); // accept the reflected simplex\n            } else {\n                simplex = evaluateNewSimplex(original, khi, comparator).clone(); // accept the expanded simplex\n            }\n            return;\n        }\n\n        // Compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n        if (comparator.compare(contracted, best) < 0) {\n            final RealPointValuePair[] contractedSimplex = simplex.clone();\n            simplex = contractedSimplex.clone(); // accept the contracted simplex\n        } else {\n            final RealPointValuePair[] contractedSimplex = simplex.clone();\n            simplex = contractSimplex(original, contractedSimplex, comparator).clone(); // contract the simplex\n        }\n\n        // Check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n// Helper function for contracting the simplex\nprivate RealPointValuePair[] contractSimplex(final RealPointValuePair[] original,\n                                             final RealPointValuePair[] contractedSimplex,\n                                             final Comparator<RealPointValuePair> comparator) {\n    for (int i = 1; i < contractedSimplex.length; i++) {\n        contractedSimplex[i] = original[0].add(original[i]).scalarMultiply(0.5);\n    }\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..76b2aea96 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,56 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n-            }\n-\n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // Save the original vertex\n+        final RealPointValuePair[] original = simplex.clone();\n+        final RealPointValuePair best = original[0];\n+\n+        // Perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // Compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                simplex = reflectedSimplex.clone(); // accept the reflected simplex\n+            } else {\n+                simplex = evaluateNewSimplex(original, khi, comparator).clone(); // accept the expanded simplex\n             }\n+            return;\n+        }\n \n+        // Compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+        if (comparator.compare(contracted, best) < 0) {\n+            final RealPointValuePair[] contractedSimplex = simplex.clone();\n+            simplex = contractedSimplex.clone(); // accept the contracted simplex\n+        } else {\n+            final RealPointValuePair[] contractedSimplex = simplex.clone();\n+            simplex = contractSimplex(original, contractedSimplex, comparator).clone(); // contract the simplex\n         }\n \n+        // Check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n+        }\n     }\n+}\n+// Helper function for contracting the simplex\n+private RealPointValuePair[] contractSimplex(final RealPointValuePair[] original,\n+                                             final RealPointValuePair[] contractedSimplex,\n+                                             final Comparator<RealPointValuePair> comparator) {\n+    for (int i = 1; i < contractedSimplex.length; i++) {\n+        contractedSimplex[i] = original[0].add(original[i]).scalarMultiply(0.5);\n+    }\n+    return contractedSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: clone() has protected access in Object",
    "test_result": "ERROR"
}