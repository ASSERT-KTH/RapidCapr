{
    "patch": "} else if (actualTypeArgument instanceof Class) {\n    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n} else if (actualTypeArgument instanceof TypeVariable) {\n    TypeVariable tv = (TypeVariable) actualTypeArgument;\n    Type t = ContextualUtils.getClosestTypeMatchingBound(tv.getBounds(), bounds -> contextualActualTypeParameters.containsKey(bounds));\n    contextualActualTypeParameters.put(typeParameter, t);\n} else {\n    throw new IllegalArgumentException(\"Unexpected Type: \" + actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..53cc2b577 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,15 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof Class) {\n+    contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+    TypeVariable tv = (TypeVariable) actualTypeArgument;\n+    Type t = ContextualUtils.getClosestTypeMatchingBound(tv.getBounds(), bounds -> contextualActualTypeParameters.containsKey(bounds));\n+    contextualActualTypeParameters.put(typeParameter, t);\n+} else {\n+    throw new IllegalArgumentException(\"Unexpected Type: \" + actualTypeArgument);\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}