{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis() +\n                (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)) +\n                (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)) +\n                (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)) +\n                (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)) + \n                (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        // get years and months into fields that we know are safe\n        int _years = FieldUtils.safeNegate(getYears());\n        int _months = FieldUtils.safeNegate(getMonths());\n        _years += _months / 12;\n        _months = _months % 12;\n        if (_years != 0) {\n            result = result.withYears(_years);\n        }\n        if (_months != 0) {\n            result = result.withMonths(_months);\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..c484e999 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,24 +1615,24 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        long millis = getMillis() +\n+                (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)) +\n+                (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)) +\n+                (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)) +\n+                (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)) + \n+                (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        // get years and months into fields that we know are safe\n+        int _years = FieldUtils.safeNegate(getYears());\n+        int _months = FieldUtils.safeNegate(getMonths());\n+        _years += _months / 12;\n+        _months = _months % 12;\n+        if (_years != 0) {\n+            result = result.withYears(_years);\n+        }\n+        if (_months != 0) {\n+            result = result.withMonths(_months);\n         }\n         return result;\n     }",
    "result_reason": "java.lang.UnsupportedOperationException: Field is not supported",
    "test_result": "FAIL"
}