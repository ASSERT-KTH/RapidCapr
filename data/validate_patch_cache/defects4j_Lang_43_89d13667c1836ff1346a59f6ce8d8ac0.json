{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn, Locale locale) {\n    int start = pos.getIndex();\n    char[] c = pattern.toCharArray();\n    if (escapingOn && c[start] == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n    int lastHold = start;\n    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                    QUOTE);\n            pos.setIndex(i + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n            continue;\n        }\n        switch (c[pos.getIndex()]) {\n        case QUOTE:\n            next(pos);\n            return appendTo == null ? null : appendTo.append(c, lastHold,\n                    pos.getIndex() - lastHold);\n        default:\n            next(pos);\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}\n\npublic static String format(String pattern, Object[] args, Locale locale)\n        throws IllegalArgumentException {\n    StringBuffer buffer = new StringBuffer();\n    ParsePosition pos = new ParsePosition(0);\n    for (int i = 0; i < pattern.length(); i++) {\n        char c = pattern.charAt(i);\n        switch (c) {\n        // ...\n        case TIMEZONE:\n            if (i + 1 < pattern.length()) {\n                c = pattern.charAt(++i);\n                if (c == TIMEZONE_ISO8601_1 || c == TIMEZONE_ISO8601_3) {\n                    DateFormatSymbols dfs = new DateFormatSymbols(locale);\n                    String[] zoneStrings = dfs.getZoneStrings();\n                    // ...\n                }\n                else {\n                    throw new IllegalArgumentException(\"Illegal pattern  \" + c);\n                }\n            }\n            else {\n                throw new IllegalArgumentException(\n                        \"Invalid pattern, ends with \" + c);\n            }\n            break;\n        case QUOTE:\n            appendQuotedString(pattern, next(pos), buffer, true, locale);\n            break;\n        default:\n            buffer.append(c);\n        }\n    }\n    return new SimpleDateFormat(buffer.toString(), locale).format(args[0]);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..5a60fb6e 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,69 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+        StringBuffer appendTo, boolean escapingOn, Locale locale) {\n+    int start = pos.getIndex();\n+    char[] c = pattern.toCharArray();\n+    if (escapingOn && c[start] == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+    int lastHold = start;\n+    for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+        if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+            appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                    QUOTE);\n+            pos.setIndex(i + ESCAPED_QUOTE.length());\n+            lastHold = pos.getIndex();\n+            continue;\n+        }\n+        switch (c[pos.getIndex()]) {\n+        case QUOTE:\n+            next(pos);\n+            return appendTo == null ? null : appendTo.append(c, lastHold,\n+                    pos.getIndex() - lastHold);\n+        default:\n+            next(pos);\n         }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n+    }\n+    throw new IllegalArgumentException(\n+            \"Unterminated quoted string at position \" + start);\n+}\n+\n+public static String format(String pattern, Object[] args, Locale locale)\n+        throws IllegalArgumentException {\n+    StringBuffer buffer = new StringBuffer();\n+    ParsePosition pos = new ParsePosition(0);\n+    for (int i = 0; i < pattern.length(); i++) {\n+        char c = pattern.charAt(i);\n+        switch (c) {\n+        // ...\n+        case TIMEZONE:\n+            if (i + 1 < pattern.length()) {\n+                c = pattern.charAt(++i);\n+                if (c == TIMEZONE_ISO8601_1 || c == TIMEZONE_ISO8601_3) {\n+                    DateFormatSymbols dfs = new DateFormatSymbols(locale);\n+                    String[] zoneStrings = dfs.getZoneStrings();\n+                    // ...\n+                }\n+                else {\n+                    throw new IllegalArgumentException(\"Illegal pattern  \" + c);\n+                }\n             }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+            else {\n+                throw new IllegalArgumentException(\n+                        \"Invalid pattern, ends with \" + c);\n             }\n+            break;\n+        case QUOTE:\n+            appendQuotedString(pattern, next(pos), buffer, true, locale);\n+            break;\n+        default:\n+            buffer.append(c);\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n     }\n+    return new SimpleDateFormat(buffer.toString(), locale).format(args[0]);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "error: method appendQuotedString in class ExtendedMessageFormat cannot be applied to given types;",
    "test_result": "ERROR"
}