{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n        double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0;\n\n    do {\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\n                    \"maximum number of iterations ({0}) exceeded\", maximumIterations);\n        }\n\n        fa = function.value(a);\n        fb = function.value(b);\n        if (fa * fb > 0) {\n            // Adjust the interval to get opposite signs of f(a) and f(b).\n            if (Math.abs(fa) < Math.abs(fb)) {\n                final double tmp = b;\n                b = a;\n                a = tmp;\n            }\n\n            // Move point b toward point a\n            if (b + DEFAULT_FUNCTION_VALUE_ACCURACY >= upperBound) {\n                // Endpoint b has encountered upper bound; shrink the other side if possible.\n                if (a - DEFAULT_FUNCTION_VALUE_ACCURACY <= lowerBound) {\n                    throw new ConvergenceException(\n                            \"number of iterations={0}, maximum iterations= {1}, \" +\n                                    \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                                    \"final b value={6}, f(a)={7}, f(b)={8}\",\n                            numIterations, maximumIterations, initial,\n                            lowerBound, upperBound, a, b, fa, fb);\n                }\n                // Otherwise shrink the interval using left endpoint\n                b = a + (a - lowerBound);\n            } else {\n                // Normal case: move b exponentially away from a\n                final double bNew = FastMath.max(b + EXPONENTIAL_GROWTH_FACTOR * (b - a), lowerBound);\n                if (b == bNew) {\n                    // Endpoint b has encountered lower bound; shrink the other side if possible.\n                    if (a + DEFAULT_FUNCTION_VALUE_ACCURACY >= upperBound) {\n                        throw new ConvergenceException(\n                                \"number of iterations={0}, maximum iterations= {1}, \" +\n                                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n                                numIterations, maximumIterations, initial,\n                                lowerBound, upperBound, a, b, fa, fb);\n                    }\n                    // Otherwise shrink the interval using right endpoint\n                    b = a + (a - lowerBound);\n                } else {\n                    // Evaluate function at new point\n                    final double fbNew = function.value(bNew);\n                    // If function value is not sufficiently improved\n                    if (fbNew * fb > 0) {\n                        // Accept new point, but keep old value of fb.\n                        // This allows us to switch back to exponential growth in\n                        // the next iteration if we reached the bound already.\n                        b = bNew;\n                    } else {\n                        // Improve the bracketing interval using the new point.\n                        a = b;\n                        b = bNew;\n                        break;\n                    }\n                }\n            }\n        } else {\n            // Fa and Fb have opposite signs\n            break;\n        }\n        ++numIterations;\n    } while (true);\n\n    return new double[] { a, b };\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..2d2a9c7cf 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,98 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound,\n+        double upperBound, int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    int numIterations = 0;\n+\n+    do {\n+        if (numIterations >= maximumIterations) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"maximum number of iterations ({0}) exceeded\", maximumIterations);\n         }\n-        \n-        return new double[]{a, b};\n-    }\n+\n+        fa = function.value(a);\n+        fb = function.value(b);\n+        if (fa * fb > 0) {\n+            // Adjust the interval to get opposite signs of f(a) and f(b).\n+            if (Math.abs(fa) < Math.abs(fb)) {\n+                final double tmp = b;\n+                b = a;\n+                a = tmp;\n+            }\n+\n+            // Move point b toward point a\n+            if (b + DEFAULT_FUNCTION_VALUE_ACCURACY >= upperBound) {\n+                // Endpoint b has encountered upper bound; shrink the other side if possible.\n+                if (a - DEFAULT_FUNCTION_VALUE_ACCURACY <= lowerBound) {\n+                    throw new ConvergenceException(\n+                            \"number of iterations={0}, maximum iterations= {1}, \" +\n+                                    \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                                    \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                            numIterations, maximumIterations, initial,\n+                            lowerBound, upperBound, a, b, fa, fb);\n+                }\n+                // Otherwise shrink the interval using left endpoint\n+                b = a + (a - lowerBound);\n+            } else {\n+                // Normal case: move b exponentially away from a\n+                final double bNew = FastMath.max(b + EXPONENTIAL_GROWTH_FACTOR * (b - a), lowerBound);\n+                if (b == bNew) {\n+                    // Endpoint b has encountered lower bound; shrink the other side if possible.\n+                    if (a + DEFAULT_FUNCTION_VALUE_ACCURACY >= upperBound) {\n+                        throw new ConvergenceException(\n+                                \"number of iterations={0}, maximum iterations= {1}, \" +\n+                                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                                numIterations, maximumIterations, initial,\n+                                lowerBound, upperBound, a, b, fa, fb);\n+                    }\n+                    // Otherwise shrink the interval using right endpoint\n+                    b = a + (a - lowerBound);\n+                } else {\n+                    // Evaluate function at new point\n+                    final double fbNew = function.value(bNew);\n+                    // If function value is not sufficiently improved\n+                    if (fbNew * fb > 0) {\n+                        // Accept new point, but keep old value of fb.\n+                        // This allows us to switch back to exponential growth in\n+                        // the next iteration if we reached the bound already.\n+                        b = bNew;\n+                    } else {\n+                        // Improve the bracketing interval using the new point.\n+                        a = b;\n+                        b = bNew;\n+                        break;\n+                    }\n+                }\n+            }\n+        } else {\n+            // Fa and Fb have opposite signs\n+            break;\n+        }\n+        ++numIterations;\n+    } while (true);\n+\n+    return new double[] { a, b };\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}