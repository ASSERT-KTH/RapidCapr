{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(n);\n      return;\n    }\n    if (parent == null) {\n      return;\n    }\n    attachLiteralTypes(n);\n    switch (parent.getType()) {\n      case Token.BLOCK:\n        if (n.getType() == Token.FUNCTION) {\n          defineDeclaredFunction(n, parent);\n        } else if (n.getType() == Token.VAR) {\n          defineVar(n, parent);\n        }\n        break;\n      case Token.EXPR_RESULT:\n        if (n.getType() == Token.ASSIGN) {\n          defineAssign(n, parent);\n        }\n        break;\n      case Token.FUNCTION:\n        if (n.getType() == Token.NAME) {\n          defineDeclaredFunction(n, parent);\n        } else if (n.getType() == Token.PARAM_LIST) {\n          defineParameters(n);\n        }\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..dc77ccdc 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1448,21 +1448,43 @@ final class TypedScopeCreator implements ScopeCreator {\n         return;\n       }\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      handleFunctionInputs(n);\n+      return;\n+    }\n+    if (parent == null) {\n+      return;\n+    }\n+    attachLiteralTypes(n);\n+    switch (parent.getType()) {\n+      case Token.BLOCK:\n+        if (n.getType() == Token.FUNCTION) {\n           defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n+        } else if (n.getType() == Token.VAR) {\n           defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n+      case Token.EXPR_RESULT:\n+        if (n.getType() == Token.ASSIGN) {\n+          defineAssign(n, parent);\n+        }\n+        break;\n+      case Token.FUNCTION:\n+        if (n.getType() == Token.NAME) {\n+          defineDeclaredFunction(n, parent);\n+        } else if (n.getType() == Token.PARAM_LIST) {\n+          defineParameters(n);\n+        }\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+    }\n+  }\n     }\n \n     /** Handle bleeding functions and function parameters. */",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}