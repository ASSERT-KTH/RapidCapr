{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n    List<Node> arguments = call.removeChildren();\n    arguments.remove(0); // skip the function name\n\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (maxArgs != -1 && (arguments.size() < minArgs || arguments.size() > maxArgs)) {\n        report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(arguments.size()),\n               String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    while (parameters.hasNext() && !arguments.isEmpty()) {\n        Node parameter = parameters.next();\n        Node argument = arguments.remove(0);\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n                getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n    if (!arguments.isEmpty()) {\n        Node parameter = functionType.getLastParameter();\n        if (parameter.isVarArgs()) {\n            Iterator<Node> varargs = arguments.iterator();\n            while (varargs.hasNext()) {\n                Node argument = varargs.next();\n                validator.expectArgumentMatchesParameter(t, argument,\n                        getJSType(argument), getJSType(parameter), call, ordinal++);\n            }\n        } else {\n            report(t, call, WRONG_ARGUMENT_COUNT,\n                   validator.getReadableJSTypeName(call.getFirstChild(), false),\n                   String.valueOf(arguments.size() + ordinal),\n                   String.valueOf(minArgs),\n                   maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        }\n    }\n\n    checkState(\n            !parameters.hasNext() || functionType.getLastParameter().isVarArgs(),\n            \"Last parameter should be varags if there are more parameters left\");\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..78feed18 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,52 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+    List<Node> arguments = call.removeChildren();\n+    arguments.remove(0); // skip the function name\n+\n+    int minArgs = functionType.getMinArguments();\n+    int maxArgs = functionType.getMaxArguments();\n+    if (maxArgs != -1 && (arguments.size() < minArgs || arguments.size() > maxArgs)) {\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+               validator.getReadableJSTypeName(call.getFirstChild(), false),\n+               String.valueOf(arguments.size()),\n+               String.valueOf(minArgs),\n+               maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    }\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n     int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+    while (parameters.hasNext() && !arguments.isEmpty()) {\n+        Node parameter = parameters.next();\n+        Node argument = arguments.remove(0);\n+        ordinal++;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        validator.expectArgumentMatchesParameter(t, argument,\n+                getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n-  }\n+    if (!arguments.isEmpty()) {\n+        Node parameter = functionType.getLastParameter();\n+        if (parameter.isVarArgs()) {\n+            Iterator<Node> varargs = arguments.iterator();\n+            while (varargs.hasNext()) {\n+                Node argument = varargs.next();\n+                validator.expectArgumentMatchesParameter(t, argument,\n+                        getJSType(argument), getJSType(parameter), call, ordinal++);\n+            }\n+        } else {\n+            report(t, call, WRONG_ARGUMENT_COUNT,\n+                   validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                   String.valueOf(arguments.size() + ordinal),\n+                   String.valueOf(minArgs),\n+                   maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        }\n+    }\n+\n+    checkState(\n+            !parameters.hasNext() || functionType.getLastParameter().isVarArgs(),\n+            \"Last parameter should be varags if there are more parameters left\");\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}