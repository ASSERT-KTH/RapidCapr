{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair expanded = evaluateNewSimplex(reflected.getPoint(), khi, comparator);\n                if (comparator.compare(expanded, reflected) < 0) {\n                    // accept the expanded simplex\n                    simplex = getPoints(expanded, best);\n                } else {\n                    // accept the reflected simplex\n                    simplex = reflected.getPoint();\n                }\n\n                return;\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = getPoints(contracted, best);\n\n                // check convergence\n                return;\n            }\n\n        }\n\n    }\n\n    private RealPointValuePair[] getPoints(RealPointValuePair newPoint, RealPointValuePair best) {\n        RealPointValuePair[] points = new RealPointValuePair[simplex.length];\n        points[0] = best;\n        for (int i = 0; i < points.length - 1; i++) {\n            points[i+1] = new RealPointValuePair(new Dfp[simplex[0].getPoint().length],\n                                                  Double.NaN);\n            for (int k = 0; k < points[i].getPoint().length; k++){\n                points[i+1].getPointRef()[k] = points[0].getPointRef()[k].newInstance(simplex[i+1].getPointRef()[k]);\n            }\n        }\n        for (int i = 0; i < points[0].getPoint().length; i++) {\n            points[points.length-1].getPointRef()[i] = points[0].getPointRef()[i].add(newPoint.getPointRef()[i].subtract(points[0].getPointRef()[i]).multiply(rho));\n        }\n        points[points.length-1] = new RealPointValuePair(points[points.length-1].getPoint(),\n                                                          computeObjectiveValue(points[points.length-1].getPoint()));\n\n        return points;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6956bb7e7 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -59,7 +59,7 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     /** {@inheritDoc} */\n     @Override\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+            throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n         while (true) {\n \n@@ -74,11 +74,13 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             if (comparator.compare(reflected, best) < 0) {\n \n                 // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n+                final RealPointValuePair expanded = evaluateNewSimplex(reflected.getPoint(), khi, comparator);\n+                if (comparator.compare(expanded, reflected) < 0) {\n+                    // accept the expanded simplex\n+                    simplex = getPoints(expanded, best);\n+                } else {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflected.getPoint();\n                 }\n \n                 return;\n@@ -89,8 +91,9 @@ public class MultiDirectional extends DirectSearchOptimizer {\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = getPoints(contracted, best);\n \n-            // check convergence\n+                // check convergence\n                 return;\n             }\n \n@@ -98,6 +101,25 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+    private RealPointValuePair[] getPoints(RealPointValuePair newPoint, RealPointValuePair best) {\n+        RealPointValuePair[] points = new RealPointValuePair[simplex.length];\n+        points[0] = best;\n+        for (int i = 0; i < points.length - 1; i++) {\n+            points[i+1] = new RealPointValuePair(new Dfp[simplex[0].getPoint().length],\n+                                                  Double.NaN);\n+            for (int k = 0; k < points[i].getPoint().length; k++){\n+                points[i+1].getPointRef()[k] = points[0].getPointRef()[k].newInstance(simplex[i+1].getPointRef()[k]);\n+            }\n+        }\n+        for (int i = 0; i < points[0].getPoint().length; i++) {\n+            points[points.length-1].getPointRef()[i] = points[0].getPointRef()[i].add(newPoint.getPointRef()[i].subtract(points[0].getPointRef()[i]).multiply(rho));\n+        }\n+        points[points.length-1] = new RealPointValuePair(points[points.length-1].getPoint(),\n+                                                          computeObjectiveValue(points[points.length-1].getPoint()));\n+\n+        return points;\n+    }\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: method evaluateNewSimplex in class MultiDirectional cannot be applied to given types;",
    "test_result": "ERROR"
}