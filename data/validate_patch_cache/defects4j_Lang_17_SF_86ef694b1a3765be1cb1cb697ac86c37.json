{
    "patch": "public static String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuilder output = new StringBuilder(len);\n    for (int i = 0; i < len; i++) {\n        char ch = input.charAt(i);\n        if (ch == '\\\\' && i + 1 < len) {\n            char nextChar = input.charAt(i + 1);\n            switch (nextChar) {\n                case '\\\\':\n                    output.append('\\\\');\n                    break;\n                case 'n':\n                    output.append('\\n');\n                    break;\n                case 'r':\n                    output.append('\\r');\n                    break;\n                case 't':\n                    output.append('\\t');\n                    break;\n                case 'b':\n                    output.append('\\b');\n                    break;\n                case 'f':\n                    output.append('\\f');\n                    break;\n                case '\\'':\n                    output.append('\\'');\n                    break;\n                case '\\\"':\n                    output.append('\\\"');\n                    break;\n                case 'u':\n                    if (i + 5 < len) {\n                        char uni1 = input.charAt(i + 2);\n                        char uni2 = input.charAt(i + 3);\n                        char uni3 = input.charAt(i + 4);\n                        char uni4 = input.charAt(i + 5);\n                        if (isUnicodeHexSequence(uni1, uni2, uni3, uni4)) {\n                            char res = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                            output.append(res);\n                            i += 5;\n                        } else {\n                            output.append(ch);\n                        }\n                    } else {\n                        output.append(ch);\n                    }\n                    break;\n                default:\n                    output.append(ch);\n                    break;\n            }\n            i++;\n        } else {\n            output.append(ch);\n        }\n    }\n    return output.toString();\n}\n\nprivate static boolean isUnicodeHexSequence(char ch1, char ch2, char ch3, char ch4) {\n    return isHexDigit(ch1) &&\n            isHexDigit(ch2) &&\n            isHexDigit(ch3) &&\n            isHexDigit(ch4);\n}\n\nprivate static boolean isHexDigit(char ch) {\n    return Character.isDigit(ch) ||\n            (ch >= 'a' && ch <= 'f') ||\n            (ch >= 'A' && ch <= 'F');\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..56e5ef7e 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,82 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringBuilder output = new StringBuilder(len);\n+    for (int i = 0; i < len; i++) {\n+        char ch = input.charAt(i);\n+        if (ch == '\\\\' && i + 1 < len) {\n+            char nextChar = input.charAt(i + 1);\n+            switch (nextChar) {\n+                case '\\\\':\n+                    output.append('\\\\');\n+                    break;\n+                case 'n':\n+                    output.append('\\n');\n+                    break;\n+                case 'r':\n+                    output.append('\\r');\n+                    break;\n+                case 't':\n+                    output.append('\\t');\n+                    break;\n+                case 'b':\n+                    output.append('\\b');\n+                    break;\n+                case 'f':\n+                    output.append('\\f');\n+                    break;\n+                case '\\'':\n+                    output.append('\\'');\n+                    break;\n+                case '\\\"':\n+                    output.append('\\\"');\n+                    break;\n+                case 'u':\n+                    if (i + 5 < len) {\n+                        char uni1 = input.charAt(i + 2);\n+                        char uni2 = input.charAt(i + 3);\n+                        char uni3 = input.charAt(i + 4);\n+                        char uni4 = input.charAt(i + 5);\n+                        if (isUnicodeHexSequence(uni1, uni2, uni3, uni4)) {\n+                            char res = (char) Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                            output.append(res);\n+                            i += 5;\n+                        } else {\n+                            output.append(ch);\n+                        }\n                     } else {\n-                        pos++;\n+                        output.append(ch);\n                     }\n-                }\n-                pos--;\n+                    break;\n+                default:\n+                    output.append(ch);\n+                    break;\n             }\n-            pos++;\n+            i++;\n+        } else {\n+            output.append(ch);\n         }\n     }\n+    return output.toString();\n+}\n+\n+private static boolean isUnicodeHexSequence(char ch1, char ch2, char ch3, char ch4) {\n+    return isHexDigit(ch1) &&\n+            isHexDigit(ch2) &&\n+            isHexDigit(ch3) &&\n+            isHexDigit(ch4);\n+}\n+\n+private static boolean isHexDigit(char ch) {\n+    return Character.isDigit(ch) ||\n+            (ch >= 'a' && ch <= 'f') ||\n+            (ch >= 'A' && ch <= 'F');\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}