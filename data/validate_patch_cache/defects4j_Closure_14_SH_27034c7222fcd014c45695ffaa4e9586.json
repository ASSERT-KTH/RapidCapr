{
    "patch": "\n              if (cfa != null) {\n                List<DiGraphEdge<Node, Branch>> excEdges = cfa.getExceptionalEdges(parent);\n                // Propagate exceptions.\n                for (DiGraphEdge<Node, Branch> excEdge : excEdges) {\n                  cfa.createEdge(finallyNode, excEdge.getValue(), excEdge.getDestination());\n                }\n              }\n              // Propagate unconditional edges.\n              DiGraph<Node, Branch> cfg = cfa == null ? null : cfa.getCfg();\n              if (cfg == null || cfg.getOutEdges(parent).stream()\n                  .anyMatch(edge -> edge.getValue() == Branch.UNCOND && edge.getDestination() == node)) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..0fb494b2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,20 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+\n+              if (cfa != null) {\n+                List<DiGraphEdge<Node, Branch>> excEdges = cfa.getExceptionalEdges(parent);\n+                // Propagate exceptions.\n+                for (DiGraphEdge<Node, Branch> excEdge : excEdges) {\n+                  cfa.createEdge(finallyNode, excEdge.getValue(), excEdge.getDestination());\n+                }\n+              }\n+              // Propagate unconditional edges.\n+              DiGraph<Node, Branch> cfg = cfa == null ? null : cfa.getCfg();\n+              if (cfg == null || cfg.getOutEdges(parent).stream()\n+                  .anyMatch(edge -> edge.getValue() == Branch.UNCOND && edge.getDestination() == node)) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}