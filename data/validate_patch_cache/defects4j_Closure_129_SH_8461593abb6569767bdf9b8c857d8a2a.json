{
    "patch": "      Node child = n.getFirstChild();\n      Node potentialGetprop = child;\n\n      // ignore cast nodes.\n      while (NodeUtil.isCast(potentialGetprop)) {\n        potentialGetprop = potentialGetprop.getFirstChild();\n      }\n\n      if (NodeUtil.isGet(potentialGetprop)) {\n        Node getTarget = potentialGetprop.getLastChild();\n        if (getTarget != null && !getTarget.getString().equals(\"prototype\")) {\n          Node first = getTarget;\n\n          if (!NodeUtil.isGet(first)) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..a32e9e06 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,24 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node child = n.getFirstChild();\n+      Node potentialGetprop = child;\n+\n+      // ignore cast nodes.\n+      while (NodeUtil.isCast(potentialGetprop)) {\n+        potentialGetprop = potentialGetprop.getFirstChild();\n+      }\n+\n+      if (NodeUtil.isGet(potentialGetprop)) {\n+        Node getTarget = potentialGetprop.getLastChild();\n+        if (getTarget != null && !getTarget.getString().equals(\"prototype\")) {\n+          Node first = getTarget;\n+\n+          if (!NodeUtil.isGet(first)) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        }\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}