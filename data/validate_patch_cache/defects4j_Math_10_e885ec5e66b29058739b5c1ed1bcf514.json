{
    "patch": "public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    if ((y[yOffset] == 0) && (x[xOffset] == 0)) {\n        for (int i = 0; i < getSize(); ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    if (x[xOffset] >= 0) {\n        final double[] r = new double[getSize()];\n        final double[] atan = new double[getSize()];\n\n        // r = sqrt(x^2 + y^2).\n        multiply(y, yOffset, y, yOffset, r, 0);\n        multiply(x, xOffset, x, xOffset, result, resultOffset);\n        add(result, resultOffset, r, 0, r, 0);\n        rootN(r, 0, 2, r, 0);\n\n        // atan(y/x)\n        divide(y, yOffset, x, xOffset, atan, 0);\n        atan(atan, 0, result, resultOffset);\n        System.arraycopy(atan, 0, result, resultOffset, getSize());\n\n        // Copy the sign of x to atan.\n        final int idx = getPiSplit();\n        if (x[xOffset] < 0) {\n            if (result[idx] <= 0.0) {\n                result[idx] -= Math.PI;\n            } else {\n                result[idx] += Math.PI;\n            }\n        }\n    } else {\n        final double[] absX = new double[getSize()];\n        final double[] r = new double[getSize()];\n        final double[] invAbsXPlusY = new double[getSize()];\n        final double[] atan = new double[getSize()];\n\n        // Compute |x| and |y|.\n        abs(x, xOffset, absX, 0);\n        abs(y, yOffset, result, resultOffset);\n\n        // Compute r = |x|/|y|.\n        divide(absX, 0, result, resultOffset, r, 0);\n\n        // Compute t = atan(r).\n        atan(r, 0, atan, 0);\n\n        // First quadrant: t.\n        // Second quadrant: sign(y) * Pi - t.\n        // Third quadrant: sign(y) * Pi + t.\n        // Fourth quadrant: -t.\n\n        // Compute (|y| + |x|) / (|x| - |y|).\n        add(absX, 0, result, resultOffset, invAbsXPlusY, 0);\n        subtract(absX, 0, result, resultOffset, result, resultOffset);\n        divide(invAbsXPlusY, 0, result, resultOffset, invAbsXPlusY, 0);\n\n        // Determine the quadrant.\n        final int idx = getPiSplit();\n        if (result[idx] < 0) {\n            // 2nd and 3rd quadrants.\n            if (x[xOffset] < 0) {\n                result[idx] += ((result[yOffset] < 0) ? -Math.PI : Math.PI);\n            } else {\n                result[idx] += ((result[yOffset] < 0) ? Math.PI : -Math.PI);\n            }\n            System.arraycopy(atan, 0, result, resultOffset, getSize());\n            divide(result, resultOffset, invAbsXPlusY, 0, result, resultOffset);\n            negate(result, resultOffset);\n        } else {\n            System.arraycopy(atan, 0, result, resultOffset, getSize());\n            divide(result, resultOffset, invAbsXPlusY, 0, result, resultOffset);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..dd9077536 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,90 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n+public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        for (int i = 0; i < getSize(); ++i) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+        return;\n+    }\n \n-        } else {\n+    if ((y[yOffset] == 0) && (x[xOffset] == 0)) {\n+        for (int i = 0; i < getSize(); ++i) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+        return;\n+    }\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+    if (x[xOffset] >= 0) {\n+        final double[] r = new double[getSize()];\n+        final double[] atan = new double[getSize()];\n+\n+        // r = sqrt(x^2 + y^2).\n+        multiply(y, yOffset, y, yOffset, r, 0);\n+        multiply(x, xOffset, x, xOffset, result, resultOffset);\n+        add(result, resultOffset, r, 0, r, 0);\n+        rootN(r, 0, 2, r, 0);\n+\n+        // atan(y/x)\n+        divide(y, yOffset, x, xOffset, atan, 0);\n+        atan(atan, 0, result, resultOffset);\n+        System.arraycopy(atan, 0, result, resultOffset, getSize());\n+\n+        // Copy the sign of x to atan.\n+        final int idx = getPiSplit();\n+        if (x[xOffset] < 0) {\n+            if (result[idx] <= 0.0) {\n+                result[idx] -= Math.PI;\n+            } else {\n+                result[idx] += Math.PI;\n             }\n-\n         }\n-\n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n-\n+    } else {\n+        final double[] absX = new double[getSize()];\n+        final double[] r = new double[getSize()];\n+        final double[] invAbsXPlusY = new double[getSize()];\n+        final double[] atan = new double[getSize()];\n+\n+        // Compute |x| and |y|.\n+        abs(x, xOffset, absX, 0);\n+        abs(y, yOffset, result, resultOffset);\n+\n+        // Compute r = |x|/|y|.\n+        divide(absX, 0, result, resultOffset, r, 0);\n+\n+        // Compute t = atan(r).\n+        atan(r, 0, atan, 0);\n+\n+        // First quadrant: t.\n+        // Second quadrant: sign(y) * Pi - t.\n+        // Third quadrant: sign(y) * Pi + t.\n+        // Fourth quadrant: -t.\n+\n+        // Compute (|y| + |x|) / (|x| - |y|).\n+        add(absX, 0, result, resultOffset, invAbsXPlusY, 0);\n+        subtract(absX, 0, result, resultOffset, result, resultOffset);\n+        divide(invAbsXPlusY, 0, result, resultOffset, invAbsXPlusY, 0);\n+\n+        // Determine the quadrant.\n+        final int idx = getPiSplit();\n+        if (result[idx] < 0) {\n+            // 2nd and 3rd quadrants.\n+            if (x[xOffset] < 0) {\n+                result[idx] += ((result[yOffset] < 0) ? -Math.PI : Math.PI);\n+            } else {\n+                result[idx] += ((result[yOffset] < 0) ? Math.PI : -Math.PI);\n+            }\n+            System.arraycopy(atan, 0, result, resultOffset, getSize());\n+            divide(result, resultOffset, invAbsXPlusY, 0, result, resultOffset);\n+            negate(result, resultOffset);\n+        } else {\n+            System.arraycopy(atan, 0, result, resultOffset, getSize());\n+            divide(result, resultOffset, invAbsXPlusY, 0, result, resultOffset);\n+        }\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}