{
    "patch": "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value)\n            && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        return value.getBooleanProp(Node.INCRDECR_PROP) && evaluatesToLocalValue(value.getFirstChild(), locals);\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n      case Token.GETELEM:\n      case Token.GETPROP:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n      default:\n        // Interpret the value as a local value only if all its children are local.\n        for (Node child : value.children()) {\n          if (!evaluatesToLocalValue(child, locals)) {\n            return false;\n          }\n        }\n        return isImmutableValue(value) || locals.apply(value);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..635d6571 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,42 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is the effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value)\n+            && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        return value.getBooleanProp(Node.INCRDECR_PROP) && evaluatesToLocalValue(value.getFirstChild(), locals);\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value) || isToStringMethodCall(value) || locals.apply(value);\n+      default:\n+        // Interpret the value as a local value only if all its children are local.\n+        for (Node child : value.children()) {\n+          if (!evaluatesToLocalValue(child, locals)) {\n+            return false;\n+          }\n+        }\n+        return isImmutableValue(value) || locals.apply(value);\n+    }\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}