{
    "patch": "if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n    name.getAliasingGets() == 0 && !name.isObfuscated() &&\n    !name.isExported() && !name.getReferences().isEmpty()) {\n    // name meets condition (a). Compute the cost and try to inline\n    int cost = namespace.inlineCostHeuristic(name);\n    if (cost != Integer.MAX_VALUE && cost <= MAX_INLINE_COST) {\n        inlineLocalVar(namespace, name);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..b6ed75cc 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,15 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.getGlobalSets() == 1 && name.getLocalSets() == 0 &&\n+    name.getAliasingGets() == 0 && !name.isObfuscated() &&\n+    !name.isExported() && !name.getReferences().isEmpty()) {\n+    // name meets condition (a). Compute the cost and try to inline\n+    int cost = namespace.inlineCostHeuristic(name);\n+    if (cost != Integer.MAX_VALUE && cost <= MAX_INLINE_COST) {\n+        inlineLocalVar(namespace, name);\n+    }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}