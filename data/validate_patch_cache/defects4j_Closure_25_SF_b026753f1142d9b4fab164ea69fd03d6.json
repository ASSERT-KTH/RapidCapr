{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    if (constructorType != null) {\n      // Restrict to (not-null or undefined) so that we don't get nullable object types.\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n        return scope;\n      }\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      JSType type;\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n      } else {\n        type = null;\n        if (constructor.getJSType() == null) {\n          constructor.setJSType(getNativeType(JSType.NULL_TYPE));\n        }\n      }\n      n.setJSType(type);\n      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n        scope = traverse(arg, scope);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..01e18fa2 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,32 +1032,31 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n     if (constructorType != null) {\n+      // Restrict to (not-null or undefined) so that we don't get nullable object types.\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n+        return scope;\n+      }\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      JSType type;\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+        type = null;\n+        if (constructor.getJSType() == null) {\n+          constructor.setJSType(getNativeType(JSType.NULL_TYPE));\n         }\n       }\n-    }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+      n.setJSType(type);\n+      for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+        scope = traverse(arg, scope);\n+      }\n     }\n     return scope;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}