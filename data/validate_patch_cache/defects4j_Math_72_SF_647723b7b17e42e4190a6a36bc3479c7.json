{
    "patch": "public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n\n    final double yMin = f.value(min);\n    final double yMax = f.value(max);\n\n    if (yMin == 0.0) {\n        setResult(min, 0);\n        return result;\n    }\n    if (yMax == 0.0) {\n        setResult(max, 0);\n        return result;\n    }\n\n    if (yMin * yMax > 0.0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n    }\n\n    double x0 = min;\n    double y0 = yMin;\n    double x1 = initial;\n    double y1 = f.value(x1);\n    double x2 = max;\n    double y2 = yMax;\n\n    int i = 0;\n    while (true) {\n        if (y1 == 0.0) {\n            setResult(x1, i);\n            return result;\n        }\n\n        final double L0 = (x1 - x0) / 2.0;\n        final double L2 = (x2 - x1) / 2.0;\n        final double R0 = (y1 - y0) / L0;\n        final double R1 = (y2 - y1) / L2;\n        final double D = (R1 - R0) / (L0 + L2);\n        final double dx = y1 / D;\n\n        if (Double.isInfinite(dx) || Double.isNaN(dx)) {\n            throw new FunctionEvaluationException(y0, y1, y2);\n        }\n\n        final double x = x1 - dx;\n\n        if (((x - x1) * (x2 - x1)) > 0.0) {\n            dx = y1 / (y2 - y0);\n            x -= dx;\n        }\n\n        if (Math.abs(dx) < relativeAccuracy * Math.abs(x)) {\n            setResult(x, i);\n            return result;\n        }\n\n        double y = f.value(x);\n        if (y == 0.0) {\n            setResult(x, i);\n            return result;\n        }\n\n        if (y * y1 < 0.0) {\n            x2 = x1;\n            y2 = y1;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..550777349 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,74 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f, final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    final double yMin = f.value(min);\n+    final double yMax = f.value(max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    if (yMin == 0.0) {\n+        setResult(min, 0);\n+        return result;\n+    }\n+    if (yMax == 0.0) {\n+        setResult(max, 0);\n+        return result;\n+    }\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+    if (yMin * yMax > 0.0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+    }\n+\n+    double x0 = min;\n+    double y0 = yMin;\n+    double x1 = initial;\n+    double y1 = f.value(x1);\n+    double x2 = max;\n+    double y2 = yMax;\n+\n+    int i = 0;\n+    while (true) {\n+        if (y1 == 0.0) {\n+            setResult(x1, i);\n             return result;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+        final double L0 = (x1 - x0) / 2.0;\n+        final double L2 = (x2 - x1) / 2.0;\n+        final double R0 = (y1 - y0) / L0;\n+        final double R1 = (y2 - y1) / L2;\n+        final double D = (R1 - R0) / (L0 + L2);\n+        final double dx = y1 / D;\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n+        if (Double.isInfinite(dx) || Double.isNaN(dx)) {\n+            throw new FunctionEvaluationException(y0, y1, y2);\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        final double x = x1 - dx;\n+\n+        if (((x - x1) * (x2 - x1)) > 0.0) {\n+            dx = y1 / (y2 - y0);\n+            x -= dx;\n         }\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        if (Math.abs(dx) < relativeAccuracy * Math.abs(x)) {\n+            setResult(x, i);\n+            return result;\n         }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        double y = f.value(x);\n+        if (y == 0.0) {\n+            setResult(x, i);\n+            return result;\n+        }\n \n-    }\n+        if (y * y1 < 0.0) {\n+            x2 = x1;\n+            y2 = y1;\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}