{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    switch (child.getToken()) {\n      case GETPROP:\n        // object literal property\n        String name = child.getLastChild().getString();\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child.getLastChild(),\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor\n                .get(name), Warnings.INVALIDATION, name, (type == null ? \"null\"\n                    : type.toString()), n.toString(), \"\"));\n          }\n        }\n        break;\n      case STRING_KEY:\n        // other object literal property\n        name = child.getString();\n        type = typeSystem.getType(getScope(), n, name);\n        prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(t.getSourceName(), child, propertiesToError\n                .get(name), Warnings.INVALIDATION, name, (type == null ? \"null\"\n                    : type.toString()), n.toString(), \"\"));\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..65a4918f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,47 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    switch (child.getToken()) {\n+      case GETPROP:\n+        // object literal property\n+        String name = child.getLastChild().getString();\n+        T type = typeSystem.getType(getScope(), n, name);\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child.getLastChild(),\n+                                   processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(t.getSourceName(), child, propertiesToErrorFor\n+                .get(name), Warnings.INVALIDATION, name, (type == null ? \"null\"\n+                    : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+        break;\n+      case STRING_KEY:\n+        // other object literal property\n+        name = child.getString();\n+        type = typeSystem.getType(getScope(), n, name);\n+        prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+                                   processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(t.getSourceName(), child, propertiesToError\n+                .get(name), Warnings.INVALIDATION, name, (type == null ? \"null\"\n+                    : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}