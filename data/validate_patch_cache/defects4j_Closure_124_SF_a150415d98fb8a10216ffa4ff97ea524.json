{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n  Preconditions.checkArgument(node.isGetProp());\n  \n  Node leftChild = node.getFirstChild();\n  // Handle chained property accesses.\n  while (leftChild.isGetProp()) {\n    leftChild = leftChild.getFirstChild();\n  }\n  if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {\n    return false;\n  }\n  // Handle computed property accesses.\n  if (leftChild.isGetElem() && leftChild.getLastChild().isString()) {\n    String computedPropName = leftChild.getLastChild().getString();\n    if (isNameAssignedTo(computedPropName, replacement)) {\n      return false;\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..1baf0941 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,30 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  // No checks are needed for simple names.\n+  if (node.isName()) {\n+    return true;\n+  }\n+  Preconditions.checkArgument(node.isGetProp());\n+  \n+  Node leftChild = node.getFirstChild();\n+  // Handle chained property accesses.\n+  while (leftChild.isGetProp()) {\n+    leftChild = leftChild.getFirstChild();\n+  }\n+  if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacement)) {\n+    return false;\n+  }\n+  // Handle computed property accesses.\n+  if (leftChild.isGetElem() && leftChild.getLastChild().isString()) {\n+    String computedPropName = leftChild.getLastChild().getString();\n+    if (isNameAssignedTo(computedPropName, replacement)) {\n       return false;\n     }\n-\n-    return true;\n   }\n+  return true;\n+}\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +250,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}