{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    if (input == null || input.length() <= index + 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n       return 0;\n    }\n    int start = index + 2;\n    boolean isHex = input.length() > start + 1 && (input.charAt(start) == 'x' || input.charAt(start) == 'X');\n    int end = start + (isHex ? 1 : 0);\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    if (end == start || end == input.length()) {\n        return 0;\n    }\n    int val = 0;\n    try {\n       val = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n       if (val < 0 || val > 0x10FFFF) {\n            return 0;\n         }\n         if (Character.isHighSurrogate((char) val) || Character.isLowSurrogate((char) val)) {\n           return 0;\n         }\n         if (Character.isSurrogate((char) val)) {\n            char[] chars = Character.toChars(val);\n            out.write(chars);\n         } else {\n            out.write(val);\n         }\n      } catch (NumberFormatException e) {\n         return 0;\n      }\n      return end - index + 1;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..d3b36731 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,37 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    if (input == null || input.length() <= index + 1 || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+       return 0;\n+    }\n+    int start = index + 2;\n+    boolean isHex = input.length() > start + 1 && (input.charAt(start) == 'x' || input.charAt(start) == 'X');\n+    int end = start + (isHex ? 1 : 0);\n+    while (end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n+    if (end == start || end == input.length()) {\n         return 0;\n     }\n+    int val = 0;\n+    try {\n+       val = Integer.parseInt(input.subSequence(start, end).toString(), isHex ? 16 : 10);\n+       if (val < 0 || val > 0x10FFFF) {\n+            return 0;\n+         }\n+         if (Character.isHighSurrogate((char) val) || Character.isLowSurrogate((char) val)) {\n+           return 0;\n+         }\n+         if (Character.isSurrogate((char) val)) {\n+            char[] chars = Character.toChars(val);\n+            out.write(chars);\n+         } else {\n+            out.write(val);\n+         }\n+      } catch (NumberFormatException e) {\n+         return 0;\n+      }\n+      return end - index + 1;\n+  }\n }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<[\u0080\u009f]> but was:<[&#x80;&#x9F;]>",
    "test_result": "FAIL"
}