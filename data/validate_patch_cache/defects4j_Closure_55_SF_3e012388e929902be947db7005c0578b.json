{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  return n.isFunction() && n.getParent() != null && !NodeUtil.isNameDeclaration(n.getParent());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..1474fa39 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,9 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  return n.isFunction() && n.getParent() != null && !NodeUtil.isNameDeclaration(n.getParent());\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}