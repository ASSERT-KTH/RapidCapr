{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    // Keeps track of arguments that have been analyzed for side-effects.\n    Set<Node> parametersWithoutSideEffects = validator.getParametersWithoutSideEffects(call);\n\n    while (arguments.hasNext() && parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n\n      if (argument.getBooleanProp(Node.SIDE_EFFECT_FREE)) {\n        // This argument is side-effect-free, so it is okay to use multiple\n        // times in the call (which may occur inside expectArgumentMatchesParameter).\n        continue;\n      }\n\n      // Ensure that future usage of this argument will be checked for side-effects.\n      if (!parametersWithoutSideEffects.contains(argument)) {\n        parametersWithoutSideEffects.add(argument);\n        // Ensure that even if the parameter already has an unconstrained type,\n        // it will now have a more precise (narrower) type in order to facilitate\n        // proper tracking of side-effects.  See b/67535286.  This only handles\n        // the case where the unconstrained type is a union with the wildcard.\n        if (argument.getJSType() != null && argument.getJSType().isUnionType() &&\n            argument.getJSType().isAllType()) {\n          argument.setJSType(parameter.getJSType());\n        }\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..d68f932a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,16 +1405,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+\n+    // Keeps track of arguments that have been analyzed for side-effects.\n+    Set<Node> parametersWithoutSideEffects = validator.getParametersWithoutSideEffects(call);\n+\n+    while (arguments.hasNext() && parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n+\n+      if (argument.getBooleanProp(Node.SIDE_EFFECT_FREE)) {\n+        // This argument is side-effect-free, so it is okay to use multiple\n+        // times in the call (which may occur inside expectArgumentMatchesParameter).\n+        continue;\n+      }\n+\n+      // Ensure that future usage of this argument will be checked for side-effects.\n+      if (!parametersWithoutSideEffects.contains(argument)) {\n+        parametersWithoutSideEffects.add(argument);\n+        // Ensure that even if the parameter already has an unconstrained type,\n+        // it will now have a more precise (narrower) type in order to facilitate\n+        // proper tracking of side-effects.  See b/67535286.  This only handles\n+        // the case where the unconstrained type is a union with the wildcard.\n+        if (argument.getJSType() != null && argument.getJSType().isUnionType() &&\n+            argument.getJSType().isAllType()) {\n+          argument.setJSType(parameter.getJSType());\n+        }\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}