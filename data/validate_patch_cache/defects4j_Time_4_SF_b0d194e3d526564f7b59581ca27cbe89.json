{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n\n        int index = indexOf(fieldType);\n        int[] newValues;\n\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            newValues = new int[newTypes.length];\n\n            boolean placed = false;\n\n            // find correct insertion point to keep largest-smallest order\n            int i = newTypes.length - 1;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i >= 0; i--) {\n                    if (i == 0) {\n                        break;\n                    }\n                    DateTimeFieldType loopType = iTypes[i - 1];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) >= 0) {\n                                break;\n                            }\n                        }\n                    }\n                    newTypes[i] = iTypes[i - 1];\n                    newValues[i] = iValues[i - 1];\n                }\n            }\n\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n\n            // copy old remaining fields\n            for (int j = 0; j < i; j++) {\n                newTypes[j] = iTypes[j];\n                newValues[j] = iValues[j];\n            }\n\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n\n        if (iValues[index] == value) {\n            return this;\n        }\n\n        newValues = iValues.clone();\n        newValues[index] = value;\n        return new Partial(this, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..8b230f29 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,21 +423,29 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n+public Partial with(DateTimeFieldType fieldType, int value) {\n         if (fieldType == null) {\n             throw new IllegalArgumentException(\"The field type must not be null\");\n         }\n+\n         int index = indexOf(fieldType);\n+        int[] newValues;\n+\n         if (index == -1) {\n             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n+            newValues = new int[newTypes.length];\n+\n+            boolean placed = false;\n+\n             // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n+            int i = newTypes.length - 1;\n             DurationField unitField = fieldType.getDurationType().getField(iChronology);\n             if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n+                for (; i >= 0; i--) {\n+                    if (i == 0) {\n+                        break;\n+                    }\n+                    DateTimeFieldType loopType = iTypes[i - 1];\n                     DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                     if (loopUnitField.isSupported()) {\n                         int compare = unitField.compareTo(loopUnitField);\n@@ -446,30 +454,38 @@ public final class Partial\n                         } else if (compare == 0) {\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n+                            if (rangeField.compareTo(loopRangeField) >= 0) {\n                                 break;\n                             }\n                         }\n                     }\n+                    newTypes[i] = iTypes[i - 1];\n+                    newValues[i] = iValues[i - 1];\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n+\n             newTypes[i] = fieldType;\n             newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n+\n+            // copy old remaining fields\n+            for (int j = 0; j < i; j++) {\n+                newTypes[j] = iTypes[j];\n+                newValues[j] = iValues[j];\n+            }\n+\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n             Partial newPartial = new Partial(iChronology, newTypes, newValues);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n-        if (value == getValue(index)) {\n+\n+        if (iValues[index] == value) {\n             return this;\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n+\n+        newValues = iValues.clone();\n+        newValues[index] = value;\n         return new Partial(this, newValues);\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}