{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, conditional);\n        }\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        } else {\n          // Loop variables are declared in a previous block\n          Node decl = n.getFirstChild();\n          Node var = decl.getFirstChild().getNext();\n          kill.set(var.getIndex());\n          decl.putBooleanProp(NodeUtil.IS_LOOP_VAR, true);\n          computeGenKill(decl, gen, kill, conditional);\n          computeGenKill(n.getSecondChild(), gen, kill, true);\n        }\n        for (Node c = n.getLastChild(); c != null; c = c.getPrevious()) {\n          if (!NodeUtil.isLoopHeader(c)) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c : n.children()) {\n          if (c.hasChildren()) {\n            Node var = c.getFirstChild();\n            if (!conditional) {\n              kill.set(var.getIndex());\n            }\n            var.putBooleanProp(NodeUtil.IS_DECLARED_VAR, true);\n            computeGenKill(var, gen, kill, true);\n            if (var.hasMoreThanOneChild()) {\n              addToSetIfLocal(var, gen);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // May short circuit.\n        int oldGenWords = gen.cardinality();\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        if (gen.cardinality() > oldGenWords) {\n          // If the RHS short-circuited evaluation, mark the LHS gen as live.\n          computeGenKill(n.getFirstChild(), gen, kill, true);\n        }\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        int oldGenWords2 = gen.cardinality();\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        BitSet trueSet = gen;\n        gen = BitSetUtil.copy(gen);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        if (gen.cardinality() < trueSet.cardinality()) {\n          // Selecting the true side will cause some values to be live.\n          computeGenKill(n.getFirstChild(), trueSet, kill, true);\n          gen = trueSet;\n        }\n        kill.or(BitSetUtil.diff(trueSet, gen));\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else if (!NodeUtil.isVarDeclaration(n)) {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n)) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            kill.set(lhs.getIndex());\n          }\n          computeGenKill(lhs, gen, kill, true);\n          computeGenKill(lhs.getNext(), gen, kill, true);\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          computeGenKill(c, gen, kill, true);\n        }\n        return;\n    }\n  } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..dd5eea84 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,9 +175,7 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n+  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n     switch (n.getType()) {\n       case Token.SCRIPT:\n       case Token.BLOCK:\n@@ -187,34 +185,42 @@ class LiveVariablesAnalysis extends\n       case Token.WHILE:\n       case Token.DO:\n       case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+        for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n+          computeGenKill(c, gen, kill, conditional);\n+        }\n         return;\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n         } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          // Loop variables are declared in a previous block\n+          Node decl = n.getFirstChild();\n+          Node var = decl.getFirstChild().getNext();\n+          kill.set(var.getIndex());\n+          decl.putBooleanProp(NodeUtil.IS_LOOP_VAR, true);\n+          computeGenKill(decl, gen, kill, conditional);\n+          computeGenKill(n.getSecondChild(), gen, kill, true);\n+        }\n+        for (Node c = n.getLastChild(); c != null; c = c.getPrevious()) {\n+          if (!NodeUtil.isLoopHeader(c)) {\n+            computeGenKill(c, gen, kill, conditional);\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n \n       case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        for (Node c : n.children()) {\n           if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+            Node var = c.getFirstChild();\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+              kill.set(var.getIndex());\n+            }\n+            var.putBooleanProp(NodeUtil.IS_DECLARED_VAR, true);\n+            computeGenKill(var, gen, kill, true);\n+            if (var.hasMoreThanOneChild()) {\n+              addToSetIfLocal(var, gen);\n             }\n           }\n         }\n@@ -222,45 +228,54 @@ class LiveVariablesAnalysis extends\n \n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // May short circuit.\n+        int oldGenWords = gen.cardinality();\n         computeGenKill(n.getLastChild(), gen, kill, true);\n+        if (gen.cardinality() > oldGenWords) {\n+          // If the RHS short-circuited evaluation, mark the LHS gen as live.\n+          computeGenKill(n.getFirstChild(), gen, kill, true);\n+        }\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n+        int oldGenWords2 = gen.cardinality();\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+        BitSet trueSet = gen;\n+        gen = BitSetUtil.copy(gen);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n+        if (gen.cardinality() < trueSet.cardinality()) {\n+          // Selecting the true side will cause some values to be live.\n+          computeGenKill(n.getFirstChild(), trueSet, kill, true);\n+          gen = trueSet;\n+        }\n+        kill.or(BitSetUtil.diff(trueSet, gen));\n         return;\n \n       case Token.NAME:\n         if (isArgumentsName(n)) {\n           markAllParametersEscaped();\n-        } else {\n+        } else if (!NodeUtil.isVarDeclaration(n)) {\n           addToSetIfLocal(n, gen);\n         }\n         return;\n \n       default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        if (NodeUtil.isAssignmentOp(n)) {\n           Node lhs = n.getFirstChild();\n           if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+            kill.set(lhs.getIndex());\n           }\n+          computeGenKill(lhs, gen, kill, true);\n+          computeGenKill(lhs.getNext(), gen, kill, true);\n+        }\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          computeGenKill(c, gen, kill, true);\n         }\n         return;\n     }\n-  }\n+  } \n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}