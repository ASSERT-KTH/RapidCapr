{
    "patch": "  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  public FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (narrowed == null) {\n        warnings.add(JSError.make(n, CHAIN_NULLABLE));\n      } else if (type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }\n  \n  private void inferPropertiesDeclaredInObjectLiteral(Node objLit) {\n    Node objLitParent = objLit.getParent();\n    JSDocInfo info = objLitParent.getJSDocInfo();\n    if (info == null) {\n      return;\n    }\n\n    JSType type = info.getType();\n    JSType unknownType = getNativeType(UNKNOWN_TYPE);\n    JSType constraint = objLitParent.getJSTypeBeforeCast();\n    constraint = constraint == null ? getNativeType(NO_TYPE) : constraint;\n    ObjectType objPrototype = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objPrototype != null && objPrototype.isRecordType()) {\n      for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext()) {\n        if (keyNode.isStringKey() && !keyNode.isQuotedString()) {\n          String prop = keyNode.getString();\n\n          JSType propType = objPrototype.getPropertyType(prop);\n          if (!propType.isUnknownType()) {\n            continue;\n          }\n\n          Node valueNode = keyNode.getFirstChild();\n          if (valueNode == null) {\n            propType = unknownType;\n          } else {\n            JSType valueType = getValueTypeOfValueNode(valueNode);\n            if (valueType == null) {\n              // Get the declared type from the JSDoc\n              JSType declaredType =\n                  objLitParent.getJSTypeOfProp(prop, constraint);\n              if (declaredType == null || declaredType.isUnknownType()) {\n                propType = unknownType;\n              } else {\n                propType = declaredType;\n              }\n            } else {\n              propType = valueType;\n            }\n          }\n\n          objPrototype.defineInferredProperty(prop, propType, null);\n        }\n      }\n      objLitParent.setJSType(objPrototype.withPropertyType(\"prototype\", unknownType));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..9e351201 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,45 +1111,74 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n-      }\n-    }\n-  }\n-\n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  public FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n+      if (narrowed == null) {\n+        warnings.add(JSError.make(n, CHAIN_NULLABLE));\n+      } else if (type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n     }\n     return scope;\n   }\n+  \n+  private void inferPropertiesDeclaredInObjectLiteral(Node objLit) {\n+    Node objLitParent = objLit.getParent();\n+    JSDocInfo info = objLitParent.getJSDocInfo();\n+    if (info == null) {\n+      return;\n+    }\n+\n+    JSType type = info.getType();\n+    JSType unknownType = getNativeType(UNKNOWN_TYPE);\n+    JSType constraint = objLitParent.getJSTypeBeforeCast();\n+    constraint = constraint == null ? getNativeType(NO_TYPE) : constraint;\n+    ObjectType objPrototype = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objPrototype != null && objPrototype.isRecordType()) {\n+      for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n+           keyNode = keyNode.getNext()) {\n+        if (keyNode.isStringKey() && !keyNode.isQuotedString()) {\n+          String prop = keyNode.getString();\n+\n+          JSType propType = objPrototype.getPropertyType(prop);\n+          if (!propType.isUnknownType()) {\n+            continue;\n+          }\n+\n+          Node valueNode = keyNode.getFirstChild();\n+          if (valueNode == null) {\n+            propType = unknownType;\n+          } else {\n+            JSType valueType = getValueTypeOfValueNode(valueNode);\n+            if (valueType == null) {\n+              // Get the declared type from the JSDoc\n+              JSType declaredType =\n+                  objLitParent.getJSTypeOfProp(prop, constraint);\n+              if (declaredType == null || declaredType.isUnknownType()) {\n+                propType = unknownType;\n+              } else {\n+                propType = declaredType;\n+              }\n+            } else {\n+              propType = valueType;\n+            }\n+          }\n+\n+          objPrototype.defineInferredProperty(prop, propType, null);\n+        }\n+      }\n+      objLitParent.setJSType(objPrototype.withPropertyType(\"prototype\", unknownType));\n+    }\n+  }\n+    }\n+    return scope;\n+  }\n \n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {",
    "result_reason": "error: modifier public not allowed here",
    "test_result": "ERROR"
}