{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      return that.getTypesUnderInequality(this);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n        return new TypePair(JSType.BOOLEAN, null);\n\n      case UNKNOWN:\n        return new TypePair(this, that);\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..5cbaf2a7 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -696,8 +696,7 @@ public abstract class JSType implements Serializable {\n   public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n     if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n+      return that.getTypesUnderInequality(this);\n     }\n \n     // other types\n@@ -706,6 +705,8 @@ public abstract class JSType implements Serializable {\n         return new TypePair(null, null);\n \n       case FALSE:\n+        return new TypePair(JSType.BOOLEAN, null);\n+\n       case UNKNOWN:\n         return new TypePair(this, that);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}