{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    // if we get to here, we know that duplicate X values are not permitted\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // We found an existing point with the same X value\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        XYDataItem newItem = new XYDataItem(x, y);\n\n        // Replace the existing point with the new one\n        this.data.set(index, newItem);\n\n        // Return the overwritten point\n        return existing;\n    } else {\n        // We either allow duplicate X values or didn't find an existing point with the same X value\n\n        XYDataItem newItem = new XYDataItem(x, y);\n\n        if (this.autoSort) {\n            // Sort by X value and maintain sorted order\n            int insertionIndex = Collections.binarySearch(this.data, newItem, new Comparator<XYDataItem>() {\n                @Override\n                public int compare(XYDataItem o1, XYDataItem o2) {\n                    return Double.compare(o1.getX().doubleValue(), o2.getX().doubleValue());\n                }\n            });\n\n            if (insertionIndex < 0) {\n                this.data.add(-insertionIndex - 1, newItem);\n            } else {\n                if (!this.allowDuplicateXValues) {\n                    // If duplicate X values are not allowed, replace the existing point with the new one\n                    this.data.set(insertionIndex, newItem);\n                } else {\n                    // If duplicate X values are allowed, add the new point immediately after the existing point with the same X value\n                    int nextIndex = insertionIndex + 1;\n                    while (nextIndex < this.getItemCount() && newItem.getX().equals(((XYDataItem) this.data.get(nextIndex)).getX())) {\n                        nextIndex++;\n                    }\n                    this.data.add(nextIndex, newItem);\n                }\n            }\n        } else {\n            // Add the new point to the end of the list\n            this.data.add(newItem);\n        }\n\n        if (getItemCount() > this.maximumItemCount) {\n            // Remove the oldest point if we exceed the maximum item count\n            this.data.remove(0);\n        }\n\n        fireSeriesChanged();\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..eb70634 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,66 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null) {\n+        throw new IllegalArgumentException(\"Null 'x' argument.\");\n+    }\n+\n+    // if we get to here, we know that duplicate X values are not permitted\n+    int index = indexOf(x);\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        // We found an existing point with the same X value\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        XYDataItem newItem = new XYDataItem(x, y);\n+\n+        // Replace the existing point with the new one\n+        this.data.set(index, newItem);\n+\n+        // Return the overwritten point\n+        return existing;\n+    } else {\n+        // We either allow duplicate X values or didn't find an existing point with the same X value\n+\n+        XYDataItem newItem = new XYDataItem(x, y);\n+\n+        if (this.autoSort) {\n+            // Sort by X value and maintain sorted order\n+            int insertionIndex = Collections.binarySearch(this.data, newItem, new Comparator<XYDataItem>() {\n+                @Override\n+                public int compare(XYDataItem o1, XYDataItem o2) {\n+                    return Double.compare(o1.getX().doubleValue(), o2.getX().doubleValue());\n+                }\n+            });\n+\n+            if (insertionIndex < 0) {\n+                this.data.add(-insertionIndex - 1, newItem);\n+            } else {\n+                if (!this.allowDuplicateXValues) {\n+                    // If duplicate X values are not allowed, replace the existing point with the new one\n+                    this.data.set(insertionIndex, newItem);\n+                } else {\n+                    // If duplicate X values are allowed, add the new point immediately after the existing point with the same X value\n+                    int nextIndex = insertionIndex + 1;\n+                    while (nextIndex < this.getItemCount() && newItem.getX().equals(((XYDataItem) this.data.get(nextIndex)).getX())) {\n+                        nextIndex++;\n+                    }\n+                    this.data.add(nextIndex, newItem);\n+                }\n+            }\n+        } else {\n+            // Add the new point to the end of the list\n+            this.data.add(newItem);\n+        }\n+\n+        if (getItemCount() > this.maximumItemCount) {\n+            // Remove the oldest point if we exceed the maximum item count\n+            this.data.remove(0);\n+        }\n+\n+        fireSeriesChanged();\n+        return null;\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: generics are not supported in -source 1.4",
    "test_result": "ERROR"
}