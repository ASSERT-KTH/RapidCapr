{
    "patch": "    private void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n      Preconditions.checkArgument(inferred || type != null);\n\n      // Only allow declarations of NAMEs and qualified names.\n      boolean shouldDeclareOnGlobalThis = false;\n      if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LET ||\n            parent.getType() == Token.CONST ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n      } else {\n        Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));\n      }\n      String variableName = null;\n      if (n.isName()) {\n        variableName = n.getString();\n      } else {\n        variableName = n.getFirstChild().getString() + \".\" + n.getLastChild().getString();\n      }\n      Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n\n      // If n is a property, then we should really declare it in the\n      // scope where the root object appears. This helps out people\n      // who declare \"global\" names in an anonymous namespace.\n      Scope scopeToDeclareIn = scope;\n\n      // Don't try to declare in the global scope if there's\n      // already a symbol there with this name.\n      Var oldVar = null;\n      if (scope.isDeclared(variableName, false)) {\n        oldVar = scope.getVar(variableName);\n      } else {\n        Scope.Var var = scope.getSlot(variableName);\n        if (var != null) {\n          oldVar = var.getVar();\n        }\n      }\n\n      if (oldVar != null) {\n        scopeToDeclareIn = oldVar.getScope();\n      }\n\n      // declared in closest scope?\n      if (oldVar != null) {\n        validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);\n      } else {\n        if (!inferred) {\n          setDeferredType(n, type);\n        }\n        CompilerInput input = compiler.getInput(sourceName);\n        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n        if (shouldDeclareOnGlobalThis) {\n          ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n          boolean isExtern = input.isExtern();\n          if (inferred) {\n            globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);\n          } else {\n            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n          }\n        }\n\n        // If we're in the global scope, also declare var.prototype\n        // in the scope chain.\n        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n          FunctionType fnType = (FunctionType) type;\n          if (fnType.isConstructor() || fnType.isInterface()) {\n            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    getNativeType(JSTypeNative.OBJECT_TYPE)));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..62abe0ad 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,16 +869,17 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    private void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n       Preconditions.checkArgument(inferred || type != null);\n \n-      // Only allow declarations of NAMEs and qualfied names.\n+      // Only allow declarations of NAMEs and qualified names.\n       boolean shouldDeclareOnGlobalThis = false;\n       if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n+            parent.getType() == Token.LET ||\n+            parent.getType() == Token.CONST ||\n             parent.getType() == Token.CATCH);\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n             (parent.getType() == Token.VAR ||\n@@ -889,20 +890,37 @@ final class TypedScopeCreator implements ScopeCreator {\n             (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.EXPR_RESULT));\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n+      String variableName = null;\n+      if (n.isName()) {\n+        variableName = n.getString();\n+      } else {\n+        variableName = n.getFirstChild().getString() + \".\" + n.getLastChild().getString();\n+      }\n+      Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n \n       // If n is a property, then we should really declare it in the\n       // scope where the root object appears. This helps out people\n       // who declare \"global\" names in an anonymous namespace.\n       Scope scopeToDeclareIn = scope;\n \n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n+      // Don't try to declare in the global scope if there's\n+      // already a symbol there with this name.\n+      Var oldVar = null;\n+      if (scope.isDeclared(variableName, false)) {\n+        oldVar = scope.getVar(variableName);\n+      } else {\n+        Scope.Var var = scope.getSlot(variableName);\n+        if (var != null) {\n+          oldVar = var.getVar();\n+        }\n+      }\n+\n+      if (oldVar != null) {\n+        scopeToDeclareIn = oldVar.getScope();\n+      }\n \n       // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n+      if (oldVar != null) {\n         validator.expectUndeclaredVariable(\n             sourceName, n, parent, oldVar, variableName, type);\n       } else {\n@@ -938,7 +956,7 @@ final class TypedScopeCreator implements ScopeCreator {\n                 /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n                 superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n+                    getNativeType(JSTypeNative.OBJECT_TYPE)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}