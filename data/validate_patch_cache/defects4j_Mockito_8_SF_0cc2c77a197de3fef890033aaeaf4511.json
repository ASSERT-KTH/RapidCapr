{
    "patch": "private void populateTypeParameters(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters, Set<Type> visitedTypes) {\n    if (visitedTypes.contains(classType)) {\n        return; // Skip if already visited\n    }\n    visitedTypes.add(classType); // Mark current type as visited\n\n    if (!(classType.getRawType() instanceof Class)) {\n        return; // Skip if not a class\n    }\n    Class<?> rawClass = (Class<?>) classType.getRawType();\n    TypeVariable<?>[] typeParameters = rawClass.getTypeParameters();\n    Type[] actualTypeArguments = classType.getActualTypeArguments();\n\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            populateTypeParameters((ParameterizedType) actualTypeArgument, contextualActualTypeParameters, visitedTypes);\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..cccf90b7f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,33 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private void populateTypeParameters(ParameterizedType classType, Map<TypeVariable<?>, Type> contextualActualTypeParameters, Set<Type> visitedTypes) {\n+    if (visitedTypes.contains(classType)) {\n+        return; // Skip if already visited\n+    }\n+    visitedTypes.add(classType); // Mark current type as visited\n+\n+    if (!(classType.getRawType() instanceof Class)) {\n+        return; // Skip if not a class\n+    }\n+    Class<?> rawClass = (Class<?>) classType.getRawType();\n+    TypeVariable<?>[] typeParameters = rawClass.getTypeParameters();\n+    Type[] actualTypeArguments = classType.getActualTypeArguments();\n+\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable<?> typeParameter = typeParameters[i];\n+        Type actualTypeArgument = actualTypeArguments[i];\n+\n+        if (actualTypeArgument instanceof WildcardType) {\n+            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+        } else if (actualTypeArgument instanceof ParameterizedType) {\n+            populateTypeParameters((ParameterizedType) actualTypeArgument, contextualActualTypeParameters, visitedTypes);\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}