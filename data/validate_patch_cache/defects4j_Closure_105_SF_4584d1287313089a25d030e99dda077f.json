{
    "patch": "  /**\n  *  Try to fold string concatenation of array literals that are arguments to join.\n  **/\n  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n    // Merges adjacent String nodes.\n    while (elem != null) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        if (elem.isString()){\n          sb.append(elem.getString());\n        } else if (elem.isNumber()) {\n          sb.append(elem.getString());\n        } else if (elem.isNull()) {\n          sb.append(\"null\");\n        } else if (elem.isTrue()) {\n          sb.append(\"true\");\n        } else if (elem.isFalse()) {\n          sb.append(\"false\");\n        } else {\n          return;\n        }\n      } else if (elem.isObjectLit() && elem.hasChildren()){\n        sb.append(JsonStream.serialize(new EsprimaUtil().parseJsonObjectToJsonString(elem)));\n      } else if (elem.isArrayLit() && elem.hasChildren()){\n        sb.append(JsonStream.serialize(new EsprimaUtil().parseJsonArrayToJsonString(elem)));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n\n      elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportCodeChange();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..5d0cae12 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,6 +1458,9 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n+  /**\n+  *  Try to fold string concatenation of array literals that are arguments to join.\n+  **/\n   void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n@@ -1483,7 +1486,23 @@ class FoldConstants extends AbstractPostOrderCallback\n         if (sb.length() > 0) {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getStringValue(elem));\n+        if (elem.isString()){\n+          sb.append(elem.getString());\n+        } else if (elem.isNumber()) {\n+          sb.append(elem.getString());\n+        } else if (elem.isNull()) {\n+          sb.append(\"null\");\n+        } else if (elem.isTrue()) {\n+          sb.append(\"true\");\n+        } else if (elem.isFalse()) {\n+          sb.append(\"false\");\n+        } else {\n+          return;\n+        }\n+      } else if (elem.isObjectLit() && elem.hasChildren()){\n+        sb.append(JsonStream.serialize(new EsprimaUtil().parseJsonObjectToJsonString(elem)));\n+      } else if (elem.isArrayLit() && elem.hasChildren()){\n+        sb.append(JsonStream.serialize(new EsprimaUtil().parseJsonArrayToJsonString(elem)));\n       } else {\n         if (sb.length() > 0) {\n           // + 2 for the quotes.\n@@ -1494,6 +1513,7 @@ class FoldConstants extends AbstractPostOrderCallback\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n+\n       elem = elem.getNext();\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}