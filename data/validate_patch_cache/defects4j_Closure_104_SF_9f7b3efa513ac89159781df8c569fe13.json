{
    "patch": "public class UnionType extends JSType {\n\n  private final ImmutableList<JSType> alternates;\n\n  private UnionType(ImmutableList<JSType> alternates) {\n    this.alternates = alternates;\n  }\n\n  public static JSType makeUnion(ImmutableList<JSType> types) {\n    return makeUnionHelper(types, false);\n  }\n\n  public static JSType makeUnionSupertype(ImmutableList<JSType> types) {\n    return makeUnionHelper(types, true);\n  }\n\n  /**\n   * This helper method creates a UnionType of the given types, removing undefined types if it sees\n   * one. If allowSupertype is true, non-interfaces are upcast if they become the only member of the\n   * new Union.\n   *\n   * This method is flexible enough to be used in the top-level JSType.createUnionType factories.\n   * @param types types to combine\n   * @param allowSupertype if true, a single non-interface alternate is upcast to its supertype\n   */\n  private static JSType makeUnionHelper(ImmutableList<JSType> types, boolean allowSupertype) {\n    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n    for (JSType type : types) {\n      if (!type.isUnknownType() && !type.isUndefinedType()) {\n        builder.add(type);\n      }\n    }\n    List<JSType> list = builder.build();\n    if (list.isEmpty()) {\n      return JSTypeNative.NO_TYPE;\n    }\n    if (list.size() == 1) {\n      return allowSupertype ? list.get(0).autobox() : list.get(0);\n    }\n    for (int i = 0; i < list.size(); i++) {\n      if (list.get(i).isAllType()) {\n        return list.get(i);\n      }\n    }\n    if (list.contains(JSTypeNative.ALL_TYPE)) {\n      return JSTypeNative.ALL_TYPE;\n    }\n\n    builder = ImmutableList.builder();\n    for (JSType type : list) {\n      if (!type.isSubtype(JSTypeNative.NULL_TYPE)) {\n        builder.add(type);\n      }\n    }\n    ImmutableList<JSType> deduped = JSType.dedup(builder.build());\n    if (deduped.size() == 1) {\n      // Union of one type.\n      return allowSupertype ? deduped.get(0).autobox() : deduped.get(0);\n    }\n\n    ImmutableList<JSType> original = deduped;\n    boolean tryAgain;\n    do {\n      tryAgain = false;\n      for (int i = 0; i < deduped.size(); i++) {\n        boolean changedList = false;\n        JSType iType = deduped.get(i);\n        if (iType.equals(JSTypeNative.UNKNOWN_TYPE)) {\n          if (deduped.size() > 2) {\n            builder = ImmutableList.builder();\n            for (int j = 0; j < deduped.size(); j++) {\n              if (j != i) {\n                builder.add(deduped.get(j));\n              }\n            }\n            deduped = builder.build();\n            tryAgain = true;\n            break;\n          } else {\n            return JSTypeNative.ALL_TYPE;\n          }\n        }\n        if (iType.equals(JSTypeNative.OBJECT_TYPE) || iType.equals(JSTypeNative.FUNCTION_INSTANCE_TYPE) ||\n            iType.equals(JSTypeNative.FUNCTION_PROTOTYPE)) {\n          continue;\n        }\n        for (int j = 0; j < deduped.size(); j++) {\n          if (i == j) {\n            continue;\n          }\n          JSType jType = deduped.get(j);\n          if (jType.isSubtype(iType)) {\n            builder = ImmutableList.builder();\n            for (int k = 0; k < deduped.size(); k++) {\n              if (k != i) {\n                builder.add(deduped.get(k));\n              }\n            }\n            deduped = builder.build();\n            changedList = true;\n            tryAgain = true;\n            break;\n          }\n        }\n        if (changedList) {\n          break;\n        }\n      }\n    } while (tryAgain);\n\n    // If all members of the union are numbers or string enums than the union type\n    // behaves like a loose union, i.e., if a member of the union is chosen then\n    // the result is a number, similarly for string enums.\n    boolean isLooseUnion = true;\n    boolean isNumUnion = true;\n    boolean isStringEnumUnion = true;\n    for (JSType type : deduped) {\n      isLooseUnion = isLooseUnion && (type.isString() || type.isNumber());\n      isNumUnion = isNumUnion && type.isNumberValueType() && !type.isBigIntValueType();\n      isStringEnumUnion = isStringEnumUnion && type.isEnum() && type.isSubtypeOfString();\n    }\n    if (isLooseUnion) {\n      return getLeastCommonAncestor(deduped);\n    } else if (isNumUnion) {\n      return JSTypeNative.NUMBER_TYPE;\n    } else if (isStringEnumUnion) {\n      return deduped.get(0).normalize();\n    } else {\n      return new UnionType(original);\n    }\n  }\n\n  /**\n   * Remove duplicates from an ordered list of types, preferring the first occurence.\n   */\n  private static ImmutableList<JSType> dedup(ImmutableList<JSType> in) {\n    List<JSType> out = new ArrayList<>(in.size());\n    Set<Integer> dedupedTextualValues = new HashSet<>();\n    for (JSType type : in) {\n      if (type.isNumber() || type.isString()) {\n        int tv = type.toString().hashCode();\n        if (!dedupedTextualValues.contains(tv)) {\n          dedupedTextualValues.add(tv);\n          out.add(type);\n        }\n      } else if (!out.contains(type)) {\n        out.add(type);\n      }\n    }\n    return ImmutableList.copyOf(out);\n  }\n\n  public int getAlternatesCount() {\n    return alternates.size();\n  }\n\n  public ImmutableList<JSType> getAlternates() {\n    return alternates;\n  }\n\n  @Override\n  boolean isSubtypeBase(JSType that) {\n    if (this.alternates.isEmpty() || that.isUnknownType() || that.isAny()) {\n      return true;\n    }\n    if (that.isUnionType()) {\n      // We need to compare pairwise against all other alternates.\n      for (JSType thatAlternate : ((UnionType) that).alternates) {\n        boolean foundSuperType = false;\n        for (JSType thisAlternate : this.alternates) {\n          if (thisAlternate.isSubtype(thatAlternate)) {\n            foundSuperType = true;\n            break;\n          }\n        }\n        if (!foundSuperType) {\n          return false;\n        }\n      }\n      return true;\n    }\n    for (JSType alternate : alternates) {\n      if (!alternate.isSubtype(that)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  JSType autobox(JSType other) {\n    if (alternates.contains(other)) {\n      return this;\n    }\n    if (other instanceof UnionType) {\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      for (JSType alternate : ((UnionType) other).alternates) {\n        builder.add(autobox(alternate));\n      }\n      return makeUnion(builder.build());\n    }\n    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n    boolean alreadyIn = false;\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(other)) {\n        alreadyIn = true;\n        break;\n      }\n      if (other.isSubtype(alternate)) {\n        builder.add(other);\n      } else {\n        builder.add(alternate);\n      }\n    }\n    if (!alreadyIn) {\n      builder.add(other);\n    }\n    return makeUnion(dedup(builder.build()));\n  }\n\n  @Override\n  public JSType specialize(JSType other) {\n    if (other.isUnionType()) {\n      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n      for (JSType alternate : ((UnionType) other).alternates) {\n        builder.add(specialize(alternate));\n      }\n      return makeUnion(builder.build());\n    }\n    if (other.isUnknownType()) {\n      return JSTypeNative.UNKNOWN_TYPE;\n    }\n    if (other.isBottom()) {\n      return this;\n    }\n    if (this.isTop() || other.isTop()) {\n      return JSTypeNative.TOP_OBJECT;\n    }\n    if (this.isBottom()) {\n      return JSTypeNative.NO_TYPE;\n    }\n    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n    boolean changed = false;\n    for (JSType alternate : alternates) {\n      JSType specialized = alternate.specialize(other);\n      if (!specialized.isBottom()) {\n        // The specialized alternate could be bottom if other contains bottom\n        // and this alternate can't be specialized in such a way as to exclude\n        // bottom.\n        builder.add(specialized);\n      } else {\n        changed = true;\n      }\n    }\n    if (changed) {\n      return makeUnion(dedup(builder.build()));\n    } else {\n      return this;\n    }\n  }\n\n  @Override\n  boolean canTestForEqualityWith(JSType that) {\n    if (!that.isUnionType()) {\n      return true;\n    }\n    UnionType unionType = (UnionType) that;\n    for (JSType t1 : alternates) {\n      for (JSType t2 : unionType.alternates) {\n        if (t1.canTestForEqualityWith(t2)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return whether the union contains an alternate that has an exception handler.\n   */\n  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..e58d9b93 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,24 +279,296 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+public class UnionType extends JSType {\n+\n+  private final ImmutableList<JSType> alternates;\n+\n+  private UnionType(ImmutableList<JSType> alternates) {\n+    this.alternates = alternates;\n+  }\n+\n+  public static JSType makeUnion(ImmutableList<JSType> types) {\n+    return makeUnionHelper(types, false);\n+  }\n+\n+  public static JSType makeUnionSupertype(ImmutableList<JSType> types) {\n+    return makeUnionHelper(types, true);\n+  }\n+\n+  /**\n+   * This helper method creates a UnionType of the given types, removing undefined types if it sees\n+   * one. If allowSupertype is true, non-interfaces are upcast if they become the only member of the\n+   * new Union.\n+   *\n+   * This method is flexible enough to be used in the top-level JSType.createUnionType factories.\n+   * @param types types to combine\n+   * @param allowSupertype if true, a single non-interface alternate is upcast to its supertype\n+   */\n+  private static JSType makeUnionHelper(ImmutableList<JSType> types, boolean allowSupertype) {\n+    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+    for (JSType type : types) {\n+      if (!type.isUnknownType() && !type.isUndefinedType()) {\n+        builder.add(type);\n+      }\n+    }\n+    List<JSType> list = builder.build();\n+    if (list.isEmpty()) {\n+      return JSTypeNative.NO_TYPE;\n+    }\n+    if (list.size() == 1) {\n+      return allowSupertype ? list.get(0).autobox() : list.get(0);\n+    }\n+    for (int i = 0; i < list.size(); i++) {\n+      if (list.get(i).isAllType()) {\n+        return list.get(i);\n+      }\n+    }\n+    if (list.contains(JSTypeNative.ALL_TYPE)) {\n+      return JSTypeNative.ALL_TYPE;\n+    }\n+\n+    builder = ImmutableList.builder();\n+    for (JSType type : list) {\n+      if (!type.isSubtype(JSTypeNative.NULL_TYPE)) {\n+        builder.add(type);\n+      }\n+    }\n+    ImmutableList<JSType> deduped = JSType.dedup(builder.build());\n+    if (deduped.size() == 1) {\n+      // Union of one type.\n+      return allowSupertype ? deduped.get(0).autobox() : deduped.get(0);\n+    }\n+\n+    ImmutableList<JSType> original = deduped;\n+    boolean tryAgain;\n+    do {\n+      tryAgain = false;\n+      for (int i = 0; i < deduped.size(); i++) {\n+        boolean changedList = false;\n+        JSType iType = deduped.get(i);\n+        if (iType.equals(JSTypeNative.UNKNOWN_TYPE)) {\n+          if (deduped.size() > 2) {\n+            builder = ImmutableList.builder();\n+            for (int j = 0; j < deduped.size(); j++) {\n+              if (j != i) {\n+                builder.add(deduped.get(j));\n+              }\n+            }\n+            deduped = builder.build();\n+            tryAgain = true;\n+            break;\n+          } else {\n+            return JSTypeNative.ALL_TYPE;\n+          }\n+        }\n+        if (iType.equals(JSTypeNative.OBJECT_TYPE) || iType.equals(JSTypeNative.FUNCTION_INSTANCE_TYPE) ||\n+            iType.equals(JSTypeNative.FUNCTION_PROTOTYPE)) {\n+          continue;\n+        }\n+        for (int j = 0; j < deduped.size(); j++) {\n+          if (i == j) {\n+            continue;\n+          }\n+          JSType jType = deduped.get(j);\n+          if (jType.isSubtype(iType)) {\n+            builder = ImmutableList.builder();\n+            for (int k = 0; k < deduped.size(); k++) {\n+              if (k != i) {\n+                builder.add(deduped.get(k));\n+              }\n+            }\n+            deduped = builder.build();\n+            changedList = true;\n+            tryAgain = true;\n+            break;\n+          }\n+        }\n+        if (changedList) {\n+          break;\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n+    } while (tryAgain);\n+\n+    // If all members of the union are numbers or string enums than the union type\n+    // behaves like a loose union, i.e., if a member of the union is chosen then\n+    // the result is a number, similarly for string enums.\n+    boolean isLooseUnion = true;\n+    boolean isNumUnion = true;\n+    boolean isStringEnumUnion = true;\n+    for (JSType type : deduped) {\n+      isLooseUnion = isLooseUnion && (type.isString() || type.isNumber());\n+      isNumUnion = isNumUnion && type.isNumberValueType() && !type.isBigIntValueType();\n+      isStringEnumUnion = isStringEnumUnion && type.isEnum() && type.isSubtypeOfString();\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    if (isLooseUnion) {\n+      return getLeastCommonAncestor(deduped);\n+    } else if (isNumUnion) {\n+      return JSTypeNative.NUMBER_TYPE;\n+    } else if (isStringEnumUnion) {\n+      return deduped.get(0).normalize();\n     } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+      return new UnionType(original);\n     }\n   }\n \n+  /**\n+   * Remove duplicates from an ordered list of types, preferring the first occurence.\n+   */\n+  private static ImmutableList<JSType> dedup(ImmutableList<JSType> in) {\n+    List<JSType> out = new ArrayList<>(in.size());\n+    Set<Integer> dedupedTextualValues = new HashSet<>();\n+    for (JSType type : in) {\n+      if (type.isNumber() || type.isString()) {\n+        int tv = type.toString().hashCode();\n+        if (!dedupedTextualValues.contains(tv)) {\n+          dedupedTextualValues.add(tv);\n+          out.add(type);\n+        }\n+      } else if (!out.contains(type)) {\n+        out.add(type);\n+      }\n+    }\n+    return ImmutableList.copyOf(out);\n+  }\n+\n+  public int getAlternatesCount() {\n+    return alternates.size();\n+  }\n+\n+  public ImmutableList<JSType> getAlternates() {\n+    return alternates;\n+  }\n+\n+  @Override\n+  boolean isSubtypeBase(JSType that) {\n+    if (this.alternates.isEmpty() || that.isUnknownType() || that.isAny()) {\n+      return true;\n+    }\n+    if (that.isUnionType()) {\n+      // We need to compare pairwise against all other alternates.\n+      for (JSType thatAlternate : ((UnionType) that).alternates) {\n+        boolean foundSuperType = false;\n+        for (JSType thisAlternate : this.alternates) {\n+          if (thisAlternate.isSubtype(thatAlternate)) {\n+            foundSuperType = true;\n+            break;\n+          }\n+        }\n+        if (!foundSuperType) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    }\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isSubtype(that)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  JSType autobox(JSType other) {\n+    if (alternates.contains(other)) {\n+      return this;\n+    }\n+    if (other instanceof UnionType) {\n+      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+      for (JSType alternate : ((UnionType) other).alternates) {\n+        builder.add(autobox(alternate));\n+      }\n+      return makeUnion(builder.build());\n+    }\n+    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+    boolean alreadyIn = false;\n+    for (JSType alternate : alternates) {\n+      if (alternate.isSubtype(other)) {\n+        alreadyIn = true;\n+        break;\n+      }\n+      if (other.isSubtype(alternate)) {\n+        builder.add(other);\n+      } else {\n+        builder.add(alternate);\n+      }\n+    }\n+    if (!alreadyIn) {\n+      builder.add(other);\n+    }\n+    return makeUnion(dedup(builder.build()));\n+  }\n+\n+  @Override\n+  public JSType specialize(JSType other) {\n+    if (other.isUnionType()) {\n+      ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+      for (JSType alternate : ((UnionType) other).alternates) {\n+        builder.add(specialize(alternate));\n+      }\n+      return makeUnion(builder.build());\n+    }\n+    if (other.isUnknownType()) {\n+      return JSTypeNative.UNKNOWN_TYPE;\n+    }\n+    if (other.isBottom()) {\n+      return this;\n+    }\n+    if (this.isTop() || other.isTop()) {\n+      return JSTypeNative.TOP_OBJECT;\n+    }\n+    if (this.isBottom()) {\n+      return JSTypeNative.NO_TYPE;\n+    }\n+    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+    boolean changed = false;\n+    for (JSType alternate : alternates) {\n+      JSType specialized = alternate.specialize(other);\n+      if (!specialized.isBottom()) {\n+        // The specialized alternate could be bottom if other contains bottom\n+        // and this alternate can't be specialized in such a way as to exclude\n+        // bottom.\n+        builder.add(specialized);\n+      } else {\n+        changed = true;\n+      }\n+    }\n+    if (changed) {\n+      return makeUnion(dedup(builder.build()));\n+    } else {\n+      return this;\n+    }\n+  }\n+\n+  @Override\n+  boolean canTestForEqualityWith(JSType that) {\n+    if (!that.isUnionType()) {\n+      return true;\n+    }\n+    UnionType unionType = (UnionType) that;\n+    for (JSType t1 : alternates) {\n+      for (JSType t2 : unionType.alternates) {\n+        if (t1.canTestForEqualityWith(t2)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n+   * @return whether the union contains an alternate that has an exception handler.\n+   */\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   /**\n    * Two union types are equal if they have the same number of alternates\n    * and all alternates are equal.\n@@ -330,6 +602,10 @@ public class UnionType extends JSType {\n     }\n     return true;\n   }\n+}\n+    }\n+    return true;\n+  }\n \n   /**\n    * A {@link UnionType} contains a given type (alternate) iff the member",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}