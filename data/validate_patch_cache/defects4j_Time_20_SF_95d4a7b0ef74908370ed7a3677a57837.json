{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        int idx = str.indexOf(id);\n        while (idx >= 0) {\n            if ((idx == 0 || Character.isWhitespace(str.charAt(idx - 1))) &&\n                    (idx + idLen == str.length() ||\n                     Character.isWhitespace(str.charAt(idx + idLen)) ||\n                     str.charAt(idx + idLen) == '/')) {\n                char nextChar = '\\0';\n                if (idx + idLen < str.length()) {\n                    nextChar = str.charAt(idx + idLen);\n                }\n                if (nextChar == '\\0' || !Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + idx + idLen;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..7ec799fe 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,25 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        int idx = str.indexOf(id);\n+        while (idx >= 0) {\n+            if ((idx == 0 || Character.isWhitespace(str.charAt(idx - 1))) &&\n+                    (idx + idLen == str.length() ||\n+                     Character.isWhitespace(str.charAt(idx + idLen)) ||\n+                     str.charAt(idx + idLen) == '/')) {\n+                char nextChar = '\\0';\n+                if (idx + idLen < str.length()) {\n+                    nextChar = str.charAt(idx + idLen);\n+                }\n+                if (nextChar == '\\0' || !Character.isLetterOrDigit(nextChar) && nextChar != '_') {\n                     bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                    return position + idx + idLen;\n                 }\n             }\n-            return ~position;\n-        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}