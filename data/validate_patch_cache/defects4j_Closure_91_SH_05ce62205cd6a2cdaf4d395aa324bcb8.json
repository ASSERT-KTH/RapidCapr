{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (n.getUserData() != null && n.getUserData() instanceof NodeTraversal.CompilerPass) {\n        NodeTraversal.CompilerPass pass = (NodeTraversal.CompilerPass) n.getUserData();\n        if (pass.shouldTraverseLentObjectPrototype()) {\n          return true;\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..cb2afb41 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,15 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (n.getUserData() != null && n.getUserData() instanceof NodeTraversal.CompilerPass) {\n+        NodeTraversal.CompilerPass pass = (NodeTraversal.CompilerPass) n.getUserData();\n+        if (pass.shouldTraverseLentObjectPrototype()) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}