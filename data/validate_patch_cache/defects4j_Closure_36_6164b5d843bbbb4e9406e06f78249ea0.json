{
    "patch": "import com.google.common.base.Preconditions;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CodingConvention;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.ReferenceMap;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.SubclassRelationship;\n\npublic class BugFixer {\n  private AbstractCompiler compiler;\n\n  BugFixer(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n\n  private boolean canInline(\n      Reference declaration,\n      Reference initialization,\n      Reference reference) {\n    if (!isValidDeclaration(declaration)\n        || !isValidInitialization(initialization)\n        || !isValidReference(reference)) {\n      return false;\n    }\n\n    // If the value is read more than once, skip it.\n    // VAR declarations and EXPR_RESULT don't need the value, but other\n    // ASSIGN expressions parents do.\n    if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {\n      return false;\n    }\n\n    // Be very conservative and do no cross control structures or\n    // scope boundaries\n    if (declaration.getBasicBlock() != initialization.getBasicBlock()\n        || declaration.getBasicBlock() != reference.getBasicBlock()) {\n      return false;\n    }\n\n    // Do not inline into a call node. This would change\n    // the context in which it was being called. For example,\n    //   var a = b.c;\n    //   a();\n    // should not be inlined, because it calls a in the context of b\n    // rather than the context of the window.\n    //   var a = b.c;\n    //   f(a)\n    // is ok.\n    Node value = initialization.getAssignedValue();\n    Preconditions.checkState(value != null);\n    if (value.isGetProp()\n        && reference.getParent().isCall()\n        && reference.getParent().getFirstChild() == reference.getNode()) {\n      return false;\n    }\n\n    if (value.isFunction()) {\n      Node callNode = reference.getParent();\n      if (callNode != null && callNode.isCall()) {\n        CodingConvention convention = compiler.getCodingConvention();\n        // Bug 2388531: Don't inline subclass definitions into class defining\n        // calls as this confused class removing logic.\n        SubclassRelationship relationship =\n            convention.getClassesDefinedByCall(callNode);\n        if (relationship != null) {\n          return false;\n        }\n\n        // issue 668: Don't inline singleton getter methods\n        // calls as this confused class removing logic.\n        final Node functionNode = value;\n        if (functionNode.getParent() != null\n            && functionNode.getParent().isGetProp()\n            && convention.isPropertyGetter(functionNode.getParent())) {\n          return false;\n        }\n      }\n    }\n\n    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n  }\n\n  private boolean isValidDeclaration(Reference declaration) {\n    return declaration != null\n        && declaration.getBasicBlock() != null\n        && NodeUtil.isStatementBlock(declaration.getBasicBlock().getNode());\n  }\n\n  private boolean isValidInitialization(Reference initialization) {\n    return initialization != null\n        && initialization.getAssignedValue() != null\n        && initialization.isDeclaration()\n        && initialization.getNode().isVar();\n  }\n\n  private boolean isValidReference(Reference reference) {\n    return reference != null && reference.getNode() != null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..eabe1593 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -516,69 +516,106 @@ class InlineVariables implements CompilerPass {\n      * @return true if the provided reference and declaration can be safely\n      *         inlined according to our criteria\n      */\n-    private boolean canInline(\n-        Reference declaration,\n-        Reference initialization,\n-        Reference reference) {\n-      if (!isValidDeclaration(declaration)\n-          || !isValidInitialization(initialization)\n-          || !isValidReference(reference)) {\n-        return false;\n-      }\n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CodingConvention;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.ReferenceMap;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.SubclassRelationship;\n \n-      // If the value is read more than once, skip it.\n-      // VAR declarations and EXPR_RESULT don't need the value, but other\n-      // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n-        return false;\n-      }\n+public class BugFixer {\n+  private AbstractCompiler compiler;\n \n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n-        return false;\n-      }\n+  BugFixer(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n \n-      // Do not inline into a call node. This would change\n-      // the context in which it was being called. For example,\n-      //   var a = b.c;\n-      //   a();\n-      // should not be inlined, because it calls a in the context of b\n-      // rather than the context of the window.\n-      //   var a = b.c;\n-      //   f(a)\n-      // is ok.\n-      Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n-      if (value.isGetProp()\n-          && reference.getParent().isCall()\n-          && reference.getParent().getFirstChild() == reference.getNode()) {\n-        return false;\n-      }\n+  private boolean canInline(\n+      Reference declaration,\n+      Reference initialization,\n+      Reference reference) {\n+    if (!isValidDeclaration(declaration)\n+        || !isValidInitialization(initialization)\n+        || !isValidReference(reference)) {\n+      return false;\n+    }\n \n-      if (value.isFunction()) {\n-        Node callNode = reference.getParent();\n-        if (reference.getParent().isCall()) {\n-          CodingConvention convention = compiler.getCodingConvention();\n-          // Bug 2388531: Don't inline subclass definitions into class defining\n-          // calls as this confused class removing logic.\n-          SubclassRelationship relationship =\n-              convention.getClassesDefinedByCall(callNode);\n-          if (relationship != null) {\n-            return false;\n-          }\n+    // If the value is read more than once, skip it.\n+    // VAR declarations and EXPR_RESULT don't need the value, but other\n+    // ASSIGN expressions parents do.\n+    if (declaration != initialization && !initialization.getGrandparent().isExprResult()) {\n+      return false;\n+    }\n \n-          // issue 668: Don't inline singleton getter methods\n-          // calls as this confused class removing logic.\n+    // Be very conservative and do no cross control structures or\n+    // scope boundaries\n+    if (declaration.getBasicBlock() != initialization.getBasicBlock()\n+        || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+      return false;\n+    }\n+\n+    // Do not inline into a call node. This would change\n+    // the context in which it was being called. For example,\n+    //   var a = b.c;\n+    //   a();\n+    // should not be inlined, because it calls a in the context of b\n+    // rather than the context of the window.\n+    //   var a = b.c;\n+    //   f(a)\n+    // is ok.\n+    Node value = initialization.getAssignedValue();\n+    Preconditions.checkState(value != null);\n+    if (value.isGetProp()\n+        && reference.getParent().isCall()\n+        && reference.getParent().getFirstChild() == reference.getNode()) {\n+      return false;\n+    }\n+\n+    if (value.isFunction()) {\n+      Node callNode = reference.getParent();\n+      if (callNode != null && callNode.isCall()) {\n+        CodingConvention convention = compiler.getCodingConvention();\n+        // Bug 2388531: Don't inline subclass definitions into class defining\n+        // calls as this confused class removing logic.\n+        SubclassRelationship relationship =\n+            convention.getClassesDefinedByCall(callNode);\n+        if (relationship != null) {\n+          return false;\n         }\n-      }\n \n-      return canMoveAggressively(value) ||\n-          canMoveModerately(initialization, reference);\n+        // issue 668: Don't inline singleton getter methods\n+        // calls as this confused class removing logic.\n+        final Node functionNode = value;\n+        if (functionNode.getParent() != null\n+            && functionNode.getParent().isGetProp()\n+            && convention.isPropertyGetter(functionNode.getParent())) {\n+          return false;\n+        }\n+      }\n     }\n \n+    return canMoveAggressively(value) || canMoveModerately(initialization, reference);\n+  }\n+\n+  private boolean isValidDeclaration(Reference declaration) {\n+    return declaration != null\n+        && declaration.getBasicBlock() != null\n+        && NodeUtil.isStatementBlock(declaration.getBasicBlock().getNode());\n+  }\n+\n+  private boolean isValidInitialization(Reference initialization) {\n+    return initialization != null\n+        && initialization.getAssignedValue() != null\n+        && initialization.isDeclaration()\n+        && initialization.getNode().isVar();\n+  }\n+\n+  private boolean isValidReference(Reference reference) {\n+    return reference != null && reference.getNode() != null;\n+  }\n+}\n+\n     /**\n      * If the value is a literal, we can cross more boundaries to inline it.\n      */",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}