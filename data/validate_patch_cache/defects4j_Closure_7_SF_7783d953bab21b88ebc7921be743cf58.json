{
    "patch": "public JSType caseObjectType(ObjectType type) {\n    if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (resultEqualsValue && ctorType.isSubtype(type)) {\n            // function type\n            List<String> prototypes = type.getOwnPropertyNames();\n            for (String prototype : prototypes) {\n                Maybe<ObjectType> objTypeMaybe = type.getSlot(prototype);\n                if (!objTypeMaybe.isUnknown()) {\n                    ObjectType objType = objTypeMaybe.getWithDefault(null);\n                    if (objType != null && objType.getOwnPropertyNames().contains(\"apply\")\n                            && objType.getOwnPropertyNames().contains(\"call\")) {\n                        return ctorType;\n                    }\n                }\n            }\n        }\n    } else if (matchesExpectation(\"object\")) {\n        return type;\n    }\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..695a146a 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,28 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n+public JSType caseObjectType(ObjectType type) {\n+    if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+        if (resultEqualsValue && ctorType.isSubtype(type)) {\n+            // function type\n+            List<String> prototypes = type.getOwnPropertyNames();\n+            for (String prototype : prototypes) {\n+                Maybe<ObjectType> objTypeMaybe = type.getSlot(prototype);\n+                if (!objTypeMaybe.isUnknown()) {\n+                    ObjectType objType = objTypeMaybe.getWithDefault(null);\n+                    if (objType != null && objType.getOwnPropertyNames().contains(\"apply\")\n+                            && objType.getOwnPropertyNames().contains(\"call\")) {\n+                        return ctorType;\n+                    }\n+                }\n+            }\n+        }\n+    } else if (matchesExpectation(\"object\")) {\n+        return type;\n     }\n+    return null;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}