{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n      JSDocInfo docInfo = null;\n      for (; objectType != null;\n           objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        if (docInfo != null &&\n            docInfo.getVisibility() != Visibility.INHERITED) {\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput =\n          t.getInput().getName().equals(docInfo.getSourceFileName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = Visibility.INHERITED;\n        boolean isMethod = false;\n        if (parent.getSecondChild() != null && NodeUtil.isFunctionExpression(parent.getSecondChild())) {\n            isMethod = parent.getFirstChild().isGetProp() && isMethodDefinition(parent.getParent());\n        } else if (parent.getSecondChild() != null) {\n            ObjectType superOT = ObjectType.cast(ownerType.getImplicitPrototype().getImplicitPrototype());\n            if (superOT != null) {\n                Node method = superOT.getSlot(propertyName);\n                if (method != null\n                    && method.isFunction()\n                    && NodeUtil.isFunctionExpression(method)) {\n                    isMethod = isMethodDefinition(method.getParent());\n                } else {\n                    overridingInfo = superOT.getOwnPropertyJSDocInfo(propertyName);\n                }\n            }\n            if (overridingInfo != null) {\n                overridingVisibility = overridingInfo.getVisibility();\n            }\n        }\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility == Visibility.PRIVATE && !sameInput && !isMethod) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility && !isMethod) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || ownerType.differsFrom(currentClass))) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }\n\n  private boolean isMethodDefinition(Node n) {\n    return (n == null || n.isScript() || n.isBlock()) ? false : NodeUtil.isFunctionDeclaration(n)\n        || (NodeUtil.isClassMethod(n) && n.getLastChild().isFunction());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..615ba72c 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -438,25 +438,43 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n       }\n \n       boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n+          t.getInput().getName().equals(docInfo.getSourceFileName());\n       Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n       if (isOverride) {\n         // Check an ASSIGN statement that's trying to override a property\n         // on a superclass.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = Visibility.INHERITED;\n+        boolean isMethod = false;\n+        if (parent.getSecondChild() != null && NodeUtil.isFunctionExpression(parent.getSecondChild())) {\n+            isMethod = parent.getFirstChild().isGetProp() && isMethodDefinition(parent.getParent());\n+        } else if (parent.getSecondChild() != null) {\n+            ObjectType superOT = ObjectType.cast(ownerType.getImplicitPrototype().getImplicitPrototype());\n+            if (superOT != null) {\n+                Node method = superOT.getSlot(propertyName);\n+                if (method != null\n+                    && method.isFunction()\n+                    && NodeUtil.isFunctionExpression(method)) {\n+                    isMethod = isMethodDefinition(method.getParent());\n+                } else {\n+                    overridingInfo = superOT.getOwnPropertyJSDocInfo(propertyName);\n+                }\n+            }\n+            if (overridingInfo != null) {\n+                overridingVisibility = overridingInfo.getVisibility();\n+            }\n+        }\n \n         // Check that (a) the property *can* be overridden, and\n         // (b) that the visibility of the override is the same as the\n         // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n+        if (visibility == Visibility.PRIVATE && !sameInput && !isMethod) {\n           compiler.report(\n               t.makeError(getprop, PRIVATE_OVERRIDE,\n                   objectType.toString()));\n         } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n+            overridingVisibility != visibility && !isMethod) {\n           compiler.report(\n               t.makeError(getprop, VISIBILITY_MISMATCH,\n                   visibility.name(), objectType.toString(),\n@@ -499,6 +517,11 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     }\n   }\n \n+  private boolean isMethodDefinition(Node n) {\n+    return (n == null || n.isScript() || n.isBlock()) ? false : NodeUtil.isFunctionDeclaration(n)\n+        || (NodeUtil.isClassMethod(n) && n.getLastChild().isFunction());\n+  }\n+\n   /**\n    * Whether the given access of a private constructor is legal.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}