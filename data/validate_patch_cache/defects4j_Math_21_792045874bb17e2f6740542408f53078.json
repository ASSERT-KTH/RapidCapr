{
    "patch": "public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n        throws NonPositiveDefiniteMatrixException {\n \n    final int order = matrix.getRowDimension();\n    final double[][] c = matrix.getData();\n    final double[][] b = new double[order][order];\n \n    int[] swap = new int[order];\n    int[] index = new int[order];\n    for (int i = 0; i < order; ++i) {\n        index[i] = i;\n    }\n \n    int r = 0;\n    for (boolean loop = true; loop;) {\n \n        // find maximal diagonal element\n        swap[r] = r;\n        for (int i = r + 1; i < order; ++i) {\n            int ii = index[i];\n            int isi = index[swap[r]];\n            if (c[ii][ii] > c[isi][isi]) {\n                swap[r] = i;\n            }\n        }\n \n \n        // swap elements\n        if (swap[r] != r) {\n            int tmp = index[r];\n            index[r] = index[swap[r]];\n            index[swap[r]] = tmp;\n        }\n \n        // check diagonal element\n        int ir = index[r];\n        if (c[ir][ir] < small) {\n \n            if (r == 0) {\n                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n            }\n \n            // check remaining diagonal elements\n            for (int i = r; i < order; ++i) {\n                if (c[index[i]][index[i]] < -small) {\n                    // there is at least one sufficiently negative diagonal element,\n                    // the symmetric positive semidefinite matrix is wrong\n                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                }\n            }\n \n            // all remaining diagonal elements are close to zero, we consider we have\n            // found the rank of the symmetric positive semidefinite matrix\n            ++r;\n            loop = false;\n \n        } else {\n \n            // transform the matrix\n            final BigReal sqrt = new BigReal(FastMath.sqrt(c[ir][ir]));\n            b[r][r] = sqrt.doubleValue();\n            final BigReal inverse = new BigReal(1, sqrt.scale());\n            inverse.divide(sqrt);\n            for (int i = r + 1; i < order; ++i) {\n                final int ii = index[i];\n                final BigReal e = new BigReal(c[ii][ir], inverse.scale());\n                e.divide(sqrt);\n                b[i][r] = e.doubleValue();\n                // Note: We're not using BigReal here to avoid the overhead, since the results we're computing are so small they are guaranteed to fit in a double.\n                final double ee = e.doubleValue();\n                c[ii][ii] -= ee * ee;\n                for (int j = r + 1; j < i; ++j) {\n                    final int ij = index[j];\n                    final double f = c[ii][ij] - ee * b[j][r];\n                    c[ii][ij] = f;\n                    c[ij][ii] = f;\n                }\n            }\n \n            // prepare next iteration\n            loop = ++r < order;\n        }\n    }\n \n    // build the root matrix\n    rank = r;\n    root = MatrixUtils.createRealMatrix(order, r);\n    for (int i = 0; i < order; ++i) {\n        for (int j = 0; j < r; ++j) {\n            root.setEntry(index[i], j, b[i][j]);\n        }\n    }\n \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\nindex 04488e593..558a701b6 100644\n--- a/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n+++ b/src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java\n@@ -59,96 +59,100 @@ public class RectangularCholeskyDecomposition {\n      * @exception NonPositiveDefiniteMatrixException if the matrix is not\n      * positive semidefinite.\n      */\n-    public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n+public RectangularCholeskyDecomposition(RealMatrix matrix, double small)\n         throws NonPositiveDefiniteMatrixException {\n-\n-        final int order = matrix.getRowDimension();\n-        final double[][] c = matrix.getData();\n-        final double[][] b = new double[order][order];\n-\n-        int[] swap  = new int[order];\n-        int[] index = new int[order];\n-        for (int i = 0; i < order; ++i) {\n-            index[i] = i;\n-        }\n-\n-        int r = 0;\n-        for (boolean loop = true; loop;) {\n-\n-            // find maximal diagonal element\n-            swap[r] = r;\n-            for (int i = r + 1; i < order; ++i) {\n-                int ii  = index[i];\n-                int isi = index[swap[i]];\n-                if (c[ii][ii] > c[isi][isi]) {\n-                    swap[r] = i;\n-                }\n+ \n+    final int order = matrix.getRowDimension();\n+    final double[][] c = matrix.getData();\n+    final double[][] b = new double[order][order];\n+ \n+    int[] swap = new int[order];\n+    int[] index = new int[order];\n+    for (int i = 0; i < order; ++i) {\n+        index[i] = i;\n+    }\n+ \n+    int r = 0;\n+    for (boolean loop = true; loop;) {\n+ \n+        // find maximal diagonal element\n+        swap[r] = r;\n+        for (int i = r + 1; i < order; ++i) {\n+            int ii = index[i];\n+            int isi = index[swap[r]];\n+            if (c[ii][ii] > c[isi][isi]) {\n+                swap[r] = i;\n             }\n-\n-\n-            // swap elements\n-            if (swap[r] != r) {\n-                int tmp = index[r];\n-                index[r] = index[swap[r]];\n-                index[swap[r]] = tmp;\n+        }\n+ \n+ \n+        // swap elements\n+        if (swap[r] != r) {\n+            int tmp = index[r];\n+            index[r] = index[swap[r]];\n+            index[swap[r]] = tmp;\n+        }\n+ \n+        // check diagonal element\n+        int ir = index[r];\n+        if (c[ir][ir] < small) {\n+ \n+            if (r == 0) {\n+                throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n             }\n-\n-            // check diagonal element\n-            int ir = index[r];\n-            if (c[ir][ir] < small) {\n-\n-                if (r == 0) {\n-                    throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);\n+ \n+            // check remaining diagonal elements\n+            for (int i = r; i < order; ++i) {\n+                if (c[index[i]][index[i]] < -small) {\n+                    // there is at least one sufficiently negative diagonal element,\n+                    // the symmetric positive semidefinite matrix is wrong\n+                    throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n                 }\n-\n-                // check remaining diagonal elements\n-                for (int i = r; i < order; ++i) {\n-                    if (c[index[i]][index[i]] < -small) {\n-                        // there is at least one sufficiently negative diagonal element,\n-                        // the symmetric positive semidefinite matrix is wrong\n-                        throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small);\n-                    }\n-                }\n-\n-                // all remaining diagonal elements are close to zero, we consider we have\n-                // found the rank of the symmetric positive semidefinite matrix\n-                ++r;\n-                loop = false;\n-\n-            } else {\n-\n-                // transform the matrix\n-                final double sqrt = FastMath.sqrt(c[ir][ir]);\n-                b[r][r] = sqrt;\n-                final double inverse  = 1 / sqrt;\n-                for (int i = r + 1; i < order; ++i) {\n-                    final int ii = index[i];\n-                    final double e = inverse * c[ii][ir];\n-                    b[i][r] = e;\n-                    c[ii][ii] -= e * e;\n-                    for (int j = r + 1; j < i; ++j) {\n-                        final int ij = index[j];\n-                        final double f = c[ii][ij] - e * b[j][r];\n-                        c[ii][ij] = f;\n-                        c[ij][ii] = f;\n-                    }\n+            }\n+ \n+            // all remaining diagonal elements are close to zero, we consider we have\n+            // found the rank of the symmetric positive semidefinite matrix\n+            ++r;\n+            loop = false;\n+ \n+        } else {\n+ \n+            // transform the matrix\n+            final BigReal sqrt = new BigReal(FastMath.sqrt(c[ir][ir]));\n+            b[r][r] = sqrt.doubleValue();\n+            final BigReal inverse = new BigReal(1, sqrt.scale());\n+            inverse.divide(sqrt);\n+            for (int i = r + 1; i < order; ++i) {\n+                final int ii = index[i];\n+                final BigReal e = new BigReal(c[ii][ir], inverse.scale());\n+                e.divide(sqrt);\n+                b[i][r] = e.doubleValue();\n+                // Note: We're not using BigReal here to avoid the overhead, since the results we're computing are so small they are guaranteed to fit in a double.\n+                final double ee = e.doubleValue();\n+                c[ii][ii] -= ee * ee;\n+                for (int j = r + 1; j < i; ++j) {\n+                    final int ij = index[j];\n+                    final double f = c[ii][ij] - ee * b[j][r];\n+                    c[ii][ij] = f;\n+                    c[ij][ii] = f;\n                 }\n-\n-                // prepare next iteration\n-                loop = ++r < order;\n             }\n+ \n+            // prepare next iteration\n+            loop = ++r < order;\n         }\n-\n-        // build the root matrix\n-        rank = r;\n-        root = MatrixUtils.createRealMatrix(order, r);\n-        for (int i = 0; i < order; ++i) {\n-            for (int j = 0; j < r; ++j) {\n-                root.setEntry(index[i], j, b[i][j]);\n-            }\n+    }\n+ \n+    // build the root matrix\n+    rank = r;\n+    root = MatrixUtils.createRealMatrix(order, r);\n+    for (int i = 0; i < order; ++i) {\n+        for (int j = 0; j < r; ++j) {\n+            root.setEntry(index[i], j, b[i][j]);\n         }\n-\n     }\n+ \n+}\n \n     /** Get the root of the covariance matrix.\n      * The root is the rectangular matrix <code>B</code> such that",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}