{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n      // Notice that removing unreferenced function args breaks\n      // Function.prototype.length. In advanced mode, we don't really care\n      // about this: we consider \"length\" the equivalent of reflecting on\n      // the function's lexical source.\n      //\n      // Rather than create a new option for this, we assume that if the user\n      // is removing globals, then it's OK to remove unused function args.\n      //\n      // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n      Node function = fnScope.getRootNode();\n      Preconditions.checkState(function.isFunction());\n      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n      }\n\n      Node argList = getFunctionArgList(function);\n      boolean modifyCallers = modifyCallSites\n          && callSiteOptimizer.canModifyCallers(function);\n      if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        List<Node> functionParams = NodeUtil.getFunctionParameters(function).children();\n        int numParams = functionParams.size();\n        for (int i = numParams - 1; i >= 0; i--) {\n          Node param = functionParams.get(i);\n          Var var = fnScope.getVar(param.getString());\n          if (var == null || !referenced.contains(var)) {\n            argList.removeChild(param);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n        markParametersAsUsed(function, referenced);\n      } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..19d7e87a 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,46 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+      // Notice that removing unreferenced function args breaks\n+      // Function.prototype.length. In advanced mode, we don't really care\n+      // about this: we consider \"length\" the equivalent of reflecting on\n+      // the function's lexical source.\n+      //\n+      // Rather than create a new option for this, we assume that if the user\n+      // is removing globals, then it's OK to remove unused function args.\n+      //\n+      // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+      Node function = fnScope.getRootNode();\n+      Preconditions.checkState(function.isFunction());\n+      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+      }\n+\n+      Node argList = getFunctionArgList(function);\n+      boolean modifyCallers = modifyCallSites\n+          && callSiteOptimizer.canModifyCallers(function);\n+      if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        List<Node> functionParams = NodeUtil.getFunctionParameters(function).children();\n+        int numParams = functionParams.size();\n+        for (int i = numParams - 1; i >= 0; i--) {\n+          Node param = functionParams.get(i);\n+          Var var = fnScope.getVar(param.getString());\n+          if (var == null || !referenced.contains(var)) {\n+            argList.removeChild(param);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+        markParametersAsUsed(function, referenced);\n+      } else {\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}