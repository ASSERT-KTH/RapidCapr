{
    "patch": "import com.google.javascript.jscomp.CompilationLevel;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.JsMessage.Style;\nimport com.google.javascript.jscomp.XtbMessageBundle;\nimport com.google.javascript.jscomp.compiler.CodeGenerator.Format;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class MyClass {\n\n  protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n      options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n      options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n      level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n      level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n      options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n      formattingOption.applyToOptions(options);\n    }\n\n    options.setProcessClosurePrimitives(flags.processClosurePrimitives);\n\n    options.setProcessJqueryPrimitives(\n        CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n        flags.processJqueryPrimitives\n    );\n\n    options.setAngularPass(flags.angularPass);\n\n    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.setMessageBundle(new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject)\n        );\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n      options.setMessageBundle(new EmptyMessageBundle());\n      options.setClosurePass(false);\n    }\n\n    return options;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..1a3fc4bf 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -803,6 +803,18 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n+import com.google.javascript.jscomp.CompilationLevel;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.JsMessage.Style;\n+import com.google.javascript.jscomp.XtbMessageBundle;\n+import com.google.javascript.jscomp.compiler.CodeGenerator.Format;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class MyClass {\n+\n   protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     if (flags.processJqueryPrimitives) {\n@@ -834,35 +846,32 @@ public class CommandLineRunner extends\n       formattingOption.applyToOptions(options);\n     }\n \n-    options.closurePass = flags.processClosurePrimitives;\n+    options.setProcessClosurePrimitives(flags.processClosurePrimitives);\n \n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n+    options.setProcessJqueryPrimitives(\n+        CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n+        flags.processJqueryPrimitives\n+    );\n \n-    options.angularPass = flags.angularPass;\n+    options.setAngularPass(flags.angularPass);\n \n     if (!flags.translationsFile.isEmpty()) {\n       try {\n-        options.messageBundle = new XtbMessageBundle(\n+        options.setMessageBundle(new XtbMessageBundle(\n             new FileInputStream(flags.translationsFile),\n-            flags.translationsProject);\n+            flags.translationsProject)\n+        );\n       } catch (IOException e) {\n         throw new RuntimeException(\"Reading XTB file\", e);\n       }\n     } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n+      options.setMessageBundle(new EmptyMessageBundle());\n+      options.setClosurePass(false);\n     }\n \n     return options;\n   }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}