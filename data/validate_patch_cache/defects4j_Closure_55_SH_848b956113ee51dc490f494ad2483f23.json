{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  return n.isFunction() &&\n         n.getFirstChild().isName() &&\n         !NodeUtil.isEmptyBlock(n.getLastChild());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..38b5723a 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,11 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  return n.isFunction() &&\n+         n.getFirstChild().isName() &&\n+         !NodeUtil.isEmptyBlock(n.getLastChild());\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}