{
    "patch": "        final int maxEval = 100;\n        final double[] initialGuess = (new ParameterGuesser(getObservations())).guess();\n        final SimpleBounds bounds = new SimpleBounds(initialGuess.length);\n\n        for (int i = 0; i < bounds.getDimension(); ++i) {\n            bounds.setLower(i, Double.NEGATIVE_INFINITY);\n            bounds.setUpper(i, Double.POSITIVE_INFINITY);\n        }\n\n        final LeastSquaresOptimizer.Optimum optimum =\n                new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1e-10)\n                                                  .withParameterRelativeTolerance(1e-10)\n                                                  .withMaxIterations(maxEval)\n                                                  .optimize(new LevenbergMarquardtProblem(\n                    new AbstractLeastSquaresProblem.Evaluation() {\n\n                        public EvaluationCounter getEvaluation() {\n                            return new EvaluationCounter() {\n                                public double evaluate(final double[] params) {\n                                    return getObservations().computeResiduals(params).getL1Norm();\n                                }\n                            };\n                        }\n            \n                        public int getObservationLength() {\n                            return getObservations().getN();\n                        }\n        \n                        public int getParameterLength() {\n                            return initialGuess.length;\n                        }\n        \n                        public double[] getTarget() {\n                            return getObservations().getValues();\n                        }\n            \n                        public double[][] jacobian() {\n                            final double[][] jacobian = new double[getObservationLength()][getParameterLength()];\n                            for (int i = 0; i < getObservationLength(); ++i) {\n                                final double[] grad = getObservations().gradient(getObservations().residuals(initialGuess))[i];\n                                for (int j = 0; j < getParameterLength(); ++j) {\n                                    jacobian[i][j] = grad[j];\n                                }\n                            }\n                            return jacobian;\n                        }\n        \n                        public double[] getStart() {\n                            return initialGuess;\n                        }\n                    }, bounds, getObservations().getWeights(), null, null, true));\n        \n        return optimum.getPoint().toArray();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..14af9669d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,59 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final int maxEval = 100;\n+        final double[] initialGuess = (new ParameterGuesser(getObservations())).guess();\n+        final SimpleBounds bounds = new SimpleBounds(initialGuess.length);\n+\n+        for (int i = 0; i < bounds.getDimension(); ++i) {\n+            bounds.setLower(i, Double.NEGATIVE_INFINITY);\n+            bounds.setUpper(i, Double.POSITIVE_INFINITY);\n+        }\n+\n+        final LeastSquaresOptimizer.Optimum optimum =\n+                new LevenbergMarquardtOptimizer().withCostRelativeTolerance(1e-10)\n+                                                  .withParameterRelativeTolerance(1e-10)\n+                                                  .withMaxIterations(maxEval)\n+                                                  .optimize(new LevenbergMarquardtProblem(\n+                    new AbstractLeastSquaresProblem.Evaluation() {\n+\n+                        public EvaluationCounter getEvaluation() {\n+                            return new EvaluationCounter() {\n+                                public double evaluate(final double[] params) {\n+                                    return getObservations().computeResiduals(params).getL1Norm();\n+                                }\n+                            };\n+                        }\n+            \n+                        public int getObservationLength() {\n+                            return getObservations().getN();\n+                        }\n+        \n+                        public int getParameterLength() {\n+                            return initialGuess.length;\n+                        }\n+        \n+                        public double[] getTarget() {\n+                            return getObservations().getValues();\n+                        }\n+            \n+                        public double[][] jacobian() {\n+                            final double[][] jacobian = new double[getObservationLength()][getParameterLength()];\n+                            for (int i = 0; i < getObservationLength(); ++i) {\n+                                final double[] grad = getObservations().gradient(getObservations().residuals(initialGuess))[i];\n+                                for (int j = 0; j < getParameterLength(); ++j) {\n+                                    jacobian[i][j] = grad[j];\n+                                }\n+                            }\n+                            return jacobian;\n+                        }\n+        \n+                        public double[] getStart() {\n+                            return initialGuess;\n+                        }\n+                    }, bounds, getObservations().getWeights(), null, null, true));\n+        \n+        return optimum.getPoint().toArray();\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}