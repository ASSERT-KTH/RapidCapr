{
    "patch": "        int[] uniCounters = uniCounters();\n\n        int m = ((2 * totalSize) - (last * (last + 1)));\n        int i;\n        for (i = last; i > 0; i--) {\n            final int denom = i + 1;\n            final int j = (m > index) ? (m - index - 1) / last : 0;\n            indices[i - 1] = j;\n            m -= denom * j;\n            index -= j * uniCounters[i - 1] - (denom - 1) * uniCounters[last];\n        }\n        indices[last] = index;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..6b562c0e1 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,18 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int[] uniCounters = uniCounters();\n+\n+        int m = ((2 * totalSize) - (last * (last + 1)));\n+        int i;\n+        for (i = last; i > 0; i--) {\n+            final int denom = i + 1;\n+            final int j = (m > index) ? (m - index - 1) / last : 0;\n+            indices[i - 1] = j;\n+            m -= denom * j;\n+            index -= j * uniCounters[i - 1] - (denom - 1) * uniCounters[last];\n         }\n-        --idx;\n-        indices[last] = idx;\n+        indices[last] = index;\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}