{
    "patch": "import java.lang.reflect.ParameterizedType;\nimport java.lang.reflect.Type;\nimport java.lang.reflect.TypeVariable;\nimport java.lang.reflect.WildcardType;\nimport java.util.Map;\n\nimport javax.lang.model.element.TypeElement;\nimport javax.lang.model.element.TypeParameterElement;\nimport javax.lang.model.element.VariableElement;\nimport javax.lang.model.type.DeclaredType;\nimport javax.lang.model.type.TypeKind;\nimport javax.lang.model.type.TypeMirror;\nimport javax.lang.model.util.Elements;\n\npublic class ParameterizedTypeProcessor {\n\n    private final Elements elementUtils;\n\n    public ParameterizedTypeProcessor(Elements elementUtils) {\n        this.elementUtils = elementUtils;\n    }\n\n    public void processParameterizedType(VariableElement element, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n        TypeMirror type = element.asType();\n        if (type.getKind() != TypeKind.DECLARED) {\n            return;\n        }\n\n        DeclaredType declaredType = (DeclaredType) type;\n        TypeElement typeElement = (TypeElement) declaredType.asElement();\n\n        List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();\n        List<? extends TypeParameterElement> typeParameters = typeElement.getTypeParameters();\n        for (int i = 0; i < typeParameters.size(); i++) {\n            TypeParameterElement typeParameter = typeParameters.get(i);\n            TypeMirror typeArgument = typeArguments.get(i);\n\n            Type resolvedTypeArgument = resolveType(typeArgument, contextualActualTypeParameters);\n\n            if (resolvedTypeArgument instanceof TypeVariable<?>) {\n                TypeVariable<?> resolvedTypeVariableArgument = (TypeVariable<?>) resolvedTypeArgument;\n                Type resolvedTypeVariableValue = contextualActualTypeParameters.get(resolvedTypeVariableArgument);\n                contextualActualTypeParameters.put(typeParameter,\n                        resolvedTypeVariableValue != null ? resolvedTypeVariableValue : resolvedTypeVariableArgument);\n            } else if (resolvedTypeArgument instanceof WildcardType) {\n                WildcardType wildcardTypeArgument = (WildcardType) resolvedTypeArgument;\n                Type extendsBound = wildcardTypeArgument.getExtendsBound();\n                Type superBound = wildcardTypeArgument.getSuperBound();\n                if (extendsBound != null) {\n                    contextualActualTypeParameters.put(typeParameter, extendsBound);\n                } else if (superBound != null) {\n                    contextualActualTypeParameters.put(typeParameter, superBound);\n                }\n            } else {\n                contextualActualTypeParameters.put(typeParameter, resolvedTypeArgument);\n            }\n        }\n    }\n\n    private Type resolveType(TypeMirror type, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n        if (type instanceof TypeVariable<?>) {\n            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n            return contextualActualTypeParameters.getOrDefault(typeVariable, typeVariable);\n        } else if (type instanceof ParameterizedType) {\n            ParameterizedType parameterizedType = (ParameterizedType) type;\n            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n            Type[] resolvedTypeArguments = new Type[actualTypeArguments.length];\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                resolvedTypeArguments[i] = resolveType(actualTypeArguments[i], contextualActualTypeParameters);\n            }\n            return new ParameterizedTypeImpl((Class<?>) parameterizedType.getRawType(), resolvedTypeArguments);\n        } else if (type instanceof WildcardType) {\n            WildcardType wildcardType = (WildcardType) type;\n            Type[] upperBounds = wildcardType.getUpperBounds();\n            Type[] resolvedUpperBounds = new Type[upperBounds.length];\n            for (int i = 0; i < upperBounds.length; i++) {\n                resolvedUpperBounds[i] = resolveType(upperBounds[i], contextualActualTypeParameters);\n            }\n            Type[] lowerBounds = wildcardType.getLowerBounds();\n            Type[] resolvedLowerBounds = new Type[lowerBounds.length];\n            for (int i = 0; i < lowerBounds.length; i++) {\n                resolvedLowerBounds[i] = resolveType(lowerBounds[i], contextualActualTypeParameters);\n            }\n            return new WildcardTypeImpl(resolvedUpperBounds, resolvedLowerBounds);\n        } else {\n            return type;\n        }\n    }\n\n    private class ParameterizedTypeImpl implements ParameterizedType {\n\n        private final Class<?> rawType;\n        private final Type[] typeArguments;\n\n        public ParameterizedTypeImpl(Class<?> rawType, Type[] typeArguments) {\n            this.rawType = rawType;\n            this.typeArguments = typeArguments;\n        }\n\n        @Override\n        public Type[] getActualTypeArguments() {\n            return typeArguments;\n        }\n\n        @Override\n        public Type getRawType() {\n            return rawType;\n        }\n\n        @Override\n        public Type getOwnerType() {\n            return null;\n        }\n    }\n\n    private class WildcardTypeImpl implements WildcardType {\n\n        private final Type[] upperBounds;\n        private final Type[] lowerBounds;\n\n        public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {\n            this.upperBounds = upperBounds;\n            this.lowerBounds = lowerBounds;\n        }\n\n        @Override\n        public Type[] getUpperBounds() {\n            return upperBounds;\n        }\n\n        @Override\n        public Type[] getLowerBounds() {\n            return lowerBounds;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..0e78f9863 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,142 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+import java.lang.reflect.WildcardType;\n+import java.util.Map;\n+\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.element.TypeParameterElement;\n+import javax.lang.model.element.VariableElement;\n+import javax.lang.model.type.DeclaredType;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.util.Elements;\n+\n+public class ParameterizedTypeProcessor {\n+\n+    private final Elements elementUtils;\n+\n+    public ParameterizedTypeProcessor(Elements elementUtils) {\n+        this.elementUtils = elementUtils;\n+    }\n+\n+    public void processParameterizedType(VariableElement element, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+        TypeMirror type = element.asType();\n+        if (type.getKind() != TypeKind.DECLARED) {\n+            return;\n+        }\n+\n+        DeclaredType declaredType = (DeclaredType) type;\n+        TypeElement typeElement = (TypeElement) declaredType.asElement();\n+\n+        List<? extends TypeMirror> typeArguments = declaredType.getTypeArguments();\n+        List<? extends TypeParameterElement> typeParameters = typeElement.getTypeParameters();\n+        for (int i = 0; i < typeParameters.size(); i++) {\n+            TypeParameterElement typeParameter = typeParameters.get(i);\n+            TypeMirror typeArgument = typeArguments.get(i);\n+\n+            Type resolvedTypeArgument = resolveType(typeArgument, contextualActualTypeParameters);\n+\n+            if (resolvedTypeArgument instanceof TypeVariable<?>) {\n+                TypeVariable<?> resolvedTypeVariableArgument = (TypeVariable<?>) resolvedTypeArgument;\n+                Type resolvedTypeVariableValue = contextualActualTypeParameters.get(resolvedTypeVariableArgument);\n+                contextualActualTypeParameters.put(typeParameter,\n+                        resolvedTypeVariableValue != null ? resolvedTypeVariableValue : resolvedTypeVariableArgument);\n+            } else if (resolvedTypeArgument instanceof WildcardType) {\n+                WildcardType wildcardTypeArgument = (WildcardType) resolvedTypeArgument;\n+                Type extendsBound = wildcardTypeArgument.getExtendsBound();\n+                Type superBound = wildcardTypeArgument.getSuperBound();\n+                if (extendsBound != null) {\n+                    contextualActualTypeParameters.put(typeParameter, extendsBound);\n+                } else if (superBound != null) {\n+                    contextualActualTypeParameters.put(typeParameter, superBound);\n+                }\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, resolvedTypeArgument);\n+            }\n+        }\n+    }\n+\n+    private Type resolveType(TypeMirror type, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+        if (type instanceof TypeVariable<?>) {\n+            TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+            return contextualActualTypeParameters.getOrDefault(typeVariable, typeVariable);\n+        } else if (type instanceof ParameterizedType) {\n+            ParameterizedType parameterizedType = (ParameterizedType) type;\n+            Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+            Type[] resolvedTypeArguments = new Type[actualTypeArguments.length];\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                resolvedTypeArguments[i] = resolveType(actualTypeArguments[i], contextualActualTypeParameters);\n+            }\n+            return new ParameterizedTypeImpl((Class<?>) parameterizedType.getRawType(), resolvedTypeArguments);\n+        } else if (type instanceof WildcardType) {\n+            WildcardType wildcardType = (WildcardType) type;\n+            Type[] upperBounds = wildcardType.getUpperBounds();\n+            Type[] resolvedUpperBounds = new Type[upperBounds.length];\n+            for (int i = 0; i < upperBounds.length; i++) {\n+                resolvedUpperBounds[i] = resolveType(upperBounds[i], contextualActualTypeParameters);\n+            }\n+            Type[] lowerBounds = wildcardType.getLowerBounds();\n+            Type[] resolvedLowerBounds = new Type[lowerBounds.length];\n+            for (int i = 0; i < lowerBounds.length; i++) {\n+                resolvedLowerBounds[i] = resolveType(lowerBounds[i], contextualActualTypeParameters);\n+            }\n+            return new WildcardTypeImpl(resolvedUpperBounds, resolvedLowerBounds);\n+        } else {\n+            return type;\n+        }\n+    }\n+\n+    private class ParameterizedTypeImpl implements ParameterizedType {\n+\n+        private final Class<?> rawType;\n+        private final Type[] typeArguments;\n+\n+        public ParameterizedTypeImpl(Class<?> rawType, Type[] typeArguments) {\n+            this.rawType = rawType;\n+            this.typeArguments = typeArguments;\n+        }\n+\n+        @Override\n+        public Type[] getActualTypeArguments() {\n+            return typeArguments;\n+        }\n+\n+        @Override\n+        public Type getRawType() {\n+            return rawType;\n+        }\n+\n+        @Override\n+        public Type getOwnerType() {\n+            return null;\n+        }\n+    }\n+\n+    private class WildcardTypeImpl implements WildcardType {\n+\n+        private final Type[] upperBounds;\n+        private final Type[] lowerBounds;\n+\n+        public WildcardTypeImpl(Type[] upperBounds, Type[] lowerBounds) {\n+            this.upperBounds = upperBounds;\n+            this.lowerBounds = lowerBounds;\n+        }\n+\n+        @Override\n+        public Type[] getUpperBounds() {\n+            return upperBounds;\n+        }\n+\n+        @Override\n+        public Type[] getLowerBounds() {\n+            return lowerBounds;\n+        }\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}