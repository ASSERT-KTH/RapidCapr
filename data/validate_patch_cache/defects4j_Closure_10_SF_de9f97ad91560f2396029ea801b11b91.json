{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else if (n instanceof StringLiteral) {\n      return true;\n    } else if (n instanceof BinaryExpression) {\n      BinaryExpression binaryExpression = (BinaryExpression) n;\n      return binaryExpression.getOperator() == BinaryOperator.ADD &&\n             (mayBeStringHelper(binaryExpression.getLeft()) || \n              mayBeStringHelper(binaryExpression.getRight()));\n    } else {\n      return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..69c624ef 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,12 +1411,18 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n+static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    } else if (n instanceof StringLiteral) {\n+      return true;\n+    } else if (n instanceof BinaryExpression) {\n+      BinaryExpression binaryExpression = (BinaryExpression) n;\n+      return binaryExpression.getOperator() == BinaryOperator.ADD &&\n+             (mayBeStringHelper(binaryExpression.getLeft()) || \n+              mayBeStringHelper(binaryExpression.getRight()));\n     } else {\n-      return mayBeStringHelper(n);\n+      return false;\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}