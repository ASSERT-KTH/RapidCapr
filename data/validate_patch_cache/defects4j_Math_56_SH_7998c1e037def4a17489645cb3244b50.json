{
    "patch": "        int idx = 1;\n        while (count <= index) {\n            count += idx++;\n        }\n        idx--;\n        indices[last] = index - count + idx - dimension;\n\n        for (int i = last - 1; i >= 0; i--) {\n            indices[i] = (index / uniCounterOffset[i]) % uniCounter[i];\n        }\n\n        return indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..44b3e6294 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,17 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        while (count <= index) {\n+            count += idx++;\n         }\n-        --idx;\n-        indices[last] = idx;\n+        idx--;\n+        indices[last] = index - count + idx - dimension;\n+\n+        for (int i = last - 1; i >= 0; i--) {\n+            indices[i] = (index / uniCounterOffset[i]) % uniCounter[i];\n+        }\n+\n+        return indices;\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}