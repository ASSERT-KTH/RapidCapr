{
    "patch": "private void annotateCalls(Node callNode) {\n  Preconditions.checkNotNull(callNode);\n  Preconditions.checkArgument(callNode.isCall());\n\n  Node calleeNode = callNode.getFirstChild();\n\n  // If the callee is a parenthesis expression or a cast expression,\n  // get the first child of it. This is done to get the actual function\n  // call node.\n  while (calleeNode.isCast() || calleeNode.isParen()) {\n    calleeNode = calleeNode.getFirstChild();\n  }\n\n  // Mark the call as a free call if the callee node is not a GETPROP or a GETELEM node.\n  if (!NodeUtil.isGet(calleeNode)) {\n    callNode.putBooleanProp(Node.FREE_CALL, true);\n  }\n\n  // Mark the callee node as a direct eval if it is a NAME node with the value \"eval\"\n  if (calleeNode.isName() && calleeNode.getString().equals(\"eval\")) {\n    calleeNode.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..90e40985 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,26 +155,29 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n-      Preconditions.checkState(n.isCall());\n+private void annotateCalls(Node callNode) {\n+  Preconditions.checkNotNull(callNode);\n+  Preconditions.checkArgument(callNode.isCall());\n \n-      // Keep track of of the \"this\" context of a call.  A call without an\n-      // explicit \"this\" is a free call.\n-      Node first = n.getFirstChild();\n+  Node calleeNode = callNode.getFirstChild();\n \n-      // ignore cast nodes.\n+  // If the callee is a parenthesis expression or a cast expression,\n+  // get the first child of it. This is done to get the actual function\n+  // call node.\n+  while (calleeNode.isCast() || calleeNode.isParen()) {\n+    calleeNode = calleeNode.getFirstChild();\n+  }\n \n-      if (!NodeUtil.isGet(first)) {\n-        n.putBooleanProp(Node.FREE_CALL, true);\n-      }\n+  // Mark the call as a free call if the callee node is not a GETPROP or a GETELEM node.\n+  if (!NodeUtil.isGet(calleeNode)) {\n+    callNode.putBooleanProp(Node.FREE_CALL, true);\n+  }\n \n-      // Keep track of the context in which eval is called. It is important\n-      // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n-        first.putBooleanProp(Node.DIRECT_EVAL, true);\n-      }\n-    }\n+  // Mark the callee node as a direct eval if it is a NAME node with the value \"eval\"\n+  if (calleeNode.isName() && calleeNode.getString().equals(\"eval\")) {\n+    calleeNode.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}