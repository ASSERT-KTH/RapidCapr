{
    "patch": "        // Check if yInitial is NaN or Infinite\n        if (Double.isNaN(yInitial) || Double.isInfinite(yInitial)) {\n            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + yInitial);\n        }\n\n        // Check if the function values at endpoints have different signs.\n        if (yMin * yMax >=",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..002cd0bc9 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,13 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // Check if yInitial is NaN or Infinite\n+        if (Double.isNaN(yInitial) || Double.isInfinite(yInitial)) {\n+            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + yInitial);\n+        }\n+\n+        // Check if the function values at endpoints have different signs.\n+        if (yMin * yMax >=\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}