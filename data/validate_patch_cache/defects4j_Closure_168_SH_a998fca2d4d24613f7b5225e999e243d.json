{
    "patch": "      // We only want to analyze first-order functions (i.e., not nested inside other functions)\n      // for escaping variables.\n      if (!NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isArrowFunctionExpression(n) &&\n          NodeUtil.isFunctionExpression(n) && t.getScopeDepth() == 1) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..2518ddf3 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,10 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+      // We only want to analyze first-order functions (i.e., not nested inside other functions)\n+      // for escaping variables.\n+      if (!NodeUtil.isFunctionDeclaration(n) && !NodeUtil.isArrowFunctionExpression(n) &&\n+          NodeUtil.isFunctionExpression(n) && t.getScopeDepth() == 1) {\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}