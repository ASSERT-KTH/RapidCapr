{
    "patch": "        if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            // if the offsets differ, we must be near a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n                // we need to ensure that time is always after the DST gap\n                // this happens naturally for positive offsets, but not for negative\n                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if we just return offsetAdjusted then the time is pushed\n                    // back before the transition, whereas it should be\n                    // on or after the transition\n                    long nextLocal = nextTransition(instantAdjusted);\n                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                    if (nextLocal != nextAdjusted) {\n                        return offsetLocal;\n                    }\n                }\n                long prev = previousTransition(instantAdjusted);\n                if (prev < instantAdjusted) {\n                    int offsetPrev = getOffset(prev);\n                    int diff = offsetPrev - offsetLocal;\n                    if (instantAdjusted - prev <= diff) {\n                        return offsetPrev;\n                    }\n                }\n            }\n            return offsetAdjusted;\n        }\n        return offsetLocal;//return offsetLocal if either offset is negative",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..8b9f1736 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            // if the offsets differ, we must be near a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+                // we need to ensure that time is always after the DST gap\n+                // this happens naturally for positive offsets, but not for negative\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if we just return offsetAdjusted then the time is pushed\n+                    // back before the transition, whereas it should be\n+                    // on or after the transition\n+                    long nextLocal = nextTransition(instantAdjusted);\n+                    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                    if (nextLocal != nextAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                }\n+                long prev = previousTransition(instantAdjusted);\n+                if (prev < instantAdjusted) {\n+                    int offsetPrev = getOffset(prev);\n+                    int diff = offsetPrev - offsetLocal;\n+                    if (instantAdjusted - prev <= diff) {\n+                        return offsetPrev;\n+                    }\n+                }\n+            }\n+            return offsetAdjusted;\n+        }\n+        return offsetLocal;//return offsetLocal if either offset is negative\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}