{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName() &&\n          callTarget.getString().equals(\"String\")) {\n      boolean hasSideEffect = NodeUtil.mayHaveSideEffects(n.getLastChild());\n      // Fold String(a) to '' + (a) on immutable literals,\n      // which allows further optimizations\n      //\n      // We can't do this in the general case, because String(a) has\n      // slightly different semantics than '' + (a). See\n      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n      Node value = callTarget.getNext();\n      if (value != null && !hasSideEffect) {\n        if (value.isString() && !value.hasChildren()) {\n          Node addition = IR.add(\n              IR.string(\"\").srcref(callTarget),\n              value.detachFromParent());\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        } else if (value.isComma()) {\n          List<Node> nodes = NodeUtil.extractCallArgs(value.getNext());\n          if (nodes.isEmpty()) {\n            return n;\n          }\n\n          // Empty string\n          Node string = IR.string(\"\").srcref(callTarget);\n\n          Node newLeft;\n          if (value.getFirstChild().isString()) {\n            // First argument is a string literal\n            newLeft = value.getFirstChild().detachFromParent();\n          } else {\n            // Create call to String()\n            newLeft = IR.call(IR.name(\"String\"),\n                value.getFirstChild().detachFromParent());\n          }\n\n          Node newRight = nodes.remove(0);\n          Node addition = IR.add(string, newLeft);\n          for (Node node : nodes) {\n            addition = IR.add(addition, node);\n          }\n          addition = IR.add(addition, newRight);\n          n.getParent().replaceChild(n, addition);\n          reportCodeChange();\n          return addition;\n        }\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..f8f20f2f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -204,12 +204,12 @@ class PeepholeSubstituteAlternateSyntax\n       }\n     }\n   }\n-\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n     if (callTarget != null && callTarget.isName() &&\n           callTarget.getString().equals(\"String\")) {\n+      boolean hasSideEffect = NodeUtil.mayHaveSideEffects(n.getLastChild());\n       // Fold String(a) to '' + (a) on immutable literals,\n       // which allows further optimizations\n       //\n@@ -217,13 +217,43 @@ class PeepholeSubstituteAlternateSyntax\n       // slightly different semantics than '' + (a). See\n       // http://code.google.com/p/closure-compiler/issues/detail?id=759\n       Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n-        reportCodeChange();\n-        return addition;\n+      if (value != null && !hasSideEffect) {\n+        if (value.isString() && !value.hasChildren()) {\n+          Node addition = IR.add(\n+              IR.string(\"\").srcref(callTarget),\n+              value.detachFromParent());\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        } else if (value.isComma()) {\n+          List<Node> nodes = NodeUtil.extractCallArgs(value.getNext());\n+          if (nodes.isEmpty()) {\n+            return n;\n+          }\n+\n+          // Empty string\n+          Node string = IR.string(\"\").srcref(callTarget);\n+\n+          Node newLeft;\n+          if (value.getFirstChild().isString()) {\n+            // First argument is a string literal\n+            newLeft = value.getFirstChild().detachFromParent();\n+          } else {\n+            // Create call to String()\n+            newLeft = IR.call(IR.name(\"String\"),\n+                value.getFirstChild().detachFromParent());\n+          }\n+\n+          Node newRight = nodes.remove(0);\n+          Node addition = IR.add(string, newLeft);\n+          for (Node node : nodes) {\n+            addition = IR.add(addition, node);\n+          }\n+          addition = IR.add(addition, newRight);\n+          n.getParent().replaceChild(n, addition);\n+          reportCodeChange();\n+          return addition;\n+        }\n       }\n     }\n     return n;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}