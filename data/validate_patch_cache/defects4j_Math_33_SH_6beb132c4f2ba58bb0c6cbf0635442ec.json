{
    "patch": "for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n    final double entry = tableau.getEntry(0, i);\n    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        boolean unrestricted = true;\n        for (int j = getNumObjectiveFunctions(); unrestricted && (j < getArtificialVariableOffset()); j++) {\n            if (Precision.compareTo(tableau.getEntry(0, j), 0d, maxUlps) != 0) {\n                unrestricted = false;\n            }\n        }\n        if (unrestricted) {\n            columnsToDrop.add(i);\n        } else {\n            // can't drop column i without making the problem infeasible\n            throw new NoFeasibleSolutionException();\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..b207e458d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,23 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+    final double entry = tableau.getEntry(0, i);\n+    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        boolean unrestricted = true;\n+        for (int j = getNumObjectiveFunctions(); unrestricted && (j < getArtificialVariableOffset()); j++) {\n+            if (Precision.compareTo(tableau.getEntry(0, j), 0d, maxUlps) != 0) {\n+                unrestricted = false;\n+            }\n+        }\n+        if (unrestricted) {\n+            columnsToDrop.add(i);\n+        } else {\n+            // can't drop column i without making the problem infeasible\n+            throw new NoFeasibleSolutionException();\n+        }\n+    }\n+}\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}