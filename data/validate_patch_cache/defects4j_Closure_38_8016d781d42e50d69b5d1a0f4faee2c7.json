{
    "patch": "    if ((int) x == 0 && Double.doubleToRawLongBits(x) != 0) {\n      // negative zero\n      add(\"-\");\n      add(\"0\");\n      return;\n    }\n    if (x < 0 && prev == '-') {\n      add(\"(\");\n      add(String.valueOf(x));\n      add(\")\");\n    } else {\n      add(String.valueOf(x));\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..80bf9bf7 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,24 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n+    if ((int) x == 0 && Double.doubleToRawLongBits(x) != 0) {\n+      // negative zero\n+      add(\"-\");\n+      add(\"0\");\n+      return;\n+    }\n     if (x < 0 && prev == '-') {\n+      add(\"(\");\n+      add(String.valueOf(x));\n+      add(\")\");\n+    } else {\n+      add(String.valueOf(x));\n+    }\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}