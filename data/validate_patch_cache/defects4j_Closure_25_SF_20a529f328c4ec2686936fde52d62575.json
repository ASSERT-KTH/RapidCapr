{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  Node constructor = n.getFirstChild();\n  JsDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n  JSType type = null;\n  // If the node has a non-null type, get the instance type of the constructor.\n  if (constructor.getJSType() != null) {\n    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n    FunctionType ct = constructorType.toMaybeFunctionType();\n    if (ct == null && constructorType instanceof FunctionType) {\n      ct = (FunctionType) constructorType;\n    }\n    if (ct != null && ct.isConstructor()) {\n      type = ct.getInstanceType();\n    }\n    // Add the constructed instance `x` to the current scope.\n    if (jsDoc != null && jsDoc.hasConstAnnotation()) {\n      scope = scope.inferDeclaration(IR.name(\"x\"), n).getAlternate();\n    }\n  }\n  // Otherwise, use UNKNOWN_TYPE.\n  else {\n    type = getNativeType(UNKNOWN_TYPE);\n  }\n  scope = traverse(constructor, scope);\n  n.setJSType(type);\n  HashMap<String, JSType> vars = new HashMap<>();\n  // Add the argument `y` to the current scope.\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    if (arg.getJSType() != null && jsDoc != null && jsDoc.getParameterCount() > 0) {\n      JSDocInfo.ParameterType parameterType = jsDoc.getParameterType(0);\n      if (parameterType != null && parameterType.isTypeOptional()) {\n        vars.put(\"y\", arg.getJSType());\n      } else {\n        vars.put(\"y\", arg.getJSType().restrictByNotNullOrUndefined());\n      }\n      break;\n    }\n    scope = traverse(arg, scope);\n  }\n  scope = scope.withLocalVars(vars);\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..422c3a6c 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,36 +1031,48 @@ class TypeInference\n       i++;\n     }\n   }\n-\n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  Node constructor = n.getFirstChild();\n+  JsDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+  JSType type = null;\n+  // If the node has a non-null type, get the instance type of the constructor.\n+  if (constructor.getJSType() != null) {\n+    JSType constructorType = constructor.getJSType().restrictByNotNullOrUndefined();\n+    FunctionType ct = constructorType.toMaybeFunctionType();\n+    if (ct == null && constructorType instanceof FunctionType) {\n+      ct = (FunctionType) constructorType;\n+    }\n+    if (ct != null && ct.isConstructor()) {\n+      type = ct.getInstanceType();\n+    }\n+    // Add the constructed instance `x` to the current scope.\n+    if (jsDoc != null && jsDoc.hasConstAnnotation()) {\n+      scope = scope.inferDeclaration(IR.name(\"x\"), n).getAlternate();\n+    }\n+  }\n+  // Otherwise, use UNKNOWN_TYPE.\n+  else {\n+    type = getNativeType(UNKNOWN_TYPE);\n+  }\n+  scope = traverse(constructor, scope);\n+  n.setJSType(type);\n+  HashMap<String, JSType> vars = new HashMap<>();\n+  // Add the argument `y` to the current scope.\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    if (arg.getJSType() != null && jsDoc != null && jsDoc.getParameterCount() > 0) {\n+      JSDocInfo.ParameterType parameterType = jsDoc.getParameterType(0);\n+      if (parameterType != null && parameterType.isTypeOptional()) {\n+        vars.put(\"y\", arg.getJSType());\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        vars.put(\"y\", arg.getJSType().restrictByNotNullOrUndefined());\n       }\n+      break;\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n+    scope = traverse(arg, scope);\n   }\n+  scope = scope.withLocalVars(vars);\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}