{
    "patch": "private class TransformDispatcher implements TypeSafeDispatcher {\n  @Override\n  public Node processArrayComprehension(ArrayComprehension node) {\n    return IRFactory.this.processArrayComprehension(node);\n  }\n\n  @Override\n  public Node processArrayLiteral(ArrayLiteral node) {\n    return IRFactory.this.processArrayLiteral(node);\n  }\n\n  @Override\n  public Node processAssignment(Assignment node) {\n    return IRFactory.this.processAssignment(node);\n  }\n\n  @Override\n  public Node processAstRoot(AstRoot astRoot) {\n    return IRFactory.this.process(astRoot);\n  }\n\n  @Override\n  public Node processBlock(Block blockNode) {\n    return IRFactory.this.processBlock(blockNode);\n  }\n\n  @Override\n  public Node processBreakStatement(BreakStatement statementNode) {\n    return IRFactory.this.processBreakStatement(statementNode);\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause clauseNode) {\n    return IRFactory.this.processCatchClause(clauseNode);\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression exprNode) {\n    return IRFactory.this.processConditionalExpression(exprNode);\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement statementNode) {\n    return IRFactory.this.processContinueStatement(statementNode);\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop loopNode) {\n    return IRFactory.this.processDoLoop(loopNode);\n  }\n\n  @Override\n  public Node processElementGet(ElementGet node) {\n    return IRFactory.this.processElementGet(node);\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression exprNode) {\n    return IRFactory.this.processEmptyExpression(exprNode);\n  }\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement statementNode) {\n    return IRFactory.this.processExpressionStatement(statementNode);\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop loopNode) {\n    return IRFactory.this.processForInLoop(loopNode);\n  }\n\n  @Override\n  public Node processForLoop(ForLoop loopNode) {\n    return IRFactory.this.processForLoop(loopNode);\n  }\n\n  @Override\n  public Node processFunctionCall(FunctionCall callNode) {\n    return IRFactory.this.processFunctionCall(callNode);\n  }\n\n  @Override\n  public Node processFunctionNode(FunctionNode functionNode) {\n    return IRFactory.this.processFunctionNode(functionNode);\n  }\n\n  @Override\n  public Node processGeneratorExpression(GeneratorExpression node) {\n    return IRFactory.this.processGeneratorExpression(node);\n  }\n\n  @Override\n  public Node processIfStatement(IfStatement statementNode) {\n    return IRFactory.this.processIfStatement(statementNode);\n  }\n\n  @Override\n  public Node processInfixExpression(InfixExpression infixNode) {\n    return IRFactory.this.processInfixExpression(infixNode);\n  }\n\n  @Override\n  public Node processLabeledStatement(LabeledStatement labeledStatement) {\n    return IRFactory.this.processLabeledStatement(labeledStatement);\n  }\n\n  @Override\n  public Node processLetNode(LetNode letNode) {\n    return IRFactory.this.processLetNode(letNode);\n  }\n\n  @Override\n  public Node processName(Name name) {\n    return IRFactory.this.processName(name);\n  }\n\n  @Override\n  public Node processNewExpression(NewExpression newExprNode) {\n    return IRFactory.this.processNewExpression(newExprNode);\n  }\n\n  @Override\n  public Node processNumberLiteral(NumberLiteral node) {\n    return IRFactory.this.processNumberLiteral(node);\n  }\n\n  @Override\n  public Node processObjectLiteral(ObjectLiteral node) {\n    return IRFactory.this.processObjectLiteral(node);\n  }\n\n  @Override\n  public Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n    return IRFactory.this.processParenthesizedExpression(exprNode);\n  }\n\n  @Override\n  public Node processPropertyGet(PropertyGet node) {\n    return IRFactory.this.processPropertyGet(node);\n  }\n\n  @Override\n  public Node processRegExpLiteral(RegExpLiteral node) {\n    return IRFactory.this.processRegExpLiteral(node);\n  }\n\n  @Override\n  public Node processReturnStatement(ReturnStatement statementNode) {\n    return IRFactory.this.processReturnStatement(statementNode);\n  }\n\n  @Override\n  public Node processStringLiteral(StringLiteral node) {\n    return IRFactory.this.processStringLiteral(node);\n  }\n\n  @Override\n  public Node processSwitchCase(SwitchCase switchCaseNode) {\n    return IRFactory.this.processSwitchCase(switchCaseNode);\n  }\n\n  @Override\n  public Node processSwitchStatement(SwitchStatement statementNode) {\n    return IRFactory.this.processSwitchStatement(statementNode);\n  }\n\n  @Override\n  public Node processThrowStatement(ThrowStatement statementNode) {\n    return IRFactory.this.processThrowStatement(statementNode);\n  }\n\n  @Override\n  public Node processTryStatement(TryStatement statementNode) {\n    return IRFactory.this.processTryStatement(statementNode);\n  }\n\n  @Override\n  public Node processUnaryExpression(UnaryExpression unaryNode) {\n    return IRFactory.this.processUnaryExpression(unaryNode);\n  }\n\n  @Override\n  public Node processVariableDeclaration(VariableDeclaration varDecl) {\n    return IRFactory.this.processVariableDeclaration(varDecl);\n  }\n\n  @Override\n  public Node processVariableInitializer(VariableInitializer initializer) {\n    return IRFactory.this.processVariableInitializer(initializer);\n  }\n\n  @Override\n  public Node processWhileLoop(WhileLoop loopNode) {\n    return IRFactory.this.processWhileLoop(loopNode);\n  }\n\n  @Override\n  public Node processWithStatement(WithStatement statementNode) {\n    return IRFactory.this.processWithStatement(statementNode);\n  }\n\n  @Override\n  public Node processXMLAttribute(XMLAttribute node) {\n    return IRFactory.this.processXMLAttribute(node);\n  }\n\n  @Override\n  public Node processXMLDotQuery(XMLDotQuery node) {\n    return IRFactory.this.processXMLDotQuery(node);\n  }\n\n  @Override\n  public Node processXMLElement(XMLElement node) {\n    return IRFactory.this.processXMLElement(node);\n  }\n\n  @Override\n  public Node processXMLExpression(XMLExpression node) {\n    return IRFactory.this.processXMLExpression(node);\n  }\n\n  @Override\n  public Node processXMLFilterExpression(XMLFilterExpression node) {\n    return IRFactory.this.processXMLFilterExpression(node);\n  }\n\n  @Override\n  public Node processXMLLiteral(XMLLiteral node) {\n    return IRFactory.this.processXMLLiteral(node);\n  }\n\n  @Override\n  public Node processXMLList(XMLList node) {\n    return IRFactory.this.processXMLList(node);\n  }\n\n  @Override\n  public Node processXMLName(XMLName node) {\n    return IRFactory.this.processXMLName(node);\n  }\n\n  @Override\n  public Node processXMLQualifiedIdentifier(XMLQualifiedIdentifier node) {\n    return IRFactory.this.processXMLQualifiedIdentifier(node);\n  }\n\n  @Override\n  public Node processYield(Yield yield) {\n    return IRFactory.this.processYield(yield);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..895d9bd3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,182 +384,257 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+private class TransformDispatcher implements TypeSafeDispatcher {\n+  @Override\n+  public Node processArrayComprehension(ArrayComprehension node) {\n+    return IRFactory.this.processArrayComprehension(node);\n+  }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+  @Override\n+  public Node processArrayLiteral(ArrayLiteral node) {\n+    return IRFactory.this.processArrayLiteral(node);\n+  }\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  @Override\n+  public Node processAssignment(Assignment node) {\n+    return IRFactory.this.processAssignment(node);\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  @Override\n+  public Node processAstRoot(AstRoot astRoot) {\n+    return IRFactory.this.process(astRoot);\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processBlock(Block blockNode) {\n+    return IRFactory.this.processBlock(blockNode);\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processBreakStatement(BreakStatement statementNode) {\n+    return IRFactory.this.processBreakStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  @Override\n+  public Node processCatchClause(CatchClause clauseNode) {\n+    return IRFactory.this.processCatchClause(clauseNode);\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return IRFactory.this.processConditionalExpression(exprNode);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  @Override\n+  public Node processContinueStatement(ContinueStatement statementNode) {\n+    return IRFactory.this.processContinueStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processDoLoop(DoLoop loopNode) {\n+    return IRFactory.this.processDoLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  public Node processElementGet(ElementGet node) {\n+    return IRFactory.this.processElementGet(node);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression exprNode) {\n+    return IRFactory.this.processEmptyExpression(exprNode);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement statementNode) {\n+    return IRFactory.this.processExpressionStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processForInLoop(ForInLoop loopNode) {\n+    return IRFactory.this.processForInLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  @Override\n+  public Node processForLoop(ForLoop loopNode) {\n+    return IRFactory.this.processForLoop(loopNode);\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n+  @Override\n+  public Node processFunctionCall(FunctionCall callNode) {\n+    return IRFactory.this.processFunctionCall(callNode);\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  @Override\n+  public Node processFunctionNode(FunctionNode functionNode) {\n+    return IRFactory.this.processFunctionNode(functionNode);\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  @Override\n+  public Node processGeneratorExpression(GeneratorExpression node) {\n+    return IRFactory.this.processGeneratorExpression(node);\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  @Override\n+  public Node processIfStatement(IfStatement statementNode) {\n+    return IRFactory.this.processIfStatement(statementNode);\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n-    }\n+  @Override\n+  public Node processInfixExpression(InfixExpression infixNode) {\n+    return IRFactory.this.processInfixExpression(infixNode);\n+  }\n+\n+  @Override\n+  public Node processLabeledStatement(LabeledStatement labeledStatement) {\n+    return IRFactory.this.processLabeledStatement(labeledStatement);\n+  }\n+\n+  @Override\n+  public Node processLetNode(LetNode letNode) {\n+    return IRFactory.this.processLetNode(letNode);\n+  }\n+\n+  @Override\n+  public Node processName(Name name) {\n+    return IRFactory.this.processName(name);\n+  }\n+\n+  @Override\n+  public Node processNewExpression(NewExpression newExprNode) {\n+    return IRFactory.this.processNewExpression(newExprNode);\n+  }\n+\n+  @Override\n+  public Node processNumberLiteral(NumberLiteral node) {\n+    return IRFactory.this.processNumberLiteral(node);\n+  }\n+\n+  @Override\n+  public Node processObjectLiteral(ObjectLiteral node) {\n+    return IRFactory.this.processObjectLiteral(node);\n+  }\n+\n+  @Override\n+  public Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n+    return IRFactory.this.processParenthesizedExpression(exprNode);\n+  }\n+\n+  @Override\n+  public Node processPropertyGet(PropertyGet node) {\n+    return IRFactory.this.processPropertyGet(node);\n+  }\n+\n+  @Override\n+  public Node processRegExpLiteral(RegExpLiteral node) {\n+    return IRFactory.this.processRegExpLiteral(node);\n+  }\n+\n+  @Override\n+  public Node processReturnStatement(ReturnStatement statementNode) {\n+    return IRFactory.this.processReturnStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processStringLiteral(StringLiteral node) {\n+    return IRFactory.this.processStringLiteral(node);\n+  }\n+\n+  @Override\n+  public Node processSwitchCase(SwitchCase switchCaseNode) {\n+    return IRFactory.this.processSwitchCase(switchCaseNode);\n+  }\n+\n+  @Override\n+  public Node processSwitchStatement(SwitchStatement statementNode) {\n+    return IRFactory.this.processSwitchStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processThrowStatement(ThrowStatement statementNode) {\n+    return IRFactory.this.processThrowStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processTryStatement(TryStatement statementNode) {\n+    return IRFactory.this.processTryStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processUnaryExpression(UnaryExpression unaryNode) {\n+    return IRFactory.this.processUnaryExpression(unaryNode);\n+  }\n+\n+  @Override\n+  public Node processVariableDeclaration(VariableDeclaration varDecl) {\n+    return IRFactory.this.processVariableDeclaration(varDecl);\n+  }\n+\n+  @Override\n+  public Node processVariableInitializer(VariableInitializer initializer) {\n+    return IRFactory.this.processVariableInitializer(initializer);\n+  }\n+\n+  @Override\n+  public Node processWhileLoop(WhileLoop loopNode) {\n+    return IRFactory.this.processWhileLoop(loopNode);\n+  }\n+\n+  @Override\n+  public Node processWithStatement(WithStatement statementNode) {\n+    return IRFactory.this.processWithStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processXMLAttribute(XMLAttribute node) {\n+    return IRFactory.this.processXMLAttribute(node);\n+  }\n+\n+  @Override\n+  public Node processXMLDotQuery(XMLDotQuery node) {\n+    return IRFactory.this.processXMLDotQuery(node);\n+  }\n+\n+  @Override\n+  public Node processXMLElement(XMLElement node) {\n+    return IRFactory.this.processXMLElement(node);\n+  }\n+\n+  @Override\n+  public Node processXMLExpression(XMLExpression node) {\n+    return IRFactory.this.processXMLExpression(node);\n+  }\n+\n+  @Override\n+  public Node processXMLFilterExpression(XMLFilterExpression node) {\n+    return IRFactory.this.processXMLFilterExpression(node);\n+  }\n+\n+  @Override\n+  public Node processXMLLiteral(XMLLiteral node) {\n+    return IRFactory.this.processXMLLiteral(node);\n+  }\n+\n+  @Override\n+  public Node processXMLList(XMLList node) {\n+    return IRFactory.this.processXMLList(node);\n+  }\n+\n+  @Override\n+  public Node processXMLName(XMLName node) {\n+    return IRFactory.this.processXMLName(node);\n+  }\n+\n+  @Override\n+  public Node processXMLQualifiedIdentifier(XMLQualifiedIdentifier node) {\n+    return IRFactory.this.processXMLQualifiedIdentifier(node);\n+  }\n+\n+  @Override\n+  public Node processYield(Yield yield) {\n+    return IRFactory.this.processYield(yield);\n+  }\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}