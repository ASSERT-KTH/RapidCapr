{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    \n    // Calculate total duration in months\n    double totalMonths = (getYears() * 12) + getMonths() + ((getWeeks() * 7) + getDays()) / 30.44;\n\t\n    // Extract years and months from total duration, rounded down to nearest integer value\n    int years = (int) (totalMonths / 12);\n    int months = (int) (totalMonths % 12);\n\n    // Create new Period object with calculated years and months, and remaining fields from original object\n    Period result = new Period(years, months, getWeeks(), getDays(),\n            getHours(), getMinutes(), getSeconds(), millis, type);\n\n    return result.normalizedStandard(type, ISOChronology.getInstanceUTC());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2cfc5007 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,27 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    \n+    // Calculate total duration in months\n+    double totalMonths = (getYears() * 12) + getMonths() + ((getWeeks() * 7) + getDays()) / 30.44;\n+\t\n+    // Extract years and months from total duration, rounded down to nearest integer value\n+    int years = (int) (totalMonths / 12);\n+    int months = (int) (totalMonths % 12);\n+\n+    // Create new Period object with calculated years and months, and remaining fields from original object\n+    Period result = new Period(years, months, getWeeks(), getDays(),\n+            getHours(), getMinutes(), getSeconds(), millis, type);\n+\n+    return result.normalizedStandard(type, ISOChronology.getInstanceUTC());\n+}\n \n }",
    "result_reason": "error: no suitable constructor found for Period(int,int,int,int,int,int,int,long,PeriodType)",
    "test_result": "ERROR"
}