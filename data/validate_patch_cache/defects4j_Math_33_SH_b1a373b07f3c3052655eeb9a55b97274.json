{
    "patch": "protected void dropPhase1Objective() {\n    if (getNumObjectiveFunctions() == 1) {\n        return;\n    }\n\n    int numDecisionVariables = getNumDecisionVariables();\n    double[][] matrix = new double[getHeight() - 1][numDecisionVariables];\n    List<Integer> columnsToDrop = new ArrayList<Integer>();\n    columnsToDrop.add(0);\n\n    // Copy the non-artificial decision variables\n    for (int i = 0; i < numDecisionVariables; i++) {\n        matrix[0][i] = -tableau.getEntry(0, i);\n    }\n\n    // Copy the non-basic artificial variables\n    for (int i = 0; i < getNumArtificialVariables(); i++) {\n        int col = i + getArtificialVariableOffset();\n        if (getBasicRow(col) == null) {\n            columnsToDrop.add(col);\n        } else {\n            for (int row = 0; row < matrix.length; row++) {\n                matrix[row][getBasicRow(col)] += tableau.getEntry(row + 1, col);\n            }\n        }\n    }\n\n    double[] renamedCoefficients = new double[numDecisionVariables];\n    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n        renamedCoefficients[i - getNumObjectiveFunctions()] = c[i];\n    }\n    c = renamedCoefficients;\n\n    double[] newCoefficients = new double[numDecisionVariables];\n    for (int i = 0; i < newCoefficients.length; i++) {\n        newCoefficients[i] = -tableau.getEntry(0, i);\n    }\n    setFunction(new LinearObjectiveFunction(newCoefficients, 0));\n\n    this.tableau = new Array2DRowRealMatrix(matrix);\n\n    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n        int colIndex = columnsToDrop.get(i);\n        columnLabels.remove(colIndex);\n        for (int j = colIndex + 1; j < columnLabels.size(); j++) {\n            Integer val = columnLabels.get(j);\n            columnLabels.set(j, val - 1);\n        }\n    }\n\n    this.numArtificialVariables = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..0031450df 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,58 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+protected void dropPhase1Objective() {\n+    if (getNumObjectiveFunctions() == 1) {\n+        return;\n+    }\n+\n+    int numDecisionVariables = getNumDecisionVariables();\n+    double[][] matrix = new double[getHeight() - 1][numDecisionVariables];\n+    List<Integer> columnsToDrop = new ArrayList<Integer>();\n+    columnsToDrop.add(0);\n+\n+    // Copy the non-artificial decision variables\n+    for (int i = 0; i < numDecisionVariables; i++) {\n+        matrix[0][i] = -tableau.getEntry(0, i);\n+    }\n+\n+    // Copy the non-basic artificial variables\n+    for (int i = 0; i < getNumArtificialVariables(); i++) {\n+        int col = i + getArtificialVariableOffset();\n+        if (getBasicRow(col) == null) {\n+            columnsToDrop.add(col);\n+        } else {\n+            for (int row = 0; row < matrix.length; row++) {\n+                matrix[row][getBasicRow(col)] += tableau.getEntry(row + 1, col);\n+            }\n+        }\n+    }\n+\n+    double[] renamedCoefficients = new double[numDecisionVariables];\n+    for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+        renamedCoefficients[i - getNumObjectiveFunctions()] = c[i];\n+    }\n+    c = renamedCoefficients;\n+\n+    double[] newCoefficients = new double[numDecisionVariables];\n+    for (int i = 0; i < newCoefficients.length; i++) {\n+        newCoefficients[i] = -tableau.getEntry(0, i);\n+    }\n+    setFunction(new LinearObjectiveFunction(newCoefficients, 0));\n+\n+    this.tableau = new Array2DRowRealMatrix(matrix);\n+\n+    for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n+        int colIndex = columnsToDrop.get(i);\n+        columnLabels.remove(colIndex);\n+        for (int j = colIndex + 1; j < columnLabels.size(); j++) {\n+            Integer val = columnLabels.get(j);\n+            columnLabels.set(j, val - 1);\n+        }\n+    }\n+\n+    this.numArtificialVariables = 0;\n+}\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}