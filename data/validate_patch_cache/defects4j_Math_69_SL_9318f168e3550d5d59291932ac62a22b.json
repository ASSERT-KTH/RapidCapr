{
    "patch": "    double p = 2.0 * (1.0 - tDistribution.cumulativeProbability(Math.abs(t)));\n    if (Double.isNaN(p)) {\n        out[i][j] = Double.NaN;\n    } else if (Double.isInfinite(p)) {\n        out[i][j] = (p < 0) ? Double.MIN_VALUE : Double.MAX_VALUE;\n    } else {\n        out[i][j] = p;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..0d71a9fa9 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -168,7 +168,14 @@ public class PearsonsCorrelation {\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n+    double p = 2.0 * (1.0 - tDistribution.cumulativeProbability(Math.abs(t)));\n+    if (Double.isNaN(p)) {\n+        out[i][j] = Double.NaN;\n+    } else if (Double.isInfinite(p)) {\n+        out[i][j] = (p < 0) ? Double.MIN_VALUE : Double.MAX_VALUE;\n+    } else {\n+        out[i][j] = p;\n+    }\n                 }\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}