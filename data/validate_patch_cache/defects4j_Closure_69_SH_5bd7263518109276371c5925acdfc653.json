{
    "patch": "// Functions with explicit 'this' types must be called in a GETPROP\n// or GETELEM.\nJSType thisType = functionType.getTypeOfThis();\nNode callNode = n.getLastChild();\nif (thisType != null) {\n  if (!NodeUtil.isGet(callNode) && !NodeUtil.isCall(callNode)) {\n    report(t, n, ILLEGAL_THIS);\n    return;\n  }\n  Node lastArg = callNode.getLastChild();\n  if (lastArg != null && !NodeUtil.isObjectLitOrNodeOrString(lastArg)) {\n    lastArg = lastArg.getPrevious();\n  }\n  if (!NodeUtil.referencesOwnReceiver(lastArg, thisType)) {\n    report(t, n, ILLEGAL_THIS);\n  }\n}\nvisitParameterList(t, n, functionType);\nensureTyped(t, n, functionType.getReturnType());",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..b574d6a6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,25 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+// Functions with explicit 'this' types must be called in a GETPROP\n+// or GETELEM.\n+JSType thisType = functionType.getTypeOfThis();\n+Node callNode = n.getLastChild();\n+if (thisType != null) {\n+  if (!NodeUtil.isGet(callNode) && !NodeUtil.isCall(callNode)) {\n+    report(t, n, ILLEGAL_THIS);\n+    return;\n+  }\n+  Node lastArg = callNode.getLastChild();\n+  if (lastArg != null && !NodeUtil.isObjectLitOrNodeOrString(lastArg)) {\n+    lastArg = lastArg.getPrevious();\n+  }\n+  if (!NodeUtil.referencesOwnReceiver(lastArg, thisType)) {\n+    report(t, n, ILLEGAL_THIS);\n+  }\n+}\n+visitParameterList(t, n, functionType);\n+ensureTyped(t, n, functionType.getReturnType());\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}