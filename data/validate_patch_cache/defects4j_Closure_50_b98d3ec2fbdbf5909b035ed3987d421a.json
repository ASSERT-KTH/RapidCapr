{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = \",\";\n    if (right != null) {\n      if (NodeUtil.isStringLiteral(right)) {\n        joinString = NodeUtil.getStringValue(right);\n      } else {\n        return n;\n      }\n    }\n\n    List<Node> arrayFoldedChildren = new ArrayList<Node>();\n    StringBuilder sb = null;\n    int foldedSize = 0;\n    Node prev = null;\n    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getArrayElementStringValue(elem));\n      } else {\n        if (sb != null) {\n          Preconditions.checkNotNull(prev);\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()).useSourceInfoFrom(elem));\n          sb = null;\n        }\n        if (!canBeJoined(elem)) {\n          return n;\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n      prev = elem;\n    }\n\n    if (sb != null) {\n      Preconditions.checkNotNull(prev);\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()).useSourceInfoFrom(prev));\n    }\n\n    // one for each comma.\n    if (arrayFoldedChildren.size() > 1) {\n      foldedSize += arrayFoldedChildren.size() - 1;\n    }\n\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = Node.newString(\"\").useSourceInfoFrom(n);\n        n.replaceWith(emptyStringNode);\n        reportCodeChange();\n        return emptyStringNode;\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              Node.newString(\"\").useSourceInfoFrom(n),\n              foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        n.replaceWith(foldedStringNode);\n        reportCodeChange();\n        return foldedStringNode;\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return n;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n        if (foldedSize > originalSize) {\n          return n;\n        }\n        arrayNode.detachChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        n.setString(\"[\" + joinString + \"]\");\n        reportCodeChange();\n        break;\n    }\n\n    return n;\n  }\n\n  private static boolean canBeJoined(Node n) {\n    if (n.getType() == Token.ARRAYLIT) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!canBeJoined(child)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return NodeUtil.isImmutableValue(n) || n.getType() == Token.EMPTY ||\n          NodeUtil.isNumber(n) || NodeUtil.isBoolean(n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..b6407432 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,10 +372,8 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n@@ -386,16 +384,21 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+      if (NodeUtil.isStringLiteral(right)) {\n+        joinString = NodeUtil.getStringValue(right);\n+      } else {\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+    List<Node> arrayFoldedChildren = new ArrayList<Node>();\n     StringBuilder sb = null;\n     int foldedSize = 0;\n     Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n+    for (Node elem = arrayNode.getFirstChild(); elem != null; elem = elem.getNext()) {\n       if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n         if (sb == null) {\n           sb = new StringBuilder();\n@@ -408,32 +411,36 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n           Preconditions.checkNotNull(prev);\n           // + 2 for the quotes.\n           foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n+          arrayFoldedChildren.add(Node.newString(sb.toString()).useSourceInfoFrom(elem));\n           sb = null;\n         }\n+        if (!canBeJoined(elem)) {\n+          return n;\n+        }\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n       prev = elem;\n-      elem = elem.getNext();\n     }\n \n     if (sb != null) {\n       Preconditions.checkNotNull(prev);\n       // + 2 for the quotes.\n       foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      arrayFoldedChildren.add(Node.newString(sb.toString()).useSourceInfoFrom(prev));\n     }\n+\n     // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n+    if (arrayFoldedChildren.size() > 1) {\n+      foldedSize += arrayFoldedChildren.size() - 1;\n+    }\n \n     int originalSize = InlineCostEstimator.getCost(n);\n+\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n+        Node emptyStringNode = Node.newString(\"\").useSourceInfoFrom(n);\n+        n.replaceWith(emptyStringNode);\n         reportCodeChange();\n         return emptyStringNode;\n       case 1:\n@@ -446,11 +453,11 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n           // If the Node is not a string literal, ensure that\n           // it is coerced to a string.\n           Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n+              Node.newString(\"\").useSourceInfoFrom(n),\n               foldedStringNode);\n           foldedStringNode = replacement;\n         }\n-        n.getParent().replaceChild(n, foldedStringNode);\n+        n.replaceWith(foldedStringNode);\n         reportCodeChange();\n         return foldedStringNode;\n       default:\n@@ -468,6 +475,7 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n+        n.setString(\"[\" + joinString + \"]\");\n         reportCodeChange();\n         break;\n     }\n@@ -475,6 +483,20 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     return n;\n   }\n \n+  private static boolean canBeJoined(Node n) {\n+    if (n.getType() == Token.ARRAYLIT) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!canBeJoined(child)) {\n+          return false;\n+        }\n+      }\n+      return true;\n+    } else {\n+      return NodeUtil.isImmutableValue(n) || n.getType() == Token.EMPTY ||\n+          NodeUtil.isNumber(n) || NodeUtil.isBoolean(n);\n+    }\n+  }\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +664,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}