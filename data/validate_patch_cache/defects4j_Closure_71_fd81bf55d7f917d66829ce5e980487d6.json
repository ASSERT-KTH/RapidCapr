{
    "patch": "      boolean isOverride =\n          t.getInput() != null &&\n          t.getInput().getAstRoot() == parent.getAstRoot() &&\n          t.inGlobalScope() &&\n          parent.getParent().getType() == Token.OBJECTLIT &&\n          ((Node) parent.getParent().getProp(Node.ORIGINALNAME_PROP))\n              .getLastChild().getString().equals(\"prototype\");",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..9ea6d054 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,13 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride =\n+          t.getInput() != null &&\n+          t.getInput().getAstRoot() == parent.getAstRoot() &&\n+          t.inGlobalScope() &&\n+          parent.getParent().getType() == Token.OBJECTLIT &&\n+          ((Node) parent.getParent().getProp(Node.ORIGINALNAME_PROP))\n+              .getLastChild().getString().equals(\"prototype\");\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}