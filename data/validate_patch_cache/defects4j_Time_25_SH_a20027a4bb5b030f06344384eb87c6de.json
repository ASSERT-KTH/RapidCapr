{
    "patch": "                if (offsetLocal < 0 && getOffset(instantAdjusted - 1) >= 0) {\n                    return getOffset(instantAdjusted - 1);\n                }\n                if (offsetLocal < 0) {\n                    long prevTransition = previousTransition(instantAdjusted);\n                    long nextTransition = nextTransition(instantAdjusted);\n                    if (nextTransition + (offsetLocal * 1000L) <= instantLocal) {\n                        return offsetLocal;\n                    } else if (prevTransition + (offsetLocal * 1000L) <= instantLocal) {\n                        return getOffset(prevTransition - 1);\n                    }\n                    return getOffset(instantAdjusted - 1);\n                } else if (offsetLocal > 0) {\n                    long nextTransition = nextTransition(instantAdjusted);\n                    if (instantAdjusted + offsetLocal * 1000L >= nextTransition) {\n                        return getOffset(nextTransition);\n                    }\n                }\n>>> [ INFILL ] <<<\n        }\n        return offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..3f18aadf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetLocal < 0 && getOffset(instantAdjusted - 1) >= 0) {\n+                    return getOffset(instantAdjusted - 1);\n+                }\n+                if (offsetLocal < 0) {\n+                    long prevTransition = previousTransition(instantAdjusted);\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    if (nextTransition + (offsetLocal * 1000L) <= instantLocal) {\n+                        return offsetLocal;\n+                    } else if (prevTransition + (offsetLocal * 1000L) <= instantLocal) {\n+                        return getOffset(prevTransition - 1);\n+                    }\n+                    return getOffset(instantAdjusted - 1);\n+                } else if (offsetLocal > 0) {\n+                    long nextTransition = nextTransition(instantAdjusted);\n+                    if (instantAdjusted + offsetLocal * 1000L >= nextTransition) {\n+                        return getOffset(nextTransition);\n+                    }\n+                }\n+>>> [ INFILL ] <<<\n+        }\n+        return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}