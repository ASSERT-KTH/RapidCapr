{
    "patch": "    if (n.isFunction()) {\n      ControlFlowGraph<Node> cfg = ControlFlowGraph.buildScopedGraph(\n          compiler, n.getLastChild(), n.getSecondChild().getNext(), n);\n      Node cfgNode = cfg.getEntry().getValue();\n      if (!ControlFlowGraph.isEnteringNewCfgNode(cfgNode) && hasExceptionHandler(cfgNode)) {\n        return true;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1fff7d82 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,14 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+    if (n.isFunction()) {\n+      ControlFlowGraph<Node> cfg = ControlFlowGraph.buildScopedGraph(\n+          compiler, n.getLastChild(), n.getSecondChild().getNext(), n);\n+      Node cfgNode = cfg.getEntry().getValue();\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(cfgNode) && hasExceptionHandler(cfgNode)) {\n+        return true;\n+      }\n+    }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: non-static variable compiler cannot be referenced from a static context",
    "test_result": "ERROR"
}