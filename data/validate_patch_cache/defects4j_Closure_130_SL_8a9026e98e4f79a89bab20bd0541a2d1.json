{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        if (canCollapseUnannotatedChildNamespaces(name)) {\n          // The child namespaces are all unannotated and thus safe to collapse.\n          // We must do this before inlining aliases in this scope.\n          RemoveUnusedCode.removeUnusedCode(\n              name, name.getDeclaration(), null, true, namespace.getScope(), false);\n          continue;\n        }\n        // {@code name} has namespace children that are either annotated or\n        // aliased. Consider inlining aliases in this scope before recursing\n        // to its children.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n        // Ensure the namespace children are semantically correct.\n        for (Name child : Iterables.slice(name.props, 0)) {\n          if (child.type == Name.Type.OBJECT) {\n            checkChildNamespaces(child, namespace);\n          }\n        }\n        workList.addAll(name.children());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..86cc2abf 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -171,6 +171,34 @@ class CollapseProperties implements CompilerPass {\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        if (canCollapseUnannotatedChildNamespaces(name)) {\n+          // The child namespaces are all unannotated and thus safe to collapse.\n+          // We must do this before inlining aliases in this scope.\n+          RemoveUnusedCode.removeUnusedCode(\n+              name, name.getDeclaration(), null, true, namespace.getScope(), false);\n+          continue;\n+        }\n+        // {@code name} has namespace children that are either annotated or\n+        // aliased. Consider inlining aliases in this scope before recursing\n+        // to its children.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Ref.Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+        // Ensure the namespace children are semantically correct.\n+        for (Name child : Iterables.slice(name.props, 0)) {\n+          if (child.type == Name.Type.OBJECT) {\n+            checkChildNamespaces(child, namespace);\n+          }\n+        }\n+        workList.addAll(name.children());\n+      }\n+          name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}