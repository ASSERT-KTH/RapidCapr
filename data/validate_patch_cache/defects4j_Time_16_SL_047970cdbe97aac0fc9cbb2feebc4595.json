{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long instantAdjusted = instantLocal - offsetLocal;\n    final int offsetAdjusted = getOffset(instantAdjusted);\n\n    if (offsetLocal >= 0 && offsetLocal != offsetAdjusted) {\n        long nextLocal = nextTransition(instantAdjusted);\n        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n        if (nextLocal != nextAdjusted) {\n            int offsetPrev = getOffset(nextLocal - 1);\n            if (offsetPrev != offsetLocal && offsetPrev == offsetAdjusted) {\n                return offsetPrev;\n            }\n        }\n    } else if (offsetLocal < 0 && offsetLocal != offsetAdjusted) {\n        long prevLocal = previousTransition(instantAdjusted);\n        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n        if (prevLocal != prevAdjusted) {\n            int offsetPrev = getOffset(prevLocal);\n            if (prevAdjusted - instantLocal <= offsetLocal - offsetPrev) {\n                return offsetPrev;\n            }\n        }\n    }\n\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..9e7309e5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,33 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long instantAdjusted = instantLocal - offsetLocal;\n+    final int offsetAdjusted = getOffset(instantAdjusted);\n+\n+    if (offsetLocal >= 0 && offsetLocal != offsetAdjusted) {\n+        long nextLocal = nextTransition(instantAdjusted);\n+        long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+        if (nextLocal != nextAdjusted) {\n+            int offsetPrev = getOffset(nextLocal - 1);\n+            if (offsetPrev != offsetLocal && offsetPrev == offsetAdjusted) {\n+                return offsetPrev;\n+            }\n+        }\n+    } else if (offsetLocal < 0 && offsetLocal != offsetAdjusted) {\n+        long prevLocal = previousTransition(instantAdjusted);\n+        long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+        if (prevLocal != prevAdjusted) {\n+            int offsetPrev = getOffset(prevLocal);\n+            if (prevAdjusted - instantLocal <= offsetLocal - offsetPrev) {\n+                return offsetPrev;\n+            }\n+        }\n+    }\n+\n+    return offsetAdjusted;\n+}\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}