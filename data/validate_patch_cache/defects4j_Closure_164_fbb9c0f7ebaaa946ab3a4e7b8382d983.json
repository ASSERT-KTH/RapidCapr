{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n    ArrowType that = (ArrowType) other;\n    if (this.parameters.hasOptionalFormals() ||\n        that.parameters.hasOptionalFormals()) {\n      JSError.make(\n              \"Function subtyping with optional parameters is not yet supported\")\n          .type(typeRegistry.getErrorType())\n          .report();\n      // abort subtyping if one of the types has optional formals\n      // because optional parameters are treated differently from required\n      // in function subtype checking.\n      // this is because optional arguments can be cast to undefined, whereas\n      // required arguments cannot.\n      return false;\n    }\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      }\n\n      // We now add a check for non-matching number of parameters\n      int numParamsThis = countParamsWithFinishedFormals(thisParam);\n      int numParamsThat = countParamsWithFinishedFormals(thatParam);\n      if (numParamsThis != numParamsThat) {\n        return false;\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // \"that\" can't be a supertype, because it's missing a required argument.\n      // NOTE(nicksantos): In our type system, we use {function(...?)} and\n      // {function(...NoType)} to to indicate that arity should not be\n      // checked. Strictly speaking, this is not a correct formulation,\n      // because now a sub-function can required arguments that are var_args\n      // in the super-function. So we special-case this.\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n    return true;\n  }\n\n  private int countParamsWithFinishedFormals(Node parameterList) {\n    int numParams = 0;\n    while (parameterList != null && parameterList.isParams()) {\n      if (!parameterList.isName() || !parameterList.isOptionalArg()) {\n        numParams++;\n      } else {\n        break;\n      }\n      parameterList = parameterList.getNext();\n    }\n    return numParams;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..3a141f4c 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -81,8 +81,20 @@ final class ArrowType extends JSType {\n     if (!(other instanceof ArrowType)) {\n       return false;\n     }\n-\n     ArrowType that = (ArrowType) other;\n+    if (this.parameters.hasOptionalFormals() ||\n+        that.parameters.hasOptionalFormals()) {\n+      JSError.make(\n+              \"Function subtyping with optional parameters is not yet supported\")\n+          .type(typeRegistry.getErrorType())\n+          .report();\n+      // abort subtyping if one of the types has optional formals\n+      // because optional parameters are treated differently from required\n+      // in function subtype checking.\n+      // this is because optional arguments can be cast to undefined, whereas\n+      // required arguments cannot.\n+      return false;\n+    }\n \n     // This is described in Draft 2 of the ES4 spec,\n     // Section 3.4.7: Subtyping Function Types.\n@@ -96,42 +108,33 @@ final class ArrowType extends JSType {\n     //\n     // If this.paramType[i] is required,\n     // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n       if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+        if (thatParamType == null || !thatParamType.isSubtype(thisParamType)) {\n           return false;\n         }\n       }\n \n+      // We now add a check for non-matching number of parameters\n+      int numParamsThis = countParamsWithFinishedFormals(thisParam);\n+      int numParamsThat = countParamsWithFinishedFormals(thatParam);\n+      if (numParamsThis != numParamsThat) {\n+        return false;\n+      }\n+\n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+      // NOTE(nicksantos): In our type system, we use {function(...?)} and\n+      // {function(...NoType)} to to indicate that arity should not be\n+      // checked. Strictly speaking, this is not a correct formulation,\n+      // because now a sub-function can required arguments that are var_args\n+      // in the super-function. So we special-case this.\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -148,11 +151,23 @@ final class ArrowType extends JSType {\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n-\n+    // \"that\" can't be a supertype, because it's missing a required argument.\n     return true;\n   }\n \n+  private int countParamsWithFinishedFormals(Node parameterList) {\n+    int numParams = 0;\n+    while (parameterList != null && parameterList.isParams()) {\n+      if (!parameterList.isName() || !parameterList.isOptionalArg()) {\n+        numParams++;\n+      } else {\n+        break;\n+      }\n+      parameterList = parameterList.getNext();\n+    }\n+    return numParams;\n+  }\n+\n   /**\n    * @return True if our parameter spec is equal to {@code that}'s parameter\n    *     spec.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}