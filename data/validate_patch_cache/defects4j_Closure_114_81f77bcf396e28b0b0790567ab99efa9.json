{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          // Patch for assignments that appear in the init,\n          // condition or iteration part of a FOR loop.  Without\n          // this change, all 3 of those parts try to claim the for\n          // loop as their dependency scope.  The last assignment in\n          // those three fields wins, which can result in incorrect\n          // reference edges between referenced and assigned variables.\n          //\n          // TODO(user) revisit the dependency scope calculation\n          // logic.\n          if (parent.getFirstChild() == n && parent.getChildCount() == 3) {\n            Node forSecondChild = parent.getFirstChild().getNext();\n            if (forSecondChild == null || !forSecondChild.isVar()) {\n              recordDepScope(recordNode, ns);\n            }\n          } else if (parent.getLastChild() == n) {\n            recordDepScope(nameNode, ns);\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        } else {\n          // The rhs of the assignment is the caller, so it's used by the\n          // context. Don't associate it w/ the lhs.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug.\n          // See testAssignWithCall2 for an example of this.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..3df90dff 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -554,8 +554,7 @@ final class NameAnalyzer implements CompilerPass {\n           break;\n       }\n     }\n-\n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n       Node nameNode = n.getFirstChild();\n       Node parent = n.getParent();\n       NameInformation ns = createNameInformation(t, nameNode);\n@@ -570,10 +569,15 @@ final class NameAnalyzer implements CompilerPass {\n           //\n           // TODO(user) revisit the dependency scope calculation\n           // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n+          if (parent.getFirstChild() == n && parent.getChildCount() == 3) {\n+            Node forSecondChild = parent.getFirstChild().getNext();\n+            if (forSecondChild == null || !forSecondChild.isVar()) {\n+              recordDepScope(recordNode, ns);\n+            }\n+          } else if (parent.getLastChild() == n) {\n             recordDepScope(nameNode, ns);\n+          } else {\n+            recordDepScope(recordNode, ns);\n           }\n         } else {\n           // The rhs of the assignment is the caller, so it's used by the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}