{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        Object[] rawArguments = invocation.getRawArguments();\n        for (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n            Matcher matcher = matchers.get(i);\n            if (matcher instanceof CapturesArguments) {\n                ((CapturesArguments)matcher).captureFrom(rawArguments[i]);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c867d75c6 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,15 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n+            Matcher matcher = matchers.get(i);\n+            if (matcher instanceof CapturesArguments) {\n+                ((CapturesArguments)matcher).captureFrom(rawArguments[i]);\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}