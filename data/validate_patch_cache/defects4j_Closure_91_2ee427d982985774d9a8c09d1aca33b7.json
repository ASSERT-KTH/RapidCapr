{
    "patch": "import com.google.javascript.jscomp.DiagnosticGroups;\nimport com.google.javascript.jscomp.DiagnosticType;\nimport com.google.javascript.jscomp.JSError;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSDocInfo;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.JSTypeTools;\n\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    // Check if 'this' reference is safe to use\n    if (n.isFunction()) {\n      JSType type = n.getJSType();\n      if (type != null && type.hasReferenceToType(getNativeType(JSTypeNative.GLOBAL_THIS))) {\n        JSTypeRegistry registry = t.getCompiler().getTypeRegistry();\n        JSTypeTools tools = registry.getJSTypeTools();\n        if (!tools.isKnownToBeFunctionContext(n)) {\n          t.report(n, JSError.make(DiagnosticGroups.forType(DiagnosticGroups.JSC_USED_GLOBAL_THIS),\n              new DiagnosticType(\"JSC_USED_GLOBAL_THIS\", \"dangerous use of the global this object\")));\n        }\n      }\n    }\n\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..685fb5e5 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,8 +79,19 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+import com.google.javascript.jscomp.DiagnosticGroups;\n+import com.google.javascript.jscomp.DiagnosticType;\n+import com.google.javascript.jscomp.JSError;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSDocInfo;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.JSTypeTools;\n \n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n@@ -142,8 +153,21 @@ final class CheckGlobalThis implements Callback {\n       }\n     }\n \n+    // Check if 'this' reference is safe to use\n+    if (n.isFunction()) {\n+      JSType type = n.getJSType();\n+      if (type != null && type.hasReferenceToType(getNativeType(JSTypeNative.GLOBAL_THIS))) {\n+        JSTypeRegistry registry = t.getCompiler().getTypeRegistry();\n+        JSTypeTools tools = registry.getJSTypeTools();\n+        if (!tools.isKnownToBeFunctionContext(n)) {\n+          t.report(n, JSError.make(DiagnosticGroups.forType(DiagnosticGroups.JSC_USED_GLOBAL_THIS),\n+              new DiagnosticType(\"JSC_USED_GLOBAL_THIS\", \"dangerous use of the global this object\")));\n+        }\n+      }\n+    }\n+\n     return true;\n-  }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}