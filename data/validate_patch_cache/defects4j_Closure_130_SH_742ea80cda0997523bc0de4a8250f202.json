{
    "patch": "      if ((name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0)\n          || (name.globalSets == 0 && name.localSets == 1 && name.aliasingGets <= 1)) {\n        // {@code name} meets condition (a).\n        if (name.type == Name.Type.OBJECTLIT ||\n            name.type == Name.Type.FUNCTION) {\n          // Add all of {@code name}'s children to the worklist.\n          workList.addAll(name.props);\n        } else if (name.type == Name.Type.VAR || name.type == Name.Type.LET) {\n          // Try to inline {@code name} if it meets condition (b).\n          inlineVariableIfPossible(name, namespace);\n        }\n      } else if (name.globalSets == 0 &&\n                 name.localSets == 1 &&\n                 name.aliasingGets > 1) {\n        // {@code name} meets condition (b) because it has exactly one\n        // local-set and more than one aliasing-get. Try to inline it.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..e153ec73 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,31 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0)\n+          || (name.globalSets == 0 && name.localSets == 1 && name.aliasingGets <= 1)) {\n+        // {@code name} meets condition (a).\n+        if (name.type == Name.Type.OBJECTLIT ||\n+            name.type == Name.Type.FUNCTION) {\n+          // Add all of {@code name}'s children to the worklist.\n+          workList.addAll(name.props);\n+        } else if (name.type == Name.Type.VAR || name.type == Name.Type.LET) {\n+          // Try to inline {@code name} if it meets condition (b).\n+          inlineVariableIfPossible(name, namespace);\n+        }\n+      } else if (name.globalSets == 0 &&\n+                 name.localSets == 1 &&\n+                 name.aliasingGets > 1) {\n+        // {@code name} meets condition (b) because it has exactly one\n+        // local-set and more than one aliasing-get. Try to inline it.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}