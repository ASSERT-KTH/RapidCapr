{
    "patch": "      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..a866d305 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1657,6 +1657,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Node constructor = n.getFirstChild();\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n     if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n+      FunctionType fnType = type.toMaybeFunctionType();\n       FunctionType fnType = type.toMaybeFunctionType();\n       if (fnType != null) {\n         visitParameterList(t, n, fnType);\n@@ -1667,6 +1668,15 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     } else {\n       report(t, n, NOT_A_CONSTRUCTOR);\n       ensureTyped(t, n);\n+    }\n+        visitParameterList(t, n, fnType);\n+        ensureTyped(t, n, fnType.getInstanceType());\n+      } else {\n+        ensureTyped(t, n);\n+      }\n+    } else {\n+      report(t, n, NOT_A_CONSTRUCTOR);\n+      ensureTyped(t, n);\n     }\n   }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}