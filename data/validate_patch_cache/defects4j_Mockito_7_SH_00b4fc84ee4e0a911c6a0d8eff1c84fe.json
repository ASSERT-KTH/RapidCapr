{
    "patch": "private void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    Type[] actualTypeArguments = getActualTypeArgumentsFor(typeVariable);\n    for (Type type : actualTypeArguments) {\n        if (type instanceof TypeVariable) {\n            registerTypeVariablesOn(type);\n        }\n    }\n}\n\nprivate Type[] getActualTypeArgumentsFor(TypeVariable<?> typeVariable) {\n    Type[] bounds = typeVariable.getBounds();\n    if (bounds.length == 1 && bounds[0] instanceof ParameterizedType) {\n        return ((ParameterizedType) bounds[0]).getActualTypeArguments();\n    }\n    return new Type[0];\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..91552d0f2 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,25 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    Type[] actualTypeArguments = getActualTypeArgumentsFor(typeVariable);\n+    for (Type type : actualTypeArguments) {\n+        if (type instanceof TypeVariable) {\n+            registerTypeVariablesOn(type);\n+        }\n+    }\n+}\n+\n+private Type[] getActualTypeArgumentsFor(TypeVariable<?> typeVariable) {\n+    Type[] bounds = typeVariable.getBounds();\n+    if (bounds.length == 1 && bounds[0] instanceof ParameterizedType) {\n+        return ((ParameterizedType) bounds[0]).getActualTypeArguments();\n+    }\n+    return new Type[0];\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}