{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        String paramName = lastArg.getString();\n        if (NodeUtil.isNameReferenced(fnScope, paramName) || function.isArrowFunction() && isOnlyArgInParamList(lastArg)) {\n          break; \n        }\n        compiler.reportCodeChange();\n        argList.removeChild(lastArg);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5f738f23 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -392,13 +392,12 @@ class RemoveUnusedVars\n       // Strip unreferenced args off the end of the function declaration.\n       Node lastArg;\n       while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        String paramName = lastArg.getString();\n+        if (NodeUtil.isNameReferenced(fnScope, paramName) || function.isArrowFunction() && isOnlyArgInParamList(lastArg)) {\n+          break; \n         }\n+        compiler.reportCodeChange();\n+        argList.removeChild(lastArg);\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: no suitable method found for isNameReferenced(Scope,String)",
    "test_result": "ERROR"
}