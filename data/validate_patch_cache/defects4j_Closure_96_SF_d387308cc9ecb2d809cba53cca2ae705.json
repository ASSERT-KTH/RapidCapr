{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n    List<Node> parameters = functionType.getParameters();\n    List<Node> varArgs = functionType.getVarArgsList();\n\n    int numArgs = arguments.size();\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (numArgs < minArgs) {\n      t.reportWarning(\n          call, WRONG_ARGUMENT_COUNT, \"Function does not have enough parameters.\");\n      return;\n    }\n    if (!varArgs.isEmpty() && numArgs >= parameters.size()) {\n      parameters = new ArrayList<>(parameters);\n      parameters.addAll(Collections.nCopies(numArgs - parameters.size() + 1, varArgs.get(0)));\n    }\n    if (numArgs > parameters.size() && maxArgs != Integer.MAX_VALUE) {\n      t.reportWarning(\n          call, WRONG_ARGUMENT_COUNT, \"Function invoked with too many arguments.\");\n      return;\n    }\n    int ordinal = 0;\n    for (int i = 0; i < numArgs; i++) {\n      Node argument = arguments.get(i);\n      Node parameter = parameters.get(Math.min(i, parameters.size() - 1));\n      if (parameter == null) {\n        continue;\n      }\n      ordinal++;\n      validator.expectArgumentMatchesParameter(\n          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..67140dec 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,36 +1396,40 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+    List<Node> arguments = call.children().stream().skip(1).collect(Collectors.toList());\n+    List<Node> parameters = functionType.getParameters();\n+    List<Node> varArgs = functionType.getVarArgsList();\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n+    int numArgs = arguments.size();\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    if (numArgs < minArgs) {\n+      t.reportWarning(\n+          call, WRONG_ARGUMENT_COUNT, \"Function does not have enough parameters.\");\n+      return;\n+    }\n+    if (!varArgs.isEmpty() && numArgs >= parameters.size()) {\n+      parameters = new ArrayList<>(parameters);\n+      parameters.addAll(Collections.nCopies(numArgs - parameters.size() + 1, varArgs.get(0)));\n+    }\n+    if (numArgs > parameters.size() && maxArgs != Integer.MAX_VALUE) {\n+      t.reportWarning(\n+          call, WRONG_ARGUMENT_COUNT, \"Function invoked with too many arguments.\");\n+      return;\n+    }\n+    int ordinal = 0;\n+    for (int i = 0; i < numArgs; i++) {\n+      Node argument = arguments.get(i);\n+      Node parameter = parameters.get(Math.min(i, parameters.size() - 1));\n+      if (parameter == null) {\n+        continue;\n+      }\n+      ordinal++;\n+      validator.expectArgumentMatchesParameter(\n+          t, argument, getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}