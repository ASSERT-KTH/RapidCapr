{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n  boolean wasInConstructorContext = inConstructorContext;\n  inConstructorContext = true;\n  Node constructor = n.getFirstChild();\n  scope = traverse(constructor, scope);\n  JSType constructorType = constructor.getJSType();\n  JSType type = null;\n  if (constructorType != null) {\n    constructorType = constructorType.restrictByNotNullOrUndefined();\n    if (constructorType.isUnknownType()) {\n      type = getNativeType(UNKNOWN_TYPE);\n    } else {\n      FunctionType ct = constructorType.toMaybeFunctionType();\n      if (ct == null && constructorType instanceof FunctionType) {\n        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n        // return null. But NoObjectType implements the FunctionType\n        // interface, precisely because it can validly construct objects.\n        ct = (FunctionType) constructorType;\n      }\n      if (ct != null && ct.isConstructor()) {\n        type = ct.getInstanceType();\n        Node enclosingScript = NodeUtil.getEnclosingScript(n);\n        if (NodeUtil.isFunctionDeclaration(enclosingScript)) {\n          // constructor is a function declaration, so it has a scope and can\n          // attach instance properties to its prototype object.\n          ObjectType instanceType = ObjectType.fromNominalType(ct.getInstanceType());\n          if (instanceType != null) {\n            scope = scope.inferQualifiedNames(instanceType.propagateToAllKnownPropertyNames());\n          }\n        } else if (NodeUtil.isFunctionExpression(enclosingScript)\n            && !NodeUtil.isFunctionExpressionJoist(enclosingScript)) {\n          // constructor is a function expression that isn't in a Joist, so we \n          // can attach instance properties to a singleton instance.\n          if (ct.getTypeOfThis().isFunctionType()) {\n            FunctionType thisFn = ct.getTypeOfThis().toMaybeFunctionType();\n            if (thisFn != null && thisFn.hasInstanceType()) {\n              ObjectType objectType = ObjectType.fromFunction(thisFn);\n              ObjectType singletonInstance = objectType.createInitialInstance();\n              scope = scope.inferQualifiedNames(singletonInstance.propagateToAllKnownPropertyNames());\n            }\n          }\n        }\n      }\n    }\n  }\n  n.setJSType(type);\n  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n    scope = traverse(arg, scope);\n  }\n  inConstructorContext = wasInConstructorContext;\n  return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..4714c0e1 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1032,35 +1032,58 @@ class TypeInference\n     }\n   }\n \n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n-    Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n+  boolean wasInConstructorContext = inConstructorContext;\n+  inConstructorContext = true;\n+  Node constructor = n.getFirstChild();\n+  scope = traverse(constructor, scope);\n+  JSType constructorType = constructor.getJSType();\n+  JSType type = null;\n+  if (constructorType != null) {\n+    constructorType = constructorType.restrictByNotNullOrUndefined();\n+    if (constructorType.isUnknownType()) {\n+      type = getNativeType(UNKNOWN_TYPE);\n+    } else {\n+      FunctionType ct = constructorType.toMaybeFunctionType();\n+      if (ct == null && constructorType instanceof FunctionType) {\n+        // If constructorType is a NoObjectType, then toMaybeFunctionType will\n+        // return null. But NoObjectType implements the FunctionType\n+        // interface, precisely because it can validly construct objects.\n+        ct = (FunctionType) constructorType;\n+      }\n+      if (ct != null && ct.isConstructor()) {\n+        type = ct.getInstanceType();\n+        Node enclosingScript = NodeUtil.getEnclosingScript(n);\n+        if (NodeUtil.isFunctionDeclaration(enclosingScript)) {\n+          // constructor is a function declaration, so it has a scope and can\n+          // attach instance properties to its prototype object.\n+          ObjectType instanceType = ObjectType.fromNominalType(ct.getInstanceType());\n+          if (instanceType != null) {\n+            scope = scope.inferQualifiedNames(instanceType.propagateToAllKnownPropertyNames());\n+          }\n+        } else if (NodeUtil.isFunctionExpression(enclosingScript)\n+            && !NodeUtil.isFunctionExpressionJoist(enclosingScript)) {\n+          // constructor is a function expression that isn't in a Joist, so we \n+          // can attach instance properties to a singleton instance.\n+          if (ct.getTypeOfThis().isFunctionType()) {\n+            FunctionType thisFn = ct.getTypeOfThis().toMaybeFunctionType();\n+            if (thisFn != null && thisFn.hasInstanceType()) {\n+              ObjectType objectType = ObjectType.fromFunction(thisFn);\n+              ObjectType singletonInstance = objectType.createInitialInstance();\n+              scope = scope.inferQualifiedNames(singletonInstance.propagateToAllKnownPropertyNames());\n+            }\n+          }\n         }\n       }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n-    return scope;\n   }\n+  n.setJSType(type);\n+  for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+    scope = traverse(arg, scope);\n+  }\n+  inConstructorContext = wasInConstructorContext;\n+  return scope;\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}