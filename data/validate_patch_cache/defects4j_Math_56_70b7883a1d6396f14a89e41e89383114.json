{
    "patch": "        int idx = 1;\n        while (count <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= idx;\n        indices[last - 1] = idx;\n\n        int remaining = index - count;\n\n        for (int i = 0; i < last - 1; i++) {\n            idx = 1;\n            final int offset = uniCounterOffset[i];\n            while (remaining >= offset) {\n                remaining -= offset;\n                ++idx;\n            }\n            indices[i] = idx - 1;\n        }\n\n        return indices;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..9f1d061d8 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,27 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        count -= idx;\n+        indices[last - 1] = idx;\n+\n+        int remaining = index - count;\n+\n+        for (int i = 0; i < last - 1; i++) {\n+            idx = 1;\n+            final int offset = uniCounterOffset[i];\n+            while (remaining >= offset) {\n+                remaining -= offset;\n+                ++idx;\n+            }\n+            indices[i] = idx - 1;\n+        }\n+\n+        return indices;\n \n         return indices;\n     }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}