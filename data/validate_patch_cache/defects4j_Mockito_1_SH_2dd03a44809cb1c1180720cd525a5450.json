{
    "patch": "Object[] arguments = invocation.getRawArguments();\nif (invocation.getMethod().isVarArgs()) {\n    int indexOfVararg = arguments.length - 1;\n    Object varArgs = arguments[indexOfVararg];\n    if (varArgs == null) {\n        for (int i = 0; i < matchers.size(); i++) {\n            Matche",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..61c911dad 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] arguments = invocation.getRawArguments();\n+if (invocation.getMethod().isVarArgs()) {\n+    int indexOfVararg = arguments.length - 1;\n+    Object varArgs = arguments[indexOfVararg];\n+    if (varArgs == null) {\n+        for (int i = 0; i < matchers.size(); i++) {\n+            Matche\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}