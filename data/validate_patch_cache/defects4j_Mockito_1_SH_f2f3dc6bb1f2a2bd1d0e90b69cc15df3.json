{
    "patch": "            Object vararg = invocation.getArguments()[indexOfVararg];\n            if (vararg != null && vararg.getClass().isArray()) {\n                int varargLength = Array.getLength(vararg);\n                for (int i = 0; i < varargLength; i++) {\n                    int position = indexOfVararg + i;\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..5b68d00fb 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,17 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object vararg = invocation.getArguments()[indexOfVararg];\n+            if (vararg != null && vararg.getClass().isArray()) {\n+                int varargLength = Array.getLength(vararg);\n+                for (int i = 0; i < varargLength; i++) {\n+                    int position = indexOfVararg + i;\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(vararg, i));\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 0",
    "test_result": "FAIL"
}