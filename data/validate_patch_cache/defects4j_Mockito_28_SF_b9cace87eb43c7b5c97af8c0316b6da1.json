{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        final Class<?> fieldType = field.getType();\n        if (mocks.stream().noneMatch(mock -> fieldType.isAssignableFrom(mock.getClass()))) {\n            continue;\n        }\n        if (!field.isAccessible()) {\n            field.setAccessible(true);\n        }\n        try {\n            final Object fieldValue = field.get(fieldInstance);\n            if (fieldValue != null) {\n                continue;\n            }\n            final Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (mockCandidate != null) {\n                field.set(fieldInstance, mockCandidate);\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..545db7dec 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,30 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        final Class<?> fieldType = field.getType();\n+        if (mocks.stream().noneMatch(mock -> fieldType.isAssignableFrom(mock.getClass()))) {\n+            continue;\n+        }\n+        if (!field.isAccessible()) {\n+            field.setAccessible(true);\n+        }\n+        try {\n+            final Object fieldValue = field.get(fieldInstance);\n+            if (fieldValue != null) {\n+                continue;\n+            }\n+            final Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (mockCandidate != null) {\n+                field.set(fieldInstance, mockCandidate);\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: lambda expressions are not supported in -source 1.5",
    "test_result": "ERROR"
}