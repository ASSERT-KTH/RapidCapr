{
    "patch": "private void annotateCalls(Node n) {\n    Preconditions.checkState(n.isCall());\n\n    // Keep track of the \"this\" context of a call, and whether the call is a free call.\n    Node args = n.getLastChild();\n    if (!args.isParamList()) {\n      args = null;\n    }\n    // Special-case some function calls that have a \"this\" context.\n    if (n.isNew()) {\n      Node first = n.getFirstChild();\n      if (first.isQualifiedName() && first.getLastChild().getString().equals(\"Error\")) {\n        args = first.getNext();\n      }\n    }\n\n    // Annotate the \"this\" context of the call.\n    if (args == null || args.getFirstChild() == null) {\n      n.putBooleanProp(Node.FREE_CALL, true);\n    } else {\n      Node thisValue = args.getFirstChild().getNext();\n      if (thisValue != null) {\n        n.putBooleanProp(Node.FREE_CALL, false);\n        n.setFirstChild(null);  // detach the \"this\" value\n        n.putProp(Node.FREE_CALL_THIS_VALUE, thisValue);\n      }\n    }\n\n    // Keep track of the context in which eval is called. It is important\n    // to distinguish between \"(0, eval)()\" and \"eval()\".\n    Node callee = n.getFirstChild();\n    while (NodeUtil.isCast(callee)) {\n      callee = callee.getFirstChild();\n    }\n    if (callee.isName() && \"eval\".equals(callee.getString())) {\n      if (args == null || args.getFirstChild() == null) {\n        n.putBooleanProp(Node.DIRECT_EVAL, true);\n      } else {\n        n.putStringProp(Node.FUNCTION_TARGET, args.getFirstChild().getOriginalQualifiedName());\n      }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..f2c087ac 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,48 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+private void annotateCalls(Node n) {\n+    Preconditions.checkState(n.isCall());\n+\n+    // Keep track of the \"this\" context of a call, and whether the call is a free call.\n+    Node args = n.getLastChild();\n+    if (!args.isParamList()) {\n+      args = null;\n+    }\n+    // Special-case some function calls that have a \"this\" context.\n+    if (n.isNew()) {\n+      Node first = n.getFirstChild();\n+      if (first.isQualifiedName() && first.getLastChild().getString().equals(\"Error\")) {\n+        args = first.getNext();\n+      }\n+    }\n+\n+    // Annotate the \"this\" context of the call.\n+    if (args == null || args.getFirstChild() == null) {\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    } else {\n+      Node thisValue = args.getFirstChild().getNext();\n+      if (thisValue != null) {\n+        n.putBooleanProp(Node.FREE_CALL, false);\n+        n.setFirstChild(null);  // detach the \"this\" value\n+        n.putProp(Node.FREE_CALL_THIS_VALUE, thisValue);\n+      }\n+    }\n+\n+    // Keep track of the context in which eval is called. It is important\n+    // to distinguish between \"(0, eval)()\" and \"eval()\".\n+    Node callee = n.getFirstChild();\n+    while (NodeUtil.isCast(callee)) {\n+      callee = callee.getFirstChild();\n+    }\n+    if (callee.isName() && \"eval\".equals(callee.getString())) {\n+      if (args == null || args.getFirstChild() == null) {\n+        n.putBooleanProp(Node.DIRECT_EVAL, true);\n+      } else {\n+        n.putStringProp(Node.FUNCTION_TARGET, args.getFirstChild().getOriginalQualifiedName());\n+      }\n+    }\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}