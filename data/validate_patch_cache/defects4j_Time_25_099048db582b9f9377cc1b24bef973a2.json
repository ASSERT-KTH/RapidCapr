{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    // If there is a transition point exactly between instantLocal and instantAdjusted\n                    final int offset1, offset2;\n                    if (offsetLocal < offsetAdjusted) {\n                        offset1 = offsetLocal;\n                        offset2 = offsetAdjusted;\n                    } else {\n                        offset1 = offsetAdjusted;\n                        offset2 = offsetLocal;\n                    }\n                    final long next = nextTransition(instantLocal - offset1);\n                    if (next == instantLocal - offset1) {\n                        // There is a transition point exactly between instantLocal and instantAdjusted\n                        // Prefer the offset closest to instantLocal\n                        return offsetLocal;\n                    }\n                    return offset2;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..57ef13f2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    // If there is a transition point exactly between instantLocal and instantAdjusted\n+                    final int offset1, offset2;\n+                    if (offsetLocal < offsetAdjusted) {\n+                        offset1 = offsetLocal;\n+                        offset2 = offsetAdjusted;\n+                    } else {\n+                        offset1 = offsetAdjusted;\n+                        offset2 = offsetLocal;\n+                    }\n+                    final long next = nextTransition(instantLocal - offset1);\n+                    if (next == instantLocal - offset1) {\n+                        // There is a transition point exactly between instantLocal and instantAdjusted\n+                        // Prefer the offset closest to instantLocal\n+                        return offsetLocal;\n+                    }\n+                    return offset2;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}