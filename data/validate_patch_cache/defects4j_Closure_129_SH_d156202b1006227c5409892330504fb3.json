{
    "patch": "if (first.isCast()) {\n  Node callNode = first.getNext();\n  if (!callNode.isCall()) {\n    callNode = callNode.getNext();\n  }\n  annotateCalls(callNode);\n  return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..23eea47f 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,14 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+if (first.isCast()) {\n+  Node callNode = first.getNext();\n+  if (!callNode.isCall()) {\n+    callNode = callNode.getNext();\n+  }\n+  annotateCalls(callNode);\n+  return;\n+}\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "java.lang.RuntimeException: java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}