{
    "patch": "    private void readTypeVariables() {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArg = null;\n        try {\n            actualTypeArg = getActualTypeArgumentFor(typeVariable);\n        } catch (Exception ignored) {\n            // Ignore exceptions\n        }\n        if (actualTypeArg != null) {\n            registerTypeVariablesOn(actualTypeArg);\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..e9ea2917f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,20 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArg = null;\n+        try {\n+            actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+        } catch (Exception ignored) {\n+            // Ignore exceptions\n+        }\n+        if (actualTypeArg != null) {\n+            registerTypeVariablesOn(actualTypeArg);\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}