{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    final double FUNCTION_VALUE_TOLERANCE = 10e-6;\n\n    double fMin = f.value(min);\n    double fMax = f.value(max);\n    double fInitial = f.value(initial);\n    verifyBracketing(min, max, fMin, fMax);\n\n    if (Math.abs(fInitial) <= FUNCTION_VALUE_TOLERANCE) {\n        return initial;\n    }\n\n    if (Math.abs(fMin) <= FUNCTION_VALUE_TOLERANCE) {\n        return min;\n    }\n\n    if (Math.abs(fMax) <= FUNCTION_VALUE_TOLERANCE) {\n        return max;\n    }\n\n    double bracketedTolerance = Math.abs(FUNCTION_VALUE_TOLERANCE * 100 * (max - min));\n    if (Math.abs(fMin) > Math.abs(fMax)) {\n        double temp = min;\n        min = max;\n        max = temp;\n        temp = fMin;\n        fMin = fMax;\n        fMax = temp;\n    }\n\n    double xMid = initial;\n    double fMid = f.value(xMid);\n    for (int i = 0; i < MAX_EVAL; i++) {\n        double bracketed = ((fMid > 0) == (fMin > 0));\n        double dx = (fMin - fMax) / (fMax - fMid);\n        double xTry;\n        if (num.isZero(dx)) {\n            xTry = xMid - fMid / (fMax - fMid) * (max - xMid);\n        } else {\n            double temp = xMid - fMid / dx;\n            xTry = (temp < min || temp > max) ? 0.5 * (min + max) : temp;\n        }\n\n        double fTry = f.value(xTry);\n        if (Math.abs(fTry) <= FUNCTION_VALUE_TOLERANCE) {\n            return xTry;\n        }\n\n        if (f_try * f_min < 0) {\n            max = xMid;\n            fMax = fMid;\n        } else {\n            min = xMid;\n            fMin = fMid;\n        }\n\n        if (Math.abs(fMin) < Math.abs(fMax)) {\n            double temp = min;\n            min = max;\n            max = temp;\n            temp = fMin;\n            fMin = fMax;\n            fMax = temp;\n        }\n\n        if (Math.abs(max - min) < bracketedTolerance) {\n            return 0.5 * (min + max);\n        }\n\n        xMid = 0.5 * (max + min);\n        fMid = f.value(xMid);\n    }\n\n    throw new FunctionEvaluationException(\"Maximum number of iterations exceeded\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..ea7bb5264 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,50 +95,85 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    final double FUNCTION_VALUE_TOLERANCE = 10e-6;\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double fMin = f.value(min);\n+    double fMax = f.value(max);\n+    double fInitial = f.value(initial);\n+    verifyBracketing(min, max, fMin, fMax);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n+    if (Math.abs(fInitial) <= FUNCTION_VALUE_TOLERANCE) {\n+        return initial;\n+    }\n+\n+    if (Math.abs(fMin) <= FUNCTION_VALUE_TOLERANCE) {\n+        return min;\n+    }\n+\n+    if (Math.abs(fMax) <= FUNCTION_VALUE_TOLERANCE) {\n+        return max;\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n+    double bracketedTolerance = Math.abs(FUNCTION_VALUE_TOLERANCE * 100 * (max - min));\n+    if (Math.abs(fMin) > Math.abs(fMax)) {\n+        double temp = min;\n+        min = max;\n+        max = temp;\n+        temp = fMin;\n+        fMin = fMax;\n+        fMax = temp;\n+    }\n+\n+    double xMid = initial;\n+    double fMid = f.value(xMid);\n+    for (int i = 0; i < MAX_EVAL; i++) {\n+        double bracketed = ((fMid > 0) == (fMin > 0));\n+        double dx = (fMin - fMax) / (fMax - fMid);\n+        double xTry;\n+        if (num.isZero(dx)) {\n+            xTry = xMid - fMid / (fMax - fMid) * (max - xMid);\n+        } else {\n+            double temp = xMid - fMid / dx;\n+            xTry = (temp < min || temp > max) ? 0.5 * (min + max) : temp;\n         }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n+        double fTry = f.value(xTry);\n+        if (Math.abs(fTry) <= FUNCTION_VALUE_TOLERANCE) {\n+            return xTry;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        if (f_try * f_min < 0) {\n+            max = xMid;\n+            fMax = fMid;\n+        } else {\n+            min = xMid;\n+            fMin = fMid;\n         }\n \n+        if (Math.abs(fMin) < Math.abs(fMax)) {\n+            double temp = min;\n+            min = max;\n+            max = temp;\n+            temp = fMin;\n+            fMin = fMax;\n+            fMax = temp;\n+        }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+        if (Math.abs(max - min) < bracketedTolerance) {\n+            return 0.5 * (min + max);\n+        }\n \n+        xMid = 0.5 * (max + min);\n+        fMid = f.value(xMid);\n     }\n \n+    throw new FunctionEvaluationException(\"Maximum number of iterations exceeded\");\n+}\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: method verifyBracketing in class UnivariateRealSolverImpl cannot be applied to given types;",
    "test_result": "ERROR"
}