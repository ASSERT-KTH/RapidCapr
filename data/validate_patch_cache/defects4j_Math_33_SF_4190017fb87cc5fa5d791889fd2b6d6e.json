{
    "patch": "    protected void dropPhase1Objective() {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0);\n\n        // positive cost non-artificial variables\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        for (int i = getNumObjectiveFunctions(); i < tableau.getColumnDimension(); i++) {\n          if (getBasicRow(i) == null) {\n            columnsToDrop.add(i);\n          }\n        }\n\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n\n        int destRow = 0;\n        for (int srcRow = 1; srcRow < getHeight(); srcRow++, destRow++) {\n            int destCol = 0;\n            for (int srcCol = 0; srcCol < getWidth(); srcCol++) {\n                if (columnsToDrop.contains(srcCol)) {\n                    continue;\n                }\n                matrix[destRow][destCol++] = tableau.getEntry(srcRow, srcCol);\n            }\n        }\n\n        columnLabels = new LinkedHashMap<Integer, String>();\n        int labelIndex = 0;\n        for (int i = 0; i < tableau.getColumnDimension(); i++) {\n          if (!columnsToDrop.contains(i)) {\n            columnLabels.put(new Integer(labelIndex++), null);\n          }\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..9c648f344 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -341,25 +341,31 @@ class SimplexTableau implements Serializable {\n         }\n \n         // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n+        for (int i = getNumObjectiveFunctions(); i < tableau.getColumnDimension(); i++) {\n+          if (getBasicRow(i) == null) {\n+            columnsToDrop.add(i);\n           }\n         }\n \n         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+\n+        int destRow = 0;\n+        for (int srcRow = 1; srcRow < getHeight(); srcRow++, destRow++) {\n+            int destCol = 0;\n+            for (int srcCol = 0; srcCol < getWidth(); srcCol++) {\n+                if (columnsToDrop.contains(srcCol)) {\n+                    continue;\n+                }\n+                matrix[destRow][destCol++] = tableau.getEntry(srcRow, srcCol);\n             }\n-          }\n         }\n \n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+        columnLabels = new LinkedHashMap<Integer, String>();\n+        int labelIndex = 0;\n+        for (int i = 0; i < tableau.getColumnDimension(); i++) {\n+          if (!columnsToDrop.contains(i)) {\n+            columnLabels.put(new Integer(labelIndex++), null);\n+          }\n         }\n \n         this.tableau = new Array2DRowRealMatrix(matrix);",
    "result_reason": "error: cannot assign a value to final variable columnLabels",
    "test_result": "ERROR"
}