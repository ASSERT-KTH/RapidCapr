{
    "patch": "        long newMillis = iMillis;\n        boolean success = true;\n        int failureIndex = -1;\n        for (int i = 0; i < count; i++) {\n            try {\n                newMillis = savedFields[i].set(newMillis, resetFields);\n            } catch (IllegalFieldValueException e) {\n                success = false;\n                failureIndex = i;\n                if (text != null) {\n                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n                }\n                throw e;\n            }\n        }\n\n        if (!success) {\n            for (int i = 0; i <= failureIndex; i++) {\n                newMillis = savedFields[i].set(newMillis, resetFields);\n            }\n        }\n\n        if (iZone == null) {\n            newMillis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(newMillis);\n            newMillis -= offset;\n            if (offset != iZone.getOffset(newMillis)) {\n                String message = \"Illegal instant due to time zone offset transition (\" + iZone + \")\";\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        return newMillis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..203b3a3d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,42 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long newMillis = iMillis;\n+        boolean success = true;\n+        int failureIndex = -1;\n+        for (int i = 0; i < count; i++) {\n+            try {\n+                newMillis = savedFields[i].set(newMillis, resetFields);\n+            } catch (IllegalFieldValueException e) {\n+                success = false;\n+                failureIndex = i;\n+                if (text != null) {\n+                    e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+                }\n+                throw e;\n+            }\n+        }\n+\n+        if (!success) {\n+            for (int i = 0; i <= failureIndex; i++) {\n+                newMillis = savedFields[i].set(newMillis, resetFields);\n+            }\n+        }\n+\n+        if (iZone == null) {\n+            newMillis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(newMillis);\n+            newMillis -= offset;\n+            if (offset != iZone.getOffset(newMillis)) {\n+                String message = \"Illegal instant due to time zone offset transition (\" + iZone + \")\";\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+        return newMillis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}