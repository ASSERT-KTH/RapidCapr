{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n>>> [ INFILL ] <<<\n    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (objType != null && !objType.isRecordType()) {\n      if (!constraintObj.canTestType(objType)) {\n        warnings.add(makeInvalidPropertyAccessWarning(n));\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..8de43caa 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1134,6 +1134,14 @@ class TypeInference\n         }\n       }\n     }\n+>>> [ INFILL ] <<<\n+    ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (objType != null && !objType.isRecordType()) {\n+      if (!constraintObj.canTestType(objType)) {\n+        warnings.add(makeInvalidPropertyAccessWarning(n));\n+      }\n+    }\n+    }\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}