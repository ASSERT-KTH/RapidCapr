{
    "patch": "    public Dfp multiply(final int x) {\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        } else if (x == 1) {\n            return newInstance(this);\n        } else if (x == -1) {\n            return newInstance(getField(), -this.sign, this.getNonzeroMantissa(), this.getExponent());\n        } else if (x > 0 && x < RADIX) {\n            return multiplyFast(x);\n        } else if (x < 0 && -x < RADIX) {\n            return multiplyFast(-x).negate();\n        } else {\n            final Dfp powerOfTwo = (x < 0) ? newInstance(ONE).divide(multiplyFast(-x)) : multiplyFast(x);\n            return multiplyByPowerOfTwo(powerOfTwo);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..e53a931f2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,46 +324,21 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n-            return;\n+    public Dfp multiply(final int x) {\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        } else if (x == 1) {\n+            return newInstance(this);\n+        } else if (x == -1) {\n+            return newInstance(getField(), -this.sign, this.getNonzeroMantissa(), this.getExponent());\n+        } else if (x > 0 && x < RADIX) {\n+            return multiplyFast(x);\n+        } else if (x < 0 && -x < RADIX) {\n+            return multiplyFast(-x).negate();\n+        } else {\n+            final Dfp powerOfTwo = (x < 0) ? newInstance(ONE).divide(multiplyFast(-x)) : multiplyFast(x);\n+            return multiplyByPowerOfTwo(powerOfTwo);\n         }\n-\n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n-\n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n-            }\n-        }\n-\n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n-        }\n-\n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n-        for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n-            }\n-          }\n-        }\n-\n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n-        }\n-\n-        this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}