{
    "patch": "private void checkParameters() {\n    final double[] init = getStartPoint();\n    final double[] lB = getLowerBound();\n    final double[] uB = getUpperBound();\n\n    // Checks whether there is at least one finite bound value.\n    boolean hasFiniteBounds = false;\n    for (int i ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..67000e56d 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,14 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+private void checkParameters() {\n+    final double[] init = getStartPoint();\n+    final double[] lB = getLowerBound();\n+    final double[] uB = getUpperBound();\n+\n+    // Checks whether there is at least one finite bound value.\n+    boolean hasFiniteBounds = false;\n+    for (int i \n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}