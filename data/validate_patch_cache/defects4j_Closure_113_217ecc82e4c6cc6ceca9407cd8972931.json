{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null) {\n        unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n      } else if (!provided.isExplicitlyProvided()) {\n        if (usedNamespaces.add(ns)) {\n          compiler.report(JSError.make(n, NAME_NOT_PROVIDED_WARNING_MSG, ns));\n        }\n      } else {\n        JSModule providedModule = provided.explicitModule;\n        if (providedModule == null) {\n          throw new IllegalStateException(\"provided.explicitModule cannot be null\");\n        }\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null && module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          t.report(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName());\n        }\n      }\n\n      maybeAddToSymbolTable(left, Token.NAME);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      if (provided != null) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..b140ee77 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,40 +292,35 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n       String ns = arg.getString();\n+\n       ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      if (provided == null) {\n+        unrecognizedRequires.add(new UnrecognizedRequire(n, ns, t.getSourceName()));\n+      } else if (!provided.isExplicitlyProvided()) {\n+        if (usedNamespaces.add(ns)) {\n+          compiler.report(JSError.make(n, NAME_NOT_PROVIDED_WARNING_MSG, ns));\n+        }\n       } else {\n         JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n+        if (providedModule == null) {\n+          throw new IllegalStateException(\"provided.explicitModule cannot be null\");\n+        }\n \n         JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n+        if (moduleGraph != null && module != providedModule &&\n             !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n+          t.report(n, XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName());\n         }\n       }\n \n-      maybeAddToSymbolTable(left);\n+      maybeAddToSymbolTable(left, Token.NAME);\n       maybeAddStringNodeToSymbolTable(arg);\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n       if (provided != null) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}