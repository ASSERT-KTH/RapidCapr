{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Keep track of the first unreferenced arg.  We'll need to close any open\n    // object literals before removing it.\n    Node firstUnreferencedArgToRemove = null;\n    boolean skipArgs = false;\n    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n      Var var = fnScope.getVar(arg.getString());\n\n      if (skipArgs && var != null) {\n        report(true, function, \"Variable redeclaration of parameter \\\"\" +\n            var.name + \"\\\"\");\n      }\n\n      if (!referenced.contains(var)) {\n        if (firstUnreferencedArgToRemove == null) {\n          firstUnreferencedArgToRemove = arg;\n        }\n        skipArgs = true;\n      } else if (skipArgs) {\n        report(true, function, \"Unused parameter \\\"\" + var.name + \"\\\"\");\n      }\n    }\n\n    if (firstUnreferencedArgToRemove != null) {\n      // Eat the tail.\n      while (argList.getLastChild() != firstUnreferencedArgToRemove) {\n        argList.removeChild(argList.getLastChild());\n      }\n      argList.removeChild(firstUnreferencedArgToRemove);\n      compiler.reportCodeChange();\n    } else if (skipArgs) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4ec245fb 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,62 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Keep track of the first unreferenced arg.  We'll need to close any open\n+    // object literals before removing it.\n+    Node firstUnreferencedArgToRemove = null;\n+    boolean skipArgs = false;\n+    for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+      Var var = fnScope.getVar(arg.getString());\n+\n+      if (skipArgs && var != null) {\n+        report(true, function, \"Variable redeclaration of parameter \\\"\" +\n+            var.name + \"\\\"\");\n+      }\n+\n+      if (!referenced.contains(var)) {\n+        if (firstUnreferencedArgToRemove == null) {\n+          firstUnreferencedArgToRemove = arg;\n+        }\n+        skipArgs = true;\n+      } else if (skipArgs) {\n+        report(true, function, \"Unused parameter \\\"\" + var.name + \"\\\"\");\n+      }\n+    }\n+\n+    if (firstUnreferencedArgToRemove != null) {\n+      // Eat the tail.\n+      while (argList.getLastChild() != firstUnreferencedArgToRemove) {\n+        argList.removeChild(argList.getLastChild());\n+      }\n+      argList.removeChild(firstUnreferencedArgToRemove);\n+      compiler.reportCodeChange();\n+    } else if (skipArgs) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}