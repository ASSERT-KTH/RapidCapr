{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n    boolean nan = false;\n\n    final double[] tmpX = new double[getSize()];\n    final double[] tmpY = new double[getSize()];\n\n    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        for (int i = 0; i < result.length; ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n\n    for (int i = 0; i < getSize(); i++) {\n        if (Double.isNaN(x[xOffset + i]) || Double.isNaN(y[yOffset + i])) {\n            for (int j = 0; j < result.length; ++j) {\n                result[resultOffset + j] = Double.NaN;\n            }\n            return;\n        }\n\n        if (Double.isInfinite(x[xOffset + i]) && Double.isInfinite(y[yOffset + i])) {\n            result[resultOffset + i] = FastMath.PI * (y[yOffset + i] >= 0 ? 0.25 : 1.25);\n            continue;\n        }\n\n        if (Double.isInfinite(y[yOffset + i])) {\n            result[resultOffset + i] = FastMath.copySign(FastMath.PI * 0.5, y[yOffset + i]);\n            continue;\n        }\n\n        if (Double.isInfinite(x[xOffset + i])) {\n            result[resultOffset + i] = FastMath.copySign(0d, x[xOffset + i]);\n            continue;\n        }\n\n        if (Math.abs(x[xOffset + i]) < Precision.SAFE_MIN) {\n            result[resultOffset + i] = FastMath.copySign(Math.PI * (y[yOffset + i] < 0d ? -0.5 : 0.5), y[yOffset + i]);\n            continue;\n        }\n        \n        tmpX[i] = x[xOffset + i];\n        tmpY[i] = y[yOffset + i];\n    }\n\n    if (Arrays.equals(tmpX, x, xOffset, getSize()) && Arrays.equals(tmpY, y, yOffset, getSize())) {\n        result[resultOffset] = FastMath.atan2(tmpY[0], tmpX[0]);\n        double inv = 1d / (getSize() - 1);\n        for (int i = 1; i < getSize(); i++) {\n            result[resultOffset + i] = FastMath.atan2(tmpY[i], tmpX[i]);\n            if (!nan && Double.isNaN(result[resultOffset + i])) {\n                nan = true;\n            } else {\n                result[resultOffset] = MathUtils.normalizeAngle(result[resultOffset] + MathUtils.normalizeAngle(result[resultOffset + i] - result[resultOffset]) * i * inv, result[resultOffset]);\n            }\n        }\n    } else {\n        for (int i = 0; i < result.length; i++) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..8188aaade 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,71 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+    boolean nan = false;\n \n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n+    final double[] tmpX = new double[getSize()];\n+    final double[] tmpY = new double[getSize()];\n \n-        } else {\n+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        for (int i = 0; i < result.length; ++i) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+        return;\n+    }\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+    for (int i = 0; i < getSize(); i++) {\n+        if (Double.isNaN(x[xOffset + i]) || Double.isNaN(y[yOffset + i])) {\n+            for (int j = 0; j < result.length; ++j) {\n+                result[resultOffset + j] = Double.NaN;\n             }\n+            return;\n+        }\n \n+        if (Double.isInfinite(x[xOffset + i]) && Double.isInfinite(y[yOffset + i])) {\n+            result[resultOffset + i] = FastMath.PI * (y[yOffset + i] >= 0 ? 0.25 : 1.25);\n+            continue;\n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isInfinite(y[yOffset + i])) {\n+            result[resultOffset + i] = FastMath.copySign(FastMath.PI * 0.5, y[yOffset + i]);\n+            continue;\n+        }\n \n+        if (Double.isInfinite(x[xOffset + i])) {\n+            result[resultOffset + i] = FastMath.copySign(0d, x[xOffset + i]);\n+            continue;\n+        }\n+\n+        if (Math.abs(x[xOffset + i]) < Precision.SAFE_MIN) {\n+            result[resultOffset + i] = FastMath.copySign(Math.PI * (y[yOffset + i] < 0d ? -0.5 : 0.5), y[yOffset + i]);\n+            continue;\n+        }\n+        \n+        tmpX[i] = x[xOffset + i];\n+        tmpY[i] = y[yOffset + i];\n+    }\n+\n+    if (Arrays.equals(tmpX, x, xOffset, getSize()) && Arrays.equals(tmpY, y, yOffset, getSize())) {\n+        result[resultOffset] = FastMath.atan2(tmpY[0], tmpX[0]);\n+        double inv = 1d / (getSize() - 1);\n+        for (int i = 1; i < getSize(); i++) {\n+            result[resultOffset + i] = FastMath.atan2(tmpY[i], tmpX[i]);\n+            if (!nan && Double.isNaN(result[resultOffset + i])) {\n+                nan = true;\n+            } else {\n+                result[resultOffset] = MathUtils.normalizeAngle(result[resultOffset] + MathUtils.normalizeAngle(result[resultOffset + i] - result[resultOffset]) * i * inv, result[resultOffset]);\n+            }\n+        }\n+    } else {\n+        for (int i = 0; i < result.length; i++) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+        return;\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}