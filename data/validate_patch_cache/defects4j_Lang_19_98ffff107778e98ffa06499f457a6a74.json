{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        if (index >= seqEnd) {\n            return 0;\n        }\n        // Uses -2 to ensure there is something after the &#\n        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n\n                // Check there's more than just an x after the &#\n                if(start == seqEnd) {\n                    return 0;\n                }\n                // set isHex to true after validating the input length\n                isHex = true;\n            }\n\n            int end = start;\n\n            // Note that this supports character codes without a ; on the end\n            while(end < seqEnd && input.charAt(end) != ';') \n            {\n                end++;\n            }\n\n            if (end == seqEnd) {\n                return 0;\n            }\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            //if isHex true, increment the offset by 3 otherwise by 2\n            return isHex ? (end + 3 - start) : (end + 2 - start);\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..96a3ac2f 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -36,6 +36,9 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n+        if (index >= seqEnd) {\n+            return 0;\n+        }\n         // Uses -2 to ensure there is something after the &#\n         if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n@@ -44,18 +47,27 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n             char firstChar = input.charAt(start);\n             if(firstChar == 'x' || firstChar == 'X') {\n                 start++;\n-                isHex = true;\n \n                 // Check there's more than just an x after the &#\n+                if(start == seqEnd) {\n+                    return 0;\n+                }\n+                // set isHex to true after validating the input length\n+                isHex = true;\n             }\n \n             int end = start;\n+\n             // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n+            while(end < seqEnd && input.charAt(end) != ';') \n             {\n                 end++;\n             }\n \n+            if (end == seqEnd) {\n+                return 0;\n+            }\n+\n             int entityValue;\n             try {\n                 if(isHex) {\n@@ -64,7 +76,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n             } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                 return 0;\n             }\n \n@@ -76,8 +88,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+            //if isHex true, increment the offset by 3 otherwise by 2\n+            return isHex ? (end + 3 - start) : (end + 2 - start);\n         }\n         return 0;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape expected:<\u0080[\u009f]> but was:<\u0080[;\u009f;]>",
    "test_result": "FAIL"
}