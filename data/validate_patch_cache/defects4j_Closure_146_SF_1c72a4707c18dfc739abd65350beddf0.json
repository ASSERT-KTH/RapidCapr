{
    "patch": "/**\n * Represents a pair of JS types under an inequality relation.\n */\nclass TypePair {\n  final JSType typeA;\n  final JSType typeB;\n\n  TypePair(JSType typeA, JSType typeB) {\n    this.typeA = typeA;\n    this.typeB = typeB;\n  }\n\n  /**\n   * Returns a canonicalized version of this type pair, where types A and B are\n   * sorted by their hash codes. If there is no need for canonicalization, returns\n   * this type pair.\n   */\n  TypePair canonicalize() {\n    if (typeA != null && typeB != null && typeA.hashCode() > typeB.hashCode()) {\n      return new TypePair(typeB, typeA);\n    } else {\n      return this;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..f90acbad 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,31 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n-    if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n-    }\n+/**\n+ * Represents a pair of JS types under an inequality relation.\n+ */\n+class TypePair {\n+  final JSType typeA;\n+  final JSType typeB;\n \n-    // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n+  TypePair(JSType typeA, JSType typeB) {\n+    this.typeA = typeA;\n+    this.typeB = typeB;\n+  }\n \n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n+  /**\n+   * Returns a canonicalized version of this type pair, where types A and B are\n+   * sorted by their hash codes. If there is no need for canonicalization, returns\n+   * this type pair.\n+   */\n+  TypePair canonicalize() {\n+    if (typeA != null && typeB != null && typeA.hashCode() > typeB.hashCode()) {\n+      return new TypePair(typeB, typeA);\n+    } else {\n+      return this;\n     }\n-\n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n   }\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: class JSType.TypePair is already defined in class JSType",
    "test_result": "ERROR"
}