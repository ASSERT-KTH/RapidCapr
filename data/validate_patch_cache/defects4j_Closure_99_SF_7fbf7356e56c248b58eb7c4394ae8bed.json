{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {};\n      int pType = parent == null ? Token.BLOCK : parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.VAR ||\n            pType == Token.LET ||\n            pType == Token.CONST)) {\n        return false;\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n      String lhsQualifier = lhs.getQualifiedName();\n      \n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhsQualifier != null) {\n          if (lhsQualifier.equals(\"goog.abstractMethod\") ||\n              (lhs != n.getParent() && lhsQualifier.startsWith(\"goog.\") &&\n               !lhsQualifier.startsWith(\"goog.testing.\"))) {\n            // Don't traverse the right-side of an abstract method definition.\n            // Don't traverse the right side of a goog.namespace assignment\n            // except for those in goog.testing.\n            return false;\n          } else if (n.getParent().getType() == Token.EXPR_RESULT &&\n                     n.getParent().getParent() == parent.getParent() &&\n                     isClassDefSubElement(lhs, parent.getParent())) {\n            // This is an (assignment) expression whose result is unused, within\n            // a class definition. Ignore this expression, and don't traverse its\n            // children.\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private static boolean isClassDefSubElement(Node lhs, Node classDefNode) {\n    Node nameParent = lhs.getParent();\n    return nameParent != classDefNode &&\n        nameParent.getType() == Token.MEMBER_DEF;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..ebb2db16 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -99,11 +99,14 @@ final class CheckGlobalThis implements Callback {\n       // var a = function() { }; // or\n       // function a() {} // or\n       // a.x = function() {};\n-      int pType = parent.getType();\n+      int pType = parent == null ? Token.BLOCK : parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+            pType == Token.ASSIGN ||\n+            pType == Token.VAR ||\n+            pType == Token.LET ||\n+            pType == Token.CONST)) {\n         return false;\n       }\n     }\n@@ -111,6 +114,7 @@ final class CheckGlobalThis implements Callback {\n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n+      String lhsQualifier = lhs.getQualifiedName();\n       \n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n@@ -122,19 +126,39 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (lhsQualifier != null) {\n+          if (lhsQualifier.equals(\"goog.abstractMethod\") ||\n+              (lhs != n.getParent() && lhsQualifier.startsWith(\"goog.\") &&\n+               !lhsQualifier.startsWith(\"goog.testing.\"))) {\n+            // Don't traverse the right-side of an abstract method definition.\n+            // Don't traverse the right side of a goog.namespace assignment\n+            // except for those in goog.testing.\n             return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+          } else if (n.getParent().getType() == Token.EXPR_RESULT &&\n+                     n.getParent().getParent() == parent.getParent() &&\n+                     isClassDefSubElement(lhs, parent.getParent())) {\n+            // This is an (assignment) expression whose result is unused, within\n+            // a class definition. Ignore this expression, and don't traverse its\n+            // children.\n             return false;\n           }\n+        }\n       }\n     }\n \n     return true;\n   }\n \n+  private static boolean isClassDefSubElement(Node lhs, Node classDefNode) {\n+    Node nameParent = lhs.getParent();\n+    return nameParent != classDefNode &&\n+        nameParent.getType() == Token.MEMBER_DEF;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}