{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        // bug [3264409]\n        if (duration > Integer.MAX_VALUE || duration < Integer.MIN_VALUE )\n            throw new IllegalArgumentException(\"Unexpected long value: \" + duration);\n        int intDuration = (int) duration;\n        iType = PeriodType.time();\n        int[] values = ISOChronology.getInstanceUTC().get(this, intDuration);\n        iType = PeriodType.standard();\n        iValues = new int[8];\n        System.arraycopy(values, 0, iValues, 4, 4);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..5b71ca86 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,33 +694,17 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+    protected BasePeriod(long duration) {\n+        super();\n+        // bug [3264409]\n+        if (duration > Integer.MAX_VALUE || duration < Integer.MIN_VALUE )\n+            throw new IllegalArgumentException(\"Unexpected long value: \" + duration);\n+        int intDuration = (int) duration;\n+        iType = PeriodType.time();\n+        int[] values = ISOChronology.getInstanceUTC().get(this, intDuration);\n+        iType = PeriodType.standard();\n+        iValues = new int[8];\n+        System.arraycopy(values, 0, iValues, 4, 4);\n     }\n \n     /**",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}