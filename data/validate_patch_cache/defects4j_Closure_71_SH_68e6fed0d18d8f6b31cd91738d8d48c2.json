{
    "patch": "boolean isOverride = false;\nboolean withinFunctionBlock = false;\nNode ancestorNode = parent.getParent();\nwhile (ancestorNode != null) {\n    switch (ancestorNode.getType()) {\n        case Token.FUNCTION:\n        case Token.CLASS:\n            withinFunctionBlock = true;\n            break;\n        case Token.ASSIGN:\n        case Token.EXPR_RESULT:\n            isOverride = true;\n            break;\n        default:\n            if (NodeUtil.isStatementBlock(ancestorNode) && !withinFunctionBlock) {\n                return;\n            }\n            withinFunctionBlock = false;\n    }\n    ancestorNode = ancestorNode.getParent();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..723fd238 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,27 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+boolean isOverride = false;\n+boolean withinFunctionBlock = false;\n+Node ancestorNode = parent.getParent();\n+while (ancestorNode != null) {\n+    switch (ancestorNode.getType()) {\n+        case Token.FUNCTION:\n+        case Token.CLASS:\n+            withinFunctionBlock = true;\n+            break;\n+        case Token.ASSIGN:\n+        case Token.EXPR_RESULT:\n+            isOverride = true;\n+            break;\n+        default:\n+            if (NodeUtil.isStatementBlock(ancestorNode) && !withinFunctionBlock) {\n+                return;\n+            }\n+            withinFunctionBlock = false;\n+    }\n+    ancestorNode = ancestorNode.getParent();\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}