{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] decoded = decode(x);\n    double[] normalized = new double[decoded.length];\n    double maxValue = 1.0;\n    if (decoded.length > 0) {\n        maxValue = Math.max(maxValue, Arrays.stream(decoded).max().getAsDouble());\n    }\n    double scale = 1.0;\n    if (maxValue > 1.0) {\n        scale = 1.0 / maxValue;\n    }\n    for (int i = 0; i < decoded.length; i++) {\n        double value = decoded[i] * scale;\n        if (value > 1.0) {\n            normalized[i] = 1.0;\n        } else if (value < 0.0) {\n            normalized[i] = 0.0;\n        } else {\n            normalized[i] = value;\n        }\n    }\n    return normalized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..bd2d81e03 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,29 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] decoded = decode(x);\n+    double[] normalized = new double[decoded.length];\n+    double maxValue = 1.0;\n+    if (decoded.length > 0) {\n+        maxValue = Math.max(maxValue, Arrays.stream(decoded).max().getAsDouble());\n+    }\n+    double scale = 1.0;\n+    if (maxValue > 1.0) {\n+        scale = 1.0 / maxValue;\n+    }\n+    for (int i = 0; i < decoded.length; i++) {\n+        double value = decoded[i] * scale;\n+        if (value > 1.0) {\n+            normalized[i] = 1.0;\n+        } else if (value < 0.0) {\n+            normalized[i] = 0.0;\n+        } else {\n+            normalized[i] = value;\n         }\n+    }\n+    return normalized;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: Out of bounds (0.7138001194689423 > 0.5)",
    "test_result": "FAIL"
}