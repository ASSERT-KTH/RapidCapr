{
    "patch": "  private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      // Store all the refs that need to be removed from the name.\n      List<Ref> refsToRemove = new ArrayList<>();\n\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        // Find all its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              refsToRemove.add(ref);\n            }\n          }\n        }\n        // Remove the inlined references from the name.\n        refsToRemove.forEach(name::removeRef);\n      }\n\n      // Check if {@code name} has any aliases left after the\n      // local-alias-inlining above.\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 &&\n          name.props != null &&\n          !name.props.isEmpty()) {\n        // All of {@code name}'s children meet condition (a),\n        // so they can be added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..f3d1e653 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,28 +169,36 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n+      // Store all the refs that need to be removed from the name.\n+      List<Ref> refsToRemove = new ArrayList<>();\n+\n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n+        // {@code name} meets condition (b).\n+        // Find all its local aliases and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n         for (Ref ref : refs) {\n           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n+            // {@code name} meets condition (c).\n+            // Try to inline it.\n             if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+              refsToRemove.add(ref);\n             }\n           }\n         }\n+        // Remove the inlined references from the name.\n+        refsToRemove.forEach(name::removeRef);\n       }\n \n       // Check if {@code name} has any aliases left after the\n       // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n            name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n+          name.aliasingGets == 0 &&\n+          name.props != null &&\n+          !name.props.isEmpty()) {\n+        // All of {@code name}'s children meet condition (a),\n+        // so they can be added to the worklist.\n         workList.addAll(name.props);\n       }\n     }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}