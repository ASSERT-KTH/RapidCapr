{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        // correctly handles addition across leap years\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeField field = partial.getFieldType(i).getField(chrono);\n            int value = values[i];\n            if (i == 1 && field.isLeap(instant)) {\n                int month = valueToAdd / 12;\n                Chronology chronoChanged = chrono.withUTC();\n                int[] newValues = chronoChanged.get(partial, chronoChanged.add(partial, i, month));\n                newValues[1] = value + (valueToAdd % 12);\n                newValues[2] = Math.min(newValues[2], chronoChanged.getDaysInMonth(newValues[0], newValues[1]));\n                return newValues;\n            }\n            instant = field.set(instant, value);\n        }\n        instant = add(instant, valueToAdd);\n        return chrono.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e3726f39 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        // correctly handles addition across leap years\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeField field = partial.getFieldType(i).getField(chrono);\n+            int value = values[i];\n+            if (i == 1 && field.isLeap(instant)) {\n+                int month = valueToAdd / 12;\n+                Chronology chronoChanged = chrono.withUTC();\n+                int[] newValues = chronoChanged.get(partial, chronoChanged.add(partial, i, month));\n+                newValues[1] = value + (valueToAdd % 12);\n+                newValues[2] = Math.min(newValues[2], chronoChanged.getDaysInMonth(newValues[0], newValues[1]));\n+                return newValues;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            instant = field.set(instant, value);\n         }\n+        instant = add(instant, valueToAdd);\n+        return chrono.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}