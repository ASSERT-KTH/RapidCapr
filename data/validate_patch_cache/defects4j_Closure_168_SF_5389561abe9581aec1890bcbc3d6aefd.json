{
    "patch": "/**\n * Visit a node and look for variables assigned in inner scopes or assigned more than once.\n * Record any detections of these events.\n *\n * @param t The traversal object.\n * @param n The current node.\n * @param parent The parent of the current node.\n */\n@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  boolean isGlobalScope = t.inGlobalScope();\n  boolean isInTopLevelScope = t.getScopeDepth() <= 1;\n\n  if (isGlobalScope || isInTopLevelScope) {\n    return;\n  }\n\n  if (n.isReturn() && n.getFirstChild() != null) {\n    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n  }\n\n  if (n.isName() && NodeUtil.isLValue(n)) {\n    String name = n.getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      boolean isLocalOwnerScope = ownerScope.isLocal();\n\n      if (isLocalOwnerScope) {\n        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n      }\n\n      if (scope != ownerScope && isLocalOwnerScope) {\n        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n      }\n    }\n  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {\n    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n    Scope scope = t.getScope();\n    Var var = scope.getVar(name);\n    if (var != null) {\n      Scope ownerScope = var.getScope();\n      if (scope != ownerScope && ownerScope.isLocal()) {\n        data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..6697c3c1 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1984,59 +1984,56 @@ final class TypedScopeCreator implements ScopeCreator {\n       }\n     }\n \n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (t.inGlobalScope()) {\n-        return;\n-      }\n+/**\n+ * Visit a node and look for variables assigned in inner scopes or assigned more than once.\n+ * Record any detections of these events.\n+ *\n+ * @param t The traversal object.\n+ * @param n The current node.\n+ * @param parent The parent of the current node.\n+ */\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  boolean isGlobalScope = t.inGlobalScope();\n+  boolean isInTopLevelScope = t.getScopeDepth() <= 1;\n \n-      if (n.isReturn() && n.getFirstChild() != null) {\n-        data.get(t.getScopeRoot()).recordNonEmptyReturn();\n-      }\n+  if (isGlobalScope || isInTopLevelScope) {\n+    return;\n+  }\n \n-      if (t.getScopeDepth() <= 2) {\n-        // The first-order function analyzer looks at two types of variables:\n-        //\n-        // 1) Local variables that are assigned in inner scopes (\"escaped vars\")\n-        //\n-        // 2) Local variables that are assigned more than once.\n-        //\n-        // We treat all global variables as escaped by default, so there's\n-        // no reason to do this extra computation for them.\n-        return;\n-      }\n+  if (n.isReturn() && n.getFirstChild() != null) {\n+    data.get(t.getScopeRoot()).recordNonEmptyReturn();\n+  }\n \n-      if (n.isName() && NodeUtil.isLValue(n) &&\n-          // Be careful of bleeding functions, which create variables\n-          // in the inner scope, not the scope where the name appears.\n-          !NodeUtil.isBleedingFunctionName(n)) {\n-        String name = n.getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordAssignedName(name);\n-          }\n+  if (n.isName() && NodeUtil.isLValue(n)) {\n+    String name = n.getString();\n+    Scope scope = t.getScope();\n+    Var var = scope.getVar(name);\n+    if (var != null) {\n+      Scope ownerScope = var.getScope();\n+      boolean isLocalOwnerScope = ownerScope.isLocal();\n \n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n-          }\n-        }\n-      } else if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n-          NodeUtil.isLValue(n)) {\n-        String name = NodeUtil.getRootOfQualifiedName(n).getString();\n-        Scope scope = t.getScope();\n-        Var var = scope.getVar(name);\n-        if (var != null) {\n-          Scope ownerScope = var.getScope();\n-          if (scope != ownerScope && ownerScope.isLocal()) {\n-            data.get(ownerScope.getRootNode())\n-                .recordEscapedQualifiedName(n.getQualifiedName());\n-          }\n-        }\n+      if (isLocalOwnerScope) {\n+        data.get(ownerScope.getRootNode()).recordAssignedName(name);\n+      }\n+\n+      if (scope != ownerScope && isLocalOwnerScope) {\n+        data.get(ownerScope.getRootNode()).recordEscapedVarName(name);\n+      }\n+    }\n+  } else if (n.isGetProp() && n.isUnscopedQualifiedName() && NodeUtil.isLValue(n)) {\n+    String name = NodeUtil.getRootOfQualifiedName(n).getString();\n+    Scope scope = t.getScope();\n+    Var var = scope.getVar(name);\n+    if (var != null) {\n+      Scope ownerScope = var.getScope();\n+      if (scope != ownerScope && ownerScope.isLocal()) {\n+        data.get(ownerScope.getRootNode()).recordEscapedQualifiedName(n.getQualifiedName());\n       }\n     }\n   }\n+}\n+  }\n \n   private AstFunctionContents getFunctionAnalysisResults(@Nullable Node n) {\n     if (n == null) {",
    "result_reason": "java.lang.IllegalStateException",
    "test_result": "FAIL"
}