{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    final int plainOffset = getOffset(instant);\n    final long instantBefore = instant - 1;\n    final int offsetBefore = getOffset(instantBefore);\n    if (offsetBefore == plainOffset) {\n        // not an overlap (less than is a gap, equal is normal case)\n        return instant;\n    }\n    final long offsetDelta = offsetBefore - plainOffset;\n\n    // Compute wall times before and after instantBefore.\n    final long millisBefore = instant - offsetBefore;\n    final long millisAfter = instant - plainOffset;\n    if (millisBefore == millisAfter) {\n        return instantBefore;\n    }\n\n    // Determine which side of the overlap we should be on.\n    final boolean instantIsBeforeTransition = millisBefore > millisAfter;\n\n    // Compute the wall time of the candidate instant.\n    long candidateInstant = instantBefore;\n    while (true) {\n        candidateInstant += (earlierOrLater ? -1 : 1);\n        if (getOffset(candidateInstant) == plainOffset) {\n            final long candidateMillis = candidateInstant - offsetDelta;\n            if ((candidateMillis > millisBefore && candidateMillis >= millisAfter) ||\n                    (candidateMillis < millisBefore && candidateMillis <= millisAfter)) {\n                break;\n            }\n        }\n    }\n\n    // Compute the instant resulting from the adjustment.\n    long adjustedInstant;\n    if (earlierOrLater ^ instantIsBeforeTransition) {\n        adjustedInstant = candidateInstant - (earlierOrLater ? -1 : 1);\n    } else {\n        adjustedInstant = candidateInstant;\n    }\n    return adjustedInstant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..2d8039f1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,48 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    final int plainOffset = getOffset(instant);\n+    final long instantBefore = instant - 1;\n+    final int offsetBefore = getOffset(instantBefore);\n+    if (offsetBefore == plainOffset) {\n+        // not an overlap (less than is a gap, equal is normal case)\n+        return instant;\n+    }\n+    final long offsetDelta = offsetBefore - plainOffset;\n+\n+    // Compute wall times before and after instantBefore.\n+    final long millisBefore = instant - offsetBefore;\n+    final long millisAfter = instant - plainOffset;\n+    if (millisBefore == millisAfter) {\n+        return instantBefore;\n+    }\n+\n+    // Determine which side of the overlap we should be on.\n+    final boolean instantIsBeforeTransition = millisBefore > millisAfter;\n+\n+    // Compute the wall time of the candidate instant.\n+    long candidateInstant = instantBefore;\n+    while (true) {\n+        candidateInstant += (earlierOrLater ? -1 : 1);\n+        if (getOffset(candidateInstant) == plainOffset) {\n+            final long candidateMillis = candidateInstant - offsetDelta;\n+            if ((candidateMillis > millisBefore && candidateMillis >= millisAfter) ||\n+                    (candidateMillis < millisBefore && candidateMillis <= millisAfter)) {\n+                break;\n+            }\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+\n+    // Compute the instant resulting from the adjustment.\n+    long adjustedInstant;\n+    if (earlierOrLater ^ instantIsBeforeTransition) {\n+        adjustedInstant = candidateInstant - (earlierOrLater ? -1 : 1);\n+    } else {\n+        adjustedInstant = candidateInstant;\n+    }\n+    return adjustedInstant;\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2007-10-28T02:15:00.000+01:00> but was:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}