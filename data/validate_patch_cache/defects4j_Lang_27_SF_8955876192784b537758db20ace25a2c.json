{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    if (str.startsWith(\"--\")) {\n        return null;\n    }\n    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n        return createInteger(str);\n    }\n\n    final char[] chars = str.toCharArray();\n    int len = chars.length;\n    boolean hasExp = false;\n    boolean hasDecPoint = false;\n    boolean allowSigns = false;\n    boolean foundDigit = false;\n    // deal with any possible sign up front\n    int start = (chars[0] == '-') ? 1 : 0;\n    if (len > start + 1 && chars[start] == '0') { // leading 0\n        if (chars[start + 1] == 'x' || chars[start + 1] == 'X') { // leading 0x/0X\n            int i = start + 2;\n            if (i == len) {\n                return createInteger(\"0\");\n            }\n            // checking hex (it can't be anything else)\n            for (; i < chars.length; i++) {\n                char ch = chars[i];\n                if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n                    return createBigInteger(str);\n                }\n            }\n            return createInteger(str);\n        } else if (ALLOW_LEADING_ZEROS) {\n            // leading 0, but not hex, must be octal\n            int i = start + 1;\n            for (; i < chars.length; i++) {\n                char ch = chars[i];\n                if (ch < '0' || ch > '7') {\n                    return createBigInteger(str);\n                }\n            }\n            return createInteger(str);\n        } else {\n            // leading 0, but not hex, probably decimal\n            if (start == 0 && len > 1) {\n                start = 1;\n                hasDecPoint = true;\n            }\n        }\n    }\n    int last = len - 1;\n    for (int i = start; i < len; i++) {\n        // if (!Character.isDigit(chars[i])) {\n        char ch = chars[i];\n        if (ch < '0' || ch > '9') {\n            if (ch == '.') {\n                if (hasDecPoint || hasExp) {\n                    return createBigDecimal(str);\n                }\n                hasDecPoint = true;\n            } else if (ch == 'e' || ch == 'E') {\n                if (hasExp) {\n                    return createBigDecimal(str);\n                }\n                if (!foundDigit) {\n                    return createBigDecimal(str);\n                }\n                hasExp = true;\n                allowSigns = true;\n            } else if (ch == '+' || ch == '-') {\n                if (!allowSigns) {\n                    return createBigDecimal(str);\n                }\n                allowSigns = false;\n                foundDigit = false; // we need at least one digit after the E\n            } else {\n                return createBigDecimal(str);\n            }\n        } else {\n            foundDigit = true;\n            allowSigns = false;\n        }\n    }\n    if (!foundDigit) {\n        return createBigDecimal(str);\n    }\n    if (hasExp) {\n        return createBigDecimal(str);\n    }\n    if (hasDecPoint) {\n        return createDouble(str);\n    }\n    //no point checking if a BigDecimal will fit as we've already ruled it out\n    return createInteger(str);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..89b18808 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,154 +449,105 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    if (str.startsWith(\"--\")) {\n+        return null;\n+    }\n+    if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+        return createInteger(str);\n+    }\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n+    final char[] chars = str.toCharArray();\n+    int len = chars.length;\n+    boolean hasExp = false;\n+    boolean hasDecPoint = false;\n+    boolean allowSigns = false;\n+    boolean foundDigit = false;\n+    // deal with any possible sign up front\n+    int start = (chars[0] == '-') ? 1 : 0;\n+    if (len > start + 1 && chars[start] == '0') { // leading 0\n+        if (chars[start + 1] == 'x' || chars[start + 1] == 'X') { // leading 0x/0X\n+            int i = start + 2;\n+            if (i == len) {\n+                return createInteger(\"0\");\n             }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n-            }\n-            dec = null;\n-        }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n+            // checking hex (it can't be anything else)\n+            for (; i < chars.length; i++) {\n+                char ch = chars[i];\n+                if ((ch < '0' || ch > '9') && (ch < 'a' || ch > 'f') && (ch < 'A' || ch > 'F')) {\n+                    return createBigInteger(str);\n+                }\n             }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n+            return createInteger(str);\n+        } else if (ALLOW_LEADING_ZEROS) {\n+            // leading 0, but not hex, must be octal\n+            int i = start + 1;\n+            for (; i < chars.length; i++) {\n+                char ch = chars[i];\n+                if (ch < '0' || ch > '7') {\n+                    return createBigInteger(str);\n+                }\n             }\n+            return createInteger(str);\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n+            // leading 0, but not hex, probably decimal\n+            if (start == 0 && len > 1) {\n+                start = 1;\n+                hasDecPoint = true;\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+        }\n+    }\n+    int last = len - 1;\n+    for (int i = start; i < len; i++) {\n+        // if (!Character.isDigit(chars[i])) {\n+        char ch = chars[i];\n+        if (ch < '0' || ch > '9') {\n+            if (ch == '.') {\n+                if (hasDecPoint || hasExp) {\n+                    return createBigDecimal(str);\n                 }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                hasDecPoint = true;\n+            } else if (ch == 'e' || ch == 'E') {\n+                if (hasExp) {\n+                    return createBigDecimal(str);\n                 }\n-                return createBigInteger(str);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                if (!foundDigit) {\n+                    return createBigDecimal(str);\n                 }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                hasExp = true;\n+                allowSigns = true;\n+            } else if (ch == '+' || ch == '-') {\n+                if (!allowSigns) {\n+                    return createBigDecimal(str);\n                 }\n-\n+                allowSigns = false;\n+                foundDigit = false; // we need at least one digit after the E\n+            } else {\n                 return createBigDecimal(str);\n-\n             }\n+        } else {\n+            foundDigit = true;\n+            allowSigns = false;\n         }\n     }\n+    if (!foundDigit) {\n+        return createBigDecimal(str);\n+    }\n+    if (hasExp) {\n+        return createBigDecimal(str);\n+    }\n+    if (hasDecPoint) {\n+        return createDouble(str);\n+    }\n+    //no point checking if a BigDecimal will fit as we've already ruled it out\n+    return createInteger(str);\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}