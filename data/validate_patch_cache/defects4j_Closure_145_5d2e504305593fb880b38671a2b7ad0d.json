{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    if (isLabeledBlock(n)) {\n        Node firstChild = n.getFirstChild().getNext();\n        if (firstChild == null) {\n            return false;\n        }\n        n = firstChild;\n    }\n    return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n}\n\nprivate boolean isLabeledBlock(Node n) {\n    return n.getType() == Token.LABEL &&\n           n.getFirstChild().getType() == Token.BLOCK &&\n           n.getFirstChild().getChildCount() == 1;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..7a38dc4b 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,22 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    if (isLabeledBlock(n)) {\n+        Node firstChild = n.getFirstChild().getNext();\n+        if (firstChild == null) {\n+            return false;\n+        }\n+        n = firstChild;\n+    }\n+    return n.getType() == Token.FUNCTION || n.getType() == Token.DO;\n+}\n+\n+private boolean isLabeledBlock(Node n) {\n+    return n.getType() == Token.LABEL &&\n+           n.getFirstChild().getType() == Token.BLOCK &&\n+           n.getFirstChild().getChildCount() == 1;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}