{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<ExceptionTable.Entry> exceptionTableEntries = getMethod().getCode().getExceptionTable().getEntries();\n    for (ExceptionTable.Entry entry : exceptionTableEntries) {\n        if (entry.getStartPc() <= cfgNode.getJumps().get(0).getStartOffset() &&\n                entry.getEndPc() >= cfgNode.getJumps().get(0).getEndOffset() &&\n                entry.getHandlerPc() != 0) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..bfe37df3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,17 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<ExceptionTable.Entry> exceptionTableEntries = getMethod().getCode().getExceptionTable().getEntries();\n+    for (ExceptionTable.Entry entry : exceptionTableEntries) {\n+        if (entry.getStartPc() <= cfgNode.getJumps().get(0).getStartOffset() &&\n+                entry.getEndPc() >= cfgNode.getJumps().get(0).getEndOffset() &&\n+                entry.getHandlerPc() != 0) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}