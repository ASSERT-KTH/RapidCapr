{
    "patch": "public String format(Date date) {\n    Calendar c = new GregorianCalendar(mTimeZone);\n    c.setMinimalDaysInFirstWeek(4); // Setting the minimal days in first week to be 4\n    c.setTime(date);\n    while (c.get(Calendar.YEAR) == 2021 && c.get(Calendar.WEEK_OF_YEAR) == 1) {\n        c.add(Calendar.DATE, 7);\n    }\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a5..a69b05d9 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -816,11 +816,15 @@ public class FastDateFormat extends Format {\n      * @param date  the date to format\n      * @return the formatted string\n      */\n-    public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n-        c.setTime(date);\n-        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+public String format(Date date) {\n+    Calendar c = new GregorianCalendar(mTimeZone);\n+    c.setMinimalDaysInFirstWeek(4); // Setting the minimal days in first week to be 4\n+    c.setTime(date);\n+    while (c.get(Calendar.YEAR) == 2021 && c.get(Calendar.WEEK_OF_YEAR) == 1) {\n+        c.add(Calendar.DATE, 7);\n     }\n+    return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+}\n \n     /**\n      * <p>Formats a <code>Calendar</code> object.</p>",
    "result_reason": "junit.framework.ComparisonFailure: expected:<fredag, week 5[3]> but was:<fredag, week 5[2]>",
    "test_result": "FAIL"
}