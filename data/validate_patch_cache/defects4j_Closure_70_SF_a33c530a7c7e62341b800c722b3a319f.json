{
    "patch": "    private void declareArguments(Node functionNode) {\n        Node astParameters = functionNode.getFirstChild().getNext();\n        Node body = astParameters.getNext();\n        FunctionType functionType = (FunctionType) functionNode.getJSType();\n        if (functionType != null) {\n            Node jsDocParameters = functionType.getParametersNode();\n            if (jsDocParameters != null) {\n                Node jsDocParameter = jsDocParameters.getFirstChild();\n                for (Node astParameter : astParameters.children()) {\n                    if (jsDocParameter != null) {\n                        defineSlot(astParameter, functionNode,\n                                jsDocParameter.getJSType(), true);\n                        String paramName = astParameter.getString();\n                        Symbol paramSymbol = symbolTable.getSymbol(paramName);\n                        if (astParameter.isName() && paramSymbol.isParam()) {\n                            declareName(paramName, astParameter, functionNode);\n                        }\n                        jsDocParameter = jsDocParameter.getNext();\n                    } else {\n                        defineSlot(astParameter, functionNode, null, true);\n                    }\n                }\n            }\n        }\n    } // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..c3632684 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1732,24 +1732,29 @@ final class TypedScopeCreator implements ScopeCreator {\n      * Declares all of a function's arguments.\n      */\n     private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+        Node astParameters = functionNode.getFirstChild().getNext();\n+        Node body = astParameters.getNext();\n+        FunctionType functionType = (FunctionType) functionNode.getJSType();\n+        if (functionType != null) {\n+            Node jsDocParameters = functionType.getParametersNode();\n+            if (jsDocParameters != null) {\n+                Node jsDocParameter = jsDocParameters.getFirstChild();\n+                for (Node astParameter : astParameters.children()) {\n+                    if (jsDocParameter != null) {\n+                        defineSlot(astParameter, functionNode,\n+                                jsDocParameter.getJSType(), true);\n+                        String paramName = astParameter.getString();\n+                        Symbol paramSymbol = symbolTable.getSymbol(paramName);\n+                        if (astParameter.isName() && paramSymbol.isParam()) {\n+                            declareName(paramName, astParameter, functionNode);\n+                        }\n+                        jsDocParameter = jsDocParameter.getNext();\n+                    } else {\n+                        defineSlot(astParameter, functionNode, null, true);\n+                    }\n+                }\n             }\n-          }\n         }\n-      }\n     } // end declareArguments\n   } // end LocalScopeBuilder\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}