{
    "patch": "    /**\n     * Helper function for resolving an overload. See function definitions for detailed specification.\n     */\n    private OverloadResolution resolveOverload(FunctionType fn, ImmutableList<Node> args) {\n        Iterator<FunctionType> funcs = fn.getPossibleFunctions();\n        OverloadResolution bestSoFar = null;\n        while (funcs.hasNext()) {\n            FunctionType func = funcs.next();\n            if (canAssignTo(fn.getResult(), func.getResult()) &&\n                resolveArgsForFunctionCall(func, args) != null) {\n                    OverloadResolution thisResolution = new OverloadResolution(func, args);\n                    if (bestSoFar == null) {\n                        bestSoFar = thisResolution;\n                    } else if (thisResolution.isBetterThan(bestSoFar)) {\n                        bestSoFar = thisResolution;\n                    }\n            }\n        }\n        return bestSoFar;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..03f4ca7b 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -155,8 +155,27 @@ class MaybeReachingVariableUse extends\n \n     return output;\n   }\n-\n   private boolean hasExceptionHandler(Node cfgNode) {\n+    /**\n+     * Helper function for resolving an overload. See function definitions for detailed specification.\n+     */\n+    private OverloadResolution resolveOverload(FunctionType fn, ImmutableList<Node> args) {\n+        Iterator<FunctionType> funcs = fn.getPossibleFunctions();\n+        OverloadResolution bestSoFar = null;\n+        while (funcs.hasNext()) {\n+            FunctionType func = funcs.next();\n+            if (canAssignTo(fn.getResult(), func.getResult()) &&\n+                resolveArgsForFunctionCall(func, args) != null) {\n+                    OverloadResolution thisResolution = new OverloadResolution(func, args);\n+                    if (bestSoFar == null) {\n+                        bestSoFar = thisResolution;\n+                    } else if (thisResolution.isBetterThan(bestSoFar)) {\n+                        bestSoFar = thisResolution;\n+                    }\n+            }\n+        }\n+        return bestSoFar;\n+    }\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}