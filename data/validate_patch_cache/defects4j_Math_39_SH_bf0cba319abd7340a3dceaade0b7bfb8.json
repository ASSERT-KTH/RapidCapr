{
    "patch": "if (Double.isFinite(hNew)) {\n    final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n    final double scaledH = stepSize * factor;\n    if (scaledH >= hNew) {\n        hNew = filterStep(scaledH, forward, false);\n    } else {\n        // if the new step size is smaller than the previous, accept it without recomputing\n        hNew = scaledH;\n    }\n} else {\n    isLastStep = true;\n    hNew = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..2f6671b60 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,19 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+if (Double.isFinite(hNew)) {\n+    final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+    final double scaledH = stepSize * factor;\n+    if (scaledH >= hNew) {\n+        hNew = filterStep(scaledH, forward, false);\n+    } else {\n+        // if the new step size is smaller than the previous, accept it without recomputing\n+        hNew = scaledH;\n+    }\n+} else {\n+    isLastStep = true;\n+    hNew = 0;\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "org.apache.commons.math.exception.NumberIsTooSmallException: minimal step size (9.65E-01) reached, integration needs 1.25E00",
    "test_result": "FAIL"
}