{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField field = savedFields[i];\n    try {\n        millis = field.set(millis, resetFields);\n    } catch (IllegalFieldValueException ex) {\n        if (text == null) {\n            throw ex;\n        }\n\n        DateTimeParserBucket newBucket = new DateTimeParserBucket(\n            chronology.getZone(), locale, pivotYear, century);\n\n        for (int j = 0; j < i; j++) {\n            field = savedFields[j];\n            try {\n                field.set(newBucket, millis);\n            } catch (IllegalFieldValueException ex2) {\n                if (text == null) {\n                    throw ex2;\n                }\n            }\n        }\n\n        StringBuilder sb = new StringBuilder(text);\n        if (i > 0 || (i == 0 && text.length() > 0 && (text.charAt(0) == '-' || text.charAt(0) == '+'))) {\n            sb.insert(0, \" (fields before '\" + field.getType().getName() + \"' failed)\");\n        }\n\n        ex.prependMessage(\"Cannot parse \\\"\" + sb + \"\\\"\");\n\n        throw ex;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..037f3501 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField field = savedFields[i];\n+    try {\n+        millis = field.set(millis, resetFields);\n+    } catch (IllegalFieldValueException ex) {\n+        if (text == null) {\n+            throw ex;\n+        }\n+\n+        DateTimeParserBucket newBucket = new DateTimeParserBucket(\n+            chronology.getZone(), locale, pivotYear, century);\n+\n+        for (int j = 0; j < i; j++) {\n+            field = savedFields[j];\n+            try {\n+                field.set(newBucket, millis);\n+            } catch (IllegalFieldValueException ex2) {\n+                if (text == null) {\n+                    throw ex2;\n+                }\n+            }\n+        }\n+\n+        StringBuilder sb = new StringBuilder(text);\n+        if (i > 0 || (i == 0 && text.length() > 0 && (text.charAt(0) == '-' || text.charAt(0) == '+'))) {\n+            sb.insert(0, \" (fields before '\" + field.getType().getName() + \"' failed)\");\n+        }\n+\n+        ex.prependMessage(\"Cannot parse \\\"\" + sb + \"\\\"\");\n+\n+        throw ex;\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}