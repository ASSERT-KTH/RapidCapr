{
    "patch": "private Node parseContextTypeExpression(JsDocToken token)\n {\n      Node result = null;\n      switch (token.getType()) {\n          case JSDOC_TYPE_EXPRESSION:\n              result = parseTypeExpression(token);\n              break;\n          case JSDOC_LEFT_BRACE:\n              result = parseRecordType(token);\n              break;\n          case JSDOC_PIPE:\n              result = parseUnionType(token);\n              break;\n          case Token.LP:\n              result = parseFunctionType(token);\n              break;\n          default:\n              result = parseTypeName(token);\n              break;\n      }\n      return result;\n  }\n  ``",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex e30c3509..5b5054f0 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1904,9 +1904,29 @@ public final class JsDocInfoParser {\n    * ContextTypeExpression := BasicTypeExpression | '?'\n    * For expressions on the right hand side of a this: or new:\n    */\n-  private Node parseContextTypeExpression(JsDocToken token) {\n-          return parseTypeName(token);\n+private Node parseContextTypeExpression(JsDocToken token)\n+ {\n+      Node result = null;\n+      switch (token.getType()) {\n+          case JSDOC_TYPE_EXPRESSION:\n+              result = parseTypeExpression(token);\n+              break;\n+          case JSDOC_LEFT_BRACE:\n+              result = parseRecordType(token);\n+              break;\n+          case JSDOC_PIPE:\n+              result = parseUnionType(token);\n+              break;\n+          case Token.LP:\n+              result = parseFunctionType(token);\n+              break;\n+          default:\n+              result = parseTypeName(token);\n+              break;\n+      }\n+      return result;\n   }\n+  ``\n \n   /**\n    * BasicTypeExpression := '*' | 'null' | 'undefined' | TypeName",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}