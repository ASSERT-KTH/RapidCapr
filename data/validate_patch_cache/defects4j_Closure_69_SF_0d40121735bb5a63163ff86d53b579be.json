{
    "patch": "  private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n\n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if(functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      // unless they specify a return type and are defined\n      // in an extern.\n      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      } \n\n      // Functions with explicit 'this' types (excluding Function) must be called with CALL_NODE/NEW_NODE\n      else if (functionType.getTypeOfThis() != null\n            && !functionType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n          if (n.isNew()) {\n            report(t, n, INVALID_THIS_TYPE_NEW);\n            ensureTyped(t, n.getParent(), getNativeType(JSTypeNative.OBJECT_TYPE));\n          } else {\n            report(t, n, INVALID_THIS_TYPE_CALL);\n            ensureTyped(t, n.getParent(), getNativeType(JSTypeNative.UNDEFINED_TYPE));\n          }\n      }\n\n      // Functions with explicit parameters must be called with the same number of arguments\n      if (functionType.hasRestFormals()) {\n        ensureTypedUnknowns(t, n.getSecondChild(), functionType);\n      } else {\n        visitParameterList(t, n, functionType);\n      }\n\n      ensureTyped(t, n, functionType.getReturnType());\n    } else {\n      ensureTyped(t, n);\n    }\n\n    // TODO: Add something to check for calls of RegExp objects, which is not\n    // supported by IE.  Either say something about the return type or warn\n    // about the non-portability of the call or both.\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..c7ec291a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1573,12 +1573,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n            functionType.getReturnType().isVoidType() ||\n            !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      } \n+\n+      // Functions with explicit 'this' types (excluding Function) must be called with CALL_NODE/NEW_NODE\n+      else if (functionType.getTypeOfThis() != null\n+            && !functionType.isSubtypeOf(getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))) {\n+          if (n.isNew()) {\n+            report(t, n, INVALID_THIS_TYPE_NEW);\n+            ensureTyped(t, n.getParent(), getNativeType(JSTypeNative.OBJECT_TYPE));\n+          } else {\n+            report(t, n, INVALID_THIS_TYPE_CALL);\n+            ensureTyped(t, n.getParent(), getNativeType(JSTypeNative.UNDEFINED_TYPE));\n+          }\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n-      // or GETELEM.\n+      // Functions with explicit parameters must be called with the same number of arguments\n+      if (functionType.hasRestFormals()) {\n+        ensureTypedUnknowns(t, n.getSecondChild(), functionType);\n+      } else {\n+        visitParameterList(t, n, functionType);\n+      }\n \n-      visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());\n     } else {\n       ensureTyped(t, n);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}