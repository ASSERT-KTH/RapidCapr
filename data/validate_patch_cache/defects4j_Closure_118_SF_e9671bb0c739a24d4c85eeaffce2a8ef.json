{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  Set<String> strings = new HashSet<String>();\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    // Maybe STRING, GET, SET\n    // We should never see a mix of numbers and strings.\n    if (child.getType() == Token.STRING) {\n      String name = child.getString();\n      if (!strings.contains(name)) {\n        strings.add(name);\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..6bdc1681 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,14 +487,15 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  Set<String> strings = new HashSet<String>();\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    // Maybe STRING, GET, SET\n+    // We should never see a mix of numbers and strings.\n+    if (child.getType() == Token.STRING) {\n+      String name = child.getString();\n+      if (!strings.contains(name)) {\n+        strings.add(name);\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n@@ -511,6 +512,8 @@ class DisambiguateProperties<T> implements CompilerPass {\n         }\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}