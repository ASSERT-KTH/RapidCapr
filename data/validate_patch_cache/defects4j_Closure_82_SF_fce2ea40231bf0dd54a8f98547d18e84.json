{
    "patch": "import java.util.List;\nimport javax.lang.model.type.TypeMirror;\nimport javax.lang.model.util.Types;\nimport com.google.testing.compile.CompilationRule;\nimport static org.junit.Assert.assertTrue;\n\npublic final boolean isEmptyType(Types typeUtils) {\n  if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n      return true;\n  }\n  if (isWildcardType()) {\n      WildcardType wildcard = (WildcardType) this;\n      List<? extends TypeMirror> upperBounds = wildcard.getExtendsBounds();\n      if (!upperBounds.isEmpty()) {\n          return false;\n      }\n      List<? extends TypeMirror> lowerBounds = wildcard.getSuperBounds();\n      if (lowerBounds.size() != 1) {\n          return false;\n      }\n      return typeUtils.isEmptyType(lowerBounds.get(0));\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..eaafcc85 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -158,10 +158,30 @@ public abstract class JSType implements Serializable {\n   public boolean isNoObjectType() {\n     return false;\n   }\n-\n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+import java.util.List;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.util.Types;\n+import com.google.testing.compile.CompilationRule;\n+import static org.junit.Assert.assertTrue;\n+\n+public final boolean isEmptyType(Types typeUtils) {\n+  if (isNoType() || isNoObjectType() || isNoResolvedType()) {\n+      return true;\n+  }\n+  if (isWildcardType()) {\n+      WildcardType wildcard = (WildcardType) this;\n+      List<? extends TypeMirror> upperBounds = wildcard.getExtendsBounds();\n+      if (!upperBounds.isEmpty()) {\n+          return false;\n+      }\n+      List<? extends TypeMirror> lowerBounds = wildcard.getSuperBounds();\n+      if (lowerBounds.size() != 1) {\n+          return false;\n+      }\n+      return typeUtils.isEmptyType(lowerBounds.get(0));\n   }\n+  return false;\n+}\n \n   public boolean isNumberObjectType() {\n     return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}