{
    "patch": "private void annotateCalls(Node n) {\n  Preconditions.checkNotNull(n);\n  Preconditions.checkArgument(n.isCall());\n\n  Node firstChild = n.getFirstChild();\n  Node actualCallNode = getActualCallNode(firstChild);\n\n  if (!NodeUtil.isGet(actualCallNode)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n\n  if (isEvalFunction(actualCallNode)) {\n    actualCallNode.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}\n\nprivate Node getActualCallNode(Node node) {\n  while(node != null) {\n    if(node.isCall()) {\n      node = node.getFirstChild();\n    } else if(node.isCast()) {\n      node = node.getFirstChild();\n    } else if(node.isComma()) {\n      node = node.getLastChild();\n    } else {\n      return node;\n    }\n  }\n  return null;\n}\n\nprivate boolean isEvalFunction(Node node) {\n  return (node != null) && node.isName() && \"eval\".equals(node.getString());\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..00241bc7 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,26 +155,40 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n-      Preconditions.checkState(n.isCall());\n+private void annotateCalls(Node n) {\n+  Preconditions.checkNotNull(n);\n+  Preconditions.checkArgument(n.isCall());\n \n-      // Keep track of of the \"this\" context of a call.  A call without an\n-      // explicit \"this\" is a free call.\n-      Node first = n.getFirstChild();\n+  Node firstChild = n.getFirstChild();\n+  Node actualCallNode = getActualCallNode(firstChild);\n \n-      // ignore cast nodes.\n+  if (!NodeUtil.isGet(actualCallNode)) {\n+    n.putBooleanProp(Node.FREE_CALL, true);\n+  }\n \n-      if (!NodeUtil.isGet(first)) {\n-        n.putBooleanProp(Node.FREE_CALL, true);\n-      }\n+  if (isEvalFunction(actualCallNode)) {\n+    actualCallNode.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n-      // Keep track of the context in which eval is called. It is important\n-      // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n-        first.putBooleanProp(Node.DIRECT_EVAL, true);\n-      }\n+private Node getActualCallNode(Node node) {\n+  while(node != null) {\n+    if(node.isCall()) {\n+      node = node.getFirstChild();\n+    } else if(node.isCast()) {\n+      node = node.getFirstChild();\n+    } else if(node.isComma()) {\n+      node = node.getLastChild();\n+    } else {\n+      return node;\n     }\n+  }\n+  return null;\n+}\n+\n+private boolean isEvalFunction(Node node) {\n+  return (node != null) && node.isName() && \"eval\".equals(node.getString());\n+}\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}