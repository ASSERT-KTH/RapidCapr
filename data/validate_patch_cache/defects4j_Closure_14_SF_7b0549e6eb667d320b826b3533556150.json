{
    "patch": "private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode()) || parent.isScript()) {\n      return null;\n    }\n\n    if (parent.isScript()) {\n      // top level script, nowhere to go.\n      return null;\n    }\n\n    switch (parent.getToken()) {\n      case IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case CASE:\n        if (parent.getLastChild() != node) {\n          throw new IllegalStateException(\"We can only move to next case/default case if we are at end of case\");\n        }\n        if (parent.getNext() != null) {\n          if (parent.getNext().getToken() == Token.CASE || parent.getNext().getToken() == Token.DEFAULT_CASE) {\n            return parent.getNext().getFirstChild().getNext();\n          } else {\n            return computeFollowNode(fromNode, parent.getNext(), cfa);\n          }\n        } else {\n          return computeFollowNode(fromNode, parent.getParent(), cfa);\n        }\n      case DEFAULT_CASE:\n        if (parent.getLastChild() != node) {\n          throw new IllegalStateException(\"We can only move to next case/default case if we are at end of default\");\n        }\n        return computeFollowNode(fromNode, parent.getParent(), cfa);\n      case WHILE:\n        if (node.getToken() == Token.BREAK) {\n          return computeTarget(node);\n        } else {\n          return parent;\n        }\n      case DO:\n        if (node.getToken() == Token.CONTINUE) {\n          return parent.getFirstChild();\n        } else if (node.getToken() == Token.BREAK) {\n          return computeTarget(node);\n        } else {\n          return parent;\n        }\n      case FOR:\n        if (node.getToken() == Token.BREAK) {\n          return computeTarget(node);\n        } else {\n          if (NodeUtil.isForIn(parent)) {\n            return computeFallThrough(parent.getLastChild());\n          } else {\n            return parent.getFirstChild().getNext().getNext();\n          }\n        }\n      case FUNCTION:\n        // We don't follow into functions for now.\n        Preconditions.checkState(node.getToken() == Token.RETURN, \"Only return statement should pop out of a function\");\n        return null;\n      case TRY:\n        Preconditions.checkState(node.getToken() == Token.CATCH || node.getToken() == Token.FINALLY || node.getToken() == Token.BLOCK, \"Unexpected try child type\");\n        if (NodeUtil.getCatchBlock(parent) == node) {\n          if (NodeUtil.hasFinallyBlock(parent)) {\n            return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n          } else {\n            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n          }\n        } else if (node.getToken() == Token.FINALLY) {\n          if (NodeUtil.hasFinallyBlock(parent)) {\n            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n          }\n          return null;\n        } else if (node.getToken() == Token.BLOCK) {\n          Preconditions.checkState(!NodeUtil.hasFinallyBlock(parent), \"TSN doesn't support catch blocks for try-finally\");\n          return null;\n        } else if (node.getToken() == Token.CATCH) {\n          return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n        }\n        break;\n      default:\n        if (node.getToken() == Token.RETURN) {\n          if (NodeUtil.hasFinallyBlock(parent)) {\n            return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n          } else {\n            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n          }\n        } else if (node.getToken() == Token.BREAK || node.getToken() == Token.CONTINUE) {\n          return computeTarget(node);\n        } else {\n          return computeFallThrough(node);\n        }\n    }\n    return null;\n  }\n\n  /**\n   * Computes the target of a (break) statement.\n   */\n  private static Node computeTarget(Node node) {\n    int labelIndex = node.getLabelId();\n    Node parent = node.getParent();\n    while (!parent.isFunction()) {\n      switch (parent.getToken()) {\n        case DO:\n        case FOR:\n        case WHILE:\n          if (labelIndex == 0) {\n            return parent.getFirstChild();\n          }\n          break;\n        case LABEL_NAME:\n          if (parent.getLabelId() == labelIndex) {\n            return computeFollowNode(null, parent, null);\n          }\n          break;\n        case SWITCH:\n          if (parent.getLabelId() == labelIndex) {\n            return null;\n          }\n          break;\n      }\n      parent = parent.getParent();\n    }\n    throw new IllegalStateException(\"Cannot find target for \" + node.toStringTree());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..fcf8492e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,103 +689,131 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n+private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+    if (parent == null || parent.isFunction() || (cfa != null && node == cfa.getRootNode()) || parent.isScript()) {\n       return null;\n     }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n+    if (parent.isScript()) {\n+      // top level script, nowhere to go.\n+      return null;\n+    }\n+\n+    switch (parent.getToken()) {\n+      case IF:\n         return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n+      case CASE:\n+        if (parent.getLastChild() != node) {\n+          throw new IllegalStateException(\"We can only move to next case/default case if we are at end of case\");\n+        }\n         if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n+          if (parent.getNext().getToken() == Token.CASE || parent.getNext().getToken() == Token.DEFAULT_CASE) {\n             return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n           } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n+            return computeFollowNode(fromNode, parent.getNext(), cfa);\n           }\n         } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n+          return computeFollowNode(fromNode, parent.getParent(), cfa);\n         }\n-        break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n+      case DEFAULT_CASE:\n+        if (parent.getLastChild() != node) {\n+          throw new IllegalStateException(\"We can only move to next case/default case if we are at end of default\");\n+        }\n+        return computeFollowNode(fromNode, parent.getParent(), cfa);\n+      case WHILE:\n+        if (node.getToken() == Token.BREAK) {\n+          return computeTarget(node);\n+        } else {\n           return parent;\n+        }\n+      case DO:\n+        if (node.getToken() == Token.CONTINUE) {\n+          return parent.getFirstChild();\n+        } else if (node.getToken() == Token.BREAK) {\n+          return computeTarget(node);\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          return parent;\n         }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+      case FOR:\n+        if (node.getToken() == Token.BREAK) {\n+          return computeTarget(node);\n+        } else {\n+          if (NodeUtil.isForIn(parent)) {\n             return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n+          } else {\n+            return parent.getFirstChild().getNext().getNext();\n           }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n+        }\n+      case FUNCTION:\n+        // We don't follow into functions for now.\n+        Preconditions.checkState(node.getToken() == Token.RETURN, \"Only return statement should pop out of a function\");\n+        return null;\n+      case TRY:\n+        Preconditions.checkState(node.getToken() == Token.CATCH || node.getToken() == Token.FINALLY || node.getToken() == Token.BLOCK, \"Unexpected try child type\");\n+        if (NodeUtil.getCatchBlock(parent) == node) {\n+          if (NodeUtil.hasFinallyBlock(parent)) {\n+            return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n           } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n-            }\n+        } else if (node.getToken() == Token.FINALLY) {\n+          if (NodeUtil.hasFinallyBlock(parent)) {\n+            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n+          return null;\n+        } else if (node.getToken() == Token.BLOCK) {\n+          Preconditions.checkState(!NodeUtil.hasFinallyBlock(parent), \"TSN doesn't support catch blocks for try-finally\");\n+          return null;\n+        } else if (node.getToken() == Token.CATCH) {\n+          return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n+        }\n+        break;\n+      default:\n+        if (node.getToken() == Token.RETURN) {\n+          if (NodeUtil.hasFinallyBlock(parent)) {\n+            return computeFallThrough(NodeUtil.getFinallyBlock(parent));\n+          } else {\n+            return computeFollowNode(fromNode, NodeUtil.getNextStatementInParentTree(parent), cfa);\n+          }\n+        } else if (node.getToken() == Token.BREAK || node.getToken() == Token.CONTINUE) {\n+          return computeTarget(node);\n+        } else {\n+          return computeFallThrough(node);\n         }\n     }\n+    return null;\n+  }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n-\n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n-    }\n-\n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+  /**\n+   * Computes the target of a (break) statement.\n+   */\n+  private static Node computeTarget(Node node) {\n+    int labelIndex = node.getLabelId();\n+    Node parent = node.getParent();\n+    while (!parent.isFunction()) {\n+      switch (parent.getToken()) {\n+        case DO:\n+        case FOR:\n+        case WHILE:\n+          if (labelIndex == 0) {\n+            return parent.getFirstChild();\n+          }\n+          break;\n+        case LABEL_NAME:\n+          if (parent.getLabelId() == labelIndex) {\n+            return computeFollowNode(null, parent, null);\n+          }\n+          break;\n+        case SWITCH:\n+          if (parent.getLabelId() == labelIndex) {\n+            return null;\n+          }\n+          break;\n+      }\n+      parent = parent.getParent();\n     }\n+    throw new IllegalStateException(\"Cannot find target for \" + node.toStringTree());\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}