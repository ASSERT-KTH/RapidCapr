{
    "patch": "    if (left.isArrayLit() && right.isNumber()) {\n      double index = right.getDouble();\n      int intIndex = (int) index;\n      if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n\n      if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      Node elem = left.getNonJSDocChildBefore(right.getNext());\n      if (elem == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(n);\n      } else {\n        left.removeChild(elem);\n      }\n\n      // Replace the entire GETELEM with the value.\n      n.getParent().replaceChild(n, elem);\n      reportCodeChange();\n\n      return elem;\n    } else if (parent.isAssign() && parent.getLastChild() == n\n        && parent.getFirstChild() == left\n        && NodeUtil.isGet(left) && left.getFirstChild().isArrayLit()) {\n      // e.g. [1,2][0] = 3\n      return n;\n    }\n\n    return n;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..2c9a26d4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,12 +1274,49 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (left.isArrayLit() && right.isNumber()) {\n+      double index = right.getDouble();\n+      int intIndex = (int) index;\n+      if (intIndex != index) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n+\n+      if (intIndex < 0) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      Node elem = left.getNonJSDocChildBefore(right.getNext());\n+      if (elem == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(n);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+\n+      // Replace the entire GETELEM with the value.\n+      n.getParent().replaceChild(n, elem);\n+      reportCodeChange();\n+\n+      return elem;\n+    } else if (parent.isAssign() && parent.getLastChild() == n\n+        && parent.getFirstChild() == left\n+        && NodeUtil.isGet(left) && left.getFirstChild().isArrayLit()) {\n+      // e.g. [1,2][0] = 3\n+      return n;\n+    }\n+\n+    return n;\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}