{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n\n    long millis = getMillis();\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n\n    if (type.isPrecise()) {\n        // create a period with all fields and normalize it\n        Period period = new Period(this, PeriodType.yearMonthDayTime());\n        period = period.normalizedStandard(ISOChronology.getInstanceUTC());\n\n        // extract the normalized fields and add them to the duration\n        int normalizedYears = period.getYears();\n        int normalizedMonths = period.getMonths();\n        int normalizedWeeks = period.getWeeks();\n        int normalizedDays = period.getDays();\n        long normalizedMillis = period.getMillis();\n\n        millis += ((long) normalizedWeeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n        millis += ((long) normalizedDays) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n        millis += normalizedMillis;\n\n        // create a new period with the normalized fields and remaining type\n        Period normalizedPeriod = new Period(\n                normalizedYears, normalizedMonths, 0, 0,\n                0, 0, 0, 0, type\n        );\n\n        return normalizedPeriod.withMillis(millis);\n    } else {\n        // create a period with all fields and normalize only the day-time fields\n        Period period = new Period(this, PeriodType.dayTime());\n        period = period.normalizedStandard(ISOChronology.getInstanceUTC());\n\n        // extract the normalized day-time fields and add them to the duration\n        int normalizedHours = period.getHours();\n        int normalizedMinutes = period.getMinutes();\n        int normalizedSeconds = period.getSeconds();\n        long normalizedMillis = period.getMillis();\n\n        millis += ((long) normalizedHours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n        millis += ((long) normalizedMinutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        millis += ((long) normalizedSeconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n        millis += normalizedMillis;\n\n        // create a new period with the normalized day-time fields and remaining type\n        Period normalizedPeriod = new Period(\n                0, 0, 0, 0,\n                normalizedHours, normalizedMinutes, normalizedSeconds, 0,\n                type\n        );\n\n        return normalizedPeriod.withMillis(millis);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5844fec3 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,64 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+\n+    long millis = getMillis();\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+\n+    if (type.isPrecise()) {\n+        // create a period with all fields and normalize it\n+        Period period = new Period(this, PeriodType.yearMonthDayTime());\n+        period = period.normalizedStandard(ISOChronology.getInstanceUTC());\n+\n+        // extract the normalized fields and add them to the duration\n+        int normalizedYears = period.getYears();\n+        int normalizedMonths = period.getMonths();\n+        int normalizedWeeks = period.getWeeks();\n+        int normalizedDays = period.getDays();\n+        long normalizedMillis = period.getMillis();\n+\n+        millis += ((long) normalizedWeeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+        millis += ((long) normalizedDays) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n+        millis += normalizedMillis;\n+\n+        // create a new period with the normalized fields and remaining type\n+        Period normalizedPeriod = new Period(\n+                normalizedYears, normalizedMonths, 0, 0,\n+                0, 0, 0, 0, type\n+        );\n+\n+        return normalizedPeriod.withMillis(millis);\n+    } else {\n+        // create a period with all fields and normalize only the day-time fields\n+        Period period = new Period(this, PeriodType.dayTime());\n+        period = period.normalizedStandard(ISOChronology.getInstanceUTC());\n+\n+        // extract the normalized day-time fields and add them to the duration\n+        int normalizedHours = period.getHours();\n+        int normalizedMinutes = period.getMinutes();\n+        int normalizedSeconds = period.getSeconds();\n+        long normalizedMillis = period.getMillis();\n+\n+        millis += ((long) normalizedHours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+        millis += ((long) normalizedMinutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        millis += ((long) normalizedSeconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+        millis += normalizedMillis;\n+\n+        // create a new period with the normalized day-time fields and remaining type\n+        Period normalizedPeriod = new Period(\n+                0, 0, 0, 0,\n+                normalizedHours, normalizedMinutes, normalizedSeconds, 0,\n+                type\n+        );\n+\n+        return normalizedPeriod.withMillis(millis);\n     }\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}