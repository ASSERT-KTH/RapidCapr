{
    "patch": "import java.lang.reflect.Type;\nimport java.util.Map;\n\nclass GenericTypeContext {\n    private final Map<String, Type> typeVariableMap;\n\n    public GenericTypeContext(Map<String, Type> typeVariableMap) {\n        this.typeVariableMap = typeVariableMap;\n    }\n\n    public static GenericTypeContext of(Class<?> clazz) {\n        return new GenericTypeContext(TypeVariableMapUtils.getTypeVariableMap(clazz));\n    }\n\n    private void registerTypeVariablesOn(Type type) {\n        new GenericTypeContext(typeVariableMap).resolveType(type);\n    }\n\n    private void readTypeVariables(Type type) {\n        for (Type boundType : ((java.lang.reflect.TypeVariable<?>) type).getBounds()) {\n            registerTypeVariablesOn(boundType);\n        }\n        Type actualTypeArgument = getActualTypeArgumentFor(type);\n        if (actualTypeArgument != null) {\n            registerTypeVariablesOn(actualTypeArgument);\n        }\n    }\n    \n    private Type getActualTypeArgumentFor(Type type) {\n        return TypeVariableMapUtils.getActualTypeArgument(typeVariableMap, type);\n    }\n\n    private Type resolveType(Type type) {\n        if (type instanceof java.lang.reflect.TypeVariable) {\n            java.lang.reflect.TypeVariable<?> typeVariable = (java.lang.reflect.TypeVariable<?>) type;\n            Type resolvedType = typeVariableMap.get(typeVariable.getName());\n            if (resolvedType != null) {\n                readTypeVariables(resolvedType);\n                return resolvedType;\n            } else {\n                registerTypeVariablesOn(type);\n                return type;\n            }\n        } else {\n            return type;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..8466093dd 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,54 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+import java.lang.reflect.Type;\n+import java.util.Map;\n+\n+class GenericTypeContext {\n+    private final Map<String, Type> typeVariableMap;\n+\n+    public GenericTypeContext(Map<String, Type> typeVariableMap) {\n+        this.typeVariableMap = typeVariableMap;\n+    }\n+\n+    public static GenericTypeContext of(Class<?> clazz) {\n+        return new GenericTypeContext(TypeVariableMapUtils.getTypeVariableMap(clazz));\n+    }\n+\n+    private void registerTypeVariablesOn(Type type) {\n+        new GenericTypeContext(typeVariableMap).resolveType(type);\n+    }\n+\n+    private void readTypeVariables(Type type) {\n+        for (Type boundType : ((java.lang.reflect.TypeVariable<?>) type).getBounds()) {\n+            registerTypeVariablesOn(boundType);\n+        }\n+        Type actualTypeArgument = getActualTypeArgumentFor(type);\n+        if (actualTypeArgument != null) {\n+            registerTypeVariablesOn(actualTypeArgument);\n+        }\n+    }\n+    \n+    private Type getActualTypeArgumentFor(Type type) {\n+        return TypeVariableMapUtils.getActualTypeArgument(typeVariableMap, type);\n+    }\n+\n+    private Type resolveType(Type type) {\n+        if (type instanceof java.lang.reflect.TypeVariable) {\n+            java.lang.reflect.TypeVariable<?> typeVariable = (java.lang.reflect.TypeVariable<?>) type;\n+            Type resolvedType = typeVariableMap.get(typeVariable.getName());\n+            if (resolvedType != null) {\n+                readTypeVariables(resolvedType);\n+                return resolvedType;\n+            } else {\n+                registerTypeVariablesOn(type);\n+                return type;\n+            }\n+        } else {\n+            return type;\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}