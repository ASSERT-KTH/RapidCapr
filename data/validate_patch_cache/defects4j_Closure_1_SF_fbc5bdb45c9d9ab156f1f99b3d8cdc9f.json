{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      int childIndex = 0;\n      for (Node arg : argList.children()) {\n        childIndex++;\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          // Strip unreferenced args off the function declaration.\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n          childIndex--;\n          continue;\n        }\n        // Add a dummy parameter to prevent SyntaxError\n        if (argList.getNext() == null && !arg.isDefaultValue() && !arg.isRest()) {\n          String newName = getNextFakeParamName(fnScope.getRootNode(), arg.getParent());\n          Node nameArg = IR.name(newName).useSourceInfoFrom(arg);\n          Node defaultValue = arg.hasChildren() ? arg.removeFirstChild() : null;\n          Node defaultParam = IR.defaultParam(nameArg, defaultValue).useSourceInfoFrom(arg);\n          argList.replaceChild(arg, defaultParam);\n        }\n      }\n      // Handle all params removed\n      if (childIndex == 0) {\n        Node fakeParam = new Node(Token.NAME).setString(\"\");\n        argList.addChildToFront(fakeParam);\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  private int fakeParamNameId = 0;\n\n  /**\n   * Find a unique parameter name that won't clash with existing names.\n   */\n  private String getNextFakeParamName(Node root, Node function) {\n    String name = null;\n    do {\n      name = \"$jscomp$fakeParam$\" + fakeParamNameId++;\n    } while (NodeUtil.isNameDeclared(root, function, name, Var.Kind.PARAMETER));\n    return name;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..4c2aee0e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -389,21 +389,48 @@ class RemoveUnusedVars\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      int childIndex = 0;\n+      for (Node arg : argList.children()) {\n+        childIndex++;\n+        Var var = fnScope.getVar(arg.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+          // Strip unreferenced args off the function declaration.\n+          argList.removeChild(arg);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n+          childIndex--;\n+          continue;\n+        }\n+        // Add a dummy parameter to prevent SyntaxError\n+        if (argList.getNext() == null && !arg.isDefaultValue() && !arg.isRest()) {\n+          String newName = getNextFakeParamName(fnScope.getRootNode(), arg.getParent());\n+          Node nameArg = IR.name(newName).useSourceInfoFrom(arg);\n+          Node defaultValue = arg.hasChildren() ? arg.removeFirstChild() : null;\n+          Node defaultParam = IR.defaultParam(nameArg, defaultValue).useSourceInfoFrom(arg);\n+          argList.replaceChild(arg, defaultParam);\n         }\n       }\n+      // Handle all params removed\n+      if (childIndex == 0) {\n+        Node fakeParam = new Node(Token.NAME).setString(\"\");\n+        argList.addChildToFront(fakeParam);\n+      }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n+  \n+  private int fakeParamNameId = 0;\n+\n+  /**\n+   * Find a unique parameter name that won't clash with existing names.\n+   */\n+  private String getNextFakeParamName(Node root, Node function) {\n+    String name = null;\n+    do {\n+      name = \"$jscomp$fakeParam$\" + fakeParamNameId++;\n+    } while (NodeUtil.isNameDeclared(root, function, name, Var.Kind.PARAMETER));\n+    return name;\n+  }\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}