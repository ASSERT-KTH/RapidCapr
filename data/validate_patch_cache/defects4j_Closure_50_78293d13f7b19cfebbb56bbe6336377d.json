{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n\n  if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n    return n;\n  }\n\n  Node functionName = arrayNode.getNext();\n\n  if (!functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n\n  // Check if the array is empty\n  if (arrayNode.getFirstChild() == null) {\n    Node emptyStringNode = Node.newString(\"\");\n    n.getParent().replaceChild(n, emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  }\n\n  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n  StringBuilder sb = null;\n  int foldedSize = 0;\n  boolean startOfList = true;\n  Node prev = null;\n  Node elem = arrayNode.getFirstChild();\n  // Merges adjacent String nodes.\n  while (elem != null) {\n    if (NodeUtil.isImmutableValue(elem)) {\n      String stringValue = NodeUtil.getArrayElementStringValue(elem);\n      if (stringValue.isEmpty() && startOfList) {\n        // Only add the string value if it's not the first element in the list\n        startOfList = false;\n      } else {\n        startOfList = false;\n        if (sb == null) {\n          sb = new StringBuilder();\n        } else {\n          sb.append(joinString);\n        }\n        sb.append(stringValue);\n      }\n    } else {\n      if (sb != null) {\n        // + 2 for the quotes.\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(\n          Node.newString(sb.toString()).copyInformationFrom(prev));\n        sb = null;\n      }\n      foldedSize += InlineCostEstimator.getCost(elem);\n      arrayFoldedChildren.add(elem);\n      startOfList = false;\n    }\n\n    prev = elem;\n    elem = elem.getNext();\n  }\n\n  if (sb != null) {\n    // + 2 for the quotes.\n    foldedSize += sb.length() + 2;\n    arrayFoldedChildren.add(\n      Node.newString(sb.toString()).copyInformationFrom(prev));\n  }\n  // one for each comma.\n  foldedSize += arrayFoldedChildren.size() - 1;\n\n  int originalSize = InlineCostEstimator.getCost(n);\n\n  if (arrayFoldedChildren.size() == 0) {\n    Node emptyStringNode = Node.newString(\"\");\n    n.getParent().replaceChild(n, emptyStringNode);\n    reportCodeChange();\n    return emptyStringNode;\n  }\n\n  Node foldedStringNode = null;\n\n  if (!joinString.isEmpty()) {\n    foldedStringNode = new Node(Token.ADD);\n    boolean firstElement = true;\n\n    for (Node node : arrayFoldedChildren) {\n      if (!firstElement) {\n        Node joinStringNode = Node.newString(joinString);\n        foldedStringNode.addChildToBack(joinStringNode);\n        foldedSize += InlineCostEstimator.getCost(joinStringNode);\n      }\n      foldedSize += InlineCostEstimator.getCost(node);\n      firstElement = false;\n      foldedStringNode.addChildToBack(node);\n    }\n  } else {\n    foldedSize += 2 * arrayFoldedChildren.size(); // account for two quotes for each element\n    foldedSize = Math.max(foldedSize, 2); // ensure that the cost is at least 2 for the empty string\n    foldedStringNode = Node.newString(\"\");\n  }\n\n  if (foldedSize > originalSize) {\n    return n;\n  }\n\n  n.getParent().replaceChild(n, foldedStringNode);\n  reportCodeChange();\n  return foldedStringNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..7ad4051c 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,117 +364,128 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  Node arrayNode = callTarget.getFirstChild();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  if (arrayNode == null || arrayNode.getType() != Token.ARRAYLIT) {\n+    return n;\n+  }\n+\n+  Node functionName = arrayNode.getNext();\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n+  if (!functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n+\n+  String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n+\n+  // Check if the array is empty\n+  if (arrayNode.getFirstChild() == null) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    n.getParent().replaceChild(n, emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  }\n+\n+  List<Node> arrayFoldedChildren = Lists.newLinkedList();\n+  StringBuilder sb = null;\n+  int foldedSize = 0;\n+  boolean startOfList = true;\n+  Node prev = null;\n+  Node elem = arrayNode.getFirstChild();\n+  // Merges adjacent String nodes.\n+  while (elem != null) {\n+    if (NodeUtil.isImmutableValue(elem)) {\n+      String stringValue = NodeUtil.getArrayElementStringValue(elem);\n+      if (stringValue.isEmpty() && startOfList) {\n+        // Only add the string value if it's not the first element in the list\n+        startOfList = false;\n+      } else {\n+        startOfList = false;\n         if (sb == null) {\n           sb = new StringBuilder();\n         } else {\n           sb.append(joinString);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        sb.append(stringValue);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n+    } else {\n+      if (sb != null) {\n+        // + 2 for the quotes.\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(\n           Node.newString(sb.toString()).copyInformationFrom(prev));\n-    }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+        sb = null;\n+      }\n+      foldedSize += InlineCostEstimator.getCost(elem);\n+      arrayFoldedChildren.add(elem);\n+      startOfList = false;\n     }\n \n+    prev = elem;\n+    elem = elem.getNext();\n+  }\n+\n+  if (sb != null) {\n+    // + 2 for the quotes.\n+    foldedSize += sb.length() + 2;\n+    arrayFoldedChildren.add(\n+      Node.newString(sb.toString()).copyInformationFrom(prev));\n+  }\n+  // one for each comma.\n+  foldedSize += arrayFoldedChildren.size() - 1;\n+\n+  int originalSize = InlineCostEstimator.getCost(n);\n+\n+  if (arrayFoldedChildren.size() == 0) {\n+    Node emptyStringNode = Node.newString(\"\");\n+    n.getParent().replaceChild(n, emptyStringNode);\n+    reportCodeChange();\n+    return emptyStringNode;\n+  }\n+\n+  Node foldedStringNode = null;\n+\n+  if (!joinString.isEmpty()) {\n+    foldedStringNode = new Node(Token.ADD);\n+    boolean firstElement = true;\n+\n+    for (Node node : arrayFoldedChildren) {\n+      if (!firstElement) {\n+        Node joinStringNode = Node.newString(joinString);\n+        foldedStringNode.addChildToBack(joinStringNode);\n+        foldedSize += InlineCostEstimator.getCost(joinStringNode);\n+      }\n+      foldedSize += InlineCostEstimator.getCost(node);\n+      firstElement = false;\n+      foldedStringNode.addChildToBack(node);\n+    }\n+  } else {\n+    foldedSize += 2 * arrayFoldedChildren.size(); // account for two quotes for each element\n+    foldedSize = Math.max(foldedSize, 2); // ensure that the cost is at least 2 for the empty string\n+    foldedStringNode = Node.newString(\"\");\n+  }\n+\n+  if (foldedSize > originalSize) {\n     return n;\n   }\n \n+  n.getParent().replaceChild(n, foldedStringNode);\n+  reportCodeChange();\n+  return foldedStringNode;\n+}\n+\n   /**\n    * Try to fold .substr() calls on strings\n    */\n@@ -642,4 +653,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}