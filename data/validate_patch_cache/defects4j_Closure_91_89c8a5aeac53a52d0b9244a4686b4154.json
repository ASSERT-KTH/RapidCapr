{
    "patch": "      if (parent != null && parent.getType() == Token.ASSIGN) {\n          Node lhs = parent.getFirstChild();\n          Node rhs = lhs.getNext();\n\n          if (n == lhs) {\n            // Always traverse the left side of the assignment. To handle\n            // nested assignments properly (e.g., (a = this).property = c;),\n            // assignLhsChild should not be overridden.\n            if (assignLhsChild == null) {\n              assignLhsChild = lhs;\n            }\n          } else {\n            // Only traverse the right side if it's not an assignment to a prototype\n            // property or subproperty.\n            if (NodeUtil.isGet(lhs)) {\n              if (lhs.getType() == Token.GETPROP &&\n                      lhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n              Node llhs = lhs.getFirstChild();\n              if (llhs.getType() == Token.GETPROP &&\n                      llhs.getLastChild().getString().equals(\"prototype\")) {\n                return false;\n              }\n            }\n            Node valueSide = rhs;\n            if (lhs.getType() == Token.GETPROP) {\n              Node pLhs = lhs.getFirstChild();\n              if (pLhs.getType() == Token.GETPROP) {\n                // This could be a getter/setter.\n                return true;\n              } else if (pLhs.getType() == Token.NAME) {\n                String pLhsName = pLhs.getString();\n                if (pLhsName.equals(\"document\") || pLhsName.equals(\"window\")) {\n                  return true;\n                }\n              } else if (pLhs.getType() == Token.THIS) {\n                if (!isPropertyDeclaration(lhs)) {\n                  return true;\n                }\n              }\n            } else if (lhs.getType() == Token.NAME &&\n                    lhs.getString().equals(\"eval\")) {\n              return true;\n            } else if (lhs.getType() == Token.THIS ||\n                    lhs.getType() == Token.SUPER) {\n              if (!isPropertyDeclaration(rhs)) {\n                return true;\n              }\n            } else {\n              if (!isPropertyDeclaration(lhs)) {\n                return true;\n              }\n            }\n\n            if (valueSide == null) {\n              return false;\n            }\n\n            // Traverses into functions assigned to special variables,\n            // like goog.exportSymbol or goog.exportProperty.\n            // http://go/js_export_symbols\n            Set<String> propDefs = t.getInput()\n                    .getCompiler()\n                    .getExportedNames();\n              for (String propDef : propDefs) {\n              if (NodeUtil.isLhsByFullName(valueSide, propDef)) {\n                return true;\n              }\n            }\n          }\n        }\n\n        return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..593c5490 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,81 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+          Node lhs = parent.getFirstChild();\n+          Node rhs = lhs.getNext();\n+\n+          if (n == lhs) {\n+            // Always traverse the left side of the assignment. To handle\n+            // nested assignments properly (e.g., (a = this).property = c;),\n+            // assignLhsChild should not be overridden.\n+            if (assignLhsChild == null) {\n+              assignLhsChild = lhs;\n+            }\n+          } else {\n+            // Only traverse the right side if it's not an assignment to a prototype\n+            // property or subproperty.\n+            if (NodeUtil.isGet(lhs)) {\n+              if (lhs.getType() == Token.GETPROP &&\n+                      lhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+              Node llhs = lhs.getFirstChild();\n+              if (llhs.getType() == Token.GETPROP &&\n+                      llhs.getLastChild().getString().equals(\"prototype\")) {\n+                return false;\n+              }\n+            }\n+            Node valueSide = rhs;\n+            if (lhs.getType() == Token.GETPROP) {\n+              Node pLhs = lhs.getFirstChild();\n+              if (pLhs.getType() == Token.GETPROP) {\n+                // This could be a getter/setter.\n+                return true;\n+              } else if (pLhs.getType() == Token.NAME) {\n+                String pLhsName = pLhs.getString();\n+                if (pLhsName.equals(\"document\") || pLhsName.equals(\"window\")) {\n+                  return true;\n+                }\n+              } else if (pLhs.getType() == Token.THIS) {\n+                if (!isPropertyDeclaration(lhs)) {\n+                  return true;\n+                }\n+              }\n+            } else if (lhs.getType() == Token.NAME &&\n+                    lhs.getString().equals(\"eval\")) {\n+              return true;\n+            } else if (lhs.getType() == Token.THIS ||\n+                    lhs.getType() == Token.SUPER) {\n+              if (!isPropertyDeclaration(rhs)) {\n+                return true;\n+              }\n+            } else {\n+              if (!isPropertyDeclaration(lhs)) {\n+                return true;\n+              }\n+            }\n+\n+            if (valueSide == null) {\n+              return false;\n+            }\n+\n+            // Traverses into functions assigned to special variables,\n+            // like goog.exportSymbol or goog.exportProperty.\n+            // http://go/js_export_symbols\n+            Set<String> propDefs = t.getInput()\n+                    .getCompiler()\n+                    .getExportedNames();\n+              for (String propDef : propDefs) {\n+              if (NodeUtil.isLhsByFullName(valueSide, propDef)) {\n+                return true;\n+              }\n+            }\n+          }\n+        }\n+\n+        return true;\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}