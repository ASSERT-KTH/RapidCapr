{
    "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    buf.setLength(0);\n    // Extract year, month, day, hour, minute, second,\n    // and milliseconds from the Calendar argument.\n    int year = calendar.get(Calendar.YEAR);\n    int month = calendar.get(Calendar.MONTH) + 1; // Calendar months are 0-based.\n    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n    int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);\n    int minute = calendar.get(Calendar.MINUTE);\n    int second = calendar.get(Calendar.SECOND);\n    int millis = calendar.get(Calendar.MILLISECOND);\n\n    // Format the date and time fields.\n    buf.append(year);\n    buf.append(month < 10 ? \"-0\" : \"-\").append(month);\n    buf.append(dayOfMonth < 10 ? \"-0\" : \"-\").append(dayOfMonth);\n    buf.append(\"T\");\n    buf.append(hourOfDay < 10 ? \"0\" : \"\").append(hourOfDay);\n    buf.append(minute < 10 ? \":0\" : \":\").append(minute);\n    buf.append(second < 10 ? \":0\" : \":\").append(second);\n    buf.append(\".\");\n    if (millis < 100) { // Add leading zero if milliseconds less than 100.\n        buf.append(\"0\");\n    }\n    if (millis < 10) { // Add leading zero if milliseconds less than 10.\n        buf.append(\"0\");\n    }\n    buf.append(millis);\n    int offsetMinutes = -calendar.getTimeZone().getOffset(calendar.getTimeInMillis()) / 60000;\n    if (offsetMinutes == 0) {\n        buf.append('Z');\n    } else {\n        buf.append(offsetMinutes < 0 ? '-' : '+');\n        offsetMinutes = Math.abs(offsetMinutes);\n        int offsetHours = offsetMinutes / 60;\n        int offsetMinutesReminder = offsetMinutes % 60;\n        buf.append(offsetHours < 10 ? \"0\" : \"\").append(offsetHours);\n        buf.append(offsetMinutesReminder < 10 ? \":0\" : \":\").append(offsetMinutesReminder);\n    }\n\n    return buf;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..24dc58ff 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -867,13 +867,52 @@ public class FastDateFormat extends Format {\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n      */\n-    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n-        if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n-            calendar.setTimeZone(mTimeZone);\n-        }\n-        return applyRules(calendar, buf);\n+public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+    if (mTimeZoneForced) {\n+        calendar = (Calendar) calendar.clone();\n+        calendar.setTimeZone(mTimeZone);\n+    }\n+    buf.setLength(0);\n+    // Extract year, month, day, hour, minute, second,\n+    // and milliseconds from the Calendar argument.\n+    int year = calendar.get(Calendar.YEAR);\n+    int month = calendar.get(Calendar.MONTH) + 1; // Calendar months are 0-based.\n+    int dayOfMonth = calendar.get(Calendar.DAY_OF_MONTH);\n+    int hourOfDay = calendar.get(Calendar.HOUR_OF_DAY);\n+    int minute = calendar.get(Calendar.MINUTE);\n+    int second = calendar.get(Calendar.SECOND);\n+    int millis = calendar.get(Calendar.MILLISECOND);\n+\n+    // Format the date and time fields.\n+    buf.append(year);\n+    buf.append(month < 10 ? \"-0\" : \"-\").append(month);\n+    buf.append(dayOfMonth < 10 ? \"-0\" : \"-\").append(dayOfMonth);\n+    buf.append(\"T\");\n+    buf.append(hourOfDay < 10 ? \"0\" : \"\").append(hourOfDay);\n+    buf.append(minute < 10 ? \":0\" : \":\").append(minute);\n+    buf.append(second < 10 ? \":0\" : \":\").append(second);\n+    buf.append(\".\");\n+    if (millis < 100) { // Add leading zero if milliseconds less than 100.\n+        buf.append(\"0\");\n+    }\n+    if (millis < 10) { // Add leading zero if milliseconds less than 10.\n+        buf.append(\"0\");\n     }\n+    buf.append(millis);\n+    int offsetMinutes = -calendar.getTimeZone().getOffset(calendar.getTimeInMillis()) / 60000;\n+    if (offsetMinutes == 0) {\n+        buf.append('Z');\n+    } else {\n+        buf.append(offsetMinutes < 0 ? '-' : '+');\n+        offsetMinutes = Math.abs(offsetMinutes);\n+        int offsetHours = offsetMinutes / 60;\n+        int offsetMinutesReminder = offsetMinutes % 60;\n+        buf.append(offsetHours < 10 ? \"0\" : \"\").append(offsetHours);\n+        buf.append(offsetMinutesReminder < 10 ? \":0\" : \":\").append(offsetMinutesReminder);\n+    }\n+\n+    return buf;\n+}\n \n     /**\n      * <p>Performs the formatting by applying the rules to the",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[T10:11:12]> but was:<[2002-02-23T10:11:12.475+03:00]>",
    "test_result": "FAIL"
}