{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    long instant = 0L;\n    for (int i = 0, isize = partial.size(); i < isize; i++) {\n        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n    }\n\n    // Fix calculation for leap days\n    int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n    if (monthIndex >= 0) {\n        int yearValue = partial.get(DateTimeFieldType.year());\n        int monthValue = partial.get(DateTimeFieldType.monthOfYear());\n        int dayValue = partial.get(DateTimeFieldType.dayOfMonth());\n\n        int newMonthValue = iChronology.monthOfYear().add(monthValue, valueToAdd);\n        while (newMonthValue < 1) {\n            yearValue--;\n            newMonthValue += 12;\n        }\n        while (newMonthValue > 12) {\n            yearValue++;\n            newMonthValue -= 12;\n        }\n        int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n        dayValue = Math.min(dayValue, maxDayInMonth);\n        instant = iChronology.getDateTimeMillis(yearValue, newMonthValue, dayValue, 0);\n        valueToAdd = FieldUtils.safeSubtract(valueToAdd, newMonthValue - monthValue);\n    }\n\n    instant = add(instant, valueToAdd);\n    return iChronology.get(partial, instant);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e8d335e4 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,42 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    long instant = 0L;\n+    for (int i = 0, isize = partial.size(); i < isize; i++) {\n+        instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+    }\n+\n+    // Fix calculation for leap days\n+    int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n+    if (monthIndex >= 0) {\n+        int yearValue = partial.get(DateTimeFieldType.year());\n+        int monthValue = partial.get(DateTimeFieldType.monthOfYear());\n+        int dayValue = partial.get(DateTimeFieldType.dayOfMonth());\n+\n+        int newMonthValue = iChronology.monthOfYear().add(monthValue, valueToAdd);\n+        while (newMonthValue < 1) {\n+            yearValue--;\n+            newMonthValue += 12;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        while (newMonthValue > 12) {\n+            yearValue++;\n+            newMonthValue -= 12;\n         }\n+        int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n+        dayValue = Math.min(dayValue, maxDayInMonth);\n+        instant = iChronology.getDateTimeMillis(yearValue, newMonthValue, dayValue, 0);\n+        valueToAdd = FieldUtils.safeSubtract(valueToAdd, newMonthValue - monthValue);\n     }\n \n+    instant = add(instant, valueToAdd);\n+    return iChronology.get(partial, instant);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}