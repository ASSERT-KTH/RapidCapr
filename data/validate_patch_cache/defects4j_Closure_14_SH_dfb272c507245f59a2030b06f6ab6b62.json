{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent.getParent(), cfa);\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..d84dc9da 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -768,6 +768,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n+        } else if (parent.getLastChild() == node){\n+          if (cfa != null) {\n+            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            }\n+          }\n+          return computeFollowNode(fromNode, parent.getParent(), cfa);\n+        }\n+    }\n+            }\n+          }\n+          return computeFollowNode(fromNode, parent, cfa);\n         }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}