{
    "patch": "            if (millis < iMillis && iSavedFields != savedFields) {\n                // only try to reset fields again if millis has decreased and\n                // fields have been changed internally - avoids infinite loop\n                return computeMillis(resetFields, text);\n            }\n            if (resetFields) {\n                // restore fields\n                for (int i = 0; i < count; i++) {\n                    savedFields[i].restore();\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..954e04e2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (millis < iMillis && iSavedFields != savedFields) {\n+                // only try to reset fields again if millis has decreased and\n+                // fields have been changed internally - avoids infinite loop\n+                return computeMillis(resetFields, text);\n+            }\n+            if (resetFields) {\n+                // restore fields\n+                for (int i = 0; i < count; i++) {\n+                    savedFields[i].restore();\n+                }\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}