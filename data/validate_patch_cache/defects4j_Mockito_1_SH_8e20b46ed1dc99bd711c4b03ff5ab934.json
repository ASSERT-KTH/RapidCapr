{
    "patch": "    Object[] rawArguments = invocation.getRawArguments();\n    int argumentCount = rawArguments.length;\n    for (int i = 0; i < matchers.size(); i++) {\n        Matcher matcher = matchers.get(i);\n        if (matcher instanceof CapturesArguments) {\n            if (i < argumentCount) {\n                Object argument = rawArguments[i];\n                if (isVariableArgument(invocation, i) && isVarargMatcher(matcher)) {\n                    if (argument != null && argument.getClass().isArray()) {\n                        int varArgLength = Array.getLength(argument);\n                        Object[] varArgArray = new Object[varArgLength];\n                        for (int j = 0; j < varArgLength; j++) {\n                            varArgArray[j] = Array.get(argument, j);\n                        }\n                        argument = varArgArray;\n                    } else {\n                        argument = new Object[]{argument};\n                    }\n                }\n                ((CapturesArguments) matcher).captureFrom(argument);\n            } else {\n                ((CapturesArguments) matcher).captureFrom(null);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..0692660d7 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,31 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] rawArguments = invocation.getRawArguments();\n+    int argumentCount = rawArguments.length;\n+    for (int i = 0; i < matchers.size(); i++) {\n+        Matcher matcher = matchers.get(i);\n+        if (matcher instanceof CapturesArguments) {\n+            if (i < argumentCount) {\n+                Object argument = rawArguments[i];\n+                if (isVariableArgument(invocation, i) && isVarargMatcher(matcher)) {\n+                    if (argument != null && argument.getClass().isArray()) {\n+                        int varArgLength = Array.getLength(argument);\n+                        Object[] varArgArray = new Object[varArgLength];\n+                        for (int j = 0; j < varArgLength; j++) {\n+                            varArgArray[j] = Array.get(argument, j);\n+                        }\n+                        argument = varArgArray;\n+                    } else {\n+                        argument = new Object[]{argument};\n+                    }\n+                }\n+                ((CapturesArguments) matcher).captureFrom(argument);\n+            } else {\n+                ((CapturesArguments) matcher).captureFrom(null);\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}