{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node cArg = callNode.getFirstChild().getNext();\n\n    // Functions called via 'call' and 'apply' have a this-object as\n    // the first parameter, but this is not part of the called function's\n    // parameter list.\n    if (!callNode.getFirstChild().isName()) {\n      if (NodeUtil.isFunctionObjectCall(callNode)) {\n        // TODO(johnlenz): Support replace this with a value.\n        if (cArg == null || !cArg.isThis()) {\n          return CanInlineResult.NO;\n        }\n        cArg = cArg.getNext();\n      } else {\n        // \".apply\" call should be filtered before this.\n        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n      }\n    }\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (cArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (cArg == null) {\n          // new code starts here\n\n          // if the function has default parameters\n          if (fnParam.isDefaultValue()) {\n            fnParam = fnParam.getNext();\n\n            // skip default value\n            if (fnParam == null) {\n              break;\n            }\n          } else { \n            // there are more named parameters than actual arguments\n            return CanInlineResult.NO;\n          }\n        } else {\n\n          // Check for arguments that are evaluated more than once.\n          // Note: Unlike block inlining, there it is not possible that a\n          // parameter reference will be in a loop.\n          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n              && NodeUtil.getNameReferenceCount(\n                  block, fnParam.getString()) > 1) {\n            return CanInlineResult.NO;\n          }\n\n          // Move to the next name and parameter.\n          cArg = cArg.getNext();\n          fnParam = fnParam.getNext();\n        }\n      } else if (cArg == null) {\n        // Both lists are done.\n        break;\n      } else {\n        // more arguments than named parameters\n        return CanInlineResult.NO;\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..7eb8d9ac 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -719,7 +719,22 @@ class FunctionInjector {\n     while (cArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n+        if (cArg == null) {\n+          // new code starts here\n+\n+          // if the function has default parameters\n+          if (fnParam.isDefaultValue()) {\n+            fnParam = fnParam.getNext();\n+\n+            // skip default value\n+            if (fnParam == null) {\n+              break;\n+            }\n+          } else { \n+            // there are more named parameters than actual arguments\n+            return CanInlineResult.NO;\n+          }\n+        } else {\n \n           // Check for arguments that are evaluated more than once.\n           // Note: Unlike block inlining, there it is not possible that a\n@@ -729,19 +744,17 @@ class FunctionInjector {\n                   block, fnParam.getString()) > 1) {\n             return CanInlineResult.NO;\n           }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+          // Move to the next name and parameter.\n+          cArg = cArg.getNext();\n+          fnParam = fnParam.getNext();\n         }\n-        cArg = cArg.getNext();\n+      } else if (cArg == null) {\n+        // Both lists are done.\n+        break;\n+      } else {\n+        // more arguments than named parameters\n+        return CanInlineResult.NO;\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}