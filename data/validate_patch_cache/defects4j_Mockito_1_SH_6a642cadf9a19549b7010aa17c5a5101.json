{
    "patch": "            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n                Object varargs = invocation.getRawArguments()[indexOfVararg];\n                if (varargs != null && varargs.getClass().isArray()) {\n                    for (int i = 0; i < Array.getLength(varargs); i++) {\n                        ((CapturesArguments) m).captureFrom(Array.get(varargs, i));\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(varargs);\n                }\n                return;\n            }\n            throw new UnsupportedOperationException();",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..75cd79012 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,10 +116,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n+            if (m instanceof CapturesArguments && invocation.getRawArguments().length > indexOfVararg) {\n+                Object varargs = invocation.getRawArguments()[indexOfVararg];\n+                if (varargs != null && varargs.getClass().isArray()) {\n+                    for (int i = 0; i < Array.getLength(varargs); i++) {\n+                        ((CapturesArguments) m).captureFrom(Array.get(varargs, i));\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(varargs);\n+                }\n+                return;\n+            }\n             throw new UnsupportedOperationException();\n \n         } else {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}