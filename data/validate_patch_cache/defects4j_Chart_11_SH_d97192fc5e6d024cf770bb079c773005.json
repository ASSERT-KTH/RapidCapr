{
    "patch": "try {\n    PathIterator iterator2 = p2.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n} catch (Exception e) {\n    return false;\n}",
    "patch_diff": "diff --git a/source/org/jfree/chart/util/ShapeUtilities.java b/source/org/jfree/chart/util/ShapeUtilities.java\nindex 31aa6c6..f1a24f2 100644\n--- a/source/org/jfree/chart/util/ShapeUtilities.java\n+++ b/source/org/jfree/chart/util/ShapeUtilities.java\n@@ -272,7 +272,31 @@ public class ShapeUtilities {\n             return false;\n         }\n         PathIterator iterator1 = p1.getPathIterator(null);\n-        PathIterator iterator2 = p1.getPathIterator(null);\n+try {\n+    PathIterator iterator2 = p2.getPathIterator(null);\n+    double[] d1 = new double[6];\n+    double[] d2 = new double[6];\n+    boolean done = iterator1.isDone() && iterator2.isDone();\n+    while (!done) {\n+        if (iterator1.isDone() != iterator2.isDone()) {\n+            return false;\n+        }\n+        int seg1 = iterator1.currentSegment(d1);\n+        int seg2 = iterator2.currentSegment(d2);\n+        if (seg1 != seg2) {\n+            return false;\n+        }\n+        if (!Arrays.equals(d1, d2)) {\n+            return false;\n+        }\n+        iterator1.next();\n+        iterator2.next();\n+        done = iterator1.isDone() && iterator2.isDone();\n+    }\n+    return true;\n+} catch (Exception e) {\n+    return false;\n+}\n         double[] d1 = new double[6];\n         double[] d2 = new double[6];\n         boolean done = iterator1.isDone() && iterator2.isDone();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}