{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        PeriodType effectiveType = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, effectiveType, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n\n        // Adjust for months that are not supported\n        if (effectiveType.isSupported(DurationFieldType.years()) && effectiveType.isSupported(DurationFieldType.months())) {\n            if (years != 0 && months != 0) {\n                int totalMonths = (years * 12) + months;\n                years = totalMonths / 12;\n                months = totalMonths % 12;\n                result = result.withYears(years).withMonths(months);\n            } else {\n                result = result.withYears(years).withMonths(months);\n            }\n        } else if (effectiveType.isSupported(DurationFieldType.years())) {\n            years += months / 12;\n            months = months % 12;\n            result = result.withYears(years).withMonths(months);\n        } else if (effectiveType.isSupported(DurationFieldType.months())) {\n            int totalMonths = (years * 12) + months;\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            result = result.withYears(years).withMonths(months);\n        }\n\n        // Adjust for weeks that are not supported\n        if (!effectiveType.isSupported(DurationFieldType.weeks())) {\n            long totalMillis = result.getMillis();\n            totalMillis += (((long) result.getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n            result = result.withMillis(totalMillis).withWeeks(0);\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..f10c1c16 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1614,25 +1614,43 @@ public final class Period\n      * @since 1.5\n      */\n     public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        PeriodType effectiveType = DateTimeUtils.getPeriodType(type);\n+        long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        Period result = new Period(millis, effectiveType, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+\n+        // Adjust for months that are not supported\n+        if (effectiveType.isSupported(DurationFieldType.years()) && effectiveType.isSupported(DurationFieldType.months())) {\n+            if (years != 0 && months != 0) {\n+                int totalMonths = (years * 12) + months;\n+                years = totalMonths / 12;\n+                months = totalMonths % 12;\n+                result = result.withYears(years).withMonths(months);\n+            } else {\n+                result = result.withYears(years).withMonths(months);\n             }\n+        } else if (effectiveType.isSupported(DurationFieldType.years())) {\n+            years += months / 12;\n+            months = months % 12;\n+            result = result.withYears(years).withMonths(months);\n+        } else if (effectiveType.isSupported(DurationFieldType.months())) {\n+            int totalMonths = (years * 12) + months;\n+            years = totalMonths / 12;\n+            months = totalMonths % 12;\n+            result = result.withYears(years).withMonths(months);\n+        }\n+\n+        // Adjust for weeks that are not supported\n+        if (!effectiveType.isSupported(DurationFieldType.weeks())) {\n+            long totalMillis = result.getMillis();\n+            totalMillis += (((long) result.getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+            result = result.withMillis(totalMillis).withWeeks(0);\n         }\n         return result;\n     }",
    "result_reason": "error: method withMillis in class Period cannot be applied to given types;",
    "test_result": "ERROR"
}