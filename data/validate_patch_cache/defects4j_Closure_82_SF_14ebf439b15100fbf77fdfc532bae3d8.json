{
    "patch": "  public static String format(String format, Object... args) {\n    StringBuilder sb = new StringBuilder();\n    int currentArgIndex = 0;\n    int length = format.length();\n    for (int i = 0; i < length; i++) {\n      char ch = format.charAt(i);\n      if (ch == '\\\\') {\n        i++;\n        sb.append(format.charAt(i));\n      } else if (ch == '%') {\n        i++;\n        // Check for '%' with no following arg\n        if (i >= length) {\n          throw new IllegalFormatException(i - 1, format);\n        }\n        int argIndex = -1;\n        ch = format.charAt(i);\n        if (ch >= '0' && ch <= '9') {\n          argIndex = ch - '0';\n          i++;\n          if (i < length) {\n            ch = format.charAt(i);\n            while (ch >= '0' && ch <= '9') {\n              argIndex = argIndex * 10 + (ch - '0');\n              i++;\n              if (i >= length) {\n                break;\n              }\n              ch = format.charAt(i);\n            }\n          }\n        }\n        if (argIndex == -1) {\n          argIndex = currentArgIndex;\n          currentArgIndex++;\n        }\n        if (argIndex >= args.length || argIndex < 0) {\n          throw new MissingFormatArgumentException(argIndex);\n        }\n        if (args[argIndex] == null) {\n          // Null values are not passed to Formatter, so we'll do null-String replacement here.\n          sb.append(\"null\");\n        } else {\n          sb.append(String.format(Locale.US, \"%\" + ch, args[argIndex]));\n        }\n      } else {\n        sb.append(ch);\n      }\n    }\n    return sb.toString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex 32a0b250..add7548c 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -158,9 +158,56 @@ public abstract class JSType implements Serializable {\n   public boolean isNoObjectType() {\n     return false;\n   }\n-\n-  public final boolean isEmptyType() {\n-    return isNoType() || isNoObjectType() || isNoResolvedType();\n+  public static String format(String format, Object... args) {\n+    StringBuilder sb = new StringBuilder();\n+    int currentArgIndex = 0;\n+    int length = format.length();\n+    for (int i = 0; i < length; i++) {\n+      char ch = format.charAt(i);\n+      if (ch == '\\\\') {\n+        i++;\n+        sb.append(format.charAt(i));\n+      } else if (ch == '%') {\n+        i++;\n+        // Check for '%' with no following arg\n+        if (i >= length) {\n+          throw new IllegalFormatException(i - 1, format);\n+        }\n+        int argIndex = -1;\n+        ch = format.charAt(i);\n+        if (ch >= '0' && ch <= '9') {\n+          argIndex = ch - '0';\n+          i++;\n+          if (i < length) {\n+            ch = format.charAt(i);\n+            while (ch >= '0' && ch <= '9') {\n+              argIndex = argIndex * 10 + (ch - '0');\n+              i++;\n+              if (i >= length) {\n+                break;\n+              }\n+              ch = format.charAt(i);\n+            }\n+          }\n+        }\n+        if (argIndex == -1) {\n+          argIndex = currentArgIndex;\n+          currentArgIndex++;\n+        }\n+        if (argIndex >= args.length || argIndex < 0) {\n+          throw new MissingFormatArgumentException(argIndex);\n+        }\n+        if (args[argIndex] == null) {\n+          // Null values are not passed to Formatter, so we'll do null-String replacement here.\n+          sb.append(\"null\");\n+        } else {\n+          sb.append(String.format(Locale.US, \"%\" + ch, args[argIndex]));\n+        }\n+      } else {\n+        sb.append(ch);\n+      }\n+    }\n+    return sb.toString();\n   }\n \n   public boolean isNumberObjectType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}