{
    "patch": "Partial newPartial;\n// If there are no fields i.e. newTypes is empty, then create a partial\n// with just the given values\nif (newTypes.length == 0) {\n    newTypes = new DateTimeFieldType[] { fieldType };\n    newPartial = new Partial(iChronology, newTypes, newValues);\n} else {\n    newPartial = new Partial(iChronology, newTypes, newValues);\n    iChronology.validate(newPartial, newValues);\n}\nreturn newPartial;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..2a1b12c4 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,17 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+Partial newPartial;\n+// If there are no fields i.e. newTypes is empty, then create a partial\n+// with just the given values\n+if (newTypes.length == 0) {\n+    newTypes = new DateTimeFieldType[] { fieldType };\n+    newPartial = new Partial(iChronology, newTypes, newValues);\n+} else {\n+    newPartial = new Partial(iChronology, newTypes, newValues);\n+    iChronology.validate(newPartial, newValues);\n+}\n+return newPartial;\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}