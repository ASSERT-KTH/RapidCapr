{
    "patch": "public static boolean containsIgnoreCase(String str, String searchStr) {\n    if (str == null || searchStr == null) {\n        return false;\n    }\n    int searchLength = searchStr.length();\n    if (searchLength == 0) {\n        return true;\n    }\n    int length = str.length();\n    for (int i = 0; i <= length - searchLength; i++) {\n        if (regionMatches(str, true, i, searchStr, 0, searchLength)) {\n            return true;\n        }            \n    }\n    return false;\n}\n\nprivate static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart, CharSequence substring, int start, int length) {\n    if (cs instanceof String && substring instanceof String) {\n        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n    } else {\n        int index1 = thisStart;\n        int index2 = start;\n        int tmpLength = length;\n        while (tmpLength-- > 0) {\n            char c1 = cs.charAt(index1++);\n            char c2 = substring.charAt(index2++);\n            if (c1 == c2) {\n                continue;\n            }\n            if (!ignoreCase) {\n                return false;\n            }\n            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) &&\n                    Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java\nindex 72b4a491..b3f3a348 100644\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n@@ -1041,12 +1041,47 @@ public class StringUtils {\n      * @return true if the String contains the search String irrespective of\n      * case or false if not or <code>null</code> string input\n      */\n-    public static boolean containsIgnoreCase(String str, String searchStr) {\n-        if (str == null || searchStr == null) {\n-            return false;\n+public static boolean containsIgnoreCase(String str, String searchStr) {\n+    if (str == null || searchStr == null) {\n+        return false;\n+    }\n+    int searchLength = searchStr.length();\n+    if (searchLength == 0) {\n+        return true;\n+    }\n+    int length = str.length();\n+    for (int i = 0; i <= length - searchLength; i++) {\n+        if (regionMatches(str, true, i, searchStr, 0, searchLength)) {\n+            return true;\n+        }            \n+    }\n+    return false;\n+}\n+\n+private static boolean regionMatches(CharSequence cs, boolean ignoreCase, int thisStart, CharSequence substring, int start, int length) {\n+    if (cs instanceof String && substring instanceof String) {\n+        return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+    } else {\n+        int index1 = thisStart;\n+        int index2 = start;\n+        int tmpLength = length;\n+        while (tmpLength-- > 0) {\n+            char c1 = cs.charAt(index1++);\n+            char c2 = substring.charAt(index2++);\n+            if (c1 == c2) {\n+                continue;\n+            }\n+            if (!ignoreCase) {\n+                return false;\n+            }\n+            if (Character.toUpperCase(c1) != Character.toUpperCase(c2) &&\n+                    Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+                return false;\n+            }\n         }\n-        return contains(str.toUpperCase(), searchStr.toUpperCase());\n+        return true;\n     }\n+}\n \n     // IndexOfAny chars\n     //-----------------------------------------------------------------------",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}