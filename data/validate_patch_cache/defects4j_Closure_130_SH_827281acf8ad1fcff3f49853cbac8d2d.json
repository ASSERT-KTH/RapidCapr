{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0) {\n        // {@code name} meets condition (a).\n        // Add all children of {@code name} to the worklist, since they will\n        // necessarily be invoked as {@code name}.\n        if (name.props != null) {\n          workList.addAll(name.props);\n        }\n      } else if (name.type == Name.Type.OBJECTLIT && name.props == null &&\n                 name.aliasingGets > 1 && name.localSets == 0) {\n        // We can turn {@code name} into a simple alias or a no-op var.\n        //\n        // If {@code name} is assigned to more than once in the function\n        // scope, then there might be cases that we can't handle (such as\n        // when the name is used in an expression). So ignore aliases that\n        // have multiple assignments.\n        //\n        // If {@code name} has any local mutation, then it will be difficult\n        // to inline its values. So ignore them.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..1c4e30e8 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,24 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0) {\n+        // {@code name} meets condition (a).\n+        // Add all children of {@code name} to the worklist, since they will\n+        // necessarily be invoked as {@code name}.\n+        if (name.props != null) {\n+          workList.addAll(name.props);\n+        }\n+      } else if (name.type == Name.Type.OBJECTLIT && name.props == null &&\n+                 name.aliasingGets > 1 && name.localSets == 0) {\n+        // We can turn {@code name} into a simple alias or a no-op var.\n+        //\n+        // If {@code name} is assigned to more than once in the function\n+        // scope, then there might be cases that we can't handle (such as\n+        // when the name is used in an expression). So ignore aliases that\n+        // have multiple assignments.\n+        //\n+        // If {@code name} has any local mutation, then it will be difficult\n+        // to inline its values. So ignore them.\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}