{
    "patch": "protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        int firstBasicRow;\n        boolean multipleVariablesTakeSameValue;\n        for (int i = 0; i < coefficients.length; i++) {\n            firstBasicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            multipleVariablesTakeSameValue = false;\n            if (firstBasicRow != null) {\n                for (int j = i + 1; j < coefficients.length; j++) {\n                    if (getBasicRow(getNumObjectiveFunctions() + j) == firstBasicRow) {\n                        multipleVariablesTakeSameValue = true;\n                        break;\n                    }\n                }\n            }\n            if (multipleVariablesTakeSameValue) {\n                coefficients[i] = 0;\n            } else if (firstBasicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(firstBasicRow, j) == 1) {\n                        coefficients[i] = 0;\n                        break;\n                    }\n                }\n                if (coefficients[i] != 0) {\n                    coefficients[i] = getEntry(firstBasicRow, getRhsOffset()) -\n                                      (restrictToNonNegative ? 0 : mostNegative);\n                }\n            } else {\n                coefficients[i] = (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..19ee0790c 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,24 +321,39 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n+protected RealPointValuePair getSolution() {\n         double[] coefficients = new double[getOriginalNumDecisionVariables()];\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        int firstBasicRow;\n+        boolean multipleVariablesTakeSameValue;\n         for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n+            firstBasicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+            multipleVariablesTakeSameValue = false;\n+            if (firstBasicRow != null) {\n+                for (int j = i + 1; j < coefficients.length; j++) {\n+                    if (getBasicRow(getNumObjectiveFunctions() + j) == firstBasicRow) {\n+                        multipleVariablesTakeSameValue = true;\n+                        break;\n+                    }\n+                }\n+            }\n+            if (multipleVariablesTakeSameValue) {\n+                coefficients[i] = 0;\n+            } else if (firstBasicRow != null) {\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                    if (tableau.getEntry(firstBasicRow, j) == 1) {\n+                        coefficients[i] = 0;\n+                        break;\n                     }\n                 }\n+                if (coefficients[i] != 0) {\n+                    coefficients[i] = getEntry(firstBasicRow, getRhsOffset()) -\n+                                      (restrictToNonNegative ? 0 : mostNegative);\n+                }\n+            } else {\n+                coefficients[i] = (restrictToNonNegative ? 0 : mostNegative);\n             }\n         }\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));",
    "result_reason": "error: incomparable types: int and <null>",
    "test_result": "ERROR"
}