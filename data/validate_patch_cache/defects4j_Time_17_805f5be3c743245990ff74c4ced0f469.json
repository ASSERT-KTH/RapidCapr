{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n\n        if (instantBefore == instantAfter) {\n            return instant;\n        }\n\n        if (earlierOrLater) {\n            // currently in later offset\n            long candidateOffset = convertLocalToUTC(instantAfter, true); // use the later one\n            if (candidateOffset <= instant) {\n                candidateOffset = convertLocalToUTC(instantBefore, true); // use the earlier one\n            }\n            return candidateOffset;\n        } else {\n            // currently in earlier offset\n            long candidateOffset = convertLocalToUTC(instantBefore, false); // use the earlier one\n            if (candidateOffset <= instant) {\n                candidateOffset = convertLocalToUTC(instantAfter, false); // use the later one\n            }\n            return candidateOffset;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..77d747d6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1161,22 +1161,28 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the adjusted instant millis\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n         long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n         long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+\n         if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+            return instant;\n+        }\n+\n+        if (earlierOrLater) {\n+            // currently in later offset\n+            long candidateOffset = convertLocalToUTC(instantAfter, true); // use the later one\n+            if (candidateOffset <= instant) {\n+                candidateOffset = convertLocalToUTC(instantBefore, true); // use the earlier one\n+            }\n+            return candidateOffset;\n+        } else {\n+            // currently in earlier offset\n+            long candidateOffset = convertLocalToUTC(instantBefore, false); // use the earlier one\n+            if (candidateOffset <= instant) {\n+                candidateOffset = convertLocalToUTC(instantAfter, false); // use the later one\n+            }\n+            return candidateOffset;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T06:15:00.000+01:00>",
    "test_result": "FAIL"
}