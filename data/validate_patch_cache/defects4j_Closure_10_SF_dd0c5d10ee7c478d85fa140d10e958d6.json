{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n\nprivate static boolean mayBeStringHelper(Node node) {\n  return node.getJSType() != null && node.getJSType().isSubtypeOf(getStringType(node.getStaticSourceFile()));\n}\n\nprivate static JSTypeRegistry getTypeRegistry() {\n  return new JSTypeRegistry();\n}\n\nprivate static JSType getStringType(Object source) {\n  return getTypeRegistry().getNativeType(JSTypeNative.STRING_TYPE, source);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..9d07c53f 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1412,13 +1412,25 @@ public final class NodeUtil {\n     return mayBeString(n, true);\n   }\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n-    }\n+static boolean mayBeString(Node n, boolean recurse) {\n+  if (recurse) {\n+    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+  } else {\n+    return mayBeStringHelper(n);\n   }\n+}\n+\n+private static boolean mayBeStringHelper(Node node) {\n+  return node.getJSType() != null && node.getJSType().isSubtypeOf(getStringType(node.getStaticSourceFile()));\n+}\n+\n+private static JSTypeRegistry getTypeRegistry() {\n+  return new JSTypeRegistry();\n+}\n+\n+private static JSType getStringType(Object source) {\n+  return getTypeRegistry().getNativeType(JSTypeNative.STRING_TYPE, source);\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}