{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        if (offsetLocal != offsetAdjusted) {\n            if (offsetLocal > offsetAdjusted) {\n                long nextTransition = nextTransition(instantAdjusted);\n                long nextLocal = nextTransition - offsetLocal;\n                if (nextLocal == instantLocal) {\n                    // if the next local time is equal to the input local time\n                    // then the local time is invalid, so return the original offset\n                    return offsetLocal;\n                } else if (nextLocal < instantLocal) {\n                    // if the next local time is before the input local time\n                    // then the input local time is in a gap\n                    // so return the new offset (offsetAdjusted)\n                    return offsetAdjusted;\n                } else {\n                    // if the next local time is after the input local time\n                    // then the input local time is in an overlap\n                    // so return the original offset (offsetLocal)\n                    return offsetLocal;\n                }\n            } else {\n                long prevTransition = previousTransition(instantAdjusted);\n                long currentOffset = getOffset(prevTransition);\n                if (instantLocal - currentOffset == prevTransition) {\n                    // if the current local time is equal to the previous transition\n                    // then the local time is invalid, so return the original offset\n                    return offsetLocal;\n                } else if (offsetAdjusted == currentOffset) {\n                    // if the new offset is still equal to the current offset\n                    // then the local time is in a gap, so return the current offset\n                    return currentOffset;\n                } else {\n                    // otherwise, the local time is in an overlap, so return the new offset\n                    return offsetAdjusted;\n                }\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2608f659 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,24 +877,43 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+            if (offsetLocal > offsetAdjusted) {\n+                long nextTransition = nextTransition(instantAdjusted);\n+                long nextLocal = nextTransition - offsetLocal;\n+                if (nextLocal == instantLocal) {\n+                    // if the next local time is equal to the input local time\n+                    // then the local time is invalid, so return the original offset\n+                    return offsetLocal;\n+                } else if (nextLocal < instantLocal) {\n+                    // if the next local time is before the input local time\n+                    // then the input local time is in a gap\n+                    // so return the new offset (offsetAdjusted)\n+                    return offsetAdjusted;\n+                } else {\n+                    // if the next local time is after the input local time\n+                    // then the input local time is in an overlap\n+                    // so return the original offset (offsetLocal)\n                     return offsetLocal;\n                 }\n+            } else {\n+                long prevTransition = previousTransition(instantAdjusted);\n+                long currentOffset = getOffset(prevTransition);\n+                if (instantLocal - currentOffset == prevTransition) {\n+                    // if the current local time is equal to the previous transition\n+                    // then the local time is invalid, so return the original offset\n+                    return offsetLocal;\n+                } else if (offsetAdjusted == currentOffset) {\n+                    // if the new offset is still equal to the current offset\n+                    // then the local time is in a gap, so return the current offset\n+                    return currentOffset;\n+                } else {\n+                    // otherwise, the local time is in an overlap, so return the new offset\n+                    return offsetAdjusted;\n+                }\n             }\n         }\n         return offsetAdjusted;",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}