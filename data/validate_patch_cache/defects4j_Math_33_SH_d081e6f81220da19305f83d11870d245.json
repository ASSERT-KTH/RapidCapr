{
    "patch": "List<Integer> columnsToDrop = new ArrayList<>();\ncolumnsToDrop.add(0);\n\n// positive cost non-artificial variables\nfor (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n    final double entry = tableau.getEntry(0, i);\n    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n        columnsToDrop.add(i);\n    }\n}\n\n// non-basic artificial variables\nfor (int i = 0; i < getNumArtificialVariables(); i++) {\n    int col = i + getArtificialVariableOffset();\n    if (getBasicRow(col) == null) {\n        columnsToDrop.add(col);\n    } else {\n        int basicRow = getBasicRow(col);\n        boolean hasBasicVar = false;\n        for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {\n            if (Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {\n                hasBasicVar = true;\n                break;\n            }\n        }\n        if (!hasBasicVar) {\n            for (int j = getArtificialVariableOffset(); j < getWidth(); j++) {\n                if (Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {\n                    columnsToDrop.add(col);\n                    columnsToDrop.add(j);\n                    break;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..4b53398ba 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,42 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+List<Integer> columnsToDrop = new ArrayList<>();\n+columnsToDrop.add(0);\n+\n+// positive cost non-artificial variables\n+for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n+    final double entry = tableau.getEntry(0, i);\n+    if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+        columnsToDrop.add(i);\n+    }\n+}\n+\n+// non-basic artificial variables\n+for (int i = 0; i < getNumArtificialVariables(); i++) {\n+    int col = i + getArtificialVariableOffset();\n+    if (getBasicRow(col) == null) {\n+        columnsToDrop.add(col);\n+    } else {\n+        int basicRow = getBasicRow(col);\n+        boolean hasBasicVar = false;\n+        for (int j = getNumObjectiveFunctions(); j < getArtificialVariableOffset(); j++) {\n+            if (Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {\n+                hasBasicVar = true;\n+                break;\n+            }\n+        }\n+        if (!hasBasicVar) {\n+            for (int j = getArtificialVariableOffset(); j < getWidth(); j++) {\n+                if (Precision.compareTo(tableau.getEntry(basicRow, j), 0d, maxUlps) != 0) {\n+                    columnsToDrop.add(col);\n+                    columnsToDrop.add(j);\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+}\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}