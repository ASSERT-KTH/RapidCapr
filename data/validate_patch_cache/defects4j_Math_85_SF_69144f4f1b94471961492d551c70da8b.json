{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double a = initial;\n    double b = initial;\n    double fa, fb = Double.NaN, previous_fb, previous_f3b;\n    int numIterations = 0;\n\n    do {\n        if (numIterations++ == 0) {\n            fa = function.value(a);\n        } else {\n            fa = function.value(a);\n            if (!Double.isNaN(fb)) {\n                if (numIterations > 2) { // not valid for first three values of fb\n                    // Secant Method (p. 95 Numeric Recipes book)\n                    double f3b = function.value(3.0 * b - 2.0 * a);\n                    double c = b - fb * (b - a) / (fb - fa);\n                    double fc = function.value(c);\n\n                    double denominator = Math.max(1e-20, (fb - fa) * (fc - fb) * (fc - fa));\n                    double temp = b - ((b - a) * ((fb - fc) * (c - a) - (fc - fa) * (b - a)) / denominator);\n\n                    if (temp != b) {\n                        a = b;\n                        b = temp;\n                        fa = fb;\n                        fb = function.value(b);\n                    } else {\n                        // Secant method failed (new x-value is the same as old)\n                        // fall back to bisection method\n                        double mid = a + (b - a) / 2.0;\n                        fa = function.value(mid);\n\n                        if ((fa > 0.0 && fb < 0.0) || (fa < 0.0 && fb > 0.0)) {\n                            a = mid;\n                        } else {\n                            b = mid;\n                            fb = fa; // replace fb with fa, because fa is closer to the root\n                        }\n                    }\n                }\n            }\n        }\n\n        if ((numIterations == 1) || (fa * fb >= 0.0)) {\n            previous_fb = fb;\n            b += 1.5 * (b - a);\n            fb = function.value(b);\n            if (Double.isNaN(fb)) {\n                throw new ConvergenceException(\n                        \"Failed to bracket root with this initial point: initial={0}, lower bound={1}, upper bound={2}\",\n                        initial, lowerBound, upperBound);\n            }\n        }\n\n        previous_f3b = fb; // first assignment only (for numIterations 1 and 2)\n\n    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));\n\n    if (fa * fb >= 0.0) {\n        throw new ConvergenceException(\n                \"method bracket failed: number of iterations={0}, maximum iterations={1}, \" +\n                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n                numIterations, maximumIterations, initial,\n                lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    if (previous_fb * previous_f3b > 0.0) {\n        // Did not bracket: Bisection method\n        int nrBisect = numIterations - 3;     // maximum number of times bisection is used\n\n        while (nrBisect-- != 0) {\n            double mid = (a + b) / 2.0;\n            fb = function.value(mid);\n            if (Double.isNaN(fb)) {\n                throw new ConvergenceException(\n                        \"Failed to bracket root with this initial point: initial={0}, lower bound={1}, upper bound={2}\",\n                        initial, lowerBound, upperBound);\n            }\n            if (fb <= 0.0) {\n                a = mid;\n            }\n            if (fb >= 0.0) {\n                b = mid;\n            }\n        }\n    }\n\n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..626dbb625 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,115 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        FunctionEvaluationException {\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double a = initial;\n+    double b = initial;\n+    double fa, fb = Double.NaN, previous_fb, previous_f3b;\n+    int numIterations = 0;\n+\n+    do {\n+        if (numIterations++ == 0) {\n+            fa = function.value(a);\n+        } else {\n             fa = function.value(a);\n-            \n+            if (!Double.isNaN(fb)) {\n+                if (numIterations > 2) { // not valid for first three values of fb\n+                    // Secant Method (p. 95 Numeric Recipes book)\n+                    double f3b = function.value(3.0 * b - 2.0 * a);\n+                    double c = b - fb * (b - a) / (fb - fa);\n+                    double fc = function.value(c);\n+\n+                    double denominator = Math.max(1e-20, (fb - fa) * (fc - fb) * (fc - fa));\n+                    double temp = b - ((b - a) * ((fb - fc) * (c - a) - (fc - fa) * (b - a)) / denominator);\n+\n+                    if (temp != b) {\n+                        a = b;\n+                        b = temp;\n+                        fa = fb;\n+                        fb = function.value(b);\n+                    } else {\n+                        // Secant method failed (new x-value is the same as old)\n+                        // fall back to bisection method\n+                        double mid = a + (b - a) / 2.0;\n+                        fa = function.value(mid);\n+\n+                        if ((fa > 0.0 && fb < 0.0) || (fa < 0.0 && fb > 0.0)) {\n+                            a = mid;\n+                        } else {\n+                            b = mid;\n+                            fb = fa; // replace fb with fa, because fa is closer to the root\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        if ((numIterations == 1) || (fa * fb >= 0.0)) {\n+            previous_fb = fb;\n+            b += 1.5 * (b - a);\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            if (Double.isNaN(fb)) {\n+                throw new ConvergenceException(\n+                        \"Failed to bracket root with this initial point: initial={0}, lower bound={1}, upper bound={2}\",\n+                        initial, lowerBound, upperBound);\n+            }\n         }\n-        \n-        return new double[]{a, b};\n+\n+        previous_f3b = fb; // first assignment only (for numIterations 1 and 2)\n+\n+    } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && ((a > lowerBound) || (b < upperBound)));\n+\n+    if (fa * fb >= 0.0) {\n+        throw new ConvergenceException(\n+                \"method bracket failed: number of iterations={0}, maximum iterations={1}, \" +\n+                        \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                        \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n     }\n \n+    if (previous_fb * previous_f3b > 0.0) {\n+        // Did not bracket: Bisection method\n+        int nrBisect = numIterations - 3;     // maximum number of times bisection is used\n+\n+        while (nrBisect-- != 0) {\n+            double mid = (a + b) / 2.0;\n+            fb = function.value(mid);\n+            if (Double.isNaN(fb)) {\n+                throw new ConvergenceException(\n+                        \"Failed to bracket root with this initial point: initial={0}, lower bound={1}, upper bound={2}\",\n+                        initial, lowerBound, upperBound);\n+            }\n+            if (fb <= 0.0) {\n+                a = mid;\n+            }\n+            if (fb >= 0.0) {\n+                b = mid;\n+            }\n+        }\n+    }\n+\n+    return new double[]{a, b};\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: variable previous_fb might not have been initialized",
    "test_result": "ERROR"
}