{
    "patch": "    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, int maximumIterations)\n            throws ConvergenceException, FunctionEvaluationException {\n        final double fmin;\n        final double fmax;\n        \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                  lowerBound, initial, upperBound);\n        }\n        \n        double a = initial;\n        double b = initial;\n        \n        if (Double.isNaN(a) || Double.isInfinite(a)) {\n            throw new IllegalArgumentException(\"Invalid initial value: \" + a);\n        }\n        \n        double fa = function.value(a);\n        double fb = fa;\n\n        if (Double.isNaN(fa)) {\n            throw new IllegalArgumentException(\"Invalid function value at \" + a);\n        }\n\n        if (fa >= 0) {\n            b = searchMax(function, initial, upperBound, maximumIterations);\n            fb = function.value(b);\n            a = searchMin(function, lowerBound, initial, maximumIterations);\n            fa = function.value(a);\n            \n            if (Double.isNaN(fb)) {\n                throw new IllegalArgumentException(\"Invalid function value at \" + b);\n            }\n            if (Double.isNaN(fa)) {\n                throw new IllegalArgumentException(\"Invalid function value at \" + a);\n            }\n            \n        } else {\n            b = searchMin(function, initial, lowerBound, maximumIterations);\n            fb = function.value(b);\n            a = searchMax(function, upperBound, initial, maximumIterations);\n            fa = function.value(a);\n            \n            if (Double.isNaN(fb)) {\n                throw new IllegalArgumentException(\"Invalid function value at \" + b);\n            }\n            if (Double.isNaN(fa)) {\n                throw new IllegalArgumentException(\"Invalid function value at \" + a);\n            }\n        }\n\n        if (fa * fb >= 0.0 ) {\n            throw new ConvergenceException(\n                    \"number of iterations={0}, maximum iterations={1}, \" +\n                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                            \"final b value={6}, f(a)={7}, f(b)={8}\",\n                    0, maximumIterations, initial,\n                    lowerBound, upperBound, a, b, fa, fb);\n        }\n\n        if (fa < 0.0) {\n            fmin = fa;\n            fmax = fb;\n        } else {\n            fmin = fb;\n            fmax = fa;\n        }\n\n        return new double[]{a, b};\n    }\n\n    private static double searchMax(UnivariateRealFunction func, double lo, double hi, int maxEval)\n            throws ConvergenceException, FunctionEvaluationException {\n        return BrentOptimizer.of(UnivariateObjectiveFunction.from(func))\n                .search(hi, lo, BracketFinder.BoundedBracket(maxEval, hi - lo))\n                .getKey();\n    }\n\n    private static double searchMin(UnivariateRealFunction func, double lo, double hi, int maxEval)\n            throws ConvergenceException, FunctionEvaluationException {\n        return BrentOptimizer.of(UnivariateObjectiveFunction.from(x -> -func.value(x)))\n                .search(hi, lo, BracketFinder.BoundedBracket(maxEval, hi - lo))\n                .getKey();\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..9ceead070 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -163,9 +163,10 @@ public class UnivariateRealSolverUtils {\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n     public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n+            double initial, double lowerBound, double upperBound, int maximumIterations)\n+            throws ConvergenceException, FunctionEvaluationException {\n+        final double fmin;\n+        final double fmax;\n         \n         if (function == null) {\n             throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n@@ -179,34 +180,82 @@ public class UnivariateRealSolverUtils {\n                   \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                   lowerBound, initial, upperBound);\n         }\n+        \n         double a = initial;\n         double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+        \n+        if (Double.isNaN(a) || Double.isInfinite(a)) {\n+            throw new IllegalArgumentException(\"Invalid initial value: \" + a);\n+        }\n+        \n+        double fa = function.value(a);\n+        double fb = fa;\n+\n+        if (Double.isNaN(fa)) {\n+            throw new IllegalArgumentException(\"Invalid function value at \" + a);\n+        }\n+\n+        if (fa >= 0) {\n+            b = searchMax(function, initial, upperBound, maximumIterations);\n+            fb = function.value(b);\n+            a = searchMin(function, lowerBound, initial, maximumIterations);\n             fa = function.value(a);\n             \n+            if (Double.isNaN(fb)) {\n+                throw new IllegalArgumentException(\"Invalid function value at \" + b);\n+            }\n+            if (Double.isNaN(fa)) {\n+                throw new IllegalArgumentException(\"Invalid function value at \" + a);\n+            }\n+            \n+        } else {\n+            b = searchMin(function, initial, lowerBound, maximumIterations);\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n+            a = searchMax(function, upperBound, initial, maximumIterations);\n+            fa = function.value(a);\n+            \n+            if (Double.isNaN(fb)) {\n+                throw new IllegalArgumentException(\"Invalid function value at \" + b);\n+            }\n+            if (Double.isNaN(fa)) {\n+                throw new IllegalArgumentException(\"Invalid function value at \" + a);\n+            }\n+        }\n+\n         if (fa * fb >= 0.0 ) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"number of iterations={0}, maximum iterations={1}, \" +\n+                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                    0, maximumIterations, initial,\n+                    lowerBound, upperBound, a, b, fa, fb);\n         }\n-        \n+\n+        if (fa < 0.0) {\n+            fmin = fa;\n+            fmax = fb;\n+        } else {\n+            fmin = fb;\n+            fmax = fa;\n+        }\n+\n         return new double[]{a, b};\n     }\n \n+    private static double searchMax(UnivariateRealFunction func, double lo, double hi, int maxEval)\n+            throws ConvergenceException, FunctionEvaluationException {\n+        return BrentOptimizer.of(UnivariateObjectiveFunction.from(func))\n+                .search(hi, lo, BracketFinder.BoundedBracket(maxEval, hi - lo))\n+                .getKey();\n+    }\n+\n+    private static double searchMin(UnivariateRealFunction func, double lo, double hi, int maxEval)\n+            throws ConvergenceException, FunctionEvaluationException {\n+        return BrentOptimizer.of(UnivariateObjectiveFunction.from(x -> -func.value(x)))\n+                .search(hi, lo, BracketFinder.BoundedBracket(maxEval, hi - lo))\n+                .getKey();\n+    }\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}