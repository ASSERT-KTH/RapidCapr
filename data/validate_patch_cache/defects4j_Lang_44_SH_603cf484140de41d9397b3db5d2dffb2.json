{
    "patch": "if (val.endsWith(\"L\")) {\n    val = val.substring(0, val.length() - 1);\n    return createBigInteger(val);\n}\ntry {\n    return createLong(val);\n} catch (NumberFormatException nfe) {\n    try {\n        return createBigDecimal(val);\n    } catch (NumberFormatException e) {\n        // empty catch\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..f8b03fdb 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,19 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+if (val.endsWith(\"L\")) {\n+    val = val.substring(0, val.length() - 1);\n+    return createBigInteger(val);\n+}\n+try {\n+    return createLong(val);\n+} catch (NumberFormatException nfe) {\n+    try {\n+        return createBigDecimal(val);\n+    } catch (NumberFormatException e) {\n+        // empty catch\n+    }\n+}\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "junit.framework.AssertionFailedError: createNumber(String) 1 failed expected:<1234.5> but was:<1234.5>",
    "test_result": "FAIL"
}