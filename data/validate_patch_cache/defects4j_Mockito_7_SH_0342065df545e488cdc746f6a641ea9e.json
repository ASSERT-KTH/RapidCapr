{
    "patch": "    private void readTypeVariables() {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n        if (actualTypeArg == null) {\n            throw new MockitoException(\"Unable to extract type variable dependencies. Please use alternatives like 'doReturn(...).when(mock).method()'\");\n        }\n        registerTypeVariablesOn(actualTypeArg);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c7617715c 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,16 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type actualTypeArg = getActualTypeArgumentFor(typeVariable);\n+        if (actualTypeArg == null) {\n+            throw new MockitoException(\"Unable to extract type variable dependencies. Please use alternatives like 'doReturn(...).when(mock).method()'\");\n+        }\n+        registerTypeVariablesOn(actualTypeArg);\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}