{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n    if (n.isString() || n.isArrayAccess() || n.isObjectLit()) {\n      return true;\n    } else if (recurse && n.isCall()) {\n      String name = n.getFirstChild().getQualifiedName();\n      if (name != null) {\n        return MAY_BE_STRING_FUNCTIONS.contains(name);\n      }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..38b05598 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,14 +1411,17 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n+static boolean mayBeString(Node n, boolean recurse) {\n+    if (n.isString() || n.isArrayAccess() || n.isObjectLit()) {\n+      return true;\n+    } else if (recurse && n.isCall()) {\n+      String name = n.getFirstChild().getQualifiedName();\n+      if (name != null) {\n+        return MAY_BE_STRING_FUNCTIONS.contains(name);\n+      }\n     }\n-  }\n+    return false;\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}