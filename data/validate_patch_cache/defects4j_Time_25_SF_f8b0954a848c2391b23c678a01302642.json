{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int initialLocalOffset = getOffset(instantLocal);\n\n    long start = instantLocal - DateTimeConstants.MILLIS_PER_HOUR;\n    long end = instantLocal + DateTimeConstants.MILLIS_PER_HOUR;\n    if (start / DateTimeConstants.MILLIS_PER_SECOND != end / DateTimeConstants.MILLIS_PER_SECOND) {\n        // If the interest range spans a transition point, then we need to be assertive about\n        // picking a specific standard offset.\n        long transition = nextTransition(start);\n        if (transition != start && getOffset(transition - 1) != initialLocalOffset) {\n            // The previous long was an overlap, and the instant we seek lies within the overlap.\n            // We need to refer to the standard offset for the instant by choosing the later offset.\n            return getOffset(transition);\n        }\n        transition = previousTransition(end);\n        if (instantLocal >= transition && getOffset(transition - 1) != initialLocalOffset) {\n            // The next long is a gap, and the instant we seek lies within that gap.\n            // We need to refer to the standard offset for the instant by choosing the earlier offset.\n            return getOffset(transition - 1);\n        }\n    }\n\n    int offsetAdjusted = getOffset(instantLocal - initialLocalOffset);\n    if (offsetAdjusted != initialLocalOffset) {\n        long next = nextTransition(instantLocal - initialLocalOffset);\n        long next2 = nextTransition(instantLocal - offsetAdjusted);\n\n        if (next != next2) {\n            return initialLocalOffset;\n        }\n    }\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..cfb3990d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int initialLocalOffset = getOffset(instantLocal);\n+\n+    long start = instantLocal - DateTimeConstants.MILLIS_PER_HOUR;\n+    long end = instantLocal + DateTimeConstants.MILLIS_PER_HOUR;\n+    if (start / DateTimeConstants.MILLIS_PER_SECOND != end / DateTimeConstants.MILLIS_PER_SECOND) {\n+        // If the interest range spans a transition point, then we need to be assertive about\n+        // picking a specific standard offset.\n+        long transition = nextTransition(start);\n+        if (transition != start && getOffset(transition - 1) != initialLocalOffset) {\n+            // The previous long was an overlap, and the instant we seek lies within the overlap.\n+            // We need to refer to the standard offset for the instant by choosing the later offset.\n+            return getOffset(transition);\n+        }\n+        transition = previousTransition(end);\n+        if (instantLocal >= transition && getOffset(transition - 1) != initialLocalOffset) {\n+            // The next long is a gap, and the instant we seek lies within that gap.\n+            // We need to refer to the standard offset for the instant by choosing the earlier offset.\n+            return getOffset(transition - 1);\n+        }\n+    }\n+\n+    int offsetAdjusted = getOffset(instantLocal - initialLocalOffset);\n+    if (offsetAdjusted != initialLocalOffset) {\n+        long next = nextTransition(instantLocal - initialLocalOffset);\n+        long next2 = nextTransition(instantLocal - offsetAdjusted);\n+\n+        if (next != next2) {\n+            return initialLocalOffset;\n         }\n-        return offsetAdjusted;\n     }\n+    return offsetAdjusted;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}