{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        if (NodeUtil.isExpressionNode(maybeExpr)) {\n          // IE has a bug where event handlers behave differently when\n          // their return value is used vs. when their return value is in\n          // an EXPR_RESULT. It's pretty freaking weird. See:\n          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n          // We try to detect this case, and not fold EXPR_RESULTs\n          // into other expressions.\n\n          // We only have to worry about methods with an implicit 'this'\n          // param, or this doesn't happen.\n          Node maybeMethod = maybeExpr.getFirstChild();\n          if (maybeMethod != null && maybeMethod.isFunction()\n              && NodeUtil.getFunctionBody(maybeMethod).getProp(Node.FUNCTION_PROP_CTOR) == null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..13a86b51 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,6 +520,8 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n+\n+        if (NodeUtil.isExpressionNode(maybeExpr)) {\n           // IE has a bug where event handlers behave differently when\n           // their return value is used vs. when their return value is in\n           // an EXPR_RESULT. It's pretty freaking weird. See:\n@@ -527,10 +529,14 @@ public class PeepholeSubstituteAlternateSyntax\n           // We try to detect this case, and not fold EXPR_RESULTs\n           // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+          // We only have to worry about methods with an implicit 'this'\n+          // param, or this doesn't happen.\n+          Node maybeMethod = maybeExpr.getFirstChild();\n+          if (maybeMethod != null && maybeMethod.isFunction()\n+              && NodeUtil.getFunctionBody(maybeMethod).getProp(Node.FUNCTION_PROP_CTOR) == null) {\n+            return true;\n+          }\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}