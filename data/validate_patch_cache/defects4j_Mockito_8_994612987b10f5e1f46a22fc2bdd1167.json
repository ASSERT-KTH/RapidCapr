{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n                Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n                if (type instanceof Class) {\n                    result.add((Class<?>) type);\n                } else if (type instanceof ParameterizedType) {\n                    result.add((Class<?>) ((ParameterizedType) type).getRawType());\n                } else if (type instanceof TypeVariable && contextualActualTypeParameters.containsKey(type)) {\n                    result.addAll(getActualTypeArguments((TypeVariable) type, contextualActualTypeParameters));\n                }\n            } else {\n                result.add((Class<?>) actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..cc192a72d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,18 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable && contextualActualTypeParameters.containsKey(actualTypeArgument)) {\n+                Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n+                if (type instanceof Class) {\n+                    result.add((Class<?>) type);\n+                } else if (type instanceof ParameterizedType) {\n+                    result.add((Class<?>) ((ParameterizedType) type).getRawType());\n+                } else if (type instanceof TypeVariable && contextualActualTypeParameters.containsKey(type)) {\n+                    result.addAll(getActualTypeArguments((TypeVariable) type, contextualActualTypeParameters));\n+                }\n+            } else {\n+                result.add((Class<?>) actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}