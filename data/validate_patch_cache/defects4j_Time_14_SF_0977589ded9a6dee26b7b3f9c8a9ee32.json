{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (!DateTimeUtils.isContiguous(partial)) {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n        int currentMonthLen = iChronology.getDaysInYearMonth(\n                iChronology.get(partial, values), \n                iChronology.get(partial, DateTimeFieldType.monthOfYear())); \n        int wrappedMonth = (values[fieldIndex] + valueToAdd) - 1;\n        int wrappedYear = values[iChronology.year().getPartialIndex()] + (wrappedMonth / 12);\n        wrappedMonth = wrappedMonth % 12 + 1;\n        int wrappedMonthLen = iChronology.getDaysInYearMonth(wrappedYear, wrappedMonth);\n\n        int wrappedDay = values[iChronology.dayOfMonth().getPartialIndex()];\n        if (wrappedDay > wrappedMonthLen) {\n            wrappedDay = wrappedMonthLen;\n        }\n\n        int[] wrappedValues = Arrays.copyOf(values, values.length);\n        wrappedValues[fieldIndex] = wrappedMonth;\n        wrappedValues[iChronology.year().getPartialIndex()] = wrappedYear;\n        wrappedValues[iChronology.dayOfMonth().getPartialIndex()] = wrappedDay;\n\n        return wrappedValues;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..53041aac 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,23 +200,32 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n+        if (!DateTimeUtils.isContiguous(partial)) {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        int currentMonthLen = iChronology.getDaysInYearMonth(\n+                iChronology.get(partial, values), \n+                iChronology.get(partial, DateTimeFieldType.monthOfYear())); \n+        int wrappedMonth = (values[fieldIndex] + valueToAdd) - 1;\n+        int wrappedYear = values[iChronology.year().getPartialIndex()] + (wrappedMonth / 12);\n+        wrappedMonth = wrappedMonth % 12 + 1;\n+        int wrappedMonthLen = iChronology.getDaysInYearMonth(wrappedYear, wrappedMonth);\n+\n+        int wrappedDay = values[iChronology.dayOfMonth().getPartialIndex()];\n+        if (wrappedDay > wrappedMonthLen) {\n+            wrappedDay = wrappedMonthLen;\n+        }\n+\n+        int[] wrappedValues = Arrays.copyOf(values, values.length);\n+        wrappedValues[fieldIndex] = wrappedMonth;\n+        wrappedValues[iChronology.year().getPartialIndex()] = wrappedYear;\n+        wrappedValues[iChronology.dayOfMonth().getPartialIndex()] = wrappedDay;\n+\n+        return wrappedValues;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: no suitable method found for get(ReadablePartial,int[])",
    "test_result": "ERROR"
}