{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                simplex = contract(original, comparator);\n            }\n\n            return;\n\n        } else {\n            simplex = contract(original, comparator);\n        }\n\n        // check convergence\n        if (checker != null && checker.converged(getIterations(), best, simplex)) {\n            return;\n        }\n    }\n}\n\nprotected RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n    // compute the contracted simplex\n    final RealPointValuePair[] contractedSimplex = simplex;\n    final RealPointValuePair[] contracted = new RealPointValuePair[n];\n    final RealPointValuePair point = original[0];\n    for (int i = 0; i < n; ++i) {\n        final double[] contractedCoords = new double[n];\n        for (int j = 0; j < n; ++j) {\n            contractedCoords[j] = contractionCoefficient * point.getPointRef()[j] +\n                                  (1.0 - contractionCoefficient) * simplex[i + 1].getPointRef()[j];\n        }\n        contracted[i] = new RealPointValuePair(contractedCoords,\n                                                computeObjectiveValue(contractedCoords),\n                                                false);\n    }\n    Arrays.sort(contracted, comparator);\n    contractedSimplex[0] = simplex[0];\n    System.arraycopy(contracted, 0, contractedSimplex, 1, contracted.length);\n    return contractedSimplex;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5a3282ab1 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,64 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                simplex = contract(original, comparator);\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+            return;\n \n-            // check convergence\n-                return;\n-            }\n+        } else {\n+            simplex = contract(original, comparator);\n+        }\n \n+        // check convergence\n+        if (checker != null && checker.converged(getIterations(), best, simplex)) {\n+            return;\n         }\n+    }\n+}\n \n+protected RealPointValuePair[] contract(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException {\n+    // compute the contracted simplex\n+    final RealPointValuePair[] contractedSimplex = simplex;\n+    final RealPointValuePair[] contracted = new RealPointValuePair[n];\n+    final RealPointValuePair point = original[0];\n+    for (int i = 0; i < n; ++i) {\n+        final double[] contractedCoords = new double[n];\n+        for (int j = 0; j < n; ++j) {\n+            contractedCoords[j] = contractionCoefficient * point.getPointRef()[j] +\n+                                  (1.0 - contractionCoefficient) * simplex[i + 1].getPointRef()[j];\n+        }\n+        contracted[i] = new RealPointValuePair(contractedCoords,\n+                                                computeObjectiveValue(contractedCoords),\n+                                                false);\n     }\n+    Arrays.sort(contracted, comparator);\n+    contractedSimplex[0] = simplex[0];\n+    System.arraycopy(contracted, 0, contractedSimplex, 1, contracted.length);\n+    return contractedSimplex;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: checker has private access in DirectSearchOptimizer",
    "test_result": "ERROR"
}