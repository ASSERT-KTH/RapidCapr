{
    "patch": "              case Token.INC:\n              case Token.DEC:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              case Token.IF:\n              case Token.FOR:\n              case Token.WHILE:\n              case Token.DO:\n              case Token.CASE:\n              case Token.CATCH:\n              case Token.EXPR_RESULT:\n              case Token.RETURN:\n              case Token.VAR:\n              case Token.LET:\n              case Token.CONST:\n              case Token.SWITCH:\n                // Non-global sets, only.\n                return;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n            name = n.getString();\n            break;\n          case Token.GETPROP:\n            if (NodeUtil.isLValue(n)) {\n              isSet = true;\n              type = Name.Type.OTHER;\n\n              Node last = n;\n              while (last.getLastChild() != null) {\n                last = last.getLastChild();\n              }\n\n              if (last.getType() == Token.FUNCTION) {\n                type = Name.Type.FUNCTION;\n                isSet = false;\n              }\n            } else {\n              name = n.getQualifiedName();\n              if (name == null) {\n                return;\n              }\n            }\n            if (isSet) {\n              handleSet(module, scope, n, name);\n            } else {\n              handleGet(module, scope, n, parent, name, type);\n            }\n            break;\n          default:\n            return;\n        }\n\n        // We are only interested in global names.\n        if (!isGlobalNameReference(name, scope)) {\n          return;\n        }\n\n        if (isSet) {\n          if (isGlobalScope(scope)) {\n            handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n          } else {\n            handleSetFromLocal(module, scope, n, parent, name);\n          }\n        } else {\n          handleGet(module, scope, n, parent, name);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..82170b0d 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -364,6 +363,79 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              case Token.IF:\n+              case Token.FOR:\n+              case Token.WHILE:\n+              case Token.DO:\n+              case Token.CASE:\n+              case Token.CATCH:\n+              case Token.EXPR_RESULT:\n+              case Token.RETURN:\n+              case Token.VAR:\n+              case Token.LET:\n+              case Token.CONST:\n+              case Token.SWITCH:\n+                // Non-global sets, only.\n+                return;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+            name = n.getString();\n+            break;\n+          case Token.GETPROP:\n+            if (NodeUtil.isLValue(n)) {\n+              isSet = true;\n+              type = Name.Type.OTHER;\n+\n+              Node last = n;\n+              while (last.getLastChild() != null) {\n+                last = last.getLastChild();\n+              }\n+\n+              if (last.getType() == Token.FUNCTION) {\n+                type = Name.Type.FUNCTION;\n+                isSet = false;\n+              }\n+            } else {\n+              name = n.getQualifiedName();\n+              if (name == null) {\n+                return;\n+              }\n+            }\n+            if (isSet) {\n+              handleSet(module, scope, n, name);\n+            } else {\n+              handleGet(module, scope, n, parent, name, type);\n+            }\n+            break;\n+          default:\n+            return;\n+        }\n+\n+        // We are only interested in global names.\n+        if (!isGlobalNameReference(name, scope)) {\n+          return;\n+        }\n+\n+        if (isSet) {\n+          if (isGlobalScope(scope)) {\n+            handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+          } else {\n+            handleSetFromLocal(module, scope, n, parent, name);\n+          }\n+        } else {\n+          handleGet(module, scope, n, parent, name);\n+        }\n+      }\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}