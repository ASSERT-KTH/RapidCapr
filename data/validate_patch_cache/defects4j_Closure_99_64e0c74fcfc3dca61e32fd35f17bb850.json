{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isThisTypeExplicit())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them.\n      // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n            pType == Token.OBJECTLIT)) {\n        return false;\n      }\n      if (pType == Token.OBJECTLIT) {\n        return isPropertyOfMethod(parent);\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  private boolean isPropertyOfMethod(Node objLit) {\n    Preconditions.checkState(objLit.getType() == Token.OBJECTLIT, objLit);\n    Preconditions.checkState(objLit.getParent().getType() == Token.FUNCTION);\n\n    Node parent = objLit.getParent();\n    while (parent != null) {\n      if (parent.getType() == Token.MEMBER_DEF) {\n        return true;\n      } else if (NodeUtil.isExpressionNode(parent)) {\n        return false;\n      }\n      parent = parent.getParent();\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..985e8f17 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,37 +81,37 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+           jsDoc.isThisTypeExplicit())) {\n         return false;\n       }\n \n       // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n+      // be able to have a @this annotation associated with them.\n+      // e.g., var a = function() { }; // or function a() {} // or a.x = function() {};\n       int pType = parent.getType();\n       if (!(pType == Token.BLOCK ||\n             pType == Token.SCRIPT ||\n             pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n+            pType == Token.ASSIGN ||\n+            pType == Token.OBJECTLIT)) {\n         return false;\n       }\n+      if (pType == Token.OBJECTLIT) {\n+        return isPropertyOfMethod(parent);\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n       Node lhs = parent.getFirstChild();\n       Node rhs = lhs.getNext();\n-      \n+\n       if (n == lhs) {\n         // Always traverse the left side of the assignment. To handle\n         // nested assignments properly (e.g., (a = this).property = c;),\n@@ -122,19 +122,36 @@ final class CheckGlobalThis implements Callback {\n       } else {\n         // Only traverse the right side if it's not an assignment to a prototype\n         // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n-          }\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n+          return false;\n+        }\n       }\n     }\n \n     return true;\n   }\n \n+  private boolean isPropertyOfMethod(Node objLit) {\n+    Preconditions.checkState(objLit.getType() == Token.OBJECTLIT, objLit);\n+    Preconditions.checkState(objLit.getParent().getType() == Token.FUNCTION);\n+\n+    Node parent = objLit.getParent();\n+    while (parent != null) {\n+      if (parent.getType() == Token.MEMBER_DEF) {\n+        return true;\n+      } else if (NodeUtil.isExpressionNode(parent)) {\n+        return false;\n+      }\n+      parent = parent.getParent();\n+    }\n+\n+    return false;\n+  }\n+\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n       compiler.report(t.makeError(n, level, GLOBAL_THIS));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}