{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        } else {\n            calendar = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"));\n            calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));\n            calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH));\n            calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH));\n            calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY) - mTimeZone.getRawOffset() / (60 * 1000 * 60));\n            calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE));\n            calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND));\n            calendar.set(Calendar.MILLISECOND, calendar.get(Calendar.MILLISECOND));\n        }\n        return applyRules(calendar, buf);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..94684593 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -871,6 +871,15 @@ public class FastDateFormat extends Format {\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n+        } else {\n+            calendar = new GregorianCalendar(TimeZone.getTimeZone(\"UTC\"));\n+            calendar.set(Calendar.YEAR, calendar.get(Calendar.YEAR));\n+            calendar.set(Calendar.MONTH, calendar.get(Calendar.MONTH));\n+            calendar.set(Calendar.DAY_OF_MONTH, calendar.get(Calendar.DAY_OF_MONTH));\n+            calendar.set(Calendar.HOUR_OF_DAY, calendar.get(Calendar.HOUR_OF_DAY) - mTimeZone.getRawOffset() / (60 * 1000 * 60));\n+            calendar.set(Calendar.MINUTE, calendar.get(Calendar.MINUTE));\n+            calendar.set(Calendar.SECOND, calendar.get(Calendar.SECOND));\n+            calendar.set(Calendar.MILLISECOND, calendar.get(Calendar.MILLISECOND));\n         }\n         return applyRules(calendar, buf);\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<T[10:11:12]> but was:<T[02:07:51]>",
    "test_result": "FAIL"
}