{
    "patch": "      if (ref == null) {\n        return false;\n      }\n\n      // Make sure this assignment is not in a loop or conditional statement.\n      Set<BasicBlock> visited = Sets.newHashSet();\n      Deque<BasicBlock> toVisit = new ArrayDeque<BasicBlock>();\n      toVisit.add(ref.getBasicBlock());\n\n      while (!toVisit.isEmpty()) {\n        BasicBlock cur = toVisit.removeFirst();\n        if (!visited.add(cur)) {\n          continue;\n        }\n        if (cur.isLoop || cur.isConditionalBranch()) {\n          return false;\n        }\n        toVisit.addAll(cur.getSuccessors());\n      }\n\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..eb9a1c72 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,27 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (ref == null) {\n+        return false;\n+      }\n+\n+      // Make sure this assignment is not in a loop or conditional statement.\n+      Set<BasicBlock> visited = Sets.newHashSet();\n+      Deque<BasicBlock> toVisit = new ArrayDeque<BasicBlock>();\n+      toVisit.add(ref.getBasicBlock());\n+\n+      while (!toVisit.isEmpty()) {\n+        BasicBlock cur = toVisit.removeFirst();\n+        if (!visited.add(cur)) {\n+          continue;\n+        }\n+        if (cur.isLoop || cur.isConditionalBranch()) {\n+          return false;\n+        }\n+        toVisit.addAll(cur.getSuccessors());\n+      }\n+\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}