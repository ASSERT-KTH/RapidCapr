{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iType = PeriodType.time();\n    long seconds = duration;\n    long millis = 0;\n    long minutes = 0;\n    long hours = 0;\n    int days = 0;\n    int weeks = 0;\n    int months = 0;\n    int years = 0;\n    if (seconds >= SECONDS_PER_WEEK) {  // weeks\n        weeks = (int) (seconds / SECONDS_PER_WEEK);\n        seconds -= weeks * SECONDS_PER_WEEK;\n    }\n    if (seconds >= SECONDS_PER_DAY) {  // days\n        days = (int) (seconds / SECONDS_PER_DAY);\n        seconds -= days * SECONDS_PER_DAY;\n    }\n    if (seconds >= SECONDS_PER_HOUR) {  // hours\n        hours = seconds / SECONDS_PER_HOUR;\n        seconds -= hours * SECONDS_PER_HOUR;\n    }\n    if (seconds >= SECONDS_PER_MINUTE) {  // minutes\n        minutes = seconds / SECONDS_PER_MINUTE;\n        seconds -= minutes * SECONDS_PER_MINUTE;\n    }\n    if (seconds >= 1) {  // seconds\n        millis = (seconds % 1) * 1000;\n        seconds = seconds / 1;\n    }\n    iValues = new int[8];\n    iValues[0] = years;\n    iValues[1] = months;\n    iValues[2] = weeks;\n    iValues[3] = days;\n    iValues[4] = hours;\n    iValues[5] = minutes;\n    iValues[6] = (int) seconds;\n    iValues[7] = (int) millis;\n    iType = PeriodType.standard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 5d89e34b..7b694955 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -555,47 +555,48 @@ public abstract class DateTimeZone implements Serializable {\n      * @param id  the old style id\n      * @return the new style id, null if not found\n      */\n-    private static synchronized String getConvertedId(String id) {\n-        Map<String, String> map = cZoneIdConversion;\n-        if (map == null) {\n-            // Backwards compatibility with TimeZone.\n-            map = new HashMap<String, String>();\n-            map.put(\"GMT\", \"UTC\");\n-            map.put(\"MIT\", \"Pacific/Apia\");\n-            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n-            map.put(\"AST\", \"America/Anchorage\");\n-            map.put(\"PST\", \"America/Los_Angeles\");\n-            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n-            map.put(\"PNT\", \"America/Phoenix\");\n-            map.put(\"CST\", \"America/Chicago\");\n-            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n-            map.put(\"IET\", \"America/Indianapolis\");\n-            map.put(\"PRT\", \"America/Puerto_Rico\");\n-            map.put(\"CNT\", \"America/St_Johns\");\n-            map.put(\"AGT\", \"America/Buenos_Aires\");\n-            map.put(\"BET\", \"America/Sao_Paulo\");\n-            map.put(\"WET\", \"Europe/London\");\n-            map.put(\"ECT\", \"Europe/Paris\");\n-            map.put(\"ART\", \"Africa/Cairo\");\n-            map.put(\"CAT\", \"Africa/Harare\");\n-            map.put(\"EET\", \"Europe/Bucharest\");\n-            map.put(\"EAT\", \"Africa/Addis_Ababa\");\n-            map.put(\"MET\", \"Asia/Tehran\");\n-            map.put(\"NET\", \"Asia/Yerevan\");\n-            map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Calcutta\");\n-            map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Saigon\");\n-            map.put(\"CTT\", \"Asia/Shanghai\");\n-            map.put(\"JST\", \"Asia/Tokyo\");\n-            map.put(\"ACT\", \"Australia/Darwin\");\n-            map.put(\"AET\", \"Australia/Sydney\");\n-            map.put(\"SST\", \"Pacific/Guadalcanal\");\n-            map.put(\"NST\", \"Pacific/Auckland\");\n-            cZoneIdConversion = map;\n-        }\n-        return map.get(id);\n+protected BasePeriod(long duration) {\n+    super();\n+    iType = PeriodType.time();\n+    long seconds = duration;\n+    long millis = 0;\n+    long minutes = 0;\n+    long hours = 0;\n+    int days = 0;\n+    int weeks = 0;\n+    int months = 0;\n+    int years = 0;\n+    if (seconds >= SECONDS_PER_WEEK) {  // weeks\n+        weeks = (int) (seconds / SECONDS_PER_WEEK);\n+        seconds -= weeks * SECONDS_PER_WEEK;\n+    }\n+    if (seconds >= SECONDS_PER_DAY) {  // days\n+        days = (int) (seconds / SECONDS_PER_DAY);\n+        seconds -= days * SECONDS_PER_DAY;\n+    }\n+    if (seconds >= SECONDS_PER_HOUR) {  // hours\n+        hours = seconds / SECONDS_PER_HOUR;\n+        seconds -= hours * SECONDS_PER_HOUR;\n     }\n+    if (seconds >= SECONDS_PER_MINUTE) {  // minutes\n+        minutes = seconds / SECONDS_PER_MINUTE;\n+        seconds -= minutes * SECONDS_PER_MINUTE;\n+    }\n+    if (seconds >= 1) {  // seconds\n+        millis = (seconds % 1) * 1000;\n+        seconds = seconds / 1;\n+    }\n+    iValues = new int[8];\n+    iValues[0] = years;\n+    iValues[1] = months;\n+    iValues[2] = weeks;\n+    iValues[3] = days;\n+    iValues[4] = hours;\n+    iValues[5] = minutes;\n+    iValues[6] = (int) seconds;\n+    iValues[7] = (int) millis;\n+    iType = PeriodType.standard();\n+}\n \n     private static int parseOffset(String str) {\n         // Can't use a real chronology if called during class",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}