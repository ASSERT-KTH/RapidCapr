{
    "patch": "    private boolean isDirective(Node n) {\n      if (n == null || n.getType() != Token.EXPR_RESULT) {\n        return false;\n      }\n      Node firstChild = n.getFirstChild();\n      return firstChild != null && firstChild.isString() &&\n          ALLOWED_DIRECTIVES.contains(firstChild.getString());\n    }\n    \n    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      Node node = newNode(Token.FOR);\n      Node lhs, expression;\n      // Transform the lhs and expression to handle destructuring.\n      if (loopNode.isForEach()) {\n        AstNode lhsNode = loopNode.getIterator();\n        if (lhsNode instanceof VariableDeclaration) {\n          VariableDeclaration decl = (VariableDeclaration) lhsNode;\n          if (decl.getVariables().size() != 1) {\n            throw new RuntimeException(\"Multi-variable for-each unsupported.\");\n          }\n          VariableInitializer init = decl.getVariables().get(0);\n          lhs = newNode(Token.NAME, init.getTarget());\n          expression = transform(init.getInitializer());\n        } else {\n          lhs = newNode(Token.NAME, lhsNode);\n          expression = transform(loopNode.getIteratedObject());\n        }\n        node.addChildToFront(lhs);\n      } else {\n        lhs = transform(loopNode.getIterator());\n        expression = transform(loopNode.getIteratedObject());\n        node.addChildToBack(lhs);\n      }\n      node.addChildToBack(expression);\n      node.addChildToBack(transformBlock(loopNode.getBody()));\n      return node;\n    }\n    \n    @Override\n    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(Token.EXPR_RESULT);\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..694ccaf0 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -474,106 +474,51 @@ class IRFactory {\n     }\n \n     private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+      if (n == null || n.getType() != Token.EXPR_RESULT) {\n+        return false;\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+      Node firstChild = n.getFirstChild();\n+      return firstChild != null && firstChild.isString() &&\n+          ALLOWED_DIRECTIVES.contains(firstChild.getString());\n     }\n-\n+    \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    Node processForInLoop(ForInLoop loopNode) {\n+      Node node = newNode(Token.FOR);\n+      Node lhs, expression;\n+      // Transform the lhs and expression to handle destructuring.\n+      if (loopNode.isForEach()) {\n+        AstNode lhsNode = loopNode.getIterator();\n+        if (lhsNode instanceof VariableDeclaration) {\n+          VariableDeclaration decl = (VariableDeclaration) lhsNode;\n+          if (decl.getVariables().size() != 1) {\n+            throw new RuntimeException(\"Multi-variable for-each unsupported.\");\n+          }\n+          VariableInitializer init = decl.getVariables().get(0);\n+          lhs = newNode(Token.NAME, init.getTarget());\n+          expression = transform(init.getInitializer());\n+        } else {\n+          lhs = newNode(Token.NAME, lhsNode);\n+          expression = transform(loopNode.getIteratedObject());\n+        }\n+        node.addChildToFront(lhs);\n+      } else {\n+        lhs = transform(loopNode.getIterator());\n+        expression = transform(loopNode.getIteratedObject());\n+        node.addChildToBack(lhs);\n       }\n+      node.addChildToBack(expression);\n+      node.addChildToBack(transformBlock(loopNode.getBody()));\n       return node;\n     }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n+    \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n+    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n+      Node node = newNode(Token.EXPR_RESULT);\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n     @Override\n     Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processEmptyExpression(EmptyExpression) in TypeSafeDispatcher",
    "test_result": "ERROR"
}