{
    "patch": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n\n    // If errorManager is not set, then create a default one based on whether\n    // outStream is null.\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(new LoggerErrorManager(\n            createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager errorManager =\n            new PrintStreamErrorManager(\n                createMessageFormatter(), outStream);\n        errorManager.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(errorManager);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off\n      // TYPE_PARSE_ERROR warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(\n              RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(\n          DiagnosticGroups.GLOBAL_THIS,\n          options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(\n        new SuppressDocWarningsGuard(\n            getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // All passes must run the variable check. This synthesizes\n    // variables later so that the compiler doesn't crash. It also\n    // checks the externs file for validity. If you don't want to\n    // warn about missing variable declarations, we shut that specific\n    // error off.\n    if (!options.checkSymbols &&\n        (warningsGuard == null || !warningsGuard.disables(\n            DiagnosticGroups.ES5_STRICT))) {\n      guards.add(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..5adb310c 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -225,15 +225,19 @@ public class Compiler extends AbstractCompiler {\n    */\n   public void initOptions(CompilerOptions options) {\n     this.options = options;\n+\n+    // If errorManager is not set, then create a default one based on whether\n+    // outStream is null.\n     if (errorManager == null) {\n       if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n+        setErrorManager(new LoggerErrorManager(\n+            createMessageFormatter(), logger));\n       } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n-        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n-        setErrorManager(printer);\n+        PrintStreamErrorManager errorManager =\n+            new PrintStreamErrorManager(\n+                createMessageFormatter(), outStream);\n+        errorManager.setSummaryDetailLevel(options.summaryDetailLevel);\n+        setErrorManager(errorManager);\n       }\n     }\n \n@@ -244,8 +248,8 @@ public class Compiler extends AbstractCompiler {\n       options.checkTypes = false;\n     } else if (!options.checkTypes) {\n       // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n+      // option, and checkTypes is enabled, then turn off\n+      // TYPE_PARSE_ERROR warnings.\n       options.setWarningLevel(\n           DiagnosticGroup.forType(\n               RhinoErrorReporter.TYPE_PARSE_ERROR),\n@@ -265,15 +269,14 @@ public class Compiler extends AbstractCompiler {\n             getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n-\n     // All passes must run the variable check. This synthesizes\n     // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n+    // checks the externs file for validity. If you don't want to\n+    // warn about missing variable declarations, we shut that specific\n     // error off.\n     if (!options.checkSymbols &&\n         (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n+            DiagnosticGroups.ES5_STRICT))) {\n       guards.add(new DiagnosticGroupWarningsGuard(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}