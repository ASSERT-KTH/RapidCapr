{
    "patch": "public static Date parse(String dateStr) throws ParseException {\n    if (dateStr == null) {\n        throw new NullPointerException(\"dateStr\");\n    }\n    SimpleDateFormat sdf = new SimpleDateFormat();\n    Calendar cal = Calendar.getInstance();\n    cal.setLenient(false);\n    long millis = 0;\n    for (int i = 0; i < DATE_FORMATS.length; i++) {\n        String dateFormat = DATE_FORMATS[i];\n        Pattern pattern = Pattern.compile(dateFormat);\n        Matcher matcher = pattern.matcher(dateStr);\n        if (matcher.matches()) {\n            int j = 1;\n            for (int n = matcher.groupCount(); j <= n; j++) {\n                String token = matcher.group(j);\n                sdf.applyPattern(FORMAT_TOKENS[j - 1]);\n                try {\n                    int val = Integer.parseInt(token);\n                    if (j == 1 && val < 100) {\n                        val += 2000;\n                    }\n                    cal.set(FIELD_POSITIONS[j - 1], val);\n                } catch (NumberFormatException e) {\n                    throw new ParseException(\"Invalid date: \" + dateStr, 0);\n                }\n            }\n            millis = cal.getTimeInMillis();\n            break;\n        }\n    }\n    if (millis == 0) {\n        throw new ParseException(\"Unparseable date: \" + dateStr, 0);\n    }\n    return new Date(millis);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..82d2bb6b 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,42 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n-\n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n-\n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n-\n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n-\n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n+public static Date parse(String dateStr) throws ParseException {\n+    if (dateStr == null) {\n+        throw new NullPointerException(\"dateStr\");\n+    }\n+    SimpleDateFormat sdf = new SimpleDateFormat();\n+    Calendar cal = Calendar.getInstance();\n+    cal.setLenient(false);\n+    long millis = 0;\n+    for (int i = 0; i < DATE_FORMATS.length; i++) {\n+        String dateFormat = DATE_FORMATS[i];\n+        Pattern pattern = Pattern.compile(dateFormat);\n+        Matcher matcher = pattern.matcher(dateStr);\n+        if (matcher.matches()) {\n+            int j = 1;\n+            for (int n = matcher.groupCount(); j <= n; j++) {\n+                String token = matcher.group(j);\n+                sdf.applyPattern(FORMAT_TOKENS[j - 1]);\n+                try {\n+                    int val = Integer.parseInt(token);\n+                    if (j == 1 && val < 100) {\n+                        val += 2000;\n+                    }\n+                    cal.set(FIELD_POSITIONS[j - 1], val);\n+                } catch (NumberFormatException e) {\n+                    throw new ParseException(\"Invalid date: \" + dateStr, 0);\n+                }\n             }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n+            millis = cal.getTimeInMillis();\n+            break;\n         }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n     }\n+    if (millis == 0) {\n+        throw new ParseException(\"Unparseable date: \" + dateStr, 0);\n+    }\n+    return new Date(millis);\n+}\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: method parse(String) is already defined in class FastDateParser",
    "test_result": "ERROR"
}