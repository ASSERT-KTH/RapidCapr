{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n    long millis = iMillis;\n    int i;\n    try {\n        for (i=0; i<count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        if (e.getIllegalFieldValueFailure() != null) {\n            return e.getIllegalFieldValueFailure().getMillis();\n        }\n        throw e;\n    }\n    if (iZone != null) {\n        int offset = iZone.getOffsetFromLocal(millis);\n        long adjustedMillis = millis - offset;\n        if (millis != adjustedMillis) {\n            int oldOffset = iZone.getOffset(millis);\n            millis = adjustedMillis;\n            if (resetFields) {\n                savedFields = iSavedFields;\n                for (i=0; i<count; i++) {\n                    millis = savedFields[i].set(millis, i == 0);\n                }\n            }\n            // In case we are at a DST gap, we must invalidate the\n            // fields and try again.\n            for (i=0; i<count; i++) {\n                savedFields[i].save();\n            }\n            iSavedFieldsCount = 0;\n            if (resetFields) {\n                iMillis = millis;\n            }\n            throw new IllegalArgumentException(\n                \"Illegal instant due to time zone offset transition (\" + iZone +\n                \") at \" + new Instant(millis, this));\n        }\n    }\n    return millis - iOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..f62ccdb4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,67 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+    }\n+    long millis = iMillis;\n+    int i;\n+    try {\n+        for (i=0; i<count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n-            }\n-            throw e;\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        if (e.getIllegalFieldValueFailure() != null) {\n+            return e.getIllegalFieldValueFailure().getMillis();\n+        }\n+        throw e;\n+    }\n+    if (iZone != null) {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        long adjustedMillis = millis - offset;\n+        if (millis != adjustedMillis) {\n+            int oldOffset = iZone.getOffset(millis);\n+            millis = adjustedMillis;\n+            if (resetFields) {\n+                savedFields = iSavedFields;\n+                for (i=0; i<count; i++) {\n+                    millis = savedFields[i].set(millis, i == 0);\n                 }\n-                throw new IllegalArgumentException(message);\n             }\n+            // In case we are at a DST gap, we must invalidate the\n+            // fields and try again.\n+            for (i=0; i<count; i++) {\n+                savedFields[i].save();\n+            }\n+            iSavedFieldsCount = 0;\n+            if (resetFields) {\n+                iMillis = millis;\n+            }\n+            throw new IllegalArgumentException(\n+                \"Illegal instant due to time zone offset transition (\" + iZone +\n+                \") at \" + new Instant(millis, this));\n         }\n-        \n-        return millis;\n     }\n+    return millis - iOffset;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}