{
    "patch": "            if (finallyNode.getBooleanProp(Node.EXCEPTION_HANDLER)) {\n              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n            } else {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..a747ef14 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,8 +764,12 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+            if (finallyNode.getBooleanProp(Node.EXCEPTION_HANDLER)) {\n+              cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);\n+            } else {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n+            }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}