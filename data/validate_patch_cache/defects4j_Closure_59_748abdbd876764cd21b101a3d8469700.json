{
    "patch": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option.\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      // If DiagnosticGroups did not override the plain checkTypes\n      // option, and checkTypes is enabled, then turn off the\n      // parser type warnings.\n      options.setWarningLevel(\n          DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n          CheckLevel.OFF);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList(\n        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()),\n        options.getWarningsGuard()\n    );\n    ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n    if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n      composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n    this.warningsGuard = composedGuards;\n\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(DiagnosticGroups.CHECK_GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n      options.diagnosticGroups().setEnabled(DiagnosticGroups.CHECK_GLOBAL_THIS, true);\n    }\n\n    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..16332ed6 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -227,11 +227,9 @@ public class Compiler extends AbstractCompiler {\n     this.options = options;\n     if (errorManager == null) {\n       if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n+        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n       } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+        PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n         printer.setSummaryDetailLevel(options.summaryDetailLevel);\n         setErrorManager(printer);\n       }\n@@ -247,44 +245,32 @@ public class Compiler extends AbstractCompiler {\n       // option, and checkTypes is enabled, then turn off the\n       // parser type warnings.\n       options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n+          DiagnosticGroup.forType(RhinoErrorReporter.TYPE_PARSE_ERROR),\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n-    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.ES5_STRICT,\n-          CheckLevel.ERROR);\n-    }\n-\n     // Initialize the warnings guard.\n-    List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n-    guards.add(options.getWarningsGuard());\n-\n+    List<WarningsGuard> guards = Lists.newArrayList(\n+        new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()),\n+        options.getWarningsGuard()\n+    );\n     ComposeWarningsGuard composedGuards = new ComposeWarningsGuard(guards);\n-\n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n+    if (!options.checkSymbols && !composedGuards.enables(DiagnosticGroups.CHECK_VARIABLES)) {\n       composedGuards.addGuard(new DiagnosticGroupWarningsGuard(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n-\n     this.warningsGuard = composedGuards;\n+\n+    if (options.checkGlobalThisLevel.isOn()) {\n+      options.setWarningLevel(DiagnosticGroups.CHECK_GLOBAL_THIS, options.checkGlobalThisLevel);\n+    }\n+    if (options.checkGlobalThisLevel != CheckLevel.OFF) {\n+      options.diagnosticGroups().setEnabled(DiagnosticGroups.CHECK_GLOBAL_THIS, true);\n+    }\n+\n+    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT) {\n+      options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.ERROR);\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}