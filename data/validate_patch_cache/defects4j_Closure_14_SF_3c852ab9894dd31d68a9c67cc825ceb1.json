{
    "patch": "  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the\n        // next case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n            return null;\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            Node catchEndNode = computeFallThrough(node.getNext());\n            if (cfa != null) {\n              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                cfa.createEdge(finallyNode, Branch.UNCOND, catchEndNode);\n              }\n            }\n            return catchEndNode;\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              if (NodeUtil.isLoopStructure(node)) {\n                Node continueTarget = null;\n                Node grandparent = parent.getParent();\n                while (grandparent != null && !grandparent.isLoop()) {\n                  grandparent = grandparent.getParent();\n                }\n                if (grandparent != null\n                    && grandparent.getJSDocInfo() != null\n                    && grandparent.getJSDocInfo().isNoSideEffects()) {\n                  continueTarget = grandparent;\n                }\n                Node target = continueTarget != null ? continueTarget : computeFollowNode(fromNode, grandparent, cfa);\n                cfa.createEdge(finallyNode, Branch.UNCOND, target);\n              } else {\n                cfa.createEdge(finallyNode, Branch.UNCOND, parent.getNext());\n              }\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    // If there are no more siblings, control is transferred up the AST.\n    // If NodeUtil.mayHaveSideEffects returns false, keep looking for the next\n    // sibling while ignoring the possible Exception or Return\n    while (nextSibling != null\n        && !NodeUtil.mayHaveSideEffects(nextSibling)\n        && (nextSibling.getType() == Token.EXPR_RESULT\n            || nextSibling.getType() == Token.RETURN)) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      if (NodeUtil.isLoopStructure(node)) {\n        if (cfa != null) {\n          for (Node continueTarget : ControlFlowAnalysis.findContinueTargets(\n              fromNode, parent, node, cfa)) {\n            cfa.createEdge(fromNode, Branch.UNCOND, continueTarget);\n          }\n        }\n        return node.isSwitch() ? node : computeFallThrough(nextSibling);\n      } else {\n        return computeFallThrough(nextSibling);\n      }\n\n    } else {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..15e7ea60 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -722,8 +722,8 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         return computeFollowNode(fromNode, parent, cfa);\n       case Token.CASE:\n       case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n+        // After the body of a CASE, the control goes to the body of the\n+        // next case, without having to go to the case condition.\n         if (parent.getNext() != null) {\n           if (parent.getNext().isCase()) {\n             return parent.getNext().getFirstChild().getNext();\n@@ -731,11 +731,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n             return parent.getNext().getFirstChild();\n           } else {\n             Preconditions.checkState(false, \"Not reachable\");\n+            return null;\n           }\n         } else {\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n       case Token.FOR:\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n@@ -756,7 +756,13 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         // CATCH block.\n         } else if (NodeUtil.getCatchBlock(parent) == node){\n           if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n+            Node catchEndNode = computeFallThrough(node.getNext());\n+            if (cfa != null) {\n+              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                cfa.createEdge(finallyNode, Branch.UNCOND, catchEndNode);\n+              }\n+            }\n+            return catchEndNode;\n           } else {\n             return computeFollowNode(fromNode, parent, cfa);\n           }\n@@ -764,7 +770,22 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (NodeUtil.isLoopStructure(node)) {\n+                Node continueTarget = null;\n+                Node grandparent = parent.getParent();\n+                while (grandparent != null && !grandparent.isLoop()) {\n+                  grandparent = grandparent.getParent();\n+                }\n+                if (grandparent != null\n+                    && grandparent.getJSDocInfo() != null\n+                    && grandparent.getJSDocInfo().isNoSideEffects()) {\n+                  continueTarget = grandparent;\n+                }\n+                Node target = continueTarget != null ? continueTarget : computeFollowNode(fromNode, grandparent, cfa);\n+                cfa.createEdge(finallyNode, Branch.UNCOND, target);\n+              } else {\n+                cfa.createEdge(finallyNode, Branch.UNCOND, parent.getNext());\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);\n@@ -780,10 +801,30 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n       nextSibling = nextSibling.getNext();\n     }\n \n+    // If there are no more siblings, control is transferred up the AST.\n+    // If NodeUtil.mayHaveSideEffects returns false, keep looking for the next\n+    // sibling while ignoring the possible Exception or Return\n+    while (nextSibling != null\n+        && !NodeUtil.mayHaveSideEffects(nextSibling)\n+        && (nextSibling.getType() == Token.EXPR_RESULT\n+            || nextSibling.getType() == Token.RETURN)) {\n+      nextSibling = nextSibling.getNext();\n+    }\n+\n     if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+      if (NodeUtil.isLoopStructure(node)) {\n+        if (cfa != null) {\n+          for (Node continueTarget : ControlFlowAnalysis.findContinueTargets(\n+              fromNode, parent, node, cfa)) {\n+            cfa.createEdge(fromNode, Branch.UNCOND, continueTarget);\n+          }\n+        }\n+        return node.isSwitch() ? node : computeFallThrough(nextSibling);\n+      } else {\n+        return computeFallThrough(nextSibling);\n+      }\n+\n     } else {\n-      // If there are no more siblings, control is transferred up the AST.\n       return computeFollowNode(fromNode, parent, cfa);\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}