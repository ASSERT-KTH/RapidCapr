{
    "patch": "  private boolean isWrappedFunction(Node n) {\n      Node parent = n.getParent();\n      return parent.getType() == Token.EXPR_RESULT &&\n             parent.getParent().getType() == Token.FUNCTION;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..b626cbf4 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,13 +705,10 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+  private boolean isWrappedFunction(Node n) {\n+      Node parent = n.getParent();\n+      return parent.getType() == Token.EXPR_RESULT &&\n+             parent.getParent().getType() == Token.FUNCTION;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}