{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Node grandparent = parent.getParent();\n        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n          Node prototypeNode = grandparent.getFirstChild();\n          if (prototypeNode != null &&\n              prototypeNode.getType() == Token.GETPROP &&\n              \"prototype\".equals(prototypeNode.getLastChild().getString())) {\n            return false;\n          }\n        }\n      }\n\n      // Don't traverse functions that have a dangerous use of 'this'.\n      if (NodeUtil.mayHaveSideEffects(n)) {\n        ControlFlowGraph<Node> cfg = traverse.getControlFlowGraph();\n        boolean hasExceptionHandlers = cfg != null && hasExceptionHandler(n);\n        boolean usesGlobalThis = hasGlobalThisReference(cfg, n);\n        if (!hasExceptionHandlers && usesGlobalThis) {\n          // The function has a dangerous use of 'this'\n          return false;\n        }\n      }\n    } else if (NodeUtil.mayHaveSideEffects(n)) {\n      // Don't traverse other nodes that have side effects and are not functions.\n      // These nodes might contain 'this' usages, which we don't want to traverse.\n      return false;\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n  \nprivate boolean hasGlobalThisReference(ControlFlowGraph<Node> cfg, Node functionNode) {\n    checkNotNull(cfg);\n    checkNotNull(functionNode);\n    // Traverse the control flow graph of the function to look for uses of 'this'\n    // outside of a safe context.\n    ControlFlowGraphTraversal<Node, Branch> traversal =\n        new ControlFlowGraphTraversal<Node, Branch>(cfg, functionNode);\n    NodeTraversal.Callback globalThisReferenceFinder =\n        createGlobalThisReferenceFinder(functionNode.getSourceFileName());\n    while (traversal.hasNext()) {\n      NodeTraversal.traverse(compiler, traversal.next(), globalThisReferenceFinder);\n    }\n    return ((GlobalThisReferenceFinder) globalThisReferenceFinder).hasGlobalThisReference();\n  }\n\n  private static NodeTraversal.Callback createGlobalThisReferenceFinder(String sourceFileName) {\n    return new GlobalThisReferenceFinder(sourceFileName);\n  }\n\n  private static class GlobalThisReferenceFinder extends AbstractPostOrderCallback {\n    private final String sourceFileName;\n    private boolean hasGlobalThisReference;\n\n    GlobalThisReferenceFinder(String sourceFileName) {\n      this.sourceFileName = sourceFileName;\n      this.hasGlobalThisReference = false;\n    }\n\n    boolean hasGlobalThisReference() {\n      return hasGlobalThisReference;\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      switch (n.getType()) {\n        case Token.THIS:\n          if (!NodeUtil.isVarOrSimpleAssignLhs(n)) {\n            hasGlobalThisReference = true;\n          }\n          break;\n        case Token.NAME:\n          if (\"window\".equals(n.getString()) && parent != null &&\n              parent.getType() != Token.GETPROP && parent.getType() != Token.VAR) {\n            hasGlobalThisReference = true;\n          }\n          break;\n        case Token.FUNCTION:\n          // If the function is defined in the global scope, then it cannot have a dangerous reference\n          // to the global this object.\n          if (NodeUtil.getEnclosingScript(n) != null) {\n            break;\n          }\n          // fallthrough\n        default:\n          if (NodeUtil.isGet(n)) {\n            if (NodeUtil.getBestJSDocInfo(n) != null && NodeUtil.getBestJSDocInfo(n).hasThisType()) {\n              // Ignore any references to 'this' that have a @this annotation associated with them.\n              break;\n            }\n            Node rvalue = n.getNext();\n            if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n              // Don't check function expressions for global this references.\n              break;\n            }\n            Node objNode = n.getFirstChild();\n            if (objNode.getType() == Token.NAME && \"window\".equals(objNode.getString())) {\n              hasGlobalThisReference = true;\n            }\n          }\n          break;\n      }\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Scope scope) {\n      if (t.getScope().isModuleScope()) {\n        // Do not traverse scopes that are within an ES module, since the\n        // global object is undefined there.\n        return;\n      }\n      Var var = scope.getVar(\"this\");\n      if (var != null && !NodeUtil.mayHaveSideEffects(var.getNameNode())) {\n        hasGlobalThisReference = true;\n        return;\n      }\n      for (Var v : scope.getArgumentsList()) {\n        if (\"this\".equals(v.getName()) && !NodeUtil.mayHaveSideEffects(v.getNameNode())) {\n          hasGlobalThisReference = true;\n          return;\n        }\n      }\n    }\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    checkNotNull(cfgNode);\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..7f76ab5e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,16 +79,14 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n+      // Don't traverse functions that are constructors or have the @override annotation.\n       JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n       }\n@@ -112,6 +110,32 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Node grandparent = parent.getParent();\n+        if (grandparent != null && grandparent.getType() == Token.ASSIGN) {\n+          Node prototypeNode = grandparent.getFirstChild();\n+          if (prototypeNode != null &&\n+              prototypeNode.getType() == Token.GETPROP &&\n+              \"prototype\".equals(prototypeNode.getLastChild().getString())) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      // Don't traverse functions that have a dangerous use of 'this'.\n+      if (NodeUtil.mayHaveSideEffects(n)) {\n+        ControlFlowGraph<Node> cfg = traverse.getControlFlowGraph();\n+        boolean hasExceptionHandlers = cfg != null && hasExceptionHandler(n);\n+        boolean usesGlobalThis = hasGlobalThisReference(cfg, n);\n+        if (!hasExceptionHandlers && usesGlobalThis) {\n+          // The function has a dangerous use of 'this'\n+          return false;\n+        }\n+      }\n+    } else if (NodeUtil.mayHaveSideEffects(n)) {\n+      // Don't traverse other nodes that have side effects and are not functions.\n+      // These nodes might contain 'this' usages, which we don't want to traverse.\n+      return false;\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {\n@@ -144,6 +168,111 @@ final class CheckGlobalThis implements Callback {\n \n     return true;\n   }\n+  \n+private boolean hasGlobalThisReference(ControlFlowGraph<Node> cfg, Node functionNode) {\n+    checkNotNull(cfg);\n+    checkNotNull(functionNode);\n+    // Traverse the control flow graph of the function to look for uses of 'this'\n+    // outside of a safe context.\n+    ControlFlowGraphTraversal<Node, Branch> traversal =\n+        new ControlFlowGraphTraversal<Node, Branch>(cfg, functionNode);\n+    NodeTraversal.Callback globalThisReferenceFinder =\n+        createGlobalThisReferenceFinder(functionNode.getSourceFileName());\n+    while (traversal.hasNext()) {\n+      NodeTraversal.traverse(compiler, traversal.next(), globalThisReferenceFinder);\n+    }\n+    return ((GlobalThisReferenceFinder) globalThisReferenceFinder).hasGlobalThisReference();\n+  }\n+\n+  private static NodeTraversal.Callback createGlobalThisReferenceFinder(String sourceFileName) {\n+    return new GlobalThisReferenceFinder(sourceFileName);\n+  }\n+\n+  private static class GlobalThisReferenceFinder extends AbstractPostOrderCallback {\n+    private final String sourceFileName;\n+    private boolean hasGlobalThisReference;\n+\n+    GlobalThisReferenceFinder(String sourceFileName) {\n+      this.sourceFileName = sourceFileName;\n+      this.hasGlobalThisReference = false;\n+    }\n+\n+    boolean hasGlobalThisReference() {\n+      return hasGlobalThisReference;\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      switch (n.getType()) {\n+        case Token.THIS:\n+          if (!NodeUtil.isVarOrSimpleAssignLhs(n)) {\n+            hasGlobalThisReference = true;\n+          }\n+          break;\n+        case Token.NAME:\n+          if (\"window\".equals(n.getString()) && parent != null &&\n+              parent.getType() != Token.GETPROP && parent.getType() != Token.VAR) {\n+            hasGlobalThisReference = true;\n+          }\n+          break;\n+        case Token.FUNCTION:\n+          // If the function is defined in the global scope, then it cannot have a dangerous reference\n+          // to the global this object.\n+          if (NodeUtil.getEnclosingScript(n) != null) {\n+            break;\n+          }\n+          // fallthrough\n+        default:\n+          if (NodeUtil.isGet(n)) {\n+            if (NodeUtil.getBestJSDocInfo(n) != null && NodeUtil.getBestJSDocInfo(n).hasThisType()) {\n+              // Ignore any references to 'this' that have a @this annotation associated with them.\n+              break;\n+            }\n+            Node rvalue = n.getNext();\n+            if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n+              // Don't check function expressions for global this references.\n+              break;\n+            }\n+            Node objNode = n.getFirstChild();\n+            if (objNode.getType() == Token.NAME && \"window\".equals(objNode.getString())) {\n+              hasGlobalThisReference = true;\n+            }\n+          }\n+          break;\n+      }\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Scope scope) {\n+      if (t.getScope().isModuleScope()) {\n+        // Do not traverse scopes that are within an ES module, since the\n+        // global object is undefined there.\n+        return;\n+      }\n+      Var var = scope.getVar(\"this\");\n+      if (var != null && !NodeUtil.mayHaveSideEffects(var.getNameNode())) {\n+        hasGlobalThisReference = true;\n+        return;\n+      }\n+      for (Var v : scope.getArgumentsList()) {\n+        if (\"this\".equals(v.getName()) && !NodeUtil.mayHaveSideEffects(v.getNameNode())) {\n+          hasGlobalThisReference = true;\n+          return;\n+        }\n+      }\n+    }\n+  }\n+\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    checkNotNull(cfgNode);\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}