{
    "patch": "        if (firstTime) {\n          final double[] scale = new double[mainSetDimension];\n          if (vecAbsoluteTolerance == null) {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n              }\n          } else {\n              for (int i = 0; i < scale.length; ++i) {\n                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n              }\n          }\n\n          // calculate step size for the first step\n          double suggestedStep = initializeStep(forward, getOrder(), scale,\n                                stepStart, y, null, yTmp, yDotK[0]);\n          hNew = FastMath.min(suggestedStep, filterStep(suggestedStep, forward, true));\n\n          // make sure that the suggested step does not exceed the end time\n          if (stepStart + hNew > end) {\n              hNew = end -stepStart;  \n          }\n\n          firstTime = false;\n        }\n\n        stepSize = hNew;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..b2d35e9df 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -246,6 +246,32 @@ public abstract class EmbeddedRungeKuttaIntegrator\n           firstTime = false;\n         }\n \n+        stepSize = hNew;\n+        if (firstTime) {\n+          final double[] scale = new double[mainSetDimension];\n+          if (vecAbsoluteTolerance == null) {\n+              for (int i = 0; i < scale.length; ++i) {\n+                scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);\n+              }\n+          } else {\n+              for (int i = 0; i < scale.length; ++i) {\n+                scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n+              }\n+          }\n+\n+          // calculate step size for the first step\n+          double suggestedStep = initializeStep(forward, getOrder(), scale,\n+                                stepStart, y, null, yTmp, yDotK[0]);\n+          hNew = FastMath.min(suggestedStep, filterStep(suggestedStep, forward, true));\n+\n+          // make sure that the suggested step does not exceed the end time\n+          if (stepStart + hNew > end) {\n+              hNew = end -stepStart;  \n+          }\n+\n+          firstTime = false;\n+        }\n+\n         stepSize = hNew;\n \n         // next stages",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}