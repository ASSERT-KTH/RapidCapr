{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int initialOffset = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - initialOffset;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (initialOffset != offsetAdjusted) {\n            // we need to ensure that time is always after the DST gap\n            // this happens naturally for positive offsets, but not for negative\n            long nextTransition = nextTransition(instantAdjusted);\n            long nextAdjustedTransition = nextTransition(instantLocal - initialOffset);\n            if (nextTransition != nextAdjustedTransition) {\n                return initialOffset;\n            } else {\n                return offsetAdjusted;\n            }\n        } else {\n            long prevTransition = previousTransition(instantAdjusted);\n            if (prevTransition < instantAdjusted) {\n                int prevOffset = getOffset(prevTransition);\n                int diff = initialOffset - offsetAdjusted;\n                if (diff > 0 && instantAdjusted - prevTransition <= diff) {\n                    return prevOffset;\n                }\n            }\n            return offsetAdjusted;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..2c0e1f65 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -879,35 +879,32 @@ public abstract class DateTimeZone implements Serializable {\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n+        final int initialOffset = getOffset(instantLocal);\n         // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n+        final long instantAdjusted = instantLocal - initialOffset;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n         // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n+        if (initialOffset != offsetAdjusted) {\n             // we need to ensure that time is always after the DST gap\n             // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+            long nextTransition = nextTransition(instantAdjusted);\n+            long nextAdjustedTransition = nextTransition(instantLocal - initialOffset);\n+            if (nextTransition != nextAdjustedTransition) {\n+                return initialOffset;\n+            } else {\n+                return offsetAdjusted;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+        } else {\n+            long prevTransition = previousTransition(instantAdjusted);\n+            if (prevTransition < instantAdjusted) {\n+                int prevOffset = getOffset(prevTransition);\n+                int diff = initialOffset - offsetAdjusted;\n+                if (diff > 0 && instantAdjusted - prevTransition <= diff) {\n+                    return prevOffset;\n                 }\n             }\n+            return offsetAdjusted;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}