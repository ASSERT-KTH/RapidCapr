{
    "patch": "    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException {\n        \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid initial value: {0} for bracketing [{1},{2}]\",\n                        initial, lowerBound, upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n        final double twoPoint = upperBound - lowerBound;\n    \n        do {\n            double delta = FastMath.max(0.1 * (b - a), twoPoint * DEFAULT_ABSOLUTE_ACCURACY);\n            double lbound = FastMath.max(a - delta, lowerBound);\n            double ubound = FastMath.min(b + delta, upperBound);\n            if (lbound == a && ubound == b) {\n                delta = 0.1 * (b - a);\n                lbound = FastMath.max(a - delta, lowerBound);\n                ubound = FastMath.min(b + delta, upperBound);\n            }\n            fa = function.value(lbound);\n            fb = function.value(ubound);\n            numIterations++ ;\n            if (fa * fb > 0.0) {\n                if (FastMath.abs(fa) < FastMath.abs(fb)) {\n                    a = lbound;\n                } else {\n                    b = ubound;\n                }\n            }\n        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n                ((a > lowerBound) || (b < upperBound)));\n   \n        if (fa * fb >= 0.0 ) {\n            throw new ConvergenceException(\n                      \"number of iterations={0}, maximum iterations={1}, \" +\n                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n                      numIterations, maximumIterations, initial,\n                      lowerBound, upperBound, a, b, fa, fb);\n        }\n        \n        return new double[]{a, b};\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..b627278e5 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -174,25 +174,38 @@ public class UnivariateRealSolverUtils {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"bad value for maximum iterations number: {0}\", maximumIterations);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        if (initial < lowerBound || initial > upperBound) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+                  \"invalid initial value: {0} for bracketing [{1},{2}]\",\n+                        initial, lowerBound, upperBound);\n         }\n         double a = initial;\n         double b = initial;\n         double fa;\n         double fb;\n         int numIterations = 0 ;\n+        final double twoPoint = upperBound - lowerBound;\n     \n         do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n+            double delta = FastMath.max(0.1 * (b - a), twoPoint * DEFAULT_ABSOLUTE_ACCURACY);\n+            double lbound = FastMath.max(a - delta, lowerBound);\n+            double ubound = FastMath.min(b + delta, upperBound);\n+            if (lbound == a && ubound == b) {\n+                delta = 0.1 * (b - a);\n+                lbound = FastMath.max(a - delta, lowerBound);\n+                ubound = FastMath.min(b + delta, upperBound);\n+            }\n+            fa = function.value(lbound);\n+            fb = function.value(ubound);\n             numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n+            if (fa * fb > 0.0) {\n+                if (FastMath.abs(fa) < FastMath.abs(fb)) {\n+                    a = lbound;\n+                } else {\n+                    b = ubound;\n+                }\n+            }\n+        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n                 ((a > lowerBound) || (b < upperBound)));\n    \n         if (fa * fb >= 0.0 ) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}