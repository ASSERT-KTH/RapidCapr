{
    "patch": "              case Token.VAR:\n                if (isGlobalScope(scope)) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else {\n                  handleSetFromLocal(module, scope, n, parent, name);\n                }\n                break;\n              case Token.LET:\n                if (isGlobalNameReference(name, scope)) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else {\n                  handleSetFromLocal(module, scope, n, parent, name);\n                }\n                break;\n              case Token.CONST:\n                if (isGlobalNameReference(name, scope)) {\n                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n                } else {\n                  handleSetFromLocal(module, scope, n, parent, name);\n                }\n                break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..8fa2e63a 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,27 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.VAR:\n+                if (isGlobalScope(scope)) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else {\n+                  handleSetFromLocal(module, scope, n, parent, name);\n+                }\n+                break;\n+              case Token.LET:\n+                if (isGlobalNameReference(name, scope)) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else {\n+                  handleSetFromLocal(module, scope, n, parent, name);\n+                }\n+                break;\n+              case Token.CONST:\n+                if (isGlobalNameReference(name, scope)) {\n+                  handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+                } else {\n+                  handleSetFromLocal(module, scope, n, parent, name);\n+                }\n+                break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}