{
    "patch": "private static String extractClassNameIfGoog(Node node, Node parent,\n    String functionName){\n  String className = null;\n  if (NodeUtil.isExprCall(parent)) {\n    Node callee = node.getFirstChild();\n    if (callee != null && callee.getType() == Token.GETPROP) {\n      String qualifiedName = callee.getQualifiedName();\n      if (functionName.equals(qualifiedName)) {\n        Node target = callee.getNext();\n        if (target != null && target.getType() == Token.STRING) {\n          className = target.getString();\n          if (target.getNext() != null\n              && target.getNext().getType() == Token.STRING\n              && !\"prototype\".equals(target.getNext().getString())) {\n            className = null;\n          }\n        }\n      }\n    }\n  }\n  return className;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..a682ecd9 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -184,24 +184,28 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n   public String extractClassNameIfRequire(Node node, Node parent){\n     return extractClassNameIfGoog(node, parent, \"goog.require\");\n   }\n-\n-  private static String extractClassNameIfGoog(Node node, Node parent,\n-      String functionName){\n-    String className = null;\n-    if (NodeUtil.isExprCall(parent)) {\n-      Node callee = node.getFirstChild();\n-      if (callee != null && callee.getType() == Token.GETPROP) {\n-        String qualifiedName = callee.getQualifiedName();\n-        if (functionName.equals(qualifiedName)) {\n-          Node target = callee.getNext();\n-          if (target != null) {\n-            className = target.getString();\n+private static String extractClassNameIfGoog(Node node, Node parent,\n+    String functionName){\n+  String className = null;\n+  if (NodeUtil.isExprCall(parent)) {\n+    Node callee = node.getFirstChild();\n+    if (callee != null && callee.getType() == Token.GETPROP) {\n+      String qualifiedName = callee.getQualifiedName();\n+      if (functionName.equals(qualifiedName)) {\n+        Node target = callee.getNext();\n+        if (target != null && target.getType() == Token.STRING) {\n+          className = target.getString();\n+          if (target.getNext() != null\n+              && target.getNext().getType() == Token.STRING\n+              && !\"prototype\".equals(target.getNext().getString())) {\n+            className = null;\n           }\n         }\n       }\n     }\n-    return className;\n   }\n+  return className;\n+}\n \n   /**\n    * Use closure's implementation.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}