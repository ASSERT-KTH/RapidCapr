{
    "patch": "You are correct. Here's the corrected code without the diamond operator:\n``` java\n    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n        List<Object> pairs = new ArrayList<Object>(elementPairs);\n        boolean inSeparator = false;\n        for (int i = 0; i < pairs.size(); i++) {\n            Object obj = pairs.get(i);\n            if (obj instanceof Separator) {\n                if (inSeparator) {\n                    throw new IllegalArgumentException(\"Cannot have adjacent separators\");\n                }\n                inSeparator = true;\n            } else {\n                inSeparator = false;\n            }\n            if (obj instanceof FieldFormatter) {\n                FieldFormatter field = (FieldFormatter) obj;\n                if (field.getPrinter() == null || field.getParser() == null) {\n                    pairs.set(i, \"\");\n                    if (i > 0) {\n                        Object prevObj;\n                        do {\n                            prevObj = pairs.get(--i);\n                        } while (\"\".equals(prevObj));\n                        if (prevObj instanceof Separator) {\n                            pairs.set(i, \"\");\n                        }\n                    }\n                }\n            }\n        }\n        pairs.removeAll(Collections.singleton(\"\"));\n        int size = pairs.size();\n        if (size == 0) {\n            if (notPrinter) {\n                return new PeriodFormatter(null, new MultiParser(null, new PeriodParser[0]));\n            } else if (notParser) {\n                return new PeriodFormatter(new Composite(null, new PeriodPrinter[0]), null);\n            } else {\n                return createFormatter(null, null);\n            }\n        } else {\n            Object[] comp = createComposite(pairs);\n            if (notPrinter) {\n                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n            } else if (notParser) {\n                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n            } else {\n                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n            }\n        }\n    }\n```",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..fe761f48 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,62 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n+You are correct. Here's the corrected code without the diamond operator:\n+``` java\n     private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+        List<Object> pairs = new ArrayList<Object>(elementPairs);\n+        boolean inSeparator = false;\n+        for (int i = 0; i < pairs.size(); i++) {\n+            Object obj = pairs.get(i);\n+            if (obj instanceof Separator) {\n+                if (inSeparator) {\n+                    throw new IllegalArgumentException(\"Cannot have adjacent separators\");\n+                }\n+                inSeparator = true;\n+            } else {\n+                inSeparator = false;\n+            }\n+            if (obj instanceof FieldFormatter) {\n+                FieldFormatter field = (FieldFormatter) obj;\n+                if (field.getPrinter() == null || field.getParser() == null) {\n+                    pairs.set(i, \"\");\n+                    if (i > 0) {\n+                        Object prevObj;\n+                        do {\n+                            prevObj = pairs.get(--i);\n+                        } while (\"\".equals(prevObj));\n+                        if (prevObj instanceof Separator) {\n+                            pairs.set(i, \"\");\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        pairs.removeAll(Collections.singleton(\"\"));\n+        int size = pairs.size();\n+        if (size == 0) {\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, new MultiParser(null, new PeriodParser[0]));\n+            } else if (notParser) {\n+                return new PeriodFormatter(new Composite(null, new PeriodPrinter[0]), null);\n+            } else {\n+                return createFormatter(null, null);\n+            }\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            Object[] comp = createComposite(pairs);\n+            if (notPrinter) {\n+                return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+            } else if (notParser) {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+            } else {\n+                return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            }\n         }\n     }\n+```\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}