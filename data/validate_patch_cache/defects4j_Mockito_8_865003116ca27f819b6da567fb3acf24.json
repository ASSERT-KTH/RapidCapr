{
    "patch": "        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Map<TypeVariable<?>, Type> typeMappings = new HashMap<>();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable<?> typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n            \n            if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n                while(typeMappings.containsKey(typeVariable)) {\n                    typeVariable = (TypeVariable) typeMappings.get(typeVariable);\n                }\n                typeMappings.put(typeParameter, typeVariable);\n            } else {\n                typeMappings.put(typeParameter, actualTypeArgument);\n            }\n        }\n        contextualActualTypeParameters.putAll(typeMappings);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..954241ab9 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,28 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        Map<TypeVariable<?>, Type> typeMappings = new HashMap<>();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            TypeVariable<?> typeParameter = typeParameters[i];\n+            Type actualTypeArgument = actualTypeArguments[i];\n+            \n+            if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n+                while(typeMappings.containsKey(typeVariable)) {\n+                    typeVariable = (TypeVariable) typeMappings.get(typeVariable);\n+                }\n+                typeMappings.put(typeParameter, typeVariable);\n+            } else {\n+                typeMappings.put(typeParameter, actualTypeArgument);\n+            }\n+        }\n+        contextualActualTypeParameters.putAll(typeMappings);\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}