{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n\n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    if (loopType == null) {\n                        newTypes[i] = fieldType;\n                        newValues[i] = value;\n                        return withLater(null, i, newTypes, newValues);\n                    }\n                    DurationField loopUnitField = loopType.getDurationType()\n                        .getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType\n                                .getRangeDurationType()\n                                .getField(iChronology);\n                            DurationField loopRangeField = loopType\n                                .getRangeDurationType()\n                                .getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n            return withLater(null, i, newTypes, newValues);\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = new int[iTypes.length];\n        System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newTypes, newValues);\n    }\n\n    private Partial withLater(\n        DateTimeFieldType[] types, int setIndex, DateTimeFieldType[] newTypes, int[] newValues) {\n        if (types == null || newTypes[setIndex] != types[setIndex]) {\n            // either the array is empty or the field types differ\n            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n        DateTimeFieldType[] combinedTypes = new DateTimeFieldType[iTypes.length];\n        System.arraycopy(iTypes, 0, combinedTypes, 0, iTypes.length);\n        combinedTypes[setIndex] = newTypes[setIndex];\n        iChronology.validate(this, newValues);\n        return new Partial(iChronology, combinedTypes, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..99795e4b 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,7 +423,7 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n+public Partial with(DateTimeFieldType fieldType, int value) {\n         if (fieldType == null) {\n             throw new IllegalArgumentException(\"The field type must not be null\");\n         }\n@@ -431,21 +431,31 @@ public final class Partial\n         if (index == -1) {\n             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n             int[] newValues = new int[newTypes.length];\n-            \n+\n             // find correct insertion point to keep largest-smallest order\n             int i = 0;\n             DurationField unitField = fieldType.getDurationType().getField(iChronology);\n             if (unitField.isSupported()) {\n                 for (; i < iTypes.length; i++) {\n                     DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n+                    if (loopType == null) {\n+                        newTypes[i] = fieldType;\n+                        newValues[i] = value;\n+                        return withLater(null, i, newTypes, newValues);\n+                    }\n+                    DurationField loopUnitField = loopType.getDurationType()\n+                        .getField(iChronology);\n                     if (loopUnitField.isSupported()) {\n                         int compare = unitField.compareTo(loopUnitField);\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n+                            DurationField rangeField = fieldType\n+                                .getRangeDurationType()\n+                                .getField(iChronology);\n+                            DurationField loopRangeField = loopType\n+                                .getRangeDurationType()\n+                                .getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n                                 break;\n                             }\n@@ -459,18 +469,30 @@ public final class Partial\n             newValues[i] = value;\n             System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n+            return withLater(null, i, newTypes, newValues);\n         }\n         if (value == getValue(index)) {\n             return this;\n         }\n-        int[] newValues = getValues();\n+        int[] newValues = new int[iTypes.length];\n+        System.arraycopy(iValues, 0, newValues, 0, iValues.length);\n         newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+        return new Partial(this, newTypes, newValues);\n+    }\n+\n+    private Partial withLater(\n+        DateTimeFieldType[] types, int setIndex, DateTimeFieldType[] newTypes, int[] newValues) {\n+        if (types == null || newTypes[setIndex] != types[setIndex]) {\n+            // either the array is empty or the field types differ\n+            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            iChronology.validate(newPartial, newValues);\n+            return newPartial;\n+        }\n+        DateTimeFieldType[] combinedTypes = new DateTimeFieldType[iTypes.length];\n+        System.arraycopy(iTypes, 0, combinedTypes, 0, iTypes.length);\n+        combinedTypes[setIndex] = newTypes[setIndex];\n+        iChronology.validate(this, newValues);\n+        return new Partial(iChronology, combinedTypes, newValues);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}