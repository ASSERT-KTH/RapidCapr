{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect the list of arguments to be removed.\n    List<Node> argsToRemove = new ArrayList<>();\n    Node arg = argList.getFirstChild();\n    while (arg != null) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        // If we can't modify a call site, then we cannot remove params after\n        // used params.\n        if (!modifyCallers && referenced.isEmpty()) {\n          argsToRemove.add(arg);\n        } else {\n          break;\n        }\n      }\n      referenced.remove(var);\n      arg = arg.getNext();\n    }\n\n    // Remove the arguments.\n    for (Node argToRemove : argsToRemove) {\n      argList.removeChild(argToRemove);\n      compiler.reportCodeChange();\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n\n    // If there are no referenced arguments, then either remove all args, or\n    // leave the first arg (which is usually 'this' or 'context') in place.\n    if (argList.hasChildren() && referenced.isEmpty()) {\n      if (argList.getFirstChild().getNext() != null) {\n        argList.removeChildren();\n        compiler.reportCodeChange();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..374d26ba 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,54 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect the list of arguments to be removed.\n+    List<Node> argsToRemove = new ArrayList<>();\n+    Node arg = argList.getFirstChild();\n+    while (arg != null) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        // If we can't modify a call site, then we cannot remove params after\n+        // used params.\n+        if (!modifyCallers && referenced.isEmpty()) {\n+          argsToRemove.add(arg);\n+        } else {\n+          break;\n+        }\n+      }\n+      referenced.remove(var);\n+      arg = arg.getNext();\n+    }\n+\n+    // Remove the arguments.\n+    for (Node argToRemove : argsToRemove) {\n+      argList.removeChild(argToRemove);\n+      compiler.reportCodeChange();\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    // If there are no referenced arguments, then either remove all args, or\n+    // leave the first arg (which is usually 'this' or 'context') in place.\n+    if (argList.hasChildren() && referenced.isEmpty()) {\n+      if (argList.getFirstChild().getNext() != null) {\n+        argList.removeChildren();\n+        compiler.reportCodeChange();\n+      }\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}