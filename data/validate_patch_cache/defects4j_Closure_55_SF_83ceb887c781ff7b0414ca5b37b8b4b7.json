{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (!n.isFunction() || n.isArrowFunction() || n.getParent() != null && n.getParent().isClass()) {\n        return false;\n    }\n    Node child = n.getFirstChild();\n    return child != null && child.isName();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..64b96be7 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,13 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (!n.isFunction() || n.isArrowFunction() || n.getParent() != null && n.getParent().isClass()) {\n+        return false;\n+    }\n+    Node child = n.getFirstChild();\n+    return child != null && child.isName();\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}