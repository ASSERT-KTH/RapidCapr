{
    "patch": "    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n      if (n == scope.getRootNode()) return;\n\n      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      attachLiteralTypes(n);\n      switch (n.getType()) {\n        case Token.FUNCTION:\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          defineDeclaredFunction(n, parent);\n          break;\n        case Token.CATCH:\n          defineCatch(n, parent);\n          break;\n        case Token.VAR:\n          defineVar(n, parent);\n          break;\n        case Token.CALL:\n          // handle functions used as an argument in a call expression\n          if (parent.getType() == Token.EXPR_RESULT) {\n            Node grandparent = parent.getParent();\n            if (grandparent.getType() == Token.VAR) {\n              defineVar(n, grandparent);\n            }\n          }\n          break;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..c2c2d326 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1443,7 +1443,7 @@ final class TypedScopeCreator implements ScopeCreator {\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (n == scope.getRootNode()) return;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      if (n.getType() == Token.LP && parent.getType() == Token.FUNCTION) {\n         handleFunctionInputs(parent);\n         return;\n       }\n@@ -1462,6 +1462,15 @@ final class TypedScopeCreator implements ScopeCreator {\n         case Token.VAR:\n           defineVar(n, parent);\n           break;\n+        case Token.CALL:\n+          // handle functions used as an argument in a call expression\n+          if (parent.getType() == Token.EXPR_RESULT) {\n+            Node grandparent = parent.getParent();\n+            if (grandparent.getType() == Token.VAR) {\n+              defineVar(n, grandparent);\n+            }\n+          }\n+          break;\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}