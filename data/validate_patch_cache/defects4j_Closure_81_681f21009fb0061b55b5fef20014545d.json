{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      boolean isUnnamed = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        name.setLineno(functionNode.getLineno());\n        isUnnamed = true;\n      }\n      Node node = newNode(Token.FUNCTION, transform(name));\n\n      Node lp = newNode(Token.LP);\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n\n      Node rp = newNode(Token.RP);\n      lp.addChildToBack(rp);\n\n      lp.setLineno(functionNode.getLineno());\n      lp.setCharno(position2charno(functionNode.getLp() +\n          functionNode.getAbsolutePosition()));\n      rp.setLineno(functionNode.getLineno());\n      rp.setCharno(position2charno(functionNode.getRp() +\n          functionNode.getAbsolutePosition()));\n\n      node.addChildToBack(lp);\n      node.addChildToBack(transform(functionNode.getBody()));\n\n      if (isUnnamed) {\n        node.setType(Token.FUNCTION_EXPRESSION);\n      }\n\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..900e7411 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,42 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      boolean isUnnamed = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        name.setLineno(functionNode.getLineno());\n+        isUnnamed = true;\n+      }\n+      Node node = newNode(Token.FUNCTION, transform(name));\n+\n+      Node lp = newNode(Token.LP);\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+\n+      Node rp = newNode(Token.RP);\n+      lp.addChildToBack(rp);\n+\n+      lp.setLineno(functionNode.getLineno());\n+      lp.setCharno(position2charno(functionNode.getLp() +\n+          functionNode.getAbsolutePosition()));\n+      rp.setLineno(functionNode.getLineno());\n+      rp.setCharno(position2charno(functionNode.getRp() +\n+          functionNode.getAbsolutePosition()));\n+\n+      node.addChildToBack(lp);\n+      node.addChildToBack(transform(functionNode.getBody()));\n+\n+      if (isUnnamed) {\n+        node.setType(Token.FUNCTION_EXPRESSION);\n+      }\n+\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}