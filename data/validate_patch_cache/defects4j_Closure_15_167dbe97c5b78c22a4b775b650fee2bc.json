{
    "patch": "public boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without an return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // passes one of the dependent variable to a non-side-effect free\n  // function.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isScript()) {\n    Scope scope = n.getScope();\n    // Process all vars of the current scope that are dependent variables.\n    for (Var var : scope.getVars()) {\n      if (dependentVars.contains(var.getName())) {\n        Node value = var.getInitialValue();\n        if (value != null && apply(value)) {\n          return true;\n        }\n      }\n    }\n  } else {\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..87e83693 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,45 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+public boolean apply(Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without an return statement)\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  // TODO(user): We only care about calls to functions that\n+  // passes one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  if (n.isScript()) {\n+    Scope scope = n.getScope();\n+    // Process all vars of the current scope that are dependent variables.\n+    for (Var var : scope.getVars()) {\n+      if (dependentVars.contains(var.getName())) {\n+        Node value = var.getInitialValue();\n+        if (value != null && apply(value)) {\n+          return true;\n+        }\n+      }\n+    }\n+  } else {\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+        return true;\n+      }\n+    }\n+  }\n+\n+  return false;\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}