{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.compilation_level != null ? flags.compilation_level : CompilationLevel.SIMPLE_OPTIMIZATIONS;\n    level.setOptionsForCompilationLevel(options);\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel;\n    if (flags.warning_level == null) {\n        wLevel = WarningLevel.DEFAULT;\n    } else {\n        wLevel = WarningLevel.valueOf(flags.warning_level);\n    }\n    wLevel.setOptionsForWarningLevel(options);\n\n    if (flags.formatting != null) {\n        for (FormattingOption formattingOption : flags.formatting) {\n            formattingOption.applyToOptions(options);\n        }\n    }\n\n    if (flags.process_closure_primitives != null && flags.process_closure_primitives) {\n        options.closurePass = true;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..3ea3b836 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,36 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+    CompilationLevel level = flags.compilation_level != null ? flags.compilation_level : CompilationLevel.SIMPLE_OPTIMIZATIONS;\n     level.setOptionsForCompilationLevel(options);\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n-    WarningLevel wLevel = flags.warning_level;\n+    WarningLevel wLevel;\n+    if (flags.warning_level == null) {\n+        wLevel = WarningLevel.DEFAULT;\n+    } else {\n+        wLevel = WarningLevel.valueOf(flags.warning_level);\n+    }\n     wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+\n+    if (flags.formatting != null) {\n+        for (FormattingOption formattingOption : flags.formatting) {\n+            formattingOption.applyToOptions(options);\n+        }\n     }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+\n+    if (flags.process_closure_primitives != null && flags.process_closure_primitives) {\n+        options.closurePass = true;\n     }\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: no suitable method found for valueOf(WarningLevel)",
    "test_result": "ERROR"
}