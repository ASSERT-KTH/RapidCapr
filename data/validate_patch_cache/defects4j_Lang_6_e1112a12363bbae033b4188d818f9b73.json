{
    "patch": "                int codePoint = Character.codePointAt(input, pos);\n                int charCount = Character.charCount(codePoint);\n                pos += charCount;\n                if (charCount > 1) {\n                    out.write(\"?\");\n                } else if (consumed == 1) {\n                    for (Map.Entry<CharSequence, CharSequence> mapping : lookupMap.entrySet()) {\n                        CharSequence key = mapping.getKey();\n                        CharSequence value = mapping.getValue();\n                        int atIndex = CharSequenceUtils.indexOf(input, key, pos - charCount, pos);\n                        if (atIndex >= 0) {\n                            out.write(input.subSequence(pos - charCount, atIndex));\n                            out.write(value.toString());\n                            pos = consumed += (atIndex - (pos - charCount)) + key.length();\n                            break;\n                        }\n                    }\n                }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..339e13ff 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,24 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                int codePoint = Character.codePointAt(input, pos);\n+                int charCount = Character.charCount(codePoint);\n+                pos += charCount;\n+                if (charCount > 1) {\n+                    out.write(\"?\");\n+                } else if (consumed == 1) {\n+                    for (Map.Entry<CharSequence, CharSequence> mapping : lookupMap.entrySet()) {\n+                        CharSequence key = mapping.getKey();\n+                        CharSequence value = mapping.getValue();\n+                        int atIndex = CharSequenceUtils.indexOf(input, key, pos - charCount, pos);\n+                        if (atIndex >= 0) {\n+                            out.write(input.subSequence(pos - charCount, atIndex));\n+                            out.write(value.toString());\n+                            pos = consumed += (atIndex - (pos - charCount)) + key.length();\n+                            break;\n+                        }\n+                    }\n+                }\n             }\n         }\n     }",
    "result_reason": "error: package Map does not exist",
    "test_result": "ERROR"
}