{
    "patch": "  private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasChildren() &&\n            maybeExpr.getFirstChild().getType() == Token.FALSE) {\n          // Special case for the bug mentioned in the comment\n          return false;\n        }\n\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild() &&\n            maybeExpr.getFirstChild().getType() != Token.FUNCTION &&\n            maybeExpr.getFirstChild().getType() != Token.OBJECTLIT) {\n          maybeExpr = maybeExpr.getFirstChild();\n        }\n\n        // We only have to worry about methods with an implicit 'this'\n        // param, or this doesn't happen.\n        return NodeUtil.isExpressionNode(maybeExpr) &&\n            !NodeUtil.isFunctionDeclaration(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..a4c7a859 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -520,17 +520,29 @@ public class PeepholeSubstituteAlternateSyntax\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        if (maybeExpr.getType() == Token.RETURN && maybeExpr.hasChildren() &&\n+            maybeExpr.getFirstChild().getType() == Token.FALSE) {\n+          // Special case for the bug mentioned in the comment\n+          return false;\n+        }\n+\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        if (maybeExpr.getType() == Token.EXPR_RESULT && maybeExpr.hasOneChild() &&\n+            maybeExpr.getFirstChild().getType() != Token.FUNCTION &&\n+            maybeExpr.getFirstChild().getType() != Token.OBJECTLIT) {\n+          maybeExpr = maybeExpr.getFirstChild();\n+        }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        // We only have to worry about methods with an implicit 'this'\n+        // param, or this doesn't happen.\n+        return NodeUtil.isExpressionNode(maybeExpr) &&\n+            !NodeUtil.isFunctionDeclaration(maybeExpr);\n       }\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<function(){[x||]y()}> but was:<function(){[if(!x)]y()}>",
    "test_result": "FAIL"
}