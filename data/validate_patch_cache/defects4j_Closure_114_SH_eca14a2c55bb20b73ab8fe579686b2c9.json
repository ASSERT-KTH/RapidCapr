{
    "patch": "        if (ns != null) {\n          if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n            // Patch for assignments that appear in the init,\n            // condition or iteration part of a FOR loop.  Without\n            // this change, all 3 of those parts try to claim the for\n            // loop as their dependency scope.  The last assignment in\n            // those three fields wins, which can result in incorrect\n            // reference edges between referenced and assigned variables.\n            //\n            // TODO(user) revisit the dependency scope calculation\n            // logic.\n            if (parent.getFirstChild().getNext() != n) {\n              recordDepScope(recordNode, ns);\n            } else {\n              recordDepScope(nameNode, ns);\n            }\n            // Fix for associating dependency scope correctly for the RHS of the\n            // assignment statement when it's a function call.\n            if (n.getLastChild().isFunction()) {\n              recordDepScope(recordNode, createNameInformation(t, n.getLastChild()));\n            }\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..19fd2a00 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,31 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        if (ns != null) {\n+          if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+            // Patch for assignments that appear in the init,\n+            // condition or iteration part of a FOR loop.  Without\n+            // this change, all 3 of those parts try to claim the for\n+            // loop as their dependency scope.  The last assignment in\n+            // those three fields wins, which can result in incorrect\n+            // reference edges between referenced and assigned variables.\n+            //\n+            // TODO(user) revisit the dependency scope calculation\n+            // logic.\n+            if (parent.getFirstChild().getNext() != n) {\n+              recordDepScope(recordNode, ns);\n+            } else {\n+              recordDepScope(nameNode, ns);\n+            }\n+            // Fix for associating dependency scope correctly for the RHS of the\n+            // assignment statement when it's a function call.\n+            if (n.getLastChild().isFunction()) {\n+              recordDepScope(recordNode, createNameInformation(t, n.getLastChild()));\n+            }\n+          } else {\n+            recordDepScope(recordNode, ns);\n+          }\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}