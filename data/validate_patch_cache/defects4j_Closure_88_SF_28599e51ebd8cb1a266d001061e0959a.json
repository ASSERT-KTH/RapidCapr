{
    "patch": "  enum VariableLiveness {\n    KILL,\n    READ,\n    MAYBE_LIVE\n  }\n\n  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      boolean isDeclaration = NodeUtil.isNameDeclaration(n);\n      Node parent = n.getParent();\n\n      // global name\n      if (parent.isScript()) {\n        // top level names are defines\n        if (isDeclaration) {\n          return VariableLiveness.KILL;\n        }\n\n        return VariableLiveness.READ;\n      }\n\n      // eval assuming that the name is not defined in the current scope.\n      Var var = getScope().getVar(variable);\n\n      // undefined name in the current scope\n      if (var == null) {\n        // Not defined in any parent scope means it is new\n        // definition of this variable in the current scope.\n        if (isDeclaration) {\n          return VariableLiveness.KILL;\n        }\n\n        return VariableLiveness.READ;\n      }\n\n      Node definingNode = var.getInitialValue();\n\n      // The variable is not defined in a function, that means it is either\n      // global or explicitly closed over in a local scope.\n      if (definingNode == null || definingNode.isScript()) {\n        // top level names are defines\n        if (isDeclaration || var.isGlobal()) {\n          return VariableLiveness.KILL;\n        }\n\n        // The variable might be closed over in any function that originates\n        // in a parent scope. This is conservative in that it \"assumes\" that\n        // the variable was closed over from the beginning.\n        return VariableLiveness.MAYBE_LIVE;\n      }\n\n      // not a declaration and previous reference\n      if (var.isReferenced() && !isDeclaration) {\n        return VariableLiveness.READ;\n      }\n\n      // Check whether the defining node is a parent of this node in the AST.\n      if (NodeUtil.isAncestor(definingNode, n)) {\n        return VariableLiveness.MAYBE_LIVE;\n      }\n\n      return VariableLiveness.KILL;\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..5a30f1c2 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,22 +320,72 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+  enum VariableLiveness {\n+    KILL,\n+    READ,\n+    MAYBE_LIVE\n+  }\n+\n+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n+      boolean isDeclaration = NodeUtil.isNameDeclaration(n);\n+      Node parent = n.getParent();\n+\n+      // global name\n+      if (parent.isScript()) {\n+        // top level names are defines\n+        if (isDeclaration) {\n+          return VariableLiveness.KILL;\n+        }\n+\n+        return VariableLiveness.READ;\n+      }\n+\n+      // eval assuming that the name is not defined in the current scope.\n+      Var var = getScope().getVar(variable);\n+\n+      // undefined name in the current scope\n+      if (var == null) {\n+        // Not defined in any parent scope means it is new\n+        // definition of this variable in the current scope.\n+        if (isDeclaration) {\n+          return VariableLiveness.KILL;\n+        }\n+\n         return VariableLiveness.READ;\n       }\n+\n+      Node definingNode = var.getInitialValue();\n+\n+      // The variable is not defined in a function, that means it is either\n+      // global or explicitly closed over in a local scope.\n+      if (definingNode == null || definingNode.isScript()) {\n+        // top level names are defines\n+        if (isDeclaration || var.isGlobal()) {\n+          return VariableLiveness.KILL;\n+        }\n+\n+        // The variable might be closed over in any function that originates\n+        // in a parent scope. This is conservative in that it \"assumes\" that\n+        // the variable was closed over from the beginning.\n+        return VariableLiveness.MAYBE_LIVE;\n+      }\n+\n+      // not a declaration and previous reference\n+      if (var.isReferenced() && !isDeclaration) {\n+        return VariableLiveness.READ;\n+      }\n+\n+      // Check whether the defining node is a parent of this node in the AST.\n+      if (NodeUtil.isAncestor(definingNode, n)) {\n+        return VariableLiveness.MAYBE_LIVE;\n+      }\n+\n+      return VariableLiveness.KILL;\n     }\n \n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n@@ -343,6 +393,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n         }\n       }\n     }\n+\n     return VariableLiveness.MAYBE_LIVE;\n   }\n }",
    "result_reason": "error: enum VariableLiveness is already defined in class DeadAssignmentsElimination",
    "test_result": "ERROR"
}