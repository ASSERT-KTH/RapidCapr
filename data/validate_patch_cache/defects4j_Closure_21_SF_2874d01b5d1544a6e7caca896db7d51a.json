{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty()) {\n    return;\n  }\n\n  boolean isWithinFor;\n\n  switch (parent.getToken()) {\n    case BLOCK:\n      if (parent.getParent().getToken() == FUNCTION) {\n        break;\n      }\n      //$FALL-THROUGH$\n    case SCRIPT:\n    case FUNCTION:\n      break;\n    case EXPR_RESULT:\n    case FOR:\n    case FOR_OF:\n    case FOR_AWAIT_OF:\n    case WHILE:\n    case DO:\n    case CASE:\n    case TRUE:\n    case FALSE:\n    case DEFAULT_CASE:\n      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n      }\n      isWithinFor = (parent.getToken() == Token.FOR);\n      if (isWithinFor && NodeUtil.isIncrementOrDecrement(parent.getParent())) {\n        return;\n      }\n      if (isWithinFor\n          && parent.getChildCount() > 1\n          && parent.getFirstChild() == n) {\n        return;\n      }\n      if (NodeUtil.isAssignmentOp(n)) {\n        t.reportCodeChange();\n        t.getCompiler().reportChangeToEnclosingScope(parent);\n        t.getCompiler().report(\n            JSError.make(\n                n,\n                USELESS_CODE_ERROR,\n                \"This code is pointless. The left-hand side will never be anything but undefined.\"));\n        return;\n      }\n      t.reportCodeChange();\n      t.getCompiler().reportChangeToEnclosingScope(parent);\n      t.getCompiler().report(\n          JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n      break;\n    case IF:\n      Node grandparent = parent.getParent();\n      if (grandparent == null || grandparent.getToken() == Token.BLOCK) {\n        // if statement that is part of a statement or block, just go on\n        return;\n      } else if (grandparent.getToken() == Token.IF) {\n        // if statement that is part of another if statement, always bail to prevent if(a)if(b)`sideEffect()`; becoming\n        // if(a)if(b);`sideEffect`(); which could give an entirely different meaning\n        return;\n      } else {\n        // if statement that is part of an expression.\n        // If the parent ends with an &&, or the grandparent ends with an && and a sibling of this node is the left branch\n        // of the parent, then we can go on.\n        if ((parent.isAnd() && parent.getLastChild() == n)\n            || (grandparent.isAnd()\n                && grandparent.getLastChild() == parent\n                && parent == grandparent.getFirstChild())) {\n          return;\n        }\n        t.reportCodeChange();\n        t.getCompiler().report(\n            JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n      }\n      break;\n    default:\n      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n        return;\n      }\n      t.reportCodeChange();\n      t.getCompiler().reportChangeToEnclosingScope(parent);\n      t.getCompiler().report(\n          JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n      break;\n  }\n\n  if (NodeUtil.isStatementBlock(n)) {\n    super.visit(t, n, parent);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..733026fb 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,72 +81,99 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n-\n-    if (parent == null) {\n-      return;\n-    }\n-\n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty()) {\n+    return;\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n-      return;\n-    }\n+  boolean isWithinFor;\n \n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n+  switch (parent.getToken()) {\n+    case BLOCK:\n+      if (parent.getParent().getToken() == FUNCTION) {\n+        break;\n+      }\n+      //$FALL-THROUGH$\n+    case SCRIPT:\n+    case FUNCTION:\n+      break;\n+    case EXPR_RESULT:\n+    case FOR:\n+    case FOR_OF:\n+    case FOR_AWAIT_OF:\n+    case WHILE:\n+    case DO:\n+    case CASE:\n+    case TRUE:\n+    case FALSE:\n+    case DEFAULT_CASE:\n+      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n-        }\n+      isWithinFor = (parent.getToken() == Token.FOR);\n+      if (isWithinFor && NodeUtil.isIncrementOrDecrement(parent.getParent())) {\n+        return;\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      if (isWithinFor\n+          && parent.getChildCount() > 1\n+          && parent.getFirstChild() == n) {\n         return;\n       }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+      if (NodeUtil.isAssignmentOp(n)) {\n+        t.reportCodeChange();\n+        t.getCompiler().reportChangeToEnclosingScope(parent);\n+        t.getCompiler().report(\n+            JSError.make(\n+                n,\n+                USELESS_CODE_ERROR,\n+                \"This code is pointless. The left-hand side will never be anything but undefined.\"));\n+        return;\n       }\n-\n+      t.reportCodeChange();\n+      t.getCompiler().reportChangeToEnclosingScope(parent);\n       t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+          JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n+      break;\n+    case IF:\n+      Node grandparent = parent.getParent();\n+      if (grandparent == null || grandparent.getToken() == Token.BLOCK) {\n+        // if statement that is part of a statement or block, just go on\n+        return;\n+      } else if (grandparent.getToken() == Token.IF) {\n+        // if statement that is part of another if statement, always bail to prevent if(a)if(b)`sideEffect()`; becoming\n+        // if(a)if(b);`sideEffect`(); which could give an entirely different meaning\n+        return;\n+      } else {\n+        // if statement that is part of an expression.\n+        // If the parent ends with an &&, or the grandparent ends with an && and a sibling of this node is the left branch\n+        // of the parent, then we can go on.\n+        if ((parent.isAnd() && parent.getLastChild() == n)\n+            || (grandparent.isAnd()\n+                && grandparent.getLastChild() == parent\n+                && parent == grandparent.getFirstChild())) {\n+          return;\n+        }\n+        t.reportCodeChange();\n+        t.getCompiler().report(\n+            JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n       }\n-    }\n+      break;\n+    default:\n+      if (NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+        return;\n+      }\n+      t.reportCodeChange();\n+      t.getCompiler().reportChangeToEnclosingScope(parent);\n+      t.getCompiler().report(\n+          JSError.make(n, USELESS_CODE_ERROR, \"The result of the expression is unused.\"));\n+      break;\n   }\n \n+  if (NodeUtil.isStatementBlock(n)) {\n+    super.visit(t, n, parent);\n+  }\n+}\n+\n   /**\n    * Protect side-effect free nodes by making them parameters\n    * to a extern function call.  This call will be removed",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}