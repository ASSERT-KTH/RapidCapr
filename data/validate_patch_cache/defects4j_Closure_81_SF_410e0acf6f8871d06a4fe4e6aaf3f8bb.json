{
    "patch": "public class ASTTransformer extends IRFactory.TransformDispatcher {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\");\n\n  private final ErrorReporter errorReporter;\n  private final boolean allowReturnOutsideFunction;\n  private final String sourceName;\n\n  ASTTransformer(\n      ErrorReporter errorReporter, boolean allowReturnOutsideFunction, String sourceName) {\n    this.errorReporter = errorReporter;\n    this.allowReturnOutsideFunction = allowReturnOutsideFunction;\n    this.sourceName = sourceName;\n  }\n\n  private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n      if (edge.getValue() == Branch.ON_EX) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  Node processBlock(Block blockNode) {\n    return processGeneric(blockNode);\n  }\n\n  @Override\n  Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processCatchClause(CatchClause clauseNode) {\n    AstNode catchVar = clauseNode.getCatchCondition();\n    Node node = newNode(Token.CATCH, transform(condition));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processConditionalExpression(ConditionalExpression exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  Node processDoLoop(DoLoop loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  Node processElementGet(ElementGet getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n  }\n\n  @Override\n  Node processEmptyExpression(EmptyExpression exprNode) {\n    Node node = newNode(Token.EMPTY);\n    return node;\n  }\n\n  @Override\n  Node processExpressionStatement(ExpressionStatement statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n    return newNode(\n        Token.FOR,\n        transform(loopNode.getIterator()),\n        transform(loopNode.getIteratedObject()),\n        transformBlock(loopNode.getBody()));\n  }\n\n  @Override\n  Node processForLoop(ForLoop loopNode) {\n    Node node =\n        newNode(\n            Token.FOR,\n            transform(loopNode.getInitializer()),\n            transform(loopNode.getCondition()),\n            transform(loopNode.getIncrement()));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    return node;\n  }\n\n  @Override\n  Node processFunctionCall(FunctionCall callNode) {\n    Node node =\n        newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n    for (AstNode child : callNode.getArguments()) {\n      node.addChildToBack(transform(child));\n    }\n\n    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n    node.setLineno(callNode.getLineno());\n    node.setCharno(position2charno(leftParamPos));\n    return node;\n  }\n\n  /**\n   * Processes a {@link FunctionNode} AST node.\n   *\n   * <p>This method is responsible for handling both named and unnamed functions.\n   */\n  @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    Node node = newNode(Token.FUNCTION);\n\n    if (name != null && name.getIdentifier().isEmpty()) {\n      // This is an unnamed function (i.e., a function expression).\n      node.putProp(Node.IS_SHORTHAND_PROPERTY, true);\n    } else if (name != null) {\n      // This is a named function (i.e., a function declaration).\n      node.addChildToBack(transform(name));\n    }\n\n    Node lp = newNode(Token.LP);\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n\n    return node;\n  }\n\n  @Override\n  Node processFunctionStatement(FunctionStatement functionStmtNode) {\n    Node varNode = newNode(Token.VAR);\n    Node name = transform(functionStmtNode.getName());\n    Node functionNode = transform(functionStmtNode.getFunction());\n\n    // Replace \"function\" with a reference to the named function.\n    Node assignNode =\n        newNode(Token.ASSIGN, name, functionNode).copyInformationFrom(functionStmtNode);\n    Node exprResult =\n        newNode(Token.EXPR_RESULT, newNode(Token.COMMA, assignNode, functionNode))\n            .copyInformationFrom(functionStmtNode);\n\n    varNode.addChildToBack(exprResult);\n    return varNode;\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID)\n        && n.getFirstChild().getType() == Token.STRING\n        && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n  }\n\n  @Override\n  Node processName(Name nameNode) {\n    if (nameNode.getIdentifier().equals(\"undefined\")) {\n      nameNode.setType(Token.VOID);\n      nameNode.setLineno(-1);\n    }\n    return super.processName(nameNode);\n  }\n\n  @Override\n  Node processReturnStatement(ReturnStatement statementNode) {\n    Node node = newNode(Token.RETURN);\n    if (statementNode.getReturnValue() != null) {\n      node.addChildToBack(transform(statementNode.getReturnValue()));\n    }\n    if (!allowReturnOutsideFunction) {\n      // Rhino doesn't allow returning outside a function, so we need to add a dummy block to\n      // avoid parse errors.\n      Node blockNode = newNode(Token.BLOCK, node);\n      return newNode(Token.FUNCTION, createArguments(\"\"),\n          newNode(Token.BLOCK, blockNode));\n    }\n    return node;\n  }\n\n  @Override\n  Node processString(StringLiteral stringNode) {\n    String string = stringNode.getValue();\n    if (string.matches(\"[\\\"'](\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\])*[\\\"']\")) {\n      // If the string literal is a plain string without any escaped characters,\n      // we can use a simple text insertion to improve readability.\n      String unescaped = string.substring(1, string.length() - 1);\n      return IR.string(unescaped);\n    } else {\n      // Otherwise, use the more general transformation.\n      return super.processString(stringNode);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..858f89a6 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -385,181 +385,243 @@ public class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+public class ASTTransformer extends IRFactory.TransformDispatcher {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\");\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  private final ErrorReporter errorReporter;\n+  private final boolean allowReturnOutsideFunction;\n+  private final String sourceName;\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  ASTTransformer(\n+      ErrorReporter errorReporter, boolean allowReturnOutsideFunction, String sourceName) {\n+    this.errorReporter = errorReporter;\n+    this.allowReturnOutsideFunction = allowReturnOutsideFunction;\n+    this.sourceName = sourceName;\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+      if (edge.getValue() == Branch.ON_EX) {\n+        return true;\n       }\n-      return node;\n     }\n+    return false;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  Node processBlock(Block blockNode) {\n+    return processGeneric(blockNode);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  Node processCatchClause(CatchClause clauseNode) {\n+    AstNode catchVar = clauseNode.getCatchCondition();\n+    Node node = newNode(Token.CATCH, transform(condition));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  @Override\n+  Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  @Override\n+  Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  Node processDoLoop(DoLoop loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  @Override\n+  Node processElementGet(ElementGet getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n+  }\n+\n+  @Override\n+  Node processEmptyExpression(EmptyExpression exprNode) {\n+    Node node = newNode(Token.EMPTY);\n+    return node;\n+  }\n+\n+  @Override\n+  Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n+    return newNode(\n+        Token.FOR,\n+        transform(loopNode.getIterator()),\n+        transform(loopNode.getIteratedObject()),\n+        transformBlock(loopNode.getBody()));\n+  }\n+\n+  @Override\n+  Node processForLoop(ForLoop loopNode) {\n+    Node node =\n+        newNode(\n+            Token.FOR,\n+            transform(loopNode.getInitializer()),\n+            transform(loopNode.getCondition()),\n+            transform(loopNode.getIncrement()));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  Node processFunctionCall(FunctionCall callNode) {\n+    Node node =\n+        newNode(transformTokenType(callNode.getType()), transform(callNode.getTarget()));\n+    for (AstNode child : callNode.getArguments()) {\n+      node.addChildToBack(transform(child));\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n+    node.setLineno(callNode.getLineno());\n+    node.setCharno(position2charno(leftParamPos));\n+    return node;\n+  }\n+\n+  /**\n+   * Processes a {@link FunctionNode} AST node.\n+   *\n+   * <p>This method is responsible for handling both named and unnamed functions.\n+   */\n+  @Override\n+  Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    Node node = newNode(Token.FUNCTION);\n+\n+    if (name != null && name.getIdentifier().isEmpty()) {\n+      // This is an unnamed function (i.e., a function expression).\n+      node.putProp(Node.IS_SHORTHAND_PROPERTY, true);\n+    } else if (name != null) {\n+      // This is a named function (i.e., a function declaration).\n+      node.addChildToBack(transform(name));\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+    Node lp = newNode(Token.LP);\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n     }\n+    node.addChildToBack(lp);\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n-    }\n+    return node;\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n+  @Override\n+  Node processFunctionStatement(FunctionStatement functionStmtNode) {\n+    Node varNode = newNode(Token.VAR);\n+    Node name = transform(functionStmtNode.getName());\n+    Node functionNode = transform(functionStmtNode.getFunction());\n+\n+    // Replace \"function\" with a reference to the named function.\n+    Node assignNode =\n+        newNode(Token.ASSIGN, name, functionNode).copyInformationFrom(functionStmtNode);\n+    Node exprResult =\n+        newNode(Token.EXPR_RESULT, newNode(Token.COMMA, assignNode, functionNode))\n+            .copyInformationFrom(functionStmtNode);\n+\n+    varNode.addChildToBack(exprResult);\n+    return varNode;\n+  }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+    int nType = n.getType();\n+    return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID)\n+        && n.getFirstChild().getType() == Token.STRING\n+        && ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  @Override\n+  Node processName(Name nameNode) {\n+    if (nameNode.getIdentifier().equals(\"undefined\")) {\n+      nameNode.setType(Token.VOID);\n+      nameNode.setLineno(-1);\n     }\n+    return super.processName(nameNode);\n+  }\n+\n+  @Override\n+  Node processReturnStatement(ReturnStatement statementNode) {\n+    Node node = newNode(Token.RETURN);\n+    if (statementNode.getReturnValue() != null) {\n+      node.addChildToBack(transform(statementNode.getReturnValue()));\n+    }\n+    if (!allowReturnOutsideFunction) {\n+      // Rhino doesn't allow returning outside a function, so we need to add a dummy block to\n+      // avoid parse errors.\n+      Node blockNode = newNode(Token.BLOCK, node);\n+      return newNode(Token.FUNCTION, createArguments(\"\"),\n+          newNode(Token.BLOCK, blockNode));\n+    }\n+    return node;\n+  }\n+\n+  @Override\n+  Node processString(StringLiteral stringNode) {\n+    String string = stringNode.getValue();\n+    if (string.matches(\"[\\\"'](\\\\\\\\[\\\\s\\\\S]|[^\\\\\\\\])*[\\\"']\")) {\n+      // If the string literal is a plain string without any escaped characters,\n+      // we can use a simple text insertion to improve readability.\n+      String unescaped = string.substring(1, string.length() - 1);\n+      return IR.string(unescaped);\n+    } else {\n+      // Otherwise, use the more general transformation.\n+      return super.processString(stringNode);\n+    }\n+  }\n+}\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}