{
    "patch": "copy.data = new java.util.ArrayList();\nfor (Iterator iterator = this.data.iterator(); iterator.hasNext();) {\n     TimeSeriesDataItem item = (TimeSeriesDataItem) iterator.next();\n     if (item.getPeriod().compareTo(startTime) < 0) {\n          continue;\n     }\n     if (item.getPeriod().compareTo(endTime) > 0) {\n          break;\n     }\n     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n     try {\n         copy.add(clone);\n     } catch (SeriesException e) {\n         e.printStackTrace();\n     }\n }",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..04c05e7 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,22 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+copy.data = new java.util.ArrayList();\n+for (Iterator iterator = this.data.iterator(); iterator.hasNext();) {\n+     TimeSeriesDataItem item = (TimeSeriesDataItem) iterator.next();\n+     if (item.getPeriod().compareTo(startTime) < 0) {\n+          continue;\n+     }\n+     if (item.getPeriod().compareTo(endTime) > 0) {\n+          break;\n+     }\n+     TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+     try {\n+         copy.add(clone);\n+     } catch (SeriesException e) {\n+         e.printStackTrace();\n+     }\n+ }\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}