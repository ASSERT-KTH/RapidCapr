{
    "patch": "        int idx = 1;\n        while (count <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= (idx - 1) * idx / 2;\n        indices[last - 1] = 0; // first index is always 0\n        indices[last] = idx - 1;\n        for (int i = last - 2; i >= 0; i--) {\n            final int maxIdx = Math.min(count, uniCounterOffset[i + 1] - 1);\n            indices[i] = maxIdx;\n            count -= maxIdx;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..97099ed05 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        count -= (idx - 1) * idx / 2;\n+        indices[last - 1] = 0; // first index is always 0\n+        indices[last] = idx - 1;\n+        for (int i = last - 2; i >= 0; i--) {\n+            final int maxIdx = Math.min(count, uniCounterOffset[i + 1] - 1);\n+            indices[i] = maxIdx;\n+            count -= maxIdx;\n+        }\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][0] expected:<0> but was:<1>",
    "test_result": "FAIL"
}