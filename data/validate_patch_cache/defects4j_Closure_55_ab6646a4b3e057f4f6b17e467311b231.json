{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    return NodeUtil.isFunctionExpression(n)\n           || (NodeUtil.isCall(n) \n              && (NodeUtil.getFunctionName(n.getFirstChild()).isEmpty()\n                  || NodeUtil.isFunctionExpression(NodeUtil.getFunctionTarget(n))));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..7026c7ae 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,12 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    return NodeUtil.isFunctionExpression(n)\n+           || (NodeUtil.isCall(n) \n+              && (NodeUtil.getFunctionName(n.getFirstChild()).isEmpty()\n+                  || NodeUtil.isFunctionExpression(NodeUtil.getFunctionTarget(n))));\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}