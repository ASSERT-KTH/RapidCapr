{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double sumReal = real + rhs.getReal();\n    double sumImag = imaginary + rhs.getImaginary();\n    Complex result;\n    if (Double.isNaN(sumReal) || Double.isNaN(sumImag)) {\n        result = new Complex(Double.NaN, Double.NaN);\n    } else if (Double.isInfinite(sumReal) || Double.isInfinite(sumImag)) {\n        if (Double.isInfinite(sumReal) && Double.isInfinite(sumImag)) {\n            result = new Complex(\n                Math.copySign(Double.POSITIVE_INFINITY, sumReal),\n                Math.copySign(Double.POSITIVE_INFINITY, sumImag));\n        } else {\n            result = new Complex(sumReal, sumImag);\n        }\n    } else {\n        result = new Complex(sumReal, sumImag);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..9b10ad4af 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,26 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double sumReal = real + rhs.getReal();\n+    double sumImag = imaginary + rhs.getImaginary();\n+    Complex result;\n+    if (Double.isNaN(sumReal) || Double.isNaN(sumImag)) {\n+        result = new Complex(Double.NaN, Double.NaN);\n+    } else if (Double.isInfinite(sumReal) || Double.isInfinite(sumImag)) {\n+        if (Double.isInfinite(sumReal) && Double.isInfinite(sumImag)) {\n+            result = new Complex(\n+                Math.copySign(Double.POSITIVE_INFINITY, sumReal),\n+                Math.copySign(Double.POSITIVE_INFINITY, sumImag));\n+        } else {\n+            result = new Complex(sumReal, sumImag);\n+        }\n+    } else {\n+        result = new Complex(sumReal, sumImag);\n     }\n+    return result;\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}