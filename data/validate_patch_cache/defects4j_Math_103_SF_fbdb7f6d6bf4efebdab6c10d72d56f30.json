{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    final double z = (x - mean) / standardDeviation;\n    if (Double.isNaN(z)) {\n        return Double.NaN;\n    } else if(Double.isInfinite(z)) {\n        return z > 0 ? 1.0 : 0.0;\n    } else if (z >= 40.) {\n        return 1.;\n    } else if (z <= -40.) {\n        return 0.;\n    } else {\n        try {\n            return 0.5 * (1.",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..90c00a94d 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,19 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n-    }\n+public double cumulativeProbability(double x) throws MathException {\n+    final double z = (x - mean) / standardDeviation;\n+    if (Double.isNaN(z)) {\n+        return Double.NaN;\n+    } else if(Double.isInfinite(z)) {\n+        return z > 0 ? 1.0 : 0.0;\n+    } else if (z >= 40.) {\n+        return 1.;\n+    } else if (z <= -40.) {\n+        return 0.;\n+    } else {\n+        try {\n+            return 0.5 * (1.\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}