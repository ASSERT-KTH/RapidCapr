{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double newReal, newImaginary;\n    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal())) {\n        if (Math.signum(real) == Math.signum(rhs.getReal())) {\n            newReal ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..140f575d6 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,12 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n-    }\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double newReal, newImaginary;\n+    if (Double.isInfinite(real) && Double.isInfinite(rhs.getReal())) {\n+        if (Math.signum(real) == Math.signum(rhs.getReal())) {\n+            newReal \n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}