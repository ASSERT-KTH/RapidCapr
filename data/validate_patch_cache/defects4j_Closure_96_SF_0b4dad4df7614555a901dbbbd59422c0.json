{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean isVarArgs = false;\n\n    while (arguments.hasNext() && parameters.hasNext()) {\n      argument = arguments.next();\n      parameter = parameters.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (parameters.hasNext()) {\n        isVarArgs = functionType.isVarArgs();\n        if (isVarArgs) {\n            parameter = functionType.getVarArgsType();\n        } else {\n            throw new IllegalStateException(\n                    \"FunctionType parameter size and parameter list size do not match.\");\n        }\n    }\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..69a6f2b3 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,12 +1405,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean isVarArgs = false;\n+\n+    while (arguments.hasNext() && parameters.hasNext()) {\n       argument = arguments.next();\n+      parameter = parameters.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n@@ -1420,11 +1419,30 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n+\n+    if (parameters.hasNext()) {\n+        isVarArgs = functionType.isVarArgs();\n+        if (isVarArgs) {\n+            parameter = functionType.getVarArgsType();\n+        } else {\n+            throw new IllegalStateException(\n+                    \"FunctionType parameter size and parameter list size do not match.\");\n+        }\n+    }\n+\n+    while (arguments.hasNext()) {\n+      argument = arguments.next();\n+      ordinal++;\n+\n+      validator.expectArgumentMatchesParameter(t, argument,\n+          getJSType(argument), getJSType(parameter), call, ordinal);\n+    }\n+\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs),\n+          maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}