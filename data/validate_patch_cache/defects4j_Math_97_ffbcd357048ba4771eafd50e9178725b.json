{
    "patch": "public double[] solve(double c1, double c2, double c3) {\n    double[] roots = new double[3];\n\n    double a = c3 / c1;\n    double b = c2 / c1;\n\n    double q = (a * a - 3 * b) / 9;\n    double r = (2 * a * a * a - 9 * a * b + 27 * c1) / 54;\n\n    double delta = q * q * q - r * r;\n\n    if (delta > 0) {\n        double theta = Math.acos(r / Math.sqrt(q * q * q));\n        double s1 = -2 * Math.sqrt(q) * Math.cos(theta / 3) - a / 3;\n        double s2 = -2 * Math.sqrt(q) * Math.cos((theta + 2 * Math.PI) / 3) - a / 3;\n        double s3 = -2 * Math.sqrt(q) * Math.cos((theta - 2 * Math.PI) / 3) - a / 3;\n        roots[0] = s1;\n        roots[1] = s2;\n        roots[2] = s3;\n    } else if (delta == 0) {\n        double r13 = r > 0 ? Math.pow(r, 1.0 / 3.0) : -Math.pow(-r, 1.0 / 3.0);\n        double s1 = 2 * r13 - a / 3;\n        double s2 = -r13 - a / 3;\n        roots[0] = s1;\n        roots[1] = s2;\n        roots[2] = s2;\n    } else {\n        double e = Math.sqrt(-delta);\n        double rho = Math.abs(r) / Math.pow(q, 3.0 / 2.0);\n        double theta = Math.atan2(e, r) / 3;\n        double s1 = 2 * Math.sqrt(q) * Math.cos(theta) - a / 3;\n        double s2 = 2 * Math.sqrt(q) * Math.cos(theta + 2 * Math.PI / 3) - a / 3;\n        double s3 = 2 * Math.sqrt(q) * Math.cos(theta - 2 * Math.PI / 3) - a / 3;\n        roots[0] = s1;\n        roots[1] = s2;\n        roots[2] = s3;\n    }\n    return roots;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..57dda0d83 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,45 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+public double[] solve(double c1, double c2, double c3) {\n+    double[] roots = new double[3];\n+\n+    double a = c3 / c1;\n+    double b = c2 / c1;\n+\n+    double q = (a * a - 3 * b) / 9;\n+    double r = (2 * a * a * a - 9 * a * b + 27 * c1) / 54;\n \n-        return ret;\n+    double delta = q * q * q - r * r;\n+\n+    if (delta > 0) {\n+        double theta = Math.acos(r / Math.sqrt(q * q * q));\n+        double s1 = -2 * Math.sqrt(q) * Math.cos(theta / 3) - a / 3;\n+        double s2 = -2 * Math.sqrt(q) * Math.cos((theta + 2 * Math.PI) / 3) - a / 3;\n+        double s3 = -2 * Math.sqrt(q) * Math.cos((theta - 2 * Math.PI) / 3) - a / 3;\n+        roots[0] = s1;\n+        roots[1] = s2;\n+        roots[2] = s3;\n+    } else if (delta == 0) {\n+        double r13 = r > 0 ? Math.pow(r, 1.0 / 3.0) : -Math.pow(-r, 1.0 / 3.0);\n+        double s1 = 2 * r13 - a / 3;\n+        double s2 = -r13 - a / 3;\n+        roots[0] = s1;\n+        roots[1] = s2;\n+        roots[2] = s2;\n+    } else {\n+        double e = Math.sqrt(-delta);\n+        double rho = Math.abs(r) / Math.pow(q, 3.0 / 2.0);\n+        double theta = Math.atan2(e, r) / 3;\n+        double s1 = 2 * Math.sqrt(q) * Math.cos(theta) - a / 3;\n+        double s2 = 2 * Math.sqrt(q) * Math.cos(theta + 2 * Math.PI / 3) - a / 3;\n+        double s3 = 2 * Math.sqrt(q) * Math.cos(theta - 2 * Math.PI / 3) - a / 3;\n+        roots[0] = s1;\n+        roots[1] = s2;\n+        roots[2] = s3;\n     }\n+    return roots;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: method solve(double,double,double) is already defined in class BrentSolver",
    "test_result": "ERROR"
}