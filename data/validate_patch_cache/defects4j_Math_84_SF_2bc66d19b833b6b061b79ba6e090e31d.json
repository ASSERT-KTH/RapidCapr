{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        final RealPointValuePair[] reflectedSimplex = simplex;\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n\n            if (comparator.compare(expanded, reflected) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = expanded.getPoint() != null ? expanded : reflectedSimplex;\n            }\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            final RealPointValuePair[] contractedSimplex = simplex;\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contractedSimplex;\n            } else {\n                // check convergence\n                final boolean converged =\n                        getConvergenceChecker() != null && getConvergenceChecker()\n                                .converged(getIterations(), original[0],\n                                        simplex[0]);\n                if (converged) {\n                    return;\n                }\n                final double[] xSmallest = original[0].getPoint();\n                for (int i = 1; i < simplex.length; ++i) {\n                    final double[] x = simplex[i].getPoint();\n                    for (int j = 0; j < x.length; ++j) {\n                        x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n                    }\n                    simplex[i] = new RealPointValuePair(x,\n                            computeObjectiveValue(x), false);\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..cb4925942 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,58 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n-\n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        final RealPointValuePair[] reflectedSimplex = simplex;\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+\n+            if (comparator.compare(expanded, reflected) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = expanded.getPoint() != null ? expanded : reflectedSimplex;\n             }\n-\n+        } else {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+            final RealPointValuePair[] contractedSimplex = simplex;\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                simplex = contractedSimplex;\n+            } else {\n+                // check convergence\n+                final boolean converged =\n+                        getConvergenceChecker() != null && getConvergenceChecker()\n+                                .converged(getIterations(), original[0],\n+                                        simplex[0]);\n+                if (converged) {\n+                    return;\n+                }\n+                final double[] xSmallest = original[0].getPoint();\n+                for (int i = 1; i < simplex.length; ++i) {\n+                    final double[] x = simplex[i].getPoint();\n+                    for (int j = 0; j < x.length; ++j) {\n+                        x[j] = xSmallest[j] + sigma * (x[j] - xSmallest[j]);\n+                    }\n+                    simplex[i] = new RealPointValuePair(x,\n+                            computeObjectiveValue(x), false);\n+                }\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}