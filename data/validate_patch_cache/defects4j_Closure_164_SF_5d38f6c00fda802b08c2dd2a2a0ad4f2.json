{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false; // other is not an ArrowType so it cannot be a subtype.\n    }\n\n    ArrowType that = (ArrowType) other;\n\n    // In order for this to be a subtype of that,\n    // 1) the return types must have a subtype relationship.\n    // 2) every parameter that 'this' has, 'that' must have a supertype of.\n    // 3) 'that' must have at least as many required parameters as 'this'.\n\n    // Check the return type, note that the return type of 'this'\n    // must be a subtype of 'that'.\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // Walk through all parameters of 'this' and make sure that there is a supertype\n    // in 'that'.\n    Node thisParam = parameters.getFirstChild();\n    Node thatParam = that.parameters.getFirstChild();\n\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n\n      if (thisParamType != null) {\n        // If 'this' has a non-null type, then the corresponding type in 'that' needs to\n        // be a supertype.\n        if (thatParamType == null || !thatParamType.isSupertypeOf(thisParamType)) {\n          return false;\n        }\n      } else if (!thisParam.isVarArgs() && thatParam.isOptional()) {\n        // If thisParamType is null, it is undefined and it can match any optional parameters in the supertype.\n        return false;\n      }\n\n      // Move on to the next pair of parameters\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n      boolean thisIsOptArg = thisParam.isOptional();\n      boolean thatIsOptArg = thatParam.isOptional();\n\n      // don't advance if we have variable or optional arguments\n      if (!(thisIsVarArgs || thisIsOptArg)) {\n        thisParam = thisParam.getNext();\n      }\n      if (!(thatIsVarArgs || thatIsOptArg)) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args or optional indicates the end\n      if ((thisIsVarArgs && thatIsVarArgs) || (thisIsOptArg && thatIsOptArg)) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // If 'that' is missing optional parameters or has fewer required parameters,\n    // then it cannot subtype 'this'.\n    if (that.parameters.getMinArguments() < parameters.getMinArguments()) {\n      return false;\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..40b85419 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -79,76 +79,68 @@ final class ArrowType extends JSType {\n   @Override\n   public boolean isSubtype(JSType other) {\n     if (!(other instanceof ArrowType)) {\n-      return false;\n+      return false; // other is not an ArrowType so it cannot be a subtype.\n     }\n \n     ArrowType that = (ArrowType) other;\n \n-    // This is described in Draft 2 of the ES4 spec,\n-    // Section 3.4.7: Subtyping Function Types.\n+    // In order for this to be a subtype of that,\n+    // 1) the return types must have a subtype relationship.\n+    // 2) every parameter that 'this' has, 'that' must have a supertype of.\n+    // 3) 'that' must have at least as many required parameters as 'this'.\n \n-    // this.returnType <: that.returnType (covariant)\n+    // Check the return type, note that the return type of 'this'\n+    // must be a subtype of 'that'.\n     if (!this.returnType.isSubtype(that.returnType)) {\n       return false;\n     }\n \n-    // that.paramType[i] <: this.paramType[i] (contravariant)\n-    //\n-    // If this.paramType[i] is required,\n-    // then that.paramType[i] is required.\n-    //\n-    // In theory, the \"required-ness\" should work in the other direction as\n-    // well. In other words, if we have\n-    //\n-    // function f(number, number) {}\n-    // function g(number) {}\n-    //\n-    // Then f *should* not be a subtype of g, and g *should* not be\n-    // a subtype of f. But in practice, we do not implement it this way.\n-    // We want to support the use case where you can pass g where f is\n-    // expected, and pretend that g ignores the second argument.\n-    // That way, you can have a single \"no-op\" function, and you don't have\n-    // to create a new no-op function for every possible type signature.\n-    //\n-    // So, in this case, g < f, but f !< g\n+    // Walk through all parameters of 'this' and make sure that there is a supertype\n+    // in 'that'.\n     Node thisParam = parameters.getFirstChild();\n     Node thatParam = that.parameters.getFirstChild();\n+\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n+\n       if (thisParamType != null) {\n-        if (thatParamType == null ||\n-            !thatParamType.isSubtype(thisParamType)) {\n+        // If 'this' has a non-null type, then the corresponding type in 'that' needs to\n+        // be a supertype.\n+        if (thatParamType == null || !thatParamType.isSupertypeOf(thisParamType)) {\n           return false;\n         }\n+      } else if (!thisParam.isVarArgs() && thatParam.isOptional()) {\n+        // If thisParamType is null, it is undefined and it can match any optional parameters in the supertype.\n+        return false;\n       }\n \n+      // Move on to the next pair of parameters\n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n+      boolean thisIsOptArg = thisParam.isOptional();\n+      boolean thatIsOptArg = thatParam.isOptional();\n \n-      // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n-\n-      // don't advance if we have variable arguments\n-      if (!thisIsVarArgs) {\n+      // don't advance if we have variable or optional arguments\n+      if (!(thisIsVarArgs || thisIsOptArg)) {\n         thisParam = thisParam.getNext();\n       }\n-      if (!thatIsVarArgs) {\n+      if (!(thatIsVarArgs || thatIsOptArg)) {\n         thatParam = thatParam.getNext();\n       }\n \n-      // both var_args indicates the end\n-      if (thisIsVarArgs && thatIsVarArgs) {\n+      // both var_args or optional indicates the end\n+      if ((thisIsVarArgs && thatIsVarArgs) || (thisIsOptArg && thatIsOptArg)) {\n         thisParam = null;\n         thatParam = null;\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // If 'that' is missing optional parameters or has fewer required parameters,\n+    // then it cannot subtype 'this'.\n+    if (that.parameters.getMinArguments() < parameters.getMinArguments()) {\n+      return false;\n+    }\n \n     return true;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}