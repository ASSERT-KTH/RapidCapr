{
    "patch": "            MockCandidateFilter.FilterResult filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if(filterResult.isMatch()) {\n                Object mockInstance = filterResult.getMockInstance();\n                try {\n                    field.setAccessible(true);\n                    field.set(fieldInstance, mockInstance);\n                    return;\n                } catch (Exception e) {\n                    throw new IllegalStateException(\"Could not inject mock object into field: \" + field, e);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..4a5c0e0e3 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,20 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            MockCandidateFilter.FilterResult filterResult = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if(filterResult.isMatch()) {\n+                Object mockInstance = filterResult.getMockInstance();\n+                try {\n+                    field.setAccessible(true);\n+                    field.set(fieldInstance, mockInstance);\n+                    return;\n+                } catch (Exception e) {\n+                    throw new IllegalStateException(\"Could not inject mock object into field: \" + field, e);\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}