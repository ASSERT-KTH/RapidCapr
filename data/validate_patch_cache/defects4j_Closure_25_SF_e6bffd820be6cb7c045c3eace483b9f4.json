{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType.isFunctionType()) {\n          ct = constructorType.toObjectType().getConstructor();\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n          if (type != null) {\n            type = type.restrictByNotNullOrUndefined();\n          }\n          if (type == null || type.isUnknownType()) {\n            // If the instance type is unknown or null, we set it to ObjectType.\n            // This allows the code to continue safely and with better output.\n            type = getNativeType(OBJECT_TYPE);\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..2306ec79 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,9 +1031,7 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1044,14 +1042,19 @@ class TypeInference\n         type = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n+        if (ct == null && constructorType.isFunctionType()) {\n+          ct = constructorType.toObjectType().getConstructor();\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          if (type != null) {\n+            type = type.restrictByNotNullOrUndefined();\n+          }\n+          if (type == null || type.isUnknownType()) {\n+            // If the instance type is unknown or null, we set it to ObjectType.\n+            // This allows the code to continue safely and with better output.\n+            type = getNativeType(OBJECT_TYPE);\n+          }\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}