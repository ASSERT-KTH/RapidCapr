{
    "patch": "    public double solve(final UnivariateRealFunction f, final double min, final double max, final double startValue)\n            throws TooManyEvaluationsException, MaxCountExceededException,\n            NoBracketingException, NumberIsTooLargeException {\n        if (f == null) {\n            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n        }\n        if (min >= max) {\n            throw new NumberIsTooLargeException(min, max, false);\n        }\n        Incrementor incrementor = null;\n        if (evaluations != null) {\n            incrementor = evaluations.getIncrementor();\n            incrementor.setMaximalCount(maximalEvaluations);\n        }\n        int i = 0;\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        double yStart = f.value(startValue);\n        verifyBracketing(min, max, f);\n        double x = startValue;\n        double y = yStart;\n        while (true) {\n\n            double oldx = x;\n            double xMiddle = 0.5 * (min + max);\n            double yMiddle = f.value(xMiddle);\n            double tolerance = FastMath.max(getAbsoluteAccuracy(),\n                                             getRelativeAccuracy() * FastMath.abs(x));\n            if (FastMath.abs(x - oldx) <= tolerance ||\n                    (getFunctionValueAccuracy() != 0 &&\n                        FastMath.abs(y) <= getFunctionValueAccuracy())) {\n                return x;\n            }\n            if (yMiddle * y < 0) {\n                max = x;\n                yMax = y;\n            } else {\n                min = x;\n                yMin = y;\n            }\n            if (((UnivariateSolverUtils.isBracketing(yMin, yMiddle)) &&\n                 (UnivariateSolverUtils.isBracketing(yMiddle, yMax))) ||\n                (FastMath.abs(yMin) < FastMath.abs(y)) ||\n                (FastMath.abs(yMax) < FastMath.abs(y))) {\n                x = xMiddle;\n                y = f.value(x);\n            } else {\n                x = 0.5 * (yMin < yMax ? min : max);\n                y = f.value(x);\n            }\n            if (incrementor != null) {\n                incrementor.incrementCount();\n            }\n            if (++i >= maximalIter) {\n                throw new MaxCountExceededException(maximalIter);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..106755728 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -67,9 +67,63 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     }\n \n     /** {@inheritDoc} */\n-    public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n-        throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+    public double solve(final UnivariateRealFunction f, final double min, final double max, final double startValue)\n+            throws TooManyEvaluationsException, MaxCountExceededException,\n+            NoBracketingException, NumberIsTooLargeException {\n+        if (f == null) {\n+            throw new NullArgumentException(LocalizedFormats.FUNCTION);\n+        }\n+        if (min >= max) {\n+            throw new NumberIsTooLargeException(min, max, false);\n+        }\n+        Incrementor incrementor = null;\n+        if (evaluations != null) {\n+            incrementor = evaluations.getIncrementor();\n+            incrementor.setMaximalCount(maximalEvaluations);\n+        }\n+        int i = 0;\n+        double yMin = f.value(min);\n+        double yMax = f.value(max);\n+        double yStart = f.value(startValue);\n+        verifyBracketing(min, max, f);\n+        double x = startValue;\n+        double y = yStart;\n+        while (true) {\n+\n+            double oldx = x;\n+            double xMiddle = 0.5 * (min + max);\n+            double yMiddle = f.value(xMiddle);\n+            double tolerance = FastMath.max(getAbsoluteAccuracy(),\n+                                             getRelativeAccuracy() * FastMath.abs(x));\n+            if (FastMath.abs(x - oldx) <= tolerance ||\n+                    (getFunctionValueAccuracy() != 0 &&\n+                        FastMath.abs(y) <= getFunctionValueAccuracy())) {\n+                return x;\n+            }\n+            if (yMiddle * y < 0) {\n+                max = x;\n+                yMax = y;\n+            } else {\n+                min = x;\n+                yMin = y;\n+            }\n+            if (((UnivariateSolverUtils.isBracketing(yMin, yMiddle)) &&\n+                 (UnivariateSolverUtils.isBracketing(yMiddle, yMax))) ||\n+                (FastMath.abs(yMin) < FastMath.abs(y)) ||\n+                (FastMath.abs(yMax) < FastMath.abs(y))) {\n+                x = xMiddle;\n+                y = f.value(x);\n+            } else {\n+                x = 0.5 * (yMin < yMax ? min : max);\n+                y = f.value(x);\n+            }\n+            if (incrementor != null) {\n+                incrementor.incrementCount();\n+            }\n+            if (++i >= maximalIter) {\n+                throw new MaxCountExceededException(maximalIter);\n+            }\n+        }\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}