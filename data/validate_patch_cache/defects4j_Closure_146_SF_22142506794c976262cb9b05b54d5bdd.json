{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions\n    if (that instanceof UnionType) {\n      TypePair pair = that.getTypesUnderInequality(this);\n      // swap type pair since parameter is under inequality\n      return new TypePair(pair.typeB, pair.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(JSType.TOP, JSType.TOP);\n\n      case FALSE:\n        return new TypePair(this, that);\n\n      case MAYBE:\n        return new TypePair(null, null);\n\n      default:\n        throw new IllegalStateException();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..5f5f4fff 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,29 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n+public TypePair getTypesUnderInequality(JSType that) {\n+    // unions\n     if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n+      TypePair pair = that.getTypesUnderInequality(this);\n+      // swap type pair since parameter is under inequality\n+      return new TypePair(pair.typeB, pair.typeA);\n     }\n \n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        return new TypePair(JSType.TOP, JSType.TOP);\n \n       case FALSE:\n-      case UNKNOWN:\n         return new TypePair(this, that);\n-    }\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n-  }\n+      case MAYBE:\n+        return new TypePair(null, null);\n+\n+      default:\n+        throw new IllegalStateException();\n+    }\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}