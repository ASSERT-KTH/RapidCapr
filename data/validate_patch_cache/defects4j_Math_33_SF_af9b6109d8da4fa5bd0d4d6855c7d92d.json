{
    "patch": " protected void dropPhase1Objective() {\n\n        int numObjectives = getNumObjectiveFunctions();\n        if (numObjectives == 1) {\n            return;\n        }\n\n        List<Integer> columnsToExclude = new ArrayList<>();\n        columnsToExclude.add(0);\n\n        for (int i = numObjectives; i < getNumVariables(); i++) {\n            double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToExclude.add(i);\n            }\n        }\n\n        for (int i = getNumVariables() - getNumArtificialVariables();\n                 i < getNumVariables(); i++) {\n            if (getBasicRow(i) == null) {\n                columnsToExclude.add(i);\n            }\n        }\n\n        List<Integer> columnsToKeep = new ArrayList<>(getNumVariables() - columnsToExclude.size());\n        for (int i = 0; i < getNumVariables(); i++) {\n            if (!columnsToExclude.contains(i)) {\n                columnsToKeep.add(i);\n            }\n        }\n\n        double[][] matrix = new double[getHeight() - 1][columnsToKeep.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < columnsToKeep.size(); j++) {\n                matrix[i - 1][col++] = tableau.getEntry(i, columnsToKeep.get(j));\n            }\n        }\n\n        for (int i = columnsToExclude.size() - 1; i >= 0; i--) {\n            int col = columnsToExclude.get(i);\n            columnLabels.remove(col);\n            tableau = deleteColumn(tableau, col);\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        numArtificialVariables = 0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..0270bd5e8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,47 +324,54 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n-        if (getNumObjectiveFunctions() == 1) {\n+ protected void dropPhase1Objective() {\n+\n+        int numObjectives = getNumObjectiveFunctions();\n+        if (numObjectives == 1) {\n             return;\n         }\n \n-        List<Integer> columnsToDrop = new ArrayList<Integer>();\n-        columnsToDrop.add(0);\n+        List<Integer> columnsToExclude = new ArrayList<>();\n+        columnsToExclude.add(0);\n \n-        // positive cost non-artificial variables\n-        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n-            final double entry = tableau.getEntry(0, i);\n+        for (int i = numObjectives; i < getNumVariables(); i++) {\n+            double entry = tableau.getEntry(0, i);\n             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                columnsToDrop.add(i);\n+                columnsToExclude.add(i);\n             }\n         }\n \n-        // non-basic artificial variables\n-        for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n+        for (int i = getNumVariables() - getNumArtificialVariables();\n+                 i < getNumVariables(); i++) {\n+            if (getBasicRow(i) == null) {\n+                columnsToExclude.add(i);\n+            }\n+        }\n+\n+        List<Integer> columnsToKeep = new ArrayList<>(getNumVariables() - columnsToExclude.size());\n+        for (int i = 0; i < getNumVariables(); i++) {\n+            if (!columnsToExclude.contains(i)) {\n+                columnsToKeep.add(i);\n+            }\n         }\n \n-        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n+        double[][] matrix = new double[getHeight() - 1][columnsToKeep.size()];\n         for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+            int col = 0;\n+            for (int j = 0; j < columnsToKeep.size(); j++) {\n+                matrix[i - 1][col++] = tableau.getEntry(i, columnsToKeep.get(j));\n             }\n-          }\n         }\n \n-        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+        for (int i = columnsToExclude.size() - 1; i >= 0; i--) {\n+            int col = columnsToExclude.get(i);\n+            columnLabels.remove(col);\n+            tableau = deleteColumn(tableau, col);\n         }\n \n         this.tableau = new Array2DRowRealMatrix(matrix);\n-        this.numArtificialVariables = 0;\n-    }\n+        numArtificialVariables = 0;\n+}\n \n     /**\n      * @param src the source array",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}