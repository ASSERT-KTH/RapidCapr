{
    "patch": "import java.math.BigDecimal;\nimport java.math.MathContext;\n\npublic class Line {\n    private BigDecimal yIntercept;\n    private BigDecimal slope;\n    private Vector2D direction;\n    private static final BigDecimal zero = new BigDecimal(\"0.0\");\n\n    public Line(final BigDecimal slope, final BigDecimal yIntercept) {\n        this.slope = slope;\n        this.yIntercept = yIntercept;\n        direction = new Vector2D(BigDecimal.ONE, slope);\n    }\n\n    public Line(final BigDecimal angle) {\n        this(new BigDecimal(Math.tan(angle.doubleValue())), zero);\n    }\n\n    public Line(final Vector2D direction, final BigDecimal y) {\n        this.direction = direction.normalize();\n        slope = this.direction.getY().divide(this.direction.getX(), MathContext.DECIMAL128);\n        yIntercept = y.subtract(slope.multiply(direction.getX()));\n    }\n\n    public Vector2D getDirection() {\n        return direction;\n    }\n\n    public BigDecimal getY(final BigDecimal x) {\n        return slope.multiply(x).add(yIntercept);\n    }\n\n    public BigDecimal getX(final BigDecimal y) {\n        return y.subtract(yIntercept).divide(slope, MathContext.DECIMAL128);\n    }\n\n    public Line rotate(final BigDecimal angle) {\n        final Vector2D transformed = direction.rotate(angle);\n        final BigDecimal y = transformed.getY().add(slope.multiply(transformed.getX())).add(yIntercept);\n        return new Line(transformed, y);\n    }\n\n    public Line revert() {\n        final Vector2D revertedDirection = direction.negate();\n        final BigDecimal y = revertedDirection.getY().add(slope.multiply(revertedDirection.getX())).add(yIntercept);\n        return new Line(revertedDirection, y);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\nindex 674c4aada..7c57e5ceb 100644\n--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Line.java\n@@ -83,10 +83,55 @@ public class Line implements Embedding<Euclidean3D, Euclidean1D> {\n     /** Get a line with reversed direction.\n      * @return a new instance, with reversed direction\n      */\n+import java.math.BigDecimal;\n+import java.math.MathContext;\n+\n+public class Line {\n+    private BigDecimal yIntercept;\n+    private BigDecimal slope;\n+    private Vector2D direction;\n+    private static final BigDecimal zero = new BigDecimal(\"0.0\");\n+\n+    public Line(final BigDecimal slope, final BigDecimal yIntercept) {\n+        this.slope = slope;\n+        this.yIntercept = yIntercept;\n+        direction = new Vector2D(BigDecimal.ONE, slope);\n+    }\n+\n+    public Line(final BigDecimal angle) {\n+        this(new BigDecimal(Math.tan(angle.doubleValue())), zero);\n+    }\n+\n+    public Line(final Vector2D direction, final BigDecimal y) {\n+        this.direction = direction.normalize();\n+        slope = this.direction.getY().divide(this.direction.getX(), MathContext.DECIMAL128);\n+        yIntercept = y.subtract(slope.multiply(direction.getX()));\n+    }\n+\n+    public Vector2D getDirection() {\n+        return direction;\n+    }\n+\n+    public BigDecimal getY(final BigDecimal x) {\n+        return slope.multiply(x).add(yIntercept);\n+    }\n+\n+    public BigDecimal getX(final BigDecimal y) {\n+        return y.subtract(yIntercept).divide(slope, MathContext.DECIMAL128);\n+    }\n+\n+    public Line rotate(final BigDecimal angle) {\n+        final Vector2D transformed = direction.rotate(angle);\n+        final BigDecimal y = transformed.getY().add(slope.multiply(transformed.getX())).add(yIntercept);\n+        return new Line(transformed, y);\n+    }\n+\n     public Line revert() {\n-        final Line reverted = new Line(zero, zero.subtract(direction));\n-        return reverted;\n+        final Vector2D revertedDirection = direction.negate();\n+        final BigDecimal y = revertedDirection.getY().add(slope.multiply(revertedDirection.getX())).add(yIntercept);\n+        return new Line(revertedDirection, y);\n     }\n+}\n \n     /** Get the normalized direction vector.\n      * @return normalized direction vector",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}