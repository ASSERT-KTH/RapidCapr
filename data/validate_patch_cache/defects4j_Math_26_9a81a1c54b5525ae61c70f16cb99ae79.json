{
    "patch": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (a0 > overflow.longValueExact()) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        BigInteger p0 = BigInteger.ZERO;\n        BigInteger q0 = BigInteger.ONE;\n        BigInteger p1 = BigInteger.valueOf(a0);\n        BigInteger q1 = BigInteger.ZERO;\n\n        BigInteger p2 = BigInteger.ZERO;\n        BigInteger q2 = BigInteger.ONE;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = BigInteger.valueOf(a1).multiply(p1).add(p0);\n            q2 = BigInteger.valueOf(a1).multiply(q1).add(q0);\n            if (p2.compareTo(overflow) == 1 || q2.compareTo(overflow) == 1) {\n                throw new FractionConversionException(value, p2.longValueExact(), q2.longValueExact());\n            }\n\n            double convergent = p2.doubleValue() / q2.doubleValue();\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2.longValue() < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2.longValue() < maxDenominator) {\n            this.numerator = p2.intValueExact();\n            this.denominator = q2.intValueExact();\n        } else {\n            this.numerator = p1.intValueExact();\n            this.denominator = q1.intValueExact();\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..1f248a975 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -175,10 +175,10 @@ public class Fraction\n     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n     {\n-        long overflow = Integer.MAX_VALUE;\n+        BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n+        if (a0 > overflow.longValueExact()) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n@@ -190,13 +190,13 @@ public class Fraction\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n+        BigInteger p0 = BigInteger.ZERO;\n+        BigInteger q0 = BigInteger.ONE;\n+        BigInteger p1 = BigInteger.valueOf(a0);\n+        BigInteger q1 = BigInteger.ZERO;\n \n-        long p2 = 0;\n-        long q2 = 1;\n+        BigInteger p2 = BigInteger.ZERO;\n+        BigInteger q2 = BigInteger.ONE;\n \n         int n = 0;\n         boolean stop = false;\n@@ -204,14 +204,14 @@ public class Fraction\n             ++n;\n             double r1 = 1.0 / (r0 - a0);\n             long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+            p2 = BigInteger.valueOf(a1).multiply(p1).add(p0);\n+            q2 = BigInteger.valueOf(a1).multiply(q1).add(q0);\n+            if (p2.compareTo(overflow) == 1 || q2.compareTo(overflow) == 1) {\n+                throw new FractionConversionException(value, p2.longValueExact(), q2.longValueExact());\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n+            double convergent = p2.doubleValue() / q2.doubleValue();\n+            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2.longValue() < maxDenominator) {\n                 p0 = p1;\n                 p1 = p2;\n                 q0 = q1;\n@@ -227,12 +227,12 @@ public class Fraction\n             throw new FractionConversionException(value, maxIterations);\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n+        if (q2.longValue() < maxDenominator) {\n+            this.numerator = p2.intValueExact();\n+            this.denominator = q2.intValueExact();\n         } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            this.numerator = p1.intValueExact();\n+            this.denominator = q1.intValueExact();\n         }\n \n     }",
    "result_reason": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Overflow trying to convert 3.142 to fraction (18,194,153,748/858,719,503)",
    "test_result": "FAIL"
}