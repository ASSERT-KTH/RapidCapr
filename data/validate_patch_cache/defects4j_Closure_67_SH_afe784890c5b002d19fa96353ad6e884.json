{
    "patch": "          ) && assign.getNext() != null &&\n          assign.getNext().getType() == Token.EXPR_VOID) {\n        \n        Node call = assign.getNext().getFirstChild();\n        \n        if (call.getType() == Token.CALL &&\n            call.getLastChild().getType() == Token.STRING) {\n          return prototypeProperties.contains(\n              call.getLastChild().getString());\n        }\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..ecdbef22 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,20 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) && assign.getNext() != null &&\n+          assign.getNext().getType() == Token.EXPR_VOID) {\n+        \n+        Node call = assign.getNext().getFirstChild();\n+        \n+        if (call.getType() == Token.CALL &&\n+            call.getLastChild().getType() == Token.STRING) {\n+          return prototypeProperties.contains(\n+              call.getLastChild().getString());\n+        }\n+      }\n+\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}