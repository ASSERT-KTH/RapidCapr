{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    if (typeOfThis != null && typeOfThis.isUnknownType()) {\n      typeOfThis = null;\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = tryCastToObject(iface, t);\n      if (resolvedIface != null) {\n        resolvedInterfaces.add(resolvedIface);\n        changed |= (resolvedIface != iface);\n      } else {\n        // Return original object if it cannot be cast to ObjectType.\n        resolvedInterfaces.add(iface);\n      }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }\n\n  private ObjectType tryCastToObject(JSType type, ErrorReporter t) {\n    if (type == null || type.isUnknownType()) {\n      return null;\n    }\n    if (!(type instanceof ObjectType)) {\n      report(t, type.getSourceNode(), \"Expected ObjectType, but found \" + type);\n      return null;\n    }\n    return (ObjectType) type;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..8a1d1c4f 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,15 +868,22 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null && typeOfThis.isUnknownType()) {\n+      typeOfThis = null;\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+      ObjectType resolvedIface = tryCastToObject(iface, t);\n+      if (resolvedIface != null) {\n+        resolvedInterfaces.add(resolvedIface);\n+        changed |= (resolvedIface != iface);\n+      } else {\n+        // Return original object if it cannot be cast to ObjectType.\n+        resolvedInterfaces.add(iface);\n+      }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();\n@@ -891,6 +898,17 @@ public class FunctionType extends PrototypeObjectType {\n     return super.resolveInternal(t, scope);\n   }\n \n+  private ObjectType tryCastToObject(JSType type, ErrorReporter t) {\n+    if (type == null || type.isUnknownType()) {\n+      return null;\n+    }\n+    if (!(type instanceof ObjectType)) {\n+      report(t, type.getSourceNode(), \"Expected ObjectType, but found \" + type);\n+      return null;\n+    }\n+    return (ObjectType) type;\n+  }\n+\n   @Override\n   public String toDebugHashCodeString() {\n     if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}