{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        boolean seenLeapDay = false;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (!seenLeapDay && partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n                int day = Math.min(values[i], iChronology.getDaysInMonth(\n                        partial.getField(Chronology.monthOfYear()), values[i]));\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, day);\n                if (day == 29) {\n                    seenLeapDay = true;\n                }\n            } else {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        int[] result = iChronology.get(partial, instant);\n        if (seenLeapDay && (result[fieldIndex] > 28)) {\n            int day = iChronology.getDaysInMonth(result[Chronology.monthOfYear()], result[Chronology.year()]);\n            result[fieldIndex] = day;\n            result = iChronology.get(partial, iChronology.monthOfYear().getField(iChronology.getDateTimeMillis(result, 0L)).roundFloor(iChronology.getDateTimeMillis(result, 0L)));\n        }\n        return result;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..4ad3b9f9 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,40 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        boolean seenLeapDay = false;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (!seenLeapDay && partial.getFieldType(i).equals(DateTimeFieldType.dayOfMonth())) {\n+                int day = Math.min(values[i], iChronology.getDaysInMonth(\n+                        partial.getField(Chronology.monthOfYear()), values[i]));\n+                instant = partial.getFieldType(i).getField(iChronology).set(instant, day);\n+                if (day == 29) {\n+                    seenLeapDay = true;\n+                }\n+            } else {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        int[] result = iChronology.get(partial, instant);\n+        if (seenLeapDay && (result[fieldIndex] > 28)) {\n+            int day = iChronology.getDaysInMonth(result[Chronology.monthOfYear()], result[Chronology.year()]);\n+            result[fieldIndex] = day;\n+            result = iChronology.get(partial, iChronology.monthOfYear().getField(iChronology.getDateTimeMillis(result, 0L)).roundFloor(iChronology.getDateTimeMillis(result, 0L)));\n+        }\n+        return result;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}