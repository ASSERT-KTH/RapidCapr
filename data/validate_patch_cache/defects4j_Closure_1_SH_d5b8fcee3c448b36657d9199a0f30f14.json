{
    "patch": "    Preconditions.checkState(cfgNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return false;\n    }\n    Node argList = cfgNode.getFirstChild().getNext();\n    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n    boolean hasExceptionHandler = false;\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n            hasExceptionHandler = true;\n            break;\n        }\n    }\n    if (hasExceptionHandler) {\n        // Do not remove any arg if the function has an exception handler (try-catch).\n        return false;\n    }\n    boolean changed = false;\n    int i = 0;\n    for (Node arg : argList.children()) {\n        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n            arg.detach();\n            changed = true;\n        } else {\n            // Stop processing the argument list after the first argument\n            // which is referenced.\n            break;\n        }\n        i++;\n    }\n    if (changed) {\n        // Update the parameter count if argument list was changed.\n        cfgNode.putProp(Node.FUNCTION_ARGUMENTS_PROP, i);\n        compiler.reportCodeChange();\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..0683decc 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,43 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(cfgNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return false;\n+    }\n+    Node argList = cfgNode.getFirstChild().getNext();\n+    List<DiGraphEdge<Node, Branch>> branchEdges = cfg.getOutEdges(cfgNode);\n+    boolean hasExceptionHandler = false;\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+            hasExceptionHandler = true;\n+            break;\n+        }\n+    }\n+    if (hasExceptionHandler) {\n+        // Do not remove any arg if the function has an exception handler (try-catch).\n+        return false;\n+    }\n+    boolean changed = false;\n+    int i = 0;\n+    for (Node arg : argList.children()) {\n+        if (!referenced.contains(fnScope.getVar(arg.getString()))) {\n+            arg.detach();\n+            changed = true;\n+        } else {\n+            // Stop processing the argument list after the first argument\n+            // which is referenced.\n+            break;\n+        }\n+        i++;\n+    }\n+    if (changed) {\n+        // Update the parameter count if argument list was changed.\n+        cfgNode.putProp(Node.FUNCTION_ARGUMENTS_PROP, i);\n+        compiler.reportCodeChange();\n+    }\n+    return true;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}