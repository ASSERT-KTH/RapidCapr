{
    "patch": "private void declareArguments(Node functionNode) {\n    Node astParameters = functionNode.getSecondChild();\n    FunctionType functionType = (FunctionType) functionNode.getJSType();\n    if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n            Node jsDocParameter = jsDocParameters.getFirstChild();\n            for (Node astParameter : astParameters.children()) {\n                if (jsDocParameter != null) {\n                    JSType paramType = jsDocParameter.getJSType() != null\n                            ? jsDocParameter.getJSType()\n                            : getNativeType(UNKNOWN_TYPE);\n                    defineSlot(astParameter, functionNode, paramType, true);\n                    jsDocParameter = jsDocParameter.getNext();\n                } else {\n                    defineSlot(astParameter, functionNode, getNativeType(UNKNOWN_TYPE), true);\n                }\n            }\n        }\n    }\n    // Define arguments as a local variable to make sure that it isn't assigned elsewhere in\n    // the function or unused.\n    if (astParameters.hasChildren()) {\n        defineSlot(astParameters, functionNode, getNativeType(ARRAY_TYPE), true);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..d268d9b6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,32 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n+private void declareArguments(Node functionNode) {\n+    Node astParameters = functionNode.getSecondChild();\n+    FunctionType functionType = (FunctionType) functionNode.getJSType();\n+    if (functionType != null) {\n         Node jsDocParameters = functionType.getParametersNode();\n         if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+            Node jsDocParameter = jsDocParameters.getFirstChild();\n+            for (Node astParameter : astParameters.children()) {\n+                if (jsDocParameter != null) {\n+                    JSType paramType = jsDocParameter.getJSType() != null\n+                            ? jsDocParameter.getJSType()\n+                            : getNativeType(UNKNOWN_TYPE);\n+                    defineSlot(astParameter, functionNode, paramType, true);\n+                    jsDocParameter = jsDocParameter.getNext();\n+                } else {\n+                    defineSlot(astParameter, functionNode, getNativeType(UNKNOWN_TYPE), true);\n+                }\n             }\n-          }\n         }\n-      }\n-    } // end declareArguments\n+    }\n+    // Define arguments as a local variable to make sure that it isn't assigned elsewhere in\n+    // the function or unused.\n+    if (astParameters.hasChildren()) {\n+        defineSlot(astParameters, functionNode, getNativeType(ARRAY_TYPE), true);\n+    }\n+}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}