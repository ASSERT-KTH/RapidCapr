{
    "patch": "    public Complex multiply(final Complex factor) {\n        if (isNaN() || factor.isNaN()) {\n            return NaN;\n        }\n        final double realA = this.real;\n        final double imaginaryA = this.imaginary;\n        final double realB = factor.real;\n        final double imaginaryB = factor.imaginary;\n        return createComplex(realA * realB - imaginaryA * imaginaryB,\n                        realA * imaginaryB + imaginaryA * realB);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..8deeb303f 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -242,28 +242,16 @@ public class Complex implements Serializable  {\n      *         not equal to this Complex instance\n      * \n      */\n-    public boolean equals(Object other) {\n-        boolean ret;\n-        \n-        if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n+    public Complex multiply(final Complex factor) {\n+        if (isNaN() || factor.isNaN()) {\n+            return NaN;\n         }\n-      \n-        return ret;\n+        final double realA = this.real;\n+        final double imaginaryA = this.imaginary;\n+        final double realB = factor.real;\n+        final double imaginaryB = factor.imaginary;\n+        return createComplex(realA * realB - imaginaryA * imaginaryB,\n+                        realA * imaginaryB + imaginaryA * realB);\n     }\n     \n     /**",
    "result_reason": "error: method multiply(Complex) is already defined in class Complex",
    "test_result": "ERROR"
}