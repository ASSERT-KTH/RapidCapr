{
    "patch": "        final Gaussian.Parametric function = new Gaussian.Parametric();\n        final WeightedObservedPoint[] points = getObservations();\n        final double[] weights = new double[points.length];\n        Arrays.fill(weights, 1d);\n        final double[] guess = new ParameterGuesser(points).guess();\n        final double[] result = new double[guess.length];\n        try {\n            final SimpleCurveFitter fitter = SimpleCurveFitter.create(function, guess);\n            fitter.withWeighing(new DiagonalMatrix(weights, 1e-12))\n                .withMaxIterations(10000);\n            fitter.fit(Stream.of(points)\n                     .map(point -> new WeightedObservedPoint(1, point.getX(), point.getY()))\n                     .toArray(WeightedObservedPoint[]::new), guess);\n            for (int i = 0; i < guess.length; i++) {\n                result[i] = fitter.getFitParameters().get(i);\n            }\n        } catch (Exception e) {\n            return null;\n        }\n        return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..b0d263088 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,26 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final Gaussian.Parametric function = new Gaussian.Parametric();\n+        final WeightedObservedPoint[] points = getObservations();\n+        final double[] weights = new double[points.length];\n+        Arrays.fill(weights, 1d);\n+        final double[] guess = new ParameterGuesser(points).guess();\n+        final double[] result = new double[guess.length];\n+        try {\n+            final SimpleCurveFitter fitter = SimpleCurveFitter.create(function, guess);\n+            fitter.withWeighing(new DiagonalMatrix(weights, 1e-12))\n+                .withMaxIterations(10000);\n+            fitter.fit(Stream.of(points)\n+                     .map(point -> new WeightedObservedPoint(1, point.getX(), point.getY()))\n+                     .toArray(WeightedObservedPoint[]::new), guess);\n+            for (int i = 0; i < guess.length; i++) {\n+                result[i] = fitter.getFitParameters().get(i);\n+            }\n+        } catch (Exception e) {\n+            return null;\n+        }\n+        return result;\n     }\n \n     /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}