{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    Set<String> propertyNames = new HashSet<String>();\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        if (!child.isQuotedString()) {\n            reportNonquotedStringError(t, child);\n            continue;\n        }\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = getImplicitTypeOfExpression(child);\n\n        Property prop = getProperty(name);\n        Object propertyValue = processProperty(t, prop, type, null);\n\n        // Don't rename the property if we found an error or should not rename it.\n        if (!(propertyValue instanceof TypeMismatch) && !prop.scheduleRenaming(child, propertyValue)) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                compiler.report(\n                        JSError.make(\n                                t.getSourceName(),\n                                child,\n                                propertiesToErrorFor.get(name),\n                                Warnings.INVALIDATION,\n                                name,\n                                (type == null ? \"null\" : type.toString()),\n                                n.toString(),\n                                \"\"));\n            }\n        }\n        propertyNames.add(name);\n    }\n    checkPropertiesForDuplicates(t, n, propertyNames);\n}\n\nprivate void checkPropertiesForDuplicates(NodeTraversal t, Node n, Set<String> propertyNames) {\n    if (propertyNames.size() == 0) {\n        return;\n    }\n\n    if (propertyNames.size() == 1 && n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n        return;\n    }\n\n    List<String> props = new ArrayList<String>(propertyNames);\n    List<String> dups = new ArrayList<String>();\n\n    // Not very efficient but should not matter since every object has few properties\n    for (int i = 0; i < props.size(); i++) {\n        String prop = props.get(i);\n        for (int j = i + 1; j < props.size(); j++) {\n            if (prop.equals(props.get(j))) {\n                dups.add(prop);\n            }\n        }\n    }\n\n    if (dups.size() > 0) {\n        JSError jsError = JSError.make(t.getSourceName(), n, Warnings.DUPLICATE_OBJECT_KEY, dups.get(0));\n        compiler.report(jsError);\n    }\n}\n\nprivate void reportNonquotedStringError(NodeTraversal t, Node n) {\n    JSError jsError =\n            JSError.make(t.getSourceName(), n, Warnings.NON_NUMERIC_STRING_INDEX, n.getNext() == null ? \"\" : \",\");\n    compiler.report(jsError);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..05dd7f03 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,31 +487,77 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    Set<String> propertyNames = new HashSet<String>();\n+\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        if (!child.isQuotedString()) {\n+            reportNonquotedStringError(t, child);\n+            continue;\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        T type = getImplicitTypeOfExpression(child);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+        Object propertyValue = processProperty(t, prop, type, null);\n+\n+        // Don't rename the property if we found an error or should not rename it.\n+        if (!(propertyValue instanceof TypeMismatch) && !prop.scheduleRenaming(child, propertyValue)) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                compiler.report(\n+                        JSError.make(\n+                                t.getSourceName(),\n+                                child,\n+                                propertiesToErrorFor.get(name),\n+                                Warnings.INVALIDATION,\n+                                name,\n+                                (type == null ? \"null\" : type.toString()),\n+                                n.toString(),\n+                                \"\"));\n+            }\n+        }\n+        propertyNames.add(name);\n+    }\n+    checkPropertiesForDuplicates(t, n, propertyNames);\n+}\n+\n+private void checkPropertiesForDuplicates(NodeTraversal t, Node n, Set<String> propertyNames) {\n+    if (propertyNames.size() == 0) {\n+        return;\n+    }\n+\n+    if (propertyNames.size() == 1 && n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+        return;\n+    }\n+\n+    List<String> props = new ArrayList<String>(propertyNames);\n+    List<String> dups = new ArrayList<String>();\n+\n+    // Not very efficient but should not matter since every object has few properties\n+    for (int i = 0; i < props.size(); i++) {\n+        String prop = props.get(i);\n+        for (int j = i + 1; j < props.size(); j++) {\n+            if (prop.equals(props.get(j))) {\n+                dups.add(prop);\n+            }\n         }\n-      }\n     }\n \n+    if (dups.size() > 0) {\n+        JSError jsError = JSError.make(t.getSourceName(), n, Warnings.DUPLICATE_OBJECT_KEY, dups.get(0));\n+        compiler.report(jsError);\n+    }\n+}\n+\n+private void reportNonquotedStringError(NodeTraversal t, Node n) {\n+    JSError jsError =\n+            JSError.make(t.getSourceName(), n, Warnings.NON_NUMERIC_STRING_INDEX, n.getNext() == null ? \"\" : \",\");\n+    compiler.report(jsError);\n+}\n+\n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {\n         return;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}