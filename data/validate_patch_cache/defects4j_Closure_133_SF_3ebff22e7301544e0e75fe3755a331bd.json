{
    "patch": "private void parseJSDocInfo(String jsdoc) {\n  JSAnnotation annotation = new JSAnnotation();\n  JSDocInfoParser jsdocParser = new JSDocInfoParser(jsdoc, getSourceName(), lineno);\n  jsdocParser.parse(annotation);\n\n  // If we didn't see tags, treat it as a plain comment.\n  if (!annotation.hasOneLineDoc() && !annotation.isConstructor() &&\n      annotation.getVisibility() == null && annotation.getType() == null &&\n      annotation.getReturnType() == null && annotation.getThrowTypes().isEmpty() &&\n      annotation.getParamTypes().isEmpty() && annotation.getParamDescriptions().isEmpty() &&\n      annotation.getTemplateTypeNames().isEmpty() && annotation.getTemplateTypeDescriptions().isEmpty()) {\n    String remaining = getRemainingJSDocLine();\n    if (remaining.isEmpty()) {\n      plainComment.append(jsdoc);\n    } else {\n      plainComment.append(jsdoc.substring(0, jsdoc.length() - remaining.length() - 1));\n    }\n  } else {\n    annotations.add(annotation);\n    plainComment.append(jsdocParser.getDocCommentWithoutAnnotations());\n    String remaining = getRemainingJSDocLine();\n    if (!remaining.isEmpty()) {\n      plainComment.append(\" \").append(remaining);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..5e1f496d 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,32 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n+private void parseJSDocInfo(String jsdoc) {\n+  JSAnnotation annotation = new JSAnnotation();\n+  JSDocInfoParser jsdocParser = new JSDocInfoParser(jsdoc, getSourceName(), lineno);\n+  jsdocParser.parse(annotation);\n+\n+  // If we didn't see tags, treat it as a plain comment.\n+  if (!annotation.hasOneLineDoc() && !annotation.isConstructor() &&\n+      annotation.getVisibility() == null && annotation.getType() == null &&\n+      annotation.getReturnType() == null && annotation.getThrowTypes().isEmpty() &&\n+      annotation.getParamTypes().isEmpty() && annotation.getParamDescriptions().isEmpty() &&\n+      annotation.getTemplateTypeNames().isEmpty() && annotation.getTemplateTypeDescriptions().isEmpty()) {\n+    String remaining = getRemainingJSDocLine();\n+    if (remaining.isEmpty()) {\n+      plainComment.append(jsdoc);\n+    } else {\n+      plainComment.append(jsdoc.substring(0, jsdoc.length() - remaining.length() - 1));\n+    }\n+  } else {\n+    annotations.add(annotation);\n+    plainComment.append(jsdocParser.getDocCommentWithoutAnnotations());\n+    String remaining = getRemainingJSDocLine();\n+    if (!remaining.isEmpty()) {\n+      plainComment.append(\" \").append(remaining);\n+    }\n   }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}