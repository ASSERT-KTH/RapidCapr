{
    "patch": "  /**\n   * Returns the human-readable name of the type of a node.\n   * @param n The node whose type name to get.\n   * @param dereference Whether to dereference pointers to objects.\n   * @return The human-readable type name.\n   */\n  String getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n            // classes\n            objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n        } else {\n            objectType = objectType.getOwnerFunction().getPrototype(); // fix\n            while (objectType != null\n                && objectType.getConstructor() == null\n                && !objectType.hasOwnProperty(propName)) {\n              objectType = objectType.getImplicitPrototype();\n            }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null\n            && ((objectType.getConstructor() != null\n                 && !objectType.getConstructor().isAnonymous())\n                || objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..5b06a5b4 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,8 +721,13 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n+  /**\n+   * Returns the human-readable name of the type of a node.\n+   * @param n The node whose type name to get.\n+   * @param dereference Whether to dereference pointers to objects.\n+   * @return The human-readable type name.\n+   */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n-\n     // The best type name is the actual type name.\n \n     // If we're analyzing a GETPROP, the property may be inherited by the\n@@ -734,20 +739,23 @@ class TypeValidator {\n         String propName = n.getLastChild().getString();\n         if (objectType.getConstructor() != null &&\n             objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n+            // classes\n+            objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n         } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+            objectType = objectType.getOwnerFunction().getPrototype(); // fix\n+            while (objectType != null\n+                && objectType.getConstructor() == null\n+                && !objectType.hasOwnProperty(propName)) {\n+              objectType = objectType.getImplicitPrototype();\n+            }\n         }\n \n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n+        if (objectType != null\n+            && ((objectType.getConstructor() != null\n+                 && !objectType.getConstructor().isAnonymous())\n+                || objectType.isFunctionPrototypeType())) {\n           return objectType.toString() + \".\" + propName;\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}