{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        Dfp y = newInstance();\n        y.setIEEEFlagsBits(0);\n        y.array[0] = x;\n        y = y.multiply(this);\n        if (y.classify() != Dfp.INFINITE) {\n          y.shiftRight(1);\n        }\n        if (y.classify() == Dfp.QNAN) {\n          y = newInstance(getZero());\n        }\n        return y;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ea72b6e75 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,23 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        Dfp y = newInstance();\n+        y.setIEEEFlagsBits(0);\n+        y.array[0] = x;\n+        y = y.multiply(this);\n+        if (y.classify() != Dfp.INFINITE) {\n+          y.shiftRight(1);\n+        }\n+        if (y.classify() == Dfp.QNAN) {\n+          y = newInstance(getZero());\n+        }\n+        return y;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}