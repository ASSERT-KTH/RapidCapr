{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    final double dev = x - mean;\n    if (!Double.isInfinite(dev)) {\n        // Calculate the z-score of x\n        double z = dev / standardDeviation;\n        if (!Double.isInfinite(z)) {\n            try {\n                // Use the cumulative distribution function of the standard normal distribution\n                double result = 0.5 * (1.0 + Erf.erf(z / FastMath.sqrt(2.0)));\n                if (result < 0.0) {\n                    return 0.0;\n                } else if (result > 1.0) {\n                    return 1.0;\n                } else {\n                    return result;\n                }\n            } catch (MaxIterationsExceededException ex) {\n                throw new MathException(ex);\n            }\n        }\n    }\n    // Handle extreme values of x\n    return dev < 0 ? 0.0 : 1.0;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 0e124d852..470326eff 100644\n--- a/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -121,21 +121,33 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * @return CDF evaluated at {@code x}.\n      * @throws MathException if the algorithm fails to converge\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-        final double dev = x - mean;\n-        try {\n-        return 0.5 * (1.0 + Erf.erf((dev) /\n-                    (standardDeviation * FastMath.sqrt(2.0))));\n-        } catch (MaxIterationsExceededException ex) {\n-            if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38\n-                return 0;\n-            } else if (x > (mean + 20 * standardDeviation)) {\n-                return 1;\n-            } else {\n-                throw ex;\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n+    }\n+    final double dev = x - mean;\n+    if (!Double.isInfinite(dev)) {\n+        // Calculate the z-score of x\n+        double z = dev / standardDeviation;\n+        if (!Double.isInfinite(z)) {\n+            try {\n+                // Use the cumulative distribution function of the standard normal distribution\n+                double result = 0.5 * (1.0 + Erf.erf(z / FastMath.sqrt(2.0)));\n+                if (result < 0.0) {\n+                    return 0.0;\n+                } else if (result > 1.0) {\n+                    return 1.0;\n+                } else {\n+                    return result;\n+                }\n+            } catch (MaxIterationsExceededException ex) {\n+                throw new MathException(ex);\n             }\n         }\n     }\n+    // Handle extreme values of x\n+    return dev < 0 ? 0.0 : 1.0;\n+}\n \n     /**\n      * Return the absolute accuracy setting of the solver used to estimate",
    "result_reason": "org.apache.commons.math.ConvergenceException: Continued fraction diverged to NaN for value \u221e",
    "test_result": "FAIL"
}