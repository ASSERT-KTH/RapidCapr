{
    "patch": "protected RealPointValuePair getSolution() {\n    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n    int basicRows = getNumConstraints();\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n    // If all variables are non-basic, return the objective function coefficients\n    if (negativeVarColumn < 0 && basicRows == 0) {\n        for (int i = 0; i < coefficients.length; i++) {\n            int colIndex = columnLabels.indexOf(\"x\" + i);\n            coefficients[i] = colIndex >= 0 ? -f.getCoefficient(colIndex) : 0;\n        }\n        return new RealPointValuePair(coefficients, f.getConstant());\n    }\n\n    Set<Integer> basicRowsSet = new HashSet<>();\n    double mostNegative = negativeVarColumn >= 0 ? getEntry(getBasicRow(negativeVarColumn), getRhsOffset()) : 0;\n\n    // Fill the solution with the coefficients of the basic variables\n    for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n            coefficients[i] = 0;\n            continue;\n        }\n        Integer row = getBasicRow(colIndex);\n        if (row == null) {\n            coefficients[i] = -f.getCoefficient(colIndex);\n        } else {\n            if (negativeVarColumn >= 0 && row == getBasicRow(negativeVarColumn)) {\n                coefficients[i] = restrictToNonNegative ? 0 : mostNegative;\n            } else if (basicRowsSet.contains(row)) {\n                coefficients[i] = 0;\n            } else {\n                basicRowsSet.add(row);\n                coefficients[i] = getEntry(row, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n            }\n        }\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..e2d6a0a01 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,36 +393,46 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n-      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n-      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n-\n-      Set<Integer> basicRows = new HashSet<Integer>();\n-      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n-          int colIndex = columnLabels.indexOf(\"x\" + i);\n-          if (colIndex < 0) {\n+protected RealPointValuePair getSolution() {\n+    int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n+    int basicRows = getNumConstraints();\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+\n+    // If all variables are non-basic, return the objective function coefficients\n+    if (negativeVarColumn < 0 && basicRows == 0) {\n+        for (int i = 0; i < coefficients.length; i++) {\n+            int colIndex = columnLabels.indexOf(\"x\" + i);\n+            coefficients[i] = colIndex >= 0 ? -f.getCoefficient(colIndex) : 0;\n+        }\n+        return new RealPointValuePair(coefficients, f.getConstant());\n+    }\n+\n+    Set<Integer> basicRowsSet = new HashSet<>();\n+    double mostNegative = negativeVarColumn >= 0 ? getEntry(getBasicRow(negativeVarColumn), getRhsOffset()) : 0;\n+\n+    // Fill the solution with the coefficients of the basic variables\n+    for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n             coefficients[i] = 0;\n             continue;\n-          }\n-          Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n-          } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n-          }\n-      }\n-      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        }\n+        Integer row = getBasicRow(colIndex);\n+        if (row == null) {\n+            coefficients[i] = -f.getCoefficient(colIndex);\n+        } else {\n+            if (negativeVarColumn >= 0 && row == getBasicRow(negativeVarColumn)) {\n+                coefficients[i] = restrictToNonNegative ? 0 : mostNegative;\n+            } else if (basicRowsSet.contains(row)) {\n+                coefficients[i] = 0;\n+            } else {\n+                basicRowsSet.add(row);\n+                coefficients[i] = getEntry(row, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n+            }\n+        }\n     }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}