{
    "patch": "      if (n.isFunction()) {\n        // Don't traverse functions that are constructors or have the @this\n        // or @override annotation.\n        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n        if (jsDoc != null && \n            (jsDoc.isConstructor() || \n             jsDoc.isInterface() || \n             jsDoc.hasThisType() || \n             jsDoc.isOverride())) {\n          return false;\n        }\n\n        // Don't traverse inner functions (i.e. function expression).\n        Node parentFunction = NodeUtil.getEnclosingFunction(n);\n        if (parentFunction != null && parentFunction.getParent() != null) {\n          // `parentFunction` is nested inside another function or a block.\n          return false;\n        }\n\n        // Don't traverse if function is getting lent to a prototype.\n        if (parent != null && parent.getType() == Token.ASSIGN) {\n          Node lhs = parent.getFirstChild();\n          if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n\n        // Otherwise, traverse inner functions.\n        return true;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..aeb2e665 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,55 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (n.isFunction()) {\n+        // Don't traverse functions that are constructors or have the @this\n+        // or @override annotation.\n+        JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+        if (jsDoc != null && \n+            (jsDoc.isConstructor() || \n+             jsDoc.isInterface() || \n+             jsDoc.hasThisType() || \n+             jsDoc.isOverride())) {\n+          return false;\n+        }\n+\n+        // Don't traverse inner functions (i.e. function expression).\n+        Node parentFunction = NodeUtil.getEnclosingFunction(n);\n+        if (parentFunction != null && parentFunction.getParent() != null) {\n+          // `parentFunction` is nested inside another function or a block.\n+          return false;\n+        }\n+\n+        // Don't traverse if function is getting lent to a prototype.\n+        if (parent != null && parent.getType() == Token.ASSIGN) {\n+          Node lhs = parent.getFirstChild();\n+          if (NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP &&\n+              lhs.getLastChild().getString().equals(\"prototype\")) {\n+            return false;\n+          }\n+        }\n+\n+        // Otherwise, traverse inner functions.\n+        return true;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}