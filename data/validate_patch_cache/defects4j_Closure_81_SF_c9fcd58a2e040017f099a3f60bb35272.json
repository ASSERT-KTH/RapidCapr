{
    "patch": "public class IRFactory extends Parser {\n\n  private TransformDispatcher transformer;\n\n  public IRFactory() {\n    super();\n    Context cx = Context.enter();\n    // See org/mozilla/javascript/ScriptRuntime.id for the property \"arguments\".\n    setReservedKeywordAsIdentifier(true);\n    setRecordingComments(true);\n    setStrictMode(true);\n    // Don't create a new object for each script.\n    setSealedStdLib(true);\n    // Prevent scripts from exiting early.  Otherwise perfectly\n    // valid scripts like if (true) { return 1; } will throw an\n    // exception.  Ugh.\n    cx.setOptimizationLevel(-1);\n  }\n\n  @Override\n  protected IRFactory createFactory() {\n    return new IRFactory();\n  }\n\n  public Node getScriptAliases(Node scriptNode) {\n    AliasTransformation at = new AliasTransformation();\n    NodeTraversal.traverseEs6(\n        new NodeTraversal.Callback(at, true), scriptNode);\n    return at.getNewScriptNode();\n  }\n\n  private boolean isDirective(Node n) {\n    if (n == null) return false;\n    \n    // ensure that the first child exists and is a STRING node\n    Node firstChild = n.getFirstChild();\n    if (firstChild == null || firstChild.getType() != Token.STRING) {\n      return false;\n    }\n\n    String stringVal = firstChild.getString();\n    return ALLOWED_DIRECTIVES.contains(stringVal);\n  }\n\n  public Node transformTree(AstRoot root) {\n    Preconditions.checkState(transformer == null);\n    transformer = new TransformDispatcher();\n    Node tree = transform(root);\n    transformer = null;\n    return tree;\n  }\n\n  public class TransformDispatcher extends TypedXmlWriter implements TypeSafeDispatcher {\n\n    public boolean traverse(Node node) {\n      Node replacement = null;\n      switch (node.getType()) {\n        case Token.AND:\n          replacement = processAnd(node);\n          break;\n        case Token.ASSIGN:\n          replacement = processAssign(node);\n          break;\n        case Token.BLOCK:\n          replacement = processBlock((Block) node);\n          break;\n        case Token.BREAK:\n          replacement = processBreak(node);\n          break;\n        case Token.CALL:\n          replacement = processCall(node);\n          break;\n        case Token.CASE:\n          replacement = processSwitchCase(node);\n          break;\n        case Token.CATCH:\n          replacement = processTryCatchFinally(node);\n          break;\n        case Token.CLASS:\n          replacement = processClass(node);\n          break;\n        case Token.COLON:\n          replacement = processConditional(node);\n          break;\n        case Token.COMMA:\n          replacement = processComma(node);\n          break;\n        case Token.CONST:\n          replacement = processConstVar(node);\n          break;\n        case Token.CONTINUE:\n          replacement = processContinue(node);\n          break;\n        case Token.DEBUGGER:\n          replacement = processDebugger(node);\n          break;\n        case Token.DEFAULT:\n          replacement = processSwitchCase(node);\n          break;\n        case Token.DEFAULTNAMESPACE:\n          replacement = processDefaultXmlNamepace(node);\n          break;\n        case Token.DELETE:\n          replacement = processDelete(node);\n          break;\n        case Token.DO:\n          replacement = processDoLoop(node);\n          break;\n        case Token.DOT:\n          replacement = processDot(node);\n          break;\n        case Token.EMPTY:\n          replacement = processEmpty(node);\n          break;\n        case Token.ENUM:\n          replacement = processEnum(node);\n          break;\n        case Token.NAME:\n          replacement = processName(node);\n          break;\n        case Token.EXPR_RESULT:\n          replacement = processExpression(node);\n          break;\n        case Token.FALSE:\n        case Token.NULL:\n        case Token.NUMBER:\n        case Token.STRING:\n        case Token.THIS:\n        case Token.TRUE:\n          replacement = processConstant(node);\n          break;\n        case Token.FUNCTION:\n          replacement = processFunction(node);\n          break;\n        case Token.GENERATOR:\n          replacement = processGenerator(node);\n          break;\n        case Token.HOOK:\n          replacement = processHook(node);\n          break;\n        case Token.IF:\n          replacement = processIf(node);\n          break;\n        case Token.INC:\n        case Token.DEC:\n          replacement = processIncDec(node);\n          break;\n        case Token.INSTANCEOF:\n          replacement = processInstanceOf(node);\n          break;\n        case Token.LABEL:\n          replacement = processLabel(node);\n          break;\n        case Token.LET:\n          replacement = processLet(node);\n          break;\n        case Token.MEMBERHOF:\n          replacement = processMemberOf(node);\n          break;\n        case Token.NEW:\n          replacement = processNew(node);\n          break;\n        case Token.OBJECTLIT:\n          replacement = processObject(node);\n          break;\n        case Token.OR:\n          replacement = processOr(node);\n          break;\n        case Token.PROP:\n          replacement = processPropAccess(node);\n          break;\n        case Token.REGEXP:\n          replacement = processRegExp(node);\n          break;\n        case Token.REST:\n          replacement = processRest(node);\n          break;\n        case Token.RETURN:\n          replacement = processReturn(node);\n          break;\n        case Token.SCRIPT:\n          replacement = processScript(node);\n          break;\n        case Token.SETNAME:\n          replacement = processSetProp(node);\n          break;\n        case Token.SHEQ:\n        case Token.SHNE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.LT:\n        case Token.LE:\n        case Token.GT:\n        case Token.GE:\n          replacement = processCompare(node);\n          break;\n        case Token.SWITCH:\n          replacement = processSwitch(node);\n          break;\n        case Token.SUPER:\n          replacement = processSuper(node);\n          break;\n        case Token.TARGET:\n          replacement = processLabel(node);\n          break;\n        case Token.THROW:\n          replacement = processThrow(node);\n          break;\n        case Token.TRY:\n          replacement = processTry(node);\n          break;\n        case Token.UNARYOP:\n          replacement = processUnary(node);\n          break;\n        case Token.USE_STRICT:\n          // OK to skip over or delete.\n          replacement = processUseStrict(node);\n          break;\n        case Token.VAR:\n          replacement = processConstVar(node);\n          break;\n        case Token.WITH:\n          replacement = processWith(node);\n          break;\n        case Token.WHILE:\n          replacement = processWhile(node);\n          break;\n        case Token.XOR:\n          replacement = processBitOp(node);\n          break;\n        case Token.XML:\n          replacement = processLiteral(node);\n          break;\n        case Token.ARRAYLIT:\n          replacement = processLiteral(node);\n          break;\n        case Token.OBJECTLIT_WITH_SCOPE:\n          replacement = processLitWithScope(node);\n          break;\n        case Token.ARRAYCOMP:\n          replacement = processArrayComp(node);\n          break;\n        case Token.LC:\n          replacement = processArrayCompLoop(node);\n          break;\n        case Token.GENERATORCOMPREHENSION:\n          replacement = processGeneratorComp(node);\n          break;\n        default:\n          Preconditions.checkState(node instanceof DefineUsePair);\n          replacement = processDU((DefineUsePair) node);\n          break;\n      }\n\n      if (replacement != null) {\n        replacement.copyInformationFrom(node);\n        node.getParent().replaceChild(node, replacement);\n      }\n      return replacement != null;\n    }\n\n    public Node processAnd(Node n) {\n      return new Node(Token.AND, transform(n.getFirstChild()), transform(n.getLastChild()));\n    }\n\n    public Node processAssign(Node n) {\n      Token type = n.getType();\n      if (type == Token.ASSIGN) {\n        return new Node(\n          Token.ASSIGN,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_BITOR.equals(type)) {\n        return new Node(\n          Token.ASSIGN_BITOR,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_BITXOR.equals(type)) {\n        return new Node(\n          Token.ASSIGN_BITXOR,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_BITAND.equals(type)) {\n        return new Node(\n          Token.ASSIGN_BITAND,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_LSH.equals(type)) {\n        return new Node(\n          Token.ASSIGN_LSH,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_RSH.equals(type)) {\n        return new Node(\n          Token.ASSIGN_RSH,\n          transform(n.getFirstChild()),\n          transform(n.getLastChild()));\n      } else if (Token.ASSIGN_URSH.equals(type)) {\n        return ne",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..a18c9c95 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,183 +384,306 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+public class IRFactory extends Parser {\n+\n+  private TransformDispatcher transformer;\n+\n+  public IRFactory() {\n+    super();\n+    Context cx = Context.enter();\n+    // See org/mozilla/javascript/ScriptRuntime.id for the property \"arguments\".\n+    setReservedKeywordAsIdentifier(true);\n+    setRecordingComments(true);\n+    setStrictMode(true);\n+    // Don't create a new object for each script.\n+    setSealedStdLib(true);\n+    // Prevent scripts from exiting early.  Otherwise perfectly\n+    // valid scripts like if (true) { return 1; } will throw an\n+    // exception.  Ugh.\n+    cx.setOptimizationLevel(-1);\n+  }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  @Override\n+  protected IRFactory createFactory() {\n+    return new IRFactory();\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  public Node getScriptAliases(Node scriptNode) {\n+    AliasTransformation at = new AliasTransformation();\n+    NodeTraversal.traverseEs6(\n+        new NodeTraversal.Callback(at, true), scriptNode);\n+    return at.getNewScriptNode();\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+    \n+    // ensure that the first child exists and is a STRING node\n+    Node firstChild = n.getFirstChild();\n+    if (firstChild == null || firstChild.getType() != Token.STRING) {\n+      return false;\n     }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+    String stringVal = firstChild.getString();\n+    return ALLOWED_DIRECTIVES.contains(stringVal);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  public Node transformTree(AstRoot root) {\n+    Preconditions.checkState(transformer == null);\n+    transformer = new TransformDispatcher();\n+    Node tree = transform(root);\n+    transformer = null;\n+    return tree;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+  public class TransformDispatcher extends TypedXmlWriter implements TypeSafeDispatcher {\n+\n+    public boolean traverse(Node node) {\n+      Node replacement = null;\n+      switch (node.getType()) {\n+        case Token.AND:\n+          replacement = processAnd(node);\n+          break;\n+        case Token.ASSIGN:\n+          replacement = processAssign(node);\n+          break;\n+        case Token.BLOCK:\n+          replacement = processBlock((Block) node);\n+          break;\n+        case Token.BREAK:\n+          replacement = processBreak(node);\n+          break;\n+        case Token.CALL:\n+          replacement = processCall(node);\n+          break;\n+        case Token.CASE:\n+          replacement = processSwitchCase(node);\n+          break;\n+        case Token.CATCH:\n+          replacement = processTryCatchFinally(node);\n+          break;\n+        case Token.CLASS:\n+          replacement = processClass(node);\n+          break;\n+        case Token.COLON:\n+          replacement = processConditional(node);\n+          break;\n+        case Token.COMMA:\n+          replacement = processComma(node);\n+          break;\n+        case Token.CONST:\n+          replacement = processConstVar(node);\n+          break;\n+        case Token.CONTINUE:\n+          replacement = processContinue(node);\n+          break;\n+        case Token.DEBUGGER:\n+          replacement = processDebugger(node);\n+          break;\n+        case Token.DEFAULT:\n+          replacement = processSwitchCase(node);\n+          break;\n+        case Token.DEFAULTNAMESPACE:\n+          replacement = processDefaultXmlNamepace(node);\n+          break;\n+        case Token.DELETE:\n+          replacement = processDelete(node);\n+          break;\n+        case Token.DO:\n+          replacement = processDoLoop(node);\n+          break;\n+        case Token.DOT:\n+          replacement = processDot(node);\n+          break;\n+        case Token.EMPTY:\n+          replacement = processEmpty(node);\n+          break;\n+        case Token.ENUM:\n+          replacement = processEnum(node);\n+          break;\n+        case Token.NAME:\n+          replacement = processName(node);\n+          break;\n+        case Token.EXPR_RESULT:\n+          replacement = processExpression(node);\n+          break;\n+        case Token.FALSE:\n+        case Token.NULL:\n+        case Token.NUMBER:\n+        case Token.STRING:\n+        case Token.THIS:\n+        case Token.TRUE:\n+          replacement = processConstant(node);\n+          break;\n+        case Token.FUNCTION:\n+          replacement = processFunction(node);\n+          break;\n+        case Token.GENERATOR:\n+          replacement = processGenerator(node);\n+          break;\n+        case Token.HOOK:\n+          replacement = processHook(node);\n+          break;\n+        case Token.IF:\n+          replacement = processIf(node);\n+          break;\n+        case Token.INC:\n+        case Token.DEC:\n+          replacement = processIncDec(node);\n+          break;\n+        case Token.INSTANCEOF:\n+          replacement = processInstanceOf(node);\n+          break;\n+        case Token.LABEL:\n+          replacement = processLabel(node);\n+          break;\n+        case Token.LET:\n+          replacement = processLet(node);\n+          break;\n+        case Token.MEMBERHOF:\n+          replacement = processMemberOf(node);\n+          break;\n+        case Token.NEW:\n+          replacement = processNew(node);\n+          break;\n+        case Token.OBJECTLIT:\n+          replacement = processObject(node);\n+          break;\n+        case Token.OR:\n+          replacement = processOr(node);\n+          break;\n+        case Token.PROP:\n+          replacement = processPropAccess(node);\n+          break;\n+        case Token.REGEXP:\n+          replacement = processRegExp(node);\n+          break;\n+        case Token.REST:\n+          replacement = processRest(node);\n+          break;\n+        case Token.RETURN:\n+          replacement = processReturn(node);\n+          break;\n+        case Token.SCRIPT:\n+          replacement = processScript(node);\n+          break;\n+        case Token.SETNAME:\n+          replacement = processSetProp(node);\n+          break;\n+        case Token.SHEQ:\n+        case Token.SHNE:\n+        case Token.EQ:\n+        case Token.NE:\n+        case Token.LT:\n+        case Token.LE:\n+        case Token.GT:\n+        case Token.GE:\n+          replacement = processCompare(node);\n+          break;\n+        case Token.SWITCH:\n+          replacement = processSwitch(node);\n+          break;\n+        case Token.SUPER:\n+          replacement = processSuper(node);\n+          break;\n+        case Token.TARGET:\n+          replacement = processLabel(node);\n+          break;\n+        case Token.THROW:\n+          replacement = processThrow(node);\n+          break;\n+        case Token.TRY:\n+          replacement = processTry(node);\n+          break;\n+        case Token.UNARYOP:\n+          replacement = processUnary(node);\n+          break;\n+        case Token.USE_STRICT:\n+          // OK to skip over or delete.\n+          replacement = processUseStrict(node);\n+          break;\n+        case Token.VAR:\n+          replacement = processConstVar(node);\n+          break;\n+        case Token.WITH:\n+          replacement = processWith(node);\n+          break;\n+        case Token.WHILE:\n+          replacement = processWhile(node);\n+          break;\n+        case Token.XOR:\n+          replacement = processBitOp(node);\n+          break;\n+        case Token.XML:\n+          replacement = processLiteral(node);\n+          break;\n+        case Token.ARRAYLIT:\n+          replacement = processLiteral(node);\n+          break;\n+        case Token.OBJECTLIT_WITH_SCOPE:\n+          replacement = processLitWithScope(node);\n+          break;\n+        case Token.ARRAYCOMP:\n+          replacement = processArrayComp(node);\n+          break;\n+        case Token.LC:\n+          replacement = processArrayCompLoop(node);\n+          break;\n+        case Token.GENERATORCOMPREHENSION:\n+          replacement = processGeneratorComp(node);\n+          break;\n+        default:\n+          Preconditions.checkState(node instanceof DefineUsePair);\n+          replacement = processDU((DefineUsePair) node);\n+          break;\n       }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n+      if (replacement != null) {\n+        replacement.copyInformationFrom(node);\n+        node.getParent().replaceChild(node, replacement);\n       }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+      return replacement != null;\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n-\n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    public Node processAnd(Node n) {\n+      return new Node(Token.AND, transform(n.getFirstChild()), transform(n.getLastChild()));\n     }\n \n+    public Node processAssign(Node n) {\n+      Token type = n.getType();\n+      if (type == Token.ASSIGN) {\n+        return new Node(\n+          Token.ASSIGN,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_BITOR.equals(type)) {\n+        return new Node(\n+          Token.ASSIGN_BITOR,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_BITXOR.equals(type)) {\n+        return new Node(\n+          Token.ASSIGN_BITXOR,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_BITAND.equals(type)) {\n+        return new Node(\n+          Token.ASSIGN_BITAND,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_LSH.equals(type)) {\n+        return new Node(\n+          Token.ASSIGN_LSH,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_RSH.equals(type)) {\n+        return new Node(\n+          Token.ASSIGN_RSH,\n+          transform(n.getFirstChild()),\n+          transform(n.getLastChild()));\n+      } else if (Token.ASSIGN_URSH.equals(type)) {\n+        return ne\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}