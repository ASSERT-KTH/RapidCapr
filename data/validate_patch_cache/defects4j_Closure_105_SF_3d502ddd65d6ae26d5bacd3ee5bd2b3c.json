{
    "patch": "import com.google.gson.JsonArray;\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonObject;\nimport com.jsoniter.JsonIterator;\nimport com.jsoniter.any.Any;\nimport com.jsoniter.output.JsonStream;\nimport java.util.List;\nimport com.google.common.collect.Lists;\n\n/**\n  * Try to fold string concatenation of array literals that are arguments to join.\n  **/\nvoid tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n        return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n        return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    Node elem = arrayNode.getFirstChild();\n\n    while (elem != null) {\n        if (NodeUtil.isImmutableValue(elem)) {\n            if (sb.length() > 0) {\n                sb.append(joinString);\n            }\n            if (elem.isBoolean()) {\n                sb.append(elem.getBoolean());\n            }\n            if (elem.isString()) {\n                sb.append(elem.getString());\n            }\n            if (elem.isNumber()) {\n                sb.append(elem.getDouble());\n            }\n            if (elem.isNull()) {\n                sb.append(\"null\");\n            }\n        } else if (elem.isArrayLit() && elem.getChildCount() != 0) {\n            StringBuilder innerSb = new StringBuilder();\n            boolean next = false;\n            Node item = elem.getFirstChild();\n\n            while (item != null) {\n                if (next) {\n                    innerSb.append(\", \");\n                }\n                if (item.isBoolean()) {\n                    innerSb.append(item.getBoolean());\n                }\n                if (item.isString()) {\n                    innerSb.append(item.getString());\n                }\n                if (item.isNumber()) {\n                    innerSb.append(item.getDouble());\n                }\n                if (item.isNull()) {\n                    innerSb.append(\"null\");\n                }\n\n                item = item.getNext();\n                next = true;\n            }\n\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                foldedSize += sb.length() + 2;\n                sb.setLength(0);\n            }\n\n            arrayFoldedChildren.add(Node.newString(\"[\" + innerSb + \"]\"));\n            foldedSize += InlineCostEstimator.getCost(elem) + 2;\n        } else if (elem.isObjectLit() && elem.getChildCount() != 0) {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                foldedSize += sb.length() + 2;\n                sb.setLength(0);\n            }\n\n            arrayFoldedChildren.add(Node.newString(JsonStream.serialize(parseObjectLiteral(elem))));\n            foldedSize += InlineCostEstimator.getCost(elem) + 2;\n        } else {\n            if (sb.length() > 0) {\n                arrayFoldedChildren.add(Node.newString(sb.toString()));\n                foldedSize += sb.length() + 2;\n                sb.setLength(0);\n            }\n            foldedSize += InlineCostEstimator.getCost(elem);\n            arrayFoldedChildren.add(elem);\n        }\n\n        elem = elem.getNext();\n    }\n\n    if (sb.length() > 0) {\n        foldedSize += sb.length() + 2;\n        arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n\n    // One for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n    int originalSize = InlineCostEstimator.getCost(n);\n\n    switch (arrayFoldedChildren.size()) {\n        case 0:\n            Node emptyStringNode = IR.string(\"\");\n            parent.replaceChild(n, emptyStringNode);\n            break;\n\n        case 1:\n            Node foldedStringNode = arrayFoldedChildren.remove(0);\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n\n            if (foldedStringNode.getType() != Token.STRING) {\n                Node replacement = new Node(Token.ADD, IR.string(\"\"), foldedStringNode);\n                foldedStringNode = replacement;\n            }\n\n            parent.replaceChild(n, foldedStringNode);\n            break;\n\n        default:\n            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n                return;\n            }\n\n            int kJoinOverhead = \"[].join()\".length();\n            foldedSize += kJoinOverhead;\n            foldedSize += InlineCostEstimator.getCost(right);\n\n            if (foldedSize > originalSize) {\n                return;\n            }\n            arrayNode.detachChildren();\n\n            for (Node node : arrayFoldedChildren) {\n                arrayNode.addChildToBack(node);\n            }\n            break;\n    }\n\n    t.reportCodeChange();\n}\n\nprivate static JsonObject parseObjectLiteral(Node node) {\n    JsonObject jsonObject = new JsonObject();\n    for (Node key = node.getFirstChild(); key != null; key = key.getNext()) {\n      String value = \"\";\n        if (key.getFirstChild() != null) {\n            Node child = key.getFirstChild();\n            if (child.isString()) {\n                value = child.getString();\n            } else if (child.isNumber()) {\n                value = Integer.toString((int) child.getDouble());\n            } else if (child.isTrue()) {\n                value = Boolean.toString(true);\n            } else if (child.isFalse()) {\n                value = Boolean.toString(false);\n            } else if (child.isNull()) {\n                value = \"null\";\n            }\n        }\n\n        jsonObject.addProperty(key.getString(), value);\n    }\n\n    return jsonObject;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..c6beda13 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,18 +1458,28 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n-                         Node parent) {\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.jsoniter.JsonIterator;\n+import com.jsoniter.any.Any;\n+import com.jsoniter.output.JsonStream;\n+import java.util.List;\n+import com.google.common.collect.Lists;\n+\n+/**\n+  * Try to fold string concatenation of array literals that are arguments to join.\n+  **/\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right, Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n-      return;\n+        return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return;\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n+        return;\n     }\n \n     String joinString = NodeUtil.getStringValue(right);\n@@ -1477,76 +1487,157 @@ class FoldConstants extends AbstractPostOrderCallback\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n     Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n+\n     while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem)) {\n-        if (sb.length() > 0) {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getStringValue(elem));\n-      } else {\n-        if (sb.length() > 0) {\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(Node.newString(sb.toString()));\n-          sb = new StringBuilder();\n+        if (NodeUtil.isImmutableValue(elem)) {\n+            if (sb.length() > 0) {\n+                sb.append(joinString);\n+            }\n+            if (elem.isBoolean()) {\n+                sb.append(elem.getBoolean());\n+            }\n+            if (elem.isString()) {\n+                sb.append(elem.getString());\n+            }\n+            if (elem.isNumber()) {\n+                sb.append(elem.getDouble());\n+            }\n+            if (elem.isNull()) {\n+                sb.append(\"null\");\n+            }\n+        } else if (elem.isArrayLit() && elem.getChildCount() != 0) {\n+            StringBuilder innerSb = new StringBuilder();\n+            boolean next = false;\n+            Node item = elem.getFirstChild();\n+\n+            while (item != null) {\n+                if (next) {\n+                    innerSb.append(\", \");\n+                }\n+                if (item.isBoolean()) {\n+                    innerSb.append(item.getBoolean());\n+                }\n+                if (item.isString()) {\n+                    innerSb.append(item.getString());\n+                }\n+                if (item.isNumber()) {\n+                    innerSb.append(item.getDouble());\n+                }\n+                if (item.isNull()) {\n+                    innerSb.append(\"null\");\n+                }\n+\n+                item = item.getNext();\n+                next = true;\n+            }\n+\n+            if (sb.length() > 0) {\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                foldedSize += sb.length() + 2;\n+                sb.setLength(0);\n+            }\n+\n+            arrayFoldedChildren.add(Node.newString(\"[\" + innerSb + \"]\"));\n+            foldedSize += InlineCostEstimator.getCost(elem) + 2;\n+        } else if (elem.isObjectLit() && elem.getChildCount() != 0) {\n+            if (sb.length() > 0) {\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                foldedSize += sb.length() + 2;\n+                sb.setLength(0);\n+            }\n+\n+            arrayFoldedChildren.add(Node.newString(JsonStream.serialize(parseObjectLiteral(elem))));\n+            foldedSize += InlineCostEstimator.getCost(elem) + 2;\n+        } else {\n+            if (sb.length() > 0) {\n+                arrayFoldedChildren.add(Node.newString(sb.toString()));\n+                foldedSize += sb.length() + 2;\n+                sb.setLength(0);\n+            }\n+            foldedSize += InlineCostEstimator.getCost(elem);\n+            arrayFoldedChildren.add(elem);\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      elem = elem.getNext();\n+\n+        elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(Node.newString(sb.toString()));\n+        foldedSize += sb.length() + 2;\n+        arrayFoldedChildren.add(Node.newString(sb.toString()));\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n+    // One for each comma.\n+    foldedSize += arrayFoldedChildren.size() - 1;\n     int originalSize = InlineCostEstimator.getCost(n);\n+\n     switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        parent.replaceChild(n, emptyStringNode);\n-        break;\n+        case 0:\n+            Node emptyStringNode = IR.string(\"\");\n+            parent.replaceChild(n, emptyStringNode);\n+            break;\n \n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        parent.replaceChild(n, foldedStringNode);\n-        break;\n+        case 1:\n+            Node foldedStringNode = arrayFoldedChildren.remove(0);\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n \n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += InlineCostEstimator.getCost(right);\n-        if (foldedSize > originalSize) {\n-          return;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n+            if (foldedStringNode.getType() != Token.STRING) {\n+                Node replacement = new Node(Token.ADD, IR.string(\"\"), foldedStringNode);\n+                foldedStringNode = replacement;\n+            }\n+\n+            parent.replaceChild(n, foldedStringNode);\n+            break;\n+\n+        default:\n+            if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n+                return;\n+            }\n+\n+            int kJoinOverhead = \"[].join()\".length();\n+            foldedSize += kJoinOverhead;\n+            foldedSize += InlineCostEstimator.getCost(right);\n+\n+            if (foldedSize > originalSize) {\n+                return;\n+            }\n+            arrayNode.detachChildren();\n+\n+            for (Node node : arrayFoldedChildren) {\n+                arrayNode.addChildToBack(node);\n+            }\n+            break;\n+    }\n+\n+    t.reportCodeChange();\n+}\n+\n+private static JsonObject parseObjectLiteral(Node node) {\n+    JsonObject jsonObject = new JsonObject();\n+    for (Node key = node.getFirstChild(); key != null; key = key.getNext()) {\n+      String value = \"\";\n+        if (key.getFirstChild() != null) {\n+            Node child = key.getFirstChild();\n+            if (child.isString()) {\n+                value = child.getString();\n+            } else if (child.isNumber()) {\n+                value = Integer.toString((int) child.getDouble());\n+            } else if (child.isTrue()) {\n+                value = Boolean.toString(true);\n+            } else if (child.isFalse()) {\n+                value = Boolean.toString(false);\n+            } else if (child.isNull()) {\n+                value = \"null\";\n+            }\n         }\n-        break;\n+\n+        jsonObject.addProperty(key.getString(), value);\n     }\n-    t.getCompiler().reportCodeChange();\n-  }\n+\n+    return jsonObject;\n+}\n \n   /**\n    * Try to fold array-element. e.g [1, 2, 3][10];",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}