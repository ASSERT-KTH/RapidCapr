{
    "patch": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    final Gaussian.Parametric function = new Gaussian.Parametric();\n    final double[] initialGuess = {guess[0], guess[1], guess[2]};\n    final double[] lowerBound = {0, 0, 0};\n    final double[] upperBound = {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};\n    final WeightedObservedPoints obs = getObservations();\n    final double[] weights = getWeights();\n    final double[] result = new double[guess.length + 2];\n    try {\n        final CurveFitter<ParametricUnivariateFunction> fitter = new CurveFitter<ParametricUnivariateFunction>(new LevenbergMarquardtOptimizer());\n        fitter.addObservedPointsFunction(obs.toList(), function);\n        final ParametricUnivariateFunction fitted = fitter.fit(function, initialGuess, weights, lowerBound, upperBound)[0];\n        for (int i = 0; i < guess.length; ++i) {\n            result[i] = fitted.getParameters()[i];\n        }\n        result[3] = DescriptiveStatistics.variance(obs.getWeightsArray(), weights);\n        result[4] = DescriptiveStatistics.mean(obs.getWeightsArray(), weights);\n    } catch (MathIllegalArgumentException e) {\n        throw new MathRuntimeException(e);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..4558fc8be 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,29 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    final Gaussian.Parametric function = new Gaussian.Parametric();\n+    final double[] initialGuess = {guess[0], guess[1], guess[2]};\n+    final double[] lowerBound = {0, 0, 0};\n+    final double[] upperBound = {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};\n+    final WeightedObservedPoints obs = getObservations();\n+    final double[] weights = getWeights();\n+    final double[] result = new double[guess.length + 2];\n+    try {\n+        final CurveFitter<ParametricUnivariateFunction> fitter = new CurveFitter<ParametricUnivariateFunction>(new LevenbergMarquardtOptimizer());\n+        fitter.addObservedPointsFunction(obs.toList(), function);\n+        final ParametricUnivariateFunction fitted = fitter.fit(function, initialGuess, weights, lowerBound, upperBound)[0];\n+        for (int i = 0; i < guess.length; ++i) {\n+            result[i] = fitted.getParameters()[i];\n+        }\n+        result[3] = DescriptiveStatistics.variance(obs.getWeightsArray(), weights);\n+        result[4] = DescriptiveStatistics.mean(obs.getWeightsArray(), weights);\n+    } catch (MathIllegalArgumentException e) {\n+        throw new MathRuntimeException(e);\n     }\n+    return result;\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}