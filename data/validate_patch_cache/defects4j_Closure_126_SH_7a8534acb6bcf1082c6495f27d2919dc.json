{
    "patch": "// Just a 'try/catch/finally'.\nif (n.isTry()) {\n  // Don't try to minimize the exits of finally blocks, as this can cause\n  // problems if it changes the completion type of the finally block.\n  // See ECMA 262 Sections 8.9 & 12.14.\n  if (NodeUtil.hasFinally(n)) {\n    Node finallyBlock = NodeUtil.getFinallyBlock(n);\n    tryMinimizeExits(finallyBlock, exitType, labelName);\n  }\n\n  Node tryBlock = n.getFirstChild();\n  tryMinimizeExits(tryBlock, exitType, labelName);\n  Node catchNodes = NodeUtil.getCatchBlock(n);\n  if (NodeUtil.hasCatchHandler(catchNodes)) {\n    Preconditions.checkState(catchNodes.hasOneChild());\n    Node catchNode = catchNodes.getFirstChild();\n    Node catchBlock = catchNode.getLastChild();\n    tryMinimizeExits(catchBlock, exitType, labelName);\n  }\n  return;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..17ee0cfc 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,27 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+// Just a 'try/catch/finally'.\n+if (n.isTry()) {\n+  // Don't try to minimize the exits of finally blocks, as this can cause\n+  // problems if it changes the completion type of the finally block.\n+  // See ECMA 262 Sections 8.9 & 12.14.\n+  if (NodeUtil.hasFinally(n)) {\n+    Node finallyBlock = NodeUtil.getFinallyBlock(n);\n+    tryMinimizeExits(finallyBlock, exitType, labelName);\n+  }\n+\n+  Node tryBlock = n.getFirstChild();\n+  tryMinimizeExits(tryBlock, exitType, labelName);\n+  Node catchNodes = NodeUtil.getCatchBlock(n);\n+  if (NodeUtil.hasCatchHandler(catchNodes)) {\n+    Preconditions.checkState(catchNodes.hasOneChild());\n+    Node catchNode = catchNodes.getFirstChild();\n+    Node catchBlock = catchNode.getLastChild();\n+    tryMinimizeExits(catchBlock, exitType, labelName);\n+  }\n+  return;\n+}\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}