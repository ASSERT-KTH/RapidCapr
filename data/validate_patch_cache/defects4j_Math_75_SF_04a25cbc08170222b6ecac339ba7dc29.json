{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Number) {\n        return getCumPct((Number) v);\n    } else {\n        throw new IllegalArgumentException(\"Input must be a number.\");\n    }\n}\n\nprivate double getCumPct(Number v) {\n    int index = Arrays.binarySearch(values, v.doubleValue());\n    if (index < 0) {\n        index = -(index + 1);\n    }\n    return (double) index / values.length * 100;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..b19230385 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,21 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Number) {\n+        return getCumPct((Number) v);\n+    } else {\n+        throw new IllegalArgumentException(\"Input must be a number.\");\n     }\n+}\n+\n+private double getCumPct(Number v) {\n+    int index = Arrays.binarySearch(values, v.doubleValue());\n+    if (index < 0) {\n+        index = -(index + 1);\n+    }\n+    return (double) index / values.length * 100;\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}