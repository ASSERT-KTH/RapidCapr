{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // fix [2985073]\n        int year = iChronology.year().get(instant);\n        int month = iChronology.monthOfYear().get(instant);\n        int day = iChronology.dayOfMonth().get(instant);\n        int hour = iChronology.hourOfDay().get(instant);\n        int minute = iChronology.minuteOfHour().get(instant);\n        int second = iChronology.secondOfMinute().get(instant);\n        int millis = iChronology.millisOfSecond().get(instant);\n        // add the months without wrapping to the next month\n        int monthAfterAdd = iChronology.monthOfYear().add(month, valueToAdd);\n        int dayOfMonth = day;    \n        if (monthAfterAdd != month) {\n            // we've added a different month than we started with.\n            // calculate the maximum day of that month to adjust the day field.\n            dayOfMonth = Math.min(day, iChronology.dayOfMonth().getMaximumValue(year, monthAfterAdd));\n            if (dayOfMonth != day) {\n                // if the day field has been changed, we need to validate and adjust the instant\n                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n                if (dayOfMonth > maxDay) {\n                    // dayOfMonth is too large, adjust it to the last day of the previous month\n                    dayOfMonth = maxDay;\n                }\n                instant = iChronology.getDateTimeMillis(year, month, dayOfMonth, hour, minute, second, millis);\n                // move to the first day of the current month\n                instant = iChronology.monthOfYear().set(instant, monthAfterAdd);\n                instant = iChronology.dayOfMonth().set(instant, 1);\n                // adjust to the last day of the current month\n                instant = iChronology.dayOfMonth().add(instant, -1);\n                // adjust to the correct time\n                instant = iChronology.hourOfDay().set(instant, hour);\n                instant = iChronology.minuteOfHour().set(instant, minute);\n                instant = iChronology.secondOfMinute().set(instant, second);\n                instant = iChronology.millisOfSecond().set(instant, millis);\n            } else {\n                // we can just set the month field and leave the day field alone\n                instant = iChronology.monthOfYear().set(instant, monthAfterAdd);\n            }\n        }\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..7972af69 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,61 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        // fix [2985073]\n+        int year = iChronology.year().get(instant);\n+        int month = iChronology.monthOfYear().get(instant);\n+        int day = iChronology.dayOfMonth().get(instant);\n+        int hour = iChronology.hourOfDay().get(instant);\n+        int minute = iChronology.minuteOfHour().get(instant);\n+        int second = iChronology.secondOfMinute().get(instant);\n+        int millis = iChronology.millisOfSecond().get(instant);\n+        // add the months without wrapping to the next month\n+        int monthAfterAdd = iChronology.monthOfYear().add(month, valueToAdd);\n+        int dayOfMonth = day;    \n+        if (monthAfterAdd != month) {\n+            // we've added a different month than we started with.\n+            // calculate the maximum day of that month to adjust the day field.\n+            dayOfMonth = Math.min(day, iChronology.dayOfMonth().getMaximumValue(year, monthAfterAdd));\n+            if (dayOfMonth != day) {\n+                // if the day field has been changed, we need to validate and adjust the instant\n+                int maxDay = iChronology.dayOfMonth().getMaximumValue(year, month);\n+                if (dayOfMonth > maxDay) {\n+                    // dayOfMonth is too large, adjust it to the last day of the previous month\n+                    dayOfMonth = maxDay;\n+                }\n+                instant = iChronology.getDateTimeMillis(year, month, dayOfMonth, hour, minute, second, millis);\n+                // move to the first day of the current month\n+                instant = iChronology.monthOfYear().set(instant, monthAfterAdd);\n+                instant = iChronology.dayOfMonth().set(instant, 1);\n+                // adjust to the last day of the current month\n+                instant = iChronology.dayOfMonth().add(instant, -1);\n+                // adjust to the correct time\n+                instant = iChronology.hourOfDay().set(instant, hour);\n+                instant = iChronology.minuteOfHour().set(instant, minute);\n+                instant = iChronology.secondOfMinute().set(instant, second);\n+                instant = iChronology.millisOfSecond().set(instant, millis);\n+            } else {\n+                // we can just set the month field and leave the day field alone\n+                instant = iChronology.monthOfYear().set(instant, monthAfterAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}