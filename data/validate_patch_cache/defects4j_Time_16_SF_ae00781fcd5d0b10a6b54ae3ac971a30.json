{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            chrono, iLocale, iPivotYear, iDefaultYear);\n        bucket.saveField(DateTimeFieldType.millis(), instant.getMillis());\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis());\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n                chrono = chrono.withZone(parsedZone);\n            } else {\n                if (bucket.getZone() != null) {\n                    chrono = chrono.withZone(bucket.getZone());\n                }\n            }\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        } else if (bucket.getZone() != null) {\n            instant.setZone(bucket.getZone());\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..07c2f727 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,26 +699,28 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            chrono, iLocale, iPivotYear, iDefaultYear);\n+        bucket.saveField(DateTimeFieldType.millis(), instant.getMillis());\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        instant.setMillis(bucket.computeMillis());\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(bucket.getOffsetInteger());\n+                chrono = chrono.withZone(parsedZone);\n+            } else {\n+                if (bucket.getZone() != null) {\n+                    chrono = chrono.withZone(bucket.getZone());\n+                }\n+            }\n         }\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n+        } else if (bucket.getZone() != null) {\n+            instant.setZone(bucket.getZone());\n         }\n         return newPos;\n     }",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(Chronology,Locale,Integer,int)",
    "test_result": "ERROR"
}