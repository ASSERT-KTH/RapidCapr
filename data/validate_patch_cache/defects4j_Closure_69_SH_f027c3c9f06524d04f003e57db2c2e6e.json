{
    "patch": "      JSType typeOfThis = functionType.getTypeOfThis();\n      if (typeOfThis != null && !(typeOfThis.isUnknownType() ||\n          NodeUtil.isGet(typeOfThis.getRoot()) ||\n          NodeUtil.isOptChainGet(typeOfThis.getRoot()) ||\n          NodeUtil.isHook(typeOfThis.getRoot()))) {\n        report(t, n, INVALID_THIS_TYPE);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..297f98ba 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,13 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      JSType typeOfThis = functionType.getTypeOfThis();\n+      if (typeOfThis != null && !(typeOfThis.isUnknownType() ||\n+          NodeUtil.isGet(typeOfThis.getRoot()) ||\n+          NodeUtil.isOptChainGet(typeOfThis.getRoot()) ||\n+          NodeUtil.isHook(typeOfThis.getRoot()))) {\n+        report(t, n, INVALID_THIS_TYPE);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}