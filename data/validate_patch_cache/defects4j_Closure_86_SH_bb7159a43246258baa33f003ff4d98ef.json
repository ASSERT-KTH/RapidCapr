{
    "patch": "    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n            && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value) || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true if we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return isNewWithLiterals(value);\n      default:\n        // Other ops force a local value:\n        //  x = '' + g (x is now a local string)\n        //  x -= g (x is now a local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  private static boolean isNewWithLiterals(Node value) {\n    if (value.getFirstChild().getType() == Token.NAME) {\n      String name = value.getFirstChild().getString();\n      StaticRef ref = Scope.createName(name);\n\n      // We know that there were no parameters, so we can just pass\n      // the default argument list.\n      StaticRef.Type refType = value.getJSType().toMaybeFunctionType().getReferenceType();\n      DeclareFunctionType functionType = refType.getDeclaration();\n      Preconditions.checkNotNull(functionType);\n      Preconditions.checkState(\n          functionType.getParameters().isEmpty(),\n          \"New with parameters is not supported: %s\",\n          value);\n      Scope scope = Scope.createGlobalScope(NodeUtil.getEnclosingScope(value));\n      final SymbolScope symbolScope = new SymbolScope(scope);\n      return functionType.hasSideEffects()\n          || functionType.getTopScope().evalWithScope(\n              scope,\n              symbolScope,\n              Collections.<JSType>emptyList(),\n              GenericTypeResolver.IDENTITY);\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..5b4429ac 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2462,7 +2462,87 @@ public final class NodeUtil {\n         // TODO(nicksantos): This needs to be changed so that it\n         // returns true iff we're sure the value was never aliased from inside\n         // the constructor (similar to callHasLocalResult)\n-        return true;\n+    switch (value.getType()) {\n+      case Token.ASSIGN:\n+        // A result that is aliased by a non-local name, is effectively the\n+        // same as returning a non-local name, but this doesn't matter if the\n+        // value is immutable.\n+        return NodeUtil.isImmutableValue(value.getLastChild())\n+            || (locals.apply(value)\n+                && evaluatesToLocalValue(value.getLastChild(), locals));\n+      case Token.COMMA:\n+        return evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.AND:\n+      case Token.OR:\n+        return evaluatesToLocalValue(value.getFirstChild(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.HOOK:\n+        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n+            && evaluatesToLocalValue(value.getLastChild(), locals);\n+      case Token.INC:\n+      case Token.DEC:\n+        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n+          return evaluatesToLocalValue(value.getFirstChild(), locals);\n+        } else {\n+          return true;\n+        }\n+      case Token.THIS:\n+        return locals.apply(value);\n+      case Token.NAME:\n+        return isImmutableValue(value) || locals.apply(value);\n+      case Token.GETELEM:\n+      case Token.GETPROP:\n+        // There is no information about the locality of object properties.\n+        return locals.apply(value);\n+      case Token.CALL:\n+        return callHasLocalResult(value) || isToStringMethodCall(value)\n+            || locals.apply(value);\n+      case Token.NEW:\n+        // TODO(nicksantos): This needs to be changed so that it\n+        // returns true if we're sure the value was never aliased from inside\n+        // the constructor (similar to callHasLocalResult)\n+        return isNewWithLiterals(value);\n+      default:\n+        // Other ops force a local value:\n+        //  x = '' + g (x is now a local string)\n+        //  x -= g (x is now a local number)\n+        if (isAssignmentOp(value)\n+            || isSimpleOperator(value)\n+            || isImmutableValue(value)) {\n+          return true;\n+        }\n+\n+        throw new IllegalStateException(\n+            \"Unexpected expression node\" + value +\n+            \"\\n parent:\" + value.getParent());\n+    }\n+  }\n+\n+  private static boolean isNewWithLiterals(Node value) {\n+    if (value.getFirstChild().getType() == Token.NAME) {\n+      String name = value.getFirstChild().getString();\n+      StaticRef ref = Scope.createName(name);\n+\n+      // We know that there were no parameters, so we can just pass\n+      // the default argument list.\n+      StaticRef.Type refType = value.getJSType().toMaybeFunctionType().getReferenceType();\n+      DeclareFunctionType functionType = refType.getDeclaration();\n+      Preconditions.checkNotNull(functionType);\n+      Preconditions.checkState(\n+          functionType.getParameters().isEmpty(),\n+          \"New with parameters is not supported: %s\",\n+          value);\n+      Scope scope = Scope.createGlobalScope(NodeUtil.getEnclosingScope(value));\n+      final SymbolScope symbolScope = new SymbolScope(scope);\n+      return functionType.hasSideEffects()\n+          || functionType.getTopScope().evalWithScope(\n+              scope,\n+              symbolScope,\n+              Collections.<JSType>emptyList(),\n+              GenericTypeResolver.IDENTITY);\n+    }\n+    return true;\n+  }\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}