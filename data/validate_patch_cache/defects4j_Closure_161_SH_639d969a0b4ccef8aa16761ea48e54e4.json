{
    "patch": "// Check that the access is not an assignment target\nif (NodeUtil.isLValue(n)) {\n  return n;\n}\n\n// Check that the index is a constant and in bounds\nif (right.getType() != Token.NUMBER) {\n  return n;\n}\ndouble index = right.getDouble();\nint intIndex = (int) index;\nif (intIndex < 0) {\n  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n  return n;\n}\n\nNode elem = left.getFirstChild();\nfor (int i = 0; ele",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..eb907d73 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,24 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check that the access is not an assignment target\n+if (NodeUtil.isLValue(n)) {\n+  return n;\n+}\n+\n+// Check that the index is a constant and in bounds\n+if (right.getType() != Token.NUMBER) {\n+  return n;\n+}\n+double index = right.getDouble();\n+int intIndex = (int) index;\n+if (intIndex < 0) {\n+  error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  return n;\n+}\n+\n+Node elem = left.getFirstChild();\n+for (int i = 0; ele\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}