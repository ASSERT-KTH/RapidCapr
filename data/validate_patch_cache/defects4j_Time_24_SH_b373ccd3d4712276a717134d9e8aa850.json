{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                if (i < count - 1 && savedFields[i + 1].iField.getType().equals(DateTimeFieldType.weekyear())) {\n                    // Have next field, and it's a weekyear.\n                    // Before checking, ensure that the day of week and week of year are consistent\n                    int thisWeekyear = savedFields[i].iValue;\n                    int thisWeekOfWeekyear = savedFields[i + 1].iField.get(thisWeekyear);\n                    if (savedFields[i].iField instanceof LenientDateTimeField) {\n                        thisWeekOfWeekyear = ((LenientDateTimeField) savedFields[i].iField).get(thisWeekyear,\n                                savedFields[i + 1].iValue);\n                    }\n                    if (thisWeekOfWeekyear <= 0) {\n                        if (text != null) {\n                            throw new IllegalArgumentException(\n                                    \"Cannot parse \\\"\" + text + \"\\\": week of weekyear must be positive: \" + thisWeekOfWeekyear);\n                        } else {\n                            throw new IllegalArgumentException(\n                                    \"Week of weekyear must be positive: \" + thisWeekOfWeekyear);\n                        }\n                    }\n                    // Create a new instance with fixed weekyear and week of weekyear values.\n                    int weekyear = savedFields[i + 1].iField.set(thisWeekyear, thisWeekOfWeekyear);\n                    millis = savedFields[i + 1].iField.set(millis, weekyear);\n                    ++i; // Skip next field.\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..93971c8c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,39 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (i < count - 1 && savedFields[i + 1].iField.getType().equals(DateTimeFieldType.weekyear())) {\n+                    // Have next field, and it's a weekyear.\n+                    // Before checking, ensure that the day of week and week of year are consistent\n+                    int thisWeekyear = savedFields[i].iValue;\n+                    int thisWeekOfWeekyear = savedFields[i + 1].iField.get(thisWeekyear);\n+                    if (savedFields[i].iField instanceof LenientDateTimeField) {\n+                        thisWeekOfWeekyear = ((LenientDateTimeField) savedFields[i].iField).get(thisWeekyear,\n+                                savedFields[i + 1].iValue);\n+                    }\n+                    if (thisWeekOfWeekyear <= 0) {\n+                        if (text != null) {\n+                            throw new IllegalArgumentException(\n+                                    \"Cannot parse \\\"\" + text + \"\\\": week of weekyear must be positive: \" + thisWeekOfWeekyear);\n+                        } else {\n+                            throw new IllegalArgumentException(\n+                                    \"Week of weekyear must be positive: \" + thisWeekOfWeekyear);\n+                        }\n+                    }\n+                    // Create a new instance with fixed weekyear and week of weekyear values.\n+                    int weekyear = savedFields[i + 1].iField.set(thisWeekyear, thisWeekOfWeekyear);\n+                    millis = savedFields[i + 1].iField.set(millis, weekyear);\n+                    ++i; // Skip next field.\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}