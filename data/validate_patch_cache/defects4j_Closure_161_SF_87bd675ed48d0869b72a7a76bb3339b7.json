{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    double index;\n    int intIndex;\n    try {\n      index = right.getDouble();\n      intIndex = (int) index;\n      if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n      }\n    } catch (NumberFormatException e) {\n      return n;\n    }\n\n    if (left.isEmpty()) {\n      if (intIndex == 0) {\n        Node newNode = NodeUtil.newUndefinedNode(n);\n        left.addChildToBack(newNode);\n        n.getParent().replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n      } else {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n    }\n\n    int elemSize = left.getChildCount();\n    if (intIndex < 0) {\n      intIndex = elemSize + intIndex;\n    }\n    if (intIndex >= elemSize || intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.removeFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n      elem = left.removeFirstChild();\n    }\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(n);\n    }\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..dadc594d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,48 +1274,49 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n+    double index;\n+    int intIndex;\n+    try {\n+      index = right.getDouble();\n+      intIndex = (int) index;\n+      if (intIndex != index) {\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n+      }\n+    } catch (NumberFormatException e) {\n       return n;\n     }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+    if (left.isEmpty()) {\n+      if (intIndex == 0) {\n+        Node newNode = NodeUtil.newUndefinedNode(n);\n+        left.addChildToBack(newNode);\n+        n.getParent().replaceChild(n, newNode);\n+        reportCodeChange();\n+        return newNode;\n+      } else {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n     }\n \n+    int elemSize = left.getChildCount();\n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+      intIndex = elemSize + intIndex;\n     }\n-\n-    if (elem == null) {\n+    if (intIndex >= elemSize || intIndex < 0) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n+    Node elem = left.removeFirstChild();\n+    for (int i = 0; i < intIndex; i++) {\n+      elem = left.removeFirstChild();\n+    }\n     if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n+      elem = NodeUtil.newUndefinedNode(n);\n     }\n-\n-    // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}