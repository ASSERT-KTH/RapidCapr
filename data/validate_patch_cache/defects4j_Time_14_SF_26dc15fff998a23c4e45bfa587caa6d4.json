{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    } else if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        long instant = 0L;\n        for (int i = 0, size = partial.size(); i < size; i++) {\n            DateTimeField field = partial.getField(i);\n            int value = values[i];\n            if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                int prevMonthDays = field.getDurationField().getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY\n                                    * field.getRange().getMinimumValue();\n                int nextMonthDays = field.getDurationField().getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY\n                                    * field.getRange().getMaximumValue();\n                int monthOfYear = value + valueToAdd;\n                if (monthOfYear >= 0) {\n                    int year = monthOfYear / 12;\n                    int month = monthOfYear % 12;\n                    LocalDate date = new LocalDate(values[0], values[1], values[2], chrono);\n                    DateTime newDate = date.plusYears(year).plusMonths(month);\n                    values = new int[] {newDate.getYear(), newDate.getMonthOfYear(),\n                                        newDate.getDayOfMonth(), values[3], values[4], values[5], values[6], values[7]};\n                } else {\n                    int year = (monthOfYear + 1) / 12 - 1;\n                    int month = 12 + monthOfYear % 12;\n                    LocalDate date = new LocalDate(values[0], values[1], values[2], chrono);\n                    DateTime newDate = date.plusYears(year).plusMonths(month);\n                    int maxDay = chrono.dayOfMonth().getMaximumValue(newDate.getYear(), newDate.getMonthOfYear());\n                    int day = Math.min(values[2], maxDay);\n                    values = new int[] {newDate.getYear(), newDate.getMonthOfYear(), day,\n                                        values[3], values[4], values[5], values[6], values[7]};\n                }\n            } else {\n                instant = field.set(instant, value);\n            }\n        }\n        instant = add(instant, valueToAdd);\n        return chrono.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..de086f90 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,48 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    } else if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        long instant = 0L;\n+        for (int i = 0, size = partial.size(); i < size; i++) {\n+            DateTimeField field = partial.getField(i);\n+            int value = values[i];\n+            if (field.getType() == DateTimeFieldType.monthOfYear()) {\n+                int prevMonthDays = field.getDurationField().getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY\n+                                    * field.getRange().getMinimumValue();\n+                int nextMonthDays = field.getDurationField().getUnitMillis() / DateTimeConstants.MILLIS_PER_DAY\n+                                    * field.getRange().getMaximumValue();\n+                int monthOfYear = value + valueToAdd;\n+                if (monthOfYear >= 0) {\n+                    int year = monthOfYear / 12;\n+                    int month = monthOfYear % 12;\n+                    LocalDate date = new LocalDate(values[0], values[1], values[2], chrono);\n+                    DateTime newDate = date.plusYears(year).plusMonths(month);\n+                    values = new int[] {newDate.getYear(), newDate.getMonthOfYear(),\n+                                        newDate.getDayOfMonth(), values[3], values[4], values[5], values[6], values[7]};\n+                } else {\n+                    int year = (monthOfYear + 1) / 12 - 1;\n+                    int month = 12 + monthOfYear % 12;\n+                    LocalDate date = new LocalDate(values[0], values[1], values[2], chrono);\n+                    DateTime newDate = date.plusYears(year).plusMonths(month);\n+                    int maxDay = chrono.dayOfMonth().getMaximumValue(newDate.getYear(), newDate.getMonthOfYear());\n+                    int day = Math.min(values[2], maxDay);\n+                    values = new int[] {newDate.getYear(), newDate.getMonthOfYear(), day,\n+                                        values[3], values[4], values[5], values[6], values[7]};\n+                }\n+            } else {\n+                instant = field.set(instant, value);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = add(instant, valueToAdd);\n+        return chrono.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}