{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isLValue(parent)) {\n        if (NodeUtil.isPropertyTestOfLValue(parent, getParent())) {\n          // Don't traverse the function if it's being set as the value\n          // of an object literal property that has a non-trivial getter.\n          Node rValue = NodeUtil.getRValueOfLValue(parent);\n          if (rValue == n || !NodeUtil.mayHaveSideEffects(rValue)) {\n            return false;\n          }\n        } else {\n          // Don't traverse the function if it's being assigned to a named variable\n          // or property in an unreachable code block or a conditional expression that\n          // won't always be true.\n          Node lValue = NodeUtil.getBestLValueRepresentation(parent.getFirstChild());\n          if (NodeUtil.canBeSideEffected(lValue) ||\n              !conjoinsToBoolean(parent)) {\n            return false;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..0b1c433c 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,26 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isLValue(parent)) {\n+        if (NodeUtil.isPropertyTestOfLValue(parent, getParent())) {\n+          // Don't traverse the function if it's being set as the value\n+          // of an object literal property that has a non-trivial getter.\n+          Node rValue = NodeUtil.getRValueOfLValue(parent);\n+          if (rValue == n || !NodeUtil.mayHaveSideEffects(rValue)) {\n+            return false;\n+          }\n+        } else {\n+          // Don't traverse the function if it's being assigned to a named variable\n+          // or property in an unreachable code block or a conditional expression that\n+          // won't always be true.\n+          Node lValue = NodeUtil.getBestLValueRepresentation(parent.getFirstChild());\n+          if (NodeUtil.canBeSideEffected(lValue) ||\n+              !conjoinsToBoolean(parent)) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}