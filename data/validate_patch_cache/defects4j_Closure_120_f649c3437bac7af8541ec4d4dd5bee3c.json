{
    "patch": "        } else if (block.isLoop) {\n          return false;\n        }\n      }\n\n      // ensure that the reference's basic block is the only block that assigns to the variable\n      for (Reference reference : references.subList(1, references.size())) {\n        if (reference.isAssignmentToName()) {\n          if (reference.basicBlock == ref.basicBlock || reference.basicBlock.dominates(ref.basicBlock)) {\n            return false;\n          }\n        } else if (reference.isVarDeclaration()) {\n          // allow constants to be declared anywhere\n          if (!ref.isVarDeclaration() ||\n              (!ref.getSymbol().isDeclaredConst() && ref.basicBlock != reference.basicBlock)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..d6609115 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        } else if (block.isLoop) {\n+          return false;\n+        }\n+      }\n+\n+      // ensure that the reference's basic block is the only block that assigns to the variable\n+      for (Reference reference : references.subList(1, references.size())) {\n+        if (reference.isAssignmentToName()) {\n+          if (reference.basicBlock == ref.basicBlock || reference.basicBlock.dominates(ref.basicBlock)) {\n+            return false;\n+          }\n+        } else if (reference.isVarDeclaration()) {\n+          // allow constants to be declared anywhere\n+          if (!ref.isVarDeclaration() ||\n+              (!ref.getSymbol().isDeclaredConst() && ref.basicBlock != reference.basicBlock)) {\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}