{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isQuotedString() || child.isGetterDef() || child.isSetterDef()) {\n          // We should never see a mix of numbers and strings.\n          String name = child.getString();\n          T type = typeSystem.getType(getScope(), n, name);\n          Property prop = getProperty(name);\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(\n                  JSError.make(\n                      t.getSourceName(),\n                      child,\n                      propertiesToErrorFor.get(name),\n                      Warnings.INVALIDATION,\n                      name,\n                      type == null ? \"null\" : type.toString(),\n                      n.toString(),\n                      \"\"));\n            }\n          }\n        } else if (child.isComputedProp()) {\n          // Do not rename computed properties.\n          // Note: In ES6, all properties can be computed.\n          // In ES5, only string literals can be computed.\n          Node property = child.getFirstChild();\n          if (property != null) {\n            Node typeNode = getObjLitKeyType(property);\n            if (typeNode != null) {\n              JSType type = typeNode.getJSType();\n              Property prop = getProperty(type);\n              if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n                // TODO(user): It doesn't look like the user can do much in this\n                // case right now.\n                String msg =\n                    String.format(\n                        \"definition of computed property '%s' could not be renamed\", type);\n                compiler.report(JSError.make(t.getSourceName(), child, Warnings.INVALIDATION, msg));\n              }\n            }\n          }\n        } else {\n          // We should never see a mix of numbers and strings.\n          String name = child.getString();\n          if (child.isNumber()) {\n            name = String.valueOf(name);\n          }\n          Property prop = getProperty(name);\n          T type = typeSystem.getType(getScope(), n);\n\n          // Trim the string to remove trailing unicode escape characters (e.g. \"\\u200b\").\n          name = name.trim();\n\n          if (type != null && type.isEnumType()) {\n            enumToProcessedName.put(name, name);\n          }\n          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            // TODO(user): It doesn't look like the user can do much in this\n            // case right now.\n            if (propertiesToErrorFor.containsKey(name)) {\n              compiler.report(\n                  JSError.make(\n                      t.getSourceName(),\n                      child,\n                      propertiesToErrorFor.get(name),\n                      Warnings.INVALIDATION,\n                      name,\n                      type == null ? \"null\" : type.toString(),\n                      n.toString(),\n                      \"\"));\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..3952a9bd 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,25 +488,78 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isQuotedString() || child.isGetterDef() || child.isSetterDef()) {\n+          // We should never see a mix of numbers and strings.\n+          String name = child.getString();\n+          T type = typeSystem.getType(getScope(), n, name);\n+          Property prop = getProperty(name);\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(\n+                  JSError.make(\n+                      t.getSourceName(),\n+                      child,\n+                      propertiesToErrorFor.get(name),\n+                      Warnings.INVALIDATION,\n+                      name,\n+                      type == null ? \"null\" : type.toString(),\n+                      n.toString(),\n+                      \"\"));\n+            }\n+          }\n+        } else if (child.isComputedProp()) {\n+          // Do not rename computed properties.\n+          // Note: In ES6, all properties can be computed.\n+          // In ES5, only string literals can be computed.\n+          Node property = child.getFirstChild();\n+          if (property != null) {\n+            Node typeNode = getObjLitKeyType(property);\n+            if (typeNode != null) {\n+              JSType type = typeNode.getJSType();\n+              Property prop = getProperty(type);\n+              if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+                // TODO(user): It doesn't look like the user can do much in this\n+                // case right now.\n+                String msg =\n+                    String.format(\n+                        \"definition of computed property '%s' could not be renamed\", type);\n+                compiler.report(JSError.make(t.getSourceName(), child, Warnings.INVALIDATION, msg));\n+              }\n+            }\n+          }\n+        } else {\n+          // We should never see a mix of numbers and strings.\n+          String name = child.getString();\n+          if (child.isNumber()) {\n+            name = String.valueOf(name);\n+          }\n+          Property prop = getProperty(name);\n+          T type = typeSystem.getType(getScope(), n);\n+\n+          // Trim the string to remove trailing unicode escape characters (e.g. \"\\u200b\").\n+          name = name.trim();\n+\n+          if (type != null && type.isEnumType()) {\n+            enumToProcessedName.put(name, name);\n+          }\n+          if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            // TODO(user): It doesn't look like the user can do much in this\n+            // case right now.\n+            if (propertiesToErrorFor.containsKey(name)) {\n+              compiler.report(\n+                  JSError.make(\n+                      t.getSourceName(),\n+                      child,\n+                      propertiesToErrorFor.get(name),\n+                      Warnings.INVALIDATION,\n+                      name,\n+                      type == null ? \"null\" : type.toString(),\n+                      n.toString(),\n+                      \"\"));\n+            }\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}