{
    "patch": "        // Check if function is unnamed\n        boolean isUnnamedFunction = false;\n        if (name == null) {\n          name = new Name();\n          name.setIdentifier(\"\");\n          isUnnamedFunction = true;\n        }\n\n        Node node = newNode(Token.FUNCTION);\n\n        Node newName = transform(name);\n        // If function is unnamed, mark line number and character number of parentheses\n        if (isUnnamedFunction) {\n          newName.setLineno(functionNode.getLineno());\n          int lpCharNo = functionNode.getPosition() + functionNode.getLength();\n          // Check if the function has parameters\n          if (functionNode.getParamCount() > 0) {\n            String lastParamName = functionNode.getParamOrVarName(functionNode.getParamCount() - 1);\n            lpCharNo = functionNode.getParamOrVarEnd(lastParamName) + 1;\n          }\n          newName.setCharno(position2Charno(lpCharNo));\n        }\n        node.addChildToBack(newName);\n\n        Node lp = newNode(Token.LP);\n        int lparenCharNo = functionNode.getPosition() + functionNode.getLength();\n        if (functionNode.getParamCount() > 0) {\n          String firstParamName = functionNode.getParamOrVarName(0);\n          lparenCharNo = functionNode.getParamOrVarOffset(firstParamName) - 1;\n        }\n        lp.setCharno(position2Charno(lparenCharNo));\n        if (name != null) {\n          lp.setLineno(name.getLineno());\n        } else {\n          lp.setLineno(functionNode.getLineno());\n        }\n        for (AstNode param : functionNode.getParams()) {\n          lp.addChildToBack(transform(param));\n        }\n        node.addChildToBack(lp);\n\n        Node bodyNode = transform(functionNode.getBody());\n        parseDirectives(bodyNode);\n        node.addChildToBack(bodyNode);\n\n        return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..deaff39f 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,52 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+        // Check if function is unnamed\n+        boolean isUnnamedFunction = false;\n+        if (name == null) {\n+          name = new Name();\n+          name.setIdentifier(\"\");\n+          isUnnamedFunction = true;\n+        }\n+\n+        Node node = newNode(Token.FUNCTION);\n+\n+        Node newName = transform(name);\n+        // If function is unnamed, mark line number and character number of parentheses\n+        if (isUnnamedFunction) {\n+          newName.setLineno(functionNode.getLineno());\n+          int lpCharNo = functionNode.getPosition() + functionNode.getLength();\n+          // Check if the function has parameters\n+          if (functionNode.getParamCount() > 0) {\n+            String lastParamName = functionNode.getParamOrVarName(functionNode.getParamCount() - 1);\n+            lpCharNo = functionNode.getParamOrVarEnd(lastParamName) + 1;\n+          }\n+          newName.setCharno(position2Charno(lpCharNo));\n+        }\n+        node.addChildToBack(newName);\n+\n+        Node lp = newNode(Token.LP);\n+        int lparenCharNo = functionNode.getPosition() + functionNode.getLength();\n+        if (functionNode.getParamCount() > 0) {\n+          String firstParamName = functionNode.getParamOrVarName(0);\n+          lparenCharNo = functionNode.getParamOrVarOffset(firstParamName) - 1;\n+        }\n+        lp.setCharno(position2Charno(lparenCharNo));\n+        if (name != null) {\n+          lp.setLineno(name.getLineno());\n+        } else {\n+          lp.setLineno(functionNode.getLineno());\n+        }\n+        for (AstNode param : functionNode.getParams()) {\n+          lp.addChildToBack(transform(param));\n+        }\n+        node.addChildToBack(lp);\n+\n+        Node bodyNode = transform(functionNode.getBody());\n+        parseDirectives(bodyNode);\n+        node.addChildToBack(bodyNode);\n+\n+        return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable isUnnamedFunction is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}