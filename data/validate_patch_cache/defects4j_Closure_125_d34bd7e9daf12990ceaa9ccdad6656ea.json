{
    "patch": "  private void visitNew(NodeTraversal t, Node n) {\n    Node constructor = n.getFirstChild();\n    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n      FunctionType fnType = type.toMaybeFunctionType();\n      if (fnType != null) {\n        visitParameterList(t, n, fnType);\n        ensureTyped(t, n, fnType.getInstanceType());\n      } else if (type.isUnknownType()) {\n        // If the type is unknown, still visit the parameter list.\n        visitParameterList(t, n, null);\n      } else if (!type.isConstructor() && !type.isEmptyType()) {\n        report(t, n, NOT_A_CONSTRUCTOR);\n        ensureTyped(t, n);\n      } else {\n        ensureTyped(t, n);\n      }\n    } else {\n      report(t, n, NOT_A_CONSTRUCTOR);\n      ensureTyped(t, n);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 4e053258..aef89023 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1653,6 +1653,11 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits a NEW node.\n    */\n+  private void visitNew(NodeTraversal t, Node n) {\n+    Node constructor = n.getFirstChild();\n+    JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n+    if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {\n+      FunctionType fnType = type.toMaybeFunctionType();\n   private void visitNew(NodeTraversal t, Node n) {\n     Node constructor = n.getFirstChild();\n     JSType type = getJSType(constructor).restrictByNotNullOrUndefined();\n@@ -1661,6 +1666,22 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n       if (fnType != null) {\n         visitParameterList(t, n, fnType);\n         ensureTyped(t, n, fnType.getInstanceType());\n+      } else if (type.isUnknownType()) {\n+        // If the type is unknown, still visit the parameter list.\n+        visitParameterList(t, n, null);\n+      } else if (!type.isConstructor() && !type.isEmptyType()) {\n+        report(t, n, NOT_A_CONSTRUCTOR);\n+        ensureTyped(t, n);\n+      } else {\n+        ensureTyped(t, n);\n+      }\n+    } else {\n+      report(t, n, NOT_A_CONSTRUCTOR);\n+      ensureTyped(t, n);\n+    }\n+  }\n+        visitParameterList(t, n, fnType);\n+        ensureTyped(t, n, fnType.getInstanceType());\n       } else {\n         ensureTyped(t, n);\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}