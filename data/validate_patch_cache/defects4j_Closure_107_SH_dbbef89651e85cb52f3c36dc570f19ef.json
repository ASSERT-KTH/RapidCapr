{
    "patch": "    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else {\n      if (level == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n        // When the level is ADVANCED_OPTIMIZATIONS, goog.getMsg is going to be inlined,\n        // so we need to include i18n support to avoid warnings.\n        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        options.setWarningLevel(DiagnosticGroups.I18N, CheckLevel.WARNING);\n        options.messageBundle = new EmptyMessageBundle();\n      } else {\n        // In other levels, if there's no translations file, the user might reasonably\n        // write their own implementation of goog.getMsg that makes the substitution at runtime.\n        // Without a bundle, this will cause a warning in the compiler, so we use NullMessageBundle.\n        options.messageBundle = new NullMessageBundle();\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..8949c44f 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,28 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+    if (!flags.translationsFile.isEmpty()) {\n+      try {\n+        options.messageBundle = new XtbMessageBundle(\n+            new FileInputStream(flags.translationsFile),\n+            flags.translationsProject);\n+      } catch (IOException e) {\n+        throw new RuntimeException(\"Reading XTB file\", e);\n+      }\n+    } else {\n+      if (level == CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+        // When the level is ADVANCED_OPTIMIZATIONS, goog.getMsg is going to be inlined,\n+        // so we need to include i18n support to avoid warnings.\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+        options.setWarningLevel(DiagnosticGroups.I18N, CheckLevel.WARNING);\n+        options.messageBundle = new EmptyMessageBundle();\n+      } else {\n+        // In other levels, if there's no translations file, the user might reasonably\n+        // write their own implementation of goog.getMsg that makes the substitution at runtime.\n+        // Without a bundle, this will cause a warning in the compiler, so we use NullMessageBundle.\n+        options.messageBundle = new NullMessageBundle();\n+      }\n+    }\n     }\n \n     return options;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}