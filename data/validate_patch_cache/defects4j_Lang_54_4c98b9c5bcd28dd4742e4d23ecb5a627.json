{
    "patch": "    public static Locale toLocale(String str) {\n        if (str == null) {\n            return null;\n        }\n\n        int len = str.length();\n        if (len < 2) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        char ch0 = str.charAt(0);\n        char ch1 = str.charAt(1);\n        if (!isAlpha(ch0) || !isAlpha(ch1)) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n\n        if (len == 2) {\n            return new Locale(str, \"\");\n        } else {\n            if (str.charAt(2) != '_' && str.charAt(2) != '-') {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n\n            int i = 3;\n            if (len - i >= 2 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1))) {\n                // Country is present\n                i += 2;\n                boolean variantStarted = false;\n                while (i < len) {\n                    char c = str.charAt(i);\n                    if (c == '_' || c == '-') {\n                        if (variantStarted) {\n                            // Found second separator while parsing variant, which is invalid\n                            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                        }\n                        variantStarted = true;\n                    } else if (!isAlpha(c) && !isDigit(c) && c != '-') {\n                        // Found non-alphanumeric character that is not '_' or '-', which is invalid\n                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                    }\n                    ++i;\n                }\n                if (variantStarted) {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n                } else {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n                }\n            } else if (len - i == 4 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1)) && isAlpha(str.charAt(i + 2)) && isAlpha(str.charAt(i + 3))) {\n                // Variant is present (language and country both missing)\n                return new Locale(str.substring(0, 2), \"\", str.substring(3));\n            } else if (len - i >= 5 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1)) && str.charAt(i + 2) == '_' && isAlpha(str.charAt(i + 3)) && isAlpha(str.charAt(i + 4))) {\n                // Country and variant are present (language missing)\n                if (len - i == 6 && (str.charAt(i + 5) == '_' || str.charAt(i + 5) == '-')) {\n                    // Variant is empty\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), \"\");\n                } else {\n                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(i + 2));\n                }\n            } else {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n        }\n    }\n\n    private static boolean isAlpha(char c) {\n        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n    }\n\n    private static boolean isDigit(char c) {\n        return c >= '0' && c <= '9';\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..5a0bab5a 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -95,37 +95,74 @@ public class LocaleUtils {\n         if (str == null) {\n             return null;\n         }\n+\n         int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n+        if (len < 2) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n+\n         char ch0 = str.charAt(0);\n         char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n+        if (!isAlpha(ch0) || !isAlpha(ch1)) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n+\n         if (len == 2) {\n             return new Locale(str, \"\");\n         } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n+            if (str.charAt(2) != '_' && str.charAt(2) != '-') {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+\n+            int i = 3;\n+            if (len - i >= 2 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1))) {\n+                // Country is present\n+                i += 2;\n+                boolean variantStarted = false;\n+                while (i < len) {\n+                    char c = str.charAt(i);\n+                    if (c == '_' || c == '-') {\n+                        if (variantStarted) {\n+                            // Found second separator while parsing variant, which is invalid\n+                            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                        }\n+                        variantStarted = true;\n+                    } else if (!isAlpha(c) && !isDigit(c) && c != '-') {\n+                        // Found non-alphanumeric character that is not '_' or '-', which is invalid\n+                        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                    }\n+                    ++i;\n                 }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+                if (variantStarted) {\n+                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+                } else {\n+                    return new Locale(str.substring(0, 2), str.substring(3, 5));\n+                }\n+            } else if (len - i == 4 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1)) && isAlpha(str.charAt(i + 2)) && isAlpha(str.charAt(i + 3))) {\n+                // Variant is present (language and country both missing)\n+                return new Locale(str.substring(0, 2), \"\", str.substring(3));\n+            } else if (len - i >= 5 && isAlpha(str.charAt(i)) && isAlpha(str.charAt(i + 1)) && str.charAt(i + 2) == '_' && isAlpha(str.charAt(i + 3)) && isAlpha(str.charAt(i + 4))) {\n+                // Country and variant are present (language missing)\n+                if (len - i == 6 && (str.charAt(i + 5) == '_' || str.charAt(i + 5) == '-')) {\n+                    // Variant is empty\n+                    return new Locale(str.substring(0, 2), str.substring(3, 5), \"\");\n+                } else {\n+                    return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(i + 2));\n+                }\n+            } else {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n         }\n     }\n \n+    private static boolean isAlpha(char c) {\n+        return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');\n+    }\n+\n+    private static boolean isDigit(char c) {\n+        return c >= '0' && c <= '9';\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: fr__POSIX",
    "test_result": "FAIL"
}