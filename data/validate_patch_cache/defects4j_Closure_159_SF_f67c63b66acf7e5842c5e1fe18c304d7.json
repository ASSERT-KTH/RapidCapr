{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    Objects.requireNonNull(changed);\n\n    if (node == null) {\n        return;\n    }\n\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child == null || child.getType() != Token.NAME) {\n        return;\n      }\n      changed.add(child.getString());\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..32c17265 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,15 +770,19 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    Objects.requireNonNull(changed);\n+\n+    if (node == null) {\n+        return;\n+    }\n+\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+      if (child == null || child.getType() != Token.NAME) {\n+        return;\n       }\n+      changed.add(child.getString());\n     }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}