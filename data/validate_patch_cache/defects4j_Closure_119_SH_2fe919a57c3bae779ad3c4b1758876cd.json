{
    "patch": "              case Token.INC:\n              case Token.DEC:\n              case Token.BITNOT:\n              case Token.POS:\n              case Token.NEG:\n              case Token.NOT:\n                isSet = true;\n                type = Name.Type.OTHER;\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n            }\n          }\n          name = n.getString();\n          break;\n        case Token.REGEXP:\n          // Ignore regular expression literals.\n          return;\n        default:\n          // All other nodes are not of interest to us.\n          return;\n      }\n\n      // We are only interested in global names.\n      if (!isGlobalNameReference(name, scope)) {\n        return;\n      }\n\n      if (isSet) {\n        if (isGlobalScope(scope)) {\n          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n        } else {\n          handleSetFromLocal(module, scope, n, parent, name);\n        }\n      } else {\n        handleGet(module, scope, n, parent, name);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..1bb73b1b 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -364,6 +364,48 @@ class GlobalNamespace\n                 type = Name.Type.FUNCTION;\n                 break;\n               case Token.INC:\n+              case Token.DEC:\n+              case Token.BITNOT:\n+              case Token.POS:\n+              case Token.NEG:\n+              case Token.NOT:\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+            }\n+          }\n+          name = n.getString();\n+          break;\n+        case Token.REGEXP:\n+          // Ignore regular expression literals.\n+          return;\n+        default:\n+          // All other nodes are not of interest to us.\n+          return;\n+      }\n+\n+      // We are only interested in global names.\n+      if (!isGlobalNameReference(name, scope)) {\n+        return;\n+      }\n+\n+      if (isSet) {\n+        if (isGlobalScope(scope)) {\n+          handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+        } else {\n+          handleSetFromLocal(module, scope, n, parent, name);\n+        }\n+      } else {\n+        handleGet(module, scope, n, parent, name);\n+      }\n+    }\n+              case Token.INC:\n               case Token.DEC:\n                 isSet = true;\n                 type = Name.Type.OTHER;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}