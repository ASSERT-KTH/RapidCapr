{
    "patch": "List<Character> clusterChars = new ArrayList<Character>();\nfor (int i = index; i < input.length() && input.charAt(i) == x; i++) {\n    clusterChars.add(x);\n    digitCount++;\n}\n\nif (digitCount == 1 && clusterChars.size() > 2) {  // Use grouped 1s like: 1,111\n    groupedOneOccurred = true;\n    add(String.format(Locale.ROOT, \"%,d\", clusterChars.size()));\n} else {\n    if (digitCount == 1 || (digitCount == 4 && index + digitCount != len)) {\n        groupedOneOccurred = true;\n    }\n    add(String.valueOf(value));\n}\n\nindex += digitCount;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..085a9926 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,28 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+List<Character> clusterChars = new ArrayList<Character>();\n+for (int i = index; i < input.length() && input.charAt(i) == x; i++) {\n+    clusterChars.add(x);\n+    digitCount++;\n+}\n+\n+if (digitCount == 1 && clusterChars.size() > 2) {  // Use grouped 1s like: 1,111\n+    groupedOneOccurred = true;\n+    add(String.format(Locale.ROOT, \"%,d\", clusterChars.size()));\n+} else {\n+    if (digitCount == 1 || (digitCount == 4 && index + digitCount != len)) {\n+        groupedOneOccurred = true;\n+    }\n+    add(String.valueOf(value));\n+}\n+\n+index += digitCount;\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}