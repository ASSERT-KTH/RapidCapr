{
    "patch": "import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.util.FastMath;\nimport org.apache.commons.math3.util.Precision;\n\npublic class CrossProduct {\n\n    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n        // rescale both vectors without losing precision,\n        // to ensure their norm are the same order of magnitude\n        double s1 = v1.getNorm();\n        double s2 = v2.getNorm();\n        final double factor = FastMath.sqrt(s1 * s2);\n        // we reduce cancellation errors by preconditioning,\n        // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n        // v3 without loss of precision. See Kahan lecture\n        // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n        // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n        final double maxS = FastMath.max(s1, s2);\n        final double eps = maxS * Precision.EPSILON;\n        if (eps > 0.0625 * factor) {\n            final double ratio = 0.03125 * maxS / factor;\n            final Vector3D w2 = new Vector3D(ratio * v1.getX() - v2.getX(), ratio * v1.getY() - v2.getY(),\n                    ratio * v1.getZ() - v2.getZ());\n            return new Vector3D(v1.getY() * w2.getZ() - v1.getZ() * w2.getY(),\n                    v1.getZ() * w2.getX() - v1.getX() * w2.getZ(), v1.getX() * w2.getY() - v1.getY() * w2.getX());\n        } else {\n            return new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(), v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n                    v1.getX() * v2.getY() - v1.getY() * v2.getX());\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..d4d7d4ba3 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,38 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n-  }\n+import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n+import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Precision;\n+\n+public class CrossProduct {\n+\n+    public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+        // rescale both vectors without losing precision,\n+        // to ensure their norm are the same order of magnitude\n+        double s1 = v1.getNorm();\n+        double s2 = v2.getNorm();\n+        final double factor = FastMath.sqrt(s1 * s2);\n+        // we reduce cancellation errors by preconditioning,\n+        // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n+        // v3 without loss of precision. See Kahan lecture\n+        // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n+        // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+\n+        final double maxS = FastMath.max(s1, s2);\n+        final double eps = maxS * Precision.EPSILON;\n+        if (eps > 0.0625 * factor) {\n+            final double ratio = 0.03125 * maxS / factor;\n+            final Vector3D w2 = new Vector3D(ratio * v1.getX() - v2.getX(), ratio * v1.getY() - v2.getY(),\n+                    ratio * v1.getZ() - v2.getZ());\n+            return new Vector3D(v1.getY() * w2.getZ() - v1.getZ() * w2.getY(),\n+                    v1.getZ() * w2.getX() - v1.getX() * w2.getZ(), v1.getX() * w2.getY() - v1.getY() * w2.getX());\n+        } else {\n+            return new Vector3D(v1.getY() * v2.getZ() - v1.getZ() * v2.getY(), v1.getZ() * v2.getX() - v1.getX() * v2.getZ(),\n+                    v1.getX() * v2.getY() - v1.getY() * v2.getX());\n+        }\n+    }\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}