{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // check for special cases\n    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n        return;\n    }\n    if (y[yOffset] == 0.0) {\n        if (x[xOffset] >= 0.0) {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0.0);\n            return;\n        } else {\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), Math.copySign(FastMath.PI, y[yOffset]));\n            return;\n        }\n    }\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    if (tmp2[0] < 0.0) {\n        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n        return;\n    }\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] > 0) {\n\n        // compute atan2(y, x) = atan(y / x)\n        divide(y, yOffset, x, xOffset, tmp2, 0);\n        atan(tmp2, 0, tmp1, 0);\n        for (int i = 0; i < tmp1.length; ++i) {\n            result[resultOffset + i] = tmp1[i];\n        }\n\n    } else if (x[xOffset] < 0) {\n\n        if (y[yOffset] > 0) {\n\n            // compute atan2(y, x) = atan(y / x) + pi\n            divide(y, yOffset, x, xOffset, tmp2, 0);\n            atan(tmp2, 0, tmp1, 0);\n            for (int i = 0; i < tmp1.length; ++i) {\n                result[resultOffset + i] = tmp1[i] + FastMath.PI;\n            }\n\n        } else {\n\n            // compute atan2(y, x) = atan(y / x) - pi\n            divide(y, yOffset, x, xOffset, tmp2, 0);\n            atan(tmp2, 0, tmp1, 0);\n            for (int i = 0; i < tmp1.length; ++i) {\n                result[resultOffset + i] = tmp1[i] - FastMath.PI;\n            }\n\n        }\n\n    } else {\n\n        if (y[yOffset] > 0) {\n\n            // compute atan2(y, x) = pi/2\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI/2);\n\n        } else {\n\n            // compute atan2(y, x) = -pi/2\n            Arrays.fill(result, resultOffset, resultOffset + getSize(), -FastMath.PI/2);\n\n        }\n\n    }\n\n    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..59bc52105 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,46 +1379,88 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // check for special cases\n+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n+        return;\n+    }\n+    if (y[yOffset] == 0.0) {\n+        if (x[xOffset] >= 0.0) {\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), 0.0);\n+            return;\n+        } else {\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), Math.copySign(FastMath.PI, y[yOffset]));\n+            return;\n+        }\n+    }\n+\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    if (tmp2[0] < 0.0) {\n+        Arrays.fill(result, resultOffset, resultOffset + getSize(), Double.NaN);\n+        return;\n+    }\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (x[xOffset] > 0) {\n+\n+        // compute atan2(y, x) = atan(y / x)\n+        divide(y, yOffset, x, xOffset, tmp2, 0);\n+        atan(tmp2, 0, tmp1, 0);\n+        for (int i = 0; i < tmp1.length; ++i) {\n+            result[resultOffset + i] = tmp1[i];\n+        }\n \n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+    } else if (x[xOffset] < 0) {\n+\n+        if (y[yOffset] > 0) {\n+\n+            // compute atan2(y, x) = atan(y / x) + pi\n+            divide(y, yOffset, x, xOffset, tmp2, 0);\n+            atan(tmp2, 0, tmp1, 0);\n+            for (int i = 0; i < tmp1.length; ++i) {\n+                result[resultOffset + i] = tmp1[i] + FastMath.PI;\n             }\n \n         } else {\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            // compute atan2(y, x) = atan(y / x) - pi\n+            divide(y, yOffset, x, xOffset, tmp2, 0);\n+            atan(tmp2, 0, tmp1, 0);\n+            for (int i = 0; i < tmp1.length; ++i) {\n+                result[resultOffset + i] = tmp1[i] - FastMath.PI;\n             }\n \n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    } else {\n+\n+        if (y[yOffset] > 0) {\n+\n+            // compute atan2(y, x) = pi/2\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), FastMath.PI/2);\n+\n+        } else {\n+\n+            // compute atan2(y, x) = -pi/2\n+            Arrays.fill(result, resultOffset, resultOffset + getSize(), -FastMath.PI/2);\n+\n+        }\n \n     }\n \n+    // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+\n+}\n+\n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand\n      * @param operandOffset offset of the operand in its array",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}