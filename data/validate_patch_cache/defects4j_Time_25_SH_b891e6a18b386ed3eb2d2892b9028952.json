{
    "patch": "if (offsetLocal > offsetAdjusted) { // transitioning to DST\n  // look for next transition\n  long next = nextTransition(instantAdjusted);\n  if (next == instantLocal - offsetLocal) {\n    // there is a DST transition at this local time\n    // we need to move to after the DST transition\n    next = nextTransition(next + 1);\n    if (getOffset(next) == offsetAdjusted) {\n      return offsetAdjusted;\n    }\n  }\n} else if (offsetLocal < offsetAdjusted) { // transitioning to standard time\n  // look for previous transition\n  long prev = previousTransition(instantAdjusted);\n  if (prev == instantLocal - offsetLocal) {\n    // there is a DST transition at this local time\n    // we need to move to before the DST transition\n    prev = previousTransition(prev - 1);\n    if (getOffset(prev) == offsetAdjusted) {\n      return offsetAdjusted;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..2ad953d0 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,29 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) { // transitioning to DST\n+  // look for next transition\n+  long next = nextTransition(instantAdjusted);\n+  if (next == instantLocal - offsetLocal) {\n+    // there is a DST transition at this local time\n+    // we need to move to after the DST transition\n+    next = nextTransition(next + 1);\n+    if (getOffset(next) == offsetAdjusted) {\n+      return offsetAdjusted;\n+    }\n+  }\n+} else if (offsetLocal < offsetAdjusted) { // transitioning to standard time\n+  // look for previous transition\n+  long prev = previousTransition(instantAdjusted);\n+  if (prev == instantLocal - offsetLocal) {\n+    // there is a DST transition at this local time\n+    // we need to move to before the DST transition\n+    prev = previousTransition(prev - 1);\n+    if (getOffset(prev) == offsetAdjusted) {\n+      return offsetAdjusted;\n+    }\n+  }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}