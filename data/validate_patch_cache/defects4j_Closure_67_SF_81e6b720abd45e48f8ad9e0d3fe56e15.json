{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      if (NodeUtil.isNameDeclaration(assign.getParent())) {\n          return false;\n      }\n      Node target = assign.getFirstChild();\n      if (target.getLastChild() != null) {\n        return false;\n      }\n      Node lhs = target.getFirstChild();\n      Node rhs = lhs.getNext();\n      if (!NodeUtil.isGet(lhs) || !NodeUtil.isObjectPrototype(lhs)) {\n          return false;\n      }\n      if (!NodeUtil.isNullOrUndefined(rhs)) {\n        return false;\n      }\n      return true;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..b16add45 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -312,25 +312,22 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     }\n \n     private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n+      if (NodeUtil.isNameDeclaration(assign.getParent())) {\n+          return false;\n       }\n-\n-      return false;\n+      Node target = assign.getFirstChild();\n+      if (target.getLastChild() != null) {\n+        return false;\n+      }\n+      Node lhs = target.getFirstChild();\n+      Node rhs = lhs.getNext();\n+      if (!NodeUtil.isGet(lhs) || !NodeUtil.isObjectPrototype(lhs)) {\n+          return false;\n+      }\n+      if (!NodeUtil.isNullOrUndefined(rhs)) {\n+        return false;\n+      }\n+      return true;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}