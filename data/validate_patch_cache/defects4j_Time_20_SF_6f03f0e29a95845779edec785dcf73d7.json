{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    String str = text.substring(position);\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        if (str.regionMatches(true, 0, id, 0, idLen)) {\n            char nextChar = str.length() > idLen ? str.charAt(idLen) : '\\0';\n            if (nextChar == '/' || Character.isWhitespace(nextChar)) {\n                // Check that the following character is not part of a longer time zone ID.\n                if ((str.length() == idLen || !Character.isLetterOrDigit(str.charAt(idLen))) &&\n                        (idLen == ALL_IDS.length() || !str.regionMatches(true, 0, ALL_IDS, idLen, ALL_IDS.length() - idLen))) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + idLen;\n                }\n            }\n        }\n    }\n    return ~position;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..85a06fde 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,25 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    String str = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        if (str.regionMatches(true, 0, id, 0, idLen)) {\n+            char nextChar = str.length() > idLen ? str.charAt(idLen) : '\\0';\n+            if (nextChar == '/' || Character.isWhitespace(nextChar)) {\n+                // Check that the following character is not part of a longer time zone ID.\n+                if ((str.length() == idLen || !Character.isLetterOrDigit(str.charAt(idLen))) &&\n+                        (idLen == ALL_IDS.length() || !str.regionMatches(true, 0, ALL_IDS, idLen, ALL_IDS.length() - idLen))) {\n                     bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                    return position + idLen;\n                 }\n             }\n-            return ~position;\n         }\n     }\n+    return ~position;\n+}\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}