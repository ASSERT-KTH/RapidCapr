{
    "patch": "        final WeightedObservedPoints points = getObservations();\n        final double[] target = new double[points.size()];\n        final double[] weights = new double[points.size()];\n        for (int i = 0; i < points.size(); ++i) {\n            final WeightedObservedPoint point = points.toList().get(i);\n            target[i] = point.getY();\n            weights[i] = point.getWeight();\n        }\n        final Gaussian.Parametric function = new Gaussian.Parametric();\n        return new LevenbergMarquardtOptimizer().optimize(\n                new GenericCurveFitter(function, guess, new Gaussian.DummyProblem(target, weights)),\n                new MaxEval(10000), new InitialStepBound(new double[] {Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE}, Double.POSITIVE_INFINITY),\n                GoalType.MINIMIZE, new WeightMatrixPreservationChecker<>());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..f2deb4514 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,19 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final WeightedObservedPoints points = getObservations();\n+        final double[] target = new double[points.size()];\n+        final double[] weights = new double[points.size()];\n+        for (int i = 0; i < points.size(); ++i) {\n+            final WeightedObservedPoint point = points.toList().get(i);\n+            target[i] = point.getY();\n+            weights[i] = point.getWeight();\n+        }\n+        final Gaussian.Parametric function = new Gaussian.Parametric();\n+        return new LevenbergMarquardtOptimizer().optimize(\n+                new GenericCurveFitter(function, guess, new Gaussian.DummyProblem(target, weights)),\n+                new MaxEval(10000), new InitialStepBound(new double[] {Double.MIN_VALUE, Double.MIN_VALUE, Double.MIN_VALUE}, Double.POSITIVE_INFINITY),\n+                GoalType.MINIMIZE, new WeightMatrixPreservationChecker<>());\n     }\n \n     /**",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}