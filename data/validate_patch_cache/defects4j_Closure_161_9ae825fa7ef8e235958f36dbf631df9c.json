{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (index < 0 || intIndex != index) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left.getFirstChild();\n  for (int i = 0; elem != null && i < intIndex; i++) {\n    elem = elem.getNext();\n  }\n\n  if (elem == null) {\n    // non-strict mode compatibility.\n    if (getCompilerOptions().getLanguageIn().equals(CompilerOptions.LanguageMode.STRICT)) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    return Node.newString(\"undefined\").srcref(left);\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    left.removeChild(elem);\n  }\n\n  // Replace the entire GETELEM with the value\n  n.getParent().replaceChild(n, elem);\n  reportCodeChange();\n  return elem;\n}\n\nprivate enum DiagnosticType {\n  INDEX_OUT_OF_BOUNDS_ERROR, INVALID_GETELEM_INDEX_ERROR;\n}\n\nprivate void error(DiagnosticType type, Node cause) {\n  switch (type) {\n    case INDEX_OUT_OF_BOUNDS_ERROR:\n      JSError.make(sourceName, cause, RhinoErrorReporter.TYPE_MISMATCH_ERROR,\n          \"Array index out of bounds: NUMBER \" + cause.getDouble() + \".\", null)\n          .throwRuntimeException();\n      break;\n    case INVALID_GETELEM_INDEX_ERROR:\n      JSError.make(sourceName, cause, RhinoErrorReporter.TYPE_MISMATCH_ERROR,\n          \"Invalid index expression.\", null).throwRuntimeException();\n      break;\n   }\n}\n\nprivate String sourceName = \"inline\";  // the compiler expects a non-null sourceName string. In this case, it does not matter what it is set to",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..b60b5b19 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,52 +1274,70 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  // If GETPROP/GETELEM is used as assignment target the array literal is\n+  // acting as a temporary we can't fold it here:\n+  //    \"[][0] += 1\"\n+\n+  if (right.getType() != Token.NUMBER) {\n+    // Sometimes people like to use complex expressions to index into\n+    // arrays, or strings to index into array methods.\n+    return n;\n+  }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (index < 0 || intIndex != index) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  Node elem = left.getFirstChild();\n+  for (int i = 0; elem != null && i < intIndex; i++) {\n+    elem = elem.getNext();\n+  }\n \n-    if (intIndex < 0) {\n+  if (elem == null) {\n+    // non-strict mode compatibility.\n+    if (getCompilerOptions().getLanguageIn().equals(CompilerOptions.LanguageMode.STRICT)) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n+    return Node.newString(\"undefined\").srcref(left);\n+  }\n \n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n+  if (elem.getType() == Token.EMPTY) {\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  } else {\n+    left.removeChild(elem);\n+  }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  // Replace the entire GETELEM with the value\n+  n.getParent().replaceChild(n, elem);\n+  reportCodeChange();\n+  return elem;\n+}\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n+private enum DiagnosticType {\n+  INDEX_OUT_OF_BOUNDS_ERROR, INVALID_GETELEM_INDEX_ERROR;\n+}\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n-  }\n+private void error(DiagnosticType type, Node cause) {\n+  switch (type) {\n+    case INDEX_OUT_OF_BOUNDS_ERROR:\n+      JSError.make(sourceName, cause, RhinoErrorReporter.TYPE_MISMATCH_ERROR,\n+          \"Array index out of bounds: NUMBER \" + cause.getDouble() + \".\", null)\n+          .throwRuntimeException();\n+      break;\n+    case INVALID_GETELEM_INDEX_ERROR:\n+      JSError.make(sourceName, cause, RhinoErrorReporter.TYPE_MISMATCH_ERROR,\n+          \"Invalid index expression.\", null).throwRuntimeException();\n+      break;\n+   }\n+}\n+\n+private String sourceName = \"inline\";  // the compiler expects a non-null sourceName string. In this case, it does not matter what it is set to\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}