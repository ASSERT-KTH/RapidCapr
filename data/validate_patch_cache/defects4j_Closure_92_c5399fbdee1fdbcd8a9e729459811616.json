{
    "patch": "void replace() {\n  if (firstNode == null) {\n    // Don't touch the base case ('goog').\n    replacementNode = candidateDefinition;\n    return;\n  }\n\n  // Handle the case where there is a duplicate definition for an explicitly\n  // provided symbol.\n  if (candidateDefinition != null && explicitNode != null) {\n    explicitNode.detachFromParent();\n    compiler.reportCodeChange();\n\n    // Does this need a VAR keyword?\n    replacementNode = candidateDefinition;\n    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n      Node assignNode = candidateDefinition.getFirstChild();\n      Node nameNode = assignNode.getFirstChild();\n      if (nameNode.getType() == Token.NAME) {\n        // Need to convert this assign to a var declaration.\n        Node valueNode = nameNode.getNext();\n        assignNode.removeChild(nameNode);\n        assignNode.removeChild(valueNode);\n        nameNode.addChildToFront(valueNode);\n        Node varNode = new Node(Token.VAR, nameNode);\n        varNode.copyInformationFrom(candidateDefinition);\n        candidateDefinition.getParent().replaceChild(\n            candidateDefinition, varNode);\n        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n        compiler.reportCodeChange();\n        replacementNode = varNode;\n      }\n    }\n  } else {\n    // Handle the case where there's not a duplicate definition.\n    replacementNode = createDeclarationNode();\n\n    // Update the providedNames map with the new declaration node.\n    ProvidedName providedName = providedNames.get(namespace);\n    if (providedName != null) { // update the existing reference to the namespace and add to map\n      providedName.replacementNode.replaceWith(replacementNode.detach());\n      compiler.reportCodeChange();\n      providedName.replacementNode = replacementNode;\n      providedName.isExplicitlyProvided = false;\n    } else { // add the new declaration node to the map\n      providedNames.put(namespace, new ProvidedName(replacementNode, false));\n    }\n    \n    if (minimumModule.equals(firstModule)) {\n      if (firstNode.getParent() != null) { // add declaration before firstNode if it has a parent\n        firstNode.getParent().addChildBefore(replacementNode, firstNode);\n      } else { // if there isn't a node with the namespace, we can add it here\n        compiler.getNodeForCodeInsertion(firstModule).addChildAfter(replacementNode, firstNode);\n      }\n\n    } else {\n      // In this case, the name was implicitly provided by two independent\n      // modules. We need to move this code up to a common module.\n      int indexOfDot = namespace.indexOf('.');\n      if (indexOfDot == -1) {\n        // Any old place is fine.\n        compiler.getNodeForCodeInsertion(minimumModule)\n            .addChildToBack(replacementNode);\n      } else {\n        // Add it after the parent namespace.\n        ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n        Preconditions.checkNotNull(parentName);\n        Preconditions.checkNotNull(parentName.replacementNode);\n        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n      }\n    }\n    if (explicitNode != null) {\n      explicitNode.detachFromParent();\n    }\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..499e42a0 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -744,69 +744,84 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n      * If we're providing a name with a duplicate definition, then make sure\n      * that definition becomes a declaration.\n      */\n-    void replace() {\n-      if (firstNode == null) {\n-        // Don't touch the base case ('goog').\n-        replacementNode = candidateDefinition;\n-        return;\n-      }\n+void replace() {\n+  if (firstNode == null) {\n+    // Don't touch the base case ('goog').\n+    replacementNode = candidateDefinition;\n+    return;\n+  }\n \n-      // Handle the case where there is a duplicate definition for an explicitly\n-      // provided symbol.\n-      if (candidateDefinition != null && explicitNode != null) {\n-        explicitNode.detachFromParent();\n+  // Handle the case where there is a duplicate definition for an explicitly\n+  // provided symbol.\n+  if (candidateDefinition != null && explicitNode != null) {\n+    explicitNode.detachFromParent();\n+    compiler.reportCodeChange();\n+\n+    // Does this need a VAR keyword?\n+    replacementNode = candidateDefinition;\n+    if (NodeUtil.isExpressionNode(candidateDefinition)) {\n+      candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n+      Node assignNode = candidateDefinition.getFirstChild();\n+      Node nameNode = assignNode.getFirstChild();\n+      if (nameNode.getType() == Token.NAME) {\n+        // Need to convert this assign to a var declaration.\n+        Node valueNode = nameNode.getNext();\n+        assignNode.removeChild(nameNode);\n+        assignNode.removeChild(valueNode);\n+        nameNode.addChildToFront(valueNode);\n+        Node varNode = new Node(Token.VAR, nameNode);\n+        varNode.copyInformationFrom(candidateDefinition);\n+        candidateDefinition.getParent().replaceChild(\n+            candidateDefinition, varNode);\n+        nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n         compiler.reportCodeChange();\n+        replacementNode = varNode;\n+      }\n+    }\n+  } else {\n+    // Handle the case where there's not a duplicate definition.\n+    replacementNode = createDeclarationNode();\n \n-        // Does this need a VAR keyword?\n-        replacementNode = candidateDefinition;\n-        if (NodeUtil.isExpressionNode(candidateDefinition)) {\n-          candidateDefinition.putBooleanProp(Node.IS_NAMESPACE, true);\n-          Node assignNode = candidateDefinition.getFirstChild();\n-          Node nameNode = assignNode.getFirstChild();\n-          if (nameNode.getType() == Token.NAME) {\n-            // Need to convert this assign to a var declaration.\n-            Node valueNode = nameNode.getNext();\n-            assignNode.removeChild(nameNode);\n-            assignNode.removeChild(valueNode);\n-            nameNode.addChildToFront(valueNode);\n-            Node varNode = new Node(Token.VAR, nameNode);\n-            varNode.copyInformationFrom(candidateDefinition);\n-            candidateDefinition.getParent().replaceChild(\n-                candidateDefinition, varNode);\n-            nameNode.setJSDocInfo(assignNode.getJSDocInfo());\n-            compiler.reportCodeChange();\n-            replacementNode = varNode;\n-          }\n-        }\n+    // Update the providedNames map with the new declaration node.\n+    ProvidedName providedName = providedNames.get(namespace);\n+    if (providedName != null) { // update the existing reference to the namespace and add to map\n+      providedName.replacementNode.replaceWith(replacementNode.detach());\n+      compiler.reportCodeChange();\n+      providedName.replacementNode = replacementNode;\n+      providedName.isExplicitlyProvided = false;\n+    } else { // add the new declaration node to the map\n+      providedNames.put(namespace, new ProvidedName(replacementNode, false));\n+    }\n+    \n+    if (minimumModule.equals(firstModule)) {\n+      if (firstNode.getParent() != null) { // add declaration before firstNode if it has a parent\n+        firstNode.getParent().addChildBefore(replacementNode, firstNode);\n+      } else { // if there isn't a node with the namespace, we can add it here\n+        compiler.getNodeForCodeInsertion(firstModule).addChildAfter(replacementNode, firstNode);\n+      }\n+\n+    } else {\n+      // In this case, the name was implicitly provided by two independent\n+      // modules. We need to move this code up to a common module.\n+      int indexOfDot = namespace.indexOf('.');\n+      if (indexOfDot == -1) {\n+        // Any old place is fine.\n+        compiler.getNodeForCodeInsertion(minimumModule)\n+            .addChildToBack(replacementNode);\n       } else {\n-        // Handle the case where there's not a duplicate definition.\n-        replacementNode = createDeclarationNode();\n-        if (firstModule == minimumModule) {\n-          firstNode.getParent().addChildBefore(replacementNode, firstNode);\n-        } else {\n-          // In this case, the name was implicitly provided by two independent\n-          // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n-          if (indexOfDot == -1) {\n-            // Any old place is fine.\n-            compiler.getNodeForCodeInsertion(minimumModule)\n-                .addChildToBack(replacementNode);\n-          } else {\n-            // Add it after the parent namespace.\n-            ProvidedName parentName =\n-                providedNames.get(namespace.substring(0, indexOfDot));\n-            Preconditions.checkNotNull(parentName);\n-            Preconditions.checkNotNull(parentName.replacementNode);\n-            parentName.replacementNode.getParent().addChildAfter(\n-                replacementNode, parentName.replacementNode);\n-          }\n-        }\n-        if (explicitNode != null) {\n-          explicitNode.detachFromParent();\n-        }\n-        compiler.reportCodeChange();\n+        // Add it after the parent namespace.\n+        ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));\n+        Preconditions.checkNotNull(parentName);\n+        Preconditions.checkNotNull(parentName.replacementNode);\n+        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);\n       }\n     }\n+    if (explicitNode != null) {\n+      explicitNode.detachFromParent();\n+    }\n+    compiler.reportCodeChange();\n+  }\n+}\n \n     /**\n      * Create the declaration node for this name, without inserting it",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}