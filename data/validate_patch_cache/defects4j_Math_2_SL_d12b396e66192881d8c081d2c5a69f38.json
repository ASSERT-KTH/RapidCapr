{
    "patch": "if(getPopulationSize() <= 0 || getSampleSize() <= 0 || getNumberOfSuccesses() < 0 || getSampleSize() > getPopulationSize()) {\n    return Double.NaN;\n}\ndouble mean = ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\nreturn Math.max(0.0, mean);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\nindex 27691272f..aff149535 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java\n@@ -265,7 +265,11 @@ public class HypergeometricDistribution extends AbstractIntegerDistribution {\n      * size {@code n}, the mean is {@code n * m / N}.\n      */\n     public double getNumericalMean() {\n-        return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();\n+if(getPopulationSize() <= 0 || getSampleSize() <= 0 || getNumberOfSuccesses() < 0 || getSampleSize() > getPopulationSize()) {\n+    return Double.NaN;\n+}\n+double mean = ((double) getSampleSize() * (double) getNumberOfSuccesses()) / (double) getPopulationSize();\n+return Math.max(0.0, mean);\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}