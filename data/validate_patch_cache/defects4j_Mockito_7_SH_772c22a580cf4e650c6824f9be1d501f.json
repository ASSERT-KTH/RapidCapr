{
    "patch": "    private void readTypeVariables() {\n        for (Type type : typeVariable.getBounds()) {\n            registerTypeVariablesOn(type);\n        }\n        Type[] actualTypeArguments = getTypeParameterMap().get(typeVariable);\n\n        if (actualTypeArguments != null) {\n            for (Type actualTypeArgument : actualTypeArguments) {\n                registerTypeVariablesOn(actualTypeArgument);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..538d1d409 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,18 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        for (Type type : typeVariable.getBounds()) {\n+            registerTypeVariablesOn(type);\n+        }\n+        Type[] actualTypeArguments = getTypeParameterMap().get(typeVariable);\n+\n+        if (actualTypeArguments != null) {\n+            for (Type actualTypeArgument : actualTypeArguments) {\n+                registerTypeVariablesOn(actualTypeArgument);\n+            }\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}