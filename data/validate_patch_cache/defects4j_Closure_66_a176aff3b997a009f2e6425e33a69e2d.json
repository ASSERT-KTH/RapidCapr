{
    "patch": "private double getTypedPercent(String js) {\n    ScriptEngineManager manager = new ScriptEngineManager();\n    ScriptEngine engine = manager.getEngineByName(\"TypeScript\");\n    try {\n        engine.eval(js);\n    } catch (ScriptException e) {\n        // ignore script errors\n    }\n    double typedChars = 0.0;\n    double totalChars = 0.0;\n    if (engine instanceof Compilable) {\n        Compilable compilable = (Compilable) engine;\n        if (compilable != null) {\n            try {\n                CompiledScript compiledScript = compilable.compile(js);\n                String source = compiledScript.getScriptSource();\n                for (int i = 0; i < source.length(); i++) {\n                    char ch = source.charAt(i);\n                    if (Character.isLetter(ch) || ch == '_') {\n                        typedChars++;\n                    }\n                    totalChars++;\n                }\n            } catch (ScriptException e) {\n                // ignore script errors\n            }\n        }\n    }\n    return (typedChars / totalChars) * 100.0;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..3e075bf8 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,36 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+private double getTypedPercent(String js) {\n+    ScriptEngineManager manager = new ScriptEngineManager();\n+    ScriptEngine engine = manager.getEngineByName(\"TypeScript\");\n+    try {\n+        engine.eval(js);\n+    } catch (ScriptException e) {\n+        // ignore script errors\n+    }\n+    double typedChars = 0.0;\n+    double totalChars = 0.0;\n+    if (engine instanceof Compilable) {\n+        Compilable compilable = (Compilable) engine;\n+        if (compilable != null) {\n+            try {\n+                CompiledScript compiledScript = compilable.compile(js);\n+                String source = compiledScript.getScriptSource();\n+                for (int i = 0; i < source.length(); i++) {\n+                    char ch = source.charAt(i);\n+                    if (Character.isLetter(ch) || ch == '_') {\n+                        typedChars++;\n+                    }\n+                    totalChars++;\n+                }\n+            } catch (ScriptException e) {\n+                // ignore script errors\n+            }\n+        }\n+    }\n+    return (typedChars / totalChars) * 100.0;\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}