{
    "patch": "  /**\n   * If we access a property of a symbol, then that symbol is not\n   * null or undefined.\n   */\n  FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (!narrowed.isBottom() && type != narrowed) {\n        scope = narrowScope(scope, n, narrowed);\n      }\n    }\n    return scope;\n  }\n\n  private void inferPropertiesDeclaredInBlock(ObjectType constraintObj,\n      ObjectType objType) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeInferred(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n\n  private void inferPropertiesDeclaredInConstraints(ObjectType constraintObj,\n      ObjectType objType) {\n    for (String prop : constraintObj.getOwnPropertyNames()) {\n      JSType propType = constraintObj.getPropertyType(prop);\n      if (!objType.isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!objType.hasProperty(prop)) {\n          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n        }\n        objType.defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n\n  private void inferDeclaredProperties(Block b,\n      ObjectType constraintObj, ObjectType objType) {\n    if (constraintObj.isRecordType() && objType != null) {\n      inferPropertiesDeclaredInBlock(constraintObj, objType);\n    }\n    for (Node stmt = b.getFirstChild(); stmt != null;\n         stmt = stmt.getNext()) {\n      ObjectType stmtObj = ObjectType.cast(stmt.getJSType());\n      if (stmt.isVar()) {\n        for (Node child : stmt.children()) {\n          String name = child.getString();\n          JSType childType = stmtObj.getPropertyType(name);\n          if (childType == null) {\n            childType = getNativeType(UNKNOWN_TYPE);\n          }\n          if (!objType.isPropertyTypeDeclared(name)) {\n            objType.defineDeclaredProperty(name, childType, child);\n          }\n        }\n      } else if (stmt.isExprResult()) {\n        Node expr = stmt.getFirstChild();\n        if (expr.isAssign()) {\n          Node lvalue = expr.getFirstChild();\n          Node rvalue = expr.getLastChild();\n          String name = lvalue.getQualifiedName();\n          if (name != null) {\n            JSType rvalueType = rvalue.getJSType();\n            JSType rvalueNarrowed = rvalueType.restrictByNotNullOrUndefined();\n            if (!rvalueNarrowed.isBottom()) {\n              if (!objType.isPropertyTypeInferred(name)\n                  && !objType.isPropertyTypeDeclared(name)) {\n                objType.defineInferredProperty(name, rvalueNarrowed, rvalue);\n              } else {\n                JSType declaredType = objType.getPropertyType(\n                    name);\n                if (declaredType == null) {\n                  declaredType = objType.getLeastSupertype(\n                      rvalueNarrowed);\n                  objType.defineInferredProperty(name,\n                      declaredType, rvalue);\n                } else {\n                  JSType meetType =\n                      rvalueNarrowed.getGreatestSubtype(\n                          declaredType);\n                  if (meetType.isUnknownType()) {\n                    meetType = objType.getLeastSupertype(\n                        rvalueNarrowed);\n                    objType.defineInferredProperty(name,\n                        meetType, rvalue);\n                  } else if (meetType.equals(declaredType)) {\n                    // We're already inferring this property, so we don't have to do anything.\n                    // inferDeclaredProperties(b, constraintObj, objType, meetType, rvalue);\n                  } else {\n                    // Multiple types for this property, so we're not inferring anything.\n                    //  narrowDeclaredProperty(meetType, declaredType, name, rvalue);\n                  }\n                }\n              }\n            }\n          }\n        } else if (expr.isCall()) {\n          Node callee = expr.getFirstChild();\n          JSType calleeType = callee.getJSType();\n          if (calleeType != null &&\n              !(calleeType.isUnknownType()) &&\n              calleeType.isFunctionType()) {\n            FunctionType functionType = calleeType.toMaybeFunctionType();\n            if (functionType.hasInstanceType()) {\n              FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n              JSType returnType = functionType.getReturnType();\n              JSType instanceType =\n                  functionType.getThisType().autobox();\n              builder.addRetType(returnType);\n              builder.ad",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..51aae2b9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,46 +1111,127 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n-    if (type == null || constraint == null) {\n-      return;\n-    }\n-\n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n-      }\n-    }\n-  }\n-\n   /**\n    * If we access a property of a symbol, then that symbol is not\n    * null or undefined.\n    */\n-  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n+  FlowScope dereferencePointer(Node n, FlowScope scope) {\n     if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n-      if (type != narrowed) {\n+      if (!narrowed.isBottom() && type != narrowed) {\n         scope = narrowScope(scope, n, narrowed);\n       }\n     }\n     return scope;\n   }\n \n+  private void inferPropertiesDeclaredInBlock(ObjectType constraintObj,\n+      ObjectType objType) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeInferred(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!objType.hasProperty(prop)) {\n+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+  }\n+\n+  private void inferPropertiesDeclaredInConstraints(ObjectType constraintObj,\n+      ObjectType objType) {\n+    for (String prop : constraintObj.getOwnPropertyNames()) {\n+      JSType propType = constraintObj.getPropertyType(prop);\n+      if (!objType.isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!objType.hasProperty(prop)) {\n+          typeToInfer = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+        }\n+        objType.defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+  }\n+\n+  private void inferDeclaredProperties(Block b,\n+      ObjectType constraintObj, ObjectType objType) {\n+    if (constraintObj.isRecordType() && objType != null) {\n+      inferPropertiesDeclaredInBlock(constraintObj, objType);\n+    }\n+    for (Node stmt = b.getFirstChild(); stmt != null;\n+         stmt = stmt.getNext()) {\n+      ObjectType stmtObj = ObjectType.cast(stmt.getJSType());\n+      if (stmt.isVar()) {\n+        for (Node child : stmt.children()) {\n+          String name = child.getString();\n+          JSType childType = stmtObj.getPropertyType(name);\n+          if (childType == null) {\n+            childType = getNativeType(UNKNOWN_TYPE);\n+          }\n+          if (!objType.isPropertyTypeDeclared(name)) {\n+            objType.defineDeclaredProperty(name, childType, child);\n+          }\n+        }\n+      } else if (stmt.isExprResult()) {\n+        Node expr = stmt.getFirstChild();\n+        if (expr.isAssign()) {\n+          Node lvalue = expr.getFirstChild();\n+          Node rvalue = expr.getLastChild();\n+          String name = lvalue.getQualifiedName();\n+          if (name != null) {\n+            JSType rvalueType = rvalue.getJSType();\n+            JSType rvalueNarrowed = rvalueType.restrictByNotNullOrUndefined();\n+            if (!rvalueNarrowed.isBottom()) {\n+              if (!objType.isPropertyTypeInferred(name)\n+                  && !objType.isPropertyTypeDeclared(name)) {\n+                objType.defineInferredProperty(name, rvalueNarrowed, rvalue);\n+              } else {\n+                JSType declaredType = objType.getPropertyType(\n+                    name);\n+                if (declaredType == null) {\n+                  declaredType = objType.getLeastSupertype(\n+                      rvalueNarrowed);\n+                  objType.defineInferredProperty(name,\n+                      declaredType, rvalue);\n+                } else {\n+                  JSType meetType =\n+                      rvalueNarrowed.getGreatestSubtype(\n+                          declaredType);\n+                  if (meetType.isUnknownType()) {\n+                    meetType = objType.getLeastSupertype(\n+                        rvalueNarrowed);\n+                    objType.defineInferredProperty(name,\n+                        meetType, rvalue);\n+                  } else if (meetType.equals(declaredType)) {\n+                    // We're already inferring this property, so we don't have to do anything.\n+                    // inferDeclaredProperties(b, constraintObj, objType, meetType, rvalue);\n+                  } else {\n+                    // Multiple types for this property, so we're not inferring anything.\n+                    //  narrowDeclaredProperty(meetType, declaredType, name, rvalue);\n+                  }\n+                }\n+              }\n+            }\n+          }\n+        } else if (expr.isCall()) {\n+          Node callee = expr.getFirstChild();\n+          JSType calleeType = callee.getJSType();\n+          if (calleeType != null &&\n+              !(calleeType.isUnknownType()) &&\n+              calleeType.isFunctionType()) {\n+            FunctionType functionType = calleeType.toMaybeFunctionType();\n+            if (functionType.hasInstanceType()) {\n+              FunctionTypeBuilder builder = new FunctionTypeBuilder(registry);\n+              JSType returnType = functionType.getReturnType();\n+              JSType instanceType =\n+                  functionType.getThisType().autobox();\n+              builder.addRetType(returnType);\n+              builder.ad\n+    }\n+    return scope;\n+  }\n+\n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {\n     // Scopes sometimes contain inferred type info about qualified names.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}