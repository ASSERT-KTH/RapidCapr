{
    "patch": "        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        name.setLineno(functionNode.getLineno());\n        // Set charno to the charno of the left parenthesis of the function declaration\n        int leftParenPosition = functionNode.getBody().getEncodedSource().indexOf('(');\n        int lparenCharno = NodeUtil.getCharacterPosition(sourceName, leftParenPosition, functionNode);\n        name.setCharno(lparenCharno);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..25422c0d 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -517,6 +517,14 @@ public class IRFactory {\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n+        name.setLineno(functionNode.getLineno());\n+        // Set charno to the charno of the left parenthesis of the function declaration\n+        int leftParenPosition = functionNode.getBody().getEncodedSource().indexOf('(');\n+        int lparenCharno = NodeUtil.getCharacterPosition(sourceName, leftParenPosition, functionNode);\n+        name.setCharno(lparenCharno);\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n       }\n       Node node = newNode(Token.FUNCTION);\n       Node newName = transform(name);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}