{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  if (n.getType() == Token.LVALUE || n.getType() == Token.NAME) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualified names.\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n      Preconditions.checkArgument(\n          parent.getType() == Token.FUNCTION ||\n          parent.getType() == Token.VAR ||\n          parent.getType() == Token.LET ||\n          parent.getType() == Token.CONST ||\n          parent.getType() == Token.PARAM_LIST ||\n          NodeUtil.isFunctionBlock(parent));\n      shouldDeclareOnGlobalThis = scope.isGlobal() &&\n          (parent.getType() == Token.VAR ||\n           parent.getType() == Token.FUNCTION);\n    }\n    String variableName;\n    if (n.getType() == Token.NAME) {\n      variableName = n.getString();\n    } else if (n.getType() == Token.LVALUE) {\n      variableName = n.getFirstChild().getQualifiedName();\n    } else {\n      throw new IllegalStateException(\n          \"defineSlot called with node type \" + Token.name(n.getType()));\n    }\n\n    if (variableName.isEmpty()) {\n      return;\n    }\n\n    if (parent.getType() == Token.LHS) {\n      if (variableName.equals(\"arguments\")) {\n        FunctionType functionType = scope.getRootNode().getFunctionType();\n        if (parent.getParent().getType() == Token.CALL) {\n          functionType.setHasRestFormals(true);\n        } else {\n          functionType.setArgumentsType(getNativeType(UNKNOWN_TYPE));\n        }\n        return;\n      } else if (variableName.equals(\"this\")) {\n        return;\n      }\n    }\n\n    if (variableName.equals(\"undefined\")) {\n      // This is technically a read, not a write. But it doesn't really matter for our purposes\n      // here, because undefined is a PRIMITIVE, so it has no properties or methods.\n      return;\n    }\n\n    if (variableName.equals(\"NaN\") || variableName.equals(\"Infinity\")) {\n      // These are technically reads, but they behave like constants, so we'll treat them that way.\n      if (inferred) {\n        return;\n      }\n      ScopedName qName = new QualifiedName(variableName);\n      Var var = scope.getVar(qName, false);\n      if (var != null && !var.isGlobal()) {\n        return;\n      }\n      ObjectType globalThis = getNativeObjectType(GLOBAL_THIS);\n      globalThis.defineDeclaredProperty(variableName, getNativeType(NUMBER_TYPE), true);\n      scope.declare(variableName, n, getNativeType(NUMBER_TYPE), compiler.getInput(sourceName), inferred);\n      return;\n    }\n\n    // If n is a property, then we should really declare it in the\n    // scope where the root object appears. This helps out people\n    // who declare \"global\" names in an anonymous namespace.\n    Scope scopeToDeclareIn = scope;\n    Node propName = null;\n    if (n.getType() == Token.LVALUE) {\n      propName = n.getFirstChild().getNext();\n      scopeToDeclareIn = scope.getBestLValueScope(propName);\n      if (scopeToDeclareIn == null) {\n        scopeToDeclareIn = scope;\n      }\n    }\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = compiler.getInput(sourceName).isExtern();\n      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n    }\n\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    if (oldVar != null) {\n      validator.expectUndeclaredVariable(\n          sourceName, n, parent, oldVar, variableName, type);\n      return;\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionTyp",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..2afd8246 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,81 +869,111 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  if (n.getType() == Token.LVALUE || n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(inferred || type != null);\n+\n+    // Only allow declarations of NAMEs and qualified names.\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n+      Preconditions.checkArgument(\n+          parent.getType() == Token.FUNCTION ||\n+          parent.getType() == Token.VAR ||\n+          parent.getType() == Token.LET ||\n+          parent.getType() == Token.CONST ||\n+          parent.getType() == Token.PARAM_LIST ||\n+          NodeUtil.isFunctionBlock(parent));\n+      shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+          (parent.getType() == Token.VAR ||\n+           parent.getType() == Token.FUNCTION);\n+    }\n+    String variableName;\n+    if (n.getType() == Token.NAME) {\n+      variableName = n.getString();\n+    } else if (n.getType() == Token.LVALUE) {\n+      variableName = n.getFirstChild().getQualifiedName();\n+    } else {\n+      throw new IllegalStateException(\n+          \"defineSlot called with node type \" + Token.name(n.getType()));\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n+    if (variableName.isEmpty()) {\n+      return;\n+    }\n+\n+    if (parent.getType() == Token.LHS) {\n+      if (variableName.equals(\"arguments\")) {\n+        FunctionType functionType = scope.getRootNode().getFunctionType();\n+        if (parent.getParent().getType() == Token.CALL) {\n+          functionType.setHasRestFormals(true);\n+        } else {\n+          functionType.setArgumentsType(getNativeType(UNKNOWN_TYPE));\n         }\n+        return;\n+      } else if (variableName.equals(\"this\")) {\n+        return;\n       }\n     }\n \n+    if (variableName.equals(\"undefined\")) {\n+      // This is technically a read, not a write. But it doesn't really matter for our purposes\n+      // here, because undefined is a PRIMITIVE, so it has no properties or methods.\n+      return;\n+    }\n+\n+    if (variableName.equals(\"NaN\") || variableName.equals(\"Infinity\")) {\n+      // These are technically reads, but they behave like constants, so we'll treat them that way.\n+      if (inferred) {\n+        return;\n+      }\n+      ScopedName qName = new QualifiedName(variableName);\n+      Var var = scope.getVar(qName, false);\n+      if (var != null && !var.isGlobal()) {\n+        return;\n+      }\n+      ObjectType globalThis = getNativeObjectType(GLOBAL_THIS);\n+      globalThis.defineDeclaredProperty(variableName, getNativeType(NUMBER_TYPE), true);\n+      scope.declare(variableName, n, getNativeType(NUMBER_TYPE), compiler.getInput(sourceName), inferred);\n+      return;\n+    }\n+\n+    // If n is a property, then we should really declare it in the\n+    // scope where the root object appears. This helps out people\n+    // who declare \"global\" names in an anonymous namespace.\n+    Scope scopeToDeclareIn = scope;\n+    Node propName = null;\n+    if (n.getType() == Token.LVALUE) {\n+      propName = n.getFirstChild().getNext();\n+      scopeToDeclareIn = scope.getBestLValueScope(propName);\n+      if (scopeToDeclareIn == null) {\n+        scopeToDeclareIn = scope;\n+      }\n+    }\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = compiler.getInput(sourceName).isExtern();\n+      globalThis.defineDeclaredProperty(variableName, type, isExtern);\n+    }\n+\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    if (oldVar != null) {\n+      validator.expectUndeclaredVariable(\n+          sourceName, n, parent, oldVar, variableName, type);\n+      return;\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionTyp\n+\n     /**\n      * Check if the given node is a property of a name in the global scope.\n      */",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}