{
    "patch": "import org.mockito.internal.creation.bytebuddy.MockAccess;\n\npublic <T extends MockAccess> void resetMock(T mock) {\n    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n\n    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n        .defaultAnswer(RETURNS_DEFAULTS)\n        .withoutAnnotations());\n\n    mock.__setMockitoInterceptor(filter);\n\n    // We also need to update the instance of InvocationContainer\n    InvocationContainerImpl invocationContainer =\n            (InvocationContainerImpl) ((MockitoInterceptor)mock).getInterceptorLogic();\n\n    invocationContainer.setInvocationContainer(\n        new InvocationContainerImpl(\n            invocationContainer.getMock(),\n            invocationContainer.getMockCreationSettings()));\n\n    mock.___finishedInitializing();\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..efbc760e3 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,30 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+\n+import org.mockito.internal.creation.bytebuddy.MockAccess;\n+\n+public <T extends MockAccess> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldHandler = getMockHandler(mock);\n+    MockHandler<T> newHandler = new MockHandler<T>(oldHandler);\n+\n+    MethodInterceptorFilter filter = new MethodInterceptorFilter(newHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings()\n+        .defaultAnswer(RETURNS_DEFAULTS)\n+        .withoutAnnotations());\n+\n+    mock.__setMockitoInterceptor(filter);\n+\n+    // We also need to update the instance of InvocationContainer\n+    InvocationContainerImpl invocationContainer =\n+            (InvocationContainerImpl) ((MockitoInterceptor)mock).getInterceptorLogic();\n+\n+    invocationContainer.setInvocationContainer(\n+        new InvocationContainerImpl(\n+            invocationContainer.getMock(),\n+            invocationContainer.getMockCreationSettings()));\n+\n+    mock.___finishedInitializing();\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}