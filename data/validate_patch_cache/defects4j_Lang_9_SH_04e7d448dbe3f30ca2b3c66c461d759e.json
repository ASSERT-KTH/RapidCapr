{
    "patch": "StringBuilder output = new StringBuilder();\ntry {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n    String line;\n    while ((line = reader.readLine()) != null) {\n        output.append(line);\n    }\n} catch (IOException e) {\n    throw new RuntimeException(e);\n}\nprocess.waitFor();\nint exit = process.exitValue();\nif (exit != 0) { // check exit code\n    throw new RuntimeException(\"Process exited with code \" + exit + \":\\n\" + output);\n}\nint actual = output.toString().split(\"\\n\").length;\nassertEquals(\"Number of lines\", 0, actual);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..47e46ca7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,23 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+StringBuilder output = new StringBuilder();\n+try {\n+    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));\n+    String line;\n+    while ((line = reader.readLine()) != null) {\n+        output.append(line);\n+    }\n+} catch (IOException e) {\n+    throw new RuntimeException(e);\n+}\n+process.waitFor();\n+int exit = process.exitValue();\n+if (exit != 0) { // check exit code\n+    throw new RuntimeException(\"Process exited with code \" + exit + \":\\n\" + output);\n+}\n+int actual = output.toString().split(\"\\n\").length;\n+assertEquals(\"Number of lines\", 0, actual);\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}