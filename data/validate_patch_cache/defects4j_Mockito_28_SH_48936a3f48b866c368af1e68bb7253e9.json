{
    "patch": "            Optional<Object> optMock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).findBestMatch();\n            optMock.ifPresent(new Consumer<Object>() {\n                @Override\n                public void accept(Object mock) {\n                    injector.inject(fieldInstance, field, mock);\n                    mocks.remove(mock);\n                }\n            });",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..bc9ccf130 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,14 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Optional<Object> optMock = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).findBestMatch();\n+            optMock.ifPresent(new Consumer<Object>() {\n+                @Override\n+                public void accept(Object mock) {\n+                    injector.inject(fieldInstance, field, mock);\n+                    mocks.remove(mock);\n+                }\n+            });\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}