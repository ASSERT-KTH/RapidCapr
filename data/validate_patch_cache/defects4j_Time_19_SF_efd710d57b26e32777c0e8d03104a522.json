{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int localOffset = getOffset(instantLocal);\n        long instantAdjusted = instantLocal + localOffset;\n        if (instantLocal > 0 && instantAdjusted < 0 && localOffset > 0) {\n            return getOffset(Long.MAX_VALUE);\n        }\n        int adjustedOffset = getOffset(instantAdjusted);\n        if (localOffset != adjustedOffset) {\n            long nextTransition = nextTransition(instantLocal - localOffset);\n            if ((instantLocal - localOffset) < nextTransition) {\n                return localOffset;\n            } else {\n                return adjustedOffset;\n            }\n        }\n        return localOffset;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..a52eb852 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,21 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+        int localOffset = getOffset(instantLocal);\n+        long instantAdjusted = instantLocal + localOffset;\n+        if (instantLocal > 0 && instantAdjusted < 0 && localOffset > 0) {\n+            return getOffset(Long.MAX_VALUE);\n+        }\n+        int adjustedOffset = getOffset(instantAdjusted);\n+        if (localOffset != adjustedOffset) {\n+            long nextTransition = nextTransition(instantLocal - localOffset);\n+            if ((instantLocal - localOffset) < nextTransition) {\n+                return localOffset;\n+            } else {\n+                return adjustedOffset;\n             }\n         }\n-        return offsetAdjusted;\n+        return localOffset;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}