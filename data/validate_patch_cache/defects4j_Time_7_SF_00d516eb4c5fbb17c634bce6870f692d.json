{
    "patch": "    public int parseInto(DateTimeParserBucket bucket, CharSequence text, int position) {\n        // convert to string before parsing, as subSequence(,,,).toString() is slow\n        String str = text.toString();\n        // handle most characters quickly\n        int newPos = super.parseInto(bucket, str, position);\n        if (newPos < 0) {\n            return newPos;\n        }\n        // If string ends before TZ identifier popped then don't process\n        if (newPos >= str.length()) {\n            return newPos;\n        }\n        // Peek ahead to next character\n        char c = str.charAt(newPos);\n        // check if a timezone is specified\n        if (c == '+' || c == '-') {\n            String offset_str_orig = str.substring(newPos);\n            newPos += offset_str_orig.length();\n            // Try to parse the rest of string as offset identifier, using letters\n            String offset_id = null;\n            int idNewPos = -1;\n            char cStart = offset_str_orig.charAt(0);\n            if (cStart == '+' || cStart == '-') {  // sign character from offset\n                idNewPos = bucket.parseIntoWithCharOffset(offset_str_orig, newPos, cStart);\n            } else {  // assume it is the full zone id\n                offset_id = findTimeZoneId(offset_str_orig);\n                if (offset_id == null) {\n                    idNewPos = ~(newPos-1);\n                } else {\n                    idNewPos = newPos + offset_id.length();\n                }\n            }\n            if (idNewPos >= 0) {\n                if (iOffsetParsed) {\n                    bucket.setOffset((Long)null);\n                } else {\n                    bucket.savedFieldZeros = null;\n                    bucket.saveField(DateTimeFieldType.timezone(), \"\");\n                }\n                return bucket.setParseOption(idNewPos);\n            }\n            if (idNewPos != ~newPos || cStart != '-') {  // allow negative zero offset id\n                return ~(newPos-1);\n            }\n            int offset = parseOffset(offset_str_orig.substring(1));\n            offset = -offset;\n            bucket.setOffset(Integer.valueOf(offset));\n        } else if (c == 'Z' || c == 'z') {\n            if (bucket.getZone() != null) {\n                if (iOffsetParsed) {\n                    bucket.setOffset((Long)null);\n                } else {\n                    bucket.savedFieldZeros = null;\n                    bucket.saveField(DateTimeFieldType.timezone(), \"\");\n                }\n                return bucket.setParseOption(newPos);\n            }\n            bucket.setOffset(0);\n            bucket.setZone(DateTimeZone.UTC);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..9c46e124 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,32 +697,65 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+    public int parseInto(DateTimeParserBucket bucket, CharSequence text, int position) {\n+        // convert to string before parsing, as subSequence(,,,).toString() is slow\n+        String str = text.toString();\n+        // handle most characters quickly\n+        int newPos = super.parseInto(bucket, str, position);\n+        if (newPos < 0) {\n+            return newPos;\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        // If string ends before TZ identifier popped then don't process\n+        if (newPos >= str.length()) {\n+            return newPos;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        // Peek ahead to next character\n+        char c = str.charAt(newPos);\n+        // check if a timezone is specified\n+        if (c == '+' || c == '-') {\n+            String offset_str_orig = str.substring(newPos);\n+            newPos += offset_str_orig.length();\n+            // Try to parse the rest of string as offset identifier, using letters\n+            String offset_id = null;\n+            int idNewPos = -1;\n+            char cStart = offset_str_orig.charAt(0);\n+            if (cStart == '+' || cStart == '-') {  // sign character from offset\n+                idNewPos = bucket.parseIntoWithCharOffset(offset_str_orig, newPos, cStart);\n+            } else {  // assume it is the full zone id\n+                offset_id = findTimeZoneId(offset_str_orig);\n+                if (offset_id == null) {\n+                    idNewPos = ~(newPos-1);\n+                } else {\n+                    idNewPos = newPos + offset_id.length();\n+                }\n+            }\n+            if (idNewPos >= 0) {\n+                if (iOffsetParsed) {\n+                    bucket.setOffset((Long)null);\n+                } else {\n+                    bucket.savedFieldZeros = null;\n+                    bucket.saveField(DateTimeFieldType.timezone(), \"\");\n+                }\n+                return bucket.setParseOption(idNewPos);\n+            }\n+            if (idNewPos != ~newPos || cStart != '-') {  // allow negative zero offset id\n+                return ~(newPos-1);\n+            }\n+            int offset = parseOffset(offset_str_orig.substring(1));\n+            offset = -offset;\n+            bucket.setOffset(Integer.valueOf(offset));\n+        } else if (c == 'Z' || c == 'z') {\n+            if (bucket.getZone() != null) {\n+                if (iOffsetParsed) {\n+                    bucket.setOffset((Long)null);\n+                } else {\n+                    bucket.savedFieldZeros = null;\n+                    bucket.saveField(DateTimeFieldType.timezone(), \"\");\n+                }\n+                return bucket.setParseOption(newPos);\n+            }\n+            bucket.setOffset(0);\n+            bucket.setZone(DateTimeZone.UTC);\n         }\n         return newPos;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}