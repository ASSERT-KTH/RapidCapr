{
    "patch": "        // inequality between two types\n        JSType typeA = null;\n        JSType typeB = null;\n        switch (this.testForInstanceofOrSubtype(that)) {\n          case TRUE:\n            typeA = this;\n            typeB = that;\n            break;\n          case FALSE:\n            typeA = that;\n            typeB = this;\n            break;\n          default:\n            break;\n        }\n        return new TypePair(typeA, typeB);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..777b2217 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,22 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // inequality between two types\n+        JSType typeA = null;\n+        JSType typeB = null;\n+        switch (this.testForInstanceofOrSubtype(that)) {\n+          case TRUE:\n+            typeA = this;\n+            typeB = that;\n+            break;\n+          case FALSE:\n+            typeA = that;\n+            typeB = this;\n+            break;\n+          default:\n+            break;\n+        }\n+        return new TypePair(typeA, typeB);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}