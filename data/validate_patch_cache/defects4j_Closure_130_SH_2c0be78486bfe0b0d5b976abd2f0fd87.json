{
    "patch": "      if ((name.type != Name.Type.FUNCTION && !name.isExported()) &&\n          name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 &&\n          (name.props == null || name.props.isEmpty())) {\n        // {@code name} meets condition (a).\n        inlineSimpleVar(namespace, name);\n      } else if (name.type == Name.Type.FUNCTION &&\n                 name.globalSets == 1 && name.localSets == 0 &&\n                 (name.props == null || name.props.isEmpty())) {\n        // Functions don't need to meet condition (c) to be inlined.\n        inlineSimpleVar(namespace, name);\n      } else if (name.isExported() && name.localSets == 0 && name.globalSets == 1 &&\n                 name.aliasingGets == 0 && name.props != null && name.props.size() == 1) {\n        // A single exported definition.\n        Ref r = Iterables.getOnlyElement(name.getRefs());\n        if (r.type == Ref.Type.SET_FROM_GLOBAL) {\n          Node value = r.getNode().getFirstChild();\n          Node assign = new Node(Token.ASSIGN,\n              NodeUtil.newName(r.getNode().getLineno(), name.props.get(0).getBaseName()), value);\n          assign.useSourceInfoFrom(value);\n          NodeUtil.getEnclosingStatement(r.getNode()).replaceChild(r.getNode(), assign);\n          compiler.reportChangeToEnclosingScope(assign);\n        }\n      } else if (name.localSets == 0 &&\n                 name.type == Name.Type.OBJECTLIT &&\n                 name.aliasingGets == 0 &&\n                 name.props != null && canEliminateName(name)) {\n        // Eliminate the name entirely, as if it were a `var`.\n        eliminateNamespaceDefinition(namespace, name);\n      } else if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            // Try to inline it.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..1d49fe60 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,50 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if ((name.type != Name.Type.FUNCTION && !name.isExported()) &&\n+          name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 &&\n+          (name.props == null || name.props.isEmpty())) {\n+        // {@code name} meets condition (a).\n+        inlineSimpleVar(namespace, name);\n+      } else if (name.type == Name.Type.FUNCTION &&\n+                 name.globalSets == 1 && name.localSets == 0 &&\n+                 (name.props == null || name.props.isEmpty())) {\n+        // Functions don't need to meet condition (c) to be inlined.\n+        inlineSimpleVar(namespace, name);\n+      } else if (name.isExported() && name.localSets == 0 && name.globalSets == 1 &&\n+                 name.aliasingGets == 0 && name.props != null && name.props.size() == 1) {\n+        // A single exported definition.\n+        Ref r = Iterables.getOnlyElement(name.getRefs());\n+        if (r.type == Ref.Type.SET_FROM_GLOBAL) {\n+          Node value = r.getNode().getFirstChild();\n+          Node assign = new Node(Token.ASSIGN,\n+              NodeUtil.newName(r.getNode().getLineno(), name.props.get(0).getBaseName()), value);\n+          assign.useSourceInfoFrom(value);\n+          NodeUtil.getEnclosingStatement(r.getNode()).replaceChild(r.getNode(), assign);\n+          compiler.reportChangeToEnclosingScope(assign);\n+        }\n+      } else if (name.localSets == 0 &&\n+                 name.type == Name.Type.OBJECTLIT &&\n+                 name.aliasingGets == 0 &&\n+                 name.props != null && canEliminateName(name)) {\n+        // Eliminate the name entirely, as if it were a `var`.\n+        eliminateNamespaceDefinition(namespace, name);\n+      } else if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            // Try to inline it.\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}