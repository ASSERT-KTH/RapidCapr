{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringInternal(n);\n    }\n  }\n\n  private static boolean mayBeStringInternal(Node n) {\n    JSType type = n.getJSType();\n    if (type != null && type.isSubtypeOfString()) {\n      return true;\n    }\n    switch (n.getToken()) {\n      case ADD:\n        return mayBeStringInternal(n.getFirstChild())\n            || mayBeStringInternal(n.getLastChild());\n      case GETPROP:\n        // Check if getting the \"length\" property of a string.\n        if (n.getLastChild().getString().equals(\"length\") &&\n            mayBeStringInternal(n.getFirstChild())) {\n          return true;\n        }\n        break;\n      default:\n        break;\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..1dcbb49e 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,15 +1411,36 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      return mayBeStringInternal(n);\n     }\n   }\n \n+  private static boolean mayBeStringInternal(Node n) {\n+    JSType type = n.getJSType();\n+    if (type != null && type.isSubtypeOfString()) {\n+      return true;\n+    }\n+    switch (n.getToken()) {\n+      case ADD:\n+        return mayBeStringInternal(n.getFirstChild())\n+            || mayBeStringInternal(n.getLastChild());\n+      case GETPROP:\n+        // Check if getting the \"length\" property of a string.\n+        if (n.getLastChild().getString().equals(\"length\") &&\n+            mayBeStringInternal(n.getFirstChild())) {\n+          return true;\n+        }\n+        break;\n+      default:\n+        break;\n+    }\n+    return false;\n+  }\n+\n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)\n         && !isUndefined(n) && !n.isNull();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}