{
    "patch": "public double getPct(Object v) {\n    if (v instanceof Comparable) {\n        @SuppressWarnings(\"unchecked\")\n        List<? extends Comparable<?>> data = this.getOrderedItems();\n        int index = Collections.binarySearch(data, (Comparable<?>) v);\n        if (index < 0) {\n            index = -(index + 1);\n        }\n        double pct = (double) (index + 1) / (double) data.size();\n        return pct;\n    }\n    throw new IllegalArgumentException(\"Parameter v must implement Comparable interface.\");\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/Frequency.java b/src/main/java/org/apache/commons/math/stat/Frequency.java\nindex c45d72883..a11d74881 100644\n--- a/src/main/java/org/apache/commons/math/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math/stat/Frequency.java\n@@ -299,9 +299,19 @@ public class Frequency implements Serializable {\n      * @deprecated replaced by {@link #getPct(Comparable)} as of 2.0\n      */\n     @Deprecated\n-    public double getPct(Object v) {\n-        return getCumPct((Comparable<?>) v);\n+public double getPct(Object v) {\n+    if (v instanceof Comparable) {\n+        @SuppressWarnings(\"unchecked\")\n+        List<? extends Comparable<?>> data = this.getOrderedItems();\n+        int index = Collections.binarySearch(data, (Comparable<?>) v);\n+        if (index < 0) {\n+            index = -(index + 1);\n+        }\n+        double pct = (double) (index + 1) / (double) data.size();\n+        return pct;\n     }\n+    throw new IllegalArgumentException(\"Parameter v must implement Comparable interface.\");\n+}\n \n     /**\n      * Returns the percentage of values that are equal to v",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}