{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0) {\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref alias : refs) {\n          if (alias.type == Type.ALIASING_GET && alias.scope.isLocal()) {\n            // save the next node in the worklist\n            // to be evaluated in the next iteration\n            Name next = name.getNextSibling();\n            if (inlineAliasIfPossible(alias, namespace)) {\n              name.removeRef(alias);\n            }\n            // if the alias is inlined, the syntax tree might have changed,\n            // so we need to search for the name again\n            // and add it back into the worklist\n            // to be evaluated again in the next iteration\n            name = namespace.getOwnSlot(name.getFullName());\n            if (name != null) {\n              workList.push(name);\n            }\n            // add the sibling node back into the worklist\n            if (next != null) {\n              workList.push(next);\n            }\n            // break the for loop after finding the first alias\n            break;\n          }\n        }\n      }\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..9a5a8cb0 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,39 +158,44 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n-    // Invariant: All the names in the worklist meet condition (a).\n-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+private void inlineAliases(GlobalNamespace namespace) {\n+    Deque<Name> workList = new ArrayDeque<>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n-\n-      // Don't attempt to inline a getter or setter property as a variable.\n       if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n         continue;\n       }\n-\n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n         List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        for (Ref alias : refs) {\n+          if (alias.type == Type.ALIASING_GET && alias.scope.isLocal()) {\n+            // save the next node in the worklist\n+            // to be evaluated in the next iteration\n+            Name next = name.getNextSibling();\n+            if (inlineAliasIfPossible(alias, namespace)) {\n+              name.removeRef(alias);\n+            }\n+            // if the alias is inlined, the syntax tree might have changed,\n+            // so we need to search for the name again\n+            // and add it back into the worklist\n+            // to be evaluated again in the next iteration\n+            name = namespace.getOwnSlot(name.getFullName());\n+            if (name != null) {\n+              workList.push(name);\n             }\n+            // add the sibling node back into the worklist\n+            if (next != null) {\n+              workList.push(next);\n+            }\n+            // break the for loop after finding the first alias\n+            break;\n           }\n         }\n       }\n-\n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n       if ((name.type == Name.Type.OBJECTLIT ||\n            name.type == Name.Type.FUNCTION) &&\n           name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n         workList.addAll(name.props);\n       }\n     }",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}