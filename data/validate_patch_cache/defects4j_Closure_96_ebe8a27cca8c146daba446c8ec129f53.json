{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    boolean hasVarArgs = functionType.isVarArgs();\n\n    while (arguments.hasNext()) {\n      argument = arguments.next();\n\n      if (parameters.hasNext()) {\n        parameter = parameters.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n        continue;\n      }\n\n      if (hasVarArgs) {\n        // We have a varargs function and arguments\n        // are all placed in the parameter after this point\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), functionType.getRestArgumentType(),\n            call, ++ordinal);\n      } else {\n        // We have a fixed-args function and we're over the number of parameters\n        int numArgs = call.getChildCount() - 1;\n        int minArgs = functionType.getMinArguments();\n        int maxArgs = functionType.getMaxArguments();\n        if (minArgs > numArgs || maxArgs < numArgs) {\n          report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n        }\n        break;\n      }\n    }\n\n    // If we still have parameters, and this is not a var_args function\n    if (!hasVarArgs && parameters.hasNext()) {\n      for (int i = ordinal + 1; parameters.hasNext(); i++) {\n        parameter = parameters.next();\n        report(t, call, MISSING_ARGUMENTS,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            parameter.getString(), String.valueOf(i));\n      }\n    }\n\n    // If this is a var-args function and there's at least one missing element\n    if (hasVarArgs && !arguments.hasNext()) {\n      validator.expectArgumentMatchesParameter(t,\n          null, null, functionType.getRestArgumentType(), call, ++ordinal);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..7dbd9c1a 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,27 +1405,56 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+    boolean hasVarArgs = functionType.isVarArgs();\n+\n+    while (arguments.hasNext()) {\n       argument = arguments.next();\n-      ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n+      if (parameters.hasNext()) {\n+        parameter = parameters.next();\n+        ordinal++;\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+        continue;\n+      }\n+\n+      if (hasVarArgs) {\n+        // We have a varargs function and arguments\n+        // are all placed in the parameter after this point\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), functionType.getRestArgumentType(),\n+            call, ++ordinal);\n+      } else {\n+        // We have a fixed-args function and we're over the number of parameters\n+        int numArgs = call.getChildCount() - 1;\n+        int minArgs = functionType.getMinArguments();\n+        int maxArgs = functionType.getMaxArguments();\n+        if (minArgs > numArgs || maxArgs < numArgs) {\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+        }\n+        break;\n+      }\n+    }\n+\n+    // If we still have parameters, and this is not a var_args function\n+    if (!hasVarArgs && parameters.hasNext()) {\n+      for (int i = ordinal + 1; parameters.hasNext(); i++) {\n+        parameter = parameters.next();\n+        report(t, call, MISSING_ARGUMENTS,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            parameter.getString(), String.valueOf(i));\n+      }\n+    }\n+\n+    // If this is a var-args function and there's at least one missing element\n+    if (hasVarArgs && !arguments.hasNext()) {\n+      validator.expectArgumentMatchesParameter(t,\n+          null, null, functionType.getRestArgumentType(), call, ++ordinal);\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}