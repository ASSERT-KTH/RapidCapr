{
    "patch": "private static enum VarLiveness {\n  READ,\n  WRITE,\n  KILL,\n  NEVER_LIVE,\n  MAYBE_LIVE,\n}\n\nprivate VarLiveness isVariableReadBeforeKill(\n    Node n, String variable, boolean isVarDeclaration) {\n  if (isVarDeclaration) {\n    if (NodeUtil.isInvocationTarget(n) && n.getParent().isVar()) {\n      return VarLiveness.READ;\n    } else {\n      return VarLiveness.WRITE;\n    }\n  } else if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n    if (NodeUtil.isLhs(n, n.getParent())) {\n      // The expression to which the assignment is made is evaluated before\n      // the RHS is evaluated (normal left to right evaluation) but the KILL\n      // occurs after the RHS is evaluated.\n      return VarLiveness.KILL;\n    } else if (NodeUtil.isExprAssign(n.getParent())) {\n      return VarLiveness.WRITE;\n    } else {\n      return VarLiveness.READ;\n    }\n  } else {\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n      // Not a FUNCTION and not a BLOCK\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)\n          && !child.isBlock()) {\n        VarLiveness state = isVariableReadBeforeKill(\n            child, variable, false /* not a VAR node */);\n        if (state != VarLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VarLiveness.MAYBE_LIVE;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..58a638f3 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,48 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n-    }\n+private static enum VarLiveness {\n+  READ,\n+  WRITE,\n+  KILL,\n+  NEVER_LIVE,\n+  MAYBE_LIVE,\n+}\n \n+private VarLiveness isVariableReadBeforeKill(\n+    Node n, String variable, boolean isVarDeclaration) {\n+  if (isVarDeclaration) {\n+    if (NodeUtil.isInvocationTarget(n) && n.getParent().isVar()) {\n+      return VarLiveness.READ;\n+    } else {\n+      return VarLiveness.WRITE;\n+    }\n+  } else if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    if (NodeUtil.isLhs(n, n.getParent())) {\n+      // The expression to which the assignment is made is evaluated before\n+      // the RHS is evaluated (normal left to right evaluation) but the KILL\n+      // occurs after the RHS is evaluated.\n+      return VarLiveness.KILL;\n+    } else if (NodeUtil.isExprAssign(n.getParent())) {\n+      return VarLiveness.WRITE;\n+    } else {\n+      return VarLiveness.READ;\n+    }\n+  } else {\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n+         child != null; child = child.getNext()) {\n+      // Not a FUNCTION and not a BLOCK\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)\n+          && !child.isBlock()) {\n+        VarLiveness state = isVariableReadBeforeKill(\n+            child, variable, false /* not a VAR node */);\n+        if (state != VarLiveness.MAYBE_LIVE) {\n           return state;\n         }\n       }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n+    return VarLiveness.MAYBE_LIVE;\n   }\n }\n+}",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}