{
    "patch": "import org.junit.Assert;\n\npublic class MathUtils {\n    \n    public static boolean equals(double x, double y) {\n        return Double.compare(x, y) == 0 || (Double.isNaN(x) && Double.isNaN(y));\n    }\n\n    public static boolean equals(double[] expected, double[] actual, double eps) {\n        if (expected == null || actual == null) {\n            return (expected == null) && (actual == null);\n        }\n        Assert.assertEquals(\"array lengths differ\", expected.length, actual.length);\n        for (int i = 0; i < expected.length; i++) {\n            if (!equals(expected[i], actual[i], eps)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public static boolean equalsIncludingNaN(double[] expected, double[] actual, double eps) {\n        if (expected == null || actual == null) {\n            return (expected == null) && (actual == null);\n        }\n        Assert.assertEquals(\"array lengths differ\", expected.length, actual.length);\n        for (int i = 0; i < expected.length; i++) {\n            if (Double.isNaN(expected[i]) && Double.isNaN(actual[i])) {\n                continue;\n            }\n            if (!equals(expected[i], actual[i], eps)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..53c2880f8 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,10 +413,44 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n+import org.junit.Assert;\n+\n+public class MathUtils {\n+    \n     public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+        return Double.compare(x, y) == 0 || (Double.isNaN(x) && Double.isNaN(y));\n     }\n \n+    public static boolean equals(double[] expected, double[] actual, double eps) {\n+        if (expected == null || actual == null) {\n+            return (expected == null) && (actual == null);\n+        }\n+        Assert.assertEquals(\"array lengths differ\", expected.length, actual.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            if (!equals(expected[i], actual[i], eps)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static boolean equalsIncludingNaN(double[] expected, double[] actual, double eps) {\n+        if (expected == null || actual == null) {\n+            return (expected == null) && (actual == null);\n+        }\n+        Assert.assertEquals(\"array lengths differ\", expected.length, actual.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            if (Double.isNaN(expected[i]) && Double.isNaN(actual[i])) {\n+                continue;\n+            }\n+            if (!equals(expected[i], actual[i], eps)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+\n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are\n      * equal as defined by {@link #equals(double,double) this method}.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}