{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    instantMillis += chrono.getZone().getOffset(instantMillis); // adjust for local offset\n    chrono = selectChronology(chrono);\n\n    int defaultYear = iDefaultYear;\n    // If default year is specified and input text does not have a year field, use the default year\n    if (defaultYear > 0 && !parser.prints(GJLocaleSymbols.SP_YEAR).contains(\"y\")) {\n        DateTimeField field = chrono.year();\n        int parsedMonth = 0, parsedDay = 1; // default to Jan 1\n        // Attempt to parse month and day fields\n        if (parser.prints(GJLocaleSymbols.SP_MONTH_OF_YEAR).contains(\"M\")) {\n            parsedMonth = field.set(parsedMonth, parser.parseInto(field.getParser(), text, position));\n            position = parser.pos;\n            if (parser.prints(GJLocaleSymbols.SP_DAY_OF_MONTH).contains(\"d\")) {\n                parsedDay = field.set(parsedDay, parser.parseInto(field.getParser(), text, position));\n                position = parser.pos;\n            }\n        } else if (parser.prints(GJLocaleSymbols.SP_DAY_OF_MONTH).contains(\"d\")) {\n            parsedDay = field.set(parsedDay, parser.parseInto(field.getParser(), text, position));\n            position = parser.pos;\n        }\n        // Use the parsed fields to set the default year\n        defaultYear = new LocalDate(defaultYear, parsedMonth, parsedDay).getYear();\n    }\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n        instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n    instant.setMillis(bucket.computeMillis());\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        chrono = chrono.withZone(parsedZone);\n    } else if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..454475f2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,55 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    instantMillis += chrono.getZone().getOffset(instantMillis); // adjust for local offset\n+    chrono = selectChronology(chrono);\n+\n+    int defaultYear = iDefaultYear;\n+    // If default year is specified and input text does not have a year field, use the default year\n+    if (defaultYear > 0 && !parser.prints(GJLocaleSymbols.SP_YEAR).contains(\"y\")) {\n+        DateTimeField field = chrono.year();\n+        int parsedMonth = 0, parsedDay = 1; // default to Jan 1\n+        // Attempt to parse month and day fields\n+        if (parser.prints(GJLocaleSymbols.SP_MONTH_OF_YEAR).contains(\"M\")) {\n+            parsedMonth = field.set(parsedMonth, parser.parseInto(field.getParser(), text, position));\n+            position = parser.pos;\n+            if (parser.prints(GJLocaleSymbols.SP_DAY_OF_MONTH).contains(\"d\")) {\n+                parsedDay = field.set(parsedDay, parser.parseInto(field.getParser(), text, position));\n+                position = parser.pos;\n+            }\n+        } else if (parser.prints(GJLocaleSymbols.SP_DAY_OF_MONTH).contains(\"d\")) {\n+            parsedDay = field.set(parsedDay, parser.parseInto(field.getParser(), text, position));\n+            position = parser.pos;\n         }\n-        return newPos;\n-    }\n+        // Use the parsed fields to set the default year\n+        defaultYear = new LocalDate(defaultYear, parsedMonth, parsedDay).getYear();\n+    }\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n+        instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n+    int newPos = parser.parseInto(bucket, text, position);\n+    instant.setMillis(bucket.computeMillis());\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        chrono = chrono.withZone(parsedZone);\n+    } else if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}