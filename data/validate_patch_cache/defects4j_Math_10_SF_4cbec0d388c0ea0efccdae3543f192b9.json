{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // check for NaN values\n        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n            result[resultOffset] = Double.NaN;\n            return;\n        }\n\n        // compute atan2(y, x)\n        final double xi = x[xOffset];\n        final double yi = y[yOffset];\n        double angle;\n        if (xi == 0) {\n            angle = yi == 0 ? 0 : (yi > 0 ? FastMath.PI/2 : -FastMath.PI/2);\n        } else if (xi > 0) {\n            angle = FastMath.atan(yi / xi);\n        } else {\n            angle = FastMath.atan(yi / xi) + (yi < 0 ? -FastMath.PI : FastMath.PI);\n        }\n        result[resultOffset] = angle;\n        for (int i = 1; i < getSize(); ++i) {\n            result[resultOffset+i] = 0;\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..228a568b8 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,43 +1379,31 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n+public void atan2(final double[] y, final int yOffset,\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n+        // check for NaN values\n+        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+            result[resultOffset] = Double.NaN;\n+            return;\n+        }\n \n+        // compute atan2(y, x)\n+        final double xi = x[xOffset];\n+        final double yi = y[yOffset];\n+        double angle;\n+        if (xi == 0) {\n+            angle = yi == 0 ? 0 : (yi > 0 ? FastMath.PI/2 : -FastMath.PI/2);\n+        } else if (xi > 0) {\n+            angle = FastMath.atan(yi / xi);\n         } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n+            angle = FastMath.atan(yi / xi) + (yi < 0 ? -FastMath.PI : FastMath.PI);\n+        }\n+        result[resultOffset] = angle;\n+        for (int i = 1; i < getSize(); ++i) {\n+            result[resultOffset+i] = 0;\n         }\n-\n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}