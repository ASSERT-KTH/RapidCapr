{
    "patch": "DateTimeZone zone = bucket.getZone() != null ? bucket.getZone() : chrono.getZone();\n\nlong offsetInMillis = 0;\nInteger parsedOffset = bucket.getOffsetInteger();\nif (parsedOffset != null) {\n    offsetInMillis = parsedOffset.intValue();\n} else {\n    offsetInMillis = chrono.getZone().getOffset(instantLocal);\n}\n\nDateTimeParserBucket newBucket = new DateTimeParserBucket(\n    instantLocal - offsetInMillis, chrono, iLocale, iPivotYear, zone, parsedOffset, parsedOffset, parsedOffset);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..ea3d7538 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,18 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+DateTimeZone zone = bucket.getZone() != null ? bucket.getZone() : chrono.getZone();\n+\n+long offsetInMillis = 0;\n+Integer parsedOffset = bucket.getOffsetInteger();\n+if (parsedOffset != null) {\n+    offsetInMillis = parsedOffset.intValue();\n+} else {\n+    offsetInMillis = chrono.getZone().getOffset(instantLocal);\n+}\n+\n+DateTimeParserBucket newBucket = new DateTimeParserBucket(\n+    instantLocal - offsetInMillis, chrono, iLocale, iPivotYear, zone, parsedOffset, parsedOffset, parsedOffset);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}