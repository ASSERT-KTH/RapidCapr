{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      boolean removedArgs = false; // Added line\n      for (Node param : argList.children()) { // Changed while to for loop\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(param);\n          removedArgs = true;\n          compiler.reportCodeChange();\n        } else if (removedArgs){ // Added elseif block\n          throw new IllegalStateException(\n              \"Unused parameters can only be removed from the end, \" +\n              \"since that preserves the function's arity.\\n\" +\n              \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n              \"Removed parameter: \" + param.toStringTree());\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..92a236c9 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,39 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      boolean removedArgs = false; // Added line\n+      for (Node param : argList.children()) { // Changed while to for loop\n+        Var var = fnScope.getVar(param.getString());\n+        if (!referenced.contains(var)) {\n+          argList.removeChild(param);\n+          removedArgs = true;\n+          compiler.reportCodeChange();\n+        } else if (removedArgs){ // Added elseif block\n+          throw new IllegalStateException(\n+              \"Unused parameters can only be removed from the end, \" +\n+              \"since that preserves the function's arity.\\n\" +\n+              \"Function parameter list: \" + argList.toStringTree() + \"\\n\" +\n+              \"Removed parameter: \" + param.toStringTree());\n+        } else {\n+          break;\n+        }\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: variable function is already defined in method removeUnreferencedFunctionArgs(Scope)",
    "test_result": "ERROR"
}