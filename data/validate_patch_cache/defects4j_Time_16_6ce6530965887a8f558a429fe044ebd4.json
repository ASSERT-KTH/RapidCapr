{
    "patch": "        int year = bucket.computeLocalMillis(chrono, text);\n        if (iDefaultYear != null && bucket.getPivotYear() < 0) {\n            year = iDefaultYear;\n        }\n        instantLocal = chrono.getDateTimeMillis(year, bucket.getMonthOfYear(), bucket.getDayOfMonth(),\n                                                bucket.getHourOfDay(), bucket.getMinuteOfHour(),\n                                                bucket.getSecondOfMinute(), bucket.getMillisOfSecond());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..f65388d0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,13 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        int year = bucket.computeLocalMillis(chrono, text);\n+        if (iDefaultYear != null && bucket.getPivotYear() < 0) {\n+            year = iDefaultYear;\n+        }\n+        instantLocal = chrono.getDateTimeMillis(year, bucket.getMonthOfYear(), bucket.getDayOfMonth(),\n+                                                bucket.getHourOfDay(), bucket.getMinuteOfHour(),\n+                                                bucket.getSecondOfMinute(), bucket.getMillisOfSecond());\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}