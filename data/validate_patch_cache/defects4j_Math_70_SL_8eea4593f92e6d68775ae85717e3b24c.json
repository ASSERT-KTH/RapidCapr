{
    "patch": "if (Double.isNaN(min) || Double.isNaN(max) || f.value(initial) * f.value(min) > 0 || f.value(initial) * f.value(max) > 0) {\n    return Double.NaN;\n} else {\n    return solve(f, (f.value(initial) * f.value(min) < 0) ? min : initial, (f.value(initial) * f.value(max) < 0) ? max : initial);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..583d8d2cf 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,11 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (Double.isNaN(min) || Double.isNaN(max) || f.value(initial) * f.value(min) > 0 || f.value(initial) * f.value(max) > 0) {\n+    return Double.NaN;\n+} else {\n+    return solve(f, (f.value(initial) * f.value(min) < 0) ? min : initial, (f.value(initial) * f.value(max) < 0) ? max : initial);\n+}\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<NaN>",
    "test_result": "FAIL"
}