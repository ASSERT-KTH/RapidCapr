{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        boolean foundPositiveCoefficient = false;\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n            // if multiple variables can take a given value \n            // then we choose the first and set the rest equal to 0\n            coefficients[i] =\n                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n                (restrictToNonNegative ? 0 : mostNegative);\n            if (basicRow != null) {\n                boolean coefficientIsPositive = false;\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        coefficients[i] = 0;\n                    } else if (tableau.getEntry(basicRow, j) > 0) {\n                        coefficientIsPositive = true;\n                    }\n                }\n                if (coefficientIsPositive) {\n                    foundPositiveCoefficient = true;\n                    coefficients[i] = 0;\n                }\n            }\n        }\n\n        if (!foundPositiveCoefficient && mostNegative < 0) {\n            for (int i = 0; i < coefficients.length; ++i) {\n                if (coefficients[i] == 0 && isRestricted(i)) {\n                    coefficients[i] = -0.0;\n                    break;\n                }\n            }\n        }\n\n        return new RealPointValuePair(coefficients, computeObjectiveValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..ca30f7f86 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -326,22 +326,40 @@ class SimplexTableau implements Serializable {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        boolean foundPositiveCoefficient = false;\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+            // if multiple variables can take a given value \n+            // then we choose the first and set the rest equal to 0\n+            coefficients[i] =\n+                (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n+                (restrictToNonNegative ? 0 : mostNegative);\n             if (basicRow != null) {\n+                boolean coefficientIsPositive = false;\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        coefficients[i] = 0;\n+                    } else if (tableau.getEntry(basicRow, j) > 0) {\n+                        coefficientIsPositive = true;\n                     }\n                 }\n+                if (coefficientIsPositive) {\n+                    foundPositiveCoefficient = true;\n+                    coefficients[i] = 0;\n+                }\n+            }\n+        }\n+\n+        if (!foundPositiveCoefficient && mostNegative < 0) {\n+            for (int i = 0; i < coefficients.length; ++i) {\n+                if (coefficients[i] == 0 && isRestricted(i)) {\n+                    coefficients[i] = -0.0;\n+                    break;\n+                }\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+\n+        return new RealPointValuePair(coefficients, computeObjectiveValue(coefficients));\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}