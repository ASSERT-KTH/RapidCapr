{
    "patch": "      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n\n        // Remove the require statement\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n        return;\n      } else {\n        JSModule providedModule = provided.explicitModule;\n        Preconditions.checkNotNull(providedModule);\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n          return;\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Remove the require statement\n      parent.detachFromParent();\n      compiler.reportCodeChange();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..6fbf23de 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,35 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+\n+        // Remove the require statement\n+        parent.detachFromParent();\n+        compiler.reportCodeChange();\n+        return;\n+      } else {\n+        JSModule providedModule = provided.explicitModule;\n+        Preconditions.checkNotNull(providedModule);\n+        JSModule module = t.getModule();\n+        if (moduleGraph != null &&\n+            module != providedModule &&\n+            !moduleGraph.dependsOn(module, providedModule)) {\n+          compiler.report(\n+              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+                  providedModule.getName(),\n+                  module.getName()));\n+          return;\n+        }\n+      }\n+\n+      maybeAddToSymbolTable(left);\n+      maybeAddStringNodeToSymbolTable(arg);\n+\n+      // Remove the require statement\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}