{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n                                                    WhitespaceOption option) {\n  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n      token == JsDocToken.EOF) {\n    return new ExtractionInfo(\"\", token);\n  }\n\n  int startLineno = stream.getLineno();\n  int startCharno = stream.getCharno() + 1;\n\n  String content = \"\";\n  boolean unterminated = false;\n\n  do {\n    boolean ignoreStar = false;\n    int startOfLineCharno = startCharno;\n\n    // Read the content from the first line.\n    String line = \"\";\n    do {\n      line = stream.getRemainingJSDocLine();\n      stream.update();\n\n      if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n      }\n\n      if (line.startsWith(\"*\") || unterminated) {\n        if (line.endsWith(\"*/\")) {\n          content += line;\n          extractMultilineTextualBlockHelper(content, startLineno, startCharno);\n          return new ExtractionInfo(content, next());\n        } else if (line.endsWith(\"*\") && !line.equals(\"*\")) {\n          // Block comment closed with odd number of * characters\n          unterminated = true;\n          content += line + \"\\n\";\n          startOfLineCharno += line.length();\n        } else {\n          content += line + \"\\n\";\n          startOfLineCharno += line.length();\n        }\n      } else {\n        content += line + \"\\n\";\n        startOfLineCharno += line.length();\n        break;\n      }\n\n      ignoreStar = true;\n    } while (stream.peek() != JsDocToken.EOF && stream.peek() != JsDocToken.EOL);\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    JsDocToken tokenType = next();\n    while (JsDocToken.WHITESPACE.equals(tokenType)) {\n      startOfLineCharno += token.getRawText().length();\n      tokenType = next();\n    }\n\n    switch (tokenType) {\n      case STAR:\n        if (ignoreStar) {\n          // Mark the position after the star as the new start of the line.\n          startOfLineCharno += token.getRawText().length();\n        } else {\n          // The star is part of the comment.\n          content += '*';\n        }\n        break;\n      case EOL:\n        if (option != WhitespaceOption.SINGLE_LINE) {\n          content += \"\\n\";\n        }\n        break;\n      default:\n        unterminated = false;\n        // Mark the position after the token as the new start of the line.\n        startOfLineCharno += token.getRawText().length();\n        if (JsDocToken.BANG.equals(tokenType)) {\n          break;\n        }\n\n        if (tokenType == JsDocToken.EOC ||\n            tokenType == JsDocToken.EOF ||\n            // When we're capturing a license block, annotations\n            // in the block are ok.\n            (tokenType == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n          extractMultilineTextualBlockHelper(content, startLineno, startCharno);\n          return new ExtractionInfo(content.trim(), tokenType);\n        }\n\n        if (!\"*\".equals(token.getRawText())) { // Ignore standalone *\n          content += token.getRawText();\n        }\n        break;\n    }\n\n    startCharno = startOfLineCharno;\n  } while (true);\n}\n\nprivate void extractMultilineTextualBlockHelper(String content, int startLineno, int startCharno) {\n  int endLineno = stream.getLineno();\n  int endCharno = stream.getCharno() + 1;\n\n  if (!content.trim().isEmpty()) {\n    jsdocBuilder.markText(content, startLineno, startCharno, endLineno, endCharno);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..89affa45 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,107 +1326,115 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n+                                                    WhitespaceOption option) {\n+  if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n+      token == JsDocToken.EOF) {\n+    return new ExtractionInfo(\"\", token);\n+  }\n \n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n-    }\n+  int startLineno = stream.getLineno();\n+  int startCharno = stream.getCharno() + 1;\n \n-    stream.update();\n-    int startLineno = stream.getLineno();\n-    int startCharno = stream.getCharno() + 1;\n+  String content = \"\";\n+  boolean unterminated = false;\n+\n+  do {\n+    boolean ignoreStar = false;\n+    int startOfLineCharno = startCharno;\n \n     // Read the content from the first line.\n-    String line = stream.getRemainingJSDocLine();\n-    if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n-    }\n+    String line = \"\";\n+    do {\n+      line = stream.getRemainingJSDocLine();\n+      stream.update();\n \n-    StringBuilder builder = new StringBuilder();\n-    builder.append(line);\n+      if (option != WhitespaceOption.PRESERVE) {\n+        line = line.trim();\n+      }\n \n-    state = State.SEARCHING_ANNOTATION;\n-    token = next();\n+      if (line.startsWith(\"*\") || unterminated) {\n+        if (line.endsWith(\"*/\")) {\n+          content += line;\n+          extractMultilineTextualBlockHelper(content, startLineno, startCharno);\n+          return new ExtractionInfo(content, next());\n+        } else if (line.endsWith(\"*\") && !line.equals(\"*\")) {\n+          // Block comment closed with odd number of * characters\n+          unterminated = true;\n+          content += line + \"\\n\";\n+          startOfLineCharno += line.length();\n+        } else {\n+          content += line + \"\\n\";\n+          startOfLineCharno += line.length();\n+        }\n+      } else {\n+        content += line + \"\\n\";\n+        startOfLineCharno += line.length();\n+        break;\n+      }\n \n-    boolean ignoreStar = false;\n+      ignoreStar = true;\n+    } while (stream.peek() != JsDocToken.EOF && stream.peek() != JsDocToken.EOL);\n \n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n+    JsDocToken tokenType = next();\n+    while (JsDocToken.WHITESPACE.equals(tokenType)) {\n+      startOfLineCharno += token.getRawText().length();\n+      tokenType = next();\n+    }\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n-\n-            builder.append('*');\n-          }\n-\n-          token = next();\n-          continue;\n-\n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n-\n-          ignoreStar = true;\n-          token = next();\n-          continue;\n-\n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n-\n-              // All tokens must be separated by a space.\n-\n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n-\n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n-            }\n-\n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n-\n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n-            }\n+    switch (tokenType) {\n+      case STAR:\n+        if (ignoreStar) {\n+          // Mark the position after the star as the new start of the line.\n+          startOfLineCharno += token.getRawText().length();\n+        } else {\n+          // The star is part of the comment.\n+          content += '*';\n+        }\n+        break;\n+      case EOL:\n+        if (option != WhitespaceOption.SINGLE_LINE) {\n+          content += \"\\n\";\n+        }\n+        break;\n+      default:\n+        unterminated = false;\n+        // Mark the position after the token as the new start of the line.\n+        startOfLineCharno += token.getRawText().length();\n+        if (JsDocToken.BANG.equals(tokenType)) {\n+          break;\n+        }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+        if (tokenType == JsDocToken.EOC ||\n+            tokenType == JsDocToken.EOF ||\n+            // When we're capturing a license block, annotations\n+            // in the block are ok.\n+            (tokenType == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n+          extractMultilineTextualBlockHelper(content, startLineno, startCharno);\n+          return new ExtractionInfo(content.trim(), tokenType);\n+        }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+        if (!\"*\".equals(token.getRawText())) { // Ignore standalone *\n+          content += token.getRawText();\n+        }\n+        break;\n+    }\n \n-          line = stream.getRemainingJSDocLine();\n+    startCharno = startOfLineCharno;\n+  } while (true);\n+}\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+private void extractMultilineTextualBlockHelper(String content, int startLineno, int startCharno) {\n+  int endLineno = stream.getLineno();\n+  int endCharno = stream.getCharno() + 1;\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n+  if (!content.trim().isEmpty()) {\n+    jsdocBuilder.markText(content, startLineno, startCharno, endLineno, endCharno);\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}