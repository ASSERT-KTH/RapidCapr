{
    "patch": "        int[] idx = new int[last];\n        count = index;\n        for (int i = last - 1; i >= 0; i--) {\n            final int offset = uniCounterOffset[i];\n            idx[i] = count % offset;\n            count /= offset;\n        }\n\n        int sum = 0;\n        for (int i = last - 1; i >= 0; i--) {\n            sum += idx[i];\n            for (int j = 0; j < idx[i]; j++) {\n                indices[permutedIndex[i][j]]++;\n            }\n            if (i > 0) {\n                sum *= uniCounterOffset[i - 1];\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..19c3cac72 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,24 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int[] idx = new int[last];\n+        count = index;\n+        for (int i = last - 1; i >= 0; i--) {\n+            final int offset = uniCounterOffset[i];\n+            idx[i] = count % offset;\n+            count /= offset;\n+        }\n+\n+        int sum = 0;\n+        for (int i = last - 1; i >= 0; i--) {\n+            sum += idx[i];\n+            for (int j = 0; j < idx[i]; j++) {\n+                indices[permutedIndex[i][j]]++;\n+            }\n+            if (i > 0) {\n+                sum *= uniCounterOffset[i - 1];\n+            }\n         }\n-        --idx;\n-        indices[last] = idx;\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}