{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    // account for there being no constructor (e.g. \"new {x:3}\")\n    if (n.getFirstChild() == null) {\n      return scope;\n    }\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        } else {\n          // No constructor, use an unknown instance\n          type = getNativeType(UNKNOWN_TYPE);\n        }\n      }\n    }\n    if (type != null) {\n      n.setJSType(type);\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..d91655e4 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,8 +1031,11 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n+    // account for there being no constructor (e.g. \"new {x:3}\")\n+    if (n.getFirstChild() == null) {\n+      return scope;\n+    }\n \n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n@@ -1045,17 +1048,19 @@ class TypeInference\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+        } else {\n+          // No constructor, use an unknown instance\n+          type = getNativeType(UNKNOWN_TYPE);\n         }\n       }\n     }\n-    n.setJSType(type);\n+    if (type != null) {\n+      n.setJSType(type);\n+    }\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}