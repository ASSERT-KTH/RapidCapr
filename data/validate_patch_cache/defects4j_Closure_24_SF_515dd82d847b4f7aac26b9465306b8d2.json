{
    "patch": "    private void findAliases(NodeTraversal t) {\n        Scope scope = t.getScope();\n        for (Var v : scope.getVarIterable()) {\n            Node n = v.getNode();\n            int type = n.getType();\n            Node parent = n.getParent();\n            if (parent == null) {\n                continue;\n            }\n            if (parent.isFunction() && parent.getParent().isBlock() &&\n                    // Don't report inside the argument list\n                    parent.getParent().getParent().isCall()) {\n                continue;\n            }\n            if (parent.isFunction()) {\n                if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                    String name = n.getString();\n                    Var aliasVar = scope.getVar(name);\n                    aliases.put(name, aliasVar);\n                    // Note: the Var object for aliasVar need not be the same as v.\n                    // So always use aliasVar for the initial value.\n                    Node initialValue = aliasVar.getInitialValue();\n                    if (initialValue != null) {\n                        String qualifiedName = initialValue.getQualifiedName();\n                        transformation.addAlias(name, qualifiedName);\n                        // Bleeding functions already get a BAD_PARAMETERS error, so just\n                        // do nothing.\n                        // Parameters of the scope function also get a BAD_PARAMETERS error.\n                    } else {\n                        report(t, n, GOOG_SCOPE_CANNOT_ALIAS_UNDEFINED, name);\n                    }\n                } else {\n                    report(t, n, GOOG_SCOPE_NON_ALIAS_PARAM, n.getString());\n                }\n            } else if (parent.isCatch() && type == Token.NAME) {\n                addBadId(t, n, \"A catch variable\", BAD_CATCH_PARAMS);\n            } else if (parent.isBlock() &&\n                    parent.getParent() != null && parent.getParent().isCatch()) {\n                addBadId(t, n, \"A catch variable\", BAD_CATCH_PARAMS);\n            } else if (!parent.isVar()) {\n                addBadId(t, n, \"Not a global var\", NOT_GLOBAL_NAME);\n            } else if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n                report(t, n, GOOG_SCOPE_NON_ALIAS_GLOBAL, n.getString());\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ScopedAliases.java b/src/com/google/javascript/jscomp/ScopedAliases.java\nindex 30d29d0a..b55762fe 100644\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n@@ -268,32 +268,51 @@ class ScopedAliases implements HotSwapCompilerPass {\n       compiler.report(t.makeError(n, error, arguments));\n       hasErrors = true;\n     }\n-\n     private void findAliases(NodeTraversal t) {\n-      Scope scope = t.getScope();\n-      for (Var v : scope.getVarIterable()) {\n-        Node n = v.getNode();\n-        int type = n.getType();\n-        Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-          String name = n.getString();\n-          Var aliasVar = scope.getVar(name);\n-          aliases.put(name, aliasVar);\n-\n-          String qualifiedName =\n-              aliasVar.getInitialValue().getQualifiedName();\n-          transformation.addAlias(name, qualifiedName);\n-          // Bleeding functions already get a BAD_PARAMETERS error, so just\n-          // do nothing.\n-          // Parameters of the scope function also get a BAD_PARAMETERS\n-          // error.\n-        } else {\n-          // TODO(robbyw): Support using locals for private variables.\n-          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n+        Scope scope = t.getScope();\n+        for (Var v : scope.getVarIterable()) {\n+            Node n = v.getNode();\n+            int type = n.getType();\n+            Node parent = n.getParent();\n+            if (parent == null) {\n+                continue;\n+            }\n+            if (parent.isFunction() && parent.getParent().isBlock() &&\n+                    // Don't report inside the argument list\n+                    parent.getParent().getParent().isCall()) {\n+                continue;\n+            }\n+            if (parent.isFunction()) {\n+                if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                    String name = n.getString();\n+                    Var aliasVar = scope.getVar(name);\n+                    aliases.put(name, aliasVar);\n+                    // Note: the Var object for aliasVar need not be the same as v.\n+                    // So always use aliasVar for the initial value.\n+                    Node initialValue = aliasVar.getInitialValue();\n+                    if (initialValue != null) {\n+                        String qualifiedName = initialValue.getQualifiedName();\n+                        transformation.addAlias(name, qualifiedName);\n+                        // Bleeding functions already get a BAD_PARAMETERS error, so just\n+                        // do nothing.\n+                        // Parameters of the scope function also get a BAD_PARAMETERS error.\n+                    } else {\n+                        report(t, n, GOOG_SCOPE_CANNOT_ALIAS_UNDEFINED, name);\n+                    }\n+                } else {\n+                    report(t, n, GOOG_SCOPE_NON_ALIAS_PARAM, n.getString());\n+                }\n+            } else if (parent.isCatch() && type == Token.NAME) {\n+                addBadId(t, n, \"A catch variable\", BAD_CATCH_PARAMS);\n+            } else if (parent.isBlock() &&\n+                    parent.getParent() != null && parent.getParent().isCatch()) {\n+                addBadId(t, n, \"A catch variable\", BAD_CATCH_PARAMS);\n+            } else if (!parent.isVar()) {\n+                addBadId(t, n, \"Not a global var\", NOT_GLOBAL_NAME);\n+            } else if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+                report(t, n, GOOG_SCOPE_NON_ALIAS_GLOBAL, n.getString());\n+            }\n         }\n-        }\n-      }\n     }\n \n     private void validateScopeCall(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}