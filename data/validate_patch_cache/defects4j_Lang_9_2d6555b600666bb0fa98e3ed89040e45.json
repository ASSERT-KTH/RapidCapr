{
    "patch": "        StringBuilder regex= new StringBuilder();\n        List<Strategy> collector = new ArrayList<Strategy>();\n        List<Pattern> patternCollector = new ArrayList<Pattern>();\n\n        Matcher patternMatcher= formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField= patternMatcher.group();\n        Strategy currentStrategy= getStrategy(currentFormatField);\n        for(;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField= patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if(currentStrategy.addRegex(this, regex)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField= nextFormatField;\n            currentStrategy= nextStrategy;\n        }\n        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n\n        // remove duplicates\n        for (Strategy strategy : collector) {\n            Pattern matcher = strategy.getPattern();\n            if (!patternCollector.contains(matcher)) {\n                patternCollector.add(matcher);\n            }\n        }\n\n        strategies= new Strategy[patternCollector.size()];\n        for (int i = 0; i < patternCollector.size(); i++) {\n            for (Strategy strategy : collector) {\n                if (strategy.getPattern().pattern().equals(patternCollector.get(i).pattern())) {\n                    strategies[i] = strategy;\n                    break;\n                }\n            }\n        }\n        parsePattern= patternCollector.size() == 1 ? patternCollector.get(0) : Pattern.compile(\"(\" + regex.toString() + \")\"); ",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..21d82b55 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,54 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        StringBuilder regex= new StringBuilder();\n+        List<Strategy> collector = new ArrayList<Strategy>();\n+        List<Pattern> patternCollector = new ArrayList<Pattern>();\n+\n+        Matcher patternMatcher= formatPattern.matcher(pattern);\n+        if(!patternMatcher.lookingAt()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+\n+        currentFormatField= patternMatcher.group();\n+        Strategy currentStrategy= getStrategy(currentFormatField);\n+        for(;;) {\n+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if(!patternMatcher.lookingAt()) {\n+                nextStrategy = null;\n+                break;\n+            }\n+            String nextFormatField= patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if(currentStrategy.addRegex(this, regex)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentFormatField= nextFormatField;\n+            currentStrategy= nextStrategy;\n+        }\n+        if(currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField= null;\n+\n+        // remove duplicates\n+        for (Strategy strategy : collector) {\n+            Pattern matcher = strategy.getPattern();\n+            if (!patternCollector.contains(matcher)) {\n+                patternCollector.add(matcher);\n+            }\n+        }\n+\n+        strategies= new Strategy[patternCollector.size()];\n+        for (int i = 0; i < patternCollector.size(); i++) {\n+            for (Strategy strategy : collector) {\n+                if (strategy.getPattern().pattern().equals(patternCollector.get(i).pattern())) {\n+                    strategies[i] = strategy;\n+                    break;\n+                }\n+            }\n+        }\n+        parsePattern= patternCollector.size() == 1 ? patternCollector.get(0) : Pattern.compile(\"(\" + regex.toString() + \")\"); \n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable regex is already defined in method init()",
    "test_result": "ERROR"
}