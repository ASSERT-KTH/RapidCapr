{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            if (type.isSupported(DurationFieldType.years())) {\n                years = FieldUtils.safeAdd(years, months / 12);\n                result = result.withYears(years);\n            }\n            if (type.isSupported(DurationFieldType.months())) {\n                months = months % 12;\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..be7b2b8e 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1625,12 +1625,12 @@ public final class Period\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n+            if (type.isSupported(DurationFieldType.years())) {\n+                years = FieldUtils.safeAdd(years, months / 12);\n                 result = result.withYears(years);\n             }\n-            if (months != 0) {\n+            if (type.isSupported(DurationFieldType.months())) {\n+                months = months % 12;\n                 result = result.withMonths(months);\n             }\n         }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P27M> but was:<P3M>",
    "test_result": "FAIL"
}