{
    "patch": "public String format(Date date) {\n    Calendar c = new GregorianCalendar(mTimeZone);\n    c.setMinimalDaysInFirstWeek(4);\n    c.setFirstDayOfWeek(Calendar.MONDAY);\n    c.setTime(date);\n    int year = c.get(Calendar.YEAR);\n    int week = c.get(Calendar.WEEK_OF_YEAR);\n    if (week == 53 && c.get(Calendar.MONTH) == Calendar.JANUARY) {\n        // Special case: if the week number is 53 and the month is January,\n        // check if the following week belongs to the same year (ISO week year)\n        Calendar nextWeek = new GregorianCalendar(mTimeZone);\n        nextWeek.setTime(date);\n        nextWeek.add(Calendar.WEEK_OF_YEAR, 1);\n        int nextWeekYear = nextWeek.get(Calendar.YEAR);\n        if (nextWeekYear > year) {\n            week = 1;\n            year = nextWeekYear;\n        }\n    }\n    return applyRules(c, new StringBuffer(mMaxLengthEstimate), year, week).toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e30da2a5..601422ef 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -816,11 +816,27 @@ public class FastDateFormat extends Format {\n      * @param date  the date to format\n      * @return the formatted string\n      */\n-    public String format(Date date) {\n-        Calendar c = new GregorianCalendar(mTimeZone);\n-        c.setTime(date);\n-        return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();\n+public String format(Date date) {\n+    Calendar c = new GregorianCalendar(mTimeZone);\n+    c.setMinimalDaysInFirstWeek(4);\n+    c.setFirstDayOfWeek(Calendar.MONDAY);\n+    c.setTime(date);\n+    int year = c.get(Calendar.YEAR);\n+    int week = c.get(Calendar.WEEK_OF_YEAR);\n+    if (week == 53 && c.get(Calendar.MONTH) == Calendar.JANUARY) {\n+        // Special case: if the week number is 53 and the month is January,\n+        // check if the following week belongs to the same year (ISO week year)\n+        Calendar nextWeek = new GregorianCalendar(mTimeZone);\n+        nextWeek.setTime(date);\n+        nextWeek.add(Calendar.WEEK_OF_YEAR, 1);\n+        int nextWeekYear = nextWeek.get(Calendar.YEAR);\n+        if (nextWeekYear > year) {\n+            week = 1;\n+            year = nextWeekYear;\n+        }\n     }\n+    return applyRules(c, new StringBuffer(mMaxLengthEstimate), year, week).toString();\n+}\n \n     /**\n      * <p>Formats a <code>Calendar</code> object.</p>",
    "result_reason": "error: method applyRules in class FastDateFormat cannot be applied to given types;",
    "test_result": "ERROR"
}