{
    "patch": "public static final String escapeCsv(String str) {\n    if (StringUtils.containsNone(str, CSV_SEARCH_CHARS)) {\n        return str;\n    }\n    try (StringWriter writer = new StringWriter()) {\n        int len = str.length();\n        char c;\n        for (int i = 0; i < len; i++) {\n            c = str.charAt(i);\n            if (StringUtils.contains(CSV_SEARCH_CHARS, c)) {\n                // handle special case for double quotes\n                if (c == CSV_DOUBLE_QUOTE_CHAR) {\n                    writer.write(CSV_DOUBLE_QUOTE_CHAR);\n                }\n                writer.write(c);\n\n                // Check for surrogate pair chars\n                if (Character.isHighSurrogate(c) && i+1 < len && Character.isLowSurrogate(str.charAt(i+1))) {\n                    writer.write(str.charAt(++i));\n                }\n\n            } else if (Character.isHighSurrogate(c)) {\n                // Handle special case for high surrogate char followed by low surrogate char\n                if (i + 1 < len && Character.isLowSurrogate(str.charAt(i+1))) {\n                    writer.write(\"\\\\u\" + Integer.toHexString(c) + Integer.toHexString(str.charAt(++i)));\n                } else {\n                    writer.write(c);\n                }\n            } else {\n                writer.write(c);\n            }\n        }\n        return writer.toString();\n    } catch (IOException e) {\n        throw new UncheckedIOException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..eee6f969 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,43 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static final String escapeCsv(String str) {\n+    if (StringUtils.containsNone(str, CSV_SEARCH_CHARS)) {\n+        return str;\n+    }\n+    try (StringWriter writer = new StringWriter()) {\n+        int len = str.length();\n+        char c;\n+        for (int i = 0; i < len; i++) {\n+            c = str.charAt(i);\n+            if (StringUtils.contains(CSV_SEARCH_CHARS, c)) {\n+                // handle special case for double quotes\n+                if (c == CSV_DOUBLE_QUOTE_CHAR) {\n+                    writer.write(CSV_DOUBLE_QUOTE_CHAR);\n+                }\n+                writer.write(c);\n+\n+                // Check for surrogate pair chars\n+                if (Character.isHighSurrogate(c) && i+1 < len && Character.isLowSurrogate(str.charAt(i+1))) {\n+                    writer.write(str.charAt(++i));\n+                }\n+\n+            } else if (Character.isHighSurrogate(c)) {\n+                // Handle special case for high surrogate char followed by low surrogate char\n+                if (i + 1 < len && Character.isLowSurrogate(str.charAt(i+1))) {\n+                    writer.write(\"\\\\u\" + Integer.toHexString(c) + Integer.toHexString(str.charAt(++i)));\n+                } else {\n+                    writer.write(c);\n+                }\n+            } else {\n+                writer.write(c);\n             }\n         }\n+        return writer.toString();\n+    } catch (IOException e) {\n+        throw new UncheckedIOException(e);\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: try-with-resources is not supported in -source 1.5",
    "test_result": "ERROR"
}