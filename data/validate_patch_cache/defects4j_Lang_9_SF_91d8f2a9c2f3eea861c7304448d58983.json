{
    "patch": "private static final int[] MONTH_DAYS;\nstatic {\n    MONTH_DAYS = new int[MON_LEN.length];\n    int count = 0;\n    for (int len : MON_LEN) {\n        MONTH_DAYS[count++] = len * 86400;\n    }\n}\n\nprivate static final int[] MON_LEN = {\n    0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\n};\n\nprivate static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n\nprivate static final int DAY_END = 24 * 60 * 60; // 1 day in seconds\n\nprivate static final int[] LIMITS_VALUES = {\n    0, 1, 24, 60, 60\n};\n\n// ... rest of the code",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..b86ea6e7 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,42 +112,28 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+private static final int[] MONTH_DAYS;\n+static {\n+    MONTH_DAYS = new int[MON_LEN.length];\n+    int count = 0;\n+    for (int len : MON_LEN) {\n+        MONTH_DAYS[count++] = len * 86400;\n+    }\n+}\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+private static final int[] MON_LEN = {\n+    0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365\n+};\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+private static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+private static final int DAY_END = 24 * 60 * 60; // 1 day in seconds\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n-        }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n-    }\n+private static final int[] LIMITS_VALUES = {\n+    0, 1, 24, 60, 60\n+};\n+\n+// ... rest of the code\n \n     // Accessors\n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}