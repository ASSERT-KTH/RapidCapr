{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        boolean hasNonBasicSolution = false;\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                // if multiple variables can take a given value \n                // then we choose the first and set the rest equal to 0\n            coefficients[i] = 0.0;\n            if (basicRow == null) {\n                hasNonBasicSolution = true;\n            } else {\n                coefficients[i] = getEntry(basicRow, getRhsOffset());\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                        if (!hasNonBasicSolution) {\n                            // only subtract mostNegative once\n                            coefficients[i] -= mostNegative;\n                            hasNonBasicSolution = true;\n                        }\n                        coefficients[i] -= coefficients[j];\n                    }\n                }\n            }\n        }\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..ffe4d396d 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -326,17 +326,24 @@ class SimplexTableau implements Serializable {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        boolean hasNonBasicSolution = false;\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n                 // if multiple variables can take a given value \n                 // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n+            coefficients[i] = 0.0;\n+            if (basicRow == null) {\n+                hasNonBasicSolution = true;\n+            } else {\n+                coefficients[i] = getEntry(basicRow, getRhsOffset());\n                 for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                     if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                        if (!hasNonBasicSolution) {\n+                            // only subtract mostNegative once\n+                            coefficients[i] -= mostNegative;\n+                            hasNonBasicSolution = true;\n+                        }\n+                        coefficients[i] -= coefficients[j];\n                     }\n                 }\n             }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}