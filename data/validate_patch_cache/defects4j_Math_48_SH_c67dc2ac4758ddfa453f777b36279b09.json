{
    "patch": "@Test\npublic void testIssue631() {\n    UnivariateFunction f = x -> FastMath.exp(x) - 1 - x;\n    RegulaFalsiSolver solver = new RegulaFalsiSolver();\n    try {\n        final double root = solver.solve(3624, f, 1, 10);\n        fail(\"Expected ConvergenceException.\");\n    } catch (ConvergenceException e) {\n        // Expected exception.\n    } catch (TooManyEvaluationsException e) {\n        fail(\"Expected ConvergenceException.\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..36fe35efb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,19 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+@Test\n+public void testIssue631() {\n+    UnivariateFunction f = x -> FastMath.exp(x) - 1 - x;\n+    RegulaFalsiSolver solver = new RegulaFalsiSolver();\n+    try {\n+        final double root = solver.solve(3624, f, 1, 10);\n+        fail(\"Expected ConvergenceException.\");\n+    } catch (ConvergenceException e) {\n+        // Expected exception.\n+    } catch (TooManyEvaluationsException e) {\n+        fail(\"Expected ConvergenceException.\");\n+    }\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}