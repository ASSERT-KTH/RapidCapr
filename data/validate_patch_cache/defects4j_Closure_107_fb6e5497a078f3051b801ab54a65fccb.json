{
    "patch": "if (!flags.translationsFile.isEmpty()) {\n    try {\n        options.messageBundle = new XtbMessageBundle(\n                new FileInputStream(flags.translationsFile),\n                flags.translationsProject);\n    } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n    }\n} else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n    options.messageBundle = new EmptyMessageBundle();\n    options.setWarningLevel(DiagnosticGroups.MSG_CONVENTIONS, CheckLevel.OFF);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..81e3182c 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,18 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+if (!flags.translationsFile.isEmpty()) {\n+    try {\n+        options.messageBundle = new XtbMessageBundle(\n+                new FileInputStream(flags.translationsFile),\n+                flags.translationsProject);\n+    } catch (IOException e) {\n+        throw new RuntimeException(\"Reading XTB file\", e);\n+    }\n+} else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+    options.messageBundle = new EmptyMessageBundle();\n+    options.setWarningLevel(DiagnosticGroups.MSG_CONVENTIONS, CheckLevel.OFF);\n+}\n     }\n \n     return options;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}