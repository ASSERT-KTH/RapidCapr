{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = parent.getLastChild();\n        String rhsSrc = getSourceCodeString(rhs);\n\n        // If the RHS of our assignment is a function, and the LHS is a getprop that ends in \".prototype\",\n        // then we don't want to traverse this function, because it is being lent to a prototype.\n        boolean prototypeLend =\n            rhs.getType() == Token.FUNCTION &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n\n        // If the RHS of our assignment is a function, and the LHS is a name or a getprop which has\n        // a computed name, then we don't want to traverse the function, because it's not a property.\n        boolean nonPropertyLend =\n            rhs.getType() == Token.FUNCTION &&\n            (lhs.getType() == Token.NAME ||\n             NodeUtil.isGet(lhs) && !NodeUtil.isValidPropertyName(lhs.getLastChild()));\n\n        // If the RHS of our assignment is a function, we don't want to traverse it if it is being passed\n        // as an argument to an extern function whose annotations say that it is being lent to\n        // the prototype of an object.\n        boolean externPrototypeLend =\n            rhs.getType() == Token.FUNCTION &&\n            isExternLendToPrototypeInvocation(parent.getParent(), t.getInput(), rhs);\n\n        if (prototypeLend || nonPropertyLend || externPrototypeLend) {\n          return false;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..45137a65 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,68 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = parent.getLastChild();\n+        String rhsSrc = getSourceCodeString(rhs);\n+\n+        // If the RHS of our assignment is a function, and the LHS is a getprop that ends in \".prototype\",\n+        // then we don't want to traverse this function, because it is being lent to a prototype.\n+        boolean prototypeLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        // If the RHS of our assignment is a function, and the LHS is a name or a getprop which has\n+        // a computed name, then we don't want to traverse the function, because it's not a property.\n+        boolean nonPropertyLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            (lhs.getType() == Token.NAME ||\n+             NodeUtil.isGet(lhs) && !NodeUtil.isValidPropertyName(lhs.getLastChild()));\n+\n+        // If the RHS of our assignment is a function, we don't want to traverse it if it is being passed\n+        // as an argument to an extern function whose annotations say that it is being lent to\n+        // the prototype of an object.\n+        boolean externPrototypeLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            isExternLendToPrototypeInvocation(parent.getParent(), t.getInput(), rhs);\n+\n+        if (prototypeLend || nonPropertyLend || externPrototypeLend) {\n+          return false;\n+        }\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: variable jsDoc is already defined in method shouldTraverse(NodeTraversal,Node,Node)",
    "test_result": "ERROR"
}