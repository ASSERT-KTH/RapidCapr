{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    // \"[][0] += 1\"\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    if (left.isNull() || left.isEmpty()) {\n      error(INVALID_GETELEM_INDEX_ERROR, n);\n      return n;\n    }\n\n    Node elem;\n    if (NodeUtil.isImmutableValue(left)) {\n      Object value = NodeUtil.getConstantValue(left);\n      if (value instanceof String && intIndex < ((String)value).length()) {\n        elem = Node.newString(((String)value).substring(intIndex, intIndex + 1));\n      } else if (value instanceof List && ((List)value).size() > intIndex &&\n                 intIndex >= 0) {\n        elem = makeReplacementConstant(((List)value).get(intIndex));\n      } else if (value instanceof Map && ((Map)value).containsKey(intIndex)) {\n        elem = makeReplacementConstant(((Map)value).get(intIndex));\n      } else if (intIndex == 0 && value instanceof Boolean) {\n        elem = makeReplacementConstant(value);\n      } else {\n        // Out of bounds array access is undefined.\n        elem = IR.name(\"undefined\");\n      }\n    } else {\n      Node elemBeforeExprs = null;\n      if (left.isGetElem()) {\n        elemBeforeExprs = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n        if (elemBeforeExprs == left.getFirstChild()) {\n          elemBeforeExprs = left.getFirstChild().cloneTree();\n        }\n      } else {\n        elemBeforeExprs = left.cloneTree();\n      }\n\n      elem = IR.getelem(elemBeforeExprs.cloneTree(), IR.number(intIndex));\n      elem.setJSType(left.getJSType());\n    }\n\n    n.getParent().replaceChild(n, elem);\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..a62d3e74 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1275,11 +1275,11 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     return false;\n   }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+    // \"[][0] += 1\"\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n@@ -1299,25 +1299,43 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    if (left.isNull() || left.isEmpty()) {\n+      error(INVALID_GETELEM_INDEX_ERROR, n);\n       return n;\n     }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    Node elem;\n+    if (NodeUtil.isImmutableValue(left)) {\n+      Object value = NodeUtil.getConstantValue(left);\n+      if (value instanceof String && intIndex < ((String)value).length()) {\n+        elem = Node.newString(((String)value).substring(intIndex, intIndex + 1));\n+      } else if (value instanceof List && ((List)value).size() > intIndex &&\n+                 intIndex >= 0) {\n+        elem = makeReplacementConstant(((List)value).get(intIndex));\n+      } else if (value instanceof Map && ((Map)value).containsKey(intIndex)) {\n+        elem = makeReplacementConstant(((Map)value).get(intIndex));\n+      } else if (intIndex == 0 && value instanceof Boolean) {\n+        elem = makeReplacementConstant(value);\n+      } else {\n+        // Out of bounds array access is undefined.\n+        elem = IR.name(\"undefined\");\n+      }\n     } else {\n-      left.removeChild(elem);\n+      Node elemBeforeExprs = null;\n+      if (left.isGetElem()) {\n+        elemBeforeExprs = tryFoldArrayAccess(left, left.getFirstChild(), left.getLastChild());\n+        if (elemBeforeExprs == left.getFirstChild()) {\n+          elemBeforeExprs = left.getFirstChild().cloneTree();\n+        }\n+      } else {\n+        elemBeforeExprs = left.cloneTree();\n+      }\n+\n+      elem = IR.getelem(elemBeforeExprs.cloneTree(), IR.number(intIndex));\n+      elem.setJSType(left.getJSType());\n     }\n \n-    // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n     return elem;\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}