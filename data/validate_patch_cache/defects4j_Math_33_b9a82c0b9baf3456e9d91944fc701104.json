{
    "patch": "      for (int i = getNumObjectiveFunctions()-1; i >= 0; i--) {\n          int basicRow = getBasicRow(i);\n          if (basicRow == -1) {\n              continue;\n          }\n          BasicSlice slice = getBasicSlice(i, basicRow);\n          if (Precision.compareTo(slice.coefficients[0], 1d, maxUlps) != 0) {\n              // phase 1 may have left a non-unity coefficient\n              divideRow(slice, slice.coefficients[0]);\n          }\n          for (int j = 1; j < getWidth(); j++) {\n              if (j != i) {\n                  subtractRow(slice, j, tableau.getEntry(basicRow, j));\n              }\n          }\n      }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..d30fc9b78 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -335,7 +335,22 @@ class SimplexTableau implements Serializable {\n         // positive cost non-artificial variables\n         for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n             final double entry = tableau.getEntry(0, i);\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+      for (int i = getNumObjectiveFunctions()-1; i >= 0; i--) {\n+          int basicRow = getBasicRow(i);\n+          if (basicRow == -1) {\n+              continue;\n+          }\n+          BasicSlice slice = getBasicSlice(i, basicRow);\n+          if (Precision.compareTo(slice.coefficients[0], 1d, maxUlps) != 0) {\n+              // phase 1 may have left a non-unity coefficient\n+              divideRow(slice, slice.coefficients[0]);\n+          }\n+          for (int j = 1; j < getWidth(); j++) {\n+              if (j != i) {\n+                  subtractRow(slice, j, tableau.getEntry(basicRow, j));\n+              }\n+          }\n+      }\n                 columnsToDrop.add(i);\n             }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}