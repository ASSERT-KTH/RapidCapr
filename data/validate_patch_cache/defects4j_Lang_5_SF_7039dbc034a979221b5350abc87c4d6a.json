{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    final int len = str.length();\n    int index1 = -1, index2 = -1, index3 = -1;\n\n    // First underscore must be present\n    index1 = str.indexOf('_');\n    if (index1 == -1) {\n        if (len == 2 || len == 5) {\n            return new Locale(str);\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    // Second underscore\n    index2 = str.indexOf('_', index1 + 1);\n    if (index2 == -1) {\n        // not present, means variant is absent\n        if (len - index1 == 3) {\n            return new Locale(str.substring(0, index1), str.substring(index1 + 1));\n        }\n        if (len - index1 == 4) {\n            // language + country code present\n            return new Locale(str.substring(0, index1), str.substring(index1 + 1, index1 + 3));\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    // Third underscore (if present) must be followed by at least one character\n    index3 = str.indexOf('_', index2 + 1);\n    if (index3 != -1 && index3 + 1 >= len) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (index3 == -1) {\n        // only language + country code + variant is present\n        return new Locale(str.substring(0, index1), str.substring(index1 + 1, index2),\n                str.substring(index2 + 1, len));\n    } else {\n        // language + country code + variant + extensions\n        return new Locale(str.substring(0, index1), str.substring(index1 + 1, index2),\n                str.substring(index2 + 1, index3), str.substring(index3 + 1, len));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..3f1cdbe3 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,54 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    final int len = str.length();\n+    int index1 = -1, index2 = -1, index3 = -1;\n+\n+    // First underscore must be present\n+    index1 = str.indexOf('_');\n+    if (index1 == -1) {\n+        if (len == 2 || len == 5) {\n+            return new Locale(str);\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    // Second underscore\n+    index2 = str.indexOf('_', index1 + 1);\n+    if (index2 == -1) {\n+        // not present, means variant is absent\n+        if (len - index1 == 3) {\n+            return new Locale(str.substring(0, index1), str.substring(index1 + 1));\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        if (len - index1 == 4) {\n+            // language + country code present\n+            return new Locale(str.substring(0, index1), str.substring(index1 + 1, index1 + 3));\n+        }\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n \n+    // Third underscore (if present) must be followed by at least one character\n+    index3 = str.indexOf('_', index2 + 1);\n+    if (index3 != -1 && index3 + 1 >= len) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (index3 == -1) {\n+        // only language + country code + variant is present\n+        return new Locale(str.substring(0, index1), str.substring(index1 + 1, index2),\n+                str.substring(index2 + 1, len));\n+    } else {\n+        // language + country code + variant + extensions\n+        return new Locale(str.substring(0, index1), str.substring(index1 + 1, index2),\n+                str.substring(index2 + 1, index3), str.substring(index3 + 1, len));\n+    }\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "error: no suitable constructor found for Locale(String,String,String,String)",
    "test_result": "ERROR"
}