{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double[] x = new double[3];\n    double ax;\n    double bx;\n    double fa;\n    double fb;\n    double cx;\n    double fc;\n\n    ax = lowerBound;\n    bx = initial;\n    cx = upperBound;\n\n    fa = function.value(ax);\n    fb = function.value(bx);\n    fc = function.value(cx);\n\n    int iteration = 0;\n    while (true) {\n        iteration++;\n        if (fb == 0.0) {\n            if (bx < initial) {\n                x[0] = bx;\n                x[1] = initial;\n            } else {\n                x[0] = initial;\n                x[1] = bx;\n            }\n            x[2] = x[1] - x[0];\n            return x;\n        }\n        if (fc == 0.0) {\n            if (cx < initial) {\n                x[0] = cx;\n                x[1] = initial;\n            } else {\n                x[0] = initial;\n                x[1] = cx;\n            }\n            x[2] = x[1] - x[0];\n            return x;\n        }\n        if (fa * fb < 0.0) {\n            x[0] = ax;\n            x[1] = bx;\n            x[2] = cx - bx;\n            return x;\n        }\n        if (fa * fc < 0.0) {\n            x[0] = cx;\n            x[1] = bx;\n            x[2] = cx - ax;\n            return x;\n        }\n        if (iteration == maximumIterations) {\n            throw new ConvergenceException(\n                    \"number of iterations={0}, maximum iterations={1}, \" +\n                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                            \"final b value={6}, f(a)={7}, f(b)={8}, f(c)={9}\",\n                    iteration, maximumIterations, initial,\n                    lowerBound, upperBound, ax, bx, fa, fb, fc);\n        }\n        double delta = 0.1 * (cx - ax);\n        double oldX = bx;\n        double oldFb = fb;\n        if (Math.abs(fc) > Math.abs(fb)) {\n            // Attempt inverse quadratic interpolation\n            double r = fb / fc;\n            bx = cx - ((cx - bx) * r) / (1.0 - r);\n        } else {\n            // Attempt linear interpolation\n            bx += (bx - ax) / 2;\n        }\n        if ((bx - cx) * (oldX - bx) > 0) {\n            fb = function.value(bx);\n            if (fb * oldFb > 0) {\n                if (fc * fa > 0) {\n                    // Adjust bounds using bisection\n                    cx = ax;\n                    fc = fa;\n                }\n                delta = 0.5 * (oldX - ax);\n                bx = ax + delta;\n                fb = function.value(bx);\n            }\n        } else {\n            if ((cx - bx) * (cx - ax) < 0) {\n                fb = function.value(bx);\n                if (fb * oldFb > 0) {\n                    if (fc * fb > 0) {\n                        // Adjust bounds using bisection\n                        ax = bx;\n                        fa = fb;\n                    }\n                    delta = 0.5 * (cx - bx);\n                    bx = cx - delta;\n                    fb = function.value(bx);\n                }\n            } else {\n                delta = 0.1 * (cx - ax);\n                bx = ax + delta;\n                fb = function.value(bx);\n            }\n        }\n\n        if (fb == 0.0) {\n            x[0] = bx;\n            x[1] = bx;\n            x[2] = cx - ax;\n            return x;\n        }\n\n        // Prepare b and c for next iteration\n        if (fb * fa < 0.0) {\n            cx = bx;\n            fc = fb;\n        } else {\n            ax = bx;\n            fa = fb;\n        }\n\n        // If we've taken more than the maximumIterations allowed then throw an exception\n        if (iteration >= maximumIterations) {\n            throw new ConvergenceException(\n                    \"number of iterations={0}, maximum iterations={1}, \" +\n                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                            \"final b value={6}, f(a)={7}, f(b)={8}, f(c)={9}\",\n                    iteration, maximumIterations, initial,\n                    lowerBound, upperBound, ax, bx, fa, fb, fc);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..2d22f3965 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,152 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+public static double[] bracket(UnivariateRealFunction function, double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException, FunctionEvaluationException {\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double[] x = new double[3];\n+    double ax;\n+    double bx;\n+    double fa;\n+    double fb;\n+    double cx;\n+    double fc;\n+\n+    ax = lowerBound;\n+    bx = initial;\n+    cx = upperBound;\n+\n+    fa = function.value(ax);\n+    fb = function.value(bx);\n+    fc = function.value(cx);\n+\n+    int iteration = 0;\n+    while (true) {\n+        iteration++;\n+        if (fb == 0.0) {\n+            if (bx < initial) {\n+                x[0] = bx;\n+                x[1] = initial;\n+            } else {\n+                x[0] = initial;\n+                x[1] = bx;\n+            }\n+            x[2] = x[1] - x[0];\n+            return x;\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        if (fc == 0.0) {\n+            if (cx < initial) {\n+                x[0] = cx;\n+                x[1] = initial;\n+            } else {\n+                x[0] = initial;\n+                x[1] = cx;\n+            }\n+            x[2] = x[1] - x[0];\n+            return x;\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        if (fa * fb < 0.0) {\n+            x[0] = ax;\n+            x[1] = bx;\n+            x[2] = cx - bx;\n+            return x;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n+        if (fa * fc < 0.0) {\n+            x[0] = cx;\n+            x[1] = bx;\n+            x[2] = cx - ax;\n+            return x;\n+        }\n+        if (iteration == maximumIterations) {\n             throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                    \"number of iterations={0}, maximum iterations={1}, \" +\n+                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                            \"final b value={6}, f(a)={7}, f(b)={8}, f(c)={9}\",\n+                    iteration, maximumIterations, initial,\n+                    lowerBound, upperBound, ax, bx, fa, fb, fc);\n+        }\n+        double delta = 0.1 * (cx - ax);\n+        double oldX = bx;\n+        double oldFb = fb;\n+        if (Math.abs(fc) > Math.abs(fb)) {\n+            // Attempt inverse quadratic interpolation\n+            double r = fb / fc;\n+            bx = cx - ((cx - bx) * r) / (1.0 - r);\n+        } else {\n+            // Attempt linear interpolation\n+            bx += (bx - ax) / 2;\n+        }\n+        if ((bx - cx) * (oldX - bx) > 0) {\n+            fb = function.value(bx);\n+            if (fb * oldFb > 0) {\n+                if (fc * fa > 0) {\n+                    // Adjust bounds using bisection\n+                    cx = ax;\n+                    fc = fa;\n+                }\n+                delta = 0.5 * (oldX - ax);\n+                bx = ax + delta;\n+                fb = function.value(bx);\n+            }\n+        } else {\n+            if ((cx - bx) * (cx - ax) < 0) {\n+                fb = function.value(bx);\n+                if (fb * oldFb > 0) {\n+                    if (fc * fb > 0) {\n+                        // Adjust bounds using bisection\n+                        ax = bx;\n+                        fa = fb;\n+                    }\n+                    delta = 0.5 * (cx - bx);\n+                    bx = cx - delta;\n+                    fb = function.value(bx);\n+                }\n+            } else {\n+                delta = 0.1 * (cx - ax);\n+                bx = ax + delta;\n+                fb = function.value(bx);\n+            }\n+        }\n+\n+        if (fb == 0.0) {\n+            x[0] = bx;\n+            x[1] = bx;\n+            x[2] = cx - ax;\n+            return x;\n+        }\n+\n+        // Prepare b and c for next iteration\n+        if (fb * fa < 0.0) {\n+            cx = bx;\n+            fc = fb;\n+        } else {\n+            ax = bx;\n+            fa = fb;\n+        }\n+\n+        // If we've taken more than the maximumIterations allowed then throw an exception\n+        if (iteration >= maximumIterations) {\n+            throw new ConvergenceException(\n+                    \"number of iterations={0}, maximum iterations={1}, \" +\n+                            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                            \"final b value={6}, f(a)={7}, f(b)={8}, f(c)={9}\",\n+                    iteration, maximumIterations, initial,\n+                    lowerBound, upperBound, ax, bx, fa, fb, fc);\n         }\n-        \n-        return new double[]{a, b};\n     }\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}