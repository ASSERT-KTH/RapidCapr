{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      if (arguments.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      } else if (!functionType.isVarArgs()) {\n        int expectedArgs = functionType.getMinArguments();\n        if (!functionType.isOptionalParameter(ordinal)) {\n          expectedArgs = Math.max(expectedArgs, ordinal);\n        }\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(arguments),\n            String.valueOf(expectedArgs),\n            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n                \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n        return;\n      } else {\n        return;\n      }\n    }\n\n    if (!functionType.isVarArgs() && arguments.hasNext()) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(arguments),\n          String.valueOf(functionType.getMinArguments()),\n          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..326ab784 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,27 +1405,38 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) {\n+      if (arguments.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        argument = arguments.next();\n+        ordinal++;\n+\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      } else if (!functionType.isVarArgs()) {\n+        int expectedArgs = functionType.getMinArguments();\n+        if (!functionType.isOptionalParameter(ordinal)) {\n+          expectedArgs = Math.max(expectedArgs, ordinal);\n+        }\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(arguments),\n+            String.valueOf(expectedArgs),\n+            functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+                \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n+        return;\n+      } else {\n+        return;\n+      }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    if (!functionType.isVarArgs() && arguments.hasNext()) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(arguments),\n+          String.valueOf(functionType.getMinArguments()),\n+          functionType.getMaxArguments() != Integer.MAX_VALUE ?\n+              \" and no more than \" + functionType.getMaxArguments() + \" argument(s)\" : \"\");\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}