{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        long periodAsMillis = 0;\n        periodAsMillis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n        periodAsMillis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n        periodAsMillis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n        periodAsMillis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;\n        periodAsMillis += (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n        \n        int yearsAsMonths = getYears() * 12;\n        int totalMonths = yearsAsMonths + getMonths();\n        long normalizedMillis = periodAsMillis + ((long) totalMonths * DateTimeConstants.MILLIS_PER_MONTH);\n        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC());\n        return result.normalizedStandard();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..2727ed8c 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,26 +1615,19 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+        long millis = getMillis();\n+        long periodAsMillis = 0;\n+        periodAsMillis += (long) getSeconds() * DateTimeConstants.MILLIS_PER_SECOND;\n+        periodAsMillis += (long) getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE;\n+        periodAsMillis += (long) getHours() * DateTimeConstants.MILLIS_PER_HOUR;\n+        periodAsMillis += (long) getDays() * DateTimeConstants.MILLIS_PER_DAY;\n+        periodAsMillis += (long) getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+        \n+        int yearsAsMonths = getYears() * 12;\n+        int totalMonths = yearsAsMonths + getMonths();\n+        long normalizedMillis = periodAsMillis + ((long) totalMonths * DateTimeConstants.MILLIS_PER_MONTH);\n+        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC());\n+        return result.normalizedStandard();\n     }\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}