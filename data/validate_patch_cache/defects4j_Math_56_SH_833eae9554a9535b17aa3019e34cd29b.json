{
    "patch": "        int idx = 0;\n        while (count <= index && idx < dimension) {\n            idx++;\n            count += uniCounterOffset[dimension - idx];\n        }\n        idx--;\n        count -= uniCounterOffset[dimension - idx - 1];\n        indices[last - 1] = idx;\n\n        for (int i = last - 2; i >= 0; i--) {\n            indices[i] = (count / uniCounterOffset[dimension - i - 1]);\n            count %= uniCounterOffset[dimension - i - 1];\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..1acd093d8 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,19 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+        int idx = 0;\n+        while (count <= index && idx < dimension) {\n+            idx++;\n+            count += uniCounterOffset[dimension - idx];\n+        }\n+        idx--;\n+        count -= uniCounterOffset[dimension - idx - 1];\n+        indices[last - 1] = idx;\n+\n+        for (int i = last - 2; i >= 0; i--) {\n+            indices[i] = (count / uniCounterOffset[dimension - i - 1]);\n+            count %= uniCounterOffset[dimension - i - 1];\n         }\n-        --idx;\n-        indices[last] = idx;\n \n         return indices;\n     }",
    "result_reason": "java.lang.ArithmeticException: / by zero",
    "test_result": "FAIL"
}