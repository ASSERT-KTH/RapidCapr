{
    "patch": "void add(String newcode) {\n    maybeEndStatement();\n\n    if (newcode.isEmpty()) {\n        return;\n    }\n\n    char c = newcode.charAt(0);\n    if (c == '/') {\n        if (getLastChar() == '/') {\n            append(\" \");\n        } else if (getLastChar() == '=') {\n            // do nothing, since the division operator should be immediately followed by a non-whitespace character\n        } else {\n            append(\" \");\n        }\n    } else if ((isWordChar(c) || c == '\\\\') && isWordChar(getLastChar())) {\n        append(\" \");\n    }\n\n    append(newcode);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 47556652..2e3bdd53 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -178,28 +178,28 @@ abstract class CodeConsumer {\n   void endCaseBody() {\n   }\n \n-  void add(String newcode) {\n+void add(String newcode) {\n     maybeEndStatement();\n \n-    if (newcode.length() == 0) {\n-      return;\n+    if (newcode.isEmpty()) {\n+        return;\n     }\n \n     char c = newcode.charAt(0);\n-    if ((isWordChar(c) || c == '\\\\') &&\n-        isWordChar(getLastChar())) {\n-      // need space to separate. This is not pretty printing.\n-      // For example: \"return foo;\"\n-      append(\" \");\n-      // Do not allow a forward slash to appear after a DIV.\n-      // For example,\n-      // REGEXP DIV REGEXP\n-      // is valid and should print like\n-      // / // / /\n+    if (c == '/') {\n+        if (getLastChar() == '/') {\n+            append(\" \");\n+        } else if (getLastChar() == '=') {\n+            // do nothing, since the division operator should be immediately followed by a non-whitespace character\n+        } else {\n+            append(\" \");\n+        }\n+    } else if ((isWordChar(c) || c == '\\\\') && isWordChar(getLastChar())) {\n+        append(\" \");\n     }\n \n     append(newcode);\n-  }\n+}\n \n   void appendOp(String op, boolean binOp) {\n     append(op);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[]/**",
    "test_result": "FAIL"
}