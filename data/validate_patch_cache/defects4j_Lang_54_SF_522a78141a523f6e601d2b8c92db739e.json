{
    "patch": "public static Locale toLocale(String str) {\n    if (str == null) {\n        return null;\n    }\n    String[] parts = str.split(\"_\");\n    int len = parts.length;\n\n    if (len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    String language = parts[0].toLowerCase(Locale.ENGLISH);\n    if (!isValidLanguageCode(language)) {\n        throw new IllegalArgumentException(\"Invalid language code: \" + language);\n    }\n\n    if (len == 1) {\n        return new Locale(language);\n    }\n\n    String country = parts[1].toUpperCase(Locale.ENGLISH);\n    if (!isValidCountryCode(country)) {\n        throw new IllegalArgumentException(\"Invalid country code: \" + country);\n    }\n\n    if (len == 2) {\n        return new Locale(language, country);\n    }\n\n    String variant = parts[2];\n    if (!isValidVariantCode(variant)) {\n        throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLanguageCode(String code) {\n    if (code.length() != 2) {\n        return false;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        char ch = code.charAt(i);\n        if (ch < 'a' || ch > 'z') {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidCountryCode(String code) {\n    if (code.length() != 2) {\n        return false;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        char ch = code.charAt(i);\n        if (ch < 'A' || ch > 'Z') {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidVariantCode(String code) {\n    if (code.isEmpty()) {\n        return true;\n    }\n    for (int i = 0; i < code.length(); i++) {\n        char ch = code.charAt(i);\n        if (ch == '-' || ch == '_' || Character.isLetterOrDigit(ch)) {\n            continue;\n        }\n        return false;\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..9c1e2615 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,82 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    String[] parts = str.split(\"_\");\n+    int len = parts.length;\n+\n+    if (len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    String language = parts[0].toLowerCase(Locale.ENGLISH);\n+    if (!isValidLanguageCode(language)) {\n+        throw new IllegalArgumentException(\"Invalid language code: \" + language);\n+    }\n+\n+    if (len == 1) {\n+        return new Locale(language);\n+    }\n+\n+    String country = parts[1].toUpperCase(Locale.ENGLISH);\n+    if (!isValidCountryCode(country)) {\n+        throw new IllegalArgumentException(\"Invalid country code: \" + country);\n+    }\n+\n+    if (len == 2) {\n+        return new Locale(language, country);\n+    }\n+\n+    String variant = parts[2];\n+    if (!isValidVariantCode(variant)) {\n+        throw new IllegalArgumentException(\"Invalid variant code: \" + variant);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLanguageCode(String code) {\n+    if (code.length() != 2) {\n+        return false;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        char ch = code.charAt(i);\n+        if (ch < 'a' || ch > 'z') {\n+            return false;\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidCountryCode(String code) {\n+    if (code.length() != 2) {\n+        return false;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        char ch = code.charAt(i);\n+        if (ch < 'A' || ch > 'Z') {\n+            return false;\n         }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidVariantCode(String code) {\n+    if (code.isEmpty()) {\n+        return true;\n+    }\n+    for (int i = 0; i < code.length(); i++) {\n+        char ch = code.charAt(i);\n+        if (ch == '-' || ch == '_' || Character.isLetterOrDigit(ch)) {\n+            continue;\n         }\n+        return false;\n     }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid country code:",
    "test_result": "FAIL"
}