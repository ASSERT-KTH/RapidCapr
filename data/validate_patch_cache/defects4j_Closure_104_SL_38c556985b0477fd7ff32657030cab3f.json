{
    "patch": "public JSLineParser(SourceFile sourceFile) {\n  this.sourceFile = sourceFile;\n  this.source = sourceFile.getCode();\n  lineStarts = new int[source.getLength()];\n  // assuming the first line starts at index 0\n  lineStarts[0] = 0;\n  for (int i = 1; i < lineStarts.length; i++) {\n    if (source.charAt(i - 1) == '\\n') {\n      lineStarts[i] = i;\n    } else {\n      lineStarts[i] = lineStarts[i - 1];\n    }\n  }\n  ts = 0;\n  jsDocToken = NO_JS_DOC_TOKEN;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..6268fc6c 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,22 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+public JSLineParser(SourceFile sourceFile) {\n+  this.sourceFile = sourceFile;\n+  this.source = sourceFile.getCode();\n+  lineStarts = new int[source.getLength()];\n+  // assuming the first line starts at index 0\n+  lineStarts[0] = 0;\n+  for (int i = 1; i < lineStarts.length; i++) {\n+    if (source.charAt(i - 1) == '\\n') {\n+      lineStarts[i] = i;\n+    } else {\n+      lineStarts[i] = lineStarts[i - 1];\n+    }\n+  }\n+  ts = 0;\n+  jsDocToken = NO_JS_DOC_TOKEN;\n+}\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}