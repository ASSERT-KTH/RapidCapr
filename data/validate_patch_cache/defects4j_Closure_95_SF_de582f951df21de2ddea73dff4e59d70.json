{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n  Preconditions.checkArgument(inferred || type != null);\n\n  // Only allow declarations of NAMEs and qualified names.\n  boolean shouldDeclareOnGlobalThis = false;\n\n  // `TOKENS_TO_DECLARE_ON_GLOBAL_THIS` contains tokens of nodes that should declare on global\n  // this when they appear as direct children of the top level scope.\n  static final ImmutableSet<Integer> TOKENS_TO_DECLARE_ON_GLOBAL_THIS =\n      ImmutableSet.of(\n          Token.VAR,\n          Token.FUNCTION,\n          Token.LET,\n          Token.CONST);\n\n  if (n.getType() == Token.NAME) {\n    Preconditions.checkArgument(\n        TOKENS_TO_DECLARE_ON_GLOBAL_THIS.contains(parent.getType()) ||\n        parent.getType() == Token.CATCH ||\n        parent.getType() == Token.PARAM_LIST ||\n        (n.getBooleanProp(Node.IS_CONSTANT_NAME) &&\n         parent.getType() == Token.OBJECT_PATTERN));\n    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n        TOKENS_TO_DECLARE_ON_GLOBAL_THIS.contains(parent.getType());\n  } else {\n    Preconditions.checkArgument(\n        n.getType() == Token.GETPROP &&\n        (parent.getType() == Token.ASSIGN ||\n         parent.getType() == Token.EXPR_RESULT));\n  }\n\n  String variableName = n.getQualifiedName();\n  Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n\n  // If n is a property, then we should really declare it in the\n  // scope where the root object appears. This helps out people\n  // who declare \"global\" names in an anonymous namespace.\n  Scope scopeToDeclareIn = scope.getClosestHoistScope();\n  if (scopeToDeclareIn.isModuleScope()) {\n    // Global names in modules are still module-scoped, but we declare them as properties of the\n    // module scope's local object.\n    //   export var x;\n    // => $local.x = x;\n    // This way, we can support top-level await, and we can statically check that \"export foo;\"\n    // statements are redundant (since they don't actually create anything).\n    Node enclosingScript = NodeUtil.getEnclosingScript(n);\n    JSType scriptType = getScriptType(enclosingScript);\n    if (scriptType != null) {\n      scopeToDeclareIn = scopeToDeclareIn.getModuleExportScope();\n      ObjectType objectType = ObjectType.cast(\n          ObjectType.cast(scriptType).getOwnPropertyType(\"local\"));\n      if (objectType != null) {\n        n.setJSType(typeRegistry.createPropertyMapType(objectType));\n      }\n    }\n  }\n\n  // declared in closest scope?\n  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n    Var oldVar = scopeToDeclareIn.getVar(variableName);\n    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n  } else {\n    if (!inferred) {\n      setDeferredType(n, type);\n    }\n    CompilerInput input = compiler.getInput(sourceName);\n    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n\n    if (shouldDeclareOnGlobalThis) {\n      ObjectType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n      boolean isExtern = input.isExtern();\n      if (inferred) {\n        globalThis.defineInferredProperty(variableName,\n            type == null ?\n                getNativeType(JSTypeNative.NO_TYPE) :\n                type,\n            isExtern);\n      } else {\n        // Declare a property on the global object instead of the GLOBAL_THIS type when the script\n        // is not a module. This allows users to declare global variables in a local scope when the\n        // local scope has a GLOBAL_THIS type.\n        if (!scope.getGlobalScope().isModuleScope()) {\n          ObjectType globalObject =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_OBJECT);\n          globalObject.defineDeclaredProperty(variableName, type, isExtern);\n        } else {\n          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n        }\n      }\n    }\n\n    // If we're in the global scope, also declare var.prototype\n    // in the scope chain.\n    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n      FunctionType fnType = (FunctionType) type;\n      if (fnType.isConstructor()) {\n        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getPrototype(), compiler.getInput(sourceName),\n            /* declared iff there's an explicit supertype */\n            superClassCtor == null ||\n            superClassCtor.getInstanceType().equals(\n                getNativeType(OBJECT_TYPE)));\n      }\n      if (fnType.isInterface()) {\n        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n            fnType.getImplicitProto(), compiler.getInput(sourceName), false);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..95a8f2f6 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,80 +869,118 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n-        Preconditions.checkArgument(\n-            parent.getType() == Token.FUNCTION ||\n-            parent.getType() == Token.VAR ||\n-            parent.getType() == Token.LP ||\n-            parent.getType() == Token.CATCH);\n-        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n-            (parent.getType() == Token.VAR ||\n-             parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+  Preconditions.checkArgument(inferred || type != null);\n+\n+  // Only allow declarations of NAMEs and qualified names.\n+  boolean shouldDeclareOnGlobalThis = false;\n+\n+  // `TOKENS_TO_DECLARE_ON_GLOBAL_THIS` contains tokens of nodes that should declare on global\n+  // this when they appear as direct children of the top level scope.\n+  static final ImmutableSet<Integer> TOKENS_TO_DECLARE_ON_GLOBAL_THIS =\n+      ImmutableSet.of(\n+          Token.VAR,\n+          Token.FUNCTION,\n+          Token.LET,\n+          Token.CONST);\n+\n+  if (n.getType() == Token.NAME) {\n+    Preconditions.checkArgument(\n+        TOKENS_TO_DECLARE_ON_GLOBAL_THIS.contains(parent.getType()) ||\n+        parent.getType() == Token.CATCH ||\n+        parent.getType() == Token.PARAM_LIST ||\n+        (n.getBooleanProp(Node.IS_CONSTANT_NAME) &&\n+         parent.getType() == Token.OBJECT_PATTERN));\n+    shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+        TOKENS_TO_DECLARE_ON_GLOBAL_THIS.contains(parent.getType());\n+  } else {\n+    Preconditions.checkArgument(\n+        n.getType() == Token.GETPROP &&\n+        (parent.getType() == Token.ASSIGN ||\n+         parent.getType() == Token.EXPR_RESULT));\n+  }\n+\n+  String variableName = n.getQualifiedName();\n+  Preconditions.checkArgument(variableName != null && !variableName.isEmpty());\n+\n+  // If n is a property, then we should really declare it in the\n+  // scope where the root object appears. This helps out people\n+  // who declare \"global\" names in an anonymous namespace.\n+  Scope scopeToDeclareIn = scope.getClosestHoistScope();\n+  if (scopeToDeclareIn.isModuleScope()) {\n+    // Global names in modules are still module-scoped, but we declare them as properties of the\n+    // module scope's local object.\n+    //   export var x;\n+    // => $local.x = x;\n+    // This way, we can support top-level await, and we can statically check that \"export foo;\"\n+    // statements are redundant (since they don't actually create anything).\n+    Node enclosingScript = NodeUtil.getEnclosingScript(n);\n+    JSType scriptType = getScriptType(enclosingScript);\n+    if (scriptType != null) {\n+      scopeToDeclareIn = scopeToDeclareIn.getModuleExportScope();\n+      ObjectType objectType = ObjectType.cast(\n+          ObjectType.cast(scriptType).getOwnPropertyType(\"local\"));\n+      if (objectType != null) {\n+        n.setJSType(typeRegistry.createPropertyMapType(objectType));\n       }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n+    }\n+  }\n+\n+  // declared in closest scope?\n+  if (scopeToDeclareIn.isDeclared(variableName, false)) {\n+    Var oldVar = scopeToDeclareIn.getVar(variableName);\n+    validator.expectUndeclaredVariable(sourceName, n, parent, oldVar, variableName, type);\n+  } else {\n+    if (!inferred) {\n+      setDeferredType(n, type);\n+    }\n+    CompilerInput input = compiler.getInput(sourceName);\n+    scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+\n+    if (shouldDeclareOnGlobalThis) {\n+      ObjectType globalThis =\n+          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n+      boolean isExtern = input.isExtern();\n+      if (inferred) {\n+        globalThis.defineInferredProperty(variableName,\n+            type == null ?\n+                getNativeType(JSTypeNative.NO_TYPE) :\n+                type,\n+            isExtern);\n       } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n+        // Declare a property on the global object instead of the GLOBAL_THIS type when the script\n+        // is not a module. This allows users to declare global variables in a local scope when the\n+        // local scope has a GLOBAL_THIS type.\n+        if (!scope.getGlobalScope().isModuleScope()) {\n+          ObjectType globalObject =\n+              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_OBJECT);\n+          globalObject.defineDeclaredProperty(variableName, type, isExtern);\n+        } else {\n+          globalThis.defineDeclaredProperty(variableName, type, isExtern);\n         }\n+      }\n+    }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n+    // If we're in the global scope, also declare var.prototype\n+    // in the scope chain.\n+    if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+      FunctionType fnType = (FunctionType) type;\n+      if (fnType.isConstructor()) {\n+        FunctionType superClassCtor = fnType.getSuperClassConstructor();\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+            fnType.getPrototype(), compiler.getInput(sourceName),\n+            /* declared iff there's an explicit supertype */\n+            superClassCtor == null ||\n+            superClassCtor.getInstanceType().equals(\n+                getNativeType(OBJECT_TYPE)));\n+      }\n+      if (fnType.isInterface()) {\n+        scopeToDeclareIn.declare(variableName + \".prototype\", n,\n+            fnType.getImplicitProto(), compiler.getInput(sourceName), false);\n       }\n     }\n+  }\n+}\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}