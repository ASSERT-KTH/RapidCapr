{
    "patch": "      boolean isOverride = t.getScope().isGlobal() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      if (isOverride && objectType != null) {\n        ObjectType implicitProtoType = objectType.getImplicitPrototype();\n        JSDocInfo docInfo =\n            implicitProtoType.getOwnPropertyJSDocInfo(propertyName);\n\n        if (docInfo != null && docInfo.getVisibility() == Visibility.PRIVATE) {\n          return;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..04e1ff20 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,19 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = t.getScope().isGlobal() &&\n+          parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop;\n+\n+      if (isOverride && objectType != null) {\n+        ObjectType implicitProtoType = objectType.getImplicitPrototype();\n+        JSDocInfo docInfo =\n+            implicitProtoType.getOwnPropertyJSDocInfo(propertyName);\n+\n+        if (docInfo != null && docInfo.getVisibility() == Visibility.PRIVATE) {\n+          return;\n+        }\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}