{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    final int offsetLocal = getOffset(instantLocal);\n    // compare offsetLocal with offset before and after\n    long prev = previousTransition(instantLocal);\n    long next = nextTransition(instantLocal);\n    int offsetBefore = getOffset(prev);\n    int offsetAfter = getOffset(next);\n    if (offsetBefore <= offsetAfter) { // gap or overlap\n        if (offsetLocal >= offsetAfter) { // gap: use offsetBefore\n            return offsetBefore;\n        } else if (offsetLocal < offsetBefore) { // overlap: use offsetAfter\n            return offsetAfter;\n        } else { // within gap or overlap: perform additional checks\n            long prev2 = previousTransition(prev);\n            long next2 = nextTransition(next);\n            if (offsetBefore == offsetAfter && \n                (next2 == next || prev2 == prev)) { // single hour\n                return offsetBefore;\n            } else if (next2 == prev2) { // unknown DST savings\n                return offsetLocal;\n            } else { // DST gap or overlap\n                return offsetLocal >= offsetAfter ? offsetBefore : offsetAfter;\n            }\n        }\n    } else { // normal (no gap or overlap)\n        return offsetLocal;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..f49e65f6 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,35 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    final int offsetLocal = getOffset(instantLocal);\n+    // compare offsetLocal with offset before and after\n+    long prev = previousTransition(instantLocal);\n+    long next = nextTransition(instantLocal);\n+    int offsetBefore = getOffset(prev);\n+    int offsetAfter = getOffset(next);\n+    if (offsetBefore <= offsetAfter) { // gap or overlap\n+        if (offsetLocal >= offsetAfter) { // gap: use offsetBefore\n+            return offsetBefore;\n+        } else if (offsetLocal < offsetBefore) { // overlap: use offsetAfter\n+            return offsetAfter;\n+        } else { // within gap or overlap: perform additional checks\n+            long prev2 = previousTransition(prev);\n+            long next2 = nextTransition(next);\n+            if (offsetBefore == offsetAfter && \n+                (next2 == next || prev2 == prev)) { // single hour\n+                return offsetBefore;\n+            } else if (next2 == prev2) { // unknown DST savings\n+                return offsetLocal;\n+            } else { // DST gap or overlap\n+                return offsetLocal >= offsetAfter ? offsetBefore : offsetAfter;\n             }\n         }\n-        return offsetAdjusted;\n+    } else { // normal (no gap or overlap)\n+        return offsetLocal;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}