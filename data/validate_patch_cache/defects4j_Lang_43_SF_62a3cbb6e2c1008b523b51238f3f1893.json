{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo,\n                                         boolean escapingOn) {\n    int start = pos.getIndex();\n    if (appendTo == null) {\n        appendTo = new StringBuffer();\n    }\n\n    int lastHold = start;\n    boolean inQuote = false;\n\n    for (; pos.getIndex() < pattern.length(); pos.setIndex(pos.getIndex() + 1)) {\n        char c = pattern.charAt(pos.getIndex());\n        if (escapingOn && pattern.regionMatches(pos.getIndex(), ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n            if (inQuote) {\n                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold - ESCAPED_QUOTE.length() + 1)\n                        .append(QUOTE);\n                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n            }\n        } else if (c == QUOTE) {\n            inQuote = !inQuote;\n            if (!inQuote) {\n                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n                return appendTo;\n            }\n            lastHold = pos.getIndex() + 1;\n        }\n    }\n    if (inQuote) {\n        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n    }\n    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n    return appendTo;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..54e89858 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,40 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos, StringBuffer appendTo,\n+                                         boolean escapingOn) {\n+    int start = pos.getIndex();\n+    if (appendTo == null) {\n+        appendTo = new StringBuffer();\n+    }\n+\n+    int lastHold = start;\n+    boolean inQuote = false;\n+\n+    for (; pos.getIndex() < pattern.length(); pos.setIndex(pos.getIndex() + 1)) {\n+        char c = pattern.charAt(pos.getIndex());\n+        if (escapingOn && pattern.regionMatches(pos.getIndex(), ESCAPED_QUOTE, 0, ESCAPED_QUOTE.length())) {\n+            if (inQuote) {\n+                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold - ESCAPED_QUOTE.length() + 1)\n+                        .append(QUOTE);\n+                pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n                 lastHold = pos.getIndex();\n-                continue;\n             }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+        } else if (c == QUOTE) {\n+            inQuote = !inQuote;\n+            if (!inQuote) {\n+                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n+                return appendTo;\n             }\n+            lastHold = pos.getIndex() + 1;\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n     }\n+    if (inQuote) {\n+        throw new IllegalArgumentException(\"Unterminated quoted string at position \" + start);\n+    }\n+    appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n+    return appendTo;\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "java.lang.IndexOutOfBoundsException: start 19, end 4, s.length() 25",
    "test_result": "FAIL"
}