{
    "patch": "import org.apache.commons.math3.exception.DimensionMismatchException;\n\npublic double density(final double[] vals) throws DimensionMismatchException {\n    final int dim = getDimension();\n    if (vals.length != dim) {\n        throw new DimensionMismatchException(vals.length, dim);\n    }\n\n    final double multiplier = FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n                                FastMath.pow(covarianceMatrixDeterminant, -0.5);\n    return multiplier * getExponentTerm(vals);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..100a738db 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,7 +180,18 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+\n+public double density(final double[] vals) throws DimensionMismatchException {\n+    final int dim = getDimension();\n+    if (vals.length != dim) {\n+        throw new DimensionMismatchException(vals.length, dim);\n+    }\n+\n+    final double multiplier = FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n+                                FastMath.pow(covarianceMatrixDeterminant, -0.5);\n+    return multiplier * getExponentTerm(vals);\n+}\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n             getExponentTerm(vals);\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}