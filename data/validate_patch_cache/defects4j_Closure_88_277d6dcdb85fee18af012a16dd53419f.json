{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable, boolean variableDefined) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        if (variableDefined) {\n          // The expression to which the assignment is made is evaluated before\n          // the RHS is evaluated (normal left to right evaluation) but the KILL\n          // occurs after the RHS is evaluated.\n          return VariableLiveness.KILL;\n        } else {\n          return VariableLiveness.MAYBE_LIVE;\n        }\n      } else {\n        return variableDefined ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n      }\n    }\n\n    boolean localVariableDefined = variableDefined;\n    if (NodeUtil.isNameDeclaration(n)) {\n      localVariableDefined = NodeUtil.isNameDeclared(n, variable)\n          || NodeUtil.isFunctionDeclaration(n, variable, /* recurse */ true);\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // FUNCTION\n        // Since the function has its own scope, variable liveness state is unknown after\n        // going into the function. We discard the information.\n        continue;\n      }\n      VariableLiveness childState = isVariableReadBeforeKill(child, variable, localVariableDefined);\n      if (childState == VariableLiveness.KILL) {\n        return VariableLiveness.KILL;\n      } else if (childState == VariableLiveness.READ) {\n        if (NodeUtil.mayHaveSideEffects(child)) {\n          // If a child may have side effects, we conservatively consider the variable maybe live.\n          return VariableLiveness.MAYBE_LIVE;\n        } else if (NodeUtil.isAssignmentOp(child) && NodeUtil.isLhs(n, child)) {\n          if (localVariableDefined) {\n            // The expression to which the assignment is made is evaluated before\n            // the RHS is evaluated (normal left to right evaluation) but the KILL\n            // occurs after the RHS is evaluated.\n            return VariableLiveness.KILL;\n          } else {\n            return VariableLiveness.MAYBE_LIVE;\n          }\n        } else {\n          return VariableLiveness.READ;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..7c1cbe26 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -321,25 +321,54 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+      Node n, String variable, boolean variableDefined) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+        if (variableDefined) {\n+          // The expression to which the assignment is made is evaluated before\n+          // the RHS is evaluated (normal left to right evaluation) but the KILL\n+          // occurs after the RHS is evaluated.\n+          return VariableLiveness.KILL;\n+        } else {\n+          return VariableLiveness.MAYBE_LIVE;\n+        }\n       } else {\n-        return VariableLiveness.READ;\n+        return variableDefined ? VariableLiveness.READ : VariableLiveness.MAYBE_LIVE;\n       }\n     }\n \n+    boolean localVariableDefined = variableDefined;\n+    if (NodeUtil.isNameDeclaration(n)) {\n+      localVariableDefined = NodeUtil.isNameDeclared(n, variable)\n+          || NodeUtil.isFunctionDeclaration(n, variable, /* recurse */ true);\n+    }\n+\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+      if (ControlFlowGraph.isEnteringNewCfgNode(child)) { // FUNCTION\n+        // Since the function has its own scope, variable liveness state is unknown after\n+        // going into the function. We discard the information.\n+        continue;\n+      }\n+      VariableLiveness childState = isVariableReadBeforeKill(child, variable, localVariableDefined);\n+      if (childState == VariableLiveness.KILL) {\n+        return VariableLiveness.KILL;\n+      } else if (childState == VariableLiveness.READ) {\n+        if (NodeUtil.mayHaveSideEffects(child)) {\n+          // If a child may have side effects, we conservatively consider the variable maybe live.\n+          return VariableLiveness.MAYBE_LIVE;\n+        } else if (NodeUtil.isAssignmentOp(child) && NodeUtil.isLhs(n, child)) {\n+          if (localVariableDefined) {\n+            // The expression to which the assignment is made is evaluated before\n+            // the RHS is evaluated (normal left to right evaluation) but the KILL\n+            // occurs after the RHS is evaluated.\n+            return VariableLiveness.KILL;\n+          } else {\n+            return VariableLiveness.MAYBE_LIVE;\n+          }\n+        } else {\n+          return VariableLiveness.READ;\n         }\n       }\n     }",
    "result_reason": "error: method isVariableReadBeforeKill in class DeadAssignmentsElimination cannot be applied to given types;",
    "test_result": "ERROR"
}