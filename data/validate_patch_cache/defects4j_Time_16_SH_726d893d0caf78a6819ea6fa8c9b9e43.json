{
    "patch": "        Instant i;\n        if (bucket.getOffsetInteger() != null) {\n            i = bucket.computeMillis(true, text);\n        } else {\n            i = bucket.computeMillis(true, text) - instantLocal;\n            if (bucket.getZone() == null) {\n                bucket.setZone(chrono.getZone());\n            }\n        }\n        i = chrono.getZone().convertUTCToLocal(i);\n        i = selectChronology(chrono).getZone().convertLocalToUTC(i, false, bucket.getOffsetInteger());",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..9cece0f8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,17 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        Instant i;\n+        if (bucket.getOffsetInteger() != null) {\n+            i = bucket.computeMillis(true, text);\n+        } else {\n+            i = bucket.computeMillis(true, text) - instantLocal;\n+            if (bucket.getZone() == null) {\n+                bucket.setZone(chrono.getZone());\n+            }\n+        }\n+        i = chrono.getZone().convertUTCToLocal(i);\n+        i = selectChronology(chrono).getZone().convertLocalToUTC(i, false, bucket.getOffsetInteger());\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}