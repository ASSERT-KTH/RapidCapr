{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          //Classes and object prototypes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            if (objectType.getImplicitPrototype() == null) {\n              break;\n            }\n            ObjectType prototype = objectType.getImplicitPrototype();\n            if (prototype == null) {\n              break;\n            }\n            objectType = prototype.dereference();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type instanceof NamedType ||\n               type.isFunctionType() ||\n               type instanceof RecordType ||\n               type instanceof UnionType ||\n               type.toMaybeFunctionType() != null ||\n               type.toObjectType() != null &&\n               type.toObjectType().getConstructor() != null) {\n      // Don't show complex function names or anonymous types.\n      // Instead, try to get a human-readable type name.\n      return type.toString();\n    } else {\n      return \"UnknownType\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..756e6898 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -737,9 +737,16 @@ class TypeValidator {\n           objectType = FunctionType.getTopDefiningInterface(\n               objectType, propName);\n         } else {\n-          // classes\n+          //Classes and object prototypes\n           while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n+            if (objectType.getImplicitPrototype() == null) {\n+              break;\n+            }\n+            ObjectType prototype = objectType.getImplicitPrototype();\n+            if (prototype == null) {\n+              break;\n+            }\n+            objectType = prototype.dereference();\n           }\n         }\n \n@@ -768,11 +775,18 @@ class TypeValidator {\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n-    } else {\n+    } else if (type instanceof NamedType ||\n+               type.isFunctionType() ||\n+               type instanceof RecordType ||\n+               type instanceof UnionType ||\n+               type.toMaybeFunctionType() != null ||\n+               type.toObjectType() != null &&\n+               type.toObjectType().getConstructor() != null) {\n+      // Don't show complex function names or anonymous types.\n+      // Instead, try to get a human-readable type name.\n       return type.toString();\n+    } else {\n+      return \"UnknownType\";\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}