{
    "patch": "import org.apache.commons.math3.exception.ConvergenceException;\nimport org.apache.commons.math3.exception.util.LocalizedFormats;\n\nimport java.util.*;\n\npublic class KMeansClusterer<T extends Clusterable<T>> {\n\n    /**\n     * A strategy used to choose initial centers for the clusters when running the k-means algorithm.\n     */\n    public enum InitialClusterStrategy {\n\n        /**\n         * Picks k initial cluster centers at random from the set of points to be clustered.\n         */\n        RANDOM,\n\n        /**\n         * First center is picked randomly, and each subsequent center is picked with a preference for\n         * points that are farthest from already selected centers.\n         */\n        K_MEANS_PLUS_PLUS\n    }\n\n    /**\n     * The number of clusters to generate.\n     */\n    private final int k;\n\n    /**\n     * The maximum number of iterations to run the algorithm for.\n     */\n    private final int maxIterations;\n\n    /**\n     * The distance measure to use to compute distances between points.\n     */\n    private final ClusterDistanceMeasure<? super T> measure;\n\n    /**\n     * The initial clusters to use.\n     */\n    private final List<Cluster<T>> initialClusters;\n\n    /**\n     * Choose initial centers with probability proportional to the squared distance to the nearest existing center.\n     */\n    private final boolean kMeansPlusPlus;\n\n    /**\n     * Empty clusters handling strategy.\n     */\n    private final EmptyClusterStrategy emptyStrategy;\n\n    /**\n     * Random generator for tests.\n     */\n    private final Random random;\n\n    /**\n     * Build a clusterer with the given parameters.\n     *\n     * @param k           the number of clusters to generate\n     * @param maxIterations the maximum number of iterations to run the algorithm for\n     * @param measure       the distance measure to use to compute distances between points\n     * @param initialClusters a list of pre-computed initial clusters to use\n     * @param emptyStrategy empty clusters handling strategy\n     * @param kMeansPlusPlus If true, initialize the cluster centers using the k-means++ algorithm\n     * @param random random generator for tests\n     */\n    public KMeansClusterer(final int k, final int maxIterations,\n                           final ClusterDistanceMeasure<? super T> measure,\n                           final List<Cluster<T>> initialClusters,\n                           final EmptyClusterStrategy emptyStrategy,\n                           final boolean kMeansPlusPlus,\n                           final Random random) {\n        this.k = k;\n        this.maxIterations = maxIterations;\n        this.measure = measure;\n        this.initialClusters = initialClusters;\n        this.emptyStrategy = emptyStrategy;\n        this.kMeansPlusPlus = kMeansPlusPlus;\n        this.random = random;\n    }\n\n    /**\n     * Create a clusterer with the given parameters.\n     *\n     * @param k           the number of clusters to generate\n     * @param maxIterations the maximum number of iterations to run the algorithm for\n     * @param measure       the distance measure to use to compute distances between points\n     * @param strategy     the strategy to use to choose the initial point for each cluster\n     * @param emptyStrategy empty clusters handling strategy\n     * @param random       random generator for tests\n     */\n    public KMeansClusterer(final int k, final int maxIterations,\n                           final ClusterDistanceMeasure<? super T> measure,\n                           final InitialClusterStrategy strategy,\n                           final EmptyClusterStrategy emptyStrategy,\n                           final Random random) {\n        this(k, maxIterations, measure, null, emptyStrategy, strategy == InitialClusterStrategy.K_MEANS_PLUS_PLUS, random);\n    }\n\n    /**\n     * Create a clusterer with the given parameters.\n     *\n     * @param k           the number of clusters to generate\n     * @param maxIterations the maximum number of iterations to run the algorithm for\n     * @param measure       the distance measure to use to compute distances between points\n     * @param strategy     the strategy to use to choose the initial point for each cluster\n     * @param random       random generator for tests\n     */\n    public KMeansClusterer(final int k, final int maxIterations,\n                           final ClusterDistanceMeasure<? super T> measure,\n                           final InitialClusterStrategy strategy,\n                           final Random random) {\n        this(k, maxIterations, measure, strategy, EmptyClusterStrategy.LARGEST_VARIANCE, random);\n    }\n\n    /**\n     * Build a clusterer with the given parameters.\n     *\n     * @param k           the number of clusters to generate\n     * @param measure       the distance measure to use to compute distances between points\n     * @param random       random generator for tests\n     */\n    public KMeansClusterer(final int k, final ClusterDistanceMeasure<? super T> measure, final Random random) {\n        this(k, Integer.MAX_VALUE, measure, InitialClusterStrategy.K_MEANS_PLUS_PLUS, random);\n    }\n\n    /**\n     * Returns the number of clusters this clusterer will generate.\n     *\n     * @return the number of clusters\n     */\n    public int getK() {\n        return k;\n    }\n\n    /**\n     * Returns the maximum number of iterations that this clusterer will run for.\n     *\n     * @return the maximum number of iterations\n     */\n    public int getMaxIterations() {\n        return maxIterations;\n    }\n\n    /**\n     * Returns the distance measure that this clusterer uses to compute distances between points.\n     *\n     * @return the distance measure\n     */\n    public ClusterDistanceMeasure<? super T> getDistanceMeasure() {\n        return measure;\n    }\n\n    /**\n     * Returns the initial clusters used as the starting point of the clustering process.\n     *\n     * @return the initial clusters\n     */\n    public List<Cluster<T>> getInitialClusters() {\n        return initialClusters;\n    }\n\n    /**\n     * Runs the k-means clustering algorithm.\n     *\n     * @param points the points to cluster\n     * @return a list of clusters containing the points\n     */\n    public List<Cluster<T>> cluster(final Collection<T> points) {\n        if (points.isEmpty()) {\n            throw new IllegalArgumentException(\"The input must not be empty.\");\n        }\n\n        final int numPoints = points.size();\n        if (numPoints < k) {\n            throw new IllegalArgumentException(\"The number of clusters is larger than the number of points.\");\n        }\n\n        List<Cluster<T>> clusters = initialClusters;\n        if (clusters == null) {\n            // create the initial clusters\n            clusters = chooseInitialCenters(points);\n        }\n\n        assignPointsToClusters(clusters, points);\n\n        int iteration = 0;\n        while (iteration < maxIterations) {\n            final List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n            boolean converged = true;\n            for (final Cluster<T> cluster : clusters) {\n                final T newCenter;\n                if (cluster.getPoints().isEmpty()) {\n                    switch (emptyStrategy) {\n                        case LARGEST_VARIANCE:\n                            newCenter = getPointFromLargestVarianceCluster(clusters);\n                            break;\n                        case LARGEST_POINTS_NUMBER:\n                            newCenter = getPointFromLargestNumberCluster(clusters);\n                            break;\n                        case FARTHEST_POINT:\n                            newCenter = getFarthestPoint(clusters);\n                            break;\n                        default:\n                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                    }\n                } else {\n                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                }\n                newClusters.add(new Cluster<T>(newCenter));\n                if (converged && !newCenter.equals(cluster.getCenter())) {\n                    converged = false;\n                }\n            }\n\n            if (converged) {\n                return clusters;\n            }\n\n            assignPointsToClusters(newClusters, points);\n            clusters = newClusters;\n            iteration++;\n        }\n\n        return clusters;\n    }\n\n    /**\n     * Adds the given points to the closest {@link Cluster}.\n     *\n     * @param <T>      type of the points to cluster\n     * @param clusters the {@link Cluster}s to add the points to\n     * @param points   the points to add to the given {@link Cluster}s\n     */\n    private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters,\n                                                                          final Collection<T> points) {\n        for (final T p : points) {\n            Cluster<T> cluster = getNearestCluster(clusters, p);\n            cluster.addPoint(p);\n        }\n    }\n\n    /**\n     * Choose initial centers using the k-means++ algorithm.\n     *\n     * @param points the points to choose the initial centers from\n     * @return the initial centers\n     */\n    private List<Cluster<T>> chooseInitia",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..754755426 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,60 +89,246 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n+import org.apache.commons.math3.exception.ConvergenceException;\n+import org.apache.commons.math3.exception.util.LocalizedFormats;\n+\n+import java.util.*;\n+\n+public class KMeansClusterer<T extends Clusterable<T>> {\n+\n+    /**\n+     * A strategy used to choose initial centers for the clusters when running the k-means algorithm.\n+     */\n+    public enum InitialClusterStrategy {\n+\n+        /**\n+         * Picks k initial cluster centers at random from the set of points to be clustered.\n+         */\n+        RANDOM,\n+\n+        /**\n+         * First center is picked randomly, and each subsequent center is picked with a preference for\n+         * points that are farthest from already selected centers.\n+         */\n+        K_MEANS_PLUS_PLUS\n+    }\n+\n+    /**\n+     * The number of clusters to generate.\n+     */\n+    private final int k;\n+\n+    /**\n+     * The maximum number of iterations to run the algorithm for.\n+     */\n+    private final int maxIterations;\n+\n+    /**\n+     * The distance measure to use to compute distances between points.\n+     */\n+    private final ClusterDistanceMeasure<? super T> measure;\n+\n+    /**\n+     * The initial clusters to use.\n+     */\n+    private final List<Cluster<T>> initialClusters;\n+\n+    /**\n+     * Choose initial centers with probability proportional to the squared distance to the nearest existing center.\n+     */\n+    private final boolean kMeansPlusPlus;\n+\n+    /**\n+     * Empty clusters handling strategy.\n+     */\n+    private final EmptyClusterStrategy emptyStrategy;\n+\n+    /**\n+     * Random generator for tests.\n+     */\n+    private final Random random;\n+\n+    /**\n+     * Build a clusterer with the given parameters.\n+     *\n+     * @param k           the number of clusters to generate\n+     * @param maxIterations the maximum number of iterations to run the algorithm for\n+     * @param measure       the distance measure to use to compute distances between points\n+     * @param initialClusters a list of pre-computed initial clusters to use\n+     * @param emptyStrategy empty clusters handling strategy\n+     * @param kMeansPlusPlus If true, initialize the cluster centers using the k-means++ algorithm\n+     * @param random random generator for tests\n+     */\n+    public KMeansClusterer(final int k, final int maxIterations,\n+                           final ClusterDistanceMeasure<? super T> measure,\n+                           final List<Cluster<T>> initialClusters,\n+                           final EmptyClusterStrategy emptyStrategy,\n+                           final boolean kMeansPlusPlus,\n+                           final Random random) {\n+        this.k = k;\n+        this.maxIterations = maxIterations;\n+        this.measure = measure;\n+        this.initialClusters = initialClusters;\n+        this.emptyStrategy = emptyStrategy;\n+        this.kMeansPlusPlus = kMeansPlusPlus;\n+        this.random = random;\n+    }\n+\n+    /**\n+     * Create a clusterer with the given parameters.\n+     *\n+     * @param k           the number of clusters to generate\n+     * @param maxIterations the maximum number of iterations to run the algorithm for\n+     * @param measure       the distance measure to use to compute distances between points\n+     * @param strategy     the strategy to use to choose the initial point for each cluster\n+     * @param emptyStrategy empty clusters handling strategy\n+     * @param random       random generator for tests\n+     */\n+    public KMeansClusterer(final int k, final int maxIterations,\n+                           final ClusterDistanceMeasure<? super T> measure,\n+                           final InitialClusterStrategy strategy,\n+                           final EmptyClusterStrategy emptyStrategy,\n+                           final Random random) {\n+        this(k, maxIterations, measure, null, emptyStrategy, strategy == InitialClusterStrategy.K_MEANS_PLUS_PLUS, random);\n+    }\n+\n+    /**\n+     * Create a clusterer with the given parameters.\n+     *\n+     * @param k           the number of clusters to generate\n+     * @param maxIterations the maximum number of iterations to run the algorithm for\n+     * @param measure       the distance measure to use to compute distances between points\n+     * @param strategy     the strategy to use to choose the initial point for each cluster\n+     * @param random       random generator for tests\n+     */\n+    public KMeansClusterer(final int k, final int maxIterations,\n+                           final ClusterDistanceMeasure<? super T> measure,\n+                           final InitialClusterStrategy strategy,\n+                           final Random random) {\n+        this(k, maxIterations, measure, strategy, EmptyClusterStrategy.LARGEST_VARIANCE, random);\n+    }\n+\n+    /**\n+     * Build a clusterer with the given parameters.\n+     *\n+     * @param k           the number of clusters to generate\n+     * @param measure       the distance measure to use to compute distances between points\n+     * @param random       random generator for tests\n+     */\n+    public KMeansClusterer(final int k, final ClusterDistanceMeasure<? super T> measure, final Random random) {\n+        this(k, Integer.MAX_VALUE, measure, InitialClusterStrategy.K_MEANS_PLUS_PLUS, random);\n+    }\n+\n+    /**\n+     * Returns the number of clusters this clusterer will generate.\n+     *\n+     * @return the number of clusters\n+     */\n+    public int getK() {\n+        return k;\n+    }\n+\n+    /**\n+     * Returns the maximum number of iterations that this clusterer will run for.\n+     *\n+     * @return the maximum number of iterations\n+     */\n+    public int getMaxIterations() {\n+        return maxIterations;\n+    }\n+\n+    /**\n+     * Returns the distance measure that this clusterer uses to compute distances between points.\n+     *\n+     * @return the distance measure\n+     */\n+    public ClusterDistanceMeasure<? super T> getDistanceMeasure() {\n+        return measure;\n+    }\n+\n+    /**\n+     * Returns the initial clusters used as the starting point of the clustering process.\n+     *\n+     * @return the initial clusters\n+     */\n+    public List<Cluster<T>> getInitialClusters() {\n+        return initialClusters;\n+    }\n+\n+    /**\n+     * Runs the k-means clustering algorithm.\n+     *\n+     * @param points the points to cluster\n+     * @return a list of clusters containing the points\n+     */\n+    public List<Cluster<T>> cluster(final Collection<T> points) {\n+        if (points.isEmpty()) {\n+            throw new IllegalArgumentException(\"The input must not be empty.\");\n+        }\n+\n+        final int numPoints = points.size();\n+        if (numPoints < k) {\n+            throw new IllegalArgumentException(\"The number of clusters is larger than the number of points.\");\n+        }\n+\n+        List<Cluster<T>> clusters = initialClusters;\n+        if (clusters == null) {\n+            // create the initial clusters\n+            clusters = chooseInitialCenters(points);\n+        }\n+\n         assignPointsToClusters(clusters, points);\n \n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n+        int iteration = 0;\n+        while (iteration < maxIterations) {\n+            final List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n+            boolean converged = true;\n             for (final Cluster<T> cluster : clusters) {\n                 final T newCenter;\n                 if (cluster.getPoints().isEmpty()) {\n                     switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n+                        case LARGEST_VARIANCE:\n                             newCenter = getPointFromLargestVarianceCluster(clusters);\n                             break;\n-                        case LARGEST_POINTS_NUMBER :\n+                        case LARGEST_POINTS_NUMBER:\n                             newCenter = getPointFromLargestNumberCluster(clusters);\n                             break;\n-                        case FARTHEST_POINT :\n+                        case FARTHEST_POINT:\n                             newCenter = getFarthestPoint(clusters);\n                             break;\n-                        default :\n+                        default:\n                             throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                     }\n-                    clusteringChanged = true;\n                 } else {\n                     newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n                 }\n                 newClusters.add(new Cluster<T>(newCenter));\n+                if (converged && !newCenter.equals(cluster.getCenter())) {\n+                    converged = false;\n+                }\n             }\n-            if (!clusteringChanged) {\n+\n+            if (converged) {\n                 return clusters;\n             }\n+\n             assignPointsToClusters(newClusters, points);\n             clusters = newClusters;\n+            iteration++;\n         }\n+\n         return clusters;\n     }\n \n     /**\n      * Adds the given points to the closest {@link Cluster}.\n      *\n-     * @param <T> type of the points to cluster\n+     * @param <T>      type of the points to cluster\n      * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n+     * @param points   the points to add to the given {@link Cluster}s\n      */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n+    private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters,\n+                                                                          final Collection<T> points) {\n         for (final T p : points) {\n             Cluster<T> cluster = getNearestCluster(clusters, p);\n             cluster.addPoint(p);\n@@ -150,52 +336,12 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n     }\n \n     /**\n-     * Use K-means++ to choose the initial centers.\n+     * Choose initial centers using the k-means++ algorithm.\n      *\n-     * @param <T> type of the points to cluster\n      * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n      * @return the initial centers\n      */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n-\n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n-            }\n-        }\n-\n-        return resultSet;\n-\n-    }\n+    private List<Cluster<T>> chooseInitia\n \n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}