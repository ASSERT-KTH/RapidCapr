{
    "patch": "    int index = input.indexOf(\"in\");\n    if (index == -1) {\n        return input;\n    }\n    String variable = input.substring(0, index).trim();\n    String array = input.substring(index + 2).trim();\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"for (\");\n    sb.append(\"var \");\n    sb.append(variable);\n    sb.append(\"Var in \");\n    sb.append(array);\n    sb.append(\") {\\n\");\n    sb.append(\"  \");\n    sb.append(input.substring(0, index));\n    sb.append(\" = \");\n    sb.append(variable);\n    sb.append(\"Var;\\n\");\n    sb.append(\"  \");\n    sb.append(expected.substring(expected.indexOf(\"{\") + 1, expected.lastIndexOf(\"}\")).trim());\n    sb.append(\"}\");\n    return sb.toString();",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d72ef43d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,6 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}