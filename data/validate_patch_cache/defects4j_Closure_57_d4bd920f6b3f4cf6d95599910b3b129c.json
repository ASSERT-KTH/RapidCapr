{
    "patch": "        if (callee != null && callee.getType() == Token.GETPROP) {\n          String qualifiedName = callee.getQualifiedName();\n          if (functionName.equals(qualifiedName)) {\n            Node target = callee.getNext();\n            if (target != null && target.getType() == Token.STRING) {\n              className = target.getString();\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..18093d0c 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -184,7 +184,6 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n   public String extractClassNameIfRequire(Node node, Node parent){\n     return extractClassNameIfGoog(node, parent, \"goog.require\");\n   }\n-\n   private static String extractClassNameIfGoog(Node node, Node parent,\n       String functionName){\n     String className = null;\n@@ -194,7 +193,15 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n         String qualifiedName = callee.getQualifiedName();\n         if (functionName.equals(qualifiedName)) {\n           Node target = callee.getNext();\n-          if (target != null) {\n+        if (callee != null && callee.getType() == Token.GETPROP) {\n+          String qualifiedName = callee.getQualifiedName();\n+          if (functionName.equals(qualifiedName)) {\n+            Node target = callee.getNext();\n+            if (target != null && target.getType() == Token.STRING) {\n+              className = target.getString();\n+            }\n+          }\n+        }\n             className = target.getString();\n           }\n         }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}