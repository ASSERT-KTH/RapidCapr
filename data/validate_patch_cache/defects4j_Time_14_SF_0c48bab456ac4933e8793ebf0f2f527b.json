{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iType = PeriodType.time();\n    int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n    iType = PeriodType.standard();\n    iValues = new int[8];\n    System.arraycopy(values, 0, iValues, 4, 4);\n}\n\npublic int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        int curFieldIndex = -1;\n        long instant = 0L;\n        boolean changedDayOfMonth = false;\n        int oldDay = 0;\n\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            curFieldIndex = partial.getFieldType(i).getFieldIndex(iChronology);\n            int value = partial.getValue(i);\n            if (i == fieldIndex) {\n                value += valueToAdd;\n            }\n\n            if (changedDayOfMonth || i != DateTimeFieldType.dayOfMonth().getFieldIndex() || oldDay != 29) {\n                values[curFieldIndex] = value;\n            } else {\n                int dayOfYear = iChronology.dayOfYear().get(instant);\n                int newYear = iChronology.yearOfCentury().get(instant);\n                // grab a month in which the day exists\n                int monthOfYear = iChronology.monthOfYear().get(instant);\n                int dayOfMonth = value;\n                if (dayOfMonth > 28) {\n                    int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, monthOfYear);\n                    // Cap it at the last day in the month\n                    dayOfMonth = lastDayOfMonth < value ? lastDayOfMonth : value;\n                }\n                // reset the day since the month may have changed\n                instant = iChronology.yearMonthDay().set(instant, newYear, monthOfYear, dayOfMonth);\n                instant = iChronology.set(instant, DateTimeFieldType.dayOfYear(), dayOfYear);\n                values[curFieldIndex] = iChronology.dayOfMonth().get(instant);\n                changedDayOfMonth = true;\n            }\n\n            oldDay = values[curFieldIndex];\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[curFieldIndex]);\n        }\n\n        if (changedDayOfMonth) {\n            // check for cross-year 29th Feb\n            instant = iChronology.set(partial, instant);\n            int day = iChronology.getDayOfMonth(instant);\n            if (oldDay != day) {\n                // self-contained unit relies on proper iType set\n                // (i.e. same as original)\n                int[] newValues = partial.getValues();\n                newValues[curFieldIndex] = day;\n                constructor: {\n                    Partial newPartial = new Partial(newValues, partial.getChronology());\n                    // check if we are really cross-year\n                    Duration dur = new Duration(partial, newPartial);\n                    if (Math.abs(dur.getMillis()) >= iChronology.daysInYearMaximum()) {\n                        if (iChronology.year().isLeap(newPartial.get(DateTimeFieldType.year()))) {\n                            if (newPartial.get(DateTimeFieldType.monthOfYear()) == 3) {\n                                newValues[curFieldIndex] = 29;\n                                instant = newPartial.getChronology().set(newPartial, 0L, newValues);\n                            }\n                        } else {\n                            newPartial.getField(DateTimeFieldType.dayOfMonth()).set(29);\n                            newValues[curFieldIndex] = 28;\n                            instant = newPartial.getChronology().set(newPartial, 0L, newValues);\n                        }\n                        break constructor;\n                    }\n                    instant = iChronology.set(newPartial, instant);\n                }\n                values = iChronology.get(partial, instant);\n            }\n        }\n        return values;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..0f2c7265 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,23 +200,89 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+protected BasePeriod(long duration) {\n+    super();\n+    iType = PeriodType.time();\n+    int[] values = ISOChronology.getInstanceUTC().get(this, duration);\n+    iType = PeriodType.standard();\n+    iValues = new int[8];\n+    System.arraycopy(values, 0, iValues, 4, 4);\n+}\n+\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        int curFieldIndex = -1;\n+        long instant = 0L;\n+        boolean changedDayOfMonth = false;\n+        int oldDay = 0;\n+\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            curFieldIndex = partial.getFieldType(i).getFieldIndex(iChronology);\n+            int value = partial.getValue(i);\n+            if (i == fieldIndex) {\n+                value += valueToAdd;\n+            }\n+\n+            if (changedDayOfMonth || i != DateTimeFieldType.dayOfMonth().getFieldIndex() || oldDay != 29) {\n+                values[curFieldIndex] = value;\n+            } else {\n+                int dayOfYear = iChronology.dayOfYear().get(instant);\n+                int newYear = iChronology.yearOfCentury().get(instant);\n+                // grab a month in which the day exists\n+                int monthOfYear = iChronology.monthOfYear().get(instant);\n+                int dayOfMonth = value;\n+                if (dayOfMonth > 28) {\n+                    int lastDayOfMonth = iChronology.dayOfMonth().getMaximumValue(newYear, monthOfYear);\n+                    // Cap it at the last day in the month\n+                    dayOfMonth = lastDayOfMonth < value ? lastDayOfMonth : value;\n+                }\n+                // reset the day since the month may have changed\n+                instant = iChronology.yearMonthDay().set(instant, newYear, monthOfYear, dayOfMonth);\n+                instant = iChronology.set(instant, DateTimeFieldType.dayOfYear(), dayOfYear);\n+                values[curFieldIndex] = iChronology.dayOfMonth().get(instant);\n+                changedDayOfMonth = true;\n+            }\n+\n+            oldDay = values[curFieldIndex];\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[curFieldIndex]);\n+        }\n+\n+        if (changedDayOfMonth) {\n+            // check for cross-year 29th Feb\n+            instant = iChronology.set(partial, instant);\n+            int day = iChronology.getDayOfMonth(instant);\n+            if (oldDay != day) {\n+                // self-contained unit relies on proper iType set\n+                // (i.e. same as original)\n+                int[] newValues = partial.getValues();\n+                newValues[curFieldIndex] = day;\n+                constructor: {\n+                    Partial newPartial = new Partial(newValues, partial.getChronology());\n+                    // check if we are really cross-year\n+                    Duration dur = new Duration(partial, newPartial);\n+                    if (Math.abs(dur.getMillis()) >= iChronology.daysInYearMaximum()) {\n+                        if (iChronology.year().isLeap(newPartial.get(DateTimeFieldType.year()))) {\n+                            if (newPartial.get(DateTimeFieldType.monthOfYear()) == 3) {\n+                                newValues[curFieldIndex] = 29;\n+                                instant = newPartial.getChronology().set(newPartial, 0L, newValues);\n+                            }\n+                        } else {\n+                            newPartial.getField(DateTimeFieldType.dayOfMonth()).set(29);\n+                            newValues[curFieldIndex] = 28;\n+                            instant = newPartial.getChronology().set(newPartial, 0L, newValues);\n+                        }\n+                        break constructor;\n+                    }\n+                    instant = iChronology.set(newPartial, instant);\n+                }\n+                values = iChronology.get(partial, instant);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return values;\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}