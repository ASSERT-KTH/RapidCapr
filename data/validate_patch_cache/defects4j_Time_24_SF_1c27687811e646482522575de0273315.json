{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        if (count > 0) {\n            // alter base year for parsing if first field is month or day\n            DurationField months = DurationFieldType.months().getField(iChrono);\n            DurationField days = DurationFieldType.days().getField(iChrono);\n            DurationField first = savedFields[0].iField.getDurationField();\n            // only alter the year if we have a weekyear, year, month, and day\n            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0 && count >= 4) {\n                DurationField field1 = savedFields[1].iField.getDurationField();\n                DurationField field2 = savedFields[2].iField.getDurationField();\n                DurationField field3 = savedFields[3].iField.getDurationField();\n                // if we have a weekyear field, a year field, a month field, and a day field, alter the year (bugs [1496267] and [3040489])\n                if (compareReverse(field1, first) == 0 &&\n                    compareReverse(field2, first) == 0 &&\n                    compareReverse(field3, days)   == 0 &&\n                    ((savedFields[1].iValue >= 1 && savedFields[1].iValue <= 7) || savedFields[1].iValue == -1)) {\n                    saveField(DateTimeFieldType.year(), iDefaultYear);\n                }\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..258a2e02 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -341,9 +341,18 @@ public class DateTimeParserBucket {\n             DurationField months = DurationFieldType.months().getField(iChrono);\n             DurationField days = DurationFieldType.days().getField(iChrono);\n             DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+            // only alter the year if we have a weekyear, year, month, and day\n+            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0 && count >= 4) {\n+                DurationField field1 = savedFields[1].iField.getDurationField();\n+                DurationField field2 = savedFields[2].iField.getDurationField();\n+                DurationField field3 = savedFields[3].iField.getDurationField();\n+                // if we have a weekyear field, a year field, a month field, and a day field, alter the year (bugs [1496267] and [3040489])\n+                if (compareReverse(field1, first) == 0 &&\n+                    compareReverse(field2, first) == 0 &&\n+                    compareReverse(field3, days)   == 0 &&\n+                    ((savedFields[1].iValue >= 1 && savedFields[1].iValue <= 7) || savedFields[1].iValue == -1)) {\n+                    saveField(DateTimeFieldType.year(), iDefaultYear);\n+                }\n             }\n         }\n ",
    "result_reason": "org.joda.time.IllegalFieldValueException: Cannot parse \"--02-29\": Value 29 for dayOfMonth must be in the range [1,28]",
    "test_result": "FAIL"
}