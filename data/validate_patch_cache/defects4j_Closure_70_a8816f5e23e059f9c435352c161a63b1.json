{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  Set<String> declaredParamNames = new HashSet<String>();\n  List<JSError> warnings = new ArrayList<JSError>();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        String paramName = null;\n        if (astParameter.isName()) {\n          paramName = astParameter.getString();\n        }\n        if (jsDocParameter != null) {\n          JSType paramType = jsDocParameter.getJSType();\n          if (paramName != null) {\n            if (declaredParamNames.contains(paramName)) {\n              warnings.add(JSError.make(astParameter, DupeVar.ARG_MULTIPLY_DECLARED_ERROR,\n                  paramName));\n            } else {\n              declaredParamNames.add(paramName);\n              defineSlot(astParameter, functionNode, paramType, true);\n            }\n          } else {\n            defineSlot(astParameter, functionNode, paramType, true);\n          }\n          jsDocParameter = jsDocParameter.getNext();\n        } else {\n          if (paramName != null) {\n            if (declaredParamNames.contains(paramName)) {\n              warnings.add(JSError.make(astParameter, DupeVar.ARG_MULTIPLY_DECLARED_ERROR,\n                  paramName));\n            } else {\n              declaredParamNames.add(paramName);\n              defineSlot(astParameter, functionNode, null, true);\n            }\n          } else {\n            defineSlot(astParameter, functionNode, null, true);\n          }\n        }\n      }\n    }\n  }\n  for (JSError warning : warnings) {\n    compiler.report(warning);\n  }\n} // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..b2ed6c17 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,55 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  Set<String> declaredParamNames = new HashSet<String>();\n+  List<JSError> warnings = new ArrayList<JSError>();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Node jsDocParameter = jsDocParameters.getFirstChild();\n+      for (Node astParameter : astParameters.children()) {\n+        String paramName = null;\n+        if (astParameter.isName()) {\n+          paramName = astParameter.getString();\n+        }\n+        if (jsDocParameter != null) {\n+          JSType paramType = jsDocParameter.getJSType();\n+          if (paramName != null) {\n+            if (declaredParamNames.contains(paramName)) {\n+              warnings.add(JSError.make(astParameter, DupeVar.ARG_MULTIPLY_DECLARED_ERROR,\n+                  paramName));\n+            } else {\n+              declaredParamNames.add(paramName);\n+              defineSlot(astParameter, functionNode, paramType, true);\n+            }\n+          } else {\n+            defineSlot(astParameter, functionNode, paramType, true);\n+          }\n+          jsDocParameter = jsDocParameter.getNext();\n+        } else {\n+          if (paramName != null) {\n+            if (declaredParamNames.contains(paramName)) {\n+              warnings.add(JSError.make(astParameter, DupeVar.ARG_MULTIPLY_DECLARED_ERROR,\n+                  paramName));\n             } else {\n+              declaredParamNames.add(paramName);\n               defineSlot(astParameter, functionNode, null, true);\n             }\n+          } else {\n+            defineSlot(astParameter, functionNode, null, true);\n           }\n         }\n       }\n-    } // end declareArguments\n+    }\n+  }\n+  for (JSError warning : warnings) {\n+    compiler.report(warning);\n+  }\n+} // end declareArguments\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}