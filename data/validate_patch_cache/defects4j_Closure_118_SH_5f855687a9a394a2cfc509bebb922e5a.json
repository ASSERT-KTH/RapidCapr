{
    "patch": " // Maybe STRING, GET, SET\n if (child.isString() || child.isGetProp() || child.isSetProp()) {\n   Node keyNode = child.isString() ? child : child.getFirstChild();\n   String name = keyNode.getString();\n   T type = typeSystem.getType(getScope(), n, name);\n\n   Property prop = getProperty(name);\n   if (!prop.scheduleRenaming(keyNode,\n       processProperty(t, prop, type, null))) {\n     // TODO(user): It doesn't look like the user can do much in this\n     // case right now.\n     if (propertiesToErrorFor.containsKey(name)) {\n        compiler.report(JSError.make(\n            t.getSourceName(), child, propertiesToErrorFor.get(name),\n            Warnings.INVALIDATION, name,\n            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n     }\n   }\n } else if (child.isNumber()) {\n   compiler.report(t.makeError(child, INVALID_OBJLIT_KEY_ERROR));\n }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..57605fed 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,27 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+ // Maybe STRING, GET, SET\n+ if (child.isString() || child.isGetProp() || child.isSetProp()) {\n+   Node keyNode = child.isString() ? child : child.getFirstChild();\n+   String name = keyNode.getString();\n+   T type = typeSystem.getType(getScope(), n, name);\n+\n+   Property prop = getProperty(name);\n+   if (!prop.scheduleRenaming(keyNode,\n+       processProperty(t, prop, type, null))) {\n+     // TODO(user): It doesn't look like the user can do much in this\n+     // case right now.\n+     if (propertiesToErrorFor.containsKey(name)) {\n+        compiler.report(JSError.make(\n+            t.getSourceName(), child, propertiesToErrorFor.get(name),\n+            Warnings.INVALIDATION, name,\n+            (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+     }\n+   }\n+ } else if (child.isNumber()) {\n+   compiler.report(t.makeError(child, INVALID_OBJLIT_KEY_ERROR));\n+ }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}