{
    "patch": "        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n            String str = text.substring(position);\n            for (String id : ALL_IDS) {\n                int idLen = id.length();\n                if (str.regionMatches(true, 0, id, 0, idLen) && (str.length() == idLen || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n                    bucket.setZone(DateTimeZone.forID(id));\n                    return position + idLen;\n                }\n            }\n            return ~position;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..58972d36 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2540,9 +2540,10 @@ public class DateTimeFormatterBuilder {\n         public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n             String str = text.substring(position);\n             for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n+                int idLen = id.length();\n+                if (str.regionMatches(true, 0, id, 0, idLen) && (str.length() == idLen || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n                     bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+                    return position + idLen;\n                 }\n             }\n             return ~position;",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}