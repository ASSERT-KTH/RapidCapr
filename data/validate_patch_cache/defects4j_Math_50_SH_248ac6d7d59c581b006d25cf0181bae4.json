{
    "patch": "if (f0 * fx < 0) {\n    x1 = x;\n    f1 = fx;\n} else if (f0 * f1 > 0) {\n    x0 = x;\n    f0 = fx;\n} else {\n    // Use bisection if the bracketing interval i",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..70911d482 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,10 +184,14 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n-                    }\n+if (f0 * fx < 0) {\n+    x1 = x;\n+    f1 = fx;\n+} else if (f0 * f1 > 0) {\n+    x0 = x;\n+    f0 = fx;\n+} else {\n+    // Use bisection if the bracketing interval i\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: orphaned default",
    "test_result": "ERROR"
}