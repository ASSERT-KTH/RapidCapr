{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) { // loop over parameters only\n        parameter = parameters.next();\n      if (!arguments.hasNext()) { // no matching argument\n          if (parameter.isVarArgs()) {\n            return;\n          }\n          report(t, call, WRONG_ARGUMENT_COUNT,\n                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n                  String.valueOf(arguments.next()), String.valueOf(parameter),\n                  call, ordinal);\n      } else { // matching argument\n          argument = arguments.next();\n          ordinal++;\n\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n\n    // if there are remaining arguments we must check them against varargs parameter\n    if (arguments.hasNext() && parameter.isVarArgs()) {\n        while (arguments.hasNext()) {\n          argument = arguments.next();\n          ordinal++;\n\n          validator.expectArgumentMatchesParameter(t, argument,\n              getJSType(argument), getJSType(parameter.getJSType().toArrayElementType()), call, ordinal);\n        }\n      }\n\n    // if there are no arguments remaining and varargs is not defined, check count\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\",\n              call, -1);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..943cb041 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,18 +1405,37 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    while (parameters.hasNext()) { // loop over parameters only\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+      if (!arguments.hasNext()) { // no matching argument\n+          if (parameter.isVarArgs()) {\n+            return;\n+          }\n+          report(t, call, WRONG_ARGUMENT_COUNT,\n+                  validator.getReadableJSTypeName(call.getFirstChild(), false),\n+                  String.valueOf(arguments.next()), String.valueOf(parameter),\n+                  call, ordinal);\n+      } else { // matching argument\n+          argument = arguments.next();\n+          ordinal++;\n+\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n     }\n \n+    // if there are remaining arguments we must check them against varargs parameter\n+    if (arguments.hasNext() && parameter.isVarArgs()) {\n+        while (arguments.hasNext()) {\n+          argument = arguments.next();\n+          ordinal++;\n+\n+          validator.expectArgumentMatchesParameter(t, argument,\n+              getJSType(argument), getJSType(parameter.getJSType().toArrayElementType()), call, ordinal);\n+        }\n+      }\n+\n+    // if there are no arguments remaining and varargs is not defined, check count\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n@@ -1425,7 +1444,8 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n               validator.getReadableJSTypeName(call.getFirstChild(), false),\n               String.valueOf(numArgs), String.valueOf(minArgs),\n               maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+              \" and no more than \" + maxArgs + \" argument(s)\" : \"\",\n+              call, -1);\n     }\n   }\n ",
    "result_reason": "error: method report in class TypeCheck cannot be applied to given types;",
    "test_result": "ERROR"
}