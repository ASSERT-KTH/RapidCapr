{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        buf.setLength(0);\n        applyPattern(buf, calendar);\n        if (mTimeZoneForced) {\n            formatTimeZone(calendar, buf);\n        } else {\n            TimeZone tz = calendar.getTimeZone();\n            if (tz.getRawOffset() == 0) {\n                buf.append('Z');\n            } else {\n                formatTimeZone(calendar, buf);\n            }\n        }\n        return buf;\n    }\n\n    private void applyPattern(StringBuffer buf, Calendar calendar) {\n        int i;\n        boolean[] saw = new boolean[FORMATS.length()];\n        for (i = 0; i < saw.length; i++) {\n            saw[i] = false;\n        }\n        int last = -1;\n        for (i = 0; i < buf.length(); i++) {\n            char c = buf.charAt(i);\n            if (c == '\\'') {\n                if (last == -1) {\n                    last = i;\n                } else {\n                    last = -1;\n                }\n            }\n            if (last == -1) {\n                int f = FORMATS.indexOf(c);\n                if (f >= 0) {\n                    if (f == QUOTE) {\n                        if (i + 1 < buf.length()\n                                && buf.charAt(i + 1) == '\\'') {\n                            i++;\n                        } else {\n                            last = i;\n                        }\n                    } else {\n                        if (f == ZONE_NAME) {\n                            saw[ZONE_INDEX] = true;\n                        } else {\n                            saw[f] = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (saw[YEAR_INDEX]) {\n            int year = calendar.get(Calendar.YEAR);\n            if (buf.length() - last > 2 && buf.charAt(last + 1) == 'y' && buf.charAt(last + 2) == 'y') {\n                buf.replace(last + 1, last + 3, zeroPad(year % 100, 2));\n            } else {\n                buf.replace(last, last + 1, Integer.toString(year));\n            }\n        }\n        if (saw[MONTH_INDEX]) {\n            int month = calendar.get(Calendar.MONTH) + 1;\n            int index = MONTH_OFFSET + (buf.charAt(last + 1) == 'M' ? 1 : 0);\n            buf.replace(last, last + 1, zeroPad(month, index));\n        }\n        if (saw[DAY_INDEX]) {\n            int day = calendar.get(Calendar.DAY_OF_MONTH);\n            buf.replace(last, last + 1, zeroPad(day, 2));\n        }\n        if (saw[HOUR_INDEX]) {\n            int hour = calendar.get(Calendar.HOUR_OF_DAY);\n            buf.replace(last, last + 1, zeroPad(hour, 2));\n        }\n        if (saw[MINUTE_INDEX]) {\n            int minute = calendar.get(Calendar.MINUTE);\n            buf.replace(last, last + 1, zeroPad(minute, 2));\n        }\n        if (saw[SECOND_INDEX]) {\n            int second = calendar.get(Calendar.SECOND);\n            buf.replace(last, last + 1, zeroPad(second, 2));\n        }\n        if (saw[MILLISECOND_INDEX]) {\n            int fraction = calendar.get(Calendar.MILLISECOND);\n            buf.replace(last, last + 1, zeroPad(fraction, 3));\n        }\n    }\n\n    private String zeroPad(int value, int length) {\n        String sval = Integer.toString(value);\n        StringBuilder sb = new StringBuilder();\n        for (int i = sval.length(); i < length; i++) {\n            sb.append('0');\n        }\n        sb.append(sval);\n        return sb.toString();\n    }\n\n    private void formatTimeZone(Calendar calendar, StringBuffer buf) {\n        TimeZone tz = calendar.getTimeZone();\n        int offsetInMillis = tz.getRawOffset();\n        if (tz.inDaylightTime(new Date(calendar.getTimeInMillis()))) {\n            offsetInMillis += tz.getDSTSavings();\n        }\n        int offsetInMinutes = offsetInMillis / (60 * 1000);\n        char sign = '+';\n        if (offsetInMinutes < 0) {\n            sign = '-';\n            offsetInMinutes = -offsetInMinutes;\n        }\n        buf.append(sign);\n        int hours = offsetInMinutes / 60;\n        int minutes = offsetInMinutes % 60;\n        buf.append(zeroPad(hours, 2));\n        buf.append(':');\n        buf.append(zeroPad(minutes, 2));\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..66df4f86 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,7 +872,120 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        buf.setLength(0);\n+        applyPattern(buf, calendar);\n+        if (mTimeZoneForced) {\n+            formatTimeZone(calendar, buf);\n+        } else {\n+            TimeZone tz = calendar.getTimeZone();\n+            if (tz.getRawOffset() == 0) {\n+                buf.append('Z');\n+            } else {\n+                formatTimeZone(calendar, buf);\n+            }\n+        }\n+        return buf;\n+    }\n+\n+    private void applyPattern(StringBuffer buf, Calendar calendar) {\n+        int i;\n+        boolean[] saw = new boolean[FORMATS.length()];\n+        for (i = 0; i < saw.length; i++) {\n+            saw[i] = false;\n+        }\n+        int last = -1;\n+        for (i = 0; i < buf.length(); i++) {\n+            char c = buf.charAt(i);\n+            if (c == '\\'') {\n+                if (last == -1) {\n+                    last = i;\n+                } else {\n+                    last = -1;\n+                }\n+            }\n+            if (last == -1) {\n+                int f = FORMATS.indexOf(c);\n+                if (f >= 0) {\n+                    if (f == QUOTE) {\n+                        if (i + 1 < buf.length()\n+                                && buf.charAt(i + 1) == '\\'') {\n+                            i++;\n+                        } else {\n+                            last = i;\n+                        }\n+                    } else {\n+                        if (f == ZONE_NAME) {\n+                            saw[ZONE_INDEX] = true;\n+                        } else {\n+                            saw[f] = true;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        if (saw[YEAR_INDEX]) {\n+            int year = calendar.get(Calendar.YEAR);\n+            if (buf.length() - last > 2 && buf.charAt(last + 1) == 'y' && buf.charAt(last + 2) == 'y') {\n+                buf.replace(last + 1, last + 3, zeroPad(year % 100, 2));\n+            } else {\n+                buf.replace(last, last + 1, Integer.toString(year));\n+            }\n+        }\n+        if (saw[MONTH_INDEX]) {\n+            int month = calendar.get(Calendar.MONTH) + 1;\n+            int index = MONTH_OFFSET + (buf.charAt(last + 1) == 'M' ? 1 : 0);\n+            buf.replace(last, last + 1, zeroPad(month, index));\n+        }\n+        if (saw[DAY_INDEX]) {\n+            int day = calendar.get(Calendar.DAY_OF_MONTH);\n+            buf.replace(last, last + 1, zeroPad(day, 2));\n+        }\n+        if (saw[HOUR_INDEX]) {\n+            int hour = calendar.get(Calendar.HOUR_OF_DAY);\n+            buf.replace(last, last + 1, zeroPad(hour, 2));\n+        }\n+        if (saw[MINUTE_INDEX]) {\n+            int minute = calendar.get(Calendar.MINUTE);\n+            buf.replace(last, last + 1, zeroPad(minute, 2));\n+        }\n+        if (saw[SECOND_INDEX]) {\n+            int second = calendar.get(Calendar.SECOND);\n+            buf.replace(last, last + 1, zeroPad(second, 2));\n+        }\n+        if (saw[MILLISECOND_INDEX]) {\n+            int fraction = calendar.get(Calendar.MILLISECOND);\n+            buf.replace(last, last + 1, zeroPad(fraction, 3));\n+        }\n+    }\n+\n+    private String zeroPad(int value, int length) {\n+        String sval = Integer.toString(value);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = sval.length(); i < length; i++) {\n+            sb.append('0');\n+        }\n+        sb.append(sval);\n+        return sb.toString();\n+    }\n+\n+    private void formatTimeZone(Calendar calendar, StringBuffer buf) {\n+        TimeZone tz = calendar.getTimeZone();\n+        int offsetInMillis = tz.getRawOffset();\n+        if (tz.inDaylightTime(new Date(calendar.getTimeInMillis()))) {\n+            offsetInMillis += tz.getDSTSavings();\n+        }\n+        int offsetInMinutes = offsetInMillis / (60 * 1000);\n+        char sign = '+';\n+        if (offsetInMinutes < 0) {\n+            sign = '-';\n+            offsetInMinutes = -offsetInMinutes;\n+        }\n+        buf.append(sign);\n+        int hours = offsetInMinutes / 60;\n+        int minutes = offsetInMinutes % 60;\n+        buf.append(zeroPad(hours, 2));\n+        buf.append(':');\n+        buf.append(zeroPad(minutes, 2));\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}