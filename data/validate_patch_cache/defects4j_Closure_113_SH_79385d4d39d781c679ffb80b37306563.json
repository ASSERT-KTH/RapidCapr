{
    "patch": "      if (provided == null || !provided.isExplicitlyProvided()) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n        Node replacement = parent;\n        while (replacement.getParent() != null && replacement.getParent() != t.getScopeRoot()) {\n          replacement = replacement.getParent();\n        }\n        if (replacement.getParent() != null) {\n          parent.removeChild(n);\n        } else {\n          parent.replaceWith(IR.empty().srcref(n));\n        }\n        compiler.reportCodeChange();\n        return;\n      }\n\n      JSModule providedModule = provided.explicitModule;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..1f967f57 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,23 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided == null || !provided.isExplicitlyProvided()) {\n+        unrecognizedRequires.add(\n+            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        Node replacement = parent;\n+        while (replacement.getParent() != null && replacement.getParent() != t.getScopeRoot()) {\n+          replacement = replacement.getParent();\n+        }\n+        if (replacement.getParent() != null) {\n+          parent.removeChild(n);\n+        } else {\n+          parent.replaceWith(IR.empty().srcref(n));\n+        }\n+        compiler.reportCodeChange();\n+        return;\n+      }\n+\n+      JSModule providedModule = provided.explicitModule;\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}