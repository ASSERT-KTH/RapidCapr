{
    "patch": "public class IRFactory {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n      ImmutableSet.of(\"use strict\", \"strict mode\");\n\n  private final Function<Node, Boolean> hasExceptionHandler =\n      cfgNode -> {\n        List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n        for (DiGraphEdge<Node, Branch> edge : outEdges) {\n          if (edge.getValue() == Branch.ON_EX) {\n            return true;\n          }\n        }\n        return false;\n      };\n\n  AstRoot parse(String js) {\n    Parser p = new Parser(new CompilerEnvirons(), null);\n    return p.parse(js, null, 0);\n  }\n\n  void patchTopLevelName(Node node, String name) {\n    if (node == null) {\n      return;\n    }\n    if (node.getType() == Token.NAME) {\n      node.setString(name);\n    } else {\n      List<AstNode> children = node.getChildren();\n      for (AstNode child : children) {\n        if (child instanceof Node) {\n          patchTopLevelName((Node) child, name);\n        }\n      }\n    }\n  }\n  \n  static TypeSafeDispatcher<Node> createDispatcher() {\n    TransformDispatcher dispatcher = new TransformDispatcher();\n    dispatcher.registerDispatcher(TypeTags.FUNCTION_CALL, dispatcher);\n    return dispatcher;\n  }\n\n  private static DiGraph<Node, Branch> getCfg() {\n    return ControlFlowGraph.build((JsRootNode) currentScriptOrFn().getAbstractNode());\n  }\n\n  Node newNode(int type, Node... children) {\n    Node node = new Node(type);\n    for (Node child : children) {\n      if (child != null) {\n        node.addChildToBack(child);\n      }\n    }\n    return node;\n  }\n\n  private Node transform(AstNode node) {\n    if (node == null) {\n      return null;\n    }\n    if (node instanceof Name) {\n      return transform((Name) node);\n    } else if (node instanceof NumberLiteral) {\n      return transform((NumberLiteral) node);\n    } else if (node instanceof StringLiteral) {\n      return transform((StringLiteral) node);\n    } else if (node instanceof InfixExpression) {\n      return transform((InfixExpression) node);\n    } else if (node instanceof ObjectLiteral) {\n      return transform((ObjectLiteral) node);\n    } else if (node instanceof ArrayLiteral) {\n      return transform((ArrayLiteral) node);\n    } else if (node instanceof Block) {\n      return transformBlock((Block) node);\n    } else if (node instanceof ExpressionStatement) {\n      return transform((ExpressionStatement) node);\n    } else if (node instanceof ReturnStatement) {\n      return transform((ReturnStatement) node);\n    } else if (node instanceof VariableDeclaration) {\n      return transform((VariableDeclaration) node);\n    } else if (node instanceof FunctionNode) {\n      return transform((FunctionNode) node);\n    } else if (node instanceof UnaryExpression) {\n      return transform((UnaryExpression) node);\n    } else if (node instanceof ConditionalExpression) {\n      return transform((ConditionalExpression) node);\n    } else if (node instanceof Block) {\n      return transformBlock((Block) node);\n    } else {\n      throw new Error(\"Unexpected node type \" + node.getClass());\n    }\n  }\n\n  private List<Node> transform(List<? extends AstNode> nodeList) {\n    ImmutableList.Builder<Node> builder = ImmutableList.builder();\n    for (AstNode node : nodeList) {\n      builder.add(transform(node));\n    }\n    return builder.build();\n  }\n\n  private Node transform(Name nameNode) {\n    if (nameNode != null) {\n      int type = transformTokenType(nameNode.getType());\n      if (type == Token.NAME) {\n        return new Node(Token.NAME, nameNode.getIdentifier());\n      } else {\n        return new Node(type);\n      }\n    } else {\n      return newNode(Token.NAME);\n    }\n  }\n\n  private Node transform(NumberLiteral numberNode) {\n    return newNode(Token.NUMBER, numberNode.getValue());\n  }\n\n  private Node transform(StringLiteral stringNode) {\n    return newNode(Token.STRING, stringNode.getValue());\n  }\n\n  private Node transform(InfixExpression infixNode) {\n    int type = transformTokenType(infixNode.getType());\n    if (type == Token.AND || type == Token.OR) {\n      return transformAndOr(infixNode, type);\n    } else {\n      return newNode(\n          type,\n          transform(infixNode.getLeft()),\n          transform(infixNode.getRight()));\n    }\n  }\n\n  private Node transformAndOr(InfixExpression infixNode, int type) {\n    Node right = transform(infixNode.getRight());\n    Node left = transform(infixNode.getLeft());\n    Node leftCompare = left.getLastChild();\n    if (leftCompare.getType() == type) {\n      left.removeChild(leftCompare);\n      if (type == Token.AND) {\n        return newNode(\n            Token.AND,\n            left,\n            transform(new InfixExpression(Token.OR, leftCompare, right, -1)));\n      } else {\n        return newNode(\n            Token.OR,\n            left,\n            transform(new InfixExpression(Token.AND, leftCompare, right, -1)));\n      }\n    } else {\n      return newNode(type, left, right);\n    }\n  }\n\n  private Node transform(ObjectLiteral objNode) {\n    Node objLit = newNode(Token.OBJECTLIT);\n    for (ObjectProperty prop : objNode.getElements()) {\n      if (prop.isGetter()) {\n        objLit.addChildToBack(transform(new Getter(prop)));\n      } else if (prop.isSetter()) {\n        objLit.addChildToBack(transform(new Setter(prop)));\n      } else {\n        objLit.addChildToBack(transform((PropertyGet) prop));\n      }\n    }\n    return objLit;\n  }\n\n  private Node transform(PropertyGet propNode) {\n    return newNode(\n        Token.GETPROP,\n        transform(propNode.getTarget()),\n        new Node(Token.STRING, propNode.getProperty().getIdentifier()));\n  }\n\n  private Node transform(ArrayLiteral arrayNode) {\n    Node arrayLit = new Node(Token.ARRAYLIT);\n    for (AstNode elem : arrayNode.getElements()) {\n      arrayLit.addChildToBack(transform(elem));\n    }\n    return arrayLit;\n  }\n\n  private Node transformBlock(Block blockNode) {\n    Node block = newNode(Token.BLOCK);\n    for (Node statement : transform(blockNode)) {\n      block.addChildToBack(statement);\n    }\n    return block;\n  }\n\n  private int transformTokenType(int type) {\n    switch (type) {\n      case Token.ADD: return Token.ADD;\n      case Token.BITAND: return Token.BITAND;\n      case Token.BITOR: return Token.BITOR;\n      case Token.BITXOR: return Token.BITXOR;\n      case Token.COMMA: return Token.COMMA;\n      case Token.DELPROP: return Token.DELPROP;\n      case Token.DIV: return Token.DIV;\n      case Token.EQ: return Token.EQ;\n      case Token.FALSE: return Token.FALSE;\n      case Token.GE: return Token.GE;\n      case Token.GET: retur",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..5a96ccc3 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,182 +384,212 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+public class IRFactory {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES =\n+      ImmutableSet.of(\"use strict\", \"strict mode\");\n+\n+  private final Function<Node, Boolean> hasExceptionHandler =\n+      cfgNode -> {\n+        List<DiGraphEdge<Node, Branch>> outEdges = getCfg().getOutEdges(cfgNode);\n+        for (DiGraphEdge<Node, Branch> edge : outEdges) {\n+          if (edge.getValue() == Branch.ON_EX) {\n+            return true;\n+          }\n+        }\n+        return false;\n+      };\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  AstRoot parse(String js) {\n+    Parser p = new Parser(new CompilerEnvirons(), null);\n+    return p.parse(js, null, 0);\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+  void patchTopLevelName(Node node, String name) {\n+    if (node == null) {\n+      return;\n     }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n+    if (node.getType() == Token.NAME) {\n+      node.setString(name);\n+    } else {\n+      List<AstNode> children = node.getChildren();\n+      for (AstNode child : children) {\n+        if (child instanceof Node) {\n+          patchTopLevelName((Node) child, name);\n+        }\n       }\n-      return node;\n     }\n+  }\n+  \n+  static TypeSafeDispatcher<Node> createDispatcher() {\n+    TransformDispatcher dispatcher = new TransformDispatcher();\n+    dispatcher.registerDispatcher(TypeTags.FUNCTION_CALL, dispatcher);\n+    return dispatcher;\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+  private static DiGraph<Node, Branch> getCfg() {\n+    return ControlFlowGraph.build((JsRootNode) currentScriptOrFn().getAbstractNode());\n+  }\n+\n+  Node newNode(int type, Node... children) {\n+    Node node = new Node(type);\n+    for (Node child : children) {\n+      if (child != null) {\n+        node.addChildToBack(child);\n       }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  private Node transform(AstNode node) {\n+    if (node == null) {\n+      return null;\n     }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+    if (node instanceof Name) {\n+      return transform((Name) node);\n+    } else if (node instanceof NumberLiteral) {\n+      return transform((NumberLiteral) node);\n+    } else if (node instanceof StringLiteral) {\n+      return transform((StringLiteral) node);\n+    } else if (node instanceof InfixExpression) {\n+      return transform((InfixExpression) node);\n+    } else if (node instanceof ObjectLiteral) {\n+      return transform((ObjectLiteral) node);\n+    } else if (node instanceof ArrayLiteral) {\n+      return transform((ArrayLiteral) node);\n+    } else if (node instanceof Block) {\n+      return transformBlock((Block) node);\n+    } else if (node instanceof ExpressionStatement) {\n+      return transform((ExpressionStatement) node);\n+    } else if (node instanceof ReturnStatement) {\n+      return transform((ReturnStatement) node);\n+    } else if (node instanceof VariableDeclaration) {\n+      return transform((VariableDeclaration) node);\n+    } else if (node instanceof FunctionNode) {\n+      return transform((FunctionNode) node);\n+    } else if (node instanceof UnaryExpression) {\n+      return transform((UnaryExpression) node);\n+    } else if (node instanceof ConditionalExpression) {\n+      return transform((ConditionalExpression) node);\n+    } else if (node instanceof Block) {\n+      return transformBlock((Block) node);\n+    } else {\n+      throw new Error(\"Unexpected node type \" + node.getClass());\n     }\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  private List<Node> transform(List<? extends AstNode> nodeList) {\n+    ImmutableList.Builder<Node> builder = ImmutableList.builder();\n+    for (AstNode node : nodeList) {\n+      builder.add(transform(node));\n     }\n+    return builder.build();\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+  private Node transform(Name nameNode) {\n+    if (nameNode != null) {\n+      int type = transformTokenType(nameNode.getType());\n+      if (type == Token.NAME) {\n+        return new Node(Token.NAME, nameNode.getIdentifier());\n+      } else {\n+        return new Node(type);\n+      }\n+    } else {\n+      return newNode(Token.NAME);\n     }\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  private Node transform(NumberLiteral numberNode) {\n+    return newNode(Token.NUMBER, numberNode.getValue());\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  private Node transform(StringLiteral stringNode) {\n+    return newNode(Token.STRING, stringNode.getValue());\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  private Node transform(InfixExpression infixNode) {\n+    int type = transformTokenType(infixNode.getType());\n+    if (type == Token.AND || type == Token.OR) {\n+      return transformAndOr(infixNode, type);\n+    } else {\n       return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n+          type,\n+          transform(infixNode.getLeft()),\n+          transform(infixNode.getRight()));\n     }\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n+  private Node transformAndOr(InfixExpression infixNode, int type) {\n+    Node right = transform(infixNode.getRight());\n+    Node left = transform(infixNode.getLeft());\n+    Node leftCompare = left.getLastChild();\n+    if (leftCompare.getType() == type) {\n+      left.removeChild(leftCompare);\n+      if (type == Token.AND) {\n+        return newNode(\n+            Token.AND,\n+            left,\n+            transform(new InfixExpression(Token.OR, leftCompare, right, -1)));\n+      } else {\n+        return newNode(\n+            Token.OR,\n+            left,\n+            transform(new InfixExpression(Token.AND, leftCompare, right, -1)));\n       }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+    } else {\n+      return newNode(type, left, right);\n     }\n+  }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n+  private Node transform(ObjectLiteral objNode) {\n+    Node objLit = newNode(Token.OBJECTLIT);\n+    for (ObjectProperty prop : objNode.getElements()) {\n+      if (prop.isGetter()) {\n+        objLit.addChildToBack(transform(new Getter(prop)));\n+      } else if (prop.isSetter()) {\n+        objLit.addChildToBack(transform(new Setter(prop)));\n       } else {\n-        lp.setLineno(functionNode.getLineno());\n+        objLit.addChildToBack(transform((PropertyGet) prop));\n       }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+    }\n+    return objLit;\n+  }\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+  private Node transform(PropertyGet propNode) {\n+    return newNode(\n+        Token.GETPROP,\n+        transform(propNode.getTarget()),\n+        new Node(Token.STRING, propNode.getProperty().getIdentifier()));\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  private Node transform(ArrayLiteral arrayNode) {\n+    Node arrayLit = new Node(Token.ARRAYLIT);\n+    for (AstNode elem : arrayNode.getElements()) {\n+      arrayLit.addChildToBack(transform(elem));\n     }\n+    return arrayLit;\n+  }\n+\n+  private Node transformBlock(Block blockNode) {\n+    Node block = newNode(Token.BLOCK);\n+    for (Node statement : transform(blockNode)) {\n+      block.addChildToBack(statement);\n+    }\n+    return block;\n+  }\n+\n+  private int transformTokenType(int type) {\n+    switch (type) {\n+      case Token.ADD: return Token.ADD;\n+      case Token.BITAND: return Token.BITAND;\n+      case Token.BITOR: return Token.BITOR;\n+      case Token.BITXOR: return Token.BITXOR;\n+      case Token.COMMA: return Token.COMMA;\n+      case Token.DELPROP: return Token.DELPROP;\n+      case Token.DIV: return Token.DIV;\n+      case Token.EQ: return Token.EQ;\n+      case Token.FALSE: return Token.FALSE;\n+      case Token.GE: return Token.GE;\n+      case Token.GET: retur\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}