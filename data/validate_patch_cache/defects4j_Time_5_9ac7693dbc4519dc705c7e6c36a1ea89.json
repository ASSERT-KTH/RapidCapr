{
    "patch": "public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            if (!type.isSupported(DurationFieldType.years())) {\n                // strip years and convert to weeks\n                result = result.withYears(0);\n                int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n                int totalWeeks = ISOChronology.getInstanceUTC().weeks().getDurationField().getDifferenceAsInt(\n                        ISOChronology.getInstanceUTC().months().getDurationField().getFieldType().getField(1), totalMonths);\n                result = result.withWeeks(totalWeeks);\n            } else if (!type.isSupported(DurationFieldType.months())) {\n                // strip months and convert to days and weeks\n                result = result.withMonths(0);\n                int totalDays = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 365), FieldUtils.safeMultiply(months, 30));\n                int totalWeeks = ISOChronology.getInstanceUTC().weeks().getDurationField().getDifferenceAsInt(\n                        ISOChronology.getInstanceUTC().days().getDurationField().getFieldType().getField(1), totalDays);\n                result = result.withDays(totalDays % 7).withWeeks(totalWeeks);\n            } else {\n                years = FieldUtils.safeAdd(years, months / 12);\n                months = months % 12;\n                result = result.withYears(years).withMonths(months);\n            }\n        }\n        return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..4e0b1f02 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,7 +1613,7 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n+public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n@@ -1625,16 +1625,27 @@ public final class Period\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (!type.isSupported(DurationFieldType.years())) {\n+                // strip years and convert to weeks\n+                result = result.withYears(0);\n+                int totalMonths = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 12), months);\n+                int totalWeeks = ISOChronology.getInstanceUTC().weeks().getDurationField().getDifferenceAsInt(\n+                        ISOChronology.getInstanceUTC().months().getDurationField().getFieldType().getField(1), totalMonths);\n+                result = result.withWeeks(totalWeeks);\n+            } else if (!type.isSupported(DurationFieldType.months())) {\n+                // strip months and convert to days and weeks\n+                result = result.withMonths(0);\n+                int totalDays = FieldUtils.safeAdd(FieldUtils.safeMultiply(years, 365), FieldUtils.safeMultiply(months, 30));\n+                int totalWeeks = ISOChronology.getInstanceUTC().weeks().getDurationField().getDifferenceAsInt(\n+                        ISOChronology.getInstanceUTC().days().getDurationField().getFieldType().getField(1), totalDays);\n+                result = result.withDays(totalDays % 7).withWeeks(totalWeeks);\n+            } else {\n+                years = FieldUtils.safeAdd(years, months / 12);\n+                months = months % 12;\n+                result = result.withYears(years).withMonths(months);\n             }\n         }\n         return result;\n-    }\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}