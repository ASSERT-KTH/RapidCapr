{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // evaluate 2 hours before and after to work out if anything is happening\n        long instantBefore = instant - 2 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantAfter = instant + 2 * DateTimeConstants.MILLIS_PER_HOUR;\n        long localBefore = convertUTCToLocal(instantBefore);\n        long localAfter = convertUTCToLocal(instantAfter);\n\n        if (localBefore == localAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        // if in overlap, prefer later if earlierOrLater==true\n        long local = convertUTCToLocal(instant);\n        if (earlierOrLater && localAfter != local) {\n            return convertLocalToUTC(localAfter, false, instantAfter);\n        }\n        // if in overlap, prefer earlier if earlierOrLater==false\n        if (!earlierOrLater && localBefore != local) {\n            return convertLocalToUTC(localBefore, false, instantBefore);\n        }\n        // not in overlap, either further into DST or out of DST\n        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..30b8c5b2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1161,22 +1161,27 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the adjusted instant millis\n      */\n     public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n+        // evaluate 2 hours before and after to work out if anything is happening\n+        long instantBefore = instant - 2 * DateTimeConstants.MILLIS_PER_HOUR;\n+        long instantAfter = instant + 2 * DateTimeConstants.MILLIS_PER_HOUR;\n+        long localBefore = convertUTCToLocal(instantBefore);\n+        long localAfter = convertUTCToLocal(instantAfter);\n+\n+        if (localBefore == localAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n-        \n-        // work out range of instants that have duplicate local times\n+\n+        // if in overlap, prefer later if earlierOrLater==true\n         long local = convertUTCToLocal(instant);\n+        if (earlierOrLater && localAfter != local) {\n+            return convertLocalToUTC(localAfter, false, instantAfter);\n+        }\n+        // if in overlap, prefer earlier if earlierOrLater==false\n+        if (!earlierOrLater && localBefore != local) {\n+            return convertLocalToUTC(localBefore, false, instantBefore);\n+        }\n+        // not in overlap, either further into DST or out of DST\n         return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T02:15:00.000+02:00>",
    "test_result": "FAIL"
}