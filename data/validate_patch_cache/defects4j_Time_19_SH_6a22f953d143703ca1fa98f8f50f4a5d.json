{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            // no negative offsets involved, safe to return the adjusted offset\n            return offsetAdjusted;\n        } else {\n            // we are near a DST boundary and have negative offsets\n            // we need to check if the previous transition is causing the issue\n            long prevTransition = previousTransition(instantAdjusted);\n            int prevOffset = getOffset(prevTransition);\n            if (prevOffset >= 0) {\n                // the previous transition is not responsible, safe to return the adjusted offset\n                return offsetAdjusted;\n            } else {\n                // previous transition is responsible, return its offset\n                return prevOffset;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..62ec5a9e 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,22 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            // no negative offsets involved, safe to return the adjusted offset\n+            return offsetAdjusted;\n+        } else {\n+            // we are near a DST boundary and have negative offsets\n+            // we need to check if the previous transition is causing the issue\n+            long prevTransition = previousTransition(instantAdjusted);\n+            int prevOffset = getOffset(prevTransition);\n+            if (prevOffset >= 0) {\n+                // the previous transition is not responsible, safe to return the adjusted offset\n+                return offsetAdjusted;\n+            } else {\n+                // previous transition is responsible, return its offset\n+                return prevOffset;\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}