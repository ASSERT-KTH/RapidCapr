{
    "patch": "public String unescape(String input) {\n    if (input == null) {\n        return null;\n    }\n    int len = input.length();\n    StringBuilder result = new StringBuilder(len);\n    int i = 0;\n    while (i < len) {\n        char c = input.charAt(i);\n        if (c == '\\\\') {\n            if (i + 1 < len) {\n                char nextChar = input.charAt(i + 1);\n                switch (nextChar) {\n                    case '\\\\':\n                        result.append('\\\\');\n                        break;\n                    case 'n':\n                        result.append('\\n');\n                        break;\n                    case 'r':\n                        result.append('\\r');\n                        break;\n                    case 't':\n                        result.append('\\t');\n                        break;\n                    case 'b':\n                        result.append('\\b');\n                        break;\n                    case 'f':\n                        result.append('\\f');\n                        break;\n                    default:\n                        result.append(nextChar);\n                        break;\n                }\n                i++;\n            } else {\n                result.append(c);\n            }\n        } else {\n            result.append(c);\n        }\n        i++;\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..63f25b42 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,52 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+public String unescape(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    int len = input.length();\n+    StringBuilder result = new StringBuilder(len);\n+    int i = 0;\n+    while (i < len) {\n+        char c = input.charAt(i);\n+        if (c == '\\\\') {\n+            if (i + 1 < len) {\n+                char nextChar = input.charAt(i + 1);\n+                switch (nextChar) {\n+                    case '\\\\':\n+                        result.append('\\\\');\n+                        break;\n+                    case 'n':\n+                        result.append('\\n');\n+                        break;\n+                    case 'r':\n+                        result.append('\\r');\n+                        break;\n+                    case 't':\n+                        result.append('\\t');\n+                        break;\n+                    case 'b':\n+                        result.append('\\b');\n+                        break;\n+                    case 'f':\n+                        result.append('\\f');\n+                        break;\n+                    default:\n+                        result.append(nextChar);\n+                        break;\n                 }\n-                pos--;\n+                i++;\n+            } else {\n+                result.append(c);\n             }\n-            pos++;\n+        } else {\n+            result.append(c);\n         }\n+        i++;\n     }\n+    return result.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}