{
    "patch": "        if (block.isFunction) {\n          break;\n        } else if (block.isLoop) {\n          boolean isAssigned = false;\n          if (block.getCanonicalizedLoopHeader() != null) {\n            for (BasicBlock header : block.getCanonicalizedLoopHeader().getHeaders()) {\n              if (header == block) {\n                continue;\n              }\n              for (Reference ref : references) {\n                if (ref.getBasicBlock() == header && ref.isAssignmentToName()) {\n                  isAssigned = true;\n                  break;\n                }\n              }\n            }\n          } else {\n            for (BasicBlock predecesssor : block.getExceptionalPredecessors()) {\n              for (Reference ref : references) {\n                if (ref.getBasicBlock() == predecesssor && ref.isAssignmentToName()) {\n                  isAssigned = true;\n                  break;\n                }\n              }\n            }\n          }\n          return !isAssigned;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..6f475cd9 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,34 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        if (block.isFunction) {\n+          break;\n+        } else if (block.isLoop) {\n+          boolean isAssigned = false;\n+          if (block.getCanonicalizedLoopHeader() != null) {\n+            for (BasicBlock header : block.getCanonicalizedLoopHeader().getHeaders()) {\n+              if (header == block) {\n+                continue;\n+              }\n+              for (Reference ref : references) {\n+                if (ref.getBasicBlock() == header && ref.isAssignmentToName()) {\n+                  isAssigned = true;\n+                  break;\n+                }\n+              }\n+            }\n+          } else {\n+            for (BasicBlock predecesssor : block.getExceptionalPredecessors()) {\n+              for (Reference ref : references) {\n+                if (ref.getBasicBlock() == predecesssor && ref.isAssignmentToName()) {\n+                  isAssigned = true;\n+                  break;\n+                }\n+              }\n+            }\n+          }\n+          return !isAssigned;\n+        }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}