{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n    Set<String> propertyNames = new HashSet<>();\n\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        String name = child.getString();\n        T type = getImplicitTypeOfExpression(child);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n            if (propertiesToErrorFor.containsKey(name)) {\n                JSError jsError = JSError.make(\n                        t.getSourceName(),\n                        child,\n                        propertiesToErrorFor.get(name),\n                        Warnings.INVALIDATION,\n                        name,\n                        type == null ? \"null\" : type.toString(),\n                        n.toString(),\n                        \"\");\n                compiler.report(jsError);\n            }\n        }\n        propertyNames.add(name);\n    }\n\n    checkPropertiesForDuplicates(t, n, propertyNames);\n}\n\nprivate void checkPropertiesForDuplicates(NodeTraversal t, Node n, Set<String> propertyNames) {\n    if (propertyNames.size() == 0) {\n        return;\n    }\n\n    if (propertyNames.size() == 1 && n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n        return;\n    }\n\n    List<String> props = new ArrayList<>(propertyNames);\n    List<String> dups = new ArrayList<>();\n\n    // Not very efficient but should not matter since every object has few properties\n    for (int i = 0; i < props.size(); i++) {\n        String prop = props.get(i);\n        for (int j = i + 1; j < props.size(); j++) {\n            if (prop.equals(props.get(j))) {\n                dups.add(prop);\n            }\n        }\n    }\n\n    if (dups.size() > 0) {\n        JSError jsError = JSError.make(\n                t.getSourceName(),\n                n,\n                Warnings.DUPLICATE_OBJECT_KEY,\n                dups.get(0));\n        compiler.report(jsError);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..3a1fb32a 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,31 +487,66 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+    Set<String> propertyNames = new HashSet<>();\n \n-        // We should never see a mix of numbers and strings.\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n+        T type = getImplicitTypeOfExpression(child);\n \n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+            if (propertiesToErrorFor.containsKey(name)) {\n+                JSError jsError = JSError.make(\n+                        t.getSourceName(),\n+                        child,\n+                        propertiesToErrorFor.get(name),\n+                        Warnings.INVALIDATION,\n+                        name,\n+                        type == null ? \"null\" : type.toString(),\n+                        n.toString(),\n+                        \"\");\n+                compiler.report(jsError);\n+            }\n         }\n-      }\n+        propertyNames.add(name);\n+    }\n+\n+    checkPropertiesForDuplicates(t, n, propertyNames);\n+}\n+\n+private void checkPropertiesForDuplicates(NodeTraversal t, Node n, Set<String> propertyNames) {\n+    if (propertyNames.size() == 0) {\n+        return;\n     }\n \n+    if (propertyNames.size() == 1 && n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+        return;\n+    }\n+\n+    List<String> props = new ArrayList<>(propertyNames);\n+    List<String> dups = new ArrayList<>();\n+\n+    // Not very efficient but should not matter since every object has few properties\n+    for (int i = 0; i < props.size(); i++) {\n+        String prop = props.get(i);\n+        for (int j = i + 1; j < props.size(); j++) {\n+            if (prop.equals(props.get(j))) {\n+                dups.add(prop);\n+            }\n+        }\n+    }\n+\n+    if (dups.size() > 0) {\n+        JSError jsError = JSError.make(\n+                t.getSourceName(),\n+                n,\n+                Warnings.DUPLICATE_OBJECT_KEY,\n+                dups.get(0));\n+        compiler.report(jsError);\n+    }\n+}\n+\n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {\n         return;",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}