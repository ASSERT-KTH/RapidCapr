{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    Chronology chrono = instant.getChronology();\n    long instantMillis = instant.getMillis();\n    DateTimeZone zone = chrono.getZone();\n    int offset = zone.getOffset(instantMillis);\n    long instantLocal = instantMillis + offset;\n\n    int newPos = parser.parseInto(\n            new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, iDefaultYear, zone),\n            text, position);\n\n    long resolved = instantLocal;\n    if (iOffsetParsed) {\n        Integer parsedOffset = DateTimeParserBucket.extractOffset(resultBucket);\n        if (parsedOffset != null) {\n            offset = parsedOffset.intValue();\n            zone = DateTimeZone.forOffsetMillis(offset);\n            resolved -= (offset - zone.getOffset(resolved));\n        }\n    }\n    if (resolved != instant.getMillis()) {\n        instant.setMillis(resolved);\n    }\n    if (zone != null && instant.getZone() != zone) {\n        instant.setZone(zone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..b31158f2 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,34 +694,40 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    Chronology chrono = instant.getChronology();\n+    long instantMillis = instant.getMillis();\n+    DateTimeZone zone = chrono.getZone();\n+    int offset = zone.getOffset(instantMillis);\n+    long instantLocal = instantMillis + offset;\n+\n+    int newPos = parser.parseInto(\n+            new DateTimeParserBucket(instantLocal, chrono, iLocale, iPivotYear, iDefaultYear, zone),\n+            text, position);\n+\n+    long resolved = instantLocal;\n+    if (iOffsetParsed) {\n+        Integer parsedOffset = DateTimeParserBucket.extractOffset(resultBucket);\n+        if (parsedOffset != null) {\n+            offset = parsedOffset.intValue();\n+            zone = DateTimeZone.forOffsetMillis(offset);\n+            resolved -= (offset - zone.getOffset(resolved));\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n     }\n+    if (resolved != instant.getMillis()) {\n+        instant.setMillis(resolved);\n+    }\n+    if (zone != null && instant.getZone() != zone) {\n+        instant.setZone(zone);\n+    }\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(long,Chronology,Locale,Integer,int,DateTimeZone)",
    "test_result": "ERROR"
}