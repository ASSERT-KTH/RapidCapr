{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    final int plainOffset = getOffset(instant);\n    // Compute difference between UTC and wall time at instantBefore.\n    final long instantBefore = instant - 1;\n    final int offsetBefore = getOffset(instantBefore);\n    if (offsetBefore == plainOffset) {\n      // Return early if we just have a simple offset without transitions\n      return instant;\n    }\n\n    // Compute wall times before and after instantBefore.\n    final int wallOffsetBefore = earlierOrLater ? offsetBefore : plainOffset;\n    final int wallOffsetAfter = earlierOrLater ? plainOffset : offsetBefore;\n    final long millisBefore = convertUTCToLocal(instantBefore, wallOffsetBefore);\n    final long millisAfter = convertUTCToLocal(instantBefore, wallOffsetAfter);\n    if (millisBefore == millisAfter) {\n      return instantBefore;\n    }\n\n    // Determine which side of the transition we should be on.\n    final boolean instantIsBeforeTransition = millisBefore > millisAfter;\n\n    // Compute the instant of the transition.\n    long candidateInstant = instantBefore;\n    while (true) {\n      if (earlierOrLater ^ instantIsBeforeTransition) {\n        candidateInstant = previousTransition(candidateInstant);\n      } else {\n        candidateInstant = nextTransition(candidateInstant);\n      }\n      if (getOffset(candidateInstant) == wallOffsetAfter) {\n        break;\n      }\n    }\n\n    // Compute the instant resulting from the adjustment.\n    long adjustedInstant;\n    if (earlierOrLater) {\n      if (instantIsBeforeTransition) {\n        adjustedInstant = candidateInstant - 1;\n      } else {\n        adjustedInstant = candidateInstant;\n      }\n    } else {\n      if (instantIsBeforeTransition) {\n        adjustedInstant = candidateInstant;\n      } else {\n        adjustedInstant = candidateInstant - 1;\n      }\n    }\n    return adjustedInstant;\n  }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..9630f430 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,58 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n-        }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    final int plainOffset = getOffset(instant);\n+    // Compute difference between UTC and wall time at instantBefore.\n+    final long instantBefore = instant - 1;\n+    final int offsetBefore = getOffset(instantBefore);\n+    if (offsetBefore == plainOffset) {\n+      // Return early if we just have a simple offset without transitions\n+      return instant;\n+    }\n+\n+    // Compute wall times before and after instantBefore.\n+    final int wallOffsetBefore = earlierOrLater ? offsetBefore : plainOffset;\n+    final int wallOffsetAfter = earlierOrLater ? plainOffset : offsetBefore;\n+    final long millisBefore = convertUTCToLocal(instantBefore, wallOffsetBefore);\n+    final long millisAfter = convertUTCToLocal(instantBefore, wallOffsetAfter);\n+    if (millisBefore == millisAfter) {\n+      return instantBefore;\n+    }\n+\n+    // Determine which side of the transition we should be on.\n+    final boolean instantIsBeforeTransition = millisBefore > millisAfter;\n+\n+    // Compute the instant of the transition.\n+    long candidateInstant = instantBefore;\n+    while (true) {\n+      if (earlierOrLater ^ instantIsBeforeTransition) {\n+        candidateInstant = previousTransition(candidateInstant);\n+      } else {\n+        candidateInstant = nextTransition(candidateInstant);\n+      }\n+      if (getOffset(candidateInstant) == wallOffsetAfter) {\n+        break;\n+      }\n+    }\n+\n+    // Compute the instant resulting from the adjustment.\n+    long adjustedInstant;\n+    if (earlierOrLater) {\n+      if (instantIsBeforeTransition) {\n+        adjustedInstant = candidateInstant - 1;\n+      } else {\n+        adjustedInstant = candidateInstant;\n+      }\n+    } else {\n+      if (instantIsBeforeTransition) {\n+        adjustedInstant = candidateInstant;\n+      } else {\n+        adjustedInstant = candidateInstant - 1;\n+      }\n     }\n+    return adjustedInstant;\n+  }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: method convertUTCToLocal in class DateTimeZone cannot be applied to given types;",
    "test_result": "ERROR"
}