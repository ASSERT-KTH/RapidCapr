{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        changed.add(functionName);\n        FunctionInformation functionInfo = getFunctionRegistry().getFunctionInformation(functionName);\n        if (functionInfo != null) {\n          Node args = child.getNext();\n          for (int i = 0; i < functionInfo.getParamsCount(); i++) {\n            if (args == null) break;\n            Node argNode = args.getFirstChild();\n            args = args.getNext();\n            while (argNode != null && argNode.getType() == Token.COMMA) {\n              argNode = argNode.getNext();\n            }\n            if (argNode == null) continue;\n            findChangedInformations(argNode, changed);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..88013657 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,24 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        changed.add(functionName);\n+        FunctionInformation functionInfo = getFunctionRegistry().getFunctionInformation(functionName);\n+        if (functionInfo != null) {\n+          Node args = child.getNext();\n+          for (int i = 0; i < functionInfo.getParamsCount(); i++) {\n+            if (args == null) break;\n+            Node argNode = args.getFirstChild();\n+            args = args.getNext();\n+            while (argNode != null && argNode.getType() == Token.COMMA) {\n+              argNode = argNode.getNext();\n+            }\n+            if (argNode == null) continue;\n+            findChangedInformations(argNode, changed);\n+          }\n+        }\n+      }\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}