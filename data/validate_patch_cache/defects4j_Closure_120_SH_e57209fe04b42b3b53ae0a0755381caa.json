{
    "patch": "      if (block.isFunction) {\n        break;\n      } else if (block.isLoop) {\n        boolean hasBlockAssignments = false;\n        for (Reference blockRef : references) {\n          if (blockRef == null) {\n            continue;\n          }\n          if (blockRef.isAssignment() && blockRef.getBasicBlock() == block) {\n            hasBlockAssignments = true;\n          }\n        }\n        if (block.containsLoopControlFlow() || !hasBlockAssignments) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..7b4a608f 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,22 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      if (block.isFunction) {\n+        break;\n+      } else if (block.isLoop) {\n+        boolean hasBlockAssignments = false;\n+        for (Reference blockRef : references) {\n+          if (blockRef == null) {\n+            continue;\n+          }\n+          if (blockRef.isAssignment() && blockRef.getBasicBlock() == block) {\n+            hasBlockAssignments = true;\n+          }\n+        }\n+        if (block.containsLoopControlFlow() || !hasBlockAssignments) {\n+          return false;\n+        }\n+      }\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}