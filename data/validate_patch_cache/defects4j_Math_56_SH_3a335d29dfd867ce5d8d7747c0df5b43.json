{
    "patch": "int remainingIndex = index;\nfor (int i = last - 1; i >= 0; i--) {\n    final int offset = uniCounterOffset[i];\n    int idx = remainingIndex % offset;\n    indices[i] = idx;\n    remainingIndex = (remainingIndex - idx) / offset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..5195b648d 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,13 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+for (int i = last - 1; i >= 0; i--) {\n+    final int offset = uniCounterOffset[i];\n+    int idx = remainingIndex % offset;\n+    indices[i] = idx;\n+    remainingIndex = (remainingIndex - idx) / offset;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [1][1] expected:<0> but was:<1>",
    "test_result": "FAIL"
}