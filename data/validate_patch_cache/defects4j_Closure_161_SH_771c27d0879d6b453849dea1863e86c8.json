{
    "patch": "// Ensure that the accessed array elements exist\nif (left.getType() == Token.ARRAYLIT) {\n  Node arrayElements = left.removeChildren();\n  for (int i = 0; i <= intIndex; i++) {\n    Node elem = arrayElements.getFirstChild();\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      left.addChildrenToFront(arrayElements);\n      return n;\n    }\n    arrayElements.removeChild(elem);\n  }\n  left.addChildrenToFront(arrayElements);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..2ce480b0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,20 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Ensure that the accessed array elements exist\n+if (left.getType() == Token.ARRAYLIT) {\n+  Node arrayElements = left.removeChildren();\n+  for (int i = 0; i <= intIndex; i++) {\n+    Node elem = arrayElements.getFirstChild();\n+    if (elem == null) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      left.addChildrenToFront(arrayElements);\n+      return n;\n+    }\n+    arrayElements.removeChild(elem);\n+  }\n+  left.addChildrenToFront(arrayElements);\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}