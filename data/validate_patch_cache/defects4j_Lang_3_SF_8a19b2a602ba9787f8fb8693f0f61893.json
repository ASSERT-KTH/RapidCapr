{
    "patch": "public static Number createNumber(final String str) throws NumberFormatException {\n    if (str == null) {\n        return null;\n    }\n    if (StringUtils.isBlank(str)) {\n        throw new NumberFormatException(\"A blank string is not a valid number\");\n    }\n    int pointIndex = str.indexOf('.');\n    int exponentIndex = str.indexOf('e') + str.indexOf('E') + 1;\n    if (exponentIndex == 0) {\n        exponentIndex = str.indexOf('E') + 1;\n    }\n    String exponent = null;\n    if (exponentIndex > 0) {\n        exponent = str.substring(exponentIndex);\n        str = str.substring(0, exponentIndex - 1);\n    }\n    if (pointIndex < 0) {\n        return parseBigIntegerWithExponent(str, exponent);\n    }\n    if (pointIndex == 0) {\n        str = \"0\" + str;\n        ++pointIndex;\n    }\n    String wholePart = str.substring(0, pointIndex);\n    String fractionPart = str.substring(pointIndex + 1);\n    int fractionDigits = fractionPart.length();\n    String digits = wholePart + fractionPart;\n    digits = stripLeadingZeros(digits);\n    fractionDigits -= (wholePart.length() - digits.length());\n    if (fractionDigits > 15) {\n        digits = digits.substring(0, digits.length() - fractionDigits + 15);\n        fractionDigits = 15;\n    }\n    if (fractionDigits < -14) {\n        digits = \"0\";\n        fractionDigits = 0;\n    }\n    int fractionDigitsNeeded = -fractionDigits;\n    if (fractionDigitsNeeded > 0) {\n        digits = digits + StringUtils.repeat('0', fractionDigitsNeeded);\n    }\n    BigInteger wholeValue = new BigInteger(digits);\n    if (exponent != null) {\n        int exp = Integer.parseInt(exponent);\n        if (exp > 0) {\n            wholeValue = wholeValue.multiply(BigInteger.TEN.pow(exp));\n            fractionDigits += exp;\n        }\n        if (exp < 0) {\n            BigInteger powerOfTen = BigInteger.TEN.pow(-exp);\n            BigInteger remainder = wholeValue.mod(powerOfTen);\n            wholeValue = wholeValue.divide(powerOfTen);\n            if (remainder.compareTo(BigInteger.ZERO) >= 0) {\n                fractionDigits -= exp;\n            } else {\n                int nonZeroOffset = findFirstNonZeroDigit(remainder);\n                if (nonZeroOffset < -exp) {\n                    fractionDigits -= exp + nonZeroOffset;\n                } else {\n                    fractionDigits -= nonZeroOffset;\n                }\n            }\n        }\n    }\n    if (fractionDigits == 0) {\n        return wholeValue;\n    }\n    BigInteger fractionValue = BigInteger.ZERO;\n    if (fractionDigits >= 0) {\n        fractionValue = new BigInteger(fractionPart).multiply(BigInteger.TEN.pow(fractionDigits));\n    } else {\n        int roundingOffset = -fractionDigits;\n        int scale = 0;\n        if (roundingOffset < fractionPart.length()) {\n            String roundingDigits = fractionPart.substring(roundingOffset);\n            BigDecimal bd = new BigDecimal(\"0.\" + roundingDigits);\n            bd = bd.setScale(0, RoundingMode.HALF_UP);\n            fractionValue = bd.unscaledValue();\n            scale = bd.scale();\n            fractionDigits += scale;\n            if (fractionDigits < 0) {\n                fractionDigits = 0;\n                fractionValue = BigInteger.ZERO;\n            }\n        }\n    }\n    return new BigDecimal(new BigInteger(fractionValue.toByteArray()), -fractionDigits + scale).add(new BigDecimal(wholeValue));\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex c5840215..28ef0a3f 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,167 +447,95 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(final String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }\n-        // Need to deal with all possible hex prefixes here\n-        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n-        int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n-            if (str.startsWith(pfx)) {\n-                pfxLen += pfx.length();\n-                break;\n-            }\n-        }\n-        if (pfxLen > 0) { // we have a hex number\n-            final int hexDigits = str.length() - pfxLen;\n-            if (hexDigits > 16) { // too many for Long\n-                return createBigInteger(str);\n-            }\n-            if (hexDigits > 8) { // too many for an int\n-                return createLong(str);\n-            }\n-            return createInteger(str);\n-        }\n-        final char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        final int decPos = str.indexOf('.');\n-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n-        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n-        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n-\n-        int numDecimals = 0; // Check required precision (LANG-693)\n-        if (decPos > -1) { // there is a decimal point\n-\n-            if (expPos > -1) { // there is an exponent\n-                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n+public static Number createNumber(final String str) throws NumberFormatException {\n+    if (str == null) {\n+        return null;\n+    }\n+    if (StringUtils.isBlank(str)) {\n+        throw new NumberFormatException(\"A blank string is not a valid number\");\n+    }\n+    int pointIndex = str.indexOf('.');\n+    int exponentIndex = str.indexOf('e') + str.indexOf('E') + 1;\n+    if (exponentIndex == 0) {\n+        exponentIndex = str.indexOf('E') + 1;\n+    }\n+    String exponent = null;\n+    if (exponentIndex > 0) {\n+        exponent = str.substring(exponentIndex);\n+        str = str.substring(0, exponentIndex - 1);\n+    }\n+    if (pointIndex < 0) {\n+        return parseBigIntegerWithExponent(str, exponent);\n+    }\n+    if (pointIndex == 0) {\n+        str = \"0\" + str;\n+        ++pointIndex;\n+    }\n+    String wholePart = str.substring(0, pointIndex);\n+    String fractionPart = str.substring(pointIndex + 1);\n+    int fractionDigits = fractionPart.length();\n+    String digits = wholePart + fractionPart;\n+    digits = stripLeadingZeros(digits);\n+    fractionDigits -= (wholePart.length() - digits.length());\n+    if (fractionDigits > 15) {\n+        digits = digits.substring(0, digits.length() - fractionDigits + 15);\n+        fractionDigits = 15;\n+    }\n+    if (fractionDigits < -14) {\n+        digits = \"0\";\n+        fractionDigits = 0;\n+    }\n+    int fractionDigitsNeeded = -fractionDigits;\n+    if (fractionDigitsNeeded > 0) {\n+        digits = digits + StringUtils.repeat('0', fractionDigitsNeeded);\n+    }\n+    BigInteger wholeValue = new BigInteger(digits);\n+    if (exponent != null) {\n+        int exp = Integer.parseInt(exponent);\n+        if (exp > 0) {\n+            wholeValue = wholeValue.multiply(BigInteger.TEN.pow(exp));\n+            fractionDigits += exp;\n+        }\n+        if (exp < 0) {\n+            BigInteger powerOfTen = BigInteger.TEN.pow(-exp);\n+            BigInteger remainder = wholeValue.mod(powerOfTen);\n+            wholeValue = wholeValue.divide(powerOfTen);\n+            if (remainder.compareTo(BigInteger.ZERO) >= 0) {\n+                fractionDigits -= exp;\n             } else {\n-                dec = str.substring(decPos + 1);\n-            }\n-            mant = str.substring(0, decPos);\n-            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n-        } else {\n-            if (expPos > -1) {\n-                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                int nonZeroOffset = findFirstNonZeroDigit(remainder);\n+                if (nonZeroOffset < -exp) {\n+                    fractionDigits -= exp + nonZeroOffset;\n+                } else {\n+                    fractionDigits -= nonZeroOffset;\n                 }\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n             }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            final String numeric = str.substring(0, str.length() - 1);\n-            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (final NumberFormatException nfe) { // NOPMD\n-                            // Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n-\n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        final Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (final NumberFormatException nfe) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (final NumberFormatException e) { // NOPMD\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-\n-            }\n-        }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n-        if (expPos > -1 && expPos < str.length() - 1) {\n-            exp = str.substring(expPos + 1, str.length());\n-        } else {\n-            exp = null;\n-        }\n-        if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n-            try {\n-                return createInteger(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n-            }\n-            try {\n-                return createLong(str);\n-            } catch (final NumberFormatException nfe) { // NOPMD\n-                // ignore the bad number\n+    }\n+    if (fractionDigits == 0) {\n+        return wholeValue;\n+    }\n+    BigInteger fractionValue = BigInteger.ZERO;\n+    if (fractionDigits >= 0) {\n+        fractionValue = new BigInteger(fractionPart).multiply(BigInteger.TEN.pow(fractionDigits));\n+    } else {\n+        int roundingOffset = -fractionDigits;\n+        int scale = 0;\n+        if (roundingOffset < fractionPart.length()) {\n+            String roundingDigits = fractionPart.substring(roundingOffset);\n+            BigDecimal bd = new BigDecimal(\"0.\" + roundingDigits);\n+            bd = bd.setScale(0, RoundingMode.HALF_UP);\n+            fractionValue = bd.unscaledValue();\n+            scale = bd.scale();\n+            fractionDigits += scale;\n+            if (fractionDigits < 0) {\n+                fractionDigits = 0;\n+                fractionValue = BigInteger.ZERO;\n             }\n-            return createBigInteger(str);\n-        }\n-\n-        //Must be a Float, Double, BigDecimal\n-        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-        try {\n-                final Float f = createFloat(str);\n-                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                    return f;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n         }\n-        try {\n-                final Double d = createDouble(str);\n-                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                    return d;\n-                }\n-        } catch (final NumberFormatException nfe) { // NOPMD\n-            // ignore the bad number\n-        }\n-\n-        return createBigDecimal(str);\n     }\n+    return new BigDecimal(new BigInteger(fractionValue.toByteArray()), -fractionDigits + scale).add(new BigDecimal(wholeValue));\n+}\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}