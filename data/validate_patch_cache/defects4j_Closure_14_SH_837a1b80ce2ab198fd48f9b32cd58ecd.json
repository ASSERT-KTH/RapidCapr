{
    "patch": "              // connect fallthrough to finallyNode\n              Node finallyNode = NodeUtil.getFinallyExitNode(parent, node);\n              if (finallyNode != null) {\n                if (cfa != null) {\n                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n                }\n              }\n              return computeFollowNode(fromNode, parent, cfa);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..fd81a6f2 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,14 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              // connect fallthrough to finallyNode\n+              Node finallyNode = NodeUtil.getFinallyExitNode(parent, node);\n+              if (finallyNode != null) {\n+                if (cfa != null) {\n+                  cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+                }\n+              }\n+              return computeFollowNode(fromNode, parent, cfa);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}