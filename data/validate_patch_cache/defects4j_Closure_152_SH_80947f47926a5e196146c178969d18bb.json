{
    "patch": "JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\nObjectType objectTypeOfThis = resolvedTypeOfThis == null ? null : resolvedTypeOfThis.toObjectType();\nif (objectTypeOfThis != null) {\n    typeOfThis = objectTypeOfThis;\n} else {\n    // This function should take an object as the \"this\" parameter.\n    // If the type of \"this\" could not be resolved to an ObjectType, set it to UNKNOWN_TYPE.\n    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..ca66e036 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+ObjectType objectTypeOfThis = resolvedTypeOfThis == null ? null : resolvedTypeOfThis.toObjectType();\n+if (objectTypeOfThis != null) {\n+    typeOfThis = objectTypeOfThis;\n+} else {\n+    // This function should take an object as the \"this\" parameter.\n+    // If the type of \"this\" could not be resolved to an ObjectType, set it to UNKNOWN_TYPE.\n+    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}