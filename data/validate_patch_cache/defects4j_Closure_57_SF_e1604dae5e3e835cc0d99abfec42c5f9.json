{
    "patch": "private static String extractClassNameIfGoog(Node node, Node parent, String functionName) {\n    if (parent == null || node == null || node.getType() != Token.NAME) {\n        return null;\n    }\n\n    Node grandparent = parent.getParent();\n    if (grandparent != null && grandparent.getType() == Token.VAR && grandparent.getFirstChild() == parent) {\n        grandparent = grandparent.getParent();\n    }\n\n    if (grandparent == nul",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ClosureCodingConvention.java b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\nindex c507c924..a1c12ee9 100644\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n@@ -185,23 +185,17 @@ public class ClosureCodingConvention extends DefaultCodingConvention {\n     return extractClassNameIfGoog(node, parent, \"goog.require\");\n   }\n \n-  private static String extractClassNameIfGoog(Node node, Node parent,\n-      String functionName){\n-    String className = null;\n-    if (NodeUtil.isExprCall(parent)) {\n-      Node callee = node.getFirstChild();\n-      if (callee != null && callee.getType() == Token.GETPROP) {\n-        String qualifiedName = callee.getQualifiedName();\n-        if (functionName.equals(qualifiedName)) {\n-          Node target = callee.getNext();\n-          if (target != null) {\n-            className = target.getString();\n-          }\n-        }\n-      }\n+private static String extractClassNameIfGoog(Node node, Node parent, String functionName) {\n+    if (parent == null || node == null || node.getType() != Token.NAME) {\n+        return null;\n     }\n-    return className;\n-  }\n+\n+    Node grandparent = parent.getParent();\n+    if (grandparent != null && grandparent.getType() == Token.VAR && grandparent.getFirstChild() == parent) {\n+        grandparent = grandparent.getParent();\n+    }\n+\n+    if (grandparent == nul\n \n   /**\n    * Use closure's implementation.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}