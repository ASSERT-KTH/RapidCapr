{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // Get the initial offset at the specified local datetime.\n        final int initialOffset = getOffset(instantLocal);\n        // Find the transition nearest to the specified datetime.\n        final long nextTransition = nextTransition(instantLocal);\n        long prevTransition = previousTransition(instantLocal);\n        if (prevTransition != instantLocal && instantLocal - prevTransition < nextTransition - instantLocal) {\n            nextTransition = prevTransition;\n        }\n        // Get the offsets before and after the transition.\n        final int prevOffset = getOffset(nextTransition - 1);\n        final int nextOffset = getOffset(nextTransition);\n        // If the transition does not exist, or if it is less than\n        // an hour away from the specified datetime, we assume that\n        // the initial offset is correct.\n        if (initialOffset == nextOffset || initialOffset == prevOffset) {\n            return initialOffset;\n        } else if (Math.abs(nextTransition - instantLocal) < DateTimeConstants.MILLIS_PER_HOUR) {\n            return nextOffset;\n        } else {\n            return prevOffset;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..0749fd52 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,27 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        // Get the initial offset at the specified local datetime.\n+        final int initialOffset = getOffset(instantLocal);\n+        // Find the transition nearest to the specified datetime.\n+        final long nextTransition = nextTransition(instantLocal);\n+        long prevTransition = previousTransition(instantLocal);\n+        if (prevTransition != instantLocal && instantLocal - prevTransition < nextTransition - instantLocal) {\n+            nextTransition = prevTransition;\n+        }\n+        // Get the offsets before and after the transition.\n+        final int prevOffset = getOffset(nextTransition - 1);\n+        final int nextOffset = getOffset(nextTransition);\n+        // If the transition does not exist, or if it is less than\n+        // an hour away from the specified datetime, we assume that\n+        // the initial offset is correct.\n+        if (initialOffset == nextOffset || initialOffset == prevOffset) {\n+            return initialOffset;\n+        } else if (Math.abs(nextTransition - instantLocal) < DateTimeConstants.MILLIS_PER_HOUR) {\n+            return nextOffset;\n+        } else {\n+            return prevOffset;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot assign a value to final variable nextTransition",
    "test_result": "ERROR"
}