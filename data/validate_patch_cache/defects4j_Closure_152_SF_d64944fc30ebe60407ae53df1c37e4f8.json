{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n    if (resolvedTypeOfThis.isObjectType()) {\n      typeOfThis = (ObjectType) resolvedTypeOfThis;\n    } else {\n      t.report(JSError.make(\"Type of `this` in function or method signature must be an object type\"));\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      JSType resolvedIface = safeResolve(iface, t, scope);\n      if (resolvedIface.isObjectType()) {\n        resolvedInterfaces.add((ObjectType) resolvedIface);\n        changed |= !Objects.equals(iface, resolvedIface);\n      } else {\n        t.report(JSError.make(\"Implemented interface must be an object type\"));\n      }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) safeResolve(subTypes.get(i), t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..111e698a 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,15 +868,24 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (resolvedTypeOfThis.isObjectType()) {\n+      typeOfThis = (ObjectType) resolvedTypeOfThis;\n+    } else {\n+      t.report(JSError.make(\"Type of `this` in function or method signature must be an object type\"));\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+      JSType resolvedIface = safeResolve(iface, t, scope);\n+      if (resolvedIface.isObjectType()) {\n+        resolvedInterfaces.add((ObjectType) resolvedIface);\n+        changed |= !Objects.equals(iface, resolvedIface);\n+      } else {\n+        t.report(JSError.make(\"Implemented interface must be an object type\"));\n+      }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();\n@@ -884,7 +893,7 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, (FunctionType) safeResolve(subTypes.get(i), t, scope));\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}