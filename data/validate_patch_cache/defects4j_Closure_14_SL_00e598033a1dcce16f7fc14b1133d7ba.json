{
    "patch": "for (int i = 0; i < cfa.finallyMap.get(parent).size(); i++) {\n    Node finallyNode = cfa.finallyMap.get(parent).get(i);\n    if (finallyNode.isFunction()) {\n        // Control flow doesn't pass into a function.\n        computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa);\n    } else {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..39e8b44a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,15 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+for (int i = 0; i < cfa.finallyMap.get(parent).size(); i++) {\n+    Node finallyNode = cfa.finallyMap.get(parent).get(i);\n+    if (finallyNode.isFunction()) {\n+        // Control flow doesn't pass into a function.\n+        computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa);\n+    } else {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}