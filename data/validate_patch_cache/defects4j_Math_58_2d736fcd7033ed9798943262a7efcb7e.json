{
    "patch": "return new LevenbergMarquardtOptimizer()\n    .withSimpleBounds(0, Double.POSITIVE_INFINITY)\n    .optimize(new OptimizationData[] { new Target(fitter),\n        new Weight(getObservationWeights()), new MaxEval(10000),\n        new InitialGuess(guess), new ModelFunction(model),\n        new SimpleValueChecker(-1,10e-11) })\n    .getPoint().toArray();",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..9a640efd4 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,13 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+return new LevenbergMarquardtOptimizer()\n+    .withSimpleBounds(0, Double.POSITIVE_INFINITY)\n+    .optimize(new OptimizationData[] { new Target(fitter),\n+        new Weight(getObservationWeights()), new MaxEval(10000),\n+        new InitialGuess(guess), new ModelFunction(model),\n+        new SimpleValueChecker(-1,10e-11) })\n+    .getPoint().toArray();\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}