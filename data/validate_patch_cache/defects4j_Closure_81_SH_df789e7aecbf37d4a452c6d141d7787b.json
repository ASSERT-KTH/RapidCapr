{
    "patch": "      boolean isUnnamed = false;\n      if (name == null) {\n        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamed = true;\n      }\n      Node result = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamed) {\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        newName.setCharno(position2charno(lpColumn));\n      }\n      result.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      Name fnName = functionNode.getFunctionName();\n      if (fnName != null) {\n        lp.setLineno(fnName.getLineno());\n      } else if (isUnnamed) {\n        lp.setLineno(functionNode.getLineno());\n      } else {\n        lp.setLineno(functionNode.getParent().getLineno());\n      }\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      result.addChildToBack(lp);\n      Node bodyNode = transform(functionNode.getBody());\n      if (isDefineFunction(functionNode)) {\n        // The function ends in a semicolon and can be used as an expression.\n        Node exprResult = new Node(Token.EXPR_RESULT);\n        exprResult.addChildToBack(result);\n        result = transform(exprResult);\n      } else {\n        parseDirectives(bodyNode);\n        result.addChildToBack(bodyNode);\n      }\n      return result;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..f6c48125 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,46 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      boolean isUnnamed = false;\n+      if (name == null) {\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamed = true;\n+      }\n+      Node result = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamed) {\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+      result.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      Name fnName = functionNode.getFunctionName();\n+      if (fnName != null) {\n+        lp.setLineno(fnName.getLineno());\n+      } else if (isUnnamed) {\n+        lp.setLineno(functionNode.getLineno());\n+      } else {\n+        lp.setLineno(functionNode.getParent().getLineno());\n+      }\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      result.addChildToBack(lp);\n+      Node bodyNode = transform(functionNode.getBody());\n+      if (isDefineFunction(functionNode)) {\n+        // The function ends in a semicolon and can be used as an expression.\n+        Node exprResult = new Node(Token.EXPR_RESULT);\n+        exprResult.addChildToBack(result);\n+        result = transform(exprResult);\n+      } else {\n+        parseDirectives(bodyNode);\n+        result.addChildToBack(bodyNode);\n+      }\n+      return result;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}