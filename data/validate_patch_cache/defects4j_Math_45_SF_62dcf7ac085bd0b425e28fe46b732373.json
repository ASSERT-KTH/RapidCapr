{
    "patch": "public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n    super(rowDimension, columnDimension);\n    if (rowDimension <= 0 || columnDimension <= 0) {\n        throw new IllegalArgumentException(\"Matrix dimensions must be positive.\");\n    } else {\n        try {\n            int size = Math.multiplyExact(rowDimension, columnDimension);\n            this.rows = rowDimension;\n            this.columns = columnDimension;\n            this.entries = new OpenIntToDoubleHashMap(0.0, size);\n        } catch (ArithmeticException e) {\n            throw new NumberIsTooLargeException(Long.valueOf((long) rowDimension * (long) columnDimension), Integer.valueOf(Integer.MAX_VALUE), false);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\nindex 174eda6ac..807fd36e1 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n@@ -45,12 +45,21 @@ public class OpenMapRealMatrix extends AbstractRealMatrix\n      * @param rowDimension Number of rows of the matrix.\n      * @param columnDimension Number of columns of the matrix.\n      */\n-    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n-        super(rowDimension, columnDimension);\n-        this.rows = rowDimension;\n-        this.columns = columnDimension;\n-        this.entries = new OpenIntToDoubleHashMap(0.0);\n+public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n+    super(rowDimension, columnDimension);\n+    if (rowDimension <= 0 || columnDimension <= 0) {\n+        throw new IllegalArgumentException(\"Matrix dimensions must be positive.\");\n+    } else {\n+        try {\n+            int size = Math.multiplyExact(rowDimension, columnDimension);\n+            this.rows = rowDimension;\n+            this.columns = columnDimension;\n+            this.entries = new OpenIntToDoubleHashMap(0.0, size);\n+        } catch (ArithmeticException e) {\n+            throw new NumberIsTooLargeException(Long.valueOf((long) rowDimension * (long) columnDimension), Integer.valueOf(Integer.MAX_VALUE), false);\n+        }\n     }\n+}\n \n     /**\n      * Build a matrix by copying another one.",
    "result_reason": "error: no suitable constructor found for OpenIntToDoubleHashMap(double,int)",
    "test_result": "ERROR"
}