{
    "patch": "    public static String unescapeJava(String input) {\n        if (input == null) {\n            return null;\n        }\n        int sz = input.length();\n        StringBuilder unicode = new StringBuilder(4);\n        StringBuilder out = new StringBuilder(sz);\n        boolean hadSlash = false;\n        boolean inUnicode = false;\n        \n        for (int i = 0; i < sz; i++) {\n            char ch = input.charAt(i);\n            if (inUnicode) {\n                unicode.append(ch);\n                if (unicode.length() == 4) {\n                    try {\n                        int value = Integer.parseInt(unicode.toString(), 16);\n                        out.append((char) value);\n                        unicode.setLength(0);\n                        inUnicode = false;\n                        hadSlash = false;\n                    } catch (NumberFormatException nfe) {\n                        throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\n                    }\n                }\n                continue;\n            }\n            if (hadSlash) {\n                hadSlash = false;\n                switch (ch) {\n                    case '\\\\':\n                        out.append('\\\\');\n                        break;\n                    case '\\'':\n                        out.append('\\'');\n                        break;\n                    case '\\\"':\n                        out.append('\"');\n                        break;\n                    case 'r':\n                        out.append('\\r');\n                        break;\n                    case 'f':\n                        out.append('\\f');\n                        break;\n                    case 't':\n                        out.append('\\t');\n                        break;\n                    case 'n':\n                        out.append('\\n');\n                        break;\n                    case 'b':\n                        out.append('\\b');\n                        break;\n                    case 'u':\n                        inUnicode = true;\n                        break;\n                    default:\n                        out.append(ch);\n                        break;\n                }\n                continue;\n            } else if (ch == '\\\\') {\n                hadSlash = true;\n                continue;\n            }\n            out.append(ch);\n        }\n        if (hadSlash) {\n            out.append('\\\\');\n        }\n        return out.toString();\n>>> [ INFILL ] <<<\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..04f02215 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,80 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    public static String unescapeJava(String input) {\n+        if (input == null) {\n+            return null;\n+        }\n+        int sz = input.length();\n+        StringBuilder unicode = new StringBuilder(4);\n+        StringBuilder out = new StringBuilder(sz);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        \n+        for (int i = 0; i < sz; i++) {\n+            char ch = input.charAt(i);\n+            if (inUnicode) {\n+                unicode.append(ch);\n+                if (unicode.length() == 4) {\n+                    try {\n+                        int value = Integer.parseInt(unicode.toString(), 16);\n+                        out.append((char) value);\n+                        unicode.setLength(0);\n+                        inUnicode = false;\n+                        hadSlash = false;\n+                    } catch (NumberFormatException nfe) {\n+                        throw new IllegalArgumentException(\"Unable to parse unicode value: \" + unicode, nfe);\n+                    }\n+                }\n+                continue;\n+            }\n+            if (hadSlash) {\n+                hadSlash = false;\n+                switch (ch) {\n+                    case '\\\\':\n+                        out.append('\\\\');\n+                        break;\n+                    case '\\'':\n+                        out.append('\\'');\n+                        break;\n+                    case '\\\"':\n+                        out.append('\"');\n+                        break;\n+                    case 'r':\n+                        out.append('\\r');\n+                        break;\n+                    case 'f':\n+                        out.append('\\f');\n+                        break;\n+                    case 't':\n+                        out.append('\\t');\n+                        break;\n+                    case 'n':\n+                        out.append('\\n');\n+                        break;\n+                    case 'b':\n+                        out.append('\\b');\n+                        break;\n+                    case 'u':\n+                        inUnicode = true;\n+                        break;\n+                    default:\n+                        out.append(ch);\n+                        break;\n+                }\n+                continue;\n+            } else if (ch == '\\\\') {\n+                hadSlash = true;\n+                continue;\n+            }\n+            out.append(ch);\n+        }\n+        if (hadSlash) {\n+            out.append('\\\\');\n+        }\n+        return out.toString();\n+>>> [ INFILL ] <<<\n+    }\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}