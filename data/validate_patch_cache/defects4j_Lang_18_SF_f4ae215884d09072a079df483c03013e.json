{
    "patch": "import java.text.DateFormat;\nimport java.text.DateFormatSymbols;\nimport java.text.ParseException;\nimport java.text.SimpleDateFormat;\nimport java.util.ArrayList;\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.Set;\nimport java.util.TimeZone;\n\npublic class DateUtils {\n\n    private static final Locale EN_US = Locale.US;\n\n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n\n    private static Set<Locale> availableLocaleSet;\n\n    public static Set<Locale> availableLocaleList() {\n        if (availableLocaleSet == null) {\n            Set<Locale> availableLocaleSet = new HashSet<>();\n\n            for (String locale : DateFormat.getAvailableLocales()) {\n                availableLocaleSet.add(LocaleUtils.toLocale(locale));\n            }\n            availableLocaleSet.remove(null);\n\n            DateUtils.availableLocaleSet = availableLocaleSet;\n        }\n        return availableLocaleSet;\n    }\n\n    public static SimpleDateFormat buildISO8601DateFormat() {\n        SimpleDateFormat iso8601DateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", EN_US);\n        iso8601DateFormat.setLenient(false);\n        return iso8601DateFormat;\n    }\n\n    public static SimpleDateFormat buildISO8601DateFormatWithSeconds() {\n        SimpleDateFormat iso8601DateFormatWithSeconds = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\", EN_US);\n        iso8601DateFormatWithSeconds.setLenient(false);\n        return iso8601DateFormatWithSeconds;\n    }\n\n    public static SimpleDateFormat buildRFC1123DateFormat() {\n        SimpleDateFormat rfc1123DateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", EN_US);\n        rfc1123DateFormat.setLenient(false);\n        return rfc1123DateFormat;\n    }\n\n    public static Date parseDate(String dateValue) throws ParseException {\n        if (dateValue == null) {\n            return null;\n        }\n\n        try {\n            return Date.from(javax.xml.bind.DatatypeConverter.parseDateTime(dateValue.replace(\"Z\", \"+00:00\"))\n                    .toInstant());\n        } catch (IllegalArgumentException e) {\n            throw new ParseException(\"Unable to parse date '\" + dateValue + \"'\", 0);\n        }\n    }\n\n    public static String format(Date date, SimpleDateFormat dateFormat) {\n        if (date == null || dateFormat == null) {\n            return null;\n        }\n\n        return dateFormat.format(date);\n    }\n\n    static final Locale locale = Locale.ENGLISH;\n\n    /**\n     * This method is from the following stack overflow answer:\n     * https://stackoverflow.com/a/28652733/9768291\n     * by https://stackoverflow.com/users/2333501/sajan-nambiar\n     */\n    public static void method() {\n        SimpleDateFormat format1 = new SimpleDateFormat(\"M/d/yy h:mm a\");\n        format1.setTimeZone(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n        DateFormat format2 = DateFormat.getDateInstance(DateFormat.SHORT, EN_US);\n        DateFormat format3 = DateFormat.getTimeInstance(DateFormat.SHORT, EN_US);\n\n        TimeZone systemTimeZone = TimeZone.getDefault();\n        boolean daylight = systemTimeZone.inDaylightTime(new Date());\n        TimeZoneRule rule = systemTimeZone.getDynamicTimeZoneRule(new Date().getTime());\n        String offset = GmtOffsetValue.valueOfTimeZone(systemTimeZone, daylight, 2, 2);\n        String stdStr = format3.format(new Date()) + \" \" + offset;\n        String dstStr = (rule == null) ? null :\n                format3.format(new Date(new Date().getTime() + rule.getRawOffset() + rule.getDSTSavings())) +\n                        \" \" + GmtOffsetValue.format(rule.getRawOffset() + rule.getDSTSavings());\n\n        System.out.println(\"format1: \" + format1.toPattern() + \"    \" + format1.format(new Date(0)));\n        System.out.println(\"format2: \" + ((SimpleDateFormat) format2).toPattern() + \"    \" + format2.format(new Date(0)));\n        System.out.println(\"format3: \" + ((SimpleDateFormat) format3).toPattern() + \"    \" + stdStr +\n                (dstStr == null ? \"\" : \"/\" + dstStr));\n    }\n\n    static class GmtOffsetValue {\n        static String valueOfTimeZone(TimeZone tz, boolean daylight, int minWidth, int maxWidth) {\n            int offset = tz.getRawOffset();\n            if (daylight && tz.useDaylightTime()) {\n                offset += tz.getDSTSavings();\n            }\n            offset = offset / 60000; // Convert milliseconds to minutes\n\n            char sign = '+';\n            if (offset < 0) {\n                sign = '-';\n                offset = -offset;\n            }\n\n            StringBuilder buffer = new StringBuilder();\n            buffer.append(sign);\n\n            // Primary format \"H:MM\"\n            int hours = offset / 60;\n            int minutes = offset % 60;\n            buffer.append(formatNumber(hours, 2));\n            buffer.append(':');\n            buffer.append(formatNumber(minutes, 2));\n\n            return buffer.toString();\n        }\n\n        static String format(int var0) {\n            StringBuffer var1 = new StringBuffer(2);\n            if (var0 < 10) {\n                var1.append('0');\n            }\n\n            var1.append(var0);\n            return var1.toString();\n        }\n\n        static String format(int var0, int var1) {\n            StringBuffer var2 = new StringBuffer(var1);\n            int var3 = var0;\n            if (var0 < 0) {\n                var2.append('-');\n                var3 = -var0;\n                --var1;\n            }\n\n            for (int var4 = var3; var4 > 0; --var1) {\n                int var5 = var4 % 10;\n                var4 /= 10;\n                var2.insert(var1, (char) ('0' + var5));\n            }\n\n            while (var1 > 0) {\n                --var1;\n                var2.insert(0, '0');\n            }\n\n            return var2.toString();\n        }\n\n        static String format(long var0) {\n            StringBuffer var2 = new StringBuffer(20);\n            if (var0 < 0L) {\n                var2.append('-');\n                var0 = -var0;\n            }\n\n            var2.append(format((int) (var0 / 3600000L), 2));\n            var2.append(':');\n            var2.append(format((int) (var0 / 60000L % 60L), 2));\n            var2.append(':');\n            var2.append(format((int) (var0 / 1000L % 60L), 2));\n            var2.append('.');\n            var2.append(format((int) (var0 % 1000L), 3));\n            return var2.toString();\n        }\n\n        static String format(int var0, int var1, boolean var2) {\n            StringBuffer var3 = new StringBuffer(var1);\n            int var4 = var0;\n            if (var0 < 0) {\n                var3.append('-');\n                var4 = -var0;\n                --var1;\n            }\n\n            for (int var5 = var4; var5 > 0; --var1) {\n                int var6 = var5 % 10;\n                var5 /= 10;\n                var3.insert(var1, (char) ('0' + var6));\n            }\n\n            while (var2 && var1 > 0) {\n                --var1;\n                var3.insert(0, '0');\n            }\n\n            return var3.toString();\n        }\n\n        static String format(long var0, boolean var2) {\n            StringBuffer var4 = new StringBuffer(18);\n            if (var0 < 0L) {\n                var4.append('-');\n                var0 = -var0;\n            }\n\n            var4.append(format((int) (var0 / 3600000L), 2, false));\n            var4.append(format((int) (var0 / 60000L % 60L), 2, true));\n            var4.append(format((int) (var0 / 1000L % 60L), 2, true));\n            if (var2) {\n                var4.append('.');\n                var4.append(format((int) (var0 % 1000L), 3, true));\n            }\n\n            return var4.toString();\n        }\n\n        static String formatTimeZoneName(String var0, String var1, String var2) {\n            StringBuffer var3 = new StringBuffer(var1);\n            int var4 = var0.length();\n            int var5 = 0;\n\n            int var6;\n            for (var6 = 0; var6 < var4; ++var6) {\n                char var7 = var0.charAt(var6);\n                if (var7 == var2.charAt(0)) {\n                    var3.append(var1);\n                    var5 = var2.length();\n                } else if (var5 == 0) {\n                    var3.append(var7);\n                } else {\n                    if (var7 == var2.charAt(var2.length() - var5)) {\n                        --var5;\n                        continue;\n                    }\n\n                    var3.append(var1);\n                    var5 = var2.length();\n                    --var6;\n                }\n            }\n\n            if (var5 != 0) {\n                var3.append(var1);\n            }\n\n            return var3.toString();\n        }\n\n        static String valueOfTimeZone(TimeZone var0, boolean var1, boolean var2, boolean var3, int var4, int var5) {\n            int var6 = var0.getRawOffset();\n\n            int var7;\n            for (var7 = var0.getDSTSavings(); var5 == 3 && var7 != 0 && (var6 + var7) % 3600000 == 0; var7 = (var7 > 0 ? var7 - 1000 : var7 + 1000)) {\n            }\n\n            StringBuffer var8 = new StringBuffer(var5 + 2);\n            char var9 = var6 < 0 ? '-' : '+';\n            var8.append(var9);\n            var6 = Math.abs(var6);\n            var8.append(format(var6 / 3600000, 2));\n            if (var5 != 1) {\n                if (var2) {\n                    var8.append(':');\n                }\n\n                var8.append(format(var6 / 60000 % 60, 2));\n            }\n\n            if (var5 == 3) {\n                if (var2) {\n                    var8.append(':');\n                }\n\n                var8.append(format(var6 / 1000 % 60, 2));\n            }\n\n            if (var7 != 0) {\n                var8.append(var1 ? var0.getDSTSavingID() : var0.getDSTOffsetID());\n            } else if (var3) {\n                var8.append('Z');\n            }\n\n            return var8.toString();\n        }\n\n        static String formatNumber(int var0, int var1) {\n            String var2 = Integer.toString(var0);\n            return var1 <= var2.length() ? var2 : \"0000000000\".substring(0, var1 - var2.length()) + va",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e0433239..69c2579f 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -460,128 +460,300 @@ public class FastDateFormat extends Format {\n      * @return a {@code List} of Rule objects\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n-    protected List<Rule> parsePattern() {\n-        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n-        List<Rule> rules = new ArrayList<Rule>();\n-\n-        String[] ERAs = symbols.getEras();\n-        String[] months = symbols.getMonths();\n-        String[] shortMonths = symbols.getShortMonths();\n-        String[] weekdays = symbols.getWeekdays();\n-        String[] shortWeekdays = symbols.getShortWeekdays();\n-        String[] AmPmStrings = symbols.getAmPmStrings();\n-\n-        int length = mPattern.length();\n-        int[] indexRef = new int[1];\n-\n-        for (int i = 0; i < length; i++) {\n-            indexRef[0] = i;\n-            String token = parseToken(mPattern, indexRef);\n-            i = indexRef[0];\n-\n-            int tokenLen = token.length();\n-            if (tokenLen == 0) {\n-                break;\n+import java.text.DateFormat;\n+import java.text.DateFormatSymbols;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.TimeZone;\n+\n+public class DateUtils {\n+\n+    private static final Locale EN_US = Locale.US;\n+\n+    public static boolean isAvailableLocale(Locale locale) {\n+        return availableLocaleList().contains(locale);\n+    }\n+\n+    private static Set<Locale> availableLocaleSet;\n+\n+    public static Set<Locale> availableLocaleList() {\n+        if (availableLocaleSet == null) {\n+            Set<Locale> availableLocaleSet = new HashSet<>();\n+\n+            for (String locale : DateFormat.getAvailableLocales()) {\n+                availableLocaleSet.add(LocaleUtils.toLocale(locale));\n             }\n+            availableLocaleSet.remove(null);\n \n-            Rule rule;\n-            char c = token.charAt(0);\n+            DateUtils.availableLocaleSet = availableLocaleSet;\n+        }\n+        return availableLocaleSet;\n+    }\n \n-            switch (c) {\n-            case 'G': // era designator (text)\n-                rule = new TextField(Calendar.ERA, ERAs);\n-                break;\n-            case 'y': // year (number)\n-                if (tokenLen >= 4) {\n-                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n-                } else {\n-                    rule = TwoDigitYearField.INSTANCE;\n-                }\n-                break;\n-            case 'M': // month in year (text and number)\n-                if (tokenLen >= 4) {\n-                    rule = new TextField(Calendar.MONTH, months);\n-                } else if (tokenLen == 3) {\n-                    rule = new TextField(Calendar.MONTH, shortMonths);\n-                } else if (tokenLen == 2) {\n-                    rule = TwoDigitMonthField.INSTANCE;\n-                } else {\n-                    rule = UnpaddedMonthField.INSTANCE;\n-                }\n-                break;\n-            case 'd': // day in month (number)\n-                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n-                break;\n-            case 'h': // hour in am/pm (number, 1..12)\n-                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n-                break;\n-            case 'H': // hour in day (number, 0..23)\n-                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n-                break;\n-            case 'm': // minute in hour (number)\n-                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n-                break;\n-            case 's': // second in minute (number)\n-                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n-                break;\n-            case 'S': // millisecond (number)\n-                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n-                break;\n-            case 'E': // day in week (text)\n-                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n-                break;\n-            case 'D': // day in year (number)\n-                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n-                break;\n-            case 'F': // day of week in month (number)\n-                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n-                break;\n-            case 'w': // week in year (number)\n-                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n-                break;\n-            case 'W': // week in month (number)\n-                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n-                break;\n-            case 'a': // am/pm marker (text)\n-                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n-                break;\n-            case 'k': // hour in day (1..24)\n-                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n-                break;\n-            case 'K': // hour in am/pm (0..11)\n-                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n-                break;\n-            case 'z': // time zone (text)\n-                if (tokenLen >= 4) {\n-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n+    public static SimpleDateFormat buildISO8601DateFormat() {\n+        SimpleDateFormat iso8601DateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", EN_US);\n+        iso8601DateFormat.setLenient(false);\n+        return iso8601DateFormat;\n+    }\n+\n+    public static SimpleDateFormat buildISO8601DateFormatWithSeconds() {\n+        SimpleDateFormat iso8601DateFormatWithSeconds = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\", EN_US);\n+        iso8601DateFormatWithSeconds.setLenient(false);\n+        return iso8601DateFormatWithSeconds;\n+    }\n+\n+    public static SimpleDateFormat buildRFC1123DateFormat() {\n+        SimpleDateFormat rfc1123DateFormat = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", EN_US);\n+        rfc1123DateFormat.setLenient(false);\n+        return rfc1123DateFormat;\n+    }\n+\n+    public static Date parseDate(String dateValue) throws ParseException {\n+        if (dateValue == null) {\n+            return null;\n+        }\n+\n+        try {\n+            return Date.from(javax.xml.bind.DatatypeConverter.parseDateTime(dateValue.replace(\"Z\", \"+00:00\"))\n+                    .toInstant());\n+        } catch (IllegalArgumentException e) {\n+            throw new ParseException(\"Unable to parse date '\" + dateValue + \"'\", 0);\n+        }\n+    }\n+\n+    public static String format(Date date, SimpleDateFormat dateFormat) {\n+        if (date == null || dateFormat == null) {\n+            return null;\n+        }\n+\n+        return dateFormat.format(date);\n+    }\n+\n+    static final Locale locale = Locale.ENGLISH;\n+\n+    /**\n+     * This method is from the following stack overflow answer:\n+     * https://stackoverflow.com/a/28652733/9768291\n+     * by https://stackoverflow.com/users/2333501/sajan-nambiar\n+     */\n+    public static void method() {\n+        SimpleDateFormat format1 = new SimpleDateFormat(\"M/d/yy h:mm a\");\n+        format1.setTimeZone(TimeZone.getTimeZone(\"America/Los_Angeles\"));\n+        DateFormat format2 = DateFormat.getDateInstance(DateFormat.SHORT, EN_US);\n+        DateFormat format3 = DateFormat.getTimeInstance(DateFormat.SHORT, EN_US);\n+\n+        TimeZone systemTimeZone = TimeZone.getDefault();\n+        boolean daylight = systemTimeZone.inDaylightTime(new Date());\n+        TimeZoneRule rule = systemTimeZone.getDynamicTimeZoneRule(new Date().getTime());\n+        String offset = GmtOffsetValue.valueOfTimeZone(systemTimeZone, daylight, 2, 2);\n+        String stdStr = format3.format(new Date()) + \" \" + offset;\n+        String dstStr = (rule == null) ? null :\n+                format3.format(new Date(new Date().getTime() + rule.getRawOffset() + rule.getDSTSavings())) +\n+                        \" \" + GmtOffsetValue.format(rule.getRawOffset() + rule.getDSTSavings());\n+\n+        System.out.println(\"format1: \" + format1.toPattern() + \"    \" + format1.format(new Date(0)));\n+        System.out.println(\"format2: \" + ((SimpleDateFormat) format2).toPattern() + \"    \" + format2.format(new Date(0)));\n+        System.out.println(\"format3: \" + ((SimpleDateFormat) format3).toPattern() + \"    \" + stdStr +\n+                (dstStr == null ? \"\" : \"/\" + dstStr));\n+    }\n+\n+    static class GmtOffsetValue {\n+        static String valueOfTimeZone(TimeZone tz, boolean daylight, int minWidth, int maxWidth) {\n+            int offset = tz.getRawOffset();\n+            if (daylight && tz.useDaylightTime()) {\n+                offset += tz.getDSTSavings();\n+            }\n+            offset = offset / 60000; // Convert milliseconds to minutes\n+\n+            char sign = '+';\n+            if (offset < 0) {\n+                sign = '-';\n+                offset = -offset;\n+            }\n+\n+            StringBuilder buffer = new StringBuilder();\n+            buffer.append(sign);\n+\n+            // Primary format \"H:MM\"\n+            int hours = offset / 60;\n+            int minutes = offset % 60;\n+            buffer.append(formatNumber(hours, 2));\n+            buffer.append(':');\n+            buffer.append(formatNumber(minutes, 2));\n+\n+            return buffer.toString();\n+        }\n+\n+        static String format(int var0) {\n+            StringBuffer var1 = new StringBuffer(2);\n+            if (var0 < 10) {\n+                var1.append('0');\n+            }\n+\n+            var1.append(var0);\n+            return var1.toString();\n+        }\n+\n+        static String format(int var0, int var1) {\n+            StringBuffer var2 = new StringBuffer(var1);\n+            int var3 = var0;\n+            if (var0 < 0) {\n+                var2.append('-');\n+                var3 = -var0;\n+                --var1;\n+            }\n+\n+            for (int var4 = var3; var4 > 0; --var1) {\n+                int var5 = var4 % 10;\n+                var4 /= 10;\n+                var2.insert(var1, (char) ('0' + var5));\n+            }\n+\n+            while (var1 > 0) {\n+                --var1;\n+                var2.insert(0, '0');\n+            }\n+\n+            return var2.toString();\n+        }\n+\n+        static String format(long var0) {\n+            StringBuffer var2 = new StringBuffer(20);\n+            if (var0 < 0L) {\n+                var2.append('-');\n+                var0 = -var0;\n+            }\n+\n+            var2.append(format((int) (var0 / 3600000L), 2));\n+            var2.append(':');\n+            var2.append(format((int) (var0 / 60000L % 60L), 2));\n+            var2.append(':');\n+            var2.append(format((int) (var0 / 1000L % 60L), 2));\n+            var2.append('.');\n+            var2.append(format((int) (var0 % 1000L), 3));\n+            return var2.toString();\n+        }\n+\n+        static String format(int var0, int var1, boolean var2) {\n+            StringBuffer var3 = new StringBuffer(var1);\n+            int var4 = var0;\n+            if (var0 < 0) {\n+                var3.append('-');\n+                var4 = -var0;\n+                --var1;\n+            }\n+\n+            for (int var5 = var4; var5 > 0; --var1) {\n+                int var6 = var5 % 10;\n+                var5 /= 10;\n+                var3.insert(var1, (char) ('0' + var6));\n+            }\n+\n+            while (var2 && var1 > 0) {\n+                --var1;\n+                var3.insert(0, '0');\n+            }\n+\n+            return var3.toString();\n+        }\n+\n+        static String format(long var0, boolean var2) {\n+            StringBuffer var4 = new StringBuffer(18);\n+            if (var0 < 0L) {\n+                var4.append('-');\n+                var0 = -var0;\n+            }\n+\n+            var4.append(format((int) (var0 / 3600000L), 2, false));\n+            var4.append(format((int) (var0 / 60000L % 60L), 2, true));\n+            var4.append(format((int) (var0 / 1000L % 60L), 2, true));\n+            if (var2) {\n+                var4.append('.');\n+                var4.append(format((int) (var0 % 1000L), 3, true));\n+            }\n+\n+            return var4.toString();\n+        }\n+\n+        static String formatTimeZoneName(String var0, String var1, String var2) {\n+            StringBuffer var3 = new StringBuffer(var1);\n+            int var4 = var0.length();\n+            int var5 = 0;\n+\n+            int var6;\n+            for (var6 = 0; var6 < var4; ++var6) {\n+                char var7 = var0.charAt(var6);\n+                if (var7 == var2.charAt(0)) {\n+                    var3.append(var1);\n+                    var5 = var2.length();\n+                } else if (var5 == 0) {\n+                    var3.append(var7);\n                 } else {\n-                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n+                    if (var7 == var2.charAt(var2.length() - var5)) {\n+                        --var5;\n+                        continue;\n+                    }\n+\n+                    var3.append(var1);\n+                    var5 = var2.length();\n+                    --var6;\n                 }\n-                break;\n-            case 'Z': // time zone (value)\n-                if (tokenLen == 1) {\n-                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n-                } else {\n-                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n+            }\n+\n+            if (var5 != 0) {\n+                var3.append(var1);\n+            }\n+\n+            return var3.toString();\n+        }\n+\n+        static String valueOfTimeZone(TimeZone var0, boolean var1, boolean var2, boolean var3, int var4, int var5) {\n+            int var6 = var0.getRawOffset();\n+\n+            int var7;\n+            for (var7 = var0.getDSTSavings(); var5 == 3 && var7 != 0 && (var6 + var7) % 3600000 == 0; var7 = (var7 > 0 ? var7 - 1000 : var7 + 1000)) {\n+            }\n+\n+            StringBuffer var8 = new StringBuffer(var5 + 2);\n+            char var9 = var6 < 0 ? '-' : '+';\n+            var8.append(var9);\n+            var6 = Math.abs(var6);\n+            var8.append(format(var6 / 3600000, 2));\n+            if (var5 != 1) {\n+                if (var2) {\n+                    var8.append(':');\n                 }\n-                break;\n-            case '\\'': // literal text\n-                String sub = token.substring(1);\n-                if (sub.length() == 1) {\n-                    rule = new CharacterLiteral(sub.charAt(0));\n-                } else {\n-                    rule = new StringLiteral(sub);\n+\n+                var8.append(format(var6 / 60000 % 60, 2));\n+            }\n+\n+            if (var5 == 3) {\n+                if (var2) {\n+                    var8.append(':');\n                 }\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n+\n+                var8.append(format(var6 / 1000 % 60, 2));\n             }\n \n-            rules.add(rule);\n+            if (var7 != 0) {\n+                var8.append(var1 ? var0.getDSTSavingID() : var0.getDSTOffsetID());\n+            } else if (var3) {\n+                var8.append('Z');\n+            }\n+\n+            return var8.toString();\n         }\n \n-        return rules;\n-    }\n+        static String formatNumber(int var0, int var1) {\n+            String var2 = Integer.toString(var0);\n+            return var1 <= var2.length() ? var2 : \"0000000000\".substring(0, var1 - var2.length()) + va\n \n     /**\n      * <p>Performs the parsing of tokens.</p>",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}