{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) <= 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                final RealPointValuePair[] contractedSimplex = simplex;\n                simplex = contractedSimplex;\n            } else {\n                // perform a shrinking step\n                final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n                // check if the shrunk simplex is better than the one we have\n                final RealPointValuePair[] newSimplex = (comparator.compare(shrunkSimplex[0], simplex[0]) < 0) ?\n                        shrunkSimplex : original;\n                simplex = newSimplex;\n            }\n\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n\nprivate RealPointValuePair[] shrink(final RealPointValuePair[] original,\n                                     final Comparator<RealPointValuePair> comparator) {\n    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n    shrinkedSimplex[0] = original[0];\n    final double[] centroid = computeCentroid(original, 1, original.length);\n    for (int i = 1; i < original.length; i++) {\n        // compute the new point by shrinking towards the centroid\n        final double[] x = original[i].getPoint();\n        final double[] newX = new double[x.length];\n        for (int j = 0; j < x.length; j++) {\n            newX[j] = centroid[j] + (x[j] - centroid[j]) / 2.0;\n        }\n        final double[] y = computeObjectiveValue(newX);\n        shrinkedSimplex[i] = new RealPointValuePair(newX, y, false);\n    }\n    Arrays.sort(shrinkedSimplex, comparator);\n    return shrinkedSimplex;\n}\n\nprivate double[] computeCentroid(final RealPointValuePair[] simplex, final int start, final int end) {\n    final int dim = simplex[0].getPoint().length;\n    final double[] centroid = new double[dim];\n    for (int i = start; i <= end; i++) {\n        final double[] x = simplex[i].getPoint();\n        for (int j = 0; j < dim; j++) {\n            centroid[j] += x[j];\n        }\n    }\n    final int size = end - start + 1;\n    for (int j = 0; j < dim; j++) {\n        centroid[j] /= size;\n    }\n    return centroid;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6123d202d 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,90 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n-        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+    throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) <= 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+                final RealPointValuePair[] contractedSimplex = simplex;\n+                simplex = contractedSimplex;\n+            } else {\n+                // perform a shrinking step\n+                final RealPointValuePair[] shrunkSimplex = shrink(original, comparator);\n+                // check if the shrunk simplex is better than the one we have\n+                final RealPointValuePair[] newSimplex = (comparator.compare(shrunkSimplex[0], simplex[0]) < 0) ?\n+                        shrunkSimplex : original;\n+                simplex = newSimplex;\n             }\n \n         }\n \n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n+        }\n     }\n+}\n+\n+private RealPointValuePair[] shrink(final RealPointValuePair[] original,\n+                                     final Comparator<RealPointValuePair> comparator) {\n+    final RealPointValuePair[] shrinkedSimplex = new RealPointValuePair[original.length];\n+    shrinkedSimplex[0] = original[0];\n+    final double[] centroid = computeCentroid(original, 1, original.length);\n+    for (int i = 1; i < original.length; i++) {\n+        // compute the new point by shrinking towards the centroid\n+        final double[] x = original[i].getPoint();\n+        final double[] newX = new double[x.length];\n+        for (int j = 0; j < x.length; j++) {\n+            newX[j] = centroid[j] + (x[j] - centroid[j]) / 2.0;\n+        }\n+        final double[] y = computeObjectiveValue(newX);\n+        shrinkedSimplex[i] = new RealPointValuePair(newX, y, false);\n+    }\n+    Arrays.sort(shrinkedSimplex, comparator);\n+    return shrinkedSimplex;\n+}\n+\n+private double[] computeCentroid(final RealPointValuePair[] simplex, final int start, final int end) {\n+    final int dim = simplex[0].getPoint().length;\n+    final double[] centroid = new double[dim];\n+    for (int i = start; i <= end; i++) {\n+        final double[] x = simplex[i].getPoint();\n+        for (int j = 0; j < dim; j++) {\n+            centroid[j] += x[j];\n+        }\n+    }\n+    final int size = end - start + 1;\n+    for (int j = 0; j < dim; j++) {\n+        centroid[j] /= size;\n+    }\n+    return centroid;\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}