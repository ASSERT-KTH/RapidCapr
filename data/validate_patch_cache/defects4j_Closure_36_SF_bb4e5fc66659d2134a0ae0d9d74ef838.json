{
    "patch": "    private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference) {\n      if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference)) {\n        return false;\n      }\n\n      // If the value is read more than once, skip it.\n      // VAR declarations and EXPR_RESULT don't need the value, but other\n      // ASSIGN expressions parents do.\n      if (!initialization.isAssignedExactlyOnce()) {\n        return false;\n      }\n      Node initializerParent = initialization.getParent();\n      if (initializerParent.isScript()\n          || initializerParent.isFunction()) {\n        // Initially, we only inline expressions assigned once which are not\n        // declared inside functions so that we don't accidentally expose the\n        // inlined expression into a larger scope where it may affect variable\n        // lifetimes or change reference ordering.\n        return false;\n      }\n\n      // Be very conservative and do no cross control structures, switch statements,\n      // or scope boundaries\n      DiGraph<BasicBlock, Branch> cfg = getCfg();\n      boolean sameCfgNode = sameCfgNode(initialization, reference);\n      if (!sameCfgNode) {\n        return false;\n      }\n      if (declaration.basicBlock != initialization.basicBlock\n          || declaration.basicBlock != reference.basicBlock) {\n        return false;\n      }\n      BasicBlock initializationBlock = initialization.getBasicBlock();\n      if (initializationBlock != reference.getBasicBlock()) {\n        DiGraphEdge<Node, Branch> outEdge =\n            cfg.getEdge(initializationBlock, reference.getBasicBlock());\n        if (outEdge == null\n            || !outEdge.getValue().isDirectTarget()\n            || realizationOrder.compareTo(outEdge.getValue().getRealizationOrder()) < 0) {\n          return false;\n        }\n      }\n      if (initializationBlock.exit.isOnEdge()) {\n        // Can't inline out of a switch statement.\n        if (!initializationBlock.exit.getValue().isGoto()) {\n          return false;\n        }\n        // Can't inline out of a labeled statement.\n        if (initializationBlock.exit.getSuccessorCount() != 1) {\n          return false;\n        }\n      }\n\n      // Do not inline into a call node. This would change\n      // the context in which it was being called. For example,\n      //   var a = b.c;\n      //   a();\n      // should not be inlined, because it calls a in the context of b\n      // rather than the context of the window.\n      //   var a = b.c;\n      //   f(a)\n      // is ok.\n      Node value = initialization.getAssignedValue();\n      Preconditions.checkState(value != null);\n      if (value.isGetProp()\n          && reference.getParent().isCall()\n          && reference.getParent().getFirstChild() == reference.getNode()) {\n        return false;\n      }\n\n      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..e081a11c 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -529,17 +529,50 @@ class InlineVariables implements CompilerPass {\n       // If the value is read more than once, skip it.\n       // VAR declarations and EXPR_RESULT don't need the value, but other\n       // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n+      if (!initialization.isAssignedExactlyOnce()) {\n+        return false;\n+      }\n+      Node initializerParent = initialization.getParent();\n+      if (initializerParent.isScript()\n+          || initializerParent.isFunction()) {\n+        // Initially, we only inline expressions assigned once which are not\n+        // declared inside functions so that we don't accidentally expose the\n+        // inlined expression into a larger scope where it may affect variable\n+        // lifetimes or change reference ordering.\n         return false;\n       }\n \n-      // Be very conservative and do no cross control structures or\n-      // scope boundaries\n-      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n-          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n+      // Be very conservative and do no cross control structures, switch statements,\n+      // or scope boundaries\n+      DiGraph<BasicBlock, Branch> cfg = getCfg();\n+      boolean sameCfgNode = sameCfgNode(initialization, reference);\n+      if (!sameCfgNode) {\n+        return false;\n+      }\n+      if (declaration.basicBlock != initialization.basicBlock\n+          || declaration.basicBlock != reference.basicBlock) {\n         return false;\n       }\n+      BasicBlock initializationBlock = initialization.getBasicBlock();\n+      if (initializationBlock != reference.getBasicBlock()) {\n+        DiGraphEdge<Node, Branch> outEdge =\n+            cfg.getEdge(initializationBlock, reference.getBasicBlock());\n+        if (outEdge == null\n+            || !outEdge.getValue().isDirectTarget()\n+            || realizationOrder.compareTo(outEdge.getValue().getRealizationOrder()) < 0) {\n+          return false;\n+        }\n+      }\n+      if (initializationBlock.exit.isOnEdge()) {\n+        // Can't inline out of a switch statement.\n+        if (!initializationBlock.exit.getValue().isGoto()) {\n+          return false;\n+        }\n+        // Can't inline out of a labeled statement.\n+        if (initializationBlock.exit.getSuccessorCount() != 1) {\n+          return false;\n+        }\n+      }\n \n       // Do not inline into a call node. This would change\n       // the context in which it was being called. For example,",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}