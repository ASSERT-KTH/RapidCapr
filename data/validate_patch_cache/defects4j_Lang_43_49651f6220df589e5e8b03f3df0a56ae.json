{
    "patch": "            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                if (escapingOn && pos.getIndex() < pattern.length() && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n                } else {\n                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n                }\n            default:\n                next(pos);\n            }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..16ea73fe 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,17 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+            switch (c[pos.getIndex()]) {\n+            case QUOTE:\n+                next(pos);\n+                if (escapingOn && pos.getIndex() < pattern.length() && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n+                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n+                } else {\n+                    return appendTo == null ? null : appendTo.append(c, lastHold, pos.getIndex() - lastHold);\n+                }\n+            default:\n+                next(pos);\n+            }\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}