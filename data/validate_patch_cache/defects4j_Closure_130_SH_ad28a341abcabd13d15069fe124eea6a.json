{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0) {\n        // {@code name} meets condition (a).\n        name.removeRef(name.getDeclaration());\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Ref.Type.USES_PROP && ref.prop != null) {\n            // If {@code ref} is using a property, we shouldn't inline the name.\n            continue;\n          }\n          if (ref.fn != null && NodeUtil.isFunctionExpression(ref.fn.getFirstChild())) {\n            // Don't inline a function expression.\n            continue;\n          }\n          Node value = ref.getNode();\n          if (!isImmutableValue(value)) {\n            // {@code value} meets condition (d).\n            if (inlineVariableIfPossible(name, ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..903b190a 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,27 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0) {\n+        // {@code name} meets condition (a).\n+        name.removeRef(name.getDeclaration());\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Ref.Type.USES_PROP && ref.prop != null) {\n+            // If {@code ref} is using a property, we shouldn't inline the name.\n+            continue;\n+          }\n+          if (ref.fn != null && NodeUtil.isFunctionExpression(ref.fn.getFirstChild())) {\n+            // Don't inline a function expression.\n+            continue;\n+          }\n+          Node value = ref.getNode();\n+          if (!isImmutableValue(value)) {\n+            // {@code value} meets condition (d).\n+            if (inlineVariableIfPossible(name, ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}