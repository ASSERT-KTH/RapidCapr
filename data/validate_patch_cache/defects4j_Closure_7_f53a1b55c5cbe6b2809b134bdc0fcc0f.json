{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  if (value.equals(\"function\")) {\n    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n    if (type.isFunctionPrototypeObject() || type.equals(ctorType)) {\n       return ctorType;\n    } else {\n       return null;\n    }\n    // Objects are restricted to \"Function\", subtypes are left\n    // Only filter out subtypes of \"function\"\n  } else if (matchesExpectation(\"object\") && !type.isFunctionType() && !type.isFunctionPrototypeObject()) {\n    return type;\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..c29a12d3 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,21 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+public JSType caseObjectType(ObjectType type) {\n+  if (value.equals(\"function\")) {\n+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+    if (type.isFunctionPrototypeObject() || type.equals(ctorType)) {\n+       return ctorType;\n+    } else {\n+       return null;\n     }\n+    // Objects are restricted to \"Function\", subtypes are left\n+    // Only filter out subtypes of \"function\"\n+  } else if (matchesExpectation(\"object\") && !type.isFunctionType() && !type.isFunctionPrototypeObject()) {\n+    return type;\n+  }\n+  return null;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}