{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // adjust instantLocal using the estimate and recalc the offset\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        // if the offsets differ, we must be near a DST boundary\n        if (offsetLocal != offsetAdjusted) {\n            if (offsetLocal < 0) {\n                long prev = previousTransition(instantAdjusted);\n                if (prev < instantAdjusted) {\n                    int offsetPrev = getOffset(prev);\n                    int diff = offsetPrev - offsetLocal;\n                    if (instantAdjusted - prev <= diff) {\n                        return offsetPrev;\n                    }\n                }\n            } else if (offsetLocal > 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            } else { // offsetLocal == 0\n                return offsetLocal;\n            }\n        }\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..d65fcdd2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+    public int getOffsetFromLocal(long instantLocal) {\n+        // get the offset at instantLocal (first estimate)\n+        final int offsetLocal = getOffset(instantLocal);\n+        // adjust instantLocal using the estimate and recalc the offset\n+        final long instantAdjusted = instantLocal - offsetLocal;\n+        final int offsetAdjusted = getOffset(instantAdjusted);\n+        // if the offsets differ, we must be near a DST boundary\n+        if (offsetLocal != offsetAdjusted) {\n+            if (offsetLocal < 0) {\n+                long prev = previousTransition(instantAdjusted);\n+                if (prev < instantAdjusted) {\n+                    int offsetPrev = getOffset(prev);\n+                    int diff = offsetPrev - offsetLocal;\n+                    if (instantAdjusted - prev <= diff) {\n+                        return offsetPrev;\n+                    }\n+                }\n+            } else if (offsetLocal > 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            } else { // offsetLocal == 0\n+                return offsetLocal;\n+            }\n+        }\n+        return offsetAdjusted;\n+    }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}