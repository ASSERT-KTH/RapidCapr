{
    "patch": "// unions types\nif (that instanceof UnionType) {\n  TypePair p = that.getTypesUnderInequality(this);\n  return new TypePair(p.typeB, p.typeA);\n}\n\n// other types\nswitch (this.testForEquality(that)) {\n  case TRUE:\n    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n\n  case FALSE:\n    return new TypePair(this, that);\n\n  case UNKNOWN:\n    return new TypePair(JSTypeNative.UNKNOWN_TYPE, JSTypeNative.UNKNOWN_TYPE);\n}\n\n// switch case is exhaustive\nthrow new IllegalStateException();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..4f78fff2 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,26 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+// unions types\n+if (that instanceof UnionType) {\n+  TypePair p = that.getTypesUnderInequality(this);\n+  return new TypePair(p.typeB, p.typeA);\n+}\n+\n+// other types\n+switch (this.testForEquality(that)) {\n+  case TRUE:\n+    return new TypePair(this.restrictByNotNullOrUndefined(), that.restrictByNotNullOrUndefined());\n+\n+  case FALSE:\n+    return new TypePair(this, that);\n+\n+  case UNKNOWN:\n+    return new TypePair(JSTypeNative.UNKNOWN_TYPE, JSTypeNative.UNKNOWN_TYPE);\n+}\n+\n+// switch case is exhaustive\n+throw new IllegalStateException();\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: constructor TypePair in class TypePair cannot be applied to given types;",
    "test_result": "ERROR"
}