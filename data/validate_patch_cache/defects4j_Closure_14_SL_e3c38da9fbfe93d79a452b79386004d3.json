{
    "patch": "            if (node.getParent().isFunction()) {\n              Node lastInFunction = NodeUtil.getFunctionBody(node.getParent()).getLastChild();\n              Iterable<Node> returns = ControlFlowGraph.getReturns(lastInFunction);\n              for (Node returnNode : returns) {\n                cfa.createEdge(fromNode, Branch.UNCOND, returnNode);\n              }\n            } else if (node.getParent().isScript()) {\n              // It is a top-level return. We should not return from the entire program.\n              return null;\n            } else {\n              cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, node.getParent(), cfa));\n            }\n            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..8ed2171b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,19 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+            if (node.getParent().isFunction()) {\n+              Node lastInFunction = NodeUtil.getFunctionBody(node.getParent()).getLastChild();\n+              Iterable<Node> returns = ControlFlowGraph.getReturns(lastInFunction);\n+              for (Node returnNode : returns) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, returnNode);\n+              }\n+            } else if (node.getParent().isScript()) {\n+              // It is a top-level return. We should not return from the entire program.\n+              return null;\n+            } else {\n+              cfa.createEdge(fromNode, Branch.UNCOND, computeFollowNode(fromNode, node.getParent(), cfa));\n+            }\n+            cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}