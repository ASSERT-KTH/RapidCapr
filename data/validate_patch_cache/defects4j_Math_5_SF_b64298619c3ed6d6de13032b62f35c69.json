{
    "patch": "    public Complex reciprocal() {\n        if (Double.isNaN(real) || Double.isNaN(imaginary)) {\n            return Complex.NaN;\n        }\n\n        if (real == 0.0 && imaginary == 0.0) {\n            return Complex.INF;\n        }\n\n        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {\n            return Complex.ZERO;\n        }\n\n        double scale = 1.0 / (real * real + imaginary * imaginary);\n        Complex result = new Complex(real * scale, -imaginary * scale);\n\n        if (Double.isNaN(result.real) || Double.isNaN(result.imaginary)) {\n            return Complex.NaN;\n        }\n\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/complex/Complex.java b/src/main/java/org/apache/commons/math3/complex/Complex.java\nindex 22b23f24e..ee6377aa8 100644\n--- a/src/main/java/org/apache/commons/math3/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math3/complex/Complex.java\n@@ -297,27 +297,26 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n \n     /** {@inheritDoc} */\n     public Complex reciprocal() {\n-        if (isNaN) {\n-            return NaN;\n+        if (Double.isNaN(real) || Double.isNaN(imaginary)) {\n+            return Complex.NaN;\n         }\n \n         if (real == 0.0 && imaginary == 0.0) {\n-            return NaN;\n+            return Complex.INF;\n         }\n \n-        if (isInfinite) {\n-            return ZERO;\n+        if (Double.isInfinite(real) || Double.isInfinite(imaginary)) {\n+            return Complex.ZERO;\n         }\n \n-        if (FastMath.abs(real) < FastMath.abs(imaginary)) {\n-            double q = real / imaginary;\n-            double scale = 1. / (real * q + imaginary);\n-            return createComplex(scale * q, -scale);\n-        } else {\n-            double q = imaginary / real;\n-            double scale = 1. / (imaginary * q + real);\n-            return createComplex(scale, -scale * q);\n+        double scale = 1.0 / (real * real + imaginary * imaginary);\n+        Complex result = new Complex(real * scale, -imaginary * scale);\n+\n+        if (Double.isNaN(result.real) || Double.isNaN(result.imaginary)) {\n+            return Complex.NaN;\n         }\n+\n+        return result;\n     }\n \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}