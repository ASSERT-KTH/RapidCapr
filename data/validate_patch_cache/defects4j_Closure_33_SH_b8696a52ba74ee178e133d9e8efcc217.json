{
    "patch": "      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n        warnings.add(JSError.make(\n            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n            \"RegExp objects with explicit 'global' properties\"));\n        return;\n      }\n    }    ",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..e8189156 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,13 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n+        warnings.add(JSError.make(\n+            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n+            \"RegExp objects with explicit 'global' properties\"));\n+        return;\n+      }\n+    }    \n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}