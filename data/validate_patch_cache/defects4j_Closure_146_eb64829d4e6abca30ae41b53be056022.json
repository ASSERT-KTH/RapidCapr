{
    "patch": "        // The inequality of a type with itself always results in FALSE.\n        if (this.equals(that)) {\n            return new TypePair(this, this);\n        }\n        // An object is never equal to null or undefined\n        if (this.isSubtypeOf(getNativeType(UNKNOWN_TYPE)) && that.isSubtypeOf(getNativeType(NULL_TYPE))) {\n            return new TypePair(this, that);\n        }\n        if (that.isSubtypeOf(getNativeType(UNKNOWN_TYPE)) && this.isSubtypeOf(getNativeType(NULL_TYPE))) {\n            return new TypePair(that, this);\n        }\n        return new TypePair(this, that);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..6cd8e479 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,18 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // The inequality of a type with itself always results in FALSE.\n+        if (this.equals(that)) {\n+            return new TypePair(this, this);\n+        }\n+        // An object is never equal to null or undefined\n+        if (this.isSubtypeOf(getNativeType(UNKNOWN_TYPE)) && that.isSubtypeOf(getNativeType(NULL_TYPE))) {\n+            return new TypePair(this, that);\n+        }\n+        if (that.isSubtypeOf(getNativeType(UNKNOWN_TYPE)) && this.isSubtypeOf(getNativeType(NULL_TYPE))) {\n+            return new TypePair(that, this);\n+        }\n+        return new TypePair(this, that);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}