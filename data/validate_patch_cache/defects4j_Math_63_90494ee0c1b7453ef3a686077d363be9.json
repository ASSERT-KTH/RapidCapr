{
    "patch": "public static boolean equals(double x, double y) {\n    return x == y || (Double.isNaN(x) && Double.isNaN(y));\n}\n\npublic static boolean equals(double[] array1, double[] array2, double eps) {\n    if ((array1 == null) || (array2 == null)) {\n        return false;\n    }\n\n    if (array1.length != array2.length) {\n        return false;\n    }\n\n    for (int i = 0; i < array1.length; ++i) {\n        if (!equals(array1[i], array2[i], eps)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\npublic static boolean equals(double[] array1, double[] array2) {\n    return equals(array1, array2, 1e-15);\n}\n\npublic static boolean equals(double[] array1, double[] array2, int maxUlps) {\n    if ((array1 == null) || (array2 == null)) {\n        return false;\n    }\n\n    if (array1.length != array2.length) {\n        return false;\n    }\n\n    for (int i = 0; i < array1.length; ++i) {\n        if (!equals(array1[i], array2[i], maxUlps)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\npublic static boolean equals(double x, double y, int maxUlps) {\n    long xBits = Double.doubleToLongBits(x);\n    long yBits = Double.doubleToLongBits(y);\n\n    if (xBits == yBits) {\n        return true;\n    }\n\n    boolean isEqual = true;\n\n    if (((xBits & SIGN_BIT_MASK) != (yBits & SIGN_BIT_MASK)) ||\n            (Math.abs(xBits - yBits) > maxUlps)) {\n        isEqual = false;\n    }\n\n    return isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..777afb9c6 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,10 +413,68 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+public static boolean equals(double x, double y) {\n+    return x == y || (Double.isNaN(x) && Double.isNaN(y));\n+}\n+\n+public static boolean equals(double[] array1, double[] array2, double eps) {\n+    if ((array1 == null) || (array2 == null)) {\n+        return false;\n+    }\n+\n+    if (array1.length != array2.length) {\n+        return false;\n+    }\n+\n+    for (int i = 0; i < array1.length; ++i) {\n+        if (!equals(array1[i], array2[i], eps)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+public static boolean equals(double[] array1, double[] array2) {\n+    return equals(array1, array2, 1e-15);\n+}\n+\n+public static boolean equals(double[] array1, double[] array2, int maxUlps) {\n+    if ((array1 == null) || (array2 == null)) {\n+        return false;\n+    }\n+\n+    if (array1.length != array2.length) {\n+        return false;\n     }\n \n+    for (int i = 0; i < array1.length; ++i) {\n+        if (!equals(array1[i], array2[i], maxUlps)) {\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+public static boolean equals(double x, double y, int maxUlps) {\n+    long xBits = Double.doubleToLongBits(x);\n+    long yBits = Double.doubleToLongBits(y);\n+\n+    if (xBits == yBits) {\n+        return true;\n+    }\n+\n+    boolean isEqual = true;\n+\n+    if (((xBits & SIGN_BIT_MASK) != (yBits & SIGN_BIT_MASK)) ||\n+            (Math.abs(xBits - yBits) > maxUlps)) {\n+        isEqual = false;\n+    }\n+\n+    return isEqual && !Double.isNaN(x) && !Double.isNaN(y);\n+}\n+\n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are\n      * equal as defined by {@link #equals(double,double) this method}.",
    "result_reason": "error: method equals(double,double,int) is already defined in class MathUtils",
    "test_result": "ERROR"
}