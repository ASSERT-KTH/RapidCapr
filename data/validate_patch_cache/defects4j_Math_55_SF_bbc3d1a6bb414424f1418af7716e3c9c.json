{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n      \n      final double eps = 1e-12;\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double v1Magnitude = v1.getNorm();\n      double v2Magnitude = v2.getNorm();\n      double maxMagnitude = FastMath.max(v1Magnitude, v2Magnitude);\n      if (maxMagnitude <= eps) {\n          // both vectors are too small\n          return Vector3D.ZERO;\n      }\n      double k = 1.0 / maxMagnitude;\n      double rx = k * v1.y * v2.z - k * v1.z * v2.y;\n      double ry = k * v1.z * v2.x - k * v1.x * v2.z;\n      double rz = k * v1.x * v2.y - k * v1.y * v2.x;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      return new Vector3D(rx, ry, rz);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..d023ad86b 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -455,23 +455,25 @@ public class Vector3D implements Serializable {\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n+      \n+      final double eps = 1e-12;\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n-\n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      double v1Magnitude = v1.getNorm();\n+      double v2Magnitude = v2.getNorm();\n+      double maxMagnitude = FastMath.max(v1Magnitude, v2Magnitude);\n+      if (maxMagnitude <= eps) {\n+          // both vectors are too small\n+          return Vector3D.ZERO;\n+      }\n+      double k = 1.0 / maxMagnitude;\n+      double rx = k * v1.y * v2.z - k * v1.z * v2.y;\n+      double ry = k * v1.z * v2.x - k * v1.x * v2.z;\n+      double rz = k * v1.x * v2.y - k * v1.y * v2.x;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      return new Vector3D(rx, ry, rz);\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.6546536707079772>",
    "test_result": "FAIL"
}