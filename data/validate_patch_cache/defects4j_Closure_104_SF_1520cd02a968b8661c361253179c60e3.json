{
    "patch": "  public JSType greatestSubtype(JSType other) {\n    if (this.equals(other)) {\n      return this;\n    } else if (other instanceof UnionType) {\n      UnionType result = new UnionType();\n      for (JSType alternate : ((UnionType) other).getAlternates()) {\n        JSType greatestSubtype = this.greatestSubtype(alternate);\n        if (greatestSubtype != null) {\n          result.addAlternate(greatestSubtype);\n        }\n      }\n      return result;\n    } else {\n      return null;\n    }\n  }\n  \n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.containsAll(that.alternates) && that.alternates.containsAll(alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..b7900c7e 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,24 +279,23 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+  public JSType greatestSubtype(JSType other) {\n+    if (this.equals(other)) {\n+      return this;\n+    } else if (other instanceof UnionType) {\n+      UnionType result = new UnionType();\n+      for (JSType alternate : ((UnionType) other).getAlternates()) {\n+        JSType greatestSubtype = this.greatestSubtype(alternate);\n+        if (greatestSubtype != null) {\n+          result.addAlternate(greatestSubtype);\n         }\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n       return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+      return null;\n     }\n   }\n-\n+  \n   /**\n    * Two union types are equal if they have the same number of alternates\n    * and all alternates are equal.\n@@ -305,7 +304,7 @@ public class UnionType extends JSType {\n   public boolean equals(Object object) {\n     if (object instanceof UnionType) {\n       UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n+      return alternates.containsAll(that.alternates) && that.alternates.containsAll(alternates);\n     } else {\n       return false;\n     }\n@@ -330,6 +329,9 @@ public class UnionType extends JSType {\n     }\n     return true;\n   }\n+    }\n+    return true;\n+  }\n \n   /**\n    * A {@link UnionType} contains a given type (alternate) iff the member",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}