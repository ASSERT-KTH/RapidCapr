{
    "patch": "    public Dfp multiply(final int x) {\n        if (isNaN()) {\n            return newInstance(getField(), sign, NaN);\n        }\n        if (x == 0) {\n            return newInstance(getField(), 0);\n        }\n        Dfp product = newInstance(this);\n        int p = FastMath.abs(x);\n        int n = 1;\n        while (p > 0) {\n            if ((p & 1) != 0) {\n                product = product.add(product);\n                if (x < 0) {\n                    product = product.subtract(this);\n                } else {\n                    product = product.add(this);\n                }\n            } else {\n                product = product.add(product);\n            }\n            p >>= 1;\n            if (++n == 24) {\n                n = 1;\n                product = product.normalize();\n            }\n        }\n        return product;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..0764bbe75 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1600,7 +1600,33 @@ public class Dfp implements FieldElement<Dfp> {\n      * @return product of this and x\n      */\n     public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+        if (isNaN()) {\n+            return newInstance(getField(), sign, NaN);\n+        }\n+        if (x == 0) {\n+            return newInstance(getField(), 0);\n+        }\n+        Dfp product = newInstance(this);\n+        int p = FastMath.abs(x);\n+        int n = 1;\n+        while (p > 0) {\n+            if ((p & 1) != 0) {\n+                product = product.add(product);\n+                if (x < 0) {\n+                    product = product.subtract(this);\n+                } else {\n+                    product = product.add(this);\n+                }\n+            } else {\n+                product = product.add(product);\n+            }\n+            p >>= 1;\n+            if (++n == 24) {\n+                n = 1;\n+                product = product.normalize();\n+            }\n+        }\n+        return product;\n     }\n \n     /** Multiply this by a single digit 0&lt;=x&lt;radix.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}