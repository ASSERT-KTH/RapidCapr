{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n  // unions types\n  if (that instanceof UnionType) {\n    TypePair p = that.getTypesUnderInequality(this);\n    return new TypePair(p.typeB, p.typeA);\n  }\n\n  // other types\n  Equality inequality = this.testForEquality(that);\n  switch (inequality) {\n    case TRUE:\n      return new TypePair(null, null);\n\n    case FALSE:\n      if (this.isPromotableTo(that)) {\n        JSType newTypeA = this.specialize(that);\n        return new TypePair(null, newTypeA);\n      } else if (that.isPromotableTo(this)) {\n        JSType newTypeB = that.specialize(this);\n        return new TypePair(newTypeB, null);\n      } else {\n        return new TypePair(this, that);\n      }\n\n    case UNKNOWN:\n      if (this.isUnknownType()) {\n        return new TypePair(null, that);\n      } else if (that.isUnknownType()) {\n        return new TypePair(this, null);\n      }\n      // fallthrough to the default case if none of the above apply\n    default:\n      return new TypePair(this, that);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..a05a2dc8 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,41 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n-    // unions types\n-    if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n-    }\n+public TypePair getTypesUnderInequality(JSType that) {\n+  // unions types\n+  if (that instanceof UnionType) {\n+    TypePair p = that.getTypesUnderInequality(this);\n+    return new TypePair(p.typeB, p.typeA);\n+  }\n \n-    // other types\n-    switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n+  // other types\n+  Equality inequality = this.testForEquality(that);\n+  switch (inequality) {\n+    case TRUE:\n+      return new TypePair(null, null);\n \n-      case FALSE:\n-      case UNKNOWN:\n+    case FALSE:\n+      if (this.isPromotableTo(that)) {\n+        JSType newTypeA = this.specialize(that);\n+        return new TypePair(null, newTypeA);\n+      } else if (that.isPromotableTo(this)) {\n+        JSType newTypeB = that.specialize(this);\n+        return new TypePair(newTypeB, null);\n+      } else {\n         return new TypePair(this, that);\n-    }\n+      }\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n+    case UNKNOWN:\n+      if (this.isUnknownType()) {\n+        return new TypePair(null, that);\n+      } else if (that.isUnknownType()) {\n+        return new TypePair(this, null);\n+      }\n+      // fallthrough to the default case if none of the above apply\n+    default:\n+      return new TypePair(this, that);\n   }\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}