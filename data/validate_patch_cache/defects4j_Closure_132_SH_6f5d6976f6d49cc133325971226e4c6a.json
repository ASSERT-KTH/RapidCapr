{
    "patch": "    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n\n    boolean thenBranchIsVar = isVarBlock(thenBranch);\n    boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n    // if(x)var y=1;else y=2  ->  var y=x?1:2\n    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(thenBranch);\n      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n      Node name1 = var.getFirstChild();\n      Node maybeName2 = elseAssign.getFirstChild();\n\n      if (name1.hasChildren()\n          && maybeName2.isName()\n          && name1.getString().equals(maybeName2.getString())) {\n        Node thenExpr = name1.removeChildren();\n        Node elseExpr = elseAssign.getLastChild().detachFromParent();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name1.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n        return var;\n      }\n\n    // if(x)y=1;else var y=2  ->  var y=x?1:2\n    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n        getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n\n      Node var = getBlockVar(elseBranch);\n      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n\n      Node maybeName1 = thenAssign.getFirstChild();\n      Node name2 = var.getFirstChild();\n\n      if (name2.hasChildren()\n          && maybeName1.isName()\n          && maybeName1.getString().equals(name2.getString())) {\n        Node thenExpr = thenAssign.getLastChild().detachFromParent();\n        Node elseExpr = name2.removeChildren();\n        cond.detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n                            .srcref(n);\n        var.detachFromParent();\n        name2.addChildrenToBack(hookNode);\n        parent.replaceChild(n, var);\n        reportCodeChange();\n\n        return var;\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..3515de39 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,66 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);\n+    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);\n+\n+    boolean thenBranchIsVar = isVarBlock(thenBranch);\n+    boolean elseBranchIsVar = isVarBlock(elseBranch);\n+\n+    // if(x)var y=1;else y=2  ->  var y=x?1:2\n+    if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n+        getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n+\n+      Node var = getBlockVar(thenBranch);\n+      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n+\n+      Node name1 = var.getFirstChild();\n+      Node maybeName2 = elseAssign.getFirstChild();\n+\n+      if (name1.hasChildren()\n+          && maybeName2.isName()\n+          && name1.getString().equals(maybeName2.getString())) {\n+        Node thenExpr = name1.removeChildren();\n+        Node elseExpr = elseAssign.getLastChild().detachFromParent();\n+        cond.detachFromParent();\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                            .srcref(n);\n+        var.detachFromParent();\n+        name1.addChildrenToBack(hookNode);\n+        parent.replaceChild(n, var);\n+        reportCodeChange();\n+        return var;\n+      }\n+\n+    // if(x)y=1;else var y=2  ->  var y=x?1:2\n+    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&\n+        getBlockExpression(thenBranch).getFirstChild().isAssign()) {\n+\n+      Node var = getBlockVar(elseBranch);\n+      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();\n+\n+      Node maybeName1 = thenAssign.getFirstChild();\n+      Node name2 = var.getFirstChild();\n+\n+      if (name2.hasChildren()\n+          && maybeName1.isName()\n+          && maybeName1.getString().equals(name2.getString())) {\n+        Node thenExpr = thenAssign.getLastChild().detachFromParent();\n+        Node elseExpr = name2.removeChildren();\n+        cond.detachFromParent();\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr)\n+                            .srcref(n);\n+        var.detachFromParent();\n+        name2.addChildrenToBack(hookNode);\n+        parent.replaceChild(n, var);\n+        reportCodeChange();\n+\n+        return var;\n+      }\n+    }\n+\n+    return n;\n+  }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}