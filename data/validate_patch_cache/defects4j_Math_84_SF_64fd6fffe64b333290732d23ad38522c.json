{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original simplex\n        final RealPointValuePair[] original = simplex.clone();\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n\n        // compute the expanded simplex\n        final RealPointValuePair[] expandedSimplex = evaluateNewSimplex(original, khi, comparator);\n\n        if (comparator.compare(reflected, expandedSimplex[0]) < 0) {\n            // accept the reflected simplex\n            simplex = replaceWorstPoint(original, reflected, comparator);\n\n        } else if (comparator.compare(reflected, expandedSimplex[worst]) < 0) {\n            // accept the expanded simplex\n            simplex = replaceWorstPoint(original, expandedSimplex[worst], comparator);\n\n        } else {\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n            // accept the contracted simplex, if it is better than the worst point\n            if (comparator.compare(contracted, original[worst]) < 0) {\n                simplex = replaceWorstPoint(original, contracted, comparator);\n            } else {\n                // shrink the simplex\n                shrinkSimplex(original, comparator);\n            }\n        }\n\n        // check convergence\n        if (getConvergenceChecker() != null && getConvergenceChecker()\n                .converged(getIterations(), original[0], simplex[0])) {\n            return;\n        }\n    }\n}\n\n/**\n * Replaces the worst point in the simplex with the given point and returns\n * the new simplex.\n */\nprivate RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] simplex, RealPointValuePair point,\n        Comparator<RealPointValuePair> comparator) {\n    simplex[worst] = point;\n    Arrays.sort(simplex, comparator);\n    return simplex;\n}\n\n/**\n * Shrinks the simplex by a factor of rho.\n */\nprivate void shrinkSimplex(RealPointValuePair[] simplex, Comparator<RealPointValuePair> comparator) {\n    for (int i = 1; i < simplex.length; i++) {\n        final double[] point = simplex[i].getPoint();\n        for (int j = 0; j < point.length; j++) {\n            point[j] = simplex[0].getPoint()[j] + rho * (point[j] - simplex[0].getPoint()[j]);\n        }\n        simplex[i] = new RealPointValuePair(point, evaluate(point));\n    }\n    Arrays.sort(simplex, comparator);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6af15b752 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,75 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original simplex\n+        final RealPointValuePair[] original = simplex.clone();\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+        // compute the expanded simplex\n+        final RealPointValuePair[] expandedSimplex = evaluateNewSimplex(original, khi, comparator);\n \n-                return;\n+        if (comparator.compare(reflected, expandedSimplex[0]) < 0) {\n+            // accept the reflected simplex\n+            simplex = replaceWorstPoint(original, reflected, comparator);\n \n-            }\n+        } else if (comparator.compare(reflected, expandedSimplex[worst]) < 0) {\n+            // accept the expanded simplex\n+            simplex = replaceWorstPoint(original, expandedSimplex[worst], comparator);\n \n+        } else {\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n \n-            // check convergence\n-                return;\n+            // accept the contracted simplex, if it is better than the worst point\n+            if (comparator.compare(contracted, original[worst]) < 0) {\n+                simplex = replaceWorstPoint(original, contracted, comparator);\n+            } else {\n+                // shrink the simplex\n+                shrinkSimplex(original, comparator);\n             }\n+        }\n \n+        // check convergence\n+        if (getConvergenceChecker() != null && getConvergenceChecker()\n+                .converged(getIterations(), original[0], simplex[0])) {\n+            return;\n         }\n+    }\n+}\n+\n+/**\n+ * Replaces the worst point in the simplex with the given point and returns\n+ * the new simplex.\n+ */\n+private RealPointValuePair[] replaceWorstPoint(RealPointValuePair[] simplex, RealPointValuePair point,\n+        Comparator<RealPointValuePair> comparator) {\n+    simplex[worst] = point;\n+    Arrays.sort(simplex, comparator);\n+    return simplex;\n+}\n \n+/**\n+ * Shrinks the simplex by a factor of rho.\n+ */\n+private void shrinkSimplex(RealPointValuePair[] simplex, Comparator<RealPointValuePair> comparator) {\n+    for (int i = 1; i < simplex.length; i++) {\n+        final double[] point = simplex[i].getPoint();\n+        for (int j = 0; j < point.length; j++) {\n+            point[j] = simplex[0].getPoint()[j] + rho * (point[j] - simplex[0].getPoint()[j]);\n+        }\n+        simplex[i] = new RealPointValuePair(point, evaluate(point));\n     }\n+    Arrays.sort(simplex, comparator);\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}