{
    "patch": "int remainingIndex = index;\nfor (int i = last - 1; i >= 0; i--) {\n    final int offset = uniCounterOffset[i];\n    indices[i] = remainingIndex % offset;\n    remainingIndex /= offset;\n}\nif (remainingIndex != 0) {\n    indices[last] = remainingIndex;\n} else {\n    indices[last - 1]--; // handle special case where last index is 0\n    indices[last] = uniCounterOffset[last - 1] - 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..041c19e15 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,18 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n-        }\n-        --idx;\n-        indices[last] = idx;\n+int remainingIndex = index;\n+for (int i = last - 1; i >= 0; i--) {\n+    final int offset = uniCounterOffset[i];\n+    indices[i] = remainingIndex % offset;\n+    remainingIndex /= offset;\n+}\n+if (remainingIndex != 0) {\n+    indices[last] = remainingIndex;\n+} else {\n+    indices[last - 1]--; // handle special case where last index is 0\n+    indices[last] = uniCounterOffset[last - 1] - 1;\n+}\n \n         return indices;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Wrong multidimensional index for [0][1] expected:<0> but was:<-1>",
    "test_result": "FAIL"
}