{
    "patch": "    JSType result = builder.build();\n    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..d759b92a 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,6 +288,7 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n+    JSType result = builder.build();\n     if (result != null) {\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n@@ -296,6 +297,13 @@ public class UnionType extends JSType {\n       return getNativeType(JSTypeNative.NO_TYPE);\n     }\n   }\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n \n   /**\n    * Two union types are equal if they have the same number of alternates",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}