{
    "patch": "if(!isGlobalNameReference(name, scope)) {\n  return; \n}\nif (name.equals(\"e\") && parent.getParent().isCatch()) {\n  return;\n}\nif (isSet) {\n  if (isGlobalScope(scope)) {\n    handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n  } else {\n    handleSetFromLocal(module, scope, n, parent, name);\n  }\n} else {\n  handleGet(module, scope, n, parent, name);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..1b389a1d 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,21 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+if(!isGlobalNameReference(name, scope)) {\n+  return; \n+}\n+if (name.equals(\"e\") && parent.getParent().isCatch()) {\n+  return;\n+}\n+if (isSet) {\n+  if (isGlobalScope(scope)) {\n+    handleSetFromGlobal(module, scope, n, parent, name, isPropAssign, type);\n+  } else {\n+    handleSetFromLocal(module, scope, n, parent, name);\n+  }\n+} else {\n+  handleGet(module, scope, n, parent, name);\n+}\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}