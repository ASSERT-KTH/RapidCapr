{
    "patch": "public class IRFactory {\n  private static final ImmutableSet<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n\n  @VisibleForTesting\n  static Node newNode(int type, String sourceName) {\n    Node n = Node.newNode(type);\n    n.setStaticSourceFile(sourceName);\n    return n;\n  }\n\n  private static void addFunctionParams(Node fnNode, FunctionNode functionNode) {\n    Node paramsNode = new Node(Token.PARAM_LIST);\n\n    for (AstNode param : functionNode.getParams()) {\n      Node paramNode = transform(param);\n\n      if (param instanceof Symbol) {\n        paramNode.setString(param.toSource());\n      }\n\n      paramsNode.addChildToBack(paramNode);\n    }\n\n    fnNode.addChildToFront(paramsNode);\n  }\n\n  private static void addVarsToScope(Node node, Scope scope) {\n    if (node.getType() == Token.VAR) {\n      Node lhs = node.getFirstChild();\n      while (lhs != null) {\n        scope.declareName(\n            lhs.getString(),\n            (lhs.getLineno() << 16) | (lhs.getCharno() & 0xFFFF),\n            lhs.getSymbol());\n        lhs = lhs.getNext();\n      }\n    } else {\n      for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n        addVarsToScope(child, scope);\n      }\n    }\n  }\n\n  private static Node boolNode(boolean value) {\n    return new Node(value ? Token.TRUE : Token.FALSE);\n  }\n\n  public static class TransformDispatcher extends TypeSafeDispatcher {\n    private final String sourceName;\n    private final ErrorReporter errorReporter;\n\n    public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n      this.sourceName = sourceName;\n      this.errorReporter = errorReporter;\n    }\n\n    protected Node processBlock(Block blockNode) {\n      return processGeneric(blockNode);\n    }\n\n    protected Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    protected Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\n            \"Catch clauses are not supported\",\n            sourceName,\n            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    protected Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n          Token.HOOK,\n          transform(exprNode.getTestExpression()),\n          transform(exprNode.getTrueExpression()),\n          transform(exprNode.getFalseExpression()));\n    }\n\n    protected Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        // Change the NAME to LABEL_NAME\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    protected Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n          Token.DO,\n          transformBlock(loopNode.getBody()),\n          transform(loopNode.getCondition()));\n    }\n\n    protected Node processElementGet(ElementGet getNode) {\n      return newNode(\n          Token.GETELEM,\n          transform(getNode.getTarget()),\n          transform(getNode.getElement()));\n    }\n\n    protected Node processEmptyExpression(EmptyExpression exprNode) {\n      return newNode(Token.EMPTY);\n    }\n\n    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    protected Node processForInLoop(ForInLoop loopNode) {\n      return newNode(\n          Token.FOR,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n    }\n\n    protected Node processForLoop(ForLoop loopNode) {\n      Node node = newNode(\n          Token.FOR,\n          transform(loopNode.getInitializer()),\n          transform(loopNode.getCondition()),\n          transform(loopNode.getIncrement()));\n      node.addChildToBack(transformBlock(loopNode.getBody()));\n      return node;\n    }\n\n    protected Node processFunctionCall(FunctionCall callNode) {\n      Node node = newNode(transformTokenType(callNode.getType()),\n                          transform(callNode.getTarget()));\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n      node.setLineno(callNode.getLineno());\n      node.setCharno(position2charno(leftParamPos));\n      return node;\n    }\n\n    protected Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      Node fnNode = newNode(Token.FUNCTION);\n\n      if (name != null) {\n        fnNode.addChildToBack(transform(name));\n      }\n\n      addFunctionParams(fnNode, functionNode);\n\n      fnNode.addChildToBack(transform(functionNode.getBody()));\n      return fnNode;\n    }\n\n    protected Node processIfStatement(IfStatement ifStatementNode) {\n      Node node = newNode(Token.IF);\n\n      node.addChildToBack(transform(ifStatementNode.getCondition()));\n      node.addChildToBack(transformBlock(ifStatementNode.getThenPart()));\n\n      AstNode elsePart = ifStatementNode.getElsePart();\n      if (elsePart != null) {\n        if (elsePart instanceof IfStatement) {\n          // Nested if statement.\n          node.addChildToBack(transform(elsePart));\n        } else {\n          node.addChildToBack(transformBlock(elsePart));\n        }\n      }\n\n      return node;\n    }\n\n    protected Node processLabeledStatement(LabeledStatement labeledStatementNode) {\n      Node node = newNode(Token.LABEL_NAME, labeledStatementNode.getLabelName());\n      node.addChildToBack(transform(labeledStatementNode.getStatement()));\n      return node;\n    }\n\n    protected Node processLetNode(LetNode letNode) {\n      Node node = newNode(Token.LET);\n      addVarsToScope(letNode, node.getScope());\n      node.addChildToBack(transform(letNode.getVariables()));\n      return node;\n    }\n\n    protected Node processName(Name name) {\n      int pos = position(name.getLineno(), name.getAbsolutePosition());\n      return new Node(Token.NAME, name.getIdentifier(), pos);\n    }\n\n    protected Node processNewExpression(NewExpression callNode) {\n      Node node = newNode(Token.NEW, transform(callNode.getTarget()));\n\n      for (AstNode child : callNode.getArguments()) {\n        node.addChildToBack(transform(child));\n      }\n\n      return node;\n    }\n\n    protected Node processNumber(NumberLiteral numberNode) {\n      return new Node(Token.NUMBER, numberNode.getValue());\n    }\n\n    protected Node processObjectLiteral(ObjectLiteral objNode) {\n      Node node = newNode(Token.OBJECTLIT);\n      for (ObjectProperty prop : objNode.getElements()) {\n        Node propNode = transform(prop);\n        node.addChildToBack(propNode);\n      }\n      return node;\n    }\n\n    protected Node processObjectProperty(ObjectProperty propNode) {\n      if (propNode.getLeft() instanceof Name) {\n        Name name = (Name) propNode.getLeft();\n        Node result = new Node(Token.STRING, name.getIdentifier());\n        result.addChildToBack(transform(propNode.getRight()));\n        return result;\n      } else {\n        return new Node(Token.GETELEM,\n            transform(propNode.getLeft()),\n            transform(propNode.getRight()));\n      }\n    }\n\n    protected Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n      Node node = new Node(Token.LP);\n      int lparenAbsolute = exprNode.getAbsolutePosition();\n      int lparenChar = position2charno(lparenAbsolute);\n      node.setLineno(exprNode.getLineno());\n      node.setCharno(lparenChar);\n      node.addChildToBack(transform(exprNode.getExpression()));\n      return node;\n    }\n\n    protected Node processRegExp(RegExpLiteral regexpNode) {\n      return new Node(Token.REGEXP, regexpNode.getValue());\n    }\n\n    protected Node processReturnStatement(ReturnStatement returnNode) {\n      Node node = newNode(Token.RETURN);\n      if (returnNode.getReturnValue() != null) {\n        node.addChildToBack(transform(returnNode.getReturnValue()));\n      }\n      return node;\n    }\n\n    protected Node processString(StringLiteral stringNode) {\n      return new Node(Token.STRING, stringNode.getValue());\n    }\n\n    protected Node processSwitchCase(SwitchCase switchCaseNode) {\n      Node node = newNode(Token.CASE);\n\n      if (switchCaseNode.getExpression() != null) {\n        node.addChildToBack(transform(switchCaseNode.getExpression()));\n      }\n      for (AstNode statement : switchCaseNode.getStatements()) {\n        node.addChildToBack(transform(statement));\n      }\n      return node;\n    }\n\n    protected Node processSwitchStatement(SwitchStatement switchNode) {\n      Node node = newNode(Token.SWITCH);\n      node.addChildToBack(transform(switchNode.getExpression()));\n      for (SwitchCase caseNode : switchNode.getCases()) {\n        node.addChildToBack(transform(caseNode));\n      }\n      return node;\n    }\n\n    protected Node processThrowStatement(ThrowStatement throwNode) {\n      return newNode(Token.T",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..0938dac8 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,23 +384,67 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+public class IRFactory {\n+  private static final ImmutableSet<String> ALLOWED_DIRECTIVES = ImmutableSet.of(\"use strict\");\n+\n+  @VisibleForTesting\n+  static Node newNode(int type, String sourceName) {\n+    Node n = Node.newNode(type);\n+    n.setStaticSourceFile(sourceName);\n+    return n;\n+  }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+  private static void addFunctionParams(Node fnNode, FunctionNode functionNode) {\n+    Node paramsNode = new Node(Token.PARAM_LIST);\n+\n+    for (AstNode param : functionNode.getParams()) {\n+      Node paramNode = transform(param);\n+\n+      if (param instanceof Symbol) {\n+        paramNode.setString(param.toSource());\n+      }\n \n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+      paramsNode.addChildToBack(paramNode);\n     }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n+    fnNode.addChildToFront(paramsNode);\n+  }\n+\n+  private static void addVarsToScope(Node node, Scope scope) {\n+    if (node.getType() == Token.VAR) {\n+      Node lhs = node.getFirstChild();\n+      while (lhs != null) {\n+        scope.declareName(\n+            lhs.getString(),\n+            (lhs.getLineno() << 16) | (lhs.getCharno() & 0xFFFF),\n+            lhs.getSymbol());\n+        lhs = lhs.getNext();\n+      }\n+    } else {\n+      for (Node child = node.getFirstChild(); child != null; child = child.getNext()) {\n+        addVarsToScope(child, scope);\n+      }\n+    }\n+  }\n+\n+  private static Node boolNode(boolean value) {\n+    return new Node(value ? Token.TRUE : Token.FALSE);\n+  }\n+\n+  public static class TransformDispatcher extends TypeSafeDispatcher {\n+    private final String sourceName;\n+    private final ErrorReporter errorReporter;\n+\n+    public TransformDispatcher(String sourceName, ErrorReporter errorReporter) {\n+      this.sourceName = sourceName;\n+      this.errorReporter = errorReporter;\n+    }\n+\n+    protected Node processBlock(Block blockNode) {\n       return processGeneric(blockNode);\n     }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    protected Node processBreakStatement(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n@@ -411,8 +455,7 @@ public class IRFactory {\n       return node;\n     }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n+    protected Node processCatchClause(CatchClause clauseNode) {\n       AstNode catchVar = clauseNode.getVarName();\n       Node node = newNode(Token.CATCH, transform(catchVar));\n       if (clauseNode.getCatchCondition() != null) {\n@@ -425,8 +468,7 @@ public class IRFactory {\n       return node;\n     }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    protected Node processConditionalExpression(ConditionalExpression exprNode) {\n       return newNode(\n           Token.HOOK,\n           transform(exprNode.getTestExpression()),\n@@ -434,8 +476,7 @@ public class IRFactory {\n           transform(exprNode.getFalseExpression()));\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    protected Node processContinueStatement(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n@@ -446,37 +487,31 @@ public class IRFactory {\n       return node;\n     }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    protected Node processDoLoop(DoLoop loopNode) {\n       return newNode(\n           Token.DO,\n           transformBlock(loopNode.getBody()),\n           transform(loopNode.getCondition()));\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n+    protected Node processElementGet(ElementGet getNode) {\n       return newNode(\n           Token.GETELEM,\n           transform(getNode.getTarget()),\n           transform(getNode.getElement()));\n     }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n+    protected Node processEmptyExpression(EmptyExpression exprNode) {\n+      return newNode(Token.EMPTY);\n     }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n+    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n       Node node = newNode(transformTokenType(statementNode.getType()));\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+    protected Node processForInLoop(ForInLoop loopNode) {\n       return newNode(\n           Token.FOR,\n           transform(loopNode.getIterator()),\n@@ -484,8 +519,7 @@ public class IRFactory {\n           transformBlock(loopNode.getBody()));\n     }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n+    protected Node processForLoop(ForLoop loopNode) {\n       Node node = newNode(\n           Token.FOR,\n           transform(loopNode.getInitializer()),\n@@ -495,10 +529,9 @@ public class IRFactory {\n       return node;\n     }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n+    protected Node processFunctionCall(FunctionCall callNode) {\n       Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n+                          transform(callNode.getTarget()));\n       for (AstNode child : callNode.getArguments()) {\n         node.addChildToBack(transform(child));\n       }\n@@ -509,58 +542,143 @@ public class IRFactory {\n       return node;\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n+    protected Node processFunctionNode(FunctionNode functionNode) {\n       Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n+      Node fnNode = newNode(Token.FUNCTION);\n+\n+      if (name != null) {\n+        fnNode.addChildToBack(transform(name));\n+      }\n+\n+      addFunctionParams(fnNode, functionNode);\n+\n+      fnNode.addChildToBack(transform(functionNode.getBody()));\n+      return fnNode;\n+    }\n+\n+    protected Node processIfStatement(IfStatement ifStatementNode) {\n+      Node node = newNode(Token.IF);\n+\n+      node.addChildToBack(transform(ifStatementNode.getCondition()));\n+      node.addChildToBack(transformBlock(ifStatementNode.getThenPart()));\n+\n+      AstNode elsePart = ifStatementNode.getElsePart();\n+      if (elsePart != null) {\n+        if (elsePart instanceof IfStatement) {\n+          // Nested if statement.\n+          node.addChildToBack(transform(elsePart));\n+        } else {\n+          node.addChildToBack(transformBlock(elsePart));\n+        }\n       }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n+\n+      return node;\n+    }\n+\n+    protected Node processLabeledStatement(LabeledStatement labeledStatementNode) {\n+      Node node = newNode(Token.LABEL_NAME, labeledStatementNode.getLabelName());\n+      node.addChildToBack(transform(labeledStatementNode.getStatement()));\n+      return node;\n+    }\n+\n+    protected Node processLetNode(LetNode letNode) {\n+      Node node = newNode(Token.LET);\n+      addVarsToScope(letNode, node.getScope());\n+      node.addChildToBack(transform(letNode.getVariables()));\n+      return node;\n+    }\n+\n+    protected Node processName(Name name) {\n+      int pos = position(name.getLineno(), name.getAbsolutePosition());\n+      return new Node(Token.NAME, name.getIdentifier(), pos);\n+    }\n+\n+    protected Node processNewExpression(NewExpression callNode) {\n+      Node node = newNode(Token.NEW, transform(callNode.getTarget()));\n+\n+      for (AstNode child : callNode.getArguments()) {\n+        node.addChildToBack(transform(child));\n       }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n+      return node;\n+    }\n+\n+    protected Node processNumber(NumberLiteral numberNode) {\n+      return new Node(Token.NUMBER, numberNode.getValue());\n+    }\n+\n+    protected Node processObjectLiteral(ObjectLiteral objNode) {\n+      Node node = newNode(Token.OBJECTLIT);\n+      for (ObjectProperty prop : objNode.getElements()) {\n+        Node propNode = transform(prop);\n+        node.addChildToBack(propNode);\n+      }\n+      return node;\n+    }\n+\n+    protected Node processObjectProperty(ObjectProperty propNode) {\n+      if (propNode.getLeft() instanceof Name) {\n+        Name name = (Name) propNode.getLeft();\n+        Node result = new Node(Token.STRING, name.getIdentifier());\n+        result.addChildToBack(transform(propNode.getRight()));\n+        return result;\n       } else {\n-        lp.setLineno(functionNode.getLineno());\n+        return new Node(Token.GETELEM,\n+            transform(propNode.getLeft()),\n+            transform(propNode.getRight()));\n+      }\n+    }\n+\n+    protected Node processParenthesizedExpression(ParenthesizedExpression exprNode) {\n+      Node node = new Node(Token.LP);\n+      int lparenAbsolute = exprNode.getAbsolutePosition();\n+      int lparenChar = position2charno(lparenAbsolute);\n+      node.setLineno(exprNode.getLineno());\n+      node.setCharno(lparenChar);\n+      node.addChildToBack(transform(exprNode.getExpression()));\n+      return node;\n+    }\n+\n+    protected Node processRegExp(RegExpLiteral regexpNode) {\n+      return new Node(Token.REGEXP, regexpNode.getValue());\n+    }\n+\n+    protected Node processReturnStatement(ReturnStatement returnNode) {\n+      Node node = newNode(Token.RETURN);\n+      if (returnNode.getReturnValue() != null) {\n+        node.addChildToBack(transform(returnNode.getReturnValue()));\n       }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+      return node;\n+    }\n+\n+    protected Node processString(StringLiteral stringNode) {\n+      return new Node(Token.STRING, stringNode.getValue());\n+    }\n+\n+    protected Node processSwitchCase(SwitchCase switchCaseNode) {\n+      Node node = newNode(Token.CASE);\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n+      if (switchCaseNode.getExpression() != null) {\n+        node.addChildToBack(transform(switchCaseNode.getExpression()));\n+      }\n+      for (AstNode statement : switchCaseNode.getStatements()) {\n+        node.addChildToBack(transform(statement));\n       }\n-      node.addChildToBack(lp);\n+      return node;\n+    }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    protected Node processSwitchStatement(SwitchStatement switchNode) {\n+      Node node = newNode(Token.SWITCH);\n+      node.addChildToBack(transform(switchNode.getExpression()));\n+      for (SwitchCase caseNode : switchNode.getCases()) {\n+        node.addChildToBack(transform(caseNode));\n+      }\n+      return node;\n     }\n \n+    protected Node processThrowStatement(ThrowStatement throwNode) {\n+      return newNode(Token.T\n+\n     @Override\n     Node processIfStatement(IfStatement statementNode) {\n       Node node = newNode(Token.IF);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}