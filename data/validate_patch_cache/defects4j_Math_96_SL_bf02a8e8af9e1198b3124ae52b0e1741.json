{
    "patch": "@Override\npublic int hashCode() {\n    int result = 17;\n    long tempReal = Double.doubleToLongBits(getReal());\n    result = 31 * result + (int) (tempReal ^ (tempReal >>> 32));\n    long tempImaginary = Double.doubleToLongBits(getImaginary());\n    result = 31 * result + (int) (tempImaginary ^ (tempImaginary >>> 32));\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..54e57074c 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,15 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+@Override\n+public int hashCode() {\n+    int result = 17;\n+    long tempReal = Double.doubleToLongBits(getReal());\n+    result = 31 * result + (int) (tempReal ^ (tempReal >>> 32));\n+    long tempImaginary = Double.doubleToLongBits(getImaginary());\n+    result = 31 * result + (int) (tempImaginary ^ (tempImaginary >>> 32));\n+    return result;\n+}\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}