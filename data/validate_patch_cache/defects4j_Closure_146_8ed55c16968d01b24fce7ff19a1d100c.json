{
    "patch": "public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE: {\n        ObjectType objTypeThis = this.toMaybeObjectType();\n        ObjectType objTypeThat = that.toMaybeObjectType();\n        // Check for non-overlapping properties\n        if (objTypeThis != null && objTypeThat != null) {\n          ObjectType greaterType = objTypeThis.isSubtypeOf(objTypeThat) ? objTypeThis : objTypeThat;\n          ObjectType smallerType = greaterType == objTypeThis ? objTypeThat : objTypeThis;\n          PropertyMap greaterPropMap = greaterType.getOwnPropertyMap();\n          for (String propName : smallerType.getOwnPropertyNames()) {\n            if (greaterPropMap.hasProp(propName)) {\n              JSType greaterPropType = greaterPropMap.getType(propName);\n              JSType smallerPropType = smallerType.getOwnPropertyJSType(propName);\n              if (!greaterPropType.isSubtype(smallerPropType)) {\n                return new TypePair(smallerPropType, greaterPropType);\n              }\n            }\n          }\n        }\n        return new TypePair(this, that);\n      }\n\n      case UNKNOWN: {\n        ObjectType objTypeThis = this.toMaybeObjectType();\n        ObjectType objTypeThat = that.toMaybeObjectType();\n        if (objTypeThis != null && objTypeThat != null) {\n          ObjectType diffType = ObjectType.diff(objTypeThis, objTypeThat);\n          if (diffType != null) {\n            return new TypePair(null, diffType);\n          }\n        }\n        return new TypePair(this, that);\n      }\n    }\n\n    // switch case is exhaustive\n    throw new IllegalStateException();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..a5b38d72 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,7 +693,7 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n+public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n     if (that instanceof UnionType) {\n       TypePair p = that.getTypesUnderInequality(this);\n@@ -705,9 +705,38 @@ public abstract class JSType implements Serializable {\n       case TRUE:\n         return new TypePair(null, null);\n \n-      case FALSE:\n-      case UNKNOWN:\n+      case FALSE: {\n+        ObjectType objTypeThis = this.toMaybeObjectType();\n+        ObjectType objTypeThat = that.toMaybeObjectType();\n+        // Check for non-overlapping properties\n+        if (objTypeThis != null && objTypeThat != null) {\n+          ObjectType greaterType = objTypeThis.isSubtypeOf(objTypeThat) ? objTypeThis : objTypeThat;\n+          ObjectType smallerType = greaterType == objTypeThis ? objTypeThat : objTypeThis;\n+          PropertyMap greaterPropMap = greaterType.getOwnPropertyMap();\n+          for (String propName : smallerType.getOwnPropertyNames()) {\n+            if (greaterPropMap.hasProp(propName)) {\n+              JSType greaterPropType = greaterPropMap.getType(propName);\n+              JSType smallerPropType = smallerType.getOwnPropertyJSType(propName);\n+              if (!greaterPropType.isSubtype(smallerPropType)) {\n+                return new TypePair(smallerPropType, greaterPropType);\n+              }\n+            }\n+          }\n+        }\n+        return new TypePair(this, that);\n+      }\n+\n+      case UNKNOWN: {\n+        ObjectType objTypeThis = this.toMaybeObjectType();\n+        ObjectType objTypeThat = that.toMaybeObjectType();\n+        if (objTypeThis != null && objTypeThat != null) {\n+          ObjectType diffType = ObjectType.diff(objTypeThis, objTypeThat);\n+          if (diffType != null) {\n+            return new TypePair(null, diffType);\n+          }\n+        }\n         return new TypePair(this, that);\n+      }\n     }\n \n     // switch case is exhaustive",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}