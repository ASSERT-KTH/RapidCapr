{
    "patch": "case REGULA_FALSI:\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    if (--maximalIterationCount == 0) {\n        throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED,\n                                    getMaximalIterationCount());\n    }\n    if (FastMath.abs(f0) > FastMath.abs(f1)) {\n        // Move x0 closer to a, x1 closer to b.\n        f0 *= 0.5;\n    } else {\n        // Move x1 closer to a, x0 closer to b.\n        double temp = f1;\n        f1 = f0;\n        f0 = temp * fx / (temp - fx);\n        temp = x1;\n        x1 = x0;\n        x0 = temp - (temp - x1) * f1 / (f1 - f0);\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..6d9ff30d4 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,26 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    if (--maximalIterationCount == 0) {\n+        throw new ConvergenceException(LocalizedFormats.MAXIMAL_ITERATIONS_EXCEEDED,\n+                                    getMaximalIterationCount());\n+    }\n+    if (FastMath.abs(f0) > FastMath.abs(f1)) {\n+        // Move x0 closer to a, x1 closer to b.\n+        f0 *= 0.5;\n+    } else {\n+        // Move x1 closer to a, x0 closer to b.\n+        double temp = f1;\n+        f1 = f0;\n+        f0 = temp * fx / (temp - fx);\n+        temp = x1;\n+        x1 = x0;\n+        x0 = temp - (temp - x1) * f1 / (f1 - f0);\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}