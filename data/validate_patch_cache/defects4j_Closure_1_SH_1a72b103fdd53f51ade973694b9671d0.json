{
    "patch": "Node function = fnScope.getRootNode();\n      Preconditions.checkState(function.isFunction());\n      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n      }\n\n      Node argList = getFunctionArgList(function);\n      boolean modifyCallers =\n          modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n      if (!modifyCallers) {\n        // Strip unreferenced args off the end of the function declaration.\n        Node lastArg;\n        while ((lastArg = argList.getLastChild()) != null) {\n          Var var = fnScope.getVar(lastArg.getString());\n          if (!referenced.contains(var)) {\n            argList.removeChild(lastArg);\n            compiler.reportCodeChange();\n          } else {\n            break;\n          }\n        }\n      } else {\n        Node parent = function.getParent();\n        int functionIndex = parent.getIndexOfChild(function);\n        callSiteOptimizer.optimize(fnScope, referenced, parent, functionIndex, argList);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..3ec12084 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,33 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+Node function = fnScope.getRootNode();\n+      Preconditions.checkState(function.isFunction());\n+      if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+        // The parameters object literal setters can not be removed.\n+        return;\n+      }\n+\n+      Node argList = getFunctionArgList(function);\n+      boolean modifyCallers =\n+          modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+      if (!modifyCallers) {\n+        // Strip unreferenced args off the end of the function declaration.\n+        Node lastArg;\n+        while ((lastArg = argList.getLastChild()) != null) {\n+          Var var = fnScope.getVar(lastArg.getString());\n+          if (!referenced.contains(var)) {\n+            argList.removeChild(lastArg);\n+            compiler.reportCodeChange();\n+          } else {\n+            break;\n+          }\n+        }\n+      } else {\n+        Node parent = function.getParent();\n+        int functionIndex = parent.getIndexOfChild(function);\n+        callSiteOptimizer.optimize(fnScope, referenced, parent, functionIndex, argList);\n+      }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: method optimize in class CallSiteOptimizer cannot be applied to given types;",
    "test_result": "ERROR"
}