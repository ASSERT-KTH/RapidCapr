{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            chrono = (chrono instanceof ZonedChronology) ?\n                    ((ZonedChronology) chrono).withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger())) :\n                    chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n            instant.setChronology(chrono);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n            instant.setChronology(chrono);\n        } else if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d03e9fc5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,26 +702,23 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+        long instantLocal = instant.getMillis() + chrono.getZone().getOffset(instant.getMillis());\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n+            chrono = (chrono instanceof ZonedChronology) ?\n+                    ((ZonedChronology) chrono).withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger())) :\n+                    chrono.withZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n+            instant.setChronology(chrono);\n         } else if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n+            instant.setChronology(chrono);\n+        } else if (iZone != null) {\n             instant.setZone(iZone);\n         }\n         return newPos;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}