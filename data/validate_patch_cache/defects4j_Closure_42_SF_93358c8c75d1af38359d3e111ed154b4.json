{
    "patch": "private static class TransformDispatcher implements TypeSafeDispatcher {\n  private final IRFactory irFactory;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n\n  TransformDispatcher(IRFactory irFactory, ErrorReporter errorReporter, String sourceName) {\n    this.irFactory = irFactory;\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n  }\n\n  Node process(Node n) {\n    return TypeSafeDispatcher.super.process(n);\n  }\n\n  @Override\n  public Node processBlock(Block blockNode) {\n    return irFactory.processBlock(blockNode);\n  }\n\n  @Override\n  public Node processBreakStatement(BreakStatement statementNode) {\n    return irFactory.processBreakStatement(statementNode);\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause clauseNode) {\n    return irFactory.processCatchClause(clauseNode);\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression exprNode) {\n    return irFactory.processConditionalExpression(exprNode);\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement statementNode) {\n    return irFactory.processContinueStatement(statementNode);\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop loopNode) {\n    return irFactory.processDoLoop(loopNode);\n  }\n\n  @Override\n  public Node processElementGet(ElementGet getNode) {\n    return irFactory.processElementGet(getNode);\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression exprNode) {\n    return irFactory.processEmptyExpression(exprNode);\n  }\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement statementNode) {\n    return irFactory.processExpressionStatement(statementNode);\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop loopNode) {\n    return irFactory.processForInLoop(loopNode);\n  }\n\n  @Override\n  public Node processForOfLoop(ForOfLoop loopNode) {\n    return irFactory.processForOfLoop(loopNode);\n  }\n\n  @Override\n  public Node processForLoop(ForLoop loopNode) {\n    return irFactory.processForLoop(loopNode);\n  }\n\n  @Override\n  public Node processFunctionCall(FunctionCall callNode) {\n    return irFactory.processFunctionCall(callNode);\n  }\n\n  @Override\n  public Node processFunctionNode(FunctionNode functionNode) {\n    return irFactory.processFunction(functionNode);\n  }\n\n  @Override\n  public Node processInfixExpression(InfixExpression infixNode) {\n    return irFactory.processInfixExpression(infixNode);\n  }\n\n  @Override\n  public Node processLabeledStatement(LabeledStatement labeledNode) {\n    return irFactory.processLabeledStatement(labeledNode);\n  }\n\n  @Override\n  public Node processName(Name nameNode) {\n    return irFactory.processName(nameNode);\n  }\n\n  @Override\n  public Node processNewExpression(NewExpression newExprNode) {\n    return irFactory.processNewExpression(newExprNode);\n  }\n\n  @Override\n  public Node processNode(Node node) {\n    return irFactory.processNode(node);\n  }\n\n  @Override\n  public Node processNumber(NumberLiteral numberNode) {\n    return irFactory.processNumber(numberNode);\n  }\n\n  @Override\n  public Node processObjectLiteral(ObjectLiteral objLitNode) {\n    return irFactory.processObjectLiteral(objLitNode);\n  }\n\n  @Override\n  public Node processParenthesizedExpression(ParenthesizedExpression parenExprNode) {\n    return irFactory.processParenthesizedExpression(parenExprNode);\n  }\n\n  @Override\n  public Node processPropertyGet(PropertyGet getPropNode) {\n    return irFactory.processPropertyGet(getPropNode);\n  }\n\n  @Override\n  public Node processRegExpLiteral(RegExpLiteral regexpNode) {\n    return irFactory.processRegExpLiteral(regexpNode);\n  }\n\n  @Override\n  public Node processReturnStatement(ReturnStatement returnNode) {\n    return irFactory.processReturnStatement(returnNode);\n  }\n\n  @Override\n  public Node processString(StringLiteral stringNode) {\n    return irFactory.processString(stringNode);\n  }\n\n  @Override\n  public Node processSwitchCase(SwitchCase switchCaseNode) {\n    return irFactory.processSwitchCase(switchCaseNode);\n  }\n\n  @Override\n  public Node processSwitchStatement(SwitchStatement switchNode) {\n    return irFactory.processSwitch(switchNode);\n  }\n\n  @Override\n  public Node processThrowStatement(ThrowStatement statementNode) {\n    return irFactory.processThrowStatement(statementNode);\n  }\n\n  @Override\n  public Node processTryCatchFinally(TryCatchFinally tryCatchFinallyNode) {\n    return irFactory.processTryCatchFinally(tryCatchFinallyNode);\n  }\n\n  @Override\n  public Node processUnaryExpression(UnaryExpression unaryNode) {\n    return irFactory.processUnaryExpression(unaryNode);\n  }\n\n  @Override\n  public Node processVariables(VariableDeclaration declarationNode) {\n    return irFactory.processVariables(declarationNode);\n  }\n\n  @Override\n  public Node processWhileLoop(WhileLoop loopNode) {\n    return irFactory.processWhileLoop(loopNode);\n  }\n\n  @Override\n  public Node processWithStatement(WithStatement withNode) {\n    return irFactory.processWithStatement(withNode);\n  }\n\n  @Override\n  public Node processScript(Script scriptNode) {\n    return irFactory.processScript(scriptNode);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..9d07ceb6 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -472,107 +472,196 @@ class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+private static class TransformDispatcher implements TypeSafeDispatcher {\n+  private final IRFactory irFactory;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+  TransformDispatcher(IRFactory irFactory, ErrorReporter errorReporter, String sourceName) {\n+    this.irFactory = irFactory;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+  }\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n+  Node process(Node n) {\n+    return TypeSafeDispatcher.super.process(n);\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  @Override\n+  public Node processBlock(Block blockNode) {\n+    return irFactory.processBlock(blockNode);\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processBreakStatement(BreakStatement statementNode) {\n+    return irFactory.processBreakStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processCatchClause(CatchClause clauseNode) {\n+    return irFactory.processCatchClause(clauseNode);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return irFactory.processConditionalExpression(exprNode);\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processContinueStatement(ContinueStatement statementNode) {\n+    return irFactory.processContinueStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n+  @Override\n+  public Node processDoLoop(DoLoop loopNode) {\n+    return irFactory.processDoLoop(loopNode);\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processElementGet(ElementGet getNode) {\n+    return irFactory.processElementGet(getNode);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression exprNode) {\n+    return irFactory.processEmptyExpression(exprNode);\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement statementNode) {\n+    return irFactory.processExpressionStatement(statementNode);\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  @Override\n+  public Node processForInLoop(ForInLoop loopNode) {\n+    return irFactory.processForInLoop(loopNode);\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Override\n+  public Node processForOfLoop(ForOfLoop loopNode) {\n+    return irFactory.processForOfLoop(loopNode);\n+  }\n+\n+  @Override\n+  public Node processForLoop(ForLoop loopNode) {\n+    return irFactory.processForLoop(loopNode);\n+  }\n+\n+  @Override\n+  public Node processFunctionCall(FunctionCall callNode) {\n+    return irFactory.processFunctionCall(callNode);\n+  }\n+\n+  @Override\n+  public Node processFunctionNode(FunctionNode functionNode) {\n+    return irFactory.processFunction(functionNode);\n+  }\n+\n+  @Override\n+  public Node processInfixExpression(InfixExpression infixNode) {\n+    return irFactory.processInfixExpression(infixNode);\n+  }\n+\n+  @Override\n+  public Node processLabeledStatement(LabeledStatement labeledNode) {\n+    return irFactory.processLabeledStatement(labeledNode);\n+  }\n+\n+  @Override\n+  public Node processName(Name nameNode) {\n+    return irFactory.processName(nameNode);\n+  }\n+\n+  @Override\n+  public Node processNewExpression(NewExpression newExprNode) {\n+    return irFactory.processNewExpression(newExprNode);\n+  }\n+\n+  @Override\n+  public Node processNode(Node node) {\n+    return irFactory.processNode(node);\n+  }\n+\n+  @Override\n+  public Node processNumber(NumberLiteral numberNode) {\n+    return irFactory.processNumber(numberNode);\n+  }\n+\n+  @Override\n+  public Node processObjectLiteral(ObjectLiteral objLitNode) {\n+    return irFactory.processObjectLiteral(objLitNode);\n+  }\n+\n+  @Override\n+  public Node processParenthesizedExpression(ParenthesizedExpression parenExprNode) {\n+    return irFactory.processParenthesizedExpression(parenExprNode);\n+  }\n+\n+  @Override\n+  public Node processPropertyGet(PropertyGet getPropNode) {\n+    return irFactory.processPropertyGet(getPropNode);\n+  }\n+\n+  @Override\n+  public Node processRegExpLiteral(RegExpLiteral regexpNode) {\n+    return irFactory.processRegExpLiteral(regexpNode);\n+  }\n+\n+  @Override\n+  public Node processReturnStatement(ReturnStatement returnNode) {\n+    return irFactory.processReturnStatement(returnNode);\n+  }\n+\n+  @Override\n+  public Node processString(StringLiteral stringNode) {\n+    return irFactory.processString(stringNode);\n+  }\n+\n+  @Override\n+  public Node processSwitchCase(SwitchCase switchCaseNode) {\n+    return irFactory.processSwitchCase(switchCaseNode);\n+  }\n+\n+  @Override\n+  public Node processSwitchStatement(SwitchStatement switchNode) {\n+    return irFactory.processSwitch(switchNode);\n+  }\n+\n+  @Override\n+  public Node processThrowStatement(ThrowStatement statementNode) {\n+    return irFactory.processThrowStatement(statementNode);\n+  }\n+\n+  @Override\n+  public Node processTryCatchFinally(TryCatchFinally tryCatchFinallyNode) {\n+    return irFactory.processTryCatchFinally(tryCatchFinallyNode);\n+  }\n+\n+  @Override\n+  public Node processUnaryExpression(UnaryExpression unaryNode) {\n+    return irFactory.processUnaryExpression(unaryNode);\n+  }\n+\n+  @Override\n+  public Node processVariables(VariableDeclaration declarationNode) {\n+    return irFactory.processVariables(declarationNode);\n+  }\n+\n+  @Override\n+  public Node processWhileLoop(WhileLoop loopNode) {\n+    return irFactory.processWhileLoop(loopNode);\n+  }\n+\n+  @Override\n+  public Node processWithStatement(WithStatement withNode) {\n+    return irFactory.processWithStatement(withNode);\n+  }\n+\n+  @Override\n+  public Node processScript(Script scriptNode) {\n+    return irFactory.processScript(scriptNode);\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: class IRFactory.TransformDispatcher is already defined in class IRFactory",
    "test_result": "ERROR"
}