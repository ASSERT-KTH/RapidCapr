{
    "patch": "    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n            StringBuffer appendTo, boolean escapingOn, DateFormatSymbols symbols) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            case 'D':\n            case 'd':\n                int index = pos.getIndex();\n                String style = \"\";\n                while (index < pattern.length() && pattern.charAt(index) == c[pos.getIndex()]) {\n                    style += pattern.charAt(index);\n                    index++;\n                }\n                String format;\n                if (style.equals(\"DD\") || style.equals(\"dd\")) {\n                    format = symbols.getLocalPatternChars().charAt(6) + \"\" + symbols.getLocalPatternChars().charAt(7);\n                } else {\n                    format = symbols.getLocalPatternChars().charAt(6) + \"\";\n                }\n                SimpleDateFormat dateFormat = new SimpleDateFormat(format, symbols);\n                appendTo.append(dateFormat.format(new Date()));\n                pos.setIndex(index);\n                lastHold = index;\n                break;\n            default:\n                next(pos);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..9aa051c2 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -415,7 +415,7 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @return <code>appendTo</code>\n      */\n     private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n+            StringBuffer appendTo, boolean escapingOn, DateFormatSymbols symbols) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n@@ -435,6 +435,25 @@ public class ExtendedMessageFormat extends MessageFormat {\n                 next(pos);\n                 return appendTo == null ? null : appendTo.append(c, lastHold,\n                         pos.getIndex() - lastHold);\n+            case 'D':\n+            case 'd':\n+                int index = pos.getIndex();\n+                String style = \"\";\n+                while (index < pattern.length() && pattern.charAt(index) == c[pos.getIndex()]) {\n+                    style += pattern.charAt(index);\n+                    index++;\n+                }\n+                String format;\n+                if (style.equals(\"DD\") || style.equals(\"dd\")) {\n+                    format = symbols.getLocalPatternChars().charAt(6) + \"\" + symbols.getLocalPatternChars().charAt(7);\n+                } else {\n+                    format = symbols.getLocalPatternChars().charAt(6) + \"\";\n+                }\n+                SimpleDateFormat dateFormat = new SimpleDateFormat(format, symbols);\n+                appendTo.append(dateFormat.format(new Date()));\n+                pos.setIndex(index);\n+                lastHold = index;\n+                break;\n             default:\n                 next(pos);\n             }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}