{
    "patch": "List<BinaryExpr> binaryExprs = new ArrayList<>();\nfor (int i = 0; i < exprs.size(); i++) {\n    String op = ops.getOrDefault(i, \"or\");\n    if (\"in\".equals(op)) {\n        BinaryExpr binaryExpr = new BinaryExpr();\n        binaryExpr.setLeft(exprs.get(i));\n        binaryExpr.setOperator(Operator.contains);\n        binaryExpr.setRight(elements.get(i));\n        binaryExprs.add(binaryExpr);\n    } else {\n        binaryExprs.add(new BinaryExpr().setRight(elements.get(i)).setLeft(exprs.get(i)).setOperator(Operator.fromString(op)));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..d72ef43d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,6 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}