{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n        int defaultYear = chrono.year().get(instantLocal);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (newPos >= 0) {\n            int parsedYear = bucket.year;\n            Chronology parsedChrono = bucket.chronology;\n            DateTimeZone parsedZone = bucket.getZone();\n            int parsedOffset = bucket.getOffsetInteger();\n            if (parsedYear <= 0 && parsedChrono != null) {\n                parsedChrono = parsedChrono.withUTC();\n            }\n            if (parsedYear > 0 && parsedChrono != null && iPivotYear != null && parsedYear < iPivotYear.intValue()) {\n                parsedChrono = parsedChrono.withUTC();\n                parsedYear = iPivotYear.intValue();\n            }\n            if (parsedChrono != null) {\n                if (parsedZone == null) {\n                    parsedZone = parsedChrono.getZone();\n                }\n                if (iZone != null) {\n                    parsedZone = iZone;\n                }\n                if (parsedChrono != chrono || parsedOffset != 0) {\n                    chrono = parsedChrono;\n                    instantLocal = parsedChrono.computeMillis(parsedZone, parsedYear, bucket.monthOfYear, bucket.dayOfMonth, bucket.millisOfDay, parsedOffset);\n                } else {\n                    instantLocal = chrono.getDateTimeMillis(defaultYear, bucket.monthOfYear, bucket.dayOfMonth, bucket.millisOfDay);\n                }\n            } else if (parsedOffset != 0) {\n                instantLocal -= parsedOffset;\n            }\n\n            instant.setMillis(instantLocal);\n            if (parsedChrono != null) {\n                instant.setChronology(parsedChrono);\n            }\n            if (parsedZone != null) {\n                instant.setZone(parsedZone);\n            }\n        } else {\n            instant.setMillis(instantLocal);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d9550ebc 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -712,17 +712,44 @@ public class DateTimeFormatter {\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        if (newPos >= 0) {\n+            int parsedYear = bucket.year;\n+            Chronology parsedChrono = bucket.chronology;\n+            DateTimeZone parsedZone = bucket.getZone();\n             int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+            if (parsedYear <= 0 && parsedChrono != null) {\n+                parsedChrono = parsedChrono.withUTC();\n+            }\n+            if (parsedYear > 0 && parsedChrono != null && iPivotYear != null && parsedYear < iPivotYear.intValue()) {\n+                parsedChrono = parsedChrono.withUTC();\n+                parsedYear = iPivotYear.intValue();\n+            }\n+            if (parsedChrono != null) {\n+                if (parsedZone == null) {\n+                    parsedZone = parsedChrono.getZone();\n+                }\n+                if (iZone != null) {\n+                    parsedZone = iZone;\n+                }\n+                if (parsedChrono != chrono || parsedOffset != 0) {\n+                    chrono = parsedChrono;\n+                    instantLocal = parsedChrono.computeMillis(parsedZone, parsedYear, bucket.monthOfYear, bucket.dayOfMonth, bucket.millisOfDay, parsedOffset);\n+                } else {\n+                    instantLocal = chrono.getDateTimeMillis(defaultYear, bucket.monthOfYear, bucket.dayOfMonth, bucket.millisOfDay);\n+                }\n+            } else if (parsedOffset != 0) {\n+                instantLocal -= parsedOffset;\n+            }\n+\n+            instant.setMillis(instantLocal);\n+            if (parsedChrono != null) {\n+                instant.setChronology(parsedChrono);\n+            }\n+            if (parsedZone != null) {\n+                instant.setZone(parsedZone);\n+            }\n+        } else {\n+            instant.setMillis(instantLocal);\n         }\n         return newPos;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}