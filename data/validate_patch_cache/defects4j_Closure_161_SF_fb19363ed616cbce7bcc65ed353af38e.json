{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n\n  if (right.getType() != Token.NUMBER) {\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  if (left.isArrayLit()) {\n    if (left.isShorthandProperty() || left.isAssign()) {\n      return n;\n    }\n    Node[] children = left.getChildren();\n    if (intIndex < children.length) {\n      Node elem = children[intIndex];\n      if (elem.getType() == Token.EMPTY) {\n        elem = NodeUtil.newUndefinedNode(elem);\n      } else {\n        left.removeChild(elem);\n      }\n      parent.replaceChild(n, elem);\n      reportCodeChange();\n      return elem;\n    } else {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n  } else {\n    Node elem = NodeUtil.newGetElem(left.cloneTree(), right.cloneTree());\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..8a4a8c01 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,52 +1274,51 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n+  if (right.getType() != Token.NUMBER) {\n+    return n;\n+  }\n \n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n+  if (intIndex < 0) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+  if (left.isArrayLit()) {\n+    if (left.isShorthandProperty() || left.isAssign()) {\n       return n;\n     }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n-\n-    if (elem == null) {\n+    Node[] children = left.getChildren();\n+    if (intIndex < children.length) {\n+      Node elem = children[intIndex];\n+      if (elem.getType() == Token.EMPTY) {\n+        elem = NodeUtil.newUndefinedNode(elem);\n+      } else {\n+        left.removeChild(elem);\n+      }\n+      parent.replaceChild(n, elem);\n+      reportCodeChange();\n+      return elem;\n+    } else {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+  } else {\n+    Node elem = NodeUtil.newGetElem(left.cloneTree(), right.cloneTree());\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}