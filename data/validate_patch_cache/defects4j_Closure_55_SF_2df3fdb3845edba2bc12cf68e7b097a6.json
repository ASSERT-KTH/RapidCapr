{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  return NodeUtil.isFunctionExpression(n) ||\n         (n.isCall() && n.getFirstChild().isObjectLit() && NodeUtil.isFunctionExpression(n.getLastChild()));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..c4da59d4 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,10 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  return NodeUtil.isFunctionExpression(n) ||\n+         (n.isCall() && n.getFirstChild().isObjectLit() && NodeUtil.isFunctionExpression(n.getLastChild()));\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}