{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n  if (n.getType() == Token.FUNCTION) {\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null && (jsDoc.hasThisType() || jsDoc.isOverride())) {\n      // Don't traverse functions that have the @this or @override annotation.\n      if (jsDoc.isConstructor() || jsDoc.isInterface()) {\n          // Constructors and interfaces should not use the `this` object in a dangerous way.\n          return isThisObjectSafe(n);\n      }\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {}; // or\n    // var a = {x: function() {}};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (NodeUtil.isGet(parent)) {\n      Node lhs = parent.getFirstChild();\n      if (lhs.getType() == Token.GETPROP &&\n          lhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n      Node llhs = lhs.getFirstChild();\n      if (llhs.getType() == Token.GETPROP &&\n          llhs.getLastChild().getString().equals(\"prototype\")) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nprivate boolean isThisObjectSafe(Node functionNode) {\n  Scope functionScope = getScope(functionNode);\n  TypeIRegistry registry = t.getCompiler().getTypeIRegistry();\n  for (Var var : functionScope.getVarIterable()) {\n    // Check if the var is a parameter named \"this\".\n    if (var.getName().equals(\"this\") && var.getParentNode().isParamList()) {\n      // Check if the parameter has a type annotation that indicates it is unsafe.\n      JSDocInfo paramJsDoc = var.getJSDocInfo();\n      if (paramJsDoc != null) {\n        JSTypeExpression typeExpr = paramJsDoc.getType();\n        if (typeExpr != null) {\n          JSType type = typeExpr.evaluate(registry);\n          if (type != null && !type.isUnknownType() && !type.isSubtype(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {\n            return false;\n          }\n        }\n      }\n      break;\n    }\n  }\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..9870ef22 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,104 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+  if (n.getType() == Token.FUNCTION) {\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null && (jsDoc.hasThisType() || jsDoc.isOverride())) {\n+      // Don't traverse functions that have the @this or @override annotation.\n+      if (jsDoc.isConstructor() || jsDoc.isInterface()) {\n+          // Constructors and interfaces should not use the `this` object in a dangerous way.\n+          return isThisObjectSafe(n);\n       }\n+      return false;\n+    }\n+\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() { }; // or\n+    // function a() {} // or\n+    // a.x = function() {}; // or\n+    // var a = {x: function() {}};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+\n+          // object literal keys\n+          pType == Token.STRING ||\n+          pType == Token.NUMBER)) {\n+      return false;\n+    }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (NodeUtil.isGet(parent)) {\n+      Node lhs = parent.getFirstChild();\n+      if (lhs.getType() == Token.GETPROP &&\n+          lhs.getLastChild().getString().equals(\"prototype\")) {\n+        return false;\n+      }\n+      Node llhs = lhs.getFirstChild();\n+      if (llhs.getType() == Token.GETPROP &&\n+          llhs.getLastChild().getString().equals(\"prototype\")) {\n         return false;\n       }\n-\n-      // Don't traverse functions that are getting lent to a prototype.\n     }\n+  }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+    }\n+  }\n+\n+  return true;\n+}\n+\n+private boolean isThisObjectSafe(Node functionNode) {\n+  Scope functionScope = getScope(functionNode);\n+  TypeIRegistry registry = t.getCompiler().getTypeIRegistry();\n+  for (Var var : functionScope.getVarIterable()) {\n+    // Check if the var is a parameter named \"this\".\n+    if (var.getName().equals(\"this\") && var.getParentNode().isParamList()) {\n+      // Check if the parameter has a type annotation that indicates it is unsafe.\n+      JSDocInfo paramJsDoc = var.getJSDocInfo();\n+      if (paramJsDoc != null) {\n+        JSTypeExpression typeExpr = paramJsDoc.getType();\n+        if (typeExpr != null) {\n+          JSType type = typeExpr.evaluate(registry);\n+          if (type != null && !type.isUnknownType() && !type.isSubtype(registry.getNativeType(JSTypeNative.OBJECT_TYPE))) {\n             return false;\n           }\n         }\n       }\n+      break;\n     }\n-\n-    return true;\n   }\n+  return true;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}