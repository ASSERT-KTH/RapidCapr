{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Don't traverse into functions that are constructors or have the @this\n    // or @override annotations.\n    if (n.isFunction()) {\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN\n          || n.getFirstChild() != null && (n.getFirstChild().isAssign() || n.getFirstChild().isExprResult()))\n          && !isLValue(n, parent)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.isAssign()) {\n        Node lhs = parent.getFirstChild();\n        if (lhs.isGetProp() && (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild()\n            .getString().equals(\"caller\") || lhs.getLastChild().getString().equals(\"arguments\"))) {\n          return false;\n        } else if (lhs.isGetElem()) {\n          Node getElem = lhs;\n          // Get value of getelem expression so we can check if it's a prototype reference.\n          while (getElem.isGetElem()) {\n            getElem = getElem.getLastChild();\n          }\n          String propName = getElem.getString();\n          if ((propName == \"prototype\") || (propName == \"caller\") || (propName == \"arguments\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    if (parent != null && parent.isAssign()) {\n      if (n == parent.getFirstChild() && !n.isGetProp() && !isFunctionLValue(parent)) {\n        if (assignLhsChild == null) {\n          assignLhsChild = n;\n        }\n      } else if (n.isGetProp() && NodeUtil.isObjectCallMethod(parent)) {\n        // Don't traverse the arguments of call/apply for object methods.\n        Node callee = parent.getFirstChild();\n        if (callee.isGetProp()) {\n          Node propNode = callee.getLastChild();\n          if (propNode.getString().equals(\"call\") || propNode.getString().equals(\"apply\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    // Skip switch cases.\n    return n.isSwitch() || (parent != null && (parent.isSwitchCase() || parent.getParent().isSwitch() || parent.isDefaultCase()))\n        ? parent.getFirstChild() == n : true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..2d64ec01 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -80,16 +80,11 @@ final class CheckGlobalThis implements Callback {\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n   public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n+    // Don't traverse into functions that are constructors or have the @this\n+    // or @override annotations.\n+    if (n.isFunction()) {\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.isInterface() || jsDoc.hasThisType() || jsDoc.isOverride())) {\n         return false;\n       }\n \n@@ -100,49 +95,52 @@ final class CheckGlobalThis implements Callback {\n       // a.x = function() {}; // or\n       // var a = {x: function() {}};\n       int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN\n+          || n.getFirstChild() != null && (n.getFirstChild().isAssign() || n.getFirstChild().isExprResult()))\n+          && !isLValue(n, parent)) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.isAssign()) {\n+        Node lhs = parent.getFirstChild();\n+        if (lhs.isGetProp() && (lhs.getLastChild().getString().equals(\"prototype\") || lhs.getLastChild()\n+            .getString().equals(\"caller\") || lhs.getLastChild().getString().equals(\"arguments\"))) {\n+          return false;\n+        } else if (lhs.isGetElem()) {\n+          Node getElem = lhs;\n+          // Get value of getelem expression so we can check if it's a prototype reference.\n+          while (getElem.isGetElem()) {\n+            getElem = getElem.getLastChild();\n+          }\n+          String propName = getElem.getString();\n+          if ((propName == \"prototype\") || (propName == \"caller\") || (propName == \"arguments\")) {\n+            return false;\n+          }\n+        }\n+      }\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n+    if (parent != null && parent.isAssign()) {\n+      if (n == parent.getFirstChild() && !n.isGetProp() && !isFunctionLValue(parent)) {\n         if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+          assignLhsChild = n;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n+      } else if (n.isGetProp() && NodeUtil.isObjectCallMethod(parent)) {\n+        // Don't traverse the arguments of call/apply for object methods.\n+        Node callee = parent.getFirstChild();\n+        if (callee.isGetProp()) {\n+          Node propNode = callee.getLastChild();\n+          if (propNode.getString().equals(\"call\") || propNode.getString().equals(\"apply\")) {\n             return false;\n           }\n         }\n       }\n     }\n \n-    return true;\n+    // Skip switch cases.\n+    return n.isSwitch() || (parent != null && (parent.isSwitchCase() || parent.getParent().isSwitch() || parent.isDefaultCase()))\n+        ? parent.getFirstChild() == n : true;\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}