{
    "patch": "public static String escapeCsv(String input) {\n    if (StringUtils.isEmpty(input)) {\n        return input;\n    }\n    int length = input.length();\n    StringBuilder builder = new StringBuilder(length * 2);\n    for (int i = 0; i < length; i++) {\n        char ch = input.charAt(i);\n        if (ch == CSV_DELIMITER) {\n            builder.append(CSV_QUOTE);\n            builder.append(CSV_DELIMITER);\n            builder.append(CSV_QUOTE);\n        } else if (ch == CSV_QUOTE) {\n            builder.append(CSV_QUOTE);\n            builder.append(CSV_QUOTE);\n        } else if (ch == CR) {\n            builder.append(CR_ESCAPE);\n        } else if (ch == LF) {\n            builder.append(LF_ESCAPE);\n        } else if (ch == 0xfeff) {\n            // nop - Unicode Byte Order Mark (can't occur in the middle of a line)\n        } else {\n            if (Character.isHighSurrogate(ch) && i + 1 < length && Character.isLowSurrogate(input.charAt(i + 1))) {\n                // escape surrogate pair\n                builder.append(\"\\\\u\");\n                builder.append(String.format(\"%04x\", Character.toCodePoint(ch, input.charAt(i + 1))));\n                i++;\n            } else {\n                builder.append(ch);\n            }\n        }\n    }\n    return builder.toString();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..902c45c8 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,40 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String escapeCsv(String input) {\n+    if (StringUtils.isEmpty(input)) {\n+        return input;\n+    }\n+    int length = input.length();\n+    StringBuilder builder = new StringBuilder(length * 2);\n+    for (int i = 0; i < length; i++) {\n+        char ch = input.charAt(i);\n+        if (ch == CSV_DELIMITER) {\n+            builder.append(CSV_QUOTE);\n+            builder.append(CSV_DELIMITER);\n+            builder.append(CSV_QUOTE);\n+        } else if (ch == CSV_QUOTE) {\n+            builder.append(CSV_QUOTE);\n+            builder.append(CSV_QUOTE);\n+        } else if (ch == CR) {\n+            builder.append(CR_ESCAPE);\n+        } else if (ch == LF) {\n+            builder.append(LF_ESCAPE);\n+        } else if (ch == 0xfeff) {\n+            // nop - Unicode Byte Order Mark (can't occur in the middle of a line)\n+        } else {\n+            if (Character.isHighSurrogate(ch) && i + 1 < length && Character.isLowSurrogate(input.charAt(i + 1))) {\n+                // escape surrogate pair\n+                builder.append(\"\\\\u\");\n+                builder.append(String.format(\"%04x\", Character.toCodePoint(ch, input.charAt(i + 1))));\n+                i++;\n+            } else {\n+                builder.append(ch);\n             }\n         }\n     }\n+    return builder.toString();\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: no suitable method found for translate(CharSequence,StringWriter)",
    "test_result": "ERROR"
}