{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n    FunctionEvaluationException {\n        \n        clearResult();\n        \n        final double m = 0.5 * (min + max);\n        final double fm = f.value(m);\n        if (Double.isInfinite(fm)) {\n            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n        }\n        if (Double.isNaN(fm)) {\n            throw new FunctionEvaluationException(Double.NaN);\n        }\n        \n        if (fm == 0) {\n            setResult(m, 0);\n            return m;\n        }\n        \n        double fmin = f.value(min);\n        if (Double.isInfinite(fmin)) {\n            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n        }\n        if (Double.isNaN(fmin)) {\n            throw new FunctionEvaluationException(Double.NaN);\n        }\n        \n        double fmax = f.value(max);\n        if (Double.isInfinite(fmax)) {\n            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n        }\n        if (Double.isNaN(fmax)) {\n            throw new FunctionEvaluationException(Double.NaN);\n        }\n        \n        verifyInterval(min, m, max, fmin, fm, fmax);\n        \n        double ret = Double.NaN;\n        \n        // Enough precision?\n        if (FastMath.abs(fm) <= FunctionValues.Precision.SAFE_MIN) {\n            setResult(m, 0);\n            ret = m;\n        } else if (FastMath.abs(fmin) <= FunctionValues.Precision.SAFE_MIN) {\n            setResult(min, 0);\n            ret = min;\n        } else if (FastMath.abs(fmax) <= FunctionValues.Precision.SAFE_MIN) {\n            setResult(max, 0);\n            ret = max;\n        } else {\n            // try to improve precision\n            ret = brent(min, m, max, fm, fmin, fmax);\n        }\n\n        return ret;\n    }\n\nprivate void verifyInterval(double lower, double middle, double upper,\n        double fLower, double fMiddle, double fUpper)\n            throws FunctionEvaluationException {\n    if (fLower * fMiddle > 0) {\n        throw new FunctionEvaluationException(lower, middle, fLower, fMiddle);\n    }\n    if (fUpper * fMiddle > 0) {\n        throw new FunctionEvaluationException(middle, upper, fMiddle, fUpper);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..50313e431 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,73 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n+public double solve(double min, double max) throws MaxIterationsExceededException,\n+    FunctionEvaluationException {\n         \n         clearResult();\n-        verifyInterval(min, max);\n         \n-        double ret = Double.NaN;\n+        final double m = 0.5 * (min + max);\n+        final double fm = f.value(m);\n+        if (Double.isInfinite(fm)) {\n+            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n+        }\n+        if (Double.isNaN(fm)) {\n+            throw new FunctionEvaluationException(Double.NaN);\n+        }\n         \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n+        if (fm == 0) {\n+            setResult(m, 0);\n+            return m;\n+        }\n         \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+        double fmin = f.value(min);\n+        if (Double.isInfinite(fmin)) {\n+            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n+        }\n+        if (Double.isNaN(fmin)) {\n+            throw new FunctionEvaluationException(Double.NaN);\n+        }\n+        \n+        double fmax = f.value(max);\n+        if (Double.isInfinite(fmax)) {\n+            throw new FunctionEvaluationException(Double.POSITIVE_INFINITY);\n+        }\n+        if (Double.isNaN(fmax)) {\n+            throw new FunctionEvaluationException(Double.NaN);\n+        }\n+        \n+        verifyInterval(min, m, max, fmin, fm, fmax);\n+        \n+        double ret = Double.NaN;\n+        \n+        // Enough precision?\n+        if (FastMath.abs(fm) <= FunctionValues.Precision.SAFE_MIN) {\n+            setResult(m, 0);\n+            ret = m;\n+        } else if (FastMath.abs(fmin) <= FunctionValues.Precision.SAFE_MIN) {\n+            setResult(min, 0);\n+            ret = min;\n+        } else if (FastMath.abs(fmax) <= FunctionValues.Precision.SAFE_MIN) {\n+            setResult(max, 0);\n+            ret = max;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // try to improve precision\n+            ret = brent(min, m, max, fm, fmin, fmax);\n         }\n \n         return ret;\n     }\n+\n+private void verifyInterval(double lower, double middle, double upper,\n+        double fLower, double fMiddle, double fUpper)\n+            throws FunctionEvaluationException {\n+    if (fLower * fMiddle > 0) {\n+        throw new FunctionEvaluationException(lower, middle, fLower, fMiddle);\n+    }\n+    if (fUpper * fMiddle > 0) {\n+        throw new FunctionEvaluationException(middle, upper, fMiddle, fUpper);\n+    }\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}