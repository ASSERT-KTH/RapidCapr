{
    "patch": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count < 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (start > end) {\n            throw new IllegalArgumentException(\"Start character \" + start + \" is greater than end character \" + end);\n        }\n        if (start < 0) {\n            start = 0;\n        }\n        if (end > 0xFFFF) {\n            end = 0xFFFF;\n        }\n        if (chars != null && chars.length == 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start == 0 && end == 0) {\n            if (chars != null) {\n                end = chars.length;\n            } else {\n                if (!letters && !numbers) {\n                    end = 0xFFFF;\n                } else {\n                    end = 'z' + 1;\n                    start = ' ';\n                }\n            }\n        }\n\n        char[] buffer = new char[count];\n        long gap = (long) end - (long) start;\n\n        while (count-- != 0) {\n            char ch;\n            if (chars == null) {\n                ch = (char) (random.nextInt((int) gap) + start);\n            } else {\n                ch = chars[random.nextInt((int) gap) + start];\n            }\n            if (letters && Character.isLetter(ch)\n                    || numbers && Character.isDigit(ch)\n                    || !letters && !numbers) {\n                if (Character.isHighSurrogate(ch)) {\n                    if (count < 1) {\n                        // If we can't create a valid surrogate pair, skip high surrogate\n                        count++;\n                    } else {\n                        // If we have enough space, generate a random low surrogate\n                        buffer[count] = ch;\n                        count--;\n                        buffer[count] = (char) (random.nextInt(0x400) + 0xDC00);\n                    }\n                } else if (Character.isLowSurrogate(ch)) {\n                    // If we encounter a low surrogate, skip it\n                    count++;\n                } else {\n                    buffer[count] = ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\nindex a7990575..49e3d3ba 100644\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n@@ -222,11 +222,18 @@ public class RandomStringUtils {\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n-        if (count == 0) {\n-            return \"\";\n-        } else if (count < 0) {\n+        if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n+        if (start > end) {\n+            throw new IllegalArgumentException(\"Start character \" + start + \" is greater than end character \" + end);\n+        }\n+        if (start < 0) {\n+            start = 0;\n+        }\n+        if (end > 0xFFFF) {\n+            end = 0xFFFF;\n+        }\n         if (chars != null && chars.length == 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n@@ -236,47 +243,39 @@ public class RandomStringUtils {\n                 end = chars.length;\n             } else {\n                 if (!letters && !numbers) {\n-                    end = Integer.MAX_VALUE;\n+                    end = 0xFFFF;\n                 } else {\n                     end = 'z' + 1;\n-                    start = ' ';                \n+                    start = ' ';\n                 }\n             }\n         }\n \n         char[] buffer = new char[count];\n-        int gap = end - start;\n+        long gap = (long) end - (long) start;\n \n         while (count-- != 0) {\n             char ch;\n             if (chars == null) {\n-                ch = (char) (random.nextInt(gap) + start);\n+                ch = (char) (random.nextInt((int) gap) + start);\n             } else {\n-                ch = chars[random.nextInt(gap) + start];\n+                ch = chars[random.nextInt((int) gap) + start];\n             }\n             if (letters && Character.isLetter(ch)\n                     || numbers && Character.isDigit(ch)\n                     || !letters && !numbers) {\n-                if(ch >= 56320 && ch <= 57343) {\n-                    if(count == 0) {\n+                if (Character.isHighSurrogate(ch)) {\n+                    if (count < 1) {\n+                        // If we can't create a valid surrogate pair, skip high surrogate\n                         count++;\n                     } else {\n-                        // low surrogate, insert high surrogate after putting it in\n+                        // If we have enough space, generate a random low surrogate\n                         buffer[count] = ch;\n                         count--;\n-                        buffer[count] = (char) (55296 + random.nextInt(128));\n-                    }\n-                } else if(ch >= 55296 && ch <= 56191) {\n-                    if(count == 0) {\n-                        count++;\n-                    } else {\n-                        // high surrogate, insert low surrogate before putting it in\n-                        buffer[count] = (char) (56320 + random.nextInt(128));\n-                        count--;\n-                        buffer[count] = ch;\n+                        buffer[count] = (char) (random.nextInt(0x400) + 0xDC00);\n                     }\n-                } else if(ch >= 56192 && ch <= 56319) {\n-                    // private high surrogate, no effing clue, so skip it\n+                } else if (Character.isLowSurrogate(ch)) {\n+                    // If we encounter a low surrogate, skip it\n                     count++;\n                 } else {\n                     buffer[count] = ch;",
    "result_reason": "junit.framework.AssertionFailedError: Message (bound must be positive) must contain 'start'",
    "test_result": "FAIL"
}