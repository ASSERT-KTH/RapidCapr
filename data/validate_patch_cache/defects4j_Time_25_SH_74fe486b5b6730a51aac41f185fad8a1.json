{
    "patch": "if (offsetLocal == offsetAdjusted) {\n    return offsetLocal;\n}\nlong prevLocal = previousTransition(instantAdjusted);\nlong prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\nif (prevLocal == prevAdjusted) {\n    return offsetAdjusted;\n}\nlong nextLocal = nextTransition(instantAdjusted);\nlong nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\nif (nextLocal == nextAdjusted) {\n    return offsetLocal;\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..75de06ea 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,20 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal == offsetAdjusted) {\n+    return offsetLocal;\n+}\n+long prevLocal = previousTransition(instantAdjusted);\n+long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+if (prevLocal == prevAdjusted) {\n+    return offsetAdjusted;\n+}\n+long nextLocal = nextTransition(instantAdjusted);\n+long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+if (nextLocal == nextAdjusted) {\n+    return offsetLocal;\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: 2007-04-01T02:00:00.000-04:00 expected:<2007-04-01T0[1]:00:00.000-04:00> but was:<2007-04-01T0[2]:00:00.000-04:00>",
    "test_result": "FAIL"
}