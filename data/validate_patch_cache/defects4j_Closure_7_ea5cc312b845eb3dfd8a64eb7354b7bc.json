{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  if (\"function\".equals(value)) {\n    PropDeclaration ctorProperty = type.getOwnPropertyDeclaration(\"constructor\");\n    if (resultEqualsValue && ctorProperty != null && ctorProperty.getNode().isQualifiedName()) {\n      QualifiedName qname = ctorProperty.getNode().getQualifiedName();\n      if (qname != null && qname.getRoot().equals(\"Function\") && qname.getAllNames().size() == 2) {\n        return getNativeType(U2U_CONSTRUCTOR_TYPE);\n      }\n    }\n    for (String propName : type.getOwnPropertyNames()) {\n      JSType propType = type.getPropertyType(propName);\n      if (!propType.isFunctionType() && !\"prototype\".equals(propName)) {\n        return null;\n      }\n    }\n    return type;\n  } else {\n    return \"\\\"object\\\"\".equals(value) ? type : null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..df700290 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,26 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n+public JSType caseObjectType(ObjectType type) {\n+  if (\"function\".equals(value)) {\n+    PropDeclaration ctorProperty = type.getOwnPropertyDeclaration(\"constructor\");\n+    if (resultEqualsValue && ctorProperty != null && ctorProperty.getNode().isQualifiedName()) {\n+      QualifiedName qname = ctorProperty.getNode().getQualifiedName();\n+      if (qname != null && qname.getRoot().equals(\"Function\") && qname.getAllNames().size() == 2) {\n+        return getNativeType(U2U_CONSTRUCTOR_TYPE);\n+      }\n+    }\n+    for (String propName : type.getOwnPropertyNames()) {\n+      JSType propType = type.getPropertyType(propName);\n+      if (!propType.isFunctionType() && !\"prototype\".equals(propName)) {\n+        return null;\n       }\n-      return matchesExpectation(\"object\") ? type : null;\n     }\n+    return type;\n+  } else {\n+    return \"\\\"object\\\"\".equals(value) ? type : null;\n+  }\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}