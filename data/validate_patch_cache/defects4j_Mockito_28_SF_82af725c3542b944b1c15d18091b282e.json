{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        Object fieldValue;\n        try {\n            field.setAccessible(true);\n            fieldValue = field.get(fieldInstance);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n        }\n        if (fieldValue == null || !fieldValue.getClass().equals(field.getType())) {\n            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n                try {\n                    field.set(fieldInstance, mockCandidate);\n                } catch (IllegalAccessException e) {\n                    throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n                }\n            }\n        } else if (mocks.contains(fieldValue)) {\n            Object newMockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            try {\n                field.set(fieldInstance, newMockCandidate);\n                mocks.remove(fieldValue);\n            } catch (IllegalAccessException e) {\n                throw new RuntimeException(\"Could not inject mock \" + newMockCandidate + \" t",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..9006ddf58 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,32 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        Object fieldValue;\n+        try {\n+            field.setAccessible(true);\n+            fieldValue = field.get(fieldInstance);\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n+        }\n+        if (fieldValue == null || !fieldValue.getClass().equals(field.getType())) {\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (mockCandidate != null && field.getType().isAssignableFrom(mockCandidate.getClass())) {\n+                try {\n+                    field.set(fieldInstance, mockCandidate);\n+                } catch (IllegalAccessException e) {\n+                    throw new RuntimeException(\"Could not inject mock \" + mockCandidate + \" to field \" + field.getName(), e);\n+                }\n+            }\n+        } else if (mocks.contains(fieldValue)) {\n+            Object newMockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            try {\n+                field.set(fieldInstance, newMockCandidate);\n+                mocks.remove(fieldValue);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(\"Could not inject mock \" + newMockCandidate + \" t\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "error: unclosed string literal",
    "test_result": "ERROR"
}