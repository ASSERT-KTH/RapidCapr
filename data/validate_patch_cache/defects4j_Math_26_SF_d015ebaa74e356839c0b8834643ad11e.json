{
    "patch": "import java.math.BigInteger;\n\npublic class Fraction {\n    private final int numerator;\n    private final int denominator;\n\n    private static final double DEFAULT_EPSILON = 1e-16;\n    private static final int DEFAULT_MAX_ITERATIONS = 100;\n    private static final int DEFAULT_MAX_DENOMINATOR = 1000;\n\n    public Fraction(double value) throws FractionConversionException {\n        this(value, DEFAULT_EPSILON, DEFAULT_MAX_DENOMINATOR, DEFAULT_MAX_ITERATIONS);\n    }\n\n    public Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n        BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        BigInteger bigA0 = BigInteger.valueOf(a0);\n        if (bigA0.compareTo(overflow) > 0) {\n            throw new FractionConversionException(value, bigA0, BigInteger.ONE);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        BigInteger p0 = BigInteger.ONE;\n        BigInteger q0 = BigInteger.ZERO;\n        BigInteger p1 = bigA0;\n        BigInteger q1 = BigInteger.ONE;\n\n        BigInteger p2 = BigInteger.ZERO;\n        BigInteger q2 = BigInteger.ONE;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long) FastMath.floor(r1);\n            BigInteger bigA1 = BigInteger.valueOf(a1);\n            p2 = bigA1.multiply(p1).add(p0);\n            q2 = bigA1.multiply(q1).add(q0);\n            if (p2.compareTo(overflow) > 0 || q2.compareTo(overflow) > 0) {\n                throw new FractionConversionException(value, new BigInteger(p2.toString()), new BigInteger(q2.toString()));\n            }\n\n            double convergent = (double) p2.doubleValue() / (double) q2.doubleValue();\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2.doubleValue() < maxDenominator) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, new BigInteger(Integer.toString(maxIterations)), BigInteger.ONE);\n        }\n\n        if (q2.doubleValue() < maxDenominator) {\n            this.numerator = p2.intValue();\n            this.denominator = q2.intValue();\n        } else {\n            this.numerator = p1.intValue();\n            this.denominator = q1.intValue();\n        }\n    }\n\n    public int getNumerator() {\n        return numerator;\n    }\n\n    public int getDenominator() {\n        return denominator;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..ceaf81a74 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,14 +172,27 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n+import java.math.BigInteger;\n+\n+public class Fraction {\n+    private final int numerator;\n+    private final int denominator;\n+\n+    private static final double DEFAULT_EPSILON = 1e-16;\n+    private static final int DEFAULT_MAX_ITERATIONS = 100;\n+    private static final int DEFAULT_MAX_DENOMINATOR = 1000;\n+\n+    public Fraction(double value) throws FractionConversionException {\n+        this(value, DEFAULT_EPSILON, DEFAULT_MAX_DENOMINATOR, DEFAULT_MAX_ITERATIONS);\n+    }\n+\n+    public Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException {\n+        BigInteger overflow = BigInteger.valueOf(Integer.MAX_VALUE);\n         double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+        long a0 = (long) FastMath.floor(r0);\n+        BigInteger bigA0 = BigInteger.valueOf(a0);\n+        if (bigA0.compareTo(overflow) > 0) {\n+            throw new FractionConversionException(value, bigA0, BigInteger.ONE);\n         }\n \n         // check for (almost) integer arguments, which should not go\n@@ -190,28 +203,29 @@ public class Fraction\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n+        BigInteger p0 = BigInteger.ONE;\n+        BigInteger q0 = BigInteger.ZERO;\n+        BigInteger p1 = bigA0;\n+        BigInteger q1 = BigInteger.ONE;\n \n-        long p2 = 0;\n-        long q2 = 1;\n+        BigInteger p2 = BigInteger.ZERO;\n+        BigInteger q2 = BigInteger.ONE;\n \n         int n = 0;\n         boolean stop = false;\n         do {\n             ++n;\n             double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+            long a1 = (long) FastMath.floor(r1);\n+            BigInteger bigA1 = BigInteger.valueOf(a1);\n+            p2 = bigA1.multiply(p1).add(p0);\n+            q2 = bigA1.multiply(q1).add(q0);\n+            if (p2.compareTo(overflow) > 0 || q2.compareTo(overflow) > 0) {\n+                throw new FractionConversionException(value, new BigInteger(p2.toString()), new BigInteger(q2.toString()));\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n+            double convergent = (double) p2.doubleValue() / (double) q2.doubleValue();\n+            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2.doubleValue() < maxDenominator) {\n                 p0 = p1;\n                 p1 = p2;\n                 q0 = q1;\n@@ -224,19 +238,27 @@ public class Fraction\n         } while (!stop);\n \n         if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+            throw new FractionConversionException(value, new BigInteger(Integer.toString(maxIterations)), BigInteger.ONE);\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n+        if (q2.doubleValue() < maxDenominator) {\n+            this.numerator = p2.intValue();\n+            this.denominator = q2.intValue();\n         } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            this.numerator = p1.intValue();\n+            this.denominator = q1.intValue();\n         }\n+    }\n \n+    public int getNumerator() {\n+        return numerator;\n     }\n \n+    public int getDenominator() {\n+        return denominator;\n+    }\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}