{
    "patch": "Object[] args = invocation.getRawArguments();\nif (invocation.getMethod().isVarArgs()) {\n    // capture variable arguments\n    int varArgIndex = args.length - 1;\n    Object varArgsObj = args[varArgIndex];\n    int varArgsLen = Array.getLength(varArgsObj);\n    Object[] varArgs = new Object[varArgsLen];\n    for (int i =",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..a70cfe785 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,14 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] args = invocation.getRawArguments();\n+if (invocation.getMethod().isVarArgs()) {\n+    // capture variable arguments\n+    int varArgIndex = args.length - 1;\n+    Object varArgsObj = args[varArgIndex];\n+    int varArgsLen = Array.getLength(varArgsObj);\n+    Object[] varArgs = new Object[varArgsLen];\n+    for (int i =\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}