{
    "patch": "public boolean equals(Object otherObj) {\n    if (this == other) {\n        return true;\n    }\n    if (otherObj instanceof Complex) {\n        Complex other = (Complex) otherObj;\n        if (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(other.getReal())\n                && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(other.getImaginary())) {\n            return true;\n        } else if (Double.isNaN(real) && Double.isNaN(other.getReal()) && Double.isNaN(imaginary)\n                && Double.isNaN(other.getImaginary())) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..8bfc20aa1 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -242,29 +242,22 @@ public class Complex implements Serializable  {\n      *         not equal to this Complex instance\n      * \n      */\n-    public boolean equals(Object other) {\n-        boolean ret;\n-        \n-        if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n+public boolean equals(Object otherObj) {\n+    if (this == other) {\n+        return true;\n+    }\n+    if (otherObj instanceof Complex) {\n+        Complex other = (Complex) otherObj;\n+        if (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(other.getReal())\n+                && Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(other.getImaginary())) {\n+            return true;\n+        } else if (Double.isNaN(real) && Double.isNaN(other.getReal()) && Double.isNaN(imaginary)\n+                && Double.isNaN(other.getImaginary())) {\n+            return true;\n         }\n-      \n-        return ret;\n     }\n+    return false;\n+}\n     \n     /**\n      * Get a hashCode for the complex number.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}