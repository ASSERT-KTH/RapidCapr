{
    "patch": "case Token.NAME:\n  // This may be a variable get or set.\n  if (parent != null) {\n    switch (parent.getType()) {\n      case Token.VAR:\n        if (NodeUtil.isWithinFunction(parent, scope)) {\n          isSet = true;\n          Node rvalue = n.getFirstChild();\n          type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n        }\n        break;\n      case Token.ASSIGN:\n        if (NodeUtil.isWithinFunction(parent, scope) && parent.getFirstChild() == n) {\n          isSet = true;\n          type = getValueType(n.getNext());\n        }\n        break;\n      case Token.FUNCTION:\n        Node gramps = parent.getParent();\n        if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n          return;\n        }\n        isSet = true;\n        type = Name.Type.FUNCTION;\n        break;\n      case Token.STRING_KEY:\n        if (NodeUtil.isObjectLitKey(parent) &&\n            NodeUtil.isWithinFunction(parent.getParent(), scope)) {\n          isSet = true;\n          type = getValueType(n.getFirstChild());\n        }\n        break;\n      case Token.INC:\n      case Token.DEC:\n        isSet = true;\n        type = Name.Type.OTHER;\n        break;\n      default:\n        if (NodeUtil.isAssignmentOp(parent) &&\n            parent.getFirstChild() == n && NodeUtil.isWithinFunction(parent, scope)) {\n          isSet = true;\n          type = Name.Type.OTHER;\n        }\n    }\n  }\n  name = n.getString();\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..18ab91a3 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,53 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.NAME:\n+  // This may be a variable get or set.\n+  if (parent != null) {\n+    switch (parent.getType()) {\n+      case Token.VAR:\n+        if (NodeUtil.isWithinFunction(parent, scope)) {\n+          isSet = true;\n+          Node rvalue = n.getFirstChild();\n+          type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+        }\n+        break;\n+      case Token.ASSIGN:\n+        if (NodeUtil.isWithinFunction(parent, scope) && parent.getFirstChild() == n) {\n+          isSet = true;\n+          type = getValueType(n.getNext());\n+        }\n+        break;\n+      case Token.FUNCTION:\n+        Node gramps = parent.getParent();\n+        if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+          return;\n+        }\n+        isSet = true;\n+        type = Name.Type.FUNCTION;\n+        break;\n+      case Token.STRING_KEY:\n+        if (NodeUtil.isObjectLitKey(parent) &&\n+            NodeUtil.isWithinFunction(parent.getParent(), scope)) {\n+          isSet = true;\n+          type = getValueType(n.getFirstChild());\n+        }\n+        break;\n+      case Token.INC:\n+      case Token.DEC:\n+        isSet = true;\n+        type = Name.Type.OTHER;\n+        break;\n+      default:\n+        if (NodeUtil.isAssignmentOp(parent) &&\n+            parent.getFirstChild() == n && NodeUtil.isWithinFunction(parent, scope)) {\n+          isSet = true;\n+          type = Name.Type.OTHER;\n+        }\n+    }\n+  }\n+  name = n.getString();\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}