{
    "patch": "class FindDeclarationsAndSetters extends Callback {\n  Set<String> functionNames = new HashSet<>();\n  Set<String> classNames = new HashSet<>();\n\n  @Override\n  public void enterNode(NodeTraversal t, Node n, Node parent) {\n    switch (n.getToken()) {\n      case FUNCTION:\n        functionNames.add(n.getFirstChild().getString());\n        break;\n      case CLASS:\n        classNames.add(n.getFirstChild().getString());\n        break;\n      case VAR:\n      case LET:\n      case CONST:\n        for (Node child : n.children()) {\n          if (child.isName()) {\n            String name = child.getString();\n            if (classNames.contains(name) || functionNames.contains(name)) {\n              continue;\n            }\n            Var var = t.getScope().getVar(name);\n            if (var != null) {\n              var.setAssigned(true);\n            }\n          }\n        }\n        break;\n      case ASSIGN:\n        Node left = n.getFirstChild();\n        if (left.isGetProp()) {\n          String propName = left.getLastChild().getString();\n          if (!classNames.contains(propName) && !functionNames.contains(propName)) {\n            Var var = t.getScope().getVar(propName);\n            if (var != null) {\n              var.setAssigned(true);\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..531075fe 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,52 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n-      }\n+class FindDeclarationsAndSetters extends Callback {\n+  Set<String> functionNames = new HashSet<>();\n+  Set<String> classNames = new HashSet<>();\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n+  @Override\n+  public void enterNode(NodeTraversal t, Node n, Node parent) {\n+    switch (n.getToken()) {\n+      case FUNCTION:\n+        functionNames.add(n.getFirstChild().getString());\n+        break;\n+      case CLASS:\n+        classNames.add(n.getFirstChild().getString());\n+        break;\n+      case VAR:\n+      case LET:\n+      case CONST:\n+        for (Node child : n.children()) {\n+          if (child.isName()) {\n+            String name = child.getString();\n+            if (classNames.contains(name) || functionNames.contains(name)) {\n+              continue;\n+            }\n+            Var var = t.getScope().getVar(name);\n+            if (var != null) {\n+              var.setAssigned(true);\n+            }\n           }\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n+        break;\n+      case ASSIGN:\n+        Node left = n.getFirstChild();\n+        if (left.isGetProp()) {\n+          String propName = left.getLastChild().getString();\n+          if (!classNames.contains(propName) && !functionNames.contains(propName)) {\n+            Var var = t.getScope().getVar(propName);\n+            if (var != null) {\n+              var.setAssigned(true);\n+            }\n           }\n         }\n-      }\n+        break;\n+      default:\n+        break;\n     }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}