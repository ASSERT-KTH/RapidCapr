{
    "patch": "public static Number createNumber(String val) throws NumberFormatException {\n    if (val == null || val.length() == 0) {\n        return null;\n    }\n\n    int decimalIdx = val.indexOf('.');\n    int exponentIdx = val.indexOf('e');\n    if (exponentIdx == -1) {\n        exponentIdx = val.indexOf('E');\n    }\n\n    // Check for multiple decimal points or incorrect exponent representation\n    if (decimalIdx != -1 && (decimalIdx != val.lastIndexOf('.') || exponentIdx != -1 && exponentIdx < decimalIdx)) {\n        throw new NumberFormatException(val + \" is not a valid number.\");\n    }\n\n    if (val.startsWith(\"--\")) {\n        // This is protection for poorness in java.lang.BigDecimal.\n        // It accepts this as a legal value, but it does not appear \n        // to be in specification of class. OS X Java parses it to \n        // a wrong value.\n        return null;\n    } else if (val.startsWith(\"0x\")) {\n        return createInteger(val);\n    } else if (val.startsWith(\"-0x\")) {\n        return createInteger(val.substring(1)).negate();\n    } else if (Character.isDigit(val.charAt(0)) || val.charAt(0) == '.' && decimalIdx > 0) {\n        if (exponentIdx != -1) {\n            try {\n                Double d = Double.parseDouble(val);\n                if (!d.isInfinite() && d.doubleValue() != 0.0) {\n                    return d;\n                }\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n        }\n\n        if (decimalIdx == -1) {\n            try {\n                return createInteger(val);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n\n            try {\n                return createLong(val);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n\n            return createBigInteger(val);\n        } else {\n            // There is decimal point\n            if (decimalIdx == 0) {\n                val = \"0\" + val;\n                decimalIdx++;\n            }\n            if (val.charAt(val.length() - 1) == 'f' || val.charAt(val.length() - 1) == 'F') {\n                try {\n                    Float f = Float.valueOf(val);\n                    if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                        return f;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore the bad number\n                }\n            } else {\n                try {\n                    Double d = Double.parseDouble(val);\n                    if (!d.isInfinite() && d.doubleValue() != 0.0) {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // Ignore the bad number\n                }\n            }\n\n            // Fallback to BigDecimal\n            try {\n                return createBigDecimal(val);\n            } catch (NumberFormatException nfe) {\n                // Ignore the bad number\n            }\n        }\n    } else {\n        // Try to get the numeric part fro",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..37fcb987 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -135,155 +135,93 @@ public final class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n-            return null;\n-        }\n-        if (val.length() == 0) {\n-            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n-        }\n-        if (val.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n-        }   \n-        char lastChar = val.charAt(val.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+public static Number createNumber(String val) throws NumberFormatException {\n+    if (val == null || val.length() == 0) {\n+        return null;\n+    }\n \n-        if (decPos > -1) {\n+    int decimalIdx = val.indexOf('.');\n+    int exponentIdx = val.indexOf('e');\n+    if (exponentIdx == -1) {\n+        exponentIdx = val.indexOf('E');\n+    }\n \n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+    // Check for multiple decimal points or incorrect exponent representation\n+    if (decimalIdx != -1 && (decimalIdx != val.lastIndexOf('.') || exponentIdx != -1 && exponentIdx < decimalIdx)) {\n+        throw new NumberFormatException(val + \" is not a valid number.\");\n+    }\n+\n+    if (val.startsWith(\"--\")) {\n+        // This is protection for poorness in java.lang.BigDecimal.\n+        // It accepts this as a legal value, but it does not appear \n+        // to be in specification of class. OS X Java parses it to \n+        // a wrong value.\n+        return null;\n+    } else if (val.startsWith(\"0x\")) {\n+        return createInteger(val);\n+    } else if (val.startsWith(\"-0x\")) {\n+        return createInteger(val.substring(1)).negate();\n+    } else if (Character.isDigit(val.charAt(0)) || val.charAt(0) == '.' && decimalIdx > 0) {\n+        if (exponentIdx != -1) {\n+            try {\n+                Double d = Double.parseDouble(val);\n+                if (!d.isInfinite() && d.doubleValue() != 0.0) {\n+                    return d;\n                 }\n-                dec = val.substring(decPos + 1, expPos);\n-            } else {\n-                dec = val.substring(decPos + 1);\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number\n             }\n-            mant = val.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n-            } else {\n-                mant = val;\n-            }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n \n-                    }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //Fall through\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // empty catch\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // empty catch\n-                    }\n-                    //Fall through\n-                default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+        if (decimalIdx == -1) {\n+            try {\n+                return createInteger(val);\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number\n+            }\n \n+            try {\n+                return createLong(val);\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number\n             }\n+\n+            return createBigInteger(val);\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n-            } else {\n-                exp = null;\n+            // There is decimal point\n+            if (decimalIdx == 0) {\n+                val = \"0\" + val;\n+                decimalIdx++;\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n+            if (val.charAt(val.length() - 1) == 'f' || val.charAt(val.length() - 1) == 'F') {\n                 try {\n-                    return createInteger(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                try {\n-                    return createLong(val);\n-                } catch (NumberFormatException nfe) {\n-                    // empty catch\n-                }\n-                return createBigInteger(val);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(val);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                    Float f = Float.valueOf(val);\n+                    if (!(f.isInfinite() || f.floatValue() == 0.0F)) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                    // Ignore the bad number\n                 }\n+            } else {\n                 try {\n-                    Double d = createDouble(val);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                    Double d = Double.parseDouble(val);\n+                    if (!d.isInfinite() && d.doubleValue() != 0.0) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n-                    // empty catch\n+                    // Ignore the bad number\n                 }\n+            }\n \n+            // Fallback to BigDecimal\n+            try {\n                 return createBigDecimal(val);\n-\n+            } catch (NumberFormatException nfe) {\n+                // Ignore the bad number\n             }\n-\n         }\n-    }\n+    } else {\n+        // Try to get the numeric part fro\n \n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}