{
    "patch": "    public long computeMillis(boolean resetFields, String text) {\n        SavedField[] savedFields = iSavedFields;\n        int count = iSavedFieldsCount;\n        if (iSavedFieldsShared) {\n            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n            iSavedFieldsShared = false;\n        }\n        sort(savedFields, count);\n        int year = iDefaultYear;\n        DurationField nullField = null;\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField years = DurationFieldType.years().getField(iChrono);\n        DurationField weekyears = null;\n        DurationField weeks = null;\n        DurationField first = null;\n        if (count > 0) {\n            first = savedFields[0].iField.getDurationField();\n            if (count >= 4 && compareReverse(first, months) >= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0) {\n                DurationField field1 = savedFields[1].iField.getDurationField();\n                DurationField field2 = savedFields[2].iField.getDurationField();\n                DurationField field3 = savedFields[3].iField.getDurationField();\n                if (compareReverse(field1, first) == 0 &&\n                    compareReverse(field2, first) == 0 &&\n                    compareReverse(field3, DurationFieldType.days().getField(iChrono)) == 0 ) {\n                    weekyears = DurationFieldType.weekyears().getField(iChrono);\n                    weeks = DurationFieldType.weeks().getField(iChrono);\n                    if (compareReverse(first, weeks) < 0) {\n                        weekyears = null;\n                    }\n                    DurationField field;\n                    if (savedFields.length > 4) {\n                        field = savedFields[4].iField.getDurationField();\n                    } else {\n                        field = nullField;\n                    }\n                    if (field != null && compareReverse(field, years) <= 0) {\n                        year = savedFields[4].iValue;\n                        savedFields[4] = null;\n                        count -= 1;\n                        first = field;\n                        if (count > 4) {\n                            field = savedFields[5].iField.getDurationField();\n                        } else {\n                            field = nullField;\n                        }\n                    }\n                    if (field != null && compareReverse(field, years) <= 0) {\n                        year = savedFields[5].iValue;\n                        savedFields[5] = null;\n                        count -= 1;\n                        if (count > 4) {\n                            field = savedFields[5].iField.getDurationField();\n                        } else {\n                            field = nullField;\n                        }\n                    }\n                    if ((weekyears != null && compareReverse(first, weekyears) >= 0 && compareReverse(first, weeks) <= 0) ||\n                        (compareReverse(first, DurationFieldType.weeks().getField(iChrono)) >= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0)) {\n                        int woy = 0;\n                        int dow = 0;\n                        int currentWeeks = 0;\n                        for (int i=0; i<count; i++) {\n                            DurationField fieldi = savedFields[i].iField.getDurationField();\n                            int value = savedFields[i].iValue;\n                            if (compareReverse(fieldi, weeks) == 0) {\n                                currentWeeks += value;\n                            } else if (compareReverse(fieldi, DurationFieldType.days().getField(iChrono)) == 0) {\n                                dow = value;\n                            } else if (compareReverse(fieldi, weekyears) == 0) {\n                                woy = value;\n                            } else if (compareReverse(fieldi, years) == 0) {\n                                year = value;\n                            } else if (compareReverse(fieldi, months) == 0) {\n                                if (dow != 0) {\n                                    throw new IllegalFieldValueException(DurationFieldType.monthOfYear(), null);\n                                }\n                                setMonthOfYear(year, value);\n                            } else {\n                                throw new IllegalArgumentException(\"Illegal field \" + fieldi);\n                            }\n                        }\n                        if (woy != 0) {\n                            if (dow == 0) {\n                                throw new IllegalFieldValueException(DurationFieldType.dayOfWeek(), null);\n                            }\n                            setWeekyear(woy);\n                            setWeekOfWeekyear(currentWeeks);\n                            setDayOfWeek(dow);\n                        } else {\n                            if (weeks != null) {\n                                setWeekOfWeekyear(currentWeeks);\n                            }\n                            int month = getMonthOfYear();\n                            int day = getDayOfMonth();\n                            if (month < 1 || month > 12) {\n                                throw new IllegalFieldValueException(DurationFieldType.monthOfYear(), null);\n                            }\n                            if (day < 1 || day > getDaysInYearMonth(year, month)) {\n                                throw new IllegalFieldValueException(DurationFieldType.dayOfMonth(), null);\n                            }\n                            set(year, month, day);\n                        }\n                        return iChrono.set(((DateTimeField)(iFields[0])).getFieldType(), getMillis(), year);\n                    }\n                }\n            }\n            if (count >= 2 && compareReverse(savedFields[1].iField.getDurationField(), first) <= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0) {\n                int hourOfDay = 0;\n                int minuteOfHour = 0;\n                int secondOfMinute = 0;\n                int millisOfSecond = 0;\n                int zoneOffset = 0;\n                for (int i=0; i<count; i++) {\n                    DurationField field = savedFields[i].iField.getDurationField();\n                    int value = savedFields[i].iValue;\n                    if (compareReverse(field, DurationFieldType.hours().getField(iChrono)) == 0) {\n                        hourOfDay = value;\n                    } else if (compareReverse(field, DurationFieldType.minutes().getField(iChrono)) == 0) {\n                        minuteOfHour = value;\n                    } else if (compareReverse(field, DurationFieldType.seconds().getField(iChrono)) == 0) {\n                        secondOfMinute = value;\n                    } else if (compareReverse(field, DurationFieldType.millis().getField(iChrono)) == 0) {\n                        millisOfSecond = value;\n                    } else if (compareReverse(field, null) == 0 && (value >= -MAX_MILLIS && value <= MAX_MILLIS)) {\n                        zoneOffset = value;\n                    } else {\n                        throw new IllegalArgumentException(\"Illegal field \" + field);\n                    }\n                }\n                long instant = getChronology().getZone().getDateTimeMillis(year, getMonthOfYear(), getDayOfMonth(),\n                                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n                instant += zoneOffset;\n                return iChrono.set(((DateTimeField)(iFields[0])).getFieldType(), instant, year);\n            }\n        }\n\n        long millis = iMillis;\n        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..99baab7d 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -336,14 +336,131 @@ public class DateTimeParserBucket {\n             iSavedFieldsShared = false;\n         }\n         sort(savedFields, count);\n+        int year = iDefaultYear;\n+        DurationField nullField = null;\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField years = DurationFieldType.years().getField(iChrono);\n+        DurationField weekyears = null;\n+        DurationField weeks = null;\n+        DurationField first = null;\n         if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+            first = savedFields[0].iField.getDurationField();\n+            if (count >= 4 && compareReverse(first, months) >= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0) {\n+                DurationField field1 = savedFields[1].iField.getDurationField();\n+                DurationField field2 = savedFields[2].iField.getDurationField();\n+                DurationField field3 = savedFields[3].iField.getDurationField();\n+                if (compareReverse(field1, first) == 0 &&\n+                    compareReverse(field2, first) == 0 &&\n+                    compareReverse(field3, DurationFieldType.days().getField(iChrono)) == 0 ) {\n+                    weekyears = DurationFieldType.weekyears().getField(iChrono);\n+                    weeks = DurationFieldType.weeks().getField(iChrono);\n+                    if (compareReverse(first, weeks) < 0) {\n+                        weekyears = null;\n+                    }\n+                    DurationField field;\n+                    if (savedFields.length > 4) {\n+                        field = savedFields[4].iField.getDurationField();\n+                    } else {\n+                        field = nullField;\n+                    }\n+                    if (field != null && compareReverse(field, years) <= 0) {\n+                        year = savedFields[4].iValue;\n+                        savedFields[4] = null;\n+                        count -= 1;\n+                        first = field;\n+                        if (count > 4) {\n+                            field = savedFields[5].iField.getDurationField();\n+                        } else {\n+                            field = nullField;\n+                        }\n+                    }\n+                    if (field != null && compareReverse(field, years) <= 0) {\n+                        year = savedFields[5].iValue;\n+                        savedFields[5] = null;\n+                        count -= 1;\n+                        if (count > 4) {\n+                            field = savedFields[5].iField.getDurationField();\n+                        } else {\n+                            field = nullField;\n+                        }\n+                    }\n+                    if ((weekyears != null && compareReverse(first, weekyears) >= 0 && compareReverse(first, weeks) <= 0) ||\n+                        (compareReverse(first, DurationFieldType.weeks().getField(iChrono)) >= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0)) {\n+                        int woy = 0;\n+                        int dow = 0;\n+                        int currentWeeks = 0;\n+                        for (int i=0; i<count; i++) {\n+                            DurationField fieldi = savedFields[i].iField.getDurationField();\n+                            int value = savedFields[i].iValue;\n+                            if (compareReverse(fieldi, weeks) == 0) {\n+                                currentWeeks += value;\n+                            } else if (compareReverse(fieldi, DurationFieldType.days().getField(iChrono)) == 0) {\n+                                dow = value;\n+                            } else if (compareReverse(fieldi, weekyears) == 0) {\n+                                woy = value;\n+                            } else if (compareReverse(fieldi, years) == 0) {\n+                                year = value;\n+                            } else if (compareReverse(fieldi, months) == 0) {\n+                                if (dow != 0) {\n+                                    throw new IllegalFieldValueException(DurationFieldType.monthOfYear(), null);\n+                                }\n+                                setMonthOfYear(year, value);\n+                            } else {\n+                                throw new IllegalArgumentException(\"Illegal field \" + fieldi);\n+                            }\n+                        }\n+                        if (woy != 0) {\n+                            if (dow == 0) {\n+                                throw new IllegalFieldValueException(DurationFieldType.dayOfWeek(), null);\n+                            }\n+                            setWeekyear(woy);\n+                            setWeekOfWeekyear(currentWeeks);\n+                            setDayOfWeek(dow);\n+                        } else {\n+                            if (weeks != null) {\n+                                setWeekOfWeekyear(currentWeeks);\n+                            }\n+                            int month = getMonthOfYear();\n+                            int day = getDayOfMonth();\n+                            if (month < 1 || month > 12) {\n+                                throw new IllegalFieldValueException(DurationFieldType.monthOfYear(), null);\n+                            }\n+                            if (day < 1 || day > getDaysInYearMonth(year, month)) {\n+                                throw new IllegalFieldValueException(DurationFieldType.dayOfMonth(), null);\n+                            }\n+                            set(year, month, day);\n+                        }\n+                        return iChrono.set(((DateTimeField)(iFields[0])).getFieldType(), getMillis(), year);\n+                    }\n+                }\n+            }\n+            if (count >= 2 && compareReverse(savedFields[1].iField.getDurationField(), first) <= 0 && compareReverse(first, DurationFieldType.days().getField(iChrono)) <= 0) {\n+                int hourOfDay = 0;\n+                int minuteOfHour = 0;\n+                int secondOfMinute = 0;\n+                int millisOfSecond = 0;\n+                int zoneOffset = 0;\n+                for (int i=0; i<count; i++) {\n+                    DurationField field = savedFields[i].iField.getDurationField();\n+                    int value = savedFields[i].iValue;\n+                    if (compareReverse(field, DurationFieldType.hours().getField(iChrono)) == 0) {\n+                        hourOfDay = value;\n+                    } else if (compareReverse(field, DurationFieldType.minutes().getField(iChrono)) == 0) {\n+                        minuteOfHour = value;\n+                    } else if (compareReverse(field, DurationFieldType.seconds().getField(iChrono)) == 0) {\n+                        secondOfMinute = value;\n+                    } else if (compareReverse(field, DurationFieldType.millis().getField(iChrono)) == 0) {\n+                        millisOfSecond = value;\n+                    } else if (compareReverse(field, null) == 0 && (value >= -MAX_MILLIS && value <= MAX_MILLIS)) {\n+                        zoneOffset = value;\n+                    } else {\n+                        throw new IllegalArgumentException(\"Illegal field \" + field);\n+                    }\n+                }\n+                long instant = getChronology().getZone().getDateTimeMillis(year, getMonthOfYear(), getDayOfMonth(),\n+                                                                          hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+                instant += zoneOffset;\n+                return iChrono.set(((DateTimeField)(iFields[0])).getFieldType(), instant, year);\n             }\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}