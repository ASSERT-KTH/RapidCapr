{
    "patch": "// Handle '0' as potential octal\nif (val.length() == 1 && Character.isDigit(val.charAt(0))) {\n    return createInteger(val);\n}\n// Handle signs\nchar firstChar = val.charAt(0);\nboolean negative = firstChar == '-';\n// Some number parser won't accept '+'\nif (firstChar == '+') {\n    val = val.substring(1);\n}\nif (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n    return createLong(negative ? \"-\" + val.substring(2) : val.substring(2));\n}\nint pointPos = val.indexOf('.');\nif (pointPos == -1 && val.toUpperCase(Locale.ROOT).indexOf('E') == -1) {\n    // int\n    try {\n        return createInteger(negative ? \"-\" + val : val);\n    } catch (NumberFormatException e) {\n        // ignore error, throw float exception\n    }\n    try {\n        return createLong(negative ? \"-\" + val : val);\n    } catch (NumberFormatException e) {\n        // ignore error, throw float exception\n    }\n    return NumberUtils.createBigInteger(negative ? \"-\" + val : val);\n}\n// double\nif (val.charAt(val.length() - 1) == 'D' || val.charAt(val.length() - 1) == 'd' ||\n        val.charAt(val.length() - 1) == 'F' || val.charAt(val.length() - 1) == 'f') {\n    throw new NumberFormatException(val + \" is not a valid number.\");\n}\nif (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n    try {\n        Float f = createFloat(val);\n        if (!f.isInfinite() && !(f.floatValue() == 0.0F && !negative && !val.startsWith(\"+\"))) {\n            return f;\n        }\n    } catch (NumberFormatException nfe) {\n        // nfe.printStackTrace();\n    }\n} else {\n    try {\n        Double d = createDouble(val);\n        if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !negative && !val.startsWith(\"+\"))) {\n            return d;\n        }\n    } catch (NumberFormatException nfe) {\n        // nfe.printStackTrace();\n    }\n}\n// BigInteger or BigDecimal format\ntry {\n    return createBigDecimal(val);\n} catch (NumberFormatException e) {\n}\nthrow new NumberFormatException(val + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..c28d1a6e 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,65 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+// Handle '0' as potential octal\n+if (val.length() == 1 && Character.isDigit(val.charAt(0))) {\n+    return createInteger(val);\n+}\n+// Handle signs\n+char firstChar = val.charAt(0);\n+boolean negative = firstChar == '-';\n+// Some number parser won't accept '+'\n+if (firstChar == '+') {\n+    val = val.substring(1);\n+}\n+if (val.startsWith(\"0x\") || val.startsWith(\"0X\")) {\n+    return createLong(negative ? \"-\" + val.substring(2) : val.substring(2));\n+}\n+int pointPos = val.indexOf('.');\n+if (pointPos == -1 && val.toUpperCase(Locale.ROOT).indexOf('E') == -1) {\n+    // int\n+    try {\n+        return createInteger(negative ? \"-\" + val : val);\n+    } catch (NumberFormatException e) {\n+        // ignore error, throw float exception\n+    }\n+    try {\n+        return createLong(negative ? \"-\" + val : val);\n+    } catch (NumberFormatException e) {\n+        // ignore error, throw float exception\n+    }\n+    return NumberUtils.createBigInteger(negative ? \"-\" + val : val);\n+}\n+// double\n+if (val.charAt(val.length() - 1) == 'D' || val.charAt(val.length() - 1) == 'd' ||\n+        val.charAt(val.length() - 1) == 'F' || val.charAt(val.length() - 1) == 'f') {\n+    throw new NumberFormatException(val + \" is not a valid number.\");\n+}\n+if (val.endsWith(\"f\") || val.endsWith(\"F\")) {\n+    try {\n+        Float f = createFloat(val);\n+        if (!f.isInfinite() && !(f.floatValue() == 0.0F && !negative && !val.startsWith(\"+\"))) {\n+            return f;\n+        }\n+    } catch (NumberFormatException nfe) {\n+        // nfe.printStackTrace();\n+    }\n+} else {\n+    try {\n+        Double d = createDouble(val);\n+        if (!d.isInfinite() && !(d.doubleValue() == 0.0D && !negative && !val.startsWith(\"+\"))) {\n+            return d;\n+        }\n+    } catch (NumberFormatException nfe) {\n+        // nfe.printStackTrace();\n+    }\n+}\n+// BigInteger or BigDecimal format\n+try {\n+    return createBigDecimal(val);\n+} catch (NumberFormatException e) {\n+}\n+throw new NumberFormatException(val + \" is not a valid number.\");\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}