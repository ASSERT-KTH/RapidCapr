{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // Check if we have fields in week-based year\n        DateTimeField firstField = savedFields[0].iField;\n        if (firstField.getDurationField().getUnitMillis() >=\n                DurationFieldType.weekyears().getField(iChrono).getUnitMillis()) {\n            // Compute base year for parsing fields in week-based year\n            int year = iDefaultYear;\n            DateTimeFieldType resolvingField = null;\n            for (SavedField savedField : savedFields) {\n                if (savedField.iField.getType() == DateTimeFieldType.weekyear() ||\n                        savedField.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n                    resolvingField = savedField.iField.getType();\n                    break;\n                }\n            }\n            if (resolvingField != null) {\n                savedFields = resolve(savedFields, resolvingField, year);\n                count = savedFields.length;\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\n/**\n * Resolves any week-based year fields in the saved fields, updating the given year value as necessary.\n *\n * @param savedFields the saved fields to resolve\n * @param resolvingField the field type to resolve (weekyear or weekOfWeekyear)\n * @param year the base year for parsing\n * @return the resolved saved fields\n */\nprivate static SavedField[] resolve(SavedField[] savedFields, DateTimeFieldType resolvingField, int year) {\n    MutableDateTime dt = new MutableDateTime(year, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC());\n    for (SavedField sf : savedFields) {\n        DateTimeFieldType fieldType = sf.iField.getType();\n        if (fieldType == resolvingField) {\n            int value = dt.get(fieldType);\n            int newValue = sf.iField.getDurationField().add(value, sf.iValue);\n            dt.set(fieldType, newValue);\n            sf.iValue = 0; // Clear saved value to avoid duplicate application\n        } else if (fieldType == DateTimeFieldType.weekyear()) {\n            dt.setWeekyear(sf.iValue); // Update weekyear to use as base year\n        } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n            // Compute the corresponding day of the week for the specified week year and week of week year\n            int weekYear = dt.getWeekyear();\n            int weekOfWeekyear = sf.iValue;\n            LocalDate weekDate = new LocalDate(weekYear, 1, 1, ISOChronology.getInstanceUTC()).withWeekOfWeekyear(weekOfWeekyear);\n            int dayOfWeek = dt.getDayOfWeek();\n            int weekDay = weekDate.getDayOfWeek();\n            int daysOffset = dayOfWeek - weekDay;\n            if (weekYear < dt.getYear() ||\n                    (weekYear == dt.getYear() && weekDate.isBefore(dt.toLocalDate()))) {\n                daysOffset += 7;\n            }\n            dt.addDays(daysOffset);\n            sf.iValue = 0; // Clear saved value to avoid duplicate application\n        }\n    }\n    return filter(savedFields);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..50b1fd93 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,103 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // Check if we have fields in week-based year\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (firstField.getDurationField().getUnitMillis() >=\n+                DurationFieldType.weekyears().getField(iChrono).getUnitMillis()) {\n+            // Compute base year for parsing fields in week-based year\n+            int year = iDefaultYear;\n+            DateTimeFieldType resolvingField = null;\n+            for (SavedField savedField : savedFields) {\n+                if (savedField.iField.getType() == DateTimeFieldType.weekyear() ||\n+                        savedField.iField.getType() == DateTimeFieldType.weekOfWeekyear()) {\n+                    resolvingField = savedField.iField.getType();\n+                    break;\n+                }\n+            }\n+            if (resolvingField != null) {\n+                savedFields = resolve(savedFields, resolvingField, year);\n+                count = savedFields.length;\n             }\n         }\n+    }\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n-        } catch (IllegalFieldValueException e) {\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n             if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n-            throw e;\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+    }\n+\n+    return millis;\n+}\n+\n+/**\n+ * Resolves any week-based year fields in the saved fields, updating the given year value as necessary.\n+ *\n+ * @param savedFields the saved fields to resolve\n+ * @param resolvingField the field type to resolve (weekyear or weekOfWeekyear)\n+ * @param year the base year for parsing\n+ * @return the resolved saved fields\n+ */\n+private static SavedField[] resolve(SavedField[] savedFields, DateTimeFieldType resolvingField, int year) {\n+    MutableDateTime dt = new MutableDateTime(year, 1, 1, 0, 0, 0, 0, ISOChronology.getInstanceUTC());\n+    for (SavedField sf : savedFields) {\n+        DateTimeFieldType fieldType = sf.iField.getType();\n+        if (fieldType == resolvingField) {\n+            int value = dt.get(fieldType);\n+            int newValue = sf.iField.getDurationField().add(value, sf.iValue);\n+            dt.set(fieldType, newValue);\n+            sf.iValue = 0; // Clear saved value to avoid duplicate application\n+        } else if (fieldType == DateTimeFieldType.weekyear()) {\n+            dt.setWeekyear(sf.iValue); // Update weekyear to use as base year\n+        } else if (fieldType == DateTimeFieldType.weekOfWeekyear()) {\n+            // Compute the corresponding day of the week for the specified week year and week of week year\n+            int weekYear = dt.getWeekyear();\n+            int weekOfWeekyear = sf.iValue;\n+            LocalDate weekDate = new LocalDate(weekYear, 1, 1, ISOChronology.getInstanceUTC()).withWeekOfWeekyear(weekOfWeekyear);\n+            int dayOfWeek = dt.getDayOfWeek();\n+            int weekDay = weekDate.getDayOfWeek();\n+            int daysOffset = dayOfWeek - weekDay;\n+            if (weekYear < dt.getYear() ||\n+                    (weekYear == dt.getYear() && weekDate.isBefore(dt.toLocalDate()))) {\n+                daysOffset += 7;\n             }\n+            dt.addDays(daysOffset);\n+            sf.iValue = 0; // Clear saved value to avoid duplicate application\n         }\n-        \n-        return millis;\n     }\n+    return filter(savedFields);\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}