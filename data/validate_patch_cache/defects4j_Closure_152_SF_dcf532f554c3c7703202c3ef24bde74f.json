{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    if (typeOfThis != null) {\n      typeOfThis = tryCastToObject(typeOfThis.resolve(t, scope), t, typeOfThis);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = tryCastToObject(iface.resolve(t, scope), t, iface);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }\n  \n  private ObjectType tryCastToObject(JSType type, ErrorReporter t, Node node) {\n    if (!(type instanceof ObjectType)) {\n      report(t, node, \"Expected ObjectType\");\n      return null;\n    }\n    return (ObjectType) type;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..21f1d40f 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,13 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+      typeOfThis = tryCastToObject(typeOfThis.resolve(t, scope), t, typeOfThis);\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+      ObjectType resolvedIface = tryCastToObject(iface.resolve(t, scope), t, iface);\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n@@ -890,6 +892,14 @@ public class FunctionType extends PrototypeObjectType {\n \n     return super.resolveInternal(t, scope);\n   }\n+  \n+  private ObjectType tryCastToObject(JSType type, ErrorReporter t, Node node) {\n+    if (!(type instanceof ObjectType)) {\n+      report(t, node, \"Expected ObjectType\");\n+      return null;\n+    }\n+    return (ObjectType) type;\n+  }\n \n   @Override\n   public String toDebugHashCodeString() {",
    "result_reason": "error: method tryCastToObject in class FunctionType cannot be applied to given types;",
    "test_result": "ERROR"
}