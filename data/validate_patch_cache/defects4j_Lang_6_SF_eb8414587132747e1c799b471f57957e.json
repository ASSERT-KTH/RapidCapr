{
    "patch": "private static Set<Locale> createAvailableLocaleSet() {\n    Set<Locale> set = new HashSet<>();\n    Locale[] availableLocales = Locale.getAvailableLocales();\n    Collections.addAll(set, availableLocales);\n    return set;\n}\n\npublic static boolean isAvailableLocale(Locale locale) {\n    return availableLocaleSet().contains(locale);\n}\n\nprivate static Set<Locale> availableLocaleSet() {\n    return cAvailableLocaleSet != null ? cAvailableLocaleSet : (cAvailableLocaleSet = createAvailableLocaleSet());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..57b66432 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,20 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-            }\n-        }\n-    }\n+private static Set<Locale> createAvailableLocaleSet() {\n+    Set<Locale> set = new HashSet<>();\n+    Locale[] availableLocales = Locale.getAvailableLocales();\n+    Collections.addAll(set, availableLocales);\n+    return set;\n+}\n+\n+public static boolean isAvailableLocale(Locale locale) {\n+    return availableLocaleSet().contains(locale);\n+}\n+\n+private static Set<Locale> availableLocaleSet() {\n+    return cAvailableLocaleSet != null ? cAvailableLocaleSet : (cAvailableLocaleSet = createAvailableLocaleSet());\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}