{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // Evaluate function at initial guess\n    double yInitial = f.value(initial);\n\n    // Check if initial guess is already a root\n    if (Math.abs(yInitial) < functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // Evaluate function at endpoints\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if (isBracket(min, max, yMin, yMax, yInitial)) {\n        // full Brent algorithm starting with provided initial guess\n        return solve(f, min, yMin, max, yMax, initial, yInitial);\n    } else {\n        // there is no root within the given interval\n        throw new IllegalArgumentException(\"The endpoints do not bracket a root\");\n    }\n}\n\nprivate boolean isBracket(double min, double max, double yMin, double yMax, double yInitial) {\n    // the function values at the endpoints must have opposite signs\n    if (yMi",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..7a541ab94 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,49 +95,37 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n-\n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n-\n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // Evaluate function at initial guess\n+    double yInitial = f.value(initial);\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n-            return result;\n-        }\n-\n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n-        }\n+    // Check if initial guess is already a root\n+    if (Math.abs(yInitial) < functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n \n+    // Evaluate function at endpoints\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n+    if (isBracket(min, max, yMin, yMax, yInitial)) {\n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);\n-\n+    } else {\n+        // there is no root within the given interval\n+        throw new IllegalArgumentException(\"The endpoints do not bracket a root\");\n     }\n+}\n+\n+private boolean isBracket(double min, double max, double yMin, double yMax, double yInitial) {\n+    // the function values at the endpoints must have opposite signs\n+    if (yMi\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}