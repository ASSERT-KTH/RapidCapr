{
    "patch": " private boolean isPrototypePropertyAssign(Node assign) {\n      Node lhs = assign.getFirstChild();\n      if (lhs != null && lhs.getType() == Token.GETPROP) {\n        Node objNode = lhs.getFirstChild();\n        if (objNode != null\n            && objNode.getType() == Token.GETPROP\n            && objNode.getFirstChild() != null\n            && objNode.getFirstChild().getNext() == null) {\n          objNode = objNode.getFirstChild();\n        }\n        return objNode != null\n            && objNode.getType() == Token.NAME\n            && objNode.getString().equals(\"Object\")\n            && lhs.getLastChild().getString().equals(\"prototype\");\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..01eef519 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,27 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+ private boolean isPrototypePropertyAssign(Node assign) {\n+      Node lhs = assign.getFirstChild();\n+      if (lhs != null && lhs.getType() == Token.GETPROP) {\n+        Node objNode = lhs.getFirstChild();\n+        if (objNode != null\n+            && objNode.getType() == Token.GETPROP\n+            && objNode.getFirstChild() != null\n+            && objNode.getFirstChild().getNext() == null) {\n+          objNode = objNode.getFirstChild();\n+        }\n+        return objNode != null\n+            && objNode.getType() == Token.NAME\n+            && objNode.getString().equals(\"Object\")\n+            && lhs.getLastChild().getString().equals(\"prototype\");\n+      }\n+      return false;\n+    }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}