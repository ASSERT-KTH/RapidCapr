{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Map<String, Node> declaredVars = new HashMap<String, Node>();\n      for (Node astParameter : astParameters.children()) {\n        if (astParameter.isName()) {\n          String varName = astParameter.getString();\n          if (declaredVars.containsKey(varName)) {\n            compiler.report(JSError.make(\n                astParameter, VarCheck.VAR_MULTIPLY_DECLARED_ERROR, varName));\n          } else {\n            declaredVars.put(varName, astParameter);\n            Node jsDocParameter = getJsDocParameterByName(jsDocParameters, varName);\n            defineSlot(astParameter, functionNode,\n                jsDocParameter != null ? jsDocParameter.getJSType() : null, true);\n          }\n        } else {\n          defineSlot(astParameter, functionNode, null, true);\n        }\n      }\n    }\n  }\n} // end declareArguments\n\nprivate Node getJsDocParameterByName(Node jsDocParameters, String varName) {\n  for (Node jsDocParameter = jsDocParameters.getFirstChild(); jsDocParameter != null;\n       jsDocParameter = jsDocParameter.getNext()) {\n    if (jsDocParameter.isString() && jsDocParameter.getString().equals(varName)) {\n      return jsDocParameter;\n    }\n  }\n  return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..6323f889 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,43 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n-            }\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Map<String, Node> declaredVars = new HashMap<String, Node>();\n+      for (Node astParameter : astParameters.children()) {\n+        if (astParameter.isName()) {\n+          String varName = astParameter.getString();\n+          if (declaredVars.containsKey(varName)) {\n+            compiler.report(JSError.make(\n+                astParameter, VarCheck.VAR_MULTIPLY_DECLARED_ERROR, varName));\n+          } else {\n+            declaredVars.put(varName, astParameter);\n+            Node jsDocParameter = getJsDocParameterByName(jsDocParameters, varName);\n+            defineSlot(astParameter, functionNode,\n+                jsDocParameter != null ? jsDocParameter.getJSType() : null, true);\n           }\n+        } else {\n+          defineSlot(astParameter, functionNode, null, true);\n         }\n       }\n-    } // end declareArguments\n+    }\n+  }\n+} // end declareArguments\n+\n+private Node getJsDocParameterByName(Node jsDocParameters, String varName) {\n+  for (Node jsDocParameter = jsDocParameters.getFirstChild(); jsDocParameter != null;\n+       jsDocParameter = jsDocParameter.getNext()) {\n+    if (jsDocParameter.isString() && jsDocParameter.getString().equals(varName)) {\n+      return jsDocParameter;\n+    }\n+  }\n+  return null;\n+}\n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}