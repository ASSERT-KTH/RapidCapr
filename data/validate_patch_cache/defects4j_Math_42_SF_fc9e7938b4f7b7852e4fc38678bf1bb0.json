{
    "patch": "protected RealPointValuePair getSolution() {\n      int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n      Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n      double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n\n      Set<Integer> basicRows = new HashSet<Integer>();\n      double[] coefficients = new double[getOriginalNumDecisionVariables()];\n\n      // First, handle the special case where all decision variables are non-basic\n      // and we are trying to minimize/maximize the objective function\n      if (negativeVarBasicRow == null && basicRows.size() == 0) {\n        for (int i = 0; i < coefficients.length; i++) {\n          int colIndex = columnLabels.indexOf(\"x\" + i);\n          if (colIndex < 0) {\n            coefficients[i] = 0;\n          } else {\n            coefficients[i] = 0 - f.getCoefficient(colIndex);\n          }\n        }\n        return new RealPointValuePair(coefficients, f.getConstant() + (restrictToNonNegative ? 0 : mostNegative));\n      }\n\n      // Otherwise, add the coefficients of the basic variables to the solution\n      for (int i = 0; i < coefficients.length; i++) {\n        int colIndex = columnLabels.indexOf(\"x\" + i);\n        if (colIndex < 0) {\n          coefficients[i] = 0;\n        } else {\n          Integer basicRow = getBasicRow(colIndex);\n          if (negativeVarBasicRow != null && basicRow == negativeVarBasicRow) {\n            coefficients[i] = (restrictToNonNegative ? 0 : mostNegative);\n          } else if (basicRows.contains(basicRow)) {\n            continue;\n          } else {\n            basicRows.add(basicRow);\n            coefficients[i] = getEntry(basicRow, getRhsOffset()) -\n                              (restrictToNonNegative ? 0 : mostNegative);\n          }\n        }\n      }\n      return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 02c22b59f..a6a79fa3f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -393,33 +393,45 @@ class SimplexTableau implements Serializable {\n      *\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n+protected RealPointValuePair getSolution() {\n       int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);\n       Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;\n       double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());\n \n       Set<Integer> basicRows = new HashSet<Integer>();\n       double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-      for (int i = 0; i < coefficients.length; i++) {\n+\n+      // First, handle the special case where all decision variables are non-basic\n+      // and we are trying to minimize/maximize the objective function\n+      if (negativeVarBasicRow == null && basicRows.size() == 0) {\n+        for (int i = 0; i < coefficients.length; i++) {\n           int colIndex = columnLabels.indexOf(\"x\" + i);\n           if (colIndex < 0) {\n             coefficients[i] = 0;\n-            continue;\n+          } else {\n+            coefficients[i] = 0 - f.getCoefficient(colIndex);\n           }\n+        }\n+        return new RealPointValuePair(coefficients, f.getConstant() + (restrictToNonNegative ? 0 : mostNegative));\n+      }\n+\n+      // Otherwise, add the coefficients of the basic variables to the solution\n+      for (int i = 0; i < coefficients.length; i++) {\n+        int colIndex = columnLabels.indexOf(\"x\" + i);\n+        if (colIndex < 0) {\n+          coefficients[i] = 0;\n+        } else {\n           Integer basicRow = getBasicRow(colIndex);\n-              // if the basic row is found to be the objective function row\n-              // set the coefficient to 0 -> this case handles unconstrained \n-              // variables that are still part of the objective function\n-          if (basicRows.contains(basicRow)) {\n-              // if multiple variables can take a given value\n-              // then we choose the first and set the rest equal to 0\n-              coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative);\n+          if (negativeVarBasicRow != null && basicRow == negativeVarBasicRow) {\n+            coefficients[i] = (restrictToNonNegative ? 0 : mostNegative);\n+          } else if (basicRows.contains(basicRow)) {\n+            continue;\n           } else {\n-              basicRows.add(basicRow);\n-              coefficients[i] =\n-                  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                  (restrictToNonNegative ? 0 : mostNegative);\n+            basicRows.add(basicRow);\n+            coefficients[i] = getEntry(basicRow, getRhsOffset()) -\n+                              (restrictToNonNegative ? 0 : mostNegative);\n           }\n+        }\n       }\n       return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}