{
    "patch": "  public TypePair getTypesUnderInequality(JSType that) {\n    // unions types\n    if (that instanceof UnionType) {\n      TypePair p = that.getTypesUnderInequality(this);\n      return new TypePair(p.typeB, p.typeA);\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n      case TRUE:\n        return new TypePair(null, null);\n\n      case FALSE:\n      case UNKNOWN:\n        return new TypePair(this, that);\n        \n      default:\n        throw new IllegalStateException();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..660f8eff 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -700,6 +700,16 @@ public abstract class JSType implements Serializable {\n       return new TypePair(p.typeB, p.typeA);\n     }\n \n+    // other types\n+    switch (this.testForEquality(that)) {\n+      case TRUE:\n+  public TypePair getTypesUnderInequality(JSType that) {\n+    // unions types\n+    if (that instanceof UnionType) {\n+      TypePair p = that.getTypesUnderInequality(this);\n+      return new TypePair(p.typeB, p.typeA);\n+    }\n+\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n@@ -708,6 +718,15 @@ public abstract class JSType implements Serializable {\n       case FALSE:\n       case UNKNOWN:\n         return new TypePair(this, that);\n+        \n+      default:\n+        throw new IllegalStateException();\n+    }\n+  }\n+\n+      case FALSE:\n+      case UNKNOWN:\n+        return new TypePair(this, that);\n     }\n \n     // switch case is exhaustive",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}