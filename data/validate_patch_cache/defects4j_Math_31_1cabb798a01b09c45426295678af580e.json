{
    "patch": "    private long binomial(final int n, final int k, final double p) {\n        long c = 1;\n        double logp = FastMath.log(p);\n        double log1mP = FastMath.log1p(-p);\n        if (k > n / 2) {\n            // C(n, k) == C(n, n - k), but swapping k\n            // and n - k may offer better numerical stability\n            // computing log(C(n, n - k)) instead of log(C(n, k))\n            for (int i = n; i > k; i--) {\n                c *= i;\n                c /= n - i + 1;\n                if (c > Long.MAX_VALUE / 2) {\n                    // Too big, use logs\n                    // log(C(n, k)) = log(n!/(n-k)!) - log(k!)\n                    double logc = 0;\n                    for (; k > 0; k--) {\n                        logc += FastMath.log(n - k + 1) - logk;\n                    }\n                    logc += logp * n;\n                    logc += log1mP * k;\n                    return (long) FastMath.rint(FastMath.exp(logc));\n                }\n            }\n        } else {\n            // computing log(C(n, k))\n            for (int i = 1; i <= k; i++) {\n                c *= n - k + i;\n                c /= i;\n                if (c > Long.MAX_VALUE / 2) {\n                    // Too big, use logs\n                    // log(C(n, k)) = log(n!/(n-k)!) - log(k!)\n                    double logc = 0;\n                    for (; k > 0; k--) {\n                        logc += FastMath.log(n - k + 1) - logk;\n                    }\n                    logc += logp * n;\n                    logc += log1mP * k;\n                    return (long) FastMath.rint(FastMath.exp(logc));\n                }\n            }\n        }\n\n        // C(n, k) is representable as a long\n        c = (c < 0) ? Long.MAX_VALUE : c;\n        return c;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..841694ea9 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,51 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n-\n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n-        }\n-\n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n+    private long binomial(final int n, final int k, final double p) {\n+        long c = 1;\n+        double logp = FastMath.log(p);\n+        double log1mP = FastMath.log1p(-p);\n+        if (k > n / 2) {\n+            // C(n, k) == C(n, n - k), but swapping k\n+            // and n - k may offer better numerical stability\n+            // computing log(C(n, n - k)) instead of log(C(n, k))\n+            for (int i = n; i > k; i--) {\n+                c *= i;\n+                c /= n - i + 1;\n+                if (c > Long.MAX_VALUE / 2) {\n+                    // Too big, use logs\n+                    // log(C(n, k)) = log(n!/(n-k)!) - log(k!)\n+                    double logc = 0;\n+                    for (; k > 0; k--) {\n+                        logc += FastMath.log(n - k + 1) - logk;\n                     }\n+                    logc += logp * n;\n+                    logc += log1mP * k;\n+                    return (long) FastMath.rint(FastMath.exp(logc));\n                 }\n             }\n-\n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n-\n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n-            }\n-\n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n+        } else {\n+            // computing log(C(n, k))\n+            for (int i = 1; i <= k; i++) {\n+                c *= n - k + i;\n+                c /= i;\n+                if (c > Long.MAX_VALUE / 2) {\n+                    // Too big, use logs\n+                    // log(C(n, k)) = log(n!/(n-k)!) - log(k!)\n+                    double logc = 0;\n+                    for (; k > 0; k--) {\n+                        logc += FastMath.log(n - k + 1) - logk;\n+                    }\n+                    logc += logp * n;\n+                    logc += log1mP * k;\n+                    return (long) FastMath.rint(FastMath.exp(logc));\n+                }\n             }\n-\n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n-        }\n-\n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n         }\n \n-        return hN;\n+        // C(n, k) is representable as a long\n+        c = (c < 0) ? Long.MAX_VALUE : c;\n+        return c;\n     }\n \n }",
    "result_reason": "error: no suitable method found for evaluate(double,double,int)",
    "test_result": "ERROR"
}