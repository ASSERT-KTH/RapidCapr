{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int offsetBefore = getOffset(instantLocal - 1);\n    int offsetAfter = getOffset(instantLocal);\n    \n    // if we don't have a transition, return the offset\n    if (offsetBefore == offsetAfter) {\n        return offsetBefore;\n    }\n\n    // calculate the next transition time from the before offset\n    long nextTransition = nextTransition(instantLocal - offsetBefore);\n    \n    // if the \"before\" offset transition is exactly equal to the given instant minus the \"before\" offset,\n    // then the given instant is exactly at the transition; the offset should be the \"before\" offset.\n    if (nextTransition == (instantLocal - offsetBefore)) {\n        return offsetBefore;\n    }\n\n    // calculate the next transition time from the after offset\n    nextTransition = nextTransition(instantLocal - offsetAfter);\n    \n    // if the given instant plus the \"after\" offset is before the next transition time,\n    // then the offset should be the \"after\" offset.\n    if (instantLocal + offsetAfter < nextTransition) {\n        return offsetAfter;\n    }\n\n    // if the given instant plus the \"after\" offset is after or equal to the next transition time,\n    // then the offset should be the \"before\" offset.\n    return offsetBefore;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..0e261d17 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,38 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    int offsetBefore = getOffset(instantLocal - 1);\n+    int offsetAfter = getOffset(instantLocal);\n+    \n+    // if we don't have a transition, return the offset\n+    if (offsetBefore == offsetAfter) {\n+        return offsetBefore;\n     }\n \n+    // calculate the next transition time from the before offset\n+    long nextTransition = nextTransition(instantLocal - offsetBefore);\n+    \n+    // if the \"before\" offset transition is exactly equal to the given instant minus the \"before\" offset,\n+    // then the given instant is exactly at the transition; the offset should be the \"before\" offset.\n+    if (nextTransition == (instantLocal - offsetBefore)) {\n+        return offsetBefore;\n+    }\n+\n+    // calculate the next transition time from the after offset\n+    nextTransition = nextTransition(instantLocal - offsetAfter);\n+    \n+    // if the given instant plus the \"after\" offset is before the next transition time,\n+    // then the offset should be the \"after\" offset.\n+    if (instantLocal + offsetAfter < nextTransition) {\n+        return offsetAfter;\n+    }\n+\n+    // if the given instant plus the \"after\" offset is after or equal to the next transition time,\n+    // then the offset should be the \"before\" offset.\n+    return offsetBefore;\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}