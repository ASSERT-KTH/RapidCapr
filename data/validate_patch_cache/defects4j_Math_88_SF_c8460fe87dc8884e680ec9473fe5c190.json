{
    "patch": "    protected RealPointValuePair getSolution() {\n        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n        Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n        boolean[] isVariableSet = new boolean[getOriginalNumDecisionVariables()];\n\n        for (int i = 0; i < coefficients.length; i++) {\n            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n\n            if (basicRow != null) {\n                double entry = getEntry(basicRow, getRhsOffset());\n                if (!restrictToNonNegative && entry < mostNegative) {\n                    mostNegative = entry;\n                }\n\n                for (int j = getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n                    if (!isVariableSet[j - getNumObjectiveFunctions()] && isZero(tableau.getEntry(basicRow, j), eps)) {\n                        coefficients[j - getNumObjectiveFunctions()] = (j - getNumObjectiveFunctions() == i) ? entry : 0.0;\n                        isVariableSet[j - getNumObjectiveFunctions()] = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n    }\n\n    private boolean isZero(double value, double eps) {\n        return Math.abs(value) < eps;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..1a9260cff 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -326,24 +326,34 @@ class SimplexTableau implements Serializable {\n         Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n         double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+        boolean[] isVariableSet = new boolean[getOriginalNumDecisionVariables()];\n+\n         for (int i = 0; i < coefficients.length; i++) {\n             basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n+\n             if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+                double entry = getEntry(basicRow, getRhsOffset());\n+                if (!restrictToNonNegative && entry < mostNegative) {\n+                    mostNegative = entry;\n+                }\n+\n+                for (int j = getNumObjectiveFunctions(); j < tableau.getWidth() - 1; j++) {\n+                    if (!isVariableSet[j - getNumObjectiveFunctions()] && isZero(tableau.getEntry(basicRow, j), eps)) {\n+                        coefficients[j - getNumObjectiveFunctions()] = (j - getNumObjectiveFunctions() == i) ? entry : 0.0;\n+                        isVariableSet[j - getNumObjectiveFunctions()] = true;\n+                        break;\n                     }\n                 }\n             }\n         }\n+\n         return new RealPointValuePair(coefficients, f.getValue(coefficients));\n     }\n \n+    private boolean isZero(double value, double eps) {\n+        return Math.abs(value) < eps;\n+    }\n+\n     /**\n      * Subtracts a multiple of one row from another.\n      * <p>",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}