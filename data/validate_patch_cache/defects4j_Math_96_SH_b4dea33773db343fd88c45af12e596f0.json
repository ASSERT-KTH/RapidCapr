{
    "patch": "if (other instanceof Complex) {\n    double otherReal = ((Complex) other).getReal();\n    double otherImaginary = ((Complex) other).getImaginary();\n    if (isNaN() && ((Complex)other).isNaN()) {\n        ret = true;\n    } else if (Double.compare(real, otherReal) == 0 && Double.compare(imaginary, otherImaginary) == 0) {\n        ret = true;\n    } else if (Double.isInfinite(real) && Double.isInfinite(imaginary) && Double.isInfinite(otherReal) && Double.isInfinite(otherImaginary)) {\n        ret = (Double.compare(real, otherReal) == 0) && (Double.compare(imaginary, otherImaginary) == 0);\n    } else {\n        ret = Math.abs(real - otherReal) < Math.ulp(real) && Math.abs(imaginary - otherImaginary) < Math.ul",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..1a87eb25d 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,17 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+if (other instanceof Complex) {\n+    double otherReal = ((Complex) other).getReal();\n+    double otherImaginary = ((Complex) other).getImaginary();\n+    if (isNaN() && ((Complex)other).isNaN()) {\n+        ret = true;\n+    } else if (Double.compare(real, otherReal) == 0 && Double.compare(imaginary, otherImaginary) == 0) {\n+        ret = true;\n+    } else if (Double.isInfinite(real) && Double.isInfinite(imaginary) && Double.isInfinite(otherReal) && Double.isInfinite(otherImaginary)) {\n+        ret = (Double.compare(real, otherReal) == 0) && (Double.compare(imaginary, otherImaginary) == 0);\n+    } else {\n+        ret = Math.abs(real - otherReal) < Math.ulp(real) && Math.abs(imaginary - otherImaginary) < Math.ul\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}