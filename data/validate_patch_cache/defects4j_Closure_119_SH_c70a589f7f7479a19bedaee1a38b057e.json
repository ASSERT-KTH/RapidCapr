{
    "patch": "              case Token.NAME:\n                // This may be a variable get or set.\n                if (parent != null) {\n                  Node rvalueNode = n.getNext();\n                  switch (parent.getType()) {\n                    case Token.VAR:\n                      isSet = true;\n                      rvalueNode = n.getFirstChild();\n                      type = rvalueNode == null ? Name.Type.OTHER : getValueType(rvalueNode);\n                      break;\n                    case Token.ASSIGN:\n                      if (parent.getFirstChild() == n) {\n                        isSet = true;\n                        type = getValueType(rvalueNode);\n                      }\n                      break;\n                    case Token.GETPROP:\n                      return;\n                    case Token.FUNCTION:\n                      Node gramps = parent.getParent();\n                      if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                        return;\n                      }\n                      isSet = true;\n                      type = Name.Type.FUNCTION;\n                      break;\n                    case Token.INC:\n                    case Token.DEC:\n                      isSet = true;\n                      type = Name.Type.OTHER;\n                      break;\n                    default:\n                      if (NodeUtil.isAssignmentOp(parent) &&\n                          parent.getFirstChild() == n) {\n                        isSet = true;\n                        type = Name.Type.OTHER;\n                      }\n                  }\n                  name = n.getString();\n                }\n                break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..6ebe8ea7 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,47 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.NAME:\n+                // This may be a variable get or set.\n+                if (parent != null) {\n+                  Node rvalueNode = n.getNext();\n+                  switch (parent.getType()) {\n+                    case Token.VAR:\n+                      isSet = true;\n+                      rvalueNode = n.getFirstChild();\n+                      type = rvalueNode == null ? Name.Type.OTHER : getValueType(rvalueNode);\n+                      break;\n+                    case Token.ASSIGN:\n+                      if (parent.getFirstChild() == n) {\n+                        isSet = true;\n+                        type = getValueType(rvalueNode);\n+                      }\n+                      break;\n+                    case Token.GETPROP:\n+                      return;\n+                    case Token.FUNCTION:\n+                      Node gramps = parent.getParent();\n+                      if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                        return;\n+                      }\n+                      isSet = true;\n+                      type = Name.Type.FUNCTION;\n+                      break;\n+                    case Token.INC:\n+                    case Token.DEC:\n+                      isSet = true;\n+                      type = Name.Type.OTHER;\n+                      break;\n+                    default:\n+                      if (NodeUtil.isAssignmentOp(parent) &&\n+                          parent.getFirstChild() == n) {\n+                        isSet = true;\n+                        type = Name.Type.OTHER;\n+                      }\n+                  }\n+                  name = n.getString();\n+                }\n+                break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable gramps is already defined in method collect(JSModule,Scope,Node)",
    "test_result": "ERROR"
}