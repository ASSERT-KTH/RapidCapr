{
    "patch": "if (ch == '\\\\') {\n    int escape = 1;\n    if ((i + 1) < len) {\n        char nextChar = str.charAt(i + 1);\n        switch (nextChar) {\n            case '\\\\':\n                out.write('\\\\');\n                break;\n            case 'n':\n                out.write('\\n');\n                break;\n            case 't':\n                out.write('\\t');\n                break;\n            case 'r':\n                out.write('\\r');\n                break;\n            case 'f':\n                out.write('\\f');\n                break;\n            case 'b':\n                out.write('\\b');\n                break;\n            case '\\\"':\n                out.write('\\\"');\n                break;\n            case '\\'':\n                out.write('\\'');\n                break;\n            case 'u':\n                try {\n                    if (i + 5 < len) {\n                        // Unicode escape.\n                        final int code = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n                        out.write((char) code);\n                        escape = 5;\n                    } else {\n                        throw new IllegalArgumentException(\"Malformed Unicode escape\");\n                    }\n                } catch (NumberFormatException e) {\n                    throw new IllegalArgumentException(\"Unable to parse unicode value: \" + str.substring(i + 1, i + 6));\n                }\n                break;\n            default:\n                out.write('\\\\');\n                break;\n        }\n    } else {\n        out.write('\\\\');\n    }\n    i += escape;\n} else {",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..7effc2d1 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,58 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+if (ch == '\\\\') {\n+    int escape = 1;\n+    if ((i + 1) < len) {\n+        char nextChar = str.charAt(i + 1);\n+        switch (nextChar) {\n+            case '\\\\':\n+                out.write('\\\\');\n+                break;\n+            case 'n':\n+                out.write('\\n');\n+                break;\n+            case 't':\n+                out.write('\\t');\n+                break;\n+            case 'r':\n+                out.write('\\r');\n+                break;\n+            case 'f':\n+                out.write('\\f');\n+                break;\n+            case 'b':\n+                out.write('\\b');\n+                break;\n+            case '\\\"':\n+                out.write('\\\"');\n+                break;\n+            case '\\'':\n+                out.write('\\'');\n+                break;\n+            case 'u':\n+                try {\n+                    if (i + 5 < len) {\n+                        // Unicode escape.\n+                        final int code = Integer.parseInt(str.substring(i + 2, i + 6), 16);\n+                        out.write((char) code);\n+                        escape = 5;\n+                    } else {\n+                        throw new IllegalArgumentException(\"Malformed Unicode escape\");\n+                    }\n+                } catch (NumberFormatException e) {\n+                    throw new IllegalArgumentException(\"Unable to parse unicode value: \" + str.substring(i + 1, i + 6));\n+                }\n+                break;\n+            default:\n+                out.write('\\\\');\n+                break;\n+        }\n+    } else {\n+        out.write('\\\\');\n+    }\n+    i += escape;\n+} else {\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}