{
    "patch": "import java.lang.reflect.TypeVariable;\n\n...\n\nprivate void readTypeVariables() {\n    for (Type type : typeVariable.getBounds()) {\n        registerTypeVariablesOn(type);\n    }\n    if (typeVariable instanceof TypeVariable<?>) {\n        Type[] actualTypeArguments = ((TypeVariable<?>) typeVariable).getBounds();\n        if (actualTypeArguments.length > 0) {\n            registerTypeVariablesOn(actualTypeArguments[0]);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..d5c298743 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,21 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+import java.lang.reflect.TypeVariable;\n+\n+...\n+\n+private void readTypeVariables() {\n+    for (Type type : typeVariable.getBounds()) {\n+        registerTypeVariablesOn(type);\n+    }\n+    if (typeVariable instanceof TypeVariable<?>) {\n+        Type[] actualTypeArguments = ((TypeVariable<?>) typeVariable).getBounds();\n+        if (actualTypeArguments.length > 0) {\n+            registerTypeVariablesOn(actualTypeArguments[0]);\n+        }\n+    }\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}