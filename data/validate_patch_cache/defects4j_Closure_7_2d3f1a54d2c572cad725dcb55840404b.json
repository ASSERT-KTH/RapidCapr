{
    "patch": "public JSType caseObjectType(ObjectType type) {\n    if (value.equals(\"function\")) {\n        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n        if (ctorType != null && !ctorType.isUnknownType() && ctorType.isSubtype(type)) {\n            return ctorType;\n        }\n        return getNativeType(JSTypeNative.FUNCTION_TYPESTRING);\n    } else if (value.equals(\"null\")) {\n        JSType unknownType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        return matchesExpectation(\"null\") && unknownType.isSubtype(type)\n                ? getNativeType(JSTypeNative.NULL_TYPE)\n                : null;\n    } else if (value.equals(\"undefined\")) {\n        JSType unknownType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n        return matchesExpectation(\"undefined\") && unknownType.isSubtype(type)\n                ? getNativeType(JSTypeNative.UNDEFINED_TYPE)\n                : null;\n    }\n    return matchesExpectation(\"object\") ? type : null;\n}\n\nprivate boolean matchesExpectation(String exp) {\n    if (expectThat != null) {\n        return expectThat.matchesExplicitly(exp, null);\n    } else {\n        return exp.equals(\"object\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..a2ef7499 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,34 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n+public JSType caseObjectType(ObjectType type) {\n+    if (value.equals(\"function\")) {\n         JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+        if (ctorType != null && !ctorType.isUnknownType() && ctorType.isSubtype(type)) {\n+            return ctorType;\n+        }\n+        return getNativeType(JSTypeNative.FUNCTION_TYPESTRING);\n+    } else if (value.equals(\"null\")) {\n+        JSType unknownType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        return matchesExpectation(\"null\") && unknownType.isSubtype(type)\n+                ? getNativeType(JSTypeNative.NULL_TYPE)\n+                : null;\n+    } else if (value.equals(\"undefined\")) {\n+        JSType unknownType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+        return matchesExpectation(\"undefined\") && unknownType.isSubtype(type)\n+                ? getNativeType(JSTypeNative.UNDEFINED_TYPE)\n+                : null;\n     }\n+    return matchesExpectation(\"object\") ? type : null;\n+}\n+\n+private boolean matchesExpectation(String exp) {\n+    if (expectThat != null) {\n+        return expectThat.matchesExplicitly(exp, null);\n+    } else {\n+        return exp.equals(\"object\");\n+    }\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: method matchesExpectation(String) is already defined in class ChainableReverseAbstractInterpreter.RestrictByOneTypeOfResultVisitor",
    "test_result": "ERROR"
}