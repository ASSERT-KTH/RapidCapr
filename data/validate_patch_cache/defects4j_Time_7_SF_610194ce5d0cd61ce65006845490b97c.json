{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n        int newPos = parser.parseInto(bucket, text, position);\n        \n        // Fix for parsing February 29 in a non-leap year\n        if (newPos >= 0 && bucket.getParser() instanceof InternalParser) {\n            InternalParser ip = (InternalParser) bucket.getParser();\n            if (ip.getParseType() == DateTimeFieldType.dayOfMonth()) {\n                int dayOfMonth = bucket.getValidatedField(DateTimeFieldType.dayOfMonth()).getValue();\n                if (dayOfMonth == 29 && bucket.getValidatedField(DateTimeFieldType.monthOfYear()).getValue() == 2\n                        && !chrono.year().isLeap(instantMillis)) {\n                    newPos = ~position;\n                }\n            }\n        }\n        \n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..825da6aa 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -705,13 +705,23 @@ public class DateTimeFormatter {\n         \n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+            instantMillis, chrono, iLocale, iPivotYear, chrono.year().get(instantMillis));\n         int newPos = parser.parseInto(bucket, text, position);\n+        \n+        // Fix for parsing February 29 in a non-leap year\n+        if (newPos >= 0 && bucket.getParser() instanceof InternalParser) {\n+            InternalParser ip = (InternalParser) bucket.getParser();\n+            if (ip.getParseType() == DateTimeFieldType.dayOfMonth()) {\n+                int dayOfMonth = bucket.getValidatedField(DateTimeFieldType.dayOfMonth()).getValue();\n+                if (dayOfMonth == 29 && bucket.getValidatedField(DateTimeFieldType.monthOfYear()).getValue() == 2\n+                        && !chrono.year().isLeap(instantMillis)) {\n+                    newPos = ~position;\n+                }\n+            }\n+        }\n+        \n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}