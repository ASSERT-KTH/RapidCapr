{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && !name.isExported()) {\n        // {@code name} meets condition (a).\n        if (name.type == Name.Type.FUNCTION ||\n            name.type == Name.Type.OBJECTLIT) {\n          boolean somePropCanInline = false;\n          if (name.props != null) {\n            for (Name prop : name.props) {\n              // Don't attempt to inline an accessor property as a variable.\n              if (prop.type == Name.Type.GET ||\n                  prop.type == Name.Type.SET) {\n                continue;\n              }\n              if (prop.globalSets == 1 &&\n                  prop.localSets == 0 &&\n                  prop.aliasingGets == 0) {\n                // This is also safe to inline.\n                somePropCanInline = true;\n              }\n            }\n          }\n          if (somePropCanInline) {\n            continue;\n          }\n        }\n        Var v = getVar(name);\n        if (v != null && !v.isParam()) {  // Don't inline function parameters.\n          Ref decl = getDeclaration(v);\n          if (decl != null) {\n            Node value = decl.getNode().getLastChild();\n            if (value.isExprResult() || value.isFunction()) {\n              // Only inline if the function/class/Object.defineProperties\n              // definition contains a single return statement.\n              Node earlyExit = null;\n              if (value.isFunction()) {\n                earlyExit = NodeUtil.getConditionalExit(value.getLastChild());\n              } else {\n                earlyExit = NodeUtil.getConditionalExit(value.getFirstChild());\n              }\n              if (earlyExit == null) {\n                inlineVariables.put(name, value);\n                removeName(name, v.scope);\n              }\n            }\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..79a9b6bc 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,52 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && !name.isExported()) {\n+        // {@code name} meets condition (a).\n+        if (name.type == Name.Type.FUNCTION ||\n+            name.type == Name.Type.OBJECTLIT) {\n+          boolean somePropCanInline = false;\n+          if (name.props != null) {\n+            for (Name prop : name.props) {\n+              // Don't attempt to inline an accessor property as a variable.\n+              if (prop.type == Name.Type.GET ||\n+                  prop.type == Name.Type.SET) {\n+                continue;\n+              }\n+              if (prop.globalSets == 1 &&\n+                  prop.localSets == 0 &&\n+                  prop.aliasingGets == 0) {\n+                // This is also safe to inline.\n+                somePropCanInline = true;\n+              }\n+            }\n+          }\n+          if (somePropCanInline) {\n+            continue;\n+          }\n+        }\n+        Var v = getVar(name);\n+        if (v != null && !v.isParam()) {  // Don't inline function parameters.\n+          Ref decl = getDeclaration(v);\n+          if (decl != null) {\n+            Node value = decl.getNode().getLastChild();\n+            if (value.isExprResult() || value.isFunction()) {\n+              // Only inline if the function/class/Object.defineProperties\n+              // definition contains a single return statement.\n+              Node earlyExit = null;\n+              if (value.isFunction()) {\n+                earlyExit = NodeUtil.getConditionalExit(value.getLastChild());\n+              } else {\n+                earlyExit = NodeUtil.getConditionalExit(value.getFirstChild());\n+              }\n+              if (earlyExit == null) {\n+                inlineVariables.put(name, value);\n+                removeName(name, v.scope);\n+              }\n+            }\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}