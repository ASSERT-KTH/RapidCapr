{
    "patch": "              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              // If we have a finally block, create an unconditional edge to the\n              // end of it. The fall-through edge will be created implicitly.\n              List<DiGraphEdge<Node, Branch>> outEdges =\n                  cfa.getControlFlowGraph().getOutEdges(finallyNode);\n              for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n                if (outEdge.getValue() == Branch.UNCOND) {\n                  cfa.createEdge(finallyNode, Branch.UNCOND, outEdge.getDest());\n                  break;\n                }\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..b36c8ba8 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -765,6 +765,16 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n               cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              // If we have a finally block, create an unconditional edge to the\n+              // end of it. The fall-through edge will be created implicitly.\n+              List<DiGraphEdge<Node, Branch>> outEdges =\n+                  cfa.getControlFlowGraph().getOutEdges(finallyNode);\n+              for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+                if (outEdge.getValue() == Branch.UNCOND) {\n+                  cfa.createEdge(finallyNode, Branch.UNCOND, outEdge.getDest());\n+                  break;\n+                }\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}