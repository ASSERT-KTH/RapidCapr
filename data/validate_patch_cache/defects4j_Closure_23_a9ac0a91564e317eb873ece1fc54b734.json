{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (isAssignmentTarget(n)) {\n      // If GETPROP/GETELEM is used as assignment target the array literal is\n      // acting as a temporary we can't fold it here:\n      //    `[][0] = 1;`\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    if (index < 0) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node prev = null;\n    for (int i = 0; i < intIndex; i++) {\n      if (current == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n      prev = current;\n      current = current.getNext();\n    }\n\n    if (current == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Create the new node.\n    Node newNode = current.cloneTree();\n    if (newNode.getType() == Token.DEFAULT_VALUE) {\n      newNode.setType(Token.VOID);\n      newNode.setJSDocInfo(current.getJSDocInfo());\n    }\n\n    // Replace the entire GETELEM with the node.\n    if (prev == null) {\n      parent.replaceChild(n, newNode.detach());\n    } else {\n      parent.replaceChild(n, prev.detach());\n    }\n\n    reportCodeChange();\n    return newNode;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..0c59c10f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1418,57 +1418,63 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n+      // If GETPROP/GETELEM is used as assignment target the array literal is\n+      // acting as a temporary we can't fold it here:\n+      //    `[][0] = 1;`\n       return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n       return n;\n     }\n \n     double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+    if (index < 0) {\n+      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    int intIndex = (int) index;\n+    if (intIndex != index) {\n+      error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n     Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+    Node prev = null;\n+    for (int i = 0; i < intIndex; i++) {\n+      if (current == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n+      prev = current;\n       current = current.getNext();\n     }\n \n-    if (elem == null) {\n+    if (current == null) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    // Create the new node.\n+    Node newNode = current.cloneTree();\n+    if (newNode.getType() == Token.DEFAULT_VALUE) {\n+      newNode.setType(Token.VOID);\n+      newNode.setJSDocInfo(current.getJSDocInfo());\n+    }\n+\n+    // Replace the entire GETELEM with the node.\n+    if (prev == null) {\n+      parent.replaceChild(n, newNode.detach());\n     } else {\n-      left.removeChild(elem);\n+      parent.replaceChild(n, prev.detach());\n     }\n \n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n-    return elem;\n+    return newNode;\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}