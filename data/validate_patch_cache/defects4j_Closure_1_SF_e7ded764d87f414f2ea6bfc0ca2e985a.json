{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      int childCount = argList.getChildCount();\n      // Strip unreferenced args off the end of the function declaration.\n      for (int i = childCount - 1; i >= 0; --i) {\n        Node arg = argList.getChildAtIndex(i);\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(arg);\n          compiler.reportCodeChange();\n        }\n      }\n      // If there are no referenced arguments make sure the function is still syntactically correct\n      if (argList.getChildCount() == 0) {\n        argList.addChildToFront(IR.name(\"\").useSourceInfoFromForTree(argList));\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..496e08e0 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -389,17 +389,20 @@ class RemoveUnusedVars\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n+      int childCount = argList.getChildCount();\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      for (int i = childCount - 1; i >= 0; --i) {\n+        Node arg = argList.getChildAtIndex(i);\n+        Var var = fnScope.getVar(arg.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n+          argList.removeChild(arg);\n           compiler.reportCodeChange();\n-        } else {\n-          break;\n         }\n       }\n+      // If there are no referenced arguments make sure the function is still syntactically correct\n+      if (argList.getChildCount() == 0) {\n+        argList.addChildToFront(IR.name(\"\").useSourceInfoFromForTree(argList));\n+      }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}