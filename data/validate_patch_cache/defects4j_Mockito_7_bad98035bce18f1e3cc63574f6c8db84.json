{
    "patch": "Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n    Type[] interfaces = typeVariable.getGenericInterfaces();\n    Type superclass = typeVariable.getGenericSuperclass();\n\n    Type[] targets = Stream.concat(Stream.of(superclass), Arrays.stream(interfaces))\n            .filter(type -> type.getTypeName().startsWith(Function.class.getTypeName()))\n            .toArray(Type[]::new);\n\n    Type matched = typeVariable;\n\n    for (Type type : targets) {\n        if (type instanceof ParameterizedType) {\n            Type parameterizedType = type;\n            TypeVariable<?>[] typeVariables = ((Class<?>) ((ParameterizedType) parameterizedType)\n                    .getRawType()).getTypeParameters();\n            Type[] actualTypeArguments = ((ParameterizedType) parameterizedType).getActualTypeArguments();\n\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                if (typeVariables[i].equals(typeVariable)) {\n                    matched = actualTypeArguments[i];\n                }\n            }\n        }\n    }\n\n    if (matched instanceof TypeVariable) {\n        return getActualTypeArgumentFor((TypeVariable<?>) matched);\n    }\n\n    return matched;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..b0689ff4a 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,37 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+Type getActualTypeArgumentFor(TypeVariable<?> typeVariable) {\n+    Type[] interfaces = typeVariable.getGenericInterfaces();\n+    Type superclass = typeVariable.getGenericSuperclass();\n+\n+    Type[] targets = Stream.concat(Stream.of(superclass), Arrays.stream(interfaces))\n+            .filter(type -> type.getTypeName().startsWith(Function.class.getTypeName()))\n+            .toArray(Type[]::new);\n+\n+    Type matched = typeVariable;\n+\n+    for (Type type : targets) {\n+        if (type instanceof ParameterizedType) {\n+            Type parameterizedType = type;\n+            TypeVariable<?>[] typeVariables = ((Class<?>) ((ParameterizedType) parameterizedType)\n+                    .getRawType()).getTypeParameters();\n+            Type[] actualTypeArguments = ((ParameterizedType) parameterizedType).getActualTypeArguments();\n+\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                if (typeVariables[i].equals(typeVariable)) {\n+                    matched = actualTypeArguments[i];\n+                }\n+            }\n+        }\n+    }\n+\n+    if (matched instanceof TypeVariable) {\n+        return getActualTypeArgumentFor((TypeVariable<?>) matched);\n+    }\n+\n+    return matched;\n+}\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}