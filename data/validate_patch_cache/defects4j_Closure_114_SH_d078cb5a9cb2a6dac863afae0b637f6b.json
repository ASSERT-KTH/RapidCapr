{
    "patch": "        } else if (!NodeUtil.isExpressionResultUsed(n) && !NodeUtil.isExpressionAssignedToName(n)) {\n            // Only record the dependency scope if the assignment is not being used as an expression\n            // and is not assigned to a variable name.\n            recordDepScope(recordNode, ns);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..d4598950 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,11 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+        } else if (!NodeUtil.isExpressionResultUsed(n) && !NodeUtil.isExpressionAssignedToName(n)) {\n+            // Only record the dependency scope if the assignment is not being used as an expression\n+            // and is not assigned to a variable name.\n+            recordDepScope(recordNode, ns);\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}