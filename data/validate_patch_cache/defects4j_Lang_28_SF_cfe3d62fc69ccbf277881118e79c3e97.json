{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check if the input is null or the index is out of bounds\n    if (input == null || index < 0 || index >= input.length()) {\n        return 0;\n    }\n\n    // Check if the '&' and '#' characters are present\n    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n        return 0;\n    }\n\n    // Set the start index based on whether the entity is in decimal or hexadecimal format\n    int start = index + 2;\n    boolean isHex = false;\n    if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n        isHex = true;\n        start++;\n    }\n\n    // Find the end index of the escape sequence\n    int end = start;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n\n    // Check if the escape sequence has an ending semicolon\n    if (end == input.length()) {\n        return 0;\n    }\n\n    // Parse the entity value to an integer\n    String entityValue = input.subSequence(start, end).toString();\n    int codePoint = 0;\n    try {\n        codePoint = Integer.parseInt(entityValue, isHex ? 16 : 10);\n    } catch (NumberFormatException nfe) {\n        return 0;\n    }\n\n    // Check if the code point is valid\n    if (!Character.isValidCodePoint(codePoint)) {\n        return 0;\n    }\n\n    // Write the code point to the output writer\n    char[] utf16Chars = Character.toChars(codePoint);\n    out.write(utf16Chars);\n\n    // Return the number of characters processed\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..12d7310c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,55 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // Check if the input is null or the index is out of bounds\n+    if (input == null || index < 0 || index >= input.length()) {\n+        return 0;\n+    }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+    // Check if the '&' and '#' characters are present\n+    if (index + 1 >= input.length() || input.charAt(index) != '&' || input.charAt(index + 1) != '#') {\n+        return 0;\n+    }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+    // Set the start index based on whether the entity is in decimal or hexadecimal format\n+    int start = index + 2;\n+    boolean isHex = false;\n+    if (start < input.length() && (input.charAt(start) == 'x' || input.charAt(start) == 'X')) {\n+        isHex = true;\n+        start++;\n+    }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n+    // Find the end index of the escape sequence\n+    int end = start;\n+    while (end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+    // Check if the escape sequence has an ending semicolon\n+    if (end == input.length()) {\n         return 0;\n     }\n+\n+    // Parse the entity value to an integer\n+    String entityValue = input.subSequence(start, end).toString();\n+    int codePoint = 0;\n+    try {\n+        codePoint = Integer.parseInt(entityValue, isHex ? 16 : 10);\n+    } catch (NumberFormatException nfe) {\n+        return 0;\n+    }\n+\n+    // Check if the code point is valid\n+    if (!Character.isValidCodePoint(codePoint)) {\n+        return 0;\n+    }\n+\n+    // Write the code point to the output writer\n+    char[] utf16Chars = Character.toChars(codePoint);\n+    out.write(utf16Chars);\n+\n+    // Return the number of characters processed\n+    return end - index + 1;\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}