{
    "patch": "public double evaluate(double x, double epsilon, int maxIterations) {\n    double small = 1e-50;\n    double hPrev = getA(0, x);\n\n    if (Double.isNaN(hPrev)) {\n        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n    }\n    if (Double.isInfinite(hPrev)) {\n        double[] tmp = {getB(0, x), getA(1, x)};\n        if (testInfinite(tmp)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        } else {\n            return (tmp[0] / tmp[1]);\n        }\n    }\n\n\n    int n = 1;\n    double dPrev = 0.0;\n    double p0 = 1.0;\n    double q1 = 1.0;\n    double cPrev = hPrev;\n    double hN = hPrev;\n\n    while (n < maxIterations) {\n\n        double a = getA(n, x);\n        double b = getB(n, x);\n\n        double cN = a * hPrev + b * p0;\n        double q2 = a * q1 + b * dPrev;\n\n        if (Double.isNaN(cN) || Double.isNaN(q2)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n        }\n        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n            double[] tmp = {a, b};\n            if (testInfinite(tmp)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            } else {\n                return (tmp[0] / tmp[1]);\n            }\n        }\n\n        double deltaN = cN / q2 / cPrev;\n        hN = cPrev * deltaN;\n\n        if (Double.isNaN(hN)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n        }\n        if (Double.isInfinite(hN)) {\n            double[] tmp = {cN, q2};\n            if (testInfinite(tmp)) {\n                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n            } else {\n                return (tmp[0] / tmp[1]);\n            }\n        }\n\n        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n            break;\n        }\n\n        dPrev = q1;\n        cPrev = cN / q2;\n        p0 = hPrev;\n        hPrev = hN;\n        q1 = q2;\n        n++;\n    }\n\n    if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n        double[] tmp = {getA(n, x), getB(n, x)};\n        if (testInfinite(tmp)) {\n            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n        } else {\n            return (tmp[0] / tmp[1]);\n        }\n    }\n\n    return hN;\n}\n\nprivate boolean testInfinite(double[] arr) {\n\n    double[] arr1 = arr.clone();\n\n    for (int i = 0; i < arr1.length; i++) {\n        if (Double.isNaN(arr1[i]) ||\n                (Double.isInfinite(arr1[i]) && (arr1[i] > 0)) ||\n                (Double.doubleToRawLongBits(0.0) == Double.doubleToRawLongBits(arr1[i]))) {\n            arr1[i] = 0;\n        } else if (Double.isInfinite(arr1[i]) && (arr1[i] < 0)) {\n            arr1[i] = Double.MAX_VALUE * -1;\n        }\n    }\n\n    final double huge = 1.0e300;\n    if ((FastMath.abs(arr1[0]) > huge) ||\n            (FastMath.abs(arr1[1]) > huge)) {\n        arr1[0] /= huge;\n        arr1[1] /= huge;\n    }\n    return (FastMath.abs(arr1[0] / arr1[1]) > huge);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\nindex b881bb2d7..e7a5d66b4 100644\n--- a/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n+++ b/src/main/java/org/apache/commons/math3/util/ContinuedFraction.java\n@@ -120,82 +120,110 @@ public abstract class ContinuedFraction {\n      * @return the value of the continued fraction evaluated at x.\n      * @throws ConvergenceException if the algorithm fails to converge.\n      */\n-    public double evaluate(double x, double epsilon, int maxIterations) {\n-        final double small = 1e-50;\n-        double hPrev = getA(0, x);\n+public double evaluate(double x, double epsilon, int maxIterations) {\n+    double small = 1e-50;\n+    double hPrev = getA(0, x);\n \n-        // use the value of small as epsilon criteria for zero checks\n-        if (Precision.equals(hPrev, 0.0, small)) {\n-            hPrev = small;\n+    if (Double.isNaN(hPrev)) {\n+        throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n+    }\n+    if (Double.isInfinite(hPrev)) {\n+        double[] tmp = {getB(0, x), getA(1, x)};\n+        if (testInfinite(tmp)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+        } else {\n+            return (tmp[0] / tmp[1]);\n         }\n+    }\n \n-        int n = 1;\n-        double dPrev = 0.0;\n-        double p0 = 1.0;\n-        double q1 = 1.0;\n-        double cPrev = hPrev;\n-        double hN = hPrev;\n-\n-        while (n < maxIterations) {\n-            final double a = getA(n, x);\n-            final double b = getB(n, x);\n-\n-            double cN = a * hPrev + b * p0;\n-            double q2 = a * q1 + b * dPrev;\n-            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n-                double scaleFactor = 1d;\n-                double lastScaleFactor = 1d;\n-                final int maxPower = 5;\n-                final double scale = FastMath.max(a,b);\n-                if (scale <= 0) {  // Can't scale\n-                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n-                }\n-                for (int i = 0; i < maxPower; i++) {\n-                    lastScaleFactor = scaleFactor;\n-                    scaleFactor *= scale;\n-                    if (a != 0.0 && a > b) {\n-                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n-                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n-                    } else if (b != 0) {\n-                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n-                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n-                    }\n-                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n-                        break;\n-                    }\n-                }\n-            }\n \n-            final double deltaN = cN / q2 / cPrev;\n-            hN = cPrev * deltaN;\n+    int n = 1;\n+    double dPrev = 0.0;\n+    double p0 = 1.0;\n+    double q1 = 1.0;\n+    double cPrev = hPrev;\n+    double hN = hPrev;\n \n-            if (Double.isInfinite(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,\n-                                               x);\n-            }\n-            if (Double.isNaN(hN)) {\n-                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,\n-                                               x);\n+    while (n < maxIterations) {\n+\n+        double a = getA(n, x);\n+        double b = getB(n, x);\n+\n+        double cN = a * hPrev + b * p0;\n+        double q2 = a * q1 + b * dPrev;\n+\n+        if (Double.isNaN(cN) || Double.isNaN(q2)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n+        }\n+        if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n+            double[] tmp = {a, b};\n+            if (testInfinite(tmp)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            } else {\n+                return (tmp[0] / tmp[1]);\n             }\n+        }\n \n-            if (FastMath.abs(deltaN - 1.0) < epsilon) {\n-                break;\n+        double deltaN = cN / q2 / cPrev;\n+        hN = cPrev * deltaN;\n+\n+        if (Double.isNaN(hN)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_VALUE, x);\n+        }\n+        if (Double.isInfinite(hN)) {\n+            double[] tmp = {cN, q2};\n+            if (testInfinite(tmp)) {\n+                throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+            } else {\n+                return (tmp[0] / tmp[1]);\n             }\n+        }\n \n-            dPrev = q1;\n-            cPrev = cN / q2;\n-            p0 = hPrev;\n-            hPrev = cN;\n-            q1 = q2;\n-            n++;\n+        if (FastMath.abs(deltaN - 1.0) < epsilon) {\n+            break;\n         }\n \n-        if (n >= maxIterations) {\n-            throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION,\n-                                                maxIterations, x);\n+        dPrev = q1;\n+        cPrev = cN / q2;\n+        p0 = hPrev;\n+        hPrev = hN;\n+        q1 = q2;\n+        n++;\n+    }\n+\n+    if (Double.isInfinite(hN) || Double.isNaN(hN)) {\n+        double[] tmp = {getA(n, x), getB(n, x)};\n+        if (testInfinite(tmp)) {\n+            throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n+        } else {\n+            return (tmp[0] / tmp[1]);\n         }\n+    }\n+\n+    return hN;\n+}\n+\n+private boolean testInfinite(double[] arr) {\n \n-        return hN;\n+    double[] arr1 = arr.clone();\n+\n+    for (int i = 0; i < arr1.length; i++) {\n+        if (Double.isNaN(arr1[i]) ||\n+                (Double.isInfinite(arr1[i]) && (arr1[i] > 0)) ||\n+                (Double.doubleToRawLongBits(0.0) == Double.doubleToRawLongBits(arr1[i]))) {\n+            arr1[i] = 0;\n+        } else if (Double.isInfinite(arr1[i]) && (arr1[i] < 0)) {\n+            arr1[i] = Double.MAX_VALUE * -1;\n+        }\n     }\n \n+    final double huge = 1.0e300;\n+    if ((FastMath.abs(arr1[0]) > huge) ||\n+            (FastMath.abs(arr1[1]) > huge)) {\n+        arr1[0] /= huge;\n+        arr1[1] /= huge;\n+    }\n+    return (FastMath.abs(arr1[0] / arr1[1]) > huge);\n+}\n+\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}