{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n           FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign > 0.0) {\n        if (FastMath.abs(yMin) <= functionValueAccuracy) {\n            ret = min;\n        } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n            ret = max;\n        } else {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n    } else if (sign < 0.0) {\n        //initializing the solver\n        double xMax = f.value(min) > 0 ? min : max;\n        double xMin = f.value(min) < 0 ? min : max;\n        double xMid = 0.5 * (xMin + xMax);\n        double yMid = f.value(xMid);\n\n        // Looping\n        for (int i = 0; i < maximumIterations; ++i) {\n\t    \n            if (FastMath.abs(yMid) <= functionValueAccuracy) {\n                ret = xMid;\n                break;\n            }\n\n            if ((FastMath.abs(xMid - xMin) < relativeAccuracy) && \n                (FastMath.abs(xMax - xMid) < relativeAccuracy)) {\n                    \n                if(FastMath.abs(yMin) > FastMath.abs(yMax)) {\n                    ret = min;\n                } else {\n                    ret = max;\n                }\n                break;\n            }\n\n            // Bisect or interpolation?\n            if (sign > 0.0) {\n                sign = yMid * yMax;\n                if (sign < 0.0) {\n                    xMin = xMid;\n                    yMin = yMid;\n                } else {\n                    xMax = xMid;\n                    yMax = yMid;\n                }\n            } else {\n                sign = yMid * yMin;\n                if (sign < 0.0) {\n                    xMax = xMid;\n                    yMax = yMid;\n                } else {\n                    xMin = xMid;\n                    yMin = yMid;\n                }\n            }\n\t    \n            double oldXMid = xMid;\n            xMid = 0.5 * (xMin + xMax);\n            yMid = f.value(xMid);\n            if ((FastMath.abs(oldXMid - xMid) < absoluteAccuracy)\n                    || (FastMath.abs(yMid) <= functionValueAccuracy)) {\n                ret = xMid;\n                break;\n            }\n        }\n        if (i >= maximumIterations) {\n            throw new MaxIterationsExceededException(maximumIterations);\n        }\n    } else {\n        if (FastMath.abs(yMin) <= functionValueAccuracy) {\n            ret = min;\n        } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n            ret = max;\n        }\n    }\n\n    if (ret == Double.NaN) {\n        throw new NoBracketingException(min, max, yMin, yMax);\n    }\n\n    setResult(ret, yMin, yMax);\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..6673167b2 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,102 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+public double solve(double min, double max) throws MaxIterationsExceededException,\n+           FunctionEvaluationException {\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign > 0.0) {\n+        if (FastMath.abs(yMin) <= functionValueAccuracy) {\n+            ret = min;\n+        } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n+            ret = max;\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs.\" +\n+                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n+    } else if (sign < 0.0) {\n+        //initializing the solver\n+        double xMax = f.value(min) > 0 ? min : max;\n+        double xMin = f.value(min) < 0 ? min : max;\n+        double xMid = 0.5 * (xMin + xMax);\n+        double yMid = f.value(xMid);\n+\n+        // Looping\n+        for (int i = 0; i < maximumIterations; ++i) {\n+\t    \n+            if (FastMath.abs(yMid) <= functionValueAccuracy) {\n+                ret = xMid;\n+                break;\n+            }\n+\n+            if ((FastMath.abs(xMid - xMin) < relativeAccuracy) && \n+                (FastMath.abs(xMax - xMid) < relativeAccuracy)) {\n+                    \n+                if(FastMath.abs(yMin) > FastMath.abs(yMax)) {\n+                    ret = min;\n+                } else {\n+                    ret = max;\n+                }\n+                break;\n+            }\n+\n+            // Bisect or interpolation?\n+            if (sign > 0.0) {\n+                sign = yMid * yMax;\n+                if (sign < 0.0) {\n+                    xMin = xMid;\n+                    yMin = yMid;\n+                } else {\n+                    xMax = xMid;\n+                    yMax = yMid;\n+                }\n+            } else {\n+                sign = yMid * yMin;\n+                if (sign < 0.0) {\n+                    xMax = xMid;\n+                    yMax = yMid;\n+                } else {\n+                    xMin = xMid;\n+                    yMin = yMid;\n+                }\n+            }\n+\t    \n+            double oldXMid = xMid;\n+            xMid = 0.5 * (xMin + xMax);\n+            yMid = f.value(xMid);\n+            if ((FastMath.abs(oldXMid - xMid) < absoluteAccuracy)\n+                    || (FastMath.abs(yMid) <= functionValueAccuracy)) {\n+                ret = xMid;\n+                break;\n+            }\n+        }\n+        if (i >= maximumIterations) {\n+            throw new MaxIterationsExceededException(maximumIterations);\n+        }\n+    } else {\n+        if (FastMath.abs(yMin) <= functionValueAccuracy) {\n+            ret = min;\n+        } else if (FastMath.abs(yMax) <= functionValueAccuracy) {\n+            ret = max;\n         }\n+    }\n \n-        return ret;\n+    if (ret == Double.NaN) {\n+        throw new NoBracketingException(min, max, yMin, yMax);\n     }\n+\n+    setResult(ret, yMin, yMax);\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}