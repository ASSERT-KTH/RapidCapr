{
    "patch": "  public boolean apply(Node n) {\n    if (n == null) {\n      return false;\n    }\n\n    // Traverse the child nodes of the current node\n    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n        // If the child node is a call to a function or constructor that has side-effects,\n        // and one of its dependent variables is passed to it as a parameter, return true\n        if (c.isCall() && dependentValues.stream().anyMatch(dependent -> NodeUtil.isImmutableValue(dependent) && NodeUtil.isFunctionCall(c) && c.getFirstChild().isEqualNode(dependent) && NodeUtil.functionCallHasSideEffects(c))) {\n          return true;\n        }\n        if (c.isNew() && dependentValues.stream().anyMatch(dependent -> NodeUtil.isImmutableValue(dependent) && NodeUtil.constructorCallHasSideEffects(c) && c.getFirstChild().isEqualNode(dependent))) {\n          return true;\n        }\n        // Otherwise, call apply recursively on the child node\n        if (apply(c)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..500f4a64 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,31 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n+  public boolean apply(Node n) {\n+    if (n == null) {\n+      return false;\n+    }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    // Traverse the child nodes of the current node\n+    for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+        // If the child node is a call to a function or constructor that has side-effects,\n+        // and one of its dependent variables is passed to it as a parameter, return true\n+        if (c.isCall() && dependentValues.stream().anyMatch(dependent -> NodeUtil.isImmutableValue(dependent) && NodeUtil.isFunctionCall(c) && c.getFirstChild().isEqualNode(dependent) && NodeUtil.functionCallHasSideEffects(c))) {\n           return true;\n         }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+        if (c.isNew() && dependentValues.stream().anyMatch(dependent -> NodeUtil.isImmutableValue(dependent) && NodeUtil.constructorCallHasSideEffects(c) && c.getFirstChild().isEqualNode(dependent))) {\n           return true;\n         }\n-\n-\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n+        // Otherwise, call apply recursively on the child node\n+        if (apply(c)) {\n+          return true;\n         }\n-        return false;\n       }\n+    }\n+\n+    return false;\n+  }\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}