{
    "patch": "    if (result != null) {\n      return result;\n    }\n    if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } \n    return getNativeType(JSTypeNative.NO_TYPE);\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public NominalType getNominalTypeIfSingletonObj() {\n    NominalType result = null;\n    for (JSType alternate : alternates) {\n      NominalType nt = alternate.getNominalTypeIfSingletonObj();\n      if (nt == null) {\n        return null;\n      } else if (result == null) {\n        result = nt;\n      } else if (!result.equals(nt)) {\n        return null;\n      }\n    }\n    return result;\n  }\n\n  @Deprecated\n  public boolean isLooseSubtypeOf(JSType that) {\n    return this.isSubtypeOf(that);\n  }\n\n  @Override\n  public JSType flattenTop() {\n    return getTopType();\n  }\n\n  @Override\n  public JSType specialize(JSType other) {\n    if (other.isBottom()) {\n      return getBottomType();\n    }\n    if (other.isUnknownType()) {\n      return this;\n    }\n    if (!(other instanceof UnionType)) {\n      return JSType.join(this, other);\n    }\n    // other is a UnionType\n    List<JSType> specialized = new ArrayList<>(alternates.size());\n    for (JSType alternate : alternates) {\n      specialized.add(alternate.specialize(other));\n    }\n    return JSType.join(specialized);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..52d24d57 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -290,6 +290,93 @@ public class UnionType extends JSType {\n     JSType result = builder.build();\n     if (result != null) {\n       return result;\n+    }\n+    if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } \n+    return getNativeType(JSTypeNative.NO_TYPE);\n+  }\n+\n+  /**\n+   * Two union types are equal if they have the same number of alternates\n+   * and all alternates are equal.\n+   */\n+  @Override\n+  public boolean equals(Object object) {\n+    if (object instanceof UnionType) {\n+      UnionType that = (UnionType) object;\n+      return alternates.equals(that.alternates);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return alternates.hashCode();\n+  }\n+\n+  @Override\n+  public boolean isUnionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isObject()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public NominalType getNominalTypeIfSingletonObj() {\n+    NominalType result = null;\n+    for (JSType alternate : alternates) {\n+      NominalType nt = alternate.getNominalTypeIfSingletonObj();\n+      if (nt == null) {\n+        return null;\n+      } else if (result == null) {\n+        result = nt;\n+      } else if (!result.equals(nt)) {\n+        return null;\n+      }\n+    }\n+    return result;\n+  }\n+\n+  @Deprecated\n+  public boolean isLooseSubtypeOf(JSType that) {\n+    return this.isSubtypeOf(that);\n+  }\n+\n+  @Override\n+  public JSType flattenTop() {\n+    return getTopType();\n+  }\n+\n+  @Override\n+  public JSType specialize(JSType other) {\n+    if (other.isBottom()) {\n+      return getBottomType();\n+    }\n+    if (other.isUnknownType()) {\n+      return this;\n+    }\n+    if (!(other instanceof UnionType)) {\n+      return JSType.join(this, other);\n+    }\n+    // other is a UnionType\n+    List<JSType> specialized = new ArrayList<>(alternates.size());\n+    for (JSType alternate : alternates) {\n+      specialized.add(alternate.specialize(other));\n+    }\n+    return JSType.join(specialized);\n+  }\n+}\n+      return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     } else {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}