{
    "patch": "void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n    Preconditions.checkArgument(inferred || type != null);\n\n    // Only allow declarations of NAMEs and qualfied names.\n    // Allow 'QUALIFIED_NAME.propName' only if it's exactly\n    // 'goog.getMsg' and n is the 3rd child in a Call.\n    // We don't want to allow goog.getMsg.prop in a declaration because\n    // that would allow the type-checker to accept invalid programs like\n    // goog.getMsg.prop + 1 or goog.getMsg.prop - goog.getMsg.otherProp\n    boolean shouldDeclareOnGlobalThis = false;\n    if (n.getType() == Token.NAME) {\n        Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);\n        shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);\n    } else if (n.getType() == Token.GETPROP) {\n        if (NodeUtil.isGetMsgNode(n)) {\n            Node gramps = parent.getParent();\n            Node greatGramps = gramps.getParent();\n            Preconditions.checkState(\n                gramps != null && greatGramps != null &&\n                gramps.getType() == Token.CALL &&\n                gramps.getFirstChild().matchesQualifiedName(\"goog.getMsg\") &&\n                n.isFirstChildOf(gramps.getSecondChild()));\n            // Declare all quoted strings that appear as the 2nd argument to\n            // goog.getMsg(str, propName) in the correct scope for messages. We don't\n            // have a good way to type them precisely other than just Object, as it\n            // would require propagating the \"messages object\" throughout the compile.\n            Node messages = gramps.getLastChild();\n            checkArgument(\n                messages.isString() || (messages.isName() && !messages.getString().isEmpty()),\n                \"Unexpected goog.getMsg arguments: %s\", gramps.toStringTree());\n            Scope scopeToDeclareIn = messages.isString() ? scope : getClosestHoistScope(n);\n            scopeToDeclareIn.declare(\n                messages.getString(),\n                messages,\n                getNativeType(OBJECT_TYPE),\n                compiler.getInput(sourceName),\n                /* inferred= */ true);\n        } else {\n            Preconditions.checkArgument(\n                parent.getType() == Token.ASSIGN ||\n                parent.getType() == Token.EXPR_RESULT);\n            shouldDeclareOnGlobalThis = scope.isGlobal() &&\n                parent.getType() == Token.ASSIGN && \n                parent.getFirstChild().getType() == Token.THIS &&\n                n.getFirstChild().getType() =",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4bd6bfb4..3de86fee 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -869,12 +869,17 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param type the variable's type. It may be {@code null} if\n      *     {@code inferred} is {@code true}.\n      */\n-    void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n-      Preconditions.checkArgument(inferred || type != null);\n-\n-      // Only allow declarations of NAMEs and qualfied names.\n-      boolean shouldDeclareOnGlobalThis = false;\n-      if (n.getType() == Token.NAME) {\n+void defineSlot(Node n, Node parent, JSType type, boolean inferred) {\n+    Preconditions.checkArgument(inferred || type != null);\n+\n+    // Only allow declarations of NAMEs and qualfied names.\n+    // Allow 'QUALIFIED_NAME.propName' only if it's exactly\n+    // 'goog.getMsg' and n is the 3rd child in a Call.\n+    // We don't want to allow goog.getMsg.prop in a declaration because\n+    // that would allow the type-checker to accept invalid programs like\n+    // goog.getMsg.prop + 1 or goog.getMsg.prop - goog.getMsg.otherProp\n+    boolean shouldDeclareOnGlobalThis = false;\n+    if (n.getType() == Token.NAME) {\n         Preconditions.checkArgument(\n             parent.getType() == Token.FUNCTION ||\n             parent.getType() == Token.VAR ||\n@@ -883,66 +888,38 @@ final class TypedScopeCreator implements ScopeCreator {\n         shouldDeclareOnGlobalThis = scope.isGlobal() &&\n             (parent.getType() == Token.VAR ||\n              parent.getType() == Token.FUNCTION);\n-      } else {\n-        Preconditions.checkArgument(\n-            n.getType() == Token.GETPROP &&\n-            (parent.getType() == Token.ASSIGN ||\n-             parent.getType() == Token.EXPR_RESULT));\n-      }\n-      String variableName = n.getQualifiedName();\n-      Preconditions.checkArgument(!variableName.isEmpty());\n-\n-      // If n is a property, then we should really declare it in the\n-      // scope where the root object appears. This helps out people\n-      // who declare \"global\" names in an anonymous namespace.\n-      Scope scopeToDeclareIn = scope;\n-\n-        // don't try to declare in the global scope if there's\n-        // already a symbol there with this name.\n-\n-      // declared in closest scope?\n-      if (scopeToDeclareIn.isDeclared(variableName, false)) {\n-        Var oldVar = scopeToDeclareIn.getVar(variableName);\n-        validator.expectUndeclaredVariable(\n-            sourceName, n, parent, oldVar, variableName, type);\n-      } else {\n-        if (!inferred) {\n-          setDeferredType(n, type);\n-        }\n-        CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n-\n-        if (shouldDeclareOnGlobalThis) {\n-          ObjectType globalThis =\n-              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n-          if (inferred) {\n-            globalThis.defineInferredProperty(variableName,\n-                type == null ?\n-                    getNativeType(JSTypeNative.NO_TYPE) :\n-                    type,\n-                isExtern);\n-          } else {\n-            globalThis.defineDeclaredProperty(variableName, type, isExtern);\n-          }\n-        }\n-\n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n-          FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n-            FunctionType superClassCtor = fnType.getSuperClassConstructor();\n-            scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n-          }\n-        }\n-      }\n-    }\n+    } else if (n.getType() == Token.GETPROP) {\n+        if (NodeUtil.isGetMsgNode(n)) {\n+            Node gramps = parent.getParent();\n+            Node greatGramps = gramps.getParent();\n+            Preconditions.checkState(\n+                gramps != null && greatGramps != null &&\n+                gramps.getType() == Token.CALL &&\n+                gramps.getFirstChild().matchesQualifiedName(\"goog.getMsg\") &&\n+                n.isFirstChildOf(gramps.getSecondChild()));\n+            // Declare all quoted strings that appear as the 2nd argument to\n+            // goog.getMsg(str, propName) in the correct scope for messages. We don't\n+            // have a good way to type them precisely other than just Object, as it\n+            // would require propagating the \"messages object\" throughout the compile.\n+            Node messages = gramps.getLastChild();\n+            checkArgument(\n+                messages.isString() || (messages.isName() && !messages.getString().isEmpty()),\n+                \"Unexpected goog.getMsg arguments: %s\", gramps.toStringTree());\n+            Scope scopeToDeclareIn = messages.isString() ? scope : getClosestHoistScope(n);\n+            scopeToDeclareIn.declare(\n+                messages.getString(),\n+                messages,\n+                getNativeType(OBJECT_TYPE),\n+                compiler.getInput(sourceName),\n+                /* inferred= */ true);\n+        } else {\n+            Preconditions.checkArgument(\n+                parent.getType() == Token.ASSIGN ||\n+                parent.getType() == Token.EXPR_RESULT);\n+            shouldDeclareOnGlobalThis = scope.isGlobal() &&\n+                parent.getType() == Token.ASSIGN && \n+                parent.getFirstChild().getType() == Token.THIS &&\n+                n.getFirstChild().getType() =\n \n     /**\n      * Check if the given node is a property of a name in the global scope.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}