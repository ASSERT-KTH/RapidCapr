{
    "patch": "  private void maybeWarnAboutAccessControls(NodeTraversal t, Node n) {\n    Node parent = n.getParent();\n    if (NodeUtil.isObjectLitKey(n)) {\n      // Ignore type declarations.\n      return;\n    } else if (parent != null && parent.isExprResult() && !isGlobalNameDeclaration(n, t)) {\n      Node firstChild = n.getFirstChild();\n      if (firstChild == null || !firstChild.isGetProp()) {\n        return;\n      }\n      Node getpropTarget = firstChild.getFirstChild();\n      if (getpropTarget == null || !getpropTarget.isName()) {\n        return;\n      }\n      String targetName = getpropTarget.getString();\n      AccessControlInfo info = AccessControlUtils.functionParamOrNameAccessed(t, targetName, n);\n      if (info == null) {\n        return;\n      }\n      String message = \"Access to \" + targetName + \" denied by \" + info.getRestrictionName()\n              + \" at line \" + info.getLine();\n      maybeReportWarning(n, message, AccessControlUtils.hasFullQualifiedMethodCalls(n));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}