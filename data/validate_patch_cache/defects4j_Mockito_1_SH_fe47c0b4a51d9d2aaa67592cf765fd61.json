{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        int varArgIndex = -1; //New line\n        for (int i = 0; i < matchers.size(); i++) {\n            Matcher m = matchers.get(i);\n            if (m instanceof CapturesArguments) {\n                if (isVarargMatcher(m) && isVariableArgument(invocation, i)) {\n                    varArgIndex = i;\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n                }\n            }\n        }\n        if (varArgIndex >= 0) { //New line\n            Object varArg = rawArguments[varArgIndex];\n            int varArgLength = Array.getLength(varArg);\n            for (int i = 0; i < varArgLength; i++) {\n                int matcherIndex = varArgIndex - matchers.size() + i;\n                Matcher m = matchers.get(matcherIndex);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(Array.get(varArg, i));\n                }\n            }\n        } //New line",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..63fb9813c 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,29 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        int varArgIndex = -1; //New line\n+        for (int i = 0; i < matchers.size(); i++) {\n+            Matcher m = matchers.get(i);\n+            if (m instanceof CapturesArguments) {\n+                if (isVarargMatcher(m) && isVariableArgument(invocation, i)) {\n+                    varArgIndex = i;\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(i, Object.class));\n+                }\n+            }\n+        }\n+        if (varArgIndex >= 0) { //New line\n+            Object varArg = rawArguments[varArgIndex];\n+            int varArgLength = Array.getLength(varArg);\n+            for (int i = 0; i < varArgLength; i++) {\n+                int matcherIndex = varArgIndex - matchers.size() + i;\n+                Matcher m = matchers.get(matcherIndex);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(varArg, i));\n+                }\n+            }\n+        } //New line\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: -1",
    "test_result": "FAIL"
}