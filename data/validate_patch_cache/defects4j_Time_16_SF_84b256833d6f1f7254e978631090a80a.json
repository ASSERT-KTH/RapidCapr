{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (newPos < 0) {\n            newPos = ~newPos;\n        } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        } else {\n            long parsedInstant = bucket.computeMillis(false, text);\n            if (parsedInstant <= instantMillis) {\n                newPos = ~newPos;\n            } else {\n                instant.setMillis(parsedInstant);\n                if (bucket.getZone() != null) {\n                    chrono = chrono.withZone(bucket.getZone());\n                    instant.setChronology(chrono);\n                }\n                if (iZone != null) {\n                    instant.setZone(iZone);\n                }\n            }\n        }\n        \n        // Handle edge case for parsing start of month\n        if (newPos < 0 && bucket.getSavedField(DateTimeFieldType.monthOfYear()) != null &&\n                bucket.getSavedField(DateTimeFieldType.dayOfMonth()) == null) {\n            MutableDateTime tempDateTime = new MutableDateTime(0, chrono);\n            tempDateTime.setDate(1, bucket.getValidMonth(), bucket.getValidYear());\n            instant.setMillis(tempDateTime.getMillis());\n            newPos = ~position;\n        }\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..775992c8 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,27 +699,49 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+\n+        if (newPos < 0) {\n+            newPos = ~newPos;\n+        } else if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n             chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+        } else {\n+            long parsedInstant = bucket.computeMillis(false, text);\n+            if (parsedInstant <= instantMillis) {\n+                newPos = ~newPos;\n+            } else {\n+                instant.setMillis(parsedInstant);\n+                if (bucket.getZone() != null) {\n+                    chrono = chrono.withZone(bucket.getZone());\n+                    instant.setChronology(chrono);\n+                }\n+                if (iZone != null) {\n+                    instant.setZone(iZone);\n+                }\n+            }\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        \n+        // Handle edge case for parsing start of month\n+        if (newPos < 0 && bucket.getSavedField(DateTimeFieldType.monthOfYear()) != null &&\n+                bucket.getSavedField(DateTimeFieldType.dayOfMonth()) == null) {\n+            MutableDateTime tempDateTime = new MutableDateTime(0, chrono);\n+            tempDateTime.setDate(1, bucket.getValidMonth(), bucket.getValidYear());\n+            instant.setMillis(tempDateTime.getMillis());\n+            newPos = ~position;\n         }\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}