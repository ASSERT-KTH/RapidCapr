{
    "patch": "        if (Double.isNaN(result[resultOffset])) {\n            double px = x[xOffset];\n            double py = y[yOffset];\n            if (Double.isInfinite(px) && Double.isInfinite(py)) {\n                result[resultOffset] = FastMath.atan2(py, px);\n            } else if (px == 0.0 && py == 0.0) {\n                result[resultOffset] = 0.0;\n            } else if (Double.isInfinite(py) && !Double.isInfinite(px)) {\n                result[resultOffset] = (py > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n            } else if (Double.isInfinite(px)) {\n                result[resultOffset] = (px > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n            } else {\n                result[resultOffset] = Double.NaN;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..9cba04efe 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,21 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(result[resultOffset])) {\n+            double px = x[xOffset];\n+            double py = y[yOffset];\n+            if (Double.isInfinite(px) && Double.isInfinite(py)) {\n+                result[resultOffset] = FastMath.atan2(py, px);\n+            } else if (px == 0.0 && py == 0.0) {\n+                result[resultOffset] = 0.0;\n+            } else if (Double.isInfinite(py) && !Double.isInfinite(px)) {\n+                result[resultOffset] = (py > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+            } else if (Double.isInfinite(px)) {\n+                result[resultOffset] = (px > 0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+            } else {\n+                result[resultOffset] = Double.NaN;\n+            }\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}