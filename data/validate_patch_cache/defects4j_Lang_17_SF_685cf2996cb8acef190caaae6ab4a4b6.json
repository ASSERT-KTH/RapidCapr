{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        CharsetEncoder encoder = Charset.forName(\"UTF-8\").newEncoder();\n        int len = Character.codePointCount(input, 0, input.length());\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                int codepoint = Character.codePointAt(input, pos);\n                ByteBuffer bytes = encoder.encode(CharBuffer.wrap(Character.toChars(codepoint)));\n                out.write(new String(bytes.array(), bytes.arrayOffset(), bytes.limit()));\n            } else {\n                for (int pt = 0; pt < consumed; pt++) {\n                    if (pos < len - 2) {\n                        pos += Character.charCount(Character.codePointAt(input, pos));\n                    } else {\n                        pos++;\n                    }\n                }\n                pos--;\n            }\n            pos++;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..32d6ed0a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,7 +72,7 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n+public final void translate(CharSequence input, Writer out) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n@@ -80,19 +80,18 @@ public abstract class CharSequenceTranslator {\n             return;\n         }\n         int pos = 0;\n+        CharsetEncoder encoder = Charset.forName(\"UTF-8\").newEncoder();\n         int len = Character.codePointCount(input, 0, input.length());\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n+                int codepoint = Character.codePointAt(input, pos);\n+                ByteBuffer bytes = encoder.encode(CharBuffer.wrap(Character.toChars(codepoint)));\n+                out.write(new String(bytes.array(), bytes.arrayOffset(), bytes.limit()));\n+            } else {\n+                for (int pt = 0; pt < consumed; pt++) {\n                     if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+                        pos += Character.charCount(Character.codePointAt(input, pos));\n                     } else {\n                         pos++;\n                     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}