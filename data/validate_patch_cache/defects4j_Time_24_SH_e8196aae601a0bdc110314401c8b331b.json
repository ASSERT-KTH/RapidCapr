{
    "patch": "int changedFieldIndex = -1;\nDateTimeField changedField = null;\nlong newMillis;\ntry {\n    for (int i = 0; i < count; i++) {\n        newMillis = savedFields[i].set(millis, resetFields);\n\n        if (newMillis != millis) {\n            if (changedField != null) {\n                String message = \"Conflict found: \" + changedField.getName()\n                        + \" - \" + savedFields[i].iField.getName();\n                throw new IllegalArgumentException(message);\n            }\n            changedField = savedFields[i].iField;\n            changedFieldIndex = i;\n            millis = newMillis;\n        }\n    }\n} catch (IllegalArgumentException | ArithmeticException | UnsupportedOperationException e) {\n    if (text != null) {\n        if (e.getMessage() != null && !e.getMessage().startsWith(\"Cannot parse \\\"\")) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n        } else {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n    }\n    if (e instanceof IllegalFieldValueException) {\n        throw e;\n    } else if (e instanceof IllegalArgumentException) {\n        if (changedFieldIndex >= 0) {\n            String message = \"Value \" + savedFields[changedFieldIndex].iValue\n                    + \" for \" + changedField.getName()\n                    + \" is not supported\";\n            throw new IllegalFieldValueException(changedField.getType(), message);\n        } else {\n            if (e.getMessage() != null && e.getMessage().startsWith(\"Cannot parse \")) {\n                throw e;\n            } else {\n                String message = \"Cannot parse \\\"\" + text + '\"';\n                throw new IllegalFieldValueException(message, e);\n            }\n        }\n    } else {\n        throw new IllegalStateException(e);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cac66a80 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,52 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+int changedFieldIndex = -1;\n+DateTimeField changedField = null;\n+long newMillis;\n+try {\n+    for (int i = 0; i < count; i++) {\n+        newMillis = savedFields[i].set(millis, resetFields);\n+\n+        if (newMillis != millis) {\n+            if (changedField != null) {\n+                String message = \"Conflict found: \" + changedField.getName()\n+                        + \" - \" + savedFields[i].iField.getName();\n+                throw new IllegalArgumentException(message);\n+            }\n+            changedField = savedFields[i].iField;\n+            changedFieldIndex = i;\n+            millis = newMillis;\n+        }\n+    }\n+} catch (IllegalArgumentException | ArithmeticException | UnsupportedOperationException e) {\n+    if (text != null) {\n+        if (e.getMessage() != null && !e.getMessage().startsWith(\"Cannot parse \\\"\")) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\": \");\n+        } else {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+    }\n+    if (e instanceof IllegalFieldValueException) {\n+        throw e;\n+    } else if (e instanceof IllegalArgumentException) {\n+        if (changedFieldIndex >= 0) {\n+            String message = \"Value \" + savedFields[changedFieldIndex].iValue\n+                    + \" for \" + changedField.getName()\n+                    + \" is not supported\";\n+            throw new IllegalFieldValueException(changedField.getType(), message);\n+        } else {\n+            if (e.getMessage() != null && e.getMessage().startsWith(\"Cannot parse \")) {\n+                throw e;\n+            } else {\n+                String message = \"Cannot parse \\\"\" + text + '\"';\n+                throw new IllegalFieldValueException(message, e);\n+            }\n+        }\n+    } else {\n+        throw new IllegalStateException(e);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: multi-catch statement is not supported in -source 1.5",
    "test_result": "ERROR"
}