{
    "patch": "private boolean isFoldableExpressBlock(Node n) {\n    if (n.isBlock() && n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n\n        // If the node has an associated JSDocInfo, we know it was not generated by the parser.\n        // In this case, we assume it's safe to fold regardless of its type.\n        JSDocInfo maybeJsDoc = NodeUtil.getBestJSDocInfo(n);\n        if (maybeJsDoc != null) {\n            return true;\n        }\n\n        // Otherwise, we try to use the same logic as the Google Closure Compiler in its source code.\n        if (maybeExpr.isExprResult() && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n            Node child = maybeExpr.getFirstChild();\n            if (!NodeUtil.mayHaveSideEffects(child)\n                    && (child.isCall() || child.isNew() || NodeUtil.isAssignmentOp(child) || NodeUtil.isLiteralValue(child))) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..be4fb302 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,28 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n+private boolean isFoldableExpressBlock(Node n) {\n+    if (n.isBlock() && n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n \n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n+        // If the node has an associated JSDocInfo, we know it was not generated by the parser.\n+        // In this case, we assume it's safe to fold regardless of its type.\n+        JSDocInfo maybeJsDoc = NodeUtil.getBestJSDocInfo(n);\n+        if (maybeJsDoc != null) {\n+            return true;\n+        }\n \n-          return NodeUtil.isExpressionNode(maybeExpr);\n-      }\n+        // Otherwise, we try to use the same logic as the Google Closure Compiler in its source code.\n+        if (maybeExpr.isExprResult() && NodeUtil.isExpressionNode(maybeExpr.getFirstChild())) {\n+            Node child = maybeExpr.getFirstChild();\n+            if (!NodeUtil.mayHaveSideEffects(child)\n+                    && (child.isCall() || child.isNew() || NodeUtil.isAssignmentOp(child) || NodeUtil.isLiteralValue(child))) {\n+                return true;\n+            }\n+        }\n     }\n-\n     return false;\n-  }\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}