{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    if (typeOfThis instanceof ObjectType) {\n        typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        JSType resolvedIface = iface.resolve(t, scope);\n        if (resolvedIface instanceof ObjectType) {\n            ObjectType resolvedObjectType = (ObjectType) resolvedIface;\n            resolvedInterfaces.add(resolvedObjectType);\n            changed |= (resolvedObjectType != iface);\n        } else {\n            t.report(JSError.make(n, UNSUPPORTED_SYNTAXERROR_MESSAGE));\n            return getCommonTypes().getInvalidType();\n        }\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        JSType subType = subTypes.get(i).resolve(t, scope);\n        if (subType instanceof FunctionType) {\n            subTypes.set(i, (FunctionType) subType);\n        } else {\n            t.report(JSError.make(n, UNSUPPORTED_SYNTAXERROR_MESSAGE));\n            return getCommonTypes().getInvalidType();\n        }\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..14038ad0 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,7 +859,7 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n     call = (ArrowType) safeResolve(call, t, scope);\n@@ -868,15 +868,23 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis instanceof ObjectType) {\n+        typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+        JSType resolvedIface = iface.resolve(t, scope);\n+        if (resolvedIface instanceof ObjectType) {\n+            ObjectType resolvedObjectType = (ObjectType) resolvedIface;\n+            resolvedInterfaces.add(resolvedObjectType);\n+            changed |= (resolvedObjectType != iface);\n+        } else {\n+            t.report(JSError.make(n, UNSUPPORTED_SYNTAXERROR_MESSAGE));\n+            return getCommonTypes().getInvalidType();\n+        }\n     }\n     if (changed) {\n       implementedInterfaces = resolvedInterfaces.build();\n@@ -884,7 +892,13 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        JSType subType = subTypes.get(i).resolve(t, scope);\n+        if (subType instanceof FunctionType) {\n+            subTypes.set(i, (FunctionType) subType);\n+        } else {\n+            t.report(JSError.make(n, UNSUPPORTED_SYNTAXERROR_MESSAGE));\n+            return getCommonTypes().getInvalidType();\n+        }\n       }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}