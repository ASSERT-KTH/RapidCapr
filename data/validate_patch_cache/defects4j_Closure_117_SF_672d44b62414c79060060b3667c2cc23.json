{
    "patch": "  private String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = ObjectType.cast(getJSType(n.getFirstChild())).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        boolean foundPropOnPrototype = false;\n        if (objectType.getConstructor() != null &&\n                objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n                  objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasProperty(propName)) {\n            if (!foundPropOnPrototype &&\n                    objectType.hasNonInheritedProperty(propName)) {\n              foundPropOnPrototype = true;\n            }\n            objectType = ObjectType.cast(objectType.getImplicitPrototype());\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null && (\n                objectType.getConstructor() != null ||\n                        objectType.isFunctionPrototypeType())) {\n          if (foundPropOnPrototype) {\n            return objectType.toString() + \" (property on prototype).\" + propName;\n          }\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = ObjectType.cast(type).dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n            (ObjectType.cast(type).getConstructor() != null)) {\n      return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..5e535685 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,7 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+  private String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n@@ -729,25 +729,33 @@ class TypeValidator {\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+      ObjectType objectType = ObjectType.cast(getJSType(n.getFirstChild())).dereference();\n       if (objectType != null) {\n         String propName = n.getLastChild().getString();\n+        boolean foundPropOnPrototype = false;\n         if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n+                objectType.getConstructor().isInterface()) {\n           objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n+                  objectType, propName);\n         } else {\n           // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n+          while (objectType != null && !objectType.hasProperty(propName)) {\n+            if (!foundPropOnPrototype &&\n+                    objectType.hasNonInheritedProperty(propName)) {\n+              foundPropOnPrototype = true;\n+            }\n+            objectType = ObjectType.cast(objectType.getImplicitPrototype());\n           }\n         }\n \n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n+        if (objectType != null && (\n+                objectType.getConstructor() != null ||\n+                        objectType.isFunctionPrototypeType())) {\n+          if (foundPropOnPrototype) {\n+            return objectType.toString() + \" (property on prototype).\" + propName;\n+          }\n           return objectType.toString() + \".\" + propName;\n         }\n       }\n@@ -755,14 +763,13 @@ class TypeValidator {\n \n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n+      ObjectType dereferenced = ObjectType.cast(type).dereference();\n       if (dereferenced != null) {\n         type = dereferenced;\n       }\n     }\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n+            (ObjectType.cast(type).getConstructor() != null)) {\n       return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}