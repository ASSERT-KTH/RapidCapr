{
    "patch": "    protected double getInitialDomain(double p) throws MathIllegalArgumentException {\n        double ret;\n        double d = getDenominatorDegreesOfFreedom();\n        if (d <= 2.0) {\n            throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL, d, 2);\n        } else {\n            // use mean\n            ret = d / (d - 2.0);\n        }\n        return ret;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\nindex e19e97aef..968394565 100644\n--- a/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/FDistributionImpl.java\n@@ -140,11 +140,15 @@ public class FDistributionImpl\n      * @param p the desired probability for the critical value\n      * @return initial domain value\n      */\n-    protected double getInitialDomain(double p) {\n+    protected double getInitialDomain(double p) throws MathIllegalArgumentException {\n         double ret;\n         double d = getDenominatorDegreesOfFreedom();\n+        if (d <= 2.0) {\n+            throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL, d, 2);\n+        } else {\n             // use mean\n             ret = d / (d - 2.0);\n+        }\n         return ret;\n     }\n     ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}