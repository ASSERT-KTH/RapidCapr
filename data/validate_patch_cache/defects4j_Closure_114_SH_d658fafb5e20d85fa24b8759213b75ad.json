{
    "patch": "        } else {\n          // The rhs of the assignment is the caller. If it's a function call,\n          // don't associate it with the lhs; instead treat it as an argument.\n          // FYI: this fixes only the specific case where the assignment is the\n          // caller expression, but it could be nested deeper in the caller and\n          // we would still get a bug (which requires a more complex fix).\n          // See testAssignWithCall2 for an example of this.\n          if (recordNode.getParent().isCall()) {\n            recordDepScope(recordNode.getParent(), ns);\n          } else {\n            recordDepScope(recordNode, ns);\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..06fddcd1 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -576,6 +576,18 @@ final class NameAnalyzer implements CompilerPass {\n             recordDepScope(nameNode, ns);\n           }\n         } else {\n+          // The rhs of the assignment is the caller. If it's a function call,\n+          // don't associate it with the lhs; instead treat it as an argument.\n+          // FYI: this fixes only the specific case where the assignment is the\n+          // caller expression, but it could be nested deeper in the caller and\n+          // we would still get a bug (which requires a more complex fix).\n+          // See testAssignWithCall2 for an example of this.\n+          if (recordNode.getParent().isCall()) {\n+            recordDepScope(recordNode.getParent(), ns);\n+          } else {\n+            recordDepScope(recordNode, ns);\n+          }\n+        }\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}