{
    "patch": "    if (parent != null) {\n      int parentType = parent.getType();\n      if ((parentType == Token.NAME && parent.getParent().getType() == Token.FOR_OF) ||\n          parentType == Token.FOR ||\n          parentType == Token.WHILE ||\n          parentType == Token.DO ||\n          parentType == Token.IF ||\n          (parentType == Token.CATCH && parent.getBooleanProp(Node.CATCH_SCOPE))) {\n        intermediateState.enterScope(parent.getJSDocInfo(), n, parent);\n      }\n    }\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (NodeUtil.isGet(parent)) {\n        Set<Node> visitedProps = new HashSet<>();\n        while (NodeUtil.isGet(parent)) {\n          visitedProps.add(parent);\n          parent = parent.getFirstChild();\n        }\n        if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.ASSIGN) {\n          parent = parent.getParent();\n          while (NodeUtil.isGet(parent)) {\n            visitedProps.add(parent);\n            parent = parent.getFirstChild();\n          }\n        }\n        boolean isNestedProperty = visitedProps.stream()\n            .anyMatch(p -> p.getType() == Token.GETPROP && p.getLastChild().getString().equals(\"prototype\"));\n        if (isNestedProperty) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null) {\n      int parentType = parent.getType();\n      if ((parentType == Token.NAME && parent.getParent().getType() == Token.FOR_OF) ||\n          NodeUtil.isEnhancedFor(parent) ||\n          parentType == Token.FOR ||\n          parentType == Token.WHILE ||\n          parentType == Token.DO ||\n          parentType == Token.IF ||\n          parentType == Token.CASE ||\n          parentType == Token.TRY ||\n          parentType == Token.CATCH) {\n        intermediateState.enterScope(parent.getJSDocInfo(), n, parent);\n      }\n    }\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..56052478 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,85 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (parent != null) {\n+      int parentType = parent.getType();\n+      if ((parentType == Token.NAME && parent.getParent().getType() == Token.FOR_OF) ||\n+          parentType == Token.FOR ||\n+          parentType == Token.WHILE ||\n+          parentType == Token.DO ||\n+          parentType == Token.IF ||\n+          (parentType == Token.CATCH && parent.getBooleanProp(Node.CATCH_SCOPE))) {\n+        intermediateState.enterScope(parent.getJSDocInfo(), n, parent);\n+      }\n+    }\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (NodeUtil.isGet(parent)) {\n+        Set<Node> visitedProps = new HashSet<>();\n+        while (NodeUtil.isGet(parent)) {\n+          visitedProps.add(parent);\n+          parent = parent.getFirstChild();\n+        }\n+        if (parent.getType() == Token.NAME && parent.getParent().getType() == Token.ASSIGN) {\n+          parent = parent.getParent();\n+          while (NodeUtil.isGet(parent)) {\n+            visitedProps.add(parent);\n+            parent = parent.getFirstChild();\n+          }\n+        }\n+        boolean isNestedProperty = visitedProps.stream()\n+            .anyMatch(p -> p.getType() == Token.GETPROP && p.getLastChild().getString().equals(\"prototype\"));\n+        if (isNestedProperty) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    if (parent != null) {\n+      int parentType = parent.getType();\n+      if ((parentType == Token.NAME && parent.getParent().getType() == Token.FOR_OF) ||\n+          NodeUtil.isEnhancedFor(parent) ||\n+          parentType == Token.FOR ||\n+          parentType == Token.WHILE ||\n+          parentType == Token.DO ||\n+          parentType == Token.IF ||\n+          parentType == Token.CASE ||\n+          parentType == Token.TRY ||\n+          parentType == Token.CATCH) {\n+        intermediateState.enterScope(parent.getJSDocInfo(), n, parent);\n+      }\n+    }\n+\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}