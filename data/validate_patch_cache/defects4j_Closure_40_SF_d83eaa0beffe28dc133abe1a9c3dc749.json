{
    "patch": "public void visit(NodeTraversal t, Node n, Node parent) {\n    // RECORD FUNCTION AND VARIABLE DECLARATIONS\n    if (t.inGlobalScope()) {  // check if in global scope\n        if (n.isFunction()) {  // check if function declaration\n            Node funcName = n.getFirstChild();\n            if (funcName.isName()) {  // check if function has a name\n                String functionName = funcName.getString();\n                JsName jsName = getName(functionName, true);\n                recordSetName(jsName, funcName);\n            }\n        } else if (NodeUtil.isNameDeclaration(n)) {  // check if name declaration\n            Node varName = n.getFirstChild();\n            String variableName = varName.getString();\n            JsName jsName = getName(variableName, false);\n            recordSetName(jsName, varName);\n        }\n    }\n    // RECORD VARIABLE ASSIGNMENTS\n    else if (n.isAssign()) {  // check if assignment expression\n        Node assignTarget = n.getFirstChild();\n        if (assignTarget.isName()) {  // check if assignment to a variable\n            String variableName = assignTarget.getString();\n            JsName jsName = getName(variableName, false);\n            recordSet(jsName, assignTarget);\n        } else if (assignTarget.isGetProp()) {  // check if assignment to a property\n            Node propTarget = assignTarget.getFirstChild();\n            Node propName = assignTarget.getLastChild();\n            String propNameString = propName.getString();\n            NameInformation ns = createNameInformation(t, propTarget, null);\n            JsName jsName = getName(ns.name, true);\n            recordSetProperty(jsName, propNameString, propName);\n        }\n    }\n    // RECORD CALL SITES\n    else if (n.isCall()) {  // check if call expression\n        Node callTarget = n.getFirstChild();\n        if (callTarget.isName()) {  // check if calling a regular function\n            String functionName = callTarget.getString();\n            JsName jsName = getName(functionName, true);\n            recordCall(jsName, parent);\n        } else if (callTarget.isGetProp()) {  // check if calling a method\n            Node propTarget = callTarget.getFirstChild();\n            Node propName = callTarget.getLastChild();\n            String propNameString = propName.getString();\n            NameInformation ns = createNameInformation(t, propTarget, null);\n            JsName jsName = getName(ns.name, true);\n            recordCallProperty(jsName, propNameString);\n        }\n    } else if (n.isClass()) {  // RECORD CLASS DECLARATIONS\n        Node className = n.getFirstChild();\n        String classNameString = className.getString();\n        JsName jsName = getName(classNameString, false);\n        recordSetName(jsName, className);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..9de93642 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,61 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    // RECORD FUNCTION AND VARIABLE DECLARATIONS\n+    if (t.inGlobalScope()) {  // check if in global scope\n+        if (n.isFunction()) {  // check if function declaration\n+            Node funcName = n.getFirstChild();\n+            if (funcName.isName()) {  // check if function has a name\n+                String functionName = funcName.getString();\n+                JsName jsName = getName(functionName, true);\n+                recordSetName(jsName, funcName);\n+            }\n+        } else if (NodeUtil.isNameDeclaration(n)) {  // check if name declaration\n+            Node varName = n.getFirstChild();\n+            String variableName = varName.getString();\n+            JsName jsName = getName(variableName, false);\n+            recordSetName(jsName, varName);\n         }\n-      }\n-\n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n-\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n+    }\n+    // RECORD VARIABLE ASSIGNMENTS\n+    else if (n.isAssign()) {  // check if assignment expression\n+        Node assignTarget = n.getFirstChild();\n+        if (assignTarget.isName()) {  // check if assignment to a variable\n+            String variableName = assignTarget.getString();\n+            JsName jsName = getName(variableName, false);\n+            recordSet(jsName, assignTarget);\n+        } else if (assignTarget.isGetProp()) {  // check if assignment to a property\n+            Node propTarget = assignTarget.getFirstChild();\n+            Node propName = assignTarget.getLastChild();\n+            String propNameString = propName.getString();\n+            NameInformation ns = createNameInformation(t, propTarget, null);\n+            JsName jsName = getName(ns.name, true);\n+            recordSetProperty(jsName, propNameString, propName);\n         }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n+    }\n+    // RECORD CALL SITES\n+    else if (n.isCall()) {  // check if call expression\n+        Node callTarget = n.getFirstChild();\n+        if (callTarget.isName()) {  // check if calling a regular function\n+            String functionName = callTarget.getString();\n+            JsName jsName = getName(functionName, true);\n+            recordCall(jsName, parent);\n+        } else if (callTarget.isGetProp()) {  // check if calling a method\n+            Node propTarget = callTarget.getFirstChild();\n+            Node propName = callTarget.getLastChild();\n+            String propNameString = propName.getString();\n+            NameInformation ns = createNameInformation(t, propTarget, null);\n+            JsName jsName = getName(ns.name, true);\n+            recordCallProperty(jsName, propNameString);\n         }\n-      }\n+    } else if (n.isClass()) {  // RECORD CLASS DECLARATIONS\n+        Node className = n.getFirstChild();\n+        String classNameString = className.getString();\n+        JsName jsName = getName(classNameString, false);\n+        recordSetName(jsName, className);\n     }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}