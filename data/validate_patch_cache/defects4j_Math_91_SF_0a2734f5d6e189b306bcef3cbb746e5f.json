{
    "patch": "public int compareTo(Fraction object) {\n    // Simplify this fraction using gcd method\n    int gcdThis = gcd(this.numerator, this.denominator);\n    int numThis = this.numerator/gcdThis;\n    int denThis = this.denominator/gcdThis;\n\n    // Simplify the other fraction using gcd method\n    int gcdOther = gcd(object.numerator, object.denominator);\n    int numOther = object.numerator/gcdOther;\n    int denOther = object.denominator/gcdOther;\n\n    // Compare the simplified fractions\n    double thisValue = (double)numThis/denThis;\n    double otherValue = (double)numOther/denOther;\n    return Double.compare(thisValue, otherValue);\n}\n\n// Greatest common divisor using Euclid's algorithm\nprivate static int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..1ccbaa00e 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -255,11 +255,30 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n-    public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n+public int compareTo(Fraction object) {\n+    // Simplify this fraction using gcd method\n+    int gcdThis = gcd(this.numerator, this.denominator);\n+    int numThis = this.numerator/gcdThis;\n+    int denThis = this.denominator/gcdThis;\n+\n+    // Simplify the other fraction using gcd method\n+    int gcdOther = gcd(object.numerator, object.denominator);\n+    int numOther = object.numerator/gcdOther;\n+    int denOther = object.denominator/gcdOther;\n+\n+    // Compare the simplified fractions\n+    double thisValue = (double)numThis/denThis;\n+    double otherValue = (double)numOther/denOther;\n+    return Double.compare(thisValue, otherValue);\n+}\n+\n+// Greatest common divisor using Euclid's algorithm\n+private static int gcd(int a, int b) {\n+    if (b == 0) {\n+        return a;\n     }\n+    return gcd(b, a % b);\n+}\n     \n     /**\n      * Gets the fraction as a <tt>double</tt>. This calculates the fraction as",
    "result_reason": "junit.framework.AssertionFailedError: expected:<-1> but was:<0>",
    "test_result": "FAIL"
}