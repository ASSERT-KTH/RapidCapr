{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    // Initialize the latest accepted vertex as the best vertex among the simplex\n    RealPointValuePair latestAccepted = simplex[0];\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) { // Use '<' instead of '<='\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected vertex only\n                simplex = new RealPointValuePair[] { reflected };\n            }\n\n            latestAccepted = simplex[0]; // Update the latest accepted vertex\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    best, latestAccepted)) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = new RealPointValuePair[] { contracted };\n\n                latestAccepted = simplex[0]; // Update the latest accepted vertex\n            } else {\n                // accept the best vertex only\n                simplex = new RealPointValuePair[] { best };\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    best, latestAccepted)) {\n                return;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..6ac5bb524 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,65 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    // Initialize the latest accepted vertex as the best vertex among the simplex\n+    RealPointValuePair latestAccepted = simplex[0];\n \n-            incrementIterationsCounter();\n+    while (true) {\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        incrementIterationsCounter();\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) { // Use '<' instead of '<='\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected vertex only\n+                simplex = new RealPointValuePair[] { reflected };\n+            }\n+\n+            latestAccepted = simplex[0]; // Update the latest accepted vertex\n \n+            // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    best, latestAccepted)) {\n+                return;\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = new RealPointValuePair[] { contracted };\n+\n+                latestAccepted = simplex[0]; // Update the latest accepted vertex\n+            } else {\n+                // accept the best vertex only\n+                simplex = new RealPointValuePair[] { best };\n+            }\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    best, latestAccepted)) {\n                 return;\n             }\n-\n         }\n-\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 1",
    "test_result": "FAIL"
}