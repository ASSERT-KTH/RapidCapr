{
    "patch": "        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear,\n                // Pass in an empty Chronology to avoid deprecated method with two Chronology arguments\n                new LocalDate().getChronology().withZone(DateTimeZone.UTC), iDefaultYear);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..6da29010 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,10 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                instantLocal, chrono, iLocale, iPivotYear,\n+                // Pass in an empty Chronology to avoid deprecated method with two Chronology arguments\n+                new LocalDate().getChronology().withZone(DateTimeZone.UTC), iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}