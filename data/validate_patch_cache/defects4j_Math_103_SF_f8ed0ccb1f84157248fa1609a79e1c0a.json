{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        double result = 0;\n        if (Double.isInfinite(x)) {\n            result = x < 0 ? 0.0 : 1.0;\n        } else if (Double.isNaN(x)) {\n            result = 0.0;\n        } else if ((x - mean) / standardDeviation >= 40.0) {\n            result = 1.0;\n        } else if ((x - mean) / standardDeviation <= -40.0) {\n            result = 0.0;\n        } else {\n            result = 0.5 * (1.0 + Erf.erf((x - mean) /\n                    (standardDeviation * Math.sqrt(2.0))));\n        }\n        if (result > 1.0) {\n            result = 1.0;\n        } else if (result < 0.0) {\n            result = 0.0;\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..b863ef600 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,25 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n+        double result = 0;\n+        if (Double.isInfinite(x)) {\n+            result = x < 0 ? 0.0 : 1.0;\n+        } else if (Double.isNaN(x)) {\n+            result = 0.0;\n+        } else if ((x - mean) / standardDeviation >= 40.0) {\n+            result = 1.0;\n+        } else if ((x - mean) / standardDeviation <= -40.0) {\n+            result = 0.0;\n+        } else {\n+            result = 0.5 * (1.0 + Erf.erf((x - mean) /\n                     (standardDeviation * Math.sqrt(2.0))));\n+        }\n+        if (result > 1.0) {\n+            result = 1.0;\n+        } else if (result < 0.0) {\n+            result = 0.0;\n+        }\n+        return result;\n     }\n     \n     /**",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}