{
    "patch": "    private static final double DEFAULT_EPSILON = 1.0E-6;\n\n    private static final int DEFAULT_MAX_ITERATIONS = 100;\n\n    private static final int RADIX = 10;\n\n    private static final long serialVersionUID = 3698073679419233275L;\n\n    private final int numerator;\n\n    private final int denominator;\n\n    public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2;\n        long q2;\n        int n = 1;\n        boolean stop = false;\n        do {\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n            p2 = (a1 * p1) + p0;\n            q2 = (a1 * q1) + q0;\n            if ((p2 > overflow) || (q2 > overflow)) {\n                throw new FractionConversionException(value, p2, q2);\n            }\n\n            double convergent = (double)p2 / (double)q2;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon) {\n                p0 = p1;\n                p1 = p2;\n                q0 = q1;\n                q1 = q2;\n                a0 = a1;\n                r0 = r1;\n            } else {\n                stop = true;\n            }\n\n            n++;\n        } while (!stop);\n\n        if (q2 < RADIX) {\n            this.numerator = (int)p2;\n            this.denominator = (int)q2;\n        } else {\n            this.numerator = (int)p1;\n            this.denominator = (int)q1;\n        }\n    }\n\n    public Fraction(double value, int maxIterations) throws FractionConversionException {\n        this(value, DEFAULT_EPSILON, maxIterations);\n    }\n\n    public Fraction(double value) throws FractionConversionException {\n        this(value, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n    }\n\n    public int getNumerator() {\n        return this.numerator;\n    }\n\n    public int getDenominator() {\n        return this.denominator;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..3e52a149b 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,18 +172,26 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n+    private static final double DEFAULT_EPSILON = 1.0E-6;\n+\n+    private static final int DEFAULT_MAX_ITERATIONS = 100;\n+\n+    private static final int RADIX = 10;\n+\n+    private static final long serialVersionUID = 3698073679419233275L;\n+\n+    private final int numerator;\n+\n+    private final int denominator;\n+\n+    public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException {\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n+        long a0 = (long) FastMath.floor(r0);\n         if (a0 > overflow) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n         if (FastMath.abs(a0 - value) < epsilon) {\n             this.numerator = (int) a0;\n             this.denominator = 1;\n@@ -195,13 +203,11 @@ public class Fraction\n         long p1 = a0;\n         long q1 = 1;\n \n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n+        long p2;\n+        long q2;\n+        int n = 1;\n         boolean stop = false;\n         do {\n-            ++n;\n             double r1 = 1.0 / (r0 - a0);\n             long a1 = (long)FastMath.floor(r1);\n             p2 = (a1 * p1) + p0;\n@@ -211,7 +217,7 @@ public class Fraction\n             }\n \n             double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n+            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon) {\n                 p0 = p1;\n                 p1 = p2;\n                 q0 = q1;\n@@ -221,20 +227,33 @@ public class Fraction\n             } else {\n                 stop = true;\n             }\n-        } while (!stop);\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n+            n++;\n+        } while (!stop);\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n+        if (q2 < RADIX) {\n+            this.numerator = (int)p2;\n+            this.denominator = (int)q2;\n         } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            this.numerator = (int)p1;\n+            this.denominator = (int)q1;\n         }\n+    }\n+\n+    public Fraction(double value, int maxIterations) throws FractionConversionException {\n+        this(value, DEFAULT_EPSILON, maxIterations);\n+    }\n+\n+    public Fraction(double value) throws FractionConversionException {\n+        this(value, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);\n+    }\n+\n+    public int getNumerator() {\n+        return this.numerator;\n+    }\n \n+    public int getDenominator() {\n+        return this.denominator;\n     }\n \n     /**",
    "result_reason": "error: variable serialVersionUID is already defined in class Fraction",
    "test_result": "ERROR"
}