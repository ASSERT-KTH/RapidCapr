{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n                               double initial, double lowerBound, double upperBound,\n                               int maximumIterations) throws ConvergenceException,\n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                lowerBound, initial, upperBound);\n    }\n\n    double fa = function.value(lowerBound);\n    double fb = function.value(upperBound);\n\n    // check if the interval already brackets a root\n    if (fa * fb <= 0) {\n        // if it does, return the endpoints of the interval\n        return new double[] {lowerBound, upperBound};\n    }\n\n    double a = lowerBound;\n    double b = upperBound;\n    double mid = initial;\n    double fm = function.value(mid);\n\n    // check initial guess\n    if (fa * fm < 0) {\n        b = initial;\n        fb = fm;\n    } else {\n        a = initial;\n        fa = fm;\n    }\n\n    // perform bisection until interval brackets a root or maximum iterations exceeded\n    for (int i = 0; i < maximumIterations; i++) {\n        mid = (a + b) / 2.0;\n        fm = function.value(mid);\n\n        if (fa * fm < 0.0) {\n            b = mid;\n            fb = fm;\n        } else {\n            a = mid;\n            fa = fm;\n        }\n\n        if (b - a <= Math.max(Math.abs(a), Math.abs(b)) * MathUtils.EPSILON) {\n            return new double[] {a, b};\n        }\n    }\n\n    throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1},\" +\n            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5},\" +\n            \"final b value={6}, f(a)={7}, f(b)={8}\",\n            maximumIterations, maximumIterations, initial, lowerBound, upperBound,\n            a, b, fa, fb);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..e186a9154 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,72 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+public static double[] bracket(UnivariateRealFunction function,\n+                               double initial, double lowerBound, double upperBound,\n+                               int maximumIterations) throws ConvergenceException,\n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+                \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                lowerBound, initial, upperBound);\n+    }\n+\n+    double fa = function.value(lowerBound);\n+    double fb = function.value(upperBound);\n+\n+    // check if the interval already brackets a root\n+    if (fa * fb <= 0) {\n+        // if it does, return the endpoints of the interval\n+        return new double[] {lowerBound, upperBound};\n+    }\n+\n+    double a = lowerBound;\n+    double b = upperBound;\n+    double mid = initial;\n+    double fm = function.value(mid);\n+\n+    // check initial guess\n+    if (fa * fm < 0) {\n+        b = initial;\n+        fb = fm;\n+    } else {\n+        a = initial;\n+        fa = fm;\n+    }\n+\n+    // perform bisection until interval brackets a root or maximum iterations exceeded\n+    for (int i = 0; i < maximumIterations; i++) {\n+        mid = (a + b) / 2.0;\n+        fm = function.value(mid);\n+\n+        if (fa * fm < 0.0) {\n+            b = mid;\n+            fb = fm;\n+        } else {\n+            a = mid;\n+            fa = fm;\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+\n+        if (b - a <= Math.max(Math.abs(a), Math.abs(b)) * MathUtils.EPSILON) {\n+            return new double[] {a, b};\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n+    throw new ConvergenceException(\"number of iterations={0}, maximum iterations={1},\" +\n+            \"initial={2}, lower bound={3}, upper bound={4}, final a value={5},\" +\n+            \"final b value={6}, f(a)={7}, f(b)={8}\",\n+            maximumIterations, maximumIterations, initial, lowerBound, upperBound,\n+            a, b, fa, fb);\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}