{
    "patch": "/**\n* Checks if the node is either a single function or a do statement containing only a single statement.\n*/\nprivate boolean isOneExactlyFunctionOrDo(Node n) {\n    int type = n.getType();\n    if (type == Token.FUNCTION) {\n        return true;\n    } else if (type == Token.DO && n.hasOneChild()) {\n        Node child = n.getFirstChild();\n        int childType = child.getType();\n        // Either a function or non-empty statement\n        if (childType == Token.FUNCTION || !NodeUtil.isEmptyStatement(child)) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..137d28a7 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,23 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+/**\n+* Checks if the node is either a single function or a do statement containing only a single statement.\n+*/\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    int type = n.getType();\n+    if (type == Token.FUNCTION) {\n+        return true;\n+    } else if (type == Token.DO && n.hasOneChild()) {\n+        Node child = n.getFirstChild();\n+        int childType = child.getType();\n+        // Either a function or non-empty statement\n+        if (childType == Token.FUNCTION || !NodeUtil.isEmptyStatement(child)) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}