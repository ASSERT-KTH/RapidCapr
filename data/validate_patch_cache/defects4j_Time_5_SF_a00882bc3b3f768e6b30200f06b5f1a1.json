{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n\n    // handle years and months\n    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n        int totalMonths = getYears() * 12 + getMonths();\n        if (totalMonths != 0) {\n            int years = totalMonths / 12;\n            int months = totalMonths % 12;\n            result = result.withYears(years).withMonths(months);\n        }\n    }\n\n    // handle weeks and days\n    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n        int totalDays = getDays() + getWeeks() * 7;\n        if (totalDays != 0) {\n            int weeks = totalDays / 7;\n            int days = totalDays % 7;\n            result = result.withWeeks(weeks).withDays(days);\n        }\n    }\n\n    // handle hours, minutes, and seconds\n    if (type.isSupported(DurationFieldType.hours()) ||\n            type.isSupported(DurationFieldType.minutes()) ||\n            type.isSupported(DurationFieldType.seconds())) {\n        if (getHours() != 0) {\n            result = result.withHours(getHours());\n        }\n        if (getMinutes() != 0) {\n            result = result.withMinutes(getMinutes());\n        }\n        if (getSeconds() != 0) {\n            result = result.withSeconds(getSeconds());\n        }\n    }\n\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..d7400e7b 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,52 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+\n+    // handle years and months\n+    if (type.isSupported(DurationFieldType.years()) || type.isSupported(DurationFieldType.months())) {\n+        int totalMonths = getYears() * 12 + getMonths();\n+        if (totalMonths != 0) {\n+            int years = totalMonths / 12;\n+            int months = totalMonths % 12;\n+            result = result.withYears(years).withMonths(months);\n         }\n-        return result;\n     }\n \n+    // handle weeks and days\n+    if (type.isSupported(DurationFieldType.weeks()) || type.isSupported(DurationFieldType.days())) {\n+        int totalDays = getDays() + getWeeks() * 7;\n+        if (totalDays != 0) {\n+            int weeks = totalDays / 7;\n+            int days = totalDays % 7;\n+            result = result.withWeeks(weeks).withDays(days);\n+        }\n+    }\n+\n+    // handle hours, minutes, and seconds\n+    if (type.isSupported(DurationFieldType.hours()) ||\n+            type.isSupported(DurationFieldType.minutes()) ||\n+            type.isSupported(DurationFieldType.seconds())) {\n+        if (getHours() != 0) {\n+            result = result.withHours(getHours());\n+        }\n+        if (getMinutes() != 0) {\n+            result = result.withMinutes(getMinutes());\n+        }\n+        if (getSeconds() != 0) {\n+            result = result.withSeconds(getSeconds());\n+        }\n+    }\n+\n+    return result;\n+}\n+\n }",
    "result_reason": "java.lang.UnsupportedOperationException: Field is not supported",
    "test_result": "FAIL"
}