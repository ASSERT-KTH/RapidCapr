{
    "patch": "private VariableLiveness isVariableReadBeforeKill(\n        Node n, String variable, Set<Node> visited) {\n    VariableLiveness hasVar = VariableLiveness.MAYBE_LIVE;\n\n    // Detect infinite loop and terminate\n    if (visited.contains(n)) {\n        return hasVar;\n    }\n    visited.add(n);\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n            VariableLiveness state = isVariableReadBeforeKill(child, variable, visited);\n            // If a child has the variable read before being killed, return READ\n            if (state == VariableLiveness.READ) {\n                return VariableLiveness.READ;\n            } else if (state == VariableLiveness.KILL) {\n                hasVar = VariableLiveness.KILL;\n            } else {\n                // Has at least one child which reads the variable, doesn't guarantee\n                // the variable isn't killed, so just leave the state as MAYBE_LIVE\n                hasVar = VariableLiveness.MAYBE_LIVE;\n            }\n        }\n    }\n\n    visited.remove(n);\n\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n        if (NodeUtil.isLhs(n, n.getParent())) {\n            // The expression to which the assignment is made is evaluated before\n            // the RHS is evaluated (normal left to right evaluation) but the KILL\n            // occurs after the RHS is evaluated.\n            hasVar = VariableLiveness.KILL;\n        } else {\n            hasVar = VariableLiveness.READ;\n        }\n    }\n\n    return hasVar;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..cda52901 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,29 +320,46 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n+private VariableLiveness isVariableReadBeforeKill(\n+        Node n, String variable, Set<Node> visited) {\n+    VariableLiveness hasVar = VariableLiveness.MAYBE_LIVE;\n+\n+    // Detect infinite loop and terminate\n+    if (visited.contains(n)) {\n+        return hasVar;\n     }\n+    visited.add(n);\n \n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+            VariableLiveness state = isVariableReadBeforeKill(child, variable, visited);\n+            // If a child has the variable read before being killed, return READ\n+            if (state == VariableLiveness.READ) {\n+                return VariableLiveness.READ;\n+            } else if (state == VariableLiveness.KILL) {\n+                hasVar = VariableLiveness.KILL;\n+            } else {\n+                // Has at least one child which reads the variable, doesn't guarantee\n+                // the variable isn't killed, so just leave the state as MAYBE_LIVE\n+                hasVar = VariableLiveness.MAYBE_LIVE;\n+            }\n         }\n-      }\n     }\n-    return VariableLiveness.MAYBE_LIVE;\n-  }\n+\n+    visited.remove(n);\n+\n+    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+        if (NodeUtil.isLhs(n, n.getParent())) {\n+            // The expression to which the assignment is made is evaluated before\n+            // the RHS is evaluated (normal left to right evaluation) but the KILL\n+            // occurs after the RHS is evaluated.\n+            hasVar = VariableLiveness.KILL;\n+        } else {\n+            hasVar = VariableLiveness.READ;\n+        }\n+    }\n+\n+    return hasVar;\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}