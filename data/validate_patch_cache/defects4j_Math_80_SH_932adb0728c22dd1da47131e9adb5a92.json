{
    "patch": "int j = 4 * (n - 1) + pingPong;\nif (j >= work.length) { // Check if j is greater than the length of the work array\n    j = work.length - 1; // Set the value of j to the last index of the array\n} else if (j < pingPong) { // Check if j is lesser than pingPong\n    j = pingPong; // Set the value of j to pingPong\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\nindex 3fc328d8b..48f691835 100644\n--- a/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n+++ b/src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java\n@@ -1132,7 +1132,12 @@ public class EigenDecompositionImpl implements EigenDecomposition {\n     private boolean flipIfWarranted(final int n, final int step) {\n         if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {\n             // flip array\n-            int j = 4 * n - 1;\n+int j = 4 * (n - 1) + pingPong;\n+if (j >= work.length) { // Check if j is greater than the length of the work array\n+    j = work.length - 1; // Set the value of j to the last index of the array\n+} else if (j < pingPong) { // Check if j is lesser than pingPong\n+    j = pingPong; // Set the value of j to pingPong\n+}\n             for (int i = 0; i < j; i += 4) {\n                 for (int k = 0; k < 4; k += step) {\n                     final double tmp = work[i + k];",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}