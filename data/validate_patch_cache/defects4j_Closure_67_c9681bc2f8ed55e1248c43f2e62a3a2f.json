{
    "patch": "          ) {\n        // We want to exclude the assignment itself from the usage list\n        boolean isChainedProperty = n.getParent().getType() == Token.ASSIGN;\n        if (!isChainedProperty) {\n          Node objNode = n.getFirstChild();\n          isChainedProperty = objNode != null\n              && objNode.getType() == Token.GETPROP\n              && objNode.getFirstChild() != null\n              && objNode.getFirstChild().getNext() == null;\n        }\n        if (isChainedProperty) {\n          Node child = n.getSecondChild();\n          if (child.getType() == Token.STRING &&\n              child.getString().equals(\"prototype\")) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..60e5a57e 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,13 +310,31 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n           ) {\n         // We want to exclude the assignment itself from the usage list\n+        boolean isChainedProperty = n.getParent().getType() == Token.ASSIGN;\n+        if (!isChainedProperty) {\n+          Node objNode = n.getFirstChild();\n+          isChainedProperty = objNode != null\n+              && objNode.getType() == Token.GETPROP\n+              && objNode.getFirstChild() != null\n+              && objNode.getFirstChild().getNext() == null;\n+        }\n+        if (isChainedProperty) {\n+          Node child = n.getSecondChild();\n+          if (child.getType() == Token.STRING &&\n+              child.getString().equals(\"prototype\")) {\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n+    }\n+        // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}