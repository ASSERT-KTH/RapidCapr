{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        ZoneOffsetParserResolver resolver = new ZoneOffsetParserResolver(chrono);\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear, resolver, iResolverStyle);\n        int newPos = parser.parseInto(bucket, text, position);\n        Instant parsedInstant;\n        if (resolver.isResolved()) {\n            parsedInstant = resolver.resolveInstant();\n        } else {\n            parsedInstant = bucket.computeMillis();   \n        }\n        parsedInstant = parsedInstant.withChronology(bucket.getEffectiveChronology());\n \n        int offset = resolver.getOffset();\n        if (!instant.getZone().equals(resolver.getZone()) || offset != 0) {\n            parsedInstant = parsedInstant.plusMillis(offset);\n            instant.setZone(resolver.getZone());\n        } else {\n            instant.setChronology(bucket.getEffectiveChronology());\n        }\n\n        instant.setMillis(parsedInstant.toEpochMilli());\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..c58796b4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,27 +699,31 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n+        ZoneOffsetParserResolver resolver = new ZoneOffsetParserResolver(chrono);\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+                instantMillis, chrono, iLocale, iPivotYear, iDefaultYear, resolver, iResolverStyle);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        Instant parsedInstant;\n+        if (resolver.isResolved()) {\n+            parsedInstant = resolver.resolveInstant();\n+        } else {\n+            parsedInstant = bucket.computeMillis();   \n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        parsedInstant = parsedInstant.withChronology(bucket.getEffectiveChronology());\n+ \n+        int offset = resolver.getOffset();\n+        if (!instant.getZone().equals(resolver.getZone()) || offset != 0) {\n+            parsedInstant = parsedInstant.plusMillis(offset);\n+            instant.setZone(resolver.getZone());\n+        } else {\n+            instant.setChronology(bucket.getEffectiveChronology());\n         }\n+\n+        instant.setMillis(parsedInstant.toEpochMilli());\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}