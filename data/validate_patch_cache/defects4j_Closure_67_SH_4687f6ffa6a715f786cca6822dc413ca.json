{
    "patch": "          ) &&\n          // exclude cases where the property is set on 'module.exports.prototype' or similar\n          // because it implies module.exports is an object with a prototype property,\n          // which is rarely intended\n          n.getFirstChild().getFirstChild().getNext().getType() != Token.NAME\n      ) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..83d71be9 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,16 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) &&\n+          // exclude cases where the property is set on 'module.exports.prototype' or similar\n+          // because it implies module.exports is an object with a prototype property,\n+          // which is rarely intended\n+          n.getFirstChild().getFirstChild().getNext().getType() != Token.NAME\n+      ) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}