{
    "patch": "private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n  Iterator<Node> arguments = call.children().iterator();\n  arguments.next(); // skip the function name\n\n  Iterator<Node> parameters = functionType.getParameters().iterator();\n  int ordinal = 0;\n  Node parameter = null;\n  Node argument = null;\n  boolean hasVarArgs = functionType.isVarArgs();\n\n  while (arguments.hasNext() && parameters.hasNext()) {\n    argument = arguments.next();\n    parameter = parameters.next();\n    ordinal++;\n\n    validator.expectArgumentMatchesParameter(t, argument,\n        getJSType(argument), getJSType(parameter), call, ordinal);\n  }\n\n  // If we still have parameters, and this is not a var_args function\n  if (!hasVarArgs && parameters.hasNext()) {\n    for (int i = ordinal + 1; parameters.hasNext(); i++) {\n      parameter = parameters.next();\n      report(t, call, MISSING_ARGUMENTS,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          parameter.getString(), String.valueOf(i));\n    }\n  }\n\n  // If we still have arguments left and this is a varArgs function\n  if (hasVarArgs) {\n    if (arguments.hasNext()) {\n      // We have a varargs function and arguments\n      // are all placed in the parameter after this point\n      validator.expectArgumentMatchesParameter(t, null, null, functionType.getRestArgumentType(),\n          call, ++ordinal);\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n            functionType.getRestArgumentType(), call, ++ordinal);\n      }\n    } else {\n      // If this is a var-args function and there's at least one missing element\n      validator.expectArgumentMatchesParameter(t, null, null, functionType.getRestArgumentType(),\n          call, ++ordinal);\n    }\n  } else {\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..474a9e1d 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,38 +1396,65 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n-\n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+private void visitParameterList(NodeTraversal t, Node call, FunctionType functionType) {\n+  Iterator<Node> arguments = call.children().iterator();\n+  arguments.next(); // skip the function name\n+\n+  Iterator<Node> parameters = functionType.getParameters().iterator();\n+  int ordinal = 0;\n+  Node parameter = null;\n+  Node argument = null;\n+  boolean hasVarArgs = functionType.isVarArgs();\n+\n+  while (arguments.hasNext() && parameters.hasNext()) {\n+    argument = arguments.next();\n+    parameter = parameters.next();\n+    ordinal++;\n+\n+    validator.expectArgumentMatchesParameter(t, argument,\n+        getJSType(argument), getJSType(parameter), call, ordinal);\n+  }\n+\n+  // If we still have parameters, and this is not a var_args function\n+  if (!hasVarArgs && parameters.hasNext()) {\n+    for (int i = ordinal + 1; parameters.hasNext(); i++) {\n+      parameter = parameters.next();\n+      report(t, call, MISSING_ARGUMENTS,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          parameter.getString(), String.valueOf(i));\n     }\n+  }\n \n+  // If we still have arguments left and this is a varArgs function\n+  if (hasVarArgs) {\n+    if (arguments.hasNext()) {\n+      // We have a varargs function and arguments\n+      // are all placed in the parameter after this point\n+      validator.expectArgumentMatchesParameter(t, null, null, functionType.getRestArgumentType(),\n+          call, ++ordinal);\n+      while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        validator.expectArgumentMatchesParameter(t, argument, getJSType(argument),\n+            functionType.getRestArgumentType(), call, ++ordinal);\n+      }\n+    } else {\n+      // If this is a var-args function and there's at least one missing element\n+      validator.expectArgumentMatchesParameter(t, null, null, functionType.getRestArgumentType(),\n+          call, ++ordinal);\n+    }\n+  } else {\n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n+\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs),\n+          maxArgs != Integer.MAX_VALUE ? \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}