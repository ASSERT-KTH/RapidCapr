{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n            \t // handle supplementary characters using Unicode escape notation\n                int codePoint = Character.codePointAt(input, pos);\n                if (Character.isSupplementaryCodePoint(codePoint)) {\n                    out.write(\"\\\\u\");\n                    out.write(String.format(\"%04x\", codePoint));\n                    pos += Character.charCount(codePoint);\n                } else {\n                \t out.write(codePoint);\n                     pos++;\n                }\n            } else {\n                pos += consumed;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..1d3250b6 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -84,15 +84,18 @@ public abstract class CharSequenceTranslator {\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n-            }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+            \t // handle supplementary characters using Unicode escape notation\n+                int codePoint = Character.codePointAt(input, pos);\n+                if (Character.isSupplementaryCodePoint(codePoint)) {\n+                    out.write(\"\\\\u\");\n+                    out.write(String.format(\"%04x\", codePoint));\n+                    pos += Character.charCount(codePoint);\n+                } else {\n+                \t out.write(codePoint);\n+                     pos++;\n+                }\n+            } else {\n+                pos += consumed;\n             }\n         }\n     }",
    "result_reason": "junit.framework.AssertionFailedError: Supplementary character must be represented using a single escape expected:<&#144308;[]> but was:<&#144308;[&#57268;]>",
    "test_result": "FAIL"
}