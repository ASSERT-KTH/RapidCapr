{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match constraints on anonymous types.\n    if (!isAnonymousObjectType()) {\n      return;\n    }\n\n    // Handle the case where the constraint object is a record type.\n    //\n    // param constraintObj {{prop: (number|undefined)}}\n    // function f(constraintObj) {}\n    // f({});\n    //\n    // We want to modify the object literal to match the constraint, by\n    // taking any each property on the record and trying to match\n    // properties on this object.\n    if (constraintObj.isRecordType()) {\n      for (String prop : constraintObj.getOwnPropertyNames()) {\n        JSType propType = constraintObj.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = typeToInfer.getGreatestSubtype(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n            defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType oldType = getPropertyType(prop);\n            typeToInfer = oldType.getLeastSupertype(propType);\n            if (!typeToInfer.equals(oldType)) {\n              TypeWithLocation twl = new TypeWithLocation(typeToInfer, this.sourceName, this.getPropDeclaration(prop));\n              updateInferredProperty(prop, typeToInfer, twl);\n            }\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..cbe13532 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -553,7 +553,10 @@ class PrototypeObjectType extends ObjectType {\n \n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n-    // We only want to match contraints on anonymous types.\n+    // We only want to match constraints on anonymous types.\n+    if (!isAnonymousObjectType()) {\n+      return;\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //\n@@ -570,10 +573,16 @@ class PrototypeObjectType extends ObjectType {\n         if (!isPropertyTypeDeclared(prop)) {\n           JSType typeToInfer = propType;\n           if (!hasProperty(prop)) {\n-            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n-                .getLeastSupertype(propType);\n+            typeToInfer = typeToInfer.getGreatestSubtype(getNativeType(JSTypeNative.UNDEFINED_TYPE));\n+            defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType oldType = getPropertyType(prop);\n+            typeToInfer = oldType.getLeastSupertype(propType);\n+            if (!typeToInfer.equals(oldType)) {\n+              TypeWithLocation twl = new TypeWithLocation(typeToInfer, this.sourceName, this.getPropDeclaration(prop));\n+              updateInferredProperty(prop, typeToInfer, twl);\n+            }\n           }\n-          defineInferredProperty(prop, typeToInfer, null);\n         }\n       }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}