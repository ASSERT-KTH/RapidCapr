{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    // Don't traverse native functions.\n    if (n.isFunction() && NodeUtil.isNativeFunction.apply(n)) {\n      return false;\n    }\n\n    // Don't traverse functions inside methods with the 'nosideeffects' annotation.\n    if (n.isFunction() && NodeUtil.hasNosideeffectsAnnotation(t.getScope())) {\n      return false;\n    }\n\n    // Don't traverse empty functions.\n    if (n.isFunction() && !NodeUtil.functionHasSideEffects(n)) {\n      return false;\n    }\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo functionJsDoc = getFunctionJsDocInfo(n);\n      if (functionJsDoc != null &&\n          (functionJsDoc.isConstructor() ||\n           functionJsDoc.isInterface() ||\n           functionJsDoc.hasThisType() ||\n           functionJsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = parent.getLastChild();\n        String rhsSrc = getSourceCodeString(rhs);\n\n        // If the RHS of our assignment is a function, and the LHS is a getprop that ends in \".prototype\",\n        // then we don't want to traverse this function, because it is being lent to a prototype.\n        boolean prototypeLend =\n            rhs.getType() == Token.FUNCTION &&\n            lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\");\n\n        // If the RHS of our assignment is a function, and the LHS is a name or a getprop which has\n        // a computed name, then we don't want to traverse the function, because it's not a property.\n        boolean nonPropertyLend =\n            rhs.getType() == Token.FUNCTION &&\n            (lhs.getType() == Token.NAME ||\n             NodeUtil.isGet(lhs) && !NodeUtil.isValidPropertyName(lhs.getLastChild()));\n\n        // If the RHS of our assignment is a function, we don't want to traverse it if it is being passed\n        // as an argument to an extern function whose annotations say that it is being lent to\n        // the prototype of an object.\n        boolean externPrototypeLend =\n            rhs.getType() == Token.FUNCTION &&\n            isExternLendToPrototypeInvocation(parent.getParent(), t.getInput(), rhs);\n\n        if (prototypeLend || nonPropertyLend || externPrototypeLend) {\n          return false;\n        }\n      }\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = parent.getLastChild();\n\n      // Don't traverse functions that are immediately invoked after being created.\n      boolean iife =\n          n.isFunction() &&\n          rhs.getType() == Token.CALL &&\n          rhs.getFirstChild() == n;\n\n      // Don't traverse functions that are getting passed as arguments to other functions, unless\n      // they've been annotated '-require-externs'.\n      boolean externRequired =\n          n.isFunction() &&\n          parent.getParent().getType() == Token.EXPR_RESULT &&\n          rhs.getType() == Token.CALL &&\n          FunctionArgumentInjector.isRequireExternsCall(rhs.getLastChild());\n\n      if (iife || externRequired) {\n        return false;\n      }\n\n      Node rhsParent = rhs.getParent();\n      if (rhsParent != null &&\n          rhsParent.getType() == Token.CALL &&\n          rhs == rhsParent.getFirstChild() &&\n          rhsParent.getLastChild().isString()) {\n        String calleeName = rhsParent.getLastChild().getString();\n        if (NODE_REQUIRE.equals(calleeName) ||\n            NODE_REQUIRE_ALIAS.equals(calleeName)) {\n          return false;\n        }\n      }\n\n      if (NodeUtil.mayHaveSideEffects(parent.getLastChild(), t.getCompiler())) {\n        return true;\n      }\n\n      if (rhs.getType() == Token.FUNCTION) {\n        // If it's an assignment to a top-level variable, we want to traverse the function.\n        if (lhs.getType() == Token.NAME && !lhs.hasChildren()) {\n          return true;\n        }\n\n        // If it's an assignment to a property of an object, we want to traverse the function if\n        // all of them are top-level variables.\n        if (NodeUtil.isGet(lhs)) {\n          Node recv = lhs.getFirstChild();\n          if (recv.isName() && !recv.hasChildren()) {\n            return true;\n          } else if (recv.isGetProp()) {\n            do {\n              recv = recv.getFirstChild();\n            } while (recv.isGetProp());\n            return recv.isName() && !recv.hasChildren();\n          }\n        }\n      }\n\n      if (parent.getParent().getType() == Token.EXPR_RESULT) {\n        Symbol s = t.getScope().getVar(lhs.getString());\n        if (s == null ||\n            s.getDeclaringNode() == null ||\n            !s.getDeclaringNode().isFunction()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..971e0670 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,158 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    // Don't traverse native functions.\n+    if (n.isFunction() && NodeUtil.isNativeFunction.apply(n)) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions inside methods with the 'nosideeffects' annotation.\n+    if (n.isFunction() && NodeUtil.hasNosideeffectsAnnotation(t.getScope())) {\n+      return false;\n+    }\n+\n+    // Don't traverse empty functions.\n+    if (n.isFunction() && !NodeUtil.functionHasSideEffects(n)) {\n+      return false;\n+    }\n+\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo functionJsDoc = getFunctionJsDocInfo(n);\n+      if (functionJsDoc != null &&\n+          (functionJsDoc.isConstructor() ||\n+           functionJsDoc.isInterface() ||\n+           functionJsDoc.hasThisType() ||\n+           functionJsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK ||\n+            pType == Token.SCRIPT ||\n+            pType == Token.NAME ||\n+            pType == Token.ASSIGN ||\n+\n+            // object literal keys\n+            pType == Token.STRING ||\n+            pType == Token.NUMBER)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = parent.getLastChild();\n+        String rhsSrc = getSourceCodeString(rhs);\n+\n+        // If the RHS of our assignment is a function, and the LHS is a getprop that ends in \".prototype\",\n+        // then we don't want to traverse this function, because it is being lent to a prototype.\n+        boolean prototypeLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\");\n+\n+        // If the RHS of our assignment is a function, and the LHS is a name or a getprop which has\n+        // a computed name, then we don't want to traverse the function, because it's not a property.\n+        boolean nonPropertyLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            (lhs.getType() == Token.NAME ||\n+             NodeUtil.isGet(lhs) && !NodeUtil.isValidPropertyName(lhs.getLastChild()));\n+\n+        // If the RHS of our assignment is a function, we don't want to traverse it if it is being passed\n+        // as an argument to an extern function whose annotations say that it is being lent to\n+        // the prototype of an object.\n+        boolean externPrototypeLend =\n+            rhs.getType() == Token.FUNCTION &&\n+            isExternLendToPrototypeInvocation(parent.getParent(), t.getInput(), rhs);\n+\n+        if (prototypeLend || nonPropertyLend || externPrototypeLend) {\n+          return false;\n+        }\n+      }\n+    }\n+\n+    if (parent != null && parent.getType() == Token.ASSIGN) {\n+      Node lhs = parent.getFirstChild();\n+      Node rhs = parent.getLastChild();\n+\n+      // Don't traverse functions that are immediately invoked after being created.\n+      boolean iife =\n+          n.isFunction() &&\n+          rhs.getType() == Token.CALL &&\n+          rhs.getFirstChild() == n;\n+\n+      // Don't traverse functions that are getting passed as arguments to other functions, unless\n+      // they've been annotated '-require-externs'.\n+      boolean externRequired =\n+          n.isFunction() &&\n+          parent.getParent().getType() == Token.EXPR_RESULT &&\n+          rhs.getType() == Token.CALL &&\n+          FunctionArgumentInjector.isRequireExternsCall(rhs.getLastChild());\n+\n+      if (iife || externRequired) {\n+        return false;\n+      }\n+\n+      Node rhsParent = rhs.getParent();\n+      if (rhsParent != null &&\n+          rhsParent.getType() == Token.CALL &&\n+          rhs == rhsParent.getFirstChild() &&\n+          rhsParent.getLastChild().isString()) {\n+        String calleeName = rhsParent.getLastChild().getString();\n+        if (NODE_REQUIRE.equals(calleeName) ||\n+            NODE_REQUIRE_ALIAS.equals(calleeName)) {\n+          return false;\n+        }\n+      }\n+\n+      if (NodeUtil.mayHaveSideEffects(parent.getLastChild(), t.getCompiler())) {\n+        return true;\n+      }\n+\n+      if (rhs.getType() == Token.FUNCTION) {\n+        // If it's an assignment to a top-level variable, we want to traverse the function.\n+        if (lhs.getType() == Token.NAME && !lhs.hasChildren()) {\n+          return true;\n+        }\n+\n+        // If it's an assignment to a property of an object, we want to traverse the function if\n+        // all of them are top-level variables.\n+        if (NodeUtil.isGet(lhs)) {\n+          Node recv = lhs.getFirstChild();\n+          if (recv.isName() && !recv.hasChildren()) {\n+            return true;\n+          } else if (recv.isGetProp()) {\n+            do {\n+              recv = recv.getFirstChild();\n+            } while (recv.isGetProp());\n+            return recv.isName() && !recv.hasChildren();\n+          }\n+        }\n+      }\n+\n+      if (parent.getParent().getType() == Token.EXPR_RESULT) {\n+        Symbol s = t.getScope().getVar(lhs.getString());\n+        if (s == null ||\n+            s.getDeclaringNode() == null ||\n+            !s.getDeclaringNode().isFunction()) {\n+          return true;\n+        }\n+      }\n+\n+      return false;\n+    }\n+\n+    return true;\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}