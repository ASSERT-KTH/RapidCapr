{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction(),\n        \"Expected function, but got %s\", function);\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    ArrayList<Node> unusedArgs = Lists.newArrayList();\n    if (!modifyCallers) {\n      boolean removeUsedArgs = !compiler.getOptions().preserveDetailedSourceInfo;\n      int i = 0;\n      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n        Var var = fnScope.getVar(arg.getString());\n        if (!referenced.contains(var)) {\n          unusedArgs.add(arg);\n        } else if (removeUsedArgs) {\n          // Removing used parameters will change the length of 'arguments', so we cannot just iterate over\n          // the arguments list normally.\n          unusedArgs.add(arg);\n          Node argumentsRef = IR.name(NodeUtil.getFunctionArgumentsReference(function));\n          Node argumentsProp = IR.getprop(argumentsRef, IR.string(Integer.toString(i)));\n          ++i;\n          unusedArgs.add(argumentsProp);\n        } else {\n          i++;\n        }\n      }\n\n      // Remove unused args from the list\n      if (!unusedArgs.isEmpty()) {\n        Node lastUnused = unusedArgs.get(unusedArgs.size() - 1);\n        while (!unusedArgs.isEmpty() && unusedArgs.get(0).getJSDocInfo() != null) {\n          // Do not remove parameter if it has JSDoc.\n          unusedArgs.remove(0);\n        }\n        for (Node unused : unusedArgs) {\n          argList.removeChild(unused);\n          if (unused == lastUnused) {\n            break;\n          }\n        }\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..c96ca47e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,67 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction(),\n+        \"Expected function, but got %s\", function);\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    ArrayList<Node> unusedArgs = Lists.newArrayList();\n+    if (!modifyCallers) {\n+      boolean removeUsedArgs = !compiler.getOptions().preserveDetailedSourceInfo;\n+      int i = 0;\n+      for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+        Var var = fnScope.getVar(arg.getString());\n+        if (!referenced.contains(var)) {\n+          unusedArgs.add(arg);\n+        } else if (removeUsedArgs) {\n+          // Removing used parameters will change the length of 'arguments', so we cannot just iterate over\n+          // the arguments list normally.\n+          unusedArgs.add(arg);\n+          Node argumentsRef = IR.name(NodeUtil.getFunctionArgumentsReference(function));\n+          Node argumentsProp = IR.getprop(argumentsRef, IR.string(Integer.toString(i)));\n+          ++i;\n+          unusedArgs.add(argumentsProp);\n+        } else {\n+          i++;\n+        }\n+      }\n+\n+      // Remove unused args from the list\n+      if (!unusedArgs.isEmpty()) {\n+        Node lastUnused = unusedArgs.get(unusedArgs.size() - 1);\n+        while (!unusedArgs.isEmpty() && unusedArgs.get(0).getJSDocInfo() != null) {\n+          // Do not remove parameter if it has JSDoc.\n+          unusedArgs.remove(0);\n+        }\n+        for (Node unused : unusedArgs) {\n+          argList.removeChild(unused);\n+          if (unused == lastUnused) {\n+            break;\n+          }\n+        }\n+        compiler.reportCodeChange();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}