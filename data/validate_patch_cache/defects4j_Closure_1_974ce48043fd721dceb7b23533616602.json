{
    "patch": "    Preconditions.checkState(cfgNode.isFunction());\n    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return false;\n    }\n    // Strip unreferenced args off the end of the function declaration.\n    Node argList = cfgNode.getFirstChild().getNext();\n    boolean hasChanged = false;\n    while (argList.getLastChild() != null && argList.getLastChild().isParamList()) {\n      Node lastArg = argList.getLastChild();\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        argList.removeChild(lastArg);\n        hasChanged = true;\n      } else {\n        break;\n      }\n    }\n    return hasChanged;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..921fc648 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,25 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Preconditions.checkState(cfgNode.isFunction());\n+    if (NodeUtil.isGetOrSetKey(cfgNode.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return false;\n+    }\n+    // Strip unreferenced args off the end of the function declaration.\n+    Node argList = cfgNode.getFirstChild().getNext();\n+    boolean hasChanged = false;\n+    while (argList.getLastChild() != null && argList.getLastChild().isParamList()) {\n+      Node lastArg = argList.getLastChild();\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        argList.removeChild(lastArg);\n+        hasChanged = true;\n+      } else {\n+        break;\n+      }\n+    }\n+    return hasChanged;\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}