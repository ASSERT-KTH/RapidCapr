{
    "patch": "protected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    options.setCodingConvention(new ClosureCodingConvention());\n\n    CompilationLevel level;\n    try {\n        level = CompilationLevel.valueOf(flags.compilation_level.name());\n    } catch (IllegalArgumentException e) {\n        throw new RuntimeException(\"Invalid compilation level: \" + flags.compilation_level.name(), e);\n    }\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    WarningLevel wLevel;\n    try {\n        wLevel = WarningLevel.valueOf(flags.warning_level.name());\n    } catch (IllegalArgumentException e) {\n        throw new RuntimeException(\"Invalid warning level: \" + flags.warning_level.name(), e);\n    }\n    wLevel.setOptionsForWarningLevel(options);\n\n    if (flags != null) {\n        if (flags.formatting != null) {\n            for (FormattingOption formattingOption : flags.formatting) {\n                formattingOption.applyToOptions(options);\n            }\n        }\n        options.closurePass = flags.process_closure_primitives;\n    } else {\n        options.closurePass = false;\n    }\n\n    initOptionsFromFlags(options);\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..29616f05 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,44 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n+\n+    CompilationLevel level;\n+    try {\n+        level = CompilationLevel.valueOf(flags.compilation_level.name());\n+    } catch (IllegalArgumentException e) {\n+        throw new RuntimeException(\"Invalid compilation level: \" + flags.compilation_level.name(), e);\n+    }\n     level.setOptionsForCompilationLevel(options);\n+\n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+    WarningLevel wLevel;\n+    try {\n+        wLevel = WarningLevel.valueOf(flags.warning_level.name());\n+    } catch (IllegalArgumentException e) {\n+        throw new RuntimeException(\"Invalid warning level: \" + flags.warning_level.name(), e);\n     }\n-    if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+    wLevel.setOptionsForWarningLevel(options);\n+\n+    if (flags != null) {\n+        if (flags.formatting != null) {\n+            for (FormattingOption formattingOption : flags.formatting) {\n+                formattingOption.applyToOptions(options);\n+            }\n+        }\n+        options.closurePass = flags.process_closure_primitives;\n+    } else {\n+        options.closurePass = false;\n     }\n \n     initOptionsFromFlags(options);\n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}