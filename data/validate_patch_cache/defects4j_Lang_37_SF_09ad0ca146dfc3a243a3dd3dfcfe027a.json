{
    "patch": "public static <T> T[] addAll(T[] array1, T... array2) {\n    if (array1 == null) {\n        return clone(array2);\n    } else if (array2 == null) {\n        return clone(array1);\n    }\n\n    final Class<?> type1 = array1.getClass().getComponentType();\n    final Class<?> type2 = array2.getClass().getComponentType();\n\n    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n        if (!type1.isPrimitive() && !type2.isPrimitive()) {\n            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n        }\n        T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n        for (int i = 0; i < array2.length; i++) {\n            joinedArray[i + array1.length] = (T) convertPrimitiveToObject(array2[i]);\n        }\n        return joinedArray;\n    }\n\n    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n\n    return joinedArray;\n}\n\nprivate static Object convertPrimitiveToObject(Object object) {\n    if (object instanceof Boolean) return (Boolean) object;\n    if (object instanceof Character) return (Character) object;\n    if (object instanceof Byte) return (Byte) object;\n    if (object instanceof Short) return (Short) object;\n    if (object instanceof Integer) return (Integer) object;\n    if (object instanceof Long) return (Long) object;\n    if (object instanceof Float) return (Float) object;\n    if (object instanceof Double) return (Double) object;\n    throw new IllegalArgumentException(\"Unknown primitive type: \" + object.getClass().getName());\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java\nindex 889497e9..4dcac8a4 100644\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n@@ -2950,20 +2950,47 @@ public class ArrayUtils {\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public static <T> T[] addAll(T[] array1, T... array2) {\n-        if (array1 == null) {\n-            return clone(array2);\n-        } else if (array2 == null) {\n-            return clone(array1);\n+public static <T> T[] addAll(T[] array1, T... array2) {\n+    if (array1 == null) {\n+        return clone(array2);\n+    } else if (array2 == null) {\n+        return clone(array1);\n+    }\n+\n+    final Class<?> type1 = array1.getClass().getComponentType();\n+    final Class<?> type2 = array2.getClass().getComponentType();\n+\n+    if (!type1.isAssignableFrom(type2) && !type2.isAssignableFrom(type1)) {\n+        if (!type1.isPrimitive() && !type2.isPrimitive()) {\n+            throw new IllegalArgumentException(\"Cannot store \" + type2.getName() + \" in an array of \" + type1.getName());\n         }\n-        final Class<?> type1 = array1.getClass().getComponentType();\n-        T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+        T[] joinedArray = (T[]) Array.newInstance(Object.class, array1.length + array2.length);\n         System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            // Check if problem is incompatible types\n+        for (int i = 0; i < array2.length; i++) {\n+            joinedArray[i + array1.length] = (T) convertPrimitiveToObject(array2[i]);\n+        }\n         return joinedArray;\n     }\n \n+    T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);\n+    System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+    System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+\n+    return joinedArray;\n+}\n+\n+private static Object convertPrimitiveToObject(Object object) {\n+    if (object instanceof Boolean) return (Boolean) object;\n+    if (object instanceof Character) return (Character) object;\n+    if (object instanceof Byte) return (Byte) object;\n+    if (object instanceof Short) return (Short) object;\n+    if (object instanceof Integer) return (Integer) object;\n+    if (object instanceof Long) return (Long) object;\n+    if (object instanceof Float) return (Float) object;\n+    if (object instanceof Double) return (Double) object;\n+    throw new IllegalArgumentException(\"Unknown primitive type: \" + object.getClass().getName());\n+}\n+\n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n      * <p>The new array contains all of the element of <code>array1</code> followed",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}