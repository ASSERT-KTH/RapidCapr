{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n)) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else if (NodeUtil.isExpressionNode(n)) {\n        for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n          if (isVariableReadBeforeKill(child, variable) != VariableLiveness.MAYBE_LIVE) {\n            return VariableLiveness.READ;\n          }\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..5855ce72 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -323,23 +323,17 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n+      if (NodeUtil.isLhs(n)) {\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n         return VariableLiveness.KILL;\n-      } else {\n-        return VariableLiveness.READ;\n-      }\n-    }\n-\n-    // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n+      } else if (NodeUtil.isExpressionNode(n)) {\n+        for (Node child = n.getFirstChild();\n+            child != null; child = child.getNext()) {\n+          if (isVariableReadBeforeKill(child, variable) != VariableLiveness.MAYBE_LIVE) {\n+            return VariableLiveness.READ;\n+          }\n         }\n       }\n     }",
    "result_reason": "error: method isLhs in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}