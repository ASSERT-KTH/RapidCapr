{
    "patch": "    if (result != null) {\n      return result;\n    } else if (this.isObject() && that.isObject()) {\n      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n      return getNativeType(JSTypeNative.NO_TYPE);\n    }\n  }\n  \n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  @Override\n  public boolean isStructurallyAssignableTo(JSType that) {\n    return UnionType.isUnionAssignableTo(this, that);\n  }\n\n  /**\n   * Returns true if all of the types in this union are structurally equal to\n   * at least one type in {@code that}.\n   */\n  public boolean isClearlyAssignableTo(JSType that) {\n    return UnionType.isUnionClearlyAssignableTo(this, that);\n  }\n\n  /**\n   * Returns true if a type in this union is assignable to a type in {@code that}.\n   */\n  public boolean isAssignableToOrInheritsFrom(JSType that) {\n    return UnionType.isUnionSubtype(this, that);\n  }\n\n  private boolean mayContainType(JSType that) {\n    if (that.isBottom()) {\n      return true;\n    }\n    if (that.isTop()) {\n      return false;\n    }\n    for (JSType alternate : alternates) {\n      if (alternate.isSubtype(that)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  @Override\n  void collectTypeMarkers(Set<TypeVar> types) {\n    for (JSType alternate : alternates) {\n      alternate.collectTypeMarkers(types);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..15fbc403 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -296,6 +296,90 @@ public class UnionType extends JSType {\n       return getNativeType(JSTypeNative.NO_TYPE);\n     }\n   }\n+  \n+  /**\n+   * Two union types are equal if they have the same number of alternates\n+   * and all alternates are equal.\n+   */\n+  @Override\n+  public boolean equals(Object object) {\n+    if (object instanceof UnionType) {\n+      UnionType that = (UnionType) object;\n+      return alternates.equals(that.alternates);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return alternates.hashCode();\n+  }\n+\n+  @Override\n+  public boolean isUnionType() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isObject() {\n+    for (JSType alternate : alternates) {\n+      if (!alternate.isObject()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean isStructurallyAssignableTo(JSType that) {\n+    return UnionType.isUnionAssignableTo(this, that);\n+  }\n+\n+  /**\n+   * Returns true if all of the types in this union are structurally equal to\n+   * at least one type in {@code that}.\n+   */\n+  public boolean isClearlyAssignableTo(JSType that) {\n+    return UnionType.isUnionClearlyAssignableTo(this, that);\n+  }\n+\n+  /**\n+   * Returns true if a type in this union is assignable to a type in {@code that}.\n+   */\n+  public boolean isAssignableToOrInheritsFrom(JSType that) {\n+    return UnionType.isUnionSubtype(this, that);\n+  }\n+\n+  private boolean mayContainType(JSType that) {\n+    if (that.isBottom()) {\n+      return true;\n+    }\n+    if (that.isTop()) {\n+      return false;\n+    }\n+    for (JSType alternate : alternates) {\n+      if (alternate.isSubtype(that)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  void collectTypeMarkers(Set<TypeVar> types) {\n+    for (JSType alternate : alternates) {\n+      alternate.collectTypeMarkers(types);\n+    }\n+  }\n+}\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+  }\n \n   /**\n    * Two union types are equal if they have the same number of alternates",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}