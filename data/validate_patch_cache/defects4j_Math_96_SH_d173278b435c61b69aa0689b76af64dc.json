{
    "patch": "if (other instanceof Complex) {\n    double otherReal = ((Complex) other).getReal();\n    double otherImaginary = ((Complex) other).getImaginary();\n    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(otherReal) || Double.isNaN(otherImaginary)) {\n        ret = this.isNaN() && ((Complex) other).isNaN();\n    } else if (real == otherReal && imaginary == otherImaginary) {\n        ret = true;\n    } else {\n        // Check for numerical equality within a small tolerance.\n        final double tol = 1e-15;\n        ret = Math.abs(real - otherReal) <= tol && Math.abs(imaginary - otherImaginary) <= tol;\n    }\n} else {\n    ret = false;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..5a25dfe1e 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,21 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+if (other instanceof Complex) {\n+    double otherReal = ((Complex) other).getReal();\n+    double otherImaginary = ((Complex) other).getImaginary();\n+    if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(otherReal) || Double.isNaN(otherImaginary)) {\n+        ret = this.isNaN() && ((Complex) other).isNaN();\n+    } else if (real == otherReal && imaginary == otherImaginary) {\n+        ret = true;\n+    } else {\n+        // Check for numerical equality within a small tolerance.\n+        final double tol = 1e-15;\n+        ret = Math.abs(real - otherReal) <= tol && Math.abs(imaginary - otherImaginary) <= tol;\n+    }\n+} else {\n+    ret = false;\n+}\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}