{
    "patch": "// sort savedFields in order of increasing duration\nfor (int i = 0; i < count; i++) {\n    int next = i;\n    for (int j = i + 1; j < count; j++) {\n        if (compare(savedFields[j], savedFields[next]) < 0) {\n            next = j;\n        }\n    }\n    if (i != next) {\n        SavedField temp = savedFields[i];\n        savedFields[i] = savedFields[next];\n        savedFields[next] = temp;\n    }\n}\n\nlong millis = iMillis;\nfor (int i = 0; i < count; i++) {\n    try {\n        millis = savedFields[i].set(millis, resetFields);\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    } catch (RuntimeException re) {\n        if (text != null) {\n            throw new IllegalArgumentException(\n                \"Cannot parse \\\"\" + text + \"\\\": \" + re.getMessage(), re);\n        }\n        throw re;\n    }\n}\n\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    int offset = iZone.getOffsetFromLocal(millis);\n    millis -= offset;\n    if (offset != iZone.getOffset(millis)) {\n        String message =\n            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}\nreturn millis;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..4a77bcc3 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,54 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+// sort savedFields in order of increasing duration\n+for (int i = 0; i < count; i++) {\n+    int next = i;\n+    for (int j = i + 1; j < count; j++) {\n+        if (compare(savedFields[j], savedFields[next]) < 0) {\n+            next = j;\n+        }\n+    }\n+    if (i != next) {\n+        SavedField temp = savedFields[i];\n+        savedFields[i] = savedFields[next];\n+        savedFields[next] = temp;\n+    }\n+}\n+\n+long millis = iMillis;\n+for (int i = 0; i < count; i++) {\n+    try {\n+        millis = savedFields[i].set(millis, resetFields);\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    } catch (RuntimeException re) {\n+        if (text != null) {\n+            throw new IllegalArgumentException(\n+                \"Cannot parse \\\"\" + text + \"\\\": \" + re.getMessage(), re);\n+        }\n+        throw re;\n+    }\n+}\n+\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    int offset = iZone.getOffsetFromLocal(millis);\n+    millis -= offset;\n+    if (offset != iZone.getOffset(millis)) {\n+        String message =\n+            \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n+return millis;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}