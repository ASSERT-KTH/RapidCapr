{
    "patch": "  private boolean isDirective(Node n) {\n    if (n == null) return false;\n\n    int nType = n.getType();\n    if(nType != Token.EXPR_RESULT) return false;\n    Node firstChild = n.getFirstChild();\n    if(!firstChild.isString()) return false;\n    String stringValue = firstChild.getString();\n    return ALLOWED_DIRECTIVES.contains(stringValue);\n  }\n\n  @Override\n  Node processForInLoop(ForInLoop loopNode) {\n\n    AstNode iteratedObject = loopNode.getIteratedObject();\n    if (!iteratedObject.isFunctionCall() &&\n        !iteratedObject.getType().equals(Token.NAME)) {\n      errorReporter.warning(\n          \"For..in statements with non-iterable right hand sides are not supported\", sourceName,\n          iteratedObject.getLineno(), \"\", 0);\n      return newNode(Token.EMPTY);\n    }\n\n    Node lhs = transform(loopNode.getIterator());\n    Node rhs = transform(iteratedObject);\n\n    if (iteratedObject.getType() == Token.NAME) {\n      // Rewrite the source to a function call:\n      rhs = newNode(\n          Token.CALL,\n          newNode(Token.NAME, \"Object\", iteratedObject.getLineno()),\n          rhs);\n    }\n\n    Node body = transformBlock(loopNode.getBody());\n\n    Node iteratedObjectNode = newNode(Token.FOR_OF, lhs, rhs, body);\n    iteratedObjectNode.putProp(Node.FOR_OF, Boolean.TRUE);\n    Node replacement = null;\n\n    Node parent = loopNode.getParent();\n    if (parent == null) {\n      parent = loopNode.getGrandparent();\n      replacement = iteratedObjectNode;\n    }\n    parent.replaceChild(loopNode, iteratedObjectNode);\n\n    if (replacement != null) {\n      return replacement;\n    }\n    return iteratedObjectNode;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..53fb1051 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -472,107 +472,58 @@ class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+  private boolean isDirective(Node n) {\n+    if (n == null) return false;\n+\n+    int nType = n.getType();\n+    if(nType != Token.EXPR_RESULT) return false;\n+    Node firstChild = n.getFirstChild();\n+    if(!firstChild.isString()) return false;\n+    String stringValue = firstChild.getString();\n+    return ALLOWED_DIRECTIVES.contains(stringValue);\n+  }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  Node processForInLoop(ForInLoop loopNode) {\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+    AstNode iteratedObject = loopNode.getIteratedObject();\n+    if (!iteratedObject.isFunctionCall() &&\n+        !iteratedObject.getType().equals(Token.NAME)) {\n+      errorReporter.warning(\n+          \"For..in statements with non-iterable right hand sides are not supported\", sourceName,\n+          iteratedObject.getLineno(), \"\", 0);\n+      return newNode(Token.EMPTY);\n     }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+    Node lhs = transform(loopNode.getIterator());\n+    Node rhs = transform(iteratedObject);\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+    if (iteratedObject.getType() == Token.NAME) {\n+      // Rewrite the source to a function call:\n+      rhs = newNode(\n+          Token.CALL,\n+          newNode(Token.NAME, \"Object\", iteratedObject.getLineno()),\n+          rhs);\n     }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+    Node body = transformBlock(loopNode.getBody());\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+    Node iteratedObjectNode = newNode(Token.FOR_OF, lhs, rhs, body);\n+    iteratedObjectNode.putProp(Node.FOR_OF, Boolean.TRUE);\n+    Node replacement = null;\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+    Node parent = loopNode.getParent();\n+    if (parent == null) {\n+      parent = loopNode.getGrandparent();\n+      replacement = iteratedObjectNode;\n     }\n+    parent.replaceChild(loopNode, iteratedObjectNode);\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+    if (replacement != null) {\n+      return replacement;\n     }\n+    return iteratedObjectNode;\n+  }\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}