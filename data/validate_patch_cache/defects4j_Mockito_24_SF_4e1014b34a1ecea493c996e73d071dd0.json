{
    "patch": "public Object answer(InvocationOnMock invocation) {\n    if (methodsGuru.isToString(invocation.getMethod())) {\n        Object mock = invocation.getMock();\n        MockName name = mockUtil.getMockName(mock);\n        if (name.isDefault()) {\n            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n        } else {\n            return name.toString();\n        }\n    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n        // Only for compareTo() method by the Comparable interface\n        Object[] args = invocation.getArguments();\n        if (args.length == 1 && args[0] == invocation.getMock()) {\n            return 0;\n        } else {\n            Object mock = invocation.getMock();\n            Object other = args[0];\n            if (mock == null) {\n                return -1;\n            }\n            if (other == null) {\n                return 1;\n            }\n            if (mock.getClass() != other.getClass()) {\n                throw new ClassCastException(\"Cannot compare \" + mock.getClass() + \" with \" + other.getClass());\n            }\n            return System.identityHashCode(mock) - System.identityHashCode(other);\n        }\n    } else {\n        Class<?> returnType = invocation.getMethod().getReturnType();\n        return returnValueFor(returnType);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\nindex 4c00f50b1..904f0aa6a 100644\n--- a/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n+++ b/src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java\n@@ -60,25 +60,39 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n     /* (non-Javadoc)\n      * @see org.mockito.stubbing.Answer#answer(org.mockito.invocation.InvocationOnMock)\n      */\n-    public Object answer(InvocationOnMock invocation) {\n-        if (methodsGuru.isToString(invocation.getMethod())) {\n+public Object answer(InvocationOnMock invocation) {\n+    if (methodsGuru.isToString(invocation.getMethod())) {\n+        Object mock = invocation.getMock();\n+        MockName name = mockUtil.getMockName(mock);\n+        if (name.isDefault()) {\n+            return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n+        } else {\n+            return name.toString();\n+        }\n+    } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n+        // Only for compareTo() method by the Comparable interface\n+        Object[] args = invocation.getArguments();\n+        if (args.length == 1 && args[0] == invocation.getMock()) {\n+            return 0;\n+        } else {\n             Object mock = invocation.getMock();\n-            MockName name = mockUtil.getMockName(mock);\n-            if (name.isDefault()) {\n-                return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode();\n-            } else {\n-                return name.toString();\n+            Object other = args[0];\n+            if (mock == null) {\n+                return -1;\n+            }\n+            if (other == null) {\n+                return 1;\n+            }\n+            if (mock.getClass() != other.getClass()) {\n+                throw new ClassCastException(\"Cannot compare \" + mock.getClass() + \" with \" + other.getClass());\n             }\n-        } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) {\n-            //see issue 184.\n-            //mocks by default should return 0 if references are the same, otherwise some other value because they are not the same. Hence we return 1 (anything but 0 is good).\n-            //Only for compareTo() method by the Comparable interface\n-            return 1;\n+            return System.identityHashCode(mock) - System.identityHashCode(other);\n         }\n-        \n+    } else {\n         Class<?> returnType = invocation.getMethod().getReturnType();\n         return returnValueFor(returnType);\n     }\n+}\n     \n     Object returnValueFor(Class<?> type) {\n         if (Primitives.isPrimitiveOrWrapper(type)) {\n@@ -120,4 +134,4 @@ public class ReturnsEmptyValues implements Answer<Object>, Serializable {\n         return null;\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "result_reason": "java.lang.ClassCastException: Cannot compare class $java.util.Date$$EnhancerByMockitoWithCGLIB$$4125aa0f with class java.util.Date",
    "test_result": "FAIL"
}