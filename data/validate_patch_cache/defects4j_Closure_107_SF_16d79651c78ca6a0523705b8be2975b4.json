{
    "patch": "import com.google.javascript.jscomp.CompilationLevel;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.WarningLevel;\nimport com.google.javascript.jscomp.XtbMessageBundle;\nimport com.google.javascript.jscomp.CompilerOptions.LanguageMode;\nimport com.google.javascript.jscomp.jsahead.DependencyOptions;\nimport com.google.javascript.jscomp.xtb.EmptyMessageBundle;\nimport com.google.javascript.jscomp.xtb.MessageBundle;\nimport com.google.javascript.jscomp.xtb.XtbMessageBundle;\n\nimport java.io.FileInputStream;\nimport java.io.IOException;\n\nprotected CompilerOptions createOptions() {\n    CompilerOptions options = new CompilerOptions();\n    if (flags.processJqueryPrimitives) {\n        options.setCodingConvention(new JqueryCodingConvention());\n    } else {\n        options.setCodingConvention(new ClosureCodingConvention());\n    }\n\n    options.setExtraAnnotationNames(flags.extraAnnotationName);\n\n    CompilationLevel level = flags.compilationLevel;\n    level.setOptionsForCompilationLevel(options);\n\n    if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n    }\n\n    if (flags.useTypesForOptimization) {\n        level.setTypeBasedOptimizationOptions(options);\n    }\n\n    if (flags.generateExports) {\n        options.setGenerateExports(flags.generateExports);\n    }\n\n    WarningLevel wLevel = flags.warningLevel;\n    wLevel.setOptionsForWarningLevel(options);\n    for (FormattingOption formattingOption : flags.formatting) {\n        formattingOption.applyToOptions(options);\n    }\n\n    options.setClosurePass(flags.processClosurePrimitives);\n\n    options.setJqueryPass(level == CompilationLevel.ADVANCED_OPTIMIZATIONS\n            && flags.processJqueryPrimitives);\n\n    options.setAngularPass(flags.angularPass);\n\n    if (!flags.translationsFile.isEmpty()) {\n        try {\n            options.setMessageBundle(new XtbMessageBundle(\n                    new FileInputStream(flags.translationsFile),\n                    flags.translationsProject));\n        } catch (IOException e) {\n            throw new RuntimeException(\"Reading XTB file\", e);\n        }\n    } else if (level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n        // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n        // translations file, they might reasonably try to write their own\n        // implementation of goog.getMsg that makes the substitution at\n        // run-time.\n        //\n        // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n        // so we might as well inline it. But shut off the i18n warnings,\n        // because the user didn't really ask for i18n.\n        options.setMessageBundle(new EmptyMessageBundle());\n    }\n\n    options.setLanguageIn(LanguageMode.ECMASCRIPT_2017);\n    options.setLanguageOut(LanguageMode.ECMASCRIPT_2017);\n\n    if (!flags.moduleOutputPath.isEmpty()) {\n        DependencyOptions depOptions = new DependencyOptions();\n        depOptions.setDependencySorting(true);\n        options.setDependencyOptions(depOptions);\n        options.setModuleResolutionMode(CompilerOptions.ResolutionMode.BROWSER_WITH_TRANSFORMED_PREFIXES);\n    } else {\n        options.setModuleResolutionMode(CompilerOptions.ResolutionMode.BROWSER);\n    }\n\n    return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..b86e02f8 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -803,12 +803,25 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n+import com.google.javascript.jscomp.CompilationLevel;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.WarningLevel;\n+import com.google.javascript.jscomp.XtbMessageBundle;\n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n+import com.google.javascript.jscomp.jsahead.DependencyOptions;\n+import com.google.javascript.jscomp.xtb.EmptyMessageBundle;\n+import com.google.javascript.jscomp.xtb.MessageBundle;\n+import com.google.javascript.jscomp.xtb.XtbMessageBundle;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+protected CompilerOptions createOptions() {\n     CompilerOptions options = new CompilerOptions();\n     if (flags.processJqueryPrimitives) {\n-      options.setCodingConvention(new JqueryCodingConvention());\n+        options.setCodingConvention(new JqueryCodingConvention());\n     } else {\n-      options.setCodingConvention(new ClosureCodingConvention());\n+        options.setCodingConvention(new ClosureCodingConvention());\n     }\n \n     options.setExtraAnnotationNames(flags.extraAnnotationName);\n@@ -817,52 +830,64 @@ public class CommandLineRunner extends\n     level.setOptionsForCompilationLevel(options);\n \n     if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+        level.setDebugOptionsForCompilationLevel(options);\n     }\n \n     if (flags.useTypesForOptimization) {\n-      level.setTypeBasedOptimizationOptions(options);\n+        level.setTypeBasedOptimizationOptions(options);\n     }\n \n     if (flags.generateExports) {\n-      options.setGenerateExports(flags.generateExports);\n+        options.setGenerateExports(flags.generateExports);\n     }\n \n     WarningLevel wLevel = flags.warningLevel;\n     wLevel.setOptionsForWarningLevel(options);\n     for (FormattingOption formattingOption : flags.formatting) {\n-      formattingOption.applyToOptions(options);\n+        formattingOption.applyToOptions(options);\n     }\n \n-    options.closurePass = flags.processClosurePrimitives;\n+    options.setClosurePass(flags.processClosurePrimitives);\n \n-    options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&\n-        flags.processJqueryPrimitives;\n+    options.setJqueryPass(level == CompilationLevel.ADVANCED_OPTIMIZATIONS\n+            && flags.processJqueryPrimitives);\n \n-    options.angularPass = flags.angularPass;\n+    options.setAngularPass(flags.angularPass);\n \n     if (!flags.translationsFile.isEmpty()) {\n-      try {\n-        options.messageBundle = new XtbMessageBundle(\n-            new FileInputStream(flags.translationsFile),\n-            flags.translationsProject);\n-      } catch (IOException e) {\n-        throw new RuntimeException(\"Reading XTB file\", e);\n-      }\n-    } else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n-      // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n-      // translations file, they might reasonably try to write their own\n-      // implementation of goog.getMsg that makes the substitution at\n-      // run-time.\n-      //\n-      // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n-      // so we might as well inline it. But shut off the i18n warnings,\n-      // because the user didn't really ask for i18n.\n-      options.messageBundle = new EmptyMessageBundle();\n+        try {\n+            options.setMessageBundle(new XtbMessageBundle(\n+                    new FileInputStream(flags.translationsFile),\n+                    flags.translationsProject));\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Reading XTB file\", e);\n+        }\n+    } else if (level != CompilationLevel.ADVANCED_OPTIMIZATIONS) {\n+        // In SIMPLE or WHITESPACE mode, if the user hasn't specified a\n+        // translations file, they might reasonably try to write their own\n+        // implementation of goog.getMsg that makes the substitution at\n+        // run-time.\n+        //\n+        // In ADVANCED mode, goog.getMsg is going to be renamed anyway,\n+        // so we might as well inline it. But shut off the i18n warnings,\n+        // because the user didn't really ask for i18n.\n+        options.setMessageBundle(new EmptyMessageBundle());\n+    }\n+\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT_2017);\n+    options.setLanguageOut(LanguageMode.ECMASCRIPT_2017);\n+\n+    if (!flags.moduleOutputPath.isEmpty()) {\n+        DependencyOptions depOptions = new DependencyOptions();\n+        depOptions.setDependencySorting(true);\n+        options.setDependencyOptions(depOptions);\n+        options.setModuleResolutionMode(CompilerOptions.ResolutionMode.BROWSER_WITH_TRANSFORMED_PREFIXES);\n+    } else {\n+        options.setModuleResolutionMode(CompilerOptions.ResolutionMode.BROWSER);\n     }\n \n     return options;\n-  }\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}