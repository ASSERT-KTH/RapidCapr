{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals.length != dim) {\n            throw new DimensionMismatchException(vals.length, dim);\n        }\n\n        double[] delta = new double[dim];\n        System.arraycopy(vals, 0, delta, 0, dim);\n        for (int i = 0; i < delta.length; i++) {\n            delta[i] -= mean[i];\n        }\n        RealVector v = MatrixUtils.createRealVector(delta);\n        RealMatrix m = MatrixUtils.createRealMatrix(covariance.getData());\n        double exponent = v.dotProduct(m.solve(v));\n        \n        return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n            FastMath.exp(-0.5 * exponent);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..d9020ba93 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -180,9 +180,18 @@ public class MultivariateNormalDistribution\n             throw new DimensionMismatchException(vals.length, dim);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n+        double[] delta = new double[dim];\n+        System.arraycopy(vals, 0, delta, 0, dim);\n+        for (int i = 0; i < delta.length; i++) {\n+            delta[i] -= mean[i];\n+        }\n+        RealVector v = MatrixUtils.createRealVector(delta);\n+        RealMatrix m = MatrixUtils.createRealMatrix(covariance.getData());\n+        double exponent = v.dotProduct(m.solve(v));\n+        \n+        return FastMath.pow(2 * FastMath.PI, -dim / 2.0) *\n             FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+            FastMath.exp(-0.5 * exponent);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}