{
    "patch": "    public static Number createNumber(String str) throws NumberFormatException {\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.startsWith(\"--\")) {\n            return null;\n        }\n        // If hex string\n        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException e) {\n                // Exception may occur as the value is out of Integer range. In that case, parse as BigInteger.\n                return createBigInteger(str);\n            }\n        }\n        // check for sign\n        final char sign = str.charAt(0);\n\n        // find decimal point\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n\n        // determine if there is an exponent\n        if (expPos > -1) {\n            // there is an exponent\n            // exponent cannot be the last character\n            if (expPos < str.length() - 1) {\n                // there are digits after the exponent\n\n                final String mant = str.substring(0, expPos);\n                final String exp = str.substring(expPos + 1);\n\n                try {\n                    final int intVal = Integer.decode(exp);\n                    if (intVal != 0) {\n                        // exponental notation\n                        final StringBuilder sb = new StringBuilder(mant.length() + exp.length() + 1);\n                        sb.append(mant)\n                            .append('E')\n                            .append(exp);\n                        return createBigDecimal(sb.toString());\n                    }\n                } catch (NumberFormatException e) {\n                    // NOPMD\n                }\n            }\n        }\n\n        char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        if (decPos > -1) {\n\n            if (expPos > -1) {\n                if (expPos < decPos) {\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n        } else {\n            if (expPos > -1) {\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n\n        // Java 1.1 complains when a leading '+' is used with parse\n        // Set flag to indicate if leading '+' is present and ignore it\n        boolean mantIsNegative = false;\n        if (mant.charAt(0) == '-') {\n            // leading negative sign\n            mantIsNegative = true;\n        }\n\n        if (mantIsNegative) {\n            mant = mant.substring(1);\n        }\n\n        if (dec != null) {\n            // Convert decimal part\n            if (dec.length() > 28) {\n                dec = dec.substring(0, 28);\n            }\n            final double dblValue = Double.parseDouble(\"0.\" + dec); // remove leading '0'\n            if (dblValue == 0.0) {\n                return mantIsNegative ? NEGATIVE_ZERO : ZERO;\n            }\n            final StringBuilder sb = new StringBuilder(mant.length() + dec.length());\n            if (mantIsNegative) {\n                sb.append('-');\n            }\n            sb.append(mant).append('.').append(dec);\n            return createBigDecimal(sb.toString());\n        } else if (expPos > -1 && expPos < str.length() - 1) {\n            // Convert exponential part\n            final String exp = str.substring(expPos + 1);\n            final int intVal = Integer.parseInt(exp);\n            if (intVal != 0) {\n                // exponental notation\n                final StringBuilder sb = new StringBuilder(str.length());\n                if (mantIsNegative) {\n                    sb.append('-');\n                }\n                sb.append(mantCharHack(str));\n                sb.append('E');\n                sb.append(exp);\n                return createBigDecimal(sb.toString());\n            }\n        }\n\n        // Convert integer part\n        if (mant.length() > 18) {\n            mant = mant.substring(0, 18);\n        }\n        if (lastChar == 'l' || lastChar == 'L') {\n            if (dec == null\n                && exp == null\n                && (mant.charAt(0) == '-' && isDigits(mant.substring(1)) || isDigits(mant))) {\n                try {\n                    return createLong(mant);\n                } catch (NumberFormatException nfe) {\n                    //Too big for a long\n                }\n                return createBigInteger(mant);\n\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        final Number val;\n        if (dec == null && exp == null) {\n            // convert integer part\n            if (mant.length() <= 9) {\n                // Must be a decimal value\n                val = Integer.valueOf(mant);\n            } else if (mant.length() <= 18) {\n                // Must be aLong value\n                val = Long.valueOf(mant);\n            } else {\n                // Is a BigInteger, remove the negative sign if present\n                val = createBigInteger(mantIsNegative ? mant.substring(1) : mant);\n            }\n        } else {\n            // Convert to a double value\n            final StringBuilder sb = new StringBuilder(mant.length() + dec.length());\n            if (mantIsNegative) {\n                sb.append('-');\n            }\n            sb.append(mant).append('.').append(dec);\n            final double doubleVal = Double.parseDouble(sb.toString());\n\n            // check for hexadecimal floating-point literals\n            if (Double.isFinite(doubleVal) && (sign == '0' && str.charAt(1) == 'x')) {\n                final int bits = Double.doubleToRawLongBits(doubleVal);\n                val = Float.intBitsToFloat((int) bits);\n            } else if (Double.isFinite(doubleVal) && (sign == '0' || sign == '-' && str.charAt(1) == '0')) {\n                final BigDecimal decVal = new BigDecimal(str);\n                if (decVal.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0 && decVal.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0) {\n                    val = Integer.valueOf(decVal.intValue());\n                } else if (decVal.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0 && decVal.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0) {\n                    val = Long.valueOf(decVal.longValue());\n                } else {\n                    val = decVal;\n                }\n            } else {\n                val = doubleVal;\n            }\n        }\n        return val;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..6926f9f1 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -450,29 +450,57 @@ public class NumberUtils {\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n+        }\n         if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n             return null;\n         }\n+        // If hex string\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n+            try {\n+                return createInteger(str);\n+            } catch (NumberFormatException e) {\n+                // Exception may occur as the value is out of Integer range. In that case, parse as BigInteger.\n+                return createBigInteger(str);\n+            }\n+        }\n+        // check for sign\n+        final char sign = str.charAt(0);\n+\n+        // find decimal point\n+        final int decPos = str.indexOf('.');\n+        final int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n+\n+        // determine if there is an exponent\n+        if (expPos > -1) {\n+            // there is an exponent\n+            // exponent cannot be the last character\n+            if (expPos < str.length() - 1) {\n+                // there are digits after the exponent\n+\n+                final String mant = str.substring(0, expPos);\n+                final String exp = str.substring(expPos + 1);\n+\n+                try {\n+                    final int intVal = Integer.decode(exp);\n+                    if (intVal != 0) {\n+                        // exponental notation\n+                        final StringBuilder sb = new StringBuilder(mant.length() + exp.length() + 1);\n+                        sb.append(mant)\n+                            .append('E')\n+                            .append(exp);\n+                        return createBigDecimal(sb.toString());\n+                    }\n+                } catch (NumberFormatException e) {\n+                    // NOPMD\n+                }\n+            }\n+        }\n+\n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n@@ -492,110 +520,109 @@ public class NumberUtils {\n             }\n             dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+        // Java 1.1 complains when a leading '+' is used with parse\n+        // Set flag to indicate if leading '+' is present and ignore it\n+        boolean mantIsNegative = false;\n+        if (mant.charAt(0) == '-') {\n+            // leading negative sign\n+            mantIsNegative = true;\n+        }\n+\n+        if (mantIsNegative) {\n+            mant = mant.substring(1);\n+        }\n \n+        if (dec != null) {\n+            // Convert decimal part\n+            if (dec.length() > 28) {\n+                dec = dec.substring(0, 28);\n             }\n-        } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n+            final double dblValue = Double.parseDouble(\"0.\" + dec); // remove leading '0'\n+            if (dblValue == 0.0) {\n+                return mantIsNegative ? NEGATIVE_ZERO : ZERO;\n             }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+            final StringBuilder sb = new StringBuilder(mant.length() + dec.length());\n+            if (mantIsNegative) {\n+                sb.append('-');\n+            }\n+            sb.append(mant).append('.').append(dec);\n+            return createBigDecimal(sb.toString());\n+        } else if (expPos > -1 && expPos < str.length() - 1) {\n+            // Convert exponential part\n+            final String exp = str.substring(expPos + 1);\n+            final int intVal = Integer.parseInt(exp);\n+            if (intVal != 0) {\n+                // exponental notation\n+                final StringBuilder sb = new StringBuilder(str.length());\n+                if (mantIsNegative) {\n+                    sb.append('-');\n                 }\n-                return createBigInteger(str);\n+                sb.append(mantCharHack(str));\n+                sb.append('E');\n+                sb.append(exp);\n+                return createBigDecimal(sb.toString());\n+            }\n+        }\n \n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        // Convert integer part\n+        if (mant.length() > 18) {\n+            mant = mant.substring(0, 18);\n+        }\n+        if (lastChar == 'l' || lastChar == 'L') {\n+            if (dec == null\n+                && exp == null\n+                && (mant.charAt(0) == '-' && isDigits(mant.substring(1)) || isDigits(mant))) {\n                 try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n+                    return createLong(mant);\n                 } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n+                    //Too big for a long\n                 }\n+                return createBigInteger(mant);\n \n-                return createBigDecimal(str);\n+            }\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        final Number val;\n+        if (dec == null && exp == null) {\n+            // convert integer part\n+            if (mant.length() <= 9) {\n+                // Must be a decimal value\n+                val = Integer.valueOf(mant);\n+            } else if (mant.length() <= 18) {\n+                // Must be aLong value\n+                val = Long.valueOf(mant);\n+            } else {\n+                // Is a BigInteger, remove the negative sign if present\n+                val = createBigInteger(mantIsNegative ? mant.substring(1) : mant);\n+            }\n+        } else {\n+            // Convert to a double value\n+            final StringBuilder sb = new StringBuilder(mant.length() + dec.length());\n+            if (mantIsNegative) {\n+                sb.append('-');\n+            }\n+            sb.append(mant).append('.').append(dec);\n+            final double doubleVal = Double.parseDouble(sb.toString());\n \n+            // check for hexadecimal floating-point literals\n+            if (Double.isFinite(doubleVal) && (sign == '0' && str.charAt(1) == 'x')) {\n+                final int bits = Double.doubleToRawLongBits(doubleVal);\n+                val = Float.intBitsToFloat((int) bits);\n+            } else if (Double.isFinite(doubleVal) && (sign == '0' || sign == '-' && str.charAt(1) == '0')) {\n+                final BigDecimal decVal = new BigDecimal(str);\n+                if (decVal.compareTo(MIN_INT_AS_BIG_DECIMAL) >= 0 && decVal.compareTo(MAX_INT_AS_BIG_DECIMAL) <= 0) {\n+                    val = Integer.valueOf(decVal.intValue());\n+                } else if (decVal.compareTo(MIN_LONG_AS_BIG_DECIMAL) >= 0 && decVal.compareTo(MAX_LONG_AS_BIG_DECIMAL) <= 0) {\n+                    val = Long.valueOf(decVal.longValue());\n+                } else {\n+                    val = decVal;\n+                }\n+            } else {\n+                val = doubleVal;\n             }\n         }\n+        return val;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}