{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n            // compute the expanded simplex\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected point\n                simplex = new RealPointValuePair[] { reflected };\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n\n        if (comparator.compare(contracted, simplex[simplex.length - 1]) < 0) {\n            // accept the contracted simplex\n            simplex = new RealPointValuePair[] { best, contracted };\n        } else {\n            // shrink the simplex towards the best vertex\n            final RealPointValuePair[] newSimplex = new RealPointValuePair[n + 1];\n            newSimplex[0] = best;\n            for (int i = 1; i <= n; i++) {\n                final double[] coordinates = new double[n];\n                for (int j = 0; j < n; j++) {\n                    coordinates[j] = sigma * simplex[i].getPoint()[j]\n                            + (1 - sigma) * best.getPoint()[j];\n                }\n                newSimplex[i] = new RealPointValuePair(coordinates, Double.NaN);\n            }\n            simplex = newSimplex;\n        }\n\n        // check convergence\n        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                original[0], simplex[0])) {\n            return;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..d8a384589 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,60 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n-\n-            incrementIterationsCounter();\n-\n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n-\n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n-\n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n-\n+    while (true) {\n+        incrementIterationsCounter();\n+\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n+\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n+            // compute the expanded simplex\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected point\n+                simplex = new RealPointValuePair[] { reflected };\n             }\n+            return;\n+        }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n+\n+        if (comparator.compare(contracted, simplex[simplex.length - 1]) < 0) {\n+            // accept the contracted simplex\n+            simplex = new RealPointValuePair[] { best, contracted };\n+        } else {\n+            // shrink the simplex towards the best vertex\n+            final RealPointValuePair[] newSimplex = new RealPointValuePair[n + 1];\n+            newSimplex[0] = best;\n+            for (int i = 1; i <= n; i++) {\n+                final double[] coordinates = new double[n];\n+                for (int j = 0; j < n; j++) {\n+                    coordinates[j] = sigma * simplex[i].getPoint()[j]\n+                            + (1 - sigma) * best.getPoint()[j];\n+                }\n+                newSimplex[i] = new RealPointValuePair(coordinates, Double.NaN);\n             }\n-\n+            simplex = newSimplex;\n         }\n \n+        // check convergence\n+        if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                original[0], simplex[0])) {\n+            return;\n+        }\n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}