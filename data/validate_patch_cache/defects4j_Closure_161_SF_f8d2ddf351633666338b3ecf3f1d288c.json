{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n\n    if (right.getType() != Token.NUMBER) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    int elemSize = left.getChildCount();\n    if (elemSize == 0) {\n      if (intIndex == 0) {\n        Node result = NodeUtil.newUndefinedNode(left);\n        left.addChildToBack(result);\n        parent.replaceChild(n, result);\n        reportCodeChange();\n        return result;\n      }\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n    boolean isNegativeIndex = intIndex < 0;\n    // Convert a negative index to positive index.\n    if (isNegativeIndex) {\n      intIndex = elemSize + intIndex;\n    }\n    if (intIndex < 0 || intIndex >= elemSize) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; i < intIndex; i++) {\n      elem = elem.getNext();\n    }\n\n    if (elem.getType() == Token.EMPTY) {\n      elem = NodeUtil.newUndefinedNode(left);\n      left.replaceChild(elem, elem.getNext());\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    parent.replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..8292f452 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1277,9 +1277,6 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n@@ -1294,29 +1291,42 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    int elemSize = left.getChildCount();\n+    if (elemSize == 0) {\n+      if (intIndex == 0) {\n+        Node result = NodeUtil.newUndefinedNode(left);\n+        left.addChildToBack(result);\n+        parent.replaceChild(n, result);\n+        reportCodeChange();\n+        return result;\n+      }\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n-\n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+    boolean isNegativeIndex = intIndex < 0;\n+    // Convert a negative index to positive index.\n+    if (isNegativeIndex) {\n+      intIndex = elemSize + intIndex;\n     }\n-\n-    if (elem == null) {\n+    if (intIndex < 0 || intIndex >= elemSize) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n+    Node elem = left.getFirstChild();\n+    for (int i = 0; i < intIndex; i++) {\n+      elem = elem.getNext();\n+    }\n+\n     if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      elem = NodeUtil.newUndefinedNode(left);\n+      left.replaceChild(elem, elem.getNext());\n     } else {\n       left.removeChild(elem);\n     }\n \n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    parent.replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}