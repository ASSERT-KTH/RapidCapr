{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> sublist = elementPairs.subList(2, size);\n        PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        List<Object> list = new ArrayList<Object>();\n        list.add(sep);\n        list.addAll(sublist);\n        return new PeriodFormatter(createComposite(list));\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n    }\n}\n\nprivate static Object createComposite(List<Object> elementPairs) {\n    int size = elementPairs.size();\n    if (size == 0) {\n        throw new IllegalArgumentException(\"Invalid format: empty element list\");\n    }\n    if (size == 1) {\n        Object comp = elementPairs.get(0);\n        return (comp instanceof PeriodPrinter ? new Object[]{comp, comp} : new Object[]{comp, null});\n    }\n    Object first = elementPairs.get(0);\n    if (first instanceof PeriodPrinter == false) {\n        throw new IllegalArgumentException(\"Invalid format: element \" + 0 + \" is not a printer\");\n    }\n    Object last = elementPairs.get(size - 1);\n    if (last instanceof PeriodParser == false) {\n        throw new IllegalArgumentException(\"Invalid format: element \" + (size - 1) + \" is not a parser\");\n    }\n    Chronology chrono = ((DateTimePrinter) first).getChronology();\n    PeriodPrinter[] printers = new PeriodPrinter[size];\n    PeriodParser[] parsers = new PeriodParser[size];\n    for (int i = 0; i < size; i++) {\n        Object comp = elementPairs.get(i);\n        if (comp instanceof Separator) {\n            Separator sep = (Separator) comp;\n            printers[i] = sep;\n            parsers[i] = sep;\n        } else {\n            printers[i] = (PeriodPrinter) comp;\n            parsers[i] = (PeriodParser) comp;\n        }\n        if (printers[i] != null && printers[i].getChronology() != chrono) {\n            throw new IllegalArgumentException(\"Invalid format: format element \" + i + \" has a chronology not equal to the first chronology\");\n        }\n        if (parsers[i] != null && parsers[i].getChronology() != chrono) {\n            throw new IllegalArgumentException(\"Invalid format: format element \" + i + \" has a chronology not equal to the first chronology\");\n        }\n    }\n    return new Object[]{new CompositePrinter(printers), new CompositeParser(parsers)};\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..7f7f0fde 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,70 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> sublist = elementPairs.subList(2, size);\n+        PeriodFormatter f = toFormatter(sublist, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        List<Object> list = new ArrayList<Object>();\n+        list.add(sep);\n+        list.addAll(sublist);\n+        return new PeriodFormatter(createComposite(list));\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+    }\n+}\n+\n+private static Object createComposite(List<Object> elementPairs) {\n+    int size = elementPairs.size();\n+    if (size == 0) {\n+        throw new IllegalArgumentException(\"Invalid format: empty element list\");\n+    }\n+    if (size == 1) {\n+        Object comp = elementPairs.get(0);\n+        return (comp instanceof PeriodPrinter ? new Object[]{comp, comp} : new Object[]{comp, null});\n+    }\n+    Object first = elementPairs.get(0);\n+    if (first instanceof PeriodPrinter == false) {\n+        throw new IllegalArgumentException(\"Invalid format: element \" + 0 + \" is not a printer\");\n+    }\n+    Object last = elementPairs.get(size - 1);\n+    if (last instanceof PeriodParser == false) {\n+        throw new IllegalArgumentException(\"Invalid format: element \" + (size - 1) + \" is not a parser\");\n+    }\n+    Chronology chrono = ((DateTimePrinter) first).getChronology();\n+    PeriodPrinter[] printers = new PeriodPrinter[size];\n+    PeriodParser[] parsers = new PeriodParser[size];\n+    for (int i = 0; i < size; i++) {\n+        Object comp = elementPairs.get(i);\n+        if (comp instanceof Separator) {\n+            Separator sep = (Separator) comp;\n+            printers[i] = sep;\n+            parsers[i] = sep;\n         } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+            printers[i] = (PeriodPrinter) comp;\n+            parsers[i] = (PeriodParser) comp;\n+        }\n+        if (printers[i] != null && printers[i].getChronology() != chrono) {\n+            throw new IllegalArgumentException(\"Invalid format: format element \" + i + \" has a chronology not equal to the first chronology\");\n+        }\n+        if (parsers[i] != null && parsers[i].getChronology() != chrono) {\n+            throw new IllegalArgumentException(\"Invalid format: format element \" + i + \" has a chronology not equal to the first chronology\");\n         }\n     }\n+    return new Object[]{new CompositePrinter(printers), new CompositeParser(parsers)};\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: method createComposite(List<Object>) is already defined in class PeriodFormatterBuilder",
    "test_result": "ERROR"
}