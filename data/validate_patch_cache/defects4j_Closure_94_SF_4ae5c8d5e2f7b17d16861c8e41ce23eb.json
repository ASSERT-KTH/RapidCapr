{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val == null) {\n        return false;\n    }\n\n    int type = val.getType();\n\n    switch (type) {\n        case Token.STRING:\n        case Token.NUMBER:\n        case Token.TRUE:\n        case Token.FALSE:\n            return true;\n        case Token.NAME:\n        case Token.GETPROP:\n            String name = val.getQualifiedName();\n            return name != null && defines.contains(name);\n        case Token.NOT:\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..96a6b326 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,25 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n-        return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val == null) {\n+        return false;\n+    }\n \n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n-        return isValidDefineValue(val.getFirstChild(), defines);\n+    int type = val.getType();\n \n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n-    }\n-    return false;\n-  }\n+    switch (type) {\n+        case Token.STRING:\n+        case Token.NUMBER:\n+        case Token.TRUE:\n+        case Token.FALSE:\n+            return true;\n+        case Token.NAME:\n+        case Token.GETPROP:\n+            String name = val.getQualifiedName();\n+            return name != null && defines.contains(name);\n+        case Token.NOT:\n+      \n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}