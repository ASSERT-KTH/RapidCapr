{
    "patch": "          ) {\n            // We want to exclude the assignment itself from the usage list\n            boolean isChainedProperty =\n                n.getFirstChild().getType() == Token.GETPROP;\n\n            if (isChainedProperty) {\n              Node child = n.getFirstChild().getFirstChild().getNext();\n\n              if (child.getType() == Token.STRING &&\n                  child.getString().equals(\"prototype\")) {\n                return true;\n              }\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..bb1d06aa 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -316,6 +316,19 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n           ) {\n+            // We want to exclude the assignment itself from the usage list\n+            boolean isChainedProperty =\n+                n.getFirstChild().getType() == Token.GETPROP;\n+\n+            if (isChainedProperty) {\n+              Node child = n.getFirstChild().getFirstChild().getNext();\n+\n+              if (child.getType() == Token.STRING &&\n+                  child.getString().equals(\"prototype\")) {\n+                return true;\n+              }\n+            }\n+          }\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}