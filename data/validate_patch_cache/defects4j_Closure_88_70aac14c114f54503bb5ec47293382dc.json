{
    "patch": "  private enum VariableLiveness {\n    READ, MAYBE_LIVE, KILL, DEAD\n  }\n\n  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n    if (NodeUtil.isName(n)) {\n      if (variable.equals(n.getString()) && NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else if (variable.equals(n.getString())) {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Don't descend into function declarations.\n    if (NodeUtil.isFunctionDeclaration(n)) {\n      return VariableLiveness.DEAD;\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n      if (state != VariableLiveness.MAYBE_LIVE) {\n        return state;\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..d834a55f 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -320,27 +320,32 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n-  private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n+  private enum VariableLiveness {\n+    READ, MAYBE_LIVE, KILL, DEAD\n+  }\n+\n+  private VariableLiveness isVariableReadBeforeKill(Node n, String variable) {\n+    if (NodeUtil.isName(n)) {\n+      if (variable.equals(n.getString()) && NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n         // occurs after the RHS is evaluated.\n         return VariableLiveness.KILL;\n-      } else {\n+      } else if (variable.equals(n.getString())) {\n         return VariableLiveness.READ;\n       }\n     }\n \n+    // Don't descend into function declarations.\n+    if (NodeUtil.isFunctionDeclaration(n)) {\n+      return VariableLiveness.DEAD;\n+    }\n+\n     // Expressions are evaluated left-right, depth first.\n-    for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n-        if (state != VariableLiveness.MAYBE_LIVE) {\n-          return state;\n-        }\n+    for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+      VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+      if (state != VariableLiveness.MAYBE_LIVE) {\n+        return state;\n       }\n     }\n     return VariableLiveness.MAYBE_LIVE;",
    "result_reason": "error: enum VariableLiveness is already defined in class DeadAssignmentsElimination",
    "test_result": "ERROR"
}