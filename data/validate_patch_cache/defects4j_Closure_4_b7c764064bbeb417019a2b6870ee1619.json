{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // TODO(user): Investigate whether it is really necessary to keep two\n  // different mechanisms for resolving named types, and if so, which order\n  // makes more sense. Now, resolution via registry is first in order to\n  // avoid triggering the warnings built into the resolution via properties.\n  boolean resolved = resolveViaRegistry(t, enclosing);\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  List<JSError> registryWarnings = new ArrayList<JSError>();\n  resolved = resolved || collectWarnings(registryWarnings, getRegistry());\n\n  if (resolved) {\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration() ?\n        getReferencedType() : this;\n  }\n\n  resolveViaProperties(t, enclosing);\n  if (detectImplicitPrototypeCycle()) {\n    handleTypeCycle(t);\n  }\n\n  List<JSError> propertyWarnings = new ArrayList<JSError>();\n  collectWarnings(propertyWarnings, getProps());\n\n  super.resolveInternal(t, enclosing);\n  if (isResolved()) {\n    finishPropertyContinuations();\n  }\n\n  registryWarnings.addAll(propertyWarnings);\n\n  if (!registryWarnings.isEmpty()) {\n    for (JSError error : registryWarnings) {\n      t.warning(error);\n    }\n  }\n\n  return registry.isLastGeneration() ?\n      getReferencedType() : this;\n}\n\n/**\n * @return whether any warnings were collected\n */\nprivate boolean collectWarnings(List<JSError> warnings, TypedScope traverseRoot) {\n  boolean hadWarnings = false;\n  for (TypedVar v : traverseRoot.getAllSymbols()) {\n    JSTypeExpression expr = v.getType();\n    if (expr != null) {\n      NominalType nt = expr.getNominalTypeIfSingleton();\n      if (nt != null) {\n        hadWarnings = hadWarnings || collectWarnings(warnings, nt.getScope());\n      }\n    }\n    for (JSError warning : v.getJSDocInfo().getWarnings()) {\n      warnings.add(warning);\n    }\n  }\n  return hadWarnings;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..2fdd8b57 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,36 +181,71 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // TODO(user): Investigate whether it is really necessary to keep two\n+  // different mechanisms for resolving named types, and if so, which order\n+  // makes more sense. Now, resolution via registry is first in order to\n+  // avoid triggering the warnings built into the resolution via properties.\n+  boolean resolved = resolveViaRegistry(t, enclosing);\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+  List<JSError> registryWarnings = new ArrayList<JSError>();\n+  resolved = resolved || collectWarnings(registryWarnings, getRegistry());\n \n+  if (resolved) {\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n+    finishPropertyContinuations();\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }\n \n+  resolveViaProperties(t, enclosing);\n+  if (detectImplicitPrototypeCycle()) {\n+    handleTypeCycle(t);\n+  }\n+\n+  List<JSError> propertyWarnings = new ArrayList<JSError>();\n+  collectWarnings(propertyWarnings, getProps());\n+\n+  super.resolveInternal(t, enclosing);\n+  if (isResolved()) {\n+    finishPropertyContinuations();\n+  }\n+\n+  registryWarnings.addAll(propertyWarnings);\n+\n+  if (!registryWarnings.isEmpty()) {\n+    for (JSError error : registryWarnings) {\n+      t.warning(error);\n+    }\n+  }\n+\n+  return registry.isLastGeneration() ?\n+      getReferencedType() : this;\n+}\n+\n+/**\n+ * @return whether any warnings were collected\n+ */\n+private boolean collectWarnings(List<JSError> warnings, TypedScope traverseRoot) {\n+  boolean hadWarnings = false;\n+  for (TypedVar v : traverseRoot.getAllSymbols()) {\n+    JSTypeExpression expr = v.getType();\n+    if (expr != null) {\n+      NominalType nt = expr.getNominalTypeIfSingleton();\n+      if (nt != null) {\n+        hadWarnings = hadWarnings || collectWarnings(warnings, nt.getScope());\n+      }\n+    }\n+    for (JSError warning : v.getJSDocInfo().getWarnings()) {\n+      warnings.add(warning);\n+    }\n+  }\n+  return hadWarnings;\n+}\n+\n   /**\n    * Resolves a named type by looking it up in the registry.\n    * @return True if we resolved successfully.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}