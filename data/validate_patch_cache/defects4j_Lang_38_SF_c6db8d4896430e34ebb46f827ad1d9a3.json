{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n\n        // clear milliseconds to make the comparison work correctly\n        calendar.clear(Calendar.MILLISECOND);\n\n        // set the zone offset to 0 to make the comparison work correctly\n        TimeZone tz = calendar.getTimeZone();\n        int offset = tz.getRawOffset() + tz.getDSTSavings();\n        calendar.set(Calendar.ZONE_OFFSET, offset);\n\n        return applyRules(calendar, buf);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..e0baa3f5 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,6 +872,15 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n+\n+        // clear milliseconds to make the comparison work correctly\n+        calendar.clear(Calendar.MILLISECOND);\n+\n+        // set the zone offset to 0 to make the comparison work correctly\n+        TimeZone tz = calendar.getTimeZone();\n+        int offset = tz.getRawOffset() + tz.getDSTSavings();\n+        calendar.set(Calendar.ZONE_OFFSET, offset);\n+\n         return applyRules(calendar, buf);\n     }\n ",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2005111[2]> but was:<2005111[1]>",
    "test_result": "FAIL"
}