{
    "patch": "        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without an return statement)\n        if (n == null) {\n          return false;\n        }\n\n        // TODO(user): We only care about calls to functions that\n        // passes one of the dependent variable to a non-side-effect free\n        // function.\n        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n          return true;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n          return true;\n        }\n\n        boolean hasSideEffect = false;\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n            if (apply(c)) {\n              hasSideEffect = true;\n            }\n          }\n        }\n        return hasSideEffect;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..dd90c113 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,32 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        // When the node is null it means, we reached the implicit return\n+        // where the function returns (possibly without an return statement)\n+        if (n == null) {\n+          return false;\n+        }\n+\n+        // TODO(user): We only care about calls to functions that\n+        // passes one of the dependent variable to a non-side-effect free\n+        // function.\n+        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+          return true;\n+        }\n+\n+        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+          return true;\n+        }\n+\n+        boolean hasSideEffect = false;\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+            if (apply(c)) {\n+              hasSideEffect = true;\n+            }\n+          }\n+        }\n+        return hasSideEffect;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}