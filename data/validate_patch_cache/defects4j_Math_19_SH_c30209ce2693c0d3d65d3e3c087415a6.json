{
    "patch": "if (boundaries != null) {\n    for (int i = 0; i < boundaries[0].length; i++) {\n        double lower = boundaries[0][i];\n        double upper = boundaries[1][i];\n        if (Double.isNaN(lower) || Double.isNaN(upper) || Double.compare(lower, upper) >= 0) {\n            throw new NumberIsTooLargeException(lower + \" - \" + upper, 0, false);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 51d1c6428..2fb37acb5 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -537,6 +537,15 @@ public class CMAESOptimizer\n                 boundaries[1] = uB;\n \n                 // Abort early if the normalization will overflow (cf. \"encode\" method).\n+if (boundaries != null) {\n+    for (int i = 0; i < boundaries[0].length; i++) {\n+        double lower = boundaries[0][i];\n+        double upper = boundaries[1][i];\n+        if (Double.isNaN(lower) || Double.isNaN(upper) || Double.compare(lower, upper) >= 0) {\n+            throw new NumberIsTooLargeException(lower + \" - \" + upper, 0, false);\n+        }\n+    }\n+}\n             }\n         } else {\n             // Convert API to internal handling of boundaries.",
    "result_reason": "error: no suitable constructor found for NumberIsTooLargeException(String,int,boolean)",
    "test_result": "ERROR"
}