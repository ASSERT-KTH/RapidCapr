{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (Double.isNaN(tmp2[0]) || Double.isNaN(x[xOffset])) {\n        // Handle NaN inputs.\n        result[resultOffset] = Double.NaN;\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = Double.NaN;\n        }\n        return;\n    } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n        // Handle infinite inputs.\n        result[resultOffset] = FastMath.copySign(FastMath.PI / 4, y[yOffset]);\n        for (int i = 1; i < result.length; ++i) {\n            result[resultOffset + i] = result[resultOffset];\n        }\n        return;\n    }\n\n    if (x[xOffset] >= 0) {\n        // Compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        final boolean yNonNegative = (FastMath.copySign(1.0, y[yOffset]) == 1.0);\n        final double angle = (yNonNegative ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n        result[resultOffset] = (Double.isNaN(angle) ? 0.0 : angle);\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2 * tmp2[i]; // - 2 * atan(y / (r - x))\n        }\n    }\n\n    // Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0) correctly.\n    if (x[xOffset] == 0) {\n        final boolean yNonNegative = (FastMath.copySign(1.0, y[yOffset]) == 1.0);\n        final double angle = (yNonNegative ? FastMath.PI / 2 : -FastMath.PI / 2);\n        result[resultOffset] = (Double.isNaN(result[resultOffset]) ? 0.0 : angle);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..ca2d68d56 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,62 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n-\n-        } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n-\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (Double.isNaN(tmp2[0]) || Double.isNaN(x[xOffset])) {\n+        // Handle NaN inputs.\n+        result[resultOffset] = Double.NaN;\n+        for (int i = 1; i < result.length; ++i) {\n+            result[resultOffset + i] = Double.NaN;\n+        }\n+        return;\n+    } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n+        // Handle infinite inputs.\n+        result[resultOffset] = FastMath.copySign(FastMath.PI / 4, y[yOffset]);\n+        for (int i = 1; i < result.length; ++i) {\n+            result[resultOffset + i] = result[resultOffset];\n         }\n+        return;\n+    }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    if (x[xOffset] >= 0) {\n+        // Compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n+    } else {\n+        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+        final boolean yNonNegative = (FastMath.copySign(1.0, y[yOffset]) == 1.0);\n+        final double angle = (yNonNegative ? FastMath.PI : -FastMath.PI) - 2 * tmp2[0];\n+        result[resultOffset] = (Double.isNaN(angle) ? 0.0 : angle);\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = -2 * tmp2[i]; // - 2 * atan(y / (r - x))\n+        }\n+    }\n \n+    // Fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0) correctly.\n+    if (x[xOffset] == 0) {\n+        final boolean yNonNegative = (FastMath.copySign(1.0, y[yOffset]) == 1.0);\n+        final double angle = (yNonNegative ? FastMath.PI / 2 : -FastMath.PI / 2);\n+        result[resultOffset] = (Double.isNaN(result[resultOffset]) ? 0.0 : angle);\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.141592653589793> but was:<0.0>",
    "test_result": "FAIL"
}