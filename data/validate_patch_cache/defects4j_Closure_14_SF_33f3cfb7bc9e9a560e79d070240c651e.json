{
    "patch": "  private static Node computeFollowNode(\n          Node fromNode, Node node, ControlFlowAnalysis cfa, Set<Node> visitedNodes) {\n    try {\n      visitedNodes.add(node);\n      Node parent = node.getParent();\n      if (parent == null || parent.isFunction() ||\n              (cfa != null && node == cfa.root)) {\n        return null;\n      }\n\n      // If we are just before a IF/WHILE/DO/FOR:\n      switch (parent.getType()) {\n        // The follow() of any of the path from IF would be what follows IF.\n        case Token.IF:\n          return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n        case Token.CASE:\n        case Token.DEFAULT_CASE:\n          // After the body of a CASE, the control goes to the body of the next\n          // case, without having to go to the case condition.\n          if (parent.getNext() != null) {\n            if (parent.getNext().isCase()) {\n              return parent.getNext().getFirstChild().getNext();\n            } else if (parent.getNext().isDefaultCase()) {\n              return parent.getNext().getFirstChild();\n            } else {\n              throw new IllegalStateException(\"Not reachable\");\n            }\n          } else {\n            return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n          }\n        case Token.FOR:\n          if (NodeUtil.isForIn(parent)) {\n            return parent;\n          } else {\n            return parent.getFirstChild().getNext().getNext();\n          }\n        case Token.WHILE:\n        case Token.DO:\n          return parent;\n        case Token.TRY:\n          // If we are coming out of the TRY block...\n          if (parent.getFirstChild() == node) {\n            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n              return computeFallThrough(parent.getLastChild());\n            } else { // and have no FINALLY.\n              return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n            }\n            // CATCH block.\n          } else if (NodeUtil.getCatchBlock(parent) == node) {\n            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n              return computeFallThrough(node.getNext());\n            } else {\n              return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n            }\n            // If we are coming out of the FINALLY block...\n          } else if (parent.getLastChild() == node) {\n            if (cfa != null) {\n              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n              }\n            }\n            return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n          }\n      }\n\n      // Now that we are done with the special cases follow should be its\n      // immediate sibling, unless its sibling is a function or it's a return statement\n      Node nextSibling = node.getNext();\n\n      // Skip function declarations because control doesn't get pass into it.\n      while (nextSibling != null &&\n              (nextSibling.isFunction() || nextSibling.isReturn())) {\n        nextSibling = nextSibling.getNext();\n      }\n\n      if (nextSibling != null) {\n        return computeFallThrough(nextSibling);\n      } else {\n        // Check if the function is expected to return a value, if so add a return statement to the current node.\n        if (NodeUtil.isExecutedByParent(node) && NodeUtil.isFunctionExpression(node.getParent())) {\n          Node functionNode = node.getParent();\n          JSType type = functionNode.getJSType();\n          boolean returnTypeIsKnown = type != null && !type.isUnknownType() && !type.isNullType();\n          if (returnTypeIsKnown && !visitedNodes.contains(node.getParent())) {\n            Token token = NodeUtil.getFunctionBody(functionNode).getLastChild().getToken();\n            if (!NodeUtil.isImplicitReturn(token)) {\n              SourcePosition location = node.getSourcePosition();\n              Node newReturn = new Node(Token.RETURN, location);\n              newReturn.putBooleanProp(Node.ES6_ARROW_FUNCTION, NodeUtil.isEs6ArrowFunction(functionNode));\n              newReturn.addChildToBack(NodeUtil.newUndefinedNode(location));\n              functionNode.getLastChild().addChildToBack(newReturn);\n              newReturn.copyInformationFromForTree(node);\n            }\n          }\n        }\n        // If there are no more siblings, control is transferred up the AST.\n        return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n      }\n    } catch (Throwable t) {\n      System.err.println(\"Caught exception: \" + t);\n      t.printStackTrace();\n      throw t;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..8e6dcadb 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -690,101 +690,107 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    * @param node The node that follow() should compute.\n    */\n   private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n-    /*\n-     * This is the case where:\n-     *\n-     * 1. Parent is null implies that we are transferring control to the end of\n-     * the script.\n-     *\n-     * 2. Parent is a function implies that we are transferring control back to\n-     * the caller of the function.\n-     *\n-     * 3. If the node is a return statement, we should also transfer control\n-     * back to the caller of the function.\n-     *\n-     * 4. If the node is root then we have reached the end of what we have been\n-     * asked to traverse.\n-     *\n-     * In all cases we should transfer control to a \"symbolic return\" node.\n-     * This will make life easier for DFAs.\n-     */\n-    Node parent = node.getParent();\n-    if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n-      return null;\n-    }\n+          Node fromNode, Node node, ControlFlowAnalysis cfa, Set<Node> visitedNodes) {\n+    try {\n+      visitedNodes.add(node);\n+      Node parent = node.getParent();\n+      if (parent == null || parent.isFunction() ||\n+              (cfa != null && node == cfa.root)) {\n+        return null;\n+      }\n \n-    // If we are just before a IF/WHILE/DO/FOR:\n-    switch (parent.getType()) {\n-      // The follow() of any of the path from IF would be what follows IF.\n-      case Token.IF:\n-        return computeFollowNode(fromNode, parent, cfa);\n-      case Token.CASE:\n-      case Token.DEFAULT_CASE:\n-        // After the body of a CASE, the control goes to the body of the next\n-        // case, without having to go to the case condition.\n-        if (parent.getNext() != null) {\n-          if (parent.getNext().isCase()) {\n-            return parent.getNext().getFirstChild().getNext();\n-          } else if (parent.getNext().isDefaultCase()) {\n-            return parent.getNext().getFirstChild();\n+      // If we are just before a IF/WHILE/DO/FOR:\n+      switch (parent.getType()) {\n+        // The follow() of any of the path from IF would be what follows IF.\n+        case Token.IF:\n+          return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n+        case Token.CASE:\n+        case Token.DEFAULT_CASE:\n+          // After the body of a CASE, the control goes to the body of the next\n+          // case, without having to go to the case condition.\n+          if (parent.getNext() != null) {\n+            if (parent.getNext().isCase()) {\n+              return parent.getNext().getFirstChild().getNext();\n+            } else if (parent.getNext().isDefaultCase()) {\n+              return parent.getNext().getFirstChild();\n+            } else {\n+              throw new IllegalStateException(\"Not reachable\");\n+            }\n           } else {\n-            Preconditions.checkState(false, \"Not reachable\");\n-          }\n-        } else {\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n-        break;\n-      case Token.FOR:\n-        if (NodeUtil.isForIn(parent)) {\n-          return parent;\n-        } else {\n-          return parent.getFirstChild().getNext().getNext();\n-        }\n-      case Token.WHILE:\n-      case Token.DO:\n-        return parent;\n-      case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n           }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n+        case Token.FOR:\n+          if (NodeUtil.isForIn(parent)) {\n+            return parent;\n           } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return parent.getFirstChild().getNext().getNext();\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n-            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+        case Token.WHILE:\n+        case Token.DO:\n+          return parent;\n+        case Token.TRY:\n+          // If we are coming out of the TRY block...\n+          if (parent.getFirstChild() == node) {\n+            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+              return computeFallThrough(parent.getLastChild());\n+            } else { // and have no FINALLY.\n+              return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n+            }\n+            // CATCH block.\n+          } else if (NodeUtil.getCatchBlock(parent) == node) {\n+            if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+              return computeFallThrough(node.getNext());\n+            } else {\n+              return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n             }\n+            // If we are coming out of the FINALLY block...\n+          } else if (parent.getLastChild() == node) {\n+            if (cfa != null) {\n+              for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+                cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              }\n+            }\n+            return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n-        }\n-    }\n+      }\n \n-    // Now that we are done with the special cases follow should be its\n-    // immediate sibling, unless its sibling is a function\n-    Node nextSibling = node.getNext();\n+      // Now that we are done with the special cases follow should be its\n+      // immediate sibling, unless its sibling is a function or it's a return statement\n+      Node nextSibling = node.getNext();\n \n-    // Skip function declarations because control doesn't get pass into it.\n-    while (nextSibling != null && nextSibling.isFunction()) {\n-      nextSibling = nextSibling.getNext();\n-    }\n+      // Skip function declarations because control doesn't get pass into it.\n+      while (nextSibling != null &&\n+              (nextSibling.isFunction() || nextSibling.isReturn())) {\n+        nextSibling = nextSibling.getNext();\n+      }\n \n-    if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n-    } else {\n-      // If there are no more siblings, control is transferred up the AST.\n-      return computeFollowNode(fromNode, parent, cfa);\n+      if (nextSibling != null) {\n+        return computeFallThrough(nextSibling);\n+      } else {\n+        // Check if the function is expected to return a value, if so add a return statement to the current node.\n+        if (NodeUtil.isExecutedByParent(node) && NodeUtil.isFunctionExpression(node.getParent())) {\n+          Node functionNode = node.getParent();\n+          JSType type = functionNode.getJSType();\n+          boolean returnTypeIsKnown = type != null && !type.isUnknownType() && !type.isNullType();\n+          if (returnTypeIsKnown && !visitedNodes.contains(node.getParent())) {\n+            Token token = NodeUtil.getFunctionBody(functionNode).getLastChild().getToken();\n+            if (!NodeUtil.isImplicitReturn(token)) {\n+              SourcePosition location = node.getSourcePosition();\n+              Node newReturn = new Node(Token.RETURN, location);\n+              newReturn.putBooleanProp(Node.ES6_ARROW_FUNCTION, NodeUtil.isEs6ArrowFunction(functionNode));\n+              newReturn.addChildToBack(NodeUtil.newUndefinedNode(location));\n+              functionNode.getLastChild().addChildToBack(newReturn);\n+              newReturn.copyInformationFromForTree(node);\n+            }\n+          }\n+        }\n+        // If there are no more siblings, control is transferred up the AST.\n+        return computeFollowNode(fromNode, parent, cfa, visitedNodes);\n+      }\n+    } catch (Throwable t) {\n+      System.err.println(\"Caught exception: \" + t);\n+      t.printStackTrace();\n+      throw t;\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}