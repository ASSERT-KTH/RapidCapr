{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n    while (parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      if (arguments.hasNext()) {\n        parameter = parameters.next();\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getArgumentType(argument), getParameterType(parameter), call, ordinal);\n      } else if (functionType.isVarArgs()) {\n        parameter = parameters.next();\n        validator.expectArgumentMatchesParameter(t, null,\n            JSType.UNKNOWN, getParameterType(parameter), call, ordinal + 1);\n        break;\n      } else {\n        parameter = parameters.next();\n        report(t, call, WRONG_ARGUMENT_COUNT,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()));\n        return;\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(numArgs), String.valueOf(minArgs),\n          maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n    }\n  }\n\n  private JSType getArgumentType(Node n) {\n    return n.getJSType() != null ? n.getJSType() : JSType.UNKNOWN;\n  }\n\n  private JSType getParameterType(Node n) {\n    return n.getDeclaredType() != null ? n.getDeclaredType().evaluate(scope, typeRegistry) : JSType.UNKNOWN;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..eefcdae6 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,16 +1405,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+    while (parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n+      if (arguments.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getArgumentType(argument), getParameterType(parameter), call, ordinal);\n+      } else if (functionType.isVarArgs()) {\n+        parameter = parameters.next();\n+        validator.expectArgumentMatchesParameter(t, null,\n+            JSType.UNKNOWN, getParameterType(parameter), call, ordinal + 1);\n+        break;\n+      } else {\n+        parameter = parameters.next();\n+        report(t, call, WRONG_ARGUMENT_COUNT,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(ordinal), String.valueOf(functionType.getMinArguments()));\n+        return;\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n@@ -1422,13 +1433,21 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int maxArgs = functionType.getMaxArguments();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(numArgs), String.valueOf(minArgs),\n+          maxArgs != Integer.MAX_VALUE ?\n               \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n     }\n   }\n \n+  private JSType getArgumentType(Node n) {\n+    return n.getJSType() != null ? n.getJSType() : JSType.UNKNOWN;\n+  }\n+\n+  private JSType getParameterType(Node n) {\n+    return n.getDeclaredType() != null ? n.getDeclaredType().evaluate(scope, typeRegistry) : JSType.UNKNOWN;\n+  }\n+\n   /**\n    * Visits a RETURN node.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}