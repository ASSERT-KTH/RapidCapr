{
    "patch": "  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n    switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // Make sure that we are not calling a constructor function that has\n        // any local variables\n        return callHasNoLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }\n  }\n\n  /**\n   * Returns true if the new expression does not call a constructor function\n   * with local variables.\n   *\n   * <p>A constructor function has local variables if it is defined inside a\n   * function or if it refers to any local variables in its body.</p>\n   */\n  private static boolean callHasNoLocalResult(Node callNode) {\n    Node ctor = callNode.getFirstChild();\n    if (ctor.getType() != Token.NAME) {\n      return false;\n    }\n    Scope.Var var = getBestLValueVar(ctor);\n    if (var == null || var.getNode() == null) {\n      return false;\n    }\n    Node fn = NodeUtil.getFunctionBody(var.getNode().getParent());\n    if (!NodeUtil.doesFunctionReferenceOwnArgumentsObject(fn) &&\n        NodeTraversal.hasScopeBlockVariables(NodeUtil.getEnclosingScript(fn))) {\n      // The constructor refers to a local variable or is defined inside a function\n      return false;\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..9847c3d1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2459,10 +2459,11 @@ public final class NodeUtil {\n             || isToStringMethodCall(value)\n             || locals.apply(value);\n       case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n+        // Make sure that we are not calling a constructor function that has\n+        // any local variables\n+        return callHasNoLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n       case Token.FUNCTION:\n       case Token.REGEXP:\n       case Token.ARRAYLIT:\n@@ -2488,6 +2489,31 @@ public final class NodeUtil {\n     }\n   }\n \n+  /**\n+   * Returns true if the new expression does not call a constructor function\n+   * with local variables.\n+   *\n+   * <p>A constructor function has local variables if it is defined inside a\n+   * function or if it refers to any local variables in its body.</p>\n+   */\n+  private static boolean callHasNoLocalResult(Node callNode) {\n+    Node ctor = callNode.getFirstChild();\n+    if (ctor.getType() != Token.NAME) {\n+      return false;\n+    }\n+    Scope.Var var = getBestLValueVar(ctor);\n+    if (var == null || var.getNode() == null) {\n+      return false;\n+    }\n+    Node fn = NodeUtil.getFunctionBody(var.getNode().getParent());\n+    if (!NodeUtil.doesFunctionReferenceOwnArgumentsObject(fn) &&\n+        NodeTraversal.hasScopeBlockVariables(NodeUtil.getEnclosingScript(fn))) {\n+      // The constructor refers to a local variable or is defined inside a function\n+      return false;\n+    }\n+    return true;\n+  }\n+\n   /**\n    * Given the first sibling, this returns the nth\n    * sibling or null if no such sibling exists.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}