{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = function.getSecondChild();\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      ArrayList<Node> toRemove = new ArrayList<Node>();\n      for (Node param = argList.getFirstChild(); param != null;\n           param = param.getNext()) {\n        Var var = fnScope.getVar(param.getString());\n        if (!referenced.contains(var)) {\n          toRemove.add(param);\n        }\n      }\n      for (Node param : toRemove) {\n        argList.removeChild(param);\n        compiler.reportCodeChange();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..8b35ef3b 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -385,21 +385,23 @@ class RemoveUnusedVars\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n+    Node argList = function.getSecondChild();\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n+      ArrayList<Node> toRemove = new ArrayList<Node>();\n+      for (Node param = argList.getFirstChild(); param != null;\n+           param = param.getNext()) {\n+        Var var = fnScope.getVar(param.getString());\n         if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+          toRemove.add(param);\n         }\n       }\n+      for (Node param : toRemove) {\n+        argList.removeChild(param);\n+        compiler.reportCodeChange();\n+      }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}