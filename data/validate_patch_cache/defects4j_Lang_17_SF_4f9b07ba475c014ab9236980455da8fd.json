{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    \n    for (int i = 0; i < input.length();) {\n        int codePoint = Character.codePointAt(input, i);\n        int consumed = translate(input, i, out);\n        if (consumed == 0) {\n            if (Character.charCount(codePoint) == 1) {\n                out.write(codePoint);\n            } else {\n                out.write(Character.highSurrogate(codePoint));\n                out.write(Character.lowSurrogate(codePoint));\n            }\n            consumed = Character.charCount(codePoint);\n        }\n        i += consumed;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..780aea07 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,36 +72,29 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = Character.codePointCount(input, 0, input.length());\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-            }\n-            else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n-                }\n-                pos--;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    \n+    for (int i = 0; i < input.length();) {\n+        int codePoint = Character.codePointAt(input, i);\n+        int consumed = translate(input, i, out);\n+        if (consumed == 0) {\n+            if (Character.charCount(codePoint) == 1) {\n+                out.write(codePoint);\n+            } else {\n+                out.write(Character.highSurrogate(codePoint));\n+                out.write(Character.lowSurrogate(codePoint));\n             }\n-            pos++;\n+            consumed = Character.charCount(codePoint);\n         }\n+        i += consumed;\n     }\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.ComparisonFailure: Failed to escape numeric entities supplementary characters expected:<&#68642;[]> but was:<&#68642;[&#56354;]>",
    "test_result": "FAIL"
}