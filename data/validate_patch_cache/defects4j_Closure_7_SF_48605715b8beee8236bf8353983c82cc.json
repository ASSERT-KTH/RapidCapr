{
    "patch": "/**\n * Retrieve the JSType corresponding to the specified native type string\n * from the current type registry.  May return null if the string is\n * not a valid native type.\n */\nprivate JSType getNativeType(String nativeType) {\n  ObjectTypeRegistry registry = getObjectTypeRegistry();\n  switch (nativeType) {\n    case U2U_CONSTRUCTOR_TYPE:\n    case 'Function':\n      return registry.getNativeObjectType(nativeType);\n    case 'Object':\n      return registry.getNativeObjectType('Object');\n    case 'Array':\n      return registry.getNativeObjectType('Array');\n    case 'RegExp':\n      return registry.getNativeObjectType('RegExp');\n    case 'Boolean':\n      return registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);\n    case 'Number':\n      return registry.getNativeType(JSTypeNative.NUMBER_TYPE);\n    case 'String':\n      return registry.getNativeType(JSTypeNative.STRING_TYPE);\n    case 'Void':\n      return registry.getNativeType(JSTypeNative.VOID_TYPE);\n    default:\n      return null;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..ef7dbcb2 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,35 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n-    }\n+/**\n+ * Retrieve the JSType corresponding to the specified native type string\n+ * from the current type registry.  May return null if the string is\n+ * not a valid native type.\n+ */\n+private JSType getNativeType(String nativeType) {\n+  ObjectTypeRegistry registry = getObjectTypeRegistry();\n+  switch (nativeType) {\n+    case U2U_CONSTRUCTOR_TYPE:\n+    case 'Function':\n+      return registry.getNativeObjectType(nativeType);\n+    case 'Object':\n+      return registry.getNativeObjectType('Object');\n+    case 'Array':\n+      return registry.getNativeObjectType('Array');\n+    case 'RegExp':\n+      return registry.getNativeObjectType('RegExp');\n+    case 'Boolean':\n+      return registry.getNativeType(JSTypeNative.BOOLEAN_TYPE);\n+    case 'Number':\n+      return registry.getNativeType(JSTypeNative.NUMBER_TYPE);\n+    case 'String':\n+      return registry.getNativeType(JSTypeNative.STRING_TYPE);\n+    case 'Void':\n+      return registry.getNativeType(JSTypeNative.VOID_TYPE);\n+    default:\n+      return null;\n+  }\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: unclosed character literal",
    "test_result": "ERROR"
}