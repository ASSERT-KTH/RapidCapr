{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable) {\n    Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n    if (type != null) {\n        contextualActualTypeParameters.put(typeParameter, type);\n    } else {\n        TypeVariable<?>[] selfTypeVariables = ((TypeVariable<?>) actualTypeArgument).getGenericDeclaration().getTypeParameters();\n        if (Arrays.asList(selfTypeVariables).contains(actualTypeArgument)) {\n            contextualActualTypeParameters.put(typeParameter, typeParameter);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n} else {",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..31a7330c1 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,19 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+    Type type = this.contextualActualTypeParameters.get(actualTypeArgument);\n+    if (type != null) {\n+        contextualActualTypeParameters.put(typeParameter, type);\n+    } else {\n+        TypeVariable<?>[] selfTypeVariables = ((TypeVariable<?>) actualTypeArgument).getGenericDeclaration().getTypeParameters();\n+        if (Arrays.asList(selfTypeVariables).contains(actualTypeArgument)) {\n+            contextualActualTypeParameters.put(typeParameter, typeParameter);\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+} else {\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}