{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    // Keeps track of arguments that have been analyzed for side-effects.\n    Set<Node> parametersWithoutSideEffects = getParametersWithoutSideEffects(call);\n\n    while (arguments.hasNext() && parameters.hasNext()) {\n      // If there are no parameters left in the list, then the while loop\n      // above implies that this must be a var_args function.\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n\n      if (argument.getBooleanProp(Node.SIDE_EFFECT_FREE)) {\n        // This argument is side-effect-free, so it is okay to use multiple\n        // times in the call (which may occur inside expectArgumentMatchesParameter).\n        continue;\n      }\n\n      // Ensure that future usage of this argument will be checked for side-effects.\n      if (!parametersWithoutSideEffects.contains(argument)) {\n        parametersWithoutSideEffects.add(argument);\n        // Ensure that even if the parameter already has an unconstrained type,\n        // it will now have a more precise (narrower) type in order to facilitate\n        // proper tracking of side-effects.  See b/67535286.  This only handles\n        // the case where the unconstrained type is a union with the wildcard.\n        if (argument.getJSType() != null && argument.getJSType().isUnionType() &&\n            argument.getJSType().isAllType()) {\n          argument.setJSType(parameter.getJSType());\n        }\n      }\n    }\n\n    int numArgs = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n    if (minArgs > numArgs || maxArgs < numArgs) {\n      String message = \"Wrong number of arguments for function \"\n          + validator.getReadableJSTypeName(call.getFirstChild(), false) + \". Expected \";\n\n      if (minArgs == maxArgs) {\n        message += Integer.toString(minArgs);\n      } else {\n        message += \"at least \" + minArgs + \" and no more than \" + maxArgs;\n      }\n\n      report(t, call, WRONG_ARGUMENT_COUNT, message + \" argument(s), but found \" + numArgs + \".\");\n    }\n  }\n\n  /**\n   * Returns a set of all the parameters of a function call that do not have any side-effects.\n   *\n   * @param call The function call.\n   * @return A set of parameters without side-effects.\n   */\n  private Set<Node> getParametersWithoutSideEffects(Node call) {\n    if (!call.isCall()) {\n      throw new IllegalStateException(\"Unexpected node passed to getParametersWithoutSideEffects\");\n    }\n    FunctionType functionType = call.getLastChild().getJSType().toMaybeFunctionType();\n    if (functionType == null) {\n      throw new IllegalStateException(\n          \"Unexpected node structure - could not get function type from call node\");\n    }\n    Set<Node> result = parameterCache.get(parametersKey(call));\n    if (result != null) {\n      return result;\n    }\n    result = new HashSet<>();\n    for (Node parameter : functionType.getParameters()) {\n      if (NodeUtil.mayHaveSideEffects(parameter) && parameter.isName()) {\n        result.add(parameter);\n      }\n    }\n    parameterCache.put(parametersKey(call), result);\n    return result;\n  }\n\n  /**\n   * Returns a string that uniquely identifies the function call.\n   *\n   * @param call The function call.\n   * @return A string that identifies the function call for use in the cache.\n   */\n  private String parametersKey(Node call) {\n    String result = call.getQueueAnnotation() == null ? null : call.getQueueAnnotation().getDisplayName();\n    if (result != null) {\n      return result;\n    }\n    Node callee = call.getFirstChild();\n    JSType calleeType = callee.getJSType();\n    if (calleeType != null && calleeType.toObjectType() != null) {\n      FunctionType functionType = calleeType.toObjectType().getConstructor();\n      if (functionType.isGeneric()) {\n        functionType = functionType.instantiateGenerics(JSTypeRegistry.EMPTY_MAP, registry);\n      }\n      result = functionType.toString();\n    } else {\n      result = String.valueOf(callee.hashCode());\n    }\n    return result + '@' + System.identityHashCode(callee.getScope());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..7023f161 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1405,28 +1405,109 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n+\n+    // Keeps track of arguments that have been analyzed for side-effects.\n+    Set<Node> parametersWithoutSideEffects = getParametersWithoutSideEffects(call);\n+\n+    while (arguments.hasNext() && parameters.hasNext()) {\n       // If there are no parameters left in the list, then the while loop\n       // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n       validator.expectArgumentMatchesParameter(t, argument,\n           getJSType(argument), getJSType(parameter), call, ordinal);\n+\n+      if (argument.getBooleanProp(Node.SIDE_EFFECT_FREE)) {\n+        // This argument is side-effect-free, so it is okay to use multiple\n+        // times in the call (which may occur inside expectArgumentMatchesParameter).\n+        continue;\n+      }\n+\n+      // Ensure that future usage of this argument will be checked for side-effects.\n+      if (!parametersWithoutSideEffects.contains(argument)) {\n+        parametersWithoutSideEffects.add(argument);\n+        // Ensure that even if the parameter already has an unconstrained type,\n+        // it will now have a more precise (narrower) type in order to facilitate\n+        // proper tracking of side-effects.  See b/67535286.  This only handles\n+        // the case where the unconstrained type is a union with the wildcard.\n+        if (argument.getJSType() != null && argument.getJSType().isUnionType() &&\n+            argument.getJSType().isAllType()) {\n+          argument.setJSType(parameter.getJSType());\n+        }\n+      }\n     }\n \n     int numArgs = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n     if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+      String message = \"Wrong number of arguments for function \"\n+          + validator.getReadableJSTypeName(call.getFirstChild(), false) + \". Expected \";\n+\n+      if (minArgs == maxArgs) {\n+        message += Integer.toString(minArgs);\n+      } else {\n+        message += \"at least \" + minArgs + \" and no more than \" + maxArgs;\n+      }\n+\n+      report(t, call, WRONG_ARGUMENT_COUNT, message + \" argument(s), but found \" + numArgs + \".\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a set of all the parameters of a function call that do not have any side-effects.\n+   *\n+   * @param call The function call.\n+   * @return A set of parameters without side-effects.\n+   */\n+  private Set<Node> getParametersWithoutSideEffects(Node call) {\n+    if (!call.isCall()) {\n+      throw new IllegalStateException(\"Unexpected node passed to getParametersWithoutSideEffects\");\n+    }\n+    FunctionType functionType = call.getLastChild().getJSType().toMaybeFunctionType();\n+    if (functionType == null) {\n+      throw new IllegalStateException(\n+          \"Unexpected node structure - could not get function type from call node\");\n+    }\n+    Set<Node> result = parameterCache.get(parametersKey(call));\n+    if (result != null) {\n+      return result;\n+    }\n+    result = new HashSet<>();\n+    for (Node parameter : functionType.getParameters()) {\n+      if (NodeUtil.mayHaveSideEffects(parameter) && parameter.isName()) {\n+        result.add(parameter);\n+      }\n+    }\n+    parameterCache.put(parametersKey(call), result);\n+    return result;\n+  }\n+\n+  /**\n+   * Returns a string that uniquely identifies the function call.\n+   *\n+   * @param call The function call.\n+   * @return A string that identifies the function call for use in the cache.\n+   */\n+  private String parametersKey(Node call) {\n+    String result = call.getQueueAnnotation() == null ? null : call.getQueueAnnotation().getDisplayName();\n+    if (result != null) {\n+      return result;\n+    }\n+    Node callee = call.getFirstChild();\n+    JSType calleeType = callee.getJSType();\n+    if (calleeType != null && calleeType.toObjectType() != null) {\n+      FunctionType functionType = calleeType.toObjectType().getConstructor();\n+      if (functionType.isGeneric()) {\n+        functionType = functionType.instantiateGenerics(JSTypeRegistry.EMPTY_MAP, registry);\n+      }\n+      result = functionType.toString();\n+    } else {\n+      result = String.valueOf(callee.hashCode());\n     }\n+    return result + '@' + System.identityHashCode(callee.getScope());\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}