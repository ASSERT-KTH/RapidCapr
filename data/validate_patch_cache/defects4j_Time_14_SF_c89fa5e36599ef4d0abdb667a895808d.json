{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    Partial newPartial = partial.withFieldAdded(DurationFieldType.months(), valueToAdd);\n    int[] newValues = newPartial.getValues();\n    if (partial.getChronology().getDateTimeMillis(newPartial) > partial.getChronology().getDateTimeMillis(partial)) {\n        // Adding months has pushed the date past the end of the month, so set to the last day of the month\n        Chronology chrono = partial.getChronology();\n        int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n        int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        int day = chrono.dayOfMonth().getMaximumValue(year, month);\n        newPartial = newPartial.withField(DateTimeFieldType.dayOfMonth(), day);\n        newValues = newPartial.getValues();\n    }\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..8d6346ba 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,25 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    Partial newPartial = partial.withFieldAdded(DurationFieldType.months(), valueToAdd);\n+    int[] newValues = newPartial.getValues();\n+    if (partial.getChronology().getDateTimeMillis(newPartial) > partial.getChronology().getDateTimeMillis(partial)) {\n+        // Adding months has pushed the date past the end of the month, so set to the last day of the month\n+        Chronology chrono = partial.getChronology();\n+        int year = newValues[DateTimeFieldType.year().getFieldIndex()];\n+        int month = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        int day = chrono.dayOfMonth().getMaximumValue(year, month);\n+        newPartial = newPartial.withField(DateTimeFieldType.dayOfMonth(), day);\n+        newValues = newPartial.getValues();\n     }\n+    return newValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}