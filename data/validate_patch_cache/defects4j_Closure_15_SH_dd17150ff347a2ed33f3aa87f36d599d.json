{
    "patch": "if (n.isReturn()) {\n  return NodeUtil.mayHaveSideEffects(n.getFirstChild());\n}\n\nif (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n  return true;\n}\n\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n  return true;\n}\n\nfor (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n  if (apply(c)) {\n    return true;\n  }\n  if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n    break;\n  }\n}\nreturn false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..f9b21a65 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,27 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isReturn()) {\n+  return NodeUtil.mayHaveSideEffects(n.getFirstChild());\n+}\n+\n+if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+  return true;\n+}\n+\n+if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+  return true;\n+}\n+\n+for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+  if (apply(c)) {\n+    return true;\n+  }\n+  if (!ControlFlowGraph.isEnteringNewCfgNode(c)) {\n+    break;\n+  }\n+}\n+return false;\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}