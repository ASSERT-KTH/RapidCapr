{
    "patch": "class MyTransformDispatcher implements TypeSafeDispatcher<Node> {\n  private final CompilerOptions options;\n  private final ErrorReporter errorReporter;\n  private final String sourceName;\n  private final Map<AstNode, Node> nodeMap;\n  private final Set<Integer> directivePrologueOffsets;\n  private final CodingConvention codingConvention;\n  private final AbstractCompiler compiler;\n\n  MyTransformDispatcher(\n      CompilerOptions options,\n      ErrorReporter errorReporter,\n      String sourceName,\n      Map<AstNode, Node> nodeMap,\n      Set<Integer> directivePrologueOffsets,\n      CodingConvention codingConvention,\n      AbstractCompiler compiler) {\n    this.options = options;\n    this.errorReporter = errorReporter;\n    this.sourceName = sourceName;\n    this.nodeMap = nodeMap;\n    this.directivePrologueOffsets = directivePrologueOffsets;\n    this.codingConvention = codingConvention;\n    this.compiler = compiler;\n  }\n\n  @Override\n  public Node processArrayComprehension(ArrayComprehension node) {\n    Node val = transform(node.getResultExpression());\n    Node arrayComprehension = newNode(Token.ARRAYLIT);\n    arrayComprehension.addChildToBack(newNode(Token.ARRAY_COMP_INIT, val));\n    Node blocks = newNode(Token.ARRAY_COMP_FOR);\n    for (ArrayComprehensionLoop loopNode : node.getLoops()) {\n      Node lc = newNode(Token.ARRAY_COMP_LOOP);\n      lc.addChildToBack(\n          newNode(Token.NAME, loopNode.getIterator().toSource()));\n      lc.addChildToBack(transform(loopNode.getIteratedObject()));\n      blocks.addChildToBack(lc);\n    }\n    arrayComprehension.addChildToBack(blocks);\n    return arrayComprehension;\n  }\n\n  @Override\n  public Node processAstRoot(AstRoot astRoot) {\n    return processGeneric(astRoot);\n  }\n\n  @Override\n  public Node processAssignment(Assignment node) {\n    return newNode(\n        transformTokenType(node.getType()),\n        transform(node.getLeft()),\n        transform(node.getRight()));\n  }\n\n  @Override\n  public Node processBlock(Block blockNode) {\n    return processGeneric(blockNode);\n  }\n\n  @Override\n  public Node processBreakStatement(BreakStatement statementNode) {\n    Node node = newNode(Token.BREAK);\n    if (statementNode.getBreakLabel() != null) {\n      Node labelName = transform(statementNode.getBreakLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  public Node processCaseClause(CaseClause clauseNode) {\n    Node node = newNode(Token.CASE, transform(clauseNode.getExpression()));\n    for (AstNode statement : clauseNode.getStatements()) {\n      node.addChildToBack(transform(statement));\n    }\n    return node;\n  }\n\n  @Override\n  public Node processCatchClause(CatchClause clauseNode) {\n    AstNode catchVar = clauseNode.getVarName();\n    Node node = newNode(Token.CATCH, transform(catchVar));\n    if (clauseNode.getCatchCondition() != null) {\n      errorReporter.error(\n          \"Catch clauses are not supported\",\n          sourceName,\n          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n    }\n    node.addChildToBack(transformBlock(clauseNode.getBody()));\n    return node;\n  }\n\n  @Override\n  public Node processComment(Comment commentNode) {\n    return newNode(Token.EMPTY);\n  }\n\n  @Override\n  public Node processConditionalExpression(ConditionalExpression exprNode) {\n    return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n  }\n\n  @Override\n  public Node processContinueStatement(ContinueStatement statementNode) {\n    Node node = newNode(Token.CONTINUE);\n    if (statementNode.getLabel() != null) {\n      Node labelName = transform(statementNode.getLabel());\n      // Change the NAME to LABEL_NAME\n      labelName.setType(Token.LABEL_NAME);\n      node.addChildToBack(labelName);\n    }\n    return node;\n  }\n\n  @Override\n  public Node processDoLoop(DoLoop loopNode) {\n    return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n  }\n\n  @Override\n  public Node processElementGet(ElementGet getNode) {\n    return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n  }\n\n  @Override\n  public Node processEmptyExpression(EmptyExpression exprNode) {\n    return newNode(Token.EMPTY);\n  }\n\n  @Override\n  public Node processExpressionStatement(ExpressionStatement statementNode) {\n    Node node = newNode(transformTokenType(statementNode.getType()));\n    node.addChildToBack(transform(statementNode.getExpression()));\n    return node;\n  }\n\n  @Override\n  public Node processForInLoop(ForInLoop loopNode) {\n    return newNode(\n        Token.FOR,\n        transform(loopNode.getIterator()),\n        transform(loopNode.getIteratedObject()),\n        transformBlock(loopNode.getBody()));\n  }\n\n  @Override\n  public Node processForLoop(ForLoop loopNode) {\n    Node node = newNode(\n        Token.FOR,\n        transform(loopNode.getInitializer()),\n        transform(loopNode.getCondition()),\n        transform(loopNode.getIncrement()));\n    node.addChildToBack(transformBlock(loopNode.getBody()));\n    return node;\n  }\n\n  @Override\n  public Node processFunction(FunctionNode functionNode) {\n    Node functionName = transform(functionNode.getFunctionName());\n    Node functionBody = transform(functionNode.getBody());\n    Node parameters = transform(functionNode.getParams());\n\n    Node fnNode = newNode(Token.FUNCTION);\n    if (functionName != null) {\n      // If the function has a name, set the line number and charno\n      // for the function name explicitly, since these values are not set by the\n      // `transform` function.\n      functionName.setLineno(functionNode.getLineno());\n      functionName.setCharno(position2charno(functionNode.getFunctionName().getAbsolutePosition()));\n      fnNode.addChildToBack(functionName);\n    } else {\n      // Otherwise, use an empty name node to represent the function name.\n      Node emptyName = newNode(Token.NAME, \"\");\n      emptyName.setLineno(functionNode.getLineno());\n      emptyName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n      fnNode.addChildToBack(emptyName);\n    }\n\n    Node parametersNode = newNode(Token.PARAM_LIST);\n    for (Node param : parameters.children()) {\n      if (param.getType() == Token.NAME) {\n        param.setType(Token.PARAM_NAME);\n      }\n      parametersNode.addChildToBack(param);\n    }\n\n    Node bodyNode = processFunctionBody(functionNode, functionBody);\n    fnNode.addChildToBack(parametersNode);\n    fnNode.addChildToBack(bodyNode);\n\n    return fnNode;\n  }\n\n  private Node processFunctionBody(FunctionNode fnNode, Node functionBody) {\n    Node blockNode = null;\n    if (functionBody.getType() == Token.BLOCK) {\n      blockNode = functionBody;\n    } else if (functionBody.getType() == Token.SCRIPT) {\n      blockNode = newNode(Token.BLOCK, functionBody.getLineno(), functionBody.getCharno());\n      for (AstNode statement : functionBody) {\n        blockNode.addChildToBack(transform(statement));\n      }\n    } else {\n      throw new RuntimeException(\"Invalid function body type: \" + Token.name(functionBody.getType()));\n    }\n    int positionAfterBlock =\n        fnNode.getBody().getAbsolutePosition() + fnNode.getBody().getLength();\n    Node scriptNode = newNode(Token.SCRIPT, blockNode, positionAfterBloc",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..aa3e10da 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,182 +384,228 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n+class MyTransformDispatcher implements TypeSafeDispatcher<Node> {\n+  private final CompilerOptions options;\n+  private final ErrorReporter errorReporter;\n+  private final String sourceName;\n+  private final Map<AstNode, Node> nodeMap;\n+  private final Set<Integer> directivePrologueOffsets;\n+  private final CodingConvention codingConvention;\n+  private final AbstractCompiler compiler;\n+\n+  MyTransformDispatcher(\n+      CompilerOptions options,\n+      ErrorReporter errorReporter,\n+      String sourceName,\n+      Map<AstNode, Node> nodeMap,\n+      Set<Integer> directivePrologueOffsets,\n+      CodingConvention codingConvention,\n+      AbstractCompiler compiler) {\n+    this.options = options;\n+    this.errorReporter = errorReporter;\n+    this.sourceName = sourceName;\n+    this.nodeMap = nodeMap;\n+    this.directivePrologueOffsets = directivePrologueOffsets;\n+    this.codingConvention = codingConvention;\n+    this.compiler = compiler;\n+  }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n+  @Override\n+  public Node processArrayComprehension(ArrayComprehension node) {\n+    Node val = transform(node.getResultExpression());\n+    Node arrayComprehension = newNode(Token.ARRAYLIT);\n+    arrayComprehension.addChildToBack(newNode(Token.ARRAY_COMP_INIT, val));\n+    Node blocks = newNode(Token.ARRAY_COMP_FOR);\n+    for (ArrayComprehensionLoop loopNode : node.getLoops()) {\n+      Node lc = newNode(Token.ARRAY_COMP_LOOP);\n+      lc.addChildToBack(\n+          newNode(Token.NAME, loopNode.getIterator().toSource()));\n+      lc.addChildToBack(transform(loopNode.getIteratedObject()));\n+      blocks.addChildToBack(lc);\n     }\n+    arrayComprehension.addChildToBack(blocks);\n+    return arrayComprehension;\n+  }\n \n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n+  @Override\n+  public Node processAstRoot(AstRoot astRoot) {\n+    return processGeneric(astRoot);\n+  }\n \n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  @Override\n+  public Node processAssignment(Assignment node) {\n+    return newNode(\n+        transformTokenType(node.getType()),\n+        transform(node.getLeft()),\n+        transform(node.getRight()));\n+  }\n \n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processBlock(Block blockNode) {\n+    return processGeneric(blockNode);\n+  }\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+  @Override\n+  public Node processBreakStatement(BreakStatement statementNode) {\n+    Node node = newNode(Token.BREAK);\n+    if (statementNode.getBreakLabel() != null) {\n+      Node labelName = transform(statementNode.getBreakLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n+  @Override\n+  public Node processCaseClause(CaseClause clauseNode) {\n+    Node node = newNode(Token.CASE, transform(clauseNode.getExpression()));\n+    for (AstNode statement : clauseNode.getStatements()) {\n+      node.addChildToBack(transform(statement));\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+  @Override\n+  public Node processCatchClause(CatchClause clauseNode) {\n+    AstNode catchVar = clauseNode.getVarName();\n+    Node node = newNode(Token.CATCH, transform(catchVar));\n+    if (clauseNode.getCatchCondition() != null) {\n+      errorReporter.error(\n+          \"Catch clauses are not supported\",\n+          sourceName,\n+          clauseNode.getCatchCondition().getLineno(), \"\", 0);\n     }\n+    node.addChildToBack(transformBlock(clauseNode.getBody()));\n+    return node;\n+  }\n \n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n+  @Override\n+  public Node processComment(Comment commentNode) {\n+    return newNode(Token.EMPTY);\n+  }\n \n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n+  @Override\n+  public Node processConditionalExpression(ConditionalExpression exprNode) {\n+    return newNode(\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n+  }\n \n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n+  @Override\n+  public Node processContinueStatement(ContinueStatement statementNode) {\n+    Node node = newNode(Token.CONTINUE);\n+    if (statementNode.getLabel() != null) {\n+      Node labelName = transform(statementNode.getLabel());\n+      // Change the NAME to LABEL_NAME\n+      labelName.setType(Token.LABEL_NAME);\n+      node.addChildToBack(labelName);\n     }\n+    return node;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Override\n+  public Node processDoLoop(DoLoop loopNode) {\n+    return newNode(\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n+  }\n \n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n+  @Override\n+  public Node processElementGet(ElementGet getNode) {\n+    return newNode(\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n+  }\n \n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n-      }\n+  @Override\n+  public Node processEmptyExpression(EmptyExpression exprNode) {\n+    return newNode(Token.EMPTY);\n+  }\n \n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n+  @Override\n+  public Node processExpressionStatement(ExpressionStatement statementNode) {\n+    Node node = newNode(transformTokenType(statementNode.getType()));\n+    node.addChildToBack(transform(statementNode.getExpression()));\n+    return node;\n+  }\n+\n+  @Override\n+  public Node processForInLoop(ForInLoop loopNode) {\n+    return newNode(\n+        Token.FOR,\n+        transform(loopNode.getIterator()),\n+        transform(loopNode.getIteratedObject()),\n+        transformBlock(loopNode.getBody()));\n+  }\n+\n+  @Override\n+  public Node processForLoop(ForLoop loopNode) {\n+    Node node = newNode(\n+        Token.FOR,\n+        transform(loopNode.getInitializer()),\n+        transform(loopNode.getCondition()),\n+        transform(loopNode.getIncrement()));\n+    node.addChildToBack(transformBlock(loopNode.getBody()));\n+    return node;\n+  }\n+\n+  @Override\n+  public Node processFunction(FunctionNode functionNode) {\n+    Node functionName = transform(functionNode.getFunctionName());\n+    Node functionBody = transform(functionNode.getBody());\n+    Node parameters = transform(functionNode.getParams());\n+\n+    Node fnNode = newNode(Token.FUNCTION);\n+    if (functionName != null) {\n+      // If the function has a name, set the line number and charno\n+      // for the function name explicitly, since these values are not set by the\n+      // `transform` function.\n+      functionName.setLineno(functionNode.getLineno());\n+      functionName.setCharno(position2charno(functionNode.getFunctionName().getAbsolutePosition()));\n+      fnNode.addChildToBack(functionName);\n+    } else {\n+      // Otherwise, use an empty name node to represent the function name.\n+      Node emptyName = newNode(Token.NAME, \"\");\n+      emptyName.setLineno(functionNode.getLineno());\n+      emptyName.setCharno(position2charno(functionNode.getAbsolutePosition()));\n+      fnNode.addChildToBack(emptyName);\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n+    Node parametersNode = newNode(Token.PARAM_LIST);\n+    for (Node param : parameters.children()) {\n+      if (param.getType() == Token.NAME) {\n+        param.setType(Token.PARAM_NAME);\n       }\n+      parametersNode.addChildToBack(param);\n+    }\n \n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n+    Node bodyNode = processFunctionBody(functionNode, functionBody);\n+    fnNode.addChildToBack(parametersNode);\n+    fnNode.addChildToBack(bodyNode);\n \n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n+    return fnNode;\n+  }\n \n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+  private Node processFunctionBody(FunctionNode fnNode, Node functionBody) {\n+    Node blockNode = null;\n+    if (functionBody.getType() == Token.BLOCK) {\n+      blockNode = functionBody;\n+    } else if (functionBody.getType() == Token.SCRIPT) {\n+      blockNode = newNode(Token.BLOCK, functionBody.getLineno(), functionBody.getCharno());\n+      for (AstNode statement : functionBody) {\n+        blockNode.addChildToBack(transform(statement));\n+      }\n+    } else {\n+      throw new RuntimeException(\"Invalid function body type: \" + Token.name(functionBody.getType()));\n     }\n+    int positionAfterBlock =\n+        fnNode.getBody().getAbsolutePosition() + fnNode.getBody().getLength();\n+    Node scriptNode = newNode(Token.SCRIPT, blockNode, positionAfterBloc\n \n     @Override\n     Node processIfStatement(IfStatement statementNode) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}