{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour,\n                              int secondOfMinute, int millisOfSecond)\n    throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis\n            (year, monthOfYear, dayOfMonth,\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Assume date is Gregorian.\n    long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, 1,\n                                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    \n    // check if either the Julian or the Gregorian calendar is in effect\n    if (instant < iCutoverMillis) {\n        // Maybe it's Julian.\n        int daysInMonth = iJulianChronology.getDaysInYearMonth(year, monthOfYear);\n        if (dayOfMonth > daysInMonth) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n        if (instant >= iCutoverMillis) {\n          // Okay, it's in the illegal cutover gap.\n          throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    } else {\n        int daysInMonth = iGregorianChronology.getDaysInYearMonth(year, monthOfYear);\n        if (dayOfMonth > daysInMonth) {\n            throw new IllegalArgumentException(\"Specified date does not exist\");\n        }\n    }\n\n    return instant;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..957bf1ac 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -346,37 +346,45 @@ public final class GJChronology extends AssembledChronology {\n         }\n         return instant;\n     }\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour,\n+                              int secondOfMinute, int millisOfSecond)\n+    throws IllegalArgumentException\n+{\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis\n+            (year, monthOfYear, dayOfMonth,\n+             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n-        throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n-\n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n-            }\n+    // Assume date is Gregorian.\n+    long instant = iGregorianChronology.getDateTimeMillis(year, monthOfYear, 1,\n+                                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    \n+    // check if either the Julian or the Gregorian calendar is in effect\n+    if (instant < iCutoverMillis) {\n+        // Maybe it's Julian.\n+        int daysInMonth = iJulianChronology.getDaysInYearMonth(year, monthOfYear);\n+        if (dayOfMonth > daysInMonth) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+        instant = iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                                                       hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        if (instant >= iCutoverMillis) {\n+          // Okay, it's in the illegal cutover gap.\n+          throw new IllegalArgumentException(\"Specified date does not exist\");\n+        }\n+    } else {\n+        int daysInMonth = iGregorianChronology.getDaysInYearMonth(year, monthOfYear);\n+        if (dayOfMonth > daysInMonth) {\n+            throw new IllegalArgumentException(\"Specified date does not exist\");\n         }\n-        return instant;\n     }\n \n+    return instant;\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "junit.framework.AssertionFailedError: expected:<9> but was:<1>",
    "test_result": "FAIL"
}