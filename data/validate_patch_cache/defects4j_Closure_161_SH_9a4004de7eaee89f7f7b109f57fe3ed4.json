{
    "patch": "// Check if the array access is not used as the left-hand side of an assignment operation\nif (!NodeUtil.isLValue(n)) {\n  Node grandparent = parent.getParent();\n  if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n    if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n      return n;\n    }\n    // Check if the right-hand side of the assignment is an immutable value\n    Node assignRight = parent.getLastChild();\n    if (NodeUtil.isImmutableValue(assig",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..595ef72a 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,16 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the array access is not used as the left-hand side of an assignment operation\n+if (!NodeUtil.isLValue(n)) {\n+  Node grandparent = parent.getParent();\n+  if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+    if (grandparent != null && grandparent.getType() == Token.EXPR_RESULT) {\n+      return n;\n+    }\n+    // Check if the right-hand side of the assignment is an immutable value\n+    Node assignRight = parent.getLastChild();\n+    if (NodeUtil.isImmutableValue(assig\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}