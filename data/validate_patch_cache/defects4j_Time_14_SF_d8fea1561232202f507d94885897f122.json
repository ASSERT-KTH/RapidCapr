{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    Chronology chrono = partial.getChronology();\n\n    // Get the value of the field being modified\n    int fieldValue = values[fieldIndex];\n\n    // Handle month overflow\n    if (fieldIndex == 1) { // Month\n        int year = values[0];\n        int month = (fieldValue + valueToAdd - 1) % 12 + 1;\n        if (month < 1) {\n            month += 12;\n        }\n\n        // Handle Feb 29th\n        try {\n            int dayOfMonthMax = chrono.dayOfMonth().getMaximumValue(new LocalDate(year, month, 1));\n            if (fieldValue > dayOfMonthMax) {\n                fieldValue = dayOfMonthMax;\n            }\n        } catch (RuntimeException ex) {\n            // Assume year/month combination is invalid\n        }\n\n        values[0] += (fieldValue + valueToAdd - 1) / 12;\n        values[1] = month;\n        return chrono.get(partial, values[0], values[1], values[2], values[3], values[4], values[5], values[6]);\n    }\n    // month is largest field and being added to, such as month-day\n    else if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..ef527841 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,52 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    Chronology chrono = partial.getChronology();\n+\n+    // Get the value of the field being modified\n+    int fieldValue = values[fieldIndex];\n+\n+    // Handle month overflow\n+    if (fieldIndex == 1) { // Month\n+        int year = values[0];\n+        int month = (fieldValue + valueToAdd - 1) % 12 + 1;\n+        if (month < 1) {\n+            month += 12;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+\n+        // Handle Feb 29th\n+        try {\n+            int dayOfMonthMax = chrono.dayOfMonth().getMaximumValue(new LocalDate(year, month, 1));\n+            if (fieldValue > dayOfMonthMax) {\n+                fieldValue = dayOfMonthMax;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+        } catch (RuntimeException ex) {\n+            // Assume year/month combination is invalid\n         }\n+\n+        values[0] += (fieldValue + valueToAdd - 1) / 12;\n+        values[1] = month;\n+        return chrono.get(partial, values[0], values[1], values[2], values[3], values[4], values[5], values[6]);\n     }\n+    // month is largest field and being added to, such as month-day\n+    else if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n+    }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}