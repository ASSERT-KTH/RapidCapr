{
    "patch": "        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if (Double.isNaN(result[resultOffset])) {\n            if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) { // Special cases\n                if (y[yOffset] > 0) {\n                    result[resultOffset] = FastMath.PI / 2.0;\n                } else if (y[yOffset] < 0) {\n                    result[resultOffset] = -FastMath.PI / 2.0;\n                } else { // y == 0\n                    if (x[xOffset] > 0) {\n                        result[resultOffset] = 0.0;\n                    } else if (x[xOffset] < 0) {\n                        result[resultOffset] = FastMath.PI;\n                    } else { // x == 0\n                        result[resultOffset] = Double.NaN;\n                    }\n                }\n            } else {\n                result[resultOffset] = y[yOffset] / x[xOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..2b8f9fa80 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,26 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(result[resultOffset])) {\n+            if (Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset])) { // Special cases\n+                if (y[yOffset] > 0) {\n+                    result[resultOffset] = FastMath.PI / 2.0;\n+                } else if (y[yOffset] < 0) {\n+                    result[resultOffset] = -FastMath.PI / 2.0;\n+                } else { // y == 0\n+                    if (x[xOffset] > 0) {\n+                        result[resultOffset] = 0.0;\n+                    } else if (x[xOffset] < 0) {\n+                        result[resultOffset] = FastMath.PI;\n+                    } else { // x == 0\n+                        result[resultOffset] = Double.NaN;\n+                    }\n+                }\n+            } else {\n+                result[resultOffset] = y[yOffset] / x[xOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+            }\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<-1.5707963267948966>",
    "test_result": "FAIL"
}