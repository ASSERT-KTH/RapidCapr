{
    "patch": "  private boolean isOneExactlyFunctionOrDo(Node n) {\n      if (n.isLabel()) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild != null && firstChild.getType() == Token.BLOCK) {\n          int numChildren = firstChild.getChildCount();\n          return ((numChildren == 1 && isOneExactlyFunctionOrDo(firstChild.getFirstChild())) || numChildren == 0);\n        }\n      }\n      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..fd9a1d41 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -706,11 +706,13 @@ class CodeGenerator {\n    * labels).\n    */\n   private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n+      if (n.isLabel()) {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild != null && firstChild.getType() == Token.BLOCK) {\n+          int numChildren = firstChild.getChildCount();\n+          return ((numChildren == 1 && isOneExactlyFunctionOrDo(firstChild.getFirstChild())) || numChildren == 0);\n+        }\n+      }\n       return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}