{
    "patch": "    if (first.isGetProp()) {\n      // Handle `foo.bar()` and `foo['bar']()` calls.\n      if (first.getNext() != null && NodeUtil.isLiteralValue(first.getNext())) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n    } else if (!NodeUtil.mayHaveSideEffects(first)) {\n      n.putBooleanProp(Node.FREE_CALL, true);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..1f7e9fa2 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,14 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    if (first.isGetProp()) {\n+      // Handle `foo.bar()` and `foo['bar']()` calls.\n+      if (first.getNext() != null && NodeUtil.isLiteralValue(first.getNext())) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+    } else if (!NodeUtil.mayHaveSideEffects(first)) {\n+      n.putBooleanProp(Node.FREE_CALL, true);\n+    }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: method isLiteralValue in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}