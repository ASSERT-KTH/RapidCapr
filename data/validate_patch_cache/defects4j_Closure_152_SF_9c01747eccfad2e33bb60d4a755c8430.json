{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    // Resolve all the types first before calling super.resolveInternal()\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n\n    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n    \n    for (ObjectType iface : implementedInterfaces) {\n      if (iface instanceof ObjectType) {\n        resolvedInterfaces.add((ObjectType) iface.resolve(t, scope));\n      }\n    }\n    \n    implementedInterfaces = resolvedInterfaces.build();\n\n    if (subTypes != null) {\n      List<JSType> newSubTypes = new ArrayList<>();\n      \n      for (int i = 0; i < subTypes.size(); i++) {\n        if (subTypes.get(i) instanceof FunctionType) {\n          newSubTypes.add((FunctionType) subTypes.get(i).resolve(t, scope));\n        } else {\n          newSubTypes.add((RecordType) subTypes.get(i).resolve(t, scope));\n        }\n      }\n      \n      subTypes = newSubTypes;\n    }\n    \n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..db82cb4c 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -862,32 +862,35 @@ public class FunctionType extends PrototypeObjectType {\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n+    // Resolve all the types first before calling super.resolveInternal()\n     call = (ArrowType) safeResolve(call, t, scope);\n     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-\n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n     typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n \n-    boolean changed = false;\n-    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n+    ImmutableList.Builder<ObjectType> resolvedInterfaces = ImmutableList.builder();\n+    \n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n-    }\n-    if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n+      if (iface instanceof ObjectType) {\n+        resolvedInterfaces.add((ObjectType) iface.resolve(t, scope));\n+      }\n     }\n+    \n+    implementedInterfaces = resolvedInterfaces.build();\n \n     if (subTypes != null) {\n+      List<JSType> newSubTypes = new ArrayList<>();\n+      \n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        if (subTypes.get(i) instanceof FunctionType) {\n+          newSubTypes.add((FunctionType) subTypes.get(i).resolve(t, scope));\n+        } else {\n+          newSubTypes.add((RecordType) subTypes.get(i).resolve(t, scope));\n+        }\n       }\n+      \n+      subTypes = newSubTypes;\n     }\n-\n+    \n     return super.resolveInternal(t, scope);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}