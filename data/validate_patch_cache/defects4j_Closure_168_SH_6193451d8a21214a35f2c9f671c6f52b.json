{
    "patch": "      if (t.getScopeDepth() > 2 || NodeUtil.isLoopStructure(n)) {\n        if (n.isName() && !n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n          // record assigned names for function expression if possible\n          Node functionNode = NodeUtil.getEnclosingFunction(n);\n          if (functionNode != null && functionNode.isFunction()) {\n            Node functionNameNode = functionNode.getFirstChild();\n            if (!functionNameNode.isEmpty()) {\n              data.get(functionNode).recordAssignedName(n.getString());\n            }\n            return;\n          }\n          data.get(t.getScopeRoot()).recordAssignedName(n.getString());\n        } else if (n.isGetProp()) {\n          if (!n.isQualifiedName()) {\n            // Don't handle qualified names or anything where the root node isn't a name.\n            return;\n          }\n          String qualifiedName = n.getQualifiedName();\n          String rootName = n.getFirstChild().getQualifiedName();\n          if (t.getScope().getVar(rootName) == null) {\n            // We don't handle qualified names for variables that don't exist in the current scope. They'll\n            // either get assigned to a parent scope, or will be a global and get handled elsewhere.\n            return;\n          } else if (n.isQualifiedName() && rootName.equals(\"this\")) {\n            // Record 'this.propName' as an escaped name, because it escapes the current scope.\n            data.get(t.getScopeRoot()).recordEscapedQualifiedName(qualifiedName);\n          } else {\n            data.get(t.getScopeRoot()).recordAssignedName(qualifiedName);\n          }\n        } else if (!NodeUtil.isExpressionNode(n)) {\n          // Statements like 'return', 'var i', 'throw', etc.\n          return;\n        } else if (n.hasChildren()) {\n          for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n            visit(t, child, n);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..45fc9652 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,44 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+      if (t.getScopeDepth() > 2 || NodeUtil.isLoopStructure(n)) {\n+        if (n.isName() && !n.getBooleanProp(Node.IS_CONSTANT_NAME)) {\n+          // record assigned names for function expression if possible\n+          Node functionNode = NodeUtil.getEnclosingFunction(n);\n+          if (functionNode != null && functionNode.isFunction()) {\n+            Node functionNameNode = functionNode.getFirstChild();\n+            if (!functionNameNode.isEmpty()) {\n+              data.get(functionNode).recordAssignedName(n.getString());\n+            }\n+            return;\n+          }\n+          data.get(t.getScopeRoot()).recordAssignedName(n.getString());\n+        } else if (n.isGetProp()) {\n+          if (!n.isQualifiedName()) {\n+            // Don't handle qualified names or anything where the root node isn't a name.\n+            return;\n+          }\n+          String qualifiedName = n.getQualifiedName();\n+          String rootName = n.getFirstChild().getQualifiedName();\n+          if (t.getScope().getVar(rootName) == null) {\n+            // We don't handle qualified names for variables that don't exist in the current scope. They'll\n+            // either get assigned to a parent scope, or will be a global and get handled elsewhere.\n+            return;\n+          } else if (n.isQualifiedName() && rootName.equals(\"this\")) {\n+            // Record 'this.propName' as an escaped name, because it escapes the current scope.\n+            data.get(t.getScopeRoot()).recordEscapedQualifiedName(qualifiedName);\n+          } else {\n+            data.get(t.getScopeRoot()).recordAssignedName(qualifiedName);\n+          }\n+        } else if (!NodeUtil.isExpressionNode(n)) {\n+          // Statements like 'return', 'var i', 'throw', etc.\n+          return;\n+        } else if (n.hasChildren()) {\n+          for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+            visit(t, child, n);\n+          }\n+        }\n+      }\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}