{
    "patch": "        try {\n            for (int i = 0; i < count; i++) {\n                millis = savedFields[i].set(millis, resetFields);\n                if (millis == Long.MIN_VALUE) {\n                    if (i == 0) {\n                        throw new IllegalFieldValueException(savedFields[i].iField, String.valueOf(savedFields[i].getMinimumValue()), String.valueOf(savedFields[i].getMaximumValue()), null);\n                    } else {\n                        for (int j=0; j<i; j++) {\n                            millis = savedFields[j].set(millis, resetFields);\n                        }\n                        throw new IllegalFieldValueException(savedFields[i-1].iField, String.valueOf(savedFields[i-1].getMinimumValue()), String.valueOf(savedFields[i-1].getMaximumValue()), null);\n                    }\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..05b21fe4 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,26 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                millis = savedFields[i].set(millis, resetFields);\n+                if (millis == Long.MIN_VALUE) {\n+                    if (i == 0) {\n+                        throw new IllegalFieldValueException(savedFields[i].iField, String.valueOf(savedFields[i].getMinimumValue()), String.valueOf(savedFields[i].getMaximumValue()), null);\n+                    } else {\n+                        for (int j=0; j<i; j++) {\n+                            millis = savedFields[j].set(millis, resetFields);\n+                        }\n+                        throw new IllegalFieldValueException(savedFields[i-1].iField, String.valueOf(savedFields[i-1].getMinimumValue()), String.valueOf(savedFields[i-1].getMaximumValue()), null);\n+                    }\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}