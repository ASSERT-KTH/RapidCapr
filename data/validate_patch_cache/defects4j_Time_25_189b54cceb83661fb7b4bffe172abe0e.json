{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    final int offsetLocal = getOffset(instantLocal);\n    final long millisAtOffsetLocal = instantLocal + offsetLocal;\n    final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n    if (offsetLocal == offsetAdjusted) {\n        return offsetLocal;\n    }\n\n    // We need to either fall back to the previous offset or advance to the next one.\n    final long instantAdjusted;\n    if (offsetAdjusted > offsetLocal) { // Gap\n        final long nextTransition = nextTransition(millisAtOffsetLocal);\n        if (nextTransition == millisAtOffsetLocal) {\n            // There are two transitions happening at the same time.\n            // This may happen during a repeated set of DST transitions.\n            // We need to compare offsets to determine the best course of action.\n            return offsetLocal >= 0 ? offsetLocal : offsetAdjusted;\n        } else {\n            // We are in the gap period.\n            instantAdjusted = nextTransition - offsetAdjusted;\n        }\n    } else { // Overlap\n        final long previousTransition = previousTransition(millisAtOffsetLocal);\n        if (instantLocal >= previousTransition + offsetLocal) {\n            // We are in the overlap period.\n            instantAdjusted = previousTransition + offsetLocal;\n        } else {\n            // The local wall time is ambiguous.\n            // We need to compare offsets to determine the best course of action.\n            return offsetLocal >= 0 ? offsetLocal : offsetAdjusted;\n        }\n    }\n\n    final int offsetAdjustedNew = getOffset(instantAdjusted);\n    if (offsetAdjusted != offsetAdjustedNew) {\n        // The adjusted offset has changed.\n        // This may happen during a repeated set of DST transitions.\n        // We need to compare offsets to determine the best course of action.\n        return offsetAdjusted >= 0 ? offsetAdjusted : offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1c748595 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,49 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    final int offsetLocal = getOffset(instantLocal);\n+    final long millisAtOffsetLocal = instantLocal + offsetLocal;\n+    final int offsetAdjusted = getOffset(millisAtOffsetLocal);\n+    if (offsetLocal == offsetAdjusted) {\n+        return offsetLocal;\n+    }\n+\n+    // We need to either fall back to the previous offset or advance to the next one.\n+    final long instantAdjusted;\n+    if (offsetAdjusted > offsetLocal) { // Gap\n+        final long nextTransition = nextTransition(millisAtOffsetLocal);\n+        if (nextTransition == millisAtOffsetLocal) {\n+            // There are two transitions happening at the same time.\n+            // This may happen during a repeated set of DST transitions.\n+            // We need to compare offsets to determine the best course of action.\n+            return offsetLocal >= 0 ? offsetLocal : offsetAdjusted;\n+        } else {\n+            // We are in the gap period.\n+            instantAdjusted = nextTransition - offsetAdjusted;\n+        }\n+    } else { // Overlap\n+        final long previousTransition = previousTransition(millisAtOffsetLocal);\n+        if (instantLocal >= previousTransition + offsetLocal) {\n+            // We are in the overlap period.\n+            instantAdjusted = previousTransition + offsetLocal;\n+        } else {\n+            // The local wall time is ambiguous.\n+            // We need to compare offsets to determine the best course of action.\n+            return offsetLocal >= 0 ? offsetLocal : offsetAdjusted;\n         }\n+    }\n+\n+    final int offsetAdjustedNew = getOffset(instantAdjusted);\n+    if (offsetAdjusted != offsetAdjustedNew) {\n+        // The adjusted offset has changed.\n+        // This may happen during a repeated set of DST transitions.\n+        // We need to compare offsets to determine the best course of action.\n+        return offsetAdjusted >= 0 ? offsetAdjusted : offsetLocal;\n+    } else {\n         return offsetAdjusted;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}