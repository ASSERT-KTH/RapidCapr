{
    "patch": "if (min >= max) {\n    if (initial < min || initial > max) {\n        initial = (min + max) / 2.0;\n    }\n    return initial;\n}\n\n// Create a new instance of the solver and set the tolerance and maximum iterations\nBrentSolver solver = new BrentSolver();\nsolver.setAbsoluteAccuracy(getAbsoluteAccuracy());\nsolver.setMaximalIterationCount(getMaximalIterationCount());\n\n// Solve the function using the given solver and starting point\nreturn solver.solve(f, min, max, initial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..db86c452d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,20 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+if (min >= max) {\n+    if (initial < min || initial > max) {\n+        initial = (min + max) / 2.0;\n+    }\n+    return initial;\n+}\n+\n+// Create a new instance of the solver and set the tolerance and maximum iterations\n+BrentSolver solver = new BrentSolver();\n+solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+solver.setMaximalIterationCount(getMaximalIterationCount());\n+\n+// Solve the function using the given solver and starting point\n+return solver.solve(f, min, max, initial);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}