{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nfor (int position = 0; position < matchers.size(); position++) {\n    Matcher m = matchers.get(position);\n    if (m instanceof CapturesArguments) {\n        if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n            Object[] varArgs = extractVarArgs(rawArguments, position);\n            for (Object varArg : varArgs) {\n                ((CapturesArguments) m).captureFrom(varArg);\n            }\n        } else {\n            Object arg = rawArguments[position];\n            ((CapturesArguments) m).captureFrom(arg);\n        }\n    }\n}\n\n...\n\nprivate Object[] extractVarArgs(Object[] rawArguments, int position) {\n    Object varArgObject = rawArguments[position];\n    if (varArgObject == null) {\n        return new Object[]{null};\n    }\n    Class<?> componentType = varArgObject.getClass().getComponentType();\n    if (componentType.isPrimitive()) {\n        return extractPrimitiveVarArgs(varArgObject);\n    } else {\n        return extractObjectVarArgs(varArgObject);\n    }\n}\n\nprivate Object[] extractObjectVarArgs(Object varArgObject) {\n    if (!varArgObject.getClass().isArray()) {\n        return new Object[]{varArgObject};\n    }\n    int varArgLength = Array.getLength(varArgObject);\n    Object[] varArgArray = new Object[varArgLength];\n    for (int i = 0; i < varArgLength; i++) {\n        varArgArray[i] = Array.get(varArgObject, i);\n    }\n    return varArgArray;\n}\n\nprivate Object[] extractPrimitiveVarArgs(Object varArgObject) {\n    int primArrayLength = Array.getLength(varArgObject);\n    Class<?> wrappedType = Array.get(varArgObject, 0).getClass();\n    Object[] wrappedArray = (Object[]) Array.newInstance(wrappedType, primArrayLength);\n    for (int i = 0; i < primArrayLength; i++) {\n        wrappedArray[i] = Array.get(varArgObject, i);\n    }\n    return wrappedArray;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..c3cd206c9 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,58 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+for (int position = 0; position < matchers.size(); position++) {\n+    Matcher m = matchers.get(position);\n+    if (m instanceof CapturesArguments) {\n+        if(isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+            Object[] varArgs = extractVarArgs(rawArguments, position);\n+            for (Object varArg : varArgs) {\n+                ((CapturesArguments) m).captureFrom(varArg);\n+            }\n+        } else {\n+            Object arg = rawArguments[position];\n+            ((CapturesArguments) m).captureFrom(arg);\n+        }\n+    }\n+}\n+\n+...\n+\n+private Object[] extractVarArgs(Object[] rawArguments, int position) {\n+    Object varArgObject = rawArguments[position];\n+    if (varArgObject == null) {\n+        return new Object[]{null};\n+    }\n+    Class<?> componentType = varArgObject.getClass().getComponentType();\n+    if (componentType.isPrimitive()) {\n+        return extractPrimitiveVarArgs(varArgObject);\n+    } else {\n+        return extractObjectVarArgs(varArgObject);\n+    }\n+}\n+\n+private Object[] extractObjectVarArgs(Object varArgObject) {\n+    if (!varArgObject.getClass().isArray()) {\n+        return new Object[]{varArgObject};\n+    }\n+    int varArgLength = Array.getLength(varArgObject);\n+    Object[] varArgArray = new Object[varArgLength];\n+    for (int i = 0; i < varArgLength; i++) {\n+        varArgArray[i] = Array.get(varArgObject, i);\n+    }\n+    return varArgArray;\n+}\n+\n+private Object[] extractPrimitiveVarArgs(Object varArgObject) {\n+    int primArrayLength = Array.getLength(varArgObject);\n+    Class<?> wrappedType = Array.get(varArgObject, 0).getClass();\n+    Object[] wrappedArray = (Object[]) Array.newInstance(wrappedType, primArrayLength);\n+    for (int i = 0; i < primArrayLength; i++) {\n+        wrappedArray[i] = Array.get(varArgObject, i);\n+    }\n+    return wrappedArray;\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}