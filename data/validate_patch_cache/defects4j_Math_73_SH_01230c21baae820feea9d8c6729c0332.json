{
    "patch": "        // catch cases where min/max bracket the root directly, or if the initial guess is not within the range [min, max], or if any values are NaN or infinite\n        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || initial < min || initial > max ||\n                Double.isNaN(yInitial) || Double.isInfinite(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax) ||\n                Double.isInfinite(yMin) || Double.isInfinite(yMax)) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, or the initial guess is not within the range [min, max], or there are NaN or infinite values. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n        }\n\n        // check if initial guess is equal to min or max\n        if (Double.compare(initial, min) == 0 || Double.compare(initial, max) == 0) {\n            setResult(initial, 0);\n            return result;\n        }\n\n        // proceed with full Brent algorithm\n        return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..973e7a53a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,21 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // catch cases where min/max bracket the root directly, or if the initial guess is not within the range [min, max], or if any values are NaN or infinite\n+        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) || initial < min || initial > max ||\n+                Double.isNaN(yInitial) || Double.isInfinite(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax) ||\n+                Double.isInfinite(yMin) || Double.isInfinite(yMax)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, or the initial guess is not within the range [min, max], or there are NaN or infinite values. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n+        }\n+\n+        // check if initial guess is equal to min or max\n+        if (Double.compare(initial, min) == 0 || Double.compare(initial, max) == 0) {\n+            setResult(initial, 0);\n+            return result;\n+        }\n+\n+        // proceed with full Brent algorithm\n+        return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}