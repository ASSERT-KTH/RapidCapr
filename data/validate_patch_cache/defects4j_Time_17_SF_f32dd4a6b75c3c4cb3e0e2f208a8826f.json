{
    "patch": "    public long adjustOffset(long instant, boolean earlierOrLater) {\n        // a bit messy, but will work in all non-pathological cases\n        \n        // evaluate 3 hours before and after to work out if anything is happening\n        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n        if (instantBefore == instantAfter) {\n            return instant;  // not an overlap (less than is a gap, equal is normal case)\n        }\n\n        if (earlierOrLater) {\n            // currently in later offset\n            long candidateEarlier = convertLocalToUTC(instantAfter, false);\n            if (candidateEarlier <= instant) {\n                return instant; // cannot move any earlier\n            }\n            long instantBeforePrevious = convertUTCToLocal(candidateEarlier - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            if (instantBeforePrevious == instantAfter) {\n                return instant; // use latest offset\n            }\n            return candidateEarlier; // use earlier offset\n        } else {\n            // currently in earlier offset\n            long candidateLater = convertLocalToUTC(instantBefore, false);\n            if (candidateLater <= instant) {\n                return instant; // cannot move any later\n            }\n            long instantAfterNext = convertUTCToLocal(candidateLater + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n            if (instantAfterNext == instantBefore) {\n                return instant; // use earliest offset\n            }\n            return candidateLater; // use later offset\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..00cb7fd2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1169,14 +1169,30 @@ public abstract class DateTimeZone implements Serializable {\n         if (instantBefore == instantAfter) {\n             return instant;  // not an overlap (less than is a gap, equal is normal case)\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n+\n+        if (earlierOrLater) {\n+            // currently in later offset\n+            long candidateEarlier = convertLocalToUTC(instantAfter, false);\n+            if (candidateEarlier <= instant) {\n+                return instant; // cannot move any earlier\n+            }\n+            long instantBeforePrevious = convertUTCToLocal(candidateEarlier - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            if (instantBeforePrevious == instantAfter) {\n+                return instant; // use latest offset\n+            }\n+            return candidateEarlier; // use earlier offset\n+        } else {\n+            // currently in earlier offset\n+            long candidateLater = convertLocalToUTC(instantBefore, false);\n+            if (candidateLater <= instant) {\n+                return instant; // cannot move any later\n+            }\n+            long instantAfterNext = convertUTCToLocal(candidateLater + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+            if (instantAfterNext == instantBefore) {\n+                return instant; // use earliest offset\n+            }\n+            return candidateLater; // use later offset\n+        }\n     }\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T06:15:00.000+01:00>",
    "test_result": "FAIL"
}