{
    "patch": "import org.apache.commons.math.ConvergenceException;\nimport org.apache.commons.math.FunctionEvaluationException;\nimport org.apache.commons.math.MathRuntimeException;\nimport org.apache.commons.math.analysis.UnivariateRealFunction;\nimport org.apache.commons.math.util.FastMath;\n\npublic class MathUtils {\n    \n    /**\n     * Finds a bounded bracket of interval endpoints for a root-finding algorithm. Given an\n     * interval with endpoints {@code [a, b]}, the method first tests whether the function\n     * {@code f} has opposite signs at these endpoints. If true, the interval is a bracket and\n     * the method returns it.\n     * Otherwise, the method attempts to expand the interval by doubling the distance from \n     * a boundary until a bracket is found or the maximum number of iterations ({@code maximumIterations})\n     * is reached. In this search, the method will only test interval boundaries that lie at a \n     * distance of at least the double-precision machine epsilon ({@code Math.ulp(1.0)}) from \n     * the opposite bracket endpoint.\n     * \n     * @param function the function to find the bracket of\n     * @param initial the starting point of the bracket search\n     * @param lowerBound the lower bound of the bracket \n     * @param upperBound the upper bound of the bracket\n     * @param maximumIterations the maximum number of expansion iterations\n     * @return a 2-element {@code double} array containing the bracket endpoints\n     * @throws ConvergenceException if a bracket can not be found or if the function fails to\n     *         evaluate successfully\n     * @throws FunctionEvaluationException if an error occurs evaluating the function\n     */\n    public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations)\n        throws ConvergenceException, FunctionEvaluationException {\n    \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                  lowerBound, initial, upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        double f;\n        double delta;\n        int numIterations = 0 ;\n    \n        fa = function.value(a);\n        fb = function.value(b);\n        \n        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n            throw new ConvergenceException(\"Initial point returned NaN value for function.\");\n        }\n        \n        // Check if endpoints have different signs, meaning we already have a valid bracket\n        if (fa * fb <= 0.0) {\n            return new double[] {a, b};\n        }\n        \n        // Search for bracket by expanding the interval\n        f = fa;\n        delta = FastMath.abs(b - a);\n        while (numIterations < maximumIterations && Double.isFinite(delta)) {\n            delta *= 2.0;\n            a = initial - delta;\n            b = initial + delta;\n            \n            // Check boundaries lie within limits\n            if (a < lowerBound) {\n                a = lowerBound;\n            }\n            if (b > upperBound) {\n                b = upperBound;\n            }\n            \n            // Evaluate function at new boundaries\n            fa = function.value(a);\n            fb = function.value(b);\n            \n            // If signs differ return bracket\n            if (fa * fb <= 0.0) {\n                return new double[] {a, b};\n            }\n            \n            // If change in function sign isn't big enough, consider interval center instead\n            if (FastMath.abs(fb) < FastMath.abs(fa)) {\n                final double tmp = a;\n                a = b;\n                b = tmp;\n                final double tmp2 = fa;\n                fa = fb;\n                fb = tmp2;\n            }\n            \n            delta = FastMath.abs(b - a);\n            numIterations++;\n        }\n        \n        throw new ConvergenceException(\n                \"number of iterations={0}, maximum iterations={1}, \" +\n                \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                \"final b value={6}, f(a)={7}, f(b)={8}\",\n                numIterations, maximumIterations, initial,\n                lowerBound, upperBound, a, b, fa, fb);\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..4c92a2273 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,15 +162,44 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n+import org.apache.commons.math.ConvergenceException;\n+import org.apache.commons.math.FunctionEvaluationException;\n+import org.apache.commons.math.MathRuntimeException;\n+import org.apache.commons.math.analysis.UnivariateRealFunction;\n+import org.apache.commons.math.util.FastMath;\n+\n+public class MathUtils {\n+    \n+    /**\n+     * Finds a bounded bracket of interval endpoints for a root-finding algorithm. Given an\n+     * interval with endpoints {@code [a, b]}, the method first tests whether the function\n+     * {@code f} has opposite signs at these endpoints. If true, the interval is a bracket and\n+     * the method returns it.\n+     * Otherwise, the method attempts to expand the interval by doubling the distance from \n+     * a boundary until a bracket is found or the maximum number of iterations ({@code maximumIterations})\n+     * is reached. In this search, the method will only test interval boundaries that lie at a \n+     * distance of at least the double-precision machine epsilon ({@code Math.ulp(1.0)}) from \n+     * the opposite bracket endpoint.\n+     * \n+     * @param function the function to find the bracket of\n+     * @param initial the starting point of the bracket search\n+     * @param lowerBound the lower bound of the bracket \n+     * @param upperBound the upper bound of the bracket\n+     * @param maximumIterations the maximum number of expansion iterations\n+     * @return a 2-element {@code double} array containing the bracket endpoints\n+     * @throws ConvergenceException if a bracket can not be found or if the function fails to\n+     *         evaluate successfully\n+     * @throws FunctionEvaluationException if an error occurs evaluating the function\n+     */\n     public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations)\n+        throws ConvergenceException, FunctionEvaluationException {\n+    \n         if (function == null) {\n             throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (maximumIterations <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n                   \"bad value for maximum iterations number: {0}\", maximumIterations);\n         }\n@@ -183,29 +212,69 @@ public class UnivariateRealSolverUtils {\n         double b = initial;\n         double fa;\n         double fb;\n+        double f;\n+        double delta;\n         int numIterations = 0 ;\n     \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n+        fa = function.value(a);\n+        fb = function.value(b);\n+        \n+        if (Double.isNaN(fa) || Double.isNaN(fb)) {\n+            throw new ConvergenceException(\"Initial point returned NaN value for function.\");\n+        }\n+        \n+        // Check if endpoints have different signs, meaning we already have a valid bracket\n+        if (fa * fb <= 0.0) {\n+            return new double[] {a, b};\n+        }\n+        \n+        // Search for bracket by expanding the interval\n+        f = fa;\n+        delta = FastMath.abs(b - a);\n+        while (numIterations < maximumIterations && Double.isFinite(delta)) {\n+            delta *= 2.0;\n+            a = initial - delta;\n+            b = initial + delta;\n+            \n+            // Check boundaries lie within limits\n+            if (a < lowerBound) {\n+                a = lowerBound;\n+            }\n+            if (b > upperBound) {\n+                b = upperBound;\n+            }\n             \n+            // Evaluate function at new boundaries\n+            fa = function.value(a);\n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            \n+            // If signs differ return bracket\n+            if (fa * fb <= 0.0) {\n+                return new double[] {a, b};\n+            }\n+            \n+            // If change in function sign isn't big enough, consider interval center instead\n+            if (FastMath.abs(fb) < FastMath.abs(fa)) {\n+                final double tmp = a;\n+                a = b;\n+                b = tmp;\n+                final double tmp2 = fa;\n+                fa = fb;\n+                fb = tmp2;\n+            }\n+            \n+            delta = FastMath.abs(b - a);\n+            numIterations++;\n         }\n         \n-        return new double[]{a, b};\n+        throw new ConvergenceException(\n+                \"number of iterations={0}, maximum iterations={1}, \" +\n+                \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                numIterations, maximumIterations, initial,\n+                lowerBound, upperBound, a, b, fa, fb);\n     }\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}