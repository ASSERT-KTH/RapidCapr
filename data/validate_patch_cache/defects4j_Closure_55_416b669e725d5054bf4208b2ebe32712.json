{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    // If the node is a call reference, then it cannot be a function expression\n    if (n.isCall()) {\n      return false;\n    }\n    // Otherwise, check if it is a function expression\n    return NodeUtil.isFunctionExpression(n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..89b2d167 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,8 +112,12 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n   private static boolean isReduceableFunctionExpression(Node n) {\n+    // If the node is a call reference, then it cannot be a function expression\n+    if (n.isCall()) {\n+      return false;\n+    }\n+    // Otherwise, check if it is a function expression\n     return NodeUtil.isFunctionExpression(n);\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}