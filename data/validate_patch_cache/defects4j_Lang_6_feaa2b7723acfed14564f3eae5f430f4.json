{
    "patch": "public static String unescapeCsv(String input) {\n    if (input == null) {\n        return null;\n    }\n    try (StringWriter writer = new StringWriter(input.length())) {\n        unescapeCsv(input, writer);\n        return writer.toString();\n    } catch (IOException ioe) {\n        // should be impossible so don't do anything\n        return null;\n    }\n}\n\npublic static void unescapeCsv(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n\n    boolean insideQuote = false; // true when the cursor is inside quotes\n    boolean insideEscape = false; // true when the cursor is inside an escape sequence\n    int len = input.length();\n\n    for(int i = 0; i < len; i++) {\n        char c = input.charAt(i);\n\n        if(insideQuote) {\n            if(insideEscape) {\n                insideEscape = false;\n                switch(c) {\n                    case 'n':\n                        out.write('\\n');\n                        break;\n                    case 't':\n                        out.write('\\t');\n                        break;\n                    case 'b':\n                        out.write('\\b');\n                        break;\n                    case 'r':\n                        out.write('\\r');\n                        break;\n                    case 'f':\n                        out.write('\\f');\n                        break;\n                    case '\"':\n                        out.write('\"');\n                        break;\n                    case '\\'':\n                        out.write('\\'');\n                        break;\n                    case '\\\\':\n                        out.write('\\\\');\n                        break;\n                    default:\n                        out.write(c);\n                        break;\n                }\n            } else {\n                if(c == '\"') {\n                    insideQuote = false; // exit quote\n                } else if(c == '\\\\') {\n                    insideEscape = true; // enter escape\n                } else {\n                    out.write(c);\n                }\n            }\n        } else {\n            if(c == '\"') {\n                insideQuote = true; // enter quote\n            } else {\n                out.write(c);\n            }\n        }\n    }\n\n    if(insideQuote) {\n        throw new IllegalStateException(\"Un-terminated quoted field\");\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..db370cf2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,88 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+public static String unescapeCsv(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    try (StringWriter writer = new StringWriter(input.length())) {\n+        unescapeCsv(input, writer);\n+        return writer.toString();\n+    } catch (IOException ioe) {\n+        // should be impossible so don't do anything\n+        return null;\n+    }\n+}\n+\n+public static void unescapeCsv(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+\n+    boolean insideQuote = false; // true when the cursor is inside quotes\n+    boolean insideEscape = false; // true when the cursor is inside an escape sequence\n+    int len = input.length();\n+\n+    for(int i = 0; i < len; i++) {\n+        char c = input.charAt(i);\n+\n+        if(insideQuote) {\n+            if(insideEscape) {\n+                insideEscape = false;\n+                switch(c) {\n+                    case 'n':\n+                        out.write('\\n');\n+                        break;\n+                    case 't':\n+                        out.write('\\t');\n+                        break;\n+                    case 'b':\n+                        out.write('\\b');\n+                        break;\n+                    case 'r':\n+                        out.write('\\r');\n+                        break;\n+                    case 'f':\n+                        out.write('\\f');\n+                        break;\n+                    case '\"':\n+                        out.write('\"');\n+                        break;\n+                    case '\\'':\n+                        out.write('\\'');\n+                        break;\n+                    case '\\\\':\n+                        out.write('\\\\');\n+                        break;\n+                    default:\n+                        out.write(c);\n+                        break;\n+                }\n+            } else {\n+                if(c == '\"') {\n+                    insideQuote = false; // exit quote\n+                } else if(c == '\\\\') {\n+                    insideEscape = true; // enter escape\n+                } else {\n+                    out.write(c);\n+                }\n+            }\n+        } else {\n+            if(c == '\"') {\n+                insideQuote = true; // enter quote\n+            } else {\n+                out.write(c);\n+            }\n+        }\n+    }\n+\n+    if(insideQuote) {\n+        throw new IllegalStateException(\"Un-terminated quoted field\");\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}