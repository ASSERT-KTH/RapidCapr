{
    "patch": "    double[] decoded = decode(x);\n    double[] result = new double[decoded.length];\n    for (int i = 0; i < decoded.length; i++) {\n        if (decoded[i] > upper[i]) {\n            result[i] = upper[i];\n        } else if (decoded[i] < lower[i]) {\n            result[i] = lower[i];\n        } else {\n            result[i] = decoded[i];\n        }\n    }\n    return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..5661b84c2 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -918,7 +918,18 @@ public class CMAESOptimizer\n          * @return the original objective variables, possibly repaired.\n          */\n         public double[] repairAndDecode(final double[] x) {\n-            return\n+    double[] decoded = decode(x);\n+    double[] result = new double[decoded.length];\n+    for (int i = 0; i < decoded.length; i++) {\n+        if (decoded[i] > upper[i]) {\n+            result[i] = upper[i];\n+        } else if (decoded[i] < lower[i]) {\n+            result[i] = lower[i];\n+        } else {\n+            result[i] = decoded[i];\n+        }\n+    }\n+    return result;\n                 decode(x);\n         }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}