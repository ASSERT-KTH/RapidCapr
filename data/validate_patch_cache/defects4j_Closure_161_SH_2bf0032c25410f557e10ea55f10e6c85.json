{
    "patch": "// Check if the access is an assignment target in a simple assignment or compound assignment\nif (parent != null && (parent.isAssign() || parent.isAssignAdd())) {\n  Node assignLeft = parent.getFirstChild();\n  if (assignLeft.isGetElem() && assignLeft.getFirstChild().isEquivalentTo(left)) {\n    Node grandParent = parent.getParent();\n    if (grandParent != null && grandParent.isExprResult()) {\n      return n;\n    } else if (NodeUtil.isStatement(n)) {\n      return n;\n    }\n  }\n}\n\n// Check if the access is an assignment target in a for-in or for-of loop\nNode gParent = n.getGrandparent();\nif (gParent != null && gParent.isForIn() && gParent.getFirstChild().isEquivalentTo(n)) {\n  return n;\n}\n\n// Check if the access is an assignment target in a for loop\nif (parent != null && parent.isVar() && parent.getFirstChild() != null && parent.getFirstChild().isFor()) {\n  Node forNode = parent.getFirstChild();\n  Node iterNode = forNode.getFirstChild();\n  if (iterNode != null && iterNode.getNext() != null && iterNode.getNext().isEquivalentTo(n)) {\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..5e578b04 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,33 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+// Check if the access is an assignment target in a simple assignment or compound assignment\n+if (parent != null && (parent.isAssign() || parent.isAssignAdd())) {\n+  Node assignLeft = parent.getFirstChild();\n+  if (assignLeft.isGetElem() && assignLeft.getFirstChild().isEquivalentTo(left)) {\n+    Node grandParent = parent.getParent();\n+    if (grandParent != null && grandParent.isExprResult()) {\n+      return n;\n+    } else if (NodeUtil.isStatement(n)) {\n+      return n;\n+    }\n+  }\n+}\n+\n+// Check if the access is an assignment target in a for-in or for-of loop\n+Node gParent = n.getGrandparent();\n+if (gParent != null && gParent.isForIn() && gParent.getFirstChild().isEquivalentTo(n)) {\n+  return n;\n+}\n+\n+// Check if the access is an assignment target in a for loop\n+if (parent != null && parent.isVar() && parent.getFirstChild() != null && parent.getFirstChild().isFor()) {\n+  Node forNode = parent.getFirstChild();\n+  Node iterNode = forNode.getFirstChild();\n+  if (iterNode != null && iterNode.getNext() != null && iterNode.getNext().isEquivalentTo(n)) {\n+    return n;\n+  }\n+}\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}