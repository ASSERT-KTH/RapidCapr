{
    "patch": "import com.google.javascript.jscomp.JsdocUtil;\n\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getConstructorJsDoc(n);\n      if (jsDoc != null || hasParam(n, \"superClass\")) {\n        return false;\n      }\n\n      jsDoc = getFunctionJsDoc(n);\n      if (jsDoc != null &&\n          (jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n    }\n\n    if (parent != null && parent.getType() == Token.ASSIGN) {\n      Node lhs = parent.getFirstChild();\n      Node rhs = lhs.getNext();\n\n      if (n == lhs) {\n        // Always traverse the left side of the assignment. To handle\n        // nested assignments properly (e.g., (a = this).property = c;),\n        // assignLhsChild should not be overridden.\n        if (assignLhsChild == null) {\n          assignLhsChild = lhs;\n        }\n      } else {\n        // Only traverse the right side if it's not an assignment to a prototype\n        // property or subproperty.\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n  \n  private JSDocInfo getFunctionJsDoc(Node fnNode) {\n    /*\n     * For this function to work, the function must have a body with {} enclosing it.\n     * This is important since the getJSDocInfo returns null if the AST arguments\n     * are not of the function type or the closing } is not found OR if the result of getFirstChild()\n     * is null or does not match the function node.\n     */\n    Node firstArg = fnNode.getFirstChild();\n    Node firstBodyStmt = firstArg.getNext();\n    if (fnNode.isFromExterns() && NodeUtil.getEnclosingFunction(fnNode) == null) {\n      // We're in an externs file and not in a function - assume the enclosing JSProgram is externed.\n      return firstBodyStmt.getJSDocInfo();\n    }\n\n    JSDocInfo docInfo = null;\n\n    if ((firstArg == null) || (firstArg.getType() != Token.PARAM_LIST)) {\n      return docInfo;\n    }\n\n    firstBodyStmt = firstArg.getNext();\n    if ((firstBodyStmt == null) || (firstBodyStmt.getType() != Token.BLOCK)) {\n      return docInfo;\n    }\n\n    return firstArg.getJSDocInfo();\n  }\n\n  private JSDocInfo getConstructorJsDoc(Node fnNode) {\n    Node p = fnNode.getParent();\n    if (p == null || p.getType() != Token.EXPR_RESULT) {\n      return null;\n    }\n\n    Node gp = p.getParent();\n    if (gp == null || gp.getType() != Token.SCRIPT) {\n      return null;\n    }\n\n    Node c = gp.getFirstChild();\n    while (c != null) {\n      if (c.getType() == Token.ASSIGN) {\n        Node lhs = c.getFirstChild();\n        if (lhs.getType() == Token.GETPROP) {\n          if (lhs.getLastChild().getString().equals(fnNode.getLastChild().getString())\n              && lhs.getFirstChild().matchesQualifiedName(\"window.constructor\")) {\n            Node anno = lhs.getParent().getFirstChild();\n            if (anno != null && anno.getType() == Token.STRING) {\n              return JsdocUtil.getJsdoc(anno);\n            }\n          }\n        }\n      }\n      c = c.getNext();\n    }\n    return null;\n  }\n\n  private boolean hasParam(Node functionNode, String paramName) {\n    Node args = functionNode.getSecondChild();\n    for (int i = 0; i < args.getChildCount(); i++) {\n      Node arg = args.getChildAt(i);\n      if (arg.getString().equals(paramName)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..3ff6ad22 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,15 +79,21 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+import com.google.javascript.jscomp.JsdocUtil;\n+\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n \n     if (n.getType() == Token.FUNCTION) {\n       // Don't traverse functions that are constructors or have the @this\n       // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      JSDocInfo jsDoc = getConstructorJsDoc(n);\n+      if (jsDoc != null || hasParam(n, \"superClass\")) {\n+        return false;\n+      }\n+\n+      jsDoc = getFunctionJsDoc(n);\n       if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n+          (jsDoc.isInterface() ||\n            jsDoc.hasThisType() ||\n            jsDoc.isOverride())) {\n         return false;\n@@ -144,6 +150,75 @@ final class CheckGlobalThis implements Callback {\n \n     return true;\n   }\n+  \n+  private JSDocInfo getFunctionJsDoc(Node fnNode) {\n+    /*\n+     * For this function to work, the function must have a body with {} enclosing it.\n+     * This is important since the getJSDocInfo returns null if the AST arguments\n+     * are not of the function type or the closing } is not found OR if the result of getFirstChild()\n+     * is null or does not match the function node.\n+     */\n+    Node firstArg = fnNode.getFirstChild();\n+    Node firstBodyStmt = firstArg.getNext();\n+    if (fnNode.isFromExterns() && NodeUtil.getEnclosingFunction(fnNode) == null) {\n+      // We're in an externs file and not in a function - assume the enclosing JSProgram is externed.\n+      return firstBodyStmt.getJSDocInfo();\n+    }\n+\n+    JSDocInfo docInfo = null;\n+\n+    if ((firstArg == null) || (firstArg.getType() != Token.PARAM_LIST)) {\n+      return docInfo;\n+    }\n+\n+    firstBodyStmt = firstArg.getNext();\n+    if ((firstBodyStmt == null) || (firstBodyStmt.getType() != Token.BLOCK)) {\n+      return docInfo;\n+    }\n+\n+    return firstArg.getJSDocInfo();\n+  }\n+\n+  private JSDocInfo getConstructorJsDoc(Node fnNode) {\n+    Node p = fnNode.getParent();\n+    if (p == null || p.getType() != Token.EXPR_RESULT) {\n+      return null;\n+    }\n+\n+    Node gp = p.getParent();\n+    if (gp == null || gp.getType() != Token.SCRIPT) {\n+      return null;\n+    }\n+\n+    Node c = gp.getFirstChild();\n+    while (c != null) {\n+      if (c.getType() == Token.ASSIGN) {\n+        Node lhs = c.getFirstChild();\n+        if (lhs.getType() == Token.GETPROP) {\n+          if (lhs.getLastChild().getString().equals(fnNode.getLastChild().getString())\n+              && lhs.getFirstChild().matchesQualifiedName(\"window.constructor\")) {\n+            Node anno = lhs.getParent().getFirstChild();\n+            if (anno != null && anno.getType() == Token.STRING) {\n+              return JsdocUtil.getJsdoc(anno);\n+            }\n+          }\n+        }\n+      }\n+      c = c.getNext();\n+    }\n+    return null;\n+  }\n+\n+  private boolean hasParam(Node functionNode, String paramName) {\n+    Node args = functionNode.getSecondChild();\n+    for (int i = 0; i < args.getChildCount(); i++) {\n+      Node arg = args.getChildAt(i);\n+      if (arg.getString().equals(paramName)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}