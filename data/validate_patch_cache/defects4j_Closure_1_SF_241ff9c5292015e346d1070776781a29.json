{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())\n        || NodeUtil.isClassMethod(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = NodeUtil.getFunctionParameters(function);\n\n    boolean modifyCallers =\n        modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode());\n\n    if (!modifyCallers) {\n      // Determine which arguments are referenced.\n      Set<String> referencedParams = new HashSet<>();\n      NodeTraversal.traverse(\n          compiler,\n          function,\n          new AbstractShallowStatementCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (NodeUtil.isNameReferenced(n, argList)) {\n                referencedParams.add(n.getString());\n              }\n            }\n\n            @Override\n            public void visit(NodeTraversal t, Node n) {\n              // Skip function expressions. Those have their own parameters.\n              t.skipChildren();\n            }\n          });\n\n      // Remove any arguments that are not referenced.\n      for (Node paramNode = argList.getFirstChild(); paramNode != null; ) {\n        Node nextParam = paramNode.getNext();\n        if (!paramNode.isDefaultValue()) {\n          String paramName = paramNode.getString();\n          if (!referencedParams.contains(paramName)) {\n            paramNode.detach();\n          }\n        }\n        paramNode = nextParam;\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..f613f750 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,39 +366,51 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+    if (NodeUtil.isGetOrSetKey(function.getParent())\n+        || NodeUtil.isClassMethod(function.getParent())) {\n       // The parameters object literal setters can not be removed.\n       return;\n     }\n \n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+    Node argList = NodeUtil.getFunctionParameters(function);\n+\n+    boolean modifyCallers =\n+        modifyCallSites && callSiteOptimizer.canModifyCallers(fnScope.getRootNode());\n+\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+      // Determine which arguments are referenced.\n+      Set<String> referencedParams = new HashSet<>();\n+      NodeTraversal.traverse(\n+          compiler,\n+          function,\n+          new AbstractShallowStatementCallback() {\n+            @Override\n+            public void visit(NodeTraversal t, Node n, Node parent) {\n+              if (NodeUtil.isNameReferenced(n, argList)) {\n+                referencedParams.add(n.getString());\n+              }\n+            }\n+\n+            @Override\n+            public void visit(NodeTraversal t, Node n) {\n+              // Skip function expressions. Those have their own parameters.\n+              t.skipChildren();\n+            }\n+          });\n+\n+      // Remove any arguments that are not referenced.\n+      for (Node paramNode = argList.getFirstChild(); paramNode != null; ) {\n+        Node nextParam = paramNode.getNext();\n+        if (!paramNode.isDefaultValue()) {\n+          String paramName = paramNode.getString();\n+          if (!referencedParams.contains(paramName)) {\n+            paramNode.detach();\n+          }\n         }\n+        paramNode = nextParam;\n       }\n     } else {\n       callSiteOptimizer.optimize(fnScope, referenced);",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}