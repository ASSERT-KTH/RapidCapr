{
    "patch": "\n// Check that the access is not used as an assignment target or that the assignment\n// node is not a child of an expression statement node.\nif (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n  Node grandParent = parent.getParent();\n  if (grandParent == null || grandParent.getType() != Token.EXPR_RESULT) {\n    return n;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..1e614ca5 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1281,6 +1281,15 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n \n+// Check that the access is not used as an assignment target or that the assignment\n+// node is not a child of an expression statement node.\n+if (parent.getType() == Token.ASSIGN && parent.getFirstChild().isEquivalentTo(n)) {\n+  Node grandParent = parent.getParent();\n+  if (grandParent == null || grandParent.getType() != Token.EXPR_RESULT) {\n+    return n;\n+  }\n+}\n+\n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.",
    "result_reason": "junit.framework.AssertionFailedError: Unexpected error(s): JSC_INDEX_OUT_OF_BOUNDS_ERROR. Array index out of bounds: NUMBER 1.0 1 [source_file: testcode] at testcode line 1 : 3 expected:<0> but was:<1>",
    "test_result": "FAIL"
}