{
    "patch": "            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n            ValidationError validationError = iChronology.validate(newPartial);\n            if (validationError != null) {\n                newPartial = new Partial(iChronology, newTypes, iValues);\n                iChronology.validate(newPartial, iValues);\n                throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..1523989a 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -462,6 +462,12 @@ public final class Partial\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n             Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            ValidationError validationError = iChronology.validate(newPartial);\n+            if (validationError != null) {\n+                newPartial = new Partial(iChronology, newTypes, iValues);\n+                iChronology.validate(newPartial, iValues);\n+                throw new IllegalArgumentException(String.format(\"Invalid value for field (type %s): %d\", fieldType.getName(), value), validationError.getCause());\n+            }\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}