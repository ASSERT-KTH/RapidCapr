{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nfor (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n    Object arg;\n    if(isVariableArgument(invocation, i)) {\n        Object varArgs = rawArguments[i];\n        if(isVarargMatcher(matchers.get(i))) {\n            va",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..da89e3828 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,13 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+for (int i = 0; i < matchers.size() && i < rawArguments.length; i++) {\n+    Object arg;\n+    if(isVariableArgument(invocation, i)) {\n+        Object varArgs = rawArguments[i];\n+        if(isVarargMatcher(matchers.get(i))) {\n+            va\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}