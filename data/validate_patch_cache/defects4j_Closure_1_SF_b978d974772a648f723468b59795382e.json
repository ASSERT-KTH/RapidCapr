{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    List<Node> toRemove = new ArrayList<Node>();\n    boolean shouldOptimizeCallSites = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!shouldOptimizeCallSites) {\n        boolean remove = true;\n        for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n            if (remove && !referenced.contains(fnScope.getVar(arg.getString()))) {\n                toRemove.add(arg);\n            } else {\n                remove = false;\n            }\n        }\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n        return;\n    }\n\n    for (Node n : toRemove) {\n        argList.removeChild(n);\n        compiler.reportCodeChange();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..b2da3006 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,36 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+    List<Node> toRemove = new ArrayList<Node>();\n+    boolean shouldOptimizeCallSites = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n+    if (!shouldOptimizeCallSites) {\n+        boolean remove = true;\n+        for (Node arg = argList.getFirstChild(); arg != null; arg = arg.getNext()) {\n+            if (remove && !referenced.contains(fnScope.getVar(arg.getString()))) {\n+                toRemove.add(arg);\n+            } else {\n+                remove = false;\n+            }\n         }\n-      }\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n+        return;\n     }\n-  }\n+\n+    for (Node n : toRemove) {\n+        argList.removeChild(n);\n+        compiler.reportCodeChange();\n+    }\n+}\n \n \n   /**",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}