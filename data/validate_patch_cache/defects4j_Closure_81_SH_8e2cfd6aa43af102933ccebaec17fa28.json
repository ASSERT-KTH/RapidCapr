{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport java.util.List;\n\n...\n\nList<DiGraphEdge<Node, Branch>> outEdges = cfgNode.getOutEdges();\nfor (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n  if (outEdge.getValue() == Branch.ON_EX) {\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..c2212544 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,19 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import java.util.List;\n+\n+...\n+\n+List<DiGraphEdge<Node, Branch>> outEdges = cfgNode.getOutEdges();\n+for (DiGraphEdge<Node, Branch> outEdge : outEdges) {\n+  if (outEdge.getValue() == Branch.ON_EX) {\n+    return true;\n+  }\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}