{
    "patch": "private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    int ordinal = 0;\n    Node parameter = null;\n    Node argument = null;\n\n    int argCount = countArguments(call);\n\n    while (parameters.hasNext() && arguments.hasNext()) {\n      // Validate each argument against the corresponding parameter.\n      parameter = parameters.next();\n      argument = arguments.next();\n      ordinal++;\n\n      validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);\n    }\n\n    // If there are more arguments than parameters, report the error.\n    if (arguments.hasNext() && !functionType.isVarArgs()) {\n      int numExtraArgs = argCount - functionType.getMaxArguments();\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(argCount),\n          String.format(\"at most %s\", functionType.getMaxArguments()),\n          String.format(\"%s %s\", numExtraArgs, numExtraArgs == 1 ? \"extra argument\" : \"extra arguments\"));\n      return;\n    }\n    // If there are fewer arguments than parameters, and not part of varargs,\n    // report the error.\n    if (parameters.hasNext() && !functionType.isVarArgs()) {\n      int numMissingArgs = parameters.hasNext() ? functionType.getMinArguments() - argCount : 1;\n      report(t, call, WRONG_ARGUMENT_COUNT,\n          validator.getReadableJSTypeName(call.getFirstChild(), false),\n          String.valueOf(argCount),\n          String.format(\"at least %s\", functionType.getMinArguments()),\n          String.format(\"%s %s\", numMissingArgs, numMissingArgs == 1 ? \"missing argument\" : \"missing arguments\"));\n      return;\n    }\n    // For varargs functions, just validate the remaining args against the\n    // varargs parameter type (if it exists).\n    if (parameters.hasNext() && functionType.isVarArgs()) {\n      parameter = parameters.next();\n      while (arguments.hasNext()) {\n        argument = arguments.next();\n        ordinal++;\n        validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal);\n      }\n    }\n  }\n\n  /**\n   * Counts the number of arguments in a function call AST node.\n   *\n   * @param call The function call AST node.\n   * @return The number of arguments.\n   */\n  private int countArguments(Node call) {\n    return call.hasOneChild() ? 0 : call.getLastChild().getChildCount();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..af421078 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1396,7 +1396,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n   /**\n    * Visits the parameters of a CALL or a NEW node.\n    */\n-  private void visitParameterList(NodeTraversal t, Node call,\n+private void visitParameterList(NodeTraversal t, Node call,\n       FunctionType functionType) {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n@@ -1405,11 +1405,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     int ordinal = 0;\n     Node parameter = null;\n     Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n+\n+    int argCount = countArguments(call);\n+\n+    while (parameters.hasNext() && arguments.hasNext()) {\n+      // Validate each argument against the corresponding parameter.\n+      parameter = parameters.next();\n       argument = arguments.next();\n       ordinal++;\n \n@@ -1417,16 +1418,48 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n           getJSType(argument), getJSType(parameter), call, ordinal);\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n+    // If there are more arguments than parameters, report the error.\n+    if (arguments.hasNext() && !functionType.isVarArgs()) {\n+      int numExtraArgs = argCount - functionType.getMaxArguments();\n       report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(argCount),\n+          String.format(\"at most %s\", functionType.getMaxArguments()),\n+          String.format(\"%s %s\", numExtraArgs, numExtraArgs == 1 ? \"extra argument\" : \"extra arguments\"));\n+      return;\n     }\n+    // If there are fewer arguments than parameters, and not part of varargs,\n+    // report the error.\n+    if (parameters.hasNext() && !functionType.isVarArgs()) {\n+      int numMissingArgs = parameters.hasNext() ? functionType.getMinArguments() - argCount : 1;\n+      report(t, call, WRONG_ARGUMENT_COUNT,\n+          validator.getReadableJSTypeName(call.getFirstChild(), false),\n+          String.valueOf(argCount),\n+          String.format(\"at least %s\", functionType.getMinArguments()),\n+          String.format(\"%s %s\", numMissingArgs, numMissingArgs == 1 ? \"missing argument\" : \"missing arguments\"));\n+      return;\n+    }\n+    // For varargs functions, just validate the remaining args against the\n+    // varargs parameter type (if it exists).\n+    if (parameters.hasNext() && functionType.isVarArgs()) {\n+      parameter = parameters.next();\n+      while (arguments.hasNext()) {\n+        argument = arguments.next();\n+        ordinal++;\n+        validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal);\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Counts the number of arguments in a function call AST node.\n+   *\n+   * @param call The function call AST node.\n+   * @return The number of arguments.\n+   */\n+  private int countArguments(Node call) {\n+    return call.hasOneChild() ? 0 : call.getLastChild().getChildCount();\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}