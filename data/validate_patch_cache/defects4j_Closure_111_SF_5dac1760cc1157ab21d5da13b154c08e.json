{
    "patch": "protected JSType caseTopType(JSType topType) {\n  if (topType.isUnknownType()) {\n    return JSType.UNKNOWN;\n  } else if (topType.isAllType()) {\n    return JSType.ALL;\n  } else if (topType.isNoType()) {\n    return JSType.BOTTOM;\n  } else if (topType.isUnknownValueType()) {\n    return JSType.UNKNOWN;\n  } else if (topType.isAllValueType()) {\n    return JSType.ALL;\n  } else if (topType.isNoObjectType()) {\n    return JSType.BOTTOM;\n  }\n  // If topType is not one of the special top types, return the native object type\n  return topType.getInspectableTypeOf();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..22ab44f4 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -50,9 +50,23 @@ public class ClosureReverseAbstractInterpreter\n   private final Visitor<JSType> restrictToArrayVisitor =\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n-        protected JSType caseTopType(JSType topType) {\n-          return topType;\n-        }\n+protected JSType caseTopType(JSType topType) {\n+  if (topType.isUnknownType()) {\n+    return JSType.UNKNOWN;\n+  } else if (topType.isAllType()) {\n+    return JSType.ALL;\n+  } else if (topType.isNoType()) {\n+    return JSType.BOTTOM;\n+  } else if (topType.isUnknownValueType()) {\n+    return JSType.UNKNOWN;\n+  } else if (topType.isAllValueType()) {\n+    return JSType.ALL;\n+  } else if (topType.isNoObjectType()) {\n+    return JSType.BOTTOM;\n+  }\n+  // If topType is not one of the special top types, return the native object type\n+  return topType.getInspectableTypeOf();\n+}\n \n         @Override\n         public JSType caseObjectType(ObjectType type) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}