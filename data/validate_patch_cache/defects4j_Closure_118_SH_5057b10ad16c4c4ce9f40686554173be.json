{
    "patch": "        Node child = n.getFirstChild();\n        while (child != null) {\n          switch (child.getToken()) {\n            case GETPROP:\n              // object literal property\n              String propName = child.getLastChild().getString();\n              T propType = typeSystem.getType(getScope(), n, propName);\n              // Check if the property should be renamed.\n              Property prop = getProperty(propName);\n              if (!prop.scheduleRenaming(child.getLastChild(),\n                                         processProperty(t, prop, propType, null))) {\n                // TODO(user): It doesn't look like the user can do much in this\n                // case right now.\n                if (propertiesToErrorFor.containsKey(propName)) {\n                  compiler.report(JSError.make(\n                      t.getSourceName(), n, propertiesToErrorFor.get(propName),\n                      Warnings.INVALIDATION, propName,\n                      (propType == null ? \"null\" : propType.toString()),\n                      n.toString(), \"\"));\n                }\n              }\n              break;\n            case STRING_KEY:\n              T keyType = typeSystem.getType(getScope(), n, child.getString());\n              if (keyType != null && keyType.isEnumElementType()) {\n                compiler.report(JSError.make(\n                    t.getSourceName(), child, Warnings.INVALIDATION,\n                    \"An enum property name ('\" + child.getString()\n                        + \"') cannot also be an object literal property\"));\n              }\n              break;\n            default:\n              break;\n          }\n          child = child.getNext();\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..432808c6 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,42 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+        Node child = n.getFirstChild();\n+        while (child != null) {\n+          switch (child.getToken()) {\n+            case GETPROP:\n+              // object literal property\n+              String propName = child.getLastChild().getString();\n+              T propType = typeSystem.getType(getScope(), n, propName);\n+              // Check if the property should be renamed.\n+              Property prop = getProperty(propName);\n+              if (!prop.scheduleRenaming(child.getLastChild(),\n+                                         processProperty(t, prop, propType, null))) {\n+                // TODO(user): It doesn't look like the user can do much in this\n+                // case right now.\n+                if (propertiesToErrorFor.containsKey(propName)) {\n+                  compiler.report(JSError.make(\n+                      t.getSourceName(), n, propertiesToErrorFor.get(propName),\n+                      Warnings.INVALIDATION, propName,\n+                      (propType == null ? \"null\" : propType.toString()),\n+                      n.toString(), \"\"));\n+                }\n+              }\n+              break;\n+            case STRING_KEY:\n+              T keyType = typeSystem.getType(getScope(), n, child.getString());\n+              if (keyType != null && keyType.isEnumElementType()) {\n+                compiler.report(JSError.make(\n+                    t.getSourceName(), child, Warnings.INVALIDATION,\n+                    \"An enum property name ('\" + child.getString()\n+                        + \"') cannot also be an object literal property\"));\n+              }\n+              break;\n+            default:\n+              break;\n+          }\n+          child = child.getNext();\n+        }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: variable child is already defined in method handleObjectLit(NodeTraversal,Node)",
    "test_result": "ERROR"
}