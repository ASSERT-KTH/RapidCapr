{
    "patch": "import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE_OBJECT;\n\n...\n\nString getReadableJSTypeName(Node n, boolean dereference) {\n    // The best type name is the actual type name.\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        return qualifiedName;\n    }\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n        if (objectType != null) {\n            String propName = n.getLastChild().getString();\n\n            if (objectType.getConstructor() != null) {\n                // Handle interfaces and classes.\n                FunctionType ctorType = objectType.getConstructor();\n                if (ctorType.isInterface()) {\n                    objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n                } else {\n                    // Handle classes with static methods.\n                    ObjectType staticObj = objectType.getStaticPrototype();\n                    if (staticObj != null && staticObj.hasOwnProperty(propName)) {\n                        return getReadableTypeName(staticObj, propName);\n                    }\n                    // Handle instance methods.\n                    while (objectType != null && !objectType.hasOwnProperty(propName)) {\n                        objectType = objectType.getImplicitPrototype();\n                    }\n                }\n            } else if (objectType.isFunctionPrototypeType()) {\n                // Handle function types.\n                FunctionType ft = objectType.toMaybeFunctionType();\n                if (ft != null && ft.getReferenceName() != null && !ft.getReferenceName().equals(propName)) {\n                    objectType = getNativeObjectType(OBJECT_TYPE_OBJECT);\n                }\n            }\n            // Don't show complex function names or anonymous types.\n            // Instead, try to get a human-readable type name.\n            if (objectType != null && (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n                return objectType.toString() + \".\" + propName;\n            }\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n\n    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..aab6f081 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,73 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE_OBJECT;\n \n+...\n+\n+String getReadableJSTypeName(Node n, boolean dereference) {\n     // The best type name is the actual type name.\n+    String qualifiedName = n.getQualifiedName();\n+    if (qualifiedName != null) {\n+        return qualifiedName;\n+    }\n \n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n-        }\n-\n-        // Don't show complex function names or anonymous types.\n-        // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n+        if (objectType != null) {\n+            String propName = n.getLastChild().getString();\n+\n+            if (objectType.getConstructor() != null) {\n+                // Handle interfaces and classes.\n+                FunctionType ctorType = objectType.getConstructor();\n+                if (ctorType.isInterface()) {\n+                    objectType = FunctionType.getTopDefiningInterface(objectType, propName);\n+                } else {\n+                    // Handle classes with static methods.\n+                    ObjectType staticObj = objectType.getStaticPrototype();\n+                    if (staticObj != null && staticObj.hasOwnProperty(propName)) {\n+                        return getReadableTypeName(staticObj, propName);\n+                    }\n+                    // Handle instance methods.\n+                    while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+                        objectType = objectType.getImplicitPrototype();\n+                    }\n+                }\n+            } else if (objectType.isFunctionPrototypeType()) {\n+                // Handle function types.\n+                FunctionType ft = objectType.toMaybeFunctionType();\n+                if (ft != null && ft.getReferenceName() != null && !ft.getReferenceName().equals(propName)) {\n+                    objectType = getNativeObjectType(OBJECT_TYPE_OBJECT);\n+                }\n+            }\n+            // Don't show complex function names or anonymous types.\n+            // Instead, try to get a human-readable type name.\n+            if (objectType != null && (objectType.getConstructor() != null || objectType.isFunctionPrototypeType())) {\n+                return objectType.toString() + \".\" + propName;\n+            }\n         }\n-      }\n     }\n \n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n-    }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n+        }\n     }\n-    String qualifiedName = n.getQualifiedName();\n-    if (qualifiedName != null) {\n-      return qualifiedName;\n+\n+    if (type.isFunctionPrototypeType() || (type.toObjectType() != null && type.toObjectType().getConstructor() != null)) {\n+        return type.toString();\n     } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        // Don't show complex function names.\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return type.toString();\n     }\n-  }\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}