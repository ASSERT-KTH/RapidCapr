{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n\n    int numArgsToRemove = 0;\n    int numArgs = argList.getChildCount();\n\n    // Count the number of args that can be removed from the end.\n    for (int i = numArgs - 1; i >= 0; i--) {\n      Node arg = argList.getChildAtIndex(i);\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        numArgsToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (numArgsToRemove != 0) {\n      // Remove the unused args from the argument list.\n      NodeUtil.removeChildren(argList, numArgs - numArgsToRemove, numArgs);\n\n      // Remove the unused vars from the scope.\n      for (int i = numArgs - numArgsToRemove; i < numArgs; i++) {\n        Node arg = argList.getChildAtIndex(i);\n        String argName = arg.getString();\n        Var var = fnScope.getVar(argName);\n        Preconditions.checkNotNull(var);\n        Preconditions.checkState(var.getNode() == arg);\n        Preconditions.checkState(var.getScope() == fnScope);\n        fnScope.undeclare(var);\n        compiler.reportChangeToEnclosingScope(arg);\n      }\n\n      compiler.reportCodeChange();\n    } else if (callSiteOptimizer != null) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5d1b041e 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,49 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+\n+    int numArgsToRemove = 0;\n+    int numArgs = argList.getChildCount();\n+\n+    // Count the number of args that can be removed from the end.\n+    for (int i = numArgs - 1; i >= 0; i--) {\n+      Node arg = argList.getChildAtIndex(i);\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        numArgsToRemove++;\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (numArgsToRemove != 0) {\n+      // Remove the unused args from the argument list.\n+      NodeUtil.removeChildren(argList, numArgs - numArgsToRemove, numArgs);\n+\n+      // Remove the unused vars from the scope.\n+      for (int i = numArgs - numArgsToRemove; i < numArgs; i++) {\n+        Node arg = argList.getChildAtIndex(i);\n+        String argName = arg.getString();\n+        Var var = fnScope.getVar(argName);\n+        Preconditions.checkNotNull(var);\n+        Preconditions.checkState(var.getNode() == arg);\n+        Preconditions.checkState(var.getScope() == fnScope);\n+        fnScope.undeclare(var);\n+        compiler.reportChangeToEnclosingScope(arg);\n+      }\n+\n+      compiler.reportCodeChange();\n+    } else if (callSiteOptimizer != null) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}