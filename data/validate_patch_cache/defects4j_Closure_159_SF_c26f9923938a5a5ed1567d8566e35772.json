{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n  Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n\n  switch (node.getType()) {\n    case Token.CALL:\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n      while ((child = child.getNext()) != null) {\n        findCalledFunctions(child, changed);\n      }\n      break;\n    case Token.FUNCTION:\n      Node functionNameNode = node.getFirstChild();\n      if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n        changed.add(functionNameNode.getString());\n      }\n      break;\n    default:\n      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n        findCalledFunctions(c, changed);\n      }\n      break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..6bb22fcb 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,32 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+  Objects.requireNonNull(changed, \"Set of changed functions cannot be null\");\n+\n+  switch (node.getType()) {\n+    case Token.CALL:\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child != null && child.getType() == Token.NAME) {\n         changed.add(child.getString());\n       }\n-    }\n-\n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n-    }\n+      while ((child = child.getNext()) != null) {\n+        findCalledFunctions(child, changed);\n+      }\n+      break;\n+    case Token.FUNCTION:\n+      Node functionNameNode = node.getFirstChild();\n+      if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n+        changed.add(functionNameNode.getString());\n+      }\n+      break;\n+    default:\n+      for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+        findCalledFunctions(c, changed);\n+      }\n+      break;\n   }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}