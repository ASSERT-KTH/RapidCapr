{
    "patch": "import java.util.Arrays;\n\npublic class StringUtils {\n\n    public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n        if (cs == null || searchChars == null) {\n            return false;\n        }\n        final int csLength = cs.length();\n        final int searchCharsLength = searchChars.length;\n        final int csLast = csLength - 1;\n        final int searchCharsLast = searchCharsLength - 1;\n        for (int i = 0; i < csLength; i++) {\n            final char ch = cs.charAt(i);\n            if (isHighSurrogate(ch) && i < csLast) {\n                // Get the Unicode code point for the surrogate pair\n                final char ch2 = cs.charAt(i + 1);\n                if (isLowSurrogate(ch2)) {\n                    final int codePoint = toCodePoint(ch, ch2);\n                    for (int j = 0; j < searchCharsLength; j++) {\n                        if (searchChars[j] == codePoint) {\n                            return true;\n                        }\n                    }\n                }\n            } else {\n                for (int j = 0; j < searchCharsLength; j++) {\n                    if (searchChars[j] == ch) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    /*\n     * NOTE: The methods isHighSurrogate and isLowSurrogate are included\n     * here instead of in java.lang.Character to enable code to be run on\n     * Java 1.5 and earlier JVMs. This is to enable easy bundling of the\n     * class in an Apache Commons component.\n     */\n    private static boolean isHighSurrogate(final char ch) {\n        return ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE;\n    }\n\n    private static boolean isLowSurrogate(final char ch) {\n        return ch >= Character.MIN_LOW_SURROGATE && ch <= Character.MAX_LOW_SURROGATE;\n    }\n\n    private static int toCodePoint(final char high, final char low) {\n        return Character.toCodePoint(high, low);\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..1edc89a7 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,61 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+import java.util.Arrays;\n+\n+public class StringUtils {\n+\n+    public static boolean containsAny(final CharSequence cs, final char[] searchChars) {\n+        if (cs == null || searchChars == null) {\n+            return false;\n+        }\n+        final int csLength = cs.length();\n+        final int searchCharsLength = searchChars.length;\n+        final int csLast = csLength - 1;\n+        final int searchCharsLast = searchCharsLength - 1;\n+        for (int i = 0; i < csLength; i++) {\n+            final char ch = cs.charAt(i);\n+            if (isHighSurrogate(ch) && i < csLast) {\n+                // Get the Unicode code point for the surrogate pair\n+                final char ch2 = cs.charAt(i + 1);\n+                if (isLowSurrogate(ch2)) {\n+                    final int codePoint = toCodePoint(ch, ch2);\n+                    for (int j = 0; j < searchCharsLength; j++) {\n+                        if (searchChars[j] == codePoint) {\n+                            return true;\n+                        }\n+                    }\n+                }\n+            } else {\n+                for (int j = 0; j < searchCharsLength; j++) {\n+                    if (searchChars[j] == ch) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /*\n+     * NOTE: The methods isHighSurrogate and isLowSurrogate are included\n+     * here instead of in java.lang.Character to enable code to be run on\n+     * Java 1.5 and earlier JVMs. This is to enable easy bundling of the\n+     * class in an Apache Commons component.\n+     */\n+    private static boolean isHighSurrogate(final char ch) {\n+        return ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE;\n+    }\n+\n+    private static boolean isLowSurrogate(final char ch) {\n+        return ch >= Character.MIN_LOW_SURROGATE && ch <= Character.MAX_LOW_SURROGATE;\n+    }\n+\n+    private static int toCodePoint(final char high, final char low) {\n+        return Character.toCodePoint(high, low);\n+    }\n+\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}