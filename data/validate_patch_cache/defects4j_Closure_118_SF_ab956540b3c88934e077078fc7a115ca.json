{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      Set<String> stringProps = new HashSet<>();\n      Set<String> getterSetterProps = new HashSet<>();\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        String name = child.getString();\n\n        // Record whether this is a STRING property or a GET/SET property, so that we can throw a\n        // better error message if there's a mix of types.\n        if (child.isString()) {\n          if (getterSetterProps.contains(name)) {\n            // Already had a GET/SET property of the same name; error out.\n            compiler.report(JSError.make(\n                t.getSourceName(), child, Warnings.INVALIDATION, \"invalid_object_literal\"));\n            return;\n          } else {\n            stringProps.add(name);\n          }\n        } else if (!stringProps.contains(name)) {\n          getterSetterProps.add(name);\n        } else {\n          // Already had a STRING property of the same name; error out.\n          compiler.report(JSError.make(\n              t.getSourceName(), child, Warnings.INVALIDATION, \"invalid_object_literal\"));\n          return;\n        }\n\n        T type = typeSystem.getType(getScope(), n, name);\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n                                   processProperty(t, prop, type, null))) {\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..90bcc3c3 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,20 +488,38 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n+      Set<String> stringProps = new HashSet<>();\n+      Set<String> getterSetterProps = new HashSet<>();\n       for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n         String name = child.getString();\n+\n+        // Record whether this is a STRING property or a GET/SET property, so that we can throw a\n+        // better error message if there's a mix of types.\n+        if (child.isString()) {\n+          if (getterSetterProps.contains(name)) {\n+            // Already had a GET/SET property of the same name; error out.\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, Warnings.INVALIDATION, \"invalid_object_literal\"));\n+            return;\n+          } else {\n+            stringProps.add(name);\n+          }\n+        } else if (!stringProps.contains(name)) {\n+          getterSetterProps.add(name);\n+        } else {\n+          // Already had a STRING property of the same name; error out.\n+          compiler.report(JSError.make(\n+              t.getSourceName(), child, Warnings.INVALIDATION, \"invalid_object_literal\"));\n+          return;\n+        }\n+\n         T type = typeSystem.getType(getScope(), n, name);\n \n         Property prop = getProperty(name);\n         if (!prop.scheduleRenaming(child,\n                                    processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n           if (propertiesToErrorFor.containsKey(name)) {\n             compiler.report(JSError.make(\n                 t.getSourceName(), child, propertiesToErrorFor.get(name),",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}