{
    "patch": "//Checking whether the input string is a valid number.\nif (!isNumeric(str)) {\n    throw new NumberFormatException(str + \" is not a valid number.\");\n}\n\nif (str.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear\n    // to be in specification of class. OS X Java parses it to\n    // a wrong value.\n    return null;\n}\nif (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n    return createInteger(str);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..5259134e 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,21 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+//Checking whether the input string is a valid number.\n+if (!isNumeric(str)) {\n+    throw new NumberFormatException(str + \" is not a valid number.\");\n+}\n+\n+if (str.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear\n+    // to be in specification of class. OS X Java parses it to\n+    // a wrong value.\n+    return null;\n+}\n+if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+    return createInteger(str);\n+}\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}