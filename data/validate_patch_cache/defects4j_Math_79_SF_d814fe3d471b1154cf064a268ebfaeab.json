{
    "patch": "public static double distance(int[] p1, int[] p2) {\n    if (p1 == null || p2 == null) {\n        throw new IllegalArgumentException(\"Input arrays cannot be null.\");\n    }\n    if (p1.length != p2.length) {\n        throw new IllegalArgumentException(\"Lengths of input arrays must match\");\n    }\n\n    double sum = 0;\n    for (int i = 0; i < p1.length; i++) {\n        final double dp = p1[i] - p2[i];\n        sum += dp * dp;\n    }\n    return Double.isInfinite(sum) || Double.isNaN(sum) ? Double.POSITIVE_INFINITY : Math.sqrt(sum);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 46368dc9f..8c12b313f 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -1620,15 +1620,22 @@ public final class MathUtils {\n      * @param p2 the second point\n      * @return the L<sub>2</sub> distance between the two points\n      */\n-    public static double distance(int[] p1, int[] p2) {\n-      int sum = 0;\n-      for (int i = 0; i < p1.length; i++) {\n-          final int dp = p1[i] - p2[i];\n-          sum += dp * dp;\n-      }\n-      return Math.sqrt(sum);\n+public static double distance(int[] p1, int[] p2) {\n+    if (p1 == null || p2 == null) {\n+        throw new IllegalArgumentException(\"Input arrays cannot be null.\");\n+    }\n+    if (p1.length != p2.length) {\n+        throw new IllegalArgumentException(\"Lengths of input arrays must match\");\n     }\n \n+    double sum = 0;\n+    for (int i = 0; i < p1.length; i++) {\n+        final double dp = p1[i] - p2[i];\n+        sum += dp * dp;\n+    }\n+    return Double.isInfinite(sum) || Double.isNaN(sum) ? Double.POSITIVE_INFINITY : Math.sqrt(sum);\n+}\n+\n     /**\n      * Calculates the L<sub>&infin;</sub> (max of abs) distance between two points.\n      *",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}