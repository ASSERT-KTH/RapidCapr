{
    "patch": "    public double density(final double[] vals) throws DimensionMismatchException {\n        final int dim = getDimension();\n        if (vals == null || vals.length != dim) {\n            throw new DimensionMismatchException(dim, vals == null ? 0 : vals.length);\n        }\n\n        double normalizationFactor = Math.pow(2 * Math.PI, -0.5 * dim);\n        double exponentTerm = getExponentTerm(vals);\n        double exponent = -0.5 * exponentTerm;\n        double covarianceDeterminantFactor = Math.sqrt(covarianceMatrixDeterminant);\n\n        return normalizationFactor * Math.exp(exponent) / covarianceDeterminantFactor;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\nindex 15706811b..d98153e22 100644\n--- a/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/MultivariateNormalDistribution.java\n@@ -176,13 +176,16 @@ public class MultivariateNormalDistribution\n     /** {@inheritDoc} */\n     public double density(final double[] vals) throws DimensionMismatchException {\n         final int dim = getDimension();\n-        if (vals.length != dim) {\n-            throw new DimensionMismatchException(vals.length, dim);\n+        if (vals == null || vals.length != dim) {\n+            throw new DimensionMismatchException(dim, vals == null ? 0 : vals.length);\n         }\n \n-        return FastMath.pow(2 * FastMath.PI, -dim / 2) *\n-            FastMath.pow(covarianceMatrixDeterminant, -0.5) *\n-            getExponentTerm(vals);\n+        double normalizationFactor = Math.pow(2 * Math.PI, -0.5 * dim);\n+        double exponentTerm = getExponentTerm(vals);\n+        double exponent = -0.5 * exponentTerm;\n+        double covarianceDeterminantFactor = Math.sqrt(covarianceMatrixDeterminant);\n+\n+        return normalizationFactor * Math.exp(exponent) / covarianceDeterminantFactor;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.09528357207691344> but was:<0.057792407831586574>",
    "test_result": "FAIL"
}