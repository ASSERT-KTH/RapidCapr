{
    "patch": "      if (value.isFunction() && isSingletonGetter(callNode)) {\n        return false;\n      } else if (isSingletonGetter(reference.getParent())) {\n        return false;\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }\n  \n    /**\n     * Determines whether a given node is a call to a singleton getter method.\n     * \n     * @param node the node to examine\n     * @return true if the node is a call to a singleton getter, false otherwise\n     */\n    private boolean isSingletonGetter(Node node) {\n      CodingConvention convention = compiler.getCodingConvention();\n      String className = convention.getSingletonGetterClassName(node.getFirstChild());\n      return className != null;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..efcbe5b4 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,27 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction() && isSingletonGetter(callNode)) {\n+        return false;\n+      } else if (isSingletonGetter(reference.getParent())) {\n+        return false;\n+      }\n+\n+      return canMoveAggressively(value) ||\n+          canMoveModerately(initialization, reference);\n+    }\n+  \n+    /**\n+     * Determines whether a given node is a call to a singleton getter method.\n+     * \n+     * @param node the node to examine\n+     * @return true if the node is a call to a singleton getter, false otherwise\n+     */\n+    private boolean isSingletonGetter(Node node) {\n+      CodingConvention convention = compiler.getCodingConvention();\n+      String className = convention.getSingletonGetterClassName(node.getFirstChild());\n+      return className != null;\n+    }\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}