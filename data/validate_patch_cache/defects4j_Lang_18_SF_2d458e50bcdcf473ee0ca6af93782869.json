{
    "patch": "public class FastDateFormat extends Format {\n\n    private static final long serialVersionUID = 1L;\n\n    private final String mPattern;\n    private final Locale mLocale;\n    private final TimeZone mTimeZone;\n    private final DateFormatSymbols mSymbols;\n    private final List<Rule> mRules;\n\n    public FastDateFormat(String pattern, Locale locale, TimeZone timeZone) {\n        mPattern = pattern;\n        mLocale = locale;\n        mTimeZone = timeZone;\n        mSymbols = new DateFormatSymbols(locale);\n        mRules = parsePattern();\n    }\n\n    private List<Rule> parsePattern() {\n        DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n        List<Rule> rules = new ArrayList<Rule>();\n\n        String[] ERAs = symbols.getEras();\n        String[] months = symbols.getMonths();\n        String[] shortMonths = symbols.getShortMonths();\n        String[] weekdays = symbols.getWeekdays();\n        String[] shortWeekdays = symbols.getShortWeekdays();\n        String[] AmPmStrings = symbols.getAmPmStrings();\n\n        int length = mPattern.length();\n        int[] indexRef = new int[1];\n\n        for (int i = 0; i < length; i++) {\n            indexRef[0] = i;\n            String token = parseToken(mPattern, indexRef);\n            i = indexRef[0];\n\n            int tokenLen = token.length();\n            if (tokenLen == 0) {\n                break;\n            }\n\n            Rule rule;\n            char c = token.charAt(0);\n\n            switch (c) {\n            case 'G': // era designator (text)\n                rule = new TextField(Calendar.ERA, ERAs);\n                break;\n            case 'y': // year (number)\n                if (tokenLen >= 4) {\n                    rule = selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule = TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case 'M': // month in year (text and number)\n                if (tokenLen >= 4) {\n                    rule = new TextField(Calendar.MONTH, months);\n                } else if (tokenLen == 3) {\n                    rule = new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen == 2) {\n                    rule = TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule = UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case 'd': // day in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case 'h': // hour in am/pm (number, 1..12)\n                rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case 'H': // hour in day (number, 0..23)\n                rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case 'm': // minute in hour (number)\n                rule = selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case 's': // second in minute (number)\n                rule = selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case 'S': // millisecond (number)\n                rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case 'E': // day in week (text)\n                rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);\n                break;\n            case 'D': // day in year (number)\n                rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case 'F': // day of week in month (number)\n                rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case 'w': // week in year (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case 'W': // week in month (number)\n                rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case 'a': // am/pm marker (text)\n                rule = new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case 'k': // hour in day (1..24)\n                rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case 'K': // hour in am/pm (0..11)\n                rule = selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case 'z': // time zone (text)\n                if (tokenLen >= 4) {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case 'Z': // time zone (value)\n                if (tokenLen == 1) {\n                    rule = TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule = TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case '\\'': // literal text\n                String sub = token.substring(1);\n                if (sub.length() == 1) {\n                    rule = new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule = new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }\n\n    private String parseToken(String pattern, int[] indexRef) {\n        StringBuilder builder = new StringBuilder();\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        char c = pattern.charAt(i);\n        if (c == '\\'') {\n            parseQuotedString(pattern, builder, indexRef);\n        } else {\n            while (i < length) {\n                c = pattern.charAt(i);\n                if (c == '\\'' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n                    break;\n                }\n                builder.append(c);\n                i++;\n            }\n        }\n\n        indexRef[0] = i - 1;\n        return builder.toString();\n    }\n\n    private void parseQuotedString(String pattern, StringBuilder builder, int[] indexRef) {\n        int i = indexRef[0];\n        int length = pattern.length();\n\n        if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n            builder.append('\\'');\n            indexRef[0] = i + 1;\n            return;\n        }\n\n        i++;\n        while (i < length) {\n            char c = pattern.charAt(i);\n            if (c == '\\'') {\n                if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n                    i++;\n                    builder.append(c);\n                } else {\n                    break;\n                }\n            } else {\n                builder.append(c);\n            }\n            i++;\n        }\n\n        indexRef[",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex e0433239..e9c6d9af 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -460,7 +460,25 @@ public class FastDateFormat extends Format {\n      * @return a {@code List} of Rule objects\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n-    protected List<Rule> parsePattern() {\n+public class FastDateFormat extends Format {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final String mPattern;\n+    private final Locale mLocale;\n+    private final TimeZone mTimeZone;\n+    private final DateFormatSymbols mSymbols;\n+    private final List<Rule> mRules;\n+\n+    public FastDateFormat(String pattern, Locale locale, TimeZone timeZone) {\n+        mPattern = pattern;\n+        mLocale = locale;\n+        mTimeZone = timeZone;\n+        mSymbols = new DateFormatSymbols(locale);\n+        mRules = parsePattern();\n+    }\n+\n+    private List<Rule> parsePattern() {\n         DateFormatSymbols symbols = new DateFormatSymbols(mLocale);\n         List<Rule> rules = new ArrayList<Rule>();\n \n@@ -583,6 +601,57 @@ public class FastDateFormat extends Format {\n         return rules;\n     }\n \n+    private String parseToken(String pattern, int[] indexRef) {\n+        StringBuilder builder = new StringBuilder();\n+        int i = indexRef[0];\n+        int length = pattern.length();\n+\n+        char c = pattern.charAt(i);\n+        if (c == '\\'') {\n+            parseQuotedString(pattern, builder, indexRef);\n+        } else {\n+            while (i < length) {\n+                c = pattern.charAt(i);\n+                if (c == '\\'' || (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n+                    break;\n+                }\n+                builder.append(c);\n+                i++;\n+            }\n+        }\n+\n+        indexRef[0] = i - 1;\n+        return builder.toString();\n+    }\n+\n+    private void parseQuotedString(String pattern, StringBuilder builder, int[] indexRef) {\n+        int i = indexRef[0];\n+        int length = pattern.length();\n+\n+        if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n+            builder.append('\\'');\n+            indexRef[0] = i + 1;\n+            return;\n+        }\n+\n+        i++;\n+        while (i < length) {\n+            char c = pattern.charAt(i);\n+            if (c == '\\'') {\n+                if (i + 1 < length && pattern.charAt(i + 1) == '\\'') {\n+                    i++;\n+                    builder.append(c);\n+                } else {\n+                    break;\n+                }\n+            } else {\n+                builder.append(c);\n+            }\n+            i++;\n+        }\n+\n+        indexRef[\n+\n     /**\n      * <p>Performs the parsing of tokens.</p>\n      *",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}