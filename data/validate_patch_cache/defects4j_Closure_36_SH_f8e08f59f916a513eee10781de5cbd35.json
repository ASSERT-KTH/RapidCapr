{
    "patch": "...\n  if (value.isFunction()) {\n    Node callNode = reference.getParent();\n    if (reference.getParent().isCall()) {\n      CodingConvention convention = compiler.getCodingConvention();\n      // Bug 2388531: Don't inline subclass definitions into class defining\n      // calls as this confused class removing logic.\n      SubclassRelationship relationship =\n          convention.getClassesDefinedByCall(callNode);\n      if (relationship != null) {\n        return false;\n      }\n\n      // Don't inline singleton getter methods\n      if (convention.isSingletonGetter(callNode)) {\n        return false;\n      }\n    }\n  }\n\n  return canMoveAggressively(value) ||\n      canMoveModerately(initialization, reference);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..e72ad772 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,29 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+...\n+  if (value.isFunction()) {\n+    Node callNode = reference.getParent();\n+    if (reference.getParent().isCall()) {\n+      CodingConvention convention = compiler.getCodingConvention();\n+      // Bug 2388531: Don't inline subclass definitions into class defining\n+      // calls as this confused class removing logic.\n+      SubclassRelationship relationship =\n+          convention.getClassesDefinedByCall(callNode);\n+      if (relationship != null) {\n+        return false;\n+      }\n+\n+      // Don't inline singleton getter methods\n+      if (convention.isSingletonGetter(callNode)) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  return canMoveAggressively(value) ||\n+      canMoveModerately(initialization, reference);\n+}\n         }\n       }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}