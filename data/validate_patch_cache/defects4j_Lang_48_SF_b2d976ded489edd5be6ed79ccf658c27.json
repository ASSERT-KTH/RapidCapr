{
    "patch": "public class EqualsBuilder {\n    private boolean isEquals;\n\n    public EqualsBuilder() {\n        isEquals = true;\n    }\n\n    // ...\n\n    private void append(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n        if (lhs == rhs) {\n            return;\n        }\n        if (!isEquals) {\n            return;\n        }\n        if (lhs == null || rhs == null) {\n            setEquals(false);\n            return;\n        }\n        boolean isArray = lhs.getClass().isArray();\n        if (isArray != rhs.getClass().isArray()) {\n            setEquals(false);\n            return;\n        }\n        if (isArray) {\n            // Array type\n            if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            } else if (lhs instanceof short[]) {\n                append((short[]) lhs, (short[]) rhs);\n            } else if (lhs instanceof char[]) {\n                append((char[]) lhs, (char[]) rhs);\n            } else if (lhs instanceof byte[]) {\n                append((byte[]) lhs, (byte[]) rhs);\n            } else if (lhs instanceof double[]) {\n                append((double[]) lhs, (double[]) rhs);\n            } else if (lhs instanceof float[]) {\n                append((float[]) lhs, (float[]) rhs);\n            } else if (lhs instanceof boolean[]) {\n                append((boolean[]) lhs, (boolean[]) rhs);\n            } else {\n                // Not an array of primitives\n                append((Object[]) lhs, (Object[]) rhs, testTransients, excludeFields);\n            }\n        } else {\n            // Object type\n            if (lhs.getClass().isPrimitive()) {\n                // Primitive type\n                isEquals = lhs.equals(rhs);\n            } else {\n                // Object type\n                if (testTransients && lhs.getClass().getName().indexOf(\"$\") != -1) {\n                    // Nested object, test transients\n                    appendFieldsIn(lhs.getClass().getSuperclass(), lhs, rhs, testTransients, excludeFields);\n                }\n                appendFieldsIn(lhs.getClass(), lhs, rhs, testTransients, excludeFields);\n            }\n        }\n    }\n\n    private void append(Object[] lhs, Object[] rhs, boolean testTransients, String[] excludeFields) {\n        if (!isEquals) {\n            return;\n        }\n        if (lhs.length != rhs.length) {\n            setEquals(false);\n            return;\n        }\n        for (int i = 0; i < lhs.length; i++) {\n            append(lhs[i], rhs[i], testTransients, excludeFields);\n        }\n        return;\n    }\n\n    private void appendFieldsIn(Class clazz, Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n        Field[] fields = clazz.getDeclaredFields();\n        AccessibleObject.setAccessible(fields, true);\n        for (int i = 0; i < fields.length && isEquals; i++) {\n            Field f = fields[i];\n            if (!ArrayUtils.contains(excludeFields, f.getName())\n                    && !Modifier.isStatic(f.getModifiers())\n                    && !f.isSynthetic()) {\n                try {\n                    Object lhsObj = f.get(lhs);\n                    Object rhsObj = f.get(rhs);\n                    append(lhsObj, rhsObj, testTransients, excludeFields);\n                } catch (IllegalAccessException ex) {\n                    // This can't happen. Would've thrown SecurityException\n                    // instead\n                    // of\n                    // IllegalAccessException\n                    throw new InternalError(\"Unexpected IllegalAccessException\");\n                }\n            }\n        }\n    }\n\n    // ...\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..02729cb6 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,50 +364,109 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n-    public EqualsBuilder append(Object lhs, Object rhs) {\n-        if (isEquals == false) {\n-            return this;\n-        }\n+public class EqualsBuilder {\n+    private boolean isEquals;\n+\n+    public EqualsBuilder() {\n+        isEquals = true;\n+    }\n+\n+    // ...\n+\n+    private void append(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n         if (lhs == rhs) {\n-            return this;\n+            return;\n         }\n-        if (lhs == null || rhs == null) {\n-            this.setEquals(false);\n-            return this;\n+        if (!isEquals) {\n+            return;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n+        if (lhs == null || rhs == null) {\n+            setEquals(false);\n+            return;\n+        }\n+        boolean isArray = lhs.getClass().isArray();\n+        if (isArray != rhs.getClass().isArray()) {\n+            setEquals(false);\n+            return;\n+        }\n+        if (isArray) {\n+            // Array type\n+            if (lhs instanceof long[]) {\n+                append((long[]) lhs, (long[]) rhs);\n+            } else if (lhs instanceof int[]) {\n+                append((int[]) lhs, (int[]) rhs);\n+            } else if (lhs instanceof short[]) {\n+                append((short[]) lhs, (short[]) rhs);\n+            } else if (lhs instanceof char[]) {\n+                append((char[]) lhs, (char[]) rhs);\n+            } else if (lhs instanceof byte[]) {\n+                append((byte[]) lhs, (byte[]) rhs);\n+            } else if (lhs instanceof double[]) {\n+                append((double[]) lhs, (double[]) rhs);\n+            } else if (lhs instanceof float[]) {\n+                append((float[]) lhs, (float[]) rhs);\n+            } else if (lhs instanceof boolean[]) {\n+                append((boolean[]) lhs, (boolean[]) rhs);\n+            } else {\n+                // Not an array of primitives\n+                append((Object[]) lhs, (Object[]) rhs, testTransients, excludeFields);\n+            }\n+        } else {\n+            // Object type\n+            if (lhs.getClass().isPrimitive()) {\n+                // Primitive type\n                 isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n+            } else {\n+                // Object type\n+                if (testTransients && lhs.getClass().getName().indexOf(\"$\") != -1) {\n+                    // Nested object, test transients\n+                    appendFieldsIn(lhs.getClass().getSuperclass(), lhs, rhs, testTransients, excludeFields);\n+                }\n+                appendFieldsIn(lhs.getClass(), lhs, rhs, testTransients, excludeFields);\n+            }\n         }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n-        } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+    }\n+\n+    private void append(Object[] lhs, Object[] rhs, boolean testTransients, String[] excludeFields) {\n+        if (!isEquals) {\n+            return;\n         }\n-        return this;\n+        if (lhs.length != rhs.length) {\n+            setEquals(false);\n+            return;\n+        }\n+        for (int i = 0; i < lhs.length; i++) {\n+            append(lhs[i], rhs[i], testTransients, excludeFields);\n+        }\n+        return;\n     }\n \n+    private void appendFieldsIn(Class clazz, Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n+        Field[] fields = clazz.getDeclaredFields();\n+        AccessibleObject.setAccessible(fields, true);\n+        for (int i = 0; i < fields.length && isEquals; i++) {\n+            Field f = fields[i];\n+            if (!ArrayUtils.contains(excludeFields, f.getName())\n+                    && !Modifier.isStatic(f.getModifiers())\n+                    && !f.isSynthetic()) {\n+                try {\n+                    Object lhsObj = f.get(lhs);\n+                    Object rhsObj = f.get(rhs);\n+                    append(lhsObj, rhsObj, testTransients, excludeFields);\n+                } catch (IllegalAccessException ex) {\n+                    // This can't happen. Would've thrown SecurityException\n+                    // instead\n+                    // of\n+                    // IllegalAccessException\n+                    throw new InternalError(\"Unexpected IllegalAccessException\");\n+                }\n+            }\n+        }\n+    }\n+\n+    // ...\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: class EqualsBuilder is already defined in package org.apache.commons.lang.builder",
    "test_result": "ERROR"
}