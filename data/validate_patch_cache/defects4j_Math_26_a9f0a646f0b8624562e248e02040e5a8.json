{
    "patch": "private Fraction(double value, double eps, int maxDenominator, int maxIterations)\n        throws FractionConversionException {\n    long overflow = (long) Integer.MAX_VALUE;\n\n    boolean negative = value < 0;\n    if (negative) {\n        value = -value;\n    }\n\n    if (value <= 0) {\n        numerator = 0;\n        denominator = 1;\n        return;\n    }\n\n    // check for (almost) integer arguments, which should not go\n    // to iterations.\n    if (value - FastMath.floor(value) < eps) {\n        this.numerator = (int) (value * (negative ? -1 : 1));\n        this.denominator = 1;\n        return;\n    }\n\n    // initialize algorithm\n    long p0 = 0;\n    long q0 = 1;\n    long p1 = 1;\n    long q1 = 0;\n    long p2 = (long) FastMath.floor(value);\n    long q2 = 1;\n    long a = p2;\n\n    int n = 0;\n    boolean stop = false;\n    do {\n        ++n;\n        double r = 1 / (value - a);\n        long p3 = a * p2 + p1;\n        long q3 = a * q2 + q1;\n        if (p3 > overflow || q3 > overflow) {\n            throw new FractionConversionException(value, p3, q3);\n        }\n\n        double convergent = (double)p3 / (double)q3;\n        if (n < maxIterations && FastMath.abs(convergent - value) > eps && q3 < maxDenominator) {\n            // continue with algorithm\n            p0 = p1;\n            p1 = p2;\n            q0 = q1;\n            q1 = q2;\n            p2 = p3;\n            q2 = q3;\n            a = (long) FastMath.floor(r);\n        } else {\n            stop = true;\n        }\n\n    } while (!stop);\n\n    if (n >= maxIterations) {\n        throw new FractionConversionException(value, maxIterations);\n    }\n\n    if (q2 < maxDenominator) {\n        this.numerator = (int) (negative ? -p2 : p2);\n        this.denominator = (int) q2;\n    } else {\n        this.numerator = (int) (negative ? -p1 : p1);\n        this.denominator = (int) q1;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..a121e26a7 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,71 +172,78 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n-        }\n+private Fraction(double value, double eps, int maxDenominator, int maxIterations)\n+        throws FractionConversionException {\n+    long overflow = (long) Integer.MAX_VALUE;\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n-            return;\n-        }\n+    boolean negative = value < 0;\n+    if (negative) {\n+        value = -value;\n+    }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n+    if (value <= 0) {\n+        numerator = 0;\n+        denominator = 1;\n+        return;\n+    }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n+    // check for (almost) integer arguments, which should not go\n+    // to iterations.\n+    if (value - FastMath.floor(value) < eps) {\n+        this.numerator = (int) (value * (negative ? -1 : 1));\n+        this.denominator = 1;\n+        return;\n+    }\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+    // initialize algorithm\n+    long p0 = 0;\n+    long q0 = 1;\n+    long p1 = 1;\n+    long q1 = 0;\n+    long p2 = (long) FastMath.floor(value);\n+    long q2 = 1;\n+    long a = p2;\n+\n+    int n = 0;\n+    boolean stop = false;\n+    do {\n+        ++n;\n+        double r = 1 / (value - a);\n+        long p3 = a * p2 + p1;\n+        long q3 = a * q2 + q1;\n+        if (p3 > overflow || q3 > overflow) {\n+            throw new FractionConversionException(value, p3, q3);\n         }\n \n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n+        double convergent = (double)p3 / (double)q3;\n+        if (n < maxIterations && FastMath.abs(convergent - value) > eps && q3 < maxDenominator) {\n+            // continue with algorithm\n+            p0 = p1;\n+            p1 = p2;\n+            q0 = q1;\n+            q1 = q2;\n+            p2 = p3;\n+            q2 = q3;\n+            a = (long) FastMath.floor(r);\n         } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+            stop = true;\n         }\n \n+    } while (!stop);\n+\n+    if (n >= maxIterations) {\n+        throw new FractionConversionException(value, maxIterations);\n     }\n \n+    if (q2 < maxDenominator) {\n+        this.numerator = (int) (negative ? -p2 : p2);\n+        this.denominator = (int) q2;\n+    } else {\n+        this.numerator = (int) (negative ? -p1 : p1);\n+        this.denominator = (int) q1;\n+    }\n+}\n+\n     /**\n      * Create a fraction from an int.\n      * The fraction is num / 1.",
    "result_reason": "org.apache.commons.math3.fraction.FractionConversionException: illegal state: Unable to convert 3.142 to fraction after 100 iterations",
    "test_result": "FAIL"
}