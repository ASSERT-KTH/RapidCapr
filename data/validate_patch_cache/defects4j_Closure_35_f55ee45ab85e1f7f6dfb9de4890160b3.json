{
    "patch": "  private void inferPropertiesDeclaredOnFunction(Node n) {\n    JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(n);\n    if (fnDoc == null) {\n      return;\n    }\n\n    JSType type = getJSType(n);\n    ObjectType functionObj = ObjectType.cast(type.restrictByNotNullOrUndefined());\n    if (functionObj == null) {\n      return;\n    }\n\n    JSType constraint = fnDoc.getType();\n    if (constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer =\n                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          } else {\n            JSType declaredPropType = objType.getPropertyType(prop);\n            objType.setPropertyType(prop,\n                JSType.join(declaredPropType, propType), null);\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..eb663c6f 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,6 +1118,24 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+  private void inferPropertiesDeclaredOnFunction(Node n) {\n+    JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(n);\n+    if (fnDoc == null) {\n+      return;\n+    }\n+\n+    JSType type = getJSType(n);\n+    ObjectType functionObj = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+    if (functionObj == null) {\n+      return;\n+    }\n+\n+    JSType constraint = fnDoc.getType();\n+    if (constraint == null) {\n+      return;\n+    }\n+\n+    ObjectType constraintObj = ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n@@ -1130,11 +1148,17 @@ class TypeInference\n                   getNativeType(VOID_TYPE).getLeastSupertype(propType);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n+          } else {\n+            JSType declaredPropType = objType.getPropertyType(prop);\n+            objType.setPropertyType(prop,\n+                JSType.join(declaredPropType, propType), null);\n           }\n         }\n       }\n     }\n   }\n+    }\n+  }\n \n   /**\n    * If we access a property of a symbol, then that symbol is not",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}