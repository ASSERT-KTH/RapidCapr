{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Boolean isUnnamedFunction = false;\n  Name name = functionNode.getFunctionName();\n  \n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  \n  if (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    Node lp = newNode(Token.LP);\n    lp.setLineno(functionNode.getLineno());\n    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n    newName.setCharno(position2charno(lpColumn - 9));\n    node.addChildToBack(lp);\n  } else {\n    node.addChildToBack(new Node(Token.NAME, newName));\n  }\n\n  Node lp = newNode(Token.LP);\n  Name fnName = functionNode.getFunctionName();\n  \n  if (fnName != null) {\n    lp.setLineno(fnName.getLineno());\n  } else {\n    lp.setLineno(functionNode.getLineno());\n  }\n\n  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n\n  lp.setCharno(position2charno(lparenCharno));\n  \n  for (AstNode param : functionNode.getParams()) {\n    lp.addChildToBack(transform(param));\n  }\n  \n  node.addChildToBack(lp);\n\n  Node bodyNode = transform(functionNode.getBody());\n  parseDirectives(bodyNode);\n  node.addChildToBack(bodyNode);\n\n  return node;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..cc72e7a2 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,55 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Boolean isUnnamedFunction = false;\n+  Name name = functionNode.getFunctionName();\n+  \n+  if (name == null) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+    isUnnamedFunction = true;\n+  }\n+  Node node = newNode(Token.FUNCTION);\n+  Node newName = transform(name);\n+  \n+  if (isUnnamedFunction) {\n+    newName.setLineno(functionNode.getLineno());\n+    Node lp = newNode(Token.LP);\n+    lp.setLineno(functionNode.getLineno());\n+    int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+    newName.setCharno(position2charno(lpColumn - 9));\n+    node.addChildToBack(lp);\n+  } else {\n+    node.addChildToBack(new Node(Token.NAME, newName));\n+  }\n+\n+  Node lp = newNode(Token.LP);\n+  Name fnName = functionNode.getFunctionName();\n+  \n+  if (fnName != null) {\n+    lp.setLineno(fnName.getLineno());\n+  } else {\n+    lp.setLineno(functionNode.getLineno());\n+  }\n+\n+  int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+\n+  lp.setCharno(position2charno(lparenCharno));\n+  \n+  for (AstNode param : functionNode.getParams()) {\n+    lp.addChildToBack(transform(param));\n+  }\n+  \n+  node.addChildToBack(lp);\n+\n+  Node bodyNode = transform(functionNode.getBody());\n+  parseDirectives(bodyNode);\n+  node.addChildToBack(bodyNode);\n+\n+  return node;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}