{
    "patch": "      boolean isOverride = false;\n      if (t.inGlobalScope()) {\n        Node parentOfGetprop = getprop.getParent();\n        Node grandparentOfGetprop = parentOfGetprop.getParent();\n        isOverride = (parentOfGetprop != null && parentOfGetprop.getType() == Token.ASSIGN &&\n            parentOfGetprop.getFirstChild() == getprop) ||\n            (grandparentOfGetprop != null && grandparentOfGetprop.getType() == Token.ASSIGN &&\n            grandparentOfGetprop.getFirstChild() == parentOfGetprop);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..fab06e54 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,15 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (t.inGlobalScope()) {\n+        Node parentOfGetprop = getprop.getParent();\n+        Node grandparentOfGetprop = parentOfGetprop.getParent();\n+        isOverride = (parentOfGetprop != null && parentOfGetprop.getType() == Token.ASSIGN &&\n+            parentOfGetprop.getFirstChild() == getprop) ||\n+            (grandparentOfGetprop != null && grandparentOfGetprop.getType() == Token.ASSIGN &&\n+            grandparentOfGetprop.getFirstChild() == parentOfGetprop);\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}