{
    "patch": "    public int parseInto(DateTimeParserBucket bucket, CharSequence text, int position) {\n        if (bucket == null) {\n            throw new IllegalArgumentException(\"DateTimeParserBucket must not be null\");\n        }\n\n        // store the original state of the bucket\n        DateTimeParserBucket originalBucket = new DateTimeParserBucket(\n                bucket.getMillis(), bucket.getChronology(), bucket.getLocale(),\n                bucket.getPivotYear(), bucket.getDefaultYear());\n\n        int newPos = iMatcher.parseInto(bucket, text, position);\n        if (newPos < 0) {\n            bucket.restoreState(originalBucket);\n            return newPos;\n        }\n\n        if (!resolveFields(bucket)) {\n            bucket.restoreState(originalBucket);\n            return ~position;\n        }\n\n        if (iZoneParser != null && bucket.getZone() == null) {\n            newPos = iZoneParser.parseInto(bucket, text, newPos);\n            if (newPos < 0) {\n                bucket.restoreState(originalBucket);\n                return newPos;\n            }\n        }\n\n        if (iPivotYear > 0 && bucket.getDefaultYear() < iPivotYear) {\n            bucket.setDefaultYear(iPivotYear);\n        } else if (iDefaultYear != null && bucket.getDefaultYear() < iDefaultYear.intValue()) {\n            bucket.setDefaultYear(iDefaultYear.intValue());\n        }\n\n        if (iSaveParser != null) {\n            newPos = iSaveParser.parseInto(bucket, text, newPos);\n            if (newPos < 0) {\n                bucket.restoreState(originalBucket);\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..11244921 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -694,31 +694,46 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n+    public int parseInto(DateTimeParserBucket bucket, CharSequence text, int position) {\n+        if (bucket == null) {\n+            throw new IllegalArgumentException(\"DateTimeParserBucket must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+\n+        // store the original state of the bucket\n+        DateTimeParserBucket originalBucket = new DateTimeParserBucket(\n+                bucket.getMillis(), bucket.getChronology(), bucket.getLocale(),\n+                bucket.getPivotYear(), bucket.getDefaultYear());\n+\n+        int newPos = iMatcher.parseInto(bucket, text, position);\n+        if (newPos < 0) {\n+            bucket.restoreState(originalBucket);\n+            return newPos;\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        if (!resolveFields(bucket)) {\n+            bucket.restoreState(originalBucket);\n+            return ~position;\n+        }\n+\n+        if (iZoneParser != null && bucket.getZone() == null) {\n+            newPos = iZoneParser.parseInto(bucket, text, newPos);\n+            if (newPos < 0) {\n+                bucket.restoreState(originalBucket);\n+                return newPos;\n+            }\n+        }\n+\n+        if (iPivotYear > 0 && bucket.getDefaultYear() < iPivotYear) {\n+            bucket.setDefaultYear(iPivotYear);\n+        } else if (iDefaultYear != null && bucket.getDefaultYear() < iDefaultYear.intValue()) {\n+            bucket.setDefaultYear(iDefaultYear.intValue());\n+        }\n+\n+        if (iSaveParser != null) {\n+            newPos = iSaveParser.parseInto(bucket, text, newPos);\n+            if (newPos < 0) {\n+                bucket.restoreState(originalBucket);\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}