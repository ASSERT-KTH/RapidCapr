{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        if (type.isSupported(DurationFieldType.years())) {\n            millis += (((long) getYears()) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n        }\n        if (type.isSupported(DurationFieldType.months())) {\n            millis += (((long) getMonths()) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n        }\n        if (type.isSupported(DurationFieldType.weeks())) {\n            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        }\n        if (type.isSupported(DurationFieldType.days())) {\n            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        }\n        if (type.isSupported(DurationFieldType.hours())) {\n            millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        }\n        if (type.isSupported(DurationFieldType.minutes())) {\n            millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        }\n        if (type.isSupported(DurationFieldType.seconds())) {\n            millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        }\n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..32a28e45 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1616,11 +1616,27 @@ public final class Period\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        if (type.isSupported(DurationFieldType.years())) {\n+            millis += (((long) getYears()) * ((long) DateTimeConstants.MILLIS_PER_YEAR));\n+        }\n+        if (type.isSupported(DurationFieldType.months())) {\n+            millis += (((long) getMonths()) * ((long) DateTimeConstants.MILLIS_PER_MONTH));\n+        }\n+        if (type.isSupported(DurationFieldType.weeks())) {\n+            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        }\n+        if (type.isSupported(DurationFieldType.days())) {\n+            millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        }\n+        if (type.isSupported(DurationFieldType.hours())) {\n+            millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+        }\n+        if (type.isSupported(DurationFieldType.minutes())) {\n+            millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+        }\n+        if (type.isSupported(DurationFieldType.seconds())) {\n+            millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+        }\n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}