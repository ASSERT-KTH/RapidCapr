{
    "patch": "import com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.NodeTraversal;\nimport com.google.javascript.jscomp.NodeTraversal.Callback;\nimport com.google.javascript.jscomp.parsing.parser.FeatureSet;\nimport com.google.javascript.jscomp.parsing.parser.trees.Comment;\nimport com.google.javascript.jscomp.parsing.parser.trees.Comment.Type;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.rhino.Node;\n\n// ...\n\nprivate void commentLinker(Node ast) {\n  NodeTraversal.traverse(compiler, ast, new Callback() {\n    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n,\n        Node parent) {\n      return n.isScript() || n.isBlock();\n    }\n\n    @Override\n    public void visit(NodeTraversal t, Node n, Node parent) {\n      String commentText = null;\n      if (n.hasChildren() && n.getFirstChild().isScript()) {\n        // Don't extract comments from within a script.\n        return;\n      }\n\n      for (Comment comment : n.getComments()) {\n        if (comment.getType() == Type.BLOCK || comment.getType() == Type.LINE) {\n          if (commentText == null) {\n            commentText = comment.value.replaceAll(\"\\\\/\\\\*\", \"\")\n                .replaceAll(\"\\\\*\\\\/\", \"\").replaceAll(\"\\\\s*\\\\n+\\\\s*\", \"\").trim();\n          } else {\n            commentText = SimpleFormat.format(\"%s %s\",\n                commentText.replaceAll(\"\\\\n*$\", \"\"),\n                comment.value.replaceAll(\"\\\\/\\\\*\", \"\")\n                    .replaceAll(\"\\\\*\\\\/\", \"\").replaceAll(\"\\\\s*\\\\n+\\\\s*\", \" \"))\n                .trim();\n          }\n        }\n      }\n\n      if (commentText != null) {\n        attachLink(commentText, n);\n      }\n    }\n  });\n} ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..03ae9c05 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1731,26 +1731,54 @@ final class TypedScopeCreator implements ScopeCreator {\n     /**\n      * Declares all of a function's arguments.\n      */\n-    private void declareArguments(Node functionNode) {\n-      Node astParameters = functionNode.getFirstChild().getNext();\n-      Node body = astParameters.getNext();\n-      FunctionType functionType = (FunctionType) functionNode.getJSType();\n-      if (functionType != null) {\n-        Node jsDocParameters = functionType.getParametersNode();\n-        if (jsDocParameters != null) {\n-          Node jsDocParameter = jsDocParameters.getFirstChild();\n-          for (Node astParameter : astParameters.children()) {\n-            if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n-              jsDocParameter = jsDocParameter.getNext();\n-            } else {\n-              defineSlot(astParameter, functionNode, null, true);\n-            }\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.NodeTraversal;\n+import com.google.javascript.jscomp.NodeTraversal.Callback;\n+import com.google.javascript.jscomp.parsing.parser.FeatureSet;\n+import com.google.javascript.jscomp.parsing.parser.trees.Comment;\n+import com.google.javascript.jscomp.parsing.parser.trees.Comment.Type;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.rhino.Node;\n+\n+// ...\n+\n+private void commentLinker(Node ast) {\n+  NodeTraversal.traverse(compiler, ast, new Callback() {\n+    @Override\n+    public boolean shouldTraverse(NodeTraversal t, Node n,\n+        Node parent) {\n+      return n.isScript() || n.isBlock();\n+    }\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      String commentText = null;\n+      if (n.hasChildren() && n.getFirstChild().isScript()) {\n+        // Don't extract comments from within a script.\n+        return;\n+      }\n+\n+      for (Comment comment : n.getComments()) {\n+        if (comment.getType() == Type.BLOCK || comment.getType() == Type.LINE) {\n+          if (commentText == null) {\n+            commentText = comment.value.replaceAll(\"\\\\/\\\\*\", \"\")\n+                .replaceAll(\"\\\\*\\\\/\", \"\").replaceAll(\"\\\\s*\\\\n+\\\\s*\", \"\").trim();\n+          } else {\n+            commentText = SimpleFormat.format(\"%s %s\",\n+                commentText.replaceAll(\"\\\\n*$\", \"\"),\n+                comment.value.replaceAll(\"\\\\/\\\\*\", \"\")\n+                    .replaceAll(\"\\\\*\\\\/\", \"\").replaceAll(\"\\\\s*\\\\n+\\\\s*\", \" \"))\n+                .trim();\n           }\n         }\n       }\n-    } // end declareArguments\n+\n+      if (commentText != null) {\n+        attachLink(commentText, n);\n+      }\n+    }\n+  });\n+} \n   } // end LocalScopeBuilder\n \n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}