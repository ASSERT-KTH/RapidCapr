{
    "patch": "    if (first < 0) {\n        throw new IllegalArgumentException(\"Truncated unicode escape sequence.\");\n    }\n    int codePoint = Integer.parseInt(input.subSequence(first + 1, first + 5).toString(), 16);\n    char[] chars = Character.toChars(codePoint);\n    out.write(chars);\n    return last;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..da9219c2 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,13 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    if (first < 0) {\n+        throw new IllegalArgumentException(\"Truncated unicode escape sequence.\");\n+    }\n+    int codePoint = Integer.parseInt(input.subSequence(first + 1, first + 5).toString(), 16);\n+    char[] chars = Character.toChars(codePoint);\n+    out.write(chars);\n+    return last;\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}