{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    switch(n.getToken()) {\n      case FUNCTION:\n        return true;\n      case ASSIGN:\n        Node rhs = n.getLastChild();\n        return NodeUtil.isFunctionExpression(rhs);\n      default:\n        return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b90d7167 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,15 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    switch(n.getToken()) {\n+      case FUNCTION:\n+        return true;\n+      case ASSIGN:\n+        Node rhs = n.getLastChild();\n+        return NodeUtil.isFunctionExpression(rhs);\n+      default:\n+        return false;\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}