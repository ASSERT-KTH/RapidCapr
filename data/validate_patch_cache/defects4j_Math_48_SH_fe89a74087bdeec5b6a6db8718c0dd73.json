{
    "patch": "@Test(expected = TooManyEvaluationsException.class)\npublic void testIssue631() {\n    UnivariateFunction f = x -> FastMath.exp(x) - 1 - x;\n    RegulaFalsiSolver solver = new RegulaFalsiSolver();\n    final double root = solver.solve(3624, f, 1, 10);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..4889d074f 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,12 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+@Test(expected = TooManyEvaluationsException.class)\n+public void testIssue631() {\n+    UnivariateFunction f = x -> FastMath.exp(x) - 1 - x;\n+    RegulaFalsiSolver solver = new RegulaFalsiSolver();\n+    final double root = solver.solve(3624, f, 1, 10);\n+}\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}