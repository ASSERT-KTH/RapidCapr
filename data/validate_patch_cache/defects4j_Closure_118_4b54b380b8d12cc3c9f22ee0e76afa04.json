{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        String name;\n        T type = null;\n        switch (child.getToken()) {\n          case STRING:\n            // Process string keys\n            name = child.getString();\n            type = typeSystem.getType(getScope(), n, name);\n            break;\n          case GETPROP:\n          case GETELEM:\n            // Process computed property getter declarations\n            visitChild(n, child);\n            continue;\n          case STRING_KEY:\n            // Process non-computed property getter/setter declarations\n            name = child.getString();\n            break;\n          default:\n            throw new IllegalStateException(\"Unexpected Token: \" + child.getToken());\n        }\n\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(child,\n            processProperty(t, prop, type, null))) {\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(JSError.make(\n                t.getSourceName(), child, propertiesToErrorFor.get(name),\n                Warnings.INVALIDATION, name,\n                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..eb35fdac 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,43 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        String name;\n+        T type = null;\n+        switch (child.getToken()) {\n+          case STRING:\n+            // Process string keys\n+            name = child.getString();\n+            type = typeSystem.getType(getScope(), n, name);\n+            break;\n+          case GETPROP:\n+          case GETELEM:\n+            // Process computed property getter declarations\n+            visitChild(n, child);\n+            continue;\n+          case STRING_KEY:\n+            // Process non-computed property getter/setter declarations\n+            name = child.getString();\n+            break;\n+          default:\n+            throw new IllegalStateException(\"Unexpected Token: \" + child.getToken());\n+        }\n+\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(child,\n+            processProperty(t, prop, type, null))) {\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(JSError.make(\n+                t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                Warnings.INVALIDATION, name,\n+                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+          }\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}