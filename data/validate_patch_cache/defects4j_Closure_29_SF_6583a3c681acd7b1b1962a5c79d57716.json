{
    "patch": "\n    private boolean isInlinableObject(List<Reference> refs) {\n\n      boolean ret = false;\n\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node gramps = ref.getGrandparent();\n\n\n        // Only handle VAR declarations or simple assignment statements\n        if (!isVarOrAssignExprLhs(name)) {\n          continue;\n        }\n\n        if (parent.isConst()) {\n          // Constant declarations: only accept object literals whose properties are all constants\n          Node val = ref.getAssignedValue();\n\n          if (val == null) {\n            // A const with no assignment\n            continue;\n          }\n\n          if (!val.isObjectLit()) {\n            continue;\n          }\n\n          boolean assignable = true;\n\n          for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n            Node value = key.getFirstChild();\n\n            if (value.getBooleanProp(Node.OMIT_CALLS)) {\n              assignable = false;\n              break;\n            }\n\n            // Check if the object literal contains a child object literal\n            if (value.isObjectLit()) {\n              assignable = false;\n              break;\n            }\n\n            // Check if the node is a self-ref\n            for (Reference t : refs) {\n              if (key.matchesQualifiedName(t.getNode())) {\n                assignable = false;\n                break;\n              }\n            }\n          }\n\n          if (assignable) {\n            // we've found an acceptable object literal assignment, so it's okay to inline it\n            ret = true;\n            continue;\n          }\n\n        } else {\n          Node val = ref.getAssignedValue();\n          if (val == null || val.getBooleanProp(Node.OMIT_CALLS)) {\n            // A var with no assignment or an object literal with a __noSuchMethod__\n            continue;\n          }\n\n          // We're looking for object literal assignments only\n          if (!val.isObjectLit()) {\n            continue;\n          }\n\n          // Make sure that the value is not self-refential\n          // IOW, disallow things like x = {b: x.a}.\n          //\n          // Also, ES5 getters/setters aren't handled by this pass.\n          boolean assignable = true;\n\n          for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n            // Check that the node is a plain key (not a getter/setter)\n            if (!key.isStringKey() && !key.isNumberKey()) {\n              assignable = false;\n              break;\n            }\n\n            Node value = key.getFirstChild();\n            if (value == null) {\n              // A key without a value is not an object literal\n              assignable = false;\n              break;\n            }\n\n            // Check if the object literal contains a child object literal\n            if (value.isObjectLit()) {\n              assignable = false;\n              break;\n            }\n\n            // Check if the node is a self-ref\n            for (Reference t : refs) {\n              if (key.matchesQualifiedName(t.getNode())) {\n                assignable = false;\n                break;\n              }\n            }\n          }\n\n          if (assignable) {\n            // we've found an acceptable object literal assignment, so it's okay to inline it\n            ret = true;\n            continue;\n          }\n        }\n      }\n\n      return ret;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..5e0815dc 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -152,90 +152,121 @@ class InlineObjectLiterals implements CompilerPass {\n      *   x.fn();\n      * </pre>\n      */\n+\n     private boolean isInlinableObject(List<Reference> refs) {\n+\n       boolean ret = false;\n+\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n         Node gramps = ref.getGrandparent();\n \n-        // Ignore indirect references, like x.y (except x.y(), since\n-        // the function referenced by y might reference 'this').\n-        //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n-          // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n-            return false;\n-          }\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          continue;\n-        }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n+        // Only handle VAR declarations or simple assignment statements\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n-        }\n-\n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n           continue;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n+        if (parent.isConst()) {\n+          // Constant declarations: only accept object literals whose properties are all constants\n+          Node val = ref.getAssignedValue();\n+\n+          if (val == null) {\n+            // A const with no assignment\n+            continue;\n+          }\n \n-        // Make sure that the value is not self-refential. IOW,\n-        // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n-             child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n-            return false;\n+          if (!val.isObjectLit()) {\n+            continue;\n           }\n \n+          boolean assignable = true;\n+\n+          for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+            Node value = key.getFirstChild();\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n-          // references, as that is how self-referential assignments\n-          // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n-            while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n-                // There's a self-referential assignment\n-                return false;\n+            if (value.getBooleanProp(Node.OMIT_CALLS)) {\n+              assignable = false;\n+              break;\n+            }\n+\n+            // Check if the object literal contains a child object literal\n+            if (value.isObjectLit()) {\n+              assignable = false;\n+              break;\n+            }\n+\n+            // Check if the node is a self-ref\n+            for (Reference t : refs) {\n+              if (key.matchesQualifiedName(t.getNode())) {\n+                assignable = false;\n+                break;\n               }\n-              refNode = refNode.getParent();\n             }\n           }\n-        }\n \n+          if (assignable) {\n+            // we've found an acceptable object literal assignment, so it's okay to inline it\n+            ret = true;\n+            continue;\n+          }\n+\n+        } else {\n+          Node val = ref.getAssignedValue();\n+          if (val == null || val.getBooleanProp(Node.OMIT_CALLS)) {\n+            // A var with no assignment or an object literal with a __noSuchMethod__\n+            continue;\n+          }\n+\n+          // We're looking for object literal assignments only\n+          if (!val.isObjectLit()) {\n+            continue;\n+          }\n+\n+          // Make sure that the value is not self-refential\n+          // IOW, disallow things like x = {b: x.a}.\n+          //\n+          // Also, ES5 getters/setters aren't handled by this pass.\n+          boolean assignable = true;\n+\n+          for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {\n+            // Check that the node is a plain key (not a getter/setter)\n+            if (!key.isStringKey() && !key.isNumberKey()) {\n+              assignable = false;\n+              break;\n+            }\n+\n+            Node value = key.getFirstChild();\n+            if (value == null) {\n+              // A key without a value is not an object literal\n+              assignable = false;\n+              break;\n+            }\n+\n+            // Check if the object literal contains a child object literal\n+            if (value.isObjectLit()) {\n+              assignable = false;\n+              break;\n+            }\n+\n+            // Check if the node is a self-ref\n+            for (Reference t : refs) {\n+              if (key.matchesQualifiedName(t.getNode())) {\n+                assignable = false;\n+                break;\n+              }\n+            }\n+          }\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+          if (assignable) {\n+            // we've found an acceptable object literal assignment, so it's okay to inline it\n+            ret = true;\n+            continue;\n+          }\n+        }\n       }\n+\n       return ret;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}