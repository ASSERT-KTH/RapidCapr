{
    "patch": "      if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n      if (jsDocInfo != null && jsDocInfo.hasThisType() && !NodeUtil.isGetPropOrGetElem(n.getParent())) {\n        report(t, n, FUNCTION_WITH_NON_GETPROP_GETELEM_THIS);\n      }\n\n      visitParameterList(t, n, functionType);\n      if (!functionType.isVoidType() && !functionType.isUnknownType()) {\n        ensureTyped(t, n, functionType.getReturnType());\n      } else {\n        ensureTyped(t, n, null);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..de451a81 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,27 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.isConstructor() &&\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n+        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+      }\n+\n+      // Functions with explicit 'this' types must be called in a GETPROP\n+      // or GETELEM.\n+      JSDocInfo jsDocInfo = NodeUtil.getBestJSDocInfo(n);\n+      if (jsDocInfo != null && jsDocInfo.hasThisType() && !NodeUtil.isGetPropOrGetElem(n.getParent())) {\n+        report(t, n, FUNCTION_WITH_NON_GETPROP_GETELEM_THIS);\n+      }\n+\n+      visitParameterList(t, n, functionType);\n+      if (!functionType.isVoidType() && !functionType.isUnknownType()) {\n+        ensureTyped(t, n, functionType.getReturnType());\n+      } else {\n+        ensureTyped(t, n, null);\n+      }\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}