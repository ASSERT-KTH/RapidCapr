{
    "patch": "      Name name = functionNode.getFunctionName();\n      Node node = newNode(Token.FUNCTION);\n      if (name != null) {\n        node.addChildToBack(transform(name));\n      }\n      Node lp = newNode(Token.LP);\n      lp.setLineno(position2line(functionNode.getLineno()));\n      //find the index of the left paren\n      int lpIndex = functionNode.getBody().getLeft().getLength() - 1;\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      lp.addChildToBack(new Node(Token.COMMA));\n      lp.addChildToBack(new Node(Token.NAME, name==null ? \"\" : name.getIdentifier()));\n      node.addChildToBack(lp);\n      node.addChildToBack(transform(functionNode.getBody()));\n\n      return node;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..18c74c02 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -514,6 +513,24 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+      Name name = functionNode.getFunctionName();\n+      Node node = newNode(Token.FUNCTION);\n+      if (name != null) {\n+        node.addChildToBack(transform(name));\n+      }\n+      Node lp = newNode(Token.LP);\n+      lp.setLineno(position2line(functionNode.getLineno()));\n+      //find the index of the left paren\n+      int lpIndex = functionNode.getBody().getLeft().getLength() - 1;\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      lp.addChildToBack(new Node(Token.COMMA));\n+      lp.addChildToBack(new Node(Token.NAME, name==null ? \"\" : name.getIdentifier()));\n+      node.addChildToBack(lp);\n+      node.addChildToBack(transform(functionNode.getBody()));\n+\n+      return node;\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: variable name is already defined in method processFunctionNode(FunctionNode)",
    "test_result": "ERROR"
}