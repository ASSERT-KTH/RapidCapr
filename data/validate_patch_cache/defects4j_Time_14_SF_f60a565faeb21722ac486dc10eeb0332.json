{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    int[] newValues = partial.getValues().clone();\n    newValues[fieldIndex] = FieldUtils.safeAdd(newValues[fieldIndex], valueToAdd);\n\n    int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n    if (monthIndex >= 0) {\n        int yearValue = newValues[DateTimeFieldType.year().getFieldIndex()];\n        int monthValue = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n        int dayValue = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n        try {\n            LocalDate date = new LocalDate(yearValue, monthValue, dayValue, iChronology);\n        } catch (IllegalArgumentException e) {\n            int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, monthValue);\n            dayValue = Math.min(dayValue, maxDayInMonth);\n            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayValue;\n        }\n    }\n\n    return newValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..12a91b8d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,25 +200,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    int[] newValues = partial.getValues().clone();\n+    newValues[fieldIndex] = FieldUtils.safeAdd(newValues[fieldIndex], valueToAdd);\n+\n+    int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n+    if (monthIndex >= 0) {\n+        int yearValue = newValues[DateTimeFieldType.year().getFieldIndex()];\n+        int monthValue = newValues[DateTimeFieldType.monthOfYear().getFieldIndex()];\n+        int dayValue = newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()];\n+        try {\n+            LocalDate date = new LocalDate(yearValue, monthValue, dayValue, iChronology);\n+        } catch (IllegalArgumentException e) {\n+            int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, monthValue);\n+            dayValue = Math.min(dayValue, maxDayInMonth);\n+            newValues[DateTimeFieldType.dayOfMonth().getFieldIndex()] = dayValue;\n         }\n     }\n \n+    return newValues;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Add to the Month component of the specified time instant",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}