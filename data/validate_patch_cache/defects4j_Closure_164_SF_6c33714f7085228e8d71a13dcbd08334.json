{
    "patch": "  public boolean isSubtype(JSType other) {\n    if (!(other instanceof ArrowType)) {\n      return false;\n    }\n    \n    ArrowType that = (ArrowType) other;\n    // handle specialized function cases\n    boolean thisIsGeneric = this.isGeneric();\n    boolean thatIsGeneric = that.isGeneric();\n    if (thisIsGeneric || thatIsGeneric) {\n      if (!thisIsGeneric) {\n        return false;\n      }\n      if (this instanceof TemplateType && that instanceof TemplateType) {\n        TemplateType thisTemplate = (TemplateType) this;\n        TemplateType thatTemplate = (TemplateType) that;\n        if (!thisTemplate.getReferenceName().equals(thatTemplate.getReferenceName())) {\n          return false;\n        }\n        if (thisTemplate.getBounds().size() != thatTemplate.getBounds().size()) {\n          return false;\n        }\n        for (int i = 0; i < thisTemplate.getBounds().size(); ++i) {\n          JSType thisBound = thisTemplate.getBounds().get(i);\n          JSType thatBound = thatTemplate.getBounds().get(i);\n          if (!thisBound.isEquivalentTo(thatBound)) {\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // We treat all other specialized function types as equivalent.\n        // This is safe because they are specialized to return the same type,\n        // and we don't track any information about the specialized inputs.\n        return true;\n      }\n    }\n\n    // This is described in Draft 2 of the ES4 spec,\n    // Section 3.4.7: Subtyping Function Types.\n\n    // this.returnType <: that.returnType (covariant)\n    if (!this.returnType.isSubtype(that.returnType)) {\n      return false;\n    }\n\n    // that.paramType[i] <: this.paramType[i] (contravariant)\n    //\n    // If this.paramType[i] is required,\n    // then that.paramType[i] is required.\n    //\n    // In theory, the \"required-ness\" should work in the other direction as\n    // well. In other words, if we have\n    //\n    // function f(number, number) {}\n    // function g(number) {}\n    //\n    // Then f *should* not be a subtype of g, and g *should* not be\n    // a subtype of f. But in practice, we do not implement it this way.\n    // We want to support the use case where you can pass g where f is\n    // expected, and pretend that g ignores the second argument.\n    // That way, you can have a single \"no-op\" function, and you don't have\n    // to create a new no-op function for every possible type signature.\n    //\n    // So, in this case, g < f, but f !< g\n    Node thisParam = parameters.firstChild();\n    Node thatParam = that.parameters.firstChild();\n    while (thisParam != null && thatParam != null) {\n      JSType thisParamType = thisParam.getJSType();\n      JSType thatParamType = thatParam.getJSType();\n      if (thisParamType != null) {\n        if (thatParamType == null ||\n            !thatParamType.isSubtype(thisParamType)) {\n          return false;\n        }\n      } else if (!thisParam.isVarArgs() && !thatParam.isOptional()) {\n        return false;\n      }\n\n      boolean thisIsVarArgs = thisParam.isVarArgs();\n      boolean thatIsVarArgs = thatParam.isVarArgs();\n\n      // \"that\" can't be a supertype, because it's missing a required argument.\n      if (!thatIsVarArgs && !thatParam.isOptional() && !thisIsVarArgs && thisParam.isOptional()) {\n        return false;\n      }\n\n      // don't advance if we have variable arguments\n      if (!thisIsVarArgs) {\n        thisParam = thisParam.getNext();\n      }\n      if (!thatIsVarArgs) {\n        thatParam = thatParam.getNext();\n      }\n\n      // both var_args indicates the end\n      if (thisIsVarArgs && thatIsVarArgs) {\n        thisParam = null;\n        thatParam = null;\n      }\n    }\n\n    // \"that\" can't be a supertype, because it's missing a required argument.\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/ArrowType.java b/src/com/google/javascript/rhino/jstype/ArrowType.java\nindex 1c900acd..454f8ddc 100644\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n@@ -81,8 +81,39 @@ final class ArrowType extends JSType {\n     if (!(other instanceof ArrowType)) {\n       return false;\n     }\n-\n+    \n     ArrowType that = (ArrowType) other;\n+    // handle specialized function cases\n+    boolean thisIsGeneric = this.isGeneric();\n+    boolean thatIsGeneric = that.isGeneric();\n+    if (thisIsGeneric || thatIsGeneric) {\n+      if (!thisIsGeneric) {\n+        return false;\n+      }\n+      if (this instanceof TemplateType && that instanceof TemplateType) {\n+        TemplateType thisTemplate = (TemplateType) this;\n+        TemplateType thatTemplate = (TemplateType) that;\n+        if (!thisTemplate.getReferenceName().equals(thatTemplate.getReferenceName())) {\n+          return false;\n+        }\n+        if (thisTemplate.getBounds().size() != thatTemplate.getBounds().size()) {\n+          return false;\n+        }\n+        for (int i = 0; i < thisTemplate.getBounds().size(); ++i) {\n+          JSType thisBound = thisTemplate.getBounds().get(i);\n+          JSType thatBound = thatTemplate.getBounds().get(i);\n+          if (!thisBound.isEquivalentTo(thatBound)) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      } else {\n+        // We treat all other specialized function types as equivalent.\n+        // This is safe because they are specialized to return the same type,\n+        // and we don't track any information about the specialized inputs.\n+        return true;\n+      }\n+    }\n \n     // This is described in Draft 2 of the ES4 spec,\n     // Section 3.4.7: Subtyping Function Types.\n@@ -111,8 +142,8 @@ final class ArrowType extends JSType {\n     // to create a new no-op function for every possible type signature.\n     //\n     // So, in this case, g < f, but f !< g\n-    Node thisParam = parameters.getFirstChild();\n-    Node thatParam = that.parameters.getFirstChild();\n+    Node thisParam = parameters.firstChild();\n+    Node thatParam = that.parameters.firstChild();\n     while (thisParam != null && thatParam != null) {\n       JSType thisParamType = thisParam.getJSType();\n       JSType thatParamType = thatParam.getJSType();\n@@ -121,17 +152,17 @@ final class ArrowType extends JSType {\n             !thatParamType.isSubtype(thisParamType)) {\n           return false;\n         }\n+      } else if (!thisParam.isVarArgs() && !thatParam.isOptional()) {\n+        return false;\n       }\n \n       boolean thisIsVarArgs = thisParam.isVarArgs();\n       boolean thatIsVarArgs = thatParam.isVarArgs();\n \n       // \"that\" can't be a supertype, because it's missing a required argument.\n-        // NOTE(nicksantos): In our type system, we use {function(...?)} and\n-        // {function(...NoType)} to to indicate that arity should not be\n-        // checked. Strictly speaking, this is not a correct formulation,\n-        // because now a sub-function can required arguments that are var_args\n-        // in the super-function. So we special-case this.\n+      if (!thatIsVarArgs && !thatParam.isOptional() && !thisIsVarArgs && thisParam.isOptional()) {\n+        return false;\n+      }\n \n       // don't advance if we have variable arguments\n       if (!thisIsVarArgs) {\n@@ -148,7 +179,7 @@ final class ArrowType extends JSType {\n       }\n     }\n \n-    // \"that\" can't be a supertype, because it's missing a required arguement.\n+    // \"that\" can't be a supertype, because it's missing a required argument.\n \n     return true;\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}