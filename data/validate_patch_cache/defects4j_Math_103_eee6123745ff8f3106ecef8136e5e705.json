{
    "patch": "import org.apache.commons.math.MathException;\nimport org.apache.commons.math.MaxIterationsExceededException;\nimport org.apache.commons.math.special.Erf;\n\npublic double cumulativeProbability(double x) throws MathException {\n    double ret;\n    if (Double.isNaN(x)) {\n        ret = Double.NaN;\n    } else if (x == Double.POSITIVE_INFINITY) {\n        ret = 1.0;\n    } else if (x == Double.NEGATIVE_INFINITY) {\n        ret = 0.0;\n    } else if (x == 0) {\n        ret = 0.5;\n    } else {\n        double dev = x - mean;\n        if (FastMath.abs(dev) > 40 * standardDeviation) {\n            ret = dev < 0 ? 0.0 : 1.0;\n        } else {\n            double s = standardDeviation * Math.sqrt(2.0);\n            try {\n                double res = Erf.erfc(-dev / s) * 0.5;\n                ret = (dev > 0) ? res : 1 - res;\n            } catch (MaxIterationsExceededException ex) {\n                throw new MathException(\"Unable to compute probability for x=\" + x, ex);\n            }\n        }\n    }\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..c81127ff3 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,36 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.MaxIterationsExceededException;\n+import org.apache.commons.math.special.Erf;\n+\n+public double cumulativeProbability(double x) throws MathException {\n+    double ret;\n+    if (Double.isNaN(x)) {\n+        ret = Double.NaN;\n+    } else if (x == Double.POSITIVE_INFINITY) {\n+        ret = 1.0;\n+    } else if (x == Double.NEGATIVE_INFINITY) {\n+        ret = 0.0;\n+    } else if (x == 0) {\n+        ret = 0.5;\n+    } else {\n+        double dev = x - mean;\n+        if (FastMath.abs(dev) > 40 * standardDeviation) {\n+            ret = dev < 0 ? 0.0 : 1.0;\n+        } else {\n+            double s = standardDeviation * Math.sqrt(2.0);\n+            try {\n+                double res = Erf.erfc(-dev / s) * 0.5;\n+                ret = (dev > 0) ? res : 1 - res;\n+            } catch (MaxIterationsExceededException ex) {\n+                throw new MathException(\"Unable to compute probability for x=\" + x, ex);\n+            }\n+        }\n     }\n+    return ret;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}