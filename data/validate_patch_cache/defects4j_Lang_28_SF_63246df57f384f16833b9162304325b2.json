{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int length = input.length();\n        if (index < 0 || index >= length) {\n            return 0;\n        }\n\n        int end = input.indexOf(';', index + 2);\n        if (end == -1) {\n            return 0;\n        }\n\n        String entityStr = input.subSequence(index + 2, end).toString();\n        if (entityStr.length() == 0) {\n            return 0;\n        }\n\n        int unicodeValue;\n        try {\n            if (entityStr.charAt(0) == 'x' || entityStr.charAt(0) == 'X') {\n                unicodeValue = Integer.parseInt(entityStr.substring(1), 16);\n            } else {\n                unicodeValue = Integer.parseInt(entityStr);\n            }\n        } catch (NumberFormatException e) {\n            return 0;\n        }\n\n        if (!Character.isValidCodePoint(unicodeValue)) {\n            return 0;\n        }\n\n        char[] chars = Character.toChars(unicodeValue);\n        out.write(chars);\n        return end - index + 1;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..aeecaf0d 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -33,36 +33,38 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      */\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n+        int length = input.length();\n+        if (index < 0 || index >= length) {\n+            return 0;\n+        }\n \n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n+        int end = input.indexOf(';', index + 2);\n+        if (end == -1) {\n+            return 0;\n+        }\n \n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n+        String entityStr = input.subSequence(index + 2, end).toString();\n+        if (entityStr.length() == 0) {\n+            return 0;\n+        }\n \n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n+        int unicodeValue;\n+        try {\n+            if (entityStr.charAt(0) == 'x' || entityStr.charAt(0) == 'X') {\n+                unicodeValue = Integer.parseInt(entityStr.substring(1), 16);\n+            } else {\n+                unicodeValue = Integer.parseInt(entityStr);\n             }\n+        } catch (NumberFormatException e) {\n+            return 0;\n+        }\n \n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+        if (!Character.isValidCodePoint(unicodeValue)) {\n+            return 0;\n         }\n-        return 0;\n+\n+        char[] chars = Character.toChars(unicodeValue);\n+        out.write(chars);\n+        return end - index + 1;\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}