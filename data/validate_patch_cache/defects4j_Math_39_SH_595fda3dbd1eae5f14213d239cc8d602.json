{
    "patch": "double hNew = stepSize;\n\nif (firstTime && Math.abs(hNew) > Math.abs(t - equations.getTime())) {\n    // Ensure the first step size respects t - t0\n    hNew = t - equations.getTime();\n}\n\nfinal double nextT = stepStart + hNew;\nfinal boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\nif (nextIsLast) {\n    hNew = t - stepStart;\n}\n",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..e79b30d88 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,19 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+double hNew = stepSize;\n+\n+if (firstTime && Math.abs(hNew) > Math.abs(t - equations.getTime())) {\n+    // Ensure the first step size respects t - t0\n+    hNew = t - equations.getTime();\n+}\n+\n+final double nextT = stepStart + hNew;\n+final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+if (nextIsLast) {\n+    hNew = t - stepStart;\n+}\n+\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: variable hNew is already defined in method integrate(ExpandableStatefulODE,double)",
    "test_result": "ERROR"
}