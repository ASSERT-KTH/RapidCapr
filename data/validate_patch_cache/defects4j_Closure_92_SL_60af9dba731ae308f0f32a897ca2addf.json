{
    "patch": "int indexOfDot = namespace.lastIndexOf('.');\nif (indexOfDot == -1 && namespace.startsWith(\"window.\")) {\n    // Namespace is scoped under the window object, so look for the second dot.\n    indexOfDot = namespace.indexOf('.', \"window.\".length());\n}\nif (indexOfDot < 0) {\n    indexOfDot = -1; // Namespace does not contain a dot.\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex c929a363..1f239639 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -786,7 +786,14 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         } else {\n           // In this case, the name was implicitly provided by two independent\n           // modules. We need to move this code up to a common module.\n-          int indexOfDot = namespace.indexOf('.');\n+int indexOfDot = namespace.lastIndexOf('.');\n+if (indexOfDot == -1 && namespace.startsWith(\"window.\")) {\n+    // Namespace is scoped under the window object, so look for the second dot.\n+    indexOfDot = namespace.indexOf('.', \"window.\".length());\n+}\n+if (indexOfDot < 0) {\n+    indexOfDot = -1; // Namespace does not contain a dot.\n+}\n           if (indexOfDot == -1) {\n             // Any old place is fine.\n             compiler.getNodeForCodeInsertion(minimumModule)",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}