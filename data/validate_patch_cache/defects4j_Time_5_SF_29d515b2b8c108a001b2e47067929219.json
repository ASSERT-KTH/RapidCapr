{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n        totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n        totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n        int years = getYears();\n        int months = getMonths();\n        if (years != 0) {\n            result = result.withYears(years);\n        }\n        if (months != 0) {\n            result = result.withMonths(months);\n        }\n        int weeks = getWeeks();\n        int days = getDays();\n        if (weeks != 0 || days != 0) {\n            long weekMillis = ((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n            weekMillis += ((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n            result = result.withMillis(FieldUtils.safeAdd(result.getMillis(), weekMillis));\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..fc48f15f 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,24 +1615,25 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        long totalMillis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        totalMillis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;\n+        totalMillis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;\n+        totalMillis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR;\n+        Period result = new Period(totalMillis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+        if (years != 0) {\n+            result = result.withYears(years);\n+        }\n+        if (months != 0) {\n+            result = result.withMonths(months);\n+        }\n+        int weeks = getWeeks();\n+        int days = getDays();\n+        if (weeks != 0 || days != 0) {\n+            long weekMillis = ((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK);\n+            weekMillis += ((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY);\n+            result = result.withMillis(FieldUtils.safeAdd(result.getMillis(), weekMillis));\n         }\n         return result;\n     }",
    "result_reason": "error: method withMillis in class Period cannot be applied to given types;",
    "test_result": "ERROR"
}