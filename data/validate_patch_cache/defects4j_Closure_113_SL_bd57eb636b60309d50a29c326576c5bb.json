{
    "patch": "        if (provided == null || !provided.isExplicitlyProvided()) {\n          unrecognizedRequires.add(\n              new UnrecognizedRequire(n, ns, t.getSourceName()));\n        } else {\n          JSModule providedModule = provided.explicitModule;\n          if (providedModule != null && moduleGraph != null) {\n            JSModule module = t.getModule();\n            String providedModuleName = providedModule.getName();\n            String currentModuleName = module.getName();\n            if (module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n              compiler.report(\n                  t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModuleName, currentModuleName));\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..2a95fb0c 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,20 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+        if (provided == null || !provided.isExplicitlyProvided()) {\n+          unrecognizedRequires.add(\n+              new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        } else {\n+          JSModule providedModule = provided.explicitModule;\n+          if (providedModule != null && moduleGraph != null) {\n+            JSModule module = t.getModule();\n+            String providedModuleName = providedModule.getName();\n+            String currentModuleName = module.getName();\n+            if (module != providedModule && !moduleGraph.dependsOn(module, providedModule)) {\n+              compiler.report(\n+                  t.makeError(n, XMODULE_REQUIRE_ERROR, ns, providedModuleName, currentModuleName));\n+            }\n+          }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "junit.framework.AssertionFailedError: There should be one error. required \"namespace.Class1\" namespace never provided",
    "test_result": "FAIL"
}