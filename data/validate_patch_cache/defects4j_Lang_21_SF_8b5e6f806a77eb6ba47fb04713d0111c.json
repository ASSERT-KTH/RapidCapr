{
    "patch": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n\n    // Compare the timestamps of the start of each day to check if they are on the same day\n    long cal1Timestamp = cal1.getTimeInMillis() - (cal1.get(Calendar.HOUR_OF_DAY) * 60 * 60 * 1000) -\n            (cal1.get(Calendar.MINUTE) * 60 * 1000) - (cal1.get(Calendar.SECOND) * 1000) -\n            cal1.get(Calendar.MILLISECOND);\n    long cal2Timestamp = cal2.getTimeInMillis() - (cal2.get(Calendar.HOUR_OF_DAY) * 60 * 60 * 1000) -\n            (cal2.get(Calendar.MINUTE) * 60 * 1000) - (cal2.get(Calendar.SECOND) * 1000) -\n            cal2.get(Calendar.MILLISECOND);\n\n    return cal1Timestamp == cal2Timestamp;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..2e8b3713 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -255,20 +255,22 @@ public class DateUtils {\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n-            throw new IllegalArgumentException(\"The date must not be null\");\n-        }\n-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n-                cal1.getClass() == cal2.getClass());\n+public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+    if (cal1 == null || cal2 == null) {\n+        throw new IllegalArgumentException(\"The calendar must not be null\");\n     }\n \n+    // Compare the timestamps of the start of each day to check if they are on the same day\n+    long cal1Timestamp = cal1.getTimeInMillis() - (cal1.get(Calendar.HOUR_OF_DAY) * 60 * 60 * 1000) -\n+            (cal1.get(Calendar.MINUTE) * 60 * 1000) - (cal1.get(Calendar.SECOND) * 1000) -\n+            cal1.get(Calendar.MILLISECOND);\n+    long cal2Timestamp = cal2.getTimeInMillis() - (cal2.get(Calendar.HOUR_OF_DAY) * 60 * 60 * 1000) -\n+            (cal2.get(Calendar.MINUTE) * 60 * 1000) - (cal2.get(Calendar.SECOND) * 1000) -\n+            cal2.get(Calendar.MILLISECOND);\n+\n+    return cal1Timestamp == cal2Timestamp;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Parses a string representing a date by trying a variety of different parsers.</p>",
    "result_reason": "junit.framework.AssertionFailedError: expected:<true> but was:<false>",
    "test_result": "FAIL"
}