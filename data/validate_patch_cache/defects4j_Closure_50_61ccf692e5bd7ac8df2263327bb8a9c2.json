{
    "patch": "  private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n\n    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n      return n;\n    }\n\n    Node right = callTarget.getNext();\n    if (right != null && !NodeUtil.isImmutableValue(right)) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    Node functionName = arrayNode.getNext();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n      return n;\n    }\n\n    // \",\" is the default, it doesn't need to be explicit\n    String joinString = \",\";\n    if (right != null) {\n      if (NodeUtil.isString(right) && NodeUtil.getStringValue(right).length() == 1) {\n        joinString = NodeUtil.getStringValue(right);\n      } else {\n        return n;\n      }\n    }\n\n    List<Node> arrayChildren = new ArrayList<Node>();\n\n    // Collect array children\n    for (Node elementNode = arrayNode.getFirstChild(); elementNode != null; elementNode = elementNode.getNext()) {\n      arrayChildren.add(elementNode);\n    }\n\n    // Merge adjacent String nodes\n    List<Node> foldedArrayChildren = new ArrayList<Node>();\n    StringBuilder foldedString = null;\n    int foldedSize = 0;\n    for (int i = 0; i < arrayChildren.size(); i++) {\n      Node arrayChild = arrayChildren.get(i);\n      String elementString = NodeUtil.getArrayElementStringValue(arrayChild);\n      if (NodeUtil.isImmutableValue(arrayChild) && arrayChild.getType() != Token.EMPTY) {\n        if (foldedString == null) {\n          foldedString = new StringBuilder();\n        } else {\n          foldedString.append(joinString);\n        }\n        foldedString.append(elementString);\n      } else {\n        if (foldedString != null) {\n          Node foldedStringNode = IR.string(foldedString.toString()).srcref(arrayChild);\n          foldedArrayChildren.add(foldedStringNode);\n          foldedSize += InlineCostEstimator.getCost(foldedStringNode);\n          foldedString = null;\n        }\n        foldedArrayChildren.add(arrayChild);\n        foldedSize += InlineCostEstimator.getCost(arrayChild);\n      }\n    }\n    if (foldedString != null) {\n      Node foldedStringNode = IR.string(foldedString.toString()).srcref(arrayNode);\n      foldedArrayChildren.add(foldedStringNode);\n      foldedSize += InlineCostEstimator.getCost(foldedStringNode);\n    }\n\n    // Total size reduction from folding\n    int totalSizeReduction = InlineCostEstimator.getCost(n) - foldedSize;\n\n    Node result;\n    if (foldedArrayChildren.size() == 0) {\n      result = IR.string(\"\").srcref(n);\n    } else if (foldedArrayChildren.size() == 1) {\n      Node foldedChild = foldedArrayChildren.get(0);\n      if (foldedChild.getType() != Token.STRING) {\n        foldedChild = new Node(Token.ADD,\n            IR.string(\"\").srcref(n), foldedChild)\n            .srcref(foldedChild);\n      }\n      if (InlineCostEstimator.getCost(foldedChild) > InlineCostEstimator.getCost(n)) {\n        return n;\n      }\n      result = foldedChild;\n    } else {\n      Node joinStringNode = IR.string(joinString).srcref(arrayNode);\n      Node joinNode = new Call(joinStringNode, new NodeList<>(foldedArrayChildren)).srcref(n);\n\n      if (InlineCostEstimator.getCost(joinNode) > InlineCostEstimator.getCost(n)) {\n        return n;\n      }\n\n      result = joinNode;\n    }\n\n    n.replaceWith(result);\n    reportCodeChange();\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..37b8f1de 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -372,107 +372,96 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     }\n \n     Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n+    if (right != null && !NodeUtil.isImmutableValue(right)) {\n+      return n;\n     }\n \n     Node arrayNode = callTarget.getFirstChild();\n     Node functionName = arrayNode.getNext();\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n+    if ((arrayNode.getType() != Token.ARRAYLIT) || !functionName.getString().equals(\"join\")) {\n       return n;\n     }\n \n-      // \",\" is the default, it doesn't need to be explicit\n+    // \",\" is the default, it doesn't need to be explicit\n+    String joinString = \",\";\n+    if (right != null) {\n+      if (NodeUtil.isString(right) && NodeUtil.getStringValue(right).length() == 1) {\n+        joinString = NodeUtil.getStringValue(right);\n+      } else {\n+        return n;\n+      }\n+    }\n \n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n+    List<Node> arrayChildren = new ArrayList<Node>();\n+\n+    // Collect array children\n+    for (Node elementNode = arrayNode.getFirstChild(); elementNode != null; elementNode = elementNode.getNext()) {\n+      arrayChildren.add(elementNode);\n+    }\n+\n+    // Merge adjacent String nodes\n+    List<Node> foldedArrayChildren = new ArrayList<Node>();\n+    StringBuilder foldedString = null;\n     int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+    for (int i = 0; i < arrayChildren.size(); i++) {\n+      Node arrayChild = arrayChildren.get(i);\n+      String elementString = NodeUtil.getArrayElementStringValue(arrayChild);\n+      if (NodeUtil.isImmutableValue(arrayChild) && arrayChild.getType() != Token.EMPTY) {\n+        if (foldedString == null) {\n+          foldedString = new StringBuilder();\n         } else {\n-          sb.append(joinString);\n+          foldedString.append(joinString);\n         }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n+        foldedString.append(elementString);\n       } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+        if (foldedString != null) {\n+          Node foldedStringNode = IR.string(foldedString.toString()).srcref(arrayChild);\n+          foldedArrayChildren.add(foldedStringNode);\n+          foldedSize += InlineCostEstimator.getCost(foldedStringNode);\n+          foldedString = null;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n+        foldedArrayChildren.add(arrayChild);\n+        foldedSize += InlineCostEstimator.getCost(arrayChild);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n     }\n-\n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+    if (foldedString != null) {\n+      Node foldedStringNode = IR.string(foldedString.toString()).srcref(arrayNode);\n+      foldedArrayChildren.add(foldedStringNode);\n+      foldedSize += InlineCostEstimator.getCost(foldedStringNode);\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n \n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    // Total size reduction from folding\n+    int totalSizeReduction = InlineCostEstimator.getCost(n) - foldedSize;\n+\n+    Node result;\n+    if (foldedArrayChildren.size() == 0) {\n+      result = IR.string(\"\").srcref(n);\n+    } else if (foldedArrayChildren.size() == 1) {\n+      Node foldedChild = foldedArrayChildren.get(0);\n+      if (foldedChild.getType() != Token.STRING) {\n+        foldedChild = new Node(Token.ADD,\n+            IR.string(\"\").srcref(n), foldedChild)\n+            .srcref(foldedChild);\n+      }\n+      if (InlineCostEstimator.getCost(foldedChild) > InlineCostEstimator.getCost(n)) {\n+        return n;\n+      }\n+      result = foldedChild;\n+    } else {\n+      Node joinStringNode = IR.string(joinString).srcref(arrayNode);\n+      Node joinNode = new Call(joinStringNode, new NodeList<>(foldedArrayChildren)).srcref(n);\n+\n+      if (InlineCostEstimator.getCost(joinNode) > InlineCostEstimator.getCost(n)) {\n+        return n;\n+      }\n+\n+      result = joinNode;\n     }\n \n-    return n;\n+    n.replaceWith(result);\n+    reportCodeChange();\n+    return result;\n   }\n \n   /**\n@@ -642,4 +631,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}