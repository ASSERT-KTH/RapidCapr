{
    "patch": "                // Requires should be removed before further processing.\n                // Some clients run Closure Compiler multiple times, first time with\n                // the checks for broken requires turned off. In these cases, we\n                // allow the broken requires to be preserved by the first run to\n                // be caught in the subsequent run.\n                parent.detachFromParent();\n                try {\n                    compiler.reportCodeChange();\n                } catch (RuntimeException e) {\n                    if (e.toString().contains(\"Recorded bad position information\")) {\n                       // ignore the exception if caused by bad position\n                    } else {\n                       throw e;\n                    }\n                }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..b11909e6 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,21 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+                // Requires should be removed before further processing.\n+                // Some clients run Closure Compiler multiple times, first time with\n+                // the checks for broken requires turned off. In these cases, we\n+                // allow the broken requires to be preserved by the first run to\n+                // be caught in the subsequent run.\n+                parent.detachFromParent();\n+                try {\n+                    compiler.reportCodeChange();\n+                } catch (RuntimeException e) {\n+                    if (e.toString().contains(\"Recorded bad position information\")) {\n+                       // ignore the exception if caused by bad position\n+                    } else {\n+                       throw e;\n+                    }\n+                }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}