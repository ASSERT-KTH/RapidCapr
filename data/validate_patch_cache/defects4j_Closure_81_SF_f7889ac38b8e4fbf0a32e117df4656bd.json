{
    "patch": "    private Node transform(AstNode node) {\n      switch (node.getType()) {\n        case Token.EXPR_VOID:\n          node.setType(Token.EXPR_RESULT);\n          return transform(((UnaryExpression) node).getOperand());\n        case Token.EXPR_RESULT:\n        case Token.EXPR_TRUE:\n        case Token.EXPR_FALSE:\n        case Token.REGEXP:\n          return newNode(transformTokenType(node.getType()), node);\n        case Token.NAME:\n          return transformLiteral((Name) node);\n        case Token.STRING:\n          return transformString((StringLiteral) node);\n        case Token.NUMBER:\n          return transformNumber((NumberLiteral) node);\n        case Token.NULL:\n          return transformNull((NullLiteral) node);\n        case Token.THIS:\n          return transformThis((AstNode) node);\n        case Token.ARRAYLIT:\n          return transformArrayLiteral((ArrayLiteral) node);\n        case Token.OBJECTLIT:\n          return transformObjectLiteral((ObjectLiteral) node);\n        case Token.NEW:\n          return transformNewExpression((NewExpression) node);\n        case Token.CALL:\n          return transformCall((FunctionCall) node);\n        case Token.DOT:\n        case Token.GETPROP:\n          return transformPropAccess((PropertyGet) node);\n        case Token.COLON:\n          return transformColON((AstNode) node);\n        case Token.NOT:\n        case Token.POS:\n        case Token.NEG:\n        case Token.BITNOT:\n        case Token.TYPEOF:\n        case Token.VOID:\n        case Token.ADD:\n        case Token.SUB:\n          return transformUnary((UnaryExpression) node);\n        case Token.INC:\n        case Token.DEC:\n          return transformIncDec((IncDecExpression) node);\n        case Token.COMMA:\n          return transformBinary((BinaryOperator) node);\n        case Token.AND:\n        case Token.OR:\n        case Token.HOOK:\n          return transformTrinary((TrinaryExpression) node);\n        case Token.ASSIGN:\n        case Token.ASSIGN_ADD:\n        case Token.ASSIGN_SUB:\n        case Token.ASSIGN_MUL:\n        case Token.ASSIGN_DIV:\n        case Token.ASSIGN_MOD:\n        case Token.ASSIGN_BITAND:\n        case Token.ASSIGN_BITOR:\n        case Token.ASSIGN_BITXOR:\n        case Token.ASSIGN_LSH:\n        case Token.ASSIGN_RSH:\n        case Token.ASSIGN_URSH:\n          return transformAssign((Assignment) node);\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n        case Token.SHEQ:\n        case Token.SHNE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.GE:\n        case Token.LE:\n        case Token.GT:\n        case Token.LT:\n        case Token.INSTANCEOF:\n        case Token.IN:\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n        case Token.ADD:\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n        case Token.MOD:\n          return transformBinary((BinaryOperator) node);\n        case Token.BLOCK:\n        case Token.SCRIPT:\n        case Token.TRY:\n        case Token.PARAM_LIST:\n          return processGeneric((AstRoot) node);\n        case Token.FUNCTION:\n          return processFunctionNode((FunctionNode) node);\n        case Token.EXPR_RESULT:\n          if (node instanceof EmptyExpression) {\n            return processEmptyExpression((EmptyExpression) node);\n          } else {\n            return processExpressionStatement((ExpressionStatement) node);\n          }\n        case Token.BREAK:\n          return processBreakStatement((BreakStatement) node);\n        case Token.CONTINUE:\n          return processContinueStatement((ContinueStatement) node);\n        case Token.RETURN:\n          return processReturnStatement((ReturnStatement) node);\n        case Token.VAR:\n        case Token.CONST:\n          return processVariableDeclaration((VariableDeclaration) node);\n        case Token.FOR:\n          return processForLoop((ForLoop) node);\n        case Token.FOR_IN:\n          return processForInLoop((ForInLoop) node);\n        case Token.WHILE:\n          return processWhileLoop((WhileLoop) node);\n        case Token.DO:\n          return processDoLoop((DoLoop) node);\n        case Token.IF:\n          return processIfStatement((IfStatement) node);\n        case Token.SWITCH:\n          return processSwitchStatement((SwitchStatement) node);\n        case Token.CASE:\n        case Token.DEFAULT:\n          return processSwitchCase((SwitchCase) node);\n        case Token.TRY_BLOCK:\n          return processTry((TryStatement) node);\n        case Token.CATCH:\n          return processCatchClause((CatchClause) node);\n        case Token.THROW:\n          return processThrowStatement((ThrowStatement) node);\n        case Token.WITH:\n          errorReporter.warning(\n              \"With statements are not supported\",\n              sourceName,\n              node.getLineno());\n          return newNode(Token.EMPTY);\n        case Token.DEBUGGER:\n          errorReporter.warning(\n              \"Debugger statements are not supported\",\n              sourceName,\n              node.getLineno());\n          return newNode(Token.EMPTY);\n        case Token.EMPTY:\n          return newNode(Token.EMPTY);\n        default:\n          errorReporter.warning(\n              \"Unsupported node type: \" + Token.name(node.getType()),\n              sourceName,\n              node.getLineno());\n          return newNode(Token.EMPTY);\n      }\n    }\n\n    private Node processEmptyExpression(EmptyExpression exprNode) {\n      return newNode(Token.EMPTY);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..cef8dc43 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,181 +384,160 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return (nType == Token.EXPR_RESULT || nType == Token.EXPR_VOID) &&\n-          n.getFirstChild().getType() == Token.STRING &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n-\n-    @Override\n-    Node processForLoop(ForLoop loopNode) {\n-      Node node = newNode(\n-          Token.FOR,\n-          transform(loopNode.getInitializer()),\n-          transform(loopNode.getCondition()),\n-          transform(loopNode.getIncrement()));\n-      node.addChildToBack(transformBlock(loopNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processFunctionCall(FunctionCall callNode) {\n-      Node node = newNode(transformTokenType(callNode.getType()),\n-                           transform(callNode.getTarget()));\n-      for (AstNode child : callNode.getArguments()) {\n-        node.addChildToBack(transform(child));\n+    private Node transform(AstNode node) {\n+      switch (node.getType()) {\n+        case Token.EXPR_VOID:\n+          node.setType(Token.EXPR_RESULT);\n+          return transform(((UnaryExpression) node).getOperand());\n+        case Token.EXPR_RESULT:\n+        case Token.EXPR_TRUE:\n+        case Token.EXPR_FALSE:\n+        case Token.REGEXP:\n+          return newNode(transformTokenType(node.getType()), node);\n+        case Token.NAME:\n+          return transformLiteral((Name) node);\n+        case Token.STRING:\n+          return transformString((StringLiteral) node);\n+        case Token.NUMBER:\n+          return transformNumber((NumberLiteral) node);\n+        case Token.NULL:\n+          return transformNull((NullLiteral) node);\n+        case Token.THIS:\n+          return transformThis((AstNode) node);\n+        case Token.ARRAYLIT:\n+          return transformArrayLiteral((ArrayLiteral) node);\n+        case Token.OBJECTLIT:\n+          return transformObjectLiteral((ObjectLiteral) node);\n+        case Token.NEW:\n+          return transformNewExpression((NewExpression) node);\n+        case Token.CALL:\n+          return transformCall((FunctionCall) node);\n+        case Token.DOT:\n+        case Token.GETPROP:\n+          return transformPropAccess((PropertyGet) node);\n+        case Token.COLON:\n+          return transformColON((AstNode) node);\n+        case Token.NOT:\n+        case Token.POS:\n+        case Token.NEG:\n+        case Token.BITNOT:\n+        case Token.TYPEOF:\n+        case Token.VOID:\n+        case Token.ADD:\n+        case Token.SUB:\n+          return transformUnary((UnaryExpression) node);\n+        case Token.INC:\n+        case Token.DEC:\n+          return transformIncDec((IncDecExpression) node);\n+        case Token.COMMA:\n+          return transformBinary((BinaryOperator) node);\n+        case Token.AND:\n+        case Token.OR:\n+        case Token.HOOK:\n+          return transformTrinary((TrinaryExpression) node);\n+        case Token.ASSIGN:\n+        case Token.ASSIGN_ADD:\n+        case Token.ASSIGN_SUB:\n+        case Token.ASSIGN_MUL:\n+        case Token.ASSIGN_DIV:\n+        case Token.ASSIGN_MOD:\n+        case Token.ASSIGN_BITAND:\n+        case Token.ASSIGN_BITOR:\n+        case Token.ASSIGN_BITXOR:\n+        case Token.ASSIGN_LSH:\n+        case Token.ASSIGN_RSH:\n+        case Token.ASSIGN_URSH:\n+          return transformAssign((Assignment) node);\n+        case Token.BITAND:\n+        case Token.BITOR:\n+        case Token.BITXOR:\n+        case Token.SHEQ:\n+        case Token.SHNE:\n+        case Token.EQ:\n+        case Token.NE:\n+        case Token.GE:\n+        case Token.LE:\n+        case Token.GT:\n+        case Token.LT:\n+        case Token.INSTANCEOF:\n+        case Token.IN:\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.URSH:\n+        case Token.ADD:\n+        case Token.SUB:\n+        case Token.MUL:\n+        case Token.DIV:\n+        case Token.MOD:\n+          return transformBinary((BinaryOperator) node);\n+        case Token.BLOCK:\n+        case Token.SCRIPT:\n+        case Token.TRY:\n+        case Token.PARAM_LIST:\n+          return processGeneric((AstRoot) node);\n+        case Token.FUNCTION:\n+          return processFunctionNode((FunctionNode) node);\n+        case Token.EXPR_RESULT:\n+          if (node instanceof EmptyExpression) {\n+            return processEmptyExpression((EmptyExpression) node);\n+          } else {\n+            return processExpressionStatement((ExpressionStatement) node);\n+          }\n+        case Token.BREAK:\n+          return processBreakStatement((BreakStatement) node);\n+        case Token.CONTINUE:\n+          return processContinueStatement((ContinueStatement) node);\n+        case Token.RETURN:\n+          return processReturnStatement((ReturnStatement) node);\n+        case Token.VAR:\n+        case Token.CONST:\n+          return processVariableDeclaration((VariableDeclaration) node);\n+        case Token.FOR:\n+          return processForLoop((ForLoop) node);\n+        case Token.FOR_IN:\n+          return processForInLoop((ForInLoop) node);\n+        case Token.WHILE:\n+          return processWhileLoop((WhileLoop) node);\n+        case Token.DO:\n+          return processDoLoop((DoLoop) node);\n+        case Token.IF:\n+          return processIfStatement((IfStatement) node);\n+        case Token.SWITCH:\n+          return processSwitchStatement((SwitchStatement) node);\n+        case Token.CASE:\n+        case Token.DEFAULT:\n+          return processSwitchCase((SwitchCase) node);\n+        case Token.TRY_BLOCK:\n+          return processTry((TryStatement) node);\n+        case Token.CATCH:\n+          return processCatchClause((CatchClause) node);\n+        case Token.THROW:\n+          return processThrowStatement((ThrowStatement) node);\n+        case Token.WITH:\n+          errorReporter.warning(\n+              \"With statements are not supported\",\n+              sourceName,\n+              node.getLineno());\n+          return newNode(Token.EMPTY);\n+        case Token.DEBUGGER:\n+          errorReporter.warning(\n+              \"Debugger statements are not supported\",\n+              sourceName,\n+              node.getLineno());\n+          return newNode(Token.EMPTY);\n+        case Token.EMPTY:\n+          return newNode(Token.EMPTY);\n+        default:\n+          errorReporter.warning(\n+              \"Unsupported node type: \" + Token.name(node.getType()),\n+              sourceName,\n+              node.getLineno());\n+          return newNode(Token.EMPTY);\n       }\n-\n-      int leftParamPos = callNode.getAbsolutePosition() + callNode.getLp();\n-      node.setLineno(callNode.getLineno());\n-      node.setCharno(position2charno(leftParamPos));\n-      return node;\n     }\n \n-    @Override\n-    Node processFunctionNode(FunctionNode functionNode) {\n-      Name name = functionNode.getFunctionName();\n-      Boolean isUnnamedFunction = false;\n-      if (name == null) {\n-        name = new Name();\n-        name.setIdentifier(\"\");\n-        isUnnamedFunction = true;\n-      }\n-      Node node = newNode(Token.FUNCTION);\n-      Node newName = transform(name);\n-      if (isUnnamedFunction) {\n-        // Old Rhino tagged the empty name node with the line number of the\n-        // declaration.\n-        newName.setLineno(functionNode.getLineno());\n-        // TODO(bowdidge) Mark line number of paren correctly.\n-        // Same problem as below - the left paren might not be on the\n-        // same line as the function keyword.\n-        int lpColumn = functionNode.getAbsolutePosition() +\n-            functionNode.getLp();\n-        newName.setCharno(position2charno(lpColumn));\n-      }\n-\n-      node.addChildToBack(newName);\n-      Node lp = newNode(Token.LP);\n-      // The left paren's complicated because it's not represented by an\n-      // AstNode, so there's nothing that has the actual line number that it\n-      // appeared on.  We know the paren has to appear on the same line as the\n-      // function name (or else a semicolon will be inserted.)  If there's no\n-      // function name, assume the paren was on the same line as the function.\n-      // TODO(bowdidge): Mark line number of paren correctly.\n-      Name fnName = functionNode.getFunctionName();\n-      if (fnName != null) {\n-        lp.setLineno(fnName.getLineno());\n-      } else {\n-        lp.setLineno(functionNode.getLineno());\n-      }\n-      int lparenCharno = functionNode.getLp() +\n-          functionNode.getAbsolutePosition();\n-\n-      lp.setCharno(position2charno(lparenCharno));\n-      for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n-      }\n-      node.addChildToBack(lp);\n-\n-      Node bodyNode = transform(functionNode.getBody());\n-      parseDirectives(bodyNode);\n-      node.addChildToBack(bodyNode);\n-     return node;\n+    private Node processEmptyExpression(EmptyExpression exprNode) {\n+      return newNode(Token.EMPTY);\n     }\n \n     @Override",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processFunctionNode(FunctionNode) in TypeSafeDispatcher",
    "test_result": "ERROR"
}