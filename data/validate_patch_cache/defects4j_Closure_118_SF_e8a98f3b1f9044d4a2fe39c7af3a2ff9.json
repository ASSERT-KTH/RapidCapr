{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n        for (Node child = n.getFirstChild();\n             child != null;\n             child = child.getNext()) {\n\n            // Maybe STRING, GET, SET\n            // We should never see a mix of numbers and strings.\n            String name = child.getString();\n            T type = typeSystem.getType(getScope(), n, name);\n\n            Property prop = getProperty(name);\n            if (!prop.scheduleRenaming(child,\n                    processProperty(t, prop, type, null))) {\n                // TODO(user): It doesn't look like the user can do much in this\n                // case right now.\n                if (propertiesToErrorFor.containsKey(name)) {\n                    compiler.report(JSError.make(\n                            t.getSourceName(),\n                            child,\n                            propertiesToErrorFor.get(name),\n                            Warnings.INVALIDATION,\n                            name,\n                            (type == null ? \"null\" : type.toString()),\n                            n.toString(), \"\"));\n                }\n            } else {\n                // Make sure to add properties with valid types to the property map.\n                if (type != null && type.isValidType()) {\n                    prop.addType(type);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..38b27d2d 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,28 +488,37 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+        for (Node child = n.getFirstChild();\n+             child != null;\n+             child = child.getNext()) {\n+\n+            // Maybe STRING, GET, SET\n+            // We should never see a mix of numbers and strings.\n+            String name = child.getString();\n+            T type = typeSystem.getType(getScope(), n, name);\n+\n+            Property prop = getProperty(name);\n+            if (!prop.scheduleRenaming(child,\n+                    processProperty(t, prop, type, null))) {\n+                // TODO(user): It doesn't look like the user can do much in this\n+                // case right now.\n+                if (propertiesToErrorFor.containsKey(name)) {\n+                    compiler.report(JSError.make(\n+                            t.getSourceName(),\n+                            child,\n+                            propertiesToErrorFor.get(name),\n+                            Warnings.INVALIDATION,\n+                            name,\n+                            (type == null ? \"null\" : type.toString()),\n+                            n.toString(), \"\"));\n+                }\n+            } else {\n+                // Make sure to add properties with valid types to the property map.\n+                if (type != null && type.isValidType()) {\n+                    prop.addType(type);\n+                }\n+            }\n         }\n-      }\n     }\n \n     private void printErrorLocations(List<String> errors, JSType t) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}