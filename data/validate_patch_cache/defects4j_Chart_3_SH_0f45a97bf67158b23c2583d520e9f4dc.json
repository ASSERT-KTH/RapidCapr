{
    "patch": "import org.jfree.data.general.SeriesException;\n\n// ...\n\npublic TimeSeries createCopy(int start, int end)\n            throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.clear();\n\n    copy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n    if (this.data.size() > 0) {\n        int startIndex = getTimePeriodIndex(this.getDomain().getStart(),\n                this.getDomainIsPointsInTime());\n        int endIndex = getTimePeriodIndex(this.getDomain().getEnd(),\n                this.getDomainIsPointsInTime());\n\n        if (startIndex == -1) {\n            // start is earlier than the data range...use first item\n            startIndex = 0;\n        }\n        if (endIndex == -1) {\n            // end is later than the data range...use last item\n            endIndex = this.data.size() - 1;\n        }\n\n        startIndex = Math.max(start, startIndex);\n        endIndex = Math.min(end, endIndex);\n\n        for (int index = startIndex; index <= endIndex; index++) {\n            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..e728640 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,53 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+import org.jfree.data.general.SeriesException;\n+\n+// ...\n+\n+public TimeSeries createCopy(int start, int end)\n+            throws CloneNotSupportedException {\n+    if (start < 0) {\n+        throw new IllegalArgumentException(\"Requires start >= 0.\");\n+    }\n+    if (end < start) {\n+        throw new IllegalArgumentException(\"Requires start <= end.\");\n+    }\n+    TimeSeries copy = (TimeSeries) super.clone();\n+    copy.clear();\n+\n+    copy.data = new java.util.ArrayList<TimeSeriesDataItem>();\n+    if (this.data.size() > 0) {\n+        int startIndex = getTimePeriodIndex(this.getDomain().getStart(),\n+                this.getDomainIsPointsInTime());\n+        int endIndex = getTimePeriodIndex(this.getDomain().getEnd(),\n+                this.getDomainIsPointsInTime());\n+\n+        if (startIndex == -1) {\n+            // start is earlier than the data range...use first item\n+            startIndex = 0;\n+        }\n+        if (endIndex == -1) {\n+            // end is later than the data range...use last item\n+            endIndex = this.data.size() - 1;\n+        }\n+\n+        startIndex = Math.max(start, startIndex);\n+        endIndex = Math.min(end, endIndex);\n+\n+        for (int index = startIndex; index <= endIndex; index++) {\n+            TimeSeriesDataItem item = (TimeSeriesDataItem) this.data.get(index);\n+            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+            try {\n+                copy.add(clone);\n+            }\n+            catch (SeriesException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+    }\n+    return copy;\n+}\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}