{
    "patch": "  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode())\n      return;\n\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME || NodeUtil.isFunctionExpression(n)) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n      case Token.STRING:\n        if (parent.getType() == Token.CALL && parent.getFirstChild() == n && parent.getChildCount() == 2\n            && parent.getLastChild().isString()) {\n          handleCall(n.getString(), parent.getLastChild());\n        } else if (NodeUtil.isExpressionAssign(parent)) {\n          Node rvalue = parent.getLastChild();\n          if (n.equals(rvalue)) {\n            handleAssignment(n.getString(), parent);\n          }\n        }\n        break;\n    }\n\n    attachLiteralTypes(n);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..4522ebcd 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,40 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n-\n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode())\n+      return;\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME || NodeUtil.isFunctionExpression(n)) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+      case Token.STRING:\n+        if (parent.getType() == Token.CALL && parent.getFirstChild() == n && parent.getChildCount() == 2\n+            && parent.getLastChild().isString()) {\n+          handleCall(n.getString(), parent.getLastChild());\n+        } else if (NodeUtil.isExpressionAssign(parent)) {\n+          Node rvalue = parent.getLastChild();\n+          if (n.equals(rvalue)) {\n+            handleAssignment(n.getString(), parent);\n           }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n-      }\n+        }\n+        break;\n     }\n \n+    attachLiteralTypes(n);\n+  }\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}