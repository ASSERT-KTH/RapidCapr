{
    "patch": "    Node function = fnScope.getRootNode();\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect all the function args that are referenced.\n    List<Node> toRemove = new ArrayList<Node>();\n    for (Node arg : argList.children()) {\n      Var var = fnScope.getVar(arg.getString());\n      if (!referenced.contains(var)) {\n        toRemove.add(arg);\n      }\n    }\n\n    for (Node arg : toRemove) {\n      arg.detachFromParent();\n      NodeUtil.markFunctionsDeleted(arg, compiler);\n      compiler.reportChangeToEnclosingScope(arg);\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..5907c1db 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,35 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect all the function args that are referenced.\n+    List<Node> toRemove = new ArrayList<Node>();\n+    for (Node arg : argList.children()) {\n+      Var var = fnScope.getVar(arg.getString());\n+      if (!referenced.contains(var)) {\n+        toRemove.add(arg);\n+      }\n+    }\n+\n+    for (Node arg : toRemove) {\n+      arg.detachFromParent();\n+      NodeUtil.markFunctionsDeleted(arg, compiler);\n+      compiler.reportChangeToEnclosingScope(arg);\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}