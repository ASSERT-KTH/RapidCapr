{
    "patch": "  public void visit(NodeTraversal t, Node n, Node parent) {\n    // VOID, SEMICOLON, or COMMA nodes appear when there are extra semicolons at the BLOCK level.\n    // I've been unable to think of any cases where this indicates a bug,\n    // and apparently some people like keeping these semicolons around,\n    // so we'll allow it.\n    if (n.isEmpty() ||\n        n.isComma() ||\n        n.isFunction()) {\n      return;\n    }\n\n    if (parent == null) {\n      return;\n    }\n\n    // Do not try to remove a block or an expr result. We already handle\n    // these cases when we visit the child, and the peephole passes will\n    // fix up the tree in more clever ways when these are removed.\n    if (n.isExprResult()) {\n      return;\n    }\n\n    // This no-op statement was there so that JSDoc information could\n    // be attached to the name. This check should not complain about it.\n    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n      return;\n    }\n\n    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n    boolean isAssignment = n.isAssign();\n    boolean modifiesArguments =\n        (n.isCall() && n.getFirstChild().matchesQualifiedName(\"arguments\") &&\n         n.getParent().isAssign());\n    if (parent.getType() == Token.COMMA || parent.getType() == Token.ARRAY_LITERAL) {\n      if (isResultUsed) {\n        return;\n      }\n      if ((n.isFunction() || n.isAssign()) && n == parent.getLastChild()) {\n        for (Node an : parent.getAncestors()) {\n          int ancestorType = an.getType();\n          if (ancestorType == Token.COMMA || ancestorType == Token.ARRAY_LITERAL) continue;\n          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.CALL && ancestorType != Token.BLOCK && ancestorType != Token.FUNCTION) return;\n          else break;\n        }\n      }\n      if (parent.getType() == Token.ARRAY_LITERAL) {\n        return;\n      }\n    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK && !(parent.isStringKey() && parent.getParent().isObjectPattern())) {\n      if (n == parent.getFirstChild() &&\n          parent.hasTwoChildren() &&\n          parent.getLastChild().isString() &&\n          parent.getLastChild().getString().equals(\"_\")) {\n        // for ({x} in y);\n        return;\n      }\n      if (!(isSimpleOp || isAssignment ||\n            (n.isCall() && parent.isExprResult()) ||\n            (parent.isHook() && parent.getFirstChild() == n))) {\n        return;\n      }\n      if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) &&\n          !isAssignment && !modifiesArguments && !isSimpleOp) {\n        String msg = \"This code lacks side-effects. Is there a bug?\";\n        t.getCompiler()\n            .report(t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR, msg));\n        // TODO(johnlenz): determine if it is necessary to\n        // try to protect side-effect free statements as well.\n        if (!NodeUtil.isStatement(n)) {\n          problemNodes.add(n);\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..077d924a 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -82,12 +82,13 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n+    // VOID, SEMICOLON, or COMMA nodes appear when there are extra semicolons at the BLOCK level.\n     // I've been unable to think of any cases where this indicates a bug,\n     // and apparently some people like keeping these semicolons around,\n     // so we'll allow it.\n     if (n.isEmpty() ||\n-        n.isComma()) {\n+        n.isComma() ||\n+        n.isFunction()) {\n       return;\n     }\n \n@@ -110,39 +111,48 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n \n     boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n     boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n+    boolean isAssignment = n.isAssign();\n+    boolean modifiesArguments =\n+        (n.isCall() && n.getFirstChild().matchesQualifiedName(\"arguments\") &&\n+         n.getParent().isAssign());\n+    if (parent.getType() == Token.COMMA || parent.getType() == Token.ARRAY_LITERAL) {\n       if (isResultUsed) {\n         return;\n       }\n-      if (n == parent.getLastChild()) {\n+      if ((n.isFunction() || n.isAssign()) && n == parent.getLastChild()) {\n         for (Node an : parent.getAncestors()) {\n           int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n+          if (ancestorType == Token.COMMA || ancestorType == Token.ARRAY_LITERAL) continue;\n+          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.CALL && ancestorType != Token.BLOCK && ancestorType != Token.FUNCTION) return;\n           else break;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      if (parent.getType() == Token.ARRAY_LITERAL) {\n         return;\n       }\n-    }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n-      String msg = \"This code lacks side-effects. Is there a bug?\";\n-      if (n.isString()) {\n-        msg = \"Is there a missing '+' on the previous line?\";\n-      } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n-            \"' operator is not being used.\";\n+    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK && !(parent.isStringKey() && parent.getParent().isObjectPattern())) {\n+      if (n == parent.getFirstChild() &&\n+          parent.hasTwoChildren() &&\n+          parent.getLastChild().isString() &&\n+          parent.getLastChild().getString().equals(\"_\")) {\n+        // for ({x} in y);\n+        return;\n       }\n-\n-      t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n+      if (!(isSimpleOp || isAssignment ||\n+            (n.isCall() && parent.isExprResult()) ||\n+            (parent.isHook() && parent.getFirstChild() == n))) {\n+        return;\n+      }\n+      if (!NodeUtil.mayHaveSideEffects(n, t.getCompiler()) &&\n+          !isAssignment && !modifiesArguments && !isSimpleOp) {\n+        String msg = \"This code lacks side-effects. Is there a bug?\";\n+        t.getCompiler()\n+            .report(t.makeError(n, CheckLevel.WARNING, USELESS_CODE_ERROR, msg));\n+        // TODO(johnlenz): determine if it is necessary to\n+        // try to protect side-effect free statements as well.\n+        if (!NodeUtil.isStatement(n)) {\n+          problemNodes.add(n);\n+        }\n       }\n     }\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}