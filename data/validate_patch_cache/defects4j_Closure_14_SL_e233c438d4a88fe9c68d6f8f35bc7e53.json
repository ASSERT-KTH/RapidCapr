{
    "patch": "              if (finallyNode.getFirstChild() != null) {\n                // Finally block has child, so evaluate it.\n                cfa.createEdge(fromNode, ControlFlowGraph.Branch.UNCOND, finallyNode.getFirstChild());\n                Node innerControlFlowRoot = finallyNode.getLastChild();\n                while (NodeUtil.isControlStructure(innerControlFlowRoot)) {\n                  innerControlFlowRoot = innerControlFlowRoot.getLastChild();\n                }\n                innerControlFlowRoot = NodeUtil.getEnclosingBlock(innerControlFlowRoot);\n                if (innerControlFlowRoot.getChildCount() == 0) {\n                  // Add a synthetic BLOCK node to the end of innerControlFlowRoot,\n                  // so we can create a cross-edge from it.\n                  innerControlFlowRoot.addChildToBack(new Node(Token.BLOCK));\n                }\n                cfa.createEdge(innerControlFlowRoot.getLastChild(), ControlFlowGraph.Branch.UNCOND, finallyNode.getFirstChild());\n              } else {\n                // Finally block is empty. Just create the edge directly.\n                cfa.createEdge(fromNode, ControlFlowGraph.Branch.UNCOND, finallyNode);\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..02d6372e 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,24 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (finallyNode.getFirstChild() != null) {\n+                // Finally block has child, so evaluate it.\n+                cfa.createEdge(fromNode, ControlFlowGraph.Branch.UNCOND, finallyNode.getFirstChild());\n+                Node innerControlFlowRoot = finallyNode.getLastChild();\n+                while (NodeUtil.isControlStructure(innerControlFlowRoot)) {\n+                  innerControlFlowRoot = innerControlFlowRoot.getLastChild();\n+                }\n+                innerControlFlowRoot = NodeUtil.getEnclosingBlock(innerControlFlowRoot);\n+                if (innerControlFlowRoot.getChildCount() == 0) {\n+                  // Add a synthetic BLOCK node to the end of innerControlFlowRoot,\n+                  // so we can create a cross-edge from it.\n+                  innerControlFlowRoot.addChildToBack(new Node(Token.BLOCK));\n+                }\n+                cfa.createEdge(innerControlFlowRoot.getLastChild(), ControlFlowGraph.Branch.UNCOND, finallyNode.getFirstChild());\n+              } else {\n+                // Finally block is empty. Just create the edge directly.\n+                cfa.createEdge(fromNode, ControlFlowGraph.Branch.UNCOND, finallyNode);\n+              }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}