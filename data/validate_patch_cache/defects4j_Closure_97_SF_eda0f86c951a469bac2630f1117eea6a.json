{
    "patch": "private Node tryFoldShift(Node n, Node left, Node right) {\n  if (left.getType() == Token.NUMBER &&\n      right.getType() == Token.NUMBER &&\n      isFinite(left.getDouble()) && isFinite(right.getDouble()) &&\n      !isFractional(left.getDouble()) && !isFractional(right.getDouble())) {\n    long lval = (long)left.getDouble();\n    if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n      return n;\n    }\n    int ival = (int)lval;\n    long rval = (long)right.getDouble();\n    if (rval < 0 || rval >= 32) {\n      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n      return n;\n    }\n    int shift = (int)rval;\n    switch (n.getType()) {\n      case Token.LSH:\n        if (shift == 0) {\n          Node newNumber = Node.newNumber(ival);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        if (shift >= 32) {\n          Node newNumber = Node.newNumber(0);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        break;\n      case Token.RSH:\n        if (shift == 0) {\n          Node newNumber = Node.newNumber(ival);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        if (shift >= 32) {\n          int sign = ival >= 0 ? 0 : -1;  // Force all bits to zero or one.\n          Node newNumber = Node.newNumber(sign);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        break;\n      case Token.URSH:\n        if (shift == 0) {\n          Node newNumber = Node.newNumber(ival & 0xffffffffL);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        if (shift >= 32) {\n          Node newNumber = Node.newNumber(0);\n          n.getParent().replaceChild(n, newNumber);\n          reportCodeChange();\n          return newNumber;\n        }\n        break;\n      default:\n        throw new AssertionError(\"Unknown shift operator: \" +\n                                 Token.name(n.getType()));\n    }\n    long result;\n    if (n.getType() == Token.RSH) {\n      result = ival >> shift;\n    } else if (n.getType() == Token.URSH) {\n      result = (ival & 0xffffffffL) >>> shift;\n    } else {\n      result = ival << shift;\n    }\n    Node newNumber = Node.newNumber(result);\n    n.getParent().replaceChild(n, newNumber);\n    reportCodeChange();\n    return newNumber;\n  }\n  return n;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..e9134178 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -649,68 +649,86 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold shift operations\n    */\n-  private Node tryFoldShift(Node n, Node left, Node right) {\n-    if (left.getType() == Token.NUMBER &&\n-        right.getType() == Token.NUMBER) {\n-\n-      double result;\n-      double lval = left.getDouble();\n-      double rval = right.getDouble();\n-\n-      // check ranges.  We do not do anything that would clip the double to\n-      // a 32-bit range, since the user likely does not intend that.\n-      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n-        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n-        return n;\n-      }\n-\n-      // only the lower 5 bits are used when shifting, so don't do anything\n-      // if the shift amount is outside [0,32)\n-      if (!(rval >= 0 && rval < 32)) {\n-        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n-        return n;\n-      }\n-\n-      // Convert the numbers to ints\n-      int lvalInt = (int) lval;\n-      if (lvalInt != lval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, left);\n-        return n;\n-      }\n-\n-      int rvalInt = (int) rval;\n-      if (rvalInt != rval) {\n-        error(FRACTIONAL_BITWISE_OPERAND, right);\n-        return n;\n-      }\n-\n-      switch (n.getType()) {\n-        case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n-        case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n-        case Token.URSH:\n-          // JavaScript handles zero shifts on signed numbers differently than\n-          // Java as an Java int can not represent the unsigned 32-bit number\n-          // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n-        default:\n-          throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n-      }\n-\n-      Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n-      reportCodeChange();\n-\n-      return newNumber;\n+private Node tryFoldShift(Node n, Node left, Node right) {\n+  if (left.getType() == Token.NUMBER &&\n+      right.getType() == Token.NUMBER &&\n+      isFinite(left.getDouble()) && isFinite(right.getDouble()) &&\n+      !isFractional(left.getDouble()) && !isFractional(right.getDouble())) {\n+    long lval = (long)left.getDouble();\n+    if (lval < Integer.MIN_VALUE || lval > Integer.MAX_VALUE) {\n+      error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n+      return n;\n     }\n-\n-    return n;\n+    int ival = (int)lval;\n+    long rval = (long)right.getDouble();\n+    if (rval < 0 || rval >= 32) {\n+      error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+      return n;\n+    }\n+    int shift = (int)rval;\n+    switch (n.getType()) {\n+      case Token.LSH:\n+        if (shift == 0) {\n+          Node newNumber = Node.newNumber(ival);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        if (shift >= 32) {\n+          Node newNumber = Node.newNumber(0);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        break;\n+      case Token.RSH:\n+        if (shift == 0) {\n+          Node newNumber = Node.newNumber(ival);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        if (shift >= 32) {\n+          int sign = ival >= 0 ? 0 : -1;  // Force all bits to zero or one.\n+          Node newNumber = Node.newNumber(sign);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        break;\n+      case Token.URSH:\n+        if (shift == 0) {\n+          Node newNumber = Node.newNumber(ival & 0xffffffffL);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        if (shift >= 32) {\n+          Node newNumber = Node.newNumber(0);\n+          n.getParent().replaceChild(n, newNumber);\n+          reportCodeChange();\n+          return newNumber;\n+        }\n+        break;\n+      default:\n+        throw new AssertionError(\"Unknown shift operator: \" +\n+                                 Token.name(n.getType()));\n+    }\n+    long result;\n+    if (n.getType() == Token.RSH) {\n+      result = ival >> shift;\n+    } else if (n.getType() == Token.URSH) {\n+      result = (ival & 0xffffffffL) >>> shift;\n+    } else {\n+      result = ival << shift;\n+    }\n+    Node newNumber = Node.newNumber(result);\n+    n.getParent().replaceChild(n, newNumber);\n+    reportCodeChange();\n+    return newNumber;\n   }\n+  return n;\n+}\n \n   /**\n    * Try to fold comparison nodes, e.g ==",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}