{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            SavedField field = savedFields[i];\n            DateTimeField dateTimeField = field.iField;\n            int compareTo = i + 1 < count ? dateTimeField.compareTo(savedFields[i + 1].iField) : 1;\n\n            // compute new value for current field\n            millis = field.set(millis, resetFields);\n\n            // compute new value for chronology sensitive fields\n            if (compareTo <= 0) {\n                DurationField valueRange;\n                DateTimeField nextDateTimeField = savedFields[i + 1].iField;\n                if (compareTo < 0 && (valueRange = dateTimeField.getRangeDurationField()) == nextDateTimeField.getRangeDurationField()) {\n                    millis = nextDateTimeField.set(millis, nextDateTimeField.get(millis));\n                    for (int j = i + 2; j < count; j++) {\n                        field = savedFields[j];\n                        if (field.iField.getRangeDurationField() != valueRange) {\n                            break;\n                        }\n                        millis = field.set(millis, resetFields);\n                    }\n                    i = findUpperBound(savedFields, i + 1, count, millis);\n                } else if (millis < this.iZone.getDateTimeMillis(iChrono.millisOfDay().set(millis, 0), millis)) {\n                    if (compareTo < 0 || i + 2 >= count || savedFields[i + 2].iField.getDurationField().getType() != DurationFieldType.months()) {\n                        millis = this.iZone.nextTransition(millis);\n                        if ((millis - this.iZone.getOffset(millis)) < 0) {\n                            throw new IllegalArgumentException(\"Could not find valid value for \" + dateTimeField.getType());\n                        }\n                    }\n                }\n            }\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..619baed1 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,82 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n+            return computeMillis(resetFields, text);\n+        }\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            SavedField field = savedFields[i];\n+            DateTimeField dateTimeField = field.iField;\n+            int compareTo = i + 1 < count ? dateTimeField.compareTo(savedFields[i + 1].iField) : 1;\n+\n+            // compute new value for current field\n+            millis = field.set(millis, resetFields);\n+\n+            // compute new value for chronology sensitive fields\n+            if (compareTo <= 0) {\n+                DurationField valueRange;\n+                DateTimeField nextDateTimeField = savedFields[i + 1].iField;\n+                if (compareTo < 0 && (valueRange = dateTimeField.getRangeDurationField()) == nextDateTimeField.getRangeDurationField()) {\n+                    millis = nextDateTimeField.set(millis, nextDateTimeField.get(millis));\n+                    for (int j = i + 2; j < count; j++) {\n+                        field = savedFields[j];\n+                        if (field.iField.getRangeDurationField() != valueRange) {\n+                            break;\n+                        }\n+                        millis = field.set(millis, resetFields);\n+                    }\n+                    i = findUpperBound(savedFields, i + 1, count, millis);\n+                } else if (millis < this.iZone.getDateTimeMillis(iChrono.millisOfDay().set(millis, 0), millis)) {\n+                    if (compareTo < 0 || i + 2 >= count || savedFields[i + 2].iField.getDurationField().getType() != DurationFieldType.months()) {\n+                        millis = this.iZone.nextTransition(millis);\n+                        if ((millis - this.iZone.getOffset(millis)) < 0) {\n+                            throw new IllegalArgumentException(\"Could not find valid value for \" + dateTimeField.getType());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + \"\\\"\");\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    return millis;\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}