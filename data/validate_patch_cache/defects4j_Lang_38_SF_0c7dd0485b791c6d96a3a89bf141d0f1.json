{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        } else {\n            // ensure we are using the timezone of the calendar\n            applyTimeZone(calendar);\n        }\n\n        int year = calendar.get(Calendar.YEAR);\n        int month = calendar.get(Calendar.MONTH) + 1;\n        int day = calendar.get(Calendar.DAY_OF_MONTH);\n        int hour = calendar.get(Calendar.HOUR_OF_DAY); // 24-hour clock\n        int minute = calendar.get(Calendar.MINUTE);\n        int second = calendar.get(Calendar.SECOND);\n        int millisecond = calendar.get(Calendar.MILLISECOND);\n        if (hour < 10) {\n            buf.append('0');\n        }\n        buf.append(hour);\n        buf.append(':');\n        if (minute < 10) {\n            buf.append('0');\n        }\n        buf.append(minute);\n        buf.append(':');\n        if (second < 10) {\n            buf.append('0');\n        }\n        buf.append(second);\n        buf.append('.');\n        if (millisecond < 10) {\n            buf.append(\"00\");\n        } else if (millisecond < 100) {\n            buf.append('0');\n        }\n        buf.append(millisecond);\n        buf.append('Z');\n        return buf;\n    }\n    \n    private void applyTimeZone(Calendar calendar) {\n        if (!calendar.getTimeZone().equals(mTimeZone)) {\n            calendar.setTimeZone(mTimeZone);\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..31c5423a 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -871,8 +871,47 @@ public class FastDateFormat extends Format {\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n+        } else {\n+            // ensure we are using the timezone of the calendar\n+            applyTimeZone(calendar);\n+        }\n+\n+        int year = calendar.get(Calendar.YEAR);\n+        int month = calendar.get(Calendar.MONTH) + 1;\n+        int day = calendar.get(Calendar.DAY_OF_MONTH);\n+        int hour = calendar.get(Calendar.HOUR_OF_DAY); // 24-hour clock\n+        int minute = calendar.get(Calendar.MINUTE);\n+        int second = calendar.get(Calendar.SECOND);\n+        int millisecond = calendar.get(Calendar.MILLISECOND);\n+        if (hour < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(hour);\n+        buf.append(':');\n+        if (minute < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(minute);\n+        buf.append(':');\n+        if (second < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(second);\n+        buf.append('.');\n+        if (millisecond < 10) {\n+            buf.append(\"00\");\n+        } else if (millisecond < 100) {\n+            buf.append('0');\n+        }\n+        buf.append(millisecond);\n+        buf.append('Z');\n+        return buf;\n+    }\n+    \n+    private void applyTimeZone(Calendar calendar) {\n+        if (!calendar.getTimeZone().equals(mTimeZone)) {\n+            calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<[T10:11:12]> but was:<[05:11:12.385Z]>",
    "test_result": "FAIL"
}