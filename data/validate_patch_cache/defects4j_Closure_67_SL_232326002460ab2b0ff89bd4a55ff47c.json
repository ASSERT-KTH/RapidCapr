{
    "patch": "      && assign.getParent() != null \n      && assign.getParent().getType() == Token.EXPR_RESULT \n      && (assign.getNext() == null || assign.getNext().getType() == Token.EMPTY)\n      && n != null \n      && n.getType() == Token.GETPROP \n      && n.getFirstChild(",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..50b73de8 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -315,7 +315,12 @@ class AnalyzePrototypeProperties implements CompilerPass {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+      && assign.getParent() != null \n+      && assign.getParent().getType() == Token.EXPR_RESULT \n+      && (assign.getNext() == null || assign.getNext().getType() == Token.EMPTY)\n+      && n != null \n+      && n.getType() == Token.GETPROP \n+      && n.getFirstChild(\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}