{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n  Node callTarget = n.getFirstChild();\n  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n    return n;\n  }\n\n  Node right = callTarget.getNext();\n  if (right != null && !NodeUtil.isImmutableValue(right)) {\n    return n;\n  }\n\n  Node arrayNode = callTarget.getFirstChild();\n  Node functionName = arrayNode.getNext();\n  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n      !functionName.getString().equals(\"join\")) {\n    return n;\n  }\n\n  String joinString;\n  if (right == null) {\n    joinString = \",\";\n  } else if (NodeUtil.isString(right)) {\n    joinString = right.getString();\n  } else if (NodeUtil.isNumber(right)) {\n    joinString = \",\".repeat(Math.max(0, right.getIntValue()));\n  } else {\n    return n; // Bail out if second parameter is not a string or number\n  }\n\n  Node newNode = getConcatenatedArrayNode(arrayNode, joinString);\n  if (newNode != null) {\n    n.replaceWith(newNode);\n    reportCodeChange();\n    return newNode;\n  }\n\n  return n;\n}\n\nprivate static Node getConcatenatedArrayNode(Node arrayNode, String joinString) {\n  List<Node> stringNodes = new ArrayList<>();\n  for (Node arrayElem = arrayNode.getFirstChild(); arrayElem != null; arrayElem = arrayElem.getNext()) {\n    if (NodeUtil.isEmptyOrNullOrUndefined(arrayElem) || NodeUtil.isUnreachableCode(arrayElem) ||\n        (!NodeUtil.isBasicString(arrayElem) && !NodeUtil.isNumericResult(arrayElem))) {\n      return null; // Bail out if elements are not basic strings, numbers, or literals\n    }\n    // Create a string node for each element that is a basic string or numeric literal\n    if (NodeUtil.isBasicString(arrayElem) || NodeUtil.isNumericResult(arrayElem)) {\n      stringNodes.add(NodeUtil.getStringNode(arrayElem).cloneTree());\n    }\n  }\n  // If array contained no basic strings or numeric literals, return null\n  if (stringNodes.isEmpty()) {\n    return null;\n  }\n  // Use join() method to concatenate the string nodes with the specified join string\n  Node joinNode = new Node(Token.CALL, IR.getprop(arrayNode.getFirstChild().cloneTree(), IR.string(\"join\")))\n                      .srcref(arrayNode);\n  Node argArrayNode = IR.arraylit();\n  for (Node stringNode : stringNodes) {\n    argArrayNode.addChildToBack(stringNode);\n    // Add join string after the stringNode unless it is the last element\n    if (stringNodes.indexOf(stringNode) < stringNodes.size() - 1) {\n      argArrayNode.addChildToBack(IR.string(joinString));\n    }\n  }\n  joinNode.addChildToBack(argArrayNode);\n  return joinNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..97451a7e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,116 +364,75 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n-    Node callTarget = n.getFirstChild();\n+private Node tryFoldArrayJoin(Node n) {\n+  Node callTarget = n.getFirstChild();\n+  if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    return n;\n+  }\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n-      return n;\n-    }\n+  Node right = callTarget.getNext();\n+  if (right != null && !NodeUtil.isImmutableValue(right)) {\n+    return n;\n+  }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n-        return n;\n-      }\n-    }\n+  Node arrayNode = callTarget.getFirstChild();\n+  Node functionName = arrayNode.getNext();\n+  if ((arrayNode.getType() != Token.ARRAYLIT) ||\n+      !functionName.getString().equals(\"join\")) {\n+    return n;\n+  }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+  String joinString;\n+  if (right == null) {\n+    joinString = \",\";\n+  } else if (NodeUtil.isString(right)) {\n+    joinString = right.getString();\n+  } else if (NodeUtil.isNumber(right)) {\n+    joinString = \",\".repeat(Math.max(0, right.getIntValue()));\n+  } else {\n+    return n; // Bail out if second parameter is not a string or number\n+  }\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+  Node newNode = getConcatenatedArrayNode(arrayNode, joinString);\n+  if (newNode != null) {\n+    n.replaceWith(newNode);\n+    reportCodeChange();\n+    return newNode;\n+  }\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n-        } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n-        }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n-      }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n+  return n;\n+}\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+private static Node getConcatenatedArrayNode(Node arrayNode, String joinString) {\n+  List<Node> stringNodes = new ArrayList<>();\n+  for (Node arrayElem = arrayNode.getFirstChild(); arrayElem != null; arrayElem = arrayElem.getNext()) {\n+    if (NodeUtil.isEmptyOrNullOrUndefined(arrayElem) || NodeUtil.isUnreachableCode(arrayElem) ||\n+        (!NodeUtil.isBasicString(arrayElem) && !NodeUtil.isNumericResult(arrayElem))) {\n+      return null; // Bail out if elements are not basic strings, numbers, or literals\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+    // Create a string node for each element that is a basic string or numeric literal\n+    if (NodeUtil.isBasicString(arrayElem) || NodeUtil.isNumericResult(arrayElem)) {\n+      stringNodes.add(NodeUtil.getStringNode(arrayElem).cloneTree());\n+    }\n+  }\n+  // If array contained no basic strings or numeric literals, return null\n+  if (stringNodes.isEmpty()) {\n+    return null;\n+  }\n+  // Use join() method to concatenate the string nodes with the specified join string\n+  Node joinNode = new Node(Token.CALL, IR.getprop(arrayNode.getFirstChild().cloneTree(), IR.string(\"join\")))\n+                      .srcref(arrayNode);\n+  Node argArrayNode = IR.arraylit();\n+  for (Node stringNode : stringNodes) {\n+    argArrayNode.addChildToBack(stringNode);\n+    // Add join string after the stringNode unless it is the last element\n+    if (stringNodes.indexOf(stringNode) < stringNodes.size() - 1) {\n+      argArrayNode.addChildToBack(IR.string(joinString));\n     }\n-\n-    return n;\n   }\n+  joinNode.addChildToBack(argArrayNode);\n+  return joinNode;\n+}\n \n   /**\n    * Try to fold .substr() calls on strings\n@@ -642,4 +601,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}