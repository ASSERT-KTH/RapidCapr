{
    "patch": "    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null) {\n            this.setEquals(false);\n            return this;\n        }\n        Class lhsClass = lhs.getClass();\n        if (!lhsClass.isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass() != rhs.getClass()) {\n            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n            this.setEquals(false);\n        } else if (lhs instanceof BigDecimal[]) {\n            BigDecimal[] lhsArray = (BigDecimal[]) lhs;\n            BigDecimal[] rhsArray = (BigDecimal[]) rhs;\n            if (lhsArray.length != rhsArray.length) {\n                this.setEquals(false);\n            } else {\n                try {\n                    Class clazz = Class.forName(\"java.util.Arrays\");\n                    Class[] types = new Class[] {Object[].class, Object[].class};\n                    Method equalsMethod = clazz.getMethod(\"equals\", types);\n                    Object[] args = new Object[] {lhsArray, rhsArray};\n                    isEquals = (Boolean) equalsMethod.invoke(null, args);\n                } catch (Exception e) {\n                    // Ignore the exception and fall back to element-wise comparison\n                    for (int i = 0; i < lhsArray.length; i++) {\n                        isEquals = append(lhsArray[i], rhsArray[i]).isEquals();\n                        if (!isEquals) {\n                            break;\n                        }\n                    }\n                }\n            }\n        } else {\n            // 'Switch' on type of array, to dispatch to the correct handler\n            // This handles multi-dimensional arrays of the same depth\n            if (lhs instanceof long[]) {\n                append((long[]) lhs, (long[]) rhs);\n            } else if (lhs instanceof int[]) {\n                append((int[]) lhs, (int[]) rhs);\n            } else if (lhs instanceof short[]) {\n                append((short[]) lhs, (short[]) rhs);\n            } else if (lhs instanceof char[]) {\n                append((char[]) lhs, (char[]) rhs);\n            } else if (lhs instanceof byte[]) {\n                append((byte[]) lhs, (byte[]) rhs);\n            } else if (lhs instanceof double[]) {\n                append((double[]) lhs, (double[]) rhs);\n            } else if (lhs instanceof float[]) {\n                append((float[]) lhs, (float[]) rhs);\n            } else if (lhs instanceof boolean[]) {\n                append((boolean[]) lhs, (boolean[]) rhs);\n            } else {\n                // Not an array of primitives\n                Object[] lhsArray = (Object[]) lhs;\n                Object[] rhsArray = (Object[]) rhs;\n                if (lhsArray.length != rhsArray.length) {\n                    this.setEquals(false);\n                } else {\n                    for (int i = 0; i < lhsArray.length; i++) {\n                        isEquals = append(lhsArray[i], rhsArray[i]).isEquals();\n                        if (!isEquals) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return this;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..50c7f43b 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -377,33 +377,67 @@ public class EqualsBuilder {\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[]\n             this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+        } else if (lhs instanceof BigDecimal[]) {\n+            BigDecimal[] lhsArray = (BigDecimal[]) lhs;\n+            BigDecimal[] rhsArray = (BigDecimal[]) rhs;\n+            if (lhsArray.length != rhsArray.length) {\n+                this.setEquals(false);\n+            } else {\n+                try {\n+                    Class clazz = Class.forName(\"java.util.Arrays\");\n+                    Class[] types = new Class[] {Object[].class, Object[].class};\n+                    Method equalsMethod = clazz.getMethod(\"equals\", types);\n+                    Object[] args = new Object[] {lhsArray, rhsArray};\n+                    isEquals = (Boolean) equalsMethod.invoke(null, args);\n+                } catch (Exception e) {\n+                    // Ignore the exception and fall back to element-wise comparison\n+                    for (int i = 0; i < lhsArray.length; i++) {\n+                        isEquals = append(lhsArray[i], rhsArray[i]).isEquals();\n+                        if (!isEquals) {\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // 'Switch' on type of array, to dispatch to the correct handler\n+            // This handles multi-dimensional arrays of the same depth\n+            if (lhs instanceof long[]) {\n+                append((long[]) lhs, (long[]) rhs);\n+            } else if (lhs instanceof int[]) {\n+                append((int[]) lhs, (int[]) rhs);\n+            } else if (lhs instanceof short[]) {\n+                append((short[]) lhs, (short[]) rhs);\n+            } else if (lhs instanceof char[]) {\n+                append((char[]) lhs, (char[]) rhs);\n+            } else if (lhs instanceof byte[]) {\n+                append((byte[]) lhs, (byte[]) rhs);\n+            } else if (lhs instanceof double[]) {\n+                append((double[]) lhs, (double[]) rhs);\n+            } else if (lhs instanceof float[]) {\n+                append((float[]) lhs, (float[]) rhs);\n+            } else if (lhs instanceof boolean[]) {\n+                append((boolean[]) lhs, (boolean[]) rhs);\n+            } else {\n+                // Not an array of primitives\n+                Object[] lhsArray = (Object[]) lhs;\n+                Object[] rhsArray = (Object[]) rhs;\n+                if (lhsArray.length != rhsArray.length) {\n+                    this.setEquals(false);\n+                } else {\n+                    for (int i = 0; i < lhsArray.length; i++) {\n+                        isEquals = append(lhsArray[i], rhsArray[i]).isEquals();\n+                        if (!isEquals) {\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n         }\n         return this;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}