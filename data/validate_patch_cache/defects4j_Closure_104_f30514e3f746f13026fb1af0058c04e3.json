{
    "patch": "@Override\n  public JSType greatestSubtype(JSType that) {\n    if (this.equals(that)) {\n      return this;\n    }\n    if (that.isUnknownType()) {\n      return this;\n    }\n    if (this.isUnknownType() && !that.isBottom()) {\n      return that;\n    }\n    if (this.isBottom()) {\n      return this;\n    }\n    if (that.isBottom()) {\n      return that;\n    }\n    if (that.isUnionType() && !this.isUnionType()) {\n      return that.greatestSubtype(this);\n    }\n    checkState(this.isUnionType(), this);\n    BoolVector sawTrue = new BoolVector();\n    List<JSType> resultAlts = new LinkedList<>();\n    for (JSType thisAlternate : ((UnionType) this).alternates) {\n      JSType greatestSubtype = thisAlternate.greatestSubtype(that);\n      if (!greatestSubtype.isBottom()) {\n        resultAlts.add(greatestSubtype);\n        sawTrue.add(true);\n      } else {\n        sawTrue.add(false);\n      }\n    }\n    if (sawTrue.contains(true)) {\n      return getLeastCommonAncestor(resultAlts);\n    } else {\n      return that;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..75dc25c0 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,44 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n+@Override\n+  public JSType greatestSubtype(JSType that) {\n+    if (this.equals(that)) {\n+      return this;\n+    }\n+    if (that.isUnknownType()) {\n+      return this;\n+    }\n+    if (this.isUnknownType() && !that.isBottom()) {\n+      return that;\n+    }\n+    if (this.isBottom()) {\n+      return this;\n+    }\n+    if (that.isBottom()) {\n+      return that;\n+    }\n+    if (that.isUnionType() && !this.isUnionType()) {\n+      return that.greatestSubtype(this);\n+    }\n+    checkState(this.isUnionType(), this);\n+    BoolVector sawTrue = new BoolVector();\n+    List<JSType> resultAlts = new LinkedList<>();\n+    for (JSType thisAlternate : ((UnionType) this).alternates) {\n+      JSType greatestSubtype = thisAlternate.greatestSubtype(that);\n+      if (!greatestSubtype.isBottom()) {\n+        resultAlts.add(greatestSubtype);\n+        sawTrue.add(true);\n+      } else {\n+        sawTrue.add(false);\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n     }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n+    if (sawTrue.contains(true)) {\n+      return getLeastCommonAncestor(resultAlts);\n     } else {\n-      return false;\n+      return that;\n     }\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}