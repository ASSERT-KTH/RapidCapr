{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n          Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // We first collect any variables that are declared inside this node.\n    Set<String> declaredVariables = new HashSet<>();\n\n    // Traverse the CFG and collect all the variables declared in the scope\n    // containing n.\n    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);\n    Node cfgRoot = NodeUtil.getEnclosingFunction(n);\n    cfa.process(null, cfgRoot);\n    SyntacticScope scope = cfa.getCfg().getSyntacticScope(n);\n    if (scope != null) {\n      for (Var var : scope.getVars()) {\n        declaredVariables.add(var.name);\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n        String childVarName = NodeUtil.getBestLValueName(child);\n        if (childVarName != null && !declaredVariables.contains(childVarName)) {\n          declaredVariables.add(childVarName);\n          if (childVarName.equals(variable)) {\n            // Child's lexical scope comprises this node.\n            return VariableLiveness.MAYBE_LIVE;\n          }\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..d82529e7 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -321,7 +321,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n-      Node n, String variable) {\n+          Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n@@ -333,6 +333,21 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       }\n     }\n \n+    // We first collect any variables that are declared inside this node.\n+    Set<String> declaredVariables = new HashSet<>();\n+\n+    // Traverse the CFG and collect all the variables declared in the scope\n+    // containing n.\n+    ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false);\n+    Node cfgRoot = NodeUtil.getEnclosingFunction(n);\n+    cfa.process(null, cfgRoot);\n+    SyntacticScope scope = cfa.getCfg().getSyntacticScope(n);\n+    if (scope != null) {\n+      for (Var var : scope.getVars()) {\n+        declaredVariables.add(var.name);\n+      }\n+    }\n+\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n@@ -341,6 +356,14 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }\n+        String childVarName = NodeUtil.getBestLValueName(child);\n+        if (childVarName != null && !declaredVariables.contains(childVarName)) {\n+          declaredVariables.add(childVarName);\n+          if (childVarName.equals(variable)) {\n+            // Child's lexical scope comprises this node.\n+            return VariableLiveness.MAYBE_LIVE;\n+          }\n+        }\n       }\n     }\n     return VariableLiveness.MAYBE_LIVE;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}