{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            boolean skipMonthSet = false;\n            boolean doneMonthSet = false;\n            DateTimeField[] fields = new DateTimeField[7];\n            int[] newValues = new int[7];\n            int curField = -1;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                int value = values[i];\n                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n                if (field.getDurationField().getType() == DurationFieldType.months()) {\n                    int monthValue = (value + valueToAdd) % 12;\n                    if (monthValue < 0) {\n                        monthValue += 12;\n                    }\n                    int yearValue = (value + valueToAdd) / 12;\n                    if (yearValue != 0) {\n                        // need to ensure month/year is set in right order\n                        if (i == 0) {\n                            skipMonthSet = true;\n                        }\n                        else {\n                            int yearFieldIndex = i - 1;\n                            DateTimeField yearField = partial.getFieldType(yearFieldIndex).getField(iChronology);\n                            int yearValue2 = values[yearFieldIndex];\n                            instant = yearField.set(instant, yearValue2 + yearValue);\n                            doneMonthSet = true;\n                        }\n                    }\n                    value = monthValue;\n                }\n                if (curField != -1 && field.getRangeDurationField().getType() == DurationFieldType.months()) {\n                    fields[curField] = null;\n                    curField = -1;\n                }\n                if (curField == -1) {\n                    if (skipMonthSet == false || doneMonthSet == false || field.getDurationField().getType() != DurationFieldType.months()) {\n                        instant = field.set(instant, value);\n                    }\n                    for (int j = 0; j < 7; j++) {\n                        if (fields[j] == null) {\n                            fields[j] = field;\n                            newValues[j] = valueToAdd;\n                            curField = j;\n                            break;\n                        }\n                        if (fields[j].getRangeDurationField() == field.getDurationField()) {\n                            curField = j;\n                            if (newValues[j] >= valueToAdd) {\n                                break;\n                            }\n                            newValues[j] = valueToAdd;\n                        } else if (fields[j].getDurationField().getType().compareTo(field.getDurationField().getType()) >= 0) {\n                            for (int k = 6; k > j; k--) {\n                                fields[k] = fields[k - 1];\n                            }\n                            for (int k = 6; k > j; k--) {\n                                newValues[k] = newValues[k - 1];\n                            }\n                            fields[j] = field;\n                            newValues[j] = valueToAdd;\n                            curField = j;\n                            break;\n                        }\n                    }\n                } else {\n                    int summed = newValues[curField] + valueToAdd;\n                    DurationField bound = field.getDurationField();\n                    if (fields[curField].getDurationField().getType() == DurationFieldType.months()) {\n                        bound = fields[curField].getRangeDurationField();\n                    }\n                    if (Math.abs(summed) < bound.getUnitMillis()) {\n                        instant = fields[curField].addWrapPartial(instant, newValues[curField]);\n                        newValues[curField] = summed;\n                    } else {\n                        curField = -1;\n                        i--;\n                    }\n                }\n            }\n            if (curField != -1) {\n                instant = fields[curField].addWrapPartial(instant, newValues[curField]);\n            }\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..44c53b24 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,13 +206,91 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n+            boolean skipMonthSet = false;\n+            boolean doneMonthSet = false;\n+            DateTimeField[] fields = new DateTimeField[7];\n+            int[] newValues = new int[7];\n+            int curField = -1;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                int value = values[i];\n+                DateTimeField field = partial.getFieldType(i).getField(iChronology);\n+                if (field.getDurationField().getType() == DurationFieldType.months()) {\n+                    int monthValue = (value + valueToAdd) % 12;\n+                    if (monthValue < 0) {\n+                        monthValue += 12;\n+                    }\n+                    int yearValue = (value + valueToAdd) / 12;\n+                    if (yearValue != 0) {\n+                        // need to ensure month/year is set in right order\n+                        if (i == 0) {\n+                            skipMonthSet = true;\n+                        }\n+                        else {\n+                            int yearFieldIndex = i - 1;\n+                            DateTimeField yearField = partial.getFieldType(yearFieldIndex).getField(iChronology);\n+                            int yearValue2 = values[yearFieldIndex];\n+                            instant = yearField.set(instant, yearValue2 + yearValue);\n+                            doneMonthSet = true;\n+                        }\n+                    }\n+                    value = monthValue;\n+                }\n+                if (curField != -1 && field.getRangeDurationField().getType() == DurationFieldType.months()) {\n+                    fields[curField] = null;\n+                    curField = -1;\n+                }\n+                if (curField == -1) {\n+                    if (skipMonthSet == false || doneMonthSet == false || field.getDurationField().getType() != DurationFieldType.months()) {\n+                        instant = field.set(instant, value);\n+                    }\n+                    for (int j = 0; j < 7; j++) {\n+                        if (fields[j] == null) {\n+                            fields[j] = field;\n+                            newValues[j] = valueToAdd;\n+                            curField = j;\n+                            break;\n+                        }\n+                        if (fields[j].getRangeDurationField() == field.getDurationField()) {\n+                            curField = j;\n+                            if (newValues[j] >= valueToAdd) {\n+                                break;\n+                            }\n+                            newValues[j] = valueToAdd;\n+                        } else if (fields[j].getDurationField().getType().compareTo(field.getDurationField().getType()) >= 0) {\n+                            for (int k = 6; k > j; k--) {\n+                                fields[k] = fields[k - 1];\n+                            }\n+                            for (int k = 6; k > j; k--) {\n+                                newValues[k] = newValues[k - 1];\n+                            }\n+                            fields[j] = field;\n+                            newValues[j] = valueToAdd;\n+                            curField = j;\n+                            break;\n+                        }\n+                    }\n+                } else {\n+                    int summed = newValues[curField] + valueToAdd;\n+                    DurationField bound = field.getDurationField();\n+                    if (fields[curField].getDurationField().getType() == DurationFieldType.months()) {\n+                        bound = fields[curField].getRangeDurationField();\n+                    }\n+                    if (Math.abs(summed) < bound.getUnitMillis()) {\n+                        instant = fields[curField].addWrapPartial(instant, newValues[curField]);\n+                        newValues[curField] = summed;\n+                    } else {\n+                        curField = -1;\n+                        i--;\n+                    }\n+                }\n+            }\n+            if (curField != -1) {\n+                instant = fields[curField].addWrapPartial(instant, newValues[curField]);\n             }\n-            instant = add(instant, valueToAdd);\n             return iChronology.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}