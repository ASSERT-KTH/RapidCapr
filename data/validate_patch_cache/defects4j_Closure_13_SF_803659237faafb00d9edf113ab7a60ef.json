{
    "patch": "private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return;\n    }\n\n    int visits = 0;\n    Node[] children = node.getChildren().toArray(new Node[0]);\n    while (visits < 10000) {\n      boolean childChanged = false;\n      for (Node c : children) {\n        if (shouldRetraverse(c)) {\n          traverse(c);\n          childChanged = true;\n        }\n      }\n      if (!childChanged) {\n        break;\n      }\n      visits++;\n    }\n\n    visit(node);\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..a53c7e4d 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,7 +110,7 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private void traverse(Node node) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n@@ -120,19 +120,22 @@ class PeepholeOptimizationsPass\n     }\n \n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n+    Node[] children = node.getChildren().toArray(new Node[0]);\n+    while (visits < 10000) {\n+      boolean childChanged = false;\n+      for (Node c : children) {\n+        if (shouldRetraverse(c)) {\n+          traverse(c);\n+          childChanged = true;\n+        }\n+      }\n+      if (!childChanged) {\n+        break;\n       }\n-\n-      visit(node);\n       visits++;\n+    }\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    visit(node);\n \n     exitNode(node);\n   }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}