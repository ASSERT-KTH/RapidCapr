{
    "patch": "    public final int translate(CharSequence input, int index, Writer out) throws IOException {\n        if (input == null) {\n            return 0;\n        }\n        if (index < 0 || index > input.length()) {\n            throw new IndexOutOfBoundsException(\"Index value '\" + index + \"' is invalid for char sequence of length \" + input.length());\n        }\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        int result = 0;\n        StringBuffer buf = new StringBuffer();\n        for (int i = index; i < input.length(); i++) {\n            char c = input.charAt(i);\n>>> [ INFILL ] <<<\n            result++;\n        }\n        out.write(buf.toString());\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..fe9c428b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,26 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    public final int translate(CharSequence input, int index, Writer out) throws IOException {\n+        if (input == null) {\n+            return 0;\n+        }\n+        if (index < 0 || index > input.length()) {\n+            throw new IndexOutOfBoundsException(\"Index value '\" + index + \"' is invalid for char sequence of length \" + input.length());\n+        }\n+        if (out == null) {\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n+        }\n+        int result = 0;\n+        StringBuffer buf = new StringBuffer();\n+        for (int i = index; i < input.length(); i++) {\n+            char c = input.charAt(i);\n+>>> [ INFILL ] <<<\n+            result++;\n+        }\n+        out.write(buf.toString());\n+        return result;\n+    }\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}