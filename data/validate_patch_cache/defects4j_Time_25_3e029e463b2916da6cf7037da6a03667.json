{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if time becomes earlier with a smaller offset,\n    // we need to determine whether we cross a DST boundary or an overlap\n    // to get to the correct offset\n    // we first determine if there is a DST transition in the less adjusted time\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n    if (nextLocal == nextAdjusted) {\n        // if no DST transition happened in the less adjusted time,\n        // then must have crossed an overlap boundary\n        return offsetLocal;\n    } else {\n        // if a DST transition happened in the less adjusted time,\n        // it means that time had crossed a DST boundary\n        long diff = offsetAdjusted - offsetLocal;\n        if (diff == 0 || nextAdjusted > instantAdjusted - offsetLocal) {\n            // if the difference between offsets is 0 in the two\n            // time zones in question, either we're traveling within a single\n            // time zone, or both time zones have the same UTC offset at that time\n            // (e.g. only one of them observes DST). In either case, just return\n            // the less adjusted offset.\n            // if the next DST transition is beyond instantLocal - offsetLocal, it means\n            // that we're over the next DST transition and hence we must use the less\n            // adjusted offset\n            return offsetAdjusted;\n        } else {\n            // if none of the special cases apply (different offsets in different\n            // non-DST time zones, or the next DST transition is beyond instantLocal\n            // minus the less adjusted offset), we must step back to before the\n            // next DST transition happened and recalculate the offset\n            return getOffset(nextAdjusted - 1);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..768810b8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,40 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if time becomes earlier with a smaller offset,\n+    // we need to determine whether we cross a DST boundary or an overlap\n+    // to get to the correct offset\n+    // we first determine if there is a DST transition in the less adjusted time\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantAdjusted - offsetAdjusted);\n+    if (nextLocal == nextAdjusted) {\n+        // if no DST transition happened in the less adjusted time,\n+        // then must have crossed an overlap boundary\n+        return offsetLocal;\n+    } else {\n+        // if a DST transition happened in the less adjusted time,\n+        // it means that time had crossed a DST boundary\n+        long diff = offsetAdjusted - offsetLocal;\n+        if (diff == 0 || nextAdjusted > instantAdjusted - offsetLocal) {\n+            // if the difference between offsets is 0 in the two\n+            // time zones in question, either we're traveling within a single\n+            // time zone, or both time zones have the same UTC offset at that time\n+            // (e.g. only one of them observes DST). In either case, just return\n+            // the less adjusted offset.\n+            // if the next DST transition is beyond instantLocal - offsetLocal, it means\n+            // that we're over the next DST transition and hence we must use the less\n+            // adjusted offset\n+            return offsetAdjusted;\n+        } else {\n+            // if none of the special cases apply (different offsets in different\n+            // non-DST time zones, or the next DST transition is beyond instantLocal\n+            // minus the less adjusted offset), we must step back to before the\n+            // next DST transition happened and recalculate the offset\n+            return getOffset(nextAdjusted - 1);\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}