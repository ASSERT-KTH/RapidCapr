{
    "patch": "private String getRemainingJSDocLine(Tokenizer stream) {\n    try {\n        if(!stream.isInDocComment() && !stream.isInLiteral() && !stream.isInString()) {\n            // reset stream to a valid state before trying to get the remaining JSDoc line\n            stream.reset();\n        }\n        return stream.getRemainingJSDocLine();\n    } catch (Exception e) {\n        return \"\";\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 6e3294b5..80c43cc5 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -2396,10 +2396,17 @@ public final class JsDocInfoParser {\n   /**\n    * Returns the remainder of the line.\n    */\n-  private String getRemainingJSDocLine() {\n-    String result = stream.getRemainingJSDocLine();\n-    return result;\n-  }\n+private String getRemainingJSDocLine(Tokenizer stream) {\n+    try {\n+        if(!stream.isInDocComment() && !stream.isInLiteral() && !stream.isInString()) {\n+            // reset stream to a valid state before trying to get the remaining JSDoc line\n+            stream.reset();\n+        }\n+        return stream.getRemainingJSDocLine();\n+    } catch (Exception e) {\n+        return \"\";\n+    }\n+}\n \n   /**\n    * Determines whether the parser has been populated with docinfo with a",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}