{
    "patch": "        if (min >= max) {\n            throw new IllegalArgumentException(\"Interval must be valid, min < max: [\" + min + \", \" + max + \"]\");\n        }\n\n        // Use initial value as a starting point for the solver\n        if (initial < min || initial > max) {\n            initial = (min + max) / 2.0;\n        }\n\n        // Create a new instance of the solver and set the tolerance and maximum iterations\n        BrentSolver solver = new BrentSolver();\n        solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n        solver.setMaximalIterationCount(getMaximalIterationCount());\n\n        // Solve the function using the given solver\n        double result;\n        try {\n            result = solver.solve(f, min, max, initial);\n        } catch (MaxIterationsExceededException e) {\n            throw new MaxIterationsExceededException(getMaximalIterationCount());\n        } catch (final FunctionEvaluationException e) {\n            throw new FunctionEvaluationException(e.getArguments());\n        }\n\n        return result;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..3b4530b6b 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,31 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+        if (min >= max) {\n+            throw new IllegalArgumentException(\"Interval must be valid, min < max: [\" + min + \", \" + max + \"]\");\n+        }\n+\n+        // Use initial value as a starting point for the solver\n+        if (initial < min || initial > max) {\n+            initial = (min + max) / 2.0;\n+        }\n+\n+        // Create a new instance of the solver and set the tolerance and maximum iterations\n+        BrentSolver solver = new BrentSolver();\n+        solver.setAbsoluteAccuracy(getAbsoluteAccuracy());\n+        solver.setMaximalIterationCount(getMaximalIterationCount());\n+\n+        // Solve the function using the given solver\n+        double result;\n+        try {\n+            result = solver.solve(f, min, max, initial);\n+        } catch (MaxIterationsExceededException e) {\n+            throw new MaxIterationsExceededException(getMaximalIterationCount());\n+        } catch (final FunctionEvaluationException e) {\n+            throw new FunctionEvaluationException(e.getArguments());\n+        }\n+\n+        return result;\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "error: no suitable constructor found for FunctionEvaluationException(Object[])",
    "test_result": "ERROR"
}