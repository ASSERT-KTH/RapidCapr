{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double a1 = v1.getX();\n      final double b1 = v1.getY();\n      final double c1 = v1.getZ();\n      final double a2 = v2.getX();\n      final double b2 = v2.getY();\n      final double c2 = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double norm1 = FastMath.sqrt(a1 * a1 + b1 * b1 + c1 * c1);\n      final double norm2 = FastMath.sqrt(a2 * a2 + b2 * b2 + c2 * c2);\n      final double tol = 2.0e-16;\n      final double[] scaledV1 = new double[] { a1 / norm1, b1 / norm1, c1 / norm1 };\n      final double[] scaledV2 = new double[] { a2 / norm2, b2 / norm2, c2 / norm2 };\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double rho = FastMath.rint((scaledV1[0] * scaledV2[0] + scaledV1[1] * scaledV2[1] + scaledV1[2] * scaledV2[2]) / tol) * tol;\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double x = b1 * c2 - c1 * b2 + rho * scaledV2[1];\n      final double y = c1 * a2 - a1 * c2 + rho * scaledV2[2];\n      final double z = a1 * b2 - b1 * a2 + rho * scaledV2[0];\n      return new Vector3D(x, y, z);\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..db0b3b0d5 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,20 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double a1 = v1.getX();\n+      final double b1 = v1.getY();\n+      final double c1 = v1.getZ();\n+      final double a2 = v2.getX();\n+      final double b2 = v2.getY();\n+      final double c2 = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double norm1 = FastMath.sqrt(a1 * a1 + b1 * b1 + c1 * c1);\n+      final double norm2 = FastMath.sqrt(a2 * a2 + b2 * b2 + c2 * c2);\n+      final double tol = 2.0e-16;\n+      final double[] scaledV1 = new double[] { a1 / norm1, b1 / norm1, c1 / norm1 };\n+      final double[] scaledV2 = new double[] { a2 / norm2, b2 / norm2, c2 / norm2 };\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,11 +478,13 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double rho = FastMath.rint((scaledV1[0] * scaledV2[0] + scaledV1[1] * scaledV2[1] + scaledV1[2] * scaledV2[2]) / tol) * tol;\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n-\n+      final double x = b1 * c2 - c1 * b2 + rho * scaledV2[1];\n+      final double y = c1 * a2 - a1 * c2 + rho * scaledV2[2];\n+      final double z = a1 * b2 - b1 * a2 + rho * scaledV2[0];\n+      return new Vector3D(x, y, z);\n   }\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<3.2182178902359926>",
    "test_result": "FAIL"
}