{
    "patch": "import java.util.TreeMap;\n\npublic class SortedXYDataSeries {\n\n    private final TreeMap<Number, XYDataItem> data;\n    private final int maximumItemCount;\n\n    public SortedXYDataSeries(int maximumItemCount) {\n        this.data = new TreeMap<>();\n        this.maximumItemCount = maximumItemCount;\n    }\n\n    public void addOrUpdate(Number x, Number y) {\n        if (x == null) {\n            throw new IllegalArgumentException(\"Null 'x' argument.\");\n        }\n\n        XYDataItem existing = data.get(x);\n        if (existing != null) {\n            existing.setY(y);\n        } else {\n            if (data.size() >= maximumItemCount) {\n                // Remove the oldest element if the maximum item count is exceeded\n                data.remove(data.firstKey());\n            }\n            data.put(x, new XYDataItem(x, y));\n        }\n    }\n\n    public int getItemCount() {\n        return data.size();\n    }\n\n    public Number getX(int index) {\n        return data.keySet().toArray(new Number[0])[index];\n    }\n\n    public XYDataItem getDataItem(int index) {\n        return data.get(getX(index));\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..bcd9dea 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,47 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+import java.util.TreeMap;\n+\n+public class SortedXYDataSeries {\n+\n+    private final TreeMap<Number, XYDataItem> data;\n+    private final int maximumItemCount;\n+\n+    public SortedXYDataSeries(int maximumItemCount) {\n+        this.data = new TreeMap<>();\n+        this.maximumItemCount = maximumItemCount;\n+    }\n+\n+    public void addOrUpdate(Number x, Number y) {\n+        if (x == null) {\n+            throw new IllegalArgumentException(\"Null 'x' argument.\");\n+        }\n+\n+        XYDataItem existing = data.get(x);\n+        if (existing != null) {\n+            existing.setY(y);\n+        } else {\n+            if (data.size() >= maximumItemCount) {\n+                // Remove the oldest element if the maximum item count is exceeded\n+                data.remove(data.firstKey());\n+            }\n+            data.put(x, new XYDataItem(x, y));\n+        }\n+    }\n+\n+    public int getItemCount() {\n+        return data.size();\n+    }\n+\n+    public Number getX(int index) {\n+        return data.keySet().toArray(new Number[0])[index];\n+    }\n+\n+    public XYDataItem getDataItem(int index) {\n+        return data.get(getX(index));\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}