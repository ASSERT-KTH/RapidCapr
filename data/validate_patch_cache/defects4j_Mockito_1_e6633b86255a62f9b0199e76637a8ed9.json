{
    "patch": "    public void captureArgumentsFrom(Invocation invocation) {\n        if (invocation.getMethod().isVarArgs()) {\n            int indexOfVararg = invocation.getRawArguments().length - 1;\n            if (isVariableArgument(invocation, indexOfVararg)) {\n                Object array = invocation.getRawArguments()[indexOfVararg];\n                for (int i = 0; i < Array.getLength(array); i++) {\n                    for (int position = 0; position < matchers.size() - 1; position++) {\n                        Matcher m = matchers.get(position);\n                        if (m instanceof CapturesArguments) {\n                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n                        }\n                    }\n                }\n                Matcher m = matchers.get(matchers.size() - 1);\n                if (m instanceof CapturesArguments) {\n                    Object[] varargs = (Object[]) array;\n                    Object[] varargsToCapture = Arrays.copyOfRange(varargs, Array.getLength(array) - 1, varargs.length);\n                    ((CapturesArguments) m).captureFrom(varargsToCapture);\n                }\n            } else {\n                for (int position = 0; position < matchers.size() - 1; position++) {\n                    Matcher m = matchers.get(position);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                    }\n                }\n                if (matchers.size() == invocation.getRawArguments().length) {\n                    Matcher m = matchers.get(matchers.size() - 1);\n                    if (m instanceof CapturesArguments) {\n                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg, Object[].class));\n                    }\n                }\n            }\n        } else {\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..62f48aaeb 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,51 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    public void captureArgumentsFrom(Invocation invocation) {\n+        if (invocation.getMethod().isVarArgs()) {\n+            int indexOfVararg = invocation.getRawArguments().length - 1;\n+            if (isVariableArgument(invocation, indexOfVararg)) {\n+                Object array = invocation.getRawArguments()[indexOfVararg];\n+                for (int i = 0; i < Array.getLength(array); i++) {\n+                    for (int position = 0; position < matchers.size() - 1; position++) {\n+                        Matcher m = matchers.get(position);\n+                        if (m instanceof CapturesArguments) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(array, i));\n+                        }\n+                    }\n+                }\n+                Matcher m = matchers.get(matchers.size() - 1);\n+                if (m instanceof CapturesArguments) {\n+                    Object[] varargs = (Object[]) array;\n+                    Object[] varargsToCapture = Arrays.copyOfRange(varargs, Array.getLength(array) - 1, varargs.length);\n+                    ((CapturesArguments) m).captureFrom(varargsToCapture);\n+                }\n+            } else {\n+                for (int position = 0; position < matchers.size() - 1; position++) {\n+                    Matcher m = matchers.get(position);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                    }\n+                }\n+                if (matchers.size() == invocation.getRawArguments().length) {\n+                    Matcher m = matchers.get(matchers.size() - 1);\n+                    if (m instanceof CapturesArguments) {\n+                        ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(indexOfVararg, Object[].class));\n+                    }\n+                }\n+            }\n+        } else {\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n+    }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}