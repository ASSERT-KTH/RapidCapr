{
    "patch": "    private void readTypeVariables() {\n        Type[] bounds = typeVariable.getBounds();\n        boolean hasBounds = bounds != null && bounds.length > 0;\n        for (Type type : hasBounds ? bounds : new Type[] {Object.class}) {\n            registerTypeVariablesOn(type);\n        }\n        if(hasBounds) {\n            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 2d6c07b17..c946770c8 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -376,6 +376,16 @@ public abstract class GenericMetadataSupport {\n             for (Type type : typeVariable.getBounds()) {\n                 registerTypeVariablesOn(type);\n             }\n+    private void readTypeVariables() {\n+        Type[] bounds = typeVariable.getBounds();\n+        boolean hasBounds = bounds != null && bounds.length > 0;\n+        for (Type type : hasBounds ? bounds : new Type[] {Object.class}) {\n+            registerTypeVariablesOn(type);\n+        }\n+        if(hasBounds) {\n+            registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n+        }\n+    }\n             registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));\n         }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}