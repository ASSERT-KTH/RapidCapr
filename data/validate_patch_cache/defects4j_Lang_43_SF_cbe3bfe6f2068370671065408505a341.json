{
    "patch": "public class ExtendedMessageFormat extends MessageFormat {\n \n    public ExtendedMessageFormat(String pattern) {\n        super(pattern);\n    }\n\n    @Override\n    protected void applyPattern(String pattern) {\n        if (pattern.indexOf('\\'') == -1) {\n            super.applyPattern(pattern);\n            return;\n        }\n\n        StringBuilder buffer = new StringBuilder(pattern.length());\n        ParsePosition pos = new ParsePosition(0);\n        char[] c = pattern.toCharArray();\n        boolean inQuote = false;\n        while (pos.getIndex() < pattern.length()) {\n            if (inQuote) {\n                appendQuotedString(pattern, pos, buffer, true);\n                inQuote = false;\n            } else {\n                switch (c[pos.getIndex()]) {\n                    case '\\'':\n                        inQuote = true;\n                        pos.setIndex(pos.getIndex() + 1);\n                        break;\n                    default:\n                        buffer.append(c[pos.getIndex()]);\n                        pos.setIndex(pos.getIndex() + 1);\n                        break;\n                }\n            }\n        }\n        if (inQuote) {\n            throw new IllegalArgumentException(\n                    \"Unterminated quote\");\n        }\n        super.applyPattern(buffer.toString());\n    }\n\n    private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n                                              StringBuilder appendTo, boolean escapingOn) {\n        int start = pos.getIndex();\n        char[] c = pattern.toCharArray();\n        if (escapingOn && c[start] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        int lastHold = start;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n                case QUOTE:\n                    next(pos);\n                    return appendTo == null ? null : appendTo.append(c, lastHold,\n                            pos.getIndex() - lastHold);\n                default:\n                    next(pos);\n            }\n        }\n        if (escapingOn && c[pos.getIndex() - 1] == QUOTE) {\n            return appendTo == null ? null : appendTo.append(QUOTE);\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);\n    }\n\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..ee3db390 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,8 +414,49 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n+public class ExtendedMessageFormat extends MessageFormat {\n+ \n+    public ExtendedMessageFormat(String pattern) {\n+        super(pattern);\n+    }\n+\n+    @Override\n+    protected void applyPattern(String pattern) {\n+        if (pattern.indexOf('\\'') == -1) {\n+            super.applyPattern(pattern);\n+            return;\n+        }\n+\n+        StringBuilder buffer = new StringBuilder(pattern.length());\n+        ParsePosition pos = new ParsePosition(0);\n+        char[] c = pattern.toCharArray();\n+        boolean inQuote = false;\n+        while (pos.getIndex() < pattern.length()) {\n+            if (inQuote) {\n+                appendQuotedString(pattern, pos, buffer, true);\n+                inQuote = false;\n+            } else {\n+                switch (c[pos.getIndex()]) {\n+                    case '\\'':\n+                        inQuote = true;\n+                        pos.setIndex(pos.getIndex() + 1);\n+                        break;\n+                    default:\n+                        buffer.append(c[pos.getIndex()]);\n+                        pos.setIndex(pos.getIndex() + 1);\n+                        break;\n+                }\n+            }\n+        }\n+        if (inQuote) {\n+            throw new IllegalArgumentException(\n+                    \"Unterminated quote\");\n+        }\n+        super.applyPattern(buffer.toString());\n+    }\n+\n+    private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n+                                              StringBuilder appendTo, boolean escapingOn) {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n@@ -431,18 +472,23 @@ public class ExtendedMessageFormat extends MessageFormat {\n                 continue;\n             }\n             switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+                case QUOTE:\n+                    next(pos);\n+                    return appendTo == null ? null : appendTo.append(c, lastHold,\n+                            pos.getIndex() - lastHold);\n+                default:\n+                    next(pos);\n             }\n         }\n+        if (escapingOn && c[pos.getIndex() - 1] == QUOTE) {\n+            return appendTo == null ? null : appendTo.append(QUOTE);\n+        }\n         throw new IllegalArgumentException(\n                 \"Unterminated quoted string at position \" + start);\n     }\n \n+}\n+\n     /**\n      * Consume quoted string only\n      * ",
    "result_reason": "error: annotations are not supported in -source 1.3",
    "test_result": "ERROR"
}