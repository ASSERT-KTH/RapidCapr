{
    "patch": "public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n    // create the initial clusters\n    List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n    assignPointsToClusters(clusters, points);\n\n    // iterate through updating the centers until we're done\n    final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n    for (int count = 0; count < max; count++) {\n        boolean clusteringChanged = false;\n        List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n        for (final Cluster<T> cluster : clusters) {\n            final T newCenter;\n            if (cluster.getPoints().isEmpty()) {\n                switch (emptyStrategy) {\n                    case LARGEST_VARIANCE :\n                        newCenter = getPointFromLargestVarianceCluster(clusters);\n                        break;\n                    case LARGEST_POINTS_NUMBER :\n                        newCenter = getPointFromLargestNumberCluster(clusters);\n                        break;\n                    case FARTHEST_POINT :\n                        newCenter = getFarthestPoint(clusters);\n                        break;\n                    default :\n                        throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n                }\n                clusteringChanged = true;\n            } else {\n                newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n                if (!newCenter.equals(cluster.getCenter())) {\n                    clusteringChanged = true;\n                }\n            }\n            newClusters.add(new Cluster<T>(newCenter, cluster.getDistanceMeasure()));\n        }\n        if (!clusteringChanged) {\n            return clusters;\n        }\n        assignPointsToClusters(newClusters, points);\n        clusters = newClusters;\n    }\n\n    // Check that no two centers are the same\n    boolean uniquePointIsCenter = true;\n    Set<T> pointSet = new HashSet<T>();\n    for (Cluster<T> cluster : clusters) {\n        if (!pointSet.add(cluster.getCenter())) {\n            uniquePointIsCenter = false;\n        }\n    }\n    assertTrue(uniquePointIsCenter);\n\n    return clusters;\n}\n\n/**\n * Adds the given points to the closest {@link Cluster}.\n *\n * @param <T> type of the points to cluster\n * @param clusters the {@link Cluster}s to add the points to\n * @param points the points to add to the given {@link Cluster}s\n */\nprotected static <T extends Clusterable<T>> void assignPointsToClusters(\n        final Collection<Cluster<T>> clusters, final Collection<T> points) {\n    for (final T p : points) {\n        final Cluster<T> cluster = getNearestCluster(clusters, p);\n        cluster.addPoint(p);\n    }\n}\n\n/**\n * Use K-means++ to choose the initial centers.\n *\n * @param <T> type of the points to cluster\n * @param points the points to choose the initial centers from\n * @param k the number of centers to choose\n * @param random random generator to use\n * @return the initial centers\n */\nprotected static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(\n        final Collection<T> points, final int k, final Random random) {\n    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(k);\n\n    // Choose one center uniformly at random from among the data points.\n    final T firstPoint = points.stream().skip(random.nextInt(points.size())).findFirst().orElse(null);\n    if (firstPoint == null) {\n        return resultSet;\n    }\n    resultSet.add(new Cluster<>(firstPoint, EuclideanDistance.INSTANCE));\n\n    while (resultSet.size() < k) {\n        // For each data point x, compute D(x), the distance between x and\n        // the nearest center that has already been chosen.\n        final double currentPot = resultSet.stream()\n                .mapToDouble(cluster -> cluster.getPoints().stream()\n                        .mapToDouble(p -> p.distanceFrom(cluster.getCenter()) * p.distanceFrom(cluster.getCenter()))\n                        .sum())\n                .sum();\n\n        // Choose one new center at random from the data points, with probability proportional\n        // to D(x)\u00b2.\n        final double r = random.nextDouble() * currentPot;\n        double sum = 0;\n        T selectedPoint = null;\n        for (final T p : points) {\n            for (final Cluster<T> cluster : resultSet) {\n                sum += p.distanceFrom(cluster.getCenter()) * p.distanceFrom(cluster.getCenter());\n            }\n            if (sum > r) {\n                selectedPoint = p;\n                break;\n            }\n        }\n\n        if (selectedPoint != null) {\n            resultSet.add(new Cluster<>(selectedPoint, EuclideanDistance.INSTANCE));\n        } else {\n            // If a data point was not chosen during a sampling round, choose one uniformly at random.\n            resultSet.add(new Cluster<>(points.stream().skip(random.nextInt(points.size())).findFirst().orElse(null),\n                    EuclideanDistance.INSTANCE));\n        }\n    }\n\n    return resultSet;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..24cc92d36 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,114 +89,132 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n-\n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n-            for (final Cluster<T> cluster : clusters) {\n-                final T newCenter;\n-                if (cluster.getPoints().isEmpty()) {\n-                    switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n-                            newCenter = getPointFromLargestVarianceCluster(clusters);\n-                            break;\n-                        case LARGEST_POINTS_NUMBER :\n-                            newCenter = getPointFromLargestNumberCluster(clusters);\n-                            break;\n-                        case FARTHEST_POINT :\n-                            newCenter = getFarthestPoint(clusters);\n-                            break;\n-                        default :\n-                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n-                    }\n+public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) {\n+    // create the initial clusters\n+    List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n+    assignPointsToClusters(clusters, points);\n+\n+    // iterate through updating the centers until we're done\n+    final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n+    for (int count = 0; count < max; count++) {\n+        boolean clusteringChanged = false;\n+        List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n+        for (final Cluster<T> cluster : clusters) {\n+            final T newCenter;\n+            if (cluster.getPoints().isEmpty()) {\n+                switch (emptyStrategy) {\n+                    case LARGEST_VARIANCE :\n+                        newCenter = getPointFromLargestVarianceCluster(clusters);\n+                        break;\n+                    case LARGEST_POINTS_NUMBER :\n+                        newCenter = getPointFromLargestNumberCluster(clusters);\n+                        break;\n+                    case FARTHEST_POINT :\n+                        newCenter = getFarthestPoint(clusters);\n+                        break;\n+                    default :\n+                        throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n+                }\n+                clusteringChanged = true;\n+            } else {\n+                newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n+                if (!newCenter.equals(cluster.getCenter())) {\n                     clusteringChanged = true;\n-                } else {\n-                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n                 }\n-                newClusters.add(new Cluster<T>(newCenter));\n-            }\n-            if (!clusteringChanged) {\n-                return clusters;\n             }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n+            newClusters.add(new Cluster<T>(newCenter, cluster.getDistanceMeasure()));\n         }\n-        return clusters;\n+        if (!clusteringChanged) {\n+            return clusters;\n+        }\n+        assignPointsToClusters(newClusters, points);\n+        clusters = newClusters;\n     }\n \n-    /**\n-     * Adds the given points to the closest {@link Cluster}.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n-     */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n-        for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n-            cluster.addPoint(p);\n+    // Check that no two centers are the same\n+    boolean uniquePointIsCenter = true;\n+    Set<T> pointSet = new HashSet<T>();\n+    for (Cluster<T> cluster : clusters) {\n+        if (!pointSet.add(cluster.getCenter())) {\n+            uniquePointIsCenter = false;\n         }\n     }\n+    assertTrue(uniquePointIsCenter);\n \n-    /**\n-     * Use K-means++ to choose the initial centers.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n-     * @return the initial centers\n-     */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n+    return clusters;\n+}\n \n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n-            }\n-        }\n+/**\n+ * Adds the given points to the closest {@link Cluster}.\n+ *\n+ * @param <T> type of the points to cluster\n+ * @param clusters the {@link Cluster}s to add the points to\n+ * @param points the points to add to the given {@link Cluster}s\n+ */\n+protected static <T extends Clusterable<T>> void assignPointsToClusters(\n+        final Collection<Cluster<T>> clusters, final Collection<T> points) {\n+    for (final T p : points) {\n+        final Cluster<T> cluster = getNearestCluster(clusters, p);\n+        cluster.addPoint(p);\n+    }\n+}\n+\n+/**\n+ * Use K-means++ to choose the initial centers.\n+ *\n+ * @param <T> type of the points to cluster\n+ * @param points the points to choose the initial centers from\n+ * @param k the number of centers to choose\n+ * @param random random generator to use\n+ * @return the initial centers\n+ */\n+protected static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(\n+        final Collection<T> points, final int k, final Random random) {\n+    final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(k);\n \n+    // Choose one center uniformly at random from among the data points.\n+    final T firstPoint = points.stream().skip(random.nextInt(points.size())).findFirst().orElse(null);\n+    if (firstPoint == null) {\n         return resultSet;\n+    }\n+    resultSet.add(new Cluster<>(firstPoint, EuclideanDistance.INSTANCE));\n+\n+    while (resultSet.size() < k) {\n+        // For each data point x, compute D(x), the distance between x and\n+        // the nearest center that has already been chosen.\n+        final double currentPot = resultSet.stream()\n+                .mapToDouble(cluster -> cluster.getPoints().stream()\n+                        .mapToDouble(p -> p.distanceFrom(cluster.getCenter()) * p.distanceFrom(cluster.getCenter()))\n+                        .sum())\n+                .sum();\n+\n+        // Choose one new center at random from the data points, with probability proportional\n+        // to D(x)\u00b2.\n+        final double r = random.nextDouble() * currentPot;\n+        double sum = 0;\n+        T selectedPoint = null;\n+        for (final T p : points) {\n+            for (final Cluster<T> cluster : resultSet) {\n+                sum += p.distanceFrom(cluster.getCenter()) * p.distanceFrom(cluster.getCenter());\n+            }\n+            if (sum > r) {\n+                selectedPoint = p;\n+                break;\n+            }\n+        }\n \n+        if (selectedPoint != null) {\n+            resultSet.add(new Cluster<>(selectedPoint, EuclideanDistance.INSTANCE));\n+        } else {\n+            // If a data point was not chosen during a sampling round, choose one uniformly at random.\n+            resultSet.add(new Cluster<>(points.stream().skip(random.nextInt(points.size())).findFirst().orElse(null),\n+                    EuclideanDistance.INSTANCE));\n+        }\n     }\n \n+    return resultSet;\n+}\n+\n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.\n      *",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}