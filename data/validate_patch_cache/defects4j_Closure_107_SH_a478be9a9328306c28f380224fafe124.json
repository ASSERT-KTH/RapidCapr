{
    "patch": "    if (!flags.translationsFile.isEmpty()) {\n      try {\n        options.messageBundle = new XtbMessageBundle(\n            new FileInputStream(flags.translationsFile),\n            flags.translationsProject);\n      } catch (IOException e) {\n        throw new RuntimeException(\"Reading XTB file\", e);\n      }\n    } else {\n      if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n        options.setInlineConstantVars(true);\n        options.setInlineFunctions(Reach.ALL);\n        options.setCollapseProperties(true);\n        options.setCollapseAnonymousFunctions(true);\n        options.setDevirtualizePrototypeMethods(true);\n        options.setRemoveUnusedVariables(Reach.ALL);\n        options.setRemoveUnusedPrototypeProperties(true);\n        options.setRemoveUnusedPrototypePropertiesInExterns(true);\n        options.setRemoveDeadCode(true);\n        options.setOptimizeArgumentsArray(true);\n        options.setRewriteFunctionExpressions(false);\n        options.setUseTypesForLocalOptimization(true);\n        options.setInlineLocalVariables(true);\n        options.setSmartNameRemoval(true);\n        options.setRenameLabels(true);\n        options.setFoldConstants(true);\n        options.setDeadAssignmentElimination(true);\n        options.setInlineGetters(true);\n        options.setPreferLineBreakAtEndOfFile(true);\n        options.setSkipAllCompilerPasses(true);\n        options.setAssumeFunctionWrapper(true);\n        // Report any errors to the highest level.\n        options.setWarningLevel(DiagnosticGroups.ALL_DIAGNOSTIC_GROUPS,\n            CheckLevel.WARNING);\n      }\n      options.messageBundle = new EmptyMessageBundle();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..082ac5bf 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,43 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+    if (!flags.translationsFile.isEmpty()) {\n+      try {\n+        options.messageBundle = new XtbMessageBundle(\n+            new FileInputStream(flags.translationsFile),\n+            flags.translationsProject);\n+      } catch (IOException e) {\n+        throw new RuntimeException(\"Reading XTB file\", e);\n+      }\n+    } else {\n+      if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {\n+        options.setInlineConstantVars(true);\n+        options.setInlineFunctions(Reach.ALL);\n+        options.setCollapseProperties(true);\n+        options.setCollapseAnonymousFunctions(true);\n+        options.setDevirtualizePrototypeMethods(true);\n+        options.setRemoveUnusedVariables(Reach.ALL);\n+        options.setRemoveUnusedPrototypeProperties(true);\n+        options.setRemoveUnusedPrototypePropertiesInExterns(true);\n+        options.setRemoveDeadCode(true);\n+        options.setOptimizeArgumentsArray(true);\n+        options.setRewriteFunctionExpressions(false);\n+        options.setUseTypesForLocalOptimization(true);\n+        options.setInlineLocalVariables(true);\n+        options.setSmartNameRemoval(true);\n+        options.setRenameLabels(true);\n+        options.setFoldConstants(true);\n+        options.setDeadAssignmentElimination(true);\n+        options.setInlineGetters(true);\n+        options.setPreferLineBreakAtEndOfFile(true);\n+        options.setSkipAllCompilerPasses(true);\n+        options.setAssumeFunctionWrapper(true);\n+        // Report any errors to the highest level.\n+        options.setWarningLevel(DiagnosticGroups.ALL_DIAGNOSTIC_GROUPS,\n+            CheckLevel.WARNING);\n+      }\n+      options.messageBundle = new EmptyMessageBundle();\n+    }\n     }\n \n     return options;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}