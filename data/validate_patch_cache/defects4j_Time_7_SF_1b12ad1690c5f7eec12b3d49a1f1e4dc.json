{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, null);\n        int pos;\n        if (iOffsetParsed) {\n            pos = parser.parseInto(bucket, text, position);\n        } else {\n            pos = parser.parseInto(bucket, text, position);\n            if (pos >= 0) {\n                pos = ~pos;\n            }\n        }\n\n        if (pos >= 0) {\n            long millis = bucket.computeMillis(false, text);\n            if (iOffsetParsed) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setMillis(millis);\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            return pos;\n        }\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n                instant.setMillis(bucket.computeMillis(true, text));\n                instant.setChronology(chrono);\n            }\n        } else {\n            Chronology selectedChrono = selectChronology(chrono);\n            DateTimeZone zone = bucket.getZone();\n            zone = (zone != null) ? zone : selectedChrono.getZone();\n            chrono = selectedChrono.withZone(zone);\n            instant.setMillis(bucket.computeMillis(true, text));\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n        }\n        return pos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..0383c510 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,29 +702,57 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+                instantMillis, chrono, iLocale, iPivotYear, null);\n+        int pos;\n+        if (iOffsetParsed) {\n+            pos = parser.parseInto(bucket, text, position);\n+        } else {\n+            pos = parser.parseInto(bucket, text, position);\n+            if (pos >= 0) {\n+                pos = ~pos;\n+            }\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+\n+        if (pos >= 0) {\n+            long millis = bucket.computeMillis(false, text);\n+            if (iOffsetParsed) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setMillis(millis);\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            return pos;\n+        }\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+                instant.setMillis(bucket.computeMillis(true, text));\n+                instant.setChronology(chrono);\n+            }\n+        } else {\n+            Chronology selectedChrono = selectChronology(chrono);\n+            DateTimeZone zone = bucket.getZone();\n+            zone = (zone != null) ? zone : selectedChrono.getZone();\n+            chrono = selectedChrono.withZone(zone);\n+            instant.setMillis(bucket.computeMillis(true, text));\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n         }\n-        return newPos;\n+        return pos;\n     }\n \n     /**",
    "result_reason": "error: incompatible types: <null> cannot be converted to int",
    "test_result": "ERROR"
}