{
    "patch": "I apologize for the error. The correct hunk to fix the issue is as follows:\n```\nif (m instanceof CapturesArguments && indexOfVararg >= position) {\n    Object[] varArgs = Arrays.copyOfRange(invocation.getArguments(), position, indexOfVararg + 1);\n    ((CapturesArguments) m).captureFrom(varArgs);\n}\n``` \nThis should fix the compilation error and capture the varargs arguments correctly.",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..d4f643fff 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,17 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+I apologize for the error. The correct hunk to fix the issue is as follows:\n+```\n+if (m instanceof CapturesArguments && indexOfVararg >= position) {\n+    Object[] varArgs = Arrays.copyOfRange(invocation.getArguments(), position, indexOfVararg + 1);\n+    ((CapturesArguments) m).captureFrom(varArgs);\n+}\n+``` \n+This should fix the compilation error and capture the varargs arguments correctly.\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}