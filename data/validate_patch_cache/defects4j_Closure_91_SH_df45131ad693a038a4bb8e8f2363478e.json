{
    "patch": "  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      int pType = parent.getType();\n      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n            || pType == Token.ASSIGN || pType == Token.COMMA\n            || pType == Token.PARAM_LIST || pType == Token.EXPR_RESULT\n            || pType == Token.FUNCTION)) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.ASSIGN) {\n        Node lhs = parent.getFirstChild();\n        Node rhs = lhs.getNext();\n\n        if (n == lhs) {\n          // Always traverse the left side of the assignment. To handle\n          // nested assignments properly (e.g., (a = this).property = c;),\n          // assignLhsChild should not be overridden.\n          if (assignLhsChild == null) {\n            assignLhsChild = lhs;\n          }\n        } else {\n          // Only traverse the right side if it's not an assignment to a prototype\n          // property or subproperty.\n          boolean isLhsGetProp = NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP;\n          if (isLhsGetProp && \"prototype\".equals(lhs.getLastChild().getString())) {\n            if (parent.getParent().getType() != Token.EXPR_RESULT) {\n              // (x.prototype = y) should be treated as an expression statement\n              return false;\n            }\n            if (lhs.getFirstChild() == null) {\n              return false;\n            }\n            Node grandparent = parent.getParent().getParent();\n            if (grandparent != null &&\n                (grandparent.getType() == Token.FOR ||\n                 grandparent.getType() == Token.FOR_IN ||\n                 grandparent.getType() == Token.ARRAY_PATTERN ||\n                 grandparent.getType() == Token.OBJECT_PATTERN ||\n                 grandparent.getType() == Token.ASSIGN)) {\n              return false;\n            }\n\n            Node target = getFunctionParent(lhs);\n            if (target != null) {\n              if (target.getType() == Token.BLOCK) {\n                target = target.getParent();\n              }\n              if (target.getType() != Token.FUNCTION) {\n                return false;\n              }\n            }\n          } else if (isLhsGetProp && isPrototypeAssignToGoogBase(lhs)) {\n            // Don't traverse assignments to goog.base's prototype values.\n            return false;\n          } else if (NodeUtil.isFunctionExpression(rhs)) {\n            if (NodeUtil.isName(lhs) || NodeUtil.isGet(lhs)) {\n              // Traverse goog.exportSymbol('sym', f);\n              return NodeUtil.isGoogExportSymbol(lhs);\n            } else {\n              return maybeGetNamespaceDecl(lhs) != null;\n            }\n          } else if (rhs.getType() == Token.FUNCTION) {\n            // Traverse namespace.foo = function() {};\n            return NodeUtil.isGet(lhs) || NodeUtil.isName(lhs);\n          } else {\n            // Don't traverse assignments like x = 1.\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    private boolean isPrototypeAssignToGoogBase(Node n) {\n      if (!NodeUtil.isGet(n)) {\n        return false;\n      }\n      Node target = n.getFirstChild();\n      Node property = target.getNext();\n      if (!\"prototype\".equals(property.getString())) {\n        return false;\n      }\n      return target.matchesQualifiedName(\"goog.base\");\n    }\n\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..bc513112 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,112 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+      if (jsDoc != null &&\n+          (jsDoc.isConstructor() ||\n+           jsDoc.isInterface() ||\n+           jsDoc.hasThisType() ||\n+           jsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      int pType = parent.getType();\n+      if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME\n+            || pType == Token.ASSIGN || pType == Token.COMMA\n+            || pType == Token.PARAM_LIST || pType == Token.EXPR_RESULT\n+            || pType == Token.FUNCTION)) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.ASSIGN) {\n+        Node lhs = parent.getFirstChild();\n+        Node rhs = lhs.getNext();\n+\n+        if (n == lhs) {\n+          // Always traverse the left side of the assignment. To handle\n+          // nested assignments properly (e.g., (a = this).property = c;),\n+          // assignLhsChild should not be overridden.\n+          if (assignLhsChild == null) {\n+            assignLhsChild = lhs;\n+          }\n+        } else {\n+          // Only traverse the right side if it's not an assignment to a prototype\n+          // property or subproperty.\n+          boolean isLhsGetProp = NodeUtil.isGet(lhs) && lhs.getType() == Token.GETPROP;\n+          if (isLhsGetProp && \"prototype\".equals(lhs.getLastChild().getString())) {\n+            if (parent.getParent().getType() != Token.EXPR_RESULT) {\n+              // (x.prototype = y) should be treated as an expression statement\n+              return false;\n+            }\n+            if (lhs.getFirstChild() == null) {\n+              return false;\n+            }\n+            Node grandparent = parent.getParent().getParent();\n+            if (grandparent != null &&\n+                (grandparent.getType() == Token.FOR ||\n+                 grandparent.getType() == Token.FOR_IN ||\n+                 grandparent.getType() == Token.ARRAY_PATTERN ||\n+                 grandparent.getType() == Token.OBJECT_PATTERN ||\n+                 grandparent.getType() == Token.ASSIGN)) {\n+              return false;\n+            }\n+\n+            Node target = getFunctionParent(lhs);\n+            if (target != null) {\n+              if (target.getType() == Token.BLOCK) {\n+                target = target.getParent();\n+              }\n+              if (target.getType() != Token.FUNCTION) {\n+                return false;\n+              }\n+            }\n+          } else if (isLhsGetProp && isPrototypeAssignToGoogBase(lhs)) {\n+            // Don't traverse assignments to goog.base's prototype values.\n+            return false;\n+          } else if (NodeUtil.isFunctionExpression(rhs)) {\n+            if (NodeUtil.isName(lhs) || NodeUtil.isGet(lhs)) {\n+              // Traverse goog.exportSymbol('sym', f);\n+              return NodeUtil.isGoogExportSymbol(lhs);\n+            } else {\n+              return maybeGetNamespaceDecl(lhs) != null;\n+            }\n+          } else if (rhs.getType() == Token.FUNCTION) {\n+            // Traverse namespace.foo = function() {};\n+            return NodeUtil.isGet(lhs) || NodeUtil.isName(lhs);\n+          } else {\n+            // Don't traverse assignments like x = 1.\n+            return false;\n+          }\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n+    private boolean isPrototypeAssignToGoogBase(Node n) {\n+      if (!NodeUtil.isGet(n)) {\n+        return false;\n+      }\n+      Node target = n.getFirstChild();\n+      Node property = target.getNext();\n+      if (!\"prototype\".equals(property.getString())) {\n+        return false;\n+      }\n+      return target.matchesQualifiedName(\"goog.base\");\n+    }\n+\n+  }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}