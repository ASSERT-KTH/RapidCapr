{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (!canBeFolded(n, parent)) {\n      return n;\n    }\n\n    if (!right.isNumber()) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(JSError.INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    if (intIndex < 0) {\n      error(JSError.INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node elem = null;\n    for (int i = 0; current != null && i <= intIndex; i++) {\n      if (current.isEmpty() && i == intIndex) {\n        elem = NodeUtil.newUndefinedNode(parent);\n      } else if (current.isEmpty()) {\n        error(JSError.INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      } else if (i == intIndex) {\n        elem = current.detach();\n      }\n      current = current.getNext();\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }\n\n  private boolean canBeFolded(Node n, Node parent) {\n    Node value = parent.getLastChild();\n    switch (value.getToken()) {\n      case EQUALS:\n      case EXPONENT:\n      case MINUS:\n      case MINUS_EQUAL:\n      case PLUS_EQUAL:\n      case PLUS:\n      case MULTIPLY:\n      case DIVIDE:\n      case MOD:\n      case LEFT_SHIFT:\n      case AND:\n      case OR:\n      case XOR:\n      case NOT_EQUAL:\n      case EQUAL:\n      case GREATER_THAN:\n      case LESS_THAN:\n      case GREATER_THAN_EQUAL:\n      case LESS_THAN_EQUAL:\n        return false;\n\n      default:\n        return true;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..99a9208f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1418,13 +1418,12 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n-    if (isAssignmentTarget(n)) {\n+    if (!canBeFolded(n, parent)) {\n       return n;\n     }\n \n@@ -1437,40 +1436,64 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n+      error(JSError.INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+      error(JSError.INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n     Node current = left.getFirstChild();\n     Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n+    for (int i = 0; current != null && i <= intIndex; i++) {\n+      if (current.isEmpty() && i == intIndex) {\n+        elem = NodeUtil.newUndefinedNode(parent);\n+      } else if (current.isEmpty()) {\n+        error(JSError.INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      } else if (i == intIndex) {\n+        elem = current.detach();\n+      }\n       current = current.getNext();\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n     // Replace the entire GETELEM with the value\n     n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n     return elem;\n   }\n \n+  private boolean canBeFolded(Node n, Node parent) {\n+    Node value = parent.getLastChild();\n+    switch (value.getToken()) {\n+      case EQUALS:\n+      case EXPONENT:\n+      case MINUS:\n+      case MINUS_EQUAL:\n+      case PLUS_EQUAL:\n+      case PLUS:\n+      case MULTIPLY:\n+      case DIVIDE:\n+      case MOD:\n+      case LEFT_SHIFT:\n+      case AND:\n+      case OR:\n+      case XOR:\n+      case NOT_EQUAL:\n+      case EQUAL:\n+      case GREATER_THAN:\n+      case LESS_THAN:\n+      case GREATER_THAN_EQUAL:\n+      case LESS_THAN_EQUAL:\n+        return false;\n+\n+      default:\n+        return true;\n+    }\n+  }\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}