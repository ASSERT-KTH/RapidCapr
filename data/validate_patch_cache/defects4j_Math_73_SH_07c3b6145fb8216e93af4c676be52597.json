{
    "patch": "// catch cases where min/max bracket the root directly or the initial guess does not bracket the root\ndouble yMin = Double.NaN;\ntry {\n    yMin = f.value(min);\n} catch (FunctionEvaluationException e) {\n    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n}\ndouble yMax = Double.NaN;\ntry {\n    yMax = f.value(max);\n} catch (FunctionEvaluationException e) {\n    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n}\ndouble yInitial = Double.NaN;\ntry {\n    yInitial = f.value(initial);\n} catch (FunctionEvaluationException e) {\n    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n}\nif ((yMin >= 0 && yMax >= 0) || (yMin <= 0 && yMax <= 0) || (yInitial >= Math.max(yMin, yMax) || yInitial <= Math.min(yMin, yMax))) {\n    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [\" + min + \", \" + max + \"], Values: [\" + yMin + \", \" + yMax + \"], Initial guess value: \" + yInitial);\n}\n\n// full Brent algorithm starting with provided initial guess\nreturn solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..de3c588bb 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,31 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+// catch cases where min/max bracket the root directly or the initial guess does not bracket the root\n+double yMin = Double.NaN;\n+try {\n+    yMin = f.value(min);\n+} catch (FunctionEvaluationException e) {\n+    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n+}\n+double yMax = Double.NaN;\n+try {\n+    yMax = f.value(max);\n+} catch (FunctionEvaluationException e) {\n+    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n+}\n+double yInitial = Double.NaN;\n+try {\n+    yInitial = f.value(initial);\n+} catch (FunctionEvaluationException e) {\n+    throw new IllegalArgumentException(\"Function evaluation failed: \" + e.getMessage(), e);\n+}\n+if ((yMin >= 0 && yMax >= 0) || (yMin <= 0 && yMax <= 0) || (yInitial >= Math.max(yMin, yMax) || yInitial <= Math.min(yMin, yMax))) {\n+    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs or the initial guess does not bracket the root. Endpoints: [\" + min + \", \" + max + \"], Values: [\" + yMin + \", \" + yMax + \"], Initial guess value: \" + yInitial);\n+}\n+\n+// full Brent algorithm starting with provided initial guess\n+return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yMin is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}