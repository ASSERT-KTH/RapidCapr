{
    "patch": "for (int i = 0; i < count; i++) {\n    DurationField field = savedFields[i].iField.getDurationField();\n    if(field.compareTo(DurationFieldType.weekyears().getField(iChrono)) == 0) { // weekyear\n        int year = savedFields[i].iValue;\n        Chronology chrono = iChrono.withUTC();\n        millis = chrono.setYear(millis, year); // set weekyear\n        chrono.validate(millis, savedFields[i].iField.set(0, millis));\n    } else {\n        millis = savedFields[i].set(millis, resetFields); // other field\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..cfd51fc6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,17 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    DurationField field = savedFields[i].iField.getDurationField();\n+    if(field.compareTo(DurationFieldType.weekyears().getField(iChrono)) == 0) { // weekyear\n+        int year = savedFields[i].iValue;\n+        Chronology chrono = iChrono.withUTC();\n+        millis = chrono.setYear(millis, year); // set weekyear\n+        chrono.validate(millis, savedFields[i].iField.set(0, millis));\n+    } else {\n+        millis = savedFields[i].set(millis, resetFields); // other field\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}