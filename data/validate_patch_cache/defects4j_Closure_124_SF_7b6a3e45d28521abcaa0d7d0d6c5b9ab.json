{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n    if (node.isName()) {\n        return true;\n    } else if (!node.isGetProp()) {\n        return true;\n    }\n\n    Node current = node;\n    while (current.isGetProp()) {\n        Node leftChild = current.getFirstChild();\n        if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacemen",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..fbc0f182 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,21 +203,17 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n+private boolean isSafeReplacement(Node node, Node replacement) {\n     if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n-\n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n-      return false;\n+        return true;\n+    } else if (!node.isGetProp()) {\n+        return true;\n     }\n \n-    return true;\n-  }\n+    Node current = node;\n+    while (current.isGetProp()) {\n+        Node leftChild = current.getFirstChild();\n+        if (leftChild.isName() && isNameAssignedTo(leftChild.getString(), replacemen\n \n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n@@ -241,4 +237,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}