{
    "patch": "        if (typeA.isFunctionType() && typeB.isFunctionType()) {\n          FunctionType functionTypeA = typeA.toMaybeFunctionType();\n          FunctionType functionTypeB = typeB.toMaybeFunctionType();\n          JSType typeAreturn = functionTypeA == null ? typeA : functionTypeA.getReturnType();\n          JSType typeBreturn = functionTypeB == null ? typeB : functionTypeB.getReturnType();\n          return new TypePair(typeAreturn, typeBreturn);\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..576d8d1c 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,13 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        if (typeA.isFunctionType() && typeB.isFunctionType()) {\n+          FunctionType functionTypeA = typeA.toMaybeFunctionType();\n+          FunctionType functionTypeB = typeB.toMaybeFunctionType();\n+          JSType typeAreturn = functionTypeA == null ? typeA : functionTypeA.getReturnType();\n+          JSType typeBreturn = functionTypeB == null ? typeB : functionTypeB.getReturnType();\n+          return new TypePair(typeAreturn, typeBreturn);\n+        }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}