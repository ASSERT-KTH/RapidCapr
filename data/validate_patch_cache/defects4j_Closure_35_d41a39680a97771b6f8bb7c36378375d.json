{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        objType = objType.withPropertyRestrictions(constraintObj);\n        JSType commonType = JSType.join(objType, constraint);\n        registerTypeMismatch(commonType, type, null, n);\n        type = commonType;\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not null or undefined.\n   */\n  private void dereferencePointer(Node n, FlowScope scope) {\n    if (n.isQualifiedName()) {\n      JSType type = getJSType(n);\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (narrowed.isUnknownType()) {\n        // In this case narrowed should simply be type, not '?'\n        narrowed = getNativeType(UNKNOWN_TYPE);\n      }\n      if (type != narrowed) {\n        setJSType(n, narrowed);\n        scope.writeType(n, narrowed);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..b169024b 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1121,18 +1121,31 @@ class TypeInference\n     if (constraintObj != null && constraintObj.isRecordType()) {\n       ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n       if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n+        objType = objType.withPropertyRestrictions(constraintObj);\n+        JSType commonType = JSType.join(objType, constraint);\n+        registerTypeMismatch(commonType, type, null, n);\n+        type = commonType;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If we access a property of a symbol, then that symbol is not null or undefined.\n+   */\n+  private void dereferencePointer(Node n, FlowScope scope) {\n+    if (n.isQualifiedName()) {\n+      JSType type = getJSType(n);\n+      JSType narrowed = type.restrictByNotNullOrUndefined();\n+      if (narrowed.isUnknownType()) {\n+        // In this case narrowed should simply be type, not '?'\n+        narrowed = getNativeType(UNKNOWN_TYPE);\n       }\n+      if (type != narrowed) {\n+        setJSType(n, narrowed);\n+        scope.writeType(n, narrowed);\n+      }\n+    }\n+  }\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}