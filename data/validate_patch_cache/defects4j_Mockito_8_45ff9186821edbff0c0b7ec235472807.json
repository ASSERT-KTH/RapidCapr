{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable && !visited.contains(typeParameter)) {\n            visited.add(typeParameter);\n            Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n            if (resolvedType == null) {\n                resolveTypeParametersOfVariables(actualTypeArgument, contextualActualTypeParameters, visited);\n            }\n            resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n            contextualActualTypeParameters.put(typeParameter, resolvedType);\n            visited.remove(typeParameter);\n} else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..266a4b4d6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,18 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable && !visited.contains(typeParameter)) {\n+            visited.add(typeParameter);\n+            Type resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n+            if (resolvedType == null) {\n+                resolveTypeParametersOfVariables(actualTypeArgument, contextualActualTypeParameters, visited);\n+            }\n+            resolvedType = contextualActualTypeParameters.get(actualTypeArgument);\n+            contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            visited.remove(typeParameter);\n+} else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}