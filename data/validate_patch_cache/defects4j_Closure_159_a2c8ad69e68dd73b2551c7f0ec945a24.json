{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        String functionName = child.getString();\n        if(functionName != null && !functionName.isEmpty()){\n          if (!changed.contains(functionName)) {\n            changed.add(functionName);\n            if (JSSourceUtil.isBuiltinFunction(functionName)) {\n              String originalName = JSSourceUtil.getOriginalName(functionName);\n              if (originalName != null) {\n                changed.add(originalName);\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..9ae47501 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -777,7 +777,20 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+        String functionName = child.getString();\n+        if(functionName != null && !functionName.isEmpty()){\n+          if (!changed.contains(functionName)) {\n+            changed.add(functionName);\n+            if (JSSourceUtil.isBuiltinFunction(functionName)) {\n+              String originalName = JSSourceUtil.getOriginalName(functionName);\n+              if (originalName != null) {\n+                changed.add(originalName);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}