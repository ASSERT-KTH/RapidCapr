{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node n = assign.getFirstChild();\n  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {\n    // We want to exclude the assignment itself from the usage list\n    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n\n    // Keep traversing the chained properties\n    while (isChainedProperty) {\n      n = n.getFirstChild().getNext();\n      isChainedProperty = n.getType() == Token.GETPROP;\n    }\n\n    // Check if the property being assigned is 'prototype'\n    if (n.getType() == Token.STRING && n.getString().equals(\"prototype\")) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..9cec264b 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,28 +310,25 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+  Node n = assign.getFirstChild();\n+  if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign) && n.getType() == Token.GETPROP) {\n+    // We want to exclude the assignment itself from the usage list\n+    boolean isChainedProperty = n.getFirstChild().getType() == Token.GETPROP;\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n+    // Keep traversing the chained properties\n+    while (isChainedProperty) {\n+      n = n.getFirstChild().getNext();\n+      isChainedProperty = n.getType() == Token.GETPROP;\n+    }\n \n-      return false;\n+    // Check if the property being assigned is 'prototype'\n+    if (n.getType() == Token.STRING && n.getString().equals(\"prototype\")) {\n+      return true;\n     }\n+  }\n+  return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}