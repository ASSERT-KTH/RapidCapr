{
    "patch": "import org.apache.commons.math.MathException;\nimport org.apache.commons.math.analysis.function.Erf;\nimport org.apache.commons.math.util.FastMath;\n\npublic double cumulativeProbability(double x) throws MathException {\n    if (Double.isInfinite(x)) {\n        if (x < 0) {\n            return 0.0;\n        } else {\n            return 1.0;\n        }\n    } else {\n        double res = Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))) + 1.0;\n        return res * 0.5;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..e531b75ee 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,22 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+import org.apache.commons.math.MathException;\n+import org.apache.commons.math.analysis.function.Erf;\n+import org.apache.commons.math.util.FastMath;\n+\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isInfinite(x)) {\n+        if (x < 0) {\n+            return 0.0;\n+        } else {\n+            return 1.0;\n+        }\n+    } else {\n+        double res = Erf.erf((x - mean) / (standardDeviation * FastMath.sqrt(2.0))) + 1.0;\n+        return res * 0.5;\n     }\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}