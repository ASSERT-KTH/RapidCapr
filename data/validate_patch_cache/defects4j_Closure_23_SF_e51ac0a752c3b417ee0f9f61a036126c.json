{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n      return n;\n    }\n\n    if (!right.isNumber() || right.getDouble() % 1 != 0) {\n      // Sometimes people like to use complex expressions to index into\n      // arrays, or strings to index into array methods.\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    int index = (int) right.getDouble();\n    if (index < 0 || index >= left.getChildCount()) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    Node elem = left.getChildAtIndex(index);\n    if (elem.isEmpty()) {\n      elem = NodeUtil.newUndefinedNode(left);\n    } else {\n      left.removeChild(elem);\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem);\n    reportCodeChange();\n    return elem;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..b6c17a29 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1428,39 +1428,22 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (!right.isNumber()) {\n+    if (!right.isNumber() || right.getDouble() % 1 != 0) {\n       // Sometimes people like to use complex expressions to index into\n       // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n       error(INVALID_GETELEM_INDEX_ERROR, right);\n       return n;\n     }\n \n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n-\n-    Node current = left.getFirstChild();\n-    Node elem = null;\n-    for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n-    }\n-\n-    if (elem == null) {\n+    int index = (int) right.getDouble();\n+    if (index < 0 || index >= left.getChildCount()) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n+    Node elem = left.getChildAtIndex(index);\n     if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+      elem = NodeUtil.newUndefinedNode(left);\n     } else {\n       left.removeChild(elem);\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}