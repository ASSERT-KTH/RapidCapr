{
    "patch": "  public Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n      return null;\n    }\n    SourceFile input = getSourceFileByName(sourceName);\n    if (input != null) {\n      return input.getLine(lineNumber);\n    }\n    return null;\n  }\n\n  //------------------------------------------------------------------------\n  // Package-private helpers\n  //------------------------------------------------------------------------\n\n  @Override\n  Node getNodeForCodeInsertion(JSModule module) {\n    if (module == null) {\n      if (inputs == null || inputs.length == 0) {\n        throw new IllegalStateException(\"No inputs\");\n      }\n\n      Node astRoot = inputs[0].getAstRoot(this);\n      if (astRoot.isScript()) {\n        return getLastChildScript(astRoot);\n      } else {\n        return astRoot;\n      }\n    }\n\n    List<CompilerInput> inputs = module.getInputs();\n    if (inputs.size() > 0) {\n      Node astRoot = inputs.get(0).getAstRoot(this);\n      if (astRoot.isScript()) {\n        return getLastChildScript(astRoot);\n      } else {\n        return astRoot;\n      }\n    }\n    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n      inputs = m.getInputs();\n      if (inputs.size() > 0) {\n        Node astRoot = inputs.get(0).getAstRoot(this);\n        if (astRoot.isScript()) {\n          return getLastChildScript(astRoot);\n        } else {\n          return astRoot;\n        }\n      }\n    }\n    throw new IllegalStateException(\"Root module has no inputs\");\n  }\n\n  private Node getLastChildScript(Node node) {\n    int count = node.getChildCount();\n    Node lastChild = node.getLastChild();\n    if (count == 0 || (count == 1 && lastChild.isEmpty())) {\n      // Return the node with no children in case there are no statements yet.\n      return node;\n    }\n    return lastChild;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..a1d170e6 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,68 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n+  public Region getSourceRegion(String sourceName, int lineNumber) {\n+    if (lineNumber < 1) {\n+      return null;\n+    }\n+    SourceFile input = getSourceFileByName(sourceName);\n+    if (input != null) {\n+      return input.getLine(lineNumber);\n+    }\n+    return null;\n+  }\n \n-    checkFirstModule(modules);\n+  //------------------------------------------------------------------------\n+  // Package-private helpers\n+  //------------------------------------------------------------------------\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+  @Override\n+  Node getNodeForCodeInsertion(JSModule module) {\n+    if (module == null) {\n+      if (inputs == null || inputs.length == 0) {\n+        throw new IllegalStateException(\"No inputs\");\n+      }\n+\n+      Node astRoot = inputs[0].getAstRoot(this);\n+      if (astRoot.isScript()) {\n+        return getLastChildScript(astRoot);\n+      } else {\n+        return astRoot;\n+      }\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n \n-    initInputsByNameMap();\n+    List<CompilerInput> inputs = module.getInputs();\n+    if (inputs.size() > 0) {\n+      Node astRoot = inputs.get(0).getAstRoot(this);\n+      if (astRoot.isScript()) {\n+        return getLastChildScript(astRoot);\n+      } else {\n+        return astRoot;\n+      }\n+    }\n+    for (JSModule m : getModuleGraph().getTransitiveDepsDeepestFirst(module)) {\n+      inputs = m.getInputs();\n+      if (inputs.size() > 0) {\n+        Node astRoot = inputs.get(0).getAstRoot(this);\n+        if (astRoot.isScript()) {\n+          return getLastChildScript(astRoot);\n+        } else {\n+          return astRoot;\n+        }\n+      }\n+    }\n+    throw new IllegalStateException(\"Root module has no inputs\");\n   }\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+  private Node getLastChildScript(Node node) {\n+    int count = node.getChildCount();\n+    Node lastChild = node.getLastChild();\n+    if (count == 0 || (count == 1 && lastChild.isEmpty())) {\n+      // Return the node with no children in case there are no statements yet.\n+      return node;\n     }\n+    return lastChild;\n   }\n-\n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}