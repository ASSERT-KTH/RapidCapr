{
    "patch": "        if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n            collector.add(currentStrategy);\n        }\n        \n        // adds the last Strategy and completes name regex pattern\n        if (currentStrategy != null) {\n            currentStrategy.addRegex(this, regex);\n        }\n        \n        nameRegexPattern = Pattern.compile(regex.toString()); // completes name regex pattern\n        \n        currentFormatField = null;\n        strategies = collector.toArray(new Strategy[collector.size()]);\n        parsePattern = Pattern.compile(regex.toString());\n\n        // completes the remaining tasks\n        nameCounters.ensureCapacity(strategies.length);\n        for (int i = 0; i < strategies.length; i++) {\n            nameCounters.add(strategyIndexesByDate[i], 0);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..cffb1251 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,26 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        if (currentStrategy != null && currentStrategy.addRegex(this, regex)) {\n+            collector.add(currentStrategy);\n+        }\n+        \n+        // adds the last Strategy and completes name regex pattern\n+        if (currentStrategy != null) {\n+            currentStrategy.addRegex(this, regex);\n+        }\n+        \n+        nameRegexPattern = Pattern.compile(regex.toString()); // completes name regex pattern\n+        \n+        currentFormatField = null;\n+        strategies = collector.toArray(new Strategy[collector.size()]);\n+        parsePattern = Pattern.compile(regex.toString());\n+\n+        // completes the remaining tasks\n+        nameCounters.ensureCapacity(strategies.length);\n+        for (int i = 0; i < strategies.length; i++) {\n+            nameCounters.add(strategyIndexesByDate[i], 0);\n+        }\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}