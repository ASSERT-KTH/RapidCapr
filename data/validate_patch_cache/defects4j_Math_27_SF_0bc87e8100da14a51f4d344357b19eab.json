{
    "patch": "public Dfp multiply(final int x) {\n    final Dfp result = newInstance(this);\n\n    int[] product = new int[result.getMantissaLength() + 1];\n    int[] source = result.getMantissa();\n    int carry = 0;\n\n    for (int i = 0; i < source.length; i++) {\n        long p = ((long) source[i] & UNSIGNED_MASK) * ((long) x & UNSIGNED_MASK) + (long) carry;\n        product[i] = (int) (p & UNSIGNED_MASK);\n        carry = (int) (p >>> RADIX);\n    }\n    product[source.length] = carry;\n\n    return newInstance(result.getSign(), result.getExponent(), product, false);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f84218ebd..15cdd674b 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -593,9 +593,22 @@ public class Fraction\n      *\n      * @return the fraction percentage as a <tt>double</tt>.\n      */\n-    public double percentageValue() {\n-        return multiply(100).doubleValue();\n+public Dfp multiply(final int x) {\n+    final Dfp result = newInstance(this);\n+\n+    int[] product = new int[result.getMantissaLength() + 1];\n+    int[] source = result.getMantissa();\n+    int carry = 0;\n+\n+    for (int i = 0; i < source.length; i++) {\n+        long p = ((long) source[i] & UNSIGNED_MASK) * ((long) x & UNSIGNED_MASK) + (long) carry;\n+        product[i] = (int) (p & UNSIGNED_MASK);\n+        carry = (int) (p >>> RADIX);\n     }\n+    product[source.length] = carry;\n+\n+    return newInstance(result.getSign(), result.getExponent(), product, false);\n+}\n \n     /**\n      * <p>Creates a {@code Fraction} instance with the 2 parts",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}