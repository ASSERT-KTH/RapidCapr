{
    "patch": "          // Ignore most indirect references, like x.y (but not x.y(),\n          // since the function referenced by y might reference 'this').\n\n          // Deleting a property has different semantics from deleting\n          // a variable, so deleted properties should not be inlined.\n          if (NodeUtil.isDelProp(parent.getParent())) {\n            return false;\n          }\n\n          // We short-circuit to avoid the object-splitting algorithm blind spot.\n          String propName = parent.getLastChild().getString();\n          if (!validProperties.contains(propName)) {\n            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n              validProperties.add(propName);\n            } else {\n              return false;\n            }\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..7de17a9d 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,24 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          // Ignore most indirect references, like x.y (but not x.y(),\n+          // since the function referenced by y might reference 'this').\n+\n+          // Deleting a property has different semantics from deleting\n+          // a variable, so deleted properties should not be inlined.\n+          if (NodeUtil.isDelProp(parent.getParent())) {\n+            return false;\n+          }\n+\n+          // We short-circuit to avoid the object-splitting algorithm blind spot.\n+          String propName = parent.getLastChild().getString();\n+          if (!validProperties.contains(propName)) {\n+            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+              validProperties.add(propName);\n+            } else {\n+              return false;\n+            }\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}