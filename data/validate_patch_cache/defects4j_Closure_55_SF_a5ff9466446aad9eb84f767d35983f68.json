{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    switch (n.getToken()) {\n      case FUNCTION:\n        return true;\n      case ASSIGN:\n        Node rhs = n.getLastChild();\n        if (rhs.isFunction()) {\n            return true;\n        }\n        if (rhs.isCall()) {\n            Node callee = rhs.getFirstChild();\n            if (!callee.isQualifiedName()) {\n              return false;\n            }\n            String qName = callee.getQualifiedName();\n            return qName.startsWith(\"module$\") || qName.startsWith(\"exports.\") || qName.startsWith(\"module.exports.\");\n        }\n        return false;\n      default:\n        return false;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..02117c90 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,9 +112,27 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    switch (n.getToken()) {\n+      case FUNCTION:\n+        return true;\n+      case ASSIGN:\n+        Node rhs = n.getLastChild();\n+        if (rhs.isFunction()) {\n+            return true;\n+        }\n+        if (rhs.isCall()) {\n+            Node callee = rhs.getFirstChild();\n+            if (!callee.isQualifiedName()) {\n+              return false;\n+            }\n+            String qName = callee.getQualifiedName();\n+            return qName.startsWith(\"module$\") || qName.startsWith(\"exports.\") || qName.startsWith(\"module.exports.\");\n+        }\n+        return false;\n+      default:\n+        return false;\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}