{
    "patch": "\tcase Token.INC:\n\tcase Token.DEC:\n\t  // checking additional uses of expression\n\t  if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent) || NodeUtil.referencesName(parent.getLastChild(), n.getString())) {\n\t    isSet = true;\n\t    type = Name.Type.OTHER;\n\t  }\n\t  break;\n\tdefault:\n\t  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n\t    isSet = true;\n\t    type = Name.Type.OTHER;\n\t  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..cb828c5a 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -363,6 +363,19 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+\tcase Token.INC:\n+\tcase Token.DEC:\n+\t  // checking additional uses of expression\n+\t  if (parent.getParent() == null || NodeUtil.isExpressionResultUsed(parent) || NodeUtil.referencesName(parent.getLastChild(), n.getString())) {\n+\t    isSet = true;\n+\t    type = Name.Type.OTHER;\n+\t  }\n+\t  break;\n+\tdefault:\n+\t  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+\t    isSet = true;\n+\t    type = Name.Type.OTHER;\n+\t  }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}