{
    "patch": "            Object[] rawArgs = invocation.getRawArguments();\n            Object varargValue = rawArgs[indexOfVararg];\n            if (varargValue != null && varargValue.getClass().isArray()) {\n                Object[] varargs = (Object[]) varargValue;\n                for (int i = 0; i < varargs.length; i++) {\n                    matchers.add(new Equals(varargs[i]));\n                }\n            } else {\n                matchers.add(new Equals(varargValue));\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..03cb8549d 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,19 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] rawArgs = invocation.getRawArguments();\n+            Object varargValue = rawArgs[indexOfVararg];\n+            if (varargValue != null && varargValue.getClass().isArray()) {\n+                Object[] varargs = (Object[]) varargValue;\n+                for (int i = 0; i < varargs.length; i++) {\n+                    matchers.add(new Equals(varargs[i]));\n+                }\n+            } else {\n+                matchers.add(new Equals(varargValue));\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}