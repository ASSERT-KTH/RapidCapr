{
    "patch": "public int compareTo(Fraction object) {\n    int lcm = this.denominator * object.denominator / gcd(this.denominator, object.denominator);\n    int thisNumerator = this.numerator * (lcm / this.denominator);\n    int thatNumerator = object.numerator * (lcm / object.denominator);\n    return Integer.compare(thisNumerator, thatNumerator);\n}\n\nprivate int gcd(int a, int b) {\n    if (b == 0) {\n        return a;\n    }\n    return gcd(b, a % b);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/fraction/Fraction.java b/src/java/org/apache/commons/math/fraction/Fraction.java\nindex 0706f8c41..4aea69248 100644\n--- a/src/java/org/apache/commons/math/fraction/Fraction.java\n+++ b/src/java/org/apache/commons/math/fraction/Fraction.java\n@@ -255,11 +255,19 @@ public class Fraction extends Number implements Comparable<Fraction> {\n      * @return -1 if this is less than <tt>object</tt>, +1 if this is greater\n      *         than <tt>object</tt>, 0 if they are equal.\n      */\n-    public int compareTo(Fraction object) {\n-        double nOd = doubleValue();\n-        double dOn = object.doubleValue();\n-        return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);\n+public int compareTo(Fraction object) {\n+    int lcm = this.denominator * object.denominator / gcd(this.denominator, object.denominator);\n+    int thisNumerator = this.numerator * (lcm / this.denominator);\n+    int thatNumerator = object.numerator * (lcm / object.denominator);\n+    return Integer.compare(thisNumerator, thatNumerator);\n+}\n+\n+private int gcd(int a, int b) {\n+    if (b == 0) {\n+        return a;\n     }\n+    return gcd(b, a % b);\n+}\n     \n     /**\n      * Gets the fraction as a <tt>double</tt>. This calculates the fraction as",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}