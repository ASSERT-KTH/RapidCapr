{
    "patch": "static boolean isValidDefineValue(Node val, Set<String> defines) {\n    if (val == null) {\n        return false;\n    }\n    \n    int type = val.getType();\n    \n    if (type == Token.STRING || type == Token.NUMBER ||\n        type == Token.TRUE || type == Token.FALSE) {\n        return true;\n    } else if (type == Token.NAME || type == Token.GETPROP) {\n        String name = val.getQualifiedName();\n        return name != null && defines.contains(name);\n    } else if (type == Token.NOT || type == Token.NEG) {\n        return isValidDefineValue(val.getFirstChild(), defines);\n    } else if (Token.BINARY_OPERATORS.contains(type)) {\n        return isValidDefineValue(val.getFirstChild(), defines) &&\n               isValidDefineValue(val.getLastChild(), defines);\n    } else {\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex a31b17a2..e537a07d 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -317,34 +317,28 @@ public final class NodeUtil {\n    * @param val The value being assigned.\n    * @param defines The list of names of existing defines.\n    */\n-  static boolean isValidDefineValue(Node val, Set<String> defines) {\n-    switch (val.getType()) {\n-      case Token.STRING:\n-      case Token.NUMBER:\n-      case Token.TRUE:\n-      case Token.FALSE:\n+static boolean isValidDefineValue(Node val, Set<String> defines) {\n+    if (val == null) {\n+        return false;\n+    }\n+    \n+    int type = val.getType();\n+    \n+    if (type == Token.STRING || type == Token.NUMBER ||\n+        type == Token.TRUE || type == Token.FALSE) {\n         return true;\n-\n-      // Binary operators are only valid if both children are valid.\n-      case Token.BITAND:\n-      case Token.BITNOT:\n-      case Token.BITOR:\n-      case Token.BITXOR:\n-\n-      // Uniary operators are valid if the child is valid.\n-      case Token.NOT:\n-      case Token.NEG:\n+    } else if (type == Token.NAME || type == Token.GETPROP) {\n+        String name = val.getQualifiedName();\n+        return name != null && defines.contains(name);\n+    } else if (type == Token.NOT || type == Token.NEG) {\n         return isValidDefineValue(val.getFirstChild(), defines);\n-\n-      // Names are valid if and only if they are defines themselves.\n-      case Token.NAME:\n-      case Token.GETPROP:\n-        if (val.isQualifiedName()) {\n-          return defines.contains(val.getQualifiedName());\n-        }\n+    } else if (Token.BINARY_OPERATORS.contains(type)) {\n+        return isValidDefineValue(val.getFirstChild(), defines) &&\n+               isValidDefineValue(val.getLastChild(), defines);\n+    } else {\n+        return false;\n     }\n-    return false;\n-  }\n+}\n \n   /**\n    * Returns whether this a BLOCK node with no children.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}