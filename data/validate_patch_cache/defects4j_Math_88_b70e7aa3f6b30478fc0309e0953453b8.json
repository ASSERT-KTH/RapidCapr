{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    for (int i = 0; i < coefficients.length; i++) {\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        double coefficient = 0;\n        if (basicRow != null) {\n            int firstNonZeroColumn = -1;\n            boolean multiple = false;\n            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                double entry = tableau.getEntry(basicRow, j);\n                if (entry != 0) {\n                    if (firstNonZeroColumn == -1) {\n                        firstNonZeroColumn = j;\n                    } else {\n                        multiple = true;\n                        break;\n                    }\n                }\n            }\n            if (!multiple && firstNonZeroColumn != -1) {\n                if (tableau.getEntry(basicRow, firstNonZeroColumn) == 1) {\n                    coefficient = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n                }\n            }\n        } else {\n            coefficient = (restrictToNonNegative ? 0 : mostNegative);\n        }\n        coefficients[i] = coefficient;\n    }\n    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..f59424745 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,39 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n-            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow = getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    for (int i = 0; i < coefficients.length; i++) {\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        double coefficient = 0;\n+        if (basicRow != null) {\n+            int firstNonZeroColumn = -1;\n+            boolean multiple = false;\n+            for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n+                double entry = tableau.getEntry(basicRow, j);\n+                if (entry != 0) {\n+                    if (firstNonZeroColumn == -1) {\n+                        firstNonZeroColumn = j;\n+                    } else {\n+                        multiple = true;\n+                        break;\n                     }\n                 }\n             }\n+            if (!multiple && firstNonZeroColumn != -1) {\n+                if (tableau.getEntry(basicRow, firstNonZeroColumn) == 1) {\n+                    coefficient = getEntry(basicRow, getRhsOffset()) - (restrictToNonNegative ? 0 : mostNegative);\n+                }\n+            }\n+        } else {\n+            coefficient = (restrictToNonNegative ? 0 : mostNegative);\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        coefficients[i] = coefficient;\n     }\n+    return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2902.92783505155> but was:<0.0>",
    "test_result": "FAIL"
}