{
    "patch": "void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                         Node parent) {\n    if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n      return;\n    }\n\n    Node arrayNode = left.getFirstChild();\n    Node functionName = left.getSecondChild();\n\n    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n        !functionName.getString().equals(\"join\")) {\n      return;\n    }\n\n    String joinString = NodeUtil.getStringValue(right);\n    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n    StringBuilder sb = new StringBuilder();\n    int foldedSize = 0;\n    for (Node elem : arrayNode.children()) {\n      if (NodeUtil.isImmutableValue(elem)) {\n        if (sb.length() > 0) {\n          sb.append(joinString);\n        }\n        sb.append(NodeUtil.getStringValue(elem));\n      } else {\n        if (sb.length() > 0) {\n          // + 2 for the quotes.\n          foldedSize += sb.length() + 2;\n          arrayFoldedChildren.add(Node.newString(sb.toString()));\n          sb = new StringBuilder();\n        }\n        foldedSize += InlineCostEstimator.getCost(elem);\n        arrayFoldedChildren.add(elem);\n      }\n    }\n\n    if (sb.length() > 0) {\n      // + 2 for the quotes.\n      foldedSize += sb.length() + 2;\n      arrayFoldedChildren.add(Node.newString(sb.toString()));\n    }\n    // one for each comma.\n    foldedSize += arrayFoldedChildren.size() - 1;\n\n    int originalSize = InlineCostEstimator.getCost(n);\n    switch (arrayFoldedChildren.size()) {\n      case 0:\n        Node emptyStringNode = IR.string(\"\");\n        parent.replaceChild(n, emptyStringNode);\n        break;\n\n      case 1:\n        Node foldedStringNode = arrayFoldedChildren.remove(0);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.removeChildren();\n        if (foldedStringNode.getType() != Token.STRING) {\n          // If the Node is not a string literal, ensure that\n          // it is coerced to a string.\n          Node replacement = new Node(Token.ADD,\n              IR.string(\"\"), foldedStringNode);\n          foldedStringNode = replacement;\n        }\n        parent.replaceChild(n, foldedStringNode);\n        break;\n\n      default:\n        // No folding could actually be performed.\n        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n          return;\n        }\n        int kJoinOverhead = \"[].join()\".length();\n        foldedSize += kJoinOverhead;\n        foldedSize += InlineCostEstimator.getCost(right);\n        if (foldedSize > originalSize) {\n          return;\n        }\n        arrayNode.removeChildren();\n        for (Node node : arrayFoldedChildren) {\n          arrayNode.addChildToBack(node);\n        }\n        break;\n    }\n    t.getCompiler().reportChangeToEnclosingScope(parent);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FoldConstants.java b/src/com/google/javascript/jscomp/FoldConstants.java\nindex f6d6a27f..5fd0d0ca 100644\n--- a/src/com/google/javascript/jscomp/FoldConstants.java\n+++ b/src/com/google/javascript/jscomp/FoldConstants.java\n@@ -1458,14 +1458,14 @@ class FoldConstants extends AbstractPostOrderCallback\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n+void tryFoldStringJoin(NodeTraversal t, Node n, Node left, Node right,\n                          Node parent) {\n     if (!NodeUtil.isGetProp(left) || !NodeUtil.isImmutableValue(right)) {\n       return;\n     }\n \n     Node arrayNode = left.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+    Node functionName = left.getSecondChild();\n \n     if ((arrayNode.getType() != Token.ARRAYLIT) ||\n         !functionName.getString().equals(\"join\")) {\n@@ -1476,9 +1476,7 @@ class FoldConstants extends AbstractPostOrderCallback\n     List<Node> arrayFoldedChildren = Lists.newLinkedList();\n     StringBuilder sb = new StringBuilder();\n     int foldedSize = 0;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n+    for (Node elem : arrayNode.children()) {\n       if (NodeUtil.isImmutableValue(elem)) {\n         if (sb.length() > 0) {\n           sb.append(joinString);\n@@ -1494,7 +1492,6 @@ class FoldConstants extends AbstractPostOrderCallback\n         foldedSize += InlineCostEstimator.getCost(elem);\n         arrayFoldedChildren.add(elem);\n       }\n-      elem = elem.getNext();\n     }\n \n     if (sb.length() > 0) {\n@@ -1508,7 +1505,7 @@ class FoldConstants extends AbstractPostOrderCallback\n     int originalSize = InlineCostEstimator.getCost(n);\n     switch (arrayFoldedChildren.size()) {\n       case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n+        Node emptyStringNode = IR.string(\"\");\n         parent.replaceChild(n, emptyStringNode);\n         break;\n \n@@ -1517,12 +1514,12 @@ class FoldConstants extends AbstractPostOrderCallback\n         if (foldedSize > originalSize) {\n           return;\n         }\n-        arrayNode.detachChildren();\n+        arrayNode.removeChildren();\n         if (foldedStringNode.getType() != Token.STRING) {\n           // If the Node is not a string literal, ensure that\n           // it is coerced to a string.\n           Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\"), foldedStringNode);\n+              IR.string(\"\"), foldedStringNode);\n           foldedStringNode = replacement;\n         }\n         parent.replaceChild(n, foldedStringNode);\n@@ -1539,13 +1536,13 @@ class FoldConstants extends AbstractPostOrderCallback\n         if (foldedSize > originalSize) {\n           return;\n         }\n-        arrayNode.detachChildren();\n+        arrayNode.removeChildren();\n         for (Node node : arrayFoldedChildren) {\n           arrayNode.addChildToBack(node);\n         }\n         break;\n     }\n-    t.getCompiler().reportCodeChange();\n+    t.getCompiler().reportChangeToEnclosingScope(parent);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}