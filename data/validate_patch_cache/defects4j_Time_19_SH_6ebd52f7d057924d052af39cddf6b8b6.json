{
    "patch": "        } else {\n            // Fix for DST transition issue\n            // If the offset adjust is within the range of the offset at the calculated time\n            // then return it as is\n            if (Math.abs(offsetLocal - offsetAdjusted) <= 1) {\n                return offsetLocal;\n            }\n            // Otherwise, check the previous and next transitions within the range\n            long prev = previousTransition(instantAdjusted);\n            long nextLocal = nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted = nextTransition(instantAdjusted);\n            if (nextLocal != nextAdjusted) {\n                return offsetLocal;\n            } else if (prev < instantAdjusted && nextAdjusted <= instantLocal) {\n                int offsetPrev = getOffset(prev);\n                int diff1 = offsetLocal - offsetPrev;\n                int diff2 = offsetLocal - offsetAdjusted;\n                if (Math.abs(diff1) < Math.abs(diff2)) {\n                    return offsetPrev;\n                }\n            } else if (nextAdjusted > instantLocal && prev >= instantAdjusted) {\n                int offsetNext = getOffset(nextAdjusted);\n                int diff1 = offsetNext - offsetLocal;\n                int diff2 = offsetAdjusted - offsetLocal;\n                if (Math.abs(diff1) < Math.abs(diff2) || diff2 >= 0) {\n                    return offsetNext;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..9f1aebec 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,35 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else {\n+            // Fix for DST transition issue\n+            // If the offset adjust is within the range of the offset at the calculated time\n+            // then return it as is\n+            if (Math.abs(offsetLocal - offsetAdjusted) <= 1) {\n+                return offsetLocal;\n+            }\n+            // Otherwise, check the previous and next transitions within the range\n+            long prev = previousTransition(instantAdjusted);\n+            long nextLocal = nextTransition(instantLocal - offsetLocal);\n+            long nextAdjusted = nextTransition(instantAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                return offsetLocal;\n+            } else if (prev < instantAdjusted && nextAdjusted <= instantLocal) {\n+                int offsetPrev = getOffset(prev);\n+                int diff1 = offsetLocal - offsetPrev;\n+                int diff2 = offsetLocal - offsetAdjusted;\n+                if (Math.abs(diff1) < Math.abs(diff2)) {\n+                    return offsetPrev;\n+                }\n+            } else if (nextAdjusted > instantLocal && prev >= instantAdjusted) {\n+                int offsetNext = getOffset(nextAdjusted);\n+                int diff1 = offsetNext - offsetLocal;\n+                int diff2 = offsetAdjusted - offsetLocal;\n+                if (Math.abs(diff1) < Math.abs(diff2) || diff2 >= 0) {\n+                    return offsetNext;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}