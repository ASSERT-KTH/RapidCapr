{
    "patch": "public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n        throws IllegalArgumentException\n{\n    Chronology base;\n    if ((base = getBase()) != null) {\n        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n\n    // Check if the date is within the invalid cutover range\n    boolean isInvalidRange = false;\n    if (year == 1582) {\n        if (monthOfYear == 10) {\n            if (dayOfMonth > 4 && dayOfMonth < 15) {\n                isInvalidRange = true;\n            }\n        } else if (monthOfYear > 10) {\n            isInvalidRange = true;\n        }\n    } else if (year > 1582) {\n        isInvalidRange = false;\n    } else {\n        if (monthOfYear < 10) {\n            isInvalidRange = true;\n        } else if (monthOfYear == 10 && dayOfMonth <= 4) {\n            isInvalidRange = true;\n        }\n    }\n\n    // Throw exception if the date is within the invalid cutover range\n    if (isInvalidRange) {\n        throw new IllegalArgumentException(\"Specified date does not exist\");\n    }\n\n    // If not within invalid range, use appropriate chronology\n    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth <= 4)))) {\n        // Use Julian Chronology\n        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    } else {\n        // Use Gregorian Chronology\n        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/GJChronology.java b/src/main/java/org/joda/time/chrono/GJChronology.java\nindex 29e559d4..48a958f3 100644\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n@@ -347,36 +347,53 @@ public final class GJChronology extends AssembledChronology {\n         return instant;\n     }\n \n-    public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n-                                  int hourOfDay, int minuteOfHour,\n-                                  int secondOfMinute, int millisOfSecond)\n+public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth,\n+                              int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond)\n         throws IllegalArgumentException\n-    {\n-        Chronology base;\n-        if ((base = getBase()) != null) {\n-            return base.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        }\n+{\n+    Chronology base;\n+    if ((base = getBase()) != null) {\n+        return base.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n \n-        // Assume date is Gregorian.\n-        long instant;\n-            instant = iGregorianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-        if (instant < iCutoverMillis) {\n-            // Maybe it's Julian.\n-            instant = iJulianChronology.getDateTimeMillis\n-                (year, monthOfYear, dayOfMonth,\n-                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n-            if (instant >= iCutoverMillis) {\n-                // Okay, it's in the illegal cutover gap.\n-                throw new IllegalArgumentException(\"Specified date does not exist\");\n+    // Check if the date is within the invalid cutover range\n+    boolean isInvalidRange = false;\n+    if (year == 1582) {\n+        if (monthOfYear == 10) {\n+            if (dayOfMonth > 4 && dayOfMonth < 15) {\n+                isInvalidRange = true;\n             }\n+        } else if (monthOfYear > 10) {\n+            isInvalidRange = true;\n+        }\n+    } else if (year > 1582) {\n+        isInvalidRange = false;\n+    } else {\n+        if (monthOfYear < 10) {\n+            isInvalidRange = true;\n+        } else if (monthOfYear == 10 && dayOfMonth <= 4) {\n+            isInvalidRange = true;\n         }\n-        return instant;\n     }\n \n+    // Throw exception if the date is within the invalid cutover range\n+    if (isInvalidRange) {\n+        throw new IllegalArgumentException(\"Specified date does not exist\");\n+    }\n+\n+    // If not within invalid range, use appropriate chronology\n+    if (year < 1582 || (year == 1582 && (monthOfYear < 10 || (monthOfYear == 10 && dayOfMonth <= 4)))) {\n+        // Use Julian Chronology\n+        return iJulianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    } else {\n+        // Use Gregorian Chronology\n+        return iGregorianChronology.getDateTimeMillis(year, monthOfYear, dayOfMonth,\n+                hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+    }\n+}\n+\n     /**\n      * Gets the cutover instant between Gregorian and Julian chronologies.\n      * @return the cutover instant",
    "result_reason": "java.lang.IllegalArgumentException: Specified date does not exist",
    "test_result": "FAIL"
}