{
    "patch": "switch (this.testForEquality(that)) {\n        case TRUE:\n          JSType thisResolved = this.isResolved() ? this.resolvedType : this;\n          JSType thatResolved = that.isResolved() ? that.resolvedType : that;\n          if (thisResolved.isSubtypeOf(thatResolved)) {\n            return new TypePair(thisResolved, thatResolved);\n          } else if (thatResolved.isSubtypeOf(thisResolved)) {\n            return new TypePair(thatResolved, thisResolved);\n          } else {\n            return new TypePair(null, null);\n          }\n        default:\n          return new TypePair(this, that);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..f9897df2 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,20 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+switch (this.testForEquality(that)) {\n+        case TRUE:\n+          JSType thisResolved = this.isResolved() ? this.resolvedType : this;\n+          JSType thatResolved = that.isResolved() ? that.resolvedType : that;\n+          if (thisResolved.isSubtypeOf(thatResolved)) {\n+            return new TypePair(thisResolved, thatResolved);\n+          } else if (thatResolved.isSubtypeOf(thisResolved)) {\n+            return new TypePair(thatResolved, thisResolved);\n+          } else {\n+            return new TypePair(null, null);\n+          }\n+        default:\n+          return new TypePair(this, that);\n+      }\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}