{
    "patch": "List<CFGEdge<Node, Branch>> outgoing = getCfg().getDirectedGraph().getOutEdges(cfgNode);\nfor (CFGEdge<Node, Branch> edge : outgoing) {\n  if (edge.getValue() == Branch.ON_EX) {\n    return true;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..12a546b3 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,16 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+List<CFGEdge<Node, Branch>> outgoing = getCfg().getDirectedGraph().getOutEdges(cfgNode);\n+for (CFGEdge<Node, Branch> edge : outgoing) {\n+  if (edge.getValue() == Branch.ON_EX) {\n+    return true;\n+  }\n+}\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}