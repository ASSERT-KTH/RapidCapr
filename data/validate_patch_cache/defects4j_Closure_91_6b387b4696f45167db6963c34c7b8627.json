{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        ((jsDoc.isConstructor() && isConstructorFunction(n)) ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {}; // or\n    // var a = {x: function() {}};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * Determines if the given function is a constructor function.\n * Assumes that the function node is of type Token.FUNCTION.\n */\nprivate boolean isConstructorFunction(Node functionNode) {\n  String functionName = NodeUtil.getName(functionNode);\n  if (functionName == null) {\n    // Anonymous function expressions cannot be constructors.\n    return false;\n  }\n  char firstChar = functionName.charAt(0);\n  return Character.isUpperCase(firstChar);\n}\n\n/** \n * Gets the JSDoc information for the specified function node, if any.\n */\nprivate JSDocInfo getFunctionJsDocInfo(Node functionNode) {\n  Node parent = functionNode.getParent();\n  while (parent != null) {\n    if (parent.isFunction()) {\n      functionNode = parent;\n      parent = functionNode.getParent();\n    } else {\n      break;\n    }\n  }\n  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(functionNode);\n  return jsDoc;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..b0352139 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,71 +79,102 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.isInterface() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n-\n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n-        return false;\n-      }\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        ((jsDoc.isConstructor() && isConstructorFunction(n)) ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n \n-      // Don't traverse functions that are getting lent to a prototype.\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() { }; // or\n+    // function a() {} // or\n+    // a.x = function() {}; // or\n+    // var a = {x: function() {}};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+\n+          // object literal keys\n+          pType == Token.STRING ||\n+          pType == Token.NUMBER)) {\n+      return false;\n     }\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n+    // Don't traverse functions that are getting lent to a prototype.\n+  }\n+\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-        if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n-          Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n-          }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n         }\n       }\n     }\n+  }\n \n-    return true;\n+  return true;\n+}\n+\n+/**\n+ * Determines if the given function is a constructor function.\n+ * Assumes that the function node is of type Token.FUNCTION.\n+ */\n+private boolean isConstructorFunction(Node functionNode) {\n+  String functionName = NodeUtil.getName(functionNode);\n+  if (functionName == null) {\n+    // Anonymous function expressions cannot be constructors.\n+    return false;\n+  }\n+  char firstChar = functionName.charAt(0);\n+  return Character.isUpperCase(firstChar);\n+}\n+\n+/** \n+ * Gets the JSDoc information for the specified function node, if any.\n+ */\n+private JSDocInfo getFunctionJsDocInfo(Node functionNode) {\n+  Node parent = functionNode.getParent();\n+  while (parent != null) {\n+    if (parent.isFunction()) {\n+      functionNode = parent;\n+      parent = functionNode.getParent();\n+    } else {\n+      break;\n+    }\n   }\n+  JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(functionNode);\n+  return jsDoc;\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: method getFunctionJsDocInfo(Node) is already defined in class CheckGlobalThis",
    "test_result": "ERROR"
}