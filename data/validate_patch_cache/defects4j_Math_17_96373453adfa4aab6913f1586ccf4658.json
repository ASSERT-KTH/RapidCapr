{
    "patch": "public Dfp multiply(final int x) {\n    final Dfp product = newInstance();\n    Dfp temp = this;\n    int[] multiplicand = new int[1];\n    multiplicand[0] = x;\n\n    for (int i = 0; i < h.length; i++) {\n        product.h[i] = h[i].multiply(multiplicand);\n    }\n\n    product.quickDotProduct();\n    product.exp = exp;\n\n    if (product.isInfinite()) {\n        product.field.setIEEEFlagsBits(1);\n    }\n\n    return product;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\nindex 0f78330a5..49c571d06 100644\n--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java\n@@ -1599,10 +1599,26 @@ public class Dfp implements FieldElement<Dfp> {\n      * @param x multiplicand\n      * @return product of this and x\n      */\n-    public Dfp multiply(final int x) {\n-            return multiplyFast(x);\n+public Dfp multiply(final int x) {\n+    final Dfp product = newInstance();\n+    Dfp temp = this;\n+    int[] multiplicand = new int[1];\n+    multiplicand[0] = x;\n+\n+    for (int i = 0; i < h.length; i++) {\n+        product.h[i] = h[i].multiply(multiplicand);\n+    }\n+\n+    product.quickDotProduct();\n+    product.exp = exp;\n+\n+    if (product.isInfinite()) {\n+        product.field.setIEEEFlagsBits(1);\n     }\n \n+    return product;\n+}\n+\n     /** Multiply this by a single digit 0&lt;=x&lt;radix.\n      * There are speed advantages in this special case.\n      * @param x multiplicand",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}