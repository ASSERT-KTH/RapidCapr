{
    "patch": "      if (t.getScopeDepth() <= 2 && parent != null) {\n        // Handle the case where a function invocation is an argument of another invocation.\n        // In this case we don't want to count the inner function assignments as escaped variables.\n        Node pparent = parent.getParent();\n        if (pparent != null && pparent.isCall() && parent != pparent.getFirstChild()) {\n          return;\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..11ab8526 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1983,7 +1983,6 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.put(n, new AstFunctionContents(n));\n       }\n     }\n-\n     @Override public void visit(NodeTraversal t, Node n, Node parent) {\n       if (t.inGlobalScope()) {\n         return;\n@@ -1993,7 +1992,13 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+      if (t.getScopeDepth() <= 2 && parent != null) {\n+        // Handle the case where a function invocation is an argument of another invocation.\n+        // In this case we don't want to count the inner function assignments as escaped variables.\n+        Node pparent = parent.getParent();\n+        if (pparent != null && pparent.isCall() && parent != pparent.getFirstChild()) {\n+          return;\n+        }\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "junit.framework.AssertionFailedError: expected a warning",
    "test_result": "FAIL"
}