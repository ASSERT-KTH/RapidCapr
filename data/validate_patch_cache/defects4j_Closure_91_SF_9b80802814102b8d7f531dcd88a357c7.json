{
    "patch": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (!super.shouldTraverse(t, n, parent)) {\n      return false;\n    }\n\n    if (n.isFunction()) {\n      // Don't traverse functions that are constructors or have the @this or @override annotation.\n      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n      if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse nested functions that are bound directly to properties, i.e.\n      // ```js\n      // function a() {\n      //   var obj = {b: function() {}};\n      //   var c = {d: obj.b.bind(obj)}\n      //   return c.d;\n      // }\n      // ```\n      // In the returned function, `this` will be bound to `obj` which is not an acceptable use of `this`.\n      // Non-arrow functions are represented by FUNCTION nodes while arrow functions are represented by \n      // ARROW FUNCTION nodes. This check will filter out only nested non-arrow functions.\n      if (n.getParent() != null && n.getParent().isFunction()) {\n        return false;\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.isAssign()) {\n        Node lhs = parent.getFirstChild();\n        if (NodeUtil.isGet(lhs)) {\n          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n            return false;\n          }\n          Node llhs = lhs.getFirstChild();\n          if (NodeUtil.isGet(llhs) && llhs.getLastChild().getString().equals(\"prototype\")) {\n              return false;\n          }\n        }\n      }\n\n      // Only traverse functions that could have a `this` instance, i.e.:\n      // function foo() {}                     // function declaration\n      // var foo = function() {}               // function expression\n      // obj.foo = function() {}                // function assignment\n      // obj.foo = obj2.foo2 || function() {}   // binary expression\n      // Some functions are nested within an array literal, in which case we need to look up one level to see\n      // if the parent is a qualifying structure.\n      Node grandparent = n.getAncestor(2);\n      if (!NodeUtil.isFunctionGrandparentValid(grandparent)) {\n        return false;\n      }\n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..04a06e51 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -79,12 +79,14 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (!super.shouldTraverse(t, n, parent)) {\n+      return false;\n+    }\n \n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (n.isFunction()) {\n+      // Don't traverse functions that are constructors or have the @this or @override annotation.\n+      JSDocInfo jsDoc = NodeUtil.getBestJSDocInfo(n);\n       if (jsDoc != null &&\n           (jsDoc.isConstructor() ||\n            jsDoc.isInterface() ||\n@@ -93,53 +95,46 @@ final class CheckGlobalThis implements Callback {\n         return false;\n       }\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {}; // or\n-      // var a = {x: function() {}};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN ||\n-\n-            // object literal keys\n-            pType == Token.STRING ||\n-            pType == Token.NUMBER)) {\n+      // Don't traverse nested functions that are bound directly to properties, i.e.\n+      // ```js\n+      // function a() {\n+      //   var obj = {b: function() {}};\n+      //   var c = {d: obj.b.bind(obj)}\n+      //   return c.d;\n+      // }\n+      // ```\n+      // In the returned function, `this` will be bound to `obj` which is not an acceptable use of `this`.\n+      // Non-arrow functions are represented by FUNCTION nodes while arrow functions are represented by \n+      // ARROW FUNCTION nodes. This check will filter out only nested non-arrow functions.\n+      if (n.getParent() != null && n.getParent().isFunction()) {\n         return false;\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n-    }\n-\n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-\n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n-        }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n+      if (parent != null && parent.isAssign()) {\n+        Node lhs = parent.getFirstChild();\n         if (NodeUtil.isGet(lhs)) {\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n+          if (lhs.getLastChild().getString().equals(\"prototype\")) {\n             return false;\n           }\n           Node llhs = lhs.getFirstChild();\n-          if (llhs.getType() == Token.GETPROP &&\n-              llhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+          if (NodeUtil.isGet(llhs) && llhs.getLastChild().getString().equals(\"prototype\")) {\n+              return false;\n           }\n         }\n       }\n+\n+      // Only traverse functions that could have a `this` instance, i.e.:\n+      // function foo() {}                     // function declaration\n+      // var foo = function() {}               // function expression\n+      // obj.foo = function() {}                // function assignment\n+      // obj.foo = obj2.foo2 || function() {}   // binary expression\n+      // Some functions are nested within an array literal, in which case we need to look up one level to see\n+      // if the parent is a qualifying structure.\n+      Node grandparent = n.getAncestor(2);\n+      if (!NodeUtil.isFunctionGrandparentValid(grandparent)) {\n+        return false;\n+      }\n     }\n \n     return true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}