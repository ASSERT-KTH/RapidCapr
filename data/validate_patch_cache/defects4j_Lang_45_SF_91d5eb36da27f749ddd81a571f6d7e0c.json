{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // initial parameter checks\n    if (str == null || str.isEmpty()) {\n        return str;\n    }\n\n    // if the lower value is greater than the length of the string,\n    // set to the length of the string\n    // if the upper value is -1 (i.e. no limit) or is greater\n    // than the length of the string, set to the length of the string\n    if (upper == -1 || upper > str.length()) {\n        upper = str.length();\n    }\n    // if upper is less than lower, raise it to lower\n    if (upper < lower) {\n        upper = lower;\n    }\n    // if lower value is greater than or equal to string length, return the full string\n    if(lower >= str.length()){\n        return str;\n    }\n\n    StringBuilder result = new StringBuilder();\n\n    String[] tokens = str.split(\" \");\n    int curr = 0;\n    for (String token : tokens) {\n        if (curr + token.length() + 1 > upper) {\n            break;\n        }\n        if (curr + token.length() > lower) {\n            if (result.length() > 0) {\n                result.append(\" \");\n            }\n            result.append(token);\n        }\n        curr += token.length() + 1;\n    }\n    if (result.length() < upper) {\n        result.append(StringUtils.defaultString(appendToEnd));\n    }\n    return result.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..169b0046 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,48 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // initial parameter checks\n+    if (str == null || str.isEmpty()) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    // if the lower value is greater than the length of the string,\n+    // set to the length of the string\n+    // if the upper value is -1 (i.e. no limit) or is greater\n+    // than the length of the string, set to the length of the string\n+    if (upper == -1 || upper > str.length()) {\n+        upper = str.length();\n+    }\n+    // if upper is less than lower, raise it to lower\n+    if (upper < lower) {\n+        upper = lower;\n+    }\n+    // if lower value is greater than or equal to string length, return the full string\n+    if(lower >= str.length()){\n+        return str;\n+    }\n+\n+    StringBuilder result = new StringBuilder();\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n+    String[] tokens = str.split(\" \");\n+    int curr = 0;\n+    for (String token : tokens) {\n+        if (curr + token.length() + 1 > upper) {\n+            break;\n+        }\n+        if (curr + token.length() > lower) {\n+            if (result.length() > 0) {\n+                result.append(\" \");\n             }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n+            result.append(token);\n         }\n-        return result.toString();\n+        curr += token.length() + 1;\n+    }\n+    if (result.length() < upper) {\n+        result.append(StringUtils.defaultString(appendToEnd));\n     }\n+    return result.toString();\n+}\n \n }",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}