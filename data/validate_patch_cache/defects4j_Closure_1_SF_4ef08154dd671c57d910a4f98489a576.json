{
    "patch": "private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    Node function = fnScope.getRootNode();\n    \n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n        // The parameters object literal setters can not be removed.\n        return;\n    }\n    \n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n        boolean hasRestArgs = false;\n        Node lastRefArg = argList.getFirstChild();\n        \n        for (Node arg : argList.children()) {\n            if (arg.isRest()) {\n                hasRestArgs = true;\n                lastRefArg = arg.getNext();\n                continue;\n            }\n            if (referenced.contains(fnScope.getVar(arg.getString()))) {\n                lastRefArg = arg;\n            } else {\n                argList.removeChild(arg);\n                compiler.reportCodeChange();\n                if (arg.getNext().isComma()) {\n                    arg.getNext().detach();\n                    compiler.reportCodeChange();\n                }\n            }\n        }\n        \n        Node n = lastRefArg;\n        while (n.getNext() != null) {\n            n = n.getNext();\n            argList.removeChild(n);\n            compiler.reportCodeChange();\n            if (n.isComma()) {\n                n.detach();\n                compiler.reportCodeChange();\n            }\n        }\n        \n        if (hasRestArgs) {\n            n = argList.getLastChild();\n            while (n != null && !n.isRest()) {\n                n = n.getPrevious();\n                argList.removeChild(n.getNext());\n                compiler.reportCodeChange();\n                if (n.isComma()) {\n                    n.detach();\n                    compiler.reportCodeChange();\n                }\n            }\n        }\n        \n        argList.setOptionalArity();\n    } else {\n        callSiteOptimizer.optimize(fnScope, referenced);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..25de6582 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,68 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n+private void removeUnreferencedFunctionArgs(Scope fnScope) {\n     Node function = fnScope.getRootNode();\n-\n+    \n     Preconditions.checkState(function.isFunction());\n     if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n+        // The parameters object literal setters can not be removed.\n+        return;\n     }\n-\n+    \n     Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n+    boolean modifyCallers = modifyCallSites && callSiteOptimizer.canModifyCallers(function);\n     if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n-        } else {\n-          break;\n+        boolean hasRestArgs = false;\n+        Node lastRefArg = argList.getFirstChild();\n+        \n+        for (Node arg : argList.children()) {\n+            if (arg.isRest()) {\n+                hasRestArgs = true;\n+                lastRefArg = arg.getNext();\n+                continue;\n+            }\n+            if (referenced.contains(fnScope.getVar(arg.getString()))) {\n+                lastRefArg = arg;\n+            } else {\n+                argList.removeChild(arg);\n+                compiler.reportCodeChange();\n+                if (arg.getNext().isComma()) {\n+                    arg.getNext().detach();\n+                    compiler.reportCodeChange();\n+                }\n+            }\n         }\n-      }\n+        \n+        Node n = lastRefArg;\n+        while (n.getNext() != null) {\n+            n = n.getNext();\n+            argList.removeChild(n);\n+            compiler.reportCodeChange();\n+            if (n.isComma()) {\n+                n.detach();\n+                compiler.reportCodeChange();\n+            }\n+        }\n+        \n+        if (hasRestArgs) {\n+            n = argList.getLastChild();\n+            while (n != null && !n.isRest()) {\n+                n = n.getPrevious();\n+                argList.removeChild(n.getNext());\n+                compiler.reportCodeChange();\n+                if (n.isComma()) {\n+                    n.detach();\n+                    compiler.reportCodeChange();\n+                }\n+            }\n+        }\n+        \n+        argList.setOptionalArity();\n     } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+        callSiteOptimizer.optimize(fnScope, referenced);\n     }\n-  }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}