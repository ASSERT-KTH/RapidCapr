{
    "patch": "  @Override\n  public JSType greatestSubtype(JSType other) {\n    if (this.isUnknownType() || other.isUnknownType()) {\n      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n    } else if (!this.isUnionType() && !other.isUnionType()) {\n      if (this.isSubtype(other)) {\n        return this;\n      } else if (other.isSubtype(this)) {\n        return other;\n      } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    } else if (this.isUnionType() && !other.isUnionType()) {\n      return other.greatestSubtype(this);\n    } else {\n      UnionTypeBuilder builder = new UnionTypeBuilder(getRegistry());\n      for (JSType thisAlternate : this.getAlternates()) {\n        JSType greatestSubtype = thisAlternate.greatestSubtype(other);\n        if (!greatestSubtype.isBottom()) {\n          builder.addAlternate(greatestSubtype);\n        }\n      }\n      JSType result = builder.build();\n      if (result != null) {\n        return result;\n      } else if (this.isObject() && other.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n      } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..efb98ae2 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,38 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n   @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n+  public JSType greatestSubtype(JSType other) {\n+    if (this.isUnknownType() || other.isUnknownType()) {\n+      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    } else if (!this.isUnionType() && !other.isUnionType()) {\n+      if (this.isSubtype(other)) {\n+        return this;\n+      } else if (other.isSubtype(this)) {\n+        return other;\n+      } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+      }\n+    } else if (this.isUnionType() && !other.isUnionType()) {\n+      return other.greatestSubtype(this);\n     } else {\n-      return false;\n+      UnionTypeBuilder builder = new UnionTypeBuilder(getRegistry());\n+      for (JSType thisAlternate : this.getAlternates()) {\n+        JSType greatestSubtype = thisAlternate.greatestSubtype(other);\n+        if (!greatestSubtype.isBottom()) {\n+          builder.addAlternate(greatestSubtype);\n+        }\n+      }\n+      JSType result = builder.build();\n+      if (result != null) {\n+        return result;\n+      } else if (this.isObject() && other.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+      } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+      }\n     }\n   }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n-  public boolean isObject() {\n-    for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n     }\n     return true;\n   }",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}