{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.TypeI;\nimport com.google.javascript.rhino.jstype.JSType;\nimport com.google.javascript.rhino.jstype.JSTypeNative;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.SimpleType;\nimport com.google.javascript.rhino.jstype.TemplateType;\n\n...\n\n  protected JSType caseTopType(JSType topType) {\n    if (topType.isTemplateType()) {\n      TemplateType template = topType.toMaybeTemplateType();\n      return template.getReferenceName().equals(\"Iterable\")\n          ? getTypeRegistry().getNativeIteratorType(null)\n          : template;\n    }\n    if (topType.isSimpleType()) {\n      SimpleType simpleType = topType.toMaybeSimpleType();\n      TypeI typeI = simpleType.getTypeI();\n      if (typeI != null) {\n        switch (typeI.getTag()) {\n          case OBJECT:\n            return getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n          case NUMBER:\n            return getTypeRegistry().getNativeNumberType();\n          case STRING:\n            return getTypeRegistry().getNativeStringType();\n          case BOOLEAN:\n            return getTypeRegistry().getNativeBooleanType();\n          case BIGINT:\n            return getTypeRegistry().getNativeBigIntType();\n          default:\n            break;\n        }\n      }\n      if (simpleType.isUnknownType()\n          || simpleType.isAllType()\n          || simpleType.isNoType()\n          || simpleType.isVoidType()) {\n        return simpleType;\n      }\n      if (simpleType.isUnionType()) {\n        JSType nativeTypeFromPred = null;\n        for (JSType alt : simpleType.getUnionMembers()) {\n          if (alt.isNonNullType()) {\n            continue;\n          }\n          TypeI altType = alt.toMaybeSimpleType().getTypeI();\n          if (altType == null || altType.getTag() != TypeI.Tag.TOP) {\n            continue;\n          }\n          if (altType == JSTypeNative.NULL_TYPE) {\n            nativeTypeFromPred = getTypeRegistry().getNativeObjectType(JSTypeNative.NULL_TYPE);\n            break;\n          } else if (altType == JSTypeNative.VOID_TYPE) {\n            nativeTypeFromPred = getTypeRegistry().getNativeVoidType();\n            break;\n          }\n        }\n        if (nativeTypeFromPred != null) {\n          return mergeUnion(\n              getTypeRegistry().getNativeNoType(), nativeTypeFromPred, simpleType);\n        } else {\n          return simpleType;\n        }\n      } else if (simpleType.isEnumType()\n          || simpleType.isNoObjectType()\n          || simpleType.isUnknownType()) {\n        return simpleType;\n      }\n      List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n          return getTypeRegistry().getNativeErrorType();\n        }\n      }\n      return simpleType;\n    }\n    return topType;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..723edb4a 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -51,7 +51,88 @@ public class ClosureReverseAbstractInterpreter\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n         protected JSType caseTopType(JSType topType) {\n-          return topType;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.TypeI;\n+import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.SimpleType;\n+import com.google.javascript.rhino.jstype.TemplateType;\n+\n+...\n+\n+  protected JSType caseTopType(JSType topType) {\n+    if (topType.isTemplateType()) {\n+      TemplateType template = topType.toMaybeTemplateType();\n+      return template.getReferenceName().equals(\"Iterable\")\n+          ? getTypeRegistry().getNativeIteratorType(null)\n+          : template;\n+    }\n+    if (topType.isSimpleType()) {\n+      SimpleType simpleType = topType.toMaybeSimpleType();\n+      TypeI typeI = simpleType.getTypeI();\n+      if (typeI != null) {\n+        switch (typeI.getTag()) {\n+          case OBJECT:\n+            return getTypeRegistry().getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+          case NUMBER:\n+            return getTypeRegistry().getNativeNumberType();\n+          case STRING:\n+            return getTypeRegistry().getNativeStringType();\n+          case BOOLEAN:\n+            return getTypeRegistry().getNativeBooleanType();\n+          case BIGINT:\n+            return getTypeRegistry().getNativeBigIntType();\n+          default:\n+            break;\n+        }\n+      }\n+      if (simpleType.isUnknownType()\n+          || simpleType.isAllType()\n+          || simpleType.isNoType()\n+          || simpleType.isVoidType()) {\n+        return simpleType;\n+      }\n+      if (simpleType.isUnionType()) {\n+        JSType nativeTypeFromPred = null;\n+        for (JSType alt : simpleType.getUnionMembers()) {\n+          if (alt.isNonNullType()) {\n+            continue;\n+          }\n+          TypeI altType = alt.toMaybeSimpleType().getTypeI();\n+          if (altType == null || altType.getTag() != TypeI.Tag.TOP) {\n+            continue;\n+          }\n+          if (altType == JSTypeNative.NULL_TYPE) {\n+            nativeTypeFromPred = getTypeRegistry().getNativeObjectType(JSTypeNative.NULL_TYPE);\n+            break;\n+          } else if (altType == JSTypeNative.VOID_TYPE) {\n+            nativeTypeFromPred = getTypeRegistry().getNativeVoidType();\n+            break;\n+          }\n+        }\n+        if (nativeTypeFromPred != null) {\n+          return mergeUnion(\n+              getTypeRegistry().getNativeNoType(), nativeTypeFromPred, simpleType);\n+        } else {\n+          return simpleType;\n+        }\n+      } else if (simpleType.isEnumType()\n+          || simpleType.isNoObjectType()\n+          || simpleType.isUnknownType()) {\n+        return simpleType;\n+      }\n+      List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+      for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+          return getTypeRegistry().getNativeErrorType();\n+        }\n+      }\n+      return simpleType;\n+    }\n+    return topType;\n+  }\n         }\n \n         @Override",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}