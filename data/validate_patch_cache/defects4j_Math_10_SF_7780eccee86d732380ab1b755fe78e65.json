{
    "patch": "    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double pi = Math.PI;\n            if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0)) {\n                pi = -pi;\n            }\n            result[resultOffset] = (tmp2[0] <= 0 ? -pi : pi) - 2 * tmp2[0];\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if (Double.isNaN(result[resultOffset])) {\n            if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n                result[resultOffset] = Double.NaN;\n            } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n\n                if (x[xOffset] >= 0) {\n                    result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI : -FastMath.PI);\n                } else {\n                    result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI : -FastMath.PI);\n                    if (Double.doubleToLongBits(result[resultOffset]) == Double.doubleToLongBits(-0.0)) {\n                        result[resultOffset] = 0.0;\n                    }\n                }\n\n            } else if (Double.isInfinite(y[yOffset])) {\n                result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI / 2 : -FastMath.PI / 2);\n            } else if (Double.isInfinite(x[xOffset])) {\n                result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..c09db5310 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1407,8 +1407,11 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+            double pi = Math.PI;\n+            if (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(-0.0)) {\n+                pi = -pi;\n+            }\n+            result[resultOffset] = (tmp2[0] <= 0 ? -pi : pi) - 2 * tmp2[0];\n             for (int i = 1; i < tmp2.length; ++i) {\n                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }\n@@ -1416,7 +1419,26 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if (Double.isNaN(result[resultOffset])) {\n+            if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+                result[resultOffset] = Double.NaN;\n+            } else if (Double.isInfinite(y[yOffset]) && Double.isInfinite(x[xOffset])) {\n+\n+                if (x[xOffset] >= 0) {\n+                    result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI : -FastMath.PI);\n+                } else {\n+                    result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI : -FastMath.PI);\n+                    if (Double.doubleToLongBits(result[resultOffset]) == Double.doubleToLongBits(-0.0)) {\n+                        result[resultOffset] = 0.0;\n+                    }\n+                }\n \n+            } else if (Double.isInfinite(y[yOffset])) {\n+                result[resultOffset] = (y[yOffset] >= 0 ? FastMath.PI / 2 : -FastMath.PI / 2);\n+            } else if (Double.isInfinite(x[xOffset])) {\n+                result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n+            }\n+        }\n     }\n \n     /** Compute hyperbolic cosine of a derivative structure.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}