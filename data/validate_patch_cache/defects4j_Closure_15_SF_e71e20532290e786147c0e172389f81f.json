{
    "patch": "public boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without an return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // passes one of the dependent variable to a non-side-effect free\n  // function.\n  if (n.isCall()) {\n    for (Node arg = n.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n      if (arg.getBooleanProp(Node.IS_VAR_ARGS)) {\n        return true;\n      }\n      if (arg.getBooleanProp(Node.IS_COMPILER_GENERATED)) {\n        continue;\n      }\n\n      if (arg.isName()) {\n        String argName = arg.getQualifiedName();\n        if (dependentVars.contains(argName)) {\n          Var calleeVar = null;\n          Node callee = n.getFirstChild();\n          if (callee.isQualifiedName()) {\n            calleeVar = getScope().getVar(callee.getQualifiedName());\n          }\n          if (calleeVar != null && calleeVar.isFunction()) {\n            if (calleeVar.getNode().isScript()) {\n              return true;\n            } else if (NodeUtil.functionCallHasSideEffects(n)\n                && ES6_EXTENSION_SET.contains(\n                    calleeVar.getInputId())) {\n              return true;\n            } else if (containsSensitiveFunctionCall(calleeVar.getNode(), dependentVars)) { // <-- updated method call\n              return true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..42b01112 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,60 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n-\n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n-        }\n+public boolean apply(Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without an return statement)\n+  if (n == null) {\n+    return false;\n+  }\n \n+  // TODO(user): We only care about calls to functions that\n+  // passes one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (n.isCall()) {\n+    for (Node arg = n.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {\n+      if (arg.getBooleanProp(Node.IS_VAR_ARGS)) {\n+        return true;\n+      }\n+      if (arg.getBooleanProp(Node.IS_COMPILER_GENERATED)) {\n+        continue;\n+      }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n+      if (arg.isName()) {\n+        String argName = arg.getQualifiedName();\n+        if (dependentVars.contains(argName)) {\n+          Var calleeVar = null;\n+          Node callee = n.getFirstChild();\n+          if (callee.isQualifiedName()) {\n+            calleeVar = getScope().getVar(callee.getQualifiedName());\n+          }\n+          if (calleeVar != null && calleeVar.isFunction()) {\n+            if (calleeVar.getNode().isScript()) {\n+              return true;\n+            } else if (NodeUtil.functionCallHasSideEffects(n)\n+                && ES6_EXTENSION_SET.contains(\n+                    calleeVar.getInputId())) {\n+              return true;\n+            } else if (containsSensitiveFunctionCall(calleeVar.getNode(), dependentVars)) { // <-- updated method call\n+              return true;\n+            }\n           }\n         }\n-        return false;\n       }\n+    }\n+  }\n+\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}