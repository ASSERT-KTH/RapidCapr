{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n.getChildNodes(), MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n  }\n  \n  private static boolean allResultsMatch(List<? extends Node> nodes, Predicate<Node> pred) {\n    for (Node n : nodes) {\n      if (!pred.apply(n)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..56fd6213 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,14 +1411,23 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+      return allResultsMatch(n.getChildNodes(), MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n   }\n+  \n+  private static boolean allResultsMatch(List<? extends Node> nodes, Predicate<Node> pred) {\n+    for (Node n : nodes) {\n+      if (!pred.apply(n)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+  \n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}