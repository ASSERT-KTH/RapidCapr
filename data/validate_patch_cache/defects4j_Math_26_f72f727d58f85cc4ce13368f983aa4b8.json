{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        double r0 = value;\n        long a0 = (long) FastMath.floor(r0);\n        if (a0 > Integer.MAX_VALUE) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n        Fraction f0 = new Fraction(a0, 1);\n\n        // check for (almost) integer arguments, which should not go to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = f0.getNumerator();\n            this.denominator = f0.getDenominator();\n            return;\n        }\n\n        Fraction f1 = new Fraction(1, 0);\n        Fraction f2 = new Fraction((long) FastMath.floor(r0), 1);\n        int n = 1;\n        while (true) {\n            n++;\n\n            double r1 = 1.0 / (r0 - FastMath.floor(r0));\n\n            long a1 = (long) FastMath.floor(r1);\n            Fraction f3 = f1.add(f2.multiply(a1));\n            if (f3.getDenominator() > maxDenominator) {\n                break;\n            }\n\n            f1 = f2;\n            f2 = f3;\n            r0 = r1;\n            if (FastMath.abs(r0) < epsilon) {\n                break;\n            }\n        }\n        this.numerator = (int) f2.getNumerator();\n        this.denominator = (int) f2.getDenominator();\n        if ((long) this.denominator * Integer.MAX_VALUE < (long) this.numerator) {\n            throw new FractionConversionException(value, this.numerator, this.denominator);\n        }\n        // reduce fraction to its lowest form\n        final int gcd = org.apache.commons.math3.util.ArithmeticUtils.gcd(this.numerator, this.denominator);\n        this.numerator = this.numerator / gcd;\n        this.denominator = this.denominator / gcd;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..2662e0bad 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,69 +172,53 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n     {\n-        long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n+        long a0 = (long) FastMath.floor(r0);\n+        if (a0 > Integer.MAX_VALUE) {\n             throw new FractionConversionException(value, a0, 1l);\n         }\n+        Fraction f0 = new Fraction(a0, 1);\n \n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n+        // check for (almost) integer arguments, which should not go to iterations.\n         if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n+            this.numerator = f0.getNumerator();\n+            this.denominator = f0.getDenominator();\n             return;\n         }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n+        Fraction f1 = new Fraction(1, 0);\n+        Fraction f2 = new Fraction((long) FastMath.floor(r0), 1);\n+        int n = 1;\n+        while (true) {\n+            n++;\n+\n+            double r1 = 1.0 / (r0 - FastMath.floor(r0));\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            long a1 = (long) FastMath.floor(r1);\n+            Fraction f3 = f1.add(f2.multiply(a1));\n+            if (f3.getDenominator() > maxDenominator) {\n+                break;\n             }\n-        } while (!stop);\n \n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n+            f1 = f2;\n+            f2 = f3;\n+            r0 = r1;\n+            if (FastMath.abs(r0) < epsilon) {\n+                break;\n+            }\n         }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+        this.numerator = (int) f2.getNumerator();\n+        this.denominator = (int) f2.getDenominator();\n+        if ((long) this.denominator * Integer.MAX_VALUE < (long) this.numerator) {\n+            throw new FractionConversionException(value, this.numerator, this.denominator);\n         }\n-\n+        // reduce fraction to its lowest form\n+        final int gcd = org.apache.commons.math3.util.ArithmeticUtils.gcd(this.numerator, this.denominator);\n+        this.numerator = this.numerator / gcd;\n+        this.denominator = this.denominator / gcd;\n     }\n \n     /**",
    "result_reason": "error: no suitable method found for multiply(long)",
    "test_result": "ERROR"
}