{
    "patch": "public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n\n  if (Double.isNaN(beta)) {\n      // if beta is NaN due negative input and an overflow on a square root\n      // we fall back to a safe computation.\n      double n2V1   = v1v1;\n      double n2V2   = v2v2;\n      double n2U2   = u2u2;\n      double n2U1   = u1u1;\n      double coef1  = n2U1*n2U2;\n      double coef2  = n2V1*n2U2 - n2U1*n2V2;\n      double coef3  = -n2V1*n2U2;\n      beta = solveQuad(coef1, coef2, coef3);\n  }\n\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n  double c       = k.dotProduct(u3);\n\n  if (c == 0) {\n    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n    // we try other vectors\n    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n    Vector3D v3Su3 = v3.subtract(u3);\n    k = v1Su1.crossProduct(v3Su3);\n    Vector3D u2Prime = u1.crossProduct(u3);\n    c = k.dotProduct(u2Prime);\n\n    if (c == 0) {\n      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n      k = v2Su2.crossProduct(v3Su3);;\n      c = k.dotProduct(u2.crossProduct(u3));;\n\n      if (c == 0) {\n        // the (q1, q2, q3) vector is aligned with everything\n        // this is really the identity rotation\n        q0 = 1.0;\n        q1 = 0.0;\n        q2 = 0.0;\n        q3 = 0.0;\n        return;\n      }\n\n      // we will have to use u2 and v2 to compute the scalar part\n      uRef = u2;\n      vRef = v2;\n\n    }\n\n  }\n\n  // computation of the scalar factor using uRef and vRef\n  double ua = uRef.getNorm();\n  double ub = vRef.getNorm();\n  double dot = uRef.dotProduct(vRef);\n  double normProduct = ua * ub;\n  double realPart = dot / normProduct;\n  Vector3D w = uRef.crossProduct(vRef);\n  double imagPartNorm = w.getNorm();\n  if (imagPartNorm == 0) {\n    if (realPart < 0.0) {\n      // just flip the sign to have a positive real part\n      realPart = -realPart;\n    }\n    q0 = realPart;\n    q1 = 0.0;\n    q2 = 0.0;\n    q3 = 0.0;\n  } else {\n    double imagPart = SafetyUtils.normalize(w, imagPartNorm);\n    q0 = realPart;\n    q1 = w.getX() * imagPart;\n    q2 = w.getY() * imagPart;\n    q3 = w.getZ() * imagPart;\n  }\n\n}\n\nprivate double solveQuad(double a, double b, double c) {\n    // Find the right order of coefficients to avoid overflows.\n    double absB = FastMath.abs(b);\n    double absA = FastMath.abs(a);\n    double absC = FastMath.abs(c);\n    double max = absA;\n    if (absB > max) {\n        max = absB;\n    } \n    if (absC > max) {\n        max = absC;\n    } \n    double scaledA = a / max;\n    double scaledB = b / max;\n    double scaledC = c / max;\n    double roots[] = new double[2];\n    int nbRoots = SafetyUtils.computeQuadRoots(scaledA, scaledB, scaledC, roots);\n    if (nbRoots == 0) {\n        return Double.NaN;\n    } else if (nbRoots == 2) {\n        if (FastMath.abs(roots[0]) < FastMath.abs(roots[1])) {\n            return roots[0];\n        } else {\n            return roots[1];\n        }\n    } else if (FastMath.abs(roots[0]) > 1) {\n        return Double.NaN;\n    } else {\n        return roots[0];\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..81adf9a83 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,7 +310,7 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n \n   // norms computation\n   double u1u1 = u1.getNormSq();\n@@ -330,6 +330,20 @@ public class Rotation implements Serializable {\n   double coeffU = u1u2 / u1u1;\n   double coeffV = v1v2 / u1u1;\n   double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n+\n+  if (Double.isNaN(beta)) {\n+      // if beta is NaN due negative input and an overflow on a square root\n+      // we fall back to a safe computation.\n+      double n2V1   = v1v1;\n+      double n2V2   = v2v2;\n+      double n2U2   = u2u2;\n+      double n2U1   = u1u1;\n+      double coef1  = n2U1*n2U2;\n+      double coef2  = n2V1*n2U2 - n2U1*n2V2;\n+      double coef3  = -n2V1*n2U2;\n+      beta = solveQuad(coef1, coef2, coef3);\n+  }\n+\n   double alpha  = coeffU - beta * coeffV;\n   v2 = new Vector3D(alpha, v1, beta, v2);\n \n@@ -341,6 +355,7 @@ public class Rotation implements Serializable {\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n   double c       = k.dotProduct(u3);\n+\n   if (c == 0) {\n     // the (q1, q2, q3) vector is close to the (u1, u2) plane\n     // we try other vectors\n@@ -374,6 +389,65 @@ public class Rotation implements Serializable {\n \n   }\n \n+  // computation of the scalar factor using uRef and vRef\n+  double ua = uRef.getNorm();\n+  double ub = vRef.getNorm();\n+  double dot = uRef.dotProduct(vRef);\n+  double normProduct = ua * ub;\n+  double realPart = dot / normProduct;\n+  Vector3D w = uRef.crossProduct(vRef);\n+  double imagPartNorm = w.getNorm();\n+  if (imagPartNorm == 0) {\n+    if (realPart < 0.0) {\n+      // just flip the sign to have a positive real part\n+      realPart = -realPart;\n+    }\n+    q0 = realPart;\n+    q1 = 0.0;\n+    q2 = 0.0;\n+    q3 = 0.0;\n+  } else {\n+    double imagPart = SafetyUtils.normalize(w, imagPartNorm);\n+    q0 = realPart;\n+    q1 = w.getX() * imagPart;\n+    q2 = w.getY() * imagPart;\n+    q3 = w.getZ() * imagPart;\n+  }\n+\n+}\n+\n+private double solveQuad(double a, double b, double c) {\n+    // Find the right order of coefficients to avoid overflows.\n+    double absB = FastMath.abs(b);\n+    double absA = FastMath.abs(a);\n+    double absC = FastMath.abs(c);\n+    double max = absA;\n+    if (absB > max) {\n+        max = absB;\n+    } \n+    if (absC > max) {\n+        max = absC;\n+    } \n+    double scaledA = a / max;\n+    double scaledB = b / max;\n+    double scaledC = c / max;\n+    double roots[] = new double[2];\n+    int nbRoots = SafetyUtils.computeQuadRoots(scaledA, scaledB, scaledC, roots);\n+    if (nbRoots == 0) {\n+        return Double.NaN;\n+    } else if (nbRoots == 2) {\n+        if (FastMath.abs(roots[0]) < FastMath.abs(roots[1])) {\n+            return roots[0];\n+        } else {\n+            return roots[1];\n+        }\n+    } else if (FastMath.abs(roots[0]) > 1) {\n+        return Double.NaN;\n+    } else {\n+        return roots[0];\n+    }\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}