{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n        // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n        }\n        // Fix calculation for leap days\n        int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n        int yearValue = partial.get(DateTimeFieldType.year());\n        int monthValue = partial.get(DateTimeFieldType.monthOfYear());\n        int dayValue = partial.get(DateTimeFieldType.dayOfMonth());\n        if (monthIndex >= 0 && DateTimeUtils.isContiguous(partial.without(DateTimeFieldType.dayOfMonth()))) {\n            int newMonthValue = iChronology.monthOfYear().add(monthValue, valueToAdd);\n            int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n            dayValue = Math.min(dayValue, maxDayInMonth);\n            int newMonthDiff = newMonthValue - monthValue;\n            monthValue = newMonthValue;\n            valueToAdd = FieldUtils.safeSubtract(valueToAdd, newMonthDiff);\n        }\n        if (yearValue == 0 && monthValue <= 0 && monthValue >= -11) {\n            yearValue--;\n        }\n        if (yearValue == 0 && monthValue == 0 && dayValue <= 0) {\n            yearValue--;\n            if (iChronology instanceof GregorianChronology) {\n                dayValue = 365;\n            } else {\n                dayValue = 366;\n            }\n        }\n        instant = iChronology.getDateTimeMillis(yearValue, monthValue, dayValue, 0);\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..a32c361f 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,49 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+        // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        }\n+        // Fix calculation for leap days\n+        int monthIndex = partial.indexOf(DateTimeFieldType.monthOfYear());\n+        int yearValue = partial.get(DateTimeFieldType.year());\n+        int monthValue = partial.get(DateTimeFieldType.monthOfYear());\n+        int dayValue = partial.get(DateTimeFieldType.dayOfMonth());\n+        if (monthIndex >= 0 && DateTimeUtils.isContiguous(partial.without(DateTimeFieldType.dayOfMonth()))) {\n+            int newMonthValue = iChronology.monthOfYear().add(monthValue, valueToAdd);\n+            int maxDayInMonth = iChronology.dayOfMonth().getMaximumValue(yearValue, newMonthValue);\n+            dayValue = Math.min(dayValue, maxDayInMonth);\n+            int newMonthDiff = newMonthValue - monthValue;\n+            monthValue = newMonthValue;\n+            valueToAdd = FieldUtils.safeSubtract(valueToAdd, newMonthDiff);\n+        }\n+        if (yearValue == 0 && monthValue <= 0 && monthValue >= -11) {\n+            yearValue--;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        if (yearValue == 0 && monthValue == 0 && dayValue <= 0) {\n+            yearValue--;\n+            if (iChronology instanceof GregorianChronology) {\n+                dayValue = 365;\n+            } else {\n+                dayValue = 366;\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        instant = iChronology.getDateTimeMillis(yearValue, monthValue, dayValue, 0);\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}