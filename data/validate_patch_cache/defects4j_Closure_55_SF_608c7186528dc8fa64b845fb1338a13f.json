{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  if (n.isCall() && n.getFirstChild().isFunction()) {\n    return true;\n  }\n  // Check if the parent node is a VAR or ASSIGN and the current node is a function name\n  Node parent = n.getParent();\n  if ((parent.isVar() || parent.isAssign()) && n.isName() && n.getPrevious() == null\n      && n.getNext() == null) {\n    Node value = parent.getLastChild();\n    return value != null && NodeUtil.isFunctionExpression(value);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..04b4d79d 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,22 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    return true;\n+  }\n+  if (n.isCall() && n.getFirstChild().isFunction()) {\n+    return true;\n   }\n+  // Check if the parent node is a VAR or ASSIGN and the current node is a function name\n+  Node parent = n.getParent();\n+  if ((parent.isVar() || parent.isAssign()) && n.isName() && n.getPrevious() == null\n+      && n.getNext() == null) {\n+    Node value = parent.getLastChild();\n+    return value != null && NodeUtil.isFunctionExpression(value);\n+  }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}