{
    "patch": "public double integrate(final FirstOrderDifferentialEquations equations,\n                          final double t0, final double[] y0,\n                          final double t, final double[] y)\n        throws DerivativeException, IntegratorException {\n    sanityChecks(equations, t0, y0, t, y);\n    setEquations(equations);\n    resetEvaluations();\n    final boolean forward = t > t0;\n\n    final int stages = this.c.length + 1;\n    if (y != y0) {\n        System.arraycopy(y0, 0, y, 0, y0.length);\n    }\n    final double[][] yDotK = new double[stages][y0.length];\n    final double[] yTmp = new double[y0.length];\n\n    AbstractStepInterpolator interpolator = null;\n    if (this.isIntegratorWithInterpolator()) {\n        final RungeKuttaStepInterpolator rki = new RungeKuttaStepInterpolator();\n        rki.reinitialize(this, yTmp, yDotK, forward);\n        interpolator = rki;\n    } else {\n        interpolator = new DummyStepInterpolator(yTmp, forward);\n    }\n    interpolator.storeTime(t0);\n\n    double       tLast = Double.NaN;\n    boolean      firstStep = true;\n    boolean      lastStep  = false;\n    boolean      isPrevReject = false;\n    boolean      isLastStep   = false;\n    boolean      doInterpolate = requiresDenseOutput() || this.hasEventHandlers();\n    Set<String> affectIndexSet      = new HashSet<String>();\n    yDot[0] = new double[y0.length];\n    computeDerivatives(t0, y, yDot[0]);\n    final double[] scale = new double[y0.length];\n    if (vecAbsoluteTolerance == null) {\n        Arrays.fill(scale, this.scalAbsoluteTolerance);\n    } else {\n        for (int i = 0; i < scale.length; i++) {\n            scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n        }\n    }\n    double      maxError = Double.POSITIVE_INFINITY;\n    final double[] minStep = new double[scale.length];\n    final double[] maxStep = new double[scale.length];\n    for (int i = 0; i < scale.length; ++i) {\n        final double min = vecAbsoluteTolerance == null ? this.scalAbsoluteTolerance : vecAbsoluteTolerance[i];\n        minStep[i] = FastMath.abs(y[i]) * min / scale[i];\n        maxStep[i] = FastMath.abs(this.initialStep) / this.maxStepIncrementFactor;\n        if (maxStep[i] < minStep[i]) {\n            maxStep[i] = 2 * minStep[i];\n        } else {\n            maxStep[i] = FastMath.max(maxStep[i], 2 * minStep[i]);\n        }\n    }\n    double hNew = this.initialStep;\n    interpolator.reinitialize(this, y, yDot[0], forward, equations.getPrimaryMapper());\n    interpolator.storeTime(t0);\n\n    while (!lastStep) {\n        double error = Double.NaN;\n        interpolator.shift();\n        boolean rejectStep = false;\n\n        while (true) { // Loop until step accepted\n            final double[] yIn = Arrays.copyOf(y, y.length);\n            if (firstStep || isPrevReject || !this.isFSAL()) {\n                computeDerivatives(t, y, yDotK[0]);\n            }\n\n            double hStep = hNew;\n            if (!firstStep && !isPrevReject) {\n                final double ratio = FastMath.min(maxStep[0] / FastMath.abs(hNew), this.maxStepIncrementFactor);\n                hStep *= ratio;\n            }\n            hStep = FastMath.min(hStep, maxStep[0]);\n            final double nextT = t + hStep;\n            if (nextT <= t) {\n                throw new DerivativeException(LocalizedFormats.DRIVER_START_TIME, nextT, t);\n            }\n\n            for (int i = 0; i < y0.length; ++i) {\n                yTmp[i] = y[i] + hStep * a[0][i] * yDotK[0][i];\n            }\n            computeDerivatives(t + c[0] * hStep, yTmp, yDotK[1]);\n\n            for (int k = 1; k < stages; ++k) {\n                for (int i = 0; i < y0.length; ++i) {\n                    double sum = a[k][0] * yDotK[0][i];\n                    for (int l = 1; l < k; ++l) {\n                        sum += a[k][l] * yDotK[l][i];\n                    }\n                    yTmp[i] = y[i] + hStep * sum;\n                }\n                computeDerivatives(t + c[k] * hStep, yTmp, yDotK[k + 1]);\n            }\n\n            for (int i = 0; i < y0.length; ++i) {\n                double sum = b[0] * yDotK[0][i];\n                for (int l = 1; l < stages; ++l) {\n                    sum += b[l] * yDotK[l][i];\n                }\n                yTmp[i] = y[i] + hStep * sum;\n            }\n\n            error = computeError(yDotK, y, yTmp, hStep);\n            if (errorIsTooLarge(hStep, error)) {\n                rejectStep = true;\n                maxError = error;\n                if (firstStep) { // Previous try was the first try\n                    hNew = computeFirstStepSize(error);\n                    rejectStep = false;\n                    break;\n                } else {\n                    hNew = computeStepSize(error, hStep, affectIndexSet, scale, minStep, maxStep);\n                    rejectStep = true;\n                }\n            } else {\n                isPrevReject = false;\n                if (!firstStep && !isLastStep) {\n                    hNew = computeStepSize(error, hStep, affectIndexSet, scale, minStep, maxStep);\n                    if (!errorIsTooLarge(hNew, error)) {\n                        break;\n                    }\n                    rejectStep = true;\n                } else {\n                    //next step size control\n                    final double[] yTmpDot = new double[y.length];\n                    final double factor = computeStepGrowShrinkFactor(error);\n                    for (int i = 0; i < yTmp.length; i++) {\n                        final double nextAbsPredicted = FastMath.abs(yTmp[i] + (yTmp[i] - yIn[i]) * factor);\n                        final double eps = DB_EPS * FastMath.max(FastMath.abs(yTmp[i]), nextAbsPredicted);\n                        minStep[i] = FastMath.abs(yTmp[i]) - eps;\n                        maxStep[i] = FastMath.abs(yTmp[i]) + eps;\n                        if (vecAbsoluteTolerance != null) {\n                            minStep[i] /= vecAbsoluteTolerance[i];\n                            maxStep[i] /= vecAbsoluteTolerance[i];\n                        } else {\n                            minStep[i] /= scalAbsoluteTolerance;\n                            maxStep[i] /= scalAbsoluteTolerance;\n                        }\n                        minStep[i] = FastMath.max(minStep[i], FastMath.abs(hStep) * minReductionFactor);\n                        maxStep[i] = FastMath.min(maxStep[i], FastMath.abs(hStep) * maxGrowthFactor);\n                    }\n\n                    final double scaledH = hStep * factor;\n                    if (forward ? (t + scaledH >= t) : (t + scaledH <= t)) {\n                        // Accept the step since scaledH is not too small\n                        System.arraycopy(yTmp, 0, y, 0, y0.length);\n                        interpolator.storeTime(t + hStep);\n                        lastStep = forwarBackwardHandler.lastStep(t, y, t + hStep);\n                        if (lastStep) {\n                            tLast = t + hStep;\n                        }\n                        break;\n                    } else {\n                        rejectStep = true;\n                    }\n                }\n            }\n\n            if (rejectStep && !firstStep) {\n                isPrevReject = true;\n            }\n\n            if (hNew < this.minStep) {\n                if (!rejectStep) {\n                    throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, hNew, this.minStep, t, isLastStep);\n                } else {\n                    hNew = this.minStep;\n                }\n            }\n\n            if (rejectStep) {\n                if (firstStep) {\n                    hNew *= initialStepBoundFactor;\n                } else if (isLastStep) {\n                    hNew = FastMath.abs(t - tLast);\n                }\n                if (hNew < this.minStep) {\n                    throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, hNew, this.minStep, t, isLastStep);\n                }\n                if (error > 100) {\n                    hNew *= 0.01;\n                } else {\n                    final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n                    hNew *= factor;\n                }\n                final double nextT = t + hNew;\n                if (forward ? nextT > t : nextT < t) {\n                    hNew = t - tLast;\n                }\n            } else {\n                isPrevReject = false;\n                break;\n            }\n        }\n\n        if (doInterpolate) {\n            interpolator.storeTime(t + hNew);\n            final double[] predictedY = new double[y0.length];\n            for (int j = 0; j < predictedY.length; ++j) {\n                predictedY[j] = yTmp[j] + b[0] * hNew * yDotK[0][j];\n                for (int k = 1; k < stages; ++k) {\n                    predictedY[j] += b[k] * hNew * yDotK[k][j];\n                }\n            }\n            if (this.isLastStep()) {\n                stepStart = this.stepStart + hNew;\n            }\n            interpolator.storeTime(stepStart);\n            System.arraycopy(yTmp, 0, y, 0, y0.length);\n            interpolator.shift();\n            acceptStep(interpolator, y, yDotK[0], t + hNew);\n            interpolator.storeTime(t + hNew);\n            interpolator.shift();\n            final double[] newY = new double[y0.length];\n            System.arraycopy(y, 0, newY, 0, y0.length);\n            for (final StepHandler handler : stepHandlers) {\n                handler.handleStep(interpolator, isLastStep);\n            }\n            stepStart = isLastStep ? Double.NaN : t;\n            interpolator.storeTime(stepStart);\n            acceptCompleted = true;\n        } else {\n            System.arraycopy(yTmp, 0, y, 0, y0.length);\n        }\n\n        t = interpolator.getTime();\n        if (lastStep) {\n            isLastStep = true;\n        }\n        firstStep = false;\n    }\n\n    final double ret = this.stepStart;\n    resetInternalState();\n    return ret;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 6f3e88358..7d83cdb72 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -189,174 +189,246 @@ public abstract class EmbeddedRungeKuttaIntegrator\n \n   /** {@inheritDoc} */\n   @Override\n-  public double integrate(final FirstOrderDifferentialEquations equations,\n+public double integrate(final FirstOrderDifferentialEquations equations,\n                           final double t0, final double[] y0,\n                           final double t, final double[] y)\n-  throws DerivativeException, IntegratorException {\n-\n+        throws DerivativeException, IntegratorException {\n     sanityChecks(equations, t0, y0, t, y);\n     setEquations(equations);\n     resetEvaluations();\n     final boolean forward = t > t0;\n \n-    // create some internal working arrays\n-    final int stages = c.length + 1;\n+    final int stages = this.c.length + 1;\n     if (y != y0) {\n-      System.arraycopy(y0, 0, y, 0, y0.length);\n+        System.arraycopy(y0, 0, y, 0, y0.length);\n     }\n     final double[][] yDotK = new double[stages][y0.length];\n     final double[] yTmp = new double[y0.length];\n \n-    // set up an interpolator sharing the integrator arrays\n-    AbstractStepInterpolator interpolator;\n-    if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {\n-      final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();\n-      rki.reinitialize(this, yTmp, yDotK, forward);\n-      interpolator = rki;\n+    AbstractStepInterpolator interpolator = null;\n+    if (this.isIntegratorWithInterpolator()) {\n+        final RungeKuttaStepInterpolator rki = new RungeKuttaStepInterpolator();\n+        rki.reinitialize(this, yTmp, yDotK, forward);\n+        interpolator = rki;\n     } else {\n-      interpolator = new DummyStepInterpolator(yTmp, forward);\n+        interpolator = new DummyStepInterpolator(yTmp, forward);\n     }\n     interpolator.storeTime(t0);\n \n-    // set up integration control objects\n-    stepStart         = t0;\n-    double  hNew      = 0;\n-    boolean firstTime = true;\n-    for (StepHandler handler : stepHandlers) {\n-        handler.reset();\n+    double       tLast = Double.NaN;\n+    boolean      firstStep = true;\n+    boolean      lastStep  = false;\n+    boolean      isPrevReject = false;\n+    boolean      isLastStep   = false;\n+    boolean      doInterpolate = requiresDenseOutput() || this.hasEventHandlers();\n+    Set<String> affectIndexSet      = new HashSet<String>();\n+    yDot[0] = new double[y0.length];\n+    computeDerivatives(t0, y, yDot[0]);\n+    final double[] scale = new double[y0.length];\n+    if (vecAbsoluteTolerance == null) {\n+        Arrays.fill(scale, this.scalAbsoluteTolerance);\n+    } else {\n+        for (int i = 0; i < scale.length; i++) {\n+            scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * FastMath.abs(y[i]);\n+        }\n+    }\n+    double      maxError = Double.POSITIVE_INFINITY;\n+    final double[] minStep = new double[scale.length];\n+    final double[] maxStep = new double[scale.length];\n+    for (int i = 0; i < scale.length; ++i) {\n+        final double min = vecAbsoluteTolerance == null ? this.scalAbsoluteTolerance : vecAbsoluteTolerance[i];\n+        minStep[i] = FastMath.abs(y[i]) * min / scale[i];\n+        maxStep[i] = FastMath.abs(this.initialStep) / this.maxStepIncrementFactor;\n+        if (maxStep[i] < minStep[i]) {\n+            maxStep[i] = 2 * minStep[i];\n+        } else {\n+            maxStep[i] = FastMath.max(maxStep[i], 2 * minStep[i]);\n+        }\n     }\n-    CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);\n-    boolean lastStep = false;\n+    double hNew = this.initialStep;\n+    interpolator.reinitialize(this, y, yDot[0], forward, equations.getPrimaryMapper());\n+    interpolator.storeTime(t0);\n \n-    // main integration loop\n     while (!lastStep) {\n+        double error = Double.NaN;\n+        interpolator.shift();\n+        boolean rejectStep = false;\n+\n+        while (true) { // Loop until step accepted\n+            final double[] yIn = Arrays.copyOf(y, y.length);\n+            if (firstStep || isPrevReject || !this.isFSAL()) {\n+                computeDerivatives(t, y, yDotK[0]);\n+            }\n \n-      interpolator.shift();\n+            double hStep = hNew;\n+            if (!firstStep && !isPrevReject) {\n+                final double ratio = FastMath.min(maxStep[0] / FastMath.abs(hNew), this.maxStepIncrementFactor);\n+                hStep *= ratio;\n+            }\n+            hStep = FastMath.min(hStep, maxStep[0]);\n+            final double nextT = t + hStep;\n+            if (nextT <= t) {\n+                throw new DerivativeException(LocalizedFormats.DRIVER_START_TIME, nextT, t);\n+            }\n \n-      double error = 0;\n-      for (boolean loop = true; loop;) {\n+            for (int i = 0; i < y0.length; ++i) {\n+                yTmp[i] = y[i] + hStep * a[0][i] * yDotK[0][i];\n+            }\n+            computeDerivatives(t + c[0] * hStep, yTmp, yDotK[1]);\n+\n+            for (int k = 1; k < stages; ++k) {\n+                for (int i = 0; i < y0.length; ++i) {\n+                    double sum = a[k][0] * yDotK[0][i];\n+                    for (int l = 1; l < k; ++l) {\n+                        sum += a[k][l] * yDotK[l][i];\n+                    }\n+                    yTmp[i] = y[i] + hStep * sum;\n+                }\n+                computeDerivatives(t + c[k] * hStep, yTmp, yDotK[k + 1]);\n+            }\n \n-        if (firstTime || !fsal) {\n-          // first stage\n-          computeDerivatives(stepStart, y, yDotK[0]);\n-        }\n+            for (int i = 0; i < y0.length; ++i) {\n+                double sum = b[0] * yDotK[0][i];\n+                for (int l = 1; l < stages; ++l) {\n+                    sum += b[l] * yDotK[l][i];\n+                }\n+                yTmp[i] = y[i] + hStep * sum;\n+            }\n \n-        if (firstTime) {\n-          final double[] scale;\n-          if (vecAbsoluteTolerance == null) {\n-              scale = new double[y0.length];\n-              java.util.Arrays.fill(scale, scalAbsoluteTolerance);\n+            error = computeError(yDotK, y, yTmp, hStep);\n+            if (errorIsTooLarge(hStep, error)) {\n+                rejectStep = true;\n+                maxError = error;\n+                if (firstStep) { // Previous try was the first try\n+                    hNew = computeFirstStepSize(error);\n+                    rejectStep = false;\n+                    break;\n+                } else {\n+                    hNew = computeStepSize(error, hStep, affectIndexSet, scale, minStep, maxStep);\n+                    rejectStep = true;\n+                }\n             } else {\n-              scale = vecAbsoluteTolerance;\n+                isPrevReject = false;\n+                if (!firstStep && !isLastStep) {\n+                    hNew = computeStepSize(error, hStep, affectIndexSet, scale, minStep, maxStep);\n+                    if (!errorIsTooLarge(hNew, error)) {\n+                        break;\n+                    }\n+                    rejectStep = true;\n+                } else {\n+                    //next step size control\n+                    final double[] yTmpDot = new double[y.length];\n+                    final double factor = computeStepGrowShrinkFactor(error);\n+                    for (int i = 0; i < yTmp.length; i++) {\n+                        final double nextAbsPredicted = FastMath.abs(yTmp[i] + (yTmp[i] - yIn[i]) * factor);\n+                        final double eps = DB_EPS * FastMath.max(FastMath.abs(yTmp[i]), nextAbsPredicted);\n+                        minStep[i] = FastMath.abs(yTmp[i]) - eps;\n+                        maxStep[i] = FastMath.abs(yTmp[i]) + eps;\n+                        if (vecAbsoluteTolerance != null) {\n+                            minStep[i] /= vecAbsoluteTolerance[i];\n+                            maxStep[i] /= vecAbsoluteTolerance[i];\n+                        } else {\n+                            minStep[i] /= scalAbsoluteTolerance;\n+                            maxStep[i] /= scalAbsoluteTolerance;\n+                        }\n+                        minStep[i] = FastMath.max(minStep[i], FastMath.abs(hStep) * minReductionFactor);\n+                        maxStep[i] = FastMath.min(maxStep[i], FastMath.abs(hStep) * maxGrowthFactor);\n+                    }\n+\n+                    final double scaledH = hStep * factor;\n+                    if (forward ? (t + scaledH >= t) : (t + scaledH <= t)) {\n+                        // Accept the step since scaledH is not too small\n+                        System.arraycopy(yTmp, 0, y, 0, y0.length);\n+                        interpolator.storeTime(t + hStep);\n+                        lastStep = forwarBackwardHandler.lastStep(t, y, t + hStep);\n+                        if (lastStep) {\n+                            tLast = t + hStep;\n+                        }\n+                        break;\n+                    } else {\n+                        rejectStep = true;\n+                    }\n+                }\n             }\n-          hNew = initializeStep(equations, forward, getOrder(), scale,\n-                                stepStart, y, yDotK[0], yTmp, yDotK[1]);\n-          firstTime = false;\n-        }\n-\n-        stepSize = hNew;\n \n-        // next stages\n-        for (int k = 1; k < stages; ++k) {\n-\n-          for (int j = 0; j < y0.length; ++j) {\n-            double sum = a[k-1][0] * yDotK[0][j];\n-            for (int l = 1; l < k; ++l) {\n-              sum += a[k-1][l] * yDotK[l][j];\n+            if (rejectStep && !firstStep) {\n+                isPrevReject = true;\n             }\n-            yTmp[j] = y[j] + stepSize * sum;\n-          }\n-\n-          computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);\n \n-        }\n+            if (hNew < this.minStep) {\n+                if (!rejectStep) {\n+                    throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, hNew, this.minStep, t, isLastStep);\n+                } else {\n+                    hNew = this.minStep;\n+                }\n+            }\n \n-        // estimate the state at the end of the step\n-        for (int j = 0; j < y0.length; ++j) {\n-          double sum    = b[0] * yDotK[0][j];\n-          for (int l = 1; l < stages; ++l) {\n-            sum    += b[l] * yDotK[l][j];\n-          }\n-          yTmp[j] = y[j] + stepSize * sum;\n+            if (rejectStep) {\n+                if (firstStep) {\n+                    hNew *= initialStepBoundFactor;\n+                } else if (isLastStep) {\n+                    hNew = FastMath.abs(t - tLast);\n+                }\n+                if (hNew < this.minStep) {\n+                    throw new DerivativeException(LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION, hNew, this.minStep, t, isLastStep);\n+                }\n+                if (error > 100) {\n+                    hNew *= 0.01;\n+                } else {\n+                    final double factor = FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+                    hNew *= factor;\n+                }\n+                final double nextT = t + hNew;\n+                if (forward ? nextT > t : nextT < t) {\n+                    hNew = t - tLast;\n+                }\n+            } else {\n+                isPrevReject = false;\n+                break;\n+            }\n         }\n \n-        // estimate the error at the end of the step\n-        error = estimateError(yDotK, y, yTmp, stepSize);\n-        if (error <= 1.0) {\n-\n-          // discrete events handling\n-          interpolator.storeTime(stepStart + stepSize);\n-          if (manager.evaluateStep(interpolator)) {\n-              final double dt = manager.getEventTime() - stepStart;\n-              if (Math.abs(dt) <= Math.ulp(stepStart)) {\n-                  // rejecting the step would lead to a too small next step, we accept it\n-                  loop = false;\n-              } else {\n-                  // reject the step to match exactly the next switch time\n-                  hNew = dt;\n-              }\n-          } else {\n-            // accept the step\n-            loop = false;\n-          }\n-\n+        if (doInterpolate) {\n+            interpolator.storeTime(t + hNew);\n+            final double[] predictedY = new double[y0.length];\n+            for (int j = 0; j < predictedY.length; ++j) {\n+                predictedY[j] = yTmp[j] + b[0] * hNew * yDotK[0][j];\n+                for (int k = 1; k < stages; ++k) {\n+                    predictedY[j] += b[k] * hNew * yDotK[k][j];\n+                }\n+            }\n+            if (this.isLastStep()) {\n+                stepStart = this.stepStart + hNew;\n+            }\n+            interpolator.storeTime(stepStart);\n+            System.arraycopy(yTmp, 0, y, 0, y0.length);\n+            interpolator.shift();\n+            acceptStep(interpolator, y, yDotK[0], t + hNew);\n+            interpolator.storeTime(t + hNew);\n+            interpolator.shift();\n+            final double[] newY = new double[y0.length];\n+            System.arraycopy(y, 0, newY, 0, y0.length);\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.handleStep(interpolator, isLastStep);\n+            }\n+            stepStart = isLastStep ? Double.NaN : t;\n+            interpolator.storeTime(stepStart);\n+            acceptCompleted = true;\n         } else {\n-          // reject the step and attempt to reduce error by stepsize control\n-          final double factor =\n-              Math.min(maxGrowth,\n-                       Math.max(minReduction, safety * Math.pow(error, exp)));\n-          hNew = filterStep(stepSize * factor, forward, false);\n+            System.arraycopy(yTmp, 0, y, 0, y0.length);\n         }\n \n-      }\n-\n-      // the step has been accepted\n-      final double nextStep = stepStart + stepSize;\n-      System.arraycopy(yTmp, 0, y, 0, y0.length);\n-      manager.stepAccepted(nextStep, y);\n-      lastStep = manager.stop();\n-\n-      // provide the step data to the step handler\n-      interpolator.storeTime(nextStep);\n-      for (StepHandler handler : stepHandlers) {\n-          handler.handleStep(interpolator, lastStep);\n-      }\n-      stepStart = nextStep;\n-\n-      if (fsal) {\n-        // save the last evaluation for the next step\n-        System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);\n-      }\n-\n-      if (manager.reset(stepStart, y) && ! lastStep) {\n-        // some event handler has triggered changes that\n-        // invalidate the derivatives, we need to recompute them\n-        computeDerivatives(stepStart, y, yDotK[0]);\n-      }\n-\n-      if (! lastStep) {\n-        // in some rare cases we may get here with stepSize = 0, for example\n-        // when an event occurs at integration start, reducing the first step\n-        // to zero; we have to reset the step to some safe non zero value\n-          stepSize = filterStep(stepSize, forward, true);\n-\n-        // stepsize control for next step\n-        final double factor = Math.min(maxGrowth,\n-                                       Math.max(minReduction,\n-                                                safety * Math.pow(error, exp)));\n-        final double  scaledH    = stepSize * factor;\n-        final double  nextT      = stepStart + scaledH;\n-        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n-        hNew = filterStep(scaledH, forward, nextIsLast);\n-      }\n-\n+        t = interpolator.getTime();\n+        if (lastStep) {\n+            isLastStep = true;\n+        }\n+        firstStep = false;\n     }\n \n-    final double stopTime = stepStart;\n+    final double ret = this.stepStart;\n     resetInternalState();\n-    return stopTime;\n-\n-  }\n+    return ret;\n+}\n \n   /** Get the minimal reduction factor for stepsize control.\n    * @return minimal reduction factor",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}