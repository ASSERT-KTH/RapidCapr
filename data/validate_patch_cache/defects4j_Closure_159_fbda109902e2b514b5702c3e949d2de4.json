{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n        Node grandParent = node.getParent();\n        if (grandParent.getType() == Token.EXPR_RESULT) {\n          Node greatGrandParent = grandParent.getParent();\n          if (greatGrandParent.getType() == Token.BLOCK) {\n            Node functionNode = greatGrandParent.getParent();\n            String functionName = findEnclosingFunctionName(functionNode);\n            if (functionName != null) {\n              Scope functionScope = getScope(functionNode);\n              if(functionScope.isVar(calledFunctionName)) {\n                Node declarationNode = functionScope.getClosestDeclaration(calledFunctionName);\n                findCalledFunctions(declarationNode.getFirstChild().getNext().getLastChild().getFirstChild(), changed);\n              } else {\n                findCalledFunctions(findMatchingFunction(calledFunctionName), changed);\n              }\n            }\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..87aa1a51 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -778,6 +778,25 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n+        Node grandParent = node.getParent();\n+        if (grandParent.getType() == Token.EXPR_RESULT) {\n+          Node greatGrandParent = grandParent.getParent();\n+          if (greatGrandParent.getType() == Token.BLOCK) {\n+            Node functionNode = greatGrandParent.getParent();\n+            String functionName = findEnclosingFunctionName(functionNode);\n+            if (functionName != null) {\n+              Scope functionScope = getScope(functionNode);\n+              if(functionScope.isVar(calledFunctionName)) {\n+                Node declarationNode = functionScope.getClosestDeclaration(calledFunctionName);\n+                findCalledFunctions(declarationNode.getFirstChild().getNext().getLastChild().getFirstChild(), changed);\n+              } else {\n+                findCalledFunctions(findMatchingFunction(calledFunctionName), changed);\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}