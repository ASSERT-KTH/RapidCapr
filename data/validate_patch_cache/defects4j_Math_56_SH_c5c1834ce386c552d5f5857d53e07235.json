{
    "patch": "    public int[] getCounts(int index) {\n        if (index < 0 || index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize - 1);\n        }\n\n        final int[] indices = new int[dimension];\n        final int[] uniCounters = uniCounters();\n        final int[] uniCounterOffset = uniCounterOffsets();\n\n        int count = 0;\n\n        for (int i = 0; i < last; i++) {\n            int m = ((2 * totalSize) - (i * (i + 1)));\n            if (index < m) {\n                int idx = index / (i+1) + 1;\n                count = ((idx * i) * (idx - 1)) / 2;\n                index -= count * uniCounters[last];\n                for (int j = i; j > 0; j--) {\n                    indices[last - j] = idx % j;\n                    idx = (idx - indices[last - j]) / j;\n                    count += indices[last - j];\n                }\n                indices[last] = index / count;\n                break;\n            }\n        }\n\n        return indices;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..81b7a09e4 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,35 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+    public int[] getCounts(int index) {\n+        if (index < 0 || index >= totalSize) {\n+            throw new OutOfRangeException(index, 0, totalSize - 1);\n         }\n-        --idx;\n-        indices[last] = idx;\n+\n+        final int[] indices = new int[dimension];\n+        final int[] uniCounters = uniCounters();\n+        final int[] uniCounterOffset = uniCounterOffsets();\n+\n+        int count = 0;\n+\n+        for (int i = 0; i < last; i++) {\n+            int m = ((2 * totalSize) - (i * (i + 1)));\n+            if (index < m) {\n+                int idx = index / (i+1) + 1;\n+                count = ((idx * i) * (idx - 1)) / 2;\n+                index -= count * uniCounters[last];\n+                for (int j = i; j > 0; j--) {\n+                    indices[last - j] = idx % j;\n+                    idx = (idx - indices[last - j]) / j;\n+                    count += indices[last - j];\n+                }\n+                indices[last] = index / count;\n+                break;\n+            }\n+        }\n+\n+        return indices;\n+    }\n \n         return indices;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}