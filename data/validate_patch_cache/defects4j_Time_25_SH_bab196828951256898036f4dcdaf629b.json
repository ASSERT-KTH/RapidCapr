{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    int offsetNext;\n\n    if (nextLocal == instantAdjusted) {\n        offsetNext = getOffset(nextLocal + 1);\n    } else {\n        offsetNext = getOffset(nextAdjusted);\n    }\n\n    if (offsetNext == offsetAdjusted) {\n        long next = nextTransition(nextAdjusted);\n        if (next == nextLocal) {\n            offsetNext = getOffset(next);\n        } else if (next < instantAdjusted) {\n            // handle case where next transition is before instantAdjusted\n            long prevLocal = previousTransition(instantAdjusted);\n            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n            int offsetPrev = getOffset(prevAdjusted);\n            long nextPrev = nextTransition(prevAdjusted);\n            if (nextPrev == prevLocal) {\n                offsetPrev = getOffset(nextPrev);\n            }\n            if (offsetPrev == offsetAdjusted) {\n                return offsetPrev;\n            }\n            if (nextPrev < prevLocal && nextPrev > nextLocal) {\n                return offsetAdjusted;\n            }\n            return offsetLocal;\n        } else if (next > nextLocal) {\n            // handle case where next transition is beyond nextLocal\n            return offsetLocal;\n        } else if (next < nextLocal) {\n            // handle case where next transition is before nextLocal\n            return offsetNext;\n        }\n    }\n    return offsetLocal;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..de7157ec 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,47 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    int offsetNext;\n+\n+    if (nextLocal == instantAdjusted) {\n+        offsetNext = getOffset(nextLocal + 1);\n+    } else {\n+        offsetNext = getOffset(nextAdjusted);\n+    }\n+\n+    if (offsetNext == offsetAdjusted) {\n+        long next = nextTransition(nextAdjusted);\n+        if (next == nextLocal) {\n+            offsetNext = getOffset(next);\n+        } else if (next < instantAdjusted) {\n+            // handle case where next transition is before instantAdjusted\n+            long prevLocal = previousTransition(instantAdjusted);\n+            long prevAdjusted = previousTransition(instantLocal - offsetAdjusted);\n+            int offsetPrev = getOffset(prevAdjusted);\n+            long nextPrev = nextTransition(prevAdjusted);\n+            if (nextPrev == prevLocal) {\n+                offsetPrev = getOffset(nextPrev);\n+            }\n+            if (offsetPrev == offsetAdjusted) {\n+                return offsetPrev;\n+            }\n+            if (nextPrev < prevLocal && nextPrev > nextLocal) {\n+                return offsetAdjusted;\n+            }\n+            return offsetLocal;\n+        } else if (next > nextLocal) {\n+            // handle case where next transition is beyond nextLocal\n+            return offsetLocal;\n+        } else if (next < nextLocal) {\n+            // handle case where next transition is before nextLocal\n+            return offsetNext;\n+        }\n+    }\n+    return offsetLocal;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}