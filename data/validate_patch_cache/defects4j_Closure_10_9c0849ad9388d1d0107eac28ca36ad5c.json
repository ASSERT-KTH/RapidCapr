{
    "patch": "  static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n, new HashSet<Node>());\n    }\n  }\n  \n  private static boolean mayBeStringHelper(Node n, Set<Node> seen) {\n    if (n == null) {\n      return false;\n    }\n    if (seen.contains(n)) {\n      return false;\n    }\n    seen.add(n);\n    JSTypeExpression type = n.getType();\n    if (type != null && type.getType().isStringValueType()) {\n      return true;\n    }\n    for (Node c : n.children()) {\n      if (mayBeStringHelper(c, seen)) {\n        return true;\n      }\n    }\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..1141ad7c 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,13 +1411,32 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n-      return mayBeStringHelper(n);\n+      return mayBeStringHelper(n, new HashSet<Node>());\n+    }\n+  }\n+  \n+  private static boolean mayBeStringHelper(Node n, Set<Node> seen) {\n+    if (n == null) {\n+      return false;\n+    }\n+    if (seen.contains(n)) {\n+      return false;\n     }\n+    seen.add(n);\n+    JSTypeExpression type = n.getType();\n+    if (type != null && type.getType().isStringValueType()) {\n+      return true;\n+    }\n+    for (Node c : n.children()) {\n+      if (mayBeStringHelper(c, seen)) {\n+        return true;\n+      }\n+    }\n+    return false;\n   }\n \n   static boolean mayBeStringHelper(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}