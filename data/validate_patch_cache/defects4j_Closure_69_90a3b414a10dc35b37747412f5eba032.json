{
    "patch": "private void visitCall(NodeTraversal t, Node n) {\n    Node child = n.getFirstChild();\n    JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n    JSType bestGuessThis = getBestGuessThisType(t.getScope());\n    JSType expectedThisType = null;\n    \n    if (!childType.canBeCalled()) {\n      report(t, n, NOT_CALLABLE, childType.toString());\n      ensureTyped(t, n);\n      return;\n    }\n\n    // A couple of types can be called as if they were functions.\n    // If it is a function type, then validate parameters.\n    if (childType instanceof FunctionType) {\n      FunctionType functionType = (FunctionType) childType;\n\n      boolean isExtern = false;\n      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n      if (functionJSDocInfo != null) {\n        String sourceName = functionJSDocInfo.getSourceName();\n        CompilerInput functionSource = compiler.getInput(sourceName);\n        isExtern = functionSource.isExtern();\n      }\n\n      // Non-native constructors should not be called directly\n      if (functionType.isConstructor()\n          && !functionType.isNativeObjectType()\n          && (functionType.getReturnType().isUnknownType()\n              || functionType.getReturnType().isVoidType()\n              || !isExtern)) {\n        report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n        expectedThisType = functionType.getInstanceType();\n      } else if (NodeUtil.isObjectDefinePropertiesDefinition(child.getParent())\n          && !isExtern\n          && !functionType.isConstructor()) {\n        report(t, n, OBJECT_DEFINE_PROPERTIES_FUNCTION_CALLED_WITH_WRONG_PARAMS);\n        expectedThisType = unknownType();\n      }\n\n      // Functions with explicit 'this' types must be called in a GETPROP\n      // or GETELEM.\n      if (functionType.getTypeOfThis() != null) {\n        expectedThisType = functionType.getTypeOfThis();\n      }\n\n      // Validate parameters if the function isn't generic.\n      if (functionType.isGeneric()) {\n        ensureTyped(t, n);\n      } else {\n        visitParameterList(t, n, functionType);\n        ensureTyped(t, n, functionType.getReturnType());\n      }\n    } else {\n      ensureTyped(t, n);\n    }\n\n    checkObjectTypeReference(t, n, bestGuessThis, expectedThisType);\n  }\n\n  private void checkObjectTypeReference(\n      NodeTraversal t, Node n, JSType bestGuessThis, JSType expectedThisType) {\n\n    Preconditions.checkNotNull(bestGuessThis, \"bestGuess can not be null\");\n    if (n.getParent().isGetProp()) {\n      if (bestGuessThis.isNoType()) {\n        report(t, n, REFERENCE_THIS_BEFORE_SUPER, expectedThisType.toString());\n      }\n    } else if (n.getParent().isCall() && NodeUtil.isObjectDefinePropertiesDefinition(n.getParent())) {\n      if (!bestGuessThis.equals(unknownType())) {\n        report(t, n, OBJECT_DEFINE_PROPERTIES_FUNCTION_CALLED_WITH_WRONG_THIS);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..4e0aa7a9 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1541,10 +1541,12 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * scope chain to use in name lookups as well as error reporting.\n    * @param n The node being visited.\n    */\n-  private void visitCall(NodeTraversal t, Node n) {\n+private void visitCall(NodeTraversal t, Node n) {\n     Node child = n.getFirstChild();\n     JSType childType = getJSType(child).restrictByNotNullOrUndefined();\n-\n+    JSType bestGuessThis = getBestGuessThisType(t.getScope());\n+    JSType expectedThisType = null;\n+    \n     if (!childType.canBeCalled()) {\n       report(t, n, NOT_CALLABLE, childType.toString());\n       ensureTyped(t, n);\n@@ -1558,35 +1560,60 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       boolean isExtern = false;\n       JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n-      if(functionJSDocInfo != null) {\n+      if (functionJSDocInfo != null) {\n         String sourceName = functionJSDocInfo.getSourceName();\n         CompilerInput functionSource = compiler.getInput(sourceName);\n         isExtern = functionSource.isExtern();\n       }\n \n       // Non-native constructors should not be called directly\n-      // unless they specify a return type and are defined\n-      // in an extern.\n-      if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType() &&\n-          (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+      if (functionType.isConstructor()\n+          && !functionType.isNativeObjectType()\n+          && (functionType.getReturnType().isUnknownType()\n+              || functionType.getReturnType().isVoidType()\n+              || !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n+        expectedThisType = functionType.getInstanceType();\n+      } else if (NodeUtil.isObjectDefinePropertiesDefinition(child.getParent())\n+          && !isExtern\n+          && !functionType.isConstructor()) {\n+        report(t, n, OBJECT_DEFINE_PROPERTIES_FUNCTION_CALLED_WITH_WRONG_PARAMS);\n+        expectedThisType = unknownType();\n       }\n \n-      // Functions with explcit 'this' types must be called in a GETPROP\n+      // Functions with explicit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+      if (functionType.getTypeOfThis() != null) {\n+        expectedThisType = functionType.getTypeOfThis();\n+      }\n \n-      visitParameterList(t, n, functionType);\n-      ensureTyped(t, n, functionType.getReturnType());\n+      // Validate parameters if the function isn't generic.\n+      if (functionType.isGeneric()) {\n+        ensureTyped(t, n);\n+      } else {\n+        visitParameterList(t, n, functionType);\n+        ensureTyped(t, n, functionType.getReturnType());\n+      }\n     } else {\n       ensureTyped(t, n);\n     }\n \n-    // TODO: Add something to check for calls of RegExp objects, which is not\n-    // supported by IE.  Either say something about the return type or warn\n-    // about the non-portability of the call or both.\n+    checkObjectTypeReference(t, n, bestGuessThis, expectedThisType);\n+  }\n+\n+  private void checkObjectTypeReference(\n+      NodeTraversal t, Node n, JSType bestGuessThis, JSType expectedThisType) {\n+\n+    Preconditions.checkNotNull(bestGuessThis, \"bestGuess can not be null\");\n+    if (n.getParent().isGetProp()) {\n+      if (bestGuessThis.isNoType()) {\n+        report(t, n, REFERENCE_THIS_BEFORE_SUPER, expectedThisType.toString());\n+      }\n+    } else if (n.getParent().isCall() && NodeUtil.isObjectDefinePropertiesDefinition(n.getParent())) {\n+      if (!bestGuessThis.equals(unknownType())) {\n+        report(t, n, OBJECT_DEFINE_PROPERTIES_FUNCTION_CALLED_WITH_WRONG_THIS);\n+      }\n+    }\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}