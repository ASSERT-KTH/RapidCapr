{
    "patch": "import java.lang.reflect.Array;\n\npublic class EqualsBuilder {\n\n    private boolean isEquals = true;\n\n    public EqualsBuilder append(Object lhs, Object rhs) {\n        if (isEquals == false) {\n            return this;\n        }\n        if (lhs == rhs) {\n            return this;\n        }\n        if (lhs == null || rhs == null || lhs.getClass() != rhs.getClass()) {\n            this.setEquals(false);\n            return this;\n        }\n        if (!lhs.getClass().isArray()) {\n            // The simple case, not an array, just test the element\n            isEquals = lhs.equals(rhs);\n        } else if (lhs.getClass().getComponentType().isPrimitive()) {\n            // Arrays of primitives are checked for size and content\n            isEquals = arrayEquals(lhs, rhs);\n        } else {\n            // Arrays of objects are checked recursively\n            isEquals = objectArrayEquals((Object[]) lhs, (Object[]) rhs);\n        }\n        return this;\n    }\n\n    public boolean isEquals() {\n        return isEquals;\n    }\n\n    private void setEquals(boolean isEquals) {\n        this.isEquals = isEquals;\n    }\n\n    private boolean arrayEquals(Object lhs, Object rhs) {\n        // Handle nulls first\n        if (lhs == null) {\n            return rhs == null;\n        }\n        if (rhs == null) {\n            return false;\n        }\n        // Check the arrays are the same size\n        int lhsLength = Array.getLength(lhs);\n        if (lhsLength != Array.getLength(rhs)) {\n            return false;\n        }\n        // Check the array's contents\n        for (int i = 0; i < lhsLength; i++) {\n            Object lhsItem = Array.get(lhs, i);\n            Object rhsItem = Array.get(rhs, i);\n            if (!new EqualsBuilder().append(lhsItem, rhsItem).isEquals()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean objectArrayEquals(Object[] lhs, Object[] rhs) {\n        // Handle nulls first\n        if (lhs == null) {\n            return rhs == null;\n        }\n        if (rhs == null) {\n            return false;\n        }\n        // Check the arrays are the same size\n        int lhsLength = lhs.length;\n        if (lhsLength != rhs.length) {\n            return false;\n        }\n        // Check if the arrays are assigned from the same type of object at runtime\n        if (!lhs.getClass().getComponentType().isInstance(rhs[0])) {\n            return false;\n        }\n        // Check the array's contents\n        for (int i = 0; i < lhsLength; i++) {\n            if (!new EqualsBuilder().append(lhs[i], rhs[i]).isEquals()) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\nindex a783b351..6b85cb14 100644\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n@@ -364,6 +364,12 @@ public class EqualsBuilder {\n      * @param rhs  the right hand object\n      * @return EqualsBuilder - used to chain calls.\n      */\n+import java.lang.reflect.Array;\n+\n+public class EqualsBuilder {\n+\n+    private boolean isEquals = true;\n+\n     public EqualsBuilder append(Object lhs, Object rhs) {\n         if (isEquals == false) {\n             return this;\n@@ -371,43 +377,82 @@ public class EqualsBuilder {\n         if (lhs == rhs) {\n             return this;\n         }\n-        if (lhs == null || rhs == null) {\n+        if (lhs == null || rhs == null || lhs.getClass() != rhs.getClass()) {\n             this.setEquals(false);\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (!lhsClass.isArray()) {\n-                // The simple case, not an array, just test the element\n-                isEquals = lhs.equals(rhs);\n-        } else if (lhs.getClass() != rhs.getClass()) {\n-            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            this.setEquals(false);\n-        }\n-        // 'Switch' on type of array, to dispatch to the correct handler\n-        // This handles multi dimensional arrays of the same depth\n-        else if (lhs instanceof long[]) {\n-            append((long[]) lhs, (long[]) rhs);\n-        } else if (lhs instanceof int[]) {\n-            append((int[]) lhs, (int[]) rhs);\n-        } else if (lhs instanceof short[]) {\n-            append((short[]) lhs, (short[]) rhs);\n-        } else if (lhs instanceof char[]) {\n-            append((char[]) lhs, (char[]) rhs);\n-        } else if (lhs instanceof byte[]) {\n-            append((byte[]) lhs, (byte[]) rhs);\n-        } else if (lhs instanceof double[]) {\n-            append((double[]) lhs, (double[]) rhs);\n-        } else if (lhs instanceof float[]) {\n-            append((float[]) lhs, (float[]) rhs);\n-        } else if (lhs instanceof boolean[]) {\n-            append((boolean[]) lhs, (boolean[]) rhs);\n+        if (!lhs.getClass().isArray()) {\n+            // The simple case, not an array, just test the element\n+            isEquals = lhs.equals(rhs);\n+        } else if (lhs.getClass().getComponentType().isPrimitive()) {\n+            // Arrays of primitives are checked for size and content\n+            isEquals = arrayEquals(lhs, rhs);\n         } else {\n-            // Not an array of primitives\n-            append((Object[]) lhs, (Object[]) rhs);\n+            // Arrays of objects are checked recursively\n+            isEquals = objectArrayEquals((Object[]) lhs, (Object[]) rhs);\n         }\n         return this;\n     }\n \n+    public boolean isEquals() {\n+        return isEquals;\n+    }\n+\n+    private void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n+\n+    private boolean arrayEquals(Object lhs, Object rhs) {\n+        // Handle nulls first\n+        if (lhs == null) {\n+            return rhs == null;\n+        }\n+        if (rhs == null) {\n+            return false;\n+        }\n+        // Check the arrays are the same size\n+        int lhsLength = Array.getLength(lhs);\n+        if (lhsLength != Array.getLength(rhs)) {\n+            return false;\n+        }\n+        // Check the array's contents\n+        for (int i = 0; i < lhsLength; i++) {\n+            Object lhsItem = Array.get(lhs, i);\n+            Object rhsItem = Array.get(rhs, i);\n+            if (!new EqualsBuilder().append(lhsItem, rhsItem).isEquals()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean objectArrayEquals(Object[] lhs, Object[] rhs) {\n+        // Handle nulls first\n+        if (lhs == null) {\n+            return rhs == null;\n+        }\n+        if (rhs == null) {\n+            return false;\n+        }\n+        // Check the arrays are the same size\n+        int lhsLength = lhs.length;\n+        if (lhsLength != rhs.length) {\n+            return false;\n+        }\n+        // Check if the arrays are assigned from the same type of object at runtime\n+        if (!lhs.getClass().getComponentType().isInstance(rhs[0])) {\n+            return false;\n+        }\n+        // Check the array's contents\n+        for (int i = 0; i < lhsLength; i++) {\n+            if (!new EqualsBuilder().append(lhs[i], rhs[i]).isEquals()) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+\n     /**\n      * <p>\n      * Test if two <code>long</code> s are equal.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}