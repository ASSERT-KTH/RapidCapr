{
    "patch": "        List<Strategy> collector = new ArrayList<Strategy>();\n        List<String> regexList = new ArrayList<String>();\n\n        Matcher patternMatcher = formatPattern.matcher(pattern);\n        if (!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField = patternMatcher.group();\n        Strategy currentStrategy = getStrategy(currentFormatField);\n        for (;;) {\n            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if (!patternMatcher.lookingAt()) {\n                nextStrategy = null;\n                break;\n            }\n            String nextFormatField = patternMatcher.group();\n            nextStrategy = getStrategy(nextFormatField);\n            if (currentStrategy.addRegex(this, regexList)) {\n                collector.add(currentStrategy);\n            }\n            currentFormatField = nextFormatField;\n            currentStrategy = nextStrategy;\n        }\n\n        if (currentStrategy != null && currentStrategy.addRegex(this, regexList)) {\n            collector.add(currentStrategy);\n        }\n        currentFormatField= null;\n\n        // concatenate all regex elements into a single pattern\n        StringBuilder regex = new StringBuilder();\n        regex.append(\"(\");\n        for (String element : regexList) {\n            regex.append(element);\n            regex.append(\"|\");\n        }\n        regex.setLength(regex.length() - 1);\n        regex.append(\")\");\n\n        strategies = collector.toArray(new Strategy[0]);\n        parsePattern = Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..78cc6cf9 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,48 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        List<Strategy> collector = new ArrayList<Strategy>();\n+        List<String> regexList = new ArrayList<String>();\n+\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n+        if (!patternMatcher.lookingAt()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+\n+        currentFormatField = patternMatcher.group();\n+        Strategy currentStrategy = getStrategy(currentFormatField);\n+        for (;;) {\n+            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if (!patternMatcher.lookingAt()) {\n+                nextStrategy = null;\n+                break;\n+            }\n+            String nextFormatField = patternMatcher.group();\n+            nextStrategy = getStrategy(nextFormatField);\n+            if (currentStrategy.addRegex(this, regexList)) {\n+                collector.add(currentStrategy);\n+            }\n+            currentFormatField = nextFormatField;\n+            currentStrategy = nextStrategy;\n+        }\n+\n+        if (currentStrategy != null && currentStrategy.addRegex(this, regexList)) {\n+            collector.add(currentStrategy);\n+        }\n+        currentFormatField= null;\n+\n+        // concatenate all regex elements into a single pattern\n+        StringBuilder regex = new StringBuilder();\n+        regex.append(\"(\");\n+        for (String element : regexList) {\n+            regex.append(element);\n+            regex.append(\"|\");\n+        }\n+        regex.setLength(regex.length() - 1);\n+        regex.append(\")\");\n+\n+        strategies = collector.toArray(new Strategy[0]);\n+        parsePattern = Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable collector is already defined in method init()",
    "test_result": "ERROR"
}