{
    "patch": "        // step size is too large for the current interval: reduce it\n        double nextT;\n        double hNew;\n        final double factor = FastMath.min(maxStep, 0.25 * remainingTime) / remainingTime;\n        if (factor <= 0) {\n            hNew = remainingTime;\n            nextT = t;\n        } else {\n            hNew = factor * remainingTime;\n            nextT = t + hNew;\n        }\n        // check if next step will be the last one\n        final boolean nextIsLast = forward ? (nextT >= end) : (nextT <= end);\n        if (nextIsLast) {\n            hNew = remainingTime;\n            nextT = end;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..b017e502a 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,23 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+        // step size is too large for the current interval: reduce it\n+        double nextT;\n+        double hNew;\n+        final double factor = FastMath.min(maxStep, 0.25 * remainingTime) / remainingTime;\n+        if (factor <= 0) {\n+            hNew = remainingTime;\n+            nextT = t;\n+        } else {\n+            hNew = factor * remainingTime;\n+            nextT = t + hNew;\n+        }\n+        // check if next step will be the last one\n+        final boolean nextIsLast = forward ? (nextT >= end) : (nextT <= end);\n+        if (nextIsLast) {\n+            hNew = remainingTime;\n+            nextT = end;\n+        }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: variable hNew is already defined in method integrate(ExpandableStatefulODE,double)",
    "test_result": "ERROR"
}