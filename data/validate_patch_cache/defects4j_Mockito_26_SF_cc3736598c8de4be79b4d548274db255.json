{
    "patch": "    private static Map<Class<?>, Class<?>> primitiveTypesMap = new HashMap<Class<?>, Class<?>>();\n    private static Map<Class<?>, Object> wrapperReturnValuesMap = new HashMap<Class<?>, Object>();\n    private static Map<Class<?>, Object> primitiveValuesMap = new HashMap<Class<?>, Object>();\n\n    static {\n        primitiveTypesMap.put(Boolean.class, Boolean.TYPE);\n        primitiveTypesMap.put(Character.class, Character.TYPE);\n        primitiveTypesMap.put(Byte.class, Byte.TYPE);\n        primitiveTypesMap.put(Short.class, Short.TYPE);\n        primitiveTypesMap.put(Integer.class, Integer.TYPE);\n        primitiveTypesMap.put(Long.class, Long.TYPE);\n        primitiveTypesMap.put(Float.class, Float.TYPE);\n        primitiveTypesMap.put(Double.class, Double.TYPE);\n\n        wrapperReturnValuesMap.put(Boolean.class, false);\n        wrapperReturnValuesMap.put(Character.class, '\\u0000');\n        wrapperReturnValuesMap.put(Byte.class, (byte) 0);\n        wrapperReturnValuesMap.put(Short.class, (short) 0);\n        wrapperReturnValuesMap.put(Integer.class, 0);\n        wrapperReturnValuesMap.put(Long.class, 0L);\n        wrapperReturnValuesMap.put(Float.class, 0F);\n        wrapperReturnValuesMap.put(Double.class, 0D);\n\n        primitiveValuesMap.put(boolean.class, false);\n        primitiveValuesMap.put(char.class, '\\u0000');\n        primitiveValuesMap.put(byte.class, (byte) 0);\n        primitiveValuesMap.put(short.class, (short) 0);\n        primitiveValuesMap.put(int.class, 0);\n        primitiveValuesMap.put(long.class, 0L);\n        primitiveValuesMap.put(float.class, 0F);\n        primitiveValuesMap.put(double.class, 0D);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..41dc5bc3b 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -31,38 +31,36 @@ public class Primitives {\n     private static Map<Class<?>, Class<?>> wrapperTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Class<?>> primitiveTypes = new HashMap<Class<?>, Class<?>>();\n     private static Map<Class<?>, Object> wrapperReturnValues = new HashMap<Class<?>, Object>();\n-    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n-\n-    static {\n-        primitiveTypes.put(Boolean.class, Boolean.TYPE);\n-        primitiveTypes.put(Character.class, Character.TYPE);\n-        primitiveTypes.put(Byte.class, Byte.TYPE);\n-        primitiveTypes.put(Short.class, Short.TYPE);\n-        primitiveTypes.put(Integer.class, Integer.TYPE);\n-        primitiveTypes.put(Long.class, Long.TYPE);\n-        primitiveTypes.put(Float.class, Float.TYPE);\n-        primitiveTypes.put(Double.class, Double.TYPE);\n-    }\n-\n-    static {\n-        wrapperReturnValues.put(Boolean.class, false);\n-        wrapperReturnValues.put(Character.class, '\\u0000');\n-        wrapperReturnValues.put(Byte.class, (byte) 0);\n-        wrapperReturnValues.put(Short.class, (short) 0);\n-        wrapperReturnValues.put(Integer.class, 0);\n-        wrapperReturnValues.put(Long.class, 0L);\n-        wrapperReturnValues.put(Float.class, 0F);\n-        wrapperReturnValues.put(Double.class, 0D);\n-    }\n-\n-    static {\n-        primitiveValues.put(boolean.class, false);\n-        primitiveValues.put(char.class, '\\u0000');\n-        primitiveValues.put(byte.class, (byte) 0);\n-        primitiveValues.put(short.class, (short) 0);\n-        primitiveValues.put(int.class, 0);\n-        primitiveValues.put(long.class, 0L);\n-        primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n-    }\n-}\n\\ No newline at end of file\n+    private static Map<Class<?>, Class<?>> primitiveTypesMap = new HashMap<Class<?>, Class<?>>();\n+    private static Map<Class<?>, Object> wrapperReturnValuesMap = new HashMap<Class<?>, Object>();\n+    private static Map<Class<?>, Object> primitiveValuesMap = new HashMap<Class<?>, Object>();\n+\n+    static {\n+        primitiveTypesMap.put(Boolean.class, Boolean.TYPE);\n+        primitiveTypesMap.put(Character.class, Character.TYPE);\n+        primitiveTypesMap.put(Byte.class, Byte.TYPE);\n+        primitiveTypesMap.put(Short.class, Short.TYPE);\n+        primitiveTypesMap.put(Integer.class, Integer.TYPE);\n+        primitiveTypesMap.put(Long.class, Long.TYPE);\n+        primitiveTypesMap.put(Float.class, Float.TYPE);\n+        primitiveTypesMap.put(Double.class, Double.TYPE);\n+\n+        wrapperReturnValuesMap.put(Boolean.class, false);\n+        wrapperReturnValuesMap.put(Character.class, '\\u0000');\n+        wrapperReturnValuesMap.put(Byte.class, (byte) 0);\n+        wrapperReturnValuesMap.put(Short.class, (short) 0);\n+        wrapperReturnValuesMap.put(Integer.class, 0);\n+        wrapperReturnValuesMap.put(Long.class, 0L);\n+        wrapperReturnValuesMap.put(Float.class, 0F);\n+        wrapperReturnValuesMap.put(Double.class, 0D);\n+\n+        primitiveValuesMap.put(boolean.class, false);\n+        primitiveValuesMap.put(char.class, '\\u0000');\n+        primitiveValuesMap.put(byte.class, (byte) 0);\n+        primitiveValuesMap.put(short.class, (short) 0);\n+        primitiveValuesMap.put(int.class, 0);\n+        primitiveValuesMap.put(long.class, 0L);\n+        primitiveValuesMap.put(float.class, 0F);\n+        primitiveValuesMap.put(double.class, 0D);\n+    }\n+}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}