{
    "patch": "    public int[] getCounts(int index) {\n        if (index < 0 ||\n            index >= totalSize) {\n            throw new OutOfRangeException(index, 0, totalSize);\n        }\n\n        final int[] indices = new int[dimension];\n        int count = 0;\n        int last = uniCounterMax.length - 1;\n\n        for (int i = 0; i < last; i++) {\n            int idx = 0;\n            final int offset = uniCounterOffset[i];\n            while (count <= index) {\n                count += offset;\n                ++idx;\n            }\n            --idx;\n            count -= offset;\n            indices[i] = idx;\n        }\n\n        int idx = index - count;\n        for (int i = last; i >= 0; --i) {\n            indices[i] = idx % uniCounterMax[i];\n            idx /= uniCounterMax[i];\n        }\n\n        return indices;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..4efab468e 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -234,13 +234,36 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n             indices[i] = idx;\n         }\n \n-        int idx = 1;\n-        while (count < index) {\n-            count += idx;\n-            ++idx;\n+    public int[] getCounts(int index) {\n+        if (index < 0 ||\n+            index >= totalSize) {\n+            throw new OutOfRangeException(index, 0, totalSize);\n+        }\n+\n+        final int[] indices = new int[dimension];\n+        int count = 0;\n+        int last = uniCounterMax.length - 1;\n+\n+        for (int i = 0; i < last; i++) {\n+            int idx = 0;\n+            final int offset = uniCounterOffset[i];\n+            while (count <= index) {\n+                count += offset;\n+                ++idx;\n+            }\n+            --idx;\n+            count -= offset;\n+            indices[i] = idx;\n+        }\n+\n+        int idx = index - count;\n+        for (int i = last; i >= 0; --i) {\n+            indices[i] = idx % uniCounterMax[i];\n+            idx /= uniCounterMax[i];\n         }\n-        --idx;\n-        indices[last] = idx;\n+\n+        return indices;\n+    }\n \n         return indices;\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}