{
    "patch": "      Node fnNameNode = n.getFirstChild();\n      if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {\n        String fnName = fnNameNode.getString();\n        SymbolTable scope = t.getScope();\n        Var var = scope.getVar(fnName);\n        if (var != null &&\n            isPrototypeProperty(var.getNode(), parent, /* isLValue */ false, false)) {\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..a0d1870e 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,16 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      Node fnNameNode = n.getFirstChild();\n+      if (fnNameNode != null && fnNameNode.getType() == Token.NAME) {\n+        String fnName = fnNameNode.getString();\n+        SymbolTable scope = t.getScope();\n+        Var var = scope.getVar(fnName);\n+        if (var != null &&\n+            isPrototypeProperty(var.getNode(), parent, /* isLValue */ false, false)) {\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}