{
    "patch": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n            throws FractionConversionException {\n        long overflow = Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (a0 >= overflow || a0 <= -overflow) {\n            throw new FractionConversionException(value, a0, 1L);\n        }\n        // check for (almost) integer arguments, which should not go to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n        long p0 = 1L, p1 = a0, p2 = 0L;\n        long q0 = 0L, q1 = 1L, q2 = 1L;\n        long a1;\n        int n = 1;\n        boolean stop = false;\n        do {\n            final double r1 = 1d / (r0 - (a0 = (long) r0));\n            a1 = (long) FastMath.floor(r1);\n            p2 = a1 * p1 + p0;\n            q2 = a1 * q1 + q0;\n            if (p2 >= overflow || p2 <= -overflow || q2 >= overflow || q2 <= -overflow || q2 >= maxDenominator) {\n                if (q1 == 0) {\n                    throw new FractionConversio",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..99233a656 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -173,69 +173,32 @@ public class Fraction\n      *         converge.\n      */\n     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n-        throws FractionConversionException\n-    {\n+            throws FractionConversionException {\n         long overflow = Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+        if (a0 >= overflow || a0 <= -overflow) {\n+            throw new FractionConversionException(value, a0, 1L);\n         }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n+        // check for (almost) integer arguments, which should not go to iterations.\n         if (FastMath.abs(a0 - value) < epsilon) {\n             this.numerator = (int) a0;\n             this.denominator = 1;\n             return;\n         }\n-\n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n+        long p0 = 1L, p1 = a0, p2 = 0L;\n+        long q0 = 0L, q1 = 1L, q2 = 1L;\n+        long a1;\n+        int n = 1;\n         boolean stop = false;\n         do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n-            }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n-            }\n-        } while (!stop);\n-\n-        if (n >= maxIterations) {\n-            throw new FractionConversionException(value, maxIterations);\n-        }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n-        }\n-\n-    }\n+            final double r1 = 1d / (r0 - (a0 = (long) r0));\n+            a1 = (long) FastMath.floor(r1);\n+            p2 = a1 * p1 + p0;\n+            q2 = a1 * q1 + q0;\n+            if (p2 >= overflow || p2 <= -overflow || q2 >= overflow || q2 <= -overflow || q2 >= maxDenominator) {\n+                if (q1 == 0) {\n+                    throw new FractionConversio\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: '(' or '[' expected",
    "test_result": "ERROR"
}