{
    "patch": "private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n  Node nameNode = n.getFirstChild();\n  Node parent = n.getParent();\n  NameInformation ns = createNameInformation(t, nameNode);\n  if (ns != null) {\n    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n      if (parent.getFirstChild().getNext() != n) {\n        recordDepScope(recordNode, ns);\n      } else {\n        recordDepScope(nameNode, ns);\n      }\n    } else if (!recordNode.getParent().isCall()) {\n      recordDepScope(recordNode, ns);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..4796ffea 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -575,7 +575,22 @@ final class NameAnalyzer implements CompilerPass {\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n-        } else {\n+private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n+  Node nameNode = n.getFirstChild();\n+  Node parent = n.getParent();\n+  NameInformation ns = createNameInformation(t, nameNode);\n+  if (ns != null) {\n+    if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n+      if (parent.getFirstChild().getNext() != n) {\n+        recordDepScope(recordNode, ns);\n+      } else {\n+        recordDepScope(nameNode, ns);\n+      }\n+    } else if (!recordNode.getParent().isCall()) {\n+      recordDepScope(recordNode, ns);\n+    }\n+  }\n+}\n           // The rhs of the assignment is the caller, so it's used by the\n           // context. Don't associate it w/ the lhs.\n           // FYI: this fixes only the specific case where the assignment is the",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}