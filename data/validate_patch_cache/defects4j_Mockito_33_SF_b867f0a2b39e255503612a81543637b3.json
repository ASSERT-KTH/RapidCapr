{
    "patch": "    public boolean hasSameMethod(Invocation candidate) {        \n        //not using method.equals() for 1 good reason:\n        //sometimes java generates forwarding methods when generics are in play see JavaGenericsForwardingMethodsTest\n        Method m1 = invocation.getMethod();\n        Method m2 = candidate.getMethod();\n        \n        /* Avoid unnecessary cloning */\n        if (m1 == m2) {\n            return true;\n        }\n        \n        if (m1.getName().equals(m2.getName()) && m1.getParameterTypes().length == m2.getParameterTypes().length) {\n            for (int i = 0; i < m1.getParameterTypes().length; i++) {\n                if (!m1.getParameterTypes()[i].equals(m2.getParameterTypes()[i])) {\n                    return false;\n                }\n            }\n\n            return true;\n        } else {\n            return false;\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 203413fc9..ac617a0f0 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -95,8 +95,22 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n         Method m1 = invocation.getMethod();\n         Method m2 = candidate.getMethod();\n         \n-        \t/* Avoid unnecessary cloning */\n-        return m1.equals(m2);\n+        /* Avoid unnecessary cloning */\n+        if (m1 == m2) {\n+            return true;\n+        }\n+        \n+        if (m1.getName().equals(m2.getName()) && m1.getParameterTypes().length == m2.getParameterTypes().length) {\n+            for (int i = 0; i < m1.getParameterTypes().length; i++) {\n+                if (!m1.getParameterTypes()[i].equals(m2.getParameterTypes()[i])) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n     \n     public Location getLocation() {\n@@ -126,4 +140,4 @@ public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyI\n \n         return out;\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}