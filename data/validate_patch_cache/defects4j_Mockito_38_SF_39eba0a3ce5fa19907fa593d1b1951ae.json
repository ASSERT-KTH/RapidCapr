{
    "patch": "private boolean toStringEquals(Matcher m, Object arg) {\n    if (m == arg) { // comparing object references directly\n        return true;\n    }\n\n    String mStr = null;\n    try {\n        mStr = StringDescription.toString(m); // get string representation of m\n    } catch (NullPointerException e) {\n        // Treat NullPointerException as indication that m is not equal to arg.\n        return false;\n    }\n\n    String argStr = null;\n    try {\n        argStr = arg.toString(); // get string representation of arg\n    } catch (NullPointerException e) {\n        // Treat NullPointerException as indication that m is not equal to arg.\n        return false;\n    }\n\n    if (mStr == null && argStr == null) {\n        return true; // both strings are null, so they are equal\n    } else if (mStr == null || argStr == null) {\n        return false; // one string is null and the other is not, so they are not equal\n    } else {\n        return mStr.equals(argStr); // compare the strings\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..1ecbc6d14 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,34 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n-    private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n-    }\n+\n+private boolean toStringEquals(Matcher m, Object arg) {\n+    if (m == arg) { // comparing object references directly\n+        return true;\n+    }\n+\n+    String mStr = null;\n+    try {\n+        mStr = StringDescription.toString(m); // get string representation of m\n+    } catch (NullPointerException e) {\n+        // Treat NullPointerException as indication that m is not equal to arg.\n+        return false;\n+    }\n+\n+    String argStr = null;\n+    try {\n+        argStr = arg.toString(); // get string representation of arg\n+    } catch (NullPointerException e) {\n+        // Treat NullPointerException as indication that m is not equal to arg.\n+        return false;\n+    }\n+\n+    if (mStr == null && argStr == null) {\n+        return true; // both strings are null, so they are equal\n+    } else if (mStr == null || argStr == null) {\n+        return false; // one string is null and the other is not, so they are not equal\n+    } else {\n+        return mStr.equals(argStr); // compare the strings\n+    }\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}