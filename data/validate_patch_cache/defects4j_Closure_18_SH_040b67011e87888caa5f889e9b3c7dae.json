{
    "patch": "if (options.dependencyOptions.needsManagement()) {\n  for (CompilerInput input : inputs) {\n    // Forward-declare all the provided types, so that they\n    // are not flagged even if they are dropped from the process.\n    for (String provide : input.getProvides()) {\n      getTypeRegistry().forwardDeclareType(provide);\n    }\n  }\n\n  // Run the dependency manager\n  try {\n    inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n             .manageDependencies(options.dependencyOptions, inputs);\n  } catch (CircularDependencyException e) {\n    report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n    // If in IDE mode, we ignore the error and keep going.\n    if (hasErrors()) {\n      return null;\n    }\n  } catch (MissingProvideException e) {\n    report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));\n    // If in IDE mode, we ignore the error and keep going.\n    if (hasErrors()) {\n      return null;\n    }\n  }\n}\n\nif (options.closurePass) {\n  if (options.dependencyOptions.needsManagement()) {\n    for (CompilerInput input : inputs) {\n      Node root = input.getAstRoot(compiler);\n      CheckLevel level = input.getCheckLevel();\n      if (root != null && level.isOn()) {\n        CheckClosureImports closure =\n            new CheckClosureImports(compiler,\n                input.getPath().toString().replace('\\\\', '/'),\n                level);\n        NodeTraversal.traverse(compiler, root, closure);\n      }\n    }\n  }\n\n  // Run the checks on the AST.\n  new CheckGlobalNames(this, options.getWarningLevel())\n      .process(externsRoot, jsRoot);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 8898f77f..8d78c1b9 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -1285,7 +1285,53 @@ public class Compiler extends AbstractCompiler {\n \n       // Check if the sources need to be re-ordered.\n       boolean staleInputs = false;\n-      if (options.dependencyOptions.needsManagement() && options.closurePass) {\n+if (options.dependencyOptions.needsManagement()) {\n+  for (CompilerInput input : inputs) {\n+    // Forward-declare all the provided types, so that they\n+    // are not flagged even if they are dropped from the process.\n+    for (String provide : input.getProvides()) {\n+      getTypeRegistry().forwardDeclareType(provide);\n+    }\n+  }\n+\n+  // Run the dependency manager\n+  try {\n+    inputs = (moduleGraph == null ? new JSModuleGraph(modules) : moduleGraph)\n+             .manageDependencies(options.dependencyOptions, inputs);\n+  } catch (CircularDependencyException e) {\n+    report(JSError.make(JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));\n+    // If in IDE mode, we ignore the error and keep going.\n+    if (hasErrors()) {\n+      return null;\n+    }\n+  } catch (MissingProvideException e) {\n+    report(JSError.make(MISSING_ENTRY_ERROR, e.getMessage()));\n+    // If in IDE mode, we ignore the error and keep going.\n+    if (hasErrors()) {\n+      return null;\n+    }\n+  }\n+}\n+\n+if (options.closurePass) {\n+  if (options.dependencyOptions.needsManagement()) {\n+    for (CompilerInput input : inputs) {\n+      Node root = input.getAstRoot(compiler);\n+      CheckLevel level = input.getCheckLevel();\n+      if (root != null && level.isOn()) {\n+        CheckClosureImports closure =\n+            new CheckClosureImports(compiler,\n+                input.getPath().toString().replace('\\\\', '/'),\n+                level);\n+        NodeTraversal.traverse(compiler, root, closure);\n+      }\n+    }\n+  }\n+\n+  // Run the checks on the AST.\n+  new CheckGlobalNames(this, options.getWarningLevel())\n+      .process(externsRoot, jsRoot);\n+}\n         for (CompilerInput input : inputs) {\n           // Forward-declare all the provided types, so that they\n           // are not flagged even if they are dropped from the process.",
    "result_reason": "error: 'try' without 'catch' or 'finally'",
    "test_result": "ERROR"
}