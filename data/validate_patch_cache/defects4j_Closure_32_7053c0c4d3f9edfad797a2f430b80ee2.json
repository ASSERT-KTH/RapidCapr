{
    "patch": "private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n        return new ExtractionInfo(\"\", token);\n    }\n\n    stream.update();\n    int startLineno = stream.getLineno();\n    int startCharno = stream.getCharno() + 1;\n\n    // Read the content from the first line.\n    String line = stream.getRemainingJSDocLine();\n    if (option != WhitespaceOption.PRESERVE) {\n        line = line.trim();\n    }\n\n    StringBuilder builder = new StringBuilder();\n    builder.append(line);\n\n    state = State.SEARCHING_ANNOTATION;\n    token = next();\n\n    boolean ignoreStar = false;\n\n    // Track the start of the line to count whitespace that\n    // the tokenizer skipped. Because this case is rare, it's easier\n    // to do this here than in the tokenizer.\n    while (token != JsDocToken.EOC && token != JsDocToken.EOF && builder.length() == 0) {\n        switch (token) {\n            case STAR:\n                if (ignoreStar) {\n                    // Mark the position after the star as the new start of the line.\n                } else {\n                    // The star is part of the comment.\n                    if (builder.length() > 0) {\n                        builder.append(' ');\n                    }\n                    builder.append('*');\n                }\n\n                token = next();\n                continue;\n\n            case EOL:\n                if (option != WhitespaceOption.SINGLE_LINE) {\n                    builder.append(\"\\n\");\n                }\n                ignoreStar = true;\n                token = next();\n                continue;\n\n            default:\n                ignoreStar = false;\n                state = State.SEARCHING_ANNOTATION;\n\n                // All tokens must be separated by a space.\n                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n                        // When we're capturing a license block, annotations\n                        // in the block are ok.\n                        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n                    if (builder.length() > 0) {\n                        String multilineText = builder.toString();\n\n                        if (option != WhitespaceOption.PRESERVE) {\n                            multilineText = multilineText.trim();\n                        }\n\n                        int endLineno = stream.getLineno();\n                        int endCharno = stream.getCharno();\n\n                        jsdocBuilder.markText(multilineText, startLineno, startCharno,\n                                endLineno, endCharno);\n                        return new ExtractionInfo(multilineText, token);\n\n                    } else {\n                        return new ExtractionInfo(\"\", token);\n                    }\n                }\n\n                if (builder.length() > 0) {\n                    builder.append(' ');\n                }\n                builder.append(toString(token));\n\n                line = stream.getRemainingJSDocLine();\n\n                if (option != WhitespaceOption.PRESERVE) {\n                    line = trimEnd(line);\n                }\n\n                builder.append(line);\n                token = next();\n        }\n    }\n\n    String multilineText = builder.toString();\n\n    if (option != WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n\n    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n        // All tokens must be separated by a space.\n        if (token == JsDocToken.ANNOTATION || token == JsDocToken.EOF) {\n            break;\n        } else if (token == JsDocToken.EOL) {\n            if (option != WhitespaceOption.SINGLE_LINE) {\n                multilineText += \"\\n\";\n            }\n            ignoreStar = true;\n        } else if (token == JsDocToken.STAR) {\n            ignoreStar = true;\n        } else {\n            ignoreStar = false;\n\n            if (multilineText.length() > 0 && builder.length() > 0) {\n                multilineText += \" \";\n            }\n\n            multilineText += builder.toString();\n            builder.setLength(0);\n            builder.append(toString(token));\n\n            line = stream.getRemainingJSDocLine();\n\n            if (option != WhitespaceOption.PRESERVE) {\n                line = trimEnd(line);\n            }\n\n            builder.append(line);\n        }\n\n        token = next();\n    }\n\n    if (option != WhitespaceOption.PRESERVE) {\n        multilineText = multilineText.trim();\n    }\n\n    int endLineno = stream.getLineno();\n    int endCharno = stream.getCharno();\n\n    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n\n    return new ExtractionInfo(multilineText, token);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex f6a64007..d7f3445f 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -1326,12 +1326,9 @@ public final class JsDocInfoParser {\n    * @return The extraction information.\n    */\n   @SuppressWarnings(\"fallthrough\")\n-  private ExtractionInfo extractMultilineTextualBlock(JsDocToken token,\n-                                                      WhitespaceOption option) {\n-\n-    if (token == JsDocToken.EOC || token == JsDocToken.EOL ||\n-        token == JsDocToken.EOF) {\n-      return new ExtractionInfo(\"\", token);\n+private ExtractionInfo extractMultilineTextualBlock(JsDocToken token, WhitespaceOption option) {\n+    if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) {\n+        return new ExtractionInfo(\"\", token);\n     }\n \n     stream.update();\n@@ -1341,7 +1338,7 @@ public final class JsDocInfoParser {\n     // Read the content from the first line.\n     String line = stream.getRemainingJSDocLine();\n     if (option != WhitespaceOption.PRESERVE) {\n-      line = line.trim();\n+        line = line.trim();\n     }\n \n     StringBuilder builder = new StringBuilder();\n@@ -1355,78 +1352,125 @@ public final class JsDocInfoParser {\n     // Track the start of the line to count whitespace that\n     // the tokenizer skipped. Because this case is rare, it's easier\n     // to do this here than in the tokenizer.\n+    while (token != JsDocToken.EOC && token != JsDocToken.EOF && builder.length() == 0) {\n+        switch (token) {\n+            case STAR:\n+                if (ignoreStar) {\n+                    // Mark the position after the star as the new start of the line.\n+                } else {\n+                    // The star is part of the comment.\n+                    if (builder.length() > 0) {\n+                        builder.append(' ');\n+                    }\n+                    builder.append('*');\n+                }\n+\n+                token = next();\n+                continue;\n+\n+            case EOL:\n+                if (option != WhitespaceOption.SINGLE_LINE) {\n+                    builder.append(\"\\n\");\n+                }\n+                ignoreStar = true;\n+                token = next();\n+                continue;\n+\n+            default:\n+                ignoreStar = false;\n+                state = State.SEARCHING_ANNOTATION;\n+\n+                // All tokens must be separated by a space.\n+                if (token == JsDocToken.EOC || token == JsDocToken.EOF ||\n+                        // When we're capturing a license block, annotations\n+                        // in the block are ok.\n+                        (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) {\n+                    if (builder.length() > 0) {\n+                        String multilineText = builder.toString();\n+\n+                        if (option != WhitespaceOption.PRESERVE) {\n+                            multilineText = multilineText.trim();\n+                        }\n \n-    do {\n-      switch (token) {\n-        case STAR:\n-          if (ignoreStar) {\n-            // Mark the position after the star as the new start of the line.\n-          } else {\n-            // The star is part of the comment.\n-            if (builder.length() > 0) {\n-              builder.append(' ');\n-            }\n+                        int endLineno = stream.getLineno();\n+                        int endCharno = stream.getCharno();\n \n-            builder.append('*');\n-          }\n+                        jsdocBuilder.markText(multilineText, startLineno, startCharno,\n+                                endLineno, endCharno);\n+                        return new ExtractionInfo(multilineText, token);\n \n-          token = next();\n-          continue;\n+                    } else {\n+                        return new ExtractionInfo(\"\", token);\n+                    }\n+                }\n \n-        case EOL:\n-          if (option != WhitespaceOption.SINGLE_LINE) {\n-            builder.append(\"\\n\");\n-          }\n+                if (builder.length() > 0) {\n+                    builder.append(' ');\n+                }\n+                builder.append(toString(token));\n \n-          ignoreStar = true;\n-          token = next();\n-          continue;\n+                line = stream.getRemainingJSDocLine();\n \n-        default:\n-          ignoreStar = false;\n-          state = State.SEARCHING_ANNOTATION;\n+                if (option != WhitespaceOption.PRESERVE) {\n+                    line = trimEnd(line);\n+                }\n \n-              // All tokens must be separated by a space.\n+                builder.append(line);\n+                token = next();\n+        }\n+    }\n \n-          if (token == JsDocToken.EOC ||\n-              token == JsDocToken.EOF ||\n-              // When we're capturing a license block, annotations\n-              // in the block are ok.\n-              (token == JsDocToken.ANNOTATION &&\n-               option != WhitespaceOption.PRESERVE)) {\n-            String multilineText = builder.toString();\n+    String multilineText = builder.toString();\n \n-            if (option != WhitespaceOption.PRESERVE) {\n-              multilineText = multilineText.trim();\n+    if (option != WhitespaceOption.PRESERVE) {\n+        multilineText = multilineText.trim();\n+    }\n+\n+    while (token != JsDocToken.EOC && token != JsDocToken.EOF) {\n+        // All tokens must be separated by a space.\n+        if (token == JsDocToken.ANNOTATION || token == JsDocToken.EOF) {\n+            break;\n+        } else if (token == JsDocToken.EOL) {\n+            if (option != WhitespaceOption.SINGLE_LINE) {\n+                multilineText += \"\\n\";\n             }\n+            ignoreStar = true;\n+        } else if (token == JsDocToken.STAR) {\n+            ignoreStar = true;\n+        } else {\n+            ignoreStar = false;\n+\n+            if (multilineText.length() > 0 && builder.length() > 0) {\n+                multilineText += \" \";\n+            }\n+\n+            multilineText += builder.toString();\n+            builder.setLength(0);\n+            builder.append(toString(token));\n \n-            int endLineno = stream.getLineno();\n-            int endCharno = stream.getCharno();\n+            line = stream.getRemainingJSDocLine();\n \n-            if (multilineText.length() > 0) {\n-              jsdocBuilder.markText(multilineText, startLineno, startCharno,\n-                  endLineno, endCharno);\n+            if (option != WhitespaceOption.PRESERVE) {\n+                line = trimEnd(line);\n             }\n \n-            return new ExtractionInfo(multilineText, token);\n-          }\n+            builder.append(line);\n+        }\n \n-          if (builder.length() > 0) {\n-            builder.append(' ');\n-          }\n-          builder.append(toString(token));\n+        token = next();\n+    }\n \n-          line = stream.getRemainingJSDocLine();\n+    if (option != WhitespaceOption.PRESERVE) {\n+        multilineText = multilineText.trim();\n+    }\n \n-          if (option != WhitespaceOption.PRESERVE) {\n-            line = trimEnd(line);\n-          }\n+    int endLineno = stream.getLineno();\n+    int endCharno = stream.getCharno();\n \n-          builder.append(line);\n-          token = next();\n-      }\n-    } while (true);\n-  }\n+    jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);\n+\n+    return new ExtractionInfo(multilineText, token);\n+}\n \n \n   /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...testcode\", \"count\": [6 }",
    "test_result": "FAIL"
}