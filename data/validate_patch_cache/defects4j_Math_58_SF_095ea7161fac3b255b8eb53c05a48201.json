{
    "patch": "public class PositiveParameterGuesser extends ParameterGuesser {\n    \n    public PositiveParameterGuesser(WeightedObservedPoints observations) {\n        super(observations);\n    }\n\n    /**\n     * The original method in ParameterGuesser class generates guess values\n     * based on the observed points. We override this method here to generate\n     * strictly positive guess values to avoid NotStrictlyPositiveException\n     * in the fit method of CurveFitter.\n     */\n    @Override\n    public double[] guess() {\n        double[] guess = super.guess();\n        for (int i = 0; i < guess.length; i++) {\n            if (guess[i] <= 0) {\n                guess[i] = Math.abs(guess[i]) + 1.0;\n            }\n        }\n        return guess;\n    }\n    \n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..29274925f 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,11 +116,31 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public class PositiveParameterGuesser extends ParameterGuesser {\n+    \n+    public PositiveParameterGuesser(WeightedObservedPoints observations) {\n+        super(observations);\n     }\n \n+    /**\n+     * The original method in ParameterGuesser class generates guess values\n+     * based on the observed points. We override this method here to generate\n+     * strictly positive guess values to avoid NotStrictlyPositiveException\n+     * in the fit method of CurveFitter.\n+     */\n+    @Override\n+    public double[] guess() {\n+        double[] guess = super.guess();\n+        for (int i = 0; i < guess.length; i++) {\n+            if (guess[i] <= 0) {\n+                guess[i] = Math.abs(guess[i]) + 1.0;\n+            }\n+        }\n+        return guess;\n+    }\n+    \n+}\n+\n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}\n      * of a {@link org.apache.commons.math.analysis.function.Gaussian.Parametric}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}