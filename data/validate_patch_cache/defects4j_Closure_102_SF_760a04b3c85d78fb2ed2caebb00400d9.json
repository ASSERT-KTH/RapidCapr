{
    "patch": "  public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, root, this);\n    if (MAKE_LOCAL_NAMES_UNIQUE) {\n      MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n      NodeTraversal t = new NodeTraversal(compiler, renamer);\n      CompilerInput externsInput = new CompilerInput(externs);\n      CompilerInput rootInput = new CompilerInput(root);\n      t.traverse(externsInput, rootInput);\n    }\n    removeDuplicateDeclarations(root);\n    new PropogateConstantAnnotations(compiler, assertOnChange)\n        .process(externs, root);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Normalize.java b/src/com/google/javascript/jscomp/Normalize.java\nindex 4aa45558..40948fff 100644\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n@@ -89,7 +89,9 @@ class Normalize implements CompilerPass, Callback {\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n-      t.traverseRoots(externs, root);\n+      CompilerInput externsInput = new CompilerInput(externs);\n+      CompilerInput rootInput = new CompilerInput(root);\n+      t.traverse(externsInput, rootInput);\n     }\n     removeDuplicateDeclarations(root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)",
    "result_reason": "error: no suitable constructor found for CompilerInput(Node)",
    "test_result": "ERROR"
}