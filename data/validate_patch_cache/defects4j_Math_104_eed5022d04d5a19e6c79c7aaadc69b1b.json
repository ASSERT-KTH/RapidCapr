{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        Dfp result = newInstance(getField());\n        int factor = x >= 0 ? x : -x;\n        int remaining = factor;\n        int power = 1;\n        while (remaining != 0) {\n            if ((remaining & 1) != 0) {\n                power *= RADIX;\n                result = result.multiply(multiplyFast(power));\n            }\n            remaining >>= 1;\n            power *= RADIX;\n        }\n        return x >= 0 ? result : result.negate();\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..977dea44f 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,25 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        Dfp result = newInstance(getField());\n+        int factor = x >= 0 ? x : -x;\n+        int remaining = factor;\n+        int power = 1;\n+        while (remaining != 0) {\n+            if ((remaining & 1) != 0) {\n+                power *= RADIX;\n+                result = result.multiply(multiplyFast(power));\n+            }\n+            remaining >>= 1;\n+            power *= RADIX;\n+        }\n+        return x >= 0 ? result : result.negate();\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}