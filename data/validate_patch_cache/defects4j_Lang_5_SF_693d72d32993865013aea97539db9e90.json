{
    "patch": "    public static Locale toLocale(final String str) {\n        if (str == null || str.isEmpty()) {\n            return null;\n        }\n        final String[] parts = str.split(\"_\");\n        final int size = parts.length;\n        if (size == 0) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final String language = parts[0];\n        if (language.isEmpty() || !Character.isLowerCase(language.charAt(0))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final String country = size < 2 ? \"\" : parts[1];\n        if (!country.isEmpty() && !Character.isUpperCase(country.charAt(0))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        final String variant = size < 3 ? \"\" : parts[2];\n        if (variant.isEmpty() ||\n                (variant.indexOf('0') == -1 && !Character.isDigit(variant.charAt(0)))) {\n            return new Locale(language, country, variant);\n        }\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..2121dd68 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -86,45 +86,28 @@ public class LocaleUtils {\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n     public static Locale toLocale(final String str) {\n-        if (str == null) {\n+        if (str == null || str.isEmpty()) {\n             return null;\n         }\n-        final int len = str.length();\n-        if (len < 2) {\n+        final String[] parts = str.split(\"_\");\n+        final int size = parts.length;\n+        if (size == 0) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        final String language = parts[0];\n+        if (language.isEmpty() || !Character.isLowerCase(language.charAt(0))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        final String country = size < 2 ? \"\" : parts[1];\n+        if (!country.isEmpty() && !Character.isUpperCase(country.charAt(0))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        final String variant = size < 3 ? \"\" : parts[2];\n+        if (variant.isEmpty() ||\n+                (variant.indexOf('0') == -1 && !Character.isDigit(variant.charAt(0)))) {\n+            return new Locale(language, country, variant);\n+        }\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}