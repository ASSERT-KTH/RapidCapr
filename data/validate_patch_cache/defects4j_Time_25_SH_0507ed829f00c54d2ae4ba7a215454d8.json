{
    "patch": "if (offsetLocal != offsetAdjusted) {\n    // we need to ensure that time is always after the DST gap\n    // this happens naturally for positive offsets, but not for negative\n    long transition;\n    if (offsetLocal < offsetAdjusted) {\n        transition = nextTransition(instantAdjusted);\n        if (instantLocal >= transition - (offsetAdjusted - offsetLocal)) {\n            return offsetAdjusted;\n        }\n    } else {\n        transition = previousTransition(instantAdjusted);\n        if (instantLocal < transition - (offsetLocal - offsetAdjusted)) {\n            long prevTransition = previousTransition(instantAdjusted - 1);\n            int prevOffset = getOffset(prevTransition);\n            if (prevOffset == offsetAdjusted) {\n                return prevOffset;\n            }\n            return offsetLocal;\n        }\n    }\n}\nreturn offsetAdjusted;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..1a9d675d 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,28 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal != offsetAdjusted) {\n+    // we need to ensure that time is always after the DST gap\n+    // this happens naturally for positive offsets, but not for negative\n+    long transition;\n+    if (offsetLocal < offsetAdjusted) {\n+        transition = nextTransition(instantAdjusted);\n+        if (instantLocal >= transition - (offsetAdjusted - offsetLocal)) {\n+            return offsetAdjusted;\n+        }\n+    } else {\n+        transition = previousTransition(instantAdjusted);\n+        if (instantLocal < transition - (offsetLocal - offsetAdjusted)) {\n+            long prevTransition = previousTransition(instantAdjusted - 1);\n+            int prevOffset = getOffset(prevTransition);\n+            if (prevOffset == offsetAdjusted) {\n+                return prevOffset;\n+            }\n+            return offsetLocal;\n+        }\n+    }\n+}\n+return offsetAdjusted;\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}