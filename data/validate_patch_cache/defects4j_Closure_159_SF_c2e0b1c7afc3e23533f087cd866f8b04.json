{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n\n    if (node == null) {\n        return;\n    }\n\n    int type = node.getType();\n    if (type == Token.CALL) {\n        for (Node child : node.children()) {\n            if (child.getType() == Token.NAME) {\n                changed.add(child.getString());\n                break;\n            }\n        }\n    } else if (type == Token.FUNCTION) {\n        Node functionNameNode = node.getFirstChild();\n        if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n          changed.add(functionNameNode.getString());\n        }\n    } else {\n        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n            findCalledFunctions(c, changed);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..f5f9105f 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,32 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n+\n+    if (node == null) {\n+        return;\n     }\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    int type = node.getType();\n+    if (type == Token.CALL) {\n+        for (Node child : node.children()) {\n+            if (child.getType() == Token.NAME) {\n+                changed.add(child.getString());\n+                break;\n+            }\n+        }\n+    } else if (type == Token.FUNCTION) {\n+        Node functionNameNode = node.getFirstChild();\n+        if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n+          changed.add(functionNameNode.getString());\n+        }\n+    } else {\n+        for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+            findCalledFunctions(c, changed);\n+        }\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}