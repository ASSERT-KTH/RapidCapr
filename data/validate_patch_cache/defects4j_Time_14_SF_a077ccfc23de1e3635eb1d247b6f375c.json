{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    if (valueToAdd == 0) {\n        return values;\n    }\n    if (!DateTimeUtils.isContiguous(partial)) {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n    int currentMonthLen = iChronology.getDaysInYearMonth(\n            values[iChronology.year().get(partial)],\n            values[iChronology.monthOfYear().get(partial)]);\n    int wrappedMonth = (values[fieldIndex] + valueToAdd) - 1;\n    int wrappedYear = values[iChronology.year().get(partial)] + (wrappedMonth / 12);\n    wrappedMonth = wrappedMonth % 12 + 1;\n    int wrappedMonthLen = iChronology.getDaysInYearMonth(wrappedYear, wrappedMonth);\n\n    int wrappedDay = values[iChronology.dayOfMonth().get(partial)];\n    if (wrappedDay > wrappedMonthLen) {\n        wrappedDay = wrappedMonthLen;\n    }\n\n    int[] wrappedValues = Arrays.copyOf(values, values.length);\n    wrappedValues[fieldIndex] = wrappedMonth;\n    wrappedValues[iChronology.year().get(partial)] = wrappedYear;\n    wrappedValues[iChronology.dayOfMonth().get(partial)] = wrappedDay;\n\n    return wrappedValues;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..f3f96750 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,33 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n-        }\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    if (!DateTimeUtils.isContiguous(partial)) {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+    int currentMonthLen = iChronology.getDaysInYearMonth(\n+            values[iChronology.year().get(partial)],\n+            values[iChronology.monthOfYear().get(partial)]);\n+    int wrappedMonth = (values[fieldIndex] + valueToAdd) - 1;\n+    int wrappedYear = values[iChronology.year().get(partial)] + (wrappedMonth / 12);\n+    wrappedMonth = wrappedMonth % 12 + 1;\n+    int wrappedMonthLen = iChronology.getDaysInYearMonth(wrappedYear, wrappedMonth);\n+\n+    int wrappedDay = values[iChronology.dayOfMonth().get(partial)];\n+    if (wrappedDay > wrappedMonthLen) {\n+        wrappedDay = wrappedMonthLen;\n+    }\n+\n+    int[] wrappedValues = Arrays.copyOf(values, values.length);\n+    wrappedValues[fieldIndex] = wrappedMonth;\n+    wrappedValues[iChronology.year().get(partial)] = wrappedYear;\n+    wrappedValues[iChronology.dayOfMonth().get(partial)] = wrappedDay;\n+\n+    return wrappedValues;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: method get in class DateTimeField cannot be applied to given types;",
    "test_result": "ERROR"
}