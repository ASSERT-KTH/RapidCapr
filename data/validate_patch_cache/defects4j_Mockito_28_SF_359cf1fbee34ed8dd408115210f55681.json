{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        try {\n            field.setAccessible(true);\n            Object fieldValue = field.get(fieldInstance);\n            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n            if (mockCandidate != null && (fieldValue == null || !fieldValue.equals(mockCandidate))) {\n                field.set(fieldInstance, mockCandidate);\n            }\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..f948fdda7 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,11 +88,21 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n-    private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n-        for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n-        }\n-    }\n+\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        try {\n+            field.setAccessible(true);\n+            Object fieldValue = field.get(fieldInstance);\n+            Object mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            if (mockCandidate != null && (fieldValue == null || !fieldValue.equals(mockCandidate))) {\n+                field.set(fieldInstance, mockCandidate);\n+            }\n+        } catch (IllegalAccessException e) {\n+            throw new RuntimeException(\"Could not access field \" + field.getName(), e);\n+        }\n+    }\n+}\n \n     private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) {\n         Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<java.lang.Object@4d21ca52> was not:<mockedBean>",
    "test_result": "FAIL"
}