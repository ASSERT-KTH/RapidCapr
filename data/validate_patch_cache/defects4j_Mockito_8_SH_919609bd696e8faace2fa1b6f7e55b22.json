{
    "patch": "            } else if (actualTypeArgument instanceof Class) {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            } else {\n                WildcardType wildcardType = (WildcardType) actualTypeArgument;\n                Type[] bounds = wildcardType.getUpperBounds();\n                if (bounds.length == 0) {\n                    bounds = wildcardType.getLowerBounds();\n                }\n                if (bounds.length > 0) {\n                    contextualActualTypeParameters.put(typeParameter, bounds[0]);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..20909fbf4 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,18 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof Class) {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            } else {\n+                WildcardType wildcardType = (WildcardType) actualTypeArgument;\n+                Type[] bounds = wildcardType.getUpperBounds();\n+                if (bounds.length == 0) {\n+                    bounds = wildcardType.getLowerBounds();\n+                }\n+                if (bounds.length > 0) {\n+                    contextualActualTypeParameters.put(typeParameter, bounds[0]);\n+                }\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}