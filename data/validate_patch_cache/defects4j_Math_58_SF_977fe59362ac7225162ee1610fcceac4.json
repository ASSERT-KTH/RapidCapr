{
    "patch": "public double[] fit() {\n    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n    if (guess[1] <= 0) {\n        guess[1] = Math.abs(guess[1]) + 0.1;\n    }\n    final double[] lower = {0, 0, 0};\n    lower[1] = -Double.MAX_VALUE;\n    final double[] upper = {Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE};\n    return new LevenbergMarquardtOptimizer().optimize(\n            new Gaussian.Parametric(),\n            new Target(this),\n            getObservations(),\n            guess,\n            new double[][] {new double[getObservations().length]},\n            new double[][] {new double[getObservations().length]},\n            lower,\n            upper).getPoint().toArray();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..d8babb6ef 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -116,10 +116,24 @@ public class GaussianFitter extends CurveFitter {\n      * @return the parameters of the Gaussian function that best fits the\n      * observed points (in the same order as above).\n      */\n-    public double[] fit() {\n-        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+public double[] fit() {\n+    final double[] guess = (new ParameterGuesser(getObservations())).guess();\n+    if (guess[1] <= 0) {\n+        guess[1] = Math.abs(guess[1]) + 0.1;\n     }\n+    final double[] lower = {0, 0, 0};\n+    lower[1] = -Double.MAX_VALUE;\n+    final double[] upper = {Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE};\n+    return new LevenbergMarquardtOptimizer().optimize(\n+            new Gaussian.Parametric(),\n+            new Target(this),\n+            getObservations(),\n+            guess,\n+            new double[][] {new double[getObservations().length]},\n+            new double[][] {new double[getObservations().length]},\n+            lower,\n+            upper).getPoint().toArray();\n+}\n \n     /**\n      * Guesses the parameters {@code norm}, {@code mean}, and {@code sigma}",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}