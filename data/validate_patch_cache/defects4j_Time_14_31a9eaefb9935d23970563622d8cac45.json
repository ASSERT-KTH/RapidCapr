{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n\n        int[] newValues = Arrays.copyOf(values, values.length);\n        \n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (i == fieldIndex) {\n                    int curValue = partial.getField(i).get(instant);\n                    int newValue = getField(partial.getFieldType(i).getField(iChronology).add(instant, curValue), valueToAdd);\n                    partial.getField(i).set(instant, newValue);\n                    newValues[i] = partial.getField(i).get(instant);\n                } else {\n                    int curValue = partial.getField(i).get(instant);\n                    newValues[i] = getField(partial.getFieldType(i).getField(iChronology).add(instant, curValue), valueToAdd);\n                }\n            }\n        } else {\n            int curValue = partial.getField(fieldIndex).get(0L);\n            int newValue = getField(partial.getFieldType(fieldIndex).getField(iChronology).add(0L, curValue), valueToAdd);\n            partial.getField(fieldIndex).set(0L, newValue);\n            newValues[fieldIndex] = partial.getField(fieldIndex).get(0L);\n        }\n        \n        return iChronology.validate(partial, newValues);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..de5f0b64 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,17 +206,31 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+\n+        int[] newValues = Arrays.copyOf(values, values.length);\n+        \n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                if (i == fieldIndex) {\n+                    int curValue = partial.getField(i).get(instant);\n+                    int newValue = getField(partial.getFieldType(i).getField(iChronology).add(instant, curValue), valueToAdd);\n+                    partial.getField(i).set(instant, newValue);\n+                    newValues[i] = partial.getField(i).get(instant);\n+                } else {\n+                    int curValue = partial.getField(i).get(instant);\n+                    newValues[i] = getField(partial.getFieldType(i).getField(iChronology).add(instant, curValue), valueToAdd);\n+                }\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            int curValue = partial.getField(fieldIndex).get(0L);\n+            int newValue = getField(partial.getFieldType(fieldIndex).getField(iChronology).add(0L, curValue), valueToAdd);\n+            partial.getField(fieldIndex).set(0L, newValue);\n+            newValues[fieldIndex] = partial.getField(fieldIndex).get(0L);\n         }\n+        \n+        return iChronology.validate(partial, newValues);\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}