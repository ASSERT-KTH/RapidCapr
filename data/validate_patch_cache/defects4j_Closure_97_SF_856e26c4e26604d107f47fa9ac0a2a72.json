{
    "patch": "  private Node tryFoldShift(Node n, Node left, Node right) {\n    if (left.getType() == Token.NUMBER &&\n        right.getType() == Token.NUMBER) {\n\n      double lval = left.getDouble();\n      double rval = right.getDouble();\n      boolean invalidOperand = false;\n\n      // check ranges.  We do not do anything that would clip the double to\n      // a 32-bit range, since the user likely does not intend that.\n      if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n        error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n        invalidOperand = true;\n      }\n\n      // only the lower 5 bits are used when shifting, so don't do anything\n      // if the shift amount is outside [0,32)\n      if (!(rval >= 0 && rval < 32)) {\n        error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n        invalidOperand = true;\n      }\n\n      if (invalidOperand) {\n        return n;\n      }\n\n      // Convert the numbers to ints\n      int lvalInt = (int) lval;\n      int rvalInt = (int) rval;\n\n      if (lvalInt != lval) {\n        error(FRACTIONAL_BITWISE_OPERAND, left);\n        return n;\n      }\n\n      if (rvalInt != rval) {\n        error(FRACTIONAL_BITWISE_OPERAND, right);\n        return n;\n      }\n\n      switch (n.getType()) {\n        case Token.LSH:\n          return Node.newNumber(lvalInt << rvalInt);\n        case Token.RSH:\n          return Node.newNumber(lvalInt >> rvalInt);\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          return Node.newNumber(lvalInt >>> rvalInt);\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Node.tokenToName(n.getType()));\n      }\n    }\n\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex d6c194a3..24825f1b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -653,32 +653,37 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     if (left.getType() == Token.NUMBER &&\n         right.getType() == Token.NUMBER) {\n \n-      double result;\n       double lval = left.getDouble();\n       double rval = right.getDouble();\n+      boolean invalidOperand = false;\n \n       // check ranges.  We do not do anything that would clip the double to\n       // a 32-bit range, since the user likely does not intend that.\n       if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {\n         error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n-        return n;\n+        invalidOperand = true;\n       }\n \n       // only the lower 5 bits are used when shifting, so don't do anything\n       // if the shift amount is outside [0,32)\n       if (!(rval >= 0 && rval < 32)) {\n         error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);\n+        invalidOperand = true;\n+      }\n+\n+      if (invalidOperand) {\n         return n;\n       }\n \n       // Convert the numbers to ints\n       int lvalInt = (int) lval;\n+      int rvalInt = (int) rval;\n+\n       if (lvalInt != lval) {\n         error(FRACTIONAL_BITWISE_OPERAND, left);\n         return n;\n       }\n \n-      int rvalInt = (int) rval;\n       if (rvalInt != rval) {\n         error(FRACTIONAL_BITWISE_OPERAND, right);\n         return n;\n@@ -686,27 +691,18 @@ public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n       switch (n.getType()) {\n         case Token.LSH:\n-          result = lvalInt << rvalInt;\n-          break;\n+          return Node.newNumber(lvalInt << rvalInt);\n         case Token.RSH:\n-          result = lvalInt >> rvalInt;\n-          break;\n+          return Node.newNumber(lvalInt >> rvalInt);\n         case Token.URSH:\n           // JavaScript handles zero shifts on signed numbers differently than\n           // Java as an Java int can not represent the unsigned 32-bit number\n           // where JavaScript can so use a long here.\n-          result = lvalInt >>> rvalInt;\n-          break;\n+          return Node.newNumber(lvalInt >>> rvalInt);\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n               Node.tokenToName(n.getType()));\n       }\n-\n-      Node newNumber = Node.newNumber(result);\n-      n.getParent().replaceChild(n, newNumber);\n-      reportCodeChange();\n-\n-      return newNumber;\n     }\n \n     return n;",
    "result_reason": "junit.framework.ComparisonFailure: expected:<x=-[2]> but was:<x=-[1<<1]>",
    "test_result": "FAIL"
}