{
    "patch": "public static Number createNumber(String str) throws NumberFormatException {\n    if (str == null || str.isEmpty()) {\n        return null;\n    }\n\n    // Handle hex and octal cases separately\n    final int sz = str.length();\n    if (sz > 1) {\n        final char firstChar = str.charAt(0);\n        final char secondChar = str.charAt(1);\n\n        if ((firstChar == '0') && (secondChar == 'x' || secondChar == 'X')) {\n            try {\n                return createIntegerFromHex(str);\n            } catch (NumberFormatException nfe) {\n                // ignored, continue below\n            }\n        } else if (ALLOW_LEADING_ZEROS && (firstChar == '0')) {\n            try {\n                return createInteger(str);\n            } catch (NumberFormatException nfe) {\n                // ignored, continue below\n            }\n        }\n    }\n\n    // Process decimal point, exponents, and any other non-digit characters\n    final char[] chars = str.toCharArray();\n    boolean hasDecimalPoint = false;\n    boolean hasExponent = false;\n    boolean allowSigns = true;\n    boolean foundDigit = false;\n    final int start = (chars[0] == '-') ? 1 : 0;\n    int i = start;\n    Number number;\n\n    // Skip leading plus signs\n    if (sz > start + 1 && (chars[start] == '+') && allowSigns) {\n        ++i;\n    }\n\n    // Process numbers and any other characters after the initial sign\n    for (; i < sz; ++i) {\n        final char ch = chars[i];\n\n        // Ensure only valid digits, decimal points, exponent signs, and signs are processed\n        if ((ch >= '0' && ch <= '9') || ch == '.') {\n            foundDigit = true;\n        } else if (ch == 'e' || ch == 'E') {\n            if (hasExponent || !foundDigit) {\n                throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n            }\n            hasExponent = true;\n            allowSigns = true;\n        } else if ((ch == '+' || ch == '-') && allowSigns) {\n            allowSigns = false;\n            foundDigit = false;\n        } else {\n            throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n        }\n\n        if (ch == '.' && hasDecimalPoint) {\n            throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n        }\n        hasDecimalPoint |= (ch == '.');\n    }\n\n    // Parse the number string based on its type\n    if (hasExponent) {\n        number = createBigDecimal(str);\n    } else if (hasDecimalPoint) {\n        number = createDouble(str);\n    } else if (foundDigit && (sz - start <= 18)) {\n        try {\n            number = createLong(str);\n        } catch (NumberFormatException nfe) {\n            number = createBigInteger(str);\n        }\n    } else {\n        number = createBigInteger(str);\n    }\n\n    return number;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex fd03ab8f..d8eaa0a2 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -449,155 +449,91 @@ public class NumberUtils {\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String str) throws NumberFormatException {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (StringUtils.isBlank(str)) {\n-            throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"--\")) {\n-            // this is protection for poorness in java.lang.BigDecimal.\n-            // it accepts this as a legal value, but it does not appear \n-            // to be in specification of class. OS X Java parses it to \n-            // a wrong value.\n-            return null;\n-        }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n-            return createInteger(str);\n-        }   \n-        char lastChar = str.charAt(str.length() - 1);\n-        String mant;\n-        String dec;\n-        String exp;\n-        int decPos = str.indexOf('.');\n-        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n-\n-        if (decPos > -1) {\n-\n-            if (expPos > -1) {\n-                if (expPos < decPos) {\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                }\n-                dec = str.substring(decPos + 1, expPos);\n-            } else {\n-                dec = str.substring(decPos + 1);\n+public static Number createNumber(String str) throws NumberFormatException {\n+    if (str == null || str.isEmpty()) {\n+        return null;\n+    }\n+\n+    // Handle hex and octal cases separately\n+    final int sz = str.length();\n+    if (sz > 1) {\n+        final char firstChar = str.charAt(0);\n+        final char secondChar = str.charAt(1);\n+\n+        if ((firstChar == '0') && (secondChar == 'x' || secondChar == 'X')) {\n+            try {\n+                return createIntegerFromHex(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignored, continue below\n             }\n-            mant = str.substring(0, decPos);\n-        } else {\n-            if (expPos > -1) {\n-                mant = str.substring(0, expPos);\n-            } else {\n-                mant = str;\n+        } else if (ALLOW_LEADING_ZEROS && (firstChar == '0')) {\n+            try {\n+                return createInteger(str);\n+            } catch (NumberFormatException nfe) {\n+                // ignored, continue below\n             }\n-            dec = null;\n         }\n-        if (!Character.isDigit(lastChar) && lastChar != '.') {\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length() - 1);\n-            } else {\n-                exp = null;\n-            }\n-            //Requesting a specific type..\n-            String numeric = str.substring(0, str.length() - 1);\n-            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-            switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n-                    if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n-                        try {\n-                            return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n-                        }\n-                        return createBigInteger(numeric);\n+    }\n \n-                    }\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n-                    try {\n-                        Float f = NumberUtils.createFloat(numeric);\n-                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                            //If it's too big for a float or the float value = 0 and the string\n-                            //has non-zeros in it, then float does not have the precision we want\n-                            return f;\n-                        }\n-\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n-                    try {\n-                        Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n-                            return d;\n-                        }\n-                    } catch (NumberFormatException nfe) {\n-                        // ignore the bad number\n-                    }\n-                    try {\n-                        return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n-                        // ignore the bad number\n-                    }\n-                    //$FALL-THROUGH$\n-                default :\n-                    throw new NumberFormatException(str + \" is not a valid number.\");\n+    // Process decimal point, exponents, and any other non-digit characters\n+    final char[] chars = str.toCharArray();\n+    boolean hasDecimalPoint = false;\n+    boolean hasExponent = false;\n+    boolean allowSigns = true;\n+    boolean foundDigit = false;\n+    final int start = (chars[0] == '-') ? 1 : 0;\n+    int i = start;\n+    Number number;\n \n+    // Skip leading plus signs\n+    if (sz > start + 1 && (chars[start] == '+') && allowSigns) {\n+        ++i;\n+    }\n+\n+    // Process numbers and any other characters after the initial sign\n+    for (; i < sz; ++i) {\n+        final char ch = chars[i];\n+\n+        // Ensure only valid digits, decimal points, exponent signs, and signs are processed\n+        if ((ch >= '0' && ch <= '9') || ch == '.') {\n+            foundDigit = true;\n+        } else if (ch == 'e' || ch == 'E') {\n+            if (hasExponent || !foundDigit) {\n+                throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n             }\n+            hasExponent = true;\n+            allowSigns = true;\n+        } else if ((ch == '+' || ch == '-') && allowSigns) {\n+            allowSigns = false;\n+            foundDigit = false;\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n-                try {\n-                    Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (NumberFormatException nfe) {\n-                    // ignore the bad number\n-                }\n+            throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n+        }\n \n-                return createBigDecimal(str);\n+        if (ch == '.' && hasDecimalPoint) {\n+            throw new NumberFormatException(String.format(\"Invalid number: %s\", str));\n+        }\n+        hasDecimalPoint |= (ch == '.');\n+    }\n \n-            }\n+    // Parse the number string based on its type\n+    if (hasExponent) {\n+        number = createBigDecimal(str);\n+    } else if (hasDecimalPoint) {\n+        number = createDouble(str);\n+    } else if (foundDigit && (sz - start <= 18)) {\n+        try {\n+            number = createLong(str);\n+        } catch (NumberFormatException nfe) {\n+            number = createBigInteger(str);\n         }\n+    } else {\n+        number = createBigInteger(str);\n     }\n \n+    return number;\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}