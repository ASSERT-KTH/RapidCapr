{
    "patch": "private void tryMinimizeIfBlockExits(Node trueBlock,\n                                      Node falseBlock,\n                                      Node parentIfNode,\n                                      int exitType,\n                                      String labelName) {\n\n    // Assume \"if (condition) { trueBlock } else { falseBlock }\"\n\n    // Check if the true block is a Label node and get its enclosing function body.\n    Node originalTrueBlock = trueBlock;\n    if (trueBlock.isLabel()) {\n      trueBlock = trueBlock.getLastChild();\n    }\n    Node enclosingFunction = NodeUtil.getEnclosingFunction(originalTrueBlock);\n    Preconditions.checkNotNull(enclosingFunction);\n\n    // Check if the false block is a Label node and get its enclosing function body.\n    Node originalFalseBlock = falseBlock;\n    if (falseBlock != null && falseBlock.isLabel()) {\n      falseBlock = falseBlock.getLastChild();\n    }\n\n    // Check if both blocks are non-returning.\n    boolean trueBlockNonReturning =\n        !NodeUtil.mayHaveSideEffects(trueBlock) && trueBlock.hasChildren();\n    boolean falseBlockNonReturning =\n        falseBlock == null || (!NodeUtil.mayHaveSideEffects(falseBlock) && falseBlock.hasChildren());\n\n    if (trueBlockNonReturning && falseBlockNonReturning) {\n      // Example, \"if (blah) { } else { }\"\n      NodeUtil.removeChild(parentIfNode.getParent(), parentIfNode);\n      return;\n    }\n\n    if (trueBlockNonReturning) {\n      // Example, \"if (blah) { } else { some_stmt }\"\n      NodeUtil.removeChild(parentIfNode, trueBlock.getParent());\n      return;\n    }\n\n    if (falseBlockNonReturning) {\n      // Example, \"if (blah) { some_stmt } else { }\"\n      if (falseBlock != null) {\n        NodeUtil.removeChild(parentIfNode, falseBlock.getParent());\n      }\n      if (parentIfNode.isIf()) {\n        Node newTrueBlock;\n        if (trueBlock.isBlock()) {\n          newTrueBlock =\n              IR.block(trueBlock.detachChildren())\n                  .srcrefIfMissing(parentIfNode)\n                  .setJSDocInfo(parentIfNode.getJSDocInfo())\n                  .setStaticSourceFile(parentIfNode.getStaticSourceFile());\n        } else {\n          newTrueBlock = IR.block(trueBlock)",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..9778c720 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -103,102 +103,61 @@ class MinimizeExitPoints\n    *   null otherwise.\n    * @nullable labelName non-null only for breaks within labels.\n    */\n-  void tryMinimizeExits(Node n, int exitType, String labelName) {\n+private void tryMinimizeIfBlockExits(Node trueBlock,\n+                                      Node falseBlock,\n+                                      Node parentIfNode,\n+                                      int exitType,\n+                                      String labelName) {\n \n-    // Just an 'exit'.\n-    if (matchingExitNode(n, exitType, labelName)) {\n-      NodeUtil.removeChild(n.getParent(), n);\n-      compiler.reportCodeChange();\n-      return;\n-    }\n+    // Assume \"if (condition) { trueBlock } else { falseBlock }\"\n \n-    // Just an 'if'.\n-    if (n.isIf()) {\n-      Node ifBlock = n.getFirstChild().getNext();\n-      tryMinimizeExits(ifBlock, exitType, labelName);\n-      Node elseBlock = ifBlock.getNext();\n-      if (elseBlock != null) {\n-        tryMinimizeExits(elseBlock, exitType, labelName);\n-      }\n-      return;\n+    // Check if the true block is a Label node and get its enclosing function body.\n+    Node originalTrueBlock = trueBlock;\n+    if (trueBlock.isLabel()) {\n+      trueBlock = trueBlock.getLastChild();\n     }\n+    Node enclosingFunction = NodeUtil.getEnclosingFunction(originalTrueBlock);\n+    Preconditions.checkNotNull(enclosingFunction);\n \n-    // Just a 'try/catch/finally'.\n-    if (n.isTry()) {\n-      Node tryBlock = n.getFirstChild();\n-      tryMinimizeExits(tryBlock, exitType, labelName);\n-      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n-        Preconditions.checkState(allCatchNodes.hasOneChild());\n-        Node catchNode = allCatchNodes.getFirstChild();\n-        Node catchCodeBlock = catchNode.getLastChild();\n-        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n-      }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n-    }\n-\n-    // Just a 'label'.\n-    if (n.isLabel()) {\n-      Node labelBlock = n.getLastChild();\n-      tryMinimizeExits(labelBlock, exitType, labelName);\n+    // Check if the false block is a Label node and get its enclosing function body.\n+    Node originalFalseBlock = falseBlock;\n+    if (falseBlock != null && falseBlock.isLabel()) {\n+      falseBlock = falseBlock.getLastChild();\n     }\n \n-    // TODO(johnlenz): The last case of SWITCH statement?\n+    // Check if both blocks are non-returning.\n+    boolean trueBlockNonReturning =\n+        !NodeUtil.mayHaveSideEffects(trueBlock) && trueBlock.hasChildren();\n+    boolean falseBlockNonReturning =\n+        falseBlock == null || (!NodeUtil.mayHaveSideEffects(falseBlock) && falseBlock.hasChildren());\n \n-    // The rest assumes a block with at least one child, bail on anything else.\n-    if (!n.isBlock() || n.getLastChild() == null) {\n+    if (trueBlockNonReturning && falseBlockNonReturning) {\n+      // Example, \"if (blah) { } else { }\"\n+      NodeUtil.removeChild(parentIfNode.getParent(), parentIfNode);\n       return;\n     }\n \n-    // Multiple if-exits can be converted in a single pass.\n-    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n-    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n-    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n-    for (Node c : n.children()) {\n-\n-      // An 'if' block to process below.\n-      if (c.isIf()) {\n-        Node ifTree = c;\n-        Node trueBlock, falseBlock;\n-\n-        // First, the true condition block.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n-            ifTree, exitType, labelName);\n-\n-        // Now the else block.\n-        // The if blocks may have changed, get them again.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        if (falseBlock != null) {\n-          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n-              ifTree, exitType, labelName);\n-        }\n-      }\n-\n-      if (c == n.getLastChild()) {\n-        break;\n-      }\n+    if (trueBlockNonReturning) {\n+      // Example, \"if (blah) { } else { some_stmt }\"\n+      NodeUtil.removeChild(parentIfNode, trueBlock.getParent());\n+      return;\n     }\n \n-    // Now try to minimize the exits of the last child, if it is removed\n-    // look at what has become the last child.\n-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n-      tryMinimizeExits(c, exitType, labelName);\n-      // If the node is still the last child, we are done.\n-      if (c == n.getLastChild()) {\n-        break;\n+    if (falseBlockNonReturning) {\n+      // Example, \"if (blah) { some_stmt } else { }\"\n+      if (falseBlock != null) {\n+        NodeUtil.removeChild(parentIfNode, falseBlock.getParent());\n       }\n-    }\n-  }\n+      if (parentIfNode.isIf()) {\n+        Node newTrueBlock;\n+        if (trueBlock.isBlock()) {\n+          newTrueBlock =\n+              IR.block(trueBlock.detachChildren())\n+                  .srcrefIfMissing(parentIfNode)\n+                  .setJSDocInfo(parentIfNode.getJSDocInfo())\n+                  .setStaticSourceFile(parentIfNode.getStaticSourceFile());\n+        } else {\n+          newTrueBlock = IR.block(trueBlock)\n \n   /**\n    * Look for exits (returns, breaks, or continues, depending on the context) at",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}