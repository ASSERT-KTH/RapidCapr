{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        int offsetBefore = getOffset(instantLocal);\n        long instantBefore = instantLocal - offsetBefore;\n\n        if (getOffset(instantBefore - 1) == offsetBefore) {\n            return offsetBefore;\n        }\n\n        long instantAfter = nextTransition(instantBefore);\n        int offsetAfter = getOffset(instantAfter);\n\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n\n        long nextTransition = nextTransition(instantLocal);\n        if (nextTransition == DateTimeUtils.MAX_MILLIS ||\n                instantAfter > nextTransition ||\n                getOffset(nextTransition - 1) == offsetBefore) {\n            return offsetBefore;\n        }\n\n        while (true) {\n            long midPoint = (instantBefore + instantAfter) / 2;\n            if (midPoint == instantBefore || midPoint == instantAfter) {\n                break;\n            }\n            int offsetMid = getOffset(midPoint);\n            if (offsetMid == offsetBefore) {\n                instantAfter = midPoint;\n                offsetAfter = offsetMid;\n            } else {\n                instantBefore = midPoint;\n                offsetBefore = offsetMid;\n            }\n            if (instantLocal >= instantBefore && instantLocal < instantAfter) {\n                break;\n            }\n        }\n\n        return offsetBefore;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..d2805515 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,46 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+        int offsetBefore = getOffset(instantLocal);\n+        long instantBefore = instantLocal - offsetBefore;\n+\n+        if (getOffset(instantBefore - 1) == offsetBefore) {\n+            return offsetBefore;\n+        }\n+\n+        long instantAfter = nextTransition(instantBefore);\n+        int offsetAfter = getOffset(instantAfter);\n+\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+\n+        long nextTransition = nextTransition(instantLocal);\n+        if (nextTransition == DateTimeUtils.MAX_MILLIS ||\n+                instantAfter > nextTransition ||\n+                getOffset(nextTransition - 1) == offsetBefore) {\n+            return offsetBefore;\n+        }\n+\n+        while (true) {\n+            long midPoint = (instantBefore + instantAfter) / 2;\n+            if (midPoint == instantBefore || midPoint == instantAfter) {\n+                break;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n+            int offsetMid = getOffset(midPoint);\n+            if (offsetMid == offsetBefore) {\n+                instantAfter = midPoint;\n+                offsetAfter = offsetMid;\n+            } else {\n+                instantBefore = midPoint;\n+                offsetBefore = offsetMid;\n+            }\n+            if (instantLocal >= instantBefore && instantLocal < instantAfter) {\n+                break;\n             }\n         }\n-        return offsetAdjusted;\n+\n+        return offsetBefore;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}