{
    "patch": "      Node first = n.getFirstChild();\n      Node parent = n.getParent();\n\n      // Only annotate if in an expression context.\n      if (parent != null && NodeUtil.isExpressionNode(parent)) {\n        // Keep track of of the \"this\" context of a call.  A call without an\n        // explicit \"this\" is a free call.\n\n        // ignore cast nodes.\n        if (first.isQualifiedName() && !first.getQualifiedName().isEmpty()) {\n          if (!NodeUtil.isGet(first)) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        }\n        // Keep track of the context in which eval is called. It is important\n        // to distinguish between \"(0, eval)()\" and \"eval()\".\n        else if (first.isName() && \"eval\".equals(first.getString())) {\n          first.putBooleanProp(Node.DIRECT_EVAL, true);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..bd60427f 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,26 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node first = n.getFirstChild();\n+      Node parent = n.getParent();\n+\n+      // Only annotate if in an expression context.\n+      if (parent != null && NodeUtil.isExpressionNode(parent)) {\n+        // Keep track of of the \"this\" context of a call.  A call without an\n+        // explicit \"this\" is a free call.\n+\n+        // ignore cast nodes.\n+        if (first.isQualifiedName() && !first.getQualifiedName().isEmpty()) {\n+          if (!NodeUtil.isGet(first)) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        }\n+        // Keep track of the context in which eval is called. It is important\n+        // to distinguish between \"(0, eval)()\" and \"eval()\".\n+        else if (first.isName() && \"eval\".equals(first.getString())) {\n+          first.putBooleanProp(Node.DIRECT_EVAL, true);\n+        }\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: variable first is already defined in method annotateCalls(Node)",
    "test_result": "ERROR"
}