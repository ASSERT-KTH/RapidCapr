{
    "patch": "        if (\"in\".equals(operator) && node.getParent() instanceof Node.ForIn) {\n            final Node lhs = node.getFirstChild();\n            Preconditions.checkNotNull(lhs);\n\n            // Fix syntax for for .. in loops using an object literal\n            if (lhs.getType() == Token.OBJECTLIT) {\n                Node newLhs = Node.newString(lhs.getLineno(), \"dummy\");\n                node.replaceChild(lhs, newLhs);\n                newLhs.addChildToFront(lhs);\n\n                Node dummyScope = new Node(Token.SCRIPT);\n                Node checkProp = new Node(Token.IF, new Node(Token.NOT, Node.newString(lhs.getLineno(), \"dummy\")));\n                Node body = new Node(Token.BLOCK, node.detachFromParent());\n                checkProp.addChildToBack(body);\n                dummyScope.addChildToBack(checkProp);\n\n                rhs.addChildToFront(dummyScope);\n                return new Node(Token.FOR, newLhs, rhs, node);\n            }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 54eb5cf8..6267f6c9 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -104,7 +104,7 @@ class CodeGenerator {\n     add(n, Context.OTHER);\n   }\n \n-  void add(Node n, Context context) {\n+\n     if (!cc.continueProcessing()) {\n       return;\n     }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}