{
    "patch": "  private void inferPropertiesFromConstraint(JSType type, JSType constraint) {\n    if (type == null || constraint == null) {\n      return;\n    }\n\n    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().toMaybeObjectType();\n    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = type.restrictByNotNullOrUndefined().toMaybeObjectType();\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop) && objType.mayHaveProp(prop)) {\n            JSType typeToInfer = propType;\n            if (!objType.hasProperty(prop)) {\n              typeToInfer = JSType.join(\n                  getNativeType(VOID_TYPE), propType).getGreatestSubtype(objType, this);\n            }\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * If we access a property of a symbol, then that symbol is not null or undefined.\n   */\n  private FlowScope dereferencePointer(Node n, FlowScope scope) {\n    if (n.isGetProp()) {\n      JSType type = getJSType(n.getFirstChild());\n      JSType narrowed = type.restrictByNotNullOrUndefined();\n      if (type != narrowed) {\n        scope = narrowScope(scope, n.getFirstChild(), narrowed);\n      }\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..6facb758 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1111,23 +1111,22 @@ class TypeInference\n    * then this code will type-check appropriately.\n    */\n   private void inferPropertyTypesToMatchConstraint(\n-      JSType type, JSType constraint) {\n+  private void inferPropertiesFromConstraint(JSType type, JSType constraint) {\n     if (type == null || constraint == null) {\n       return;\n     }\n \n-    ObjectType constraintObj =\n-        ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n+    ObjectType constraintObj = constraint.restrictByNotNullOrUndefined().toMaybeObjectType();\n     if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n+      ObjectType objType = type.restrictByNotNullOrUndefined().toMaybeObjectType();\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n+          if (!objType.isPropertyTypeDeclared(prop) && objType.mayHaveProp(prop)) {\n             JSType typeToInfer = propType;\n             if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+              typeToInfer = JSType.join(\n+                  getNativeType(VOID_TYPE), propType).getGreatestSubtype(objType, this);\n             }\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n@@ -1137,19 +1136,21 @@ class TypeInference\n   }\n \n   /**\n-   * If we access a property of a symbol, then that symbol is not\n-   * null or undefined.\n+   * If we access a property of a symbol, then that symbol is not null or undefined.\n    */\n   private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.isQualifiedName()) {\n-      JSType type = getJSType(n);\n+    if (n.isGetProp()) {\n+      JSType type = getJSType(n.getFirstChild());\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n-        scope = narrowScope(scope, n, narrowed);\n+        scope = narrowScope(scope, n.getFirstChild(), narrowed);\n       }\n     }\n     return scope;\n   }\n+    }\n+    return scope;\n+  }\n \n   private JSType getPropertyType(JSType objType, String propName,\n       Node n, FlowScope scope) {",
    "result_reason": "error: modifier private not allowed here",
    "test_result": "ERROR"
}