{
    "patch": "import com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.jstype.StaticSourceFile;\nimport com.google.javascript.rhino.jstype.StaticSourceFile.SourceKind;\nimport com.google.javascript.rhino.jstype.StaticSourceFileProvider;\nimport com.google.javascript.rhino.jstype.TypedVar;\nimport com.google.javascript.rhino.jstype.UnionType;\nimport com.google.javascript.rhino.jstype.VoidType;\nimport com.google.javascript.rhino.jstype.StaticSourceFile.SourceKind;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.jstype.StaticSourceFileProvider.NameGenerator;\nimport com.google.javascript.rhino.jstype.StandardSymbolTable;\nimport com.google.javascript.rhino.jstype.StaticSlot.JSDocInfo;\nimport com.google.javascript.rhino.jstype.StaticSourceFileProvider;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..3eede1b6 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -554,38 +554,21 @@ final class NameAnalyzer implements CompilerPass {\n           break;\n       }\n     }\n-\n-    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n-      Node nameNode = n.getFirstChild();\n-      Node parent = n.getParent();\n-      NameInformation ns = createNameInformation(t, nameNode);\n-      if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n-            recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n-          }\n-        } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n-        }\n-      }\n-    }\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n+import com.google.javascript.rhino.jstype.StaticSourceFile.SourceKind;\n+import com.google.javascript.rhino.jstype.StaticSourceFileProvider;\n+import com.google.javascript.rhino.jstype.TypedVar;\n+import com.google.javascript.rhino.jstype.UnionType;\n+import com.google.javascript.rhino.jstype.VoidType;\n+import com.google.javascript.rhino.jstype.StaticSourceFile.SourceKind;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.jstype.StaticSourceFileProvider.NameGenerator;\n+import com.google.javascript.rhino.jstype.StandardSymbolTable;\n+import com.google.javascript.rhino.jstype.StaticSlot.JSDocInfo;\n+import com.google.javascript.rhino.jstype.StaticSourceFileProvider;\n \n     /**\n      * Defines a dependency scope.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}