{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    int[] offsets = getOffset(instantLocal);\n    int offsetLocal = offsets[0];\n    int offsetBefore = offsets[1];\n    int offsetAfter = offsets[2];\n\n    // when the offsets are the same, we're done\n    if (offsetBefore == offsetAfter) {\n        return offsetLocal;\n    }\n\n    // calculate the near and far local times\n    long nearInstant = instantLocal - offsetLocal;\n    int[] nearOffsets = getOffset(nearInstant);\n    int nearOffsetLocal = nearOffsets[0];\n    int nearOffsetBefore = nearOffsets[1];\n    int nearOffsetAfter = nearOffsets[2];\n\n    long farInstant;\n    if (offsetBefore < offsetAfter) {\n        // gap: local time is earlier than real time\n        farInstant = nextTransition(nearInstant);\n        if (farInstant == instantLocal) {\n            // ambiguous local time: choose the administered offset\n            return offsetBefore;\n        }\n    } else {\n        // overlap: local time is later than real time\n        farInstant = previousTransition(nearInstant);\n        if (instantLocal >= farInstant) {\n            // ambiguous local time: choose the administered offset\n            return offsetAfter;\n        }\n    }\n\n    // calculate the offsets at the far instant\n    int[] farOffsets = getOffset(farInstant);\n    int farOffsetLocal = farOffsets[0];\n    int farOffsetBefore = farOffsets[1];\n    int farOffsetAfter = farOffsets[2];\n\n    if (nearOffsetBefore == nearOffsetAfter) {\n        // simple case: offsets haven't changed\n        return nearOffsetLocal;\n    }\n\n    if (nearOffsetLocal == farOffsetLocal) {\n        // we're in a simple gap or overlap\n        if (offsetBefore < offsetAfter) {\n            // gap: local time is earlier than real time\n            return nearOffsetBefore;\n        } else {\n            // overlap: local time is later than real time\n            return nearOffsetAfter;\n        }\n    }\n\n    // we're in a complex overlap: local time is in the middle of two real times\n    long nextNearInstant;\n    if (offsetBefore < offsetAfter) {\n        // gap: local time is earlier than real time\n        nextNearInstant = nextTransition(nearInstant);\n    } else {\n        // overlap: local time is later than real time\n        nextNearInstant = previousTransition(nearInstant);\n    }\n\n    // calculate the offsets at the next near instant\n    int[] nextNearOffsets = getOffset(nextNearInstant);\n    int nextNearOffsetBefore = nextNearOffsets[1];\n    int nextNearOffsetAfter = nextNearOffsets[2];\n\n    if (nextNearOffsetBefore == nextNearOffsetAfter) {\n        // next near transition will be simple\n        return (offsetBefore < offsetAfter) ? nearOffsetAfter : nearOffsetBefore;\n    }\n\n    // next near transition will be a complex overlap too\n    if (nearOffsetLocal == nearOffsetBefore) {\n        return offsetBefore;\n    } else {\n        return offsetAfter;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..9f6eb345 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,30 +876,91 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+public int getOffsetFromLocal(long instantLocal) {\n+    int[] offsets = getOffset(instantLocal);\n+    int offsetLocal = offsets[0];\n+    int offsetBefore = offsets[1];\n+    int offsetAfter = offsets[2];\n+\n+    // when the offsets are the same, we're done\n+    if (offsetBefore == offsetAfter) {\n+        return offsetLocal;\n+    }\n+\n+    // calculate the near and far local times\n+    long nearInstant = instantLocal - offsetLocal;\n+    int[] nearOffsets = getOffset(nearInstant);\n+    int nearOffsetLocal = nearOffsets[0];\n+    int nearOffsetBefore = nearOffsets[1];\n+    int nearOffsetAfter = nearOffsets[2];\n+\n+    long farInstant;\n+    if (offsetBefore < offsetAfter) {\n+        // gap: local time is earlier than real time\n+        farInstant = nextTransition(nearInstant);\n+        if (farInstant == instantLocal) {\n+            // ambiguous local time: choose the administered offset\n+            return offsetBefore;\n+        }\n+    } else {\n+        // overlap: local time is later than real time\n+        farInstant = previousTransition(nearInstant);\n+        if (instantLocal >= farInstant) {\n+            // ambiguous local time: choose the administered offset\n+            return offsetAfter;\n+        }\n+    }\n+\n+    // calculate the offsets at the far instant\n+    int[] farOffsets = getOffset(farInstant);\n+    int farOffsetLocal = farOffsets[0];\n+    int farOffsetBefore = farOffsets[1];\n+    int farOffsetAfter = farOffsets[2];\n+\n+    if (nearOffsetBefore == nearOffsetAfter) {\n+        // simple case: offsets haven't changed\n+        return nearOffsetLocal;\n+    }\n+\n+    if (nearOffsetLocal == farOffsetLocal) {\n+        // we're in a simple gap or overlap\n+        if (offsetBefore < offsetAfter) {\n+            // gap: local time is earlier than real time\n+            return nearOffsetBefore;\n+        } else {\n+            // overlap: local time is later than real time\n+            return nearOffsetAfter;\n         }\n-        return offsetAdjusted;\n     }\n \n+    // we're in a complex overlap: local time is in the middle of two real times\n+    long nextNearInstant;\n+    if (offsetBefore < offsetAfter) {\n+        // gap: local time is earlier than real time\n+        nextNearInstant = nextTransition(nearInstant);\n+    } else {\n+        // overlap: local time is later than real time\n+        nextNearInstant = previousTransition(nearInstant);\n+    }\n+\n+    // calculate the offsets at the next near instant\n+    int[] nextNearOffsets = getOffset(nextNearInstant);\n+    int nextNearOffsetBefore = nextNearOffsets[1];\n+    int nextNearOffsetAfter = nextNearOffsets[2];\n+\n+    if (nextNearOffsetBefore == nextNearOffsetAfter) {\n+        // next near transition will be simple\n+        return (offsetBefore < offsetAfter) ? nearOffsetAfter : nearOffsetBefore;\n+    }\n+\n+    // next near transition will be a complex overlap too\n+    if (nearOffsetLocal == nearOffsetBefore) {\n+        return offsetBefore;\n+    } else {\n+        return offsetAfter;\n+    }\n+}\n+\n     /**\n      * Converts a standard UTC instant to a local instant with the same\n      * local time. This conversion is used before performing a calculation",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}