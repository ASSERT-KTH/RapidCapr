{
    "patch": "        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        DateTimeParser parser = requireParser();\n        if (instantMillis < 0 && text != null && text.startsWith(\"-\")) {\n            instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n            chrono = selectChronology(chrono);\n            DateTimeParserBucket bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n            int newPos = parser.parseInto(bucket, text, position);\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            if (parsedOffset != null) {\n                instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n            }\n            return newPos;\n        } else {\n            instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n            chrono = selectChronology(chrono);\n            DateTimeParserBucket bucket = new DateTimeParserBucket(\n                    instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n            int newPos = parser.parseInto(bucket, text, position);\n            instant.setMillis(bucket.computeMillis(false, text));\n            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n                int parsedOffset = bucket.getOffsetInteger();\n                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n                chrono = chrono.withZone(parsedZone);\n            } else if (bucket.getZone() != null) {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n            instant.setChronology(chrono);\n            if (iZone != null) {\n                instant.setZone(iZone);\n            }\n            if (parsedOffset != null) {\n                instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n            }\n            return newPos;\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..d78787f9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,54 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        long instantMillis = instant.getMillis();\n+        Chronology chrono = instant.getChronology();\n+        DateTimeParser parser = requireParser();\n+        if (instantMillis < 0 && text != null && text.startsWith(\"-\")) {\n+            instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+            chrono = selectChronology(chrono);\n+            DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                    instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            int newPos = parser.parseInto(bucket, text, position);\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            if (parsedOffset != null) {\n+                instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+            }\n+            return newPos;\n+        } else {\n+            instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+            chrono = selectChronology(chrono);\n+            DateTimeParserBucket bucket = new DateTimeParserBucket(\n+                    instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            int newPos = parser.parseInto(bucket, text, position);\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+                int parsedOffset = bucket.getOffsetInteger();\n+                DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+                chrono = chrono.withZone(parsedZone);\n+            } else if (bucket.getZone() != null) {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+            instant.setChronology(chrono);\n+            if (iZone != null) {\n+                instant.setZone(iZone);\n+            }\n+            if (parsedOffset != null) {\n+                instant.setZone(DateTimeZone.forOffsetMillis(parsedOffset));\n+            }\n+            return newPos;\n+        }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}