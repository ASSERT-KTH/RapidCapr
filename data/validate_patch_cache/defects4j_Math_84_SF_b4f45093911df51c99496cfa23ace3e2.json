{
    "patch": "    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n        int iteration = 0;\n\n        while (true) {\n\n            incrementIterationsCounter();\n\n            // save the original vertex\n            final RealPointValuePair[] original = simplex;\n            final RealPointValuePair best = original[0];\n\n            // perform a reflection step\n            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n            if (comparator.compare(reflected, best) < 0) {\n\n                // compute the expanded simplex\n                final RealPointValuePair[] reflectedSimplex = simplex;\n                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                if (comparator.compare(reflected, expanded) <= 0) {\n                    // accept the reflected simplex\n                    simplex = reflectedSimplex.clone();\n                    continue;\n                }\n\n            }\n\n            // compute the contracted simplex\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                // accept the contracted simplex\n                simplex = contracted != null ? contracted.getPoint() : contract(original, comparator);\n                continue;\n            }\n\n            // check convergence\n            if (isConverged(comparator)) {\n                return;\n            }\n\n            // perform a shrink step\n            simplex = shrink(original, comparator);\n            iteration++;\n\n            // check if the iteration limit has been reached\n            if (iteration >= maxIterations) {\n                throw new OptimizationException(LocalizedFormats.TOO_MANY_ITERATIONS, maxIterations);\n            }\n\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..5a438d640 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -61,6 +61,8 @@ public class MultiDirectional extends DirectSearchOptimizer {\n     protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n+        int iteration = 0;\n+\n         while (true) {\n \n             incrementIterationsCounter();\n@@ -78,22 +80,34 @@ public class MultiDirectional extends DirectSearchOptimizer {\n                 final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n                 if (comparator.compare(reflected, expanded) <= 0) {\n                     // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n+                    simplex = reflectedSimplex.clone();\n+                    continue;\n                 }\n \n-                return;\n-\n             }\n \n             // compute the contracted simplex\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n                 // accept the contracted simplex\n+                simplex = contracted != null ? contracted.getPoint() : contract(original, comparator);\n+                continue;\n+            }\n \n             // check convergence\n+            if (isConverged(comparator)) {\n                 return;\n             }\n \n+            // perform a shrink step\n+            simplex = shrink(original, comparator);\n+            iteration++;\n+\n+            // check if the iteration limit has been reached\n+            if (iteration >= maxIterations) {\n+                throw new OptimizationException(LocalizedFormats.TOO_MANY_ITERATIONS, maxIterations);\n+            }\n+\n         }\n \n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}