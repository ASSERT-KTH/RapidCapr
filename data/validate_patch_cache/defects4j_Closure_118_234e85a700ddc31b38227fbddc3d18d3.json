{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        // Maybe STRING, GET, SET\n\n        // We should never see a mix of numbers and strings.\n        String name = child.getString();\n        T type = typeSystem.getType(getScope(), child, name);\n        Property prop = getProperty(name);\n\n        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n          if (n.isFromExterns() || t.getScope().isDeclared(name, false)) {\n            // Skip externs and declared properties.\n            continue;\n          }\n          if (propertiesToErrorFor.containsKey(name)) {\n            t.report(\n                child,\n                type == null ? Warnings.NULLABLE_DEREFERENCE_ERROR\n                              : Warnings.INVALIDATION,\n                propertiesToErrorFor.get(name), name,\n                type == null ? \"null\" : type.toString(),\n                child.toString(),\n                \"\");\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..777d5c96 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -488,25 +488,28 @@ class DisambiguateProperties<T> implements CompilerPass {\n      * Processes a OBJECTLIT node.\n      */\n     private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n         // Maybe STRING, GET, SET\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n+        T type = typeSystem.getType(getScope(), child, name);\n         Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n+\n+        if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+          if (n.isFromExterns() || t.getScope().isDeclared(name, false)) {\n+            // Skip externs and declared properties.\n+            continue;\n+          }\n           if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+            t.report(\n+                child,\n+                type == null ? Warnings.NULLABLE_DEREFERENCE_ERROR\n+                              : Warnings.INVALIDATION,\n+                propertiesToErrorFor.get(name), name,\n+                type == null ? \"null\" : type.toString(),\n+                child.toString(),\n+                \"\");\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}