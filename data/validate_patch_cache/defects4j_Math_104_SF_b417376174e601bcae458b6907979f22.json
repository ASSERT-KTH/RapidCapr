{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    } else {\n        Dfp prod = newInstance();\n        Dfp xi  = newInstance(x);\n        for (int i = 0; i < size(); i++) {\n            prod.field.setIEEEFlagsBits(0);\n            int[] prodData = prod.mant;\n            long carry     = 0;\n            for (int j = 0; j <= i; j++) {\n                long a = ((long) mant[j]) & 0xffffffffL;\n                long b = ((long) xi.mant[i - j]) & 0xffffffffL;\n                carry += a * b + prodData[j + i] & 0xffffffffL;\n                prodData[j + i] = (int) carry;\n                carry >>>= 32; \n            }\n            int j = i + 1;\n            while (carry != 0 && j < prodData.length) {\n                carry += prodData[j] & 0xffffffffL;\n                prodData[j] = (int) carry;\n                carry >>>= 32;\n                j++;\n            }\n            if (carry != 0) {\n                throw new ArithmeticException(\"Multiplication overflow in DFP\");\n            }\n            prod.sign = sign;\n            prod.exp = exp;\n        }\n        prod.round(prod.field.getRoundingMode());\n        return prod;\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..086ff5536 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,40 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    } else {\n+        Dfp prod = newInstance();\n+        Dfp xi  = newInstance(x);\n+        for (int i = 0; i < size(); i++) {\n+            prod.field.setIEEEFlagsBits(0);\n+            int[] prodData = prod.mant;\n+            long carry     = 0;\n+            for (int j = 0; j <= i; j++) {\n+                long a = ((long) mant[j]) & 0xffffffffL;\n+                long b = ((long) xi.mant[i - j]) & 0xffffffffL;\n+                carry += a * b + prodData[j + i] & 0xffffffffL;\n+                prodData[j + i] = (int) carry;\n+                carry >>>= 32; \n+            }\n+            int j = i + 1;\n+            while (carry != 0 && j < prodData.length) {\n+                carry += prodData[j] & 0xffffffffL;\n+                prodData[j] = (int) carry;\n+                carry >>>= 32;\n+                j++;\n+            }\n+            if (carry != 0) {\n+                throw new ArithmeticException(\"Multiplication overflow in DFP\");\n+            }\n+            prod.sign = sign;\n+            prod.exp = exp;\n+        }\n+        prod.round(prod.field.getRoundingMode());\n+        return prod;\n+    }\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}