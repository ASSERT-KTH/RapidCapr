{
    "patch": "            List<MockCandidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (!candidates.isEmpty()) {\n                MockCandidate mockCandidate = candidates.get(0);\n                mocks.removeAll(mockCandidate.getMockitoMockForVerification());\n                try {\n                    mockCandidate.thenInject(fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new IllegalStateException(\n                            String.format(\"Failed to inject mock into field %s of %s because of an illegal access issue\",\n                                    field.getName(), field.getDeclaringClass().getSimpleName()), e);\n                }\n                return;\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..daa76c27a 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -88,9 +88,22 @@ public class DefaultInjectionEngine {\n         }\n     }\n \n+\n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            List<MockCandidate> candidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (!candidates.isEmpty()) {\n+                MockCandidate mockCandidate = candidates.get(0);\n+                mocks.removeAll(mockCandidate.getMockitoMockForVerification());\n+                try {\n+                    mockCandidate.thenInject(fieldInstance);\n+                } catch (IllegalAccessException e) {\n+                    throw new IllegalStateException(\n+                            String.format(\"Failed to inject mock into field %s of %s because of an illegal access issue\",\n+                                    field.getName(), field.getDeclaringClass().getSimpleName()), e);\n+                }\n+                return;\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}