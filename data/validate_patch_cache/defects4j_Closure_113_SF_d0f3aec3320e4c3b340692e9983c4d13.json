{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        // A require() was made, but no call to goog.provide() or goog.module() was made\n        // providing this namespace.\n        String location =\n            provided == null\n                ? \"missing provide\"\n                : provided.isImplicit ? \"implicit namespace\" : \"implicit module\";\n        JSError error =\n            JSError.make(\n                n,\n                MISSING_REQUIRE_WARNING,\n                ns,\n                location,\n                t.getSourceName(),\n                n.getLineno(),\n                n.getCharno());\n        compiler.report(error);\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null\n            && module != providedModule\n            && !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(\n                  n,\n                  XMODULE_REQUIRE_ERROR,\n                  ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      if (provided != null && !provided.isExplicitlyProvided()) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..c5fbe3cb 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,15 +292,29 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n       String ns = arg.getString();\n       ProvidedName provided = providedNames.get(ns);\n       if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        // A require() was made, but no call to goog.provide() or goog.module() was made\n+        // providing this namespace.\n+        String location =\n+            provided == null\n+                ? \"missing provide\"\n+                : provided.isImplicit ? \"implicit namespace\" : \"implicit module\";\n+        JSError error =\n+            JSError.make(\n+                n,\n+                MISSING_REQUIRE_WARNING,\n+                ns,\n+                location,\n+                t.getSourceName(),\n+                n.getLineno(),\n+                n.getCharno());\n+        compiler.report(error);\n       } else {\n         JSModule providedModule = provided.explicitModule;\n \n@@ -308,16 +322,18 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n         Preconditions.checkNotNull(providedModule);\n \n         JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n+        if (moduleGraph != null\n+            && module != providedModule\n+            && !moduleGraph.dependsOn(module, providedModule)) {\n           compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n+              t.makeError(\n+                  n,\n+                  XMODULE_REQUIRE_ERROR,\n+                  ns,\n                   providedModule.getName(),\n                   module.getName()));\n         }\n       }\n-\n       maybeAddToSymbolTable(left);\n       maybeAddStringNodeToSymbolTable(arg);\n \n@@ -326,7 +342,7 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+      if (provided != null && !provided.isExplicitlyProvided()) {\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}