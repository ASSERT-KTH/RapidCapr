{
    "patch": "public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n    if ((expected.length < 2) || (expected.length != observed.length)) {\n        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n    }\n    if (!isNonNegative(expected) || !isPositive(observed)) {\n        throw new IllegalArgumentException(\"observed counts must be positive and expected counts must be non-negative\");\n    }\n\n    double sumSq = 0.0d;\n    double dev = 0.0d;\n    for (int i = 0; i < observed.length; i++) {\n        if (Double.isNaN(expected[i])) {\n            throw new IllegalArgumentException(\"invalid expected value: NaN\");\n        }\n        dev = ((double) observed[i] - expected[i]);\n        if (expected[i] != 0) {\n            sumSq += dev * dev / expected[i];\n        } else if (dev != 0) {\n            throw new IllegalArgumentException(\"observed count must be zero when expected count is zero\");\n        }\n    }\n    return sumSq;\n}\n\nprivate boolean isNonNegative(double[] arr) {\n    for (double d : arr) {\n        if (Double.isNaN(d) || d < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean isPositive(long[] arr) {\n    for (long l : arr) {\n        if (Double.isNaN(l) || l <= 0) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\nindex c87b0101f..bf3c4abd2 100644\n--- a/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n+++ b/src/java/org/apache/commons/math/stat/inference/ChiSquareTestImpl.java\n@@ -61,24 +61,47 @@ public class ChiSquareTestImpl implements UnknownDistributionChiSquareTest {\n      * @throws IllegalArgumentException if preconditions are not met\n      * or length is less than 2\n      */\n-    public double chiSquare(double[] expected, long[] observed)\n-        throws IllegalArgumentException {\n-        if ((expected.length < 2) || (expected.length != observed.length)) {\n-            throw new IllegalArgumentException(\n-                    \"observed, expected array lengths incorrect\");\n+public double chiSquare(double[] expected, long[] observed) throws IllegalArgumentException {\n+    if ((expected.length < 2) || (expected.length != observed.length)) {\n+        throw new IllegalArgumentException(\"observed, expected array lengths incorrect\");\n+    }\n+    if (!isNonNegative(expected) || !isPositive(observed)) {\n+        throw new IllegalArgumentException(\"observed counts must be positive and expected counts must be non-negative\");\n+    }\n+\n+    double sumSq = 0.0d;\n+    double dev = 0.0d;\n+    for (int i = 0; i < observed.length; i++) {\n+        if (Double.isNaN(expected[i])) {\n+            throw new IllegalArgumentException(\"invalid expected value: NaN\");\n         }\n-        if (!isPositive(expected) || !isNonNegative(observed)) {\n-            throw new IllegalArgumentException(\n-                \"observed counts must be non-negative and expected counts must be postive\");\n+        dev = ((double) observed[i] - expected[i]);\n+        if (expected[i] != 0) {\n+            sumSq += dev * dev / expected[i];\n+        } else if (dev != 0) {\n+            throw new IllegalArgumentException(\"observed count must be zero when expected count is zero\");\n         }\n-        double sumSq = 0.0d;\n-        double dev = 0.0d;\n-        for (int i = 0; i < observed.length; i++) {\n-                dev = ((double) observed[i] - expected[i]);\n-                sumSq += dev * dev / expected[i];\n+    }\n+    return sumSq;\n+}\n+\n+private boolean isNonNegative(double[] arr) {\n+    for (double d : arr) {\n+        if (Double.isNaN(d) || d < 0) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private boolean isPositive(long[] arr) {\n+    for (long l : arr) {\n+        if (Double.isNaN(l) || l <= 0) {\n+            return false;\n         }\n-        return sumSq;\n     }\n+    return true;\n+}\n \n     /**\n      * {@inheritDoc}",
    "result_reason": "junit.framework.AssertionFailedError: chi-square test statistic expected:<114875.90421929007> but was:<3624883.3429077636>",
    "test_result": "FAIL"
}