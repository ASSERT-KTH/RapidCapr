{
    "patch": "private void processParameterizedType(ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n    Stack<Pair<TypeVariable<?>, Type>> stack = new Stack<>();\n    stack.push(new Pair<>(null, parameterizedType));\n\n    while (!stack.empty()) {\n        Pair<TypeVariable<?>, Type> pair = stack.pop();\n        TypeVariable<?> typeParameter = pair.getFirst();\n        Type typeArgument = pair.getSecond();\n\n        if (typeArgument instanceof WildcardType) {\n            WildcardType wildcardType = (WildcardType) typeArgument;\n            Type[] upperBounds = wildcardType.getUpperBounds();\n            if (upperBounds.length > 0) {\n                stack.push(new Pair<>(typeParameter, upperBounds[0]));\n            } else {\n                Type[] lowerBounds = wildcardType.getLowerBounds();\n                if (lowerBounds.length > 0) {\n                    stack.push(new Pair<>(typeParameter, lowerBounds[0]));\n                }\n            }\n        } else if (typeArgument instanceof TypeVariable) {\n            TypeVariable<?> typeVar = (TypeVariable<?>) typeArgument;\n            Type resolvedType = contextualActualTypeParameters.get(typeVar);\n            if (resolvedType == null) {\n                resolvedType = typeVar;\n            }\n            stack.push(new Pair<>(typeParameter, resolvedType));\n        } else if (typeArgument instanceof ParameterizedType) {\n            ParameterizedType parameterizedTypeArgument = (ParameterizedType) typeArgument;\n            Type[] typeArgumentArgs = parameterizedTypeArgument.getActualTypeArguments();\n            TypeVariable<?>[] typeArgumentParameters = ((Class<?>) parameterizedTypeArgument.getRawType()).getTypeParameters();\n            for (int i = 0; i < typeArgumentArgs.length; i++) {\n                stack.push(new Pair<>(typeArgumentParameters[i], typeArgumentArgs[i]));\n            }\n        } else if (typeArgument instanceof Class) {\n            Class<?> argumentClass = (Class<?>) typeArgument;\n            if (argumentClass.isArray()) {\n                stack.push(new Pair<>(typeParameter, argumentClass.getComponentType()));\n            }\n        }\n        if (typeParameter != null) {\n            contextualActualTypeParameters.put(typeParameter, typeArgument);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..38494b845 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,51 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private void processParameterizedType(ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> contextualActualTypeParameters) {\n+    Stack<Pair<TypeVariable<?>, Type>> stack = new Stack<>();\n+    stack.push(new Pair<>(null, parameterizedType));\n+\n+    while (!stack.empty()) {\n+        Pair<TypeVariable<?>, Type> pair = stack.pop();\n+        TypeVariable<?> typeParameter = pair.getFirst();\n+        Type typeArgument = pair.getSecond();\n+\n+        if (typeArgument instanceof WildcardType) {\n+            WildcardType wildcardType = (WildcardType) typeArgument;\n+            Type[] upperBounds = wildcardType.getUpperBounds();\n+            if (upperBounds.length > 0) {\n+                stack.push(new Pair<>(typeParameter, upperBounds[0]));\n+            } else {\n+                Type[] lowerBounds = wildcardType.getLowerBounds();\n+                if (lowerBounds.length > 0) {\n+                    stack.push(new Pair<>(typeParameter, lowerBounds[0]));\n+                }\n+            }\n+        } else if (typeArgument instanceof TypeVariable) {\n+            TypeVariable<?> typeVar = (TypeVariable<?>) typeArgument;\n+            Type resolvedType = contextualActualTypeParameters.get(typeVar);\n+            if (resolvedType == null) {\n+                resolvedType = typeVar;\n+            }\n+            stack.push(new Pair<>(typeParameter, resolvedType));\n+        } else if (typeArgument instanceof ParameterizedType) {\n+            ParameterizedType parameterizedTypeArgument = (ParameterizedType) typeArgument;\n+            Type[] typeArgumentArgs = parameterizedTypeArgument.getActualTypeArguments();\n+            TypeVariable<?>[] typeArgumentParameters = ((Class<?>) parameterizedTypeArgument.getRawType()).getTypeParameters();\n+            for (int i = 0; i < typeArgumentArgs.length; i++) {\n+                stack.push(new Pair<>(typeArgumentParameters[i], typeArgumentArgs[i]));\n+            }\n+        } else if (typeArgument instanceof Class) {\n+            Class<?> argumentClass = (Class<?>) typeArgument;\n+            if (argumentClass.isArray()) {\n+                stack.push(new Pair<>(typeParameter, argumentClass.getComponentType()));\n+            }\n+        }\n+        if (typeParameter != null) {\n+            contextualActualTypeParameters.put(typeParameter, typeArgument);\n+        }\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}