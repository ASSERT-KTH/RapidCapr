{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        for (Node c : n.children()) {\n          if (c != NodeUtil.getConditionExpression(n)) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n        } else {\n          // for(in x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          computeGenKill(rhs, gen, kill, true);\n          for (Node c : n.children()) {\n            if (c != lhs && c != rhs) {\n              computeGenKill(c, gen, kill, conditional);\n            }\n          }\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c : n.children()) {\n          if (c.hasChildren()) {\n            // Only the first child of var statment should be marked as gen or kill\n            // However, this was missing in the original code.\n            if (c.getFirstChild() != null) {\n              if (!conditional) {\n                addToSetIfLocal(c.getFirstChild(), kill);\n              }\n              computeGenKill(c.getFirstChild(), gen, kill, true);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, true);\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n)) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, true);\n        } else {\n          for (Node c : n.children()) {\n            computeGenKill(c, gen, kill, true);\n          }\n        }\n        return;\n    }\n  } ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..e11eec35 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,8 +175,7 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n+  private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n \n     switch (n.getType()) {\n       case Token.SCRIPT:\n@@ -187,34 +186,40 @@ class LiveVariablesAnalysis extends\n       case Token.WHILE:\n       case Token.DO:\n       case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n+        for (Node c : n.children()) {\n+          if (c != NodeUtil.getConditionExpression(n)) {\n+            computeGenKill(c, gen, kill, conditional);\n+          }\n+        }\n         return;\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, true);\n         } else {\n-          // for(x in y) {...}\n+          // for(in x in y) {...}\n           Node lhs = n.getFirstChild();\n           Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n+          computeGenKill(rhs, gen, kill, true);\n+          for (Node c : n.children()) {\n+            if (c != lhs && c != rhs) {\n+              computeGenKill(c, gen, kill, conditional);\n+            }\n           }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n         }\n         return;\n \n       case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+        for (Node c : n.children()) {\n           if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+            // Only the first child of var statment should be marked as gen or kill\n+            // However, this was missing in the original code.\n+            if (c.getFirstChild() != null) {\n+              if (!conditional) {\n+                addToSetIfLocal(c.getFirstChild(), kill);\n+              }\n+              computeGenKill(c.getFirstChild(), gen, kill, true);\n             }\n           }\n         }\n@@ -222,14 +227,13 @@ class LiveVariablesAnalysis extends\n \n       case Token.AND:\n       case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         // May short circuit.\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n \n       case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n+        computeGenKill(n.getFirstChild(), gen, kill, true);\n         computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n         computeGenKill(n.getLastChild(), gen, kill, true);\n         return;\n@@ -243,7 +247,7 @@ class LiveVariablesAnalysis extends\n         return;\n \n       default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+        if (NodeUtil.isAssignmentOp(n)) {\n           Node lhs = n.getFirstChild();\n           if (!conditional) {\n             addToSetIfLocal(lhs, kill);\n@@ -252,15 +256,15 @@ class LiveVariablesAnalysis extends\n             // assignments such as a += 1 reads a.\n             addToSetIfLocal(lhs, gen);\n           }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n+          computeGenKill(lhs.getNext(), gen, kill, true);\n         } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n+          for (Node c : n.children()) {\n+            computeGenKill(c, gen, kill, true);\n           }\n         }\n         return;\n     }\n-  }\n+  } \n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}