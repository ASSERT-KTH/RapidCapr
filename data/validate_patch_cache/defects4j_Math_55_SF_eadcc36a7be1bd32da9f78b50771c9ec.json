{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      double eps = Math.ulp(1d);\n      double n1 = v1.getNorm();\n      double n2 = v2.getNorm();\n      Vector3D vv1 = v1;\n      Vector3D vv2 = v2;\n\n      if ((n1 < eps) || (n2 < eps)) {\n          // vectors are either too small\n          // we try to rescale them to a more suitable size\n          // we use a rescaling factor based on the precision\n          double alpha = eps / 4 * Math.max(Math.max(Math.abs(v1.getX()), Math.abs(v1.getY())), Math.abs(v1.getZ())) + eps;\n          double beta  = eps / 4 * Math.max(Math.max(Math.abs(v2.getX()), Math.abs(v2.getY())), Math.abs(v2.getZ())) + eps;\n          vv1 = new Vector3D(alpha * v1.getX(), alpha * v1.getY(), alpha * v1.getZ());\n          vv2 = new Vector3D(beta  * v2.getX(), beta  * v2.getY(), beta  * v2.getZ());\n      }\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      double r = vv1.dotProduct(vv2) / n2;\n      double max = FastMath.max(-r, 0d);\n      if (max > 0.7) {\n          // Try anyway provided we did not find a too large cancellation\n          Vector3D vv3 = new Vector3D(vv1.getX() - r * vv2.getX(),\n                                      vv1.getY() - r * vv2.getY(),\n                                      vv1.getZ() - r * vv2.getZ());\n          return new Vector3D(vv3.getY() * vv2.getZ() - vv3.getZ() * vv2.getY(),\n                              vv3.getZ() * vv2.getX() - vv3.getX() * vv2.getZ(),\n                              vv3.getX() * vv2.getY() - vv3.getY() * vv2.getX());\n      } else {\n          // Cancelling too much\n          double beta = vv1.dotProduct(vv1) / (n1 * n2);\n          Vector3D vv3 = new Vector3D(-beta * vv2.getX() + vv1.getX(),\n                                      -beta * vv2.getY() + vv1.getY(),\n                                      -beta * vv2.getZ() + vv1.getZ());\n          double alpha = vv3.getNorm() / n1;\n          vv3 = new Vector3D(alpha * vv3.getX(), alpha * vv3.getY(), alpha * vv3.getZ());\n          return new Vector3D(vv3.getY() * vv2.getZ() - vv3.getZ() * vv2.getY(),\n                              vv3.getZ() * vv2.getX() - vv3.getX() * vv2.getZ(),\n                              vv3.getX() * vv2.getY() - vv3.getY() * vv2.getX());\n      }\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..4866ee110 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,23 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n-\n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      double eps = Math.ulp(1d);\n+      double n1 = v1.getNorm();\n+      double n2 = v2.getNorm();\n+      Vector3D vv1 = v1;\n+      Vector3D vv2 = v2;\n+\n+      if ((n1 < eps) || (n2 < eps)) {\n+          // vectors are either too small\n+          // we try to rescale them to a more suitable size\n+          // we use a rescaling factor based on the precision\n+          double alpha = eps / 4 * Math.max(Math.max(Math.abs(v1.getX()), Math.abs(v1.getY())), Math.abs(v1.getZ())) + eps;\n+          double beta  = eps / 4 * Math.max(Math.max(Math.abs(v2.getX()), Math.abs(v2.getY())), Math.abs(v2.getZ())) + eps;\n+          vv1 = new Vector3D(alpha * v1.getX(), alpha * v1.getY(), alpha * v1.getZ());\n+          vv2 = new Vector3D(beta  * v2.getX(), beta  * v2.getY(), beta  * v2.getZ());\n+      }\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -466,11 +480,28 @@ public class Vector3D implements Serializable {\n       // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n-\n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      double r = vv1.dotProduct(vv2) / n2;\n+      double max = FastMath.max(-r, 0d);\n+      if (max > 0.7) {\n+          // Try anyway provided we did not find a too large cancellation\n+          Vector3D vv3 = new Vector3D(vv1.getX() - r * vv2.getX(),\n+                                      vv1.getY() - r * vv2.getY(),\n+                                      vv1.getZ() - r * vv2.getZ());\n+          return new Vector3D(vv3.getY() * vv2.getZ() - vv3.getZ() * vv2.getY(),\n+                              vv3.getZ() * vv2.getX() - vv3.getX() * vv2.getZ(),\n+                              vv3.getX() * vv2.getY() - vv3.getY() * vv2.getX());\n+      } else {\n+          // Cancelling too much\n+          double beta = vv1.dotProduct(vv1) / (n1 * n2);\n+          Vector3D vv3 = new Vector3D(-beta * vv2.getX() + vv1.getX(),\n+                                      -beta * vv2.getY() + vv1.getY(),\n+                                      -beta * vv2.getZ() + vv1.getZ());\n+          double alpha = vv3.getNorm() / n1;\n+          vv3 = new Vector3D(alpha * vv3.getX(), alpha * vv3.getY(), alpha * vv3.getZ());\n+          return new Vector3D(vv3.getY() * vv2.getZ() - vv3.getZ() * vv2.getY(),\n+                              vv3.getZ() * vv2.getX() - vv3.getX() * vv2.getZ(),\n+                              vv3.getX() * vv2.getY() - vv3.getY() * vv2.getX());\n+      }\n \n   }\n ",
    "result_reason": "error: method dotProduct in class Vector3D cannot be applied to given types;",
    "test_result": "ERROR"
}