{
    "patch": "        // verify that the function values at the endpoints have different signs and that none of the input values are NaN or infinite\n        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax) || Double.isInfinite(yInitia",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..17480e98a 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,8 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // verify that the function values at the endpoints have different signs and that none of the input values are NaN or infinite\n+        if (!Double.isFinite(min) || !Double.isFinite(max) || !Double.isFinite(initial) || Double.isNaN(yInitial) || Double.isNaN(yMin) || Double.isNaN(yMax) || Double.isInfinite(yInitia\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}