{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        double mid = 0.5 * (min + max);\n        double yMid = f.value(mid);\n        if (yMid == 0) {\n            return mid;\n        } else if (sign > 0) {\n            throw new IllegalArgumentException(\n                    \"Function values have same sign at both endpoints.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        } else {\n            double next = yMid;\n            double old_delta = Math.abs(max - min);\n            double delta = old_delta;\n            // We keep cycling through this loop until the min/max endpoints converge\n            while (true) {\n                if (next == 0.0) {\n                    // We found a root\n                    return mid;\n                } else if (delta < getAbsoluteAccuracy()) {\n                    // We have converged to within the absolute tolerance, no need to continue\n                    return mid;\n                } else {\n                    if (next > 0.0 == sign > 0.0) {\n                        min = mid;\n                        yMin = next;\n                    } else {\n                        max = mid;\n                        yMax = next;\n                    }\n                    // Update the \"mid\" point and the function value at that point\n                    mid = 0.5 * (min + max);\n                    yMid = f.value(mid);\n                    next = yMid;\n                    // Update the \"delta\" variable to check for convergence\n                    old_delta = delta;\n                    delta = Math.abs(max - min);\n                    if (Math.abs(delta - old_delta) <= getRelativeAccuracy() * Math.max(Math.abs(delta), 1.0)) {\n                        // We have converged to within the relative tolerance, no need to continue\n                        return mid;\n                    }\n                }\n            }\n        }\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..89a06058d 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,70 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign >= 0) {\n+        double mid = 0.5 * (min + max);\n+        double yMid = f.value(mid);\n+        if (yMid == 0) {\n+            return mid;\n+        } else if (sign > 0) {\n+            throw new IllegalArgumentException(\n+                    \"Function values have same sign at both endpoints.\" +\n+                    \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n+                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            double next = yMid;\n+            double old_delta = Math.abs(max - min);\n+            double delta = old_delta;\n+            // We keep cycling through this loop until the min/max endpoints converge\n+            while (true) {\n+                if (next == 0.0) {\n+                    // We found a root\n+                    return mid;\n+                } else if (delta < getAbsoluteAccuracy()) {\n+                    // We have converged to within the absolute tolerance, no need to continue\n+                    return mid;\n+                } else {\n+                    if (next > 0.0 == sign > 0.0) {\n+                        min = mid;\n+                        yMin = next;\n+                    } else {\n+                        max = mid;\n+                        yMax = next;\n+                    }\n+                    // Update the \"mid\" point and the function value at that point\n+                    mid = 0.5 * (min + max);\n+                    yMid = f.value(mid);\n+                    next = yMid;\n+                    // Update the \"delta\" variable to check for convergence\n+                    old_delta = delta;\n+                    delta = Math.abs(max - min);\n+                    if (Math.abs(delta - old_delta) <= getRelativeAccuracy() * Math.max(Math.abs(delta), 1.0)) {\n+                        // We have converged to within the relative tolerance, no need to continue\n+                        return mid;\n+                    }\n+                }\n+            }\n         }\n-\n-        return ret;\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "java.lang.IllegalArgumentException: Function values have same sign at both endpoints. Endpoints: [3.0,3.141592653589793] Values: [0.1411200080598672,1.2246467991473532E-16]",
    "test_result": "FAIL"
}