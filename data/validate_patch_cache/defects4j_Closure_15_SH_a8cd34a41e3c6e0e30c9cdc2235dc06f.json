{
    "patch": "if (n.isVar()) {\n  String varName = n.getString();\n  if (dependencyVars.contains(varName)) {\n    if (NodeUtil.isExpressionResultUsed(n)) {\n      return true;\n    }\n    if (n.hasChildren() && apply(n.getFirstChild())) {\n      return true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..9483d2bc 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isVar()) {\n+  String varName = n.getString();\n+  if (dependencyVars.contains(varName)) {\n+    if (NodeUtil.isExpressionResultUsed(n)) {\n+      return true;\n+    }\n+    if (n.hasChildren() && apply(n.getFirstChild())) {\n+      return true;\n+    }\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}