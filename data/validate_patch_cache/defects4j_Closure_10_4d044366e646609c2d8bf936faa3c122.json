{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n    if (recurse) {\n      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n    } else {\n      return mayBeStringHelper(n);\n    }\n}\n\nprivate static boolean mayBeStringHelper(Node n) {\n    final Token.Type type = n.getToken().getType();\n    if (type != Token.Type.EMPTY &&\n        type != Token.Type.NULL &&\n        type != Token.Type.STRING &&\n        type != Token.Type.REGEXP) {\n      return false;\n    }\n    if (type == Token.Type.STRING && n.getToken().getJSType() != null && n.getToken().getJSType().toString().equals(\"RegExp\")) {\n      return false;\n    }\n    if (NodeUtil.isAssignmentOp(n.getParent())) {\n      final Node lhs = n.getFirstChild();\n      if (lhs != null && lhs.isQualifiedName()) {\n        final String qName = lhs.getQualifiedName();\n        if (qName != null && qName.equals(\"RegExp\") && n.getParent().isVar()) {\n          return false;\n        }\n      }\n    }\n    switch (type) {\n      case ADD:\n      case ARRAYLIT:\n      case ASSIGN:\n      case ASSIGN_ADD:\n      case ASSIGN_BITAND:\n      case ASSIGN_BITOR:\n      case ASSIGN_DIV:\n      case ASSIGN_LSH:\n      case ASSIGN_MOD:\n      case ASSIGN_MUL:\n      case ASSIGN_RSH:\n      case ASSIGN_SUB:\n      case ASSIGN_URSH:\n      case BITAND:\n      case BITOR:\n      case BITXOR:\n      case CALL:\n      case CLASS:\n      case COMMA:\n      case COMPUTED_PROP:\n      case CONDITIONAL:\n      case FUNCTION:\n      case GETPROP:\n      case INC:\n      case NEW:\n      case OBJECTLIT:\n      case OPTCHAIN_CALL:\n      case OPTCHAIN_GETELEM:\n      case OPTCHAIN_GETPROP:\n      case OR:\n      case PARAM_LIST:\n      case REST:\n      case SCRIPT:\n      case SUB:\n      case TEMPLATELIT:\n      case TEMPLATELIT_SUB:\n      case THIS:\n      case THROW:\n      case TYPEOF:\n      case VOID:\n        return false;\n\n      case OBJECT_PATTERN:\n      case STRING_KEY:\n      case COMPUTED_STRING_KEY:\n      case GETTER_DEF:\n      case SETTER_DEF:\n      case LET:\n      case MEMBER_FUNCTION_DEF:\n      case PARAMETER:\n      case VAR:\n      case YIELD:\n        return false;\n\n      // These nodes are 'empty' but we haven't examined all its children\n      case EMPTY:\n      case DELPROP:\n      case NAME:\n      case NOT:\n      case NULL:\n      case REGEXP:\n      case SPREAD:\n      case SUPER:\n      case TAGGED_TEMPLATELIT:\n      case TEMPLATELIT_STRING:\n      case UNARY_MINUS:\n      case UNARY_PLUS:\n      case UNICODE_ESCAPE:\n        return true;\n\n      // These nodes have no children\n      case EXPR_RESULT:\n      case FALSE:\n      case NUMBER:\n      case TEMPLATELIT_SUB_EXPR:\n      case TRUE:\n        return true;\n\n      case DEFAULT_CASE:\n      case OBJECT_REST:\n      case FOR:\n        return true;\n\n      default:\n        throw new IllegalStateException(\"Unknown node type: \" + type);\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..e25be700 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,14 +1411,122 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n-  static boolean mayBeString(Node n, boolean recurse) {\n+static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n       return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n     } else {\n       return mayBeStringHelper(n);\n     }\n-  }\n+}\n+\n+private static boolean mayBeStringHelper(Node n) {\n+    final Token.Type type = n.getToken().getType();\n+    if (type != Token.Type.EMPTY &&\n+        type != Token.Type.NULL &&\n+        type != Token.Type.STRING &&\n+        type != Token.Type.REGEXP) {\n+      return false;\n+    }\n+    if (type == Token.Type.STRING && n.getToken().getJSType() != null && n.getToken().getJSType().toString().equals(\"RegExp\")) {\n+      return false;\n+    }\n+    if (NodeUtil.isAssignmentOp(n.getParent())) {\n+      final Node lhs = n.getFirstChild();\n+      if (lhs != null && lhs.isQualifiedName()) {\n+        final String qName = lhs.getQualifiedName();\n+        if (qName != null && qName.equals(\"RegExp\") && n.getParent().isVar()) {\n+          return false;\n+        }\n+      }\n+    }\n+    switch (type) {\n+      case ADD:\n+      case ARRAYLIT:\n+      case ASSIGN:\n+      case ASSIGN_ADD:\n+      case ASSIGN_BITAND:\n+      case ASSIGN_BITOR:\n+      case ASSIGN_DIV:\n+      case ASSIGN_LSH:\n+      case ASSIGN_MOD:\n+      case ASSIGN_MUL:\n+      case ASSIGN_RSH:\n+      case ASSIGN_SUB:\n+      case ASSIGN_URSH:\n+      case BITAND:\n+      case BITOR:\n+      case BITXOR:\n+      case CALL:\n+      case CLASS:\n+      case COMMA:\n+      case COMPUTED_PROP:\n+      case CONDITIONAL:\n+      case FUNCTION:\n+      case GETPROP:\n+      case INC:\n+      case NEW:\n+      case OBJECTLIT:\n+      case OPTCHAIN_CALL:\n+      case OPTCHAIN_GETELEM:\n+      case OPTCHAIN_GETPROP:\n+      case OR:\n+      case PARAM_LIST:\n+      case REST:\n+      case SCRIPT:\n+      case SUB:\n+      case TEMPLATELIT:\n+      case TEMPLATELIT_SUB:\n+      case THIS:\n+      case THROW:\n+      case TYPEOF:\n+      case VOID:\n+        return false;\n+\n+      case OBJECT_PATTERN:\n+      case STRING_KEY:\n+      case COMPUTED_STRING_KEY:\n+      case GETTER_DEF:\n+      case SETTER_DEF:\n+      case LET:\n+      case MEMBER_FUNCTION_DEF:\n+      case PARAMETER:\n+      case VAR:\n+      case YIELD:\n+        return false;\n+\n+      // These nodes are 'empty' but we haven't examined all its children\n+      case EMPTY:\n+      case DELPROP:\n+      case NAME:\n+      case NOT:\n+      case NULL:\n+      case REGEXP:\n+      case SPREAD:\n+      case SUPER:\n+      case TAGGED_TEMPLATELIT:\n+      case TEMPLATELIT_STRING:\n+      case UNARY_MINUS:\n+      case UNARY_PLUS:\n+      case UNICODE_ESCAPE:\n+        return true;\n+\n+      // These nodes have no children\n+      case EXPR_RESULT:\n+      case FALSE:\n+      case NUMBER:\n+      case TEMPLATELIT_SUB_EXPR:\n+      case TRUE:\n+        return true;\n+\n+      case DEFAULT_CASE:\n+      case OBJECT_REST:\n+      case FOR:\n+        return true;\n+\n+      default:\n+        throw new IllegalStateException(\"Unknown node type: \" + type);\n+    }\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: method mayBeStringHelper(Node) is already defined in class NodeUtil",
    "test_result": "ERROR"
}