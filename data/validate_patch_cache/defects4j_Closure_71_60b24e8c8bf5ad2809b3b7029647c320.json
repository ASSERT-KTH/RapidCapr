{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t,\n                                       Node getprop, Node parent) {\n    ObjectType objectType =\n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType == null) {\n      return;\n    }\n\n    JSDocInfo docInfo = getPropertyJSDoc(objectType, propertyName);\n\n    if (docInfo != null &&\n        docInfo.getVisibility() != Visibility.INHERITED) {\n      Visibility visibility = docInfo.getVisibility();\n      boolean sameFile =\n          t.getInput().getSourceFile().getName().equals(docInfo.getSourceFileName());\n\n      if (parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop) {\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = Visibility.INHERITED;\n        if (overridingInfo != null) {\n          overridingVisibility = overridingInfo.getVisibility();\n        }\n        ObjectType classType = objectType;\n        boolean isOverride = false;\n        while (classType != null) {\n          JSDocInfo superDocInfo = getPropertyJSDoc(classType.getImplicitPrototype(), propertyName);\n          if (superDocInfo != null &&\n              superDocInfo.getVisibility() != Visibility.INHERITED) {\n            if (superDocInfo.getVisibility().ordinal() < visibility.ordinal()) {\n              compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_VISIBILITY,\n                                           propertyName, objectType.toString()));\n              return;\n            } else if (classType != objectType && visibility.ordinal() <\n                docInfo.getVisibility().ordinal()) {\n              compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_VISIBILITY,\n                                           propertyName, objectType.toString()));\n              return;\n            } else {\n              isOverride = true;\n              if (visibility.ordinal() <= overridingVisibility.ordinal()) {\n                break;\n              }\n            }\n          }\n          classType = classType.getImplicitPrototype();\n        }\n\n        if (isOverride && !sameFile) {\n          compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_IN_FILE,\n                                        propertyName, objectType.toString()));\n          return;\n        }\n      } else {\n        if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || currentClass.differsFrom(objectType)) &&\n            !sameFile) {\n          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n                                        propertyName,\n                                        validator.getReadableJSTypeName(getprop.getFirstChild(),\n                                               true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          ObjectType classType = objectType;\n          boolean isCorrectOverride = false;\n          while (classType != null) {\n            if (currentClass != null && classType.isSubtype(currentClass)) {\n              isCorrectOverride = true;\n              break;\n            }\n            classType = classType.getImplicitPrototype();\n          }\n          if (!sameFile && !isCorrectOverride) {\n            compiler.report(t.makeError(getprop,\n                                         BAD_PROTECTED_PROPERTY_ACCESS,\n                                         propertyName,\n                                         validator.getReadableJSTypeName(\n                                             getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }\n\n  private JSDocInfo getPropertyJSDoc(ObjectType object, String propertyName) {\n    JSDocInfo docInfo = null;\n    ObjectType objectType = object;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n        break;\n      }\n    }\n    return docInfo;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..de1d24ce 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -405,100 +405,106 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param getprop The getprop node.\n    */\n   private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n+                                       Node getprop, Node parent) {\n     ObjectType objectType =\n         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n-        }\n-      }\n+    if (objectType == null) {\n+      return;\n+    }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n-      }\n+    JSDocInfo docInfo = getPropertyJSDoc(objectType, propertyName);\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n+    if (docInfo != null &&\n+        docInfo.getVisibility() != Visibility.INHERITED) {\n       Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n+      boolean sameFile =\n+          t.getInput().getSourceFile().getName().equals(docInfo.getSourceFileName());\n+\n+      if (parent.getType() == Token.ASSIGN &&\n+          parent.getFirstChild() == getprop) {\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = Visibility.INHERITED;\n+        if (overridingInfo != null) {\n+          overridingVisibility = overridingInfo.getVisibility();\n+        }\n+        ObjectType classType = objectType;\n+        boolean isOverride = false;\n+        while (classType != null) {\n+          JSDocInfo superDocInfo = getPropertyJSDoc(classType.getImplicitPrototype(), propertyName);\n+          if (superDocInfo != null &&\n+              superDocInfo.getVisibility() != Visibility.INHERITED) {\n+            if (superDocInfo.getVisibility().ordinal() < visibility.ordinal()) {\n+              compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_VISIBILITY,\n+                                           propertyName, objectType.toString()));\n+              return;\n+            } else if (classType != objectType && visibility.ordinal() <\n+                docInfo.getVisibility().ordinal()) {\n+              compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_VISIBILITY,\n+                                           propertyName, objectType.toString()));\n+              return;\n+            } else {\n+              isOverride = true;\n+              if (visibility.ordinal() <= overridingVisibility.ordinal()) {\n+                break;\n+              }\n+            }\n+          }\n+          classType = classType.getImplicitPrototype();\n+        }\n \n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+        if (isOverride && !sameFile) {\n+          compiler.report(t.makeError(getprop, BAD_PROPERTY_OVERRIDE_IN_FILE,\n+                                        propertyName, objectType.toString()));\n+          return;\n         }\n       } else {\n-        if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+        if (visibility == Visibility.PRIVATE &&\n+            (currentClass == null || currentClass.differsFrom(objectType)) &&\n+            !sameFile) {\n+          if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) {\n             return;\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n+          compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS,\n+                                        propertyName,\n+                                        validator.getReadableJSTypeName(getprop.getFirstChild(),\n+                                               true)));\n         } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+          ObjectType classType = objectType;\n+          boolean isCorrectOverride = false;\n+          while (classType != null) {\n+            if (currentClass != null && classType.isSubtype(currentClass)) {\n+              isCorrectOverride = true;\n+              break;\n+            }\n+            classType = classType.getImplicitPrototype();\n+          }\n+          if (!sameFile && !isCorrectOverride) {\n+            compiler.report(t.makeError(getprop,\n+                                         BAD_PROTECTED_PROPERTY_ACCESS,\n+                                         propertyName,\n+                                         validator.getReadableJSTypeName(\n+                                             getprop.getFirstChild(), true)));\n           }\n         }\n       }\n     }\n   }\n \n+  private JSDocInfo getPropertyJSDoc(ObjectType object, String propertyName) {\n+    JSDocInfo docInfo = null;\n+    ObjectType objectType = object;\n+    for (; objectType != null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n+        break;\n+      }\n+    }\n+    return docInfo;\n+  }\n+\n   /**\n    * Whether the given access of a private constructor is legal.\n    *",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}