{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        applyRules(calendar, buf);\n        int dstOffset = 0;\n        if (calendar.getTimeZone().inDaylightTime(calendar.getTime())) {\n            dstOffset = calendar.getTimeZone().getDSTSavings();\n        }\n        if (mTimeZoneForced && !mTimeZone.useDaylightTime() && mTimeZone.inDaylightTime(new Date(calendar.getTimeInMillis()))) {\n            calendar.add(Calendar.MILLISECOND, -mTimeZone.getDSTSavings());\n            applyRules(calendar, buf);\n            int hours = mTimeZone.getRawOffset() / 3600000;\n            buf.append((hours > 0 ? \"+\" : \"\") + hours);\n        }\n        if (dstOffset != 0) {\n            int hours = dstOffset / 3600000;\n            int minutes = (dstOffset % 3600000) / 60000;\n            buf.append(String.format(\"%+03d:%02d\", hours, minutes));\n        }\n        return buf;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..4d9dda56 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -872,7 +872,23 @@ public class FastDateFormat extends Format {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        applyRules(calendar, buf);\n+        int dstOffset = 0;\n+        if (calendar.getTimeZone().inDaylightTime(calendar.getTime())) {\n+            dstOffset = calendar.getTimeZone().getDSTSavings();\n+        }\n+        if (mTimeZoneForced && !mTimeZone.useDaylightTime() && mTimeZone.inDaylightTime(new Date(calendar.getTimeInMillis()))) {\n+            calendar.add(Calendar.MILLISECOND, -mTimeZone.getDSTSavings());\n+            applyRules(calendar, buf);\n+            int hours = mTimeZone.getRawOffset() / 3600000;\n+            buf.append((hours > 0 ? \"+\" : \"\") + hours);\n+        }\n+        if (dstOffset != 0) {\n+            int hours = dstOffset / 3600000;\n+            int minutes = (dstOffset % 3600000) / 60000;\n+            buf.append(String.format(\"%+03d:%02d\", hours, minutes));\n+        }\n+        return buf;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}