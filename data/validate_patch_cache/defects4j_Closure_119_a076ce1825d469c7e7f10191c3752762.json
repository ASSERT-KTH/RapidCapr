{
    "patch": "            case Token.GENERIC:\n              Node firstChild = n.getFirstChild();\n              if (firstChild != null && firstChild.isQualifiedName()) {\n                name = firstChild.getQualifiedName();\n              }\n              break;\n>>> [ INFILL ] <<<\n            case Token.IN:\n            case Token.INSTANCEOF:\n            case Token.NEW:\n            case Token.OR:\n              break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..d4438c1d 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,18 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+            case Token.GENERIC:\n+              Node firstChild = n.getFirstChild();\n+              if (firstChild != null && firstChild.isQualifiedName()) {\n+                name = firstChild.getQualifiedName();\n+              }\n+              break;\n+>>> [ INFILL ] <<<\n+            case Token.IN:\n+            case Token.INSTANCEOF:\n+            case Token.NEW:\n+            case Token.OR:\n+              break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}