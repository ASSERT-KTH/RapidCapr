{
    "patch": "protected CompilerOptions createOptions() {\n  CompilerOptions options = new CompilerOptions();\n\n  if (flags != null) {\n    options.setCodingConvention(new ClosureCodingConvention());\n    CompilationLevel level = flags.getCompilationLevel();\n    if (level != null) {\n      level.setOptionsForCompilationLevel(options);\n      if (flags.debug) {\n        level.setDebugOptionsForCompilationLevel(options);\n      }\n      WarningLevel wLevel = flags.getWarningLevel();\n      if (wLevel != null) {\n        wLevel.setOptionsForWarningLevel(options);\n      }\n    }\n    for (FormattingOption formattingOption : flags.getFormattingOptions()) {\n      formattingOption.applyToOptions(options);\n    }\n    if (flags.process_closure_primitives) {\n      options.setProcessClosurePrimitives(true);\n    }\n  }\n  initOptionsFromFlags(options);\n  return options;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex bdf55921..34071d75 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -416,27 +416,32 @@ public class CommandLineRunner extends\n   }\n \n   @Override\n-  protected CompilerOptions createOptions() {\n-    CompilerOptions options = new CompilerOptions();\n+protected CompilerOptions createOptions() {\n+  CompilerOptions options = new CompilerOptions();\n+\n+  if (flags != null) {\n     options.setCodingConvention(new ClosureCodingConvention());\n-    CompilationLevel level = flags.compilation_level;\n-    level.setOptionsForCompilationLevel(options);\n-    if (flags.debug) {\n-      level.setDebugOptionsForCompilationLevel(options);\n+    CompilationLevel level = flags.getCompilationLevel();\n+    if (level != null) {\n+      level.setOptionsForCompilationLevel(options);\n+      if (flags.debug) {\n+        level.setDebugOptionsForCompilationLevel(options);\n+      }\n+      WarningLevel wLevel = flags.getWarningLevel();\n+      if (wLevel != null) {\n+        wLevel.setOptionsForWarningLevel(options);\n+      }\n     }\n-\n-    WarningLevel wLevel = flags.warning_level;\n-    wLevel.setOptionsForWarningLevel(options);\n-    for (FormattingOption formattingOption : flags.formatting) {\n+    for (FormattingOption formattingOption : flags.getFormattingOptions()) {\n       formattingOption.applyToOptions(options);\n     }\n     if (flags.process_closure_primitives) {\n-      options.closurePass = true;\n+      options.setProcessClosurePrimitives(true);\n     }\n-\n-    initOptionsFromFlags(options);\n-    return options;\n   }\n+  initOptionsFromFlags(options);\n+  return options;\n+}\n \n   @Override\n   protected Compiler createCompiler() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}