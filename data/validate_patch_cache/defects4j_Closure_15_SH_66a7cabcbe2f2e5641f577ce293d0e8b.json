{
    "patch": "        if (n.isCall()) {\n          Node target = n.getFirstChild();\n          if (target.isQualifiedName()) {\n            String targetName = target.getQualifiedName();\n            if (externFunctions.contains(targetName)) {\n              return true;\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..c31fa4ac 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,15 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (n.isCall()) {\n+          Node target = n.getFirstChild();\n+          if (target.isQualifiedName()) {\n+            String targetName = target.getQualifiedName();\n+            if (externFunctions.contains(targetName)) {\n+              return true;\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}