{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n    \n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    double c = 0.0;\n    double fc;\n    int numIterations = 0 ;\n    double delta = 0.01;\n    \n    fa = function.value(a);\n    fb = function.value(b);\n    \n    while (numIterations < maximumIterations) {\n        if (fa * fb <= 0.0) {\n            if (fa < fb) {\n                return new double[] {a, b};\n            } else {\n                return new double[] {b, a};\n            }\n        }\n        \n        if (Math.abs(fa) < Math.abs(fb)) {\n            double tmp = a;\n            a = b;\n            b = tmp;\n            tmp = fa;\n            fa = fb;\n            fb = tmp;\n        }\n        \n        delta = 2.0 * (b - a);\n        double m = 0.5 * (c - b);\n        if (Math.abs(delta) > Math.abs(m)) {\n            c = b;\n            fc = fb;\n            delta = m;\n        } else {\n            delta = 0.5 * (c - a);\n            m = 0.5 * (b - a);\n        }\n        \n        if (Math.abs(delta) < 1E-10 || fb == 0.0) {\n            if (fa < fb) {\n                return new double[] {a, b};\n            } else {\n                return new double[] {b, a};\n            }\n        }\n                \n        double d = b - delta;\n        double fd = function.value(d);\n        if ((fb > 0.0 && fd > 0.0) || (fb < 0.0 && fd < 0.0)) {\n            b = d;\n            fb = fd;\n        } else {\n            a = b;\n            fa = fb;\n            b = d;\n            fb = fd;\n        }\n        \n        numIterations++ ;\n    }\n    \n    throw new ConvergenceException(\n              \"number of iterations={0}, maximum iterations={1}, \" +\n              \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n              \"final b value={6}, f(a)={7}, f(b)={8}\",\n              numIterations, maximumIterations, initial,\n              lowerBound, upperBound, a, b, fa, fb);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..1575288bd 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,50 +162,94 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n+public static double[] bracket(UnivariateRealFunction function,\n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations) throws ConvergenceException, \n+        FunctionEvaluationException {\n+    \n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0)  {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+              lowerBound, initial, upperBound);\n+    }\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    double c = 0.0;\n+    double fc;\n+    int numIterations = 0 ;\n+    double delta = 0.01;\n+    \n+    fa = function.value(a);\n+    fb = function.value(b);\n+    \n+    while (numIterations < maximumIterations) {\n+        if (fa * fb <= 0.0) {\n+            if (fa < fb) {\n+                return new double[] {a, b};\n+            } else {\n+                return new double[] {b, a};\n+            }\n+        }\n         \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+        if (Math.abs(fa) < Math.abs(fb)) {\n+            double tmp = a;\n+            a = b;\n+            b = tmp;\n+            tmp = fa;\n+            fa = fb;\n+            fb = tmp;\n         }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+        \n+        delta = 2.0 * (b - a);\n+        double m = 0.5 * (c - b);\n+        if (Math.abs(delta) > Math.abs(m)) {\n+            c = b;\n+            fc = fb;\n+            delta = m;\n+        } else {\n+            delta = 0.5 * (c - a);\n+            m = 0.5 * (b - a);\n         }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+        \n+        if (Math.abs(delta) < 1E-10 || fb == 0.0) {\n+            if (fa < fb) {\n+                return new double[] {a, b};\n+            } else {\n+                return new double[] {b, a};\n+            }\n         }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+                \n+        double d = b - delta;\n+        double fd = function.value(d);\n+        if ((fb > 0.0 && fd > 0.0) || (fb < 0.0 && fd < 0.0)) {\n+            b = d;\n+            fb = fd;\n+        } else {\n+            a = b;\n+            fa = fb;\n+            b = d;\n+            fb = fd;\n         }\n         \n-        return new double[]{a, b};\n+        numIterations++ ;\n     }\n+    \n+    throw new ConvergenceException(\n+              \"number of iterations={0}, maximum iterations={1}, \" +\n+              \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+              \"final b value={6}, f(a)={7}, f(b)={8}\",\n+              numIterations, maximumIterations, initial,\n+              lowerBound, upperBound, a, b, fa, fb);\n+}\n \n     /**\n      * Compute the midpoint of two values.",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}