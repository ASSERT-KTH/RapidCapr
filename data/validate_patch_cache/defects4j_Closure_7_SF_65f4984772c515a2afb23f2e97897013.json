{
    "patch": "public JSType caseObjectType(ObjectType type) {\n  if (value.equals(\"function\")) {\n    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n    if (ctorType.isSubtype(type)) {\n      // function type is being used directly or through its alias\n      return resultEqualsValue ? ctorType : null;\n    }\n    // function type is a subtype of the object type\n    ObjectType objectWithProto = type.getObjTypeIfSingletonObjWithProto();\n    if (objectWithProto != null) {\n      // there is an object type with prototype and function is a subtype\n      return null;\n    }\n    // otherwise fall back to returning the function type if the result is not required to equal the input\n    return resultEqualsValue ? null : ctorType;\n  }\n  // type is not a function\n  return matchesExpectation(\"object\") ? type : null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..56e4ea5e 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,25 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n-      }\n-      return matchesExpectation(\"object\") ? type : null;\n+public JSType caseObjectType(ObjectType type) {\n+  if (value.equals(\"function\")) {\n+    JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+    if (ctorType.isSubtype(type)) {\n+      // function type is being used directly or through its alias\n+      return resultEqualsValue ? ctorType : null;\n+    }\n+    // function type is a subtype of the object type\n+    ObjectType objectWithProto = type.getObjTypeIfSingletonObjWithProto();\n+    if (objectWithProto != null) {\n+      // there is an object type with prototype and function is a subtype\n+      return null;\n     }\n+    // otherwise fall back to returning the function type if the result is not required to equal the input\n+    return resultEqualsValue ? null : ctorType;\n+  }\n+  // type is not a function\n+  return matchesExpectation(\"object\") ? type : null;\n+}\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}