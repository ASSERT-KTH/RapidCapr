{
    "patch": "        if (mTimeZoneForced) {\n            TimeZone timeZone = calendar.getTimeZone();\n            if (!timeZone.equals(mTimeZone)) {\n                Date date = calendar.getTime();\n                TimeZone defaultTimeZone = TimeZone.getDefault();\n                calendar.setTimeZone(mTimeZone);\n                calendar.setTimeInMillis(date.getTime() + mTimeZone.getRawOffset() - defaultTimeZone.getRawOffset());\n\n                boolean defaultDst = defaultTimeZone.inDaylightTime(date);\n                boolean newDst = mTimeZone.inDaylightTime(date);\n                if (defaultDst && !newDst) { // if entering DST in the default timezone\n                    calendar.add(Calendar.MILLISECOND, -defaultTimeZone.getDSTSavings());\n                } else if (!defaultDst && newDst) { // if leaving DST in the default timezone\n                    calendar.add(Calendar.MILLISECOND, defaultTimeZone.getDSTSavings());\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..5594f6fe 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,23 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+        if (mTimeZoneForced) {\n+            TimeZone timeZone = calendar.getTimeZone();\n+            if (!timeZone.equals(mTimeZone)) {\n+                Date date = calendar.getTime();\n+                TimeZone defaultTimeZone = TimeZone.getDefault();\n+                calendar.setTimeZone(mTimeZone);\n+                calendar.setTimeInMillis(date.getTime() + mTimeZone.getRawOffset() - defaultTimeZone.getRawOffset());\n+\n+                boolean defaultDst = defaultTimeZone.inDaylightTime(date);\n+                boolean newDst = mTimeZone.inDaylightTime(date);\n+                if (defaultDst && !newDst) { // if entering DST in the default timezone\n+                    calendar.add(Calendar.MILLISECOND, -defaultTimeZone.getDSTSavings());\n+                } else if (!defaultDst && newDst) { // if leaving DST in the default timezone\n+                    calendar.add(Calendar.MILLISECOND, defaultTimeZone.getDSTSavings());\n+                }\n+            }\n+        }\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[23]:42:16.000Z>",
    "test_result": "FAIL"
}