{
    "patch": "public class CheckGlobalThis implements CompilerPass {\n  private AbstractCompiler compiler;\n  private Scope globalScope;\n\n  public static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_GLOBAL_THIS\",\n      \"Illegal use of global 'this': {0}\");\n\n  public CheckGlobalThis(AbstractCompiler compiler) {\n    this.compiler = compiler;\n  }\n\n  @Override\n  public void process(Node externs, Node root) {\n    checkState(compiler.getLifeCycleStage().isNormalized());\n    final ScopeCreator scopeCreator = new Es6SyntacticScopeCreator(compiler);\n    globalScope = scopeCreator.createScope(root, null);\n\n    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n      @Override\n      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n        if (n.getType() == Token.SCRIPT) {\n          Scope scope = scopeCreator.createScope(n, globalScope);\n          t.getScopeCreator().enterScope(scope);\n        }\n        return true;\n      }\n\n      @Override\n      public void visit(NodeTraversal t, Node n, Node parent) {\n        if (n.getType() == Token.SCRIPT) {\n          Scope scope = t.getScope();\n          for (Var v : scope.getVarIterable()) {\n            if (v.isExtern()) {\n              Node nameNode = v.getNameNode();\n              if (nameNode.getType() == Token.NAME) {\n                scope.undeclare(nameNode.getString());\n              }\n            }\n          }\n          t.getScopeCreator().exitScope();\n        } else if (n.getType() == Token.THIS) {\n          Var var = t.getScope().getVar(\"this\");\n          if (var == null || var.isGlobal()) {\n            compiler.report(JSError.make(n, GLOBAL_THIS));\n          }\n        }\n      }\n    });\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex 25327afe..00e06b83 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -81,59 +81,57 @@ final class CheckGlobalThis implements Callback {\n    * Since this pass reports errors only when a global {@code this} keyword\n    * is encountered, there is no reason to traverse non global contexts.\n    */\n-  public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n-\n-    if (n.getType() == Token.FUNCTION) {\n-      // Don't traverse functions that are constructors or have the @this\n-      // or @override annotation.\n-      JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n-      if (jsDoc != null &&\n-          (jsDoc.isConstructor() ||\n-           jsDoc.hasThisType() ||\n-           jsDoc.isOverride())) {\n-        return false;\n-      }\n+public class CheckGlobalThis implements CompilerPass {\n+  private AbstractCompiler compiler;\n+  private Scope globalScope;\n \n-      // Don't traverse functions unless they would normally\n-      // be able to have a @this annotation associated with them. e.g.,\n-      // var a = function() { }; // or\n-      // function a() {} // or\n-      // a.x = function() {};\n-      int pType = parent.getType();\n-      if (!(pType == Token.BLOCK ||\n-            pType == Token.SCRIPT ||\n-            pType == Token.NAME ||\n-            pType == Token.ASSIGN)) {\n-        return false;\n-      }\n-    }\n+  public static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n+      \"JSC_GLOBAL_THIS\",\n+      \"Illegal use of global 'this': {0}\");\n+\n+  public CheckGlobalThis(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    checkState(compiler.getLifeCycleStage().isNormalized());\n+    final ScopeCreator scopeCreator = new Es6SyntacticScopeCreator(compiler);\n+    globalScope = scopeCreator.createScope(root, null);\n \n-    if (parent != null && parent.getType() == Token.ASSIGN) {\n-      Node lhs = parent.getFirstChild();\n-      Node rhs = lhs.getNext();\n-      \n-      if (n == lhs) {\n-        // Always traverse the left side of the assignment. To handle\n-        // nested assignments properly (e.g., (a = this).property = c;),\n-        // assignLhsChild should not be overridden.\n-        if (assignLhsChild == null) {\n-          assignLhsChild = lhs;\n+    NodeTraversal.traverse(compiler, root, new NodeTraversal.Callback() {\n+      @Override\n+      public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+        if (n.getType() == Token.SCRIPT) {\n+          Scope scope = scopeCreator.createScope(n, globalScope);\n+          t.getScopeCreator().enterScope(scope);\n         }\n-      } else {\n-        // Only traverse the right side if it's not an assignment to a prototype\n-        // property or subproperty.\n-          if (lhs.getType() == Token.GETPROP &&\n-              lhs.getLastChild().getString().equals(\"prototype\")) {\n-            return false;\n+        return true;\n+      }\n+\n+      @Override\n+      public void visit(NodeTraversal t, Node n, Node parent) {\n+        if (n.getType() == Token.SCRIPT) {\n+          Scope scope = t.getScope();\n+          for (Var v : scope.getVarIterable()) {\n+            if (v.isExtern()) {\n+              Node nameNode = v.getNameNode();\n+              if (nameNode.getType() == Token.NAME) {\n+                scope.undeclare(nameNode.getString());\n+              }\n+            }\n           }\n-          if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(\".prototype.\")) {\n-            return false;\n+          t.getScopeCreator().exitScope();\n+        } else if (n.getType() == Token.THIS) {\n+          Var var = t.getScope().getVar(\"this\");\n+          if (var == null || var.isGlobal()) {\n+            compiler.report(JSError.make(n, GLOBAL_THIS));\n           }\n+        }\n       }\n-    }\n-\n-    return true;\n+    });\n   }\n+}\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {",
    "result_reason": "error: class CheckGlobalThis is already defined in package com.google.javascript.jscomp",
    "test_result": "ERROR"
}