{
    "patch": "        int idx = 1;\n        while (count + idx <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        indices[last - 1] = index - count;\n        for (int i = last - 2; i >= 0; i--) {\n            final int offset = uniCounterOffset[i + 1];\n            indices[i] = (index - count) / offset;\n            count += indices[i] * offset;\n        }\n        for (int i = 0; i < dimension; i++) {\n            indices[i] += starts[i];\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..83d7a3b70 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,12 +235,20 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count + idx <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n-        indices[last] = idx;\n+        indices[last - 1] = index - count;\n+        for (int i = last - 2; i >= 0; i--) {\n+            final int offset = uniCounterOffset[i + 1];\n+            indices[i] = (index - count) / offset;\n+            count += indices[i] * offset;\n+        }\n+        for (int i = 0; i < dimension; i++) {\n+            indices[i] += starts[i];\n+        }\n \n         return indices;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}