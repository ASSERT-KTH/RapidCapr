{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    // Get current state of instant\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    // Create bucket with default year\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n\n    // Parse the text\n    int newPos = parser.parseInto(bucket, text, position);\n\n    // Set bucket millis\n    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n        int parsedOffset = bucket.getOffsetInteger();\n        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n        bucket.setZone(parsedZone);\n    } else if (bucket.getZone() == null) {\n        bucket.setZone(chrono.getZone());\n    }\n    long millis = bucket.computeMillis(false, text);\n    if (bucket.getOffsetInteger() != null) {\n        long offsetMillis = bucket.getOffsetInteger().longValue();\n        millis = chrono.getZone().adjustOffset(millis, (int)offsetMillis);\n    }\n    bucket.saveField(DateTimeFieldType.millisOfSecond(), 0);\n    bucket.saveField(DateTimeFieldType.secondOfMinute(), 0);\n    bucket.saveField(DateTimeFieldType.minuteOfHour(), 0);\n    instant.setMillis(millis);\n\n    // Set chronology and zone for instant\n    if (bucket.getZone() != null) {\n        chrono = chrono.withZone(bucket.getZone());\n    }\n    instant.setChronology(chrono);\n    if (iZone != null) {\n        instant.setZone(iZone);\n    }\n\n    return newPos;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..ed59250a 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,35 +697,55 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    // Get current state of instant\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    // Create bucket with default year\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n-        }\n-        return newPos;\n+\n+    // Parse the text\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    // Set bucket millis\n+    if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+        int parsedOffset = bucket.getOffsetInteger();\n+        DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+        bucket.setZone(parsedZone);\n+    } else if (bucket.getZone() == null) {\n+        bucket.setZone(chrono.getZone());\n     }\n+    long millis = bucket.computeMillis(false, text);\n+    if (bucket.getOffsetInteger() != null) {\n+        long offsetMillis = bucket.getOffsetInteger().longValue();\n+        millis = chrono.getZone().adjustOffset(millis, (int)offsetMillis);\n+    }\n+    bucket.saveField(DateTimeFieldType.millisOfSecond(), 0);\n+    bucket.saveField(DateTimeFieldType.secondOfMinute(), 0);\n+    bucket.saveField(DateTimeFieldType.minuteOfHour(), 0);\n+    instant.setMillis(millis);\n+\n+    // Set chronology and zone for instant\n+    if (bucket.getZone() != null) {\n+        chrono = chrono.withZone(bucket.getZone());\n+    }\n+    instant.setChronology(chrono);\n+    if (iZone != null) {\n+        instant.setZone(iZone);\n+    }\n+\n+    return newPos;\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: incompatible types: int cannot be converted to boolean",
    "test_result": "ERROR"
}