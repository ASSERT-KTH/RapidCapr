{
    "patch": "        } else {\n            TypeVariable variable = (TypeVariable) actualTypeArgument;\n            Type[] bounds = variable.getBounds();\n            if (bounds.length == 0) {\n                contextualActualTypeParameters.put(typeParameter, Object.class);\n                continue;\n            }\n            List<Type> filteredBounds = new ArrayList<Type>();\n            for (Type bound : bounds) {\n                if (!bound.equals(Object.class)) {\n                    filteredBounds.add(bound);\n                }\n            }\n            if (filteredBounds.isEmpty()) {\n                contextualActualTypeParameters.put(typeParameter, Object.class);\n            } else {\n                Type contextualType = filteredBounds.get(0);\n                contextualActualTypeParameters.put(typeParameter, contextualType);\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..3bbea70a7 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,26 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        } else {\n+            TypeVariable variable = (TypeVariable) actualTypeArgument;\n+            Type[] bounds = variable.getBounds();\n+            if (bounds.length == 0) {\n+                contextualActualTypeParameters.put(typeParameter, Object.class);\n+                continue;\n+            }\n+            List<Type> filteredBounds = new ArrayList<Type>();\n+            for (Type bound : bounds) {\n+                if (!bound.equals(Object.class)) {\n+                    filteredBounds.add(bound);\n+                }\n+            }\n+            if (filteredBounds.isEmpty()) {\n+                contextualActualTypeParameters.put(typeParameter, Object.class);\n+            } else {\n+                Type contextualType = filteredBounds.get(0);\n+                contextualActualTypeParameters.put(typeParameter, contextualType);\n+            }\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}