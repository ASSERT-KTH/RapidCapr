{
    "patch": "    public Iterator<Chromosome> iterator() {\n        return new Iterator<Chromosome>() {\n            private int index = 0;\n\n            @Override\n            public boolean hasNext() {\n                return index < chromosomes.size();\n            }\n\n            @Override\n            public Chromosome next() {\n                if (hasNext())\n                    return chromosomes.get(index++);\n                throw new NoSuchElementException();\n            }\n\n            @Override\n            public void remove() {\n                throw new UnsupportedOperationException();\n            }\n        };\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\nindex 1eb005316..ed531b9f3 100644\n--- a/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n+++ b/src/main/java/org/apache/commons/math3/genetics/ListPopulation.java\n@@ -206,6 +206,27 @@ public abstract class ListPopulation implements Population {\n      * @return chromosome iterator\n      */\n     public Iterator<Chromosome> iterator() {\n-        return chromosomes.iterator();\n+    public Iterator<Chromosome> iterator() {\n+        return new Iterator<Chromosome>() {\n+            private int index = 0;\n+\n+            @Override\n+            public boolean hasNext() {\n+                return index < chromosomes.size();\n+            }\n+\n+            @Override\n+            public Chromosome next() {\n+                if (hasNext())\n+                    return chromosomes.get(index++);\n+                throw new NoSuchElementException();\n+            }\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+    }\n     }\n }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}