{
    "patch": "private static Node computeFollowNode(\n        Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n            (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          Node cond = parent.getFirstChild().getNext();\n          Node body = cond.getNext().getNext();\n          return NodeUtil.hasFinally(parent)\n                  ? computeCondExits(node.getNext())\n                  : computeFallThrough(body);\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        if (parent.getCatchBlock() != null) {\n          if (node == parent.getCatchBlock().getLastChild()) {\n            return computeFollowNode(fromNode, parent, cfa);\n          } else {\n            return node.getNext();\n          }\n        } else if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n          if (fromNode != null) {\n            // Add an unconditional edge to the finally block(s)\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              if (!getCfg().hasEdge(fromNode, finallyNode)) {\n                getCfg().connect(fromNode, finallyNode, Branch.UNCOND);\n              }\n            }\n          }\n          // select the next node to visit after we've completed the try-catch/finally\n          Node lastChild = NodeUtil.getFinallyBlock(parent).getLastChild();\n          return computeFollowNode(node, lastChild, cfa);\n        }\n        break;\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      Node child = nextSibling.getFirstChild();\n      if (child != null) {\n        return child;\n      }\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n\nprivate static Node computeCondExits(Node node) {\n    int type = node.getType();\n    if (type == Token.DO || type == Token.WHILE) {\n      return node.getFirstChild();\n    } else if (type == Token.IF) {\n      Node thenBranch = node.getFirstChild().getNext();\n      Preconditions.checkState(thenBranch.isBlock(), thenBranch);\n      return computeCondExits(thenBranch.getLastChild().getLastChild());\n    } else if (type == Token.HOOK) {\n      Node thenBranch = node.getFirstChild().getNext();\n      Node elseBranch = thenBranch.getNext().getNext();\n      Preconditions.checkState(thenBranch.isBlock(), thenBranch);\n      Preconditions.checkState(elseBranch.isBlock(), elseBranch);\n      return computeCondExits(thenBranch.getLastChild().getLastChild())\n              .getLastChild();\n    } else if (type == Token.AND || type == Token.OR) {\n      return computeCondExits(node.getLastChild());\n    } else {\n      return node.getNext();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..701ced27 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,8 +689,8 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n+private static Node computeFollowNode(\n+        Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     /*\n      * This is the case where:\n      *\n@@ -711,7 +711,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n      */\n     Node parent = node.getParent();\n     if (parent == null || parent.isFunction() ||\n-        (cfa != null && node == cfa.root)) {\n+            (cfa != null && node == cfa.root)) {\n       return null;\n     }\n \n@@ -735,40 +735,40 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else {\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n       case Token.FOR:\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          Node cond = parent.getFirstChild().getNext();\n+          Node body = cond.getNext().getNext();\n+          return NodeUtil.hasFinally(parent)\n+                  ? computeCondExits(node.getNext())\n+                  : computeFallThrough(body);\n         }\n       case Token.WHILE:\n       case Token.DO:\n         return parent;\n       case Token.TRY:\n-        // If we are coming out of the TRY block...\n-        if (parent.getFirstChild() == node) {\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(parent.getLastChild());\n-          } else { // and have no FINALLY.\n+        if (parent.getCatchBlock() != null) {\n+          if (node == parent.getCatchBlock().getLastChild()) {\n             return computeFollowNode(fromNode, parent, cfa);\n-          }\n-        // CATCH block.\n-        } else if (NodeUtil.getCatchBlock(parent) == node){\n-          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n-            return computeFallThrough(node.getNext());\n           } else {\n-            return computeFollowNode(fromNode, parent, cfa);\n+            return node.getNext();\n           }\n-        // If we are coming out of the FINALLY block...\n-        } else if (parent.getLastChild() == node){\n-          if (cfa != null) {\n+        } else if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+          if (fromNode != null) {\n+            // Add an unconditional edge to the finally block(s)\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+              if (!getCfg().hasEdge(fromNode, finallyNode)) {\n+                getCfg().connect(fromNode, finallyNode, Branch.UNCOND);\n+              }\n             }\n           }\n-          return computeFollowNode(fromNode, parent, cfa);\n+          // select the next node to visit after we've completed the try-catch/finally\n+          Node lastChild = NodeUtil.getFinallyBlock(parent).getLastChild();\n+          return computeFollowNode(node, lastChild, cfa);\n         }\n+        break;\n     }\n \n     // Now that we are done with the special cases follow should be its\n@@ -781,6 +781,10 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n     }\n \n     if (nextSibling != null) {\n+      Node child = nextSibling.getFirstChild();\n+      if (child != null) {\n+        return child;\n+      }\n       return computeFallThrough(nextSibling);\n     } else {\n       // If there are no more siblings, control is transferred up the AST.\n@@ -788,6 +792,28 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n     }\n   }\n \n+private static Node computeCondExits(Node node) {\n+    int type = node.getType();\n+    if (type == Token.DO || type == Token.WHILE) {\n+      return node.getFirstChild();\n+    } else if (type == Token.IF) {\n+      Node thenBranch = node.getFirstChild().getNext();\n+      Preconditions.checkState(thenBranch.isBlock(), thenBranch);\n+      return computeCondExits(thenBranch.getLastChild().getLastChild());\n+    } else if (type == Token.HOOK) {\n+      Node thenBranch = node.getFirstChild().getNext();\n+      Node elseBranch = thenBranch.getNext().getNext();\n+      Preconditions.checkState(thenBranch.isBlock(), thenBranch);\n+      Preconditions.checkState(elseBranch.isBlock(), elseBranch);\n+      return computeCondExits(thenBranch.getLastChild().getLastChild())\n+              .getLastChild();\n+    } else if (type == Token.AND || type == Token.OR) {\n+      return computeCondExits(node.getLastChild());\n+    } else {\n+      return node.getNext();\n+    }\n+  }\n+\n   /**\n    * Computes the destination node of n when we want to fallthrough into the\n    * subtree of n. We don't always create a CFG edge into n itself because of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}