{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    if (typeOfThis != null) {\n        JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n        if (resolvedTypeOfThis instanceof ObjectType) {\n            typeOfThis = (ObjectType) resolvedTypeOfThis;\n        }\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n            ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n        JSType resolvedIface = safeResolve(iface, t, scope);\n        if (resolvedIface instanceof ObjectType) {\n            ObjectType resolvedObj = (ObjectType) resolvedIface;\n            changed |= (resolvedObj != iface);\n            resolvedInterfaces.add(resolvedObj);\n        }\n    }\n    if (changed) {\n        implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n        for (int i = 0; i < subTypes.size(); i++) {\n            JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);\n            if (resolvedSubType instanceof FunctionType) {\n                subTypes.set(i, (FunctionType) resolvedSubType);\n            }\n        }\n    }\n\n    return super.resolveInternal(t, scope);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..ced29821 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,37 +859,45 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n     call = (ArrowType) safeResolve(call, t, scope);\n     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n \n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (typeOfThis != null) {\n+        JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+        if (resolvedTypeOfThis instanceof ObjectType) {\n+            typeOfThis = (ObjectType) resolvedTypeOfThis;\n+        }\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n-        ImmutableList.builder();\n+            ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n-      resolvedInterfaces.add(resolvedIface);\n-      changed |= (resolvedIface != iface);\n+        JSType resolvedIface = safeResolve(iface, t, scope);\n+        if (resolvedIface instanceof ObjectType) {\n+            ObjectType resolvedObj = (ObjectType) resolvedIface;\n+            changed |= (resolvedObj != iface);\n+            resolvedInterfaces.add(resolvedObj);\n+        }\n     }\n     if (changed) {\n-      implementedInterfaces = resolvedInterfaces.build();\n+        implementedInterfaces = resolvedInterfaces.build();\n     }\n \n     if (subTypes != null) {\n-      for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n-      }\n+        for (int i = 0; i < subTypes.size(); i++) {\n+            JSType resolvedSubType = safeResolve(subTypes.get(i), t, scope);\n+            if (resolvedSubType instanceof FunctionType) {\n+                subTypes.set(i, (FunctionType) resolvedSubType);\n+            }\n+        }\n     }\n \n     return super.resolveInternal(t, scope);\n-  }\n+}\n \n   @Override\n   public String toDebugHashCodeString() {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}