{
    "patch": "private void traverse(Node node) {\n  if (!shouldVisit(node)) {\n    return;\n  }\n\n  int visits = 0;\n  boolean changed;\n  do {\n    changed = false;\n    Node c = node.getFirstChild();\n    while(c != null) {\n      Node next = c.getNext();\n      if (shouldRetraverse(c)) {\n        traverse(c);\n        changed = true;\n      }\n      c = next;\n    }\n\n    if (changed) {\n      shouldRetraverse(node);\n    } else {\n      visit(node);\n    }\n\n    visits++;\n    Preconditions.checkState(visits < 10000, \"too many iterations\");\n  } while (shouldRetraverse(node));\n\n  exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..d0e70f8f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,37 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n-    if (!shouldVisit(node)) {\n-      return;\n-    }\n+private void traverse(Node node) {\n+  if (!shouldVisit(node)) {\n+    return;\n+  }\n \n-    int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n+  int visits = 0;\n+  boolean changed;\n+  do {\n+    changed = false;\n+    Node c = node.getFirstChild();\n+    while(c != null) {\n+      Node next = c.getNext();\n+      if (shouldRetraverse(c)) {\n         traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n+        changed = true;\n       }\n+      c = next;\n+    }\n \n+    if (changed) {\n+      shouldRetraverse(node);\n+    } else {\n       visit(node);\n-      visits++;\n+    }\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    visits++;\n+    Preconditions.checkState(visits < 10000, \"too many iterations\");\n+  } while (shouldRetraverse(node));\n \n-    exitNode(node);\n-  }\n+  exitNode(node);\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}