{
    "patch": "public class Account {\n    private double balance;\n\n    public Account(double initialBalance) {\n        balance = initialBalance;\n    }\n\n    public double withdraw(double amount) {\n        if (amount > balance) {\n            throw new IllegalArgumentException(\"amount exceeds balance\");\n        }\n\n>>> [ INFILL ] <<<\n\n        balance -= amount;\n        return amount;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..086d1004 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,24 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+public class Account {\n+    private double balance;\n+\n+    public Account(double initialBalance) {\n+        balance = initialBalance;\n+    }\n+\n+    public double withdraw(double amount) {\n+        if (amount > balance) {\n+            throw new IllegalArgumentException(\"amount exceeds balance\");\n+        }\n+\n+>>> [ INFILL ] <<<\n+\n+        balance -= amount;\n+        return amount;\n+    }\n+}\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}