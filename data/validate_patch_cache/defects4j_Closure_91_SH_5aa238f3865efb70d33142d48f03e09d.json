{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getParent() != null\n          && parent.getParent().getType() == Token.SCRIPT) {\n        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n        if (info != null && info.isLends() && info.getLendsName() != null) {\n          Var targetVar = t.getScope().getVar(info.getLendsName());\n          // If the variable being lent is global and is a constructor,\n          // then it's ok to traverse the function being lent.\n          if (targetVar != null && targetVar.isGlobal() && targetVar.getNameNode() != null) {\n            Node tgt = targetVar.getNameNode().getParent();\n            if (tgt.getType() == Token.ASSIGN) {\n              Node rhs = tgt.getLastChild();\n              if (rhs.getType() == Token.FUNCTION) {\n                JSDocInfo tgtInfo = NodeUtil.getFunctionJSDocInfo(rhs);\n                if (tgtInfo != null && tgtInfo.isConstructor()) {\n                  return true;\n                }\n              }\n            }\n          }\n          return false;\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..11b30fb3 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,29 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      if (parent != null && parent.getType() == Token.EXPR_RESULT && parent.getParent() != null\n+          && parent.getParent().getType() == Token.SCRIPT) {\n+        JSDocInfo info = NodeUtil.getBestJSDocInfo(n);\n+        if (info != null && info.isLends() && info.getLendsName() != null) {\n+          Var targetVar = t.getScope().getVar(info.getLendsName());\n+          // If the variable being lent is global and is a constructor,\n+          // then it's ok to traverse the function being lent.\n+          if (targetVar != null && targetVar.isGlobal() && targetVar.getNameNode() != null) {\n+            Node tgt = targetVar.getNameNode().getParent();\n+            if (tgt.getType() == Token.ASSIGN) {\n+              Node rhs = tgt.getLastChild();\n+              if (rhs.getType() == Token.FUNCTION) {\n+                JSDocInfo tgtInfo = NodeUtil.getFunctionJSDocInfo(rhs);\n+                if (tgtInfo != null && tgtInfo.isConstructor()) {\n+                  return true;\n+                }\n+              }\n+            }\n+          }\n+          return false;\n+        }\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}