{
    "patch": "\tpublic int getOffsetFromLocal(long instantLocal) {\n\t\t// get the offset at instantLocal (first estimate)\n\t\tfinal int offsetLocal = getOffset(instantLocal);\n\t\t// adjust instantLocal using the estimate and recalc the offset\n\t\tfinal long instantAdjusted = instantLocal - offsetLocal;\n\t\tfinal int offsetAdjusted = getOffset(instantAdjusted);\n\t\t// if the offsets differ, we must be near a DST boundary\n\t\tif (offsetLocal != offsetAdjusted) {\n\t\t\t// we need to ensure that time is always after the DST gap\n\t\t\t// this happens naturally for positive offsets, but not for negative\n\t\t\tif ((offsetLocal - offsetAdjusted) < 0) {\n\t\t\t\t// if we just return offsetAdjusted then the time is pushed\n\t\t\t\t// back before the transition, whereas it should be\n\t\t\t\t// on or after the transition\n\t\t\t\tlong nextLocal = nextTransition(instantAdjusted);\n\t\t\t\tlong nextAdjusted = nextTransition(instantLocal - offsetLocal);\n\t\t\t\tif (nextLocal != nextAdjusted) {\n\t\t\t\t\treturn offsetLocal;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn offsetAdjusted;\n\t}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ff0a7332 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -876,29 +876,29 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n-    }\n+\tpublic int getOffsetFromLocal(long instantLocal) {\n+\t\t// get the offset at instantLocal (first estimate)\n+\t\tfinal int offsetLocal = getOffset(instantLocal);\n+\t\t// adjust instantLocal using the estimate and recalc the offset\n+\t\tfinal long instantAdjusted = instantLocal - offsetLocal;\n+\t\tfinal int offsetAdjusted = getOffset(instantAdjusted);\n+\t\t// if the offsets differ, we must be near a DST boundary\n+\t\tif (offsetLocal != offsetAdjusted) {\n+\t\t\t// we need to ensure that time is always after the DST gap\n+\t\t\t// this happens naturally for positive offsets, but not for negative\n+\t\t\tif ((offsetLocal - offsetAdjusted) < 0) {\n+\t\t\t\t// if we just return offsetAdjusted then the time is pushed\n+\t\t\t\t// back before the transition, whereas it should be\n+\t\t\t\t// on or after the transition\n+\t\t\t\tlong nextLocal = nextTransition(instantAdjusted);\n+\t\t\t\tlong nextAdjusted = nextTransition(instantLocal - offsetLocal);\n+\t\t\t\tif (nextLocal != nextAdjusted) {\n+\t\t\t\t\treturn offsetLocal;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn offsetAdjusted;\n+\t}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "junit.framework.ComparisonFailure: expected:<2007-0[4-01T01:00:00.000-04]:00> but was:<2007-0[3-31T23:00:00.000-05]:00>",
    "test_result": "FAIL"
}