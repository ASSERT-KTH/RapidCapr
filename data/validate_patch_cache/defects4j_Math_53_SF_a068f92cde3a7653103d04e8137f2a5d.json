{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double realPart = real + rhs.getReal();\n    double imagPart = imaginary + rhs.getImaginary();\n    if(Double.isNaN(realPart) || Double.isNaN(imagPart)) {\n        return createComplex(Double.NaN, Double.NaN);\n    }\n    else if(Double.isInfinite(realPart) || Double.isInfinite(imagPart)) {\n        if(Double.isInfinite(imagPart)) {\n            double r = Double.isInfinite(realPart) ? Math.copySign(Double.POSITIVE_INFINITY, realPart) : realPart;\n            return createComplex(r, Double.POSITIVE_INFINITY);\n        }\n        else {\n            double i = Double.isInfinite(imagPart) ? Math.copySign(Double.POSITIVE_INFINITY, imagPart) : imagPart;\n            return createComplex(Double.POSITIVE_INFINITY, i);\n        }\n    }\n    else {\n        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..ca38b87ef 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,27 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double realPart = real + rhs.getReal();\n+    double imagPart = imaginary + rhs.getImaginary();\n+    if(Double.isNaN(realPart) || Double.isNaN(imagPart)) {\n+        return createComplex(Double.NaN, Double.NaN);\n     }\n+    else if(Double.isInfinite(realPart) || Double.isInfinite(imagPart)) {\n+        if(Double.isInfinite(imagPart)) {\n+            double r = Double.isInfinite(realPart) ? Math.copySign(Double.POSITIVE_INFINITY, realPart) : realPart;\n+            return createComplex(r, Double.POSITIVE_INFINITY);\n+        }\n+        else {\n+            double i = Double.isInfinite(imagPart) ? Math.copySign(Double.POSITIVE_INFINITY, imagPart) : imagPart;\n+            return createComplex(Double.POSITIVE_INFINITY, i);\n+        }\n+    }\n+    else {\n+        return createComplex(real + rhs.getReal(), imaginary + rhs.getImaginary());\n+    }\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}