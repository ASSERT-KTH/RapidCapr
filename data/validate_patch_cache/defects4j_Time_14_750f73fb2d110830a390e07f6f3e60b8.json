{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            boolean monthChanged = false;\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                if (!monthChanged && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n                    values[i] = values[i] + valueToAdd;\n                    int yearMonth = (values[i] - 1) / 12;\n                    if (yearMonth != 0) {\n                        int month = (values[i] - 1) % 12 + 1;\n                        values[i] = month;\n                        LocalDate localDate = new LocalDate(values[0], values[1], 1);\n                        MonthDay monthDay = new MonthDay(localDate);\n                        int maximumValue = monthDay.getDayOfMonth().getMaximumValue();\n                        values[2] = Math.min(values[2], maximumValue);\n                    }\n                    monthChanged = true;\n                }\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            return iChronology.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..60da9942 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,10 +206,24 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            boolean monthChanged = false;\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n+                if (!monthChanged && partial.getFieldType(i).equals(DateTimeFieldType.monthOfYear())) {\n+                    values[i] = values[i] + valueToAdd;\n+                    int yearMonth = (values[i] - 1) / 12;\n+                    if (yearMonth != 0) {\n+                        int month = (values[i] - 1) % 12 + 1;\n+                        values[i] = month;\n+                        LocalDate localDate = new LocalDate(values[0], values[1], 1);\n+                        MonthDay monthDay = new MonthDay(localDate);\n+                        int maximumValue = monthDay.getDayOfMonth().getMaximumValue();\n+                        values[2] = Math.min(values[2], maximumValue);\n+                    }\n+                    monthChanged = true;\n+                }\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}