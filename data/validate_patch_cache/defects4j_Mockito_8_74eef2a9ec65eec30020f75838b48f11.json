{
    "patch": "public Type get(TypeVariable typeParameter) {\n    // If the contextual type parameters are empty, then no substitution is needed\n    if (contextualActualTypeParameters.isEmpty()) {\n        return null;\n    }\n\n    Map<TypeVariable<?>, Type> temporarilyStoredMap = new HashMap<>();\n    collectContextualActualTypeParameters(temporarilyStoredMap, typeParameter);\n    Type result = temporarilyStoredMap.get(typeParameter);\n    // Put all the mappings into the actual map\n    contextualActualTypeParameters.putAll(temporarilyStoredMap);\n    return result;\n}\n\nprivate void collectContextualActualTypeParameters(Map<TypeVariable<?>, Type> temporarilyStoredMap, TypeVariable typeParameter) {\n    Type actualTypeArgument = contextualActualTypeParameters.get(typeParameter);\n    if (actualTypeArgument instanceof TypeVariable) {\n        collectContextualActualTypeParameters(temporarilyStoredMap, (TypeVariable) actualTypeArgument);\n    } else {\n        temporarilyStoredMap.put(typeParameter, actualTypeArgument);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..0929f0c89 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,28 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+public Type get(TypeVariable typeParameter) {\n+    // If the contextual type parameters are empty, then no substitution is needed\n+    if (contextualActualTypeParameters.isEmpty()) {\n+        return null;\n+    }\n+\n+    Map<TypeVariable<?>, Type> temporarilyStoredMap = new HashMap<>();\n+    collectContextualActualTypeParameters(temporarilyStoredMap, typeParameter);\n+    Type result = temporarilyStoredMap.get(typeParameter);\n+    // Put all the mappings into the actual map\n+    contextualActualTypeParameters.putAll(temporarilyStoredMap);\n+    return result;\n+}\n+\n+private void collectContextualActualTypeParameters(Map<TypeVariable<?>, Type> temporarilyStoredMap, TypeVariable typeParameter) {\n+    Type actualTypeArgument = contextualActualTypeParameters.get(typeParameter);\n+    if (actualTypeArgument instanceof TypeVariable) {\n+        collectContextualActualTypeParameters(temporarilyStoredMap, (TypeVariable) actualTypeArgument);\n+    } else {\n+        temporarilyStoredMap.put(typeParameter, actualTypeArgument);\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}