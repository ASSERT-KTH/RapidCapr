{
    "patch": "    if (constraintObj instanceof RecordType) {\n      RecordType recordType = (RecordType) constraintObj;\n      ObjectType implicitProto = getCommonTypes().getImplicitPrototype(JSTypeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n      for (String prop : recordType.getOwnPropertyNames()) {\n        JSType propType = recordType.getPropertyType(prop);\n        if (!isPropertyTypeDeclared(prop)) {\n          Node propNode = getPropertyNode(prop);\n          JSType typeToInfer = propType;\n          if (!hasProperty(prop)) {\n            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n                .getLeastSupertype(propType);\n          }\n          // Accessing property type can create a cycle.\n          inferQualifiedSlot(propNode, implicitProto, typeToInfer, null);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..fe8c23d4 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,23 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+    if (constraintObj instanceof RecordType) {\n+      RecordType recordType = (RecordType) constraintObj;\n+      ObjectType implicitProto = getCommonTypes().getImplicitPrototype(JSTypeRegistry.getNativeObjectType(JSTypeNative.OBJECT_TYPE));\n+      for (String prop : recordType.getOwnPropertyNames()) {\n+        JSType propType = recordType.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+          Node propNode = getPropertyNode(prop);\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          // Accessing property type can create a cycle.\n+          inferQualifiedSlot(propNode, implicitProto, typeToInfer, null);\n+        }\n+      }\n+    }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: non-static method getNativeObjectType(JSTypeNative) cannot be referenced from a static context",
    "test_result": "ERROR"
}