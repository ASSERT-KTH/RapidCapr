{
    "patch": "    public int translate(CharSequence input, int index, Writer out) throws IOException {\n        int seqEnd = input.length();\n        // Uses -2 to ensure there is something after the &#\n        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n            int start = index + 2;\n            boolean isHex = false;\n\n            char firstChar = input.charAt(start);\n            if(firstChar == 'x' || firstChar == 'X') {\n                start++;\n                isHex = true;\n\n                // Check there's more than just an x after the &#\n                if (start == seqEnd)\n                    return 0;\n            }\n\n            int end = start;\n            // Note that this supports character codes without a ; on the end\n            while(end < seqEnd && input.charAt(end) != ';')\n            {\n                end++;\n            }\n            // No ; found or no hex code after '&#x' or no decimal code after '&#'\n            if (end == seqEnd || end == start || (end == start+1 && isHex) || (end == start && !isHex))\n                return 0;\n\n            int entityValue;\n            try {\n                if(isHex) {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n                } else {\n                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                }\n            } catch(NumberFormatException nfe) {\n                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                return 0;\n            }\n\n            if(entityValue > 0xFFFF) {\n                char[] chrs = Character.toChars(entityValue);\n                out.write(chrs[0]);\n                out.write(chrs[1]);\n            } else {\n                out.write(entityValue);\n            }\n\n            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n        }\n        return 0;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex 68891ace..4334592c 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -37,7 +37,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n         int seqEnd = input.length();\n         // Uses -2 to ensure there is something after the &#\n-        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n+        if(index < seqEnd - 1 && input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n@@ -47,14 +47,19 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 isHex = true;\n \n                 // Check there's more than just an x after the &#\n+                if (start == seqEnd)\n+                    return 0;\n             }\n \n             int end = start;\n             // Note that this supports character codes without a ; on the end\n-            while(input.charAt(end) != ';') \n+            while(end < seqEnd && input.charAt(end) != ';')\n             {\n                 end++;\n             }\n+            // No ; found or no hex code after '&#x' or no decimal code after '&#'\n+            if (end == seqEnd || end == start || (end == start+1 && isHex) || (end == start && !isHex))\n+                return 0;\n \n             int entityValue;\n             try {\n@@ -64,7 +69,7 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n             } catch(NumberFormatException nfe) {\n-            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n+                System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                 return 0;\n             }\n \n@@ -76,7 +81,6 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n                 out.write(entityValue);\n             }\n \n-\n             return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n         }\n         return 0;",
    "result_reason": "junit.framework.ComparisonFailure: hex number unescape index 0 expected:<[\u0001]> but was:<[&#x0;&#x1;]>",
    "test_result": "FAIL"
}