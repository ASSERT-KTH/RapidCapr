{
    "patch": "    private void declareArguments(Node functionNode) {\n      Node astParameters = functionNode.getFirstChild().getNext();\n      Node body = astParameters.getNext();\n      FunctionType functionType = (FunctionType) functionNode.getJSType();\n      if (functionType != null) {\n        Node jsDocParameters = functionType.getParametersNode();\n        if (jsDocParameters != null) {\n          Node jsDocParameter = jsDocParameters.getFirstChild();\n          for (Node astParameter : astParameters.children()) {\n            if (jsDocParameter != null) {\n              Slot slot = Slot.makeArgumentSlot(astParameter.getString(), functionType, jsDocParameter.getJSType(), astParameter);\n              if (astParameter.hasChildren()) {\n                Node defaultValue = astParameter.getFirstChild();\n                if (defaultValue.isDefaultValue()) {\n                  defaultValue.detach();\n                  slot.setInitialValue(defaultValue);\n                }\n              }\n              defineSlot(functionNode, slot, astParameter);\n              jsDocParameter = jsDocParameter.getNext();\n            } else {\n              defineSlot(functionNode, Slot.makeArgumentSlot(astParameter.getString(), functionType, null, astParameter), astParameter);\n            }\n          }\n        }\n      }\n    } // end declareArguments",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..83326fed 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1741,11 +1741,18 @@ final class TypedScopeCreator implements ScopeCreator {\n           Node jsDocParameter = jsDocParameters.getFirstChild();\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n-              defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+              Slot slot = Slot.makeArgumentSlot(astParameter.getString(), functionType, jsDocParameter.getJSType(), astParameter);\n+              if (astParameter.hasChildren()) {\n+                Node defaultValue = astParameter.getFirstChild();\n+                if (defaultValue.isDefaultValue()) {\n+                  defaultValue.detach();\n+                  slot.setInitialValue(defaultValue);\n+                }\n+              }\n+              defineSlot(functionNode, slot, astParameter);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n-              defineSlot(astParameter, functionNode, null, true);\n+              defineSlot(functionNode, Slot.makeArgumentSlot(astParameter.getString(), functionType, null, astParameter), astParameter);\n             }\n           }\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}