{
    "patch": "private static double getTypedPercent(String code) {\n    JavaScriptParser parser = new JavaScriptParser(new ANTLRInputStream(code));\n    JavaScriptLexer lexer = new JavaScriptLexer(new ANTLRInputStream(code));\n    TokenStream tokens = new CommonTokenStream(lexer);\n    parser.setTokenStream(tokens);\n    ParseTreeWalker walker = new ParseTreeWalker();\n    CountTypedWalker count = new CountTypedWalker();\n    walker.walk(count, parser.program());\n    return count.getTypedCount() * 100.0 / count.getSourceLines();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex edb78051..2d5d54dc 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -458,7 +458,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of the node n.\n    */\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n+private static double getTypedPercent(String code) {\n+    JavaScriptParser parser = new JavaScriptParser(new ANTLRInputStream(code));\n+    JavaScriptLexer lexer = new JavaScriptLexer(new ANTLRInputStream(code));\n+    TokenStream tokens = new CommonTokenStream(lexer);\n+    parser.setTokenStream(tokens);\n+    ParseTreeWalker walker = new ParseTreeWalker();\n+    CountTypedWalker count = new CountTypedWalker();\n+    walker.walk(count, parser.program());\n+    return count.getTypedCount() * 100.0 / count.getSourceLines();\n+}\n     JSType childType;\n     JSType leftType, rightType;\n     Node left, right;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}