{
    "patch": "  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, t, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n\n    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n    // Handle correctly if typeOfThisResolved is a UnionType.\n    if (typeOfThisResolved.isUnionType()) {\n      UnionType union = typeOfThisResolved.toMaybeUnionType();\n      boolean foundObjectType = false;\n      for (JSType alternate : union.getAlternates()) {\n        if (alternate.isObjectType()) {\n          if (foundObjectType) {\n            // We have multiple ObjectType choices.\n            // Return the original UnionType.\n            return typeOfThisResolved;\n          }\n          typeOfThisResolved = alternate;\n          foundObjectType = true;\n        }\n      }\n      if (!foundObjectType) {\n        // typeOfThisResolve is not an ObjectType. Issue a warning\n        // further upstream.\n        typeOfThis = typeOfThisResolved.toMaybeObjectType();\n        return super.resolveInternal(t, scope);\n      }\n    }\n    typeOfThis = typeOfThisResolved.toMaybeObjectType();\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n      }\n    }\n\n    return super.resolveInternal(t, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..1c621f49 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -865,10 +865,30 @@ public class FunctionType extends PrototypeObjectType {\n     call = (ArrowType) safeResolve(call, t, scope);\n     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n \n-    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n-    // is handled further upstream.\n-    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    JSType typeOfThisResolved = safeResolve(typeOfThis, t, scope);\n+    // Handle correctly if typeOfThisResolved is a UnionType.\n+    if (typeOfThisResolved.isUnionType()) {\n+      UnionType union = typeOfThisResolved.toMaybeUnionType();\n+      boolean foundObjectType = false;\n+      for (JSType alternate : union.getAlternates()) {\n+        if (alternate.isObjectType()) {\n+          if (foundObjectType) {\n+            // We have multiple ObjectType choices.\n+            // Return the original UnionType.\n+            return typeOfThisResolved;\n+          }\n+          typeOfThisResolved = alternate;\n+          foundObjectType = true;\n+        }\n+      }\n+      if (!foundObjectType) {\n+        // typeOfThisResolve is not an ObjectType. Issue a warning\n+        // further upstream.\n+        typeOfThis = typeOfThisResolved.toMaybeObjectType();\n+        return super.resolveInternal(t, scope);\n+      }\n+    }\n+    typeOfThis = typeOfThisResolved.toMaybeObjectType();\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}