{
    "patch": "              // if LHS has side effects, don't proceed [since the optimization\n              // evaluates LHS before cond]\n              Node lhsFirstChild = lhs.getFirstChild();\n              if (lhsFirstChild != null && lhsFirstChild.hasChildren() &&\n                  NodeUtil.mayHaveSideEffects(lhsFirstChild.getFirstChild())) {\n                return n;\n              }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..b7306b72 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,13 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // if LHS has side effects, don't proceed [since the optimization\n+              // evaluates LHS before cond]\n+              Node lhsFirstChild = lhs.getFirstChild();\n+              if (lhsFirstChild != null && lhsFirstChild.hasChildren() &&\n+                  NodeUtil.mayHaveSideEffects(lhsFirstChild.getFirstChild())) {\n+                return n;\n+              }\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}