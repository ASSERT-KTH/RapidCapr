{
    "patch": "            if (invocation.getRawArguments()[indexOfVararg].getClass().isArray() &&\n                    invocation.getRawArguments()[indexOfVararg].getClass().getComponentType().isAssignableFrom(Matcher.class)) {\n\n                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n                for (Object vararg : varargs) {\n                    if (vararg instanceof CapturesArguments) {\n                        ((CapturesArguments) vararg).captureFrom(vararg);\n                    }\n                }\n            } else {\n                throw new UnsupportedOperationException(\"Varargs parameter must be a Matcher<?>[], but was \" +\n                        invocation.getRawArguments()[indexOfVararg].getClass().getSimpleName());\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..58607856a 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,22 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            if (invocation.getRawArguments()[indexOfVararg].getClass().isArray() &&\n+                    invocation.getRawArguments()[indexOfVararg].getClass().getComponentType().isAssignableFrom(Matcher.class)) {\n+\n+                Object[] varargs = (Object[]) invocation.getRawArguments()[indexOfVararg];\n+                for (Object vararg : varargs) {\n+                    if (vararg instanceof CapturesArguments) {\n+                        ((CapturesArguments) vararg).captureFrom(vararg);\n+                    }\n+                }\n+            } else {\n+                throw new UnsupportedOperationException(\"Varargs parameter must be a Matcher<?>[], but was \" +\n+                        invocation.getRawArguments()[indexOfVararg].getClass().getSimpleName());\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.UnsupportedOperationException: Varargs parameter must be a Matcher<?>[], but was String[]",
    "test_result": "FAIL"
}