{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    if (!MatrixUtils.isSquare(m)) {\n        throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());\n    }\n    RealMatrix mTranspose = m.transpose();\n    if (!mTranspose.equals(m)) {\n        throw new NonSymmetricMatrixException();\n    }\n    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n    RealMatrix l = dec.getL();\n    return l.multiply(l.transpose());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..2cfcdbca1 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,16 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    if (!MatrixUtils.isSquare(m)) {\n+        throw new NonSquareMatrixException(m.getRowDimension(), m.getColumnDimension());\n     }\n+    RealMatrix mTranspose = m.transpose();\n+    if (!mTranspose.equals(m)) {\n+        throw new NonSymmetricMatrixException();\n+    }\n+    CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+    RealMatrix l = dec.getL();\n+    return l.multiply(l.transpose());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}