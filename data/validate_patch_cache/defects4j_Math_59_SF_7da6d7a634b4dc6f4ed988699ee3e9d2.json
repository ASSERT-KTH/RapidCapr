{
    "patch": "public static float max(final float a, final float b) {\n    if (Float.isNaN(a)) {\n        return b;\n    } else if (Float.isNaN(b)) {\n        return a;\n    } else {\n        return Math.max(a, b);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/FastMath.java b/src/main/java/org/apache/commons/math/util/FastMath.java\nindex 8cba4d484..507b022e4 100644\n--- a/src/main/java/org/apache/commons/math/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math/util/FastMath.java\n@@ -3478,9 +3478,15 @@ public class FastMath {\n      * @param b second value\n      * @return b if a is lesser or equal to b, a otherwise\n      */\n-    public static float max(final float a, final float b) {\n-        return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);\n+public static float max(final float a, final float b) {\n+    if (Float.isNaN(a)) {\n+        return b;\n+    } else if (Float.isNaN(b)) {\n+        return a;\n+    } else {\n+        return Math.max(a, b);\n     }\n+}\n \n     /** Compute the maximum of two values\n      * @param a first value",
    "result_reason": "junit.framework.AssertionFailedError: max(NaN, 1.0) expected:<NaN> but was:<1.0>",
    "test_result": "FAIL"
}