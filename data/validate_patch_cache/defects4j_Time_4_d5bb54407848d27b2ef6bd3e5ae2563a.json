{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n\n    int index = indexOf(fieldType);\n\n    if (index == -1) {\n        // If this is a new field type, insert it in the appropriate position\n        int newTypesLength = iTypes.length + 1;\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[newTypesLength];\n        int[] newValues = new int[newTypesLength];\n        DurationFieldType newDurationType = fieldType.getDurationType();\n        DurationFieldType newRangeType = fieldType.getRangeDurationType();\n        int i;\n\n        // find correct insertion point in sorted list\n        for (i = 0; i < iTypes.length; i++) {\n            DateTimeFieldType loopType = iTypes[i];\n            DurationFieldType loopDurationType = loopType.getDurationType();\n            DurationFieldType loopRangeType = loopType.getRangeDurationType();\n\n            if (newDurationType.compareTo(loopDurationType) < 0) {\n                break;\n            }\n\n            if (newDurationType.equals(loopDurationType) && newRangeType.compareTo(loopRangeType) < 0) {\n                break;\n            }\n        }\n\n        // copy existing fields before insertion point\n        System.arraycopy(iTypes, 0, newTypes, 0, i);\n        System.arraycopy(iValues, 0, newValues, 0, i);\n\n        // insert new field\n        newTypes[i] = fieldType;\n        newValues[i] = value;\n\n        // copy existing fields after insertion point\n        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n\n        // use public constructor to ensure full validation\n        // this isn't overly efficient, but is safe\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n\n    } else if (value == iValues[index]) {\n        // If the field type already exists and the new value equals the current value, return this\n        return this;\n\n    } else {\n        // Otherwise, create a new partial with the updated value\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..ea495002 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,55 +423,66 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n-                }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+\n+    int index = indexOf(fieldType);\n+\n+    if (index == -1) {\n+        // If this is a new field type, insert it in the appropriate position\n+        int newTypesLength = iTypes.length + 1;\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[newTypesLength];\n+        int[] newValues = new int[newTypesLength];\n+        DurationFieldType newDurationType = fieldType.getDurationType();\n+        DurationFieldType newRangeType = fieldType.getRangeDurationType();\n+        int i;\n+\n+        // find correct insertion point in sorted list\n+        for (i = 0; i < iTypes.length; i++) {\n+            DateTimeFieldType loopType = iTypes[i];\n+            DurationFieldType loopDurationType = loopType.getDurationType();\n+            DurationFieldType loopRangeType = loopType.getRangeDurationType();\n+\n+            if (newDurationType.compareTo(loopDurationType) < 0) {\n+                break;\n+            }\n+\n+            if (newDurationType.equals(loopDurationType) && newRangeType.compareTo(loopRangeType) < 0) {\n+                break;\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n-        }\n-        if (value == getValue(index)) {\n-            return this;\n         }\n+\n+        // copy existing fields before insertion point\n+        System.arraycopy(iTypes, 0, newTypes, 0, i);\n+        System.arraycopy(iValues, 0, newValues, 0, i);\n+\n+        // insert new field\n+        newTypes[i] = fieldType;\n+        newValues[i] = value;\n+\n+        // copy existing fields after insertion point\n+        System.arraycopy(iTypes, i, newTypes, i + 1, iTypes.length - i);\n+        System.arraycopy(iValues, i, newValues, i + 1, iValues.length - i);\n+\n+        // use public constructor to ensure full validation\n+        // this isn't overly efficient, but is safe\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n+\n+    } else if (value == iValues[index]) {\n+        // If the field type already exists and the new value equals the current value, return this\n+        return this;\n+\n+    } else {\n+        // Otherwise, create a new partial with the updated value\n         int[] newValues = getValues();\n         newValues = getField(index).set(this, index, newValues, value);\n         return new Partial(this, newValues);\n     }\n+}\n \n     /**\n      * Gets a copy of this date with the specified field removed.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}