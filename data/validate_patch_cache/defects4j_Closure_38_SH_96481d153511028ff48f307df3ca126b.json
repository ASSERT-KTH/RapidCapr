{
    "patch": "    if (x == 0 && !Double.doubleToRawLongBits(x) < 0) {\n      add(\"0.0\");\n      return;\n    }\n\n    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n    // x--4 (which is a syntax error).\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    if (x < 0 && prev == '-') {\n      add(\"(\");\n      addOp(Token.MINUS_UNARY);\n      addNumber(-x);\n      add(\")\");\n      return;\n    } else if (negativeZero) {\n      add(\"-0.0\");\n      return;\n    } else if (Double.isNaN(x)) {\n      add(\"NaN\");\n      return;\n    } else if (Double.isInfinite(x)) {\n      if (x < 0) {\n        add(\"-\");\n      }\n      add(\"Infinity\");\n      return;\n    }\n",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..cd0a4d88 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,40 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n+    // This is not pretty printing. This is to prevent misparsing of x- -4 as\n+    // x--4 (which is a syntax error).\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    if (x == 0 && !Double.doubleToRawLongBits(x) < 0) {\n+      add(\"0.0\");\n+      return;\n+    }\n+\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n     if (x < 0 && prev == '-') {\n+      add(\"(\");\n+      addOp(Token.MINUS_UNARY);\n+      addNumber(-x);\n+      add(\")\");\n+      return;\n+    } else if (negativeZero) {\n+      add(\"-0.0\");\n+      return;\n+    } else if (Double.isNaN(x)) {\n+      add(\"NaN\");\n+      return;\n+    } else if (Double.isInfinite(x)) {\n+      if (x < 0) {\n+        add(\"-\");\n+      }\n+      add(\"Infinity\");\n+      return;\n+    }\n+\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}