{
    "patch": "private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n        StringBuffer appendTo, boolean escapingOn) {\n    int start = pos.getIndex();\n    if (escapingOn && pattern.charAt(start) == QUOTE) {\n        return appendTo == null ? null : appendTo.append(QUOTE);\n    }\n\n    int lastHold = start;\n    while (pos.getIndex() < pattern.length()) {\n        char c = pattern.charAt(pos.getIndex());\n        if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n            if (appendTo != null) {\n                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n            }\n            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n            lastHold = pos.getIndex();\n        } else {\n            switch (c) {\n                case QUOTE:\n                    if (appendTo != null) {\n                        appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n                    }\n                    next(pos);\n                    return appendTo;\n                default:\n                    next(pos);\n            }\n        }\n    }\n    throw new IllegalArgumentException(\n            \"Unterminated quoted string at position \" + start);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..f56ff42e 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -414,34 +414,38 @@ public class ExtendedMessageFormat extends MessageFormat {\n      * @param escapingOn whether to process escaped quotes\n      * @return <code>appendTo</code>\n      */\n-    private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n-            StringBuffer appendTo, boolean escapingOn) {\n-        int start = pos.getIndex();\n-        char[] c = pattern.toCharArray();\n-        if (escapingOn && c[start] == QUOTE) {\n-            return appendTo == null ? null : appendTo.append(QUOTE);\n-        }\n-        int lastHold = start;\n-        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n-            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n-                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n-                        QUOTE);\n-                pos.setIndex(i + ESCAPED_QUOTE.length());\n-                lastHold = pos.getIndex();\n-                continue;\n+private StringBuffer appendQuotedString(String pattern, ParsePosition pos,\n+        StringBuffer appendTo, boolean escapingOn) {\n+    int start = pos.getIndex();\n+    if (escapingOn && pattern.charAt(start) == QUOTE) {\n+        return appendTo == null ? null : appendTo.append(QUOTE);\n+    }\n+\n+    int lastHold = start;\n+    while (pos.getIndex() < pattern.length()) {\n+        char c = pattern.charAt(pos.getIndex());\n+        if (escapingOn && pattern.substring(pos.getIndex()).startsWith(ESCAPED_QUOTE)) {\n+            if (appendTo != null) {\n+                appendTo.append(pattern, lastHold, pos.getIndex() - lastHold).append(QUOTE);\n             }\n-            switch (c[pos.getIndex()]) {\n-            case QUOTE:\n-                next(pos);\n-                return appendTo == null ? null : appendTo.append(c, lastHold,\n-                        pos.getIndex() - lastHold);\n-            default:\n-                next(pos);\n+            pos.setIndex(pos.getIndex() + ESCAPED_QUOTE.length());\n+            lastHold = pos.getIndex();\n+        } else {\n+            switch (c) {\n+                case QUOTE:\n+                    if (appendTo != null) {\n+                        appendTo.append(pattern, lastHold, pos.getIndex() - lastHold);\n+                    }\n+                    next(pos);\n+                    return appendTo;\n+                default:\n+                    next(pos);\n             }\n         }\n-        throw new IllegalArgumentException(\n-                \"Unterminated quoted string at position \" + start);\n     }\n+    throw new IllegalArgumentException(\n+            \"Unterminated quoted string at position \" + start);\n+}\n \n     /**\n      * Consume quoted string only",
    "result_reason": "java.lang.OutOfMemoryError: Requested array size exceeds VM limit",
    "test_result": "FAIL"
}