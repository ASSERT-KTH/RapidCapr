{
    "patch": "public static boolean mayEffectMutableState(\n      Node n,\n      @Nullable CompilerOptions options,\n      @Nullable CodingConvention convention,\n>>> [ INFILL ] <<<\n      CompilerContext context) {\n\n    switch (n.getToken()) {\n      case FUNCTION: {\n        if (options != null &&\n            options.getLanguageOut().toFeatureSet().contains(FeatureSet.ES_NEXT)) {\n          // ES6 allows functions that don't reference \"this\" or \"arguments\"\n          // to remain outside of strict mode.\n          if (NodeUtil.referencesThis(n) || NodeUtil.referencesArguments(n)) {\n            return true;\n          }\n...",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..4e609620 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,23 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+public static boolean mayEffectMutableState(\n+      Node n,\n+      @Nullable CompilerOptions options,\n+      @Nullable CodingConvention convention,\n+>>> [ INFILL ] <<<\n+      CompilerContext context) {\n+\n+    switch (n.getToken()) {\n+      case FUNCTION: {\n+        if (options != null &&\n+            options.getLanguageOut().toFeatureSet().contains(FeatureSet.ES_NEXT)) {\n+          // ES6 allows functions that don't reference \"this\" or \"arguments\"\n+          // to remain outside of strict mode.\n+          if (NodeUtil.referencesThis(n) || NodeUtil.referencesArguments(n)) {\n+            return true;\n+          }\n+...\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}