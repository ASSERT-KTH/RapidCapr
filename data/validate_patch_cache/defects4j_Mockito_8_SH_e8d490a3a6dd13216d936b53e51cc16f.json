{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n                Type[] bounds = typeVariable.getBounds();\n                if (bounds.length == 1) {\n                    Type boundType = bounds[0];\n                    contextualActualTypeParameters.put(typeParameter, boundType instanceof WildcardType\n                            ? boundsOf((WildcardType) boundType)\n                            : boundType);\n                } else {\n                    throw new IllegalArgumentException(\n                            \"Currently only supports type variables with exactly 1 bound: \" + typeVariable);\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..797ee5a0f 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,19 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> typeVariable = (TypeVariable<?>) actualTypeArgument;\n+                Type[] bounds = typeVariable.getBounds();\n+                if (bounds.length == 1) {\n+                    Type boundType = bounds[0];\n+                    contextualActualTypeParameters.put(typeParameter, boundType instanceof WildcardType\n+                            ? boundsOf((WildcardType) boundType)\n+                            : boundType);\n+                } else {\n+                    throw new IllegalArgumentException(\n+                            \"Currently only supports type variables with exactly 1 bound: \" + typeVariable);\n+                }\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}