{
    "patch": "\nstatic boolean functionCallHasSideEffects(\n      Node callNode, @Nullable AbstractCompiler compiler) {\n    if (callNode.getType() != Token.CALL) {\n      throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));\n    }\n\n    if (callNode.isNoSideEffectsCall()) {\n      return false;\n    }\n\n    Node nameNode = callNode.getFirstChild();\n\n    // Built-in functions with no side effects.\n    if (nameNode.isQualifiedName() && nameNode.getQualifiedName() != null) {\n      String name = nameNode.getQualifiedName();\n      if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n        return false;\n      }\n      \n      // Check if the function call is on an instance of String\n      Node receiverNode = nameNode.getFirstChild();\n      if (receiverNode != null && receiverNode.isName() && \"String\".equals(receiverNode.getString())) {\n        if (STRING_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        }\n      }\n\n    } else if (nameNode.getType() == Token.GETPROP\n               || nameNode.getType() == Token.OPTCHAIN_GETPROP) {\n            \n      if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString())) {\n        return false;\n      }\n\n      if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild())) {\n        return false;\n      }\n\n      // Functions in the \"Math\" namespace have no side effects.\n\n      if (compiler != null && !compiler.hasRegExpGlobalReferences()) {\n        if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {\n          return false;\n        } else if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString())) {\n          Node param = nameNode.getNext();\n          if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))\n          return false;\n        }\n      }      \n      \n    }\n\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex 1844b18a..3db0e3f1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -923,7 +923,8 @@ public final class NodeUtil {\n    * @param compiler A compiler object to provide program state changing\n    *     context information. Can be null.\n    */\n-  static boolean functionCallHasSideEffects(\n+\n+static boolean functionCallHasSideEffects(\n       Node callNode, @Nullable AbstractCompiler compiler) {\n     if (callNode.getType() != Token.CALL) {\n       throw new IllegalStateException(\n@@ -937,12 +938,23 @@ public final class NodeUtil {\n     Node nameNode = callNode.getFirstChild();\n \n     // Built-in functions with no side effects.\n-    if (nameNode.getType() == Token.NAME) {\n-      String name = nameNode.getString();\n+    if (nameNode.isQualifiedName() && nameNode.getQualifiedName() != null) {\n+      String name = nameNode.getQualifiedName();\n       if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {\n         return false;\n       }\n-    } else if (nameNode.getType() == Token.GETPROP) {\n+      \n+      // Check if the function call is on an instance of String\n+      Node receiverNode = nameNode.getFirstChild();\n+      if (receiverNode != null && receiverNode.isName() && \"String\".equals(receiverNode.getString())) {\n+        if (STRING_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {\n+          return false;\n+        }\n+      }\n+\n+    } else if (nameNode.getType() == Token.GETPROP\n+               || nameNode.getType() == Token.OPTCHAIN_GETPROP) {\n+            \n       if (callNode.hasOneChild()\n           && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                 nameNode.getLastChild().getString())) {\n@@ -969,7 +981,8 @@ public final class NodeUtil {\n                   || param.getType() == Token.REGEXP))\n           return false;\n         }\n-      }\n+      }      \n+      \n     }\n \n     return true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}