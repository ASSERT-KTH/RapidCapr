{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n.isFunction()) {\n        return true;\n    }\n    if (n.isCall()) {\n        Node firstChild = n.getFirstChild();\n        if (firstChild.isFunction()) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..5aba1586 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,18 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n-  }\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n.isFunction()) {\n+        return true;\n+    }\n+    if (n.isCall()) {\n+        Node firstChild = n.getFirstChild();\n+        if (firstChild.isFunction()) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}