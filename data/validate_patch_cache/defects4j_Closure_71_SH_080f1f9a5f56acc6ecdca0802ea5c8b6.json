{
    "patch": "      boolean isOverride = false;\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED :\n            overridingInfo.getVisibility();\n      if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) {\n        Node grandParent = parent.getParent();\n        ObjectType grandparentType = isEnabled(CheckTypes.MISSING_PROPERTIES) ?\n            ObjectType.cast(grandParent.getFirstChild().getJSType()) : null;\n        isOverride = grandparentType != null && !NodeUtil.isNameDeclOrSimpleAssignLhs(grandParent) &&\n            !grandparentType.isFunctionPrototypeType() && !grandparentType.isEnumType() &&\n            (grandparentType.getOwnPropertyJSDocInfo(propertyName) != null ||\n            grandparentType.isNativeObjectType());\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..16752c28 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,19 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      JSDocInfo overridingInfo = parent.getJSDocInfo();\n+      Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED :\n+            overridingInfo.getVisibility();\n+      if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) {\n+        Node grandParent = parent.getParent();\n+        ObjectType grandparentType = isEnabled(CheckTypes.MISSING_PROPERTIES) ?\n+            ObjectType.cast(grandParent.getFirstChild().getJSType()) : null;\n+        isOverride = grandparentType != null && !NodeUtil.isNameDeclOrSimpleAssignLhs(grandParent) &&\n+            !grandparentType.isFunctionPrototypeType() && !grandparentType.isEnumType() &&\n+            (grandparentType.getOwnPropertyJSDocInfo(propertyName) != null ||\n+            grandparentType.isNativeObjectType());\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}