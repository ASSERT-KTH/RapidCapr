{
    "patch": "for (int i = 0; i < count; i++) {\n    SavedField field = savedFields[i];\n    DateTimeField dateTimeField = field.iField;\n    int compareTo = i + 1 < count ? dateTimeField.compareTo(savedFields[i + 1].iField) : 1;\n\n    // compute new value for current field\n    millis = field.set(millis, resetFields);\n\n    // compute new value for chronology sensitive fields\n    if (compareTo <= 0) {\n        DateTimeField nextDateTimeField = savedFields[i + 1].iField;\n        if (compareTo < 0 && (valueRange = dateTimeField.getRangeDurationField()) == nextDateTimeField.getRangeDurationField()) {\n            millis = nextDateTimeField.set(millis, nextDateTimeField.get(millis));\n            for (int j = i + 2; j < count; j++) {\n                field = savedFields[j];\n                if (field.iField.getRangeDurationField() != valueRange) {\n                    break;\n                }\n                millis = field.set(millis, resetFields);\n            }\n            i = findUpperBound(savedFields, i + 1, count, millis);\n        } else if (millis < this.iZone.getDateTimeMillis(iChrono.millisOfDay().set(millis, 0), millis)) {\n            if (compareTo < 0 || i + 2 >= count || savedFields[i + 2].iField.getDurationField().getType() != DurationFieldType.months()) {\n                millis = this.iZone.nextTransition(millis);\n                if ((millis - this.iZone.getOffset(millis)) < 0) {\n                    throw new IllegalArgumentException(\"Could not find valid value for \" + dateTimeField.getType());\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..99ec28f0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,37 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+for (int i = 0; i < count; i++) {\n+    SavedField field = savedFields[i];\n+    DateTimeField dateTimeField = field.iField;\n+    int compareTo = i + 1 < count ? dateTimeField.compareTo(savedFields[i + 1].iField) : 1;\n+\n+    // compute new value for current field\n+    millis = field.set(millis, resetFields);\n+\n+    // compute new value for chronology sensitive fields\n+    if (compareTo <= 0) {\n+        DateTimeField nextDateTimeField = savedFields[i + 1].iField;\n+        if (compareTo < 0 && (valueRange = dateTimeField.getRangeDurationField()) == nextDateTimeField.getRangeDurationField()) {\n+            millis = nextDateTimeField.set(millis, nextDateTimeField.get(millis));\n+            for (int j = i + 2; j < count; j++) {\n+                field = savedFields[j];\n+                if (field.iField.getRangeDurationField() != valueRange) {\n+                    break;\n+                }\n+                millis = field.set(millis, resetFields);\n+            }\n+            i = findUpperBound(savedFields, i + 1, count, millis);\n+        } else if (millis < this.iZone.getDateTimeMillis(iChrono.millisOfDay().set(millis, 0), millis)) {\n+            if (compareTo < 0 || i + 2 >= count || savedFields[i + 2].iField.getDurationField().getType() != DurationFieldType.months()) {\n+                millis = this.iZone.nextTransition(millis);\n+                if ((millis - this.iZone.getOffset(millis)) < 0) {\n+                    throw new IllegalArgumentException(\"Could not find valid value for \" + dateTimeField.getType());\n+                }\n+            }\n+        }\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}