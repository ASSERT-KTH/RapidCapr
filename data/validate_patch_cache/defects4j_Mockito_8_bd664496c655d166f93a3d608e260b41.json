{
    "patch": "    private void captureTypeVariable(Class clazz, Map<TypeVariable, Type> contextualActualTypeParameters) {\n        Type classType = clazz.getGenericSuperclass();\n        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n\n            // Check if typeParameter exists in the Map before getting the value\n            if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n                contextualActualTypeParameters.put(typeParameter, null); // put a marker value\n            }\n\n            Type type = contextualActualTypeParameters.get(typeParameter); // get the value for the typeParameter\n\n            if (type instanceof ParameterizedType) {\n                evaluateTypeVariables((ParameterizedType) type, contextualActualTypeParameters);\n            } else if (type instanceof TypeVariable) {\n                TypeVariable typeVariable = (TypeVariable) type;\n                type = contextualActualTypeParameters.get(typeVariable);\n\n                // Check if typeVariable exists in the Map before getting the value\n                if (!contextualActualTypeParameters.containsKey(typeVariable)) {\n                    contextualActualTypeParameters.put(typeVariable, null); // put a marker value\n                }\n\n                Type newType = contextualActualTypeParameters.get(typeVariable); // get the value for the typeVariable\n\n                if (newType != null) {\n                    contextualActualTypeParameters.put(typeParameter, newType);\n                }\n            }\n            if (type != null && type instanceof Class && ((Class) type).getTypeParameters().length > 0) {\n                captureTypeVariable((Class) type, contextualActualTypeParameters);\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..e1e26aebf 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,53 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+    private void captureTypeVariable(Class clazz, Map<TypeVariable, Type> contextualActualTypeParameters) {\n+        Type classType = clazz.getGenericSuperclass();\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            TypeVariable typeParameter = typeParameters[i];\n+            Type actualTypeArgument = actualTypeArguments[i];\n+\n+            if (actualTypeArgument instanceof WildcardType) {\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+\n+            // Check if typeParameter exists in the Map before getting the value\n+            if (!contextualActualTypeParameters.containsKey(typeParameter)) {\n+                contextualActualTypeParameters.put(typeParameter, null); // put a marker value\n+            }\n+\n+            Type type = contextualActualTypeParameters.get(typeParameter); // get the value for the typeParameter\n+\n+            if (type instanceof ParameterizedType) {\n+                evaluateTypeVariables((ParameterizedType) type, contextualActualTypeParameters);\n+            } else if (type instanceof TypeVariable) {\n+                TypeVariable typeVariable = (TypeVariable) type;\n+                type = contextualActualTypeParameters.get(typeVariable);\n+\n+                // Check if typeVariable exists in the Map before getting the value\n+                if (!contextualActualTypeParameters.containsKey(typeVariable)) {\n+                    contextualActualTypeParameters.put(typeVariable, null); // put a marker value\n+                }\n+\n+                Type newType = contextualActualTypeParameters.get(typeVariable); // get the value for the typeVariable\n+\n+                if (newType != null) {\n+                    contextualActualTypeParameters.put(typeParameter, newType);\n+                }\n+            }\n+            if (type != null && type instanceof Class && ((Class) type).getTypeParameters().length > 0) {\n+                captureTypeVariable((Class) type, contextualActualTypeParameters);\n+            }\n+        }\n+    }\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}