{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        double result = Double.NaN;\n        if (Double.isInfinite(x)) {\n            result = x < 0 ? 0.0 : 1.0;\n        } else if (Double.isNaN(x)) {\n            result = Double.NaN;\n        } else {\n            double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n            double tc = 2.0 / (Math.PI * Math.sqrt(2.0));\n            double sum = 0.0;\n            double term = z;\n            int i = 1;\n            while (term != 0.0) {\n                sum += term;\n                term = z * z * (-1 * i) / ((2 * i + 1) * Math.sqrt(Math.PI * 2)) * term;\n                i++;\n                if (i > 100) {\n                    throw new MathException(\"Maximal number of iterations exceeded\");\n                }\n            }\n            result = 0.5 * tc * sum + 0.5;\n            if (result > 1.0) {\n                result = 1.0;\n            } else if (result < 0.0) {\n                result = 0.0;\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..7fddb107b 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,33 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        double result = Double.NaN;\n+        if (Double.isInfinite(x)) {\n+            result = x < 0 ? 0.0 : 1.0;\n+        } else if (Double.isNaN(x)) {\n+            result = Double.NaN;\n+        } else {\n+            double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n+            double tc = 2.0 / (Math.PI * Math.sqrt(2.0));\n+            double sum = 0.0;\n+            double term = z;\n+            int i = 1;\n+            while (term != 0.0) {\n+                sum += term;\n+                term = z * z * (-1 * i) / ((2 * i + 1) * Math.sqrt(Math.PI * 2)) * term;\n+                i++;\n+                if (i > 100) {\n+                    throw new MathException(\"Maximal number of iterations exceeded\");\n+                }\n+            }\n+            result = 0.5 * tc * sum + 0.5;\n+            if (result > 1.0) {\n+                result = 1.0;\n+            } else if (result < 0.0) {\n+                result = 0.0;\n+            }\n+        }\n+        return result;\n     }\n     \n     /**",
    "result_reason": "org.apache.commons.math.MathException: Maximal number of iterations exceeded",
    "test_result": "FAIL"
}