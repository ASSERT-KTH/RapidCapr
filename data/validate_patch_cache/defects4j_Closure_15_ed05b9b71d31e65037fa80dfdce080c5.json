{
    "patch": "      if (n.isAssign() && n.getFirstChild() != null && n.getFirstChild().isName()) {\n        String varName = n.getFirstChild().getString();\n        if (!isExcluded(varName) && NodeUtil.isExpressionResultUsed(n)) {\n          Node rhs = n.getLastChild();\n          if (!NodeUtil.mayHaveSideEffects(rhs)) {\n            return false;\n          }\n          if (isDependent(varName, rhs)) {\n            return true;\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..f4e5f60c 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,18 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+      if (n.isAssign() && n.getFirstChild() != null && n.getFirstChild().isName()) {\n+        String varName = n.getFirstChild().getString();\n+        if (!isExcluded(varName) && NodeUtil.isExpressionResultUsed(n)) {\n+          Node rhs = n.getLastChild();\n+          if (!NodeUtil.mayHaveSideEffects(rhs)) {\n+            return false;\n+          }\n+          if (isDependent(varName, rhs)) {\n+            return true;\n+          }\n+        }\n+      }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}