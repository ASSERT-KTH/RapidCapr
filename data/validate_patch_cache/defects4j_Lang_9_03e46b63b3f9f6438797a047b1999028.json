{
    "patch": "    private static final Strategy INSTANCE = new MillisecondsStrategy();\n\n    private static final Pattern PATTERN = Pattern.compile(\"(\\\\p{IsNd}{1,3})\");\n\n    private static final int FIELD = Calendar.MILLISECOND;\n\n    static Strategy getStrategy() {\n        return INSTANCE;\n    }\n\n    @Override\n    boolean addRegex(DatetimeFormatterBuilder builder, StringBuilder regex) {\n        builder.appendPattern(\"SSS\");\n        regex.append('(').append(PATTERN.pattern()).append(')');\n        return true;\n    }\n\n    @Override\n    void setCalendar(DateTimeParserBucket bucket, int value) {\n        bucket.saveField(FIELD, value);\n    }\n\n    @Override\n    int modify(DateTimeParserBucket bucket, int value) {\n        return value;\n    }\n\n    @Override\n    void createCalendar(DateTimeParserBucket bucket) {\n        int millis = Integer.parseInt(bucket.getParsed(fieldID).getValue().toString());\n        bucket.saveField(Calendar.MILLISECOND, millis);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..98492ce1 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -112,41 +112,37 @@ public class FastDateParser implements DateParser, Serializable {\n      * Initialize derived fields from defining fields.\n      * This is called from constructor and from readObject (de-serialization)\n      */\n-    private void init() {\n-        thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);\n+    private static final Strategy INSTANCE = new MillisecondsStrategy();\n \n-        nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();\n+    private static final Pattern PATTERN = Pattern.compile(\"(\\\\p{IsNd}{1,3})\");\n \n-        StringBuilder regex= new StringBuilder();\n-        List<Strategy> collector = new ArrayList<Strategy>();\n+    private static final int FIELD = Calendar.MILLISECOND;\n \n-        Matcher patternMatcher= formatPattern.matcher(pattern);\n-        if(!patternMatcher.lookingAt()) {\n-            throw new IllegalArgumentException(\"Invalid pattern\");\n-        }\n+    static Strategy getStrategy() {\n+        return INSTANCE;\n+    }\n \n-        currentFormatField= patternMatcher.group();\n-        Strategy currentStrategy= getStrategy(currentFormatField);\n-        for(;;) {\n-            patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n-            if(!patternMatcher.lookingAt()) {\n-                nextStrategy = null;\n-                break;\n-            }\n-            String nextFormatField= patternMatcher.group();\n-            nextStrategy = getStrategy(nextFormatField);\n-            if(currentStrategy.addRegex(this, regex)) {\n-                collector.add(currentStrategy);\n-            }\n-            currentFormatField= nextFormatField;\n-            currentStrategy= nextStrategy;\n-        }\n-        if(currentStrategy.addRegex(this, regex)) {\n-            collector.add(currentStrategy);\n-        }\n-        currentFormatField= null;\n-        strategies= collector.toArray(new Strategy[collector.size()]);\n-        parsePattern= Pattern.compile(regex.toString());\n+    @Override\n+    boolean addRegex(DatetimeFormatterBuilder builder, StringBuilder regex) {\n+        builder.appendPattern(\"SSS\");\n+        regex.append('(').append(PATTERN.pattern()).append(')');\n+        return true;\n+    }\n+\n+    @Override\n+    void setCalendar(DateTimeParserBucket bucket, int value) {\n+        bucket.saveField(FIELD, value);\n+    }\n+\n+    @Override\n+    int modify(DateTimeParserBucket bucket, int value) {\n+        return value;\n+    }\n+\n+    @Override\n+    void createCalendar(DateTimeParserBucket bucket) {\n+        int millis = Integer.parseInt(bucket.getParsed(fieldID).getValue().toString());\n+        bucket.saveField(Calendar.MILLISECOND, millis);\n     }\n \n     // Accessors",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}