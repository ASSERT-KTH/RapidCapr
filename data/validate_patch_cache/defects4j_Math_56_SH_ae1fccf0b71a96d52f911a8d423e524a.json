{
    "patch": "        int idx = 1;\n        while (count <= index) {\n            count += idx;\n            ++idx;\n        }\n        --idx;\n        count -= idx;\n        for (int i = last-1; i >= 0; i--) {\n            indices[i] = count%uniCounterOffset[i]/uniCounterOffset[i+1];\n        }\n        indices[last] = idx;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\nindex 56c9ffebc..f24352e03 100644\n--- a/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n+++ b/src/main/java/org/apache/commons/math/util/MultidimensionalCounter.java\n@@ -235,11 +235,15 @@ public class MultidimensionalCounter implements Iterable<Integer> {\n         }\n \n         int idx = 1;\n-        while (count < index) {\n+        while (count <= index) {\n             count += idx;\n             ++idx;\n         }\n         --idx;\n+        count -= idx;\n+        for (int i = last-1; i >= 0; i--) {\n+            indices[i] = count%uniCounterOffset[i]/uniCounterOffset[i+1];\n+        }\n         indices[last] = idx;\n \n         return indices;",
    "result_reason": "java.lang.ArithmeticException: / by zero",
    "test_result": "FAIL"
}