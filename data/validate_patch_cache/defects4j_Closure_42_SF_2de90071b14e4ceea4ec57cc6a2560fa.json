{
    "patch": "    @Override\n    protected Node processBlock(Block blockNode) {\n      return processGenericBlock(blockNode);\n    }\n\n    @Override\n    protected Node processBreakStatement(BreakStatement statementNode) {\n      Node node = newNode(Token.BREAK);\n      if (statementNode.getBreakLabel() != null) {\n        Node labelName = transform(statementNode.getBreakLabel());\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    protected Node processCatchClause(CatchClause clauseNode) {\n      AstNode catchVar = clauseNode.getVarName();\n      Node node = newNode(Token.CATCH, transform(catchVar));\n      if (clauseNode.getCatchCondition() != null) {\n        errorReporter.error(\"Catch clauses are not supported\", sourceName,\n                clauseNode.getCatchCondition().getLineno(), \"\", 0);\n      }\n      node.addChildToBack(transformBlock(clauseNode.getBody()));\n      return node;\n    }\n\n    @Override\n    protected Node processConditionalExpression(ConditionalExpression exprNode) {\n      return newNode(\n        Token.HOOK,\n        transform(exprNode.getTestExpression()),\n        transform(exprNode.getTrueExpression()),\n        transform(exprNode.getFalseExpression()));\n    }\n\n    @Override\n    protected Node processContinueStatement(ContinueStatement statementNode) {\n      Node node = newNode(Token.CONTINUE);\n      if (statementNode.getLabel() != null) {\n        Node labelName = transform(statementNode.getLabel());\n        labelName.setType(Token.LABEL_NAME);\n        node.addChildToBack(labelName);\n      }\n      return node;\n    }\n\n    @Override\n    protected Node processDoLoop(DoLoop loopNode) {\n      return newNode(\n        Token.DO,\n        transformBlock(loopNode.getBody()),\n        transform(loopNode.getCondition()));\n    }\n\n    @Override\n    protected Node processElementGet(ElementGet getNode) {\n      return newNode(\n        Token.GETELEM,\n        transform(getNode.getTarget()),\n        transform(getNode.getElement()));\n    }\n\n    @Override\n    protected Node processEmptyExpression(EmptyExpression exprNode) {\n      Node node = newNode(Token.EMPTY);\n      return node;\n    }\n\n    @Override\n    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n      Node node = newNode(transformTokenType(statementNode.getType()));\n      node.addChildToBack(transform(statementNode.getExpression()));\n      return node;\n    }\n\n    @Override\n    protected Node processForInLoop(ForInLoop loopNode) {\n      if (loopNode.isForEach()) {\n        return newNode(\n          Token.FOR_OF,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n      } else {\n        return newNode(\n          Token.FOR_IN,\n          transform(loopNode.getIterator()),\n          transform(loopNode.getIteratedObject()),\n          transformBlock(loopNode.getBody()));\n      }\n    }\n    \n    private Set<String> ALLOWED_DIRECTIVES = new HashSet<String>(Arrays.asList(\n            \"use strict\",\n            \"use asm\",\n            \"use strict on\",\n            \"use strict off\",\n            \"package\",\n            \"import\"\n            ));\n\n    private boolean isDirective(Node n) {\n      if (n == null) {\n        return false;\n      }\n      int nType = n.getType();\n      if (nType == Token.EXPR_RESULT) {\n        Node child = n.getFirstChild();\n        if (child != null && child.isString()) {\n          String value = child.getString();\n          return ALLOWED_DIRECTIVES.contains(value);\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..68919f66 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,26 +473,16 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n     @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n+    protected Node processBlock(Block blockNode) {\n+      return processGenericBlock(blockNode);\n     }\n \n     @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n+    protected Node processBreakStatement(BreakStatement statementNode) {\n       Node node = newNode(Token.BREAK);\n       if (statementNode.getBreakLabel() != null) {\n         Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n         labelName.setType(Token.LABEL_NAME);\n         node.addChildToBack(labelName);\n       }\n@@ -500,34 +490,31 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n+    protected Node processCatchClause(CatchClause clauseNode) {\n       AstNode catchVar = clauseNode.getVarName();\n       Node node = newNode(Token.CATCH, transform(catchVar));\n       if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n+        errorReporter.error(\"Catch clauses are not supported\", sourceName,\n+                clauseNode.getCatchCondition().getLineno(), \"\", 0);\n       }\n       node.addChildToBack(transformBlock(clauseNode.getBody()));\n       return node;\n     }\n \n     @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n+    protected Node processConditionalExpression(ConditionalExpression exprNode) {\n       return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n+        Token.HOOK,\n+        transform(exprNode.getTestExpression()),\n+        transform(exprNode.getTrueExpression()),\n+        transform(exprNode.getFalseExpression()));\n     }\n \n     @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n+    protected Node processContinueStatement(ContinueStatement statementNode) {\n       Node node = newNode(Token.CONTINUE);\n       if (statementNode.getLabel() != null) {\n         Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n         labelName.setType(Token.LABEL_NAME);\n         node.addChildToBack(labelName);\n       }\n@@ -535,43 +522,73 @@ class IRFactory {\n     }\n \n     @Override\n-    Node processDoLoop(DoLoop loopNode) {\n+    protected Node processDoLoop(DoLoop loopNode) {\n       return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n+        Token.DO,\n+        transformBlock(loopNode.getBody()),\n+        transform(loopNode.getCondition()));\n     }\n \n     @Override\n-    Node processElementGet(ElementGet getNode) {\n+    protected Node processElementGet(ElementGet getNode) {\n       return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n+        Token.GETELEM,\n+        transform(getNode.getTarget()),\n+        transform(getNode.getElement()));\n     }\n \n     @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n+    protected Node processEmptyExpression(EmptyExpression exprNode) {\n       Node node = newNode(Token.EMPTY);\n       return node;\n     }\n \n     @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n+    protected Node processExpressionStatement(ExpressionStatement statementNode) {\n       Node node = newNode(transformTokenType(statementNode.getType()));\n       node.addChildToBack(transform(statementNode.getExpression()));\n       return node;\n     }\n \n     @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n+    protected Node processForInLoop(ForInLoop loopNode) {\n+      if (loopNode.isForEach()) {\n+        return newNode(\n+          Token.FOR_OF,\n           transform(loopNode.getIterator()),\n           transform(loopNode.getIteratedObject()),\n           transformBlock(loopNode.getBody()));\n+      } else {\n+        return newNode(\n+          Token.FOR_IN,\n+          transform(loopNode.getIterator()),\n+          transform(loopNode.getIteratedObject()),\n+          transformBlock(loopNode.getBody()));\n+      }\n+    }\n+    \n+    private Set<String> ALLOWED_DIRECTIVES = new HashSet<String>(Arrays.asList(\n+            \"use strict\",\n+            \"use asm\",\n+            \"use strict on\",\n+            \"use strict off\",\n+            \"package\",\n+            \"import\"\n+            ));\n+\n+    private boolean isDirective(Node n) {\n+      if (n == null) {\n+        return false;\n+      }\n+      int nType = n.getType();\n+      if (nType == Token.EXPR_RESULT) {\n+        Node child = n.getFirstChild();\n+        if (child != null && child.isString()) {\n+          String value = child.getString();\n+          return ALLOWED_DIRECTIVES.contains(value);\n+        }\n+      }\n+      return false;\n     }\n \n     @Override",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}