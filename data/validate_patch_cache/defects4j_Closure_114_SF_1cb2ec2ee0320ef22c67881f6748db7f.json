{
    "patch": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        // If the parent is a FUNCTION, the assignment may be the function name, so we\n        // should associate it with the function itself rather than the enclosing scope.\n        if (parent.isFunction()) {\n          recordDepScope(parent, ns);\n        } else if (parent.isFor() && parent.getFirstChild() == n) {\n          // If the parent is a FOR loop and the assignment is part of the init expression,\n          // associate the dependency scope with the loop variable.\n          recordDepScope(nameNode, ns);\n        } else if (parent.isCall() && parent.getLastChild() == n &&\n            NodeUtil.isExpressionResultUsed(parent)) {\n          // If the parent is a CALL node and the result of the call is used, associate\n          // the dependency scope with both the LHS and the enclosing scope.\n          Node fnNode = n.getFirstChild();\n          NameInformation fnNs = createNameInformation(t, fnNode);\n          if (fnNs != null) {\n            recordDepScope(recordNode, ns);\n            recordDepScope(fnNode, fnNs);\n            for (Node argNode = n.getLastChild().getFirstChild(); argNode != null;\n                argNode = argNode.getNext()) {\n              recordDepScope(argNode, createNameInformation(t, argNode));\n            }\n          }\n        } else {\n          // Otherwise, associate the dependency scope with the enclosing scope.\n          recordDepScope(recordNode, ns);\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..1a72222c 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -554,34 +554,35 @@ final class NameAnalyzer implements CompilerPass {\n           break;\n       }\n     }\n-\n     private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n       Node nameNode = n.getFirstChild();\n       Node parent = n.getParent();\n       NameInformation ns = createNameInformation(t, nameNode);\n       if (ns != null) {\n-        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n+        // If the parent is a FUNCTION, the assignment may be the function name, so we\n+        // should associate it with the function itself rather than the enclosing scope.\n+        if (parent.isFunction()) {\n+          recordDepScope(parent, ns);\n+        } else if (parent.isFor() && parent.getFirstChild() == n) {\n+          // If the parent is a FOR loop and the assignment is part of the init expression,\n+          // associate the dependency scope with the loop variable.\n+          recordDepScope(nameNode, ns);\n+        } else if (parent.isCall() && parent.getLastChild() == n &&\n+            NodeUtil.isExpressionResultUsed(parent)) {\n+          // If the parent is a CALL node and the result of the call is used, associate\n+          // the dependency scope with both the LHS and the enclosing scope.\n+          Node fnNode = n.getFirstChild();\n+          NameInformation fnNs = createNameInformation(t, fnNode);\n+          if (fnNs != null) {\n             recordDepScope(recordNode, ns);\n-          } else {\n-            recordDepScope(nameNode, ns);\n+            recordDepScope(fnNode, fnNs);\n+            for (Node argNode = n.getLastChild().getFirstChild(); argNode != null;\n+                argNode = argNode.getNext()) {\n+              recordDepScope(argNode, createNameInformation(t, argNode));\n+            }\n           }\n         } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n+          // Otherwise, associate the dependency scope with the enclosing scope.\n           recordDepScope(recordNode, ns);\n         }\n       }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}