{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (n.isCall()) {\n    Node callee = n.getFirstChild();\n    if (callee.isFunction()) {\n      String functionName = callee.getFirstChild().getQualifiedName();\n      Node functionBody = callee.getLastChild();\n      return functionName != null && functionBody != null;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..4a7ff26b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,17 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (n.isCall()) {\n+    Node callee = n.getFirstChild();\n+    if (callee.isFunction()) {\n+      String functionName = callee.getFirstChild().getQualifiedName();\n+      Node functionBody = callee.getLastChild();\n+      return functionName != null && functionBody != null;\n+    }\n+  }\n+  return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}