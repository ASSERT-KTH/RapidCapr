{
    "patch": "        // If the two types are unequal and at least one of them is nullable, the result is (null, non-null).\n        if ((this.isNullable() || that.isNullable()) && !(this.isTop() || that.isTop())) {\n          return new TypePair(null, this.removeNullable());\n        }\n\n        // If none of the types are nullable, the result is (non-null, non-null).\n        if (!(this.isTop() || that.isTop())) {\n          return new TypePair(this.removeNullable(), that.removeNullable());\n        }\n\n        // If one of the types is a top type, the result is (possibly-null type, definitely-non-null type).\n        if (this.isTop() || that.isTop()) {\n          // If both types are top types, the result is (nullable type, non-null type).\n          if (this.isTop() && that.isTop()) {\n            return new TypePair(null, this.removeNullable());\n          }\n          return (this.isTop()) ? new TypePair(that.removeNullable(), that.removeNullable()) : new TypePair(this.removeNullable(), this.removeNullable());\n        }\n\n        throw new IllegalStateException();",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..2a2d3c0d 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,26 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        // If the two types are unequal and at least one of them is nullable, the result is (null, non-null).\n+        if ((this.isNullable() || that.isNullable()) && !(this.isTop() || that.isTop())) {\n+          return new TypePair(null, this.removeNullable());\n+        }\n+\n+        // If none of the types are nullable, the result is (non-null, non-null).\n+        if (!(this.isTop() || that.isTop())) {\n+          return new TypePair(this.removeNullable(), that.removeNullable());\n+        }\n+\n+        // If one of the types is a top type, the result is (possibly-null type, definitely-non-null type).\n+        if (this.isTop() || that.isTop()) {\n+          // If both types are top types, the result is (nullable type, non-null type).\n+          if (this.isTop() && that.isTop()) {\n+            return new TypePair(null, this.removeNullable());\n+          }\n+          return (this.isTop()) ? new TypePair(that.removeNullable(), that.removeNullable()) : new TypePair(this.removeNullable(), this.removeNullable());\n+        }\n+\n+        throw new IllegalStateException();\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}