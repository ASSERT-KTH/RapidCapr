{
    "patch": "private boolean resolveInterfaceProperties(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n    for (String property : classDef.propertyNames()) {\n        JSDocInfo jsdoc = classDef.getAnnotation();\n        if (jsdoc != null && jsdoc.isConstructor()) {\n            continue;\n        }\n        ObjectType inferredType = ObjectType.cast(classDef.getImplementedInterfaceOrBaseType(property));\n        if (inferredType != null && !extendInterface(errorReporter, inferredType)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate boolean resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) {\n    boolean interfaceResolved = resolveInterfaceProperties(t, enclosing);\n    if (detectImplicitPrototypeCycle()) {\n        handleTypeCycle(t);\n    }\n\n    if (interfaceResolved) {\n        // If an interface was resolved this way, we can skip resolving via\n        // registry since the interface resolution has already taken care of it.\n        return true;\n    }\n\n    for (String property : classDef.propertyNames()) {\n        ObjectType inferredType = ObjectType.cast(classDef.getImplementedInterfaceOrBaseType(property));\n        if (inferredType != null) {\n            continue;\n        }\n        JSDocInfo jsdoc = classDef.getAnnotation();\n        if (jsdoc != null && jsdoc.isConstructor()) {\n            continue;\n        }\n        if (!resolveProperty(jsdoc, property, t, enclosing.redeclare(property))) {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..d8f37b2d 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,47 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+private boolean resolveInterfaceProperties(ErrorReporter errorReporter, StaticScope<JSType> enclosing) {\n+    for (String property : classDef.propertyNames()) {\n+        JSDocInfo jsdoc = classDef.getAnnotation();\n+        if (jsdoc != null && jsdoc.isConstructor()) {\n+            continue;\n+        }\n+        ObjectType inferredType = ObjectType.cast(classDef.getImplementedInterfaceOrBaseType(property));\n+        if (inferredType != null && !extendInterface(errorReporter, inferredType)) {\n+            return false;\n+        }\n     }\n+    return true;\n+}\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+private boolean resolveViaProperties(ErrorReporter t, StaticScope<JSType> enclosing) {\n+    boolean interfaceResolved = resolveInterfaceProperties(t, enclosing);\n+    if (detectImplicitPrototypeCycle()) {\n+        handleTypeCycle(t);\n     }\n \n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    if (interfaceResolved) {\n+        // If an interface was resolved this way, we can skip resolving via\n+        // registry since the interface resolution has already taken care of it.\n+        return true;\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n+    for (String property : classDef.propertyNames()) {\n+        ObjectType inferredType = ObjectType.cast(classDef.getImplementedInterfaceOrBaseType(property));\n+        if (inferredType != null) {\n+            continue;\n+        }\n+        JSDocInfo jsdoc = classDef.getAnnotation();\n+        if (jsdoc != null && jsdoc.isConstructor()) {\n+            continue;\n+        }\n+        if (!resolveProperty(jsdoc, property, t, enclosing.redeclare(property))) {\n+            return false;\n+        }\n     }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return true;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: method resolveViaProperties(ErrorReporter,StaticScope<JSType>) is already defined in class NamedType",
    "test_result": "ERROR"
}