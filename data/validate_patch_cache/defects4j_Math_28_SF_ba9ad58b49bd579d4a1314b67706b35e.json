{
    "patch": "private Integer getPivotRow(SimplexTableau tableau, final int col) {\n\n    Integer minRatioPos = null;\n    Integer minRatioPos2 = null;\n    double minRatio = Double.POSITIVE_INFINITY;\n    double minRatio2 = Double.POSITIVE_INFINITY;\n\n    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n        final double entry = tableau.getEntry(i, col);\n        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n            final double ratio = tableau.getEntry(i, tableau.getWidth() - 1) / entry;\n            if (ratio < minRatio) {\n                minRatio2 = minRatio;\n                minRatio = ratio;\n                minRatioPos2 = minRatioPos;\n                minRatioPos = i;\n\n            } else if (ratio < minRatio2) {\n                minRatio2 = ratio;\n                minRatioPos2 = i;\n            }\n        }\n    }\n\n    if (minRatioPos == null) {\n        return null;\n    }\n\n    if (minRatio < (1d + SimplexTableau.PRIMAL_TOLERANCE)) {\n        // pick the row that has the fewest number of nonzeros in its row\n        int mostZeroRow = -1;\n        int mostZeroCnt = -1;\n        for (Integer i : new Integer[]{minRatioPos, minRatioPos2}) {\n            if (i != null) {\n                int zeroCnt = 0;\n                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth(); j++) {\n                    if (Precision.equals(tableau.getEntry(i, j), 0d, maxUlps)) {\n                        zeroCnt++;\n                    }\n                }\n                if (mostZeroCnt < zeroCnt) {\n                    mostZeroCnt = zeroCnt;\n                    mostZeroRow = i;\n                }\n            }\n        }\n        return mostZeroRow;\n    }\n\n    // picking an entry with largest absolute value for stability reasons\n    Integer pivotRow;\n    if (minRatio2 == Double.POSITIVE_INFINITY) {\n        pivotRow = minRatioPos;\n    } else {\n        final int signum = tableau.getFractionalArray().get(col).getDenominator() < 0 ? -1 : 1;\n        final double diff1 = Math.abs(minRatio - tableau.getEntry(minRatioPos, tableau.getNumObjectiveFunctions() - 1));\n        final double diff2 = Math.abs(minRatio2 - tableau.getEntry(minRatioPos2, tableau.getNumObjectiveFunctions() - 1));\n        if (Precision.equals(diff1, diff2, maxUlps)) {\n            Integer maxRow = null;\n            double maxEntry = Double.NEGATIVE_INFINITY;\n            for (Integer i : new Integer[]{minRatioPos, minRatioPos2}) {\n                if (i != null) {\n                    final double entry = tableau.getEntry(i, col);\n                    final double absEntry = signum * Math.abs(entry);\n                    if (Precision.equals(diff1, Math.abs(minRatio - entry), maxUlps)) {\n                        if (maxRow == null || absEntry > maxEntry) {\n                            maxRow = i;\n                            maxEntry = absEntry;\n                        }\n                    }\n                }\n            }\n            pivotRow = maxRow;\n        } else {\n            pivotRow = diff1 > diff2 ? minRatioPos2 : minRatioPos;\n        }\n    }\n\n    // Bland's rule: if multiple candidates for entering variable, choose one with smallest index.\n    // This is to prevent cycling behaviour whereas any other rule might not converge the simplex method\n    // see http://en.wikipedia.org/wiki/Bland%27s_rule for more details as well as reference to original paper\n    if (pivotRow != null && tableau.getBasicRow(col) != pivotRow) {\n        Integer minIndexRow = null;\n        int minIndex = tableau.getWidth();\n        for (Integer i : new Integer[]{pivotRow, minRatioPos, minRatioPos2}) {\n            if (i != null) {\n                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth()-1; j++) {\n                    if (Precision.equals(tableau.getEntry(i, j), 1d, maxUlps) && (minIndexRow == null || j < minIndex)) {\n                        minIndexRow = i;\n                        minIndex = j;\n                    }\n                }\n            }\n        }\n        if (minIndexRow != null) {\n            pivotRow = minIndexRow;\n        }\n        simplexTableau.setPivotSelectionRule(SimplexTableau.PivotSelectionRule.BLAND);\n    }\n\n    return pivotRow;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\nindex a84438d9b..e9b4b9643 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java\n@@ -87,72 +87,109 @@ public class SimplexSolver extends AbstractLinearOptimizer {\n      * @param col the column to test the ratio of.  See {@link #getPivotColumn(SimplexTableau)}\n      * @return row with the minimum ratio\n      */\n-    private Integer getPivotRow(SimplexTableau tableau, final int col) {\n-        // create a list of all the rows that tie for the lowest score in the minimum ratio test\n-        List<Integer> minRatioPositions = new ArrayList<Integer>();\n-        double minRatio = Double.MAX_VALUE;\n-        for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);\n-            final double entry = tableau.getEntry(i, col);\n-\n-            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n-                final double ratio = rhs / entry;\n-                // check if the entry is strictly equal to the current min ratio\n-                // do not use a ulp/epsilon check\n-                final int cmp = Double.compare(ratio, minRatio);\n-                if (cmp == 0) {\n-                    minRatioPositions.add(i);\n-                } else if (cmp < 0) {\n-                    minRatio = ratio;\n-                    minRatioPositions = new ArrayList<Integer>();\n-                    minRatioPositions.add(i);\n+private Integer getPivotRow(SimplexTableau tableau, final int col) {\n+\n+    Integer minRatioPos = null;\n+    Integer minRatioPos2 = null;\n+    double minRatio = Double.POSITIVE_INFINITY;\n+    double minRatio2 = Double.POSITIVE_INFINITY;\n+\n+    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {\n+        final double entry = tableau.getEntry(i, col);\n+        if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n+            final double ratio = tableau.getEntry(i, tableau.getWidth() - 1) / entry;\n+            if (ratio < minRatio) {\n+                minRatio2 = minRatio;\n+                minRatio = ratio;\n+                minRatioPos2 = minRatioPos;\n+                minRatioPos = i;\n+\n+            } else if (ratio < minRatio2) {\n+                minRatio2 = ratio;\n+                minRatioPos2 = i;\n+            }\n+        }\n+    }\n+\n+    if (minRatioPos == null) {\n+        return null;\n+    }\n+\n+    if (minRatio < (1d + SimplexTableau.PRIMAL_TOLERANCE)) {\n+        // pick the row that has the fewest number of nonzeros in its row\n+        int mostZeroRow = -1;\n+        int mostZeroCnt = -1;\n+        for (Integer i : new Integer[]{minRatioPos, minRatioPos2}) {\n+            if (i != null) {\n+                int zeroCnt = 0;\n+                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth(); j++) {\n+                    if (Precision.equals(tableau.getEntry(i, j), 0d, maxUlps)) {\n+                        zeroCnt++;\n+                    }\n+                }\n+                if (mostZeroCnt < zeroCnt) {\n+                    mostZeroCnt = zeroCnt;\n+                    mostZeroRow = i;\n                 }\n             }\n         }\n+        return mostZeroRow;\n+    }\n \n-        if (minRatioPositions.size() == 0) {\n-            return null;\n-        } else if (minRatioPositions.size() > 1) {\n-            // there's a degeneracy as indicated by a tie in the minimum ratio test\n-\n-            // 1. check if there's an artificial variable that can be forced out of the basis\n-                for (Integer row : minRatioPositions) {\n-                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {\n-                        int column = i + tableau.getArtificialVariableOffset();\n-                        final double entry = tableau.getEntry(row, column);\n-                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {\n-                            return row;\n+    // picking an entry with largest absolute value for stability reasons\n+    Integer pivotRow;\n+    if (minRatio2 == Double.POSITIVE_INFINITY) {\n+        pivotRow = minRatioPos;\n+    } else {\n+        final int signum = tableau.getFractionalArray().get(col).getDenominator() < 0 ? -1 : 1;\n+        final double diff1 = Math.abs(minRatio - tableau.getEntry(minRatioPos, tableau.getNumObjectiveFunctions() - 1));\n+        final double diff2 = Math.abs(minRatio2 - tableau.getEntry(minRatioPos2, tableau.getNumObjectiveFunctions() - 1));\n+        if (Precision.equals(diff1, diff2, maxUlps)) {\n+            Integer maxRow = null;\n+            double maxEntry = Double.NEGATIVE_INFINITY;\n+            for (Integer i : new Integer[]{minRatioPos, minRatioPos2}) {\n+                if (i != null) {\n+                    final double entry = tableau.getEntry(i, col);\n+                    final double absEntry = signum * Math.abs(entry);\n+                    if (Precision.equals(diff1, Math.abs(minRatio - entry), maxUlps)) {\n+                        if (maxRow == null || absEntry > maxEntry) {\n+                            maxRow = i;\n+                            maxEntry = absEntry;\n                         }\n                     }\n                 }\n+            }\n+            pivotRow = maxRow;\n+        } else {\n+            pivotRow = diff1 > diff2 ? minRatioPos2 : minRatioPos;\n+        }\n+    }\n \n-            // 2. apply Bland's rule to prevent cycling:\n-            //    take the row for which the corresponding basic variable has the smallest index\n-            //\n-            // see http://www.stanford.edu/class/msande310/blandrule.pdf\n-            // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)\n-            //\n-            // Additional heuristic: if we did not get a solution after half of maxIterations\n-            //                       revert to the simple case of just returning the top-most row\n-            // This heuristic is based on empirical data gathered while investigating MATH-828.\n-                Integer minRow = null;\n-                int minIndex = tableau.getWidth();\n-                for (Integer row : minRatioPositions) {\n-                    int i = tableau.getNumObjectiveFunctions();\n-                    for (; i < tableau.getWidth() - 1 && minRow != row; i++) {\n-                        if (row == tableau.getBasicRow(i)) {\n-                            if (i < minIndex) {\n-                                minIndex = i;\n-                                minRow = row;\n-                            }\n-                        }\n+    // Bland's rule: if multiple candidates for entering variable, choose one with smallest index.\n+    // This is to prevent cycling behaviour whereas any other rule might not converge the simplex method\n+    // see http://en.wikipedia.org/wiki/Bland%27s_rule for more details as well as reference to original paper\n+    if (pivotRow != null && tableau.getBasicRow(col) != pivotRow) {\n+        Integer minIndexRow = null;\n+        int minIndex = tableau.getWidth();\n+        for (Integer i : new Integer[]{pivotRow, minRatioPos, minRatioPos2}) {\n+            if (i != null) {\n+                for (int j = tableau.getNumObjectiveFunctions(); j < tableau.getWidth()-1; j++) {\n+                    if (Precision.equals(tableau.getEntry(i, j), 1d, maxUlps) && (minIndexRow == null || j < minIndex)) {\n+                        minIndexRow = i;\n+                        minIndex = j;\n                     }\n                 }\n-                return minRow;\n+            }\n+        }\n+        if (minIndexRow != null) {\n+            pivotRow = minIndexRow;\n         }\n-        return minRatioPositions.get(0);\n+        simplexTableau.setPivotSelectionRule(SimplexTableau.PivotSelectionRule.BLAND);\n     }\n \n+    return pivotRow;\n+}\n+\n     /**\n      * Runs one iteration of the Simplex method on the given model.\n      * @param tableau simple tableau for the problem",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}