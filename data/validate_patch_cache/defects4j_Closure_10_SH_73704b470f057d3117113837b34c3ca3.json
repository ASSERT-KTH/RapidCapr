{
    "patch": "    HashSet<Node> seenFunctions = new HashSet<Node>();\n    Deque<Node> workList = new ArrayDeque<Node>();\n    workList.add(n);\n    while (!workList.isEmpty()) {\n      Node currentNode = workList.pop();\n      if (currentNode == null || !seenFunctions.add(currentNode)) {\n        continue;\n      }\n      if (mayBeStringHelper(currentNode)) {\n        return true;\n      }\n      workList.addAll(graph_.getSuccNodes(currentNode));\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..493b9502 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,10 +1411,22 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    HashSet<Node> seenFunctions = new HashSet<Node>();\n+    Deque<Node> workList = new ArrayDeque<Node>();\n+    workList.add(n);\n+    while (!workList.isEmpty()) {\n+      Node currentNode = workList.pop();\n+      if (currentNode == null || !seenFunctions.add(currentNode)) {\n+        continue;\n+      }\n+      if (mayBeStringHelper(currentNode)) {\n+        return true;\n+      }\n+      workList.addAll(graph_.getSuccNodes(currentNode));\n+    }\n+    return false;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}