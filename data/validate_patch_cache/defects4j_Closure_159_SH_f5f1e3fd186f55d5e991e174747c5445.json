{
    "patch": "if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME) {\n      String functionName = node.getFirstChild().getString();\n      if (changed.add(functionName)) {\n        Node fnNode = getCfg().getFunctions().get(functionName);\n        if (fnNode != null) {\n          findCalledFunctions(fnNode.getLastChild(), changed);\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..d0ab12a6 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,20 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+if (node.getType() == Token.CALL && node.getFirstChild() != null && node.getFirstChild().getType() == Token.NAME) {\n+      String functionName = node.getFirstChild().getString();\n+      if (changed.add(functionName)) {\n+        Node fnNode = getCfg().getFunctions().get(functionName);\n+        if (fnNode != null) {\n+          findCalledFunctions(fnNode.getLastChild(), changed);\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}