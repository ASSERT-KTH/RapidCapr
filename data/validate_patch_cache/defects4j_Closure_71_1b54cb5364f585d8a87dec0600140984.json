{
    "patch": "private String getRemainingJSDocLine() {\n  String result = stream.getRemainingJSDocLine();\n  if (result.startsWith(\"*\\/\")) {\n    // Comment completed before this function.\n    return \"\";\n  }\n\n  int index = result.indexOf(\"*/\");\n  if (index != -1) {\n    stream.advance(index + 2);\n    return result.substring(0, index + 2);\n  } else {\n    char prev = ' ';\n    for (int i = 0; i < result.length(); ++i) {\n      char ch = result.charAt(i);\n      if (ch == '*') {\n        prev = ch;\n      } else if (ch == '/') {\n        if (prev == '*') {\n          stream.advance(i + 1);\n          return result.substring(0, i + 1);\n        }\n        prev = ch;\n      } else {\n        prev = ch;\n      }\n    }\n    stream.advance(result.length());\n    return result;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..fc602bde 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,37 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+private String getRemainingJSDocLine() {\n+  String result = stream.getRemainingJSDocLine();\n+  if (result.startsWith(\"*\\/\")) {\n+    // Comment completed before this function.\n+    return \"\";\n+  }\n+\n+  int index = result.indexOf(\"*/\");\n+  if (index != -1) {\n+    stream.advance(index + 2);\n+    return result.substring(0, index + 2);\n+  } else {\n+    char prev = ' ';\n+    for (int i = 0; i < result.length(); ++i) {\n+      char ch = result.charAt(i);\n+      if (ch == '*') {\n+        prev = ch;\n+      } else if (ch == '/') {\n+        if (prev == '*') {\n+          stream.advance(i + 1);\n+          return result.substring(0, i + 1);\n+        }\n+        prev = ch;\n+      } else {\n+        prev = ch;\n+      }\n+    }\n+    stream.advance(result.length());\n+    return result;\n+  }\n+}\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}