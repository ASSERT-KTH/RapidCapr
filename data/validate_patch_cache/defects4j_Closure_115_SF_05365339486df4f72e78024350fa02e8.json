{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n    boolean hasSideEffects = false;\n    boolean spreadArgument = false;\n    if (block.hasChildren() && block.hasOneChild() && block.getFirstChild().isReturn()) {\n      hasSideEffects = NodeUtil.mayHaveSideEffects(block.getFirstChild().getFirstChild(), compiler);\n      spreadArgument = block.getFirstChild().getFirstChild().hasChildren();\n    }\n\n    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n    Node entryArg = callNode.getFirstChild().getNext();\n\n    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n    while (entryArg != null || fnParam != null) {\n      // For each named parameter check if a mutable argument use more than one.\n      if (fnParam != null) {\n        if (entryArg != null) {\n          boolean canInlineEntry =\n              canInlineEntryIf(args(entryArg, compiler, standardModule), fnParam, hasSideEffects);\n          if (canInlineEntry == CanInlineResult.NO) {\n            return CanInlineResult.NO;\n          } else if (canInlineEntry == CanInlineResult.WITH_DEFAULT) {\n            // Check for named arguments with default values that can have side-effects.\n            if (hasSideEffects && NodeUtil.hasDeferredSideEffects(fnParam.getSecondChild(), compiler)) {\n              return CanInlineResult.NO;\n            }\n          } else {\n            Preconditions.checkState(canInlineEntry == CanInlineResult.YES);\n          }\n          // Move to the next name.\n          entryArg = entryArg.getNext();\n        } else {\n          if (block.hasChildren()) {\n            Node lastStatement = block.getLastChild();\n            if (lastStatement.isSwitch()) {\n              if (hasSideEffects && NodeUtil.canBeSideEffected(lastStatement.getFirstChild())) {\n                return CanInlineResult.NO;\n              }\n            } else if (lastStatement.isReturn()) {\n              if (block.getChildCount() != 1) {\n                // Inlining the expression in this case could remove a block-scope\n                // declaration and lead to a introduce variable or introduce let expression.\n                return CanInlineResult.NO;\n              }\n              Node returnExpr = lastStatement.getFirstChild();\n              if (hasSideEffects && NodeUtil.canBeSideEffected(returnExpr)) {\n                return CanInlineResult.NO;\n              }\n              // Use fnNode to get the get the name count and reference\n              // node, which might be in an outer scope of the inlined\n              // function.\n              if (NodeUtil.getNameReferenceCount(\n                      fnNode, fnParam.getString()) > 1) {\n                return CanInlineResult.NO;\n              }\n            }\n          }\n        }\n        // Move to the next name.\n        fnParam = fnParam.getNext();\n      } else if (entryArg != null) {\n        // For every call argument check for side-effects, even if there\n        // isn't a named parameter to match.\n        if (spreadArgument) {\n          if (entryArg.getNext() != null) {\n            // Spread with additional arguments doesn't conserve param list ordering.\n            return CanInlineResult.NO;\n          }\n          if (hasSideEffects && NodeUtil.canBeSideEffected(entryArg.getFirstChild())) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          if (NodeUtil.mayHaveSideEffects(entryArg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        }\n        entryArg = entryArg.getNext();\n      }\n    }\n\n    return CanInlineResult.YES;\n  }\n\n  private boolean canInlineEntryIf(\n      List<Node> entry, Node param, boolean fnHasSideEffects) {\n    if (entry.isEmpty() || param == null) {\n      return false;\n    }\n    Node firstNode = entry.get(0);\n    if (firstNode != null && firstNode.isSpread()) {\n      // Spread may appear at any position => inlining is fine.\n      return true;\n    }\n\n    boolean hasSideEffects = fnHasSideEffects && NodeUtil.canBeSideEffected(entry);\n    if (param.isDefaultValue()) {\n      if (entry.size() == 1) {\n        // No need for the default value.\n        return true;\n      } else {\n        // Make sure the arguments following the default value have no side-effects.\n        for (int i = 1, len = entry.size(); i < len; i++) {\n          Node arg = entry.get(i);\n          if (hasSideEffects && NodeUtil.canBeSideEffected(arg)) {\n            return false;\n          }\n        }\n        return true;\n      }\n    } else {\n      if (entry.size() > 1) {\n        // A parameter can have only one value.\n        return false;\n      }\n      // Has the argument an expression with a side-effect?\n      if (hasSideEffects && NodeUtil.canBeSideEffected(firstNode)) {\n        return false;\n      }\n      return true;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..cf68b5c2 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -693,70 +693,127 @@ class FunctionInjector {\n     }\n \n     Node block = fnNode.getLastChild();\n-\n     boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n-      }\n+    boolean spreadArgument = false;\n+    if (block.hasChildren() && block.hasOneChild() && block.getFirstChild().isReturn()) {\n+      hasSideEffects = NodeUtil.mayHaveSideEffects(block.getFirstChild().getFirstChild(), compiler);\n+      spreadArgument = block.getFirstChild().getFirstChild().hasChildren();\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n+    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+    Node entryArg = callNode.getFirstChild().getNext();\n \n     // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n     Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n+    while (entryArg != null || fnParam != null) {\n       // For each named parameter check if a mutable argument use more than one.\n       if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+        if (entryArg != null) {\n+          boolean canInlineEntry =\n+              canInlineEntryIf(args(entryArg, compiler, standardModule), fnParam, hasSideEffects);\n+          if (canInlineEntry == CanInlineResult.NO) {\n             return CanInlineResult.NO;\n+          } else if (canInlineEntry == CanInlineResult.WITH_DEFAULT) {\n+            // Check for named arguments with default values that can have side-effects.\n+            if (hasSideEffects && NodeUtil.hasDeferredSideEffects(fnParam.getSecondChild(), compiler)) {\n+              return CanInlineResult.NO;\n+            }\n+          } else {\n+            Preconditions.checkState(canInlineEntry == CanInlineResult.YES);\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+          // Move to the next name.\n+          entryArg = entryArg.getNext();\n+        } else {\n+          if (block.hasChildren()) {\n+            Node lastStatement = block.getLastChild();\n+            if (lastStatement.isSwitch()) {\n+              if (hasSideEffects && NodeUtil.canBeSideEffected(lastStatement.getFirstChild())) {\n+                return CanInlineResult.NO;\n+              }\n+            } else if (lastStatement.isReturn()) {\n+              if (block.getChildCount() != 1) {\n+                // Inlining the expression in this case could remove a block-scope\n+                // declaration and lead to a introduce variable or introduce let expression.\n+                return CanInlineResult.NO;\n+              }\n+              Node returnExpr = lastStatement.getFirstChild();\n+              if (hasSideEffects && NodeUtil.canBeSideEffected(returnExpr)) {\n+                return CanInlineResult.NO;\n+              }\n+              // Use fnNode to get the get the name count and reference\n+              // node, which might be in an outer scope of the inlined\n+              // function.\n+              if (NodeUtil.getNameReferenceCount(\n+                      fnNode, fnParam.getString()) > 1) {\n+                return CanInlineResult.NO;\n+              }\n+            }\n           }\n         }\n-\n         // Move to the next name.\n         fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n+      } else if (entryArg != null) {\n+        // For every call argument check for side-effects, even if there\n+        // isn't a named parameter to match.\n+        if (spreadArgument) {\n+          if (entryArg.getNext() != null) {\n+            // Spread with additional arguments doesn't conserve param list ordering.\n+            return CanInlineResult.NO;\n+          }\n+          if (hasSideEffects && NodeUtil.canBeSideEffected(entryArg.getFirstChild())) {\n+            return CanInlineResult.NO;\n+          }\n+        } else {\n+          if (NodeUtil.mayHaveSideEffects(entryArg, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n         }\n-        cArg = cArg.getNext();\n+        entryArg = entryArg.getNext();\n       }\n     }\n \n     return CanInlineResult.YES;\n   }\n \n+  private boolean canInlineEntryIf(\n+      List<Node> entry, Node param, boolean fnHasSideEffects) {\n+    if (entry.isEmpty() || param == null) {\n+      return false;\n+    }\n+    Node firstNode = entry.get(0);\n+    if (firstNode != null && firstNode.isSpread()) {\n+      // Spread may appear at any position => inlining is fine.\n+      return true;\n+    }\n+\n+    boolean hasSideEffects = fnHasSideEffects && NodeUtil.canBeSideEffected(entry);\n+    if (param.isDefaultValue()) {\n+      if (entry.size() == 1) {\n+        // No need for the default value.\n+        return true;\n+      } else {\n+        // Make sure the arguments following the default value have no side-effects.\n+        for (int i = 1, len = entry.size(); i < len; i++) {\n+          Node arg = entry.get(i);\n+          if (hasSideEffects && NodeUtil.canBeSideEffected(arg)) {\n+            return false;\n+          }\n+        }\n+        return true;\n+      }\n+    } else {\n+      if (entry.size() > 1) {\n+        // A parameter can have only one value.\n+        return false;\n+      }\n+      // Has the argument an expression with a side-effect?\n+      if (hasSideEffects && NodeUtil.canBeSideEffected(firstNode)) {\n+        return false;\n+      }\n+      return true;\n+    }\n+  }\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}