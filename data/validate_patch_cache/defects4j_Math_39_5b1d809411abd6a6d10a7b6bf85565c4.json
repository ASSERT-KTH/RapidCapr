{
    "patch": "        // stepsize control for next step\n        final double factor =\n            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n        final double  scaledH    = stepSize * factor;\n        final double  nextT      = stepStart + scaledH;\n        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n        hNew = filterStep(scaledH, forward, nextIsLast);\n\n        final double  filteredNextT      = stepStart + hNew;\n        final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n        if (filteredNextIsLast) {\n            hNew = t - stepStart;\n        }\n\n      } // added this line\n\n    } while (!isLastStep);\n\n    // dispatch results\n    equations.setTime(stepStart);\n    equations.setCompleteState(y);\n\n    resetInternalState();\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..ea2363538 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,31 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+        // stepsize control for next step\n+        final double factor =\n+            FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));\n+        final double  scaledH    = stepSize * factor;\n+        final double  nextT      = stepStart + scaledH;\n+        final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);\n+        hNew = filterStep(scaledH, forward, nextIsLast);\n+\n+        final double  filteredNextT      = stepStart + hNew;\n+        final boolean filteredNextIsLast = forward ? (filteredNextT >= t) : (filteredNextT <= t);\n+        if (filteredNextIsLast) {\n+            hNew = t - stepStart;\n+        }\n+\n+      } // added this line\n+\n+    } while (!isLastStep);\n+\n+    // dispatch results\n+    equations.setTime(stepStart);\n+    equations.setCompleteState(y);\n+\n+    resetInternalState();\n+\n+  }\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}