{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node functionNode) {\n  if (!isDirectCallNodeReplacementPossible(functionNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node block = functionNode.getLastChild();\n  if (NodeUtil.mayHaveSideEffects(block, compiler)) {\n    return CanInlineResult.NO;\n  }\n\n  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n  Node arg = callNode.getFirstChild().getNext();\n  boolean hasRestArg = false;\n\n  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n  Node param = NodeUtil.getFunctionParameters(functionNode).getFirstChild();\n  while (arg != null || param != null) {\n    if (param != null) {\n      if (NodeUtil.isVarArgs(param)) {\n        hasRestArg = true;\n      } else if (arg != null) {\n        if (hasRestArg) { // if we have seen a rest arg we ignore the rest of the parameters\n          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n            return CanInlineResult.NO;\n          }\n        } else {\n          // Regular parameter.\n          if (arg.isSpread()) {\n            if (!arg.getLastChild().isName()) {\n              return CanInlineResult.NO;\n            }\n            // make sure there are no side effects from the other elements of the spread array\n            Node spreadChild = arg.getFirstChild();\n            while (spreadChild != null) {\n              if (NodeUtil.mayHaveSideEffects(spreadChild, compiler)) {\n                return CanInlineResult.NO;\n              }\n              spreadChild = spreadChild.getNext();\n            }\n          } else if (!NodeUtil.isEmptyStatement(arg)) {\n            if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n              // Parameter that might have side-effects.\n              return CanInlineResult.NO;\n            }\n          }\n        }\n      }\n      param = param.getNext();\n    }\n    if (arg != null) {\n      if (hasRestArg) { // no more formal parameters we can put all remaining arguments into a rest parameter\n        return CanInlineResult.YES_WITH_REST_ARGS;\n      }\n      if (arg.isSpread()) {\n        if (!NodeUtil.isEs6ObjectLiteralsEnabled(compiler)) {\n          return CanInlineResult.NO;\n        }\n        Node spreadChild = arg.getFirstChild();\n        while (spreadChild != null) {\n          if (!spreadChild.isObjectLit() || !spreadChild.hasChildren()) {\n            return CanInlineResult.NO;\n          }\n          Node value = spreadChild.getFirstChild().getFirstChild();\n          while (value != null) {\n            if (!value.getFirstChild().isString()) {\n              return CanInlineResult.NO;\n            }\n            if (NodeUtil.mayHaveSideEffects(value.getFirstChild(), compiler) ||\n                NodeUtil.mayHaveSideEffects(value.getLastChild(), compiler)) {\n              return CanInlineResult.NO;\n            }\n            value = value.getNext();\n          }\n          spreadChild = spreadChild.getNext();\n        }\n        arg = null;\n      } else {\n        arg = arg.getNext();\n      }\n    }\n  }\n\n  // Return if we went through all the parameters and arguments in sync.\n  return CanInlineResult.YES;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex 73d6a4b3..3ed03102 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,77 +686,92 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node functionNode) {\n+  if (!isDirectCallNodeReplacementPossible(functionNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    Node block = fnNode.getLastChild();\n+  Node block = functionNode.getLastChild();\n+  if (NodeUtil.mayHaveSideEffects(block, compiler)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    boolean hasSideEffects = false;\n-    if (block.hasChildren()) {\n-      Preconditions.checkState(block.hasOneChild());\n-      Node stmt = block.getFirstChild();\n-      if (stmt.isReturn()) {\n-        hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);\n+  // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n+  Node arg = callNode.getFirstChild().getNext();\n+  boolean hasRestArg = false;\n+\n+  // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n+  Node param = NodeUtil.getFunctionParameters(functionNode).getFirstChild();\n+  while (arg != null || param != null) {\n+    if (param != null) {\n+      if (NodeUtil.isVarArgs(param)) {\n+        hasRestArg = true;\n+      } else if (arg != null) {\n+        if (hasRestArg) { // if we have seen a rest arg we ignore the rest of the parameters\n+          if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+            return CanInlineResult.NO;\n+          }\n+        } else {\n+          // Regular parameter.\n+          if (arg.isSpread()) {\n+            if (!arg.getLastChild().isName()) {\n+              return CanInlineResult.NO;\n+            }\n+            // make sure there are no side effects from the other elements of the spread array\n+            Node spreadChild = arg.getFirstChild();\n+            while (spreadChild != null) {\n+              if (NodeUtil.mayHaveSideEffects(spreadChild, compiler)) {\n+                return CanInlineResult.NO;\n+              }\n+              spreadChild = spreadChild.getNext();\n+            }\n+          } else if (!NodeUtil.isEmptyStatement(arg)) {\n+            if (NodeUtil.mayHaveSideEffects(arg, compiler)) {\n+              // Parameter that might have side-effects.\n+              return CanInlineResult.NO;\n+            }\n+          }\n+        }\n       }\n+      param = param.getNext();\n     }\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n-\n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+    if (arg != null) {\n+      if (hasRestArg) { // no more formal parameters we can put all remaining arguments into a rest parameter\n+        return CanInlineResult.YES_WITH_REST_ARGS;\n+      }\n+      if (arg.isSpread()) {\n+        if (!NodeUtil.isEs6ObjectLiteralsEnabled(compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-          if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {\n+        Node spreadChild = arg.getFirstChild();\n+        while (spreadChild != null) {\n+          if (!spreadChild.isObjectLit() || !spreadChild.hasChildren()) {\n             return CanInlineResult.NO;\n           }\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n+          Node value = spreadChild.getFirstChild().getFirstChild();\n+          while (value != null) {\n+            if (!value.getFirstChild().isString()) {\n+              return CanInlineResult.NO;\n+            }\n+            if (NodeUtil.mayHaveSideEffects(value.getFirstChild(), compiler) ||\n+                NodeUtil.mayHaveSideEffects(value.getLastChild(), compiler)) {\n+              return CanInlineResult.NO;\n+            }\n+            value = value.getNext();\n           }\n+          spreadChild = spreadChild.getNext();\n         }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n-      }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+        arg = null;\n+      } else {\n+        arg = arg.getNext();\n       }\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  // Return if we went through all the parameters and arguments in sync.\n+  return CanInlineResult.YES;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}