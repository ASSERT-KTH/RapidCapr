{
    "patch": "if (NodeUtil.isNameReferenced(lastArg.getString(), function)) {\n  break;\n}\nargList.removeChild(lastArg);\ncompiler.reportChangeToEnclosingScope(function);\n\nif (lastArg.isName()) {\n  // Remove the variable from the scope.\n  Var var = fnScope.getVar(lastArg.getString());\n  if (var != null) {\n    fnScope.removeVar(var);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..bef38641 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,19 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+if (NodeUtil.isNameReferenced(lastArg.getString(), function)) {\n+  break;\n+}\n+argList.removeChild(lastArg);\n+compiler.reportChangeToEnclosingScope(function);\n+\n+if (lastArg.isName()) {\n+  // Remove the variable from the scope.\n+  Var var = fnScope.getVar(lastArg.getString());\n+  if (var != null) {\n+    fnScope.removeVar(var);\n+  }\n+}\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}