{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType type = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        type = getNativeType(UNKNOWN_TYPE);\n      } else if (constructorType.isFunctionType()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n          type = ct.getInstanceType();\n        }\n      } else {\n        ObjectType objType = constructorType.autobox().toObjectType();\n        if (objType != null) {\n          FunctionType ct = objType.getConstructor();\n          if (ct != null && ct.isConstructor()) {\n            type = ct.getInstanceType();\n          }\n        }\n      }\n    }\n    n.setJSType(type);\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..57cfc36b 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,9 +1031,7 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n@@ -1042,17 +1040,19 @@ class TypeInference\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n         type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+      } else if (constructorType.isFunctionType()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n         }\n+      } else {\n+        ObjectType objType = constructorType.autobox().toObjectType();\n+        if (objType != null) {\n+          FunctionType ct = objType.getConstructor();\n+          if (ct != null && ct.isConstructor()) {\n+            type = ct.getInstanceType();\n+          }\n+        }\n       }\n     }\n     n.setJSType(type);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}