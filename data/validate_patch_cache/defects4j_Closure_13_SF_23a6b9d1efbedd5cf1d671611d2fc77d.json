{
    "patch": "private boolean traverse(Node node, int level) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n      return false;\n    }\n\n    int visits = 0;\n    boolean changed = false;\n    do {\n      Node c = node.getFirstChild();\n      while(c != null) {\n        if(traverse(c, level+1)) {\n          changed = true;\n        }\n        c = c.getNext();\n      }\n\n      if(level == 0 || changed) {\n        visit(node);\n      }\n\n      visits++;\n      if(visits >= 10000) {\n        throw new IllegalStateException(\"too many iterations\");\n      }\n\n    } while (shouldRetraverse(node) && visits < 10000);\n\n    if(level == 0) {\n      exitNode(node);\n    }\n\n    return changed;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..3999f83b 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,31 +110,42 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n+private boolean traverse(Node node, int level) {\n     // The goal here is to avoid retraversing\n     // the entire AST to catch newly created opportunities.\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+      return false;\n     }\n \n     int visits = 0;\n+    boolean changed = false;\n     do {\n       Node c = node.getFirstChild();\n       while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n+        if(traverse(c, level+1)) {\n+          changed = true;\n+        }\n+        c = c.getNext();\n+      }\n+\n+      if(level == 0 || changed) {\n+        visit(node);\n       }\n \n-      visit(node);\n       visits++;\n+      if(visits >= 10000) {\n+        throw new IllegalStateException(\"too many iterations\");\n+      }\n+\n+    } while (shouldRetraverse(node) && visits < 10000);\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    if(level == 0) {\n+      exitNode(node);\n+    }\n \n-    exitNode(node);\n+    return changed;\n   }\n \n   private boolean shouldRetraverse(Node node) {",
    "result_reason": "error: method traverse in class PeepholeOptimizationsPass cannot be applied to given types;",
    "test_result": "ERROR"
}