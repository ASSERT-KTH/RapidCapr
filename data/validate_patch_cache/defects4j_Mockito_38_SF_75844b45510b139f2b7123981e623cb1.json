{
    "patch": "private boolean toStringEquals(Matcher m, Object arg) {\n    if (m == null && arg == null) { // if both objects are null\n        return true; // they are equal\n    } else if (m == null || arg == null) { // if one object is null and the other is not\n        return false; // they are not equal\n    } else { // if both objects are not null\n        try {\n            String mStr = StringDescription.toString(m); // get string representation of m\n            String argStr = arg.toString(); // get string representation of arg\n            if (mStr == null || argStr == null) {\n                return m == arg; // if either string is null, compare object references directly\n            } else {\n                return mStr.equals(argStr); // compare the strings\n            }\n        } catch (Exception e) { // catch any exception that may be thrown\n            return false; // if any exception occurs, the objects are not equal\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\nindex 671fbc539..0a346a196 100644\n--- a/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n+++ b/src/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java\n@@ -44,7 +44,24 @@ public class ArgumentMatchingTool {\n         }\n     }\n \n-    private boolean toStringEquals(Matcher m, Object arg) {\n-        return StringDescription.toString(m).equals(arg.toString());\n-    }\n+\n+private boolean toStringEquals(Matcher m, Object arg) {\n+    if (m == null && arg == null) { // if both objects are null\n+        return true; // they are equal\n+    } else if (m == null || arg == null) { // if one object is null and the other is not\n+        return false; // they are not equal\n+    } else { // if both objects are not null\n+        try {\n+            String mStr = StringDescription.toString(m); // get string representation of m\n+            String argStr = arg.toString(); // get string representation of arg\n+            if (mStr == null || argStr == null) {\n+                return m == arg; // if either string is null, compare object references directly\n+            } else {\n+                return mStr.equals(argStr); // compare the strings\n+            }\n+        } catch (Exception e) { // catch any exception that may be thrown\n+            return false; // if any exception occurs, the objects are not equal\n+        }\n+    }\n+}\n }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}