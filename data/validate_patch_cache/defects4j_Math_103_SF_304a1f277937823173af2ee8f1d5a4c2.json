{
    "patch": "    public double cumulativeProbability(double x) throws MathException {\n        // Check for extreme values\n        if (Double.isInfinite(x)) {\n            return (x < 0) ? 0.0 : 1.0;\n        } else if (Double.isNaN(x)) {\n            return Double.NaN;\n        }\n\n        // Calculate cumulative probability using Erf\n        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n        double cumulative = Erf.erfc(-z / 2.0);\n\n        // Check for overflow and underflow\n        if (Double.isNaN(cumulative)) {\n            return cumulative;\n        } else if (cumulative == 0.0) {\n            return (z < 0) ? 1.0 : 0.0;\n        } else if (cumulative == 1.0) {\n            return (z < 0) ? 0.0 : 1.0;\n        }\n\n        // Return cumulative probability\n        return 0.5 * cumulative;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..d7883608f 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -106,8 +106,28 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n     public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+        // Check for extreme values\n+        if (Double.isInfinite(x)) {\n+            return (x < 0) ? 0.0 : 1.0;\n+        } else if (Double.isNaN(x)) {\n+            return Double.NaN;\n+        }\n+\n+        // Calculate cumulative probability using Erf\n+        double z = (x - mean) / (standardDeviation * Math.sqrt(2.0));\n+        double cumulative = Erf.erfc(-z / 2.0);\n+\n+        // Check for overflow and underflow\n+        if (Double.isNaN(cumulative)) {\n+            return cumulative;\n+        } else if (cumulative == 0.0) {\n+            return (z < 0) ? 1.0 : 0.0;\n+        } else if (cumulative == 1.0) {\n+            return (z < 0) ? 0.0 : 1.0;\n+        }\n+\n+        // Return cumulative probability\n+        return 0.5 * cumulative;\n     }\n     \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}