{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is weekyear or week\n        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n        DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n        DurationField first = savedFields[0].iField.getDurationField();\n\n        if (compareReverse(first, weekyears) >= 0 && compareReverse(first, weeks) <= 0) {\n            // get weekyear and week values\n            int weekyear = 0, week = 0;\n            for (SavedField sf : savedFields) {\n                DurationField sfField = sf.iField.getDurationField();\n                if (compareReverse(sfField, weekyears) == 0) {\n                    weekyear = sf.iValue;\n                } else if (compareReverse(sfField, weeks) == 0) {\n                    week = sf.iValue;\n                }\n                if (weekyear != 0 && week != 0) break;\n            }\n            if (weekyear == 0) {\n                weekyear = iDefaultYear;\n            }\n            if (week < 1 || week > iChrono.weeksInWeekyear(weekyear).getMaximumValue()) {\n                String message = \"Invalid week of weekyear: \" + week;\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n            // use the start of the specified week\n            LocalDate date = iChrono.setWeekDate(weekyear, week, 1);\n            saveField(DateTimeFieldType.weekyear(), date.getWeekyear());\n            saveField(DateTimeFieldType.weekOfWeekyear(), week);\n            // reset any previously saved month, day, or year fields\n            resetFields(DateTimeFieldType.monthOfYear());\n            resetFields(DateTimeFieldType.dayOfMonth());\n            resetFields(DateTimeFieldType.year());\n            iBaseMillis = date.toDateTime(LocalTime.MIDNIGHT, iZone).getMillis();\n        } else if (compareReverse(first, DateTimeFieldType.monthOfYear().getField(iChrono)) >= 0) {\n            // alter the year only if the first field is month or day\n            saveField(DateTimeFieldType.year(), iDefaultYear);\n        }\n    }\n\n    long millis = iBaseMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..43d437e7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,86 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is weekyear or week\n+        DurationField weeks = DurationFieldType.weeks().getField(iChrono);\n+        DurationField weekyears = DurationFieldType.weekyears().getField(iChrono);\n+        DurationField first = savedFields[0].iField.getDurationField();\n \n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+        if (compareReverse(first, weekyears) >= 0 && compareReverse(first, weeks) <= 0) {\n+            // get weekyear and week values\n+            int weekyear = 0, week = 0;\n+            for (SavedField sf : savedFields) {\n+                DurationField sfField = sf.iField.getDurationField();\n+                if (compareReverse(sfField, weekyears) == 0) {\n+                    weekyear = sf.iValue;\n+                } else if (compareReverse(sfField, weeks) == 0) {\n+                    week = sf.iValue;\n+                }\n+                if (weekyear != 0 && week != 0) break;\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            if (weekyear == 0) {\n+                weekyear = iDefaultYear;\n             }\n-            throw e;\n-        }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (week < 1 || week > iChrono.weeksInWeekyear(weekyear).getMaximumValue()) {\n+                String message = \"Invalid week of weekyear: \" + week;\n                 if (text != null) {\n                     message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                 }\n                 throw new IllegalArgumentException(message);\n             }\n+            // use the start of the specified week\n+            LocalDate date = iChrono.setWeekDate(weekyear, week, 1);\n+            saveField(DateTimeFieldType.weekyear(), date.getWeekyear());\n+            saveField(DateTimeFieldType.weekOfWeekyear(), week);\n+            // reset any previously saved month, day, or year fields\n+            resetFields(DateTimeFieldType.monthOfYear());\n+            resetFields(DateTimeFieldType.dayOfMonth());\n+            resetFields(DateTimeFieldType.year());\n+            iBaseMillis = date.toDateTime(LocalTime.MIDNIGHT, iZone).getMillis();\n+        } else if (compareReverse(first, DateTimeFieldType.monthOfYear().getField(iChrono)) >= 0) {\n+            // alter the year only if the first field is month or day\n+            saveField(DateTimeFieldType.year(), iDefaultYear);\n         }\n-        \n-        return millis;\n     }\n+\n+    long millis = iBaseMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n+                \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}