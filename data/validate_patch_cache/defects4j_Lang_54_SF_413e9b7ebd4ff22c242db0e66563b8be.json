{
    "patch": "public static Locale toLocale(String str) {\n    if (StringUtils.isBlank(str)) {\n        return null;\n    }\n\n    String[] parts = str.split(\"_\", -1);\n    int len = parts.length;\n\n    if (len == 0 || len > 3) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    for (int i = 0; i < len; i++) {\n        String part = parts[i];\n        if (part.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n        }\n        if (i == 0 && !isValidLanguage(part)) {\n            throw new IllegalArgumentException(\"Invalid locale language: \" + part);\n        }\n        if (i == 1 && !isValidCountry(part)) {\n            throw new IllegalArgumentException(\"Invalid locale country: \" + part);\n        }\n        if (i == 2 && !isValidVariant(part)) {\n            throw new IllegalArgumentException(\"Invalid locale variant: \" + part);\n        }\n    }\n\n    String language = parts.length > 0 ? parts[0].toLowerCase(Locale.ROOT) : \"\";\n    String country = parts.length > 1 ? parts[1].toUpperCase(Locale.ROOT) : \"\";\n    String variant = parts.length > 2 ? parts[2] : \"\";\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLanguage(String str) {\n    if (StringUtils.isBlank(str)) {\n        return false;\n    }\n    if (str.length() != 2) {\n        return false;\n    }\n    for (char ch : str.toCharArray()) {\n        if (!Character.isLowerCase(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidCountry(String str) {\n    if (StringUtils.isBlank(str)) {\n        return false;\n    }\n    if (str.length() != 2) {\n        return false;\n    }\n    for (char ch : str.toCharArray()) {\n        if (!Character.isUpperCase(ch)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidVariant(String str) {\n    if (StringUtils.isBlank(str)) {\n        return false;\n    }\n    for (char ch : str.toCharArray()) {\n        if (!Character.isLetterOrDigit(ch) && ch != '_' && ch != '-') {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..768a5b06 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,41 +91,83 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n+public static Locale toLocale(String str) {\n+    if (StringUtils.isBlank(str)) {\n+        return null;\n+    }\n+\n+    String[] parts = str.split(\"_\", -1);\n+    int len = parts.length;\n+\n+    if (len == 0 || len > 3) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    for (int i = 0; i < len; i++) {\n+        String part = parts[i];\n+        if (part.isEmpty()) {\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        if (i == 0 && !isValidLanguage(part)) {\n+            throw new IllegalArgumentException(\"Invalid locale language: \" + part);\n         }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n+        if (i == 1 && !isValidCountry(part)) {\n+            throw new IllegalArgumentException(\"Invalid locale country: \" + part);\n+        }\n+        if (i == 2 && !isValidVariant(part)) {\n+            throw new IllegalArgumentException(\"Invalid locale variant: \" + part);\n         }\n     }\n \n+    String language = parts.length > 0 ? parts[0].toLowerCase(Locale.ROOT) : \"\";\n+    String country = parts.length > 1 ? parts[1].toUpperCase(Locale.ROOT) : \"\";\n+    String variant = parts.length > 2 ? parts[2] : \"\";\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLanguage(String str) {\n+    if (StringUtils.isBlank(str)) {\n+        return false;\n+    }\n+    if (str.length() != 2) {\n+        return false;\n+    }\n+    for (char ch : str.toCharArray()) {\n+        if (!Character.isLowerCase(ch)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidCountry(String str) {\n+    if (StringUtils.isBlank(str)) {\n+        return false;\n+    }\n+    if (str.length() != 2) {\n+        return false;\n+    }\n+    for (char ch : str.toCharArray()) {\n+        if (!Character.isUpperCase(ch)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidVariant(String str) {\n+    if (StringUtils.isBlank(str)) {\n+        return false;\n+    }\n+    for (char ch : str.toCharArray()) {\n+        if (!Character.isLetterOrDigit(ch) && ch != '_' && ch != '-') {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}