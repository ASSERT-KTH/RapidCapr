{
    "patch": "    boolean isOverride = false;\n    Node ancestor = parent.getParent();\n    while (ancestor != null && !ancestor.isScript()) {\n      if (ancestor.isAssign() && ancestor.getFirstChild() == getprop) {\n        isOverride = true;\n        break;\n      }\n      ancestor = ancestor.getParent();\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..3232867c 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,15 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+    boolean isOverride = false;\n+    Node ancestor = parent.getParent();\n+    while (ancestor != null && !ancestor.isScript()) {\n+      if (ancestor.isAssign() && ancestor.getFirstChild() == getprop) {\n+        isOverride = true;\n+        break;\n+      }\n+      ancestor = ancestor.getParent();\n+    }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}