{
    "patch": "  @Override\n  Node processFunctionNode(FunctionNode functionNode) {\n    Name name = functionNode.getFunctionName();\n    boolean isUnnamedFunction = false;\n    if (name == null || name.getIdentifier().isEmpty()) {\n       // The function is an unnamed function.\n      name = new Name();\n      name.setIdentifier(\"\");\n      isUnnamedFunction = true;\n    }\n    Node node = newNode(Token.FUNCTION);\n    Node newName = transform(name);\n    if (isUnnamedFunction) {\n      newName.setLineno(functionNode.getLineno());\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      newName.setCharno(position2charno(lparenCharno));\n    }\n    node.addChildToBack(newName);\n    Node lp = newNode(Token.LP);\n    Name fnName = functionNode.getFunctionName();\n    if (fnName != null) {\n      lp.setLineno(fnName.getLineno());\n    } else {\n      lp.setLineno(functionNode.getLineno());\n    }\n    lp.setCharno(position2charno(functionNode.getLp() + functionNode.getAbsolutePosition()));\n    for (AstNode param : functionNode.getParams()) {\n      lp.addChildToBack(transform(param));\n    }\n    node.addChildToBack(lp);\n    Node bodyNode = transform(functionNode.getBody());\n    parseDirectives(bodyNode);\n    node.addChildToBack(bodyNode);\n    return node;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..dfb38d9c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,41 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+  @Override\n+  Node processFunctionNode(FunctionNode functionNode) {\n+    Name name = functionNode.getFunctionName();\n+    boolean isUnnamedFunction = false;\n+    if (name == null || name.getIdentifier().isEmpty()) {\n+       // The function is an unnamed function.\n+      name = new Name();\n+      name.setIdentifier(\"\");\n+      isUnnamedFunction = true;\n+    }\n+    Node node = newNode(Token.FUNCTION);\n+    Node newName = transform(name);\n+    if (isUnnamedFunction) {\n+      newName.setLineno(functionNode.getLineno());\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      newName.setCharno(position2charno(lparenCharno));\n+    }\n+    node.addChildToBack(newName);\n+    Node lp = newNode(Token.LP);\n+    Name fnName = functionNode.getFunctionName();\n+    if (fnName != null) {\n+      lp.setLineno(fnName.getLineno());\n+    } else {\n+      lp.setLineno(functionNode.getLineno());\n+    }\n+    lp.setCharno(position2charno(functionNode.getLp() + functionNode.getAbsolutePosition()));\n+    for (AstNode param : functionNode.getParams()) {\n+      lp.addChildToBack(transform(param));\n+    }\n+    node.addChildToBack(lp);\n+    Node bodyNode = transform(functionNode.getBody());\n+    parseDirectives(bodyNode);\n+    node.addChildToBack(bodyNode);\n+    return node;\n+  }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}