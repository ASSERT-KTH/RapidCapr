{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    // evaluate f at initial point\n    double yInitial = f.value(initial);\n\n    // return the initial guess if it is good enough\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    // evaluate f at endpoints\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // check if min and max bracket the root\n    if (yMin * yMax > 0) {\n        // if initial point is at a root, return it\n        if (Math.abs(yMin) <= functionValueAccuracy) {\n            setResult(min, 0);\n            return result;\n        } else if (Math.abs(yMax) <= functionValueAccuracy) {\n            setResult(max, 0);\n            return result;\n        } else {\n            // otherwise, throw an exception\n            throw MathRuntimeException.createIllegalArgumentException(\n                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n        }\n    }\n\n    // swap min and max so that f(min) < 0 and f(max) > 0\n    if (yMin > 0) {\n        double temp = min;\n        min = max;\n        max = temp;\n        temp = yMin;\n        yMin = yMax;\n        yMax = temp;\n    }\n\n    // initialize variables and constants\n    boolean bisect = true;\n    double oldY = yInitial;\n    double lastY = yInitial;\n    double delta = 0;\n    double delta2 = 0;\n    double mid = initial;\n\n    // main loop\n    int i = 0;\n    while (i++ < maximalIterationCount) {\n\n        // calculate midpoint and function value at midpoint\n        double oldMid = mid;\n        mid = 0.5 * (min + max);\n        double yMid = f.value(mid);\n\n        // check if solution is found\n        if (Math.abs(yMid) <= functionValueAccuracy) {\n            setResult(mid, i);\n            return result;\n        }\n\n        // update bisection flag and increment counter\n        if (bisect && (delta2 > functionValueAccuracy || lastY < yMid)) {\n            delta = oldMid - mid;\n            delta2 = Math.abs(delta);\n            bisect = false;\n        } else {\n            delta = 0.5 * (oldMid - mid);\n            delta2 = Math.abs(delta);\n            bisect = (delta2 > functionValueAccuracy);\n        }\n        lastY = yMid;\n\n        // adjust bracketing interval and re-evaluate variables and constants\n        if (yMid > 0) {\n            max = mid;\n            yMax = yMid;\n        } else {\n            min = mid;\n            yMin = yMid;\n        }\n        if (!bisect) {\n            if (Math.abs(delta) < functionRelativeAccuracy) {\n                setResult(mid, i);\n                return result;\n            }\n        }\n        oldY = yMid;\n    }\n\n    // if we get here, the algorithm failed to find a root\n    throw new MaxIterationsExceededException(maximalIterationCount);\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex e0cb42714..8cae98e43 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,53 +95,108 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    // evaluate f at initial point\n+    double yInitial = f.value(initial);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n+    // return the initial guess if it is good enough\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    // evaluate f at endpoints\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // check if min and max bracket the root\n+    if (yMin * yMax > 0) {\n+        // if initial point is at a root, return it\n         if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n+            setResult(min, 0);\n+            return result;\n+        } else if (Math.abs(yMax) <= functionValueAccuracy) {\n+            setResult(max, 0);\n             return result;\n+        } else {\n+            // otherwise, throw an exception\n+            throw MathRuntimeException.createIllegalArgumentException(\n+                    NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n         }\n+    }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n-        }\n+    // swap min and max so that f(min) < 0 and f(max) > 0\n+    if (yMin > 0) {\n+        double temp = min;\n+        min = max;\n+        max = temp;\n+        temp = yMin;\n+        yMin = yMax;\n+        yMax = temp;\n+    }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+    // initialize variables and constants\n+    boolean bisect = true;\n+    double oldY = yInitial;\n+    double lastY = yInitial;\n+    double delta = 0;\n+    double delta2 = 0;\n+    double mid = initial;\n+\n+    // main loop\n+    int i = 0;\n+    while (i++ < maximalIterationCount) {\n+\n+        // calculate midpoint and function value at midpoint\n+        double oldMid = mid;\n+        mid = 0.5 * (min + max);\n+        double yMid = f.value(mid);\n+\n+        // check if solution is found\n+        if (Math.abs(yMid) <= functionValueAccuracy) {\n+            setResult(mid, i);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        // update bisection flag and increment counter\n+        if (bisect && (delta2 > functionValueAccuracy || lastY < yMid)) {\n+            delta = oldMid - mid;\n+            delta2 = Math.abs(delta);\n+            bisect = false;\n+        } else {\n+            delta = 0.5 * (oldMid - mid);\n+            delta2 = Math.abs(delta);\n+            bisect = (delta2 > functionValueAccuracy);\n         }\n+        lastY = yMid;\n \n-        if (yMin * yMax > 0) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  NON_BRACKETING_MESSAGE, min, max, yMin, yMax);\n+        // adjust bracketing interval and re-evaluate variables and constants\n+        if (yMid > 0) {\n+            max = mid;\n+            yMax = yMid;\n+        } else {\n+            min = mid;\n+            yMin = yMid;\n         }\n+        if (!bisect) {\n+            if (Math.abs(delta) < functionRelativeAccuracy) {\n+                setResult(mid, i);\n+                return result;\n+            }\n+        }\n+        oldY = yMid;\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    // if we get here, the algorithm failed to find a root\n+    throw new MaxIterationsExceededException(maximalIterationCount);\n \n-    }\n+}\n \n     /**\n      * Find a zero in the given interval.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}