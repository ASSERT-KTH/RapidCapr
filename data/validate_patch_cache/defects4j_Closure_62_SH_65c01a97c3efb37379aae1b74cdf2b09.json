{
    "patch": "      if (excerpt.equals(LINE)) {\n        for (int i = 0; i < charno; i++) {\n          char c = sourceExcerpt.charAt(i);\n          if (c == '\\r' || c == '\\n') {\n            b.append(c);\n          } else {\n            b.append(' ');\n          }\n        }\n        b.append(\"^\\n\");\n      } else if (excerpt.equals(CONTEXT)) {\n        int start = Math.max(0, error.lineNumber - 3);\n        int linesToShow = Math.min(6, source.getNumLines() - start);\n        for (int i = 0; i < linesToShow; i++) {\n          int number = start + i;\n          if (number == error.lineNumber) {\n            int lineStart = getPositionInLine(sourceExcerpt, error.lineOffset);\n            b.append(\"> \");\n            b.append(source.getLine(number));\n            b.append('\\n');\n            for (int j = 0; j < lineStart + 2; j++) {\n              b.append(' ');\n            }\n            b.append(\"^\\n\");\n          } else {\n            b.append(\"  \");\n            b.append(source.getLine(number));\n            b.append('\\n');\n          }\n        }\n      }\n    }\n    return b.toString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..19b4d8a8 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,40 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+      if (excerpt.equals(LINE)) {\n+        for (int i = 0; i < charno; i++) {\n+          char c = sourceExcerpt.charAt(i);\n+          if (c == '\\r' || c == '\\n') {\n+            b.append(c);\n+          } else {\n+            b.append(' ');\n+          }\n+        }\n+        b.append(\"^\\n\");\n+      } else if (excerpt.equals(CONTEXT)) {\n+        int start = Math.max(0, error.lineNumber - 3);\n+        int linesToShow = Math.min(6, source.getNumLines() - start);\n+        for (int i = 0; i < linesToShow; i++) {\n+          int number = start + i;\n+          if (number == error.lineNumber) {\n+            int lineStart = getPositionInLine(sourceExcerpt, error.lineOffset);\n+            b.append(\"> \");\n+            b.append(source.getLine(number));\n+            b.append('\\n');\n+            for (int j = 0; j < lineStart + 2; j++) {\n+              b.append(' ');\n+            }\n+            b.append(\"^\\n\");\n+          } else {\n+            b.append(\"  \");\n+            b.append(source.getLine(number));\n+            b.append('\\n');\n+          }\n+        }\n+      }\n+    }\n+    return b.toString();\n+  }\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}