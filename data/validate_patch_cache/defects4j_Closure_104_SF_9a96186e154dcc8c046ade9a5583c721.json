{
    "patch": "  // Helper function to determine nullability of the union type `type`\n  private boolean isNullableUnionType(UnionType type) {\n    for (JSType alternate : type.alternates) {\n      if (alternate.isNullable()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // Helper function to determine undefinedability of the union type `type`\n  private boolean isUndefinedUnionType(UnionType type) {\n    for (JSType alternate : type.alternates) {\n      if (alternate.isUndefined()) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Two union types are equal if they have the same number of alternates\n   * and all alternates are equal.\n   */\n  @Override\n  public boolean equals(Object object) {\n    if (object instanceof UnionType) {\n      UnionType that = (UnionType) object;\n      boolean isThisNullable = isNullableUnionType(this);\n      boolean isThatNullable = isNullableUnionType(that);\n      boolean isThisUndefined = isUndefinedUnionType(this);\n      boolean isThatUndefined = isUndefinedUnionType(that);\n      if (isThisNullable && !isThatNullable) {\n        that = that.removeType(getNativeType(JSTypeNative.NULL_TYPE));\n      } else if (isThatNullable && !isThisNullable) {\n        this = this.removeType(getNativeType(JSTypeNative.NULL_TYPE));\n      }\n      if (isThisUndefined && !isThatUndefined) {\n        that = that.removeType(getNativeType(JSTypeNative.VOID_TYPE));\n      } else if (isThatUndefined && !isThisUndefined) {\n        this = this.removeType(getNativeType(JSTypeNative.VOID_TYPE));\n      }\n      return alternates.equals(that.alternates);\n    } else {\n      return false;\n    }\n  }\n\n  @Override\n  public int hashCode() {\n    return alternates.hashCode();\n  }\n\n  @Override\n  public boolean isUnionType() {\n    return true;\n  }\n\n  @Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..19a67db4 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,22 +279,24 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n+  // Helper function to determine nullability of the union type `type`\n+  private boolean isNullableUnionType(UnionType type) {\n+    for (JSType alternate : type.alternates) {\n+      if (alternate.isNullable()) {\n+        return true;\n       }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n     }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n+    return false;\n+  }\n+\n+  // Helper function to determine undefinedability of the union type `type`\n+  private boolean isUndefinedUnionType(UnionType type) {\n+    for (JSType alternate : type.alternates) {\n+      if (alternate.isUndefined()) {\n+        return true;\n+      }\n     }\n+    return false;\n   }\n \n   /**\n@@ -305,6 +307,20 @@ public class UnionType extends JSType {\n   public boolean equals(Object object) {\n     if (object instanceof UnionType) {\n       UnionType that = (UnionType) object;\n+      boolean isThisNullable = isNullableUnionType(this);\n+      boolean isThatNullable = isNullableUnionType(that);\n+      boolean isThisUndefined = isUndefinedUnionType(this);\n+      boolean isThatUndefined = isUndefinedUnionType(that);\n+      if (isThisNullable && !isThatNullable) {\n+        that = that.removeType(getNativeType(JSTypeNative.NULL_TYPE));\n+      } else if (isThatNullable && !isThisNullable) {\n+        this = this.removeType(getNativeType(JSTypeNative.NULL_TYPE));\n+      }\n+      if (isThisUndefined && !isThatUndefined) {\n+        that = that.removeType(getNativeType(JSTypeNative.VOID_TYPE));\n+      } else if (isThatUndefined && !isThisUndefined) {\n+        this = this.removeType(getNativeType(JSTypeNative.VOID_TYPE));\n+      }\n       return alternates.equals(that.alternates);\n     } else {\n       return false;\n@@ -330,6 +346,9 @@ public class UnionType extends JSType {\n     }\n     return true;\n   }\n+    }\n+    return true;\n+  }\n \n   /**\n    * A {@link UnionType} contains a given type (alternate) iff the member",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}