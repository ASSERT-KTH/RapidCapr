{
    "patch": "import com.google.javascript.jscomp.CheckLevel;\nimport com.google.javascript.jscomp.DiagnosticGroup;\nimport com.google.javascript.jscomp.WarningsGuard;\nimport com.google.javascript.jscomp.SuppressDocWarningsGuard;\nimport com.google.javascript.jscomp.ComposeWarningsGuard;\nimport com.google.javascript.jscomp.PrintStreamErrorManager;\nimport com.google.javascript.jscomp.LoggerErrorManager;\nimport com.google.javascript.jscomp.CompilerOptions.LanguageMode;\nimport com.google.javascript.jscomp.parsing.ParserRunner;\nimport com.google.javascript.jscomp.AbstractCompiler;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.diagnostic.DiagnosticGroups;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraph;\nimport com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\nimport com.google.javascript.jscomp.graph.DiGraphEdge.Branch;\nimport java.io.PrintStream;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.logging.Logger;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex b3ca246a..b5d54c82 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -252,7 +252,27 @@ public class Compiler extends AbstractCompiler {\n           CheckLevel.OFF);\n     }\n \n-    if (options.checkGlobalThisLevel.isOn()) {\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.DiagnosticGroup;\n+import com.google.javascript.jscomp.WarningsGuard;\n+import com.google.javascript.jscomp.SuppressDocWarningsGuard;\n+import com.google.javascript.jscomp.ComposeWarningsGuard;\n+import com.google.javascript.jscomp.PrintStreamErrorManager;\n+import com.google.javascript.jscomp.LoggerErrorManager;\n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n+import com.google.javascript.jscomp.parsing.ParserRunner;\n+import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.diagnostic.DiagnosticGroups;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraph;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\n+import com.google.javascript.jscomp.graph.DiGraphEdge.Branch;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Logger;\n       options.setWarningLevel(\n           DiagnosticGroups.GLOBAL_THIS,\n           options.checkGlobalThisLevel);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}