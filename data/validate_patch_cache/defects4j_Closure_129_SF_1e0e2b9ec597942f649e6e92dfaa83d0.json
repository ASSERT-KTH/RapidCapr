{
    "patch": "private void annotateCalls(Node n) {\n  Preconditions.checkState(n.isCall());\n\n  // Get the first child node of the given node\n  Node first = n.getFirstChild();\n\n  // If the node is a cast node, continue iterating through the children\n  while (first.isCast()) {\n    first = first.getFirstChild();\n  }\n\n  // If the node is not a GET node, mark the call as a free call\n  if (!NodeUtil.isGet(first)) {\n    n.putBooleanProp(Node.FREE_CALL, true);\n  }\n\n  // If the first child node is a NAME node and its value is \"eval\",\n  // mark it as a direct eval\n  if (first.isName() && \"eval\".equals(first.getString())) {\n    first.putBooleanProp(Node.DIRECT_EVAL, true);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..6e0cbfc8 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -155,26 +155,28 @@ class PrepareAst implements CompilerPass {\n      * There are two types of calls we are interested in calls without explicit\n      * \"this\" values (what we are call \"free\" calls) and direct call to eval.\n      */\n-    private void annotateCalls(Node n) {\n-      Preconditions.checkState(n.isCall());\n+private void annotateCalls(Node n) {\n+  Preconditions.checkState(n.isCall());\n \n-      // Keep track of of the \"this\" context of a call.  A call without an\n-      // explicit \"this\" is a free call.\n-      Node first = n.getFirstChild();\n+  // Get the first child node of the given node\n+  Node first = n.getFirstChild();\n \n-      // ignore cast nodes.\n+  // If the node is a cast node, continue iterating through the children\n+  while (first.isCast()) {\n+    first = first.getFirstChild();\n+  }\n \n-      if (!NodeUtil.isGet(first)) {\n-        n.putBooleanProp(Node.FREE_CALL, true);\n-      }\n+  // If the node is not a GET node, mark the call as a free call\n+  if (!NodeUtil.isGet(first)) {\n+    n.putBooleanProp(Node.FREE_CALL, true);\n+  }\n \n-      // Keep track of the context in which eval is called. It is important\n-      // to distinguish between \"(0, eval)()\" and \"eval()\".\n-      if (first.isName() &&\n-          \"eval\".equals(first.getString())) {\n-        first.putBooleanProp(Node.DIRECT_EVAL, true);\n-      }\n-    }\n+  // If the first child node is a NAME node and its value is \"eval\",\n+  // mark it as a direct eval\n+  if (first.isName() && \"eval\".equals(first.getString())) {\n+    first.putBooleanProp(Node.DIRECT_EVAL, true);\n+  }\n+}\n \n     /**\n      * Translate dispatcher info into the property expected node.",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}