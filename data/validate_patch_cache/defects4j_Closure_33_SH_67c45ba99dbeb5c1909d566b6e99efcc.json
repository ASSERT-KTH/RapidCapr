{
    "patch": "  public void matchConstraint(ObjectType constraintObj) {\n    // We only want to match contraints on anonymous types.\n    if (!(constraintObj instanceof AnonObjectType)) {\n      return;\n    }\n\n    ObjectType objType = getObjType();\n    if (objType instanceof FunctionType) {\n      // Check if the constraint object is structurally incompatible with\n      // existing information.\n      if (!((FunctionType) objType)\n          .canStructurallyAcceptWithoutWarning(constraintObj)) {\n        warnings.add(JSError.make(\n            UNEXPECTED_STRUCTURAL_TYPE,\n            getPropName(), \"function\", constraintObj.toString()));\n        return;\n      }\n    }\n\n    if (constraintObj.isRecordType() && objType.isNominalConstructor()\n        || objType.isNominalConstructor()\n           && constraintObj.getFunTypeIfSingletonObj().isOrdinaryFunction()) {\n      // Don't apply the constraint yet if either:\n      // 1. This function has an explicit return type and the constraint is a\n      //    sub-type of the return type.\n      // 2. This is a constructor but the constraint is a function.\n      //    A constructor just returns 'this', whereas a function can return\n      //    anything.\n      return;\n    }\n    if (!constraintObj.isRecordType() && !objType.isFunctionType()) {\n      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n        warnings.add(JSError.make(\n            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n            \"RegExp objects with explicit 'global' properties\"));\n      }\n      return;\n    }\n    ObjPropertyDescriptor[] props = constraintObj.getOwnPropertyDescriptors();\n    boolean isPropDefinedInObj;\n    for (ObjPropertyDescriptor prop : props) {\n      if (prop.getType() == null) {\n        // In ES6, we allow shorthands like {foo}.\n        if (objType.isConstructor() || objType.isPrototypeObject()) {\n          warnings.add(JSError.make(\n              UNDECLARED_SHORTHAND_PROPERTY,\n              getPropName(), prop.getName()));\n        }\n        continue;\n      }\n      isPropDefinedInObj =\n          defineInferredProperty(prop.getName(), prop.getType(), prop.getDeclaringType());\n      if (!isPropDefinedInObj && objType.isConstructor()) {\n        warnings.add(JSError.make(\n            INEXISTENT_PROPERTY_WITH_SUGGESTION,\n            getPropName(),\n            prop.getName(),\n            objType.getClosestMatchableName(prop.getName())));\n      }\n    }\n\n    if (objType.isFunctionType() && constraintObj.isFunctionType()) {\n      // Function types.\n      FunctionType fnType = objType.toMaybeFunctionType();\n      FunctionType constraintFnType = constraintObj.getFunType();\n\n      checkFunctionSubtype(\n          fnType.getTypeOfThis(),\n          constraintFnType.getTypeOfThis(),\n          \"this parameter of \" + getPropName());\n\n      for (int i = 0; i < constraintFnType.getParametersCount(); ++i) {\n        String paramName = \"parameter \" + (i + 1) + \" of \" + getPropName();\n        if (constraintFnType.getArgumentNames().size() > i) {\n          paramName = constraintFnType.getArgumentNames().get(i);\n        }\n\n        checkFunctionSubtype(\n            fnType.getParameterType(i), constraintFnType.getParameterType(i), paramName);\n      }\n\n      if (constraintFnType.hasRestFormals()) {\n        ObjectType restObj = constraintFnType.getRestFormalsType();\n        if (!restObj.isEmptyType()) {\n          JSType formalType = fnType.getFormalType();\n          if (formalType == null) {\n            // Get rid of the 'this' type.\n            formalType = fnType.toFunctionType().toMaybeFunctionType().getReturnType();\n          }\n          if (formalType == null || !formalType.isObjectType()) {\n            warnings.add(JSError.make(\n                REST_PARAMETER_NOT_SUPPORTED_IN_GUESSED_FUNCTION,\n                constraintFnType.getDisplayName()));\n            return;\n          }\n          JSType elemType = formalType\n              .toMaybeObjectType().getTemplateTypeMap().getTypeAtIndex(0);\n          ObjectType restObjWithElemType =\n              objType.getCommonTypes().createRestParameterArrayType(elemType);\n          checkFunctionSubtype(\n              restObjWithElemType, restObj, \"rest parameter of \" + getPropName());\n        }\n      }\n\n      if (constraintFnType.getReturnType().isVoidType()) {\n        return;\n      }\n\n      // An unannotated function can't accept a constraint with a return type.\n      // A function with an explicit return type can override the return type.\n      JSType returnType = fnType.getReturnType();\n      if (returnType == null) {\n        return;\n      }\n      checkFunctionSubtype(returnType, constraintFnType.getReturnType(), \"return type of \" + getPropName());\n\n    } else if (objType.isConstructor() && constraintObj.isConstructor()) {\n      // Constructor types.\n      FunctionType cType = (FunctionType) objType;\n      FunctionType constraintCType = constraintObj.getFunType();\n\n      for (int i = 0; i < constraintCType.getParametersCount(); ++i) {\n        String paramName = \"parameter \" + (i + 1) + \" of \" + getPropName();\n        if (constraintCType.getArgumentNames().size() > i) {\n          paramName = constraintCType.getArgumentNames().get(i);\n        }\n\n        checkFunctionSubtype(\n            cType.getParameterType(i), constraintCType.getParameterType(i), paramName);\n      }\n      ObjType oType = (ObjType) cType.getInstanceType();\n      ObjType constraintOType = (ObjType) constraintCType.getInstanceType();\n      if (oType.isStructurallyEquivalentTo(constraintOType)) {\n        // Was already set to this type, so don't re-set it.\n      } else if (!oType.isEmptyType()) {\n        warnings.add(\n            JSError.make(\n                TYPE_MISMATCH_WARNING,\n                \"constructor\",\n                getPropName(),\n                \"expected\",\n                constraintOType.toString(),\n                \"found\",\n                oType.toString()));\n      } else {\n        // Note that we mutate objType.\n        cType.setInstanceType(constraintOType);\n      }\n      if (!(cType.getReturnType() == null && constraintCType.getReturnType() == null)) {\n        checkFunctionSubtype(\n            cType.getReturnType(),\n            constraintCType.getReturnType(),\n            \"return type of constructor \" + getPropName());\n      }\n    } else if (objType.isNominalConstructor() && constraintObj.isConstructor()) {\n      // Nominal constructor types.\n      NominalType nType = (NominalType) objType;\n      FunctionType constraintCType = constraintObj.getFunType();\n\n      JSType instanceType = nType.getInstanceAsJSType();\n      ObjectType oldInstance = instanceType\n          .restrictByNotNullOrUndefined()\n          .autobox()\n          .restrictToObject();\n\n      ObjectType constraintInstanceType = constraintCType.getInstanceType();\n      if (constraintInstanceType == null) {\n        // Polymorphic constructors should not be applied as inline types.\n        return;\n      }\n      ObjectType newInstanceType = meetOrWarn(\n          getPropName(),\n          oldInstance,\n          constraintInstanceType.restrictByNotNullOrUndefined().autobox().restrictToObject(),\n          true);\n      if (newInstanceType != null) {\n        NominalType newNType = NominalType.newNominalType(nType, newInstanceType);\n        JSType newJSType = newNType.getInstanceAsJSType();\n        setDeclaredType(newJSType);\n        JSType checkType = constraintObj.getFunction() == null\n            ? constraintObj.getType()\n            : constraintObj.getFunction().getDeclaredType();\n        if (checkType != null) {\n          if (!newJSType.canBeLoosenedTo(checkType, typeRegistry)) {\n            warnings.add(JSError.make(\n                TYPE_MISMATCH_WARNING,\n                \"new \" + getPropName() + \"()\",\n                \"\",\n                \"expected\",\n                checkType.toString(),\n                \"found\",\n                newJSType.toString()));\n          }\n        }\n      }\n      if (nType.getNominalType() instanceof EnumType) {\n        warnings.add(JSError.make(TYPE_EXTENDED_ENUM_WARNING,\n            \"Cannot extend Enum Class with constructor \" + getPropName()));\n        return;\n      }\n      if (constraintCType.getReturnType().isVoidType()) {\n        return;\n      }\n      checkFunctionSubtype(\n          nType.getConstructorFunction().getReturnType(),\n          constraintCType.getReturnType(),\n          \"return type of constructor \" + getPropName());\n    } else if (!constraintObj.isRecordType() && !objType.isFunctionType()) {\n      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n        warnings.add(JSError.make(\n            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n            \"RegExp objects with explicit 'global' properties\"));\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..81ac0e5d 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,221 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+  public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match contraints on anonymous types.\n+    if (!(constraintObj instanceof AnonObjectType)) {\n+      return;\n+    }\n+\n+    ObjectType objType = getObjType();\n+    if (objType instanceof FunctionType) {\n+      // Check if the constraint object is structurally incompatible with\n+      // existing information.\n+      if (!((FunctionType) objType)\n+          .canStructurallyAcceptWithoutWarning(constraintObj)) {\n+        warnings.add(JSError.make(\n+            UNEXPECTED_STRUCTURAL_TYPE,\n+            getPropName(), \"function\", constraintObj.toString()));\n+        return;\n+      }\n+    }\n+\n+    if (constraintObj.isRecordType() && objType.isNominalConstructor()\n+        || objType.isNominalConstructor()\n+           && constraintObj.getFunTypeIfSingletonObj().isOrdinaryFunction()) {\n+      // Don't apply the constraint yet if either:\n+      // 1. This function has an explicit return type and the constraint is a\n+      //    sub-type of the return type.\n+      // 2. This is a constructor but the constraint is a function.\n+      //    A constructor just returns 'this', whereas a function can return\n+      //    anything.\n+      return;\n+    }\n+    if (!constraintObj.isRecordType() && !objType.isFunctionType()) {\n+      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n+        warnings.add(JSError.make(\n+            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n+            \"RegExp objects with explicit 'global' properties\"));\n+      }\n+      return;\n+    }\n+    ObjPropertyDescriptor[] props = constraintObj.getOwnPropertyDescriptors();\n+    boolean isPropDefinedInObj;\n+    for (ObjPropertyDescriptor prop : props) {\n+      if (prop.getType() == null) {\n+        // In ES6, we allow shorthands like {foo}.\n+        if (objType.isConstructor() || objType.isPrototypeObject()) {\n+          warnings.add(JSError.make(\n+              UNDECLARED_SHORTHAND_PROPERTY,\n+              getPropName(), prop.getName()));\n+        }\n+        continue;\n+      }\n+      isPropDefinedInObj =\n+          defineInferredProperty(prop.getName(), prop.getType(), prop.getDeclaringType());\n+      if (!isPropDefinedInObj && objType.isConstructor()) {\n+        warnings.add(JSError.make(\n+            INEXISTENT_PROPERTY_WITH_SUGGESTION,\n+            getPropName(),\n+            prop.getName(),\n+            objType.getClosestMatchableName(prop.getName())));\n+      }\n+    }\n+\n+    if (objType.isFunctionType() && constraintObj.isFunctionType()) {\n+      // Function types.\n+      FunctionType fnType = objType.toMaybeFunctionType();\n+      FunctionType constraintFnType = constraintObj.getFunType();\n+\n+      checkFunctionSubtype(\n+          fnType.getTypeOfThis(),\n+          constraintFnType.getTypeOfThis(),\n+          \"this parameter of \" + getPropName());\n+\n+      for (int i = 0; i < constraintFnType.getParametersCount(); ++i) {\n+        String paramName = \"parameter \" + (i + 1) + \" of \" + getPropName();\n+        if (constraintFnType.getArgumentNames().size() > i) {\n+          paramName = constraintFnType.getArgumentNames().get(i);\n+        }\n+\n+        checkFunctionSubtype(\n+            fnType.getParameterType(i), constraintFnType.getParameterType(i), paramName);\n+      }\n+\n+      if (constraintFnType.hasRestFormals()) {\n+        ObjectType restObj = constraintFnType.getRestFormalsType();\n+        if (!restObj.isEmptyType()) {\n+          JSType formalType = fnType.getFormalType();\n+          if (formalType == null) {\n+            // Get rid of the 'this' type.\n+            formalType = fnType.toFunctionType().toMaybeFunctionType().getReturnType();\n+          }\n+          if (formalType == null || !formalType.isObjectType()) {\n+            warnings.add(JSError.make(\n+                REST_PARAMETER_NOT_SUPPORTED_IN_GUESSED_FUNCTION,\n+                constraintFnType.getDisplayName()));\n+            return;\n+          }\n+          JSType elemType = formalType\n+              .toMaybeObjectType().getTemplateTypeMap().getTypeAtIndex(0);\n+          ObjectType restObjWithElemType =\n+              objType.getCommonTypes().createRestParameterArrayType(elemType);\n+          checkFunctionSubtype(\n+              restObjWithElemType, restObj, \"rest parameter of \" + getPropName());\n+        }\n+      }\n+\n+      if (constraintFnType.getReturnType().isVoidType()) {\n+        return;\n+      }\n+\n+      // An unannotated function can't accept a constraint with a return type.\n+      // A function with an explicit return type can override the return type.\n+      JSType returnType = fnType.getReturnType();\n+      if (returnType == null) {\n+        return;\n+      }\n+      checkFunctionSubtype(returnType, constraintFnType.getReturnType(), \"return type of \" + getPropName());\n+\n+    } else if (objType.isConstructor() && constraintObj.isConstructor()) {\n+      // Constructor types.\n+      FunctionType cType = (FunctionType) objType;\n+      FunctionType constraintCType = constraintObj.getFunType();\n+\n+      for (int i = 0; i < constraintCType.getParametersCount(); ++i) {\n+        String paramName = \"parameter \" + (i + 1) + \" of \" + getPropName();\n+        if (constraintCType.getArgumentNames().size() > i) {\n+          paramName = constraintCType.getArgumentNames().get(i);\n+        }\n+\n+        checkFunctionSubtype(\n+            cType.getParameterType(i), constraintCType.getParameterType(i), paramName);\n+      }\n+      ObjType oType = (ObjType) cType.getInstanceType();\n+      ObjType constraintOType = (ObjType) constraintCType.getInstanceType();\n+      if (oType.isStructurallyEquivalentTo(constraintOType)) {\n+        // Was already set to this type, so don't re-set it.\n+      } else if (!oType.isEmptyType()) {\n+        warnings.add(\n+            JSError.make(\n+                TYPE_MISMATCH_WARNING,\n+                \"constructor\",\n+                getPropName(),\n+                \"expected\",\n+                constraintOType.toString(),\n+                \"found\",\n+                oType.toString()));\n+      } else {\n+        // Note that we mutate objType.\n+        cType.setInstanceType(constraintOType);\n+      }\n+      if (!(cType.getReturnType() == null && constraintCType.getReturnType() == null)) {\n+        checkFunctionSubtype(\n+            cType.getReturnType(),\n+            constraintCType.getReturnType(),\n+            \"return type of constructor \" + getPropName());\n+      }\n+    } else if (objType.isNominalConstructor() && constraintObj.isConstructor()) {\n+      // Nominal constructor types.\n+      NominalType nType = (NominalType) objType;\n+      FunctionType constraintCType = constraintObj.getFunType();\n+\n+      JSType instanceType = nType.getInstanceAsJSType();\n+      ObjectType oldInstance = instanceType\n+          .restrictByNotNullOrUndefined()\n+          .autobox()\n+          .restrictToObject();\n+\n+      ObjectType constraintInstanceType = constraintCType.getInstanceType();\n+      if (constraintInstanceType == null) {\n+        // Polymorphic constructors should not be applied as inline types.\n+        return;\n+      }\n+      ObjectType newInstanceType = meetOrWarn(\n+          getPropName(),\n+          oldInstance,\n+          constraintInstanceType.restrictByNotNullOrUndefined().autobox().restrictToObject(),\n+          true);\n+      if (newInstanceType != null) {\n+        NominalType newNType = NominalType.newNominalType(nType, newInstanceType);\n+        JSType newJSType = newNType.getInstanceAsJSType();\n+        setDeclaredType(newJSType);\n+        JSType checkType = constraintObj.getFunction() == null\n+            ? constraintObj.getType()\n+            : constraintObj.getFunction().getDeclaredType();\n+        if (checkType != null) {\n+          if (!newJSType.canBeLoosenedTo(checkType, typeRegistry)) {\n+            warnings.add(JSError.make(\n+                TYPE_MISMATCH_WARNING,\n+                \"new \" + getPropName() + \"()\",\n+                \"\",\n+                \"expected\",\n+                checkType.toString(),\n+                \"found\",\n+                newJSType.toString()));\n+          }\n+        }\n+      }\n+      if (nType.getNominalType() instanceof EnumType) {\n+        warnings.add(JSError.make(TYPE_EXTENDED_ENUM_WARNING,\n+            \"Cannot extend Enum Class with constructor \" + getPropName()));\n+        return;\n+      }\n+      if (constraintCType.getReturnType().isVoidType()) {\n+        return;\n+      }\n+      checkFunctionSubtype(\n+          nType.getConstructorFunction().getReturnType(),\n+          constraintCType.getReturnType(),\n+          \"return type of constructor \" + getPropName());\n+    } else if (!constraintObj.isRecordType() && !objType.isFunctionType()) {\n+      if (compiler.hasRegExpGlobalReferences() && constraintObj.isRegExpObjectType()) {\n+        warnings.add(JSError.make(\n+            IN_USED_WITHOUT_STRUCTURAL_OR_TYPE_ANNOTATION,\n+            \"RegExp objects with explicit 'global' properties\"));\n+      }\n+    }\n+  }\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}