{
    "patch": "// if the estimation is inaccurate, check for DST gaps\nif (offsetLocal != offsetAdjusted) {\n    long localBefore = instantAdjusted - offsetLocal;\n    long localAfter  = instantAdjusted - offsetAdjusted;\n    int adjBefore = getOffset(localBefore);\n    int adjAfter  = getOffset(localAfter);\n    if (adjBefore != adjAfter && offsetLocal == adjBefore){\n        return offsetLocal;\n    } else {\n        return offsetAdjusted;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..000ea6fe 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,18 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+// if the estimation is inaccurate, check for DST gaps\n+if (offsetLocal != offsetAdjusted) {\n+    long localBefore = instantAdjusted - offsetLocal;\n+    long localAfter  = instantAdjusted - offsetAdjusted;\n+    int adjBefore = getOffset(localBefore);\n+    int adjAfter  = getOffset(localAfter);\n+    if (adjBefore != adjAfter && offsetLocal == adjBefore){\n+        return offsetLocal;\n+    } else {\n+        return offsetAdjusted;\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}