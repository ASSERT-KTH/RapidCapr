{
    "patch": "  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n      boolean conditional) {\n    switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.FUNCTION:\n        return;\n\n      case Token.WHILE:\n      case Token.DO:\n      case Token.IF:\n        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n            conditional);\n        return;\n\n      case Token.FOR:\n        if (!NodeUtil.isForIn(n)) {\n          Node expr = NodeUtil.getConditionExpression(n);\n          if (expr != null) {\n            computeGenKill(expr, gen, kill, conditional);\n          }\n        } else {\n          // for(x in y) {...}\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          if (NodeUtil.isVar(lhs)) {\n            // for(var x in y) {...}\n            lhs = lhs.getLastChild();\n          }\n          addToSetIfLocal(lhs, kill);\n          if (lhs.getType() == Token.NAME) {\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(rhs, gen, kill, true);\n        }\n        return;\n\n      case Token.VAR:\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (c.hasChildren()) {\n            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n            if (!conditional) {\n              addToSetIfLocal(c.getFirstChild(), kill);\n            }\n          }\n        }\n        return;\n\n      case Token.AND:\n      case Token.OR:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // May short circuit.\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.HOOK:\n        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n        // Assume both sides are conditional.\n        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n        computeGenKill(n.getLastChild(), gen, kill, true);\n        return;\n\n      case Token.NAME:\n        if (isArgumentsName(n)) {\n          markAllParametersEscaped();\n        } else {\n          addToSetIfLocal(n, gen);\n        }\n        return;\n\n      default:\n        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n          Node lhs = n.getFirstChild();\n          if (!conditional) {\n            addToSetIfLocal(lhs, kill);\n          }\n          if (!NodeUtil.isAssign(n)) {\n            // assignments such as a += 1 reads a.\n            addToSetIfLocal(lhs, gen);\n          }\n          computeGenKill(lhs.getNext(), gen, kill, conditional);\n        } else {\n          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            computeGenKill(c, gen, kill, conditional);\n          }\n        }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..1121b0c1 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -177,7 +177,6 @@ class LiveVariablesAnalysis extends\n    */\n   private void computeGenKill(Node n, BitSet gen, BitSet kill,\n       boolean conditional) {\n-\n     switch (n.getType()) {\n       case Token.SCRIPT:\n       case Token.BLOCK:\n@@ -193,8 +192,10 @@ class LiveVariablesAnalysis extends\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n+          Node expr = NodeUtil.getConditionExpression(n);\n+          if (expr != null) {\n+            computeGenKill(expr, gen, kill, conditional);\n+          }\n         } else {\n           // for(x in y) {...}\n           Node lhs = n.getFirstChild();\n@@ -203,9 +204,11 @@ class LiveVariablesAnalysis extends\n             // for(var x in y) {...}\n             lhs = lhs.getLastChild();\n           }\n-            addToSetIfLocal(lhs, kill);\n+          addToSetIfLocal(lhs, kill);\n+          if (lhs.getType() == Token.NAME) {\n             addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n+          }\n+          computeGenKill(rhs, gen, kill, true);\n         }\n         return;\n \n@@ -214,7 +217,7 @@ class LiveVariablesAnalysis extends\n           if (c.hasChildren()) {\n             computeGenKill(c.getFirstChild(), gen, kill, conditional);\n             if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+              addToSetIfLocal(c.getFirstChild(), kill);\n             }\n           }\n         }\n@@ -258,7 +261,6 @@ class LiveVariablesAnalysis extends\n             computeGenKill(c, gen, kill, conditional);\n           }\n         }\n-        return;\n     }\n   }\n ",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}