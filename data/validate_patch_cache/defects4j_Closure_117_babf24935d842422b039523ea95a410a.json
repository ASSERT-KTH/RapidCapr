{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        FunctionType ctorType = objectType.getConstructor();\n        if (ctorType != null && ctorType.isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, n.getLastChild().getString());\n        } else {\n          // The property may be inherited from an ancestor, so it may not\n          // be defined by the class itself. However, if the property isn't\n          // defined on any of the ancestors, it must be an extern property.\n          while (objectType != null &&\n              !objectType.hasOwnProperty(n.getLastChild().getString())) {\n            objectType = objectType.getImplicitPrototype();\n          }\n          if (objectType == null) {\n            // An extern property.\n            return \"EXTERN_PROP_GET\";\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType.getConstructor() != null ||\n            objectType.isFunctionPrototypeType()) {\n          String propName = n.getLastChild().getString();\n          ObjectType objectTypeToCheckForProp = objectType;\n          // Special handling for Array.prototype.constructor and\n          // Array.prototype.splice functions.\n          if (objectTypeToCheckForProp.isFunctionType() && propName.equals(\"constructor\")) {\n            FunctionType functionType = objectTypeToCheckForProp.toMaybeFunctionType();\n            if (functionType.isConstructor()) {\n              objectTypeToCheckForProp = functionType.getInstanceType();\n            }\n          }\n          if (propName.equals(\"splice\") && getJSType(n.getFirstChild()).isSubtypeOf(\n                registry.getNativeType(JSTypeNative.ARRAY_TYPE))) {\n            propName = \"$splice\";\n          }\n\n          Property prop = objectTypeToCheckForProp.getOwnProperty(propName);\n          if (prop == null) {\n            prop = objectTypeToCheckForProp.getProperty(propName);\n          }\n          if (prop != null) {\n            if (objectTypeToCheckForProp.getSlotCount() == 2 &&\n                prop.getName().equals(\"value\")) {\n              objectTypeToCheckForProp = objectTypeToCheckForProp.getSlotType(1).dereference();\n            } else {\n              objectTypeToCheckForProp = prop.getType().dereference();\n            }\n          }\n\n          // If objectTypeToCheckForProp is a function type, we want to show the\n          // instance type name.\n          if (objectTypeToCheckForProp.isFunctionType()) {\n            objectTypeToCheckForProp = objectTypeToCheckForProp.toMaybeFunctionType().getInstanceType();\n          }\n\n          if (objectTypeToCheckForProp != null) {\n            return objectTypeToCheckForProp.toString() + \".\" + propName;\n          }\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType() ||\n        (type.toObjectType() != null &&\n         type.toObjectType().getConstructor() != null)) {\n      return type.toString();\n    }\n\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n      return qualifiedName;\n    } else if (type.isFunctionType()) {\n      // Don't show complex function names.\n      return \"function\";\n    } else {\n      return type.toString();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..25244987 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,7 +721,7 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n@@ -731,24 +731,65 @@ class TypeValidator {\n     if (n.isGetProp()) {\n       ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n       if (objectType != null) {\n-        String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n+        FunctionType ctorType = objectType.getConstructor();\n+        if (ctorType != null && ctorType.isInterface()) {\n           objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n+              objectType, n.getLastChild().getString());\n         } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n+          // The property may be inherited from an ancestor, so it may not\n+          // be defined by the class itself. However, if the property isn't\n+          // defined on any of the ancestors, it must be an extern property.\n+          while (objectType != null &&\n+              !objectType.hasOwnProperty(n.getLastChild().getString())) {\n             objectType = objectType.getImplicitPrototype();\n           }\n+          if (objectType == null) {\n+            // An extern property.\n+            return \"EXTERN_PROP_GET\";\n+          }\n         }\n \n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        if (objectType.getConstructor() != null ||\n+            objectType.isFunctionPrototypeType()) {\n+          String propName = n.getLastChild().getString();\n+          ObjectType objectTypeToCheckForProp = objectType;\n+          // Special handling for Array.prototype.constructor and\n+          // Array.prototype.splice functions.\n+          if (objectTypeToCheckForProp.isFunctionType() && propName.equals(\"constructor\")) {\n+            FunctionType functionType = objectTypeToCheckForProp.toMaybeFunctionType();\n+            if (functionType.isConstructor()) {\n+              objectTypeToCheckForProp = functionType.getInstanceType();\n+            }\n+          }\n+          if (propName.equals(\"splice\") && getJSType(n.getFirstChild()).isSubtypeOf(\n+                registry.getNativeType(JSTypeNative.ARRAY_TYPE))) {\n+            propName = \"$splice\";\n+          }\n+\n+          Property prop = objectTypeToCheckForProp.getOwnProperty(propName);\n+          if (prop == null) {\n+            prop = objectTypeToCheckForProp.getProperty(propName);\n+          }\n+          if (prop != null) {\n+            if (objectTypeToCheckForProp.getSlotCount() == 2 &&\n+                prop.getName().equals(\"value\")) {\n+              objectTypeToCheckForProp = objectTypeToCheckForProp.getSlotType(1).dereference();\n+            } else {\n+              objectTypeToCheckForProp = prop.getType().dereference();\n+            }\n+          }\n+\n+          // If objectTypeToCheckForProp is a function type, we want to show the\n+          // instance type name.\n+          if (objectTypeToCheckForProp.isFunctionType()) {\n+            objectTypeToCheckForProp = objectTypeToCheckForProp.toMaybeFunctionType().getInstanceType();\n+          }\n+\n+          if (objectTypeToCheckForProp != null) {\n+            return objectTypeToCheckForProp.toString() + \".\" + propName;\n+          }\n         }\n       }\n     }\n@@ -765,6 +806,7 @@ class TypeValidator {\n          type.toObjectType().getConstructor() != null)) {\n       return type.toString();\n     }\n+\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n       return qualifiedName;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}