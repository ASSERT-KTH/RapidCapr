{
    "patch": "public static double[] bracket(UnivariateRealFunction function, double initial,\n                               double lowerBound, double upperBound, int maximumIterations)\n            throws ConvergenceException, FunctionEvaluationException {\n\n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                    \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                    lowerBound, initial, upperBound);\n        }\n\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb = Double.NaN;\n        int numIterations = 0;\n\n        double functionValue = function.value(initial);\n        if (Double.isNaN(functionValue)) {\n            throw new ConvergenceException(\"Initial value returned NaN\");\n        }\n\n        double fmin = function.value(lowerBound);\n        double fmax = function.value(upperBound);\n        if (Double.isNaN(fmin) || Double.isNaN(fmax)) {\n            throw new ConvergenceException(\"Function returned NaN\");\n        }\n\n        if (fmin * functionValue < 0) {\n            b = lowerBound;\n            fb = fmin;\n            a = initial;\n            fa = functionValue;\n        } else if (functionValue * fmax < 0) {\n            b = upperBound;\n            fb = fmax;\n            a = initial;\n            fa = functionValue;\n        } else {\n            while ((functionValue * fmin > 0) && (functionValue * fmax > 0) &&\n                    (numIterations++ < maximumIterations)) {\n                if (functionValue < 0) {\n                    lowerBound = initial;\n                } else {\n                    upperBound = initial;\n                }\n\n                fmin = function.value(lowerBound);\n                fmax = function.value(upperBound);\n\n                if (fmin * functionValue < 0) {\n                    b = lowerBound;\n                    fb = fmin;\n                    a = initial;\n                    fa = functionValue;\n                } else if (functionValue * fmax < 0) {\n                    b = upperBound;\n                    fb = fmax;\n                    a = initial;\n                    fa = functionValue;\n                }\n\n                if (Double.isNaN(fmin) || Double.isNaN(fmax)) {\n                    throw new ConvergenceException(\"Function returned NaN\");\n                }\n            }\n\n            if (functionValue * fmin > 0) {\n                throw new ConvergenceException(\"Could not find bracketing interval\");\n            }\n        }\n\n        double nextB;\n        do {\n            nextB = (a + b) * 0.5;\n            double f = function.value(nextB);\n            if (Double.isNaN(f)) {\n                throw new ConvergenceException(\"Function returned NaN\");\n            }\n\n            if (Double.isNaN(fb) || f * fb >= 0) {\n                fb = f;\n                b = nextB;\n            } else {\n                fa = f;\n                a = nextB;\n            }\n        } while ((Math.abs(b - a) > 0.5 * (upperBound - lowerBound)) &&\n                (numIterations++ < maximumIterations));\n\n        if (numIterations >= maximumIterations) {\n            throw new ConvergenceException(\"Maximum iterations ({0}) exceeded\", maximumIterations);\n        }\n\n        return new double[]{a, b};\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..2e00b97b6 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,48 +162,106 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n+public static double[] bracket(UnivariateRealFunction function, double initial,\n+                               double lowerBound, double upperBound, int maximumIterations)\n+            throws ConvergenceException, FunctionEvaluationException {\n+\n         if (function == null) {\n             throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n         }\n-        if (maximumIterations <= 0)  {\n+        if (maximumIterations <= 0) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n+                    \"bad value for maximum iterations number: {0}\", maximumIterations);\n         }\n         if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n             throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n+                    \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+                    lowerBound, initial, upperBound);\n         }\n+\n         double a = initial;\n         double b = initial;\n         double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n+        double fb = Double.NaN;\n+        int numIterations = 0;\n+\n+        double functionValue = function.value(initial);\n+        if (Double.isNaN(functionValue)) {\n+            throw new ConvergenceException(\"Initial value returned NaN\");\n+        }\n+\n+        double fmin = function.value(lowerBound);\n+        double fmax = function.value(upperBound);\n+        if (Double.isNaN(fmin) || Double.isNaN(fmax)) {\n+            throw new ConvergenceException(\"Function returned NaN\");\n+        }\n+\n+        if (fmin * functionValue < 0) {\n+            b = lowerBound;\n+            fb = fmin;\n+            a = initial;\n+            fa = functionValue;\n+        } else if (functionValue * fmax < 0) {\n+            b = upperBound;\n+            fb = fmax;\n+            a = initial;\n+            fa = functionValue;\n+        } else {\n+            while ((functionValue * fmin > 0) && (functionValue * fmax > 0) &&\n+                    (numIterations++ < maximumIterations)) {\n+                if (functionValue < 0) {\n+                    lowerBound = initial;\n+                } else {\n+                    upperBound = initial;\n+                }\n+\n+                fmin = function.value(lowerBound);\n+                fmax = function.value(upperBound);\n+\n+                if (fmin * functionValue < 0) {\n+                    b = lowerBound;\n+                    fb = fmin;\n+                    a = initial;\n+                    fa = functionValue;\n+                } else if (functionValue * fmax < 0) {\n+                    b = upperBound;\n+                    fb = fmax;\n+                    a = initial;\n+                    fa = functionValue;\n+                }\n+\n+                if (Double.isNaN(fmin) || Double.isNaN(fmax)) {\n+                    throw new ConvergenceException(\"Function returned NaN\");\n+                }\n+            }\n+\n+            if (functionValue * fmin > 0) {\n+                throw new ConvergenceException(\"Could not find bracketing interval\");\n+            }\n+        }\n+\n+        double nextB;\n         do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            nextB = (a + b) * 0.5;\n+            double f = function.value(nextB);\n+            if (Double.isNaN(f)) {\n+                throw new ConvergenceException(\"Function returned NaN\");\n+            }\n+\n+            if (Double.isNaN(fb) || f * fb >= 0) {\n+                fb = f;\n+                b = nextB;\n+            } else {\n+                fa = f;\n+                a = nextB;\n+            }\n+        } while ((Math.abs(b - a) > 0.5 * (upperBound - lowerBound)) &&\n+                (numIterations++ < maximumIterations));\n+\n+        if (numIterations >= maximumIterations) {\n+            throw new ConvergenceException(\"Maximum iterations ({0}) exceeded\", maximumIterations);\n         }\n-        \n+\n         return new double[]{a, b};\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}