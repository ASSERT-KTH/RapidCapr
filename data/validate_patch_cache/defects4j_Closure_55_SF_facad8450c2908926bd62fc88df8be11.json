{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  if (NodeUtil.isFunctionExpression(n)) {\n    return true;\n  }\n  if (n.isCall()) {\n    Node callee = n.getFirstChild();\n    return callee.isFunction() || callee.isQualifiedName() || callee.isName();\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..ef1e9b5e 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,10 +112,16 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  if (NodeUtil.isFunctionExpression(n)) {\n+    return true;\n+  }\n+  if (n.isCall()) {\n+    Node callee = n.getFirstChild();\n+    return callee.isFunction() || callee.isQualifiedName() || callee.isName();\n   }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}