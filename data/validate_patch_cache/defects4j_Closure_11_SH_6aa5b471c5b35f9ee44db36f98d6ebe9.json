{
    "patch": "  private void processPropertyGet(NodeTraversal t, Node n, Node parent) {\n    if (!n.isQualifiedName()) {\n      return;\n    }\n    if (n.getJSType() == null || !n.getJSType().isFunctionType() || parent.isHook()) {\n      return;\n    }\n    JSError warning =\n        JSError.make(\n            BAD_FUNCTION_PROPERTY_ACCESS,\n            t.getNodeForCodeInsertion(),\n            getPropErrorMessage(n, null));\n    t.getCompiler().getErrorManager().report(warning);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex ae8a3200..2b3f4991 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1300,7 +1300,7 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * @param n The node being visited.\n    * @param parent The parent of <code>n</code>\n    */\n-  private void visitGetProp(NodeTraversal t, Node n, Node parent) {\n+\n     // obj.prop or obj.method()\n     // Lots of types can appear on the left, a call to a void function can\n     // never be on the left. getPropertyType will decide what is acceptable",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}