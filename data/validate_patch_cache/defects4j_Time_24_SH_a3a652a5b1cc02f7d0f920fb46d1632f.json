{
    "patch": "            if (savedFields[i].iValue == Long.MIN_VALUE) {\n                throw new IllegalFieldValueException(\n                    savedFields[i].iField.getType(),\n                    \"Value too small: \" + savedFields[i].iValue + \n                    \" is not greater than the minimum supported value of \" +\n                    (savedFields[i].iField.getMinimumValue() + 1),\n                    savedFields[i].iValue, null);\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..6f75e043 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,14 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+            if (savedFields[i].iValue == Long.MIN_VALUE) {\n+                throw new IllegalFieldValueException(\n+                    savedFields[i].iField.getType(),\n+                    \"Value too small: \" + savedFields[i].iValue + \n+                    \" is not greater than the minimum supported value of \" +\n+                    (savedFields[i].iField.getMinimumValue() + 1),\n+                    savedFields[i].iValue, null);\n+            }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}