{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n\n    Node constructor = n.getFirstChild();\n    scope = traverse(constructor, scope);\n    JSType constructorType = constructor.getJSType();\n    JSType result = null;\n    if (constructorType != null) {\n      constructorType = constructorType.restrictByNotNullOrUndefined();\n      if (constructorType.isUnknownType()) {\n        result = getNativeType(UNKNOWN_TYPE);\n      } else {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct == null && constructorType instanceof FunctionType) {\n          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n          // return null. But NoObjectType implements the FunctionType\n          // interface, precisely because it can validly construct objects.\n          ct = (FunctionType) constructorType;\n        }\n        if (ct != null && ct.isConstructor()) {\n          ObjectType instanceType = ct.getInstanceType();\n          FunctionType ctorFn = instanceType.getConstructor();\n          result = ctorFn == null ? null : ctorFn.getInstanceType();\n        }\n      }\n    }\n    if (result != null && !n.isNoType()) {\n      // Don't override the type if something else did already\n      n.setJSType(result);\n    }\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c7827de9 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,17 +1031,16 @@ class TypeInference\n       i++;\n     }\n   }\n-\n   private FlowScope traverseNew(Node n, FlowScope scope) {\n \n     Node constructor = n.getFirstChild();\n     scope = traverse(constructor, scope);\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n+    JSType result = null;\n     if (constructorType != null) {\n       constructorType = constructorType.restrictByNotNullOrUndefined();\n       if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+        result = getNativeType(UNKNOWN_TYPE);\n       } else {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n         if (ct == null && constructorType instanceof FunctionType) {\n@@ -1051,11 +1050,16 @@ class TypeInference\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+          ObjectType instanceType = ct.getInstanceType();\n+          FunctionType ctorFn = instanceType.getConstructor();\n+          result = ctorFn == null ? null : ctorFn.getInstanceType();\n         }\n       }\n     }\n-    n.setJSType(type);\n+    if (result != null && !n.isNoType()) {\n+      // Don't override the type if something else did already\n+      n.setJSType(result);\n+    }\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}