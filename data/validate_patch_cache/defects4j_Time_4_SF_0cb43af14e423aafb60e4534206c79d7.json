{
    "patch": "public Partial with(DateTimeFieldType fieldType, int value) {\n    if (fieldType == null) {\n        throw new IllegalArgumentException(\"The field type must not be null\");\n    }\n    int index = indexOf(fieldType);\n    if (index == -1) {\n        // Create new array with larger size\n        int[] newValues = new int[iTypes.length + 1];\n        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n        int lastInsertIndex = 0;\n\n        // Iterate through all the existing fields and insert based on the\n        // duration difference\n        for (int i = 0; i < iTypes.length; i++) {\n            DurationField dfExisting = iTypes[i].getDurationType().getField(iChronology);\n            DurationField dfNew = fieldType.getDurationType().getField(iChronology);\n\n            if (dfNew.compareTo(dfExisting) < 0) {\n                // insert the fieldtype here since this is the first existing field with larger duration unit\n                newTypes[lastInsertIndex] = fieldType;\n                newValues[lastInsertIndex] = value;\n                lastInsertIndex++;\n            }\n            else if (dfNew.compareTo(dfExisting) == 0) {\n                // duration field units match - compare range field units\n                DurationField rfExisting = iTypes[i].getRangeDurationType().getField(iChronology);\n                DurationField rfNew = fieldType.getRangeDurationType().getField(iChronology);\n\n                if (rfNew.compareTo(rfExisting) < 0) {\n                    // insert the fieldtype here because this is the right place based on range duration units\n                    newTypes[lastInsertIndex] = fieldType;\n                    newValues[lastInsertIndex] = value;\n                    lastInsertIndex++;\n                }\n            }\n\n            // Copy the i-th field value to the newValues array since its position has been updated\n            newTypes[lastInsertIndex] = iTypes[i];\n            newValues[lastInsertIndex] = iValues[i];\n            lastInsertIndex++;\n        }\n\n        // If the field type has not been inserted yet, it has the greatest duration difference\n        if (index == -1) {\n            newTypes[lastInsertIndex] = fieldType;\n            newValues[lastInsertIndex] = value;\n        }\n\n        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n        iChronology.validate(newPartial, newValues);\n        return newPartial;\n    }\n\n    // Field type already exists, update the value\n    if (value == getValue(index)) {\n        return this;\n    }\n\n    int[] newValues = getValues();\n    newValues = getField(index).set(this, index, newValues, value);\n    return new Partial(this, newValues);\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..84f47b01 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -423,56 +423,69 @@ public final class Partial\n      * @return a copy of this instance with the field set\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n-    public Partial with(DateTimeFieldType fieldType, int value) {\n-        if (fieldType == null) {\n-            throw new IllegalArgumentException(\"The field type must not be null\");\n-        }\n-        int index = indexOf(fieldType);\n-        if (index == -1) {\n-            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n-            int[] newValues = new int[newTypes.length];\n-            \n-            // find correct insertion point to keep largest-smallest order\n-            int i = 0;\n-            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n-            if (unitField.isSupported()) {\n-                for (; i < iTypes.length; i++) {\n-                    DateTimeFieldType loopType = iTypes[i];\n-                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n-                    if (loopUnitField.isSupported()) {\n-                        int compare = unitField.compareTo(loopUnitField);\n-                        if (compare > 0) {\n-                            break;\n-                        } else if (compare == 0) {\n-                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n-                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n-                            if (rangeField.compareTo(loopRangeField) > 0) {\n-                                break;\n-                            }\n-                        }\n-                    }\n+public Partial with(DateTimeFieldType fieldType, int value) {\n+    if (fieldType == null) {\n+        throw new IllegalArgumentException(\"The field type must not be null\");\n+    }\n+    int index = indexOf(fieldType);\n+    if (index == -1) {\n+        // Create new array with larger size\n+        int[] newValues = new int[iTypes.length + 1];\n+        DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n+        int lastInsertIndex = 0;\n+\n+        // Iterate through all the existing fields and insert based on the\n+        // duration difference\n+        for (int i = 0; i < iTypes.length; i++) {\n+            DurationField dfExisting = iTypes[i].getDurationType().getField(iChronology);\n+            DurationField dfNew = fieldType.getDurationType().getField(iChronology);\n+\n+            if (dfNew.compareTo(dfExisting) < 0) {\n+                // insert the fieldtype here since this is the first existing field with larger duration unit\n+                newTypes[lastInsertIndex] = fieldType;\n+                newValues[lastInsertIndex] = value;\n+                lastInsertIndex++;\n+            }\n+            else if (dfNew.compareTo(dfExisting) == 0) {\n+                // duration field units match - compare range field units\n+                DurationField rfExisting = iTypes[i].getRangeDurationType().getField(iChronology);\n+                DurationField rfNew = fieldType.getRangeDurationType().getField(iChronology);\n+\n+                if (rfNew.compareTo(rfExisting) < 0) {\n+                    // insert the fieldtype here because this is the right place based on range duration units\n+                    newTypes[lastInsertIndex] = fieldType;\n+                    newValues[lastInsertIndex] = value;\n+                    lastInsertIndex++;\n                 }\n             }\n-            System.arraycopy(iTypes, 0, newTypes, 0, i);\n-            System.arraycopy(iValues, 0, newValues, 0, i);\n-            newTypes[i] = fieldType;\n-            newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n-            // use public constructor to ensure full validation\n-            // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n-            iChronology.validate(newPartial, newValues);\n-            return newPartial;\n+\n+            // Copy the i-th field value to the newValues array since its position has been updated\n+            newTypes[lastInsertIndex] = iTypes[i];\n+            newValues[lastInsertIndex] = iValues[i];\n+            lastInsertIndex++;\n         }\n-        if (value == getValue(index)) {\n-            return this;\n+\n+        // If the field type has not been inserted yet, it has the greatest duration difference\n+        if (index == -1) {\n+            newTypes[lastInsertIndex] = fieldType;\n+            newValues[lastInsertIndex] = value;\n         }\n-        int[] newValues = getValues();\n-        newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+\n+        Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+        iChronology.validate(newPartial, newValues);\n+        return newPartial;\n+    }\n+\n+    // Field type already exists, update the value\n+    if (value == getValue(index)) {\n+        return this;\n     }\n \n+    int[] newValues = getValues();\n+    newValues = getField(index).set(this, index, newValues, value);\n+    return new Partial(this, newValues);\n+}\n+\n     /**\n      * Gets a copy of this date with the specified field removed.\n      * <p>",
    "result_reason": "java.lang.ArrayIndexOutOfBoundsException: 2",
    "test_result": "FAIL"
}