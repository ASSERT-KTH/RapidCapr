{
    "patch": "private Map<String, SourceFile> sourceFiles = new HashMap<>();\n\npublic Region getSourceRegion(String sourceName, int lineNumber) {\n    if (lineNumber < 1) {\n        return null;\n    }\n\n    SourceFile input;\n\n    // Check if the input file has already been parsed\n    if (sourceFiles.containsKey(sourceName)) {\n        input = sourceFiles.get(sourceName);\n    } else {\n        input = getSourceFileByName(sourceName);\n        if (input != null) {\n            // If it has not been parsed yet, add it to the map\n            sourceFiles.put(sourceName, input);\n        }\n    }\n\n    if (input != null) {\n        return input.getRegion(lineNumber);\n    }\n\n    return null;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex d2524b4f..e6a1a835 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -256,43 +256,32 @@ public class Compiler extends AbstractCompiler {\n   /**\n    * Initializes the instance state needed for a compile job.\n    */\n-  public void init(JSSourceFile[] externs, JSModule[] modules,\n-      CompilerOptions options) {\n-    initOptions(options);\n-\n-    checkFirstModule(modules);\n+private Map<String, SourceFile> sourceFiles = new HashMap<>();\n \n-    this.externs = makeCompilerInput(externs, true);\n-    this.modules = modules;\n-    // Generate the module graph, and report any errors in the module\n-    // specification as errors.\n-    try {\n-      this.moduleGraph = new JSModuleGraph(modules);\n-    } catch (JSModuleGraph.ModuleDependenceException e) {\n-      // problems with the module format.  Report as an error.  The\n-      // message gives all details.\n-      report(JSError.make(MODULE_DEPENDENCY_ERROR,\n-          e.getModule().getName(), e.getDependentModule().getName()));\n-      return;\n+public Region getSourceRegion(String sourceName, int lineNumber) {\n+    if (lineNumber < 1) {\n+        return null;\n     }\n-    this.inputs = getAllInputsFromModules();\n-    initBasedOnOptions();\n \n-    initInputsByNameMap();\n-  }\n+    SourceFile input;\n \n-  /**\n-   * Do any initialization that is dependent on the compiler options.\n-   */\n-  private void initBasedOnOptions() {\n-    // Create the source map if necessary.\n-    if (options.sourceMapOutputPath != null) {\n-      sourceMap = new SourceMap();\n+    // Check if the input file has already been parsed\n+    if (sourceFiles.containsKey(sourceName)) {\n+        input = sourceFiles.get(sourceName);\n+    } else {\n+        input = getSourceFileByName(sourceName);\n+        if (input != null) {\n+            // If it has not been parsed yet, add it to the map\n+            sourceFiles.put(sourceName, input);\n+        }\n     }\n-  }\n \n-  private CompilerInput[] makeCompilerInput(\n-      JSSourceFile[] files, boolean isExtern) {\n+    if (input != null) {\n+        return input.getRegion(lineNumber);\n+    }\n+\n+    return null;\n+}\n     CompilerInput [] inputs = new CompilerInput[files.length];\n     for (int i = 0; i < files.length; ++i) {\n       inputs[i] = new CompilerInput(files[i], isExtern);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}