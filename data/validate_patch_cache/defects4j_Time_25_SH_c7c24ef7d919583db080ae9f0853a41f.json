{
    "patch": "if ((offsetLocal - offsetAdjusted) < 0) {\n    // if we just return offsetAdjusted then the time is pushed\n    // back before the transition, whereas it should be\n    // on or after the transition\n    long nextLocal = nextTransition(instantAdjusted);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n    if (nextLocal != nextAdjusted) {\n        long beforeGapAdjusted = nextAdjusted - 1;\n        long afterGapLocal = nextLocal + 1;\n\n        int beforeGapOffsetAdjusted = getOffset(beforeGapAdjusted);\n        int afterGapOffsetLocal = getOffset(afterGapLocal);\n        if (beforeGapOffsetAdjusted == afterGapOffsetLocal) {\n            return beforeGapOffsetAdjusted;\n        } else {\n            long newLocal = nextTransition(afterGapLocal);\n            long newAdjusted = newLocal - afterGapOffsetLocal;\n            int newLocalOffset = getOffset(newLocal);\n            if (newAdjusted == afterGapLocal && newLocalOffset == afterGapOffsetLocal) {\n                return afterGapOffsetLocal;\n            } else if (newAdjusted > afterGapLocal && newLocalOffset == beforeGapOffsetAdjusted) {\n                return beforeGapOffsetAdjusted;\n            } else {\n                return afterGapOffsetLocal;\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..5a397d11 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if ((offsetLocal - offsetAdjusted) < 0) {\n+    // if we just return offsetAdjusted then the time is pushed\n+    // back before the transition, whereas it should be\n+    // on or after the transition\n+    long nextLocal = nextTransition(instantAdjusted);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+    if (nextLocal != nextAdjusted) {\n+        long beforeGapAdjusted = nextAdjusted - 1;\n+        long afterGapLocal = nextLocal + 1;\n+\n+        int beforeGapOffsetAdjusted = getOffset(beforeGapAdjusted);\n+        int afterGapOffsetLocal = getOffset(afterGapLocal);\n+        if (beforeGapOffsetAdjusted == afterGapOffsetLocal) {\n+            return beforeGapOffsetAdjusted;\n+        } else {\n+            long newLocal = nextTransition(afterGapLocal);\n+            long newAdjusted = newLocal - afterGapOffsetLocal;\n+            int newLocalOffset = getOffset(newLocal);\n+            if (newAdjusted == afterGapLocal && newLocalOffset == afterGapOffsetLocal) {\n+                return afterGapOffsetLocal;\n+            } else if (newAdjusted > afterGapLocal && newLocalOffset == beforeGapOffsetAdjusted) {\n+                return beforeGapOffsetAdjusted;\n+            } else {\n+                return afterGapOffsetLocal;\n+            }\n+        }\n+    }\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...10-28T02:30:00.000+0[4]:00> but was:<...10-28T02:30:00.000+0[3]:00>",
    "test_result": "FAIL"
}