{
    "patch": "public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n    if (cal1 == null || cal2 == null) {\n        throw new IllegalArgumentException(\"The calendar must not be null\");\n    }\n    boolean result = true;\n    for (int field : new int[]{Calendar.MILLISECOND, Calendar.SECOND, Calendar.MINUTE, Calendar.HOUR_OF_DAY,\n            Calendar.DAY_OF_YEAR, Calendar.YEAR, Calendar.ERA}) {\n        if (cal1.get(field) != cal2.get(field)) {\n            result = false;\n            break;\n        }\n    }\n    if (result && cal1.getClass() == cal2.getClass()) {\n        TimeZone tz1 = cal1.getTimeZone();\n        TimeZone tz2 = cal2.getTimeZone();\n        if (tz1.hasSameRules(tz2) && tz1.getOffset(cal1.getTimeInMillis()) == tz2.getOffset(cal2.getTimeInMillis())) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/DateUtils.java b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\nindex 9a24c00f..55e4c7a6 100644\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n@@ -255,19 +255,27 @@ public class DateUtils {\n      * @throws IllegalArgumentException if either date is <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n-        if (cal1 == null || cal2 == null) {\n-            throw new IllegalArgumentException(\"The date must not be null\");\n+public static boolean isSameLocalTime(Calendar cal1, Calendar cal2) {\n+    if (cal1 == null || cal2 == null) {\n+        throw new IllegalArgumentException(\"The calendar must not be null\");\n+    }\n+    boolean result = true;\n+    for (int field : new int[]{Calendar.MILLISECOND, Calendar.SECOND, Calendar.MINUTE, Calendar.HOUR_OF_DAY,\n+            Calendar.DAY_OF_YEAR, Calendar.YEAR, Calendar.ERA}) {\n+        if (cal1.get(field) != cal2.get(field)) {\n+            result = false;\n+            break;\n         }\n-        return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&\n-                cal1.get(Calendar.SECOND) == cal2.get(Calendar.SECOND) &&\n-                cal1.get(Calendar.MINUTE) == cal2.get(Calendar.MINUTE) &&\n-                cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&\n-                cal1.get(Calendar.DAY_OF_YEAR) == cal2.get(Calendar.DAY_OF_YEAR) &&\n-                cal1.get(Calendar.YEAR) == cal2.get(Calendar.YEAR) &&\n-                cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&\n-                cal1.getClass() == cal2.getClass());\n     }\n+    if (result && cal1.getClass() == cal2.getClass()) {\n+        TimeZone tz1 = cal1.getTimeZone();\n+        TimeZone tz2 = cal2.getTimeZone();\n+        if (tz1.hasSameRules(tz2) && tz1.getOffset(cal1.getTimeInMillis()) == tz2.getOffset(cal2.getTimeInMillis())) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<true> but was:<false>",
    "test_result": "FAIL"
}