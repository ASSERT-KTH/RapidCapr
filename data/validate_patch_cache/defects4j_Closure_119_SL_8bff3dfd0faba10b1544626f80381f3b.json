{
    "patch": "case Token.FUNCTION:\n  Node gramps = parent.getParent();\n  if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n    return;\n  }\n  isSet = true;\n  type = Name.Type.FUNCTION;\n  break;\ncase Token.CATCH:\n  name = getVarName(n.getFirstChild());\n  if (!isGlobalNameReference(name, scope)) {\n    return;\n  }\n  handleSetFromLocal(module, scope, n, parent, name);\n  break;\ncase Token.BLOCK:\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    collect(module, scope, child);\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..b69b8ae3 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,26 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.FUNCTION:\n+  Node gramps = parent.getParent();\n+  if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+    return;\n+  }\n+  isSet = true;\n+  type = Name.Type.FUNCTION;\n+  break;\n+case Token.CATCH:\n+  name = getVarName(n.getFirstChild());\n+  if (!isGlobalNameReference(name, scope)) {\n+    return;\n+  }\n+  handleSetFromLocal(module, scope, n, parent, name);\n+  break;\n+case Token.BLOCK:\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    collect(module, scope, child);\n+  }\n+  break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}