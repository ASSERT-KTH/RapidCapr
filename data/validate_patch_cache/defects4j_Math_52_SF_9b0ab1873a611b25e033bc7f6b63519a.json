{
    "patch": "  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n\n  // norms computation\n  double u1u1 = u1.getNormSq();\n  double u2u2 = u2.getNormSq();\n  double v1v1 = v1.getNormSq();\n  double v2v2 = v2.getNormSq();\n  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n  }\n\n  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n  double u1u2   = u1.dotProduct(u2);\n  double v1v2   = v1.dotProduct(v2);\n  double coeffU = u1u2 / u1u1;\n  double coeffV = v1v2 / u1u1;\n  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n  double alpha  = coeffU - beta * coeffV;\n  v2 = new Vector3D(alpha, v1, beta, v2);\n\n  // preliminary computation\n  Vector3D uRef  = u1;\n  Vector3D vRef  = v1;\n  Vector3D v1Su1 = v1.subtract(u1);\n  Vector3D v2Su2 = v2.subtract(u2);\n  Vector3D k     = v1Su1.crossProduct(v2Su2);\n  Vector3D u3    = u1.crossProduct(u2);\n\n  double c = k.getNormSq();\n  if (c == 0) {\n    // the vectors are either collinear or very close to it\n    if (u1.dotProduct(u2) >= 0) {\n      // vectors point in the same direction, identity rotation\n      q0 = 1.0;\n      q1 = 0.0;\n      q2 = 0.0;\n      q3 = 0.0;\n      return;\n    } else {\n      // vectors point in opposite directions, rotate by PI around any orthogonal axis\n      Vector3D axis = Vector3D.crossProduct(u1, Vector3D.PLUS_I);\n      if (axis.getNormSq() < Precision.EPSILON) {\n          axis = Vector3D.crossProduct(u1, Vector3D.PLUS_J);\n      }\n      axis = axis.normalize();\n      q0 = -1.0;\n      q1 = axis.getX();\n      q2 = axis.getY();\n      q3 = axis.getZ();\n      return;\n    }\n  }\n\n  double s = FastMath.sqrt(c * u3.getNormSq());\n  q0 = s + k.dotProduct(u3);\n  q1 = k.getY() * u3.getZ() - k.getZ() * u3.getY();\n  q2 = k.getZ() * u3.getX() - k.getX() * u3.getZ();\n  q3 = k.getX() * u3.getY() - k.getY() * u3.getX();\n  Quaternion q = new Quaternion(q0, q1, q2, q3);\n  q = q.normalize();\n  q0 = q.getQ0();\n  q1 = q.getQ1();\n  q2 = q.getQ2();\n  q3 = q.getQ3();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..5dde63b6a 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -340,40 +340,45 @@ public class Rotation implements Serializable {\n   Vector3D v2Su2 = v2.subtract(u2);\n   Vector3D k     = v1Su1.crossProduct(v2Su2);\n   Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n+\n+  double c = k.getNormSq();\n   if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n+    // the vectors are either collinear or very close to it\n+    if (u1.dotProduct(u2) >= 0) {\n+      // vectors point in the same direction, identity rotation\n+      q0 = 1.0;\n+      q1 = 0.0;\n+      q2 = 0.0;\n+      q3 = 0.0;\n+      return;\n+    } else {\n+      // vectors point in opposite directions, rotate by PI around any orthogonal axis\n+      Vector3D axis = Vector3D.crossProduct(u1, Vector3D.PLUS_I);\n+      if (axis.getNormSq() < Precision.EPSILON) {\n+          axis = Vector3D.crossProduct(u1, Vector3D.PLUS_J);\n       }\n-\n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n-\n+      axis = axis.normalize();\n+      q0 = -1.0;\n+      q1 = axis.getX();\n+      q2 = axis.getY();\n+      q3 = axis.getZ();\n+      return;\n     }\n-\n   }\n \n+  double s = FastMath.sqrt(c * u3.getNormSq());\n+  q0 = s + k.dotProduct(u3);\n+  q1 = k.getY() * u3.getZ() - k.getZ() * u3.getY();\n+  q2 = k.getZ() * u3.getX() - k.getX() * u3.getZ();\n+  q3 = k.getX() * u3.getY() - k.getY() * u3.getX();\n+  Quaternion q = new Quaternion(q0, q1, q2, q3);\n+  q = q.normalize();\n+  q0 = q.getQ0();\n+  q1 = q.getQ1();\n+  q2 = q.getQ2();\n+  q3 = q.getQ3();\n+}\n+\n   // compute the vectorial part\n   c = FastMath.sqrt(c);\n   double inv = 1.0 / (c + c);",
    "result_reason": "error: <identifier> expected",
    "test_result": "ERROR"
}