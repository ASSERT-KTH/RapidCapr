{
    "patch": "private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {\n\n    final int N = n1 + n2;\n\n    // If both sample sets have at least 2 elements\n    if (N > 3) {\n        // Use an approximation to the normal distribution that is valid for large datasets\n        final double mu = (double) (n1 * n2) / 2.0;\n        final double sigmaSq = (double) (n1 * n2 * (n1 + n2 + 1)) / 12.0;\n        final double sigma = Math.sqrt(sigmaSq);\n        final double z = (Umin - mu) / sigma;\n\n        final NormalDistribution standardNormal = new NormalDistribution();\n\n        return 2.0 * (1.0 - standardNormal.cumulativeProbability(Math.abs(z)));\n    }\n    // If one sample set has less than 2 elements\n    else{\n        return 1.0;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\nindex ce694ce8f..8dfc1d356 100644\n--- a/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n+++ b/src/main/java/org/apache/commons/math3/stat/inference/MannWhitneyUTest.java\n@@ -165,23 +165,27 @@ public class MannWhitneyUTest {\n      * @throws MaxCountExceededException if the maximum number of\n      * iterations is exceeded\n      */\n-    private double calculateAsymptoticPValue(final double Umin,\n-                                             final int n1,\n-                                             final int n2)\n-        throws ConvergenceException, MaxCountExceededException {\n+private double calculateAsymptoticPValue(final double Umin, final int n1, final int n2) throws ConvergenceException, MaxCountExceededException {\n \n-        final int n1n2prod = n1 * n2;\n+    final int N = n1 + n2;\n \n-        // http://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U#Normal_approximation\n-        final double EU = n1n2prod / 2.0;\n-        final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;\n+    // If both sample sets have at least 2 elements\n+    if (N > 3) {\n+        // Use an approximation to the normal distribution that is valid for large datasets\n+        final double mu = (double) (n1 * n2) / 2.0;\n+        final double sigmaSq = (double) (n1 * n2 * (n1 + n2 + 1)) / 12.0;\n+        final double sigma = Math.sqrt(sigmaSq);\n+        final double z = (Umin - mu) / sigma;\n \n-        final double z = (Umin - EU) / FastMath.sqrt(VarU);\n+        final NormalDistribution standardNormal = new NormalDistribution();\n \n-        final NormalDistribution standardNormal = new NormalDistribution(0, 1);\n-\n-        return 2 * standardNormal.cumulativeProbability(z);\n+        return 2.0 * (1.0 - standardNormal.cumulativeProbability(Math.abs(z)));\n+    }\n+    // If one sample set has less than 2 elements\n+    else{\n+        return 1.0;\n     }\n+}\n \n     /**\n      * Returns the asymptotic <i>observed significance level</i>, or <a href=",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}