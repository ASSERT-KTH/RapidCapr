{
    "patch": "      if (name.getLocalSets() == 0 && name.getGlobalSets() == 1 &&\n          name.getAliasingGets() == 0 && name.getReferences().size() > 0) {\n        // {@code name} meets condition (a).\n        int n = namespace.inlineCostHeuristic(name);\n        if (n >= 0 && n <= MAX_INLINE_COST &&\n            !name.isObfuscated() && !name.isExported()) {\n          inlineLocalVar(namespace, name);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..bca42823 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,15 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+      if (name.getLocalSets() == 0 && name.getGlobalSets() == 1 &&\n+          name.getAliasingGets() == 0 && name.getReferences().size() > 0) {\n+        // {@code name} meets condition (a).\n+        int n = namespace.inlineCostHeuristic(name);\n+        if (n >= 0 && n <= MAX_INLINE_COST &&\n+            !name.isObfuscated() && !name.isExported()) {\n+          inlineLocalVar(namespace, name);\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}