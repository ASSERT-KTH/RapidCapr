{
    "patch": "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);\n\nprivate Node performArithmeticOp(int opType, Node left, Node right) {\n    Double lValObj = NodeUtil.getNumberValue(left);\n    Double rValObj = NodeUtil.getNumberValue(right);\n    double lval = lValObj == null ? Double.NaN : lValObj;\n    double rval = rValObj == null ? Double.NaN : rValObj;\n\n    if (Double.isNaN(lval) || Double.isNaN(rval)) {\n        // If either or both values are NaN, return NaN.\n        return Node.newNumber(Double.NaN);\n    }\n\n    switch (opType) {\n        case Token.ADD:\n            return NodeUtil.arithmeticAdd(left, right);\n        case Token.SUB:\n            return Node.newNumber(lval - rval);\n        case Token.MUL:\n            return Node.newNumber(lval * rval);\n        case Token.MOD:\n            if (rval == 0.0) {\n                error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n                return null;\n            }\n            return Node.newNumber(lval % rval);\n        case Token.DIV:\n            if (rval == 0.0) {\n                error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n                return null;\n            }\n            return Node.newNumber(lval / rval);\n        default:\n            break;\n    }\n\n    if (!TokenUtil.isValidArithmeticOperator(opType)) {\n        throw new Error(\"Unexpected arithmetic operator\");\n    }\n\n    int precedence = TokenUtil.getPrecedence(opType);\n    Node newNode = new Node(opType);\n    newNode.addChildToBack(left);\n    newNode.addChildToBack(right);\n\n    return precedence == TokenUtil.PRECEDENCE_BITWISE ?\n               Node.newNumber(NodeUtil.bitwiseRound(newNode)) :\n               newNode;\n}\n\nprivate void error(DiagnosticType diagnosticType, Node node) {\n    throw new RuntimeException(diagnosticType.format(node));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex c5ef4b0f..9a07abf1 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -661,89 +661,59 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n   /**\n    * Try to fold arithmetic binary operators\n    */\n-  private Node performArithmeticOp(int opType, Node left, Node right) {\n-    // Unlike other operations, ADD operands are not always converted\n-    // to Number.\n-    if (opType == Token.ADD\n-        && (NodeUtil.mayBeString(left, false)\n-            || NodeUtil.mayBeString(right, false))) {\n-      return null;\n-    }\n-\n-    double result;\n-\n-    // TODO(johnlenz): Handle NaN with unknown value. BIT ops convert NaN\n-    // to zero so this is a little akward here.\n+private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);\n \n+private Node performArithmeticOp(int opType, Node left, Node right) {\n     Double lValObj = NodeUtil.getNumberValue(left);\n-    if (lValObj == null) {\n-      return null;\n-    }\n     Double rValObj = NodeUtil.getNumberValue(right);\n-    if (rValObj == null) {\n-      return null;\n-    }\n+    double lval = lValObj == null ? Double.NaN : lValObj;\n+    double rval = rValObj == null ? Double.NaN : rValObj;\n \n-    double lval = lValObj;\n-    double rval = rValObj;\n+    if (Double.isNaN(lval) || Double.isNaN(rval)) {\n+        // If either or both values are NaN, return NaN.\n+        return Node.newNumber(Double.NaN);\n+    }\n \n     switch (opType) {\n-      case Token.BITAND:\n-        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n-        break;\n-      case Token.BITOR:\n-        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n-        break;\n-      case Token.BITXOR:\n-        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n-        break;\n-      case Token.ADD:\n-        result = lval + rval;\n-        break;\n-      case Token.SUB:\n-        result = lval - rval;\n-        break;\n-      case Token.MUL:\n-        result = lval * rval;\n-        break;\n-      case Token.MOD:\n-        if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n-        }\n-        result = lval % rval;\n-        break;\n-      case Token.DIV:\n-        if (rval == 0) {\n-          error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n-          return null;\n-        }\n-        result = lval / rval;\n-        break;\n-      default:\n+        case Token.ADD:\n+            return NodeUtil.arithmeticAdd(left, right);\n+        case Token.SUB:\n+            return Node.newNumber(lval - rval);\n+        case Token.MUL:\n+            return Node.newNumber(lval * rval);\n+        case Token.MOD:\n+            if (rval == 0.0) {\n+                error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+                return null;\n+            }\n+            return Node.newNumber(lval % rval);\n+        case Token.DIV:\n+            if (rval == 0.0) {\n+                error(DiagnosticType.error(\"JSC_DIVIDE_BY_0_ERROR\", \"Divide by 0\"), right);\n+                return null;\n+            }\n+            return Node.newNumber(lval / rval);\n+        default:\n+            break;\n+    }\n+\n+    if (!TokenUtil.isValidArithmeticOperator(opType)) {\n         throw new Error(\"Unexpected arithmetic operator\");\n     }\n \n-    // TODO(johnlenz): consider removing the result length check.\n-    // length of the left and right value plus 1 byte for the operator.\n-    if (String.valueOf(result).length() <=\n-        String.valueOf(lval).length() + String.valueOf(rval).length() + 1 &&\n+    int precedence = TokenUtil.getPrecedence(opType);\n+    Node newNode = new Node(opType);\n+    newNode.addChildToBack(left);\n+    newNode.addChildToBack(right);\n \n-        // Do not try to fold arithmetic for numbers > 2^53. After that\n-        // point, fixed-point math starts to break down and become inaccurate.\n-        Math.abs(result) <= MAX_FOLD_NUMBER) {\n-      Node newNumber = Node.newNumber(result);\n-      return newNumber;\n-    } else if (Double.isNaN(result)) {\n-      return Node.newString(Token.NAME, \"NaN\");\n-    } else if (result == Double.POSITIVE_INFINITY) {\n-      return Node.newString(Token.NAME, \"Infinity\");\n-    } else if (result == Double.NEGATIVE_INFINITY) {\n-      return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\"));\n-    }\n+    return precedence == TokenUtil.PRECEDENCE_BITWISE ?\n+               Node.newNumber(NodeUtil.bitwiseRound(newNode)) :\n+               newNode;\n+}\n \n-    return null;\n-  }\n+private void error(DiagnosticType diagnosticType, Node node) {\n+    throw new RuntimeException(diagnosticType.format(node));\n+}\n \n   /**\n    * Expressions such as [foo() * 10 * 20] generate parse trees",
    "result_reason": "error: variable MAX_FOLD_NUMBER is already defined in class PeepholeFoldConstants",
    "test_result": "ERROR"
}