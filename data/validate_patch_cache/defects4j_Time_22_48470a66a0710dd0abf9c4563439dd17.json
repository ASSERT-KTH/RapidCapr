{
    "patch": "    protected BasePeriod(long duration) {\n        super(duration);\n        \n        int hours = (int) (duration / DateTimeConstants.MILLIS_PER_HOUR);\n        \n        // extract minutes remaining after removing whole hours\n        duration -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n        int minutes = (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE);\n        \n        // extract seconds remaining after removing whole minutes\n        duration -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        int seconds = (int) (duration / DateTimeConstants.MILLIS_PER_SECOND);\n       \n        // set fields using calculated values\n        iPeriod = new Period(\n            0,     // years\n            0,     // months\n            0,     // days\n            hours, // hours\n            minutes,// minutes\n            seconds,// seconds\n            0,     // millis\n            PeriodType.time() // use time-only period type\n        );\n        \n        // bug [3264409] - this just calls a more specific constructor\n     }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..edcdcc54 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,9 +219,32 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n-    }\n+        super(duration);\n+        \n+        int hours = (int) (duration / DateTimeConstants.MILLIS_PER_HOUR);\n+        \n+        // extract minutes remaining after removing whole hours\n+        duration -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n+        int minutes = (int) (duration / DateTimeConstants.MILLIS_PER_MINUTE);\n+        \n+        // extract seconds remaining after removing whole minutes\n+        duration -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        int seconds = (int) (duration / DateTimeConstants.MILLIS_PER_SECOND);\n+       \n+        // set fields using calculated values\n+        iPeriod = new Period(\n+            0,     // years\n+            0,     // months\n+            0,     // days\n+            hours, // hours\n+            minutes,// minutes\n+            seconds,// seconds\n+            0,     // millis\n+            PeriodType.time() // use time-only period type\n+        );\n+        \n+        // bug [3264409] - this just calls a more specific constructor\n+     }\n \n     /**\n      * Creates a period from the given millisecond duration, which is only really",
    "result_reason": "error: constructor AbstractPeriod in class AbstractPeriod cannot be applied to given types;",
    "test_result": "ERROR"
}