{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraph;\nimport java.util.List;\n\nprivate boolean hasExceptionHandler(Node cfgNode) {\n  DiGraph<Node, DiGraphEdge<Node, ?>> cfg = getCfg();\n  List<DiGraphEdge<Node, ?>> branchEdges = cfg.getOutEdges(cfgNode);\n  for (DiGraphEdge<Node, ?> edge : branchEdges) {\n    if (edge.getValue() == Branch.ON_EX) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..10c810c4 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,9 +113,22 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraph;\n+import java.util.List;\n+\n+private boolean hasExceptionHandler(Node cfgNode) {\n+  DiGraph<Node, DiGraphEdge<Node, ?>> cfg = getCfg();\n+  List<DiGraphEdge<Node, ?>> branchEdges = cfg.getOutEdges(cfgNode);\n+  for (DiGraphEdge<Node, ?> edge : branchEdges) {\n+    if (edge.getValue() == Branch.ON_EX) {\n+      return true;\n+    }\n   }\n+  return false;\n+}\n \n   /**\n    * Information needed to apply a reduction.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}