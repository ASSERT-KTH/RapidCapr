{
    "patch": "String getReadableJSTypeName(Node n, boolean dereference) {\n\n    // The best type name is the actual type name.\n\n    if (n.isGetProp()) {\n        String propName = n.getLastChild().getString();\n        JSType objectType = getJSType(n.getFirstChild());\n\n        if (objectType.isConstructor() && objectType.toMaybeFunctionType().getInstanceType() != null\n                && objectType.toMaybeFunctionType().getInstanceType().hasOwnProperty(propName)) {\n            ObjectType instanceType = objectType.toMaybeFunctionType().getInstanceType();\n            // handle prototype specially, for which we want the type of the constructor object itself\n            if (propName.equals(\"prototype\")) {\n                objectType = objectType.toMaybeFunctionType().getInstanceType();\n            } else {\n                objectType = instanceType.getOwnPropertyJSType(propName);\n            }\n        } else if (objectType.isFunctionPrototypeType()) {\n            // handle inherited properties on the prototype specially\n            ObjectType prototypeType = objectType.toMaybeFunctionType().getPrototype();\n            JSType propType = prototypeType.getPropertyJSType(propName);\n            if (propType != null) {\n                objectType = propType;\n            } else {\n                // try to find the property on the class itself\n                if (prototypeType.getConstructor() != null\n                        && prototypeType.getConstructor().hasOwnProperty(propName)) {\n                    objectType = prototypeType.getConstructor().getPropertyType(propName);\n                }\n            }\n        }\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (!objectType.isUnknownType() && objectType.isFunctionType() &&\n                (objectType.toMaybeFunctionType().getInstanceType() != null\n                        || objectType.toMaybeFunctionType().hasInstanceType())) {\n            ObjectType instanceType = objectType.toMaybeFunctionType().getInstanceType();\n            String instanceName = instanceType != null ? instanceType.toString() : objectType.toString();\n            return propName.equals(\"prototype\") ? instanceName : instanceName + \".\" + propName;\n        }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n        ObjectType dereferenced = type.dereference();\n        if (dereferenced != null) {\n            type = dereferenced;\n        }\n    }\n    if (type.isFunctionPrototypeType() ||\n            (type.toObjectType() != null &&\n                    type.toObjectType().getConstructor() != null)) {\n        return type.toString();\n    }\n    String qualifiedName = n.getQualifiedName();\n    if (qualifiedName != null) {\n        if (qualifiedName.startsWith(\"window\")) {\n            qualifiedName = qualifiedName.replaceFirst(\"^window\\\\.\", \"\");\n        }\n        return qualifiedName;\n    } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n    } else {\n        return type.toString();\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..498c829e 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -721,60 +721,73 @@ class TypeValidator {\n    * @param dereference If true, the type of the node will be dereferenced\n    *     to an Object type, if possible.\n    */\n-  String getReadableJSTypeName(Node n, boolean dereference) {\n+String getReadableJSTypeName(Node n, boolean dereference) {\n \n     // The best type name is the actual type name.\n \n-    // If we're analyzing a GETPROP, the property may be inherited by the\n-    // prototype chain. So climb the prototype chain and find out where\n-    // the property was originally defined.\n     if (n.isGetProp()) {\n-      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n-      if (objectType != null) {\n         String propName = n.getLastChild().getString();\n-        if (objectType.getConstructor() != null &&\n-            objectType.getConstructor().isInterface()) {\n-          objectType = FunctionType.getTopDefiningInterface(\n-              objectType, propName);\n-        } else {\n-          // classes\n-          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n-            objectType = objectType.getImplicitPrototype();\n-          }\n+        JSType objectType = getJSType(n.getFirstChild());\n+\n+        if (objectType.isConstructor() && objectType.toMaybeFunctionType().getInstanceType() != null\n+                && objectType.toMaybeFunctionType().getInstanceType().hasOwnProperty(propName)) {\n+            ObjectType instanceType = objectType.toMaybeFunctionType().getInstanceType();\n+            // handle prototype specially, for which we want the type of the constructor object itself\n+            if (propName.equals(\"prototype\")) {\n+                objectType = objectType.toMaybeFunctionType().getInstanceType();\n+            } else {\n+                objectType = instanceType.getOwnPropertyJSType(propName);\n+            }\n+        } else if (objectType.isFunctionPrototypeType()) {\n+            // handle inherited properties on the prototype specially\n+            ObjectType prototypeType = objectType.toMaybeFunctionType().getPrototype();\n+            JSType propType = prototypeType.getPropertyJSType(propName);\n+            if (propType != null) {\n+                objectType = propType;\n+            } else {\n+                // try to find the property on the class itself\n+                if (prototypeType.getConstructor() != null\n+                        && prototypeType.getConstructor().hasOwnProperty(propName)) {\n+                    objectType = prototypeType.getConstructor().getPropertyType(propName);\n+                }\n+            }\n         }\n-\n         // Don't show complex function names or anonymous types.\n         // Instead, try to get a human-readable type name.\n-        if (objectType != null &&\n-            (objectType.getConstructor() != null ||\n-             objectType.isFunctionPrototypeType())) {\n-          return objectType.toString() + \".\" + propName;\n+        if (!objectType.isUnknownType() && objectType.isFunctionType() &&\n+                (objectType.toMaybeFunctionType().getInstanceType() != null\n+                        || objectType.toMaybeFunctionType().hasInstanceType())) {\n+            ObjectType instanceType = objectType.toMaybeFunctionType().getInstanceType();\n+            String instanceName = instanceType != null ? instanceType.toString() : objectType.toString();\n+            return propName.equals(\"prototype\") ? instanceName : instanceName + \".\" + propName;\n         }\n-      }\n     }\n \n     JSType type = getJSType(n);\n     if (dereference) {\n-      ObjectType dereferenced = type.dereference();\n-      if (dereferenced != null) {\n-        type = dereferenced;\n-      }\n+        ObjectType dereferenced = type.dereference();\n+        if (dereferenced != null) {\n+            type = dereferenced;\n+        }\n     }\n     if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n+            (type.toObjectType() != null &&\n+                    type.toObjectType().getConstructor() != null)) {\n+        return type.toString();\n     }\n     String qualifiedName = n.getQualifiedName();\n     if (qualifiedName != null) {\n-      return qualifiedName;\n+        if (qualifiedName.startsWith(\"window\")) {\n+            qualifiedName = qualifiedName.replaceFirst(\"^window\\\\.\", \"\");\n+        }\n+        return qualifiedName;\n     } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n-      return \"function\";\n+        // Don't show complex function names.\n+        return \"function\";\n     } else {\n-      return type.toString();\n+        return type.toString();\n     }\n-  }\n+}\n \n   /**\n    * This method gets the JSType from the Node argument and verifies that it is",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}