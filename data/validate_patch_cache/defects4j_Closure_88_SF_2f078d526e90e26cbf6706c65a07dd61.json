{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      Node parent = n.getParent();\n      if (NodeUtil.isLhs(n, parent)) {\n        if (NodeUtil.isAssignmentOp(parent)) {\n          // The expression to which the assignment is made is evaluated before\n          // the RHS is evaluated (normal left to right evaluation) but the KILL\n          // occurs after the RHS is evaluated.\n          return VariableLiveness.KILL;\n        } else if (NodeUtil.isIncDecOp(parent)) {\n          // For increment and decrement operators the read occurs before the write.\n          return VariableLiveness.READ;\n        } else if (NodeUtil.isObjectLitKey(parent, grandParentOf(n))) {\n          // Object literal key is used for both read and write.\n          return VariableLiveness.READ;\n        } else {\n          Node grandParent = grandParentOf(n);\n          if (NodeUtil.isAssignmentOp(grandParent)) {\n            // If the RHS is an expression other than an identifier then the read occurs before the write.\n            Node assignRhs = grandParent.getLastChild();\n            if (assignRhs == null || !NodeUtil.isName(assignRhs)) {\n              return VariableLiveness.READ;\n            }\n          }\n        }\n      } else if (NodeUtil.isIncDecOp(parent)) {\n        // For increment and decrement operators the read occurs before the write.\n        return VariableLiveness.READ;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n            child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }\n\n\n  /**\n   * @return The grandparent of the given node, or {@code null} if it doesn't exist.\n   */\n  private static Node grandParentOf(Node n) {\n    checkState(!n.isScript(), \"Expected n=%s to have a non-null parent\", n);\n    Node parent = n.getParent();\n    if (parent == null || parent.isScript()) {\n      return null;\n    }\n    return parent.getParent();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..add88f3d 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -323,11 +323,32 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n-      if (NodeUtil.isLhs(n, n.getParent())) {\n-        // The expression to which the assignment is made is evaluated before\n-        // the RHS is evaluated (normal left to right evaluation) but the KILL\n-        // occurs after the RHS is evaluated.\n-        return VariableLiveness.KILL;\n+      Node parent = n.getParent();\n+      if (NodeUtil.isLhs(n, parent)) {\n+        if (NodeUtil.isAssignmentOp(parent)) {\n+          // The expression to which the assignment is made is evaluated before\n+          // the RHS is evaluated (normal left to right evaluation) but the KILL\n+          // occurs after the RHS is evaluated.\n+          return VariableLiveness.KILL;\n+        } else if (NodeUtil.isIncDecOp(parent)) {\n+          // For increment and decrement operators the read occurs before the write.\n+          return VariableLiveness.READ;\n+        } else if (NodeUtil.isObjectLitKey(parent, grandParentOf(n))) {\n+          // Object literal key is used for both read and write.\n+          return VariableLiveness.READ;\n+        } else {\n+          Node grandParent = grandParentOf(n);\n+          if (NodeUtil.isAssignmentOp(grandParent)) {\n+            // If the RHS is an expression other than an identifier then the read occurs before the write.\n+            Node assignRhs = grandParent.getLastChild();\n+            if (assignRhs == null || !NodeUtil.isName(assignRhs)) {\n+              return VariableLiveness.READ;\n+            }\n+          }\n+        }\n+      } else if (NodeUtil.isIncDecOp(parent)) {\n+        // For increment and decrement operators the read occurs before the write.\n+        return VariableLiveness.READ;\n       } else {\n         return VariableLiveness.READ;\n       }\n@@ -335,7 +356,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n \n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+            child != null; child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n         VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n@@ -345,4 +366,17 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n     }\n     return VariableLiveness.MAYBE_LIVE;\n   }\n+\n+\n+  /**\n+   * @return The grandparent of the given node, or {@code null} if it doesn't exist.\n+   */\n+  private static Node grandParentOf(Node n) {\n+    checkState(!n.isScript(), \"Expected n=%s to have a non-null parent\", n);\n+    Node parent = n.getParent();\n+    if (parent == null || parent.isScript()) {\n+      return null;\n+    }\n+    return parent.getParent();\n+  }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}