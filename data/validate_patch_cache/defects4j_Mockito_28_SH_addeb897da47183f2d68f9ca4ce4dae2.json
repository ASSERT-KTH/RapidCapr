{
    "patch": "            List<MockCandidate> filteredCandidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).collect(Collectors.toList());\n            if (filteredCandidates.isEmpty()) {\n                continue;\n            }\n            MockCandidate bestMatch = filteredCandidates.get(0);\n            for (MockCandidate candidate : filteredCandidates) {\n                if (candidate.getTypeDistance() < bestMatch.getTypeDistance()) {\n                    bestMatch = candidate;\n                }\n            }\n            bestMatch.thenInject();",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..5cb75ee38 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,17 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            List<MockCandidate> filteredCandidates = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).collect(Collectors.toList());\n+            if (filteredCandidates.isEmpty()) {\n+                continue;\n+            }\n+            MockCandidate bestMatch = filteredCandidates.get(0);\n+            for (MockCandidate candidate : filteredCandidates) {\n+                if (candidate.getTypeDistance() < bestMatch.getTypeDistance()) {\n+                    bestMatch = candidate;\n+                }\n+            }\n+            bestMatch.thenInject();\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}