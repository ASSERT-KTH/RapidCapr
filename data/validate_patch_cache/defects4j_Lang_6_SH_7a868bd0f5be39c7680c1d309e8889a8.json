{
    "patch": "int i = input.indexOf(\"\\\\\");\nwhile (i >= 0) {\n    int len = input.length();\n    if (i > len - 2) {\n        break;\n    }\n    char charAtI = input.charAt(i + 1);\n    if(charAtI == 't'){\n        out.write('\\t');\n        i += 2;\n    }else if(charAtI == 'r'){\n        out.write('\\r');\n        i += 2;\n    }else if(charAtI == 'n'){\n        out.write('\\n');\n        i += 2;\n    }else if(charAtI == 'f'){\n        out.write('\\f');\n        i += 2;\n    }else {\n        // this is a hexadecimal Unicode escape\n        if (i <= len - 6 && input.charAt(i + 1) == 'u') {\n            try {\n                int codePoint = Integer.parseInt(input.substring(i + 2, i + 6), 16);\n                out.write(Character.toChars(codePoint));\n                i += 6;\n            } catch (NumberFormatException ex) {\n                throw new IllegalArgumentException(\"Unable to parse unicode value: \" + ex.getMessage(), ex);\n            }\n        }else {\n            // this is not an escape sequence that we recognize, let's leave it as is\n            out.write('\\\\');\n            out.write(charAtI);\n            i += 2;\n        }\n    }\n    if (i >= len) {\n        break;\n    }\n    i = input.indexOf(\"\\\\\", i);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..a7a9dc10 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,47 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+int i = input.indexOf(\"\\\\\");\n+while (i >= 0) {\n+    int len = input.length();\n+    if (i > len - 2) {\n+        break;\n+    }\n+    char charAtI = input.charAt(i + 1);\n+    if(charAtI == 't'){\n+        out.write('\\t');\n+        i += 2;\n+    }else if(charAtI == 'r'){\n+        out.write('\\r');\n+        i += 2;\n+    }else if(charAtI == 'n'){\n+        out.write('\\n');\n+        i += 2;\n+    }else if(charAtI == 'f'){\n+        out.write('\\f');\n+        i += 2;\n+    }else {\n+        // this is a hexadecimal Unicode escape\n+        if (i <= len - 6 && input.charAt(i + 1) == 'u') {\n+            try {\n+                int codePoint = Integer.parseInt(input.substring(i + 2, i + 6), 16);\n+                out.write(Character.toChars(codePoint));\n+                i += 6;\n+            } catch (NumberFormatException ex) {\n+                throw new IllegalArgumentException(\"Unable to parse unicode value: \" + ex.getMessage(), ex);\n+            }\n+        }else {\n+            // this is not an escape sequence that we recognize, let's leave it as is\n+            out.write('\\\\');\n+            out.write(charAtI);\n+            i += 2;\n+        }\n+    }\n+    if (i >= len) {\n+        break;\n+    }\n+    i = input.indexOf(\"\\\\\", i);\n+}\n             }\n         }\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}