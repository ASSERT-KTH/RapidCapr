{
    "patch": "        LocalTime localTime = new LocalTime(instantLocal, chrono);\n        ChronoLocalDate chronoLocalDate = bucket.computeLocalDate(localTime.getChronology());\n        chronology = chronoLocalDate.getChronology();\n        if (iZone != null) {\n            chronology = chronology.withZone(iZone);\n        }\n        DateTime dateTime = null;\n        try {\n            dateTime = chronoLocalDate.toDateTime(localTime);\n        } catch (IllegalArgumentException e) {\n            // ignore\n        }\n        \n        if (dateTime == null) {\n            long localtimeTicks = localTime.getMillisOfDay();\n            if (localTime.getChronology().dayOfMonth().roundFloor(localTime).equals(localTime)) {\n                localtimeTicks += instantLocal - instantLocal % DateTimeConstants.MILLIS_PER_DAY;\n            }\n            return (int) (localtimeTicks - instantLocal) / DateTimeConstants.MILLIS_PER_SECOND;\n        }\n        \n        instant.setMillis(dateTime.getMillis());\n        instant.setChronology(chronology);\n        \n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            instant = instant.withZone(parsedZone);\n        }\n        \n        return bucket.getParsePosition();",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..e0c222e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,37 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        LocalTime localTime = new LocalTime(instantLocal, chrono);\n+        ChronoLocalDate chronoLocalDate = bucket.computeLocalDate(localTime.getChronology());\n+        chronology = chronoLocalDate.getChronology();\n+        if (iZone != null) {\n+            chronology = chronology.withZone(iZone);\n+        }\n+        DateTime dateTime = null;\n+        try {\n+            dateTime = chronoLocalDate.toDateTime(localTime);\n+        } catch (IllegalArgumentException e) {\n+            // ignore\n+        }\n+        \n+        if (dateTime == null) {\n+            long localtimeTicks = localTime.getMillisOfDay();\n+            if (localTime.getChronology().dayOfMonth().roundFloor(localTime).equals(localTime)) {\n+                localtimeTicks += instantLocal - instantLocal % DateTimeConstants.MILLIS_PER_DAY;\n+            }\n+            return (int) (localtimeTicks - instantLocal) / DateTimeConstants.MILLIS_PER_SECOND;\n+        }\n+        \n+        instant.setMillis(dateTime.getMillis());\n+        instant.setChronology(chronology);\n+        \n+        if (bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            instant = instant.withZone(parsedZone);\n+        }\n+        \n+        return bucket.getParsePosition();\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}