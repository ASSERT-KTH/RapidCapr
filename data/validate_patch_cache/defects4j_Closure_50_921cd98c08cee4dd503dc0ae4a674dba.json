{
    "patch": "private Node tryFoldArrayJoin(Node n) {\n    Node callTarget = n.getFirstChild();\n    if (!NodeUtil.isGetProp(callTarget, \"join\")) {\n      return n;\n    }\n\n    Node arrayNode = callTarget.getFirstChild();\n    if (!arrayNode.isArrayLit()) {\n      return n;\n    }\n\n    String joinString = \",\";\n    if (callTarget.getNext() != null) {\n      Node secondChild = callTarget.getNext();\n      if (NodeUtil.isImmutableValue(secondChild)) {\n        joinString = NodeUtil.getStringValue(secondChild);\n      } else {\n        return n;\n      }\n    }\n\n    Node result;\n\n    if (!NodeUtil.isImmutableValue(arrayNode.getFirstChild())) {\n      Node firstChild = arrayNode.getFirstChild();\n      if (firstChild.getNext() == null) {\n        result = firstChild;\n      } else {\n        result = n;\n      }\n    } else {\n      StringBuilder builder = new StringBuilder();\n      Node curr = arrayNode.getFirstChild();\n\n      while (curr != null) {\n        String value = NodeUtil.getArrayElementStringValue(curr);\n        builder.append(value);\n\n        if (curr.getNext() != null) {\n          builder.append(joinString);\n          curr = curr.getNext();\n        } else {\n          break;\n        }\n      }\n\n      result = NodeUtil.getStringNode(builder.toString());\n    }\n\n    if (!result.isEquivalentTo(n)) {\n      NodeUtil.copyNodeMetadata(n, result);\n      n.replaceWith(result);\n    }\n\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\nindex ffe47d3d..78f20c54 100644\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n@@ -364,115 +364,61 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n   /**\n    * Try to fold an array join: ['a', 'b', 'c'].join('') -> 'abc';\n    */\n-  private Node tryFoldArrayJoin(Node n) {\n+private Node tryFoldArrayJoin(Node n) {\n     Node callTarget = n.getFirstChild();\n+    if (!NodeUtil.isGetProp(callTarget, \"join\")) {\n+      return n;\n+    }\n \n-    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {\n+    Node arrayNode = callTarget.getFirstChild();\n+    if (!arrayNode.isArrayLit()) {\n       return n;\n     }\n \n-    Node right = callTarget.getNext();\n-    if (right != null) {\n-      if (!NodeUtil.isImmutableValue(right)) {\n+    String joinString = \",\";\n+    if (callTarget.getNext() != null) {\n+      Node secondChild = callTarget.getNext();\n+      if (NodeUtil.isImmutableValue(secondChild)) {\n+        joinString = NodeUtil.getStringValue(secondChild);\n+      } else {\n         return n;\n       }\n     }\n \n-    Node arrayNode = callTarget.getFirstChild();\n-    Node functionName = arrayNode.getNext();\n+    Node result;\n \n-    if ((arrayNode.getType() != Token.ARRAYLIT) ||\n-        !functionName.getString().equals(\"join\")) {\n-      return n;\n-    }\n+    if (!NodeUtil.isImmutableValue(arrayNode.getFirstChild())) {\n+      Node firstChild = arrayNode.getFirstChild();\n+      if (firstChild.getNext() == null) {\n+        result = firstChild;\n+      } else {\n+        result = n;\n+      }\n+    } else {\n+      StringBuilder builder = new StringBuilder();\n+      Node curr = arrayNode.getFirstChild();\n \n-      // \",\" is the default, it doesn't need to be explicit\n-\n-    String joinString = (right == null) ? \",\" : NodeUtil.getStringValue(right);\n-    List<Node> arrayFoldedChildren = Lists.newLinkedList();\n-    StringBuilder sb = null;\n-    int foldedSize = 0;\n-    Node prev = null;\n-    Node elem = arrayNode.getFirstChild();\n-    // Merges adjacent String nodes.\n-    while (elem != null) {\n-      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {\n-        if (sb == null) {\n-          sb = new StringBuilder();\n+      while (curr != null) {\n+        String value = NodeUtil.getArrayElementStringValue(curr);\n+        builder.append(value);\n+\n+        if (curr.getNext() != null) {\n+          builder.append(joinString);\n+          curr = curr.getNext();\n         } else {\n-          sb.append(joinString);\n-        }\n-        sb.append(NodeUtil.getArrayElementStringValue(elem));\n-      } else {\n-        if (sb != null) {\n-          Preconditions.checkNotNull(prev);\n-          // + 2 for the quotes.\n-          foldedSize += sb.length() + 2;\n-          arrayFoldedChildren.add(\n-              Node.newString(sb.toString()).copyInformationFrom(prev));\n-          sb = null;\n+          break;\n         }\n-        foldedSize += InlineCostEstimator.getCost(elem);\n-        arrayFoldedChildren.add(elem);\n       }\n-      prev = elem;\n-      elem = elem.getNext();\n-    }\n \n-    if (sb != null) {\n-      Preconditions.checkNotNull(prev);\n-      // + 2 for the quotes.\n-      foldedSize += sb.length() + 2;\n-      arrayFoldedChildren.add(\n-          Node.newString(sb.toString()).copyInformationFrom(prev));\n+      result = NodeUtil.getStringNode(builder.toString());\n     }\n-    // one for each comma.\n-    foldedSize += arrayFoldedChildren.size() - 1;\n-\n-    int originalSize = InlineCostEstimator.getCost(n);\n-    switch (arrayFoldedChildren.size()) {\n-      case 0:\n-        Node emptyStringNode = Node.newString(\"\");\n-        n.getParent().replaceChild(n, emptyStringNode);\n-        reportCodeChange();\n-        return emptyStringNode;\n-      case 1:\n-        Node foldedStringNode = arrayFoldedChildren.remove(0);\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        if (foldedStringNode.getType() != Token.STRING) {\n-          // If the Node is not a string literal, ensure that\n-          // it is coerced to a string.\n-          Node replacement = new Node(Token.ADD,\n-              Node.newString(\"\").copyInformationFrom(n),\n-              foldedStringNode);\n-          foldedStringNode = replacement;\n-        }\n-        n.getParent().replaceChild(n, foldedStringNode);\n-        reportCodeChange();\n-        return foldedStringNode;\n-      default:\n-        // No folding could actually be performed.\n-        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {\n-          return n;\n-        }\n-        int kJoinOverhead = \"[].join()\".length();\n-        foldedSize += kJoinOverhead;\n-        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;\n-        if (foldedSize > originalSize) {\n-          return n;\n-        }\n-        arrayNode.detachChildren();\n-        for (Node node : arrayFoldedChildren) {\n-          arrayNode.addChildToBack(node);\n-        }\n-        reportCodeChange();\n-        break;\n+\n+    if (!result.isEquivalentTo(n)) {\n+      NodeUtil.copyNodeMetadata(n, result);\n+      n.replaceWith(result);\n     }\n \n-    return n;\n+    return result;\n   }\n \n   /**\n@@ -642,4 +588,4 @@ class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{\n     reportCodeChange();\n     return resultNode;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: method isGetProp in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}