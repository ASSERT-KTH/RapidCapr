{
    "patch": "private static void modify(Calendar val, int field, boolean round) {\n        if (val.get(Calendar.YEAR) > 280000000) {\n            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n        }\n\n        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n\n        boolean roundUp = false;\n        int fieldToRound = -1;\n        long time = val.getTimeInMillis();\n        boolean done = false;\n\n        if (field == Calendar.SECOND) {\n            // remove milliseconds\n            if (!round || val.get(Calendar.MILLISECOND) < 500) {\n                time = time - val.get(Calendar.MILLISECOND);\n            }\n            // remove seconds\n            time = time - (val.get(Calendar.SECOND) * 1000L);\n        }\n        else if (field == Calendar.MINUTE) {\n            // remove milliseconds\n            if (!round || val.get(Calendar.MILLISECOND) < 500) {\n                time = time - val.get(Calendar.MILLISECOND);\n            }\n            // remove seconds\n            time = time - (val.get(Calendar.SECOND) * 1000L);\n            // remove minutes\n            time = time - (val.get(Calendar.MINUTE) * 60000L);\n\n            fieldToRound = Calendar.MINUTE;\n        }\n        else {\n            // truncate milliseconds\n            int millisecs = val.get(Calendar.MILLISECOND);\n            if (!round || millisecs < 500) {\n                time = time - millisecs;\n            }\n\n            // truncate seconds\n            int seconds = val.get(Calendar.SECOND);\n            if (!round || seconds < 30) {\n                time = time - (seconds * 1000L);\n            }\n\n            // truncate minutes\n            int minutes = val.get(Calendar.MINUTE);\n            time = time - (minutes * 60000L);\n\n            if (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR) {\n                // remove hours\n                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n\n                fieldToRound = field == Calendar.HOUR_OF_DAY ? Calendar.HOUR_OF_DAY : Calendar.HOUR;\n            }\n            else if (field == Calendar.DATE) {\n                // remove hours\n                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n                // remove minutes\n                time = time - (val.get(Calendar.MINUTE) * 60000L);\n                // remove seconds\n                time = time - (val.get(Calendar.SECOND) * 1000L);\n\n                fieldToRound = Calendar.DATE;\n            }\n            else if (field == DateUtils.SEMI_MONTH) {\n                // remove hours\n                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n                // remove minutes\n                time = time - (val.get(Calendar.MINUTE) * 60000L);\n                // remove seconds\n                time = time - (val.get(Calendar.SECOND) * 1000L);\n                // remove days\n                time = time - (val.get(Calendar.DATE) * 86400000L);\n\n                int dayOfHalfmonth = val.get(Calendar.DATE);\n                if (dayOfHalfmonth < 15) {\n                    val.set(Calendar.DATE, 1);\n                } else {\n                    val.set(Calendar.DATE, 16);\n                }\n\n                // not always want to round up for half months\n                if (dayOfHalfmonth == 1 || dayOfHalfmonth == 16) {\n                    roundUp = !round;\n                }\n\n                fieldToRound = Calendar.DATE;\n            }\n            else if (field == Calendar.MONTH) {\n                // remove hours\n                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n                // remove minutes\n                time = time - (val.get(Calendar.MINUTE) * 60000L);\n                // remove seconds\n                time = time - (val.get(Calendar.SECOND) * 1000L);\n                // remove days\n                time = time - ((val.get(Calendar.DATE) - 1) * 86400000L);\n\n                // there's no rounding for months\n            }\n\n            done = true;\n        }\n\n        // round up the selected field if necessary\n        if (!done && fieldToRound > -1) {\n            val.setTimeInMillis(time);\n            int value = val.get(fieldToRound);\n            roundUp = !round ? value < getRoundingValue(fieldToRound) : value > getRoundingValue(fieldToRound);\n            if (roundUp) {\n                val.set(fieldToRound, value + getDurationField(fieldToRound));\n            }\n        }\n\n        // reset time\n        if (val.getTimeInMillis() != time) {\n            val.setTimeInMillis(time);\n        }\n\n        for (int[] fieldSet : fields) {\n            boolean found = false;\n            for (int candidate : fieldSet) {\n                if (candidate == field) {\n                    found = true;\n                    break;\n                }\n            }\n            if (found) {\n                //This is our field... we stop looping\n                if (round && roundUp) {\n                    if (field == DateUtils.SEMI_MONTH) {\n                        //This is a special case that's hard to generalize\n                        //If the date is 1, we round up to 16, otherwise\n                        //  we subtract 15 days and add 1 month\n                        if (val.get(Calendar.DATE) == 1) {\n                            val.add(Calendar.DATE, 15);\n                        } else {\n                            val.add(Calendar.DATE, -15);\n                            val.add(Calendar.MONTH, 1);\n                        }\n                    } else {\n                        //We need at add one to this field since the\n                        //  last number causes us to round up\n                        val.add(field, 1);\n                    }\n                }\n                return;\n            }\n        }\n\n        throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n    }\n\n    private static int getRoundingValue(int field) {\n        switch (field) {\n            case Calendar.SECOND:\n                return 30;\n            case Calendar.MINUTE:\n                return 30;\n            case Calendar.HOUR_OF_DAY:\n                return 12;\n            case Calendar.HOUR:\n                return 12;\n            case DateUtils.SEMI_MONTH:\n                return 15;\n            default:\n                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n        }\n    }\n\n    private static int getDurationField(int field) {\n        switch (field) {\n            case Calendar.SECOND:\n                return 60;\n            case Calendar.MINUTE:\n                return 60;\n            case Calendar.HOUR_OF_DAY:\n                return 24;\n            case Calendar.HOUR:\n                return 12;\n            case Calendar.DATE:\n                return 1;\n            case Calendar.MONTH:\n                return 1;\n            case DateUtils.SEMI_MONTH:\n                return 1;\n            default:\n                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/time/DateUtils.java b/src/java/org/apache/commons/lang/time/DateUtils.java\nindex 0dd0dedc..662d27bd 100644\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n@@ -617,130 +617,198 @@ public class DateUtils {\n      * @param round  true to round, false to truncate\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n+private static void modify(Calendar val, int field, boolean round) {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n-        \n+\n         if (field == Calendar.MILLISECOND) {\n             return;\n         }\n \n-        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n-        // see http://issues.apache.org/jira/browse/LANG-59\n-        //\n-        // Manually truncate milliseconds, seconds and minutes, rather than using\n-        // Calendar methods.\n-\n-        Date date = val.getTime();\n-        long time = date.getTime();\n+        boolean roundUp = false;\n+        int fieldToRound = -1;\n+        long time = val.getTimeInMillis();\n         boolean done = false;\n \n-        // truncate milliseconds\n-        int millisecs = val.get(Calendar.MILLISECOND);\n-        if (!round || millisecs < 500) {\n-            time = time - millisecs;\n         if (field == Calendar.SECOND) {\n-            done = true;\n+            // remove milliseconds\n+            if (!round || val.get(Calendar.MILLISECOND) < 500) {\n+                time = time - val.get(Calendar.MILLISECOND);\n             }\n+            // remove seconds\n+            time = time - (val.get(Calendar.SECOND) * 1000L);\n         }\n-\n-        // truncate seconds\n-        int seconds = val.get(Calendar.SECOND);\n-        if (!done && (!round || seconds < 30)) {\n-            time = time - (seconds * 1000L);\n-        if (field == Calendar.MINUTE) {\n-            done = true;\n+        else if (field == Calendar.MINUTE) {\n+            // remove milliseconds\n+            if (!round || val.get(Calendar.MILLISECOND) < 500) {\n+                time = time - val.get(Calendar.MILLISECOND);\n             }\n+            // remove seconds\n+            time = time - (val.get(Calendar.SECOND) * 1000L);\n+            // remove minutes\n+            time = time - (val.get(Calendar.MINUTE) * 60000L);\n+\n+            fieldToRound = Calendar.MINUTE;\n         }\n+        else {\n+            // truncate milliseconds\n+            int millisecs = val.get(Calendar.MILLISECOND);\n+            if (!round || millisecs < 500) {\n+                time = time - millisecs;\n+            }\n+\n+            // truncate seconds\n+            int seconds = val.get(Calendar.SECOND);\n+            if (!round || seconds < 30) {\n+                time = time - (seconds * 1000L);\n+            }\n \n-        // truncate minutes\n-        int minutes = val.get(Calendar.MINUTE);\n-        if (!done && (!round || minutes < 30)) {\n+            // truncate minutes\n+            int minutes = val.get(Calendar.MINUTE);\n             time = time - (minutes * 60000L);\n+\n+            if (field == Calendar.HOUR_OF_DAY || field == Calendar.HOUR) {\n+                // remove hours\n+                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n+\n+                fieldToRound = field == Calendar.HOUR_OF_DAY ? Calendar.HOUR_OF_DAY : Calendar.HOUR;\n+            }\n+            else if (field == Calendar.DATE) {\n+                // remove hours\n+                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n+                // remove minutes\n+                time = time - (val.get(Calendar.MINUTE) * 60000L);\n+                // remove seconds\n+                time = time - (val.get(Calendar.SECOND) * 1000L);\n+\n+                fieldToRound = Calendar.DATE;\n+            }\n+            else if (field == DateUtils.SEMI_MONTH) {\n+                // remove hours\n+                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n+                // remove minutes\n+                time = time - (val.get(Calendar.MINUTE) * 60000L);\n+                // remove seconds\n+                time = time - (val.get(Calendar.SECOND) * 1000L);\n+                // remove days\n+                time = time - (val.get(Calendar.DATE) * 86400000L);\n+\n+                int dayOfHalfmonth = val.get(Calendar.DATE);\n+                if (dayOfHalfmonth < 15) {\n+                    val.set(Calendar.DATE, 1);\n+                } else {\n+                    val.set(Calendar.DATE, 16);\n+                }\n+\n+                // not always want to round up for half months\n+                if (dayOfHalfmonth == 1 || dayOfHalfmonth == 16) {\n+                    roundUp = !round;\n+                }\n+\n+                fieldToRound = Calendar.DATE;\n+            }\n+            else if (field == Calendar.MONTH) {\n+                // remove hours\n+                time = time - (val.get(Calendar.HOUR_OF_DAY) * 3600000L);\n+                // remove minutes\n+                time = time - (val.get(Calendar.MINUTE) * 60000L);\n+                // remove seconds\n+                time = time - (val.get(Calendar.SECOND) * 1000L);\n+                // remove days\n+                time = time - ((val.get(Calendar.DATE) - 1) * 86400000L);\n+\n+                // there's no rounding for months\n+            }\n+\n+            done = true;\n+        }\n+\n+        // round up the selected field if necessary\n+        if (!done && fieldToRound > -1) {\n+            val.setTimeInMillis(time);\n+            int value = val.get(fieldToRound);\n+            roundUp = !round ? value < getRoundingValue(fieldToRound) : value > getRoundingValue(fieldToRound);\n+            if (roundUp) {\n+                val.set(fieldToRound, value + getDurationField(fieldToRound));\n+            }\n         }\n \n         // reset time\n-        if (date.getTime() != time) {\n-            date.setTime(time);\n-            val.setTime(date);\n+        if (val.getTimeInMillis() != time) {\n+            val.setTimeInMillis(time);\n         }\n-        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n \n-        boolean roundUp = false;\n-        for (int i = 0; i < fields.length; i++) {\n-            for (int j = 0; j < fields[i].length; j++) {\n-                if (fields[i][j] == field) {\n-                    //This is our field... we stop looping\n-                    if (round && roundUp) {\n-                        if (field == DateUtils.SEMI_MONTH) {\n-                            //This is a special case that's hard to generalize\n-                            //If the date is 1, we round up to 16, otherwise\n-                            //  we subtract 15 days and add 1 month\n-                            if (val.get(Calendar.DATE) == 1) {\n-                                val.add(Calendar.DATE, 15);\n-                            } else {\n-                                val.add(Calendar.DATE, -15);\n-                                val.add(Calendar.MONTH, 1);\n-                            }\n-                        } else {\n-                            //We need at add one to this field since the\n-                            //  last number causes us to round up\n-                            val.add(fields[i][0], 1);\n-                        }\n-                    }\n-                    return;\n+        for (int[] fieldSet : fields) {\n+            boolean found = false;\n+            for (int candidate : fieldSet) {\n+                if (candidate == field) {\n+                    found = true;\n+                    break;\n                 }\n             }\n-            //We have various fields that are not easy roundings\n-            int offset = 0;\n-            boolean offsetSet = false;\n-            //These are special types of fields that require different rounding rules\n-            switch (field) {\n-                case DateUtils.SEMI_MONTH:\n-                    if (fields[i][0] == Calendar.DATE) {\n-                        //If we're going to drop the DATE field's value,\n-                        //  we want to do this our own way.\n-                        //We need to subtrace 1 since the date has a minimum of 1\n-                        offset = val.get(Calendar.DATE) - 1;\n-                        //If we're above 15 days adjustment, that means we're in the\n-                        //  bottom half of the month and should stay accordingly.\n-                        if (offset >= 15) {\n-                            offset -= 15;\n-                        }\n-                        //Record whether we're in the top or bottom half of that range\n-                        roundUp = offset > 7;\n-                        offsetSet = true;\n-                    }\n-                    break;\n-                case Calendar.AM_PM:\n-                    if (fields[i][0] == Calendar.HOUR_OF_DAY) {\n-                        //If we're going to drop the HOUR field's value,\n-                        //  we want to do this our own way.\n-                        offset = val.get(Calendar.HOUR_OF_DAY);\n-                        if (offset >= 12) {\n-                            offset -= 12;\n+            if (found) {\n+                //This is our field... we stop looping\n+                if (round && roundUp) {\n+                    if (field == DateUtils.SEMI_MONTH) {\n+                        //This is a special case that's hard to generalize\n+                        //If the date is 1, we round up to 16, otherwise\n+                        //  we subtract 15 days and add 1 month\n+                        if (val.get(Calendar.DATE) == 1) {\n+                            val.add(Calendar.DATE, 15);\n+                        } else {\n+                            val.add(Calendar.DATE, -15);\n+                            val.add(Calendar.MONTH, 1);\n                         }\n-                        roundUp = offset > 6;\n-                        offsetSet = true;\n+                    } else {\n+                        //We need at add one to this field since the\n+                        //  last number causes us to round up\n+                        val.add(field, 1);\n                     }\n-                    break;\n-            }\n-            if (!offsetSet) {\n-                int min = val.getActualMinimum(fields[i][0]);\n-                int max = val.getActualMaximum(fields[i][0]);\n-                //Calculate the offset from the minimum allowed value\n-                offset = val.get(fields[i][0]) - min;\n-                //Set roundUp if this is more than half way between the minimum and maximum\n-                roundUp = offset > ((max - min) / 2);\n-            }\n-            //We need to remove this field\n-            if (offset != 0) {\n-                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+                }\n+                return;\n             }\n         }\n+\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+    }\n \n+    private static int getRoundingValue(int field) {\n+        switch (field) {\n+            case Calendar.SECOND:\n+                return 30;\n+            case Calendar.MINUTE:\n+                return 30;\n+            case Calendar.HOUR_OF_DAY:\n+                return 12;\n+            case Calendar.HOUR:\n+                return 12;\n+            case DateUtils.SEMI_MONTH:\n+                return 15;\n+            default:\n+                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        }\n+    }\n+\n+    private static int getDurationField(int field) {\n+        switch (field) {\n+            case Calendar.SECOND:\n+                return 60;\n+            case Calendar.MINUTE:\n+                return 60;\n+            case Calendar.HOUR_OF_DAY:\n+                return 24;\n+            case Calendar.HOUR:\n+                return 12;\n+            case Calendar.DATE:\n+                return 1;\n+            case Calendar.MONTH:\n+                return 1;\n+            case DateUtils.SEMI_MONTH:\n+                return 1;\n+            default:\n+                throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n+        }\n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}