{
    "patch": "public long adjustOffset(long instant, boolean earlierOrLater) {\n    // evaluate 3 hours before and after to work out if anything is happening\n    long instantBefore = instant - DateTimeConstants.MILLIS_PER_HOUR * 3;\n    long instantAfter = instant + DateTimeConstants.MILLIS_PER_HOUR * 3;\n    \n    long offsetBefore = getOffset(instantBefore);\n    long offsetAfter = getOffset(instantAfter);\n\n    if (offsetBefore == offsetAfter) {\n        return instant;  // not an overlap (less than is a gap, equal is normal case)\n    }\n\n    // determine which transition we are in\n    if (earlierOrLater) {\n        // we want to transition to the later offset\n        if (offsetBefore < offsetAfter) {\n            // we are currently in standard time\n            return instantAfter;\n        } else {\n            // we are currently in daylight savings time\n            return instant;\n        }\n    } else {\n        // we want to transition to the earlier offset\n        if (offsetAfter < offsetBefore) {\n            // we are currently in standard time\n            return instantBefore;\n        } else {\n            // we are currently in daylight savings time\n            return instant;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 74a3802a..04bbbfc2 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -1160,24 +1160,39 @@ public abstract class DateTimeZone implements Serializable {\n      * @param earlierOrLater  false for earlier, true for later\n      * @return the adjusted instant millis\n      */\n-    public long adjustOffset(long instant, boolean earlierOrLater) {\n-        // a bit messy, but will work in all non-pathological cases\n-        \n-        // evaluate 3 hours before and after to work out if anything is happening\n-        long instantBefore = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        long instantAfter = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n-        if (instantBefore == instantAfter) {\n-            return instant;  // not an overlap (less than is a gap, equal is normal case)\n+public long adjustOffset(long instant, boolean earlierOrLater) {\n+    // evaluate 3 hours before and after to work out if anything is happening\n+    long instantBefore = instant - DateTimeConstants.MILLIS_PER_HOUR * 3;\n+    long instantAfter = instant + DateTimeConstants.MILLIS_PER_HOUR * 3;\n+    \n+    long offsetBefore = getOffset(instantBefore);\n+    long offsetAfter = getOffset(instantAfter);\n+\n+    if (offsetBefore == offsetAfter) {\n+        return instant;  // not an overlap (less than is a gap, equal is normal case)\n+    }\n+\n+    // determine which transition we are in\n+    if (earlierOrLater) {\n+        // we want to transition to the later offset\n+        if (offsetBefore < offsetAfter) {\n+            // we are currently in standard time\n+            return instantAfter;\n+        } else {\n+            // we are currently in daylight savings time\n+            return instant;\n+        }\n+    } else {\n+        // we want to transition to the earlier offset\n+        if (offsetAfter < offsetBefore) {\n+            // we are currently in standard time\n+            return instantBefore;\n+        } else {\n+            // we are currently in daylight savings time\n+            return instant;\n         }\n-        \n-        // work out range of instants that have duplicate local times\n-        long local = convertUTCToLocal(instant);\n-        return convertLocalToUTC(local, false, earlierOrLater ? instantAfter : instantBefore);\n-        \n-        // calculate result\n-          // currently in later offset\n-          // currently in earlier offset\n     }\n+}\n //    System.out.println(new DateTime(transitionStart, DateTimeZone.UTC) + \" \" + new DateTime(transitionStart, this));\n \n     //-----------------------------------------------------------------------",
    "result_reason": "junit.framework.AssertionFailedError: expected same:<2007-10-28T03:15:00.000+01:00> was not:<2007-10-28T01:15:00.000+02:00>",
    "test_result": "FAIL"
}