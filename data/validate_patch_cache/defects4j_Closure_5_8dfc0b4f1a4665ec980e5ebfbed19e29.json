{
    "patch": "          if (parent.isGetProp()) {\n            Preconditions.checkState(parent.getFirstChild() == name);\n            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n              return false;\n            }\n\n            // If this accessor is applied to an extern, don't inline.\n            if (!parent.getLastChild().isString() &&\n                NodeUtil.isPropertyTest(compiler, parent)) {\n              return false;\n            }\n\n            String propName = parent.getLastChild().getString();\n            if (!validProperties.contains(propName)) {\n              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n                validProperties.add(propName);\n              } else {\n                return false;\n              }\n            }\n            continue;\n          }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..54e977f4 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,28 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+          if (parent.isGetProp()) {\n+            Preconditions.checkState(parent.getFirstChild() == name);\n+            if (gramps.isCall() && gramps.getFirstChild() == parent) {\n+              return false;\n+            }\n+\n+            // If this accessor is applied to an extern, don't inline.\n+            if (!parent.getLastChild().isString() &&\n+                NodeUtil.isPropertyTest(compiler, parent)) {\n+              return false;\n+            }\n+\n+            String propName = parent.getLastChild().getString();\n+            if (!validProperties.contains(propName)) {\n+              if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+                validProperties.add(propName);\n+              } else {\n+                return false;\n+              }\n+            }\n+            continue;\n+          }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}