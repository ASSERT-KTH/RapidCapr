{
    "patch": "JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\nif (resolvedTypeOfThis == null) {\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n} else if (resolvedTypeOfThis.isUnionType()) {\n  Set<JSType> types = resolvedTypeOfThis.toMaybeUnionType().getAlternates();\n  boolean hasObjectType = false;\n  for (JSType type : types) {\n    if (type instanceof ObjectType) {\n      hasObjectType = true;\n      typeOfThis = (ObjectType) type;\n      break;\n    }\n  }\n  if (!hasObjectType) {\n    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  }\n} else if (resolvedTypeOfThis instanceof ObjectType) {\n  typeOfThis = (ObjectType) resolvedTypeOfThis;\n} else {\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..6fe7dd3b 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,27 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+if (resolvedTypeOfThis == null) {\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+} else if (resolvedTypeOfThis.isUnionType()) {\n+  Set<JSType> types = resolvedTypeOfThis.toMaybeUnionType().getAlternates();\n+  boolean hasObjectType = false;\n+  for (JSType type : types) {\n+    if (type instanceof ObjectType) {\n+      hasObjectType = true;\n+      typeOfThis = (ObjectType) type;\n+      break;\n+    }\n+  }\n+  if (!hasObjectType) {\n+    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+} else if (resolvedTypeOfThis instanceof ObjectType) {\n+  typeOfThis = (ObjectType) resolvedTypeOfThis;\n+} else {\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}