{
    "patch": "            Optional<MockCandidate> candidate = mockCandidateFilter.findBestMatch(mocks, field);\n            if (candidate.isPresent()) {\n                try {\n                    candidate.get().thenInjectInto(fieldInstance);\n                } catch (IllegalAccessException e) {\n                    throw new IllegalStateException(e.getMessage());\n                } catch (InvocationTargetException e) {\n                    throw new IllegalStateException(e.getCause().getMessage());\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..0283b91b9 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,16 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+            Optional<MockCandidate> candidate = mockCandidateFilter.findBestMatch(mocks, field);\n+            if (candidate.isPresent()) {\n+                try {\n+                    candidate.get().thenInjectInto(fieldInstance);\n+                } catch (IllegalAccessException e) {\n+                    throw new IllegalStateException(e.getMessage());\n+                } catch (InvocationTargetException e) {\n+                    throw new IllegalStateException(e.getCause().getMessage());\n+                }\n+            }\n         }\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}