{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n  if (n.getType() == Token.EMPTY) {\n    return true;\n  }\n  if (n.getType() == Token.LABEL) {\n    Label label = n.getFirstChild().getLabeledStatement();\n\n    if (label != null) {\n      Node statement = label.getStatement();\n\n      if (statement.getType() == Token.FUNCTION ||\n          statement.getType() == Token.DO) {\n        Node block = statement.getLastChild();\n\n        if (block != null) {\n          if (block.getType() == Token.BLOCK) {\n            Node firstChild = block.getFirstChild();\n            return firstChild != null && firstChild == block.getLastChild();\n          } else {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..29b598ac 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,36 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+  if (n.getType() == Token.EMPTY) {\n+    return true;\n   }\n+  if (n.getType() == Token.LABEL) {\n+    Label label = n.getFirstChild().getLabeledStatement();\n+\n+    if (label != null) {\n+      Node statement = label.getStatement();\n+\n+      if (statement.getType() == Token.FUNCTION ||\n+          statement.getType() == Token.DO) {\n+        Node block = statement.getLastChild();\n+\n+        if (block != null) {\n+          if (block.getType() == Token.BLOCK) {\n+            Node firstChild = block.getFirstChild();\n+            return firstChild != null && firstChild == block.getLastChild();\n+          } else {\n+            return true;\n+          }\n+        }\n+      }\n+    }\n+\n+    return false;\n+  }\n+\n+  return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}