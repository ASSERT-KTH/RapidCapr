{
    "patch": "  void addNumber(double x) {\n    char prev = getLastChar();\n    boolean negativeZero = isNegativeZero(x);\n    boolean hasDotOrE = prev == '.' || prev == 'e' || prev == 'E';\n\n    if (x < 0 && prev != '(' && !hasDotOrE && !negativeZero) {\n      out.append('-');\n      prev = '-';\n    }\n    if (negativeZero) {\n      if (prev == '+' || prev == '-') {\n        out.append(' ');\n      }\n      out.append(\"-0.0\");\n      return;\n    }\n\n    long longValue = (long) x;\n    if ((double) longValue == x) {\n      if (prev == '.' || prev == 'e' || prev == 'E') {\n        out.append(' ');\n      }\n      out.append(Long.toString(longValue));\n    } else {\n      out.append(Double.toString(x));\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeConsumer.java b/src/com/google/javascript/jscomp/CodeConsumer.java\nindex 4381487c..65d57387 100644\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n@@ -236,13 +236,38 @@ abstract class CodeConsumer {\n       maybeCutLine();\n     }\n   }\n-\n   void addNumber(double x) {\n     // This is not pretty printing. This is to prevent misparsing of x- -4 as\n     // x--4 (which is a syntax error).\n     char prev = getLastChar();\n     boolean negativeZero = isNegativeZero(x);\n-    if (x < 0 && prev == '-') {\n+  void addNumber(double x) {\n+    char prev = getLastChar();\n+    boolean negativeZero = isNegativeZero(x);\n+    boolean hasDotOrE = prev == '.' || prev == 'e' || prev == 'E';\n+\n+    if (x < 0 && prev != '(' && !hasDotOrE && !negativeZero) {\n+      out.append('-');\n+      prev = '-';\n+    }\n+    if (negativeZero) {\n+      if (prev == '+' || prev == '-') {\n+        out.append(' ');\n+      }\n+      out.append(\"-0.0\");\n+      return;\n+    }\n+\n+    long longValue = (long) x;\n+    if ((double) longValue == x) {\n+      if (prev == '.' || prev == 'e' || prev == 'E') {\n+        out.append(' ');\n+      }\n+      out.append(Long.toString(longValue));\n+    } else {\n+      out.append(Double.toString(x));\n+    }\n+  }\n       add(\" \");\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}