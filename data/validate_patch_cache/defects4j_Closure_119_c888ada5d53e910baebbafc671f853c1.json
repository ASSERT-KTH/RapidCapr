{
    "patch": "          case Token.NAME:\n            // This may be a variable get or set.\n            if (parent != null) {\n              switch (parent.getType()) {\n                case Token.VAR:\n                  isSet = true;\n                  type = getValueType(n.getFirstChild());\n                  break;\n                case Token.ASSIGN:\n                  if (parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = getValueType(n.getNext());\n                  }\n                  break;\n                case Token.GETPROP:\n                  return;\n                case Token.FUNCTION:\n                  Node gramps2 = parent.getParent();\n                  if (gramps2 == null || NodeUtil.isFunctionExpression(parent)) {\n                    return;\n                  }\n                  isSet = true;\n                  type = Name.Type.FUNCTION;\n                  break;\n                case Token.INC:\n                case Token.DEC:\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  break;\n                default:\n                  if (NodeUtil.isAssignmentOp(parent) &&\n                      parent.getFirstChild() == n) {\n                    isSet = true;\n                    type = Name.Type.OTHER;\n                  } else if (parent.getType() == Token.LABEL && grandparent != null &&\n                             grandparent.getType() == Token.BREAK &&\n                             parent.getFirstChild() == n) {\n                    // case:\n                    // label: while (...) { break label; }\n                    type = Name.Type.OTHER;\n                  }\n              }\n            }\n            name = n.getString();\n            break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..ef9178f4 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,51 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+          case Token.NAME:\n+            // This may be a variable get or set.\n+            if (parent != null) {\n+              switch (parent.getType()) {\n+                case Token.VAR:\n+                  isSet = true;\n+                  type = getValueType(n.getFirstChild());\n+                  break;\n+                case Token.ASSIGN:\n+                  if (parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = getValueType(n.getNext());\n+                  }\n+                  break;\n+                case Token.GETPROP:\n+                  return;\n+                case Token.FUNCTION:\n+                  Node gramps2 = parent.getParent();\n+                  if (gramps2 == null || NodeUtil.isFunctionExpression(parent)) {\n+                    return;\n+                  }\n+                  isSet = true;\n+                  type = Name.Type.FUNCTION;\n+                  break;\n+                case Token.INC:\n+                case Token.DEC:\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  break;\n+                default:\n+                  if (NodeUtil.isAssignmentOp(parent) &&\n+                      parent.getFirstChild() == n) {\n+                    isSet = true;\n+                    type = Name.Type.OTHER;\n+                  } else if (parent.getType() == Token.LABEL && grandparent != null &&\n+                             grandparent.getType() == Token.BREAK &&\n+                             parent.getFirstChild() == n) {\n+                    // case:\n+                    // label: while (...) { break label; }\n+                    type = Name.Type.OTHER;\n+                  }\n+              }\n+            }\n+            name = n.getString();\n+            break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}