{
    "patch": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape,\n                         String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb = new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        switch (c) {\n            case '\\n': sb.append(\"\\\\n\"); break;\n            case '\\r': sb.append(\"\\\\r\"); break;\n            case '\\t': sb.append(\"\\\\t\"); break;\n            case '\\0': sb.append(\"\\\\0\"); break;\n            case '\\\\': sb.append(backslashEscape); break;\n            case '\\\"': sb.append(doublequoteEscape); break;\n            case '\\'': sb.append(singlequoteEscape); break;\n            case '>':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (i >= 2 &&\n                     ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n                      (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n                     sb.append(\"\\\\>\");\n                } else if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                     sb.append(\"<\\\\\");\n                } else {\n                     sb.append(c);\n                }\n                break;\n            case '<':\n                final String END_SCRIPT = \"/script\";\n                final String START_COMMENT = \"!--\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"<\\\\\");\n                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n                     sb.append(\"<\\\\\");\n                } else {\n                     sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder != null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c > 0x1f && c < 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 6117a89b..ee13800c 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1012,7 +1012,65 @@ class CodeGenerator {\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\0\"); break;\n+static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape,\n+                         String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n+    StringBuilder sb = new StringBuilder(s.length() + 2);\n+    sb.append(quote);\n+    for (int i = 0; i < s.length(); i++) {\n+        char c = s.charAt(i);\n+        switch (c) {\n+            case '\\n': sb.append(\"\\\\n\"); break;\n+            case '\\r': sb.append(\"\\\\r\"); break;\n+            case '\\t': sb.append(\"\\\\t\"); break;\n+            case '\\0': sb.append(\"\\\\0\"); break;\n+            case '\\\\': sb.append(backslashEscape); break;\n+            case '\\\"': sb.append(doublequoteEscape); break;\n+            case '\\'': sb.append(singlequoteEscape); break;\n+            case '>':\n+                final String END_SCRIPT = \"/script\";\n+                final String START_COMMENT = \"!--\";\n+                if (i >= 2 &&\n+                     ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n+                      (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n+                     sb.append(\"\\\\>\");\n+                } else if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n+                     sb.append(\"<\\\\\");\n+                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n+                     sb.append(\"<\\\\\");\n+                } else {\n+                     sb.append(c);\n+                }\n+                break;\n+            case '<':\n+                final String END_SCRIPT = \"/script\";\n+                final String START_COMMENT = \"!--\";\n+                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n+                     sb.append(\"<\\\\\");\n+                } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {\n+                     sb.append(\"<\\\\\");\n+                } else {\n+                     sb.append(c);\n+                }\n+                break;\n+            default:\n+                if (outputCharsetEncoder != null) {\n+                    if (outputCharsetEncoder.canEncode(c)) {\n+                        sb.append(c);\n+                    } else {\n+                        appendHexJavaScriptRepresentation(sb, c);\n+                    }\n+                } else {\n+                    if (c > 0x1f && c < 0x7f) {\n+                        sb.append(c);\n+                    } else {\n+                        appendHexJavaScriptRepresentation(sb, c);\n+                    }\n+                }\n+        }\n+    }\n+    sb.append(quote);\n+    return sb.toString();\n+}\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;",
    "result_reason": "error: case, default, or '}' expected",
    "test_result": "ERROR"
}