{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n    if (n != null && NodeUtil.isFunctionExpression(n)) {\n        List<Node> params = n.getSecondChild().children();\n        for (Node param : params) {\n            if (!NodeUtil.isName(param)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..153dfa3d 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,9 +112,19 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+    if (n != null && NodeUtil.isFunctionExpression(n)) {\n+        List<Node> params = n.getSecondChild().children();\n+        for (Node param : params) {\n+            if (!NodeUtil.isName(param)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+    return false;\n+}\n   }\n \n   /**",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}