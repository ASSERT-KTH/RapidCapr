{
    "patch": "private void declareArguments(Node functionNode) {\n  Node astParameters = functionNode.getFirstChild().getNext();\n  Node body = astParameters.getNext();\n  FunctionType functionType = (FunctionType) functionNode.getJSType();\n  if (functionType != null) {\n    Node jsDocParameters = functionType.getParametersNode();\n    if (jsDocParameters != null) {\n      Node jsDocParameter = jsDocParameters.getFirstChild();\n      for (Node astParameter : astParameters.children()) {\n        if (!alreadyDefined(astParameter, functionNode)) {\n          if (jsDocParameter != null) {\n            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), jsDocParameter.hasMoreThanOneChild());\n            jsDocParameter = jsDocParameter.getNext();\n          } else {\n            defineSlot(astParameter, functionNode, null, true);\n          }\n        }\n      }\n    }\n  }\n}\n\nprivate boolean alreadyDefined(Node astParameter, Node functionNode) {\n  Node scopeNode = NodeUtil.getEnclosingScope(functionNode);\n  Var existingVar = scopeNode.getClosestHoistScope().getVar(astParameter.getString());\n  if (existingVar != null) {\n    return true;\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 210bb66e..c0177006 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1742,7 +1742,36 @@ final class TypedScopeCreator implements ScopeCreator {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), true);\n+private void declareArguments(Node functionNode) {\n+  Node astParameters = functionNode.getFirstChild().getNext();\n+  Node body = astParameters.getNext();\n+  FunctionType functionType = (FunctionType) functionNode.getJSType();\n+  if (functionType != null) {\n+    Node jsDocParameters = functionType.getParametersNode();\n+    if (jsDocParameters != null) {\n+      Node jsDocParameter = jsDocParameters.getFirstChild();\n+      for (Node astParameter : astParameters.children()) {\n+        if (!alreadyDefined(astParameter, functionNode)) {\n+          if (jsDocParameter != null) {\n+            defineSlot(astParameter, functionNode, jsDocParameter.getJSType(), jsDocParameter.hasMoreThanOneChild());\n+            jsDocParameter = jsDocParameter.getNext();\n+          } else {\n+            defineSlot(astParameter, functionNode, null, true);\n+          }\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+private boolean alreadyDefined(Node astParameter, Node functionNode) {\n+  Node scopeNode = NodeUtil.getEnclosingScope(functionNode);\n+  Var existingVar = scopeNode.getClosestHoistScope().getVar(astParameter.getString());\n+  if (existingVar != null) {\n+    return true;\n+  }\n+  return false;\n+}\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}