{
    "patch": "Object[] rawArguments = invocation.getRawArguments();\nfor (int position = 0; position < matchers.size() && position < rawArguments.length; position++) {\n    Matcher m = matchers.get(position);\n    Object arg = rawArguments[position];\n    if (m instanceof CapturesArguments) {\n        if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n            if (arg != null && arg.getClass().isArray()) {\n                int arrayLength = Array.getLength(arg);\n                for (int i = 0; i < arrayLength; i++) {\n                    ((CapturesArguments) m).captureFrom(Array.get(arg, i));\n                }\n            } else {\n                ((CapturesArguments) m).captureFrom(arg);\n            }\n        } else {\n            ((CapturesArguments) m).captureFrom(arg);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..3b2199279 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,25 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+Object[] rawArguments = invocation.getRawArguments();\n+for (int position = 0; position < matchers.size() && position < rawArguments.length; position++) {\n+    Matcher m = matchers.get(position);\n+    Object arg = rawArguments[position];\n+    if (m instanceof CapturesArguments) {\n+        if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+            if (arg != null && arg.getClass().isArray()) {\n+                int arrayLength = Array.getLength(arg);\n+                for (int i = 0; i < arrayLength; i++) {\n+                    ((CapturesArguments) m).captureFrom(Array.get(arg, i));\n+                }\n+            } else {\n+                ((CapturesArguments) m).captureFrom(arg);\n+            }\n+        } else {\n+            ((CapturesArguments) m).captureFrom(arg);\n+        }\n+    }\n+}\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}