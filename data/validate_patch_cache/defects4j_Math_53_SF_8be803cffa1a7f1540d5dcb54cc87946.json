{
    "patch": "    public Complex add(Complex rhs)\n        throws NullArgumentException {\n        MathUtils.checkNotNull(rhs);\n        double newReal, newImaginary;\n        if (Double.isNaN(real) || Double.isNaN(rhs.getReal())) {\n            newReal = Double.NaN;\n        } else {\n            newReal = real + rhs.getReal();\n        }\n        if (Double.isNaN(imaginary) || Double.isNaN(rhs.getImaginary())) {\n            newImaginary = Double.NaN;\n        } else {\n            newImaginary = imaginary + rhs.getImaginary();\n        }\n        return createComplex(newReal, newImaginary);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..ea7af71d4 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,8 +150,18 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+        double newReal, newImaginary;\n+        if (Double.isNaN(real) || Double.isNaN(rhs.getReal())) {\n+            newReal = Double.NaN;\n+        } else {\n+            newReal = real + rhs.getReal();\n+        }\n+        if (Double.isNaN(imaginary) || Double.isNaN(rhs.getImaginary())) {\n+            newImaginary = Double.NaN;\n+        } else {\n+            newImaginary = imaginary + rhs.getImaginary();\n+        }\n+        return createComplex(newReal, newImaginary);\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}