{
    "patch": "public static Locale toLocale(String input) {\n    if (input == null) {\n        return null;\n    }\n    String rawLanguage = \"\";\n    String rawCountry = \"\";\n    String rawVariant = \"\";\n    int indexOfUnderscore = input.indexOf('_');\n    int indexOfDash = input.indexOf('-');\n    if (indexOfUnderscore == -1 || (indexOfDash != -1 && indexOfDash < indexOfUnderscore)) {\n        indexOfUnderscore = indexOfDash;\n    }\n    if (indexOfUnderscore == -1) {\n        rawLanguage = input;\n    } else {\n        rawLanguage = input.substring(0, indexOfUnderscore);\n        rawVariant = input.substring(indexOfUnderscore + 1);\n        if (rawVariant.length() >= 5 && Character.isDigit(rawVariant.charAt(0)) && Character.isDigit(rawVariant.charAt(1)) && rawVariant.charAt(2) == '-' && \n            rawVariant.length() >= 7 && ((rawVariant.charAt(3) >= 'a' && rawVariant.charAt(3) <= 'z') || (rawVariant.charAt(3) >= 'A' && rawVariant.charAt(3) <= 'Z')) && \n            ((rawVariant.charAt(4) >= 'a' && rawVariant.charAt(4) <= 'z') || (rawVariant.charAt(4) >= 'A' && rawVariant.charAt(4) <= 'Z'))) {\n            rawCountry = rawVariant.substring(0, 3);\n            rawVariant = rawVariant.substring(4);\n        }\n    }\n    if (rawLanguage.length() == 2 && (rawCountry.length() == 0 || rawCountry.length() == 2 || (rawVariant.length() > 0 && rawCountry.length() == 3))) {\n        if (rawVariant.length() > 0 && (!isAlpha(rawVariant.charAt(0)) || !isAlphaNumeric(rawVariant))) {\n            throw new IllegalArgumentException(\"Invalid locale format: \" + input);\n        }\n        return new Locale(rawLanguage, rawCountry, rawVariant);\n    } else if (rawLanguage.length() == 0 && rawCountry.length() == 0 && rawVariant.length() == 0) {\n        return new Locale(\"\", \"\");\n    } else {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + input);\n    }\n}\n\nprivate static boolean isAlpha(char ch) {\n    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n}\n\nprivate static boolean isAlphaNumeric(String input) {\n    for (char ch : input.toCharArray()) {\n        if (!isAlpha(ch) && !Character.isDigit(ch) && ch != '_' && ch != '-') {\n            return false;\n        }\n    }\n    return true;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/LocaleUtils.java b/src/java/org/apache/commons/lang/LocaleUtils.java\nindex 139d9a7f..0d253afd 100644\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n@@ -91,40 +91,54 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int len = str.length();\n-        if (len != 2 && len != 5 && len < 7) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n+    String rawLanguage = \"\";\n+    String rawCountry = \"\";\n+    String rawVariant = \"\";\n+    int indexOfUnderscore = input.indexOf('_');\n+    int indexOfDash = input.indexOf('-');\n+    if (indexOfUnderscore == -1 || (indexOfDash != -1 && indexOfDash < indexOfUnderscore)) {\n+        indexOfUnderscore = indexOfDash;\n+    }\n+    if (indexOfUnderscore == -1) {\n+        rawLanguage = input;\n+    } else {\n+        rawLanguage = input.substring(0, indexOfUnderscore);\n+        rawVariant = input.substring(indexOfUnderscore + 1);\n+        if (rawVariant.length() >= 5 && Character.isDigit(rawVariant.charAt(0)) && Character.isDigit(rawVariant.charAt(1)) && rawVariant.charAt(2) == '-' && \n+            rawVariant.length() >= 7 && ((rawVariant.charAt(3) >= 'a' && rawVariant.charAt(3) <= 'z') || (rawVariant.charAt(3) >= 'A' && rawVariant.charAt(3) <= 'Z')) && \n+            ((rawVariant.charAt(4) >= 'a' && rawVariant.charAt(4) <= 'z') || (rawVariant.charAt(4) >= 'A' && rawVariant.charAt(4) <= 'Z'))) {\n+            rawCountry = rawVariant.substring(0, 3);\n+            rawVariant = rawVariant.substring(4);\n         }\n-        char ch0 = str.charAt(0);\n-        char ch1 = str.charAt(1);\n-        if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    if (rawLanguage.length() == 2 && (rawCountry.length() == 0 || rawCountry.length() == 2 || (rawVariant.length() > 0 && rawCountry.length() == 3))) {\n+        if (rawVariant.length() > 0 && (!isAlpha(rawVariant.charAt(0)) || !isAlphaNumeric(rawVariant))) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + input);\n         }\n-        if (len == 2) {\n-            return new Locale(str, \"\");\n-        } else {\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            char ch3 = str.charAt(3);\n-            char ch4 = str.charAt(4);\n-            if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            } else {\n-                if (str.charAt(5) != '_') {\n-                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-                }\n-                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n-            }\n+        return new Locale(rawLanguage, rawCountry, rawVariant);\n+    } else if (rawLanguage.length() == 0 && rawCountry.length() == 0 && rawVariant.length() == 0) {\n+        return new Locale(\"\", \"\");\n+    } else {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + input);\n+    }\n+}\n+\n+private static boolean isAlpha(char ch) {\n+    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\n+}\n+\n+private static boolean isAlphaNumeric(String input) {\n+    for (char ch : input.toCharArray()) {\n+        if (!isAlpha(ch) && !Character.isDigit(ch) && ch != '_' && ch != '-') {\n+            return false;\n         }\n     }\n+    return true;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: for-each loops are not supported in -source 1.3",
    "test_result": "ERROR"
}