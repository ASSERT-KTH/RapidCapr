{
    "patch": "2. ```\n          && charno < sourceExcerpt.length()) {\n```\n3. ```\n          && charno >= 0 && charno < sourceExcerpt.length()) {\n```\nEither of these three lines could be a possible replacement at the infill location, depending on the intended behavior of the function.",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..f6041f60 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,13 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+2. ```\n+          && charno < sourceExcerpt.length()) {\n+```\n+3. ```\n+          && charno >= 0 && charno < sourceExcerpt.length()) {\n+```\n+Either of these three lines could be a possible replacement at the infill location, depending on the intended behavior of the function.\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}