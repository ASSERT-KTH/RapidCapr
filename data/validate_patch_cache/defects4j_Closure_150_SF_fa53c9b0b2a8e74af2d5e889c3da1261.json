{
    "patch": "public class TypedScopeCreator extends AbstractScopedCallback\n    implements ScopeCreator, Supplier<NodeTraversal.Callback>,\n    ScopedCallback {\n\n  // ...\n\n  @Override\n  public void visit(NodeTraversal t, Node n, Node parent) {\n    if (n == scope.getRootNode()) return;\n\n    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n      handleFunctionInputs(parent);\n      return;\n    }\n\n    attachLiteralTypes(n);\n    switch (n.getType()) {\n      case Token.FUNCTION:\n        if (parent.getType() == Token.NAME) {\n          return;\n        }\n        defineDeclaredFunction(n, parent);\n        break;\n      case Token.CATCH:\n        defineCatch(n, parent);\n        break;\n      case Token.VAR:\n        defineVar(n, parent);\n        break;\n    }\n  }\n\n  interface AbstractScopeBuilder {\n    void addDeclaredName(String name, JSType type, Node node);\n    void addLocal(String name, JSType type, boolean isConstant, Node node, boolean isFromExterns);\n    void addCatch(String name, JSType type);\n    void addExtern(String name, JSType type, Node node);\n    void addType(String name, JSType type, Node node);\n    void addTypeAlias(String name, JSType type);\n    void addConstant(String name, Node value, JSType declType, JSDocInfo info);\n  }\n\n  interface LocalScopeBuilder extends AbstractScopeBuilder {\n    @Override\n    void addDeclaredName(String name, JSType type, Node node);\n  }\n\n  class BaseLocalScopeBuilder implements LocalScopeBuilder {\n\n    // ...\n\n    @Override\n    public void addDeclaredName(String name, JSType type, Node node) {\n      checkState(!goingGlobal, \"Should not be defining %s until setBuilder null\", name);\n      checkNotNull(type, \"Null type for %s\", name);\n      ScopedName scopedName = new ScopedName(name);\n      Slot slot = slots.get(scopedName);\n      if (slot == null) {\n        slot = new Slot();\n        slots.put(scopedName, slot);\n        // First definition wins.\n        if (equality != null) {\n          equality.put(slot, slot);\n        }\n      } else if (!areDeclarationNodesEqual(slot.getDeclaration(), node)) {\n        // Redeclaration of same name in same scope.\n        // Only report an error for the second declaration.\n        t.report(node, NAME_REDEFINITION, name);\n        return;\n      }\n      slot.setDeclaration(node);\n      slot.setType(type);\n      slot.setLocal(true);\n    }\n\n    // ...\n  }\n\n  // ...\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..d6204a2f 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,31 +1440,87 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+public class TypedScopeCreator extends AbstractScopedCallback\n+    implements ScopeCreator, Supplier<NodeTraversal.Callback>,\n+    ScopedCallback {\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n-        return;\n-      }\n+  // ...\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n == scope.getRootNode()) return;\n+\n+    if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+      handleFunctionInputs(parent);\n+      return;\n+    }\n+\n+    attachLiteralTypes(n);\n+    switch (n.getType()) {\n+      case Token.FUNCTION:\n+        if (parent.getType() == Token.NAME) {\n+          return;\n+        }\n+        defineDeclaredFunction(n, parent);\n+        break;\n+      case Token.CATCH:\n+        defineCatch(n, parent);\n+        break;\n+      case Token.VAR:\n+        defineVar(n, parent);\n+        break;\n+    }\n+  }\n+\n+  interface AbstractScopeBuilder {\n+    void addDeclaredName(String name, JSType type, Node node);\n+    void addLocal(String name, JSType type, boolean isConstant, Node node, boolean isFromExterns);\n+    void addCatch(String name, JSType type);\n+    void addExtern(String name, JSType type, Node node);\n+    void addType(String name, JSType type, Node node);\n+    void addTypeAlias(String name, JSType type);\n+    void addConstant(String name, Node value, JSType declType, JSDocInfo info);\n+  }\n+\n+  interface LocalScopeBuilder extends AbstractScopeBuilder {\n+    @Override\n+    void addDeclaredName(String name, JSType type, Node node);\n+  }\n+\n+  class BaseLocalScopeBuilder implements LocalScopeBuilder {\n+\n+    // ...\n+\n+    @Override\n+    public void addDeclaredName(String name, JSType type, Node node) {\n+      checkState(!goingGlobal, \"Should not be defining %s until setBuilder null\", name);\n+      checkNotNull(type, \"Null type for %s\", name);\n+      ScopedName scopedName = new ScopedName(name);\n+      Slot slot = slots.get(scopedName);\n+      if (slot == null) {\n+        slot = new Slot();\n+        slots.put(scopedName, slot);\n+        // First definition wins.\n+        if (equality != null) {\n+          equality.put(slot, slot);\n+        }\n+      } else if (!areDeclarationNodesEqual(slot.getDeclaration(), node)) {\n+        // Redeclaration of same name in same scope.\n+        // Only report an error for the second declaration.\n+        t.report(node, NAME_REDEFINITION, name);\n+        return;\n       }\n+      slot.setDeclaration(node);\n+      slot.setType(type);\n+      slot.setLocal(true);\n     }\n \n+    // ...\n+  }\n+\n+  // ...\n+}\n+\n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {\n       // Handle bleeding functions.",
    "result_reason": "error: class TypedScopeCreator is already defined in package com.google.javascript.jscomp",
    "test_result": "ERROR"
}