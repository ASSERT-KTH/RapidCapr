{
    "patch": "        case Token.CATCH:\n          Node exception = n.getFirstChild();\n          Node exceptionName = exception.getFirstChild();\n\n          if (!exceptionName.isName()) {\n            throw new IllegalStateException(\"Expected NAME node for catch parameter.\");\n          }\n\n          String name = exceptionName.getString();\n          Var var = scope.getVar(name);\n          if (var == null) {\n            String msg = \"e is never defined\";\n            JSError err = JSError.make(\n                JSErrorType.UNDEFINED_NAME, exceptionName,\n                msg);\n            compiler.report(err);\n            return;\n          }\n\n          if (isGlobalScope(scope)) {\n            handleSetFromGlobal(module, scope, n, null, name, /* isPropAssign */false,\n                Name.Type.OTHER);\n          } else {\n            handleSetFromLocal(module, scope, n, null, name);\n          }\n          break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..37fa3039 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,32 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+        case Token.CATCH:\n+          Node exception = n.getFirstChild();\n+          Node exceptionName = exception.getFirstChild();\n+\n+          if (!exceptionName.isName()) {\n+            throw new IllegalStateException(\"Expected NAME node for catch parameter.\");\n+          }\n+\n+          String name = exceptionName.getString();\n+          Var var = scope.getVar(name);\n+          if (var == null) {\n+            String msg = \"e is never defined\";\n+            JSError err = JSError.make(\n+                JSErrorType.UNDEFINED_NAME, exceptionName,\n+                msg);\n+            compiler.report(err);\n+            return;\n+          }\n+\n+          if (isGlobalScope(scope)) {\n+            handleSetFromGlobal(module, scope, n, null, name, /* isPropAssign */false,\n+                Name.Type.OTHER);\n+          } else {\n+            handleSetFromLocal(module, scope, n, null, name);\n+          }\n+          break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable name is already defined in method collect(JSModule,Scope,Node)",
    "test_result": "ERROR"
}