{
    "patch": "        if (val.startsWith(\"-\")) {\n            boolean negative = true;\n            val = val.substring(1);\n            if (val.startsWith(\"-\")) {\n                // this is protection for poorness in java.lang.BigDecimal.\n                // it accepts this as a legal value, but it does not appear \n                // to be in specification of class. OS X Java parses it to \n                // a wrong value.\n                return null;\n            }\n        } else {\n            negative = false;\n        }\n\n        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n            return createInteger(val);\n        }\n\n        String decimalPoint = \".\";\n        int decPos = val.indexOf(decimalPoint);\n\n        if (negative) {\n            val = \"-\" + val;\n        }\n\n        if (decPos != -1 && val.charAt(val.length() - 1) != 'f') {\n            // there's a decimal point, but not an 'f' -- that means this is a double value\n            if (val.contains(\"e\") || val.contains(\"E\")) {\n                return createBigDecimal(val);\n            } else {\n                try {\n                    Double d = new Double(val);\n                    if (Double.isInfinite(d) || (d.doubleValue() == 0.0D && !containsNonZero(val))) {\n                        // If it can't be stored in a double but can be stored in a float,\n                        // then try to store it in a float instead. Don't do this for zero,\n                        // though; if the value is zero then stick with a double even if it\n                        // can be stored in a float. This is done to ensure that Numbers\n                        // created from hex floating point values always have the best\n                        // possible precision.\n                        return createBigDecimal(val);\n                    } else {\n                        return d;\n                    }\n                } catch (NumberFormatException nfe) {\n                    // empty catch\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/NumberUtils.java b/src/java/org/apache/commons/lang/NumberUtils.java\nindex 18a05efe..cd720136 100644\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n@@ -142,6 +142,54 @@ public final class NumberUtils {\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.startsWith(\"-\")) {\n+            boolean negative = true;\n+            val = val.substring(1);\n+            if (val.startsWith(\"-\")) {\n+                // this is protection for poorness in java.lang.BigDecimal.\n+                // it accepts this as a legal value, but it does not appear \n+                // to be in specification of class. OS X Java parses it to \n+                // a wrong value.\n+                return null;\n+            }\n+        } else {\n+            negative = false;\n+        }\n+\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }\n+\n+        String decimalPoint = \".\";\n+        int decPos = val.indexOf(decimalPoint);\n+\n+        if (negative) {\n+            val = \"-\" + val;\n+        }\n+\n+        if (decPos != -1 && val.charAt(val.length() - 1) != 'f') {\n+            // there's a decimal point, but not an 'f' -- that means this is a double value\n+            if (val.contains(\"e\") || val.contains(\"E\")) {\n+                return createBigDecimal(val);\n+            } else {\n+                try {\n+                    Double d = new Double(val);\n+                    if (Double.isInfinite(d) || (d.doubleValue() == 0.0D && !containsNonZero(val))) {\n+                        // If it can't be stored in a double but can be stored in a float,\n+                        // then try to store it in a float instead. Don't do this for zero,\n+                        // though; if the value is zero then stick with a double even if it\n+                        // can be stored in a float. This is done to ensure that Numbers\n+                        // created from hex floating point values always have the best\n+                        // possible precision.\n+                        return createBigDecimal(val);\n+                    } else {\n+                        return d;\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                    // empty catch\n+                }\n+            }\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}