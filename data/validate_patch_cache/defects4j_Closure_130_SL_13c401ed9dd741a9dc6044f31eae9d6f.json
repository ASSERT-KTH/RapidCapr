{
    "patch": "if (name.type == Name.Type.OBJECTLIT ||\n          (name.type == Name.Type.VAR && name.initializer != null &&\n            name.initializer.isObjectLit()) ||\n          (name.type == Name.Type.FUNCTION && name.initializer != null &&\n           name.initializer.isFunction())) {\n        if (name.aliasingGets == 0) {\n          workList.addAll(name.props);\n        } else if (name.aliasingGets == 1 && name.localSets == 0) {  // <- new condition\n          // {@code name} meets conditions (b) and (c).\n          // Try to inline its alias.\n          Ref alias = Iterables.getOnlyElement(name.getRefs());\n          if (inlineAliasIfPossible(alias, namespace)) {\n            // Inlining succeeded. The original name is no longer needed.\n            name.removeRef(alias);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..0a975441 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,23 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.type == Name.Type.OBJECTLIT ||\n+          (name.type == Name.Type.VAR && name.initializer != null &&\n+            name.initializer.isObjectLit()) ||\n+          (name.type == Name.Type.FUNCTION && name.initializer != null &&\n+           name.initializer.isFunction())) {\n+        if (name.aliasingGets == 0) {\n+          workList.addAll(name.props);\n+        } else if (name.aliasingGets == 1 && name.localSets == 0) {  // <- new condition\n+          // {@code name} meets conditions (b) and (c).\n+          // Try to inline its alias.\n+          Ref alias = Iterables.getOnlyElement(name.getRefs());\n+          if (inlineAliasIfPossible(alias, namespace)) {\n+            // Inlining succeeded. The original name is no longer needed.\n+            name.removeRef(alias);\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}