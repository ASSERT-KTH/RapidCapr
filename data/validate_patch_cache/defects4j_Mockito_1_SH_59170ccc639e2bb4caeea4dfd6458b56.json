{
    "patch": "        Object[] rawArguments = invocation.getRawArguments();\n        for (int position = 0; position < matchers.size(); position++) {\n            Matcher m = matchers.get(position);\n            if (m instanceof CapturesArguments) {\n                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n                    Object[] varArgs = rawArguments.length > position ? (Object[]) rawArguments[position] : new Object[0];\n                    for (Object varArg : varArgs) {\n                        ((CapturesArguments) m).captureFrom(varArg);\n                    }\n                } else {\n                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..8d03a7d4f 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,20 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+        Object[] rawArguments = invocation.getRawArguments();\n+        for (int position = 0; position < matchers.size(); position++) {\n+            Matcher m = matchers.get(position);\n+            if (m instanceof CapturesArguments) {\n+                if (isVariableArgument(invocation, position) && isVarargMatcher(m)) {\n+                    Object[] varArgs = rawArguments.length > position ? (Object[]) rawArguments[position] : new Object[0];\n+                    for (Object varArg : varArgs) {\n+                        ((CapturesArguments) m).captureFrom(varArg);\n+                    }\n+                } else {\n+                    ((CapturesArguments) m).captureFrom(invocation.getArgumentAt(position, Object.class));\n+                }\n+            }\n+        }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}