{
    "patch": "new RestrictByTypesOfResultVisitor() {\n    @Override\n    protected JSType caseScalar(JSType scalar, Void unusedInput) {\n      return scalar;\n    }\n\n    @Override\n    protected JSType caseTopType(JSType topType) {\n      return topType;\n    }\n\n    @Override\n    protected JSType caseFunctionType(JSType funType, Void unusedInput) {\n      JSType returnType = funType.getReturnType();\n      if (returnType != null) {\n        return returnType.restrictByNotNullOrUndefined();\n      }\n      return JSType.UNKNOWN;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\nindex 1706e345..46dc9056 100644\n--- a/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ClosureReverseAbstractInterpreter.java\n@@ -50,9 +50,26 @@ public class ClosureReverseAbstractInterpreter\n   private final Visitor<JSType> restrictToArrayVisitor =\n       new RestrictByTrueTypeOfResultVisitor() {\n         @Override\n-        protected JSType caseTopType(JSType topType) {\n-          return topType;\n-        }\n+new RestrictByTypesOfResultVisitor() {\n+    @Override\n+    protected JSType caseScalar(JSType scalar, Void unusedInput) {\n+      return scalar;\n+    }\n+\n+    @Override\n+    protected JSType caseTopType(JSType topType) {\n+      return topType;\n+    }\n+\n+    @Override\n+    protected JSType caseFunctionType(JSType funType, Void unusedInput) {\n+      JSType returnType = funType.getReturnType();\n+      if (returnType != null) {\n+        return returnType.restrictByNotNullOrUndefined();\n+      }\n+      return JSType.UNKNOWN;\n+    }\n+}\n \n         @Override\n         public JSType caseObjectType(ObjectType type) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}