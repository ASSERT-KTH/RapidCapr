{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (!objType.isPropertyTypeDeclared(prop)) {\n            JSType typeToInfer = propType.isBottom()? objType.get(prop) :\n                propType.restrictByNotNullOrUndefined().autobox().dereference();\n            objType.defineInferredProperty(prop, typeToInfer, null);\n          }\n        }\n        if (!type.isSubtypeOf(objType)) {\n          warnings.add(JSError.make(n.getSourceFileName(), n.getSourceLineno(),\n                      TypeValidator.INFERRED_FUNCTION_TYPEDEF_MISMATCH,\n                      n.getQualifiedName(), \"'this'\", type.toString(), constraint.toString()));\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..4cc0e837 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1124,16 +1124,19 @@ class TypeInference\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n           if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n+            JSType typeToInfer = propType.isBottom()? objType.get(prop) :\n+                propType.restrictByNotNullOrUndefined().autobox().dereference();\n             objType.defineInferredProperty(prop, typeToInfer, null);\n           }\n         }\n+        if (!type.isSubtypeOf(objType)) {\n+          warnings.add(JSError.make(n.getSourceFileName(), n.getSourceLineno(),\n+                      TypeValidator.INFERRED_FUNCTION_TYPEDEF_MISMATCH,\n+                      n.getQualifiedName(), \"'this'\", type.toString(), constraint.toString()));\n+        }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}