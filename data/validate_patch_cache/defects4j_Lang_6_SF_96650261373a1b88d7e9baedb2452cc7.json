{
    "patch": "public final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            int codePoint = Character.codePointAt(input, pos);\n            if (isHighSurrogate(codePoint)) {\n                if (pos + 1 < len && isLowSurrogate(input.charAt(pos + 1))) {\n                    out.write(input.subSequence(pos, pos + 2).toString());\n                    pos += 2;\n                    continue;\n                }\n                // Fall back to writing the high surrogate directly if the low surrogate is missing or invalid\n                out.write(Character.toChars(codePoint));\n            } else if (isLowSurrogate(codePoint)) {\n                // Fall back to writing the low surrogate directly if it's not expected to be a lone surrogate\n                out.write(Character.toChars(codePoint));\n            } else {\n                // The code point is neither a high nor a low surrogate, so write it directly\n                out.write(Character.toChars(codePoint));\n            }\n            pos += 1;\n        } else {\n            for (int pt = 0; pt < consumed; pt++) {\n                pos += Character.charCount(Character.codePointAt(input, pos));\n            }\n        }\n    }\n}\n\nprivate static boolean isHighSurrogate(int codePoint) {\n    return codePoint >= Character.MIN_HIGH_SURROGATE && codePoint <= Character.MAX_HIGH_SURROGATE;\n}\n\nprivate static boolean isLowSurrogate(int codePoint) {\n    return codePoint >= Character.MIN_LOW_SURROGATE && codePoint <= Character.MAX_LOW_SURROGATE;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..40e48c83 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -72,30 +72,50 @@ public abstract class CharSequenceTranslator {\n      * @param out Writer to translate the text to\n      * @throws IOException if and only if the Writer produces an IOException\n      */\n-    public final void translate(CharSequence input, Writer out) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (input == null) {\n-            return;\n-        }\n-        int pos = 0;\n-        int len = input.length();\n-        while (pos < len) {\n-            int consumed = translate(input, pos, out);\n-            if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n-                pos+= c.length;\n-                continue;\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            int codePoint = Character.codePointAt(input, pos);\n+            if (isHighSurrogate(codePoint)) {\n+                if (pos + 1 < len && isLowSurrogate(input.charAt(pos + 1))) {\n+                    out.write(input.subSequence(pos, pos + 2).toString());\n+                    pos += 2;\n+                    continue;\n+                }\n+                // Fall back to writing the high surrogate directly if the low surrogate is missing or invalid\n+                out.write(Character.toChars(codePoint));\n+            } else if (isLowSurrogate(codePoint)) {\n+                // Fall back to writing the low surrogate directly if it's not expected to be a lone surrogate\n+                out.write(Character.toChars(codePoint));\n+            } else {\n+                // The code point is neither a high nor a low surrogate, so write it directly\n+                out.write(Character.toChars(codePoint));\n             }\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n+            pos += 1;\n+        } else {\n             for (int pt = 0; pt < consumed; pt++) {\n                 pos += Character.charCount(Character.codePointAt(input, pos));\n             }\n         }\n     }\n+}\n+\n+private static boolean isHighSurrogate(int codePoint) {\n+    return codePoint >= Character.MIN_HIGH_SURROGATE && codePoint <= Character.MAX_HIGH_SURROGATE;\n+}\n+\n+private static boolean isLowSurrogate(int codePoint) {\n+    return codePoint >= Character.MIN_LOW_SURROGATE && codePoint <= Character.MAX_LOW_SURROGATE;\n+}\n \n     /**\n      * Helper method to create a merger of this translator with another set of ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<\ud842\udfb7[]A> but was:<\ud842\udfb7[?]A>",
    "test_result": "FAIL"
}