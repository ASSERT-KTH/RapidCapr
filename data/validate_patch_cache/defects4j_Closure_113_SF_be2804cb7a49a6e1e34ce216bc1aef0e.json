{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n    Node left = n.getFirstChild();\n    Node arg = left.getNext();\n    if (verifyLastArgumentIsString(t, left, arg)) {\n      String ns = arg.getString();\n      ProvidedName provided = providedNames.get(ns);\n      if (provided == null || !provided.isExplicitlyProvided()) {\n        JSModule module = t.getModule();\n        Boolean found = findProvidedName(module, ns, providedNames);\n        if (!found) {\n          unrecognizedRequires.add(\n              new UnrecognizedRequire(n, ns, t.getSourceName()));\n        }\n      } else {\n        JSModule providedModule = provided.explicitModule;\n\n        // This must be non-null, because there was an explicit provide.\n        Preconditions.checkNotNull(providedModule);\n\n        JSModule module = t.getModule();\n        if (moduleGraph != null &&\n            module != providedModule &&\n            !moduleGraph.dependsOn(module, providedModule)) {\n          compiler.report(\n              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n                  providedModule.getName(),\n                  module.getName()));\n        }\n      }\n\n      maybeAddToSymbolTable(left);\n      maybeAddStringNodeToSymbolTable(arg);\n\n      // Requires should be removed before further processing.\n      // Some clients run closure pass multiple times, first with\n      // the checks for broken requires turned off. In these cases, we\n      // allow broken requires to be preserved by the first run to\n      // let them be caught in the subsequent run.\n      if (provided != null) {\n        parent.detachFromParent();\n        compiler.reportCodeChange();\n      }\n    }\n  }\n\n  private Boolean findProvidedName(JSModule module, String ns, Map<String, ProvidedName> providedNames) {\n      ProvidedName provided = providedNames.get(ns);\n      if (provided != null && provided.isExplicitlyProvided() && module == provided.explicitModule) {\n        return true;\n      } else {\n        List<String> dependencies = ModuleDependency.getDependencies(module.getName(), true);\n        for (String dependency : dependencies) {\n          JSModule depModule = moduleGraph.getModule(dependency);\n          if (depModule == module) {\n            continue;\n          }\n          Boolean found = findProvidedName(depModule, ns, providedNames);\n          if (found) {\n            return true;\n          }\n        }\n        return false;\n      }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..4f9cfb16 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,15 +292,19 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n     Node left = n.getFirstChild();\n     Node arg = left.getNext();\n     if (verifyLastArgumentIsString(t, left, arg)) {\n       String ns = arg.getString();\n       ProvidedName provided = providedNames.get(ns);\n       if (provided == null || !provided.isExplicitlyProvided()) {\n-        unrecognizedRequires.add(\n-            new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        JSModule module = t.getModule();\n+        Boolean found = findProvidedName(module, ns, providedNames);\n+        if (!found) {\n+          unrecognizedRequires.add(\n+              new UnrecognizedRequire(n, ns, t.getSourceName()));\n+        }\n       } else {\n         JSModule providedModule = provided.explicitModule;\n \n@@ -333,6 +337,26 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n     }\n   }\n \n+  private Boolean findProvidedName(JSModule module, String ns, Map<String, ProvidedName> providedNames) {\n+      ProvidedName provided = providedNames.get(ns);\n+      if (provided != null && provided.isExplicitlyProvided() && module == provided.explicitModule) {\n+        return true;\n+      } else {\n+        List<String> dependencies = ModuleDependency.getDependencies(module.getName(), true);\n+        for (String dependency : dependencies) {\n+          JSModule depModule = moduleGraph.getModule(dependency);\n+          if (depModule == module) {\n+            continue;\n+          }\n+          Boolean found = findProvidedName(depModule, ns, providedNames);\n+          if (found) {\n+            return true;\n+          }\n+        }\n+        return false;\n+      }\n+  }\n+\n   /**\n    * Handles a goog.provide call.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}