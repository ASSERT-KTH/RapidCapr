{
    "patch": "             if (NodeUtil.isAssignmentOp(thenOp)) {\n                Node lhs = thenOp.getFirstChild();\n                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n                    // if LHS has side effects, don't proceed [since the optimization\n                    // evaluates LHS before cond]\n                    // NOTE - there are some circumstances where we can\n                    // proceed even if there are side effects...\n                    !mayEffectMutableState(lhs, n)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..ce106aa4 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,14 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+             if (NodeUtil.isAssignmentOp(thenOp)) {\n+                Node lhs = thenOp.getFirstChild();\n+                if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n+                    // if LHS has side effects, don't proceed [since the optimization\n+                    // evaluates LHS before cond]\n+                    // NOTE - there are some circumstances where we can\n+                    // proceed even if there are side effects...\n+                    !mayEffectMutableState(lhs, n)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}