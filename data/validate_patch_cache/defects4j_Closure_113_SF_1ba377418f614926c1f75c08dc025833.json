{
    "patch": "private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n  Node left = n.getFirstChild();\n  Node arg = left.getNext();\n  if (verifyLastArgumentIsString(t, left, arg)) {\n    String ns = arg.getString();\n    ProvidedName provided = providedNames.get(ns);\n    if (provided == null) {\n      JSModule module = t.getModule();\n      Set<String> implicitNamespaces = getImplicitNamespaces(module);\n      // Check for implicit provides\n      while (module != null && !getRootModule().equals(module)) {\n        if (implicitNamespaces.contains(module.getName() + \".\" + ns)) {\n          provided = new ProvidedName(module, /* isExplicitlyProvided= */ false);\n          break;\n        }\n        module = module.getParent();\n      }\n      if (provided == null) {\n        unrecognizedRequires.add(\n            new UnrecognizedRequire(n, ns, t.getSourceName()));\n      }\n    }\n    if (provided != null && !provided.isExplicitlyProvided()) {\n      JSModule providedModule = provided.explicitModule;\n      JSModule module = t.getModule();\n      if (moduleGraph != null &&\n          !moduleGraph.dependsOn(module, providedModule)) {\n        compiler.report(\n            t.makeError(\n                n, XMODULE_REQUIRE_ERROR, ns,\n                providedModule.getName(), module.getName()));\n      }\n      parent.detachFromParent();\n      compiler.reportCodeChange();\n    }\n\n    maybeAddToSymbolTable(left);\n    maybeAddStringNodeToSymbolTable(arg);\n  }\n\n}\n\nprivate Set<String> getImplicitNamespaces(JSModule module) {\n  Builder<String> builder = ImmutableSet.builder();\n  for (JSModule m : moduleGraph.getAllDependencies(module)) {\n    if (m.isImplicit()) {\n      builder.addAll(implicitNamespaces.get(m));\n    }\n  }\n  return builder.build();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..b91bd8b7 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -292,46 +292,57 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n   /**\n    * Handles a goog.require call.\n    */\n-  private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n-    Node left = n.getFirstChild();\n-    Node arg = left.getNext();\n-    if (verifyLastArgumentIsString(t, left, arg)) {\n-      String ns = arg.getString();\n-      ProvidedName provided = providedNames.get(ns);\n-      if (provided == null || !provided.isExplicitlyProvided()) {\n+private void processRequireCall(NodeTraversal t, Node n, Node parent) {\n+  Node left = n.getFirstChild();\n+  Node arg = left.getNext();\n+  if (verifyLastArgumentIsString(t, left, arg)) {\n+    String ns = arg.getString();\n+    ProvidedName provided = providedNames.get(ns);\n+    if (provided == null) {\n+      JSModule module = t.getModule();\n+      Set<String> implicitNamespaces = getImplicitNamespaces(module);\n+      // Check for implicit provides\n+      while (module != null && !getRootModule().equals(module)) {\n+        if (implicitNamespaces.contains(module.getName() + \".\" + ns)) {\n+          provided = new ProvidedName(module, /* isExplicitlyProvided= */ false);\n+          break;\n+        }\n+        module = module.getParent();\n+      }\n+      if (provided == null) {\n         unrecognizedRequires.add(\n             new UnrecognizedRequire(n, ns, t.getSourceName()));\n-      } else {\n-        JSModule providedModule = provided.explicitModule;\n-\n-        // This must be non-null, because there was an explicit provide.\n-        Preconditions.checkNotNull(providedModule);\n-\n-        JSModule module = t.getModule();\n-        if (moduleGraph != null &&\n-            module != providedModule &&\n-            !moduleGraph.dependsOn(module, providedModule)) {\n-          compiler.report(\n-              t.makeError(n, XMODULE_REQUIRE_ERROR, ns,\n-                  providedModule.getName(),\n-                  module.getName()));\n-        }\n       }\n+    }\n+    if (provided != null && !provided.isExplicitlyProvided()) {\n+      JSModule providedModule = provided.explicitModule;\n+      JSModule module = t.getModule();\n+      if (moduleGraph != null &&\n+          !moduleGraph.dependsOn(module, providedModule)) {\n+        compiler.report(\n+            t.makeError(\n+                n, XMODULE_REQUIRE_ERROR, ns,\n+                providedModule.getName(), module.getName()));\n+      }\n+      parent.detachFromParent();\n+      compiler.reportCodeChange();\n+    }\n \n-      maybeAddToSymbolTable(left);\n-      maybeAddStringNodeToSymbolTable(arg);\n+    maybeAddToSymbolTable(left);\n+    maybeAddStringNodeToSymbolTable(arg);\n+  }\n \n-      // Requires should be removed before further processing.\n-      // Some clients run closure pass multiple times, first with\n-      // the checks for broken requires turned off. In these cases, we\n-      // allow broken requires to be preserved by the first run to\n-      // let them be caught in the subsequent run.\n-      if (provided != null) {\n-        parent.detachFromParent();\n-        compiler.reportCodeChange();\n-      }\n+}\n+\n+private Set<String> getImplicitNamespaces(JSModule module) {\n+  Builder<String> builder = ImmutableSet.builder();\n+  for (JSModule m : moduleGraph.getAllDependencies(module)) {\n+    if (m.isImplicit()) {\n+      builder.addAll(implicitNamespaces.get(m));\n     }\n   }\n+  return builder.build();\n+}\n \n   /**\n    * Handles a goog.provide call.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}