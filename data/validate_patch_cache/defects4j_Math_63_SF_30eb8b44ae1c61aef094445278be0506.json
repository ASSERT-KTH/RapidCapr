{
    "patch": "public static boolean equals(double x, double y) {\n    if (Double.isNaN(x) && Double.isNaN(y)) {\n        return true;\n    }\n    double absX = Math.abs(x);\n    double absY = Math.abs(y);\n    double diff = Math.abs(x - y);\n\n    if (x == y) { // Shortcut, handles infinities\n        return true;\n    } else if (x == 0 || y == 0 || diff < Double.MIN_NORMAL) {\n        // x or y is zero or both are extremely close to it (relative error is less than 2^-52)\n        // relative error is less than 1 ULP\n        return diff < (EPSILON * Double.MIN_NORMAL);\n    } else { // use relative error\n        return diff / Math.min((absX + absY), Double.MAX_VALUE) < EPSILON;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..1177c3fbb 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,9 +413,24 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+public static boolean equals(double x, double y) {\n+    if (Double.isNaN(x) && Double.isNaN(y)) {\n+        return true;\n     }\n+    double absX = Math.abs(x);\n+    double absY = Math.abs(y);\n+    double diff = Math.abs(x - y);\n+\n+    if (x == y) { // Shortcut, handles infinities\n+        return true;\n+    } else if (x == 0 || y == 0 || diff < Double.MIN_NORMAL) {\n+        // x or y is zero or both are extremely close to it (relative error is less than 2^-52)\n+        // relative error is less than 1 ULP\n+        return diff < (EPSILON * Double.MIN_NORMAL);\n+    } else { // use relative error\n+        return diff / Math.min((absX + absY), Double.MAX_VALUE) < EPSILON;\n+    }\n+}\n \n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}