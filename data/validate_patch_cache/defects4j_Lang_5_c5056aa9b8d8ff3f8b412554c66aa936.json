{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final String[] tokens = str.split(\"_\");\n    final int len = tokens.length;\n\n    String language = \"\";\n    String country = \"\";\n    String variant = \"\";\n\n    switch (len) {\n        case 1:\n            language = tokens[0];\n            break;\n        case 2:\n            language = tokens[0];\n            country = tokens[1];\n            break;\n        case 3:\n            language = tokens[0];\n            country = tokens[1];\n            variant = tokens[2];\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    if (!isValidLanguage(language) || !isValidCountry(country) || !isValidVariant(variant)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    return new Locale(language, country, variant);\n}\n\nprivate static boolean isValidLanguage(String language) {\n    if (language.isEmpty()) {\n        return false;\n    }\n    for (int i = 0; i < language.length(); i++) {\n        char c = language.charAt(i);\n        if (i == 0 && !Character.isLowerCase(c)) {\n            return false;\n        }\n        if (i > 0 && !Character.isLowerCase(c)) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidCountry(String country) {\n    if (country.isEmpty()) {\n        return true;\n    }\n    if (country.length() != 2) {\n        return false;\n    }\n    for (int i = 0; i < country.length(); i++) {\n        if (!Character.isUpperCase(country.charAt(i))) {\n            return false;\n        }\n    }\n    return true;\n}\n\nprivate static boolean isValidVariant(String variant) {\n    if (variant.isEmpty()) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9a-zA-Z]+$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9][0-9][0-9]$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9][0-9][A-Wa-w]$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9][A-Ha-h][0-9]$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9][A-Ha-h][A-Wa-w]$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[A-Za-z][0-9a-zA-Z]*$\")) {\n        return true;\n    }\n    if (variant.matches(\"^[0-9][0-9][X-Yx-y]$\")) {\n        return true;\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..add81589 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,47 +85,99 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final String[] tokens = str.split(\"_\");\n+    final int len = tokens.length;\n+\n+    String language = \"\";\n+    String country = \"\";\n+    String variant = \"\";\n+\n+    switch (len) {\n+        case 1:\n+            language = tokens[0];\n+            break;\n+        case 2:\n+            language = tokens[0];\n+            country = tokens[1];\n+            break;\n+        case 3:\n+            language = tokens[0];\n+            country = tokens[1];\n+            variant = tokens[2];\n+            break;\n+        default:\n             throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    if (!isValidLanguage(language) || !isValidCountry(country) || !isValidVariant(variant)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    return new Locale(language, country, variant);\n+}\n+\n+private static boolean isValidLanguage(String language) {\n+    if (language.isEmpty()) {\n+        return false;\n+    }\n+    for (int i = 0; i < language.length(); i++) {\n+        char c = language.charAt(i);\n+        if (i == 0 && !Character.isLowerCase(c)) {\n+            return false;\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        if (i > 0 && !Character.isLowerCase(c)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidCountry(String country) {\n+    if (country.isEmpty()) {\n+        return true;\n     }\n+    if (country.length() != 2) {\n+        return false;\n+    }\n+    for (int i = 0; i < country.length(); i++) {\n+        if (!Character.isUpperCase(country.charAt(i))) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+private static boolean isValidVariant(String variant) {\n+    if (variant.isEmpty()) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9a-zA-Z]+$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9][0-9][0-9]$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9][0-9][A-Wa-w]$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9][A-Ha-h][0-9]$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9][A-Ha-h][A-Wa-w]$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[A-Za-z][0-9a-zA-Z]*$\")) {\n+        return true;\n+    }\n+    if (variant.matches(\"^[0-9][0-9][X-Yx-y]$\")) {\n+        return true;\n+    }\n+    return false;\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "java.lang.IllegalArgumentException: Invalid locale format: _GB",
    "test_result": "FAIL"
}