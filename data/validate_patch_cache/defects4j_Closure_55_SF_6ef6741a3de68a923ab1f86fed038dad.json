{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if (!NodeUtil.isFunctionExpression(n)) {\n      return false;\n    }\n    Node body = n.getLastChild();\n    if (body == null) {\n      return true;\n    }\n    int numStatements = NodeUtil.getFunctionBodyStatements(body).size();\n    return numStatements == 1 && NodeUtil.isExprStatement(body.getFirstChild());\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..c7f9f5c5 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,9 +112,16 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (!NodeUtil.isFunctionExpression(n)) {\n+      return false;\n+    }\n+    Node body = n.getLastChild();\n+    if (body == null) {\n+      return true;\n+    }\n+    int numStatements = NodeUtil.getFunctionBodyStatements(body).size();\n+    return numStatements == 1 && NodeUtil.isExprStatement(body.getFirstChild());\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}