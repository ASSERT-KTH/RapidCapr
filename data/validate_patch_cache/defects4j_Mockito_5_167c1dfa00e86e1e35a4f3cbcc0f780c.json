{
    "patch": "public void verify(VerificationData data) {\n    AssertionError error = null;\n\n    timer.start();\n    while (timer.isCounting()) {\n        try {\n            delegate.verify(data);\n\n            if (returnOnSuccess) {\n                return;\n            } else {\n                error = null;\n            }\n        } catch (MockitoAssertionError e) {\n            error = handleVerifyException(e);\n            \n            // Add specific error message for MockitoAssertionError\n            error.addSuppressed(new AssertionError(String.format(\"Mockito assertion error occurred during verification. Reason: %s\", e.getMessage())));\n        }\n        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n            error = handleVerifyException(e);\n        }\n    }\n\n    if (error != null) {\n        throw new AssertionError(String.format(\"'%s' raised an error during verification\", delegate.getClass().getCanonicalName()), error);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..61f37004e 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -72,32 +72,35 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      *\n      * @throws MockitoAssertionError if the delegate verification mode does not succeed before the timeout\n      */\n-    public void verify(VerificationData data) {\n-        AssertionError error = null;\n-\n-        timer.start();\n-        while (timer.isCounting()) {\n-            try {\n-                delegate.verify(data);\n-\n-                if (returnOnSuccess) {\n-                    return;\n-                } else {\n-                    error = null;\n-                }\n-            } catch (MockitoAssertionError e) {\n-                error = handleVerifyException(e);\n-            }\n-            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n-                error = handleVerifyException(e);\n+public void verify(VerificationData data) {\n+    AssertionError error = null;\n+\n+    timer.start();\n+    while (timer.isCounting()) {\n+        try {\n+            delegate.verify(data);\n+\n+            if (returnOnSuccess) {\n+                return;\n+            } else {\n+                error = null;\n             }\n+        } catch (MockitoAssertionError e) {\n+            error = handleVerifyException(e);\n+            \n+            // Add specific error message for MockitoAssertionError\n+            error.addSuppressed(new AssertionError(String.format(\"Mockito assertion error occurred during verification. Reason: %s\", e.getMessage())));\n         }\n-\n-        if (error != null) {\n-            throw error;\n+        catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n+            error = handleVerifyException(e);\n         }\n     }\n \n+    if (error != null) {\n+        throw new AssertionError(String.format(\"'%s' raised an error during verification\", delegate.getClass().getCanonicalName()), error);\n+    }\n+}\n+\n     private AssertionError handleVerifyException(AssertionError e) {\n         if (canRecoverFromFailure(delegate)) {\n             sleep(pollingPeriodMillis);",
    "result_reason": "junit.framework.AssertionFailedError: 'org.mockito.verification.VerificationMode$$EnhancerByMockitoWithCGLIB$$f4387e8a' raised an error during verification",
    "test_result": "FAIL"
}