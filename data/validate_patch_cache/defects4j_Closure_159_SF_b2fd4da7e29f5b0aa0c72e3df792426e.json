{
    "patch": "  private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n\n    // For each referenced function, add a new reference\n    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child != null && child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n\n      // Recurse on the arguments of the function call\n      child = child.getNext();\n      while (child != null) {\n        findCalledFunctions(child, changed);\n        child = child.getNext();\n      }\n    }\n\n    // Recurse on child nodes\n    Node child = node.getFirstChild();\n    while (child != null) {\n      findCalledFunctions(child, changed);\n      child = child.getNext();\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..28713c50 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,19 +770,29 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n+  private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed, \"Set of changed functions cannot be null\");\n+\n     // For each referenced function, add a new reference\n     if (node.getType() == Token.CALL) {\n       Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n+      if (child != null && child.getType() == Token.NAME) {\n         changed.add(child.getString());\n       }\n+\n+      // Recurse on the arguments of the function call\n+      child = child.getNext();\n+      while (child != null) {\n+        findCalledFunctions(child, changed);\n+        child = child.getNext();\n+      }\n     }\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+    // Recurse on child nodes\n+    Node child = node.getFirstChild();\n+    while (child != null) {\n+      findCalledFunctions(child, changed);\n+      child = child.getNext();\n     }\n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}