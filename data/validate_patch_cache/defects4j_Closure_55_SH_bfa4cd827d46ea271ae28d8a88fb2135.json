{
    "patch": "    if (NodeUtil.isFunctionExpression(n)) {\n      return true;\n    }\n    if (n.isClass() && n.getFirstChild() != null) {\n      Node firstChild = n.getFirstChild();\n      return firstChild.isFunction();\n    }\n    return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..80633599 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -112,9 +112,15 @@ class FunctionRewriter implements CompilerPass {\n         reducer.getClass().toString() + \":helper\", reducer.getHelperSource());\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n-\n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if (NodeUtil.isFunctionExpression(n)) {\n+      return true;\n+    }\n+    if (n.isClass() && n.getFirstChild() != null) {\n+      Node firstChild = n.getFirstChild();\n+      return firstChild.isFunction();\n+    }\n+    return false;\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}