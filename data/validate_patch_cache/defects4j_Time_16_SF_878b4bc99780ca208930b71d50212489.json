{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        Chronology newChrono = selectChronology(chrono);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, newChrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        long parsedMillis = bucket.computeMillis(false, text);\n        Chronology parsedChrono = bucket.getChronology();\n        if (bucket.getZone() != null && parsedChrono != null &&\n                !parsedChrono.getZone().equals(bucket.getZone())) {\n            // Keep parsed datetime with its own zone\n            parsedMillis -= bucket.getZone().getOffset(parsedMillis);\n            parsedChrono = parsedChrono.withZone(bucket.getZone());\n        }\n\n        // leniently derive missing fields\n        boolean resolved = false;\n        if (iResolverStyle == ResolverStyle.LENIENT) {\n            if (bucket.getOffsetInteger() != null) {\n                bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n                resolved = true;\n            } else if (bucket.getZone() != null && parsedChrono != null &&\n                    chrono.getZone().equals(parsedChrono.getZone()) == false) {\n                bucket.setZone(null);\n                final Chronology chronoChanged = chrono.withZone(bucket.getChronology().getZone());\n                if (chronoChanged.equals(parsedChrono)) {\n                    bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n                    resolved = true;\n                }\n            }\n        }\n\n        // update the Chronology and computeMillis()\n        if (parsedChrono != null) {\n            chrono = parsedChrono;\n            parsedMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n        }\n\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n\n        int offset;\n        if (resolved || (iOffsetParsed && bucket.getOffsetInteger() != null)) {\n            offset = bucket.getOffsetInteger().intValue();\n        } else {\n            offset = chrono.getZone().getOffset(parsedMillis);\n            parsedMillis -= offset;\n        }\n\n        instant.setMillis(parsedMillis);\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..6f31f3e6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,27 +699,62 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n+        Chronology newChrono = selectChronology(chrono);\n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+                instantLocal, newChrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        long parsedMillis = bucket.computeMillis(false, text);\n+        Chronology parsedChrono = bucket.getChronology();\n+        if (bucket.getZone() != null && parsedChrono != null &&\n+                !parsedChrono.getZone().equals(bucket.getZone())) {\n+            // Keep parsed datetime with its own zone\n+            parsedMillis -= bucket.getZone().getOffset(parsedMillis);\n+            parsedChrono = parsedChrono.withZone(bucket.getZone());\n+        }\n+\n+        // leniently derive missing fields\n+        boolean resolved = false;\n+        if (iResolverStyle == ResolverStyle.LENIENT) {\n+            if (bucket.getOffsetInteger() != null) {\n+                bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n+                resolved = true;\n+            } else if (bucket.getZone() != null && parsedChrono != null &&\n+                    chrono.getZone().equals(parsedChrono.getZone()) == false) {\n+                bucket.setZone(null);\n+                final Chronology chronoChanged = chrono.withZone(bucket.getChronology().getZone());\n+                if (chronoChanged.equals(parsedChrono)) {\n+                    bucket.saveField(DateTimeFieldType.zone(), bucket.getZone());\n+                    resolved = true;\n+                }\n+            }\n         }\n+\n+        // update the Chronology and computeMillis()\n+        if (parsedChrono != null) {\n+            chrono = parsedChrono;\n+            parsedMillis = chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n+        }\n+\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n+\n+        int offset;\n+        if (resolved || (iOffsetParsed && bucket.getOffsetInteger() != null)) {\n+            offset = bucket.getOffsetInteger().intValue();\n+        } else {\n+            offset = chrono.getZone().getOffset(parsedMillis);\n+            parsedMillis -= offset;\n+        }\n+\n+        instant.setMillis(parsedMillis);\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}