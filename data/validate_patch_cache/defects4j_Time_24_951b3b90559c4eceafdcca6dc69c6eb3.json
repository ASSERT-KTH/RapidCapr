{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n        DateTimeField firstField = savedFields[0].iField;\n        DurationField first = firstField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n            int year = iDefaultYear;\n            // perform a dry-run computation of millis to get the parsed year\n            long millis = iMillis;\n            for (int i = 0; i < count; i++) {\n                // save the field value for the fields between the year and the first field\n                DateTimeField field = savedFields[i].iField;\n                if (compareReverse(field.getDurationField(), yearField.getDurationField()) > 0) {\n                    year = field.set(millis, year);\n                }\n                millis = savedFields[i].set(millis, resetFields);\n            }\n            // set the year to be parsed\n            year = firstField.set(year, millis);\n            saveField(yearField, year);\n            millis = computeMillis(resetFields, text); // compute millis again\n            if (resetFields) {\n                // reset the saved fields and count since the fields were not parsed using the default year\n                iSavedFieldsCount = 0;\n                iSavedFieldsShared = false;\n                iSavedFields = new SavedField[8];\n            }\n            return millis;\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..55794bd0 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,76 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n-        }\n-\n-        long millis = iMillis;\n-        try {\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+        DateTimeField firstField = savedFields[0].iField;\n+        DurationField first = firstField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            DateTimeField yearField = DateTimeFieldType.year().getField(iChrono);\n+            int year = iDefaultYear;\n+            // perform a dry-run computation of millis to get the parsed year\n+            long millis = iMillis;\n             for (int i = 0; i < count; i++) {\n+                // save the field value for the fields between the year and the first field\n+                DateTimeField field = savedFields[i].iField;\n+                if (compareReverse(field.getDurationField(), yearField.getDurationField()) > 0) {\n+                    year = field.set(millis, year);\n+                }\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            // set the year to be parsed\n+            year = firstField.set(year, millis);\n+            saveField(yearField, year);\n+            millis = computeMillis(resetFields, text); // compute millis again\n+            if (resetFields) {\n+                // reset the saved fields and count since the fields were not parsed using the default year\n+                iSavedFieldsCount = 0;\n+                iSavedFieldsShared = false;\n+                iSavedFields = new SavedField[8];\n             }\n-            throw e;\n+            return millis;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}