{
    "patch": "    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n    {\n        long overflow = (long) Integer.MAX_VALUE;\n        double r0 = value;\n        long a0 = (long)FastMath.floor(r0);\n        if (a0 > overflow) {\n            throw new FractionConversionException(value, a0, 1l);\n        }\n\n        // check for (almost) integer arguments, which should not go\n        // to iterations.\n        if (FastMath.abs(a0 - value) < epsilon) {\n            this.numerator = (int) a0;\n            this.denominator = 1;\n            return;\n        }\n\n        long p0 = 1;\n        long q0 = 0;\n        long p1 = a0;\n        long q1 = 1;\n\n        long p2 = 0;\n        long q2 = 1;\n\n        int n = 0;\n        boolean stop = false;\n        do {\n            ++n;\n            double r1 = 1.0 / (r0 - a0);\n            long a1 = (long)FastMath.floor(r1);\n\n            if (q1 * a1 + q0 > overflow) {\n                throw new FractionConversionException(value, q1 * a1 + q0, q1);\n            }\n\n            long p3 = a1 * p1 + p0;\n            long q3 = a1 * q1 + q0;\n\n            if (q3 > overflow) {\n                throw new FractionConversionException(value, p3, q3);\n            }\n\n            p0 = p1;\n            p1 = p3;\n            q0 = q1;\n            q1 = q3;\n\n            a0 = a1;\n            r0 = r1;\n\n            double convergent = (double)p1 / (double)q1;\n            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q1 < maxDenominator) {\n                p2 = p1;\n                q2 = q1;\n            } else {\n                stop = true;\n            }\n        } while (!stop);\n\n        if (n >= maxIterations) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n\n        if (q2 < maxDenominator) {\n            this.numerator = (int) p2;\n            this.denominator = (int) q2;\n        } else {\n            this.numerator = (int) p1;\n            this.denominator = (int) q1;\n        }\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..59ecb09be 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -175,7 +175,7 @@ public class Fraction\n     private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n     {\n-        long overflow = Integer.MAX_VALUE;\n+        long overflow = (long) Integer.MAX_VALUE;\n         double r0 = value;\n         long a0 = (long)FastMath.floor(r0);\n         if (a0 > overflow) {\n@@ -204,20 +204,30 @@ public class Fraction\n             ++n;\n             double r1 = 1.0 / (r0 - a0);\n             long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+\n+            if (q1 * a1 + q0 > overflow) {\n+                throw new FractionConversionException(value, q1 * a1 + q0, q1);\n+            }\n+\n+            long p3 = a1 * p1 + p0;\n+            long q3 = a1 * q1 + q0;\n+\n+            if (q3 > overflow) {\n+                throw new FractionConversionException(value, p3, q3);\n             }\n \n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n+            p0 = p1;\n+            p1 = p3;\n+            q0 = q1;\n+            q1 = q3;\n+\n+            a0 = a1;\n+            r0 = r1;\n+\n+            double convergent = (double)p1 / (double)q1;\n+            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q1 < maxDenominator) {\n+                p2 = p1;\n+                q2 = q1;\n             } else {\n                 stop = true;\n             }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3[55 / 113]> but was:<3[33 / 106]>",
    "test_result": "FAIL"
}