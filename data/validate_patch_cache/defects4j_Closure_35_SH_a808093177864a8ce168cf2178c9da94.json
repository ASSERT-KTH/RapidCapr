{
    "patch": "    if (constraintObj != null && constraintObj.isRecordType()) {\n      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n      if (objType != null) {\n        for (String prop : constraintObj.getOwnPropertyNames()) {\n          JSType propType = constraintObj.getPropertyType(prop);\n          if (objType.hasProperty(prop)) {\n\t\t        propType = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n\t\t\t    }\n\t\t\t    JSType typeToInfer = null;\n\t\t\t    if (constraintObj.mayHaveProp(prop)) {\n\t\t\t      typeToInfer =\n\t\t\t        getNativeType(NULL_TYPE).getLeastSupertype(propType).autobox();\n\t\t\t    } else {\n\t\t\t      typeToInfer = propType;\n\t\t\t    }\n\t\t\t    if (typeToInfer != null) {\n\t\t\t      objType.defineInferredProperty(prop, typeToInfer, null);\n\t\t\t    }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2dd520fd 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1123,17 +1123,23 @@ class TypeInference\n       if (objType != null) {\n         for (String prop : constraintObj.getOwnPropertyNames()) {\n           JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n+          if (objType.hasProperty(prop)) {\n+\t\t        propType = getNativeType(VOID_TYPE).getLeastSupertype(propType);\n+\t\t\t    }\n+\t\t\t    JSType typeToInfer = null;\n+\t\t\t    if (constraintObj.mayHaveProp(prop)) {\n+\t\t\t      typeToInfer =\n+\t\t\t        getNativeType(NULL_TYPE).getLeastSupertype(propType).autobox();\n+\t\t\t    } else {\n+\t\t\t      typeToInfer = propType;\n+\t\t\t    }\n+\t\t\t    if (typeToInfer != null) {\n+\t\t\t      objType.defineInferredProperty(prop, typeToInfer, null);\n+\t\t\t    }\n         }\n       }\n     }\n+    }\n   }\n \n   /**",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}