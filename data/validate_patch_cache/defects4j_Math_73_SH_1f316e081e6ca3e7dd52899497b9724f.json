{
    "patch": "        // check if initial guess is NaN or infinite\n        if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n        }\n        \n        // check if the function values at endpoints have opposite signs\n        double yMin = f.value(min);\n        double yMax = f.value(max);\n        if (yMin * yMax > 0) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..cbe6ecb2e 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,17 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        // check if initial guess is NaN or infinite\n+        if (Double.isNaN(initial) || Double.isInfinite(initial)) {\n+            throw new IllegalArgumentException(\"Initial guess is NaN or infinite. Initial guess value: \" + initial);\n+        }\n+        \n+        // check if the function values at endpoints have opposite signs\n+        double yMin = f.value(min);\n+        double yMax = f.value(max);\n+        if (yMin * yMax > 0) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: variable yMin is already defined in method solve(UnivariateRealFunction,double,double,double)",
    "test_result": "ERROR"
}