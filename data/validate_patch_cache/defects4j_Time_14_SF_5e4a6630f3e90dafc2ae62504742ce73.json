{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        int curMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()] - 1; // 0-based month\n        int curYear = values[DateTimeFieldType.year().getFieldIndex()];\n        int newMonth = (curMonth + valueToAdd) % 12;\n        int yearsToAdd = (curMonth + valueToAdd) / 12;\n        if (newMonth < 0) {\n            newMonth += 12;\n            yearsToAdd--;\n        }\n        int newYear = curYear + yearsToAdd;\n        // check if the day of month is greater than the max day in the new month\n        DateTimeField field = partial.getField(DateTimeFieldType.monthOfYear());\n        int maxMonth = field.getMaximumValue(newYear);\n        if (newMonth >= maxMonth) {\n            int maxDay = partial.with(DateTimeFieldType.monthOfYear(), maxMonth).property(DateTimeFieldType.dayOfMonth()).getMaximumValue();\n            values = partial.with(DateTimeFieldType.year(), newYear).with(DateTimeFieldType.monthOfYear(), maxMonth)\n                    .with(DateTimeFieldType.dayOfMonth(), Math.min(maxDay, values[DateTimeFieldType.dayOfMonth().getFieldIndex()])).getValues();\n        } else {\n            values = partial.with(DateTimeFieldType.year(), newYear).with(DateTimeFieldType.monthOfYear(), newMonth + 1).getValues();\n        }\n        return values;\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..e197894e 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,38 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        int curMonth = values[DateTimeFieldType.monthOfYear().getFieldIndex()] - 1; // 0-based month\n+        int curYear = values[DateTimeFieldType.year().getFieldIndex()];\n+        int newMonth = (curMonth + valueToAdd) % 12;\n+        int yearsToAdd = (curMonth + valueToAdd) / 12;\n+        if (newMonth < 0) {\n+            newMonth += 12;\n+            yearsToAdd--;\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n-            }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+        int newYear = curYear + yearsToAdd;\n+        // check if the day of month is greater than the max day in the new month\n+        DateTimeField field = partial.getField(DateTimeFieldType.monthOfYear());\n+        int maxMonth = field.getMaximumValue(newYear);\n+        if (newMonth >= maxMonth) {\n+            int maxDay = partial.with(DateTimeFieldType.monthOfYear(), maxMonth).property(DateTimeFieldType.dayOfMonth()).getMaximumValue();\n+            values = partial.with(DateTimeFieldType.year(), newYear).with(DateTimeFieldType.monthOfYear(), maxMonth)\n+                    .with(DateTimeFieldType.dayOfMonth(), Math.min(maxDay, values[DateTimeFieldType.dayOfMonth().getFieldIndex()])).getValues();\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            values = partial.with(DateTimeFieldType.year(), newYear).with(DateTimeFieldType.monthOfYear(), newMonth + 1).getValues();\n         }\n+        return values;\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}