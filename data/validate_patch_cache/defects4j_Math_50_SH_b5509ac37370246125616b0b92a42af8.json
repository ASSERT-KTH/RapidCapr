{
    "patch": "                    if (f0 * fx < 0) {\n                        x1 = x;\n                        f1 = fx;\n                    } else {\n                        double oldf0 = f0;\n                        if (f1 * fx < 0) {\n                            x0 = x;\n                            f0 = fx;\n                        } else {\n                            // Regula falsi method.\n                            double regulaFalsiDenominator = f1 - f0;\n                            double regulaFalsiNumerator = f0 * (x1 - x0);\n                            double newApprox = x0 - regulaFalsiNumerator / regulaFalsiDenominator;\n                            double newFunction = computeObjectiveValue(newApprox);\n\n                            if (newFunction == 0.0)\n                                return newApprox;\n\n                            if (Math.signum(newFunction) == Math.signum(f0)) {\n                                x0 = newApprox;\n                                f0 = newFunction;\n                            } else {\n                                x1 = newApprox;\n                                f1 = newFunction;\n                            }\n                            if (FastMath.abs(f1) < FastMath.abs(f0)) {\n                                // The new approximation is the closest to f(x)=0 and will be returned.\n                                x0 = x1;\n                                f0 = f1;\n                                x1 = newApprox;\n                                f1 = newFunction;\n                            }\n                        }\n                    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..9f78bf5df 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -184,9 +184,39 @@ public abstract class BaseSecantSolver\n                     break;\n                 case REGULA_FALSI:\n                     // Nothing.\n-                    if (x == x1) {\n-                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n-                        f0 = computeObjectiveValue(x0);\n+                    if (f0 * fx < 0) {\n+                        x1 = x;\n+                        f1 = fx;\n+                    } else {\n+                        double oldf0 = f0;\n+                        if (f1 * fx < 0) {\n+                            x0 = x;\n+                            f0 = fx;\n+                        } else {\n+                            // Regula falsi method.\n+                            double regulaFalsiDenominator = f1 - f0;\n+                            double regulaFalsiNumerator = f0 * (x1 - x0);\n+                            double newApprox = x0 - regulaFalsiNumerator / regulaFalsiDenominator;\n+                            double newFunction = computeObjectiveValue(newApprox);\n+\n+                            if (newFunction == 0.0)\n+                                return newApprox;\n+\n+                            if (Math.signum(newFunction) == Math.signum(f0)) {\n+                                x0 = newApprox;\n+                                f0 = newFunction;\n+                            } else {\n+                                x1 = newApprox;\n+                                f1 = newFunction;\n+                            }\n+                            if (FastMath.abs(f1) < FastMath.abs(f0)) {\n+                                // The new approximation is the closest to f(x)=0 and will be returned.\n+                                x0 = x1;\n+                                f0 = f1;\n+                                x1 = newApprox;\n+                                f1 = newFunction;\n+                            }\n+                        }\n                     }\n                     break;\n                 default:",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}