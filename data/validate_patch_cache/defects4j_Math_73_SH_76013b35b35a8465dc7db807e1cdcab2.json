{
    "patch": "// check if endpoints are equal or if min/max bracket the root directly or if the initial guess is infinite or NaN\n// otherwise proceed with full Brent algorithm\nif ((min == max) ||\n    (yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) ||\n    Double.isNaN(yInitial) || Double.isInfinite(yInitial)) {\n    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, endpoints are equal, or initial guess is NaN or infinite. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n}\n\n// full Brent algorithm starting with provided initial guess\nreturn solve(f, min, yMin, max, yMax, initial, yInitial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..2cb7b514d 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,16 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+// check if endpoints are equal or if min/max bracket the root directly or if the initial guess is infinite or NaN\n+// otherwise proceed with full Brent algorithm\n+if ((min == max) ||\n+    (yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0) ||\n+    Double.isNaN(yInitial) || Double.isInfinite(yInitial)) {\n+    throw new IllegalArgumentException(\"Function values at endpoints do not have different signs, endpoints are equal, or initial guess is NaN or infinite. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n+}\n+\n+// full Brent algorithm starting with provided initial guess\n+return solve(f, min, yMin, max, yMax, initial, yInitial);\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}