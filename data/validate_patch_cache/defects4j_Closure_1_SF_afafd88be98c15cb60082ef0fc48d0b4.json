{
    "patch": "private void removeUnusedFunctionArgs(Scope fnScope) {\n  // If modifications to call sites are not allowed, strip unused arguments\n  // from the end of the argument list for this function declaration.\n  Node function = fnScope.getRootNode();\n  Node argList = function.getFirstChild().getNext();\n\n  // Strip unused arguments from the end of the argument list for this\n  // function declaration.  Also record whether the \"arguments\"\n  // object is used within the function.  If so, we can't strip\n  // parameters without changing the mapping of actual to formal parameters.\n  boolean argumentsUse = NodeUtil.detectArgumentsUsage(function);\n  if (argumentsUse) {\n    referenced.clear();\n    NodeTraversal.traverse(compiler, function, new GatherReferenceNodes());\n  }\n\n  int childCount = argList.getChildCount();\n  for (int i = 0; i < childCount; i++) {\n    Node nameNode = argList.getChildAtIndex(i);\n    boolean removeNode = true;\n\n    // NOTE: we never remove the first arg here, since doing so would\n    // change the function signature.\n    if (i > 0) {\n      String name = nameNode.getString();\n      Var var = fnScope.getVar(name);\n\n      // Prevent removal if any of the following are true:\n      // 1. The name is one of \"$jscomp\", \"$jscomp$key\", or \"arguments\";\n      // 2. The variable is referenced (the Name will be left in the tree,\n      //    even if the variable definition is removed);\n      // 3. The variable is potentially referenced (references an inner scope);\n      // 4. The function is not specialized; or\n      // 5. The function is not a named function expression.\n      // We don't remove unused arg after export, because it changes the external behavior.\n      if (!name.equals(\"$jscomp\") &&\n          !name.equals(\"$jscomp$key\") &&\n          !name.equals(\"arguments\") &&\n          referenced.contains(var)\n              && !fnScope.isVarDeclared(name)\n              && NodeUtil.getEnclosingFunction(nameNode) == function) {\n        if (i == childCount - 1) {\n          // Removing the last arg, so we can remove the whole thing. Also\n          // the \"arguments\" variable is used directly as well as indirectly,\n          // and we can't just remove the name node.\n          argList.removeChild(nameNode);\n        } else {\n          // Remove just the one argument.\n          argList.replaceChild(nameNode, IR.empty());\n        }\n\n        // Since we have mutated the syntax tree, we need to make sure any\n        // changed scopes know about the modifications we made.\n        compiler.reportChangeToEnclosingScope(argList);\n\n        // Record that the we need to optimize call sites for this function.\n        callSiteOptimizer.recordFunctionChange(fnScope);\n\n        removeNode = false;\n      }\n    }\n\n    if (removeNode) {\n      // Mark the name as undeclared, so if the argument name is referenced\n      // inside the function, we don't treat this as an error (except JSDoc\n      // references).\n      nameNode.setDeclaredTypeExpression(new Node(Token.NO_TYPE));\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..fd666822 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -366,44 +366,76 @@ class RemoveUnusedVars\n    *\n    * @param fnScope The scope inside the function\n    */\n-  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n-    // Notice that removing unreferenced function args breaks\n-    // Function.prototype.length. In advanced mode, we don't really care\n-    // about this: we consider \"length\" the equivalent of reflecting on\n-    // the function's lexical source.\n-    //\n-    // Rather than create a new option for this, we assume that if the user\n-    // is removing globals, then it's OK to remove unused function args.\n-    //\n-    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n-\n-    Node function = fnScope.getRootNode();\n-\n-    Preconditions.checkState(function.isFunction());\n-    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n-      // The parameters object literal setters can not be removed.\n-      return;\n-    }\n-\n-    Node argList = getFunctionArgList(function);\n-    boolean modifyCallers = modifyCallSites\n-        && callSiteOptimizer.canModifyCallers(function);\n-    if (!modifyCallers) {\n-      // Strip unreferenced args off the end of the function declaration.\n-      Node lastArg;\n-      while ((lastArg = argList.getLastChild()) != null) {\n-        Var var = fnScope.getVar(lastArg.getString());\n-        if (!referenced.contains(var)) {\n-          argList.removeChild(lastArg);\n-          compiler.reportCodeChange();\n+private void removeUnusedFunctionArgs(Scope fnScope) {\n+  // If modifications to call sites are not allowed, strip unused arguments\n+  // from the end of the argument list for this function declaration.\n+  Node function = fnScope.getRootNode();\n+  Node argList = function.getFirstChild().getNext();\n+\n+  // Strip unused arguments from the end of the argument list for this\n+  // function declaration.  Also record whether the \"arguments\"\n+  // object is used within the function.  If so, we can't strip\n+  // parameters without changing the mapping of actual to formal parameters.\n+  boolean argumentsUse = NodeUtil.detectArgumentsUsage(function);\n+  if (argumentsUse) {\n+    referenced.clear();\n+    NodeTraversal.traverse(compiler, function, new GatherReferenceNodes());\n+  }\n+\n+  int childCount = argList.getChildCount();\n+  for (int i = 0; i < childCount; i++) {\n+    Node nameNode = argList.getChildAtIndex(i);\n+    boolean removeNode = true;\n+\n+    // NOTE: we never remove the first arg here, since doing so would\n+    // change the function signature.\n+    if (i > 0) {\n+      String name = nameNode.getString();\n+      Var var = fnScope.getVar(name);\n+\n+      // Prevent removal if any of the following are true:\n+      // 1. The name is one of \"$jscomp\", \"$jscomp$key\", or \"arguments\";\n+      // 2. The variable is referenced (the Name will be left in the tree,\n+      //    even if the variable definition is removed);\n+      // 3. The variable is potentially referenced (references an inner scope);\n+      // 4. The function is not specialized; or\n+      // 5. The function is not a named function expression.\n+      // We don't remove unused arg after export, because it changes the external behavior.\n+      if (!name.equals(\"$jscomp\") &&\n+          !name.equals(\"$jscomp$key\") &&\n+          !name.equals(\"arguments\") &&\n+          referenced.contains(var)\n+              && !fnScope.isVarDeclared(name)\n+              && NodeUtil.getEnclosingFunction(nameNode) == function) {\n+        if (i == childCount - 1) {\n+          // Removing the last arg, so we can remove the whole thing. Also\n+          // the \"arguments\" variable is used directly as well as indirectly,\n+          // and we can't just remove the name node.\n+          argList.removeChild(nameNode);\n         } else {\n-          break;\n+          // Remove just the one argument.\n+          argList.replaceChild(nameNode, IR.empty());\n         }\n+\n+        // Since we have mutated the syntax tree, we need to make sure any\n+        // changed scopes know about the modifications we made.\n+        compiler.reportChangeToEnclosingScope(argList);\n+\n+        // Record that the we need to optimize call sites for this function.\n+        callSiteOptimizer.recordFunctionChange(fnScope);\n+\n+        removeNode = false;\n       }\n-    } else {\n-      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+\n+    if (removeNode) {\n+      // Mark the name as undeclared, so if the argument name is referenced\n+      // inside the function, we don't treat this as an error (except JSDoc\n+      // references).\n+      nameNode.setDeclaredTypeExpression(new Node(Token.NO_TYPE));\n     }\n   }\n+}\n \n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}