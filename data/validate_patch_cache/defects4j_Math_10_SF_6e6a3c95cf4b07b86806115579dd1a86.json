{
    "patch": "import org.apache.commons.math3.exception.MathInternalError;\nimport org.apache.commons.math3.util.FastMath;\n\npublic void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // Compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] > 0.0) {\n\n        // Compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n\n    } else if (x[xOffset] < 0.0) {\n\n        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n        final double[] twoAtan = new double[getSize()];\n        for (int i = 0; i < tmp2.length; ++i) {\n            twoAtan[i] = -2 * tmp2[i]; // -2 * atan(y / (r - x))\n        }\n        result[resultOffset] = ((y[yOffset] > 0)\n                ? FastMath.PI : -FastMath.PI) + twoAtan[0]; // +/-pi - 2 * atan(y / (r - x))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = twoAtan[i]; // +/-pi - 2 * atan(y / (r - x))\n        }\n\n    } else {\n\n        if (y[yOffset] > 0.0) {\n            // x = 0 and y > 0\n            result[resultOffset] = FastMath.PI / 2.0;\n        } else if (y[yOffset] < 0.0) {\n            // x = 0 and y < 0\n            result[resultOffset] = -FastMath.PI / 2.0;\n        } else {\n            // x = 0 and y = 0\n            result[resultOffset] = Double.NaN;\n        }\n\n    }\n\n    // Handle other special cases (+0/-0, -0/+0, +/-infinity)\n    final int ix = 1 + xOffset * getSize();\n    final int iy = 1 + yOffset * getSize();\n    final int ir = 1 + 2 * getSize();\n    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n        // Either x or y is NaN\n        result[resultOffset] = Double.NaN;\n    } else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n        // Both x and y are infinite\n        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n    } else if (Double.isInfinite(y[yOffset])) {\n        // Only the y-coordinate is infinite\n        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n    } else if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n        // Both x and y are zero\n        result[resultOffset] = Double.NaN;\n    } else if ((x[ix + MANT_LEN - 1] | y[iy + MANT_LEN - 1]) == 0) {\n        // Both x and y are denormalized\n        result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n    } else if (Double.isInfinite(x[xOffset])) {\n        // Only the x-coordinate is infinite\n        result[resultOffset] = (x[xOffset] >= 0.0) ? 0.0 : FastMath.copySign(FastMath.PI, y[yOffset]);\n    } else if (x[xOffset] == 0.0) {\n        // The x-coordinate is zero\n        result[resultOffset] = (y[yOffset] >= 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n    }\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..398c2422a 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,46 +1379,91 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n+import org.apache.commons.math3.exception.MathInternalError;\n+import org.apache.commons.math3.util.FastMath;\n \n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n-            }\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // Compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (x[xOffset] > 0.0) {\n+\n+        // Compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n \n-        } else {\n+    } else if (x[xOffset] < 0.0) {\n \n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n-            }\n+        // Compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+        subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+        final double[] twoAtan = new double[getSize()];\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            twoAtan[i] = -2 * tmp2[i]; // -2 * atan(y / (r - x))\n+        }\n+        result[resultOffset] = ((y[yOffset] > 0)\n+                ? FastMath.PI : -FastMath.PI) + twoAtan[0]; // +/-pi - 2 * atan(y / (r - x))\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = twoAtan[i]; // +/-pi - 2 * atan(y / (r - x))\n+        }\n+\n+    } else {\n \n+        if (y[yOffset] > 0.0) {\n+            // x = 0 and y > 0\n+            result[resultOffset] = FastMath.PI / 2.0;\n+        } else if (y[yOffset] < 0.0) {\n+            // x = 0 and y < 0\n+            result[resultOffset] = -FastMath.PI / 2.0;\n+        } else {\n+            // x = 0 and y = 0\n+            result[resultOffset] = Double.NaN;\n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+    }\n \n+    // Handle other special cases (+0/-0, -0/+0, +/-infinity)\n+    final int ix = 1 + xOffset * getSize();\n+    final int iy = 1 + yOffset * getSize();\n+    final int ir = 1 + 2 * getSize();\n+    if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+        // Either x or y is NaN\n+        result[resultOffset] = Double.NaN;\n+    } else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+        // Both x and y are infinite\n+        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+    } else if (Double.isInfinite(y[yOffset])) {\n+        // Only the y-coordinate is infinite\n+        result[resultOffset] = (y[yOffset] > 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n+    } else if (x[xOffset] == 0.0 && y[yOffset] == 0.0) {\n+        // Both x and y are zero\n+        result[resultOffset] = Double.NaN;\n+    } else if ((x[ix + MANT_LEN - 1] | y[iy + MANT_LEN - 1]) == 0) {\n+        // Both x and y are denormalized\n+        result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n+    } else if (Double.isInfinite(x[xOffset])) {\n+        // Only the x-coordinate is infinite\n+        result[resultOffset] = (x[xOffset] >= 0.0) ? 0.0 : FastMath.copySign(FastMath.PI, y[yOffset]);\n+    } else if (x[xOffset] == 0.0) {\n+        // The x-coordinate is zero\n+        result[resultOffset] = (y[yOffset] >= 0.0) ? FastMath.PI / 2.0 : -FastMath.PI / 2.0;\n     }\n \n+}\n+\n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand\n      * @param operandOffset offset of the operand in its array",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}