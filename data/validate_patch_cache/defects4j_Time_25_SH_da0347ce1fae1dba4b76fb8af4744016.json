{
    "patch": "                if ((offsetLocal - offsetAdjusted) < 0) {\n                    // if our estimate is too big, we actually need the previous offset\n                    long prevAdjusted = previousTransition(instantAdjusted);\n                    if (prevAdjusted == instantAdjusted) {\n                        return offsetLocal;\n                    }\n                    int offsetPrev = getOffset(prevAdjusted);\n                    if (offsetPrev == offsetAdjusted) {\n                        return offsetPrev;\n                    }\n                    // handle the gap with a positive execution\n                    return offsetLocal;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..4952e6e3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,19 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if ((offsetLocal - offsetAdjusted) < 0) {\n+                    // if our estimate is too big, we actually need the previous offset\n+                    long prevAdjusted = previousTransition(instantAdjusted);\n+                    if (prevAdjusted == instantAdjusted) {\n+                        return offsetLocal;\n+                    }\n+                    int offsetPrev = getOffset(prevAdjusted);\n+                    if (offsetPrev == offsetAdjusted) {\n+                        return offsetPrev;\n+                    }\n+                    // handle the gap with a positive execution\n+                    return offsetLocal;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}