{
    "patch": "        while (lhs != null && lhs.isAssign()) {\n          Node rhs = lhs.getLastChild();\n          Node cur = lhs;\n          if (cur == usedValue) {\n            // This assignment is used as the value of the containing\n            // expression, so we need to ensure that none of the assignments\n            // in its LHS have side effects and that they don't interfere\n            // with each other (e.g. a.b()().c = ...).\n            while (true) {\n              lhsParent = lhs.getParent();\n              if (lhsParent.isGetProp() ||",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..589425a0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,17 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+        while (lhs != null && lhs.isAssign()) {\n+          Node rhs = lhs.getLastChild();\n+          Node cur = lhs;\n+          if (cur == usedValue) {\n+            // This assignment is used as the value of the containing\n+            // expression, so we need to ensure that none of the assignments\n+            // in its LHS have side effects and that they don't interfere\n+            // with each other (e.g. a.b()().c = ...).\n+            while (true) {\n+              lhsParent = lhs.getParent();\n+              if (lhsParent.isGetProp() ||\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}