{
    "patch": "      boolean isOverride = false;\n      if (t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop) {\n        Node lhs = getprop.getFirstChild();\n        Node rhs = getprop.getNext();\n        ObjectType lType = ObjectType.cast(dereference(lhs.getJSType()));\n        ObjectType rType = ObjectType.cast(dereference(rhs.getJSType()));\n        isOverride = (lType != null && rType != null && rType.isSubtype(lType));\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..43978923 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,14 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      if (t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop) {\n+        Node lhs = getprop.getFirstChild();\n+        Node rhs = getprop.getNext();\n+        ObjectType lType = ObjectType.cast(dereference(lhs.getJSType()));\n+        ObjectType rType = ObjectType.cast(dereference(rhs.getJSType()));\n+        isOverride = (lType != null && rType != null && rType.isSubtype(lType));\n+      }\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}