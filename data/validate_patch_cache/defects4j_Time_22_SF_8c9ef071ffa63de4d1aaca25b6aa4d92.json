{
    "patch": "    protected BasePeriod(long duration) {\n        super();\n        setPeriod(duration);\n    }\n\n    private void setPeriod(long duration) {\n        int weeks = 0;\n        long days = 0;\n        long hours = 0;\n        long minutes = 0;\n        long seconds = 0;\n        long millis = 0;\n\n        if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n            weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK);\n            duration -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n        }\n\n        if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n            days = duration / DateTimeConstants.MILLIS_PER_DAY;\n            duration -= days * DateTimeConstants.MILLIS_PER_DAY;\n        }\n\n        if (duration >= DateTimeConstants.MILLIS_PER_HOUR) {\n            hours = duration / DateTimeConstants.MILLIS_PER_HOUR;\n            duration -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n        }\n\n        if (duration >= DateTimeConstants.MILLIS_PER_MINUTE) {\n            minutes = duration / DateTimeConstants.MILLIS_PER_MINUTE;\n            duration -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n        }\n\n        if (duration >= DateTimeConstants.MILLIS_PER_SECOND) {\n            seconds = duration / DateTimeConstants.MILLIS_PER_SECOND;\n            duration -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n        }\n\n        if (duration > 0 || (weeks == 0 && days == 0 && hours == 0 && minutes == 0 && seconds == 0)) {\n            millis = duration;\n            if (duration - 500 >= 0) {\n                millis++;\n            }\n        }\n\n        iPeriod = new Period(weeks, 0, days, hours, minutes, seconds, millis, null);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/base/BasePeriod.java b/src/main/java/org/joda/time/base/BasePeriod.java\nindex 679b734a..578f79c7 100644\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n@@ -219,8 +219,51 @@ public abstract class BasePeriod\n      * @param duration  the duration, in milliseconds\n      */\n     protected BasePeriod(long duration) {\n-        this(duration, null, null);\n-        // bug [3264409]\n+        super();\n+        setPeriod(duration);\n+    }\n+\n+    private void setPeriod(long duration) {\n+        int weeks = 0;\n+        long days = 0;\n+        long hours = 0;\n+        long minutes = 0;\n+        long seconds = 0;\n+        long millis = 0;\n+\n+        if (duration >= DateTimeConstants.MILLIS_PER_WEEK) {\n+            weeks = (int) (duration / DateTimeConstants.MILLIS_PER_WEEK);\n+            duration -= weeks * DateTimeConstants.MILLIS_PER_WEEK;\n+        }\n+\n+        if (duration >= DateTimeConstants.MILLIS_PER_DAY) {\n+            days = duration / DateTimeConstants.MILLIS_PER_DAY;\n+            duration -= days * DateTimeConstants.MILLIS_PER_DAY;\n+        }\n+\n+        if (duration >= DateTimeConstants.MILLIS_PER_HOUR) {\n+            hours = duration / DateTimeConstants.MILLIS_PER_HOUR;\n+            duration -= hours * DateTimeConstants.MILLIS_PER_HOUR;\n+        }\n+\n+        if (duration >= DateTimeConstants.MILLIS_PER_MINUTE) {\n+            minutes = duration / DateTimeConstants.MILLIS_PER_MINUTE;\n+            duration -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+        }\n+\n+        if (duration >= DateTimeConstants.MILLIS_PER_SECOND) {\n+            seconds = duration / DateTimeConstants.MILLIS_PER_SECOND;\n+            duration -= seconds * DateTimeConstants.MILLIS_PER_SECOND;\n+        }\n+\n+        if (duration > 0 || (weeks == 0 && days == 0 && hours == 0 && minutes == 0 && seconds == 0)) {\n+            millis = duration;\n+            if (duration - 500 >= 0) {\n+                millis++;\n+            }\n+        }\n+\n+        iPeriod = new Period(weeks, 0, days, hours, minutes, seconds, millis, null);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}