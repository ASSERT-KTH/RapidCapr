{
    "patch": "if (stepSize > FastMath.abs(end - start)) {\n    stepSize = FastMath.abs(end - start);\n    if (vecAbsoluteTolerance == null) { \n        // handle scalar tolerances\n        scalAbsoluteTolerance *= stepSize / y0.length;\n    } else {\n        // handle vector tolerances\n        for (int i = 0; i < vecAbsoluteTolerance.length; ++i) {\n            vecAbsoluteTolerance[i] *= stepSize / y0.length;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\nindex 13ced27d7..923ea2c74 100644\n--- a/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n+++ b/src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java\n@@ -247,6 +247,18 @@ public abstract class EmbeddedRungeKuttaIntegrator\n         }\n \n         stepSize = hNew;\n+if (stepSize > FastMath.abs(end - start)) {\n+    stepSize = FastMath.abs(end - start);\n+    if (vecAbsoluteTolerance == null) { \n+        // handle scalar tolerances\n+        scalAbsoluteTolerance *= stepSize / y0.length;\n+    } else {\n+        // handle vector tolerances\n+        for (int i = 0; i < vecAbsoluteTolerance.length; ++i) {\n+            vecAbsoluteTolerance[i] *= stepSize / y0.length;\n+        }\n+    }\n+}\n \n         // next stages\n         for (int k = 1; k < stages; ++k) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}