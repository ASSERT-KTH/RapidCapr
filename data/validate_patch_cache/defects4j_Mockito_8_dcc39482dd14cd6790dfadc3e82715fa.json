{
    "patch": "        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        Type rawType = parameterizedType.getRawType();\n\n        if (rawType instanceof TypeVariable) {\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                Type typeArg = actualTypeArguments[i];\n                if (typeArg instanceof TypeVariable) {\n                    Type typeVar = (TypeVariable)typeArg;\n                    if (typeVar.getName().equals(rawType.getTypeName())) {\n                        actualTypeArguments[i] = Object.class;\n                    }\n                }\n            }\n        } else {\n            TypeVariable[] typeVars = ((Class<?>) rawType).getTypeParameters();\n            for (int i = 0; i < actualTypeArguments.length; i++) {\n                Type typeArg = actualTypeArguments[i];\n                if (typeArg instanceof TypeVariable) {\n                    TypeVariable typeVar = (TypeVariable)typeArg;\n                    Type typeArgResolved = contextualActualTypeParameters.get(typeVar);\n                    actualTypeArguments[i] = typeArgResolved != null ? typeArgResolved : typeArg;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..ee0472f24 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,34 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        Type rawType = parameterizedType.getRawType();\n+\n+        if (rawType instanceof TypeVariable) {\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                Type typeArg = actualTypeArguments[i];\n+                if (typeArg instanceof TypeVariable) {\n+                    Type typeVar = (TypeVariable)typeArg;\n+                    if (typeVar.getName().equals(rawType.getTypeName())) {\n+                        actualTypeArguments[i] = Object.class;\n+                    }\n+                }\n+            }\n+        } else {\n+            TypeVariable[] typeVars = ((Class<?>) rawType).getTypeParameters();\n+            for (int i = 0; i < actualTypeArguments.length; i++) {\n+                Type typeArg = actualTypeArguments[i];\n+                if (typeArg instanceof TypeVariable) {\n+                    TypeVariable typeVar = (TypeVariable)typeArg;\n+                    Type typeArgResolved = contextualActualTypeParameters.get(typeVar);\n+                    actualTypeArguments[i] = typeArgResolved != null ? typeArgResolved : typeArg;\n+                }\n+            }\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: variable parameterizedType is already defined in method registerTypeVariablesOn(Type)",
    "test_result": "ERROR"
}