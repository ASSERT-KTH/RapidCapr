{
    "patch": "// Just a 'try/catch'.\nif (n.isTry()) {\n  Node tryBlockNode = n.getFirstChild();\n  tryMinimizeExits(tryBlockNode, exitType, labelName);\n  Node catchBlockNode = NodeUtil.getCatchBlock(n);\n  if (NodeUtil.hasCatchHandler(catchBlockNode)) {\n    Preconditions.checkState(catchBlockNode.hasOneChild());\n    Node catchNode = catchBlockNode.getFirstChild();\n    Node catchCodeBlock = catchNode.getLastChild();\n    tryMinimizeExits(catchCodeBlock, exitType, labelName);\n  }\n\n  // Finally blocks are special, only enter them once.\n  Node finallyBlock = NodeUtil.getFinallyBlock(n);\n  if (finallyBlock != null) {\n    tryMinimizeExitsFinallyBlock(finallyBlock, exitType, labelName);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..7d1e9c06 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -138,10 +138,24 @@ class MinimizeExitPoints\n        * can cause problems if it changes the completion type of the finally\n        * block. See ECMA 262 Sections 8.9 & 12.14\n        */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+// Just a 'try/catch'.\n+if (n.isTry()) {\n+  Node tryBlockNode = n.getFirstChild();\n+  tryMinimizeExits(tryBlockNode, exitType, labelName);\n+  Node catchBlockNode = NodeUtil.getCatchBlock(n);\n+  if (NodeUtil.hasCatchHandler(catchBlockNode)) {\n+    Preconditions.checkState(catchBlockNode.hasOneChild());\n+    Node catchNode = catchBlockNode.getFirstChild();\n+    Node catchCodeBlock = catchNode.getLastChild();\n+    tryMinimizeExits(catchCodeBlock, exitType, labelName);\n+  }\n+\n+  // Finally blocks are special, only enter them once.\n+  Node finallyBlock = NodeUtil.getFinallyBlock(n);\n+  if (finallyBlock != null) {\n+    tryMinimizeExitsFinallyBlock(finallyBlock, exitType, labelName);\n+  }\n+}\n     }\n \n     // Just a 'label'.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}