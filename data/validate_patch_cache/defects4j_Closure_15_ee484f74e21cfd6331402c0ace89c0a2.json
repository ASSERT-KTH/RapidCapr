{
    "patch": "public boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without a return statement)\n  if (n == null) {\n    return false;\n  }\n\n  // TODO(user): We only care about calls to functions that\n  // passes one of the dependent variable to a non-side-effect free\n  // function.\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isForIn()) {\n    // Optimization for the most common case where there's only one name declared.\n    Node initializer = n.getFirstChild();\n    if (initializer.isVar()) {\n      Node name = initializer.getFirstChild();\n      if (name.getNext() == null) {\n        return false;\n      }\n      initializer = name.getNext();\n    }\n\n    // Look for a direct assignment to the name declared in the\n    // for-in loop. Only this statement can cause side-effects.\n    String name = initializer.getString();\n    Node container = n.getSecondChild();\n    for (Node c = container.getFirstChild(); c != null; c = c.getNext()) {\n      if (c.isAssign() && c.hasTwoChildren() && c.getFirstChild().matchesName(name)) {\n        return NodeUtil.isExpressionNode(c.getLastChild())\n            && NodeUtil.mayHaveSideEffects(c.getLastChild());\n      }\n    }\n    return false;\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3ec447a6 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,55 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n-        // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n-        if (n == null) {\n-          return false;\n-        }\n-\n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n-        }\n+public boolean apply(Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without a return statement)\n+  if (n == null) {\n+    return false;\n+  }\n \n-        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n-        }\n+  // TODO(user): We only care about calls to functions that\n+  // passes one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    return true;\n+  }\n \n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n \n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n-        }\n+  if (n.isForIn()) {\n+    // Optimization for the most common case where there's only one name declared.\n+    Node initializer = n.getFirstChild();\n+    if (initializer.isVar()) {\n+      Node name = initializer.getFirstChild();\n+      if (name.getNext() == null) {\n         return false;\n       }\n+      initializer = name.getNext();\n+    }\n+\n+    // Look for a direct assignment to the name declared in the\n+    // for-in loop. Only this statement can cause side-effects.\n+    String name = initializer.getString();\n+    Node container = n.getSecondChild();\n+    for (Node c = container.getFirstChild(); c != null; c = c.getNext()) {\n+      if (c.isAssign() && c.hasTwoChildren() && c.getFirstChild().matchesName(name)) {\n+        return NodeUtil.isExpressionNode(c.getLastChild())\n+            && NodeUtil.mayHaveSideEffects(c.getLastChild());\n+      }\n+    }\n+    return false;\n+  }\n+\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}