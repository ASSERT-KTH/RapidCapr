{
    "patch": "              // NOTE - there are some circumstances where we can\n              // proceed even if there are side effects...\n              // if the LHS is not a global because globals aren't\n              // changed by function inlining, or if x is a parameter.\n              (NodeUtil.isImmutableValue(lhs) || lhs.isName() &&\n                  (lhs.getString().charAt(0) != '$' || NodeUtil.isFunction(parent))) &&\n              // if we are not inside a hook, or if we can be certain\n              // that the hook will always be evaluated.\n              NodeUtil.isExpressionNode(parent) && isSafeToInlineValue(lhs)) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..4712ec82 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,15 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+              // NOTE - there are some circumstances where we can\n+              // proceed even if there are side effects...\n+              // if the LHS is not a global because globals aren't\n+              // changed by function inlining, or if x is a parameter.\n+              (NodeUtil.isImmutableValue(lhs) || lhs.isName() &&\n+                  (lhs.getString().charAt(0) != '$' || NodeUtil.isFunction(parent))) &&\n+              // if we are not inside a hook, or if we can be certain\n+              // that the hook will always be evaluated.\n+              NodeUtil.isExpressionNode(parent) && isSafeToInlineValue(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}