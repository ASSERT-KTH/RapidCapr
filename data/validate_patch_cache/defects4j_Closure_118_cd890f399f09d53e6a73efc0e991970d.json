{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isString()) { // Check if the child is a string literal only\n      String name = child.getString();\n      T type = typeSystem.getType(getScope(), n, name);\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(\n              JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n                           Warnings.INVALIDATION, name,\n                           (type == null ? \"null\" : type.toString()),\n                           n.toString(), \"\"));\n        }\n      }\n    }\n    else if (child.isComputedProp()) {\n      // For computed properties, get their type information from the objects they operate on.\n      T type = typeSystem.getType(getScope(), n);\n      Node key = child.getLastChild();\n      Property prop = getProperty(key);\n      if (!prop.scheduleRenaming(key, processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(key.toString())) {\n          compiler.report(\n              JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(key.toString()),\n                           Warnings.INVALIDATION, key.toString(),\n                           (type == null ? \"null\" : type.toString()),\n                           n.toString(), \"\"));\n        }\n      }\n    }\n    else if (child.isGetterDef() || child.isSetterDef()) {\n      this.handleObjectMethod(child);\n    } else if (child.isSpread()) {\n      this.handleObjectSpread(child);\n    } else {\n      t.report(child, UNSUPPORTED_OBJECT_LIT_KEY_NODE_TYPE);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..ef2575f3 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,50 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isString()) { // Check if the child is a string literal only\n+      String name = child.getString();\n+      T type = typeSystem.getType(getScope(), n, name);\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(\n+              JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(name),\n+                           Warnings.INVALIDATION, name,\n+                           (type == null ? \"null\" : type.toString()),\n+                           n.toString(), \"\"));\n+        }\n+      }\n+    }\n+    else if (child.isComputedProp()) {\n+      // For computed properties, get their type information from the objects they operate on.\n+      T type = typeSystem.getType(getScope(), n);\n+      Node key = child.getLastChild();\n+      Property prop = getProperty(key);\n+      if (!prop.scheduleRenaming(key, processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(key.toString())) {\n+          compiler.report(\n+              JSError.make(t.getSourceName(), child, propertiesToErrorFor.get(key.toString()),\n+                           Warnings.INVALIDATION, key.toString(),\n+                           (type == null ? \"null\" : type.toString()),\n+                           n.toString(), \"\"));\n+        }\n+      }\n+    }\n+    else if (child.isGetterDef() || child.isSetterDef()) {\n+      this.handleObjectMethod(child);\n+    } else if (child.isSpread()) {\n+      this.handleObjectSpread(child);\n+    } else {\n+      t.report(child, UNSUPPORTED_OBJECT_LIT_KEY_NODE_TYPE);\n+    }\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}