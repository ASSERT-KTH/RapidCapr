{
    "patch": "          ) &&\n          (NodeUtil.isPrototypeProperty(n.getParent())\n            || (n.getParent().getType() == Token.FUNCTION && n == n.getParent().getFirstChild())\n            || (n.getParent().getType() == Token.VAR && n == n.getParent().getFirstChild().getFirstChild()))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..16bda0f9 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,14 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          ) &&\n+          (NodeUtil.isPrototypeProperty(n.getParent())\n+            || (n.getParent().getType() == Token.FUNCTION && n == n.getParent().getFirstChild())\n+            || (n.getParent().getType() == Token.VAR && n == n.getParent().getFirstChild().getFirstChild()))) {\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}