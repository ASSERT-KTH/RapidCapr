{
    "patch": " return (n.isCall() && n.getFirstChild().isName() && !n.getFirstChild().getString().isEmpty())\n      || (NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..da84c8e0 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,8 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+ return (n.isCall() && n.getFirstChild().isName() && !n.getFirstChild().getString().isEmpty())\n+      || (NodeUtil.isFunctionExpression(n) && NodeUtil.getFunctionName(n) != null);\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}