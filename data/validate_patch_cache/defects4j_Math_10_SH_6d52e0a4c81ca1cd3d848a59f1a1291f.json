{
    "patch": "        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n        if(Double.isNaN(result[resultOffset])) {\n            // Special case for NaN\n            for (int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = Double.NaN;\n            }\n        } else if(x[xOffset] == 0 && y[yOffset] == 0) {\n            // Special case for +0/+0\n            for(int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(0.0) &&\n                        Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(0.0)) ? 0.0 : Double.NaN;\n            }\n        } else if(x[xOffset] > 0 && Double.isInfinite(y[yOffset])) {\n            // Special case for +0/-0\n            for(int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = -0.0;\n            }\n        } else if(x[xOffset] < 0 && Double.isInfinite(y[yOffset])) {\n            // Special case for -0/-0\n            for(int i = 0; i < result.length; i++) {\n                result[resultOffset + i] = FastMath.copySign(0.0, -1.0);\n            }\n        } else {\n            // standard case\n            atan2(y, yOffset, x, xOffset, result, resultOffset);\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..1fd23d242 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,32 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        if(Double.isNaN(result[resultOffset])) {\n+            // Special case for NaN\n+            for (int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = Double.NaN;\n+            }\n+        } else if(x[xOffset] == 0 && y[yOffset] == 0) {\n+            // Special case for +0/+0\n+            for(int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = (Double.doubleToLongBits(x[xOffset]) == Double.doubleToLongBits(0.0) &&\n+                        Double.doubleToLongBits(y[yOffset]) == Double.doubleToLongBits(0.0)) ? 0.0 : Double.NaN;\n+            }\n+        } else if(x[xOffset] > 0 && Double.isInfinite(y[yOffset])) {\n+            // Special case for +0/-0\n+            for(int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = -0.0;\n+            }\n+        } else if(x[xOffset] < 0 && Double.isInfinite(y[yOffset])) {\n+            // Special case for -0/-0\n+            for(int i = 0; i < result.length; i++) {\n+                result[resultOffset + i] = FastMath.copySign(0.0, -1.0);\n+            }\n+        } else {\n+            // standard case\n+            atan2(y, yOffset, x, xOffset, result, resultOffset);\n+        }\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}