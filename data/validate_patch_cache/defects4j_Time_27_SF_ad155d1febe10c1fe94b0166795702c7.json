{
    "patch": "    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n        if (notPrinter && notParser) {\n            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n        }\n\n        PeriodPrinter printer = null;\n        PeriodParser parser = null;\n        boolean printerInUse = true;\n        boolean parserInUse = true;\n\n        for (Object pair : elementPairs) {\n            if (pair instanceof Separator) {\n                Separator sep = (Separator) pair;\n\n                PeriodFormatter f = toFormatter(elementPairs.subList(elementPairs.indexOf(pair) + 1, elementPairs.size()), notPrinter || !printerInUse, notParser || !parserInUse);\n\n                sep = sep.finish(f.getPrinter(), f.getParser());\n\n                if (printer == null) {\n                    printer = f.getPrinter();\n                }\n                if (parser == null) {\n                    parser = f.getParser();\n                }\n\n                printer = new Composite printerInUse ? printer : null, sep, printerInUse ? null : f.getPrinter());\n                parser = new Composite parserInUse ? parser : null, sep, parserInUse ? null : f.getParser());\n\n                printerInUse = parserInUse = false;\n            } else {\n                AbstractPeriodFormatter element = (AbstractPeriodFormatter) pair;\n                if (element instanceof Composite) {\n                    Composite comp = (Composite) element;\n                    if (!notPrinter) {\n                        printer = printerInUse ? printer : null;\n                        printer = new Composite(printer, comp.getPrinter());\n                    }\n                    if (!notParser) {\n                        parser = parserInUse ? parser : null;\n                        parser = new Composite(parser, comp.getParser());\n                    }\n                } else {\n                    if (!notPrinter && printerInUse) {\n                        printer = element;\n                    }\n                    if (!notParser && parserInUse) {\n                        parser = element;\n                    }\n                }\n            }\n        }\n\n        return new PeriodFormatter(printer, parser);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..ad43fe49 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -795,21 +795,55 @@ public class PeriodFormatterBuilder {\n         if (notPrinter && notParser) {\n             throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n         }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n+\n+        PeriodPrinter printer = null;\n+        PeriodParser parser = null;\n+        boolean printerInUse = true;\n+        boolean parserInUse = true;\n+\n+        for (Object pair : elementPairs) {\n+            if (pair instanceof Separator) {\n+                Separator sep = (Separator) pair;\n+\n+                PeriodFormatter f = toFormatter(elementPairs.subList(elementPairs.indexOf(pair) + 1, elementPairs.size()), notPrinter || !printerInUse, notParser || !parserInUse);\n+\n                 sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+\n+                if (printer == null) {\n+                    printer = f.getPrinter();\n+                }\n+                if (parser == null) {\n+                    parser = f.getParser();\n+                }\n+\n+                printer = new Composite printerInUse ? printer : null, sep, printerInUse ? null : f.getPrinter());\n+                parser = new Composite parserInUse ? parser : null, sep, parserInUse ? null : f.getParser());\n+\n+                printerInUse = parserInUse = false;\n+            } else {\n+                AbstractPeriodFormatter element = (AbstractPeriodFormatter) pair;\n+                if (element instanceof Composite) {\n+                    Composite comp = (Composite) element;\n+                    if (!notPrinter) {\n+                        printer = printerInUse ? printer : null;\n+                        printer = new Composite(printer, comp.getPrinter());\n+                    }\n+                    if (!notParser) {\n+                        parser = parserInUse ? parser : null;\n+                        parser = new Composite(parser, comp.getParser());\n+                    }\n+                } else {\n+                    if (!notPrinter && printerInUse) {\n+                        printer = element;\n+                    }\n+                    if (!notParser && parserInUse) {\n+                        parser = element;\n+                    }\n+                }\n+            }\n         }\n+\n+        return new PeriodFormatter(printer, parser);\n     }\n \n     private static Object[] createComposite(List<Object> elementPairs) {",
    "result_reason": "error: '(' or '[' expected",
    "test_result": "ERROR"
}