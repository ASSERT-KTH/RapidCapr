{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return Arrays.copyOf(values, values.length);\n        }\n        // month is largest field and being added to, such as month-day\n        if (DateTimeUtils.isContiguous(partial)) {\n            Chronology chrono = DateTimeUtils.getChronology(partial.getChronology());\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                DateTimeField field = partial.getFieldType(i).getField(chrono);\n                int value = values[i];\n                if (i == 1 && fieldIndex == 0) {\n                    // input is month-day, and adding to month.\n                    // need to avoid overflowing into March\n                    int day = partial.getFieldType(1).getField(chrono).get(instant);\n                    int maxDay = field.getMaximumValue(instant);\n                    if (day > maxDay) {\n                        // day-of-month is too large for new month, reduce to last day\n                        // of new month. by setting millis to zero, time of day does\n                        // not overflow or become illegal.\n                        instant = field.set(instant, maxDay);\n                        instant = chrono.dayOfMonth().roundFloor(instant);\n                    }\n                }\n                instant = field.set(instant, value);\n            }\n            instant = add(instant, valueToAdd);\n            return chrono.get(partial, instant);\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..35fe6807 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,20 +200,36 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n         // overridden as superclass algorithm can't handle\n         // 2004-02-29 + 48 months -> 2008-02-29 type dates\n         if (valueToAdd == 0) {\n-            return values;\n+            return Arrays.copyOf(values, values.length);\n         }\n-            // month is largest field and being added to, such as month-day\n+        // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n+            Chronology chrono = DateTimeUtils.getChronology(partial.getChronology());\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+                DateTimeField field = partial.getFieldType(i).getField(chrono);\n+                int value = values[i];\n+                if (i == 1 && fieldIndex == 0) {\n+                    // input is month-day, and adding to month.\n+                    // need to avoid overflowing into March\n+                    int day = partial.getFieldType(1).getField(chrono).get(instant);\n+                    int maxDay = field.getMaximumValue(instant);\n+                    if (day > maxDay) {\n+                        // day-of-month is too large for new month, reduce to last day\n+                        // of new month. by setting millis to zero, time of day does\n+                        // not overflow or become illegal.\n+                        instant = field.set(instant, maxDay);\n+                        instant = chrono.dayOfMonth().roundFloor(instant);\n+                    }\n+                }\n+                instant = field.set(instant, value);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            return chrono.get(partial, instant);\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}