{
    "patch": "LocalDateTime dateTime = LocalDate.of(iDefaultYear, 1, 1).atStartOfDay().toLocalDateTime();\nfor (SavedField field : savedFields) {\n    try {\n        dateTime = field.iField.getField(iChrono).set(dateTime, field.restoreValue());\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n}\nmillis = dateTime.toDateTime(DateTimeZone.UTC).getMillis() - DateTimeConstants.MILLIS_PER_DAY;\nif (iZone == null) {\n    millis -= iOffset;\n} else {\n    millis += iZone.getOffset(millis);\n    if (iZone.getOffset(millis) != iZone.getOffset(millis - iOffset)) {\n        String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n        if (text != null) {\n            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n        }\n        throw new IllegalArgumentException(message);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..3498643e 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,30 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+LocalDateTime dateTime = LocalDate.of(iDefaultYear, 1, 1).atStartOfDay().toLocalDateTime();\n+for (SavedField field : savedFields) {\n+    try {\n+        dateTime = field.iField.getField(iChrono).set(dateTime, field.restoreValue());\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+}\n+millis = dateTime.toDateTime(DateTimeZone.UTC).getMillis() - DateTimeConstants.MILLIS_PER_DAY;\n+if (iZone == null) {\n+    millis -= iOffset;\n+} else {\n+    millis += iZone.getOffset(millis);\n+    if (iZone.getOffset(millis) != iZone.getOffset(millis - iOffset)) {\n+        String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+        if (text != null) {\n+            message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+        }\n+        throw new IllegalArgumentException(message);\n+    }\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}