{
    "patch": "import org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.MatrixUtils;\nimport org.apache.commons.math3.linear.RealMatrix;\nimport org.apache.commons.math3.linear.SingularValueDecomposition;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n    final double[] s = svd.getSingularValues();\n\n    // Replace negative or zero singular values with a small positive value\n    for (int i = 0; i < s.length; i++) {\n        if (s[i] <= 0.0) {\n            s[i] = Math.ulp(1.0);\n        }\n    }\n\n    // Compute the square root matrix of singular values\n    for (int i = 0; i < s.length; i++) {\n        s[i] = Math.sqrt(s[i]);\n    }\n\n    RealMatrix squareRoot = svd.getV().scalarMultiply(1/s[0]).multiply(s[0]).multiply(svd.getU().transpose().scalarMultiply(1/s[0]));\n    for (int i = 1; i < s.length; i++) {\n        RealMatrix siMatrix = MatrixUtils.createRealIdentityMatrix(svd.getU().getRowDimension());\n        for (int j = 0; j < s.length; j++) {\n            siMatrix.setEntry(j, j, s[i]);\n        }\n        squareRoot = squareRoot.add(svd.getV().getSubMatrix(0, svd.getV().getRowDimension()-1, i, i).multiply(siMatrix).multiply(svd.getU().getSubMatrix(0, svd.getU().getRowDimension()-1, i, i).transpose()));\n    }\n\n    return squareRoot;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..0c343ae3f 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,36 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.MatrixUtils;\n+import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.linear.SingularValueDecomposition;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SingularValueDecomposition svd = new SingularValueDecomposition(m);\n+    final double[] s = svd.getSingularValues();\n+\n+    // Replace negative or zero singular values with a small positive value\n+    for (int i = 0; i < s.length; i++) {\n+        if (s[i] <= 0.0) {\n+            s[i] = Math.ulp(1.0);\n+        }\n     }\n+\n+    // Compute the square root matrix of singular values\n+    for (int i = 0; i < s.length; i++) {\n+        s[i] = Math.sqrt(s[i]);\n+    }\n+\n+    RealMatrix squareRoot = svd.getV().scalarMultiply(1/s[0]).multiply(s[0]).multiply(svd.getU().transpose().scalarMultiply(1/s[0]));\n+    for (int i = 1; i < s.length; i++) {\n+        RealMatrix siMatrix = MatrixUtils.createRealIdentityMatrix(svd.getU().getRowDimension());\n+        for (int j = 0; j < s.length; j++) {\n+            siMatrix.setEntry(j, j, s[i]);\n+        }\n+        squareRoot = squareRoot.add(svd.getV().getSubMatrix(0, svd.getV().getRowDimension()-1, i, i).multiply(siMatrix).multiply(svd.getU().getSubMatrix(0, svd.getU().getRowDimension()-1, i, i).transpose()));\n+    }\n+\n+    return squareRoot;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}