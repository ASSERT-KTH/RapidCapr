{
    "patch": "    public double[] fit() {\n        final double[] guess = (new ParameterGuesser(getObservations())).guess();\n        if (guess[1] <= 0) {\n            guess[1] = Math.abs(guess[1]) + Double.MIN_VALUE;\n        }\n        Gaussian.Parametric function = new Gaussian.Parametric() {\n            public double density(double x, double... p) {\n                double diff = x - p[0];\n                return p[2] * FastMath.exp(-0.5 * diff * diff / (p[1] * p[1])) + p[3];\n            }\n        };\n        return fit(function, guess);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..e113a74f2 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,16 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        if (guess[1] <= 0) {\n+            guess[1] = Math.abs(guess[1]) + Double.MIN_VALUE;\n+        }\n+        Gaussian.Parametric function = new Gaussian.Parametric() {\n+            public double density(double x, double... p) {\n+                double diff = x - p[0];\n+                return p[2] * FastMath.exp(-0.5 * diff * diff / (p[1] * p[1])) + p[3];\n+            }\n+        };\n+        return fit(function, guess);\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}