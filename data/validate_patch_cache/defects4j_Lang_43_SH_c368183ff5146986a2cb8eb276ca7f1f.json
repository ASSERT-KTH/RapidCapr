{
    "patch": "        int lastHold = start;\n        boolean insideQuotedString = false;\n        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n                if (insideQuotedString) {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n                            QUOTE);\n                } else {\n                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                            ESCAPED_QUOTE);\n                }\n                pos.setIndex(i + ESCAPED_QUOTE.length());\n                lastHold = pos.getIndex();\n                continue;\n            }\n            switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                insideQuotedString = !insideQuotedString;\n                break;\n            default:\n                next(pos);\n            }\n            if (!insideQuotedString) {\n                return appendTo == null ? null : appendTo.append(c, start,\n                        pos.getIndex() - start);\n            }\n        }\n        throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\nindex 404be490..0f3f2dc6 100644\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n@@ -419,6 +419,36 @@ public class ExtendedMessageFormat extends MessageFormat {\n         int start = pos.getIndex();\n         char[] c = pattern.toCharArray();\n         if (escapingOn && c[start] == QUOTE) {\n+        int lastHold = start;\n+        boolean insideQuotedString = false;\n+        for (int i = pos.getIndex(); i < pattern.length(); i++) {\n+            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {\n+                if (insideQuotedString) {\n+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold - 1).append(\n+                            QUOTE);\n+                } else {\n+                    appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n+                            ESCAPED_QUOTE);\n+                }\n+                pos.setIndex(i + ESCAPED_QUOTE.length());\n+                lastHold = pos.getIndex();\n+                continue;\n+            }\n+            switch (c[pos.getIndex()]) {\n+            case QUOTE:\n+                next(pos);\n+                insideQuotedString = !insideQuotedString;\n+                break;\n+            default:\n+                next(pos);\n+            }\n+            if (!insideQuotedString) {\n+                return appendTo == null ? null : appendTo.append(c, start,\n+                        pos.getIndex() - start);\n+            }\n+        }\n+        throw new IllegalArgumentException(\n+                \"Unterminated quoted string at position \" + start);\n             return appendTo == null ? null : appendTo.append(QUOTE);\n         }\n         int lastHold = start;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}