{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node lhs = assign.getFirstChild();\n      Node rhs = assign.getLastChild();\n\n      if (lhs == null || rhs == null) {\n        return false;\n      }\n\n      if (lhs.getType() == Token.GETPROP) {\n        Node propAccess = lhs.getFirstChild();\n        Node prop = lhs.getLastChild();\n        if (propAccess == null || prop == null ||\n            !propAccess.matchesQualifiedName(\"prototype\") ||\n            !rhs.isFunction()) {\n          return false;\n        }\n        return true;\n      }\n\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..ee63f557 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -312,22 +312,22 @@ class AnalyzePrototypeProperties implements CompilerPass {\n     }\n \n     private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n+      Node lhs = assign.getFirstChild();\n+      Node rhs = assign.getLastChild();\n+\n+      if (lhs == null || rhs == null) {\n+        return false;\n+      }\n+\n+      if (lhs.getType() == Token.GETPROP) {\n+        Node propAccess = lhs.getFirstChild();\n+        Node prop = lhs.getLastChild();\n+        if (propAccess == null || prop == null ||\n+            !propAccess.matchesQualifiedName(\"prototype\") ||\n+            !rhs.isFunction()) {\n+          return false;\n         }\n+        return true;\n       }\n \n       return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}