{
    "patch": "  private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override an existing property?\n      boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility information.\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n      }\n\n      JSDocInfo docInfo = null;\n      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n\n        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n          // If trying to override and visibility is private\n          if (isOverride && docInfo.getVisibility() == Visibility.PRIVATE) {\n            compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_OVERRIDE, propertyName, objectType.toString()));\n          }\n\n          break;\n        }\n      }\n\n      if (objectType == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n\n      if (isOverride) {\n        // Check if the visibility of the override is the same as that of the original property.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n          compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(\n                  getprop,\n                  VISIBILITY_MISMATCH,\n                  visibility.name(),\n                  objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (sameInput) {\n          // Private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n          // If this is not the same class, a constructor, or in the global scope, report error.\n          if (!isValidPrivateMemberAccess(parent)) {\n            compiler.report(\n                t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(\n                    getprop,\n                    BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..78892009 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,30 +404,29 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+  private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+    ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n     if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n+      // Is this a normal property access, or are we trying to override an existing property?\n+      boolean isOverride = t.inGlobalScope() && parent.getType() == Token.ASSIGN && parent.getFirstChild() == getprop;\n+\n+      // Find the lowest property defined on a class with visibility information.\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n       }\n+\n       JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n+      for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+\n+        if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) {\n+          // If trying to override and visibility is private\n+          if (isOverride && docInfo.getVisibility() == Visibility.PRIVATE) {\n+            compiler.report(t.makeError(getprop, BAD_PRIVATE_PROPERTY_OVERRIDE, propertyName, objectType.toString()));\n+          }\n+\n           break;\n         }\n       }\n@@ -437,50 +436,36 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n+      boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName());\n       Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n+\n       if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n+        // Check if the visibility of the override is the same as that of the original property.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+        Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();\n \n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n         if (visibility == Visibility.PRIVATE && !sameInput) {\n+          compiler.report(t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString()));\n+        } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) {\n           compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n+              t.makeError(\n+                  getprop,\n+                  VISIBILITY_MISMATCH,\n+                  visibility.name(),\n+                  objectType.toString(),\n                   overridingVisibility.name()));\n         }\n       } else {\n         if (sameInput) {\n-          // private access is always allowed in the same file.\n+          // Private access is always allowed in the same file.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n-            return;\n+        } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) {\n+          // If this is not the same class, a constructor, or in the global scope, report error.\n+          if (!isValidPrivateMemberAccess(parent)) {\n+            compiler.report(\n+                t.makeError(getprop, BAD_PRIVATE_PROPERTY_ACCESS, propertyName, validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n           }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n         } else if (visibility == Visibility.PROTECTED) {\n           // There are 3 types of legal accesses of a protected property:\n           // 1) Accesses in the same file\n@@ -489,10 +474,11 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // The first two have already been checked for.\n           if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n+                t.makeError(\n+                    getprop,\n+                    BAD_PROTECTED_PROPERTY_ACCESS,\n                     propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n+                    validator.getReadableJSTypeName(getprop.getFirstChild(), true)));\n           }\n         }\n       }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}