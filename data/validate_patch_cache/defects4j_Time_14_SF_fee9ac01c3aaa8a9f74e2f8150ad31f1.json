{
    "patch": "    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n        // overridden as superclass algorithm can't handle\n        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n        if (valueToAdd == 0) {\n            return values;\n        }\n        if (DateTimeUtils.isContiguous(partial)) {\n            long instant = 0L;\n            for (int i = 0, isize = partial.size(); i < isize; i++) {\n                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n            }\n            instant = add(instant, valueToAdd);\n            try {\n                return iChronology.get(partial, instant);\n            } catch (IllegalFieldValueException ex) {\n                // special case handling for leap years and february\n                if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == DateTimeConstants.FEBRUARY &&\n                    DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29 &&\n                    !iChronology.isLeapYear(DateTimeFieldType.year().getField(iChronology).get(instant))) {\n                    // move to last day of february\n                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).add(instant, -1);\n                    // keep adding months\n                    instant = add(instant, valueToAdd);\n                    // move to correct day of month\n                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, 29);\n                    return iChronology.get(partial, instant);\n                } else {\n                    throw ex;\n                }\n            }\n        } else {\n            return super.add(partial, fieldIndex, values, valueToAdd);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..b5c4de9d 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -206,14 +206,30 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n         if (valueToAdd == 0) {\n             return values;\n         }\n-            // month is largest field and being added to, such as month-day\n         if (DateTimeUtils.isContiguous(partial)) {\n             long instant = 0L;\n             for (int i = 0, isize = partial.size(); i < isize; i++) {\n                 instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n             }\n             instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            try {\n+                return iChronology.get(partial, instant);\n+            } catch (IllegalFieldValueException ex) {\n+                // special case handling for leap years and february\n+                if (DateTimeFieldType.monthOfYear().getField(iChronology).get(instant) == DateTimeConstants.FEBRUARY &&\n+                    DateTimeFieldType.dayOfMonth().getField(iChronology).get(instant) == 29 &&\n+                    !iChronology.isLeapYear(DateTimeFieldType.year().getField(iChronology).get(instant))) {\n+                    // move to last day of february\n+                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).add(instant, -1);\n+                    // keep adding months\n+                    instant = add(instant, valueToAdd);\n+                    // move to correct day of month\n+                    instant = DateTimeFieldType.dayOfMonth().getField(iChronology).set(instant, 29);\n+                    return iChronology.get(partial, instant);\n+                } else {\n+                    throw ex;\n+                }\n+            }\n         } else {\n             return super.add(partial, fieldIndex, values, valueToAdd);\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}