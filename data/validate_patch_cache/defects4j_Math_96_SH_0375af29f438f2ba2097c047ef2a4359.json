{
    "patch": "if (other instanceof Complex) {\n    double otherReal = ((Complex) other).getReal();\n    double otherImaginary = ((Complex) other).getImaginary();\n    boolean realEquals = Double.compare(real, otherReal) == 0;\n    boolean imaginaryEquals = Double.compare(imaginary, otherImaginary) == 0;\n    ret = realEquals && imaginaryEquals;\n    if (!ret) {\n        if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(otherReal) || Double.isNaN(otherImaginary)) {\n            ret = this.isNaN() && ((Complex) other).isNaN();\n        } else if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(otherReal) || Double.isInfinite(otherImaginary)) {\n            ret = (real == otherReal) && (imaginary == otherImaginary);\n        } else {\n            doubl",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..e8e15777d 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,19 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+if (other instanceof Complex) {\n+    double otherReal = ((Complex) other).getReal();\n+    double otherImaginary = ((Complex) other).getImaginary();\n+    boolean realEquals = Double.compare(real, otherReal) == 0;\n+    boolean imaginaryEquals = Double.compare(imaginary, otherImaginary) == 0;\n+    ret = realEquals && imaginaryEquals;\n+    if (!ret) {\n+        if (Double.isNaN(real) || Double.isNaN(imaginary) || Double.isNaN(otherReal) || Double.isNaN(otherImaginary)) {\n+            ret = this.isNaN() && ((Complex) other).isNaN();\n+        } else if (Double.isInfinite(real) || Double.isInfinite(imaginary) || Double.isInfinite(otherReal) || Double.isInfinite(otherImaginary)) {\n+            ret = (real == otherReal) && (imaginary == otherImaginary);\n+        } else {\n+            doubl\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}