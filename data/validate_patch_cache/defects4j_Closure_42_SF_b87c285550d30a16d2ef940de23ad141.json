{
    "patch": "import com.google.javascript.jscomp.CheckLevel;\nimport com.google.javascript.jscomp.CompilerOptions;\nimport com.google.javascript.jscomp.DiagnosticGroups;\nimport com.google.javascript.jscomp.testing.TestErrorReporter;\nimport org.junit.Test;\n\nimport static com.google.javascript.jscomp.CompilerTestCase.DEFAULT_EXTERNS;\n\npublic class MyTest extends CompilerTestCase {\n\n  private final TestErrorReporter testErrorReporter = new TestErrorReporter();\n\n  @Override\n  protected CompilerOptions getOptions() {\n    CompilerOptions options = super.getOptions();\n    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n    return options;\n  }\n\n  public MyTest() {\n    super(DEFAULT_EXTERNS);\n  }\n\n  @Test\n  public void testForEach() {\n    test(\n        \"for (var x in [1,2,3]) { if (x == 2) { continue; } }\",\n        \"var x;for(x in[1,2,3])x==2;\",\n        false /* expect changes */,\n        null /* expectedWarnings */,\n        testErrorReporter);\n    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..9f80375a 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -473,106 +473,40 @@ class IRFactory {\n       }\n     }\n \n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n+import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.DiagnosticGroups;\n+import com.google.javascript.jscomp.testing.TestErrorReporter;\n+import org.junit.Test;\n \n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n+import static com.google.javascript.jscomp.CompilerTestCase.DEFAULT_EXTERNS;\n \n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n+public class MyTest extends CompilerTestCase {\n \n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n+  private final TestErrorReporter testErrorReporter = new TestErrorReporter();\n \n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n+  @Override\n+  protected CompilerOptions getOptions() {\n+    CompilerOptions options = super.getOptions();\n+    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);\n+    return options;\n+  }\n \n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n+  public MyTest() {\n+    super(DEFAULT_EXTERNS);\n+  }\n \n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+  @Test\n+  public void testForEach() {\n+    test(\n+        \"for (var x in [1,2,3]) { if (x == 2) { continue; } }\",\n+        \"var x;for(x in[1,2,3])x==2;\",\n+        false /* expect changes */,\n+        null /* expectedWarnings */,\n+        testErrorReporter);\n+    assertTrue(testErrorReporter.hasEncounteredAllErrors());\n+  }\n+}\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}