{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      for (Reference ref : refs) {\n        Node name = ref.getNode();\n        Node parent = ref.getParent();\n        Node grandparent = ref.getGrandparent();\n\n        // Ignores indirect references like x.y (but not x.y(),\n        // since the function referenced by y might reference 'this').\n        if (parent.isGetProp()) {\n          Preconditions.checkState(parent.getFirstChild() == name);\n\n          // A call target may be using the object as a 'this' value.\n          // Disallow inlining for such cases.\n          if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n            return false;\n          }\n\n          // Check if the property belongs to an object literal.\n          if (!isPropertyOfObjectLiteral(parent, refs)) {\n            return false;\n          }\n\n          continue;\n        }\n\n        // Only rewrite VAR declarations or simple assignment statements.\n        if (!isVarOrAssignExprLhs(name)) {\n          return false;\n        }\n\n        Node val = ref.getAssignedValue();\n        if (val == null || !val.isObjectLit()) {\n          continue;\n        }\n\n        // Check if the value is not self-referential. IOW,\n        // disallow things like x = {b: x.a}.\n        // Also, ES5 getters/setters aren't handled.\n        for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            return false;\n          }\n\n          Node childVal = child.getFirstChild();\n\n          // Check if childVal is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference t : refs) {\n            if (t.getParent() == null || !NodeUtil.isStatementBlock(t.getParent())) {\n              continue;\n            }\n\n            Node refNode = t.getParent().getFirstChild();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childVal) {\n                // There's a self-referential assignment.\n                return false;\n              }\n\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment.\n        return true;\n      }\n      return false;\n    }\n\n    private boolean isPropertyOfObjectLiteral(Node getPropNode, List<Reference> refs) {\n      if (getPropNode == null || !getPropNode.isGetProp()) {\n        return false;\n      }\n\n      String propName = getPropNode.getLastChild().getString();\n      Node parent = getPropNode.getParent();\n\n      if (parent.isAssign()) {\n        return parent.getFirstChild() == getPropNode\n            && parent.getFirstChild().isGetProp()\n            && parent.getFirstChild().getLastChild().getString().equals(propName)\n            && parent.getSecondChild().isObjectLit()\n            && !isSelfReferential(parent.getSecondChild(), refs);\n      }\n\n      if (parent.isExprResult()) {\n        return parent.getFirstChild() == getPropNode\n            && parent.getFirstChild().isGetProp()\n            && parent.getFirstChild().getLastChild().getString().equals(propName)\n            && parent.getFirstChild().getNext().isObjectLit()\n            && !isSelfReferential(parent.getFirstChild().getNext(), refs);\n      }\n\n      return false;\n    }\n\n    private boolean isSelfReferential(Node objLit, List<Reference> refs) {\n      if (objLit == null || !objLit.isObjectLit()) {\n        return false;\n      }\n\n      for (Node child = objLit.getFirstChild(); child != null; child = child.getNext()) {\n        if (child.isGetterDef() || child.isSetterDef()) {\n          return true;\n        }\n\n        Node childVal = child.getFirstChild();\n\n        // Check if childVal is the parent of any of the passed in\n        // references, as that is how self-referential assignments\n        // will happen.\n        for (Reference t : refs) {\n          if (t.getParent() == null || !NodeUtil.isStatementBlock(t.getParent())) {\n            continue;\n          }\n\n          Node refNode = t.getParent().getFirstChild();\n          while (!NodeUtil.isStatementBlock(refNode)) {\n            if (refNode == childVal) {\n              // There's a self-referential assignment.\n              return true;\n            }\n\n            refNode = refNode.getParent();\n          }\n        }\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..0612c108 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -153,103 +153,136 @@ class InlineObjectLiterals implements CompilerPass {\n      * </pre>\n      */\n     private boolean isInlinableObject(List<Reference> refs) {\n-      boolean ret = false;\n-      Set<String> validProperties = Sets.newHashSet();\n       for (Reference ref : refs) {\n         Node name = ref.getNode();\n         Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n+        Node grandparent = ref.getGrandparent();\n \n-        // Ignore most indirect references, like x.y (but not x.y(),\n+        // Ignores indirect references like x.y (but not x.y(),\n         // since the function referenced by y might reference 'this').\n-        //\n         if (parent.isGetProp()) {\n           Preconditions.checkState(parent.getFirstChild() == name);\n+\n           // A call target may be using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n+          // Disallow inlining for such cases.\n+          if (grandparent.isCall() && grandparent.getFirstChild() == parent) {\n             return false;\n           }\n \n-          // Deleting a property has different semantics from deleting\n-          // a variable, so deleted properties should not be inlined.\n-\n-          // NOTE(nicksantos): This pass's object-splitting algorithm has\n-          // a blind spot. It assumes that if a property isn't defined on an\n-          // object, then the value is undefined. This is not true, because\n-          // Object.prototype can have arbitrary properties on it.\n-          //\n-          // We short-circuit this problem by bailing out if we see a reference\n-          // to a property that isn't defined on the object literal. This\n-          // isn't a perfect algorithm, but it should catch most cases.\n-          String propName = parent.getLastChild().getString();\n-          if (!validProperties.contains(propName)) {\n-            if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n-              validProperties.add(propName);\n-            } else {\n-              return false;\n-            }\n+          // Check if the property belongs to an object literal.\n+          if (!isPropertyOfObjectLiteral(parent, refs)) {\n+            return false;\n           }\n+\n           continue;\n         }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n+        // Only rewrite VAR declarations or simple assignment statements.\n         if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+          return false;\n         }\n \n         Node val = ref.getAssignedValue();\n-        if (val == null) {\n-          // A var with no assignment.\n+        if (val == null || !val.isObjectLit()) {\n           continue;\n         }\n \n-        // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n-          return false;\n-        }\n-\n-        // Make sure that the value is not self-referential. IOW,\n+        // Check if the value is not self-referential. IOW,\n         // disallow things like x = {b: x.a}.\n-        //\n-        // TODO: Only exclude unorderable self-referential\n-        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n-        // but x = {a: 1, b: x.a} is.\n-        //\n-        // Also, ES5 getters/setters aren't handled by this pass.\n+        // Also, ES5 getters/setters aren't handled.\n         for (Node child = val.getFirstChild(); child != null;\n              child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n-            // ES5 get/set not supported.\n+          if (child.isGetterDef() || child.isSetterDef()) {\n             return false;\n           }\n \n-          validProperties.add(child.getString());\n-\n           Node childVal = child.getFirstChild();\n+\n           // Check if childVal is the parent of any of the passed in\n           // references, as that is how self-referential assignments\n           // will happen.\n           for (Reference t : refs) {\n-            Node refNode = t.getParent();\n+            if (t.getParent() == null || !NodeUtil.isStatementBlock(t.getParent())) {\n+              continue;\n+            }\n+\n+            Node refNode = t.getParent().getFirstChild();\n             while (!NodeUtil.isStatementBlock(refNode)) {\n               if (refNode == childVal) {\n-                // There's a self-referential assignment\n+                // There's a self-referential assignment.\n                 return false;\n               }\n+\n               refNode = refNode.getParent();\n             }\n           }\n         }\n \n+        // We have found an acceptable object literal assignment.\n+        return true;\n+      }\n+      return false;\n+    }\n+\n+    private boolean isPropertyOfObjectLiteral(Node getPropNode, List<Reference> refs) {\n+      if (getPropNode == null || !getPropNode.isGetProp()) {\n+        return false;\n+      }\n+\n+      String propName = getPropNode.getLastChild().getString();\n+      Node parent = getPropNode.getParent();\n \n-        // We have found an acceptable object literal assignment. As\n-        // long as there are no other assignments that mess things up,\n-        // we can inline.\n-        ret = true;\n+      if (parent.isAssign()) {\n+        return parent.getFirstChild() == getPropNode\n+            && parent.getFirstChild().isGetProp()\n+            && parent.getFirstChild().getLastChild().getString().equals(propName)\n+            && parent.getSecondChild().isObjectLit()\n+            && !isSelfReferential(parent.getSecondChild(), refs);\n+      }\n+\n+      if (parent.isExprResult()) {\n+        return parent.getFirstChild() == getPropNode\n+            && parent.getFirstChild().isGetProp()\n+            && parent.getFirstChild().getLastChild().getString().equals(propName)\n+            && parent.getFirstChild().getNext().isObjectLit()\n+            && !isSelfReferential(parent.getFirstChild().getNext(), refs);\n+      }\n+\n+      return false;\n+    }\n+\n+    private boolean isSelfReferential(Node objLit, List<Reference> refs) {\n+      if (objLit == null || !objLit.isObjectLit()) {\n+        return false;\n+      }\n+\n+      for (Node child = objLit.getFirstChild(); child != null; child = child.getNext()) {\n+        if (child.isGetterDef() || child.isSetterDef()) {\n+          return true;\n+        }\n+\n+        Node childVal = child.getFirstChild();\n+\n+        // Check if childVal is the parent of any of the passed in\n+        // references, as that is how self-referential assignments\n+        // will happen.\n+        for (Reference t : refs) {\n+          if (t.getParent() == null || !NodeUtil.isStatementBlock(t.getParent())) {\n+            continue;\n+          }\n+\n+          Node refNode = t.getParent().getFirstChild();\n+          while (!NodeUtil.isStatementBlock(refNode)) {\n+            if (refNode == childVal) {\n+              // There's a self-referential assignment.\n+              return true;\n+            }\n+\n+            refNode = refNode.getParent();\n+          }\n+        }\n       }\n-      return ret;\n+      return false;\n     }\n \n     private boolean isVarOrAssignExprLhs(Node n) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}