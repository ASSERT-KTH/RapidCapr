{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long nextLocalTransition = nextTransition(instantLocal);\n        if (nextLocalTransition == instantLocal) {\n            // No transition happening on the instantLocal\n            return offsetLocal;\n        } else {\n            int offsetBeforeTransition = getOffset(nextLocalTransition - 1);\n            if (offsetBeforeTransition > offsetLocal) { // gap\n                return offsetLocal;\n            } else if (offsetBeforeTransition < offsetLocal) { // overlap\n                int offsetAfterTransition = getOffset(nextLocalTransition);\n                long nextLocal = nextTransition(instantLocal - offsetLocal);\n                if (nextLocal == nextLocalTransition) {\n                    return offsetAfterTransition;\n                } else {\n                    return offsetLocal;\n                }\n            } else {\n                // FIXME: guessing at this behavior: treat as if before transition\n                return offsetLocal;\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..b4ddeab3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,28 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n+        long nextLocalTransition = nextTransition(instantLocal);\n+        if (nextLocalTransition == instantLocal) {\n+            // No transition happening on the instantLocal\n+            return offsetLocal;\n+        } else {\n+            int offsetBeforeTransition = getOffset(nextLocalTransition - 1);\n+            if (offsetBeforeTransition > offsetLocal) { // gap\n+                return offsetLocal;\n+            } else if (offsetBeforeTransition < offsetLocal) { // overlap\n+                int offsetAfterTransition = getOffset(nextLocalTransition);\n+                long nextLocal = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal == nextLocalTransition) {\n+                    return offsetAfterTransition;\n+                } else {\n                     return offsetLocal;\n                 }\n+            } else {\n+                // FIXME: guessing at this behavior: treat as if before transition\n+                return offsetLocal;\n             }\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}