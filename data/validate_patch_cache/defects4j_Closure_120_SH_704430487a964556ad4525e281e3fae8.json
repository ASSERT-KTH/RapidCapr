{
    "patch": "// Make sure this assignment is not in a loop.\nfor (BasicBlock block1 = ref.getBasicBlock(); block1 != null; block1 = block1.getParent()) {\n  if (block1.isFunction) {\n    break;\n  } else if (block1.isLoop) {\n    boolean isInitializingAssignmentInLoop = isInitializingAssignmentAt(ref.getIndex()) &&\n        maybeLoopVariableDeclaration(ref.getValue().<Node>getTarget());\n    for (BasicBlock block2 = block1.getParent(); block2 != null; block2 = block2.getParent()) {\n      if (block2.isLoop) {\n        if (!isInitializingAssignmentInLoop) {\n          return false;\n        }\n        if (block1.getLoopHeader() == block2.getLoopHeader()) {\n          break;\n        }\n      }\n    }\n    break;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..372d6086 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,26 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+// Make sure this assignment is not in a loop.\n+for (BasicBlock block1 = ref.getBasicBlock(); block1 != null; block1 = block1.getParent()) {\n+  if (block1.isFunction) {\n+    break;\n+  } else if (block1.isLoop) {\n+    boolean isInitializingAssignmentInLoop = isInitializingAssignmentAt(ref.getIndex()) &&\n+        maybeLoopVariableDeclaration(ref.getValue().<Node>getTarget());\n+    for (BasicBlock block2 = block1.getParent(); block2 != null; block2 = block2.getParent()) {\n+      if (block2.isLoop) {\n+        if (!isInitializingAssignmentInLoop) {\n+          return false;\n+        }\n+        if (block1.getLoopHeader() == block2.getLoopHeader()) {\n+          break;\n+        }\n+      }\n+    }\n+    break;\n+  }\n+}\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}