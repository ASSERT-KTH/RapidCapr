{
    "patch": "      Reference ref = getInitializingReferenceForConstants();\n      if (ref == null) {\n        return false;\n      }\n      Set<BasicBlock> visitedBlocks = new HashSet<BasicBlock>();\n      visitedBlocks.add(ref.getBasicBlock());\n      Deque<BasicBlock> worklist = new ArrayDeque<BasicBlock>();\n      worklist.addAll(getCfg().getSuccessors(ref.getBasicBlock()));\n      while (!worklist.isEmpty()) {\n        BasicBlock block = worklist.pop();\n        if (!visitedBlocks.add(block)) {\n          // Already visited.\n          continue;\n        }\n        for (Reference r : block.getReferences()) {\n          if (r.getSymbol() == ref.getSymbol() && r != ref) {\n            return false;\n          }\n        }\n        worklist.addAll(getCfg().getSuccessors(block));\n      }\n      return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..a1f20b9e 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,28 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+      Reference ref = getInitializingReferenceForConstants();\n+      if (ref == null) {\n+        return false;\n+      }\n+      Set<BasicBlock> visitedBlocks = new HashSet<BasicBlock>();\n+      visitedBlocks.add(ref.getBasicBlock());\n+      Deque<BasicBlock> worklist = new ArrayDeque<BasicBlock>();\n+      worklist.addAll(getCfg().getSuccessors(ref.getBasicBlock()));\n+      while (!worklist.isEmpty()) {\n+        BasicBlock block = worklist.pop();\n+        if (!visitedBlocks.add(block)) {\n+          // Already visited.\n+          continue;\n+        }\n+        for (Reference r : block.getReferences()) {\n+          if (r.getSymbol() == ref.getSymbol() && r != ref) {\n+            return false;\n+          }\n+        }\n+        worklist.addAll(getCfg().getSuccessors(block));\n+      }\n+      return true;\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: variable ref is already defined in method isAssignedOnceInLifetime()",
    "test_result": "ERROR"
}