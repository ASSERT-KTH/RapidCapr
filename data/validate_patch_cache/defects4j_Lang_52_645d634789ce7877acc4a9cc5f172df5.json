{
    "patch": "public static String escapeJavaScript(String input) {\n    if (input == null) {\n        return null;\n    }\n\n    int sz = input.length();\n    StringBuilder out = new StringBuilder(sz * 2);\n    for (int i = 0; i < sz; i++) {\n        char ch = input.charAt(i);\n        switch (ch) {\n            case '\\'':\n                // If we wanted to escape for Java strings then we would also need to\n                // escape this:\n                //\n                // case '\"' :\n                out.append('\\\\').append('\\'');\n                break;\n            case '\"':\n                out.append('\\\\').append('\"');\n                break;\n            case '\\\\':\n                out.append('\\\\').append('\\\\');\n                break;\n            case '/':\n                // solidus\n                out.append('\\\\').append('/');\n                break;\n            case '\\t':\n                out.append('\\\\').append('t');\n                break;\n            case '\\n':\n                out.append('\\\\').append('n');\n                break;\n            case '\\r':\n                out.append('\\\\').append('r');\n                break;\n            case '\\b':\n                out.append('\\\\').append('b');\n                break;\n            case '\\f':\n                out.append('\\\\').append('f');\n                break;\n            default :\n                if (ch < ' ') {\n                    String hex = Integer.toHexString(ch);\n                    out.append('\\\\').append('u');\n                    int len = 4 - hex.length();\n                    for (int j = 0; j < len; j++) {\n                        out.append('0');\n                    }\n                    out.append(hex);\n                } else {\n                    out.append(ch);\n                }\n                break;\n        }\n    }\n    return out.toString();\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java\nindex 4fda091d..c92ea2c7 100644\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n@@ -168,78 +168,65 @@ public class StringEscapeUtils {\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n-        if (out == null) {\n-            throw new IllegalArgumentException(\"The Writer must not be null\");\n-        }\n-        if (str == null) {\n-            return;\n-        }\n-        int sz;\n-        sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+public static String escapeJavaScript(String input) {\n+    if (input == null) {\n+        return null;\n+    }\n \n-            // handle unicode\n-            if (ch > 0xfff) {\n-                out.write(\"\\\\u\" + hex(ch));\n-            } else if (ch > 0xff) {\n-                out.write(\"\\\\u0\" + hex(ch));\n-            } else if (ch > 0x7f) {\n-                out.write(\"\\\\u00\" + hex(ch));\n-            } else if (ch < 32) {\n-                switch (ch) {\n-                    case '\\b':\n-                        out.write('\\\\');\n-                        out.write('b');\n-                        break;\n-                    case '\\n':\n-                        out.write('\\\\');\n-                        out.write('n');\n-                        break;\n-                    case '\\t':\n-                        out.write('\\\\');\n-                        out.write('t');\n-                        break;\n-                    case '\\f':\n-                        out.write('\\\\');\n-                        out.write('f');\n-                        break;\n-                    case '\\r':\n-                        out.write('\\\\');\n-                        out.write('r');\n-                        break;\n-                    default :\n-                        if (ch > 0xf) {\n-                            out.write(\"\\\\u00\" + hex(ch));\n-                        } else {\n-                            out.write(\"\\\\u000\" + hex(ch));\n-                        }\n-                        break;\n-                }\n-            } else {\n-                switch (ch) {\n-                    case '\\'':\n-                        if (escapeSingleQuote) {\n-                          out.write('\\\\');\n-                        }\n-                        out.write('\\'');\n-                        break;\n-                    case '\"':\n-                        out.write('\\\\');\n-                        out.write('\"');\n-                        break;\n-                    case '\\\\':\n-                        out.write('\\\\');\n-                        out.write('\\\\');\n-                        break;\n-                    default :\n-                        out.write(ch);\n-                        break;\n+    int sz = input.length();\n+    StringBuilder out = new StringBuilder(sz * 2);\n+    for (int i = 0; i < sz; i++) {\n+        char ch = input.charAt(i);\n+        switch (ch) {\n+            case '\\'':\n+                // If we wanted to escape for Java strings then we would also need to\n+                // escape this:\n+                //\n+                // case '\"' :\n+                out.append('\\\\').append('\\'');\n+                break;\n+            case '\"':\n+                out.append('\\\\').append('\"');\n+                break;\n+            case '\\\\':\n+                out.append('\\\\').append('\\\\');\n+                break;\n+            case '/':\n+                // solidus\n+                out.append('\\\\').append('/');\n+                break;\n+            case '\\t':\n+                out.append('\\\\').append('t');\n+                break;\n+            case '\\n':\n+                out.append('\\\\').append('n');\n+                break;\n+            case '\\r':\n+                out.append('\\\\').append('r');\n+                break;\n+            case '\\b':\n+                out.append('\\\\').append('b');\n+                break;\n+            case '\\f':\n+                out.append('\\\\').append('f');\n+                break;\n+            default :\n+                if (ch < ' ') {\n+                    String hex = Integer.toHexString(ch);\n+                    out.append('\\\\').append('u');\n+                    int len = 4 - hex.length();\n+                    for (int j = 0; j < len; j++) {\n+                        out.append('0');\n+                    }\n+                    out.append(hex);\n+                } else {\n+                    out.append(ch);\n                 }\n-            }\n+                break;\n         }\n     }\n+    return out.toString();\n+}\n \n     /**\n      * <p>Returns an upper case hexadecimal <code>String</code> for the given",
    "result_reason": "error: method escapeJavaScript(String) is already defined in class StringEscapeUtils",
    "test_result": "ERROR"
}