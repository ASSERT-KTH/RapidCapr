{
    "patch": "private void populateContextualActualTypeParameters(Map<TypeVariable<?>, Type> contextualActualTypeParameters, Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n\n        if (actualTypeArgument instanceof WildcardType) {\n            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n        } else if (actualTypeArgument == typeParameter) { // check for self-referencing type parameter\n            contextualActualTypeParameters.put(typeParameter, PlaceholderType.INSTANCE);\n        } else {\n            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n        }\n    }\n}\n\n// PlaceholderType class to use as placeholder value in the map\nprivate static class PlaceholderType implements Type {\n    static final Type INSTANCE = new PlaceholderType();\n\n    @Override\n    public String getTypeName() {\n        return \"placeholder\";\n    }\n\n    // implementation of equals() and hashCode() to allow the placeholder to be used as a key in a map\n    @Override\n    public boolean equals(Object obj) {\n        return obj instanceof PlaceholderType;\n    }\n\n    @Override\n    public int hashCode() {\n        return System.identityHashCode(this);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..a1e9cddf5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,47 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private void populateContextualActualTypeParameters(Map<TypeVariable<?>, Type> contextualActualTypeParameters, Type classType) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) classType;\n+    TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable<?> typeParameter = typeParameters[i];\n+        Type actualTypeArgument = actualTypeArguments[i];\n+\n+        if (actualTypeArgument instanceof WildcardType) {\n+            contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+        } else if (actualTypeArgument == typeParameter) { // check for self-referencing type parameter\n+            contextualActualTypeParameters.put(typeParameter, PlaceholderType.INSTANCE);\n+        } else {\n+            contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+        }\n+    }\n+}\n+\n+// PlaceholderType class to use as placeholder value in the map\n+private static class PlaceholderType implements Type {\n+    static final Type INSTANCE = new PlaceholderType();\n+\n+    @Override\n+    public String getTypeName() {\n+        return \"placeholder\";\n+    }\n+\n+    // implementation of equals() and hashCode() to allow the placeholder to be used as a key in a map\n+    @Override\n+    public boolean equals(Object obj) {\n+        return obj instanceof PlaceholderType;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return System.identityHashCode(this);\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}