{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n    if (result.getYears() == 0 && result.getMonths() == 0) {\n        return result;\n    }\n    int years = result.getYears();\n    int months = result.getMonths();\n    if (years != 0) {\n        if (!type.isSupported(DurationFieldType.years())) {\n            // Truncate duration field\n            months = FieldUtils.safeMultiply(years, 12) + months;\n            years = 0;\n        } else {\n            result = result.withYears(0);\n            if (type.isSupported(DurationFieldType.months())) {\n                result = result.withMonths(years * 12 + months);\n            }\n        }\n    } else if (months != 0 && !type.isSupported(DurationFieldType.months())) {\n        result = result.withMonths(0);\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..769987c2 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,35 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+    if (result.getYears() == 0 && result.getMonths() == 0) {\n+        return result;\n+    }\n+    int years = result.getYears();\n+    int months = result.getMonths();\n+    if (years != 0) {\n+        if (!type.isSupported(DurationFieldType.years())) {\n+            // Truncate duration field\n+            months = FieldUtils.safeMultiply(years, 12) + months;\n+            years = 0;\n+        } else {\n+            result = result.withYears(0);\n+            if (type.isSupported(DurationFieldType.months())) {\n+                result = result.withMonths(years * 12 + months);\n             }\n         }\n-        return result;\n+    } else if (months != 0 && !type.isSupported(DurationFieldType.months())) {\n+        result = result.withMonths(0);\n     }\n+    return result;\n+}\n \n }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P27M> but was:<P0M>",
    "test_result": "FAIL"
}