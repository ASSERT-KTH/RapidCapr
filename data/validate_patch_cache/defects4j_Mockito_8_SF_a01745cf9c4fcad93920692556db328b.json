{
    "patch": "if (!(classType instanceof ParameterizedType)) {\n    return;\n}\nParameterizedType parameterizedType = (ParameterizedType) classType;\nType[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n\nMap<TypeVariable<?>, Type> typeMap = new HashMap<>();\nfor (int i = 0; i < actualTypeArguments.length; i++) {\n    TypeVariable<?> typeParameter = ((Class<?>) parameterizedType.getRawType()).getTypeParameters()[i];\n    Type actualTypeArgument = actualTypeArguments[i];\n\n    if (actualTypeArgument instanceof WildcardType) {\n        Type[] bounds = ((WildcardType) actualTypeArgument).getUpperBounds();\n        if (bounds.length > 0) {\n            typeMap.put(typeParameter, bounds[0]);\n        } else {\n            typeMap.put(typeParameter, Object.class);\n        }\n    } else {\n        typeMap.put(typeParameter, actualTypeArgument);\n    }\n}\n\ncontextualActualTypeParameters.putAll(typeMap);",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..1950366e3 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,30 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+if (!(classType instanceof ParameterizedType)) {\n+    return;\n+}\n+ParameterizedType parameterizedType = (ParameterizedType) classType;\n+Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+\n+Map<TypeVariable<?>, Type> typeMap = new HashMap<>();\n+for (int i = 0; i < actualTypeArguments.length; i++) {\n+    TypeVariable<?> typeParameter = ((Class<?>) parameterizedType.getRawType()).getTypeParameters()[i];\n+    Type actualTypeArgument = actualTypeArguments[i];\n+\n+    if (actualTypeArgument instanceof WildcardType) {\n+        Type[] bounds = ((WildcardType) actualTypeArgument).getUpperBounds();\n+        if (bounds.length > 0) {\n+            typeMap.put(typeParameter, bounds[0]);\n+        } else {\n+            typeMap.put(typeParameter, Object.class);\n+        }\n+    } else {\n+        typeMap.put(typeParameter, actualTypeArgument);\n+    }\n+}\n+\n+contextualActualTypeParameters.putAll(typeMap);\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}