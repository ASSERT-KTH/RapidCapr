{
    "patch": "  private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          return parent.getFirstChild().getNext().getNext();\n        }\n      case Token.WHILE:\n      case Token.DO:\n        return parent;\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      // if we know this to be function returning number\n      TypeI result =\n          NodeUtil.getEnclosingType(fromNode).toMaybeFunctionType().getReturnType();\n      if (result == JSTypeNative.NUMBER_TYPE && !mayReturn(nextSibling)) {\n        Node statement = getNextStatement(nextSibling);\n        if (statement == null || !isJumpStatement(statement)) {\n          return connectToFollowing(nextSibling, cfa);\n        }\n      }\n      return computeFallThrough(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }\n  /**\n   * Checks whether the given node can return from a function.\n   *\n   * <p>Possible types of nodes that return from a function are:\n   *\n   * <ul>\n   * <li>{@link Token#RETURN}\n   * <li>{@link Token#THROW}\n   * <li>{@link Token#BREAK} (if it references a label that lies within a function)\n   * <li>{@link Token#CONTINUE} (if it references a label that lies within a function)\n   * </ul>\n   *\n   * <p>Nodes with a MAY_RETURN value of true are nodes that may or may not return from a function.\n   *\n   * @param n a node\n   * @return whether the given node can return from a function.\n   */\n  private static boolean mayReturn(Node n) {\n    return ControlFlowAnalysis.mayReturn(\n        n, Reach.ALL_NON_VOID_EXCEPTIONAL_TERMINATING_EXCEPTIONS, null);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..b6e6c86b 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,8 +689,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n-  private static Node computeFollowNode(\n-      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n+  private static Node computeFollowNode(Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     /*\n      * This is the case where:\n      *\n@@ -735,7 +734,6 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else {\n           return computeFollowNode(fromNode, parent, cfa);\n         }\n-        break;\n       case Token.FOR:\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n@@ -781,12 +779,42 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n     }\n \n     if (nextSibling != null) {\n+      // if we know this to be function returning number\n+      TypeI result =\n+          NodeUtil.getEnclosingType(fromNode).toMaybeFunctionType().getReturnType();\n+      if (result == JSTypeNative.NUMBER_TYPE && !mayReturn(nextSibling)) {\n+        Node statement = getNextStatement(nextSibling);\n+        if (statement == null || !isJumpStatement(statement)) {\n+          return connectToFollowing(nextSibling, cfa);\n+        }\n+      }\n       return computeFallThrough(nextSibling);\n     } else {\n       // If there are no more siblings, control is transferred up the AST.\n       return computeFollowNode(fromNode, parent, cfa);\n     }\n   }\n+  /**\n+   * Checks whether the given node can return from a function.\n+   *\n+   * <p>Possible types of nodes that return from a function are:\n+   *\n+   * <ul>\n+   * <li>{@link Token#RETURN}\n+   * <li>{@link Token#THROW}\n+   * <li>{@link Token#BREAK} (if it references a label that lies within a function)\n+   * <li>{@link Token#CONTINUE} (if it references a label that lies within a function)\n+   * </ul>\n+   *\n+   * <p>Nodes with a MAY_RETURN value of true are nodes that may or may not return from a function.\n+   *\n+   * @param n a node\n+   * @return whether the given node can return from a function.\n+   */\n+  private static boolean mayReturn(Node n) {\n+    return ControlFlowAnalysis.mayReturn(\n+        n, Reach.ALL_NON_VOID_EXCEPTIONAL_TERMINATING_EXCEPTIONS, null);\n+  }\n \n   /**\n    * Computes the destination node of n when we want to fallthrough into the",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}