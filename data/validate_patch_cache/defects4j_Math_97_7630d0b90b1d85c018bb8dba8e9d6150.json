{
    "patch": "public double solve(double min, double max) throws MaxIterationsExceededException,\n        FunctionEvaluationException {\n\n    clearResult();\n    verifyInterval(min, max);\n\n    double ret = Double.NaN;\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    // Verify bracketing\n    double sign = yMin * yMax;\n    if (sign >= 0) {\n        // check if either value is close to a zero\n        if (FastMath.abs(yMin) < FunctionEvaluationUtils.EPSILON || FastMath.abs(yMax) < FunctionEvaluationUtils.EPSILON) {\n            // return root if one of the endpoints is (almost) a root\n\n            // if endpoints are almost equal, average them\n            if (FastMath.abs(min - max) < FunctionEvaluationUtils.EPSILON) {\n                ret = 0.5 * (min + max);\n            } else {\n                ret = (FastMath.abs(yMin) < FunctionEvaluationUtils.EPSILON) ? min : max;\n            }\n\n        } else {\n            // neither value is close to zero and min and max do not bracket root.\n            throw new IllegalArgumentException\n            (\"Function values at endpoints do not have different signs.\" +\n                    \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n        }\n    } else {\n        // solve using only the first endpoint as initial guess\n        ret = solve(min, yMin, max, yMax, min, yMin);\n        // either min or max is a root\n    }\n\n    return ret;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..4d235768c 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,46 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n+public double solve(double min, double max) throws MaxIterationsExceededException,\n         FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n+\n+    clearResult();\n+    verifyInterval(min, max);\n+\n+    double ret = Double.NaN;\n+\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n+\n+    // Verify bracketing\n+    double sign = yMin * yMax;\n+    if (sign >= 0) {\n+        // check if either value is close to a zero\n+        if (FastMath.abs(yMin) < FunctionEvaluationUtils.EPSILON || FastMath.abs(yMax) < FunctionEvaluationUtils.EPSILON) {\n+            // return root if one of the endpoints is (almost) a root\n+\n+            // if endpoints are almost equal, average them\n+            if (FastMath.abs(min - max) < FunctionEvaluationUtils.EPSILON) {\n+                ret = 0.5 * (min + max);\n+            } else {\n+                ret = (FastMath.abs(yMin) < FunctionEvaluationUtils.EPSILON) ? min : max;\n+            }\n+\n         } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n+            // neither value is close to zero and min and max do not bracket root.\n+            throw new IllegalArgumentException\n+            (\"Function values at endpoints do not have different signs.\" +\n+                    \"  Endpoints: [\" + min + \",\" + max + \"]\" +\n+                    \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n         }\n-\n-        return ret;\n+    } else {\n+        // solve using only the first endpoint as initial guess\n+        ret = solve(min, yMin, max, yMax, min, yMin);\n+        // either min or max is a root\n     }\n+\n+    return ret;\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}