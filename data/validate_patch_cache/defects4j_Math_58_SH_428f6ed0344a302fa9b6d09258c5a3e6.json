{
    "patch": "        final ParametricUnivariateSolver solver = new BrentSolver();\n        final double[] optimized = new double[3];\n        SimpleCurveFitter fitter = SimpleCurveFitter.create(new GaussianCurve.FitFunction(),\n                new double[]{ guess[0], guess[1], guess[2] });\n        if (fitter.getObservations().isEmpty()) {\n            optimized[0] = Double.NaN;\n            optimized[1] = Double.NaN;\n            optimized[2] = Double.NaN;\n        } else {\n            optimized[0] = fitter.getObservations().get(0).point;\n            optimized[1] = fitter.getObservations().get(fitter.getObservations().size() - 1).point;\n            optimized[2] = solver.solve(1000, new UnivariateFunction() {\n                public double value(double x) {\n                    return new GaussianCurve.FitFunction()\n                        .value(x, fitter.getFitParameters());\n                }\n            }, 0, optimized[0]);\n        }\n        return optimized;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..4dd1861c5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,25 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final ParametricUnivariateSolver solver = new BrentSolver();\n+        final double[] optimized = new double[3];\n+        SimpleCurveFitter fitter = SimpleCurveFitter.create(new GaussianCurve.FitFunction(),\n+                new double[]{ guess[0], guess[1], guess[2] });\n+        if (fitter.getObservations().isEmpty()) {\n+            optimized[0] = Double.NaN;\n+            optimized[1] = Double.NaN;\n+            optimized[2] = Double.NaN;\n+        } else {\n+            optimized[0] = fitter.getObservations().get(0).point;\n+            optimized[1] = fitter.getObservations().get(fitter.getObservations().size() - 1).point;\n+            optimized[2] = solver.solve(1000, new UnivariateFunction() {\n+                public double value(double x) {\n+                    return new GaussianCurve.FitFunction()\n+                        .value(x, fitter.getFitParameters());\n+                }\n+            }, 0, optimized[0]);\n+        }\n+        return optimized;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}