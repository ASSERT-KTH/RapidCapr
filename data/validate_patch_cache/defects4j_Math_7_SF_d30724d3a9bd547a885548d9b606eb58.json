{
    "patch": "public void doEvents(final double tEnd) throws MaxCountExceededException {\n    // ...\n    while (!occuringEvents.isEmpty()) {\n\n        // handle the chronologically first event\n        final Iterator<EventState> iterator = occuringEvents.iterator();\n        final EventState currentEvent = iterator.next();\n        iterator.remove();\n\n        // restrict the interpolator to the first part of the step, up to the event\n        final double eventT = currentEvent.getEventTime();\n        interpolator.setSoftPreviousTime(previousT);\n        interpolator.setSoftCurrentTime(eventT);\n\n        // get state at event time\n        interpolator.setInterpolatedTime(eventT);\n        final double[] eventY = interpolator.getInterpolatedState().clone();\n\n        // advance all event states to current time\n        currentEvent.stepAccepted(eventT, eventY);\n        isLastStep = currentEvent.stop();\n\n        // update the minimum allowed time\n        tMin = eventT + convergence;\n\n        // handle the first part of the step, up to the event\n        for (final StepHandler handler : stepHandlers) {\n            handler.handleStep(interpolator, isLastStep);\n        }\n\n        if (isLastStep) {\n            interpolator.setSoftPreviousTime(eventT);\n            interpolator.setSoftCurrentTime(tEnd);\n            for (final StepHandler handler : stepHandlers) {\n                handler.finish(t, y); // ensure there is at least one call with the last state\n                if (!handler.isLastStep()) {\n                    handler.handleStep(interpolator, isLastStep);\n                }\n            }\n            return;\n        }\n\n        // prepare next step\n        for (final int k : resetableIndices) {\n            y[k] = yDot[k];\n        }\n        System.arraycopy(eventY, 0, y, 0, y0.length);\n\n        previousT = eventT;\n        double nextT = eventT + convergence;\n        if (nextT >= tEnd) {\n            nextT = tEnd;\n            isLastStep = true;\n        }\n        try {\n            // step with shortened step\n            stepStart = acceptStep(interpolator, y, nextT, forward, getStepSize());\n            completed++;\n            break;\n        } catch (final NumberIsTooSmallException e) {\n            if (!recoverable(e)) {\n                throw e;\n            }\n            // reduce the stepsize, reject the last invalid step, try again\n            stepStart = rejectStep(interpolator);\n            scaledH /= 2;\n            resetOccurred = true;\n        } catch (final MaxCountExceededException e) {\n            if (!recoverable(e)) {\n                throw e;\n            }\n            isLastStep = true;\n            resetOccurred = true;\n        }\n    }\n    // ...\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\nindex f24f87c39..deb7a57dc 100644\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n@@ -313,43 +313,83 @@ public abstract class AbstractIntegrator implements FirstOrderIntegrator {\n             SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n-                public int compare(EventState es0, EventState es1) {\n-                    return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime());\n-                }\n-\n-            });\n+public void doEvents(final double tEnd) throws MaxCountExceededException {\n+    // ...\n+    while (!occuringEvents.isEmpty()) {\n+\n+        // handle the chronologically first event\n+        final Iterator<EventState> iterator = occuringEvents.iterator();\n+        final EventState currentEvent = iterator.next();\n+        iterator.remove();\n+\n+        // restrict the interpolator to the first part of the step, up to the event\n+        final double eventT = currentEvent.getEventTime();\n+        interpolator.setSoftPreviousTime(previousT);\n+        interpolator.setSoftCurrentTime(eventT);\n+\n+        // get state at event time\n+        interpolator.setInterpolatedTime(eventT);\n+        final double[] eventY = interpolator.getInterpolatedState().clone();\n+\n+        // advance all event states to current time\n+        currentEvent.stepAccepted(eventT, eventY);\n+        isLastStep = currentEvent.stop();\n+\n+        // update the minimum allowed time\n+        tMin = eventT + convergence;\n+\n+        // handle the first part of the step, up to the event\n+        for (final StepHandler handler : stepHandlers) {\n+            handler.handleStep(interpolator, isLastStep);\n+        }\n \n-            for (final EventState state : eventsStates) {\n-                if (state.evaluateStep(interpolator)) {\n-                    // the event occurs during the current step\n-                    occuringEvents.add(state);\n+        if (isLastStep) {\n+            interpolator.setSoftPreviousTime(eventT);\n+            interpolator.setSoftCurrentTime(tEnd);\n+            for (final StepHandler handler : stepHandlers) {\n+                handler.finish(t, y); // ensure there is at least one call with the last state\n+                if (!handler.isLastStep()) {\n+                    handler.handleStep(interpolator, isLastStep);\n                 }\n             }\n+            return;\n+        }\n \n-            while (!occuringEvents.isEmpty()) {\n-\n-                // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n-                final EventState currentEvent = iterator.next();\n-                iterator.remove();\n-\n-                // restrict the interpolator to the first part of the step, up to the event\n-                final double eventT = currentEvent.getEventTime();\n-                interpolator.setSoftPreviousTime(previousT);\n-                interpolator.setSoftCurrentTime(eventT);\n-\n-                // get state at event time\n-                interpolator.setInterpolatedTime(eventT);\n-                final double[] eventY = interpolator.getInterpolatedState().clone();\n-\n-                // advance all event states to current time\n-                currentEvent.stepAccepted(eventT, eventY);\n-                isLastStep = currentEvent.stop();\n+        // prepare next step\n+        for (final int k : resetableIndices) {\n+            y[k] = yDot[k];\n+        }\n+        System.arraycopy(eventY, 0, y, 0, y0.length);\n \n-                // handle the first part of the step, up to the event\n-                for (final StepHandler handler : stepHandlers) {\n-                    handler.handleStep(interpolator, isLastStep);\n-                }\n+        previousT = eventT;\n+        double nextT = eventT + convergence;\n+        if (nextT >= tEnd) {\n+            nextT = tEnd;\n+            isLastStep = true;\n+        }\n+        try {\n+            // step with shortened step\n+            stepStart = acceptStep(interpolator, y, nextT, forward, getStepSize());\n+            completed++;\n+            break;\n+        } catch (final NumberIsTooSmallException e) {\n+            if (!recoverable(e)) {\n+                throw e;\n+            }\n+            // reduce the stepsize, reject the last invalid step, try again\n+            stepStart = rejectStep(interpolator);\n+            scaledH /= 2;\n+            resetOccurred = true;\n+        } catch (final MaxCountExceededException e) {\n+            if (!recoverable(e)) {\n+                throw e;\n+            }\n+            isLastStep = true;\n+            resetOccurred = true;\n+        }\n+    }\n+    // ...\n+}\n \n                 if (isLastStep) {\n                     // the event asked to stop integration",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}