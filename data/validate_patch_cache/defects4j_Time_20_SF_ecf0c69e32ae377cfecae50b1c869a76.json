{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    int len = text.length();\n    if (position > len) {\n        return ~position;\n    }\n    String str = text.substring(position);\n\n    for (String id : ALL_IDS) {\n        int idLen = id.length();\n        if (str.startsWith(id) && (str.length() == idLen || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n            if (str.length() == idLen || (!Character.isLetterOrDigit(str.charAt(idLen))  && str.charAt(idLen) != '_')) {\n                bucket.setZone(DateTimeZone.forID(id));\n                if (str.length() > idLen && str.charAt(idLen) == '/') {\n                    // skip over the separator\n                    return position + idLen + 1;\n                } else {\n                    return position + idLen;\n                }\n          ",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..71fc2dce 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,16 +2537,25 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    int len = text.length();\n+    if (position > len) {\n+        return ~position;\n+    }\n+    String str = text.substring(position);\n+\n+    for (String id : ALL_IDS) {\n+        int idLen = id.length();\n+        if (str.startsWith(id) && (str.length() == idLen || str.charAt(idLen) == '/' || Character.isWhitespace(str.charAt(idLen)))) {\n+            if (str.length() == idLen || (!Character.isLetterOrDigit(str.charAt(idLen))  && str.charAt(idLen) != '_')) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                if (str.length() > idLen && str.charAt(idLen) == '/') {\n+                    // skip over the separator\n+                    return position + idLen + 1;\n+                } else {\n+                    return position + idLen;\n                 }\n-            }\n-            return ~position;\n-        }\n+          \n     }\n \n     //-----------------------------------------------------------------------",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}