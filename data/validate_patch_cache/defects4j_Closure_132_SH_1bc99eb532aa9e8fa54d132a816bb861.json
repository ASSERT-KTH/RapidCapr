{
    "patch": "        var.detachFromParent();\n        Node name = name1.getFirstChild();\n        Node thenExpr = thenOp.removeFirstChild();\n        Node elseExpr = elseOp.getLastChild().detachFromParent();\n        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n        Node assign = new Node(Token.ASSIGN, name, hookNode).srcref(thenOp);\n        Node expr = NodeUtil.newExpr(assign);\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n        return expr;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..fc9830b9 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,16 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !mayEffectMutableState(lhs)) {\n+        var.detachFromParent();\n+        Node name = name1.getFirstChild();\n+        Node thenExpr = thenOp.removeFirstChild();\n+        Node elseExpr = elseOp.getLastChild().detachFromParent();\n+        Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+        Node assign = new Node(Token.ASSIGN, name, hookNode).srcref(thenOp);\n+        Node expr = NodeUtil.newExpr(assign);\n+        parent.replaceChild(n, expr);\n+        reportCodeChange();\n+        return expr;\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}