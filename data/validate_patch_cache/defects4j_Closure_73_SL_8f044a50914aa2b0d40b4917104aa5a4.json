{
    "patch": "if (outputCharsetEncoder != null && outputCharsetEncoder.canEncode(Character.toString(c)) || (c >= 0x20 && c <= 0x7e) || (!Character.isISOControl(c) && c != '\\t' && c != '\\n' && c != '\\r')) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..ed3ce8af 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,7 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+if (outputCharsetEncoder != null && outputCharsetEncoder.canEncode(Character.toString(c)) || (c >= 0x20 && c <= 0x7e) || (!Character.isISOControl(c) && c != '\\t' && c != '\\n' && c != '\\r')) {\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "junit.framework.ComparisonFailure: expected:<({\"a\":4,\"[\\u0100]\":4})> but was:<({\"a\":4,\"[\u0100]\":4})>",
    "test_result": "FAIL"
}