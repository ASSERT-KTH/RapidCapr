{
    "patch": "private List<Node> problemNodes = new ArrayList<Node>();\n\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n.isEmpty() || n.isComma()) {\n    return;\n  }\n\n  // Do not try to remove a block or an expr result, we already handle these cases when we visit the child,\n  // and the peephole passes will fix up the tree in more clever ways when these are removed, unless this is a block node,\n  // then we still want to visit it's children.\n  if (n.isExprResult() || n.isBlock()) {\n    return;\n  }\n\n  // This no-op statement was there so that JSDoc information could be attached to the name. This check should not complain about it.\n  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n    return;\n  }\n\n  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n  if (parent.getType() == Token.COMMA) {\n    if (NodeUtil.isExpressionResultUsed(n)) {\n      return;\n    }\n    if (n == parent.getLastChild()) {\n      for (Node an : parent.getAncestors()) {\n        int ancestorType = an.getType();\n        if (ancestorType == Token.COMMA) {\n          continue;\n        }\n        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n      return;\n    }\n  }\n\n  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n    boolean hasEffect = !NodeUtil.getSideEffectTypes(n).isEmpty();\n    if (!hasEffect) {\n      String msg = \"This code lacks side-effects. Is there a bug?\";\n      if (n.isString()) {\n        msg = \"Is there a missing '+' on the previous line?\";\n      } else if (isSimpleOp) {\n        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n            \"' operator is not being used.\";\n      }\n      t.getCompiler().report(\n          t.makeError(n,  CheckLevel.WARNING, USELESS_CODE_ERROR, msg));\n      problemNodes.add(n);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckSideEffects.java b/src/com/google/javascript/jscomp/CheckSideEffects.java\nindex 0d1e95a0..984b2311 100644\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n@@ -81,54 +81,53 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n   }\n \n   @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    // VOID nodes appear when there are extra semicolons at the BLOCK level.\n-    // I've been unable to think of any cases where this indicates a bug,\n-    // and apparently some people like keeping these semicolons around,\n-    // so we'll allow it.\n-    if (n.isEmpty() ||\n-        n.isComma()) {\n-      return;\n-    }\n+private List<Node> problemNodes = new ArrayList<Node>();\n \n-    if (parent == null) {\n-      return;\n-    }\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n.isEmpty() || n.isComma()) {\n+    return;\n+  }\n \n-    // Do not try to remove a block or an expr result. We already handle\n-    // these cases when we visit the child, and the peephole passes will\n-    // fix up the tree in more clever ways when these are removed.\n-    if (n.isExprResult()) {\n-      return;\n-    }\n+  // Do not try to remove a block or an expr result, we already handle these cases when we visit the child,\n+  // and the peephole passes will fix up the tree in more clever ways when these are removed, unless this is a block node,\n+  // then we still want to visit it's children.\n+  if (n.isExprResult() || n.isBlock()) {\n+    return;\n+  }\n \n-    // This no-op statement was there so that JSDoc information could\n-    // be attached to the name. This check should not complain about it.\n-    if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+  // This no-op statement was there so that JSDoc information could be attached to the name. This check should not complain about it.\n+  if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n+    return;\n+  }\n+\n+  boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+  if (parent.getType() == Token.COMMA) {\n+    if (NodeUtil.isExpressionResultUsed(n)) {\n       return;\n     }\n-\n-    boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);\n-    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n-    if (parent.getType() == Token.COMMA) {\n-      if (isResultUsed) {\n-        return;\n-      }\n-      if (n == parent.getLastChild()) {\n-        for (Node an : parent.getAncestors()) {\n-          int ancestorType = an.getType();\n-          if (ancestorType == Token.COMMA) continue;\n-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;\n-          else break;\n+    if (n == parent.getLastChild()) {\n+      for (Node an : parent.getAncestors()) {\n+        int ancestorType = an.getType();\n+        if (ancestorType == Token.COMMA) {\n+          continue;\n+        }\n+        if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) {\n+          return;\n+        } else {\n+          break;\n         }\n       }\n-    } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n-      if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n-        return;\n-      }\n     }\n-    if (\n-        (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler()))) {\n+  } else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {\n+    if (!(parent.getType() == Token.FOR && parent.getChildCount() == 4 &&\n+        (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {\n+      return;\n+    }\n+  }\n+\n+  if (isSimpleOp || !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n+    boolean hasEffect = !NodeUtil.getSideEffectTypes(n).isEmpty();\n+    if (!hasEffect) {\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n@@ -136,16 +135,12 @@ final class CheckSideEffects extends AbstractPostOrderCallback\n         msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n-\n       t.getCompiler().report(\n-          t.makeError(n, level, USELESS_CODE_ERROR, msg));\n-      // TODO(johnlenz): determine if it is necessary to\n-      // try to protect side-effect free statements as well.\n-      if (!NodeUtil.isStatement(n)) {\n-        problemNodes.add(n);\n-      }\n+          t.makeError(n,  CheckLevel.WARNING, USELESS_CODE_ERROR, msg));\n+      problemNodes.add(n);\n     }\n   }\n+}\n \n   /**\n    * Protect side-effect free nodes by making them parameters",
    "result_reason": "error: variable problemNodes is already defined in class CheckSideEffects",
    "test_result": "ERROR"
}