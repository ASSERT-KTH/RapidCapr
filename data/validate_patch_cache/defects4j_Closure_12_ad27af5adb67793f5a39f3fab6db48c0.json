{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    if (ast.isFunctionBlock(cfgNode)) {\n      return cfgNode.getParent().getJSType() != null\n          && cfgNode.getParent().getJSType().isFunctionType()\n          && cfgNode.getParent().getJSType().toObjectType().getOwnPropertyNames()\n              .contains(Keywords.CATCH);\n    }\n    return !getExceptionNodes(cfgNode).isEmpty();\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\nindex add5c664..ec0d87b8 100644\n--- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java\n@@ -155,8 +155,16 @@ class MaybeReachingVariableUse extends\n \n     return output;\n   }\n-\n   private boolean hasExceptionHandler(Node cfgNode) {\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    if (ast.isFunctionBlock(cfgNode)) {\n+      return cfgNode.getParent().getJSType() != null\n+          && cfgNode.getParent().getJSType().isFunctionType()\n+          && cfgNode.getParent().getJSType().toObjectType().getOwnPropertyNames()\n+              .contains(Keywords.CATCH);\n+    }\n+    return !getExceptionNodes(cfgNode).isEmpty();\n+}\n     return false;\n   }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}