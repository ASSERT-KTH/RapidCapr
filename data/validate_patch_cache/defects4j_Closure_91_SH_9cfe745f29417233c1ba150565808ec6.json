{
    "patch": "      // Don't traverse functions that are getting lent to a prototype.\n      // Exceptions:\n      // - function is in a named function expression\n      // - function is in an object literal.\n      // - function is defined inside a local scope.\n      if (parent != null && NodeUtil.isGet(parent)) {\n        return false;\n      }\n      if (NodeUtil.getEnclosingType(n) == Token.OBJECTLIT ||\n          (NodeUtil.getEnclosingType(n) == Token.FUNCTION &&\n              !NodeUtil.isFunctionExpression(n) &&\n              !n.getFirstChild().isName())) {\n        return false;\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..e13fdbd1 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,20 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+      // Don't traverse functions that are getting lent to a prototype.\n+      // Exceptions:\n+      // - function is in a named function expression\n+      // - function is in an object literal.\n+      // - function is defined inside a local scope.\n+      if (parent != null && NodeUtil.isGet(parent)) {\n+        return false;\n+      }\n+      if (NodeUtil.getEnclosingType(n) == Token.OBJECTLIT ||\n+          (NodeUtil.getEnclosingType(n) == Token.FUNCTION &&\n+              !NodeUtil.isFunctionExpression(n) &&\n+              !n.getFirstChild().isName())) {\n+        return false;\n+      }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}