{
    "patch": "private void findCalledFunctions(Node node, Set<String> changed) {\n    Preconditions.checkNotNull(changed, \"The set of changed function calls should not be null\");\n\n    switch (node.getType()) {\n        case Token.CALL:\n            Node functionNameNode = node.getFirstChild();\n            if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n                changed.add(functionNameNode.getString());\n            }\n            while ((functionNameNode = functionNameNode.getNext()) != null) {\n                findCalledFunctions(functionNameNode, changed);\n            }\n            break;\n\n        case Token.FUNCTION:\n            changed.add(node.getFirstChild().getString());\n            break;\n          \n        default:\n            for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n                findCalledFunctions(c, changed);\n            }\n            break;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..3f8d8528 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -770,21 +770,31 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n   /**\n    * @see #findCalledFunctions(Node)\n    */\n-  private void findCalledFunctions(\n-      Node node, Set<String> changed) {\n-    Preconditions.checkArgument(changed != null);\n-    // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n-      }\n-    }\n+private void findCalledFunctions(Node node, Set<String> changed) {\n+    Preconditions.checkNotNull(changed, \"The set of changed function calls should not be null\");\n+\n+    switch (node.getType()) {\n+        case Token.CALL:\n+            Node functionNameNode = node.getFirstChild();\n+            if (functionNameNode != null && functionNameNode.getType() == Token.NAME) {\n+                changed.add(functionNameNode.getString());\n+            }\n+            while ((functionNameNode = functionNameNode.getNext()) != null) {\n+                findCalledFunctions(functionNameNode, changed);\n+            }\n+            break;\n \n-    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n-      findCalledFunctions(c, changed);\n+        case Token.FUNCTION:\n+            changed.add(node.getFirstChild().getString());\n+            break;\n+          \n+        default:\n+            for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+                findCalledFunctions(c, changed);\n+            }\n+            break;\n     }\n-  }\n+}\n \n   /**\n    * For any call-site that needs it, prepare the call-site for inlining",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}