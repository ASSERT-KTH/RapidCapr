{
    "patch": "@Override\nNode processFunctionNode(FunctionNode functionNode) {\n  Name name = functionNode.getFunctionName();\n  Boolean isUnnamedFunction = false;\n  if (name == null) {\n    name = new Name();\n    name.setIdentifier(\"\");\n    isUnnamedFunction = true;\n    name.setLineno(functionNode.getLineno());\n    // set the left curly brace's line number to the line number of the function.\n    functionNode.getBody().setLineno(functionNode.getLineno());\n  }\n  Node node = newNode(Token.FUNCTION);\n  Node newName = transform(name);\n  if (isUnnamedFunction) {\n    newName.setLineno(functionNode.getLineno());\n    // set the left paren's line number to the line number of the function.\n    Node lp = new Node(Token.LP);\n    lp.setLineno(functionNode.getLineno());\n    lp.addChildToBack(new Node(Token.NAME, name));\n    node.addChildToBack(lp);\n  }\n  else {\n    // set the left paren's line number to the line number of the function name.\n    Node lp = getNodeWithName(functionNode, Token.LP, \"(\");\n    lp.setLineno(name.getLineno());\n    node.addChildToBack(lp);\n  }\n  for (AstNode param : functionNode.getParams()) {\n    newName.addChildToBack(transform(param));\n  }\n  node.addChildToBack(newName);\n  node.addChildToBack(transform(functionNode.getBody()));\n  return node;\n}\n\nprivate Node getNodeWithName(AstNode node, int type, String name) {\n  Node namedNode = null;\n  for (Node n : transformList(node)) {\n    if (n.getType() == type && n.getString().equals(name)) {\n      namedNode = n;\n      break;\n    }\n  }\n  if (namedNode == null) {\n    throw new RuntimeException(\"Node type \" + type + \" with name \" + name + \" not found in node \" + node);\n  }\n  return namedNode;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..77a0bda9 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,55 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+@Override\n+Node processFunctionNode(FunctionNode functionNode) {\n+  Name name = functionNode.getFunctionName();\n+  Boolean isUnnamedFunction = false;\n+  if (name == null) {\n+    name = new Name();\n+    name.setIdentifier(\"\");\n+    isUnnamedFunction = true;\n+    name.setLineno(functionNode.getLineno());\n+    // set the left curly brace's line number to the line number of the function.\n+    functionNode.getBody().setLineno(functionNode.getLineno());\n+  }\n+  Node node = newNode(Token.FUNCTION);\n+  Node newName = transform(name);\n+  if (isUnnamedFunction) {\n+    newName.setLineno(functionNode.getLineno());\n+    // set the left paren's line number to the line number of the function.\n+    Node lp = new Node(Token.LP);\n+    lp.setLineno(functionNode.getLineno());\n+    lp.addChildToBack(new Node(Token.NAME, name));\n+    node.addChildToBack(lp);\n+  }\n+  else {\n+    // set the left paren's line number to the line number of the function name.\n+    Node lp = getNodeWithName(functionNode, Token.LP, \"(\");\n+    lp.setLineno(name.getLineno());\n+    node.addChildToBack(lp);\n+  }\n+  for (AstNode param : functionNode.getParams()) {\n+    newName.addChildToBack(transform(param));\n+  }\n+  node.addChildToBack(newName);\n+  node.addChildToBack(transform(functionNode.getBody()));\n+  return node;\n+}\n+\n+private Node getNodeWithName(AstNode node, int type, String name) {\n+  Node namedNode = null;\n+  for (Node n : transformList(node)) {\n+    if (n.getType() == type && n.getString().equals(name)) {\n+      namedNode = n;\n+      break;\n+    }\n+  }\n+  if (namedNode == null) {\n+    throw new RuntimeException(\"Node type \" + type + \" with name \" + name + \" not found in node \" + node);\n+  }\n+  return namedNode;\n+}\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}