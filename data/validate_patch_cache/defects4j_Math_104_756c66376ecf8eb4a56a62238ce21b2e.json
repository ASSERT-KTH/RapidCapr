{
    "patch": "public Dfp multiply(final int x) {\n    if (x >= 0 && x < RADIX) {\n        return multiplyFast(x);\n    }\n    Dfp result = newInstance(this);\n    result.exp = this.exp;\n    result.mant = new int[this.mant.length];\n    int rh[] = DfpMath.arrayMult(this.mant, DfpMath.pow(RADIX, Dfp.getLn10())[(int) (x % Dfp.getLn10())].mant);\n    int k = (int) (x / Dfp.getLn10());\n    if (k >= result.mant.length) {\n        return newInstance(getZero());\n    }\n    if (k > 0) {\n        System.arraycopy(this.mant, 0, result.mant, k, this.mant.length);\n    } else {\n        System.arraycopy(this.mant, 0, result.mant, 0, this.mant.length);\n    }\n    result.exp += k;\n    result.mant = DfpMath.arrayAdd(result.mant, rh);\n    result.normalize();\n    return result;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/special/Gamma.java b/src/java/org/apache/commons/math/special/Gamma.java\nindex 8c565cbff..ebd3ee2ea 100644\n--- a/src/java/org/apache/commons/math/special/Gamma.java\n+++ b/src/java/org/apache/commons/math/special/Gamma.java\n@@ -28,7 +28,28 @@ import org.apache.commons.math.util.ContinuedFraction;\n  *\n  * @version $Revision$ $Date$\n  */\n-public class Gamma implements Serializable {\n+public Dfp multiply(final int x) {\n+    if (x >= 0 && x < RADIX) {\n+        return multiplyFast(x);\n+    }\n+    Dfp result = newInstance(this);\n+    result.exp = this.exp;\n+    result.mant = new int[this.mant.length];\n+    int rh[] = DfpMath.arrayMult(this.mant, DfpMath.pow(RADIX, Dfp.getLn10())[(int) (x % Dfp.getLn10())].mant);\n+    int k = (int) (x / Dfp.getLn10());\n+    if (k >= result.mant.length) {\n+        return newInstance(getZero());\n+    }\n+    if (k > 0) {\n+        System.arraycopy(this.mant, 0, result.mant, k, this.mant.length);\n+    } else {\n+        System.arraycopy(this.mant, 0, result.mant, 0, this.mant.length);\n+    }\n+    result.exp += k;\n+    result.mant = DfpMath.arrayAdd(result.mant, rh);\n+    result.normalize();\n+    return result;\n+}\n     \n     /** Serializable version identifier */\n     private static final long serialVersionUID = -6587513359895466954L;",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}