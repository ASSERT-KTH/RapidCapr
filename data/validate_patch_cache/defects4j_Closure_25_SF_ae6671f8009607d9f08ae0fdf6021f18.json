{
    "patch": "private FlowScope traverseNew(Node n, FlowScope scope) {\n    Node constructor = n.getFirstChild();\n\n    // Traverse the constructor\n    scope = traverse(constructor, scope);\n\n    // Get the constructor type\n    JSType constructorType = constructor.getJSType();\n\n    if (constructorType != null && constructorType.isFunctionType()) {\n        FunctionType ct = constructorType.toMaybeFunctionType();\n        if (ct != null && ct.isConstructor()) {\n            // Get the constructed type of the constructor\n            JSType instanceType = ct.getInstanceType();\n            n.setJSType(instanceType);\n\n            // Traverse all the arguments passed to the constructor\n            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n                scope = traverse(arg, scope);\n            }\n        }\n    }\n\n    // If the constructed type is null, set the node type to unknown\n    if (n.getJSType() == null) {\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n    }\n\n    return scope;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..c0a30687 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1031,36 +1031,36 @@ class TypeInference\n       i++;\n     }\n   }\n-\n-  private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+private FlowScope traverseNew(Node n, FlowScope scope) {\n     Node constructor = n.getFirstChild();\n+\n+    // Traverse the constructor\n     scope = traverse(constructor, scope);\n+\n+    // Get the constructor type\n     JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n-      } else {\n+\n+    if (constructorType != null && constructorType.isFunctionType()) {\n         FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n+            // Get the constructed type of the constructor\n+            JSType instanceType = ct.getInstanceType();\n+            n.setJSType(instanceType);\n+\n+            // Traverse all the arguments passed to the constructor\n+            for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n+                scope = traverse(arg, scope);\n+            }\n         }\n-      }\n     }\n-    n.setJSType(type);\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n+\n+    // If the constructed type is null, set the node type to unknown\n+    if (n.getJSType() == null) {\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n     }\n+\n     return scope;\n-  }\n+}\n \n   private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) {\n     return traverseShortCircuitingBinOp(n, scope, true);",
    "result_reason": "junit.framework.ComparisonFailure: expected:<{[foo: (number|undefined)]}> but was:<{[]}>",
    "test_result": "FAIL"
}