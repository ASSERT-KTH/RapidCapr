{
    "patch": "public int translate(CharSequence input, int index, Writer out) throws IOException {\n    // Check if input and index are valid\n    if (input == null || index < 0 || index >= input.length()) {\n        return 0;\n    }\n    \n    // Check if there are enough characters left to form the \"&#x;\" escape sequence\n    if (index + 3 > input.length()) {\n        return 0;\n    }\n    \n    // Check if the escape sequence is \"&#x;\", \"&#X;\", \"&#;\", \"&#0;\", \"&#00;\", or \"&#000;\"\n    if (input.charAt(index + 1) != '#' || (input.charAt(index + 2) != 'x' && input.charAt(index + 2) != 'X')) {\n        return 0;\n    }\n    \n    // Find the end of the escape sequence\n    int end = index + 3;\n    while (end < input.length() && input.charAt(end) != ';') {\n        end++;\n    }\n    \n    // Check if the escape sequence is terminated\n    if (end == input.length()) {\n        return 0;\n    }\n    \n    // Parse the number in the escape sequence\n    String numberString = input.subSequence(index + 3, end).toString();\n    int number;\n    try {\n        number = Integer.parseInt(numberString, 16);\n    } catch (NumberFormatException e) {\n        return 0;\n    }\n    \n    // Check if the number is a valid Unicode code point\n    if (!Character.isValidCodePoint(number)) {\n        return 0;\n    }\n    \n    // Write the Unicode character to the output\n    out.write(Character.toChars(number));\n    \n    // Return the number of characters processed\n    return end - index + 1;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\nindex c3cb8695..ee277c3b 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n@@ -32,37 +32,51 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {\n      * {@inheritDoc}\n      */\n     @Override\n-    public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        // TODO: Protect from ArrayIndexOutOfBounds\n-        if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') {\n-            int start = index + 2;\n-            boolean isHex = false;\n-\n-            char firstChar = input.charAt(start);\n-            if(firstChar == 'x' || firstChar == 'X') {\n-                start++;\n-                isHex = true;\n-            }\n-\n-            int end = start;\n-            while(input.charAt(end) != ';') {\n-                end++;\n-            }\n-\n-            int entityValue;\n-            try {\n-                if(isHex) {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);\n-                } else {\n-                    entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n-                }\n-            } catch(NumberFormatException nfe) {\n-                return 0;\n-            }\n-\n-                out.write(entityValue);\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n-        }\n+public int translate(CharSequence input, int index, Writer out) throws IOException {\n+    // Check if input and index are valid\n+    if (input == null || index < 0 || index >= input.length()) {\n+        return 0;\n+    }\n+    \n+    // Check if there are enough characters left to form the \"&#x;\" escape sequence\n+    if (index + 3 > input.length()) {\n+        return 0;\n+    }\n+    \n+    // Check if the escape sequence is \"&#x;\", \"&#X;\", \"&#;\", \"&#0;\", \"&#00;\", or \"&#000;\"\n+    if (input.charAt(index + 1) != '#' || (input.charAt(index + 2) != 'x' && input.charAt(index + 2) != 'X')) {\n         return 0;\n     }\n+    \n+    // Find the end of the escape sequence\n+    int end = index + 3;\n+    while (end < input.length() && input.charAt(end) != ';') {\n+        end++;\n+    }\n+    \n+    // Check if the escape sequence is terminated\n+    if (end == input.length()) {\n+        return 0;\n+    }\n+    \n+    // Parse the number in the escape sequence\n+    String numberString = input.subSequence(index + 3, end).toString();\n+    int number;\n+    try {\n+        number = Integer.parseInt(numberString, 16);\n+    } catch (NumberFormatException e) {\n+        return 0;\n+    }\n+    \n+    // Check if the number is a valid Unicode code point\n+    if (!Character.isValidCodePoint(number)) {\n+        return 0;\n+    }\n+    \n+    // Write the Unicode character to the output\n+    out.write(Character.toChars(number));\n+    \n+    // Return the number of characters processed\n+    return end - index + 1;\n+}\n }",
    "result_reason": "junit.framework.ComparisonFailure: XML should be able to unescape >0x7f values expected:<[\u00a0]> but was:<[&#160;]>",
    "test_result": "FAIL"
}