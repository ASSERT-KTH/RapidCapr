{
    "patch": "public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n        return false;\n    }\n    final int strLen = sequence.length();\n    final int searchLen = searchChars.length;\n    final int total = strLen + searchLen;\n    final boolean[] isSpecial = new boolean[Character.MAX_VALUE + 1];\n    for (final char searchChar : searchChars) {\n        if (Character.isHighSurrogate(searchChar)) {\n            final int codePoint = Character.codePointAt(searchChars, searchChars.indexOf(searchChar));\n            if (codePoint != -1) {\n                isSpecial[codePoint] = true;\n            }\n        } else {\n            isSpecial[searchChar] = true;\n        }\n    }\n    for (int i = 0; i < strLen; i++) {\n        final char ch = sequence.charAt(i);\n        if (Character.isHighSurrogate(ch)) {\n            final int codePoint = Character.codePointAt(sequence, i);\n            if (codePoint != -1 && isSpecial[codePoint]) {\n                return true;\n            }\n        } else if (isSpecial[ch]) {\n            return true;\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java\nindex a90b0673..390aaa1d 100644\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n@@ -1437,7 +1437,37 @@ public class StringUtils {\n      * <code>false</code> if no match or null input\n      * @since 2.4\n      */\n-\tpublic static boolean containsAny(CharSequence cs, char[] searchChars) {\n+public static boolean containsAny(final CharSequence sequence, final char[] searchChars) {\n+    if (isEmpty(sequence) || ArrayUtils.isEmpty(searchChars)) {\n+        return false;\n+    }\n+    final int strLen = sequence.length();\n+    final int searchLen = searchChars.length;\n+    final int total = strLen + searchLen;\n+    final boolean[] isSpecial = new boolean[Character.MAX_VALUE + 1];\n+    for (final char searchChar : searchChars) {\n+        if (Character.isHighSurrogate(searchChar)) {\n+            final int codePoint = Character.codePointAt(searchChars, searchChars.indexOf(searchChar));\n+            if (codePoint != -1) {\n+                isSpecial[codePoint] = true;\n+            }\n+        } else {\n+            isSpecial[searchChar] = true;\n+        }\n+    }\n+    for (int i = 0; i < strLen; i++) {\n+        final char ch = sequence.charAt(i);\n+        if (Character.isHighSurrogate(ch)) {\n+            final int codePoint = Character.codePointAt(sequence, i);\n+            if (codePoint != -1 && isSpecial[codePoint]) {\n+                return true;\n+            }\n+        } else if (isSpecial[ch]) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n \t\tif (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {\n \t\t\treturn false;\n \t\t}",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}