{
    "patch": "    public static int gcd(int u, int v) {\n        // optimisation for small parameters\n        if (u == v) {\n            return Math.abs(u);\n        }\n        if (u == 0 || v == 0) {\n            return Math.abs(u) + Math.abs(v);\n        }\n        if ((u & 1) == 0) { // u is even\n            if ((v & 1) == 1) { // v is odd\n                return gcd(u / 2, v);\n            } else { // both u and v are even\n                return gcd(u / 2, v / 2) * 2;\n            }\n        } else { // u is odd\n            if ((v & 1) == 0) { // v is even\n                return gcd(u, v / 2);\n            } else { // both u and v are odd\n                if (u > v) {\n                    return gcd((u - v) / 2, v);\n                } else {\n                    return gcd((v - u) / 2, u);\n                }\n            }\n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342aeb3..04d1ed005 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -409,7 +409,32 @@ public final class MathUtils {\n      * @since 1.1\n      */\n     public static int gcd(int u, int v) {\n-        if (u * v == 0) {\n+    public static int gcd(int u, int v) {\n+        // optimisation for small parameters\n+        if (u == v) {\n+            return Math.abs(u);\n+        }\n+        if (u == 0 || v == 0) {\n+            return Math.abs(u) + Math.abs(v);\n+        }\n+        if ((u & 1) == 0) { // u is even\n+            if ((v & 1) == 1) { // v is odd\n+                return gcd(u / 2, v);\n+            } else { // both u and v are even\n+                return gcd(u / 2, v / 2) * 2;\n+            }\n+        } else { // u is odd\n+            if ((v & 1) == 0) { // v is even\n+                return gcd(u, v / 2);\n+            } else { // both u and v are odd\n+                if (u > v) {\n+                    return gcd((u - v) / 2, v);\n+                } else {\n+                    return gcd((v - u) / 2, u);\n+                }\n+            }\n+        }\n+    }\n             return (Math.abs(u) + Math.abs(v));\n         }\n         // keep u and v negative, as negative integers range down to",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}