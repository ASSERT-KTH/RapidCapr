{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    // If GETPROP/GETELEM is used as assignment target the array literal is\n    // acting as a temporary we can't fold it here:\n    //    \"[][0] += 1\"\n    if (isAssignmentTarget(n)) {\n        return n;\n    }\n\n    if (!right.isNumber()) {\n        // Sometimes people like to use complex expressions to index into\n        // arrays, or strings to index into array methods.\n        return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n        error(INVALID_GETELEM_INDEX_ERROR, right);\n        return n;\n    }\n\n    if (intIndex < 0) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node current = left.getFirstChild();\n    Node prev = null;\n    for (int i = 0; current != null && i < intIndex; i++) {\n        prev = current;\n        current = current.getNext();\n    }\n\n    if (current == null) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n    }\n\n    Node result;\n    if (current.isEmpty()) {\n        result = NodeUtil.newUndefinedNode(current);\n    } else {\n        result = current.detachFromParent();\n    }\n    if (prev == null) {\n        left.replaceChild(current, result);\n    } else {\n        prev.replaceChild(current, result);\n    }\n    reportCodeChange();\n    return result;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex f777b1c2..01dd3ed0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1418,58 +1418,59 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n     if (isAssignmentTarget(n)) {\n-      return n;\n+        return n;\n     }\n \n     if (!right.isNumber()) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n+        // Sometimes people like to use complex expressions to index into\n+        // arrays, or strings to index into array methods.\n+        return n;\n     }\n \n     double index = right.getDouble();\n     int intIndex = (int) index;\n     if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n+        error(INVALID_GETELEM_INDEX_ERROR, right);\n+        return n;\n     }\n \n     if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n     Node current = left.getFirstChild();\n-    Node elem = null;\n+    Node prev = null;\n     for (int i = 0; current != null && i < intIndex; i++) {\n-        elem = current;\n-\n-      current = current.getNext();\n+        prev = current;\n+        current = current.getNext();\n     }\n \n-    if (elem == null) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n+    if (current == null) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n     }\n \n-    if (elem.isEmpty()) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+    Node result;\n+    if (current.isEmpty()) {\n+        result = NodeUtil.newUndefinedNode(current);\n     } else {\n-      left.removeChild(elem);\n+        result = current.detachFromParent();\n+    }\n+    if (prev == null) {\n+        left.replaceChild(current, result);\n+    } else {\n+        prev.replaceChild(current, result);\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n     reportCodeChange();\n-    return elem;\n-  }\n+    return result;\n+}\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));",
    "result_reason": "java.lang.RuntimeException: node is not a child",
    "test_result": "FAIL"
}