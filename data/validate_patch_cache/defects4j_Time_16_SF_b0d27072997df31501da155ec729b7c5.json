{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = selectChronology(instant.getChronology());\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        if (bucket.restoreState() >= 0) {\n            int oldOffset = bucket.getOffsetInteger();\n            instant.setMillis(bucket.computeMillis(false, text));\n            chrono = selectChronology(instant.getChronology());\n            long newMillis = instant.getMillis();\n            if (instantMillis != newMillis || chrono != instant.getChronology()) {\n                instant.setChronology(chrono);\n                if (iZone != null) {\n                    instant.setZone(iZone);\n                } else {\n                    DateTimeZone zone = null;\n                    try {\n                        zone = DateTimeZone.forOffsetMillis(oldOffset);\n                    }\n                    catch (IllegalArgumentException ex) {}\n                    zone = (zone != null ? zone : chrono.getZone());\n                    instant.setZone(zone);\n                }\n            }\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..545b23be 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -701,24 +701,30 @@ public class DateTimeFormatter {\n         }\n         \n         long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n+        Chronology chrono = selectChronology(instant.getChronology());\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+            instantMillis, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n-        }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        if (bucket.restoreState() >= 0) {\n+            int oldOffset = bucket.getOffsetInteger();\n+            instant.setMillis(bucket.computeMillis(false, text));\n+            chrono = selectChronology(instant.getChronology());\n+            long newMillis = instant.getMillis();\n+            if (instantMillis != newMillis || chrono != instant.getChronology()) {\n+                instant.setChronology(chrono);\n+                if (iZone != null) {\n+                    instant.setZone(iZone);\n+                } else {\n+                    DateTimeZone zone = null;\n+                    try {\n+                        zone = DateTimeZone.forOffsetMillis(oldOffset);\n+                    }\n+                    catch (IllegalArgumentException ex) {}\n+                    zone = (zone != null ? zone : chrono.getZone());\n+                    instant.setZone(zone);\n+                }\n+            }\n         }\n         return newPos;\n     }",
    "result_reason": "error: method restoreState in class DateTimeParserBucket cannot be applied to given types;",
    "test_result": "ERROR"
}