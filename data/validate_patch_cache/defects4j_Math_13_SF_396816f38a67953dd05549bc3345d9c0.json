{
    "patch": "import org.apache.commons.math3.linear.Array2DRowRealMatrix;\nimport org.apache.commons.math3.linear.EigenDecomposition;\nimport org.apache.commons.math3.linear.RealMatrix;\n\nprivate RealMatrix squareRoot(RealMatrix m) {\n    final int n = m.getRowDimension();\n    final double eps = 1.0e-6; // adjust tolerance\n    RealMatrix x = new Array2DRowRealMatrix(n, n); \n    x.setSubMatrix(new double[n][n], 0, 0); // initialize x to the zero matrix\n    RealMatrix y = m.scalarMultiply(0.5); // initialize y to a scaled version of the input matrix\n    while (true) {\n        RealMatrix prevX = x;\n        x = y.add(prevX.multiply(y)).scalarMultiply(0.5);\n        if (prevX.subtract(x).getNorm() < eps) {\n            break; // convergence criterion met\n        }\n        y = m.multiply(x).multiply(x).scalarMultiply(0.25).add(x.multiply(m)).scalarMultiply(0.5);\n    }\n    return x;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..9bf6e6fda 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,24 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.EigenDecomposition;\n+import org.apache.commons.math3.linear.RealMatrix;\n+\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final int n = m.getRowDimension();\n+    final double eps = 1.0e-6; // adjust tolerance\n+    RealMatrix x = new Array2DRowRealMatrix(n, n); \n+    x.setSubMatrix(new double[n][n], 0, 0); // initialize x to the zero matrix\n+    RealMatrix y = m.scalarMultiply(0.5); // initialize y to a scaled version of the input matrix\n+    while (true) {\n+        RealMatrix prevX = x;\n+        x = y.add(prevX.multiply(y)).scalarMultiply(0.5);\n+        if (prevX.subtract(x).getNorm() < eps) {\n+            break; // convergence criterion met\n+        }\n+        y = m.multiply(x).multiply(x).scalarMultiply(0.25).add(x.multiply(m)).scalarMultiply(0.5);\n     }\n+    return x;\n+}\n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}