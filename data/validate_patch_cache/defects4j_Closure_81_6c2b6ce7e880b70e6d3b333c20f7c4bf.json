{
    "patch": "        name = new Name();\n        name.setIdentifier(\"\");\n        isUnnamedFunction = true;\n        name.setLineno(functionNode.getLineno());\n        // Determine the charno of the left parenthesis of the function declaration\n        int start = functionNode.getPosition() + \"function\".length();\n        int leftParenPosition = functionNode.getBody().getEncodedSource().indexOf('(', start);\n        if (leftParenPosition < 0) {\n          leftParenPosition = start;\n        }\n        int lparenCharno = NodeUtil.getCharacterPosition(sourceName, leftParenPosition, functionNode);\n        name.setCharno(lparenCharno);",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..bf47184d 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -384,7 +384,6 @@ public class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n     private boolean isDirective(Node n) {\n       if (n == null) return false;\n \n@@ -517,6 +516,18 @@ public class IRFactory {\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;\n+        name.setLineno(functionNode.getLineno());\n+        // Determine the charno of the left parenthesis of the function declaration\n+        int start = functionNode.getPosition() + \"function\".length();\n+        int leftParenPosition = functionNode.getBody().getEncodedSource().indexOf('(', start);\n+        if (leftParenPosition < 0) {\n+          leftParenPosition = start;\n+        }\n+        int lparenCharno = NodeUtil.getCharacterPosition(sourceName, leftParenPosition, functionNode);\n+        name.setCharno(lparenCharno);\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+        isUnnamedFunction = true;\n       }\n       Node node = newNode(Token.FUNCTION);\n       Node newName = transform(name);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}