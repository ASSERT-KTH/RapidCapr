{
    "patch": "    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n\n    // Collect unreferenced args.\n    Map<Node, Var> unreferencedArgs = new LinkedHashMap<Node, Var>();\n    Node lastArg = argList.getLastChild();\n    while (lastArg != null) {\n      Var var = fnScope.getVar(lastArg.getString());\n      if (!referenced.contains(var)) {\n        unreferencedArgs.put(lastArg, var);\n        lastArg = lastArg.getPrevious();\n      } else {\n        break;\n      }\n    }\n\n    if (!unreferencedArgs.isEmpty()) {\n      // Record function changes so they can be undeclared later.\n      if (!modifyCallers && fnScope.isDeclaredVariableArguments()) {\n        // Do not remove the unreferenced arguments if there are\n        // variable arguments that were removed.\n        // They will be blocked from removal.\n        Iterator<Node> arguments =\n            NodeUtil.findFunctionParameters(function).children().iterator();\n        for (Var var : referenced) {\n          arguments.next();\n        }\n        while (arguments.hasNext()) {\n          Var var = fnScope.getVar(arguments.next().getString());\n          if (unreferencedArgs.containsValue(var)) {\n            compiler.report(\n                JSError.make(\n                    \"illegal use of variable arguments: \" + var.name,\n                    var.nameNode.getSourceFileName(), var.nameNode.getLineno()));\n            return; // Do not make changes if variable args are missing.\n          }\n        }\n      }\n\n      for (Node arg : unreferencedArgs.keySet()) {\n        // Only remove unused parameters; don't touch leading commas.\n        if (!arg.isFirstChild()) {\n          arg.detach();\n        }\n        compiler.reportCodeChange();\n      }\n    }\n\n    if (modifyCallers) {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..987e36e5 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,66 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+\n+    // Collect unreferenced args.\n+    Map<Node, Var> unreferencedArgs = new LinkedHashMap<Node, Var>();\n+    Node lastArg = argList.getLastChild();\n+    while (lastArg != null) {\n+      Var var = fnScope.getVar(lastArg.getString());\n+      if (!referenced.contains(var)) {\n+        unreferencedArgs.put(lastArg, var);\n+        lastArg = lastArg.getPrevious();\n+      } else {\n+        break;\n+      }\n+    }\n+\n+    if (!unreferencedArgs.isEmpty()) {\n+      // Record function changes so they can be undeclared later.\n+      if (!modifyCallers && fnScope.isDeclaredVariableArguments()) {\n+        // Do not remove the unreferenced arguments if there are\n+        // variable arguments that were removed.\n+        // They will be blocked from removal.\n+        Iterator<Node> arguments =\n+            NodeUtil.findFunctionParameters(function).children().iterator();\n+        for (Var var : referenced) {\n+          arguments.next();\n+        }\n+        while (arguments.hasNext()) {\n+          Var var = fnScope.getVar(arguments.next().getString());\n+          if (unreferencedArgs.containsValue(var)) {\n+            compiler.report(\n+                JSError.make(\n+                    \"illegal use of variable arguments: \" + var.name,\n+                    var.nameNode.getSourceFileName(), var.nameNode.getLineno()));\n+            return; // Do not make changes if variable args are missing.\n+          }\n+        }\n+      }\n+\n+      for (Node arg : unreferencedArgs.keySet()) {\n+        // Only remove unused parameters; don't touch leading commas.\n+        if (!arg.isFirstChild()) {\n+          arg.detach();\n+        }\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+    if (modifyCallers) {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}