{
    "patch": "public static boolean equals(double x, double y) {\n    return Double.compare(x, y) == 0 || (Double.isNaN(x) && Double.isNaN(y));\n}\n\npublic static boolean equals(double[] x, double[] y, double eps) {\n    if (x == y) {\n        return true;\n    }\n    if (x == null || y == null) {\n        return false;\n    }\n    if (x.length != y.length) {\n        return false;\n    }\n    for (int i = 0; i < x.length; i++) {\n        if (!equalsWithEpsilon(x[i], y[i], eps)) {\n            return false;\n        }\n    }\n    return true;\n}\n\npublic static boolean equalsWithEpsilon(double x, double y, double eps) {\n    final double diff = Math.abs(x - y);\n    if (diff <= eps) {\n        return true;\n    }\n    return Double.isNaN(diff) && Double.isNaN(eps);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/util/MathUtils.java b/src/main/java/org/apache/commons/math/util/MathUtils.java\nindex 136184990..8b75eefd0 100644\n--- a/src/main/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/main/java/org/apache/commons/math/util/MathUtils.java\n@@ -413,9 +413,35 @@ public final class MathUtils {\n      * @param y second value\n      * @return {@code true} if the values are equal.\n      */\n-    public static boolean equals(double x, double y) {\n-        return (Double.isNaN(x) && Double.isNaN(y)) || x == y;\n+public static boolean equals(double x, double y) {\n+    return Double.compare(x, y) == 0 || (Double.isNaN(x) && Double.isNaN(y));\n+}\n+\n+public static boolean equals(double[] x, double[] y, double eps) {\n+    if (x == y) {\n+        return true;\n+    }\n+    if (x == null || y == null) {\n+        return false;\n     }\n+    if (x.length != y.length) {\n+        return false;\n+    }\n+    for (int i = 0; i < x.length; i++) {\n+        if (!equalsWithEpsilon(x[i], y[i], eps)) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+public static boolean equalsWithEpsilon(double x, double y, double eps) {\n+    final double diff = Math.abs(x - y);\n+    if (diff <= eps) {\n+        return true;\n+    }\n+    return Double.isNaN(diff) && Double.isNaN(eps);\n+}\n \n     /**\n      * Returns true if both arguments are NaN or neither is NaN and they are",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}