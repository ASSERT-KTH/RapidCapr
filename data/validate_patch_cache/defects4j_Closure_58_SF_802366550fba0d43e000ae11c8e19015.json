{
    "patch": "private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n    if (n == null) {\n        return;\n    }\n    switch (n.getType()) {\n        case Token.SCRIPT:\n        case Token.BLOCK:\n        case Token.FUNCTION:\n            return;\n\n        case Token.WHILE:\n        case Token.DO:\n        case Token.IF:\n            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n            return;\n\n        case Token.FOR:\n            if (!NodeUtil.isForIn(n)) {\n                Node cond = NodeUtil.getConditionExpression(n);\n                if (cond != null) {\n                    computeGenKill(cond, gen, kill, conditional);\n                }\n            } else {\n                // for(x in y) {...}\n                Node lhs = n.getFirstChild();\n                Node rhs = lhs.getNext();\n                if (NodeUtil.isVar(lhs)) {\n                    // for(var x in y) {...}\n                    lhs = lhs.getLastChild();\n                }\n                addToSetIfLocal(lhs, kill);\n                addToSetIfLocal(lhs, gen);\n                computeGenKill(rhs, gen, kill, conditional);\n            }\n            return;\n\n        case Token.VAR:\n            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                if (c.hasChildren()) {\n                    computeGenKill(c.getFirstChild(), gen, kill, conditional);\n                    if (!conditional) {\n                        addToSetIfLocal(c, kill);\n                    }\n                }\n            }\n            return;\n\n        // --- code added below to fix the issue ---\n        case Token.TRY:\n            Node tryBlock = n.getFirstChild();\n            Node catchBlock = tryBlock.getNext();\n            Node finallyBlock = catchBlock.getNext();\n            // update 'gen' with variables declared in 'catch' block\n            for (Node c = catchBlock.getFirstChild().getFirstChild(); c != null; c = c.getNext()) {\n                if (c.hasChildren()) {\n                    addToSetIfLocal(c, gen);\n                }\n            }\n            // update 'kill' with variables assigned in 'try' block\n            for (Node c = tryBlock.getFirstChild(); c != null; c = c.getNext()) {\n                if (NodeUtil.isAssignmentOp(c) && NodeUtil.isName(c.getFirstChild())) {\n                    Node lhs = c.getFirstChild();\n                    if (!conditional) {\n                        addToSetIfLocal(lhs, kill);\n                    }\n                    if (!NodeUtil.isAssign(c)) {\n                        // assignments such as a += 1 reads a.\n                        addToSetIfLocal(lhs, gen);\n                    }\n                    computeGenKill(lhs.getNext(), gen, kill, conditional);\n                }\n            }\n            computeGenKill(tryBlock.getFirstChild(), gen, kill, conditional);\n            computeGenKill(catchBlock.getFirstChild().getNext(), gen, kill, conditional);\n            computeGenKill(finallyBlock.getFirstChild(), gen, kill, conditional);\n            return;\n\n        case Token.AND:\n        case Token.OR:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            // May short circuit.\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n\n        case Token.HOOK:\n            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n            // Assume both sides are conditional.\n            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n            computeGenKill(n.getLastChild(), gen, kill, true);\n            return;\n\n        case Token.NAME:\n            if (isArgumentsName(n)) {\n                markAllParametersEscaped();\n            } else {\n                addToSetIfLocal(n, gen);\n            }\n            return;\n\n        default:\n            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n                Node lhs = n.getFirstChild();\n                if (!conditional) {\n                    addToSetIfLocal(lhs, kill);\n                }\n                if (!NodeUtil.isAssign(n)) {\n                    // assignments such as a += 1 reads a.\n                    addToSetIfLocal(lhs, gen);\n                }\n                computeGenKill(lhs.getNext(), gen, kill, conditional);\n            } else {\n                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                    computeGenKill(c, gen, kill, conditional);\n                }\n            }\n            return;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\nindex 7999db40..47bc085c 100644\n--- a/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n+++ b/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java\n@@ -175,92 +175,124 @@ class LiveVariablesAnalysis extends\n    * @param conditional {@code true} if any assignments encountered are\n    *        conditionally executed. These assignments might not kill a variable.\n    */\n-  private void computeGenKill(Node n, BitSet gen, BitSet kill,\n-      boolean conditional) {\n-\n-    switch (n.getType()) {\n-      case Token.SCRIPT:\n-      case Token.BLOCK:\n-      case Token.FUNCTION:\n-        return;\n-\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.IF:\n-        computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-            conditional);\n+private void computeGenKill(Node n, BitSet gen, BitSet kill, boolean conditional) {\n+    if (n == null) {\n         return;\n-\n-      case Token.FOR:\n-        if (!NodeUtil.isForIn(n)) {\n-          computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,\n-              conditional);\n-        } else {\n-          // for(x in y) {...}\n-          Node lhs = n.getFirstChild();\n-          Node rhs = lhs.getNext();\n-          if (NodeUtil.isVar(lhs)) {\n-            // for(var x in y) {...}\n-            lhs = lhs.getLastChild();\n-          }\n-            addToSetIfLocal(lhs, kill);\n-            addToSetIfLocal(lhs, gen);\n-          computeGenKill(rhs, gen, kill, conditional);\n-        }\n-        return;\n-\n-      case Token.VAR:\n-        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (c.hasChildren()) {\n-            computeGenKill(c.getFirstChild(), gen, kill, conditional);\n-            if (!conditional) {\n-              addToSetIfLocal(c, kill);\n+    }\n+    switch (n.getType()) {\n+        case Token.SCRIPT:\n+        case Token.BLOCK:\n+        case Token.FUNCTION:\n+            return;\n+\n+        case Token.WHILE:\n+        case Token.DO:\n+        case Token.IF:\n+            computeGenKill(NodeUtil.getConditionExpression(n), gen, kill, conditional);\n+            return;\n+\n+        case Token.FOR:\n+            if (!NodeUtil.isForIn(n)) {\n+                Node cond = NodeUtil.getConditionExpression(n);\n+                if (cond != null) {\n+                    computeGenKill(cond, gen, kill, conditional);\n+                }\n+            } else {\n+                // for(x in y) {...}\n+                Node lhs = n.getFirstChild();\n+                Node rhs = lhs.getNext();\n+                if (NodeUtil.isVar(lhs)) {\n+                    // for(var x in y) {...}\n+                    lhs = lhs.getLastChild();\n+                }\n+                addToSetIfLocal(lhs, kill);\n+                addToSetIfLocal(lhs, gen);\n+                computeGenKill(rhs, gen, kill, conditional);\n             }\n-          }\n-        }\n-        return;\n-\n-      case Token.AND:\n-      case Token.OR:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // May short circuit.\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.HOOK:\n-        computeGenKill(n.getFirstChild(), gen, kill, conditional);\n-        // Assume both sides are conditional.\n-        computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n-        computeGenKill(n.getLastChild(), gen, kill, true);\n-        return;\n-\n-      case Token.NAME:\n-        if (isArgumentsName(n)) {\n-          markAllParametersEscaped();\n-        } else {\n-          addToSetIfLocal(n, gen);\n-        }\n-        return;\n-\n-      default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node lhs = n.getFirstChild();\n-          if (!conditional) {\n-            addToSetIfLocal(lhs, kill);\n-          }\n-          if (!NodeUtil.isAssign(n)) {\n-            // assignments such as a += 1 reads a.\n-            addToSetIfLocal(lhs, gen);\n-          }\n-          computeGenKill(lhs.getNext(), gen, kill, conditional);\n-        } else {\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeGenKill(c, gen, kill, conditional);\n-          }\n-        }\n-        return;\n+            return;\n+\n+        case Token.VAR:\n+            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                if (c.hasChildren()) {\n+                    computeGenKill(c.getFirstChild(), gen, kill, conditional);\n+                    if (!conditional) {\n+                        addToSetIfLocal(c, kill);\n+                    }\n+                }\n+            }\n+            return;\n+\n+        // --- code added below to fix the issue ---\n+        case Token.TRY:\n+            Node tryBlock = n.getFirstChild();\n+            Node catchBlock = tryBlock.getNext();\n+            Node finallyBlock = catchBlock.getNext();\n+            // update 'gen' with variables declared in 'catch' block\n+            for (Node c = catchBlock.getFirstChild().getFirstChild(); c != null; c = c.getNext()) {\n+                if (c.hasChildren()) {\n+                    addToSetIfLocal(c, gen);\n+                }\n+            }\n+            // update 'kill' with variables assigned in 'try' block\n+            for (Node c = tryBlock.getFirstChild(); c != null; c = c.getNext()) {\n+                if (NodeUtil.isAssignmentOp(c) && NodeUtil.isName(c.getFirstChild())) {\n+                    Node lhs = c.getFirstChild();\n+                    if (!conditional) {\n+                        addToSetIfLocal(lhs, kill);\n+                    }\n+                    if (!NodeUtil.isAssign(c)) {\n+                        // assignments such as a += 1 reads a.\n+                        addToSetIfLocal(lhs, gen);\n+                    }\n+                    computeGenKill(lhs.getNext(), gen, kill, conditional);\n+                }\n+            }\n+            computeGenKill(tryBlock.getFirstChild(), gen, kill, conditional);\n+            computeGenKill(catchBlock.getFirstChild().getNext(), gen, kill, conditional);\n+            computeGenKill(finallyBlock.getFirstChild(), gen, kill, conditional);\n+            return;\n+\n+        case Token.AND:\n+        case Token.OR:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            // May short circuit.\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            return;\n+\n+        case Token.HOOK:\n+            computeGenKill(n.getFirstChild(), gen, kill, conditional);\n+            // Assume both sides are conditional.\n+            computeGenKill(n.getFirstChild().getNext(), gen, kill, true);\n+            computeGenKill(n.getLastChild(), gen, kill, true);\n+            return;\n+\n+        case Token.NAME:\n+            if (isArgumentsName(n)) {\n+                markAllParametersEscaped();\n+            } else {\n+                addToSetIfLocal(n, gen);\n+            }\n+            return;\n+\n+        default:\n+            if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n+                Node lhs = n.getFirstChild();\n+                if (!conditional) {\n+                    addToSetIfLocal(lhs, kill);\n+                }\n+                if (!NodeUtil.isAssign(n)) {\n+                    // assignments such as a += 1 reads a.\n+                    addToSetIfLocal(lhs, gen);\n+                }\n+                computeGenKill(lhs.getNext(), gen, kill, conditional);\n+            } else {\n+                for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                    computeGenKill(c, gen, kill, conditional);\n+                }\n+            }\n+            return;\n     }\n-  }\n+}\n \n   private void addToSetIfLocal(Node node, BitSet set) {\n     Preconditions.checkState(NodeUtil.isName(node));",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}