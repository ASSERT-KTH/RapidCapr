{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    double res;\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (x < mean - 40 * standardDeviation) {\n        res = 0;\n    } else if (x > mean + 40 * standardDeviation) {\n        res = 1;\n    } else {\n        res = 0.5 * Erf.erfc(-(x - mean) / (standardDeviation * FastMath.sqrt(2.0)));\n    }\n\n    return res;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..7170c6d08 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,21 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    double res;\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n     }\n+    if (x < mean - 40 * standardDeviation) {\n+        res = 0;\n+    } else if (x > mean + 40 * standardDeviation) {\n+        res = 1;\n+    } else {\n+        res = 0.5 * Erf.erfc(-(x - mean) / (standardDeviation * FastMath.sqrt(2.0)));\n+    }\n+\n+    return res;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}