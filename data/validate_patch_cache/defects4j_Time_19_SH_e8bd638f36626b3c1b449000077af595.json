{
    "patch": "        } else if (offsetLocal >= 0) {\n            boolean adjustedBeforePrev = false;\n            long prev = previousTransition(instantAdjusted);\n            if (prev < instantAdjusted) {\n                int offsetPrev = getOffset(prev);\n                int diff = offsetPrev - offsetLocal;\n                if (instantAdjusted - prev < diff) {\n                    return offsetPrev;\n                }\n                if (instantAdjusted - prev == diff) {\n                    adjustedBeforePrev = true;\n                }\n            }\n            long nextLocal = nextTransition(instantLocal - offsetLocal);\n            long nextAdjusted = nextTransition(instantAdjusted);\n            if (nextLocal != nextAdjusted) {\n                int offsetNext = getOffset(nextLocal);\n                if (nextLocal < nextAdjusted && offsetPrev >= offsetNext) {\n                    return offsetPrev;\n                }\n                if (nextLocal > nextAdjusted && offsetNext >= offsetLocal) {\n                    return offsetLocal;\n                }\n                if (adjustedBeforePrev && nextLocal == nextAdjusted && getOffset(nextLocal) == offsetNext) {\n                    return offsetAdjusted;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..fe1fa434 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,34 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0) {\n+            boolean adjustedBeforePrev = false;\n+            long prev = previousTransition(instantAdjusted);\n+            if (prev < instantAdjusted) {\n+                int offsetPrev = getOffset(prev);\n+                int diff = offsetPrev - offsetLocal;\n+                if (instantAdjusted - prev < diff) {\n+                    return offsetPrev;\n+                }\n+                if (instantAdjusted - prev == diff) {\n+                    adjustedBeforePrev = true;\n+                }\n+            }\n+            long nextLocal = nextTransition(instantLocal - offsetLocal);\n+            long nextAdjusted = nextTransition(instantAdjusted);\n+            if (nextLocal != nextAdjusted) {\n+                int offsetNext = getOffset(nextLocal);\n+                if (nextLocal < nextAdjusted && offsetPrev >= offsetNext) {\n+                    return offsetPrev;\n+                }\n+                if (nextLocal > nextAdjusted && offsetNext >= offsetLocal) {\n+                    return offsetLocal;\n+                }\n+                if (adjustedBeforePrev && nextLocal == nextAdjusted && getOffset(nextLocal) == offsetNext) {\n+                    return offsetAdjusted;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}