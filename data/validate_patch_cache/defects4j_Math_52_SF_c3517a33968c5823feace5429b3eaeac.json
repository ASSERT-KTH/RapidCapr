{
    "patch": "import org.apache.commons.math3.geometry.euclidean.threed.Rotation;\nimport org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\nimport org.apache.commons.math3.util.MathUtils;\n\npublic class FixedRotation extends Rotation {\n    public FixedRotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n        // norms computation\n        double u1u1 = u1.getNormSq();\n        double u2u2 = u2.getNormSq();\n        double v1v1 = v1.getNormSq();\n        double v2v2 = v2.getNormSq();\n        MathUtils.checkNotNull(u1, v1, u2, v2);\n        if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n            throw new IllegalArgumentException();\n        }\n\n        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n        v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n\n        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n        double u1u2   = u1.dotProduct(u2);\n        double v1v2   = v1.dotProduct(v2);\n        double coeffU = u1u2 / u1u1;\n        double coeffV = v1v2 / u1u1;\n        double beta, alpha;\n        if (UlpComparatorUtils.DEFAULT.compare(u1u2, u1u1) == -1) {\n            beta  = (u2u2 - coeffV*v1v2)/u1u2;\n            alpha = (u2.dotProduct(v1) - beta*u1u2)/u1u1;\n        } else {\n            alpha = (u2u2 - coeffV*v1v2)/u1u2;\n            beta  = (u2.dotProduct(v1) - alpha*u1u1)/u1u2;\n        }\n\n        v2 = new Vector3D(alpha, v1, beta, v2);\n\n        // preliminary computation\n        Vector3D uRef  = u1;\n        Vector3D vRef  = v1;\n        Vector3D v1Su1 = v1.subtract(u1);\n        Vector3D v2Su2 = v2.subtract(u2);\n        Vector3D k     = v1Su1.crossProduct(v2Su2);\n        Vector3D u3    = u1.crossProduct(u2);\n        double c       = k.dotProduct(u3);\n        if (c == 0) {\n            // the (q1, q2, q3) vector is close to the (u1, u2) plane\n            // we try other vectors\n            Vector3D v3 = Vector3D.crossProduct(v1, v2);\n            Vector3D v3Su3 = v3.subtract(u3);\n            k = v1Su1.crossProduct(v3Su3);\n            Vector3D u2Prime = u1.crossProduct(u3);\n            c = k.dotProduct(u2Prime);\n\n            if (c == 0) {\n                // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n                // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n                k = v2Su2.crossProduct(v3Su3);\n                c = k.dotProduct(u2.crossProduct(u3));;\n\n                if (c == 0) {\n                    // the (q1, q2, q3) vector is aligned with everything\n                    // this is really the identity rotation\n                    q0 = 1.0;\n                    q1 = 0.0;\n                    q2 = 0.0;\n                    q3 = 0.0;\n                    return;\n                }\n\n                // we will have to use u2 and v2 to compute the scalar part\n                uRef = u2;\n                vRef = v2;\n\n            }\n\n        }\n        computeQuaternion(uRef, vRef, k);\n\n    }\n    private void computeQuaternion(final Vector3D uRef, final Vector3D vRef,\n                                    final Vector3D k) {\n        // compute half-angle trigonometric functions\n        double                              s = FastMath.sqrt(0.5 * (1 + k.getNorm()));\n        final double invs;\n        if (s < MIN_THRESHOLD) {\n            s    = 0;\n            invs = 0;\n        } else {\n            invs = 1.0 / s;\n        }\n\n        final Vector3D qVector = k.scalarMultiply(invs);\n        final Vector3D uCrossV  = uRef.crossProduct(vRef);\n        final double   q0Value  = s;\n        final double   q1Value  = -qVector.getX();\n        final double   q2Value  = -qVector.getY();\n        final double   q3Value  = -qVector.getZ();\n        final double   norm     = FastMath.sqrt(uRef.getNormSq() * vRef.getNormSq());\n        final double   scalar   = ((uRef.dotProduct(vRef) > 0) ? 1.0 : -1.0) * norm * invs;\n        q0 = q0Value;\n        q1 = q1Value;\n        q2 = q2Value;\n        q3 = q3Value;\n        if (scalar < 0) {\n            q0 = -q0;\n            q1 = -q1;\n            q2 = -q2;\n            q3 = -q3;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\nindex 20f5b3486..d6ceaacc6 100644\n--- a/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n+++ b/src/main/java/org/apache/commons/math/geometry/euclidean/threed/Rotation.java\n@@ -310,69 +310,116 @@ public class Rotation implements Serializable {\n    * @param v2 desired image of u2 by the rotation\n    * @exception IllegalArgumentException if the norm of one of the vectors is zero\n    */\n-  public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n-\n-  // norms computation\n-  double u1u1 = u1.getNormSq();\n-  double u2u2 = u2.getNormSq();\n-  double v1v1 = v1.getNormSq();\n-  double v2v2 = v2.getNormSq();\n-  if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n-    throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_DEFINING_VECTOR);\n-  }\n+import org.apache.commons.math3.geometry.euclidean.threed.Rotation;\n+import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+public class FixedRotation extends Rotation {\n+    public FixedRotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {\n+        // norms computation\n+        double u1u1 = u1.getNormSq();\n+        double u2u2 = u2.getNormSq();\n+        double v1v1 = v1.getNormSq();\n+        double v2v2 = v2.getNormSq();\n+        MathUtils.checkNotNull(u1, v1, u2, v2);\n+        if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {\n+            throw new IllegalArgumentException();\n+        }\n \n-  // normalize v1 in order to have (v1'|v1') = (u1|u1)\n-  v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n-\n-  // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n-  double u1u2   = u1.dotProduct(u2);\n-  double v1v2   = v1.dotProduct(v2);\n-  double coeffU = u1u2 / u1u1;\n-  double coeffV = v1v2 / u1u1;\n-  double beta   = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));\n-  double alpha  = coeffU - beta * coeffV;\n-  v2 = new Vector3D(alpha, v1, beta, v2);\n-\n-  // preliminary computation\n-  Vector3D uRef  = u1;\n-  Vector3D vRef  = v1;\n-  Vector3D v1Su1 = v1.subtract(u1);\n-  Vector3D v2Su2 = v2.subtract(u2);\n-  Vector3D k     = v1Su1.crossProduct(v2Su2);\n-  Vector3D u3    = u1.crossProduct(u2);\n-  double c       = k.dotProduct(u3);\n-  if (c == 0) {\n-    // the (q1, q2, q3) vector is close to the (u1, u2) plane\n-    // we try other vectors\n-    Vector3D v3 = Vector3D.crossProduct(v1, v2);\n-    Vector3D v3Su3 = v3.subtract(u3);\n-    k = v1Su1.crossProduct(v3Su3);\n-    Vector3D u2Prime = u1.crossProduct(u3);\n-    c = k.dotProduct(u2Prime);\n-\n-    if (c == 0) {\n-      // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n-      // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n-      k = v2Su2.crossProduct(v3Su3);;\n-      c = k.dotProduct(u2.crossProduct(u3));;\n-\n-      if (c == 0) {\n-        // the (q1, q2, q3) vector is aligned with everything\n-        // this is really the identity rotation\n-        q0 = 1.0;\n-        q1 = 0.0;\n-        q2 = 0.0;\n-        q3 = 0.0;\n-        return;\n-      }\n+        // normalize v1 in order to have (v1'|v1') = (u1|u1)\n+        v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);\n+\n+        // adjust v2 in order to have (u1|u2) = (v1'|v2') and (v2'|v2') = (u2|u2)\n+        double u1u2   = u1.dotProduct(u2);\n+        double v1v2   = v1.dotProduct(v2);\n+        double coeffU = u1u2 / u1u1;\n+        double coeffV = v1v2 / u1u1;\n+        double beta, alpha;\n+        if (UlpComparatorUtils.DEFAULT.compare(u1u2, u1u1) == -1) {\n+            beta  = (u2u2 - coeffV*v1v2)/u1u2;\n+            alpha = (u2.dotProduct(v1) - beta*u1u2)/u1u1;\n+        } else {\n+            alpha = (u2u2 - coeffV*v1v2)/u1u2;\n+            beta  = (u2.dotProduct(v1) - alpha*u1u1)/u1u2;\n+        }\n+\n+        v2 = new Vector3D(alpha, v1, beta, v2);\n+\n+        // preliminary computation\n+        Vector3D uRef  = u1;\n+        Vector3D vRef  = v1;\n+        Vector3D v1Su1 = v1.subtract(u1);\n+        Vector3D v2Su2 = v2.subtract(u2);\n+        Vector3D k     = v1Su1.crossProduct(v2Su2);\n+        Vector3D u3    = u1.crossProduct(u2);\n+        double c       = k.dotProduct(u3);\n+        if (c == 0) {\n+            // the (q1, q2, q3) vector is close to the (u1, u2) plane\n+            // we try other vectors\n+            Vector3D v3 = Vector3D.crossProduct(v1, v2);\n+            Vector3D v3Su3 = v3.subtract(u3);\n+            k = v1Su1.crossProduct(v3Su3);\n+            Vector3D u2Prime = u1.crossProduct(u3);\n+            c = k.dotProduct(u2Prime);\n+\n+            if (c == 0) {\n+                // the (q1, q2, q3) vector is also close to the (u1, u3) plane,\n+                // it is almost aligned with u1: we try (u2, u3) and (v2, v3)\n+                k = v2Su2.crossProduct(v3Su3);\n+                c = k.dotProduct(u2.crossProduct(u3));;\n+\n+                if (c == 0) {\n+                    // the (q1, q2, q3) vector is aligned with everything\n+                    // this is really the identity rotation\n+                    q0 = 1.0;\n+                    q1 = 0.0;\n+                    q2 = 0.0;\n+                    q3 = 0.0;\n+                    return;\n+                }\n+\n+                // we will have to use u2 and v2 to compute the scalar part\n+                uRef = u2;\n+                vRef = v2;\n+\n+            }\n \n-      // we will have to use u2 and v2 to compute the scalar part\n-      uRef = u2;\n-      vRef = v2;\n+        }\n+        computeQuaternion(uRef, vRef, k);\n \n     }\n+    private void computeQuaternion(final Vector3D uRef, final Vector3D vRef,\n+                                    final Vector3D k) {\n+        // compute half-angle trigonometric functions\n+        double                              s = FastMath.sqrt(0.5 * (1 + k.getNorm()));\n+        final double invs;\n+        if (s < MIN_THRESHOLD) {\n+            s    = 0;\n+            invs = 0;\n+        } else {\n+            invs = 1.0 / s;\n+        }\n \n-  }\n+        final Vector3D qVector = k.scalarMultiply(invs);\n+        final Vector3D uCrossV  = uRef.crossProduct(vRef);\n+        final double   q0Value  = s;\n+        final double   q1Value  = -qVector.getX();\n+        final double   q2Value  = -qVector.getY();\n+        final double   q3Value  = -qVector.getZ();\n+        final double   norm     = FastMath.sqrt(uRef.getNormSq() * vRef.getNormSq());\n+        final double   scalar   = ((uRef.dotProduct(vRef) > 0) ? 1.0 : -1.0) * norm * invs;\n+        q0 = q0Value;\n+        q1 = q1Value;\n+        q2 = q2Value;\n+        q3 = q3Value;\n+        if (scalar < 0) {\n+            q0 = -q0;\n+            q1 = -q1;\n+            q2 = -q2;\n+            q3 = -q3;\n+        }\n+    }\n+}\n \n   // compute the vectorial part\n   c = FastMath.sqrt(c);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}