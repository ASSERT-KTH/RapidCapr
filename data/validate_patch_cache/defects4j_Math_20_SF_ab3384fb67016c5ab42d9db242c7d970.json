{
    "patch": "public double[] repairAndDecode(final double[] x) {\n    double[] decoded = decode(x);\n    double min = Double.MAX_VALUE;\n    double max = Double.MIN_VALUE;\n    for (double value : decoded) {\n        if (value < min) {\n            min = value;\n        }\n        if (value > max) {\n            max = value;\n        }\n    }\n    double range = max - min;\n    double[] normalized = new double[decoded.length];\n    for (int i = 0; i < decoded.length; i++) {\n        normalized[i] = (decoded[i] - min) / range;\n    }\n    return normalized;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\nindex 4b7dbf6bb..dee1e4fc8 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n@@ -917,10 +917,25 @@ public class CMAESOptimizer\n          * @param x Normalized objective variables.\n          * @return the original objective variables, possibly repaired.\n          */\n-        public double[] repairAndDecode(final double[] x) {\n-            return\n-                decode(x);\n+public double[] repairAndDecode(final double[] x) {\n+    double[] decoded = decode(x);\n+    double min = Double.MAX_VALUE;\n+    double max = Double.MIN_VALUE;\n+    for (double value : decoded) {\n+        if (value < min) {\n+            min = value;\n         }\n+        if (value > max) {\n+            max = value;\n+        }\n+    }\n+    double range = max - min;\n+    double[] normalized = new double[decoded.length];\n+    for (int i = 0; i < decoded.length; i++) {\n+        normalized[i] = (decoded[i] - min) / range;\n+    }\n+    return normalized;\n+}\n \n         /**\n          * @param x Normalized objective variables.",
    "result_reason": "junit.framework.AssertionFailedError: expected:<1.0> but was:<0.0>",
    "test_result": "FAIL"
}