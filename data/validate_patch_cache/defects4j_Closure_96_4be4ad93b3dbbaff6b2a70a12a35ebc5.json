{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n      FunctionType functionType) {\n    Iterator<Node> arguments = call.children().iterator();\n    arguments.next(); // skip the function name\n\n    List<Node> parameters = functionType.getParameters();\n    int numParameters = parameters.size();\n    int numArguments = call.getChildCount() - 1;\n    int minArgs = functionType.getMinArguments();\n    int maxArgs = functionType.getMaxArguments();\n\n    for (int i = 0; arguments.hasNext(); i++) {\n      Node argument = arguments.next();\n      if (i < numParameters) {\n        Node parameter = parameters.get(i);\n        validator.expectArgumentMatchesParameter(\n            t, argument, getJSType(argument), getJSType(parameter), call, i + 1);\n      } else if (!functionType.hasRestFormals()) {\n        // We have more arguments than parameters, but the function doesn't have rest formals.\n        report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n            String.valueOf(numArguments), String.valueOf(numParameters));\n        return;\n      }\n    }\n\n    if (numArguments < numParameters) {\n      report(t, call, NOT_ENOUGH_ARGUMENTS, functionType.toString(),\n              String.valueOf(numArguments), String.valueOf(numParameters));\n      return;\n    } else if (numArguments > numParameters && !functionType.hasRestFormals()) {\n      report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n              String.valueOf(numArguments), String.valueOf(numParameters));\n      return;\n    }\n\n    if (minArgs > numArguments) {\n      report(t, call, NOT_ENOUGH_ARGUMENTS, functionType.toString(),\n              String.valueOf(numArguments), String.valueOf(minArgs));\n      return;\n    }\n\n    if (maxArgs < numArguments) {\n      report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n              String.valueOf(numArguments), String.valueOf(maxArgs));\n      return;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..a881d93f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1401,31 +1401,46 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n     Iterator<Node> arguments = call.children().iterator();\n     arguments.next(); // skip the function name\n \n-    Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n-        parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n-\n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n-    }\n-\n-    int numArgs = call.getChildCount() - 1;\n+    List<Node> parameters = functionType.getParameters();\n+    int numParameters = parameters.size();\n+    int numArguments = call.getChildCount() - 1;\n     int minArgs = functionType.getMinArguments();\n     int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+\n+    for (int i = 0; arguments.hasNext(); i++) {\n+      Node argument = arguments.next();\n+      if (i < numParameters) {\n+        Node parameter = parameters.get(i);\n+        validator.expectArgumentMatchesParameter(\n+            t, argument, getJSType(argument), getJSType(parameter), call, i + 1);\n+      } else if (!functionType.hasRestFormals()) {\n+        // We have more arguments than parameters, but the function doesn't have rest formals.\n+        report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n+            String.valueOf(numArguments), String.valueOf(numParameters));\n+        return;\n+      }\n+    }\n+\n+    if (numArguments < numParameters) {\n+      report(t, call, NOT_ENOUGH_ARGUMENTS, functionType.toString(),\n+              String.valueOf(numArguments), String.valueOf(numParameters));\n+      return;\n+    } else if (numArguments > numParameters && !functionType.hasRestFormals()) {\n+      report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n+              String.valueOf(numArguments), String.valueOf(numParameters));\n+      return;\n+    }\n+\n+    if (minArgs > numArguments) {\n+      report(t, call, NOT_ENOUGH_ARGUMENTS, functionType.toString(),\n+              String.valueOf(numArguments), String.valueOf(minArgs));\n+      return;\n+    }\n+\n+    if (maxArgs < numArguments) {\n+      report(t, call, TOO_MANY_ARGUMENTS, functionType.toString(),\n+              String.valueOf(numArguments), String.valueOf(maxArgs));\n+      return;\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}