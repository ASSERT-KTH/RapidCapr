{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = Arrays.copyOf(savedFields, count);\n        iSavedFieldsShared = false;\n    }\n    Arrays.sort(savedFields, 0, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DurationField months = DurationFieldType.months().getField(iChrono);\n        DurationField days = DurationFieldType.days().getField(iChrono);\n\n        // fix for week years and week of week year fields [1716303]\n        DurationField wyears = iChrono.weekyears();\n        DurationField wweeks = iChrono.weeks();\n        boolean hasWeekYear = false;\n        for (int i = 0; i < count; i++) {\n            DateTimeField field = savedFields[i].iField;\n            DurationField durationField = field.getDurationField();\n            if (durationField == wyears || durationField == wweeks) {\n                hasWeekYear |= (durationField == wyears);\n                break;\n            }\n        }\n        int year = iDefaultYear;\n        if (hasWeekYear) {\n            DateTimeField f;\n            if ((f = getField(weekyear())) != null) {\n                int parsedWeekyear = savedFields[0].iParsedInt;\n                year = f.set(this, year, parsedWeekyear);\n                savedFields[0] = new SavedField(f, parsedWeekyear);\n            }\n            if ((f = getField(weekOfWeekyear())) != null) {\n                int parsedWeekOfWeekyear = savedFields[1].iParsedInt;\n                int weekyear = getWeekyear(year, parsedWeekOfWeekyear);\n                year = f.set(this, year, weekyear);\n                savedFields[1] = new SavedField(f, parsedWeekOfWeekyear);\n            }\n        }\n\n        DurationField first = savedFields[0].iField.getDurationField();\n        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n            saveField(DateTimeFieldType.year(), year);\n            return computeMillis(resetFields, text);\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..32661dda 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,83 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = Arrays.copyOf(savedFields, count);\n+        iSavedFieldsShared = false;\n+    }\n+    Arrays.sort(savedFields, 0, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DurationField months = DurationFieldType.months().getField(iChrono);\n+        DurationField days = DurationFieldType.days().getField(iChrono);\n+\n+        // fix for week years and week of week year fields [1716303]\n+        DurationField wyears = iChrono.weekyears();\n+        DurationField wweeks = iChrono.weeks();\n+        boolean hasWeekYear = false;\n+        for (int i = 0; i < count; i++) {\n+            DateTimeField field = savedFields[i].iField;\n+            DurationField durationField = field.getDurationField();\n+            if (durationField == wyears || durationField == wweeks) {\n+                hasWeekYear |= (durationField == wyears);\n+                break;\n             }\n         }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+        int year = iDefaultYear;\n+        if (hasWeekYear) {\n+            DateTimeField f;\n+            if ((f = getField(weekyear())) != null) {\n+                int parsedWeekyear = savedFields[0].iParsedInt;\n+                year = f.set(this, year, parsedWeekyear);\n+                savedFields[0] = new SavedField(f, parsedWeekyear);\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            if ((f = getField(weekOfWeekyear())) != null) {\n+                int parsedWeekOfWeekyear = savedFields[1].iParsedInt;\n+                int weekyear = getWeekyear(year, parsedWeekOfWeekyear);\n+                year = f.set(this, year, weekyear);\n+                savedFields[1] = new SavedField(f, parsedWeekOfWeekyear);\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+\n+        DurationField first = savedFields[0].iField.getDurationField();\n+        if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n+            saveField(DateTimeFieldType.year(), year);\n+            return computeMillis(resetFields, text);\n+        }\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}