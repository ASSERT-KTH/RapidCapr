{
    "patch": "Property prop = getProperty(child.getString());\nif (prop == null) {\n  t.report(child, UNKNOWN_PROPERTY);\n} else if (!prop.scheduleRenaming(\n    child,\n    processProperty(t, prop,\n                    typeSystem.getType(this.currentScope, n, child.getString()),\n                    null))) {\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..b760e7da 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,16 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+Property prop = getProperty(child.getString());\n+if (prop == null) {\n+  t.report(child, UNKNOWN_PROPERTY);\n+} else if (!prop.scheduleRenaming(\n+    child,\n+    processProperty(t, prop,\n+                    typeSystem.getType(this.currentScope, n, child.getString()),\n+                    null))) {\n+  return false;\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}