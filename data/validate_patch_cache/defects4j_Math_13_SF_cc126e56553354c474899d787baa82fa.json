{
    "patch": "private RealMatrix squareRoot(RealMatrix m) {\n    final SchurTransformer schur = new SchurTransformer(m);\n    final RealMatrix t = schur.getT();\n    final RealMatrix z = schur.getZ();\n    final int n = t.getColumnDimension();\n    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n\n    for (int i = 0; i < n; i++) {\n        final double ti = t.getEntry(i, i);\n        s.setEntry(i, i, (ti > 0) ? FastMath.sqrt(ti) : 0);\n    }\n\n    return z.multiply(s).multiply(z.inverse());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..8a6fb7378 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -558,8 +558,18 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @param m Symmetric, positive-definite (weight) matrix.\n      * @return the square-root of the weight matrix.\n      */\n-    private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+private RealMatrix squareRoot(RealMatrix m) {\n+    final SchurTransformer schur = new SchurTransformer(m);\n+    final RealMatrix t = schur.getT();\n+    final RealMatrix z = schur.getZ();\n+    final int n = t.getColumnDimension();\n+    final RealMatrix s = MatrixUtils.createRealMatrix(n, n);\n+\n+    for (int i = 0; i < n; i++) {\n+        final double ti = t.getEntry(i, i);\n+        s.setEntry(i, i, (ti > 0) ? FastMath.sqrt(ti) : 0);\n     }\n+\n+    return z.multiply(s).multiply(z.inverse());\n+}\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}