{
    "patch": "        if (!Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax)) {\n            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are infinite or NaN. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n        }\n        \n        // catch cases where min/max bracket the root directly, otherwise\n        // proceed with full Brent algorithm\n        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n        }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..500d31557 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -133,6 +133,15 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n             return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n         }\n \n+        if (!Double.isFinite(yInitial) || !Double.isFinite(yMin) || !Double.isFinite(yMax)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints or initial guess are infinite or NaN. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"], Initial guess value: \" + yInitial);\n+        }\n+        \n+        // catch cases where min/max bracket the root directly, otherwise\n+        // proceed with full Brent algorithm\n+        if ((yMin > 0 && yMax > 0) || (yMin < 0 && yMax < 0)) {\n+            throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. Endpoints: [\" + min + \",\" + max + \"], Values: [\" + yMin + \",\" + yMax + \"]\");\n+        }\n \n         // full Brent algorithm starting with provided initial guess\n         return solve(f, min, yMin, max, yMax, initial, yInitial);",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}