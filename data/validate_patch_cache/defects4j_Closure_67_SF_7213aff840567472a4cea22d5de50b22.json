{
    "patch": "    private boolean isPrototypePropertyAssign(Node assign) {\n      Node n = assign.getFirstChild();\n      if (n != null && NodeUtil.isGet(n) && n.getFirstChild().matchesQualifiedName(\"Object.prototype\")) {\n        if (n.getNext() != null && n.getNext().matchesQualifiedName(\"hasOwnProperty\")) {\n          return false;\n        }\n        Node parent = n.getParent();\n        while (parent != null && NodeUtil.isNormalStatement(parent)) {\n          if (parent.getFirstChild().isCall() && parent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n            return false;\n          }\n          parent = parent.getParent();\n        }\n        return true;\n      }\n      return false;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..d0bb5bc3 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,26 +310,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n+      if (n != null && NodeUtil.isGet(n) && n.getFirstChild().matchesQualifiedName(\"Object.prototype\")) {\n+        if (n.getNext() != null && n.getNext().matchesQualifiedName(\"hasOwnProperty\")) {\n+          return false;\n+        }\n+        Node parent = n.getParent();\n+        while (parent != null && NodeUtil.isNormalStatement(parent)) {\n+          if (parent.getFirstChild().isCall() && parent.getFirstChild().matchesQualifiedName(\"goog.inherits\")) {\n+            return false;\n           }\n+          parent = parent.getParent();\n         }\n+        return true;\n       }\n-\n       return false;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}