{
    "patch": "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException\n{\n    final double minDelta = 1E-20;\n    final double[] fractions = new double[maxIterations + 5];\n    boolean keep = true;\n    double delta = Double.MAX_VALUE;\n    int m = 1;\n    int iter = 0;\n    fractions[0] = value;\n    long a = (long) FastMath.floor(fractions[0]);\n    long hden = 1;\n    long hnum = a;\n    long last = 0;\n    if (FastMath.abs(a - fractions[0]) < epsilon) {\n        this.numerator = (int) hnum;\n        this.denominator = (int) hden;\n        return;\n    }\n    double f = fractions[0] - a;\n    double err = FastMath.abs(f);\n    int convergedIndex = 0;\n    boolean repeatedConverged = false;\n    while (keep) {\n\n        // check stopping criterion\n        if ((convergedIndex > 1) && repeatedConverged) {\n            this.numerator = (int) hnum;\n            this.denominator = (int) hden;\n            return;\n        }\n        if ((delta < epsilon || err < epsilon || m > maxDenominator) && convergedIndex > 1) {\n            this.numerator = (int) hnum;\n            this.denominator = (int) hden;\n            return;\n        }\n        if (++iter >= maxIterations) {\n            break;\n        }\n\n        // calculate next continued fraction approximation\n        f = 1.0 / (f - (long) f);           \n        fractions[iter] = a + f;\n        int bound = ((iter + 1) / 2) + 1;\n        delta = FastMath.abs(fractions[iter] - last);\n        for (int i = 1; i <= bound; ++i) {\n            int j = iter - i + 1;\n            if (j < 0) {\n                break;\n            }\n            delta *= FastMath.abs(fractions[j] / fractions[j - 1] - 1);\n            if (delta < minDelta || delta > epsilon) {\n                break;\n            }\n            delta = FastMath.max(delta, FastMath.abs(fractions[j] - fractions[j - 1]));\n        }\n\n        // calculate a and h\n        last = fractions[iter];\n        if (FastMath.abs(fractions[iter] - Double.POSITIVE_INFINITY) < 1.0e-16 || FastMath.abs(fractions[iter] - Double.NEGATIVE_INFINITY) < 1.0e-16) {\n            throw new FractionConversionException(value, maxIterations);\n        }\n        a = (long) FastMath.floor(last);\n        hdenold = hden;\n        aold = a;\n        hden = a * hden + hdenold;\n        hnumold = hnum;\n        hnum = hnum * a + hnumold * hdenold;\n        // reduce\n        long g = gcd(hnum, hden);\n        hnum /= g;\n        hden /= g;\n\n        // check for convergence\n        err = FastMath.abs(last - (double) hnum / (double) hden);\n        if (err < epsilon) {\n            int j;\n            repeatedConverged = false;\n            for (j = 0; j < iter; ++j) {\n                if (FastMath.abs(fractions[iter - j] - fractions[iter - j - 1]) >= (err + 1e-20)) {\n                    break;\n                }\n            }\n            if (j == iter) {\n                if (convergedIndex == 1) {\n                    repeatedConverged = true;\n                }\n                convergedIndex = iter;\n            }\n            // reset delta\n            delta = FastMath.abs(fractions[iter] - last);\n        }\n        ++m;\n    }\n    throw new FractionConversionException(value, maxIterations);\n}\n\nprivate long gcd(long p, long q) {\n    if (p < 0) {\n        throw new IllegalArgumentException(\"p must be >= 0\");\n    }\n    if (q < 0) {\n        throw new IllegalArgumentException(\"q must be >= 0\");\n    }\n    if (p == 0 || q == 0) {\n        return 1;\n    }\n    //if either operand fits into ints, use ints instead of longs\n    if (p <= Integer.MAX_VALUE && q <= Integer.MAX_VALUE) {\n        if (p < q) {\n            int tmp = (int)p;\n            p = q;\n            q = tmp;\n        }\n        int i = (int) p;\n        int j = (int) q;\n        while (j != 0) {\n            int temp = j;\n            j = i % j;\n            i = temp;\n        }\n        return (long) i;\n    } else {\n        while (q != 0) {\n            long temp = q;\n            q = p % q;\n            p = temp;\n        }\n        return p;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/fraction/Fraction.java b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\nindex f81ff0a94..0534c82e7 100644\n--- a/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n+++ b/src/main/java/org/apache/commons/math3/fraction/Fraction.java\n@@ -172,70 +172,137 @@ public class Fraction\n      * @throws FractionConversionException if the continued fraction failed to\n      *         converge.\n      */\n-    private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n+private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n         throws FractionConversionException\n-    {\n-        long overflow = Integer.MAX_VALUE;\n-        double r0 = value;\n-        long a0 = (long)FastMath.floor(r0);\n-        if (a0 > overflow) {\n-            throw new FractionConversionException(value, a0, 1l);\n+{\n+    final double minDelta = 1E-20;\n+    final double[] fractions = new double[maxIterations + 5];\n+    boolean keep = true;\n+    double delta = Double.MAX_VALUE;\n+    int m = 1;\n+    int iter = 0;\n+    fractions[0] = value;\n+    long a = (long) FastMath.floor(fractions[0]);\n+    long hden = 1;\n+    long hnum = a;\n+    long last = 0;\n+    if (FastMath.abs(a - fractions[0]) < epsilon) {\n+        this.numerator = (int) hnum;\n+        this.denominator = (int) hden;\n+        return;\n+    }\n+    double f = fractions[0] - a;\n+    double err = FastMath.abs(f);\n+    int convergedIndex = 0;\n+    boolean repeatedConverged = false;\n+    while (keep) {\n+\n+        // check stopping criterion\n+        if ((convergedIndex > 1) && repeatedConverged) {\n+            this.numerator = (int) hnum;\n+            this.denominator = (int) hden;\n+            return;\n         }\n-\n-        // check for (almost) integer arguments, which should not go\n-        // to iterations.\n-        if (FastMath.abs(a0 - value) < epsilon) {\n-            this.numerator = (int) a0;\n-            this.denominator = 1;\n+        if ((delta < epsilon || err < epsilon || m > maxDenominator) && convergedIndex > 1) {\n+            this.numerator = (int) hnum;\n+            this.denominator = (int) hden;\n             return;\n         }\n+        if (++iter >= maxIterations) {\n+            break;\n+        }\n \n-        long p0 = 1;\n-        long q0 = 0;\n-        long p1 = a0;\n-        long q1 = 1;\n-\n-        long p2 = 0;\n-        long q2 = 1;\n-\n-        int n = 0;\n-        boolean stop = false;\n-        do {\n-            ++n;\n-            double r1 = 1.0 / (r0 - a0);\n-            long a1 = (long)FastMath.floor(r1);\n-            p2 = (a1 * p1) + p0;\n-            q2 = (a1 * q1) + q0;\n-            if ((p2 > overflow) || (q2 > overflow)) {\n-                throw new FractionConversionException(value, p2, q2);\n+        // calculate next continued fraction approximation\n+        f = 1.0 / (f - (long) f);           \n+        fractions[iter] = a + f;\n+        int bound = ((iter + 1) / 2) + 1;\n+        delta = FastMath.abs(fractions[iter] - last);\n+        for (int i = 1; i <= bound; ++i) {\n+            int j = iter - i + 1;\n+            if (j < 0) {\n+                break;\n             }\n-\n-            double convergent = (double)p2 / (double)q2;\n-            if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {\n-                p0 = p1;\n-                p1 = p2;\n-                q0 = q1;\n-                q1 = q2;\n-                a0 = a1;\n-                r0 = r1;\n-            } else {\n-                stop = true;\n+            delta *= FastMath.abs(fractions[j] / fractions[j - 1] - 1);\n+            if (delta < minDelta || delta > epsilon) {\n+                break;\n             }\n-        } while (!stop);\n+            delta = FastMath.max(delta, FastMath.abs(fractions[j] - fractions[j - 1]));\n+        }\n \n-        if (n >= maxIterations) {\n+        // calculate a and h\n+        last = fractions[iter];\n+        if (FastMath.abs(fractions[iter] - Double.POSITIVE_INFINITY) < 1.0e-16 || FastMath.abs(fractions[iter] - Double.NEGATIVE_INFINITY) < 1.0e-16) {\n             throw new FractionConversionException(value, maxIterations);\n         }\n-\n-        if (q2 < maxDenominator) {\n-            this.numerator = (int) p2;\n-            this.denominator = (int) q2;\n-        } else {\n-            this.numerator = (int) p1;\n-            this.denominator = (int) q1;\n+        a = (long) FastMath.floor(last);\n+        hdenold = hden;\n+        aold = a;\n+        hden = a * hden + hdenold;\n+        hnumold = hnum;\n+        hnum = hnum * a + hnumold * hdenold;\n+        // reduce\n+        long g = gcd(hnum, hden);\n+        hnum /= g;\n+        hden /= g;\n+\n+        // check for convergence\n+        err = FastMath.abs(last - (double) hnum / (double) hden);\n+        if (err < epsilon) {\n+            int j;\n+            repeatedConverged = false;\n+            for (j = 0; j < iter; ++j) {\n+                if (FastMath.abs(fractions[iter - j] - fractions[iter - j - 1]) >= (err + 1e-20)) {\n+                    break;\n+                }\n+            }\n+            if (j == iter) {\n+                if (convergedIndex == 1) {\n+                    repeatedConverged = true;\n+                }\n+                convergedIndex = iter;\n+            }\n+            // reset delta\n+            delta = FastMath.abs(fractions[iter] - last);\n         }\n+        ++m;\n+    }\n+    throw new FractionConversionException(value, maxIterations);\n+}\n \n+private long gcd(long p, long q) {\n+    if (p < 0) {\n+        throw new IllegalArgumentException(\"p must be >= 0\");\n+    }\n+    if (q < 0) {\n+        throw new IllegalArgumentException(\"q must be >= 0\");\n+    }\n+    if (p == 0 || q == 0) {\n+        return 1;\n     }\n+    //if either operand fits into ints, use ints instead of longs\n+    if (p <= Integer.MAX_VALUE && q <= Integer.MAX_VALUE) {\n+        if (p < q) {\n+            int tmp = (int)p;\n+            p = q;\n+            q = tmp;\n+        }\n+        int i = (int) p;\n+        int j = (int) q;\n+        while (j != 0) {\n+            int temp = j;\n+            j = i % j;\n+            i = temp;\n+        }\n+        return (long) i;\n+    } else {\n+        while (q != 0) {\n+            long temp = q;\n+            q = p % q;\n+            p = temp;\n+        }\n+        return p;\n+    }\n+}\n \n     /**\n      * Create a fraction from an int.",
    "result_reason": "error: possible loss of precision",
    "test_result": "ERROR"
}