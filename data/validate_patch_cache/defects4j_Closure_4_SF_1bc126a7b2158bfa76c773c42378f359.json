{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<Node> visited = new ArrayList<Node>();\n    return hasExceptionHandlerRecursive(cfgNode, visited);\n}\n\nprivate boolean hasExceptionHandlerRecursive(Node cfgNode, List<Node> visited) {\n    if (visited.contains(cfgNode)) {\n        return false;\n    }\n    visited.add(cfgNode);\n\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n            return true;\n        } else if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n            if (hasExceptionHandlerRecursive(edge.getDestination(), visited)) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..c42e2edf 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,30 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n-    }\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<Node> visited = new ArrayList<Node>();\n+    return hasExceptionHandlerRecursive(cfgNode, visited);\n+}\n \n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n+private boolean hasExceptionHandlerRecursive(Node cfgNode, List<Node> visited) {\n+    if (visited.contains(cfgNode)) {\n+        return false;\n     }\n-\n-    resolveViaProperties(t, enclosing);\n-    if (detectImplicitPrototypeCycle()) {\n-      handleTypeCycle(t);\n+    visited.add(cfgNode);\n+\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+            return true;\n+        } else if (edge.getValue() == Branch.ON_TRUE || edge.getValue() == Branch.ON_FALSE) {\n+            if (hasExceptionHandlerRecursive(edge.getDestination(), visited)) {\n+                return true;\n+            }\n+        }\n     }\n \n-    super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n-  }\n+    return false;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}