{
    "patch": "private void populateContextualActualTypeParameters(Type classType) {\n    if (!(classType instanceof ParameterizedType)) {\n        return;\n    }\n    ParameterizedType parameterizedType = (ParameterizedType) classType;\n    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n    Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<>();\n    for (int i = 0; i < actualTypeArguments.length; i++) {\n        TypeVariable<?> typeParameter = typeParameters[i];\n        Type actualTypeArgument = actualTypeArguments[i];\n        if (actualTypeArgument instanceof Class) {\n            typeVarAssigns.put(typeParameter, actualTypeArgument);\n        } else if (actualTypeArgument instanceof GenericArrayType) {\n            Type componentType = ((GenericArrayType) actualTypeArgument).getGenericComponentType();\n            Type resolvedComponentType = resolveType(typeVarAssigns, componentType);\n            if (resolvedComponentType instanceof Class) {\n                typeVarAssigns.put(typeParameter, Array.newInstance((Class<?>) resolvedComponentType, 0).getClass());\n            }\n        } else if (actualTypeArgument instanceof ParameterizedType) {\n            ParameterizedType parameterizedTypeArgument = (ParameterizedType) actualTypeArgument;\n            Type rawType = parameterizedTypeArgument.getRawType();\n            if (rawType instanceof Class) {\n                typeVarAssigns.put(typeParameter, actualTypeArgument);\n            }\n        } else if (actualTypeArgument instanceof TypeVariable) {\n            TypeVariable<?> typeVariableArgument = (TypeVariable<?>) actualTypeArgument;\n            Type resolvedType = resolveType(typeVarAssigns, typeVariableArgument);\n            if (resolvedType instanceof Class) {\n                typeVarAssigns.put(typeParameter, resolvedType);\n            }\n        } else {\n            throw new IllegalArgumentException(\"Unexpected type bound: \" + actualTypeArgument);\n        }\n    }\n    contextualActualTypeParameters.putAll(typeVarAssigns);\n}\n\nprivate Type resolveType(Map<TypeVariable<?>, Type> typeVarAssigns, Type type) {\n    if (type instanceof TypeVariable) {\n        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n        Type resolvedType = typeVarAssigns.get(typeVariable);\n        if (resolvedType == null) {\n            throw new IllegalArgumentException(\"Unknown type variable: \" + typeVariable);\n        }\n        return resolveType(typeVarAssigns, resolvedType);\n    } else {\n        return type;\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..e23c79fb6 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -64,23 +64,56 @@ public abstract class GenericMetadataSupport {\n \n \n     protected void registerTypeVariablesOn(Type classType) {\n-        if (!(classType instanceof ParameterizedType)) {\n-            return;\n-        }\n-        ParameterizedType parameterizedType = (ParameterizedType) classType;\n-        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n-        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n-        for (int i = 0; i < actualTypeArguments.length; i++) {\n-            TypeVariable typeParameter = typeParameters[i];\n-            Type actualTypeArgument = actualTypeArguments[i];\n-\n-            if (actualTypeArgument instanceof WildcardType) {\n-                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n-                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n-            }\n-            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n-        }\n+private void populateContextualActualTypeParameters(Type classType) {\n+    if (!(classType instanceof ParameterizedType)) {\n+        return;\n+    }\n+    ParameterizedType parameterizedType = (ParameterizedType) classType;\n+    TypeVariable<?>[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+    Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+    Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<>();\n+    for (int i = 0; i < actualTypeArguments.length; i++) {\n+        TypeVariable<?> typeParameter = typeParameters[i];\n+        Type actualTypeArgument = actualTypeArguments[i];\n+        if (actualTypeArgument instanceof Class) {\n+            typeVarAssigns.put(typeParameter, actualTypeArgument);\n+        } else if (actualTypeArgument instanceof GenericArrayType) {\n+            Type componentType = ((GenericArrayType) actualTypeArgument).getGenericComponentType();\n+            Type resolvedComponentType = resolveType(typeVarAssigns, componentType);\n+            if (resolvedComponentType instanceof Class) {\n+                typeVarAssigns.put(typeParameter, Array.newInstance((Class<?>) resolvedComponentType, 0).getClass());\n+            }\n+        } else if (actualTypeArgument instanceof ParameterizedType) {\n+            ParameterizedType parameterizedTypeArgument = (ParameterizedType) actualTypeArgument;\n+            Type rawType = parameterizedTypeArgument.getRawType();\n+            if (rawType instanceof Class) {\n+                typeVarAssigns.put(typeParameter, actualTypeArgument);\n+            }\n+        } else if (actualTypeArgument instanceof TypeVariable) {\n+            TypeVariable<?> typeVariableArgument = (TypeVariable<?>) actualTypeArgument;\n+            Type resolvedType = resolveType(typeVarAssigns, typeVariableArgument);\n+            if (resolvedType instanceof Class) {\n+                typeVarAssigns.put(typeParameter, resolvedType);\n+            }\n+        } else {\n+            throw new IllegalArgumentException(\"Unexpected type bound: \" + actualTypeArgument);\n+        }\n+    }\n+    contextualActualTypeParameters.putAll(typeVarAssigns);\n+}\n+\n+private Type resolveType(Map<TypeVariable<?>, Type> typeVarAssigns, Type type) {\n+    if (type instanceof TypeVariable) {\n+        TypeVariable<?> typeVariable = (TypeVariable<?>) type;\n+        Type resolvedType = typeVarAssigns.get(typeVariable);\n+        if (resolvedType == null) {\n+            throw new IllegalArgumentException(\"Unknown type variable: \" + typeVariable);\n+        }\n+        return resolveType(typeVarAssigns, resolvedType);\n+    } else {\n+        return type;\n+    }\n+}\n     }\n \n     protected void registerTypeParametersOn(TypeVariable[] typeParameters) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}