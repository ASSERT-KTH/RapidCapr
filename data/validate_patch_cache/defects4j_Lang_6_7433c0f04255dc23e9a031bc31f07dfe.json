{
    "patch": "    public static String unescape(String input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            StringWriter writer = new StringWriter(input.length());\n            unescape(input, writer);\n            return writer.toString();\n        } catch (IOException ioe) {\n            // This should never ever happen while writing to a StringWriter.\n            throw new RuntimeException(ioe);\n        }\n    }\n\n    public static void unescape(String input, Writer output) throws IOException {\n        if (output == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = input.length();\n        while (pos < len) {\n            int escape = input.indexOf('\\\\', pos);\n            if (escape < 0) {\n                output.write(input.substring(pos));\n                break;\n            }\n            output.write(input.substring(pos, escape));\n            if (escape == len - 1) {\n                break;\n            }\n            char c = input.charAt(escape + 1);\n            int charsConsumed = 0;\n            if (c == 'u') {\n\n>>> [ INFILL ] <<<\n\n            } else {\n                output.write(c);\n                charsConsumed = 2;\n            }\n            pos = escape + 1 + charsConsumed;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..14d9ba93 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,52 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+    public static String unescape(String input) {\n+        if (input == null) {\n+            return null;\n+        }\n+        try {\n+            StringWriter writer = new StringWriter(input.length());\n+            unescape(input, writer);\n+            return writer.toString();\n+        } catch (IOException ioe) {\n+            // This should never ever happen while writing to a StringWriter.\n+            throw new RuntimeException(ioe);\n+        }\n+    }\n+\n+    public static void unescape(String input, Writer output) throws IOException {\n+        if (output == null) {\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n+        }\n+        if (input == null) {\n+            return;\n+        }\n+        int pos = 0;\n+        int len = input.length();\n+        while (pos < len) {\n+            int escape = input.indexOf('\\\\', pos);\n+            if (escape < 0) {\n+                output.write(input.substring(pos));\n+                break;\n+            }\n+            output.write(input.substring(pos, escape));\n+            if (escape == len - 1) {\n+                break;\n+            }\n+            char c = input.charAt(escape + 1);\n+            int charsConsumed = 0;\n+            if (c == 'u') {\n+\n+>>> [ INFILL ] <<<\n+\n+            } else {\n+                output.write(c);\n+                charsConsumed = 2;\n+            }\n+            pos = escape + 1 + charsConsumed;\n+        }\n+    }\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}