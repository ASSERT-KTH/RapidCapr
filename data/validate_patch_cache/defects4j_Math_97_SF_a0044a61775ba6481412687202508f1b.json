{
    "patch": "import org.apache.commons.math3.exception.MaxCountExceededException;\nimport org.apache.commons.math3.analysis.UnivariateFunction;\n\npublic class Solver {\n\n  private final UnivariateFunction f;\n\n  public Solver(UnivariateFunction f) {\n    this.f = f;\n  }\n\n  public double solve(double min, double max) throws MaxCountExceededException {\n    final double ftol = 1.0e-10;\n    final int maxiter = 100;\n\n    double fmin = f.value(min);\n    double fmax = f.value(max);\n\n    if (Math.signum(fmin) == Math.signum(fmax)) {\n      throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. \" +\n          \"Endpoints: [\" + min + \", \" + max + \"], Values: [\" + fmin + \", \" + fmax + \"]\");\n    }\n\n    for (int i = 0; i < maxiter; i++) {\n      double x = (min + max) / 2.0;\n      double fx = f.value(x);\n\n      if (fx == 0 || (max - min) / 2.0 < ftol) {\n        return x;\n      }\n\n      if (Math.signum(fx) == Math.signum(fmin)) {\n        min = x;\n        fmin = fx;\n      } else {\n        max = x;\n        fmax = fx;\n      }\n    }\n\n    throw new MaxCountExceededException(maxiter);\n  }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/BrentSolver.java b/src/java/org/apache/commons/math/analysis/BrentSolver.java\nindex 766d87ed5..11b155c4e 100644\n--- a/src/java/org/apache/commons/math/analysis/BrentSolver.java\n+++ b/src/java/org/apache/commons/math/analysis/BrentSolver.java\n@@ -122,34 +122,49 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if min is not less than max or the\n      * signs of the values of the function at the endpoints are not opposites\n      */\n-    public double solve(double min, double max) throws MaxIterationsExceededException, \n-        FunctionEvaluationException {\n-        \n-        clearResult();\n-        verifyInterval(min, max);\n-        \n-        double ret = Double.NaN;\n-        \n-        double yMin = f.value(min);\n-        double yMax = f.value(max);\n-        \n-        // Verify bracketing\n-        double sign = yMin * yMax;\n-        if (sign >= 0) {\n-            // check if either value is close to a zero\n-                // neither value is close to zero and min and max do not bracket root.\n-                throw new IllegalArgumentException\n-                (\"Function values at endpoints do not have different signs.\" +\n-                        \"  Endpoints: [\" + min + \",\" + max + \"]\" + \n-                        \"  Values: [\" + yMin + \",\" + yMax + \"]\");\n-        } else {\n-            // solve using only the first endpoint as initial guess\n-            ret = solve(min, yMin, max, yMax, min, yMin);\n-            // either min or max is a root\n-        }\n+import org.apache.commons.math3.exception.MaxCountExceededException;\n+import org.apache.commons.math3.analysis.UnivariateFunction;\n+\n+public class Solver {\n+\n+  private final UnivariateFunction f;\n \n-        return ret;\n+  public Solver(UnivariateFunction f) {\n+    this.f = f;\n+  }\n+\n+  public double solve(double min, double max) throws MaxCountExceededException {\n+    final double ftol = 1.0e-10;\n+    final int maxiter = 100;\n+\n+    double fmin = f.value(min);\n+    double fmax = f.value(max);\n+\n+    if (Math.signum(fmin) == Math.signum(fmax)) {\n+      throw new IllegalArgumentException(\"Function values at endpoints do not have different signs. \" +\n+          \"Endpoints: [\" + min + \", \" + max + \"], Values: [\" + fmin + \", \" + fmax + \"]\");\n     }\n+\n+    for (int i = 0; i < maxiter; i++) {\n+      double x = (min + max) / 2.0;\n+      double fx = f.value(x);\n+\n+      if (fx == 0 || (max - min) / 2.0 < ftol) {\n+        return x;\n+      }\n+\n+      if (Math.signum(fx) == Math.signum(fmin)) {\n+        min = x;\n+        fmin = fx;\n+      } else {\n+        max = x;\n+        fmax = fx;\n+      }\n+    }\n+\n+    throw new MaxCountExceededException(maxiter);\n+  }\n+}\n         \n     /**\n      * Find a zero starting search according to the three provided points.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}