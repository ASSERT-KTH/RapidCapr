{
    "patch": "            Object[] args = invocation.getRawArguments();\n            int currIndex = 0;\n            for (int position = 0; position < matchers.size(); position++) {\n                Matcher m = matchers.get(position);\n                if (m instanceof CapturesArguments) {\n                    if (invocation.getMethod().isVarArgs() && position == args.length - 1 && args[position] != null && args[position].getClass().isArray()) {\n                        int varargLength = Array.getLength(args[position]);\n                        for (int i = 0; i < varargLength; i++) {\n                            ((CapturesArguments) m).captureFrom(Array.get(args[position], i));\n                        }\n                    } else {\n                        ((CapturesArguments) m).captureFrom(args[currIndex]);\n                        currIndex++;\n                    }\n                }\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..fbbd08cad 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,22 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] args = invocation.getRawArguments();\n+            int currIndex = 0;\n+            for (int position = 0; position < matchers.size(); position++) {\n+                Matcher m = matchers.get(position);\n+                if (m instanceof CapturesArguments) {\n+                    if (invocation.getMethod().isVarArgs() && position == args.length - 1 && args[position] != null && args[position].getClass().isArray()) {\n+                        int varargLength = Array.getLength(args[position]);\n+                        for (int i = 0; i < varargLength; i++) {\n+                            ((CapturesArguments) m).captureFrom(Array.get(args[position], i));\n+                        }\n+                    } else {\n+                        ((CapturesArguments) m).captureFrom(args[currIndex]);\n+                        currIndex++;\n+                    }\n+                }\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}