{
    "patch": "  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n      final double v1x = v1.getX();\n      final double v1y = v1.getY();\n      final double v1z = v1.getZ();\n      final double v2x = v2.getX();\n      final double v2y = v2.getY();\n      final double v2z = v2.getZ();\n\n      // rescale both vectors without losing precision,\n      // to ensure their norm are the same order of magnitude\n      final double factor1 = v1x * v1x + v1y * v1y + v1z * v1z;\n      final double factor2 = v2x * v2x + v2y * v2y + v2z * v2z;\n      final double threshold = 1e-15 * factor1 * factor2;\n      final double factor;\n      if (threshold > 0.25) {\n          factor = 0.5 / FastMath.sqrt(factor1 * factor2);\n      } else {\n          // rescaling leads to sqrt and then to division, we'd rather avoid that\n          factor = 1.0;\n      }\n\n      // we reduce cancellation errors by preconditioning,\n      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n      // v3 without loss of precision. See Kahan lecture\n      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n\n      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n      final double rho;\n      if (factor == 1.0) {\n          rho = (v1x * v2x + v1y * v2y + v1z * v2z) / factor2;\n      } else {\n          final double v1f1 = factor * factor1;\n          final double v1f2 = v1x * v2x * factor + v1y * v2y * factor + v1z * v2z * factor;\n          rho = v1f2 / (factor1 * factor - v1f1 * factor2);\n      }\n\n      // compute cross product from v3 and v2 instead of v1 and v2\n      final double resX = (v1y * v2z - v1z * v2y - rho * v2x) * factor;\n      final double resY = (v1z * v2x - v1x * v2z - rho * v2y) * factor;\n      final double resZ = (v1x * v2y - v1y * v2x - rho * v2z) * factor;\n      return new Vector3D(resX, resY, resZ);\n\n  }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..c95d1e798 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -456,9 +456,25 @@ public class Vector3D implements Serializable {\n    */\n   public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n \n+      final double v1x = v1.getX();\n+      final double v1y = v1.getY();\n+      final double v1z = v1.getZ();\n+      final double v2x = v2.getX();\n+      final double v2y = v2.getY();\n+      final double v2z = v2.getZ();\n \n       // rescale both vectors without losing precision,\n       // to ensure their norm are the same order of magnitude\n+      final double factor1 = v1x * v1x + v1y * v1y + v1z * v1z;\n+      final double factor2 = v2x * v2x + v2y * v2y + v2z * v2z;\n+      final double threshold = 1e-15 * factor1 * factor2;\n+      final double factor;\n+      if (threshold > 0.25) {\n+          factor = 0.5 / FastMath.sqrt(factor1 * factor2);\n+      } else {\n+          // rescaling leads to sqrt and then to division, we'd rather avoid that\n+          factor = 1.0;\n+      }\n \n       // we reduce cancellation errors by preconditioning,\n       // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n@@ -467,10 +483,20 @@ public class Vector3D implements Serializable {\n       // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n \n       // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n-\n+      final double rho;\n+      if (factor == 1.0) {\n+          rho = (v1x * v2x + v1y * v2y + v1z * v2z) / factor2;\n+      } else {\n+          final double v1f1 = factor * factor1;\n+          final double v1f2 = v1x * v2x * factor + v1y * v2y * factor + v1z * v2z * factor;\n+          rho = v1f2 / (factor1 * factor - v1f1 * factor2);\n+      }\n \n       // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+      final double resX = (v1y * v2z - v1z * v2y - rho * v2x) * factor;\n+      final double resY = (v1z * v2x - v1x * v2z - rho * v2y) * factor;\n+      final double resZ = (v1x * v2y - v1y * v2x - rho * v2z) * factor;\n+      return new Vector3D(resX, resY, resZ);\n \n   }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<3.0> but was:<0.0>",
    "test_result": "FAIL"
}