{
    "patch": "import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;\n\nimport com.google.javascript.jscomp.AbstractScopedCallback;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\nimport com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;\nimport com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\nimport com.google.javascript.rhino.InputId;\nimport com.google.javascript.rhino.JSDocInfo;\nimport com.google.javascript.rhino.JSDocInfoBuilder;\nimport com.google.javascript.rhino.JSDocInfo.Visibility;\nimport com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Token;\nimport java.util.LinkedHashSet;\nimport java.util.Set;\nimport javax.annotation.Nullable;\n\nfinal class TypedScopeCreator extends AbstractScopedCallback {\n\n  // ReverseAbstractInterpreter that will be used to determine type of AST nodes.\n  private final ReverseAbstractInterpreter reverseInterpreter;\n\n  /**\n   * Constructor.\n   *\n   * @param topScope The top scope.\n   * @param reverseInterpreter A {@link ChainableReverseAbstractInterpreter} that will be used to\n   *     determine the type of AST nodes.\n   */\n  TypedScopeCreator(TypedScope topScope, @Nullable ReverseAbstractInterpreter reverseInterpreter) {\n    super(topScope);\n    this.reverseInterpreter = reverseInterpreter != null\n        ? ChainableReverseAbstractInterpreter.makeChain(\n            TypedScopeCreatorReverseAbstractInterpreter.INSTANCE,\n            reverseInterpreter)\n        : TypedScopeCreatorReverseAbstractInterpreter.INSTANCE;\n  }\n\n  @Override\n  protected void enterScope(NodeTraversal t) {\n    Node scopeRoot = t.getScopeRoot();\n\n    TypedScope currentScope = (TypedScope) t.getScope();\n    if (scopeRoot.isFunction()) {\n      // If this is a function, we need to add an argument list scope.\n      TypedScope argumentScope = TypedScope.createArgumentScope(scopeRoot, currentScope);\n      currentScope.addChildScope(argumentScope);\n      t.pushScope(argumentScope);\n    } else {\n      // Check whether this node has a doc info. If it does, then create a scope for any\n      // parameters that have types specified in the JSDoc.\n      JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(scopeRoot);\n      Set<String> parametersWithDeclaredTypes = new LinkedHashSet<>();\n      if (fnDoc != null) {\n        for (Node param : NodeUtil.getFunctionParameters(scopeRoot)) {\n          JSDocInfoBuilder docBuilder = new JSDocInfoBuilder(false);\n          docBuilder.recordType(OBJECT_TYPE);\n          if (!param.getString().isEmpty() && fnDoc.getTypeDeclarations() != null\n              && fnDoc.getTypeDeclarations().containsKey(param.getString())) {\n            JSDocInfo parameterTypeInfo = fnDoc.getTypeDeclarations().get(param.getString());\n            docBuilder.recordType(parameterTypeInfo.getType());\n            parametersWithDeclaredTypes.add(param.getString());\n          }\n          TypedScope paramScope = TypedScope.createParameterScope(\n              param, currentScope, docBuilder.build(), reverseInterpreter.getPrediction());\n          currentScope.addChildScope(paramScope);\n          t.getCompiler().reportChangeToEnclosingScope(paramScope);    \n          t.pushScope(paramScope);\n        }\n      }\n      currentScope.addScopeRoot(scopeRoot);\n      if (!scopeRoot.isScript()) {\n        TypedScope blockScope = TypedScope.createBlockScope(scopeRoot, currentScope);\n        currentScope.addChildScope(blockScope);\n        t.pushScope(blockScope);\n      }\n    }\n  }\n\n  @Override\n  protected void exitScope(NodeTraversal t) {}\n\n  @Override\n  protected void visitNonScope(NodeTraversal t, Node n, Node parent) {\n      if (n.isFunction()) {\n        if (NodeUtil.isFunctionDeclaration(n)) {\n          // Handle function declarations at the top level.\n          defineDeclaredFunction(n, parent);\n        }\n        return;\n      }\n\n      if (n.getToken() == Token.LP && parent == t.getScopeRoot()) {\n        // Handle function inputs at the top level.\n        handleFunctionInputs(parent);\n        return;\n      }\n\n      if (n.isCatch()) {\n        // Handle catch clauses.\n        defineCatch(n, parent);\n        return;\n      }\n\n      if (n.isVar()) {\n        // Handle variable declarations.\n        defineVar(n, parent);\n        return;\n      }\n\n      // Handle other cases (such as expressions).\n      attachLiteralTypes(n);\n  }\n\n  // Helper function that determines whether a node corresponds to an externs declaration.\n  private static boolean isExtern(Node n) {\n    InputId inputId = n.getInputId();\n    return inputId != null && inputId.isExtern();\n  }\n\n  // Define a function that was declared in the code.\n  private void defineDeclaredFunction(Node n, Node parent) {\n    if (n.getFirstChild() == null) {\n      return;\n    }\n\n    if (parent.isExport() || NodeUtil.isFunctionDeclaration(parent) || isExtern(n)) {\n      // Do not define functions declared within functions or already exported, or within externs.\n      return;\n    }\n\n    TypedVar functionVar = t.getTypedScope().declare(\n        n.getFirstChild().getString(),\n        n,\n        reverseInterpreter.getPrediction());\n    if (NodeUtil.isClassExpression(n)) {\n      functionVar.setType(TypedVar.Type.CLASS);\n    }\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n    builder.recordType(n.getJSType());\n    functionVar.setJSDocInfo(builder.build());\n    t.getCompiler().reportChangeToScope(t.getTypedScope());\n  }\n\n  // Define a catch block.\n  private void defineCatch(Node n, Node parent) {\n    if (isExtern(n)) {\n      return;\n    }\n    if (n.getFirstChild() == null) {\n      return;\n    }\n\n    TypedVar catchVar = t.getTypedScope().declare(\n        n.getFirstChild().getString(),\n        n,\n        reverseInterpreter.getPrediction());\n    catchVar.setType(TypedVar.Type.CATCH_PARAMETER);\n    t.getCompiler().reportChangeToScope(t.getTypedScope());\n  }\n\n  // Define a variable declaration or statement.\n  private void defineVar(Node n, Node parent) {\n    if (isExtern(n)) {\n      return;\n    }\n\n    if (n.getParent().isForIn() || n.getParent().isForOf()) {\n      // Do not declare the variable in the ForIn/Of statement as it will be declared later in each\n      // iteration, causing conflicts when using block scoping.\n      return;\n    }\n\n    if (n.getFirstChild() == null) {\n      return;\n    }\n\n    Node nameNode = n.getFirstChild();\n    TypedVar var = t.getTypedScope().declare(\n        nameNode.getString(),\n        nameNode,\n        reverseInterpreter.getPrediction());\n    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n\n    JSDocInfo info = NodeUtil.getBestJSDocInfo(nameNode);\n    if (info != null) {\n      if (info.isConst()) {\n        builder.recordConstancy();\n      }\n      if (info.hasTypedefType()) {\n        builder.recordType(info.getTypedefType());\n      }\n      if (info.hasEnumParameterType()) {\n        builder.recordEnumParameterType(info.getEnumParameterType());\n      }\n    }\n    builder.recordType(reverseInterpreter.getPrediction().getBestJSType(nameNode));\n    var.setJSDocInfo(builder.build());\n    t.getCompiler().reportChangeToScope(t.getTypedScope());\n  }\n\n  // Attach literal types to an expressions.\n  private void attachLiteralTypes(Node n) {\n    if (n.getJSType() != null && n.getJSType().isLiteralValueType()) {\n      if (n.getJSDocInfo() != null) {\n        n.getJSDocInfo().setType(n.getJSType());\n      } else {\n        n.setJSDocInfo(new JSDocInfoBuilder(false).recordType(n.getJSType())\n            .build(ImmutableSet.copyOf(t.getScope().getAllReferences())));\n      }\n    }\n  }\n\n  // When we encounter function inputs at the top level, we need to create a parameter scope for\n  // them.\n  private void handleFunctionInputs(Node parent) {\n    for (Node child : parent.getFirstChild().children()) {\n      if (child.isRest() || !child.isName()) {\n        continue;\n      }\n      TypedVar paramVar = t.getTypedScope().declare(\n          child.getString(),\n          child,\n          reverseInterpreter.getPrediction());\n      paramVar.setType(TypedVar.Type.PARAMETER);\n      t.getCompiler().reportChangeToScope(t.getTypedScope());\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..76770a09 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,235 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+import com.google.javascript.jscomp.AbstractScopedCallback;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.jscomp.parsing.parser.util.format.SimpleFormat;\n+import com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter;\n+import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\n+import com.google.javascript.rhino.InputId;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.JSDocInfoBuilder;\n+import com.google.javascript.rhino.JSDocInfo.Visibility;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+import java.util.LinkedHashSet;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+final class TypedScopeCreator extends AbstractScopedCallback {\n+\n+  // ReverseAbstractInterpreter that will be used to determine type of AST nodes.\n+  private final ReverseAbstractInterpreter reverseInterpreter;\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param topScope The top scope.\n+   * @param reverseInterpreter A {@link ChainableReverseAbstractInterpreter} that will be used to\n+   *     determine the type of AST nodes.\n+   */\n+  TypedScopeCreator(TypedScope topScope, @Nullable ReverseAbstractInterpreter reverseInterpreter) {\n+    super(topScope);\n+    this.reverseInterpreter = reverseInterpreter != null\n+        ? ChainableReverseAbstractInterpreter.makeChain(\n+            TypedScopeCreatorReverseAbstractInterpreter.INSTANCE,\n+            reverseInterpreter)\n+        : TypedScopeCreatorReverseAbstractInterpreter.INSTANCE;\n+  }\n+\n+  @Override\n+  protected void enterScope(NodeTraversal t) {\n+    Node scopeRoot = t.getScopeRoot();\n+\n+    TypedScope currentScope = (TypedScope) t.getScope();\n+    if (scopeRoot.isFunction()) {\n+      // If this is a function, we need to add an argument list scope.\n+      TypedScope argumentScope = TypedScope.createArgumentScope(scopeRoot, currentScope);\n+      currentScope.addChildScope(argumentScope);\n+      t.pushScope(argumentScope);\n+    } else {\n+      // Check whether this node has a doc info. If it does, then create a scope for any\n+      // parameters that have types specified in the JSDoc.\n+      JSDocInfo fnDoc = NodeUtil.getBestJSDocInfo(scopeRoot);\n+      Set<String> parametersWithDeclaredTypes = new LinkedHashSet<>();\n+      if (fnDoc != null) {\n+        for (Node param : NodeUtil.getFunctionParameters(scopeRoot)) {\n+          JSDocInfoBuilder docBuilder = new JSDocInfoBuilder(false);\n+          docBuilder.recordType(OBJECT_TYPE);\n+          if (!param.getString().isEmpty() && fnDoc.getTypeDeclarations() != null\n+              && fnDoc.getTypeDeclarations().containsKey(param.getString())) {\n+            JSDocInfo parameterTypeInfo = fnDoc.getTypeDeclarations().get(param.getString());\n+            docBuilder.recordType(parameterTypeInfo.getType());\n+            parametersWithDeclaredTypes.add(param.getString());\n+          }\n+          TypedScope paramScope = TypedScope.createParameterScope(\n+              param, currentScope, docBuilder.build(), reverseInterpreter.getPrediction());\n+          currentScope.addChildScope(paramScope);\n+          t.getCompiler().reportChangeToEnclosingScope(paramScope);    \n+          t.pushScope(paramScope);\n+        }\n+      }\n+      currentScope.addScopeRoot(scopeRoot);\n+      if (!scopeRoot.isScript()) {\n+        TypedScope blockScope = TypedScope.createBlockScope(scopeRoot, currentScope);\n+        currentScope.addChildScope(blockScope);\n+        t.pushScope(blockScope);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  protected void exitScope(NodeTraversal t) {}\n+\n+  @Override\n+  protected void visitNonScope(NodeTraversal t, Node n, Node parent) {\n+      if (n.isFunction()) {\n+        if (NodeUtil.isFunctionDeclaration(n)) {\n+          // Handle function declarations at the top level.\n+          defineDeclaredFunction(n, parent);\n+        }\n+        return;\n+      }\n+\n+      if (n.getToken() == Token.LP && parent == t.getScopeRoot()) {\n+        // Handle function inputs at the top level.\n         handleFunctionInputs(parent);\n         return;\n       }\n \n+      if (n.isCatch()) {\n+        // Handle catch clauses.\n+        defineCatch(n, parent);\n+        return;\n+      }\n+\n+      if (n.isVar()) {\n+        // Handle variable declarations.\n+        defineVar(n, parent);\n+        return;\n+      }\n+\n+      // Handle other cases (such as expressions).\n       attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+  }\n+\n+  // Helper function that determines whether a node corresponds to an externs declaration.\n+  private static boolean isExtern(Node n) {\n+    InputId inputId = n.getInputId();\n+    return inputId != null && inputId.isExtern();\n+  }\n+\n+  // Define a function that was declared in the code.\n+  private void defineDeclaredFunction(Node n, Node parent) {\n+    if (n.getFirstChild() == null) {\n+      return;\n+    }\n+\n+    if (parent.isExport() || NodeUtil.isFunctionDeclaration(parent) || isExtern(n)) {\n+      // Do not define functions declared within functions or already exported, or within externs.\n+      return;\n+    }\n+\n+    TypedVar functionVar = t.getTypedScope().declare(\n+        n.getFirstChild().getString(),\n+        n,\n+        reverseInterpreter.getPrediction());\n+    if (NodeUtil.isClassExpression(n)) {\n+      functionVar.setType(TypedVar.Type.CLASS);\n+    }\n+    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n+    builder.recordType(n.getJSType());\n+    functionVar.setJSDocInfo(builder.build());\n+    t.getCompiler().reportChangeToScope(t.getTypedScope());\n+  }\n+\n+  // Define a catch block.\n+  private void defineCatch(Node n, Node parent) {\n+    if (isExtern(n)) {\n+      return;\n+    }\n+    if (n.getFirstChild() == null) {\n+      return;\n+    }\n+\n+    TypedVar catchVar = t.getTypedScope().declare(\n+        n.getFirstChild().getString(),\n+        n,\n+        reverseInterpreter.getPrediction());\n+    catchVar.setType(TypedVar.Type.CATCH_PARAMETER);\n+    t.getCompiler().reportChangeToScope(t.getTypedScope());\n+  }\n+\n+  // Define a variable declaration or statement.\n+  private void defineVar(Node n, Node parent) {\n+    if (isExtern(n)) {\n+      return;\n+    }\n+\n+    if (n.getParent().isForIn() || n.getParent().isForOf()) {\n+      // Do not declare the variable in the ForIn/Of statement as it will be declared later in each\n+      // iteration, causing conflicts when using block scoping.\n+      return;\n+    }\n+\n+    if (n.getFirstChild() == null) {\n+      return;\n+    }\n+\n+    Node nameNode = n.getFirstChild();\n+    TypedVar var = t.getTypedScope().declare(\n+        nameNode.getString(),\n+        nameNode,\n+        reverseInterpreter.getPrediction());\n+    JSDocInfoBuilder builder = new JSDocInfoBuilder(false);\n+\n+    JSDocInfo info = NodeUtil.getBestJSDocInfo(nameNode);\n+    if (info != null) {\n+      if (info.isConst()) {\n+        builder.recordConstancy();\n+      }\n+      if (info.hasTypedefType()) {\n+        builder.recordType(info.getTypedefType());\n+      }\n+      if (info.hasEnumParameterType()) {\n+        builder.recordEnumParameterType(info.getEnumParameterType());\n+      }\n+    }\n+    builder.recordType(reverseInterpreter.getPrediction().getBestJSType(nameNode));\n+    var.setJSDocInfo(builder.build());\n+    t.getCompiler().reportChangeToScope(t.getTypedScope());\n+  }\n+\n+  // Attach literal types to an expressions.\n+  private void attachLiteralTypes(Node n) {\n+    if (n.getJSType() != null && n.getJSType().isLiteralValueType()) {\n+      if (n.getJSDocInfo() != null) {\n+        n.getJSDocInfo().setType(n.getJSType());\n+      } else {\n+        n.setJSDocInfo(new JSDocInfoBuilder(false).recordType(n.getJSType())\n+            .build(ImmutableSet.copyOf(t.getScope().getAllReferences())));\n+      }\n+    }\n+  }\n+\n+  // When we encounter function inputs at the top level, we need to create a parameter scope for\n+  // them.\n+  private void handleFunctionInputs(Node parent) {\n+    for (Node child : parent.getFirstChild().children()) {\n+      if (child.isRest() || !child.isName()) {\n+        continue;\n       }\n+      TypedVar paramVar = t.getTypedScope().declare(\n+          child.getString(),\n+          child,\n+          reverseInterpreter.getPrediction());\n+      paramVar.setType(TypedVar.Type.PARAMETER);\n+      t.getCompiler().reportChangeToScope(t.getTypedScope());\n     }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}