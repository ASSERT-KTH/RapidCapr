{
    "patch": "    private void recordAssignment(NodeTraversal t, Node n, Node recordNode) {\n      Node nameNode = n.getFirstChild();\n      Node parent = n.getParent();\n      NameInformation ns = createNameInformation(t, nameNode);\n      if (ns != null) {\n        // If the node's parent is a FOR loop (but not a FOR-IN loop), we have to check if it\n        // is the first child in the loop. If it is not, then we can record the dependency scope\n        // for the recordNode. Otherwise, we should record it for the nameNode.\n        if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n          if (n != parent.getFirstChild().getNext()) {\n            recordDepScope(recordNode, ns);\n          } else {\n            recordDepScope(nameNode, ns);\n          }\n        } else {\n          // If the RHS of the assignment is a caller, then it is used by the context and\n          // should not be associated with the LHS.\n          // Note: This fixes a specific case where the assignment is the caller expression,\n          // but it could still be nested deeper in the caller and cause bugs.\n          // For example, see testAssignWithCall2.\n          if (!NodeUtil.isExpressionResultUsed(n)) {\n            recordDepScope(recordNode, ns);\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 0fc5ae8f..6d6eb282 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -560,29 +560,24 @@ final class NameAnalyzer implements CompilerPass {\n       Node parent = n.getParent();\n       NameInformation ns = createNameInformation(t, nameNode);\n       if (ns != null) {\n+        // If the node's parent is a FOR loop (but not a FOR-IN loop), we have to check if it\n+        // is the first child in the loop. If it is not, then we can record the dependency scope\n+        // for the recordNode. Otherwise, we should record it for the nameNode.\n         if (parent.isFor() && !NodeUtil.isForIn(parent)) {\n-          // Patch for assignments that appear in the init,\n-          // condition or iteration part of a FOR loop.  Without\n-          // this change, all 3 of those parts try to claim the for\n-          // loop as their dependency scope.  The last assignment in\n-          // those three fields wins, which can result in incorrect\n-          // reference edges between referenced and assigned variables.\n-          //\n-          // TODO(user) revisit the dependency scope calculation\n-          // logic.\n-          if (parent.getFirstChild().getNext() != n) {\n+          if (n != parent.getFirstChild().getNext()) {\n             recordDepScope(recordNode, ns);\n           } else {\n             recordDepScope(nameNode, ns);\n           }\n         } else {\n-          // The rhs of the assignment is the caller, so it's used by the\n-          // context. Don't associate it w/ the lhs.\n-          // FYI: this fixes only the specific case where the assignment is the\n-          // caller expression, but it could be nested deeper in the caller and\n-          // we would still get a bug.\n-          // See testAssignWithCall2 for an example of this.\n-          recordDepScope(recordNode, ns);\n+          // If the RHS of the assignment is a caller, then it is used by the context and\n+          // should not be associated with the LHS.\n+          // Note: This fixes a specific case where the assignment is the caller expression,\n+          // but it could still be nested deeper in the caller and cause bugs.\n+          // For example, see testAssignWithCall2.\n+          if (!NodeUtil.isExpressionResultUsed(n)) {\n+            recordDepScope(recordNode, ns);\n+          }\n         }\n       }\n     }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}