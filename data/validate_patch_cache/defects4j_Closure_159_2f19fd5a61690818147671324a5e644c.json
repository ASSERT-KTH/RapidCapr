{
    "patch": "    if (node.getType() == Token.CALL && node.getFirstChild() != null) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n      }\n      findCalledFunctions(child, changed);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..ff7900e8 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,11 +774,14 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n+    if (node.getType() == Token.CALL && node.getFirstChild() != null) {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n       }\n+      findCalledFunctions(child, changed);\n+    }\n+      }\n     }\n \n     for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}