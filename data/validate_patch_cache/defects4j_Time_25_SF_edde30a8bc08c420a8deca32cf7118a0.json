{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // get the offset at instantLocal (first estimate)\n        final int offsetLocal = getOffset(instantLocal);\n        // get the next offset, using the same calculation as before if the time\n        // would have been in a DST gap, otherwise using next.\n        final long instantBefore = instantLocal - offsetLocal;\n        final int offsetBefore = getOffset(instantBefore - 1); // subtract 1 millisecond\n        final long instantAfter = instantLocal - offsetLocal;\n        final int offsetAfter = getOffset(instantAfter + 1); // add 1 millisecond\n        // if offsetBefore == offsetAfter, then the instant is in a gap.\n        // otherwise, the instant is either not in a transition, or it is\n        // in a transition and the caller will need to resolve the transition.\n        if (offsetBefore == offsetAfter) {\n            return offsetLocal; // in a gap, so return the original offset\n        }\n        // the instant is not within a gap\n        if (offsetLocal >= offsetBefore || offsetLocal < offsetAfter) {\n            return offsetLocal; // not in a transition, so return the original offset\n        } else if (offsetAfter - offsetLocal < offsetLocal - offsetBefore) {\n            // in DST overlap and should use the earlier offset\n            return offsetAfter;\n        } else {\n            // in DST overlap and should use the later offset\n            return offsetBefore;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7c5c43a4 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -879,25 +879,28 @@ public abstract class DateTimeZone implements Serializable {\n     public int getOffsetFromLocal(long instantLocal) {\n         // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n+        // get the next offset, using the same calculation as before if the time\n+        // would have been in a DST gap, otherwise using next.\n+        final long instantBefore = instantLocal - offsetLocal;\n+        final int offsetBefore = getOffset(instantBefore - 1); // subtract 1 millisecond\n+        final long instantAfter = instantLocal - offsetLocal;\n+        final int offsetAfter = getOffset(instantAfter + 1); // add 1 millisecond\n+        // if offsetBefore == offsetAfter, then the instant is in a gap.\n+        // otherwise, the instant is either not in a transition, or it is\n+        // in a transition and the caller will need to resolve the transition.\n+        if (offsetBefore == offsetAfter) {\n+            return offsetLocal; // in a gap, so return the original offset\n+        }\n+        // the instant is not within a gap\n+        if (offsetLocal >= offsetBefore || offsetLocal < offsetAfter) {\n+            return offsetLocal; // not in a transition, so return the original offset\n+        } else if (offsetAfter - offsetLocal < offsetLocal - offsetBefore) {\n+            // in DST overlap and should use the earlier offset\n+            return offsetAfter;\n+        } else {\n+            // in DST overlap and should use the later offset\n+            return offsetBefore;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}