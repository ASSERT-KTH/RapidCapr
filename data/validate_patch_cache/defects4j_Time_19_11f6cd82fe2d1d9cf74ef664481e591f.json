{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // Get the current offset and calculate the instant before it\n        int offsetBefore = getOffset(instantLocal);\n        long instantBefore = instantLocal - offsetBefore;\n        \n        // Check if the instant is already fixed by the offset\n        if (offsetBefore == getOffset(instantBefore - 1)) {\n            return offsetBefore;\n        }\n\n        // Look for the next transition after instantBefore\n        long instantAfter = nextTransition(instantBefore);\n        int offsetAfter = getOffset(instantAfter);\n        \n        // If there is no next transition, return the current offset\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n        \n        // Check whether the next transition is too far away\n        long nextTransition = nextTransition(instantLocal);\n        if (instantAfter > nextTransition) {\n            return offsetBefore;\n        }\n        \n        // Look for the closest offset\n        int offsetClosest;\n        if (offsetBefore < offsetAfter) {\n            // Search forward from instantBefore for the closest offset\n            offsetClosest = offsetBefore;\n            while (instantBefore < instantAfter) {\n                int offset = getOffset(instantBefore);\n                if (offset == offsetBefore) {\n                    // We've passed the last transition, so return offsetBefore\n                    return offsetBefore;\n                }\n                if (offset != offsetClosest) {\n                    offsetAfter = offset;\n                    instantAfter = instantBefore;\n                }\n                instantBefore++;\n            }\n        } else {\n            // Search backward from instantAfter for the closest offset\n            offsetClosest = offsetAfter;\n            while (instantBefore < instantAfter) {\n                instantAfter--;\n                int offset = getOffset(instantAfter);\n                if (offset == offsetAfter) {\n                    // We've passed the last transition, so return offsetAfter\n                    return offsetAfter;\n                }\n                if (offset != offsetClosest) {\n                    offsetBefore = offset;\n                    instantBefore = instantAfter;\n                }\n            }\n        }\n        \n        // Return the closest offset\n        return offsetClosest;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..cd5c983a 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,66 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        // Get the current offset and calculate the instant before it\n+        int offsetBefore = getOffset(instantLocal);\n+        long instantBefore = instantLocal - offsetBefore;\n+        \n+        // Check if the instant is already fixed by the offset\n+        if (offsetBefore == getOffset(instantBefore - 1)) {\n+            return offsetBefore;\n+        }\n+\n+        // Look for the next transition after instantBefore\n+        long instantAfter = nextTransition(instantBefore);\n+        int offsetAfter = getOffset(instantAfter);\n+        \n+        // If there is no next transition, return the current offset\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+        \n+        // Check whether the next transition is too far away\n+        long nextTransition = nextTransition(instantLocal);\n+        if (instantAfter > nextTransition) {\n+            return offsetBefore;\n+        }\n+        \n+        // Look for the closest offset\n+        int offsetClosest;\n+        if (offsetBefore < offsetAfter) {\n+            // Search forward from instantBefore for the closest offset\n+            offsetClosest = offsetBefore;\n+            while (instantBefore < instantAfter) {\n+                int offset = getOffset(instantBefore);\n+                if (offset == offsetBefore) {\n+                    // We've passed the last transition, so return offsetBefore\n+                    return offsetBefore;\n                 }\n+                if (offset != offsetClosest) {\n+                    offsetAfter = offset;\n+                    instantAfter = instantBefore;\n+                }\n+                instantBefore++;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+        } else {\n+            // Search backward from instantAfter for the closest offset\n+            offsetClosest = offsetAfter;\n+            while (instantBefore < instantAfter) {\n+                instantAfter--;\n+                int offset = getOffset(instantAfter);\n+                if (offset == offsetAfter) {\n+                    // We've passed the last transition, so return offsetAfter\n+                    return offsetAfter;\n+                }\n+                if (offset != offsetClosest) {\n+                    offsetBefore = offset;\n+                    instantBefore = instantAfter;\n                 }\n             }\n         }\n-        return offsetAdjusted;\n+        \n+        // Return the closest offset\n+        return offsetClosest;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}