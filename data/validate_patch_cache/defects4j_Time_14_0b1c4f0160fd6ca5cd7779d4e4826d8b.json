{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n\n    // month is largest field and being added to, such as month-day\n    if (DateTimeUtils.isContiguous(partial)) {\n        Chronology chrono = partial.getChronology();\n        long instant = 0L;\n        // first set the date using the partial\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            DateTimeField field = partial.getField(i);\n            int value = values[i];\n            \n            if (i == fieldIndex) {\n                value = field.add(value, valueToAdd);\n            }\n            instant = field.set(instant, value);\n        }\n        // validate\n        chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n\n        // then adjust the date to the correct month\n        int monthIndex = DateTimeUtils.indexOfTopTen(fieldIndex);\n        DurationFieldType range = fields()[monthIndex].getRangeDurationType();\n        DateTimeField monthField = fields()[monthIndex];\n        int year = 0;\n        int month = 0;\n        if (valueToAdd > 0) {\n            year = monthField.add(instant, 1 - monthField.get(instant));\n            month = monthField.get(instant);\n            long months = valueToAdd + month - 1;\n            year = monthField.add(year, months / 12);\n            month = monthField.add(year, months % 12);\n        } else {\n            year = monthField.get(instant);\n            month = monthField.set(instant, 1);\n            valueToAdd++;\n            long months = valueToAdd + (month - 1);\n            year = monthField.add(year, months / 12);\n            month = monthField.add(year, months % 12);\n            int daysInMonth = monthField.getMaximumValue(instant.withMillis(DateTimeConstants.MILLIS_PER_DAY));\n            if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > daysInMonth) {\n                month = monthField.get(instant.withMillis(DateTimeConstants.MILLIS_PER_DAY));\n            }\n        }\n        instant = monthField.set(year, month);\n        return chrono.get(partial, instant);\n    } else {\n        return super.add(partial, fieldIndex, values, valueToAdd);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..c1c616ab 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,60 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n-        }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+\n+    // month is largest field and being added to, such as month-day\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        Chronology chrono = partial.getChronology();\n+        long instant = 0L;\n+        // first set the date using the partial\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            DateTimeField field = partial.getField(i);\n+            int value = values[i];\n+            \n+            if (i == fieldIndex) {\n+                value = field.add(value, valueToAdd);\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n+            instant = field.set(instant, value);\n+        }\n+        // validate\n+        chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n+\n+        // then adjust the date to the correct month\n+        int monthIndex = DateTimeUtils.indexOfTopTen(fieldIndex);\n+        DurationFieldType range = fields()[monthIndex].getRangeDurationType();\n+        DateTimeField monthField = fields()[monthIndex];\n+        int year = 0;\n+        int month = 0;\n+        if (valueToAdd > 0) {\n+            year = monthField.add(instant, 1 - monthField.get(instant));\n+            month = monthField.get(instant);\n+            long months = valueToAdd + month - 1;\n+            year = monthField.add(year, months / 12);\n+            month = monthField.add(year, months % 12);\n         } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n+            year = monthField.get(instant);\n+            month = monthField.set(instant, 1);\n+            valueToAdd++;\n+            long months = valueToAdd + (month - 1);\n+            year = monthField.add(year, months / 12);\n+            month = monthField.add(year, months % 12);\n+            int daysInMonth = monthField.getMaximumValue(instant.withMillis(DateTimeConstants.MILLIS_PER_DAY));\n+            if (values[DateTimeFieldType.dayOfMonth().getFieldIndex()] > daysInMonth) {\n+                month = monthField.get(instant.withMillis(DateTimeConstants.MILLIS_PER_DAY));\n+            }\n         }\n+        instant = monthField.set(year, month);\n+        return chrono.get(partial, instant);\n+    } else {\n+        return super.add(partial, fieldIndex, values, valueToAdd);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}