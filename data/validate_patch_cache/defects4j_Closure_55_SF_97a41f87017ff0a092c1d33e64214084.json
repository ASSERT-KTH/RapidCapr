{
    "patch": "  private static boolean isReduceableFunctionExpression(Node n) {\n    if(NodeUtil.isFunctionExpression(n)){\n      return true;\n    }\n    return (n.isCall() && n.getFirstChild().isQualifiedName()\n            && (n.getLastChild().isFunction() && NodeUtil.getFunctionBody(n.getLastChild()).isBlock()));\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..b8c779fa 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -114,7 +114,11 @@ class FunctionRewriter implements CompilerPass {\n   }\n \n   private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+    if(NodeUtil.isFunctionExpression(n)){\n+      return true;\n+    }\n+    return (n.isCall() && n.getFirstChild().isQualifiedName()\n+            && (n.getLastChild().isFunction() && NodeUtil.getFunctionBody(n.getLastChild()).isBlock()));\n   }\n \n   /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}