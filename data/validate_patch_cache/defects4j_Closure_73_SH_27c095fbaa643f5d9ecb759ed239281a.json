{
    "patch": "Apologies for the mistake. Here is the correct hunk:\n\n```\n// No charsetEncoder provided - pass straight latin characters\n// through, and escape the rest.  Doing the explicit character\n// check is measurably faster than using the CharsetEncoder.\nif ((c >= ' ' && c <= '~') || c == '\\n' || c == '\\r' || c == '\\t') {\n  sb.append(c);\n} else if (c <= 0x7f) {\n  sb.append(\"\\\\x\");\n  sb.append(Character.forDigit((c >> 4) & 0xF, 16));\n  sb.append(Character.forDigit((c >> 0) & 0xF, 16));\n} else if (c <= 0x7ff) {\n  sb.append(\"\\\\u\");\n  sb.append(Character.forDigit((c >> 12) & 0xF, 16));\n  sb.append(Character.forDigit((c >>  8) & 0xF, 16));\n  sb.append(Character.forDigit((c >>  4) & 0xF, 16));\n  sb.append(Character.forDigit((c >>  0) & 0xF, 16));\n} else {\n  appendHexJavaScriptRepresentation(sb, c);\n}\n```",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 558e74fe..3f1bf03e 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -1042,7 +1042,28 @@ class CodeGenerator {\n             // No charsetEncoder provided - pass straight latin characters\n             // through, and escape the rest.  Doing the explicit character\n             // check is measurably faster than using the CharsetEncoder.\n-            if (c > 0x1f && c <= 0x7f) {\n+Apologies for the mistake. Here is the correct hunk:\n+\n+```\n+// No charsetEncoder provided - pass straight latin characters\n+// through, and escape the rest.  Doing the explicit character\n+// check is measurably faster than using the CharsetEncoder.\n+if ((c >= ' ' && c <= '~') || c == '\\n' || c == '\\r' || c == '\\t') {\n+  sb.append(c);\n+} else if (c <= 0x7f) {\n+  sb.append(\"\\\\x\");\n+  sb.append(Character.forDigit((c >> 4) & 0xF, 16));\n+  sb.append(Character.forDigit((c >> 0) & 0xF, 16));\n+} else if (c <= 0x7ff) {\n+  sb.append(\"\\\\u\");\n+  sb.append(Character.forDigit((c >> 12) & 0xF, 16));\n+  sb.append(Character.forDigit((c >>  8) & 0xF, 16));\n+  sb.append(Character.forDigit((c >>  4) & 0xF, 16));\n+  sb.append(Character.forDigit((c >>  0) & 0xF, 16));\n+} else {\n+  appendHexJavaScriptRepresentation(sb, c);\n+}\n+```\n               sb.append(c);\n             } else {\n               // Other characters can be misinterpreted by some js parsers,",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}