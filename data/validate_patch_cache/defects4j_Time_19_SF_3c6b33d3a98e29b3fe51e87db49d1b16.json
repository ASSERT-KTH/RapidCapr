{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n    // get the offset at instantLocal (first estimate)\n    int offsetLocal = getOffset(instantLocal);\n\n    // get the previous transition time\n    long prevTransition = previousTransition(instantLocal);\n\n    // get the next transition time\n    long nextTransition = nextTransition(instantLocal);\n\n    if (nextTransition == prevTransition) {\n        // there is no DST in this zone\n        return offsetLocal;\n    } else if (instantLocal < prevTransition || instantLocal >= nextTransition) {\n        // not within a DST interval\n        return offsetLocal;\n    } else {\n        // within a DST interval\n\n        int offsetBefore = getOffset(prevTransition);\n        int offsetAfter = getOffset(nextTransition);\n\n        // calculate the length of the DST interval\n        long dstLength = nextTransition - prevTransition;\n\n        // calculate the ratio of time spent in DST to total length of interval\n        double ratio = (instantLocal - prevTransition) / (double) dstLength;\n\n        // calculate the delta in offset due to DST\n        int delta = offsetAfter - offsetBefore;\n\n        // calculate the new offset by applying the delta to the base offset\n        int offsetDST = (int) (offsetBefore + delta * ratio);\n\n        return offsetDST;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..fb0287f3 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,43 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+    // get the offset at instantLocal (first estimate)\n+    int offsetLocal = getOffset(instantLocal);\n+\n+    // get the previous transition time\n+    long prevTransition = previousTransition(instantLocal);\n+\n+    // get the next transition time\n+    long nextTransition = nextTransition(instantLocal);\n+\n+    if (nextTransition == prevTransition) {\n+        // there is no DST in this zone\n+        return offsetLocal;\n+    } else if (instantLocal < prevTransition || instantLocal >= nextTransition) {\n+        // not within a DST interval\n+        return offsetLocal;\n+    } else {\n+        // within a DST interval\n+\n+        int offsetBefore = getOffset(prevTransition);\n+        int offsetAfter = getOffset(nextTransition);\n+\n+        // calculate the length of the DST interval\n+        long dstLength = nextTransition - prevTransition;\n+\n+        // calculate the ratio of time spent in DST to total length of interval\n+        double ratio = (instantLocal - prevTransition) / (double) dstLength;\n+\n+        // calculate the delta in offset due to DST\n+        int delta = offsetAfter - offsetBefore;\n+\n+        // calculate the new offset by applying the delta to the base offset\n+        int offsetDST = (int) (offsetBefore + delta * ratio);\n+\n+        return offsetDST;\n     }\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "java.lang.IllegalArgumentException: Illegal instant due to time zone offset transition: 2006-06-09T11:00:00.000",
    "test_result": "FAIL"
}