{
    "patch": "if (offsetLocal > offsetAdjusted) {\n    int diff = offsetLocal - offsetAdjusted;\n    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n    if (nextLocal == instantAdjusted + diff * 1000L) {\n        return offsetLocal;\n    } else if (nextLocal != nextAdjusted) {\n        return offsetLocal;\n    }\n} else if (offsetLocal < offsetAdjusted) {\n    int diff = offsetAdjusted - offsetLocal;\n    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n    if (prevAdjusted == instantLocal - offsetLocal + diff * 1000L) {\n        return offsetAdjusted;\n    } else if (prevLocal == prevAdjusted) {\n        return offsetLocal;\n    } else {\n        final long nextLocal = nextTransition(prevLocal);\n        final long nextAdjusted = nextTransition(prevAdjusted);\n        if (nextAdjusted < instantLocal - offsetLocal + diff * 1000L) {\n            if (nextLocal == nextAdjusted) {\n                return offsetAdjusted;\n            } else {\n                return offsetLocal;\n            }\n        } else {\n            if (prevLocal == prevAdjusted) {\n                return offsetLocal;\n            } else {\n                return offsetAdjusted;\n            }\n        }\n    }\n} else {\n    return offsetAdjusted;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..f4419dc7 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,43 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+if (offsetLocal > offsetAdjusted) {\n+    int diff = offsetLocal - offsetAdjusted;\n+    long nextLocal = nextTransition(instantAdjusted + diff * 1000L);\n+    long nextAdjusted = nextTransition(instantLocal - offsetAdjusted + diff * 1000L);\n+    if (nextLocal == instantAdjusted + diff * 1000L) {\n+        return offsetLocal;\n+    } else if (nextLocal != nextAdjusted) {\n+        return offsetLocal;\n+    }\n+} else if (offsetLocal < offsetAdjusted) {\n+    int diff = offsetAdjusted - offsetLocal;\n+    long prevLocal = previousTransition(instantAdjusted + diff * 1000L);\n+    long prevAdjusted = previousTransition(instantLocal - offsetLocal + diff * 1000L);\n+    if (prevAdjusted == instantLocal - offsetLocal + diff * 1000L) {\n+        return offsetAdjusted;\n+    } else if (prevLocal == prevAdjusted) {\n+        return offsetLocal;\n+    } else {\n+        final long nextLocal = nextTransition(prevLocal);\n+        final long nextAdjusted = nextTransition(prevAdjusted);\n+        if (nextAdjusted < instantLocal - offsetLocal + diff * 1000L) {\n+            if (nextLocal == nextAdjusted) {\n+                return offsetAdjusted;\n+            } else {\n+                return offsetLocal;\n+            }\n+        } else {\n+            if (prevLocal == prevAdjusted) {\n+                return offsetLocal;\n+            } else {\n+                return offsetAdjusted;\n+            }\n+        }\n+    }\n+} else {\n+    return offsetAdjusted;\n+}\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}