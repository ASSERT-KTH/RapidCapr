{
    "patch": "                        //Check if the string is a long or a BigInteger\n                        if (StringUtils.startsWithIgnoreCase(str, \"0x\")) {\n                            try {\n                                return createLong(str);\n                            } catch (NumberFormatException e) {\n                                // ignoring as we can still try for BigInteger as well\n                            }\n                        }\n\n                        if ((numeric.charAt(0) == '-'\n                                && isDigits(numeric.substring(1)))\n                                || isDigits(numeric)) {\n                            if (numeric.charAt(numeric.length() - 1) == 'l'\n                                    || numeric.charAt(numeric.length() - 1) == 'L') {\n                                if (numeric.charAt(0) == '-') {\n                                    try {\n                                        return createLong(numeric);\n                                    } catch (NumberFormatException nfe) {\n                                        // ignore the bad number\n                                    }\n                                } else {\n                                    try {\n                                        return createLong(numeric);\n                                    } catch (NumberFormatException nfe) {\n                                        // ignore the bad number\n                                    }\n                                    return createBigInteger(numeric);\n                                }\n                            } else {\n                                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                                try {\n                                    Float f = createFloat(str);\n                                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                                        return f;\n                                    }\n                                } catch (NumberFormatException nfe) {\n                                    // ignore the bad number\n                                }\n                                try {\n                                    Double d = createDouble(str);\n                                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                                        return d;\n                                    }\n                                } catch (NumberFormatException nfe) {\n                                    // ignore the bad number\n                                }\n\n                                return createBigDecimal(str);\n                            }\n                        }\n                        throw new NumberFormatException(str + \" is not a valid number.\");",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/math/NumberUtils.java b/src/java/org/apache/commons/lang/math/NumberUtils.java\nindex c0f06a47..956b4f93 100644\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n@@ -451,8 +451,57 @@ public class NumberUtils {\n                 case 'L' :\n                     if (dec == null\n                         && exp == null\n-                        && isDigits(numeric.substring(1))\n-                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        //Check if the string is a long or a BigInteger\n+                        if (StringUtils.startsWithIgnoreCase(str, \"0x\")) {\n+                            try {\n+                                return createLong(str);\n+                            } catch (NumberFormatException e) {\n+                                // ignoring as we can still try for BigInteger as well\n+                            }\n+                        }\n+\n+                        if ((numeric.charAt(0) == '-'\n+                                && isDigits(numeric.substring(1)))\n+                                || isDigits(numeric)) {\n+                            if (numeric.charAt(numeric.length() - 1) == 'l'\n+                                    || numeric.charAt(numeric.length() - 1) == 'L') {\n+                                if (numeric.charAt(0) == '-') {\n+                                    try {\n+                                        return createLong(numeric);\n+                                    } catch (NumberFormatException nfe) {\n+                                        // ignore the bad number\n+                                    }\n+                                } else {\n+                                    try {\n+                                        return createLong(numeric);\n+                                    } catch (NumberFormatException nfe) {\n+                                        // ignore the bad number\n+                                    }\n+                                    return createBigInteger(numeric);\n+                                }\n+                            } else {\n+                                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                                try {\n+                                    Float f = createFloat(str);\n+                                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                                        return f;\n+                                    }\n+                                } catch (NumberFormatException nfe) {\n+                                    // ignore the bad number\n+                                }\n+                                try {\n+                                    Double d = createDouble(str);\n+                                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                                        return d;\n+                                    }\n+                                } catch (NumberFormatException nfe) {\n+                                    // ignore the bad number\n+                                }\n+\n+                                return createBigDecimal(str);\n+                            }\n+                        }\n+                        throw new NumberFormatException(str + \" is not a valid number.\");\n                         try {\n                             return createLong(numeric);\n                         } catch (NumberFormatException nfe) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}