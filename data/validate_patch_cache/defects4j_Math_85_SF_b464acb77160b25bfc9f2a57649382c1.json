{
    "patch": "public static double[] bracket(UnivariateRealFunction function,\n        double initial, double lowerBound, double upperBound, \n        int maximumIterations) throws ConvergenceException, \n        FunctionEvaluationException {\n\n    if (function == null) {\n        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n    }\n    if (maximumIterations <= 0)  {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"bad value for maximum iterations number: {0}\", maximumIterations);\n    }\n    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n        throw MathRuntimeException.createIllegalArgumentException(\n              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n              lowerBound, initial, upperBound);\n    }\n    double a = initial;\n    double b = initial;\n    double fa;\n    double fb;\n    int numIterations = 0 ;\n\n    fa = function.value(a);\n    fb = function.value(b);\n\n    // make sure that function values have different sign\n    if (fa * fb > 0.0) {\n        while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n               ((a > lowerBound) || (b < upperBound))) {\n            double dx = Math.min(Math.abs(b - a), Math.max(Math.abs(lowerBound - b), Math.abs(upperBound - b)));\n            double c = b + (fb < 0 ? dx : -dx);\n            double fc = function.value(c);\n            if (fc < 0) {\n                double tmpA = a;\n                double tmpBEps = b - Math.ulp(b);\n                double tmpB = (c < tmpBEps ? tmpBEps : c);\n                b = tmpB;\n                fb = function.value(b);\n                a = tmpA;\n                fa = function.value(a);\n            } else if (fc > 0) {\n                double tmpA = (c > b + Math.ulp(b) ? b : a);\n                double tmpB = b;\n                double tmpFEps = fb - Math.ulp(fb);\n                a = tmpA;\n                fa = function.value(a);\n                b = tmpB;\n                fb = function.value(b);\n            } else {\n                // lucky guess\n                a = c;\n                b = c;\n                fa = 0.0;\n                fb = 0.0;\n            }\n            numIterations++;\n        }\n    }\n\n    // unable to bracket?\n    if (fa * fb > 0.0 ) {\n        throw new ConvergenceException(\n                  \"number of iterations={0}, maximum iterations={1}, \" +\n                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n                  numIterations, maximumIterations, initial,\n                  lowerBound, upperBound, a, b, fa, fb);\n    }\n\n    return new double[]{a, b};\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..81e9c27fb 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -162,51 +162,79 @@ public class UnivariateRealSolverUtils {\n      * @throws IllegalArgumentException if function is null, maximumIterations\n      * is not positive, or initial is not between lowerBound and upperBound\n      */\n-    public static double[] bracket(UnivariateRealFunction function,\n-            double initial, double lowerBound, double upperBound, \n-            int maximumIterations) throws ConvergenceException, \n-            FunctionEvaluationException {\n-        \n-        if (function == null) {\n-            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n-        }\n-        if (maximumIterations <= 0)  {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n-        }\n-        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n-            throw MathRuntimeException.createIllegalArgumentException(\n-                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n-                  lowerBound, initial, upperBound);\n-        }\n-        double a = initial;\n-        double b = initial;\n-        double fa;\n-        double fb;\n-        int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n-            fa = function.value(a);\n-            \n-            fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+public static double[] bracket(UnivariateRealFunction function,\n+        double initial, double lowerBound, double upperBound, \n+        int maximumIterations) throws ConvergenceException, \n+        FunctionEvaluationException {\n+\n+    if (function == null) {\n+        throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n+    }\n+    if (maximumIterations <= 0)  {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"bad value for maximum iterations number: {0}\", maximumIterations);\n+    }\n+    if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n+        throw MathRuntimeException.createIllegalArgumentException(\n+              \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n+              lowerBound, initial, upperBound);\n+    }\n+    double a = initial;\n+    double b = initial;\n+    double fa;\n+    double fb;\n+    int numIterations = 0 ;\n+\n+    fa = function.value(a);\n+    fb = function.value(b);\n+\n+    // make sure that function values have different sign\n+    if (fa * fb > 0.0) {\n+        while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&\n+               ((a > lowerBound) || (b < upperBound))) {\n+            double dx = Math.min(Math.abs(b - a), Math.max(Math.abs(lowerBound - b), Math.abs(upperBound - b)));\n+            double c = b + (fb < 0 ? dx : -dx);\n+            double fc = function.value(c);\n+            if (fc < 0) {\n+                double tmpA = a;\n+                double tmpBEps = b - Math.ulp(b);\n+                double tmpB = (c < tmpBEps ? tmpBEps : c);\n+                b = tmpB;\n+                fb = function.value(b);\n+                a = tmpA;\n+                fa = function.value(a);\n+            } else if (fc > 0) {\n+                double tmpA = (c > b + Math.ulp(b) ? b : a);\n+                double tmpB = b;\n+                double tmpFEps = fb - Math.ulp(fb);\n+                a = tmpA;\n+                fa = function.value(a);\n+                b = tmpB;\n+                fb = function.value(b);\n+            } else {\n+                // lucky guess\n+                a = c;\n+                b = c;\n+                fa = 0.0;\n+                fb = 0.0;\n+            }\n+            numIterations++;\n         }\n-        \n-        return new double[]{a, b};\n     }\n \n+    // unable to bracket?\n+    if (fa * fb > 0.0 ) {\n+        throw new ConvergenceException(\n+                  \"number of iterations={0}, maximum iterations={1}, \" +\n+                  \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                  \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                  numIterations, maximumIterations, initial,\n+                  lowerBound, upperBound, a, b, fa, fb);\n+    }\n+\n+    return new double[]{a, b};\n+}\n+\n     /**\n      * Compute the midpoint of two values.\n      * ",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}