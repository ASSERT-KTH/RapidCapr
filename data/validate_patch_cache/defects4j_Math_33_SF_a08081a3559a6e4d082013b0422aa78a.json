{
    "patch": "import org.apache.commons.math3.optimization.linear.UnboundedSolutionException;\n\npublic class SimplexSolver extends AbstractLinearOptimizer {\n\n    protected void dropPhase1Objective() throws UnboundedSolutionException {\n        if (getNumObjectiveFunctions() == 1) {\n            return;\n        }\n\n        List<Integer> columnsToDrop = new ArrayList<Integer>();\n        columnsToDrop.add(0);\n\n        // positive cost non-artificial variables\n        for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {\n            final double entry = tableau.getEntry(0, i);\n            if (Precision.compareTo(entry, 0d, maxUlps) > 0) {\n                columnsToDrop.add(i);\n            }\n        }\n\n        // non-basic artificial variables\n        for (int i = 0; i < getNumArtificialVariables(); i++) {\n            int col = i + getArtificialVariableOffset();\n            boolean isBasic = false;\n            for (int j = 1; j < getHeight(); j++) {\n                if (Precision.compareTo(tableau.getEntry(j, col), 1d, maxUlps) == 0 && isZero(tableau.getEntry(j, 0))) {\n                    if (isBasic) {\n                        throw new UnboundedSolutionException();\n                    }\n                    isBasic = true;\n                }\n            }\n            if (!isBasic) {\n                columnsToDrop.add(col);\n            }\n        }\n\n        double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n        for (int i = 1; i < getHeight(); i++) {\n            int col = 0;\n            for (int j = 0; j < getWidth(); j++) {\n                if (!columnsToDrop.contains(j)) {\n                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n                }\n            }\n        }\n\n        for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n            columnLabels.remove((int) columnsToDrop.get(i));\n        }\n\n        this.tableau = new Array2DRowRealMatrix(matrix);\n        this.numArtificialVariables = 0;\n    }\n\n    @Override\n    protected void solvePhase1(AugmentedTableau tableau) throws UnboundedSolutionException {\n        super.solvePhase1(tableau);\n        if (tableau.getRhsOffset() < tableau.getWidth()) {\n            dropPhase1Objective();\n        }\n    }\n\n    @Override\n    protected void solvePhase2(AugmentedTableau tableau) throws UnboundedSolutionException {\n        super.solvePhase2(tableau);\n        dropPhase1Objective();\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\nindex 9a6993a55..b2717eb9b 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n@@ -324,7 +324,11 @@ class SimplexTableau implements Serializable {\n      * Removes the phase 1 objective function, positive cost non-artificial variables,\n      * and the non-basic artificial variables from this tableau.\n      */\n-    protected void dropPhase1Objective() {\n+import org.apache.commons.math3.optimization.linear.UnboundedSolutionException;\n+\n+public class SimplexSolver extends AbstractLinearOptimizer {\n+\n+    protected void dropPhase1Objective() throws UnboundedSolutionException {\n         if (getNumObjectiveFunctions() == 1) {\n             return;\n         }\n@@ -342,30 +346,54 @@ class SimplexTableau implements Serializable {\n \n         // non-basic artificial variables\n         for (int i = 0; i < getNumArtificialVariables(); i++) {\n-          int col = i + getArtificialVariableOffset();\n-          if (getBasicRow(col) == null) {\n-            columnsToDrop.add(col);\n-          }\n+            int col = i + getArtificialVariableOffset();\n+            boolean isBasic = false;\n+            for (int j = 1; j < getHeight(); j++) {\n+                if (Precision.compareTo(tableau.getEntry(j, col), 1d, maxUlps) == 0 && isZero(tableau.getEntry(j, 0))) {\n+                    if (isBasic) {\n+                        throw new UnboundedSolutionException();\n+                    }\n+                    isBasic = true;\n+                }\n+            }\n+            if (!isBasic) {\n+                columnsToDrop.add(col);\n+            }\n         }\n \n         double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];\n         for (int i = 1; i < getHeight(); i++) {\n-          int col = 0;\n-          for (int j = 0; j < getWidth(); j++) {\n-            if (!columnsToDrop.contains(j)) {\n-              matrix[i - 1][col++] = tableau.getEntry(i, j);\n+            int col = 0;\n+            for (int j = 0; j < getWidth(); j++) {\n+                if (!columnsToDrop.contains(j)) {\n+                    matrix[i - 1][col++] = tableau.getEntry(i, j);\n+                }\n             }\n-          }\n         }\n \n         for (int i = columnsToDrop.size() - 1; i >= 0; i--) {\n-          columnLabels.remove((int) columnsToDrop.get(i));\n+            columnLabels.remove((int) columnsToDrop.get(i));\n         }\n \n         this.tableau = new Array2DRowRealMatrix(matrix);\n         this.numArtificialVariables = 0;\n     }\n \n+    @Override\n+    protected void solvePhase1(AugmentedTableau tableau) throws UnboundedSolutionException {\n+        super.solvePhase1(tableau);\n+        if (tableau.getRhsOffset() < tableau.getWidth()) {\n+            dropPhase1Objective();\n+        }\n+    }\n+\n+    @Override\n+    protected void solvePhase2(AugmentedTableau tableau) throws UnboundedSolutionException {\n+        super.solvePhase2(tableau);\n+        dropPhase1Objective();\n+    }\n+}\n+\n     /**\n      * @param src the source array\n      * @param dest the destination array",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}