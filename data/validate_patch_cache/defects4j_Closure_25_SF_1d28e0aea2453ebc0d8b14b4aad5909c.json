{
    "patch": "  private FlowScope traverseNew(Node n, FlowScope scope) {\n    // Get the constructor node\n    Node constructor = n.getFirstChild();\n    // Traverse the constructor node\n    TriState constructorKnown = traverse(constructor, scope).getKnowledge(constructor).triState;\n    // If the constructor type is not known, set the type as unknown\n    if (constructor.getJSType() == null || constructorKnown == TriState.FALSE) {\n      n.setJSType(getNativeType(UNKNOWN_TYPE));\n    } else {\n      // Get the constructor type and restrict it by not null/undefined\n      FunctionType constructorType = constructor.getJSType().restrictByNotNullOrUndefined().toMaybeFunctionType();\n      // If the constructor type is a constructor function, get the instance type\n      if (constructorType != null && constructorType.isConstructor()) {\n        n.setJSType(constructorType.getInstanceType());\n      } else {\n        // Otherwise, set the type as unknown\n        n.setJSType(getNativeType(UNKNOWN_TYPE));\n      }\n    }\n    // Traverse the arguments\n    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n    return scope;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 7e218d88..15b17fdb 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1033,29 +1033,25 @@ class TypeInference\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n-\n+    // Get the constructor node\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-    JSType constructorType = constructor.getJSType();\n-    JSType type = null;\n-    if (constructorType != null) {\n-      constructorType = constructorType.restrictByNotNullOrUndefined();\n-      if (constructorType.isUnknownType()) {\n-        type = getNativeType(UNKNOWN_TYPE);\n+    // Traverse the constructor node\n+    TriState constructorKnown = traverse(constructor, scope).getKnowledge(constructor).triState;\n+    // If the constructor type is not known, set the type as unknown\n+    if (constructor.getJSType() == null || constructorKnown == TriState.FALSE) {\n+      n.setJSType(getNativeType(UNKNOWN_TYPE));\n+    } else {\n+      // Get the constructor type and restrict it by not null/undefined\n+      FunctionType constructorType = constructor.getJSType().restrictByNotNullOrUndefined().toMaybeFunctionType();\n+      // If the constructor type is a constructor function, get the instance type\n+      if (constructorType != null && constructorType.isConstructor()) {\n+        n.setJSType(constructorType.getInstanceType());\n       } else {\n-        FunctionType ct = constructorType.toMaybeFunctionType();\n-        if (ct == null && constructorType instanceof FunctionType) {\n-          // If constructorType is a NoObjectType, then toMaybeFunctionType will\n-          // return null. But NoObjectType implements the FunctionType\n-          // interface, precisely because it can validly construct objects.\n-          ct = (FunctionType) constructorType;\n-        }\n-        if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n-        }\n+        // Otherwise, set the type as unknown\n+        n.setJSType(getNativeType(UNKNOWN_TYPE));\n       }\n     }\n-    n.setJSType(type);\n+    // Traverse the arguments\n     for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n       scope = traverse(arg, scope);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}