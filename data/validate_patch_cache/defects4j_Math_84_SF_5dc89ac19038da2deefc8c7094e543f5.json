{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // save the original vertex\n        final RealPointValuePair[] original = simplex;\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair ex = evaluateNewSimplex(original, alpha, comparator);\n\n            final RealPointValuePair expanded;\n            if (comparator.compare(ex, reflected) < 0) {\n                expanded = ex;\n            } else {\n                expanded = reflected;\n            }\n\n            final RealPointValuePair[] reflectedSimplex = simplex;\n            if (comparator.compare(expanded, best) < 0) {\n                // accept the expanded simplex\n                simplex = reflectedSimplex;\n            } else {\n                // accept the reflected simplex\n                simplex = reflectedSimplex;\n            }\n            return;\n        }\n\n        // compute the contracted simplex\n        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n        final RealPointValuePair[] contractedSimplex = simplex;\n        if (comparator.compare(contracted, best) < 0) {\n            // accept the contracted simplex\n            simplex = contractedSimplex;\n        } else {\n            final RealPointValuePair shrink = evaluateNewSimplex(original, sigma, comparator);\n            final RealPointValuePair[] simplexShrunk = simplex;\n            if (comparator.compare(shrink, simplex[0]) < 0) {\n                // accept the shrunken simplex\n                simplex = simplexShrunk;\n            } else {\n                final int len = simplex.length;\n                final RealPointValuePair best2 = simplex[0];\n                for (int i = 1; i < len; i++) {\n                    simplex[i] = RealPointValuePair.midpoint(best2, simplex[i]);\n                }\n            }\n        }\n\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..496a53d2c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,45 +58,65 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // save the original vertex\n+        final RealPointValuePair[] original = simplex;\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n-\n-                return;\n+            // compute the expanded simplex\n+            final RealPointValuePair ex = evaluateNewSimplex(original, alpha, comparator);\n \n+            final RealPointValuePair expanded;\n+            if (comparator.compare(ex, reflected) < 0) {\n+                expanded = ex;\n+            } else {\n+                expanded = reflected;\n             }\n \n-            // compute the contracted simplex\n-            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n-            if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n-\n-            // check convergence\n-                return;\n+            final RealPointValuePair[] reflectedSimplex = simplex;\n+            if (comparator.compare(expanded, best) < 0) {\n+                // accept the expanded simplex\n+                simplex = reflectedSimplex;\n+            } else {\n+                // accept the reflected simplex\n+                simplex = reflectedSimplex;\n             }\n+            return;\n+        }\n \n+        // compute the contracted simplex\n+        final RealPointValuePair contracted = evaluateNewSimplex(original, rho, comparator);\n+        final RealPointValuePair[] contractedSimplex = simplex;\n+        if (comparator.compare(contracted, best) < 0) {\n+            // accept the contracted simplex\n+            simplex = contractedSimplex;\n+        } else {\n+            final RealPointValuePair shrink = evaluateNewSimplex(original, sigma, comparator);\n+            final RealPointValuePair[] simplexShrunk = simplex;\n+            if (comparator.compare(shrink, simplex[0]) < 0) {\n+                // accept the shrunken simplex\n+                simplex = simplexShrunk;\n+            } else {\n+                final int len = simplex.length;\n+                final RealPointValuePair best2 = simplex[0];\n+                for (int i = 1; i < len; i++) {\n+                    simplex[i] = RealPointValuePair.midpoint(best2, simplex[i]);\n+                }\n+            }\n         }\n \n     }\n+}\n \n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}