{
    "patch": "    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n      Name name = workList.pop();\n\n      // Don't attempt to inline a getter or setter property as a variable.\n      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n        continue;\n      }\n\n      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 &&\n          name.isNoOverride() && !name.isVar()) {\n        // {@code name} meets condition (a) and (b).\n        for (Ref ref : name.getRefs()) {\n          if (ref.type == Type.SET_FROM_GLOBAL && ref.scope.isGlobal()) {\n            Node root = ref.getNode();\n            Preconditions.checkState(\n                root.isVar() || root.isFunction(),\n                \"Expected VAR or FUNCTION node, but was %s: %s\",\n                root.getToken(), root);\n\n            Name alias = namespace.getOwnSlot(root);\n            Preconditions.checkState(\n                alias != null && alias.type == Name.Type.VAR,\n                \"Expected a VAR alias, but the alias is: %s, %s\", alias, root);\n\n            // Inline the alias into the original variable.\n            if (inlineAliasIfPossible(ref, namespace)) {\n              root.removeChild(alias.getNode());\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      if (name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            // {@code name} meets condition (c).\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n            }\n          }\n        }\n      }\n\n      if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null) {\n        // All of {@code name}'s children meet condition (a), so they can be\n        // added to the worklist.\n        workList.addAll(name.props);\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..d085cd77 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,63 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+    // Invariant: All the names in the worklist meet condition (a).\n+    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n+    while (!workList.isEmpty()) {\n+      Name name = workList.pop();\n+\n+      // Don't attempt to inline a getter or setter property as a variable.\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+\n+      if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0 &&\n+          name.isNoOverride() && !name.isVar()) {\n+        // {@code name} meets condition (a) and (b).\n+        for (Ref ref : name.getRefs()) {\n+          if (ref.type == Type.SET_FROM_GLOBAL && ref.scope.isGlobal()) {\n+            Node root = ref.getNode();\n+            Preconditions.checkState(\n+                root.isVar() || root.isFunction(),\n+                \"Expected VAR or FUNCTION node, but was %s: %s\",\n+                root.getToken(), root);\n+\n+            Name alias = namespace.getOwnSlot(root);\n+            Preconditions.checkState(\n+                alias != null && alias.type == Name.Type.VAR,\n+                \"Expected a VAR alias, but the alias is: %s, %s\", alias, root);\n+\n+            // Inline the alias into the original variable.\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              root.removeChild(alias.getNode());\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n+\n+      if (name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            // {@code name} meets condition (c).\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+            }\n+          }\n+        }\n+      }\n+\n+      if ((name.type == Name.Type.OBJECTLIT ||\n+           name.type == Name.Type.FUNCTION) &&\n+          name.aliasingGets == 0 && name.props != null) {\n+        // All of {@code name}'s children meet condition (a), so they can be\n+        // added to the worklist.\n+        workList.addAll(name.props);\n+      }\n+    }\n+  }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}