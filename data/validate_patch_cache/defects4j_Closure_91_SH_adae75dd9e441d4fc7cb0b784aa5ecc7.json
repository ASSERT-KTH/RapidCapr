{
    "patch": "    if (n.getType() == Token.FUNCTION) {\n      // Don't traverse functions that are constructors or have the @this\n      // or @override annotation.\n      JSDocInfo functionJsDoc = getFunctionJsDocInfo(n);\n      if (functionJsDoc != null &&\n          (functionJsDoc.isConstructor() ||\n           functionJsDoc.isInterface() ||\n           functionJsDoc.hasThisType() ||\n           functionJsDoc.isOverride())) {\n        return false;\n      }\n\n      // Don't traverse functions unless they would normally\n      // be able to have a @this annotation associated with them. e.g.,\n      // var a = function() { }; // or\n      // function a() {} // or\n      // a.x = function() {}; // or\n      // var a = {x: function() {}};\n      Node ancestor = NodeUtil.getEnclosingNode(parent, Token.FUNCTION, Token.SCRIPT);\n      if (ancestor != null && ancestor.getType() == Token.FUNCTION) {\n        JSDocInfo aJsDoc = getFunctionJsDocInfo(ancestor);\n        if (aJsDoc == null || aJsDoc.getThisType() == null) {\n          return false;\n        }\n      }\n\n      // Don't traverse functions that are getting lent to a prototype.\n      Node ancestor2 = NodeUtil.getEnclosingNode(parent, Token.GETPROP);\n      if (ancestor2 != null &&\n          ancestor2.getParent() != null &&\n          ancestor2.getParent().getType() == Token.ASSIGN) {\n        Node getter = NodeUtil.getGetterDefIfGetter(ancestor2);\n        if (getter != null && getter.getParent().getType() == Token.OBJECTLIT) {\n          // e.g. don't traverse the getter in \"var obj = {get a() {}};\"\n          return false;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..85d2124f 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,44 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+    if (n.getType() == Token.FUNCTION) {\n+      // Don't traverse functions that are constructors or have the @this\n+      // or @override annotation.\n+      JSDocInfo functionJsDoc = getFunctionJsDocInfo(n);\n+      if (functionJsDoc != null &&\n+          (functionJsDoc.isConstructor() ||\n+           functionJsDoc.isInterface() ||\n+           functionJsDoc.hasThisType() ||\n+           functionJsDoc.isOverride())) {\n+        return false;\n+      }\n+\n+      // Don't traverse functions unless they would normally\n+      // be able to have a @this annotation associated with them. e.g.,\n+      // var a = function() { }; // or\n+      // function a() {} // or\n+      // a.x = function() {}; // or\n+      // var a = {x: function() {}};\n+      Node ancestor = NodeUtil.getEnclosingNode(parent, Token.FUNCTION, Token.SCRIPT);\n+      if (ancestor != null && ancestor.getType() == Token.FUNCTION) {\n+        JSDocInfo aJsDoc = getFunctionJsDocInfo(ancestor);\n+        if (aJsDoc == null || aJsDoc.getThisType() == null) {\n+          return false;\n+        }\n+      }\n+\n+      // Don't traverse functions that are getting lent to a prototype.\n+      Node ancestor2 = NodeUtil.getEnclosingNode(parent, Token.GETPROP);\n+      if (ancestor2 != null &&\n+          ancestor2.getParent() != null &&\n+          ancestor2.getParent().getType() == Token.ASSIGN) {\n+        Node getter = NodeUtil.getGetterDefIfGetter(ancestor2);\n+        if (getter != null && getter.getParent().getType() == Token.OBJECTLIT) {\n+          // e.g. don't traverse the getter in \"var obj = {get a() {}};\"\n+          return false;\n+        }\n+      }\n+    }\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}