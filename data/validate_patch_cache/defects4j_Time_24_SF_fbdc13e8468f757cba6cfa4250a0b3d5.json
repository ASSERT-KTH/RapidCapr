{
    "patch": "public long computeMillis(boolean resetFields, String text) {\n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    boolean monthOrDaySaved = false;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n    if (count > 0) {\n        // alter base year for parsing if first field is month or day\n        DateTimeField firstField = savedFields[0].iField;\n        if (firstField.getType() == DateTimeFieldType.monthOfYear() \n             || firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n            int maxIndex = count;\n            if (firstField.getType() == DateTimeFieldType.monthOfYear()) {\n                maxIndex = computeFieldIndex(savedFields, count, DateTimeFieldType.dayOfMonth());\n                monthOrDaySaved = true;\n            } else if (firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n                monthOrDaySaved = true;\n            }\n            int maxDayOfMonth = iChrono.dayOfMonth().getMaximumValue(iDefaultYear);\n            for (int i = 0; i < maxIndex; ++i) {\n                DateTimeField field = savedFields[i].iField;\n                if (field.getType() == DateTimeFieldType.year() \n                    || field.getType() == DateTimeFieldType.monthOfYear() \n                    || field.getType() == DateTimeFieldType.dayOfMonth()) {\n                    int value = savedFields[i].getValue();\n                    if (monthOrDaySaved \n                       && field.getType() == firstField.getType() \n                       && value > maxDayOfMonth) {\n                        throw new IllegalFieldValueException(field.getType(), text, value,\n                            \"Value \" + value + \" for \" + field.getName() \n                            + \" must be in the range [1,\" + maxDayOfMonth + \"]\");\n                    }\n                    iDefaultYear = field.set(iDefaultYear, value);\n                    if (field.getType() == DateTimeFieldType.monthOfYear()) {\n                        maxDayOfMonth = iChrono.dayOfMonth().getMaximumValue(iDefaultYear);\n                    }\n                } else {\n                    iDefaultYear = field.set(iDefaultYear, iDefaultYear);\n                }\n            }\n            if (monthOrDaySaved) {\n                count = maxIndex;\n            }\n        }\n    }\n\n    long millis = iMillis;\n    try {\n        for (int i = 0; i < count; i++) {\n            millis = savedFields[i].set(millis, resetFields);\n        }\n    } catch (IllegalFieldValueException e) {\n        if (text != null) {\n            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n        }\n        throw e;\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\nprivate int computeFieldIndex(SavedField[] savedFields, int count, DateTimeFieldType type) {\n    for (int i = 0; i < count; ++i) {\n        if (savedFields[i].iField.getType() == type) {\n            return i;\n        }\n    }\n    return count;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..1e92d7b7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,93 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n-        }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n+public long computeMillis(boolean resetFields, String text) {\n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    boolean monthOrDaySaved = false;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+    if (count > 0) {\n+        // alter base year for parsing if first field is month or day\n+        DateTimeField firstField = savedFields[0].iField;\n+        if (firstField.getType() == DateTimeFieldType.monthOfYear() \n+             || firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n+            int maxIndex = count;\n+            if (firstField.getType() == DateTimeFieldType.monthOfYear()) {\n+                maxIndex = computeFieldIndex(savedFields, count, DateTimeFieldType.dayOfMonth());\n+                monthOrDaySaved = true;\n+            } else if (firstField.getType() == DateTimeFieldType.dayOfMonth()) {\n+                monthOrDaySaved = true;\n             }\n-        }\n-\n-        long millis = iMillis;\n-        try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n+            int maxDayOfMonth = iChrono.dayOfMonth().getMaximumValue(iDefaultYear);\n+            for (int i = 0; i < maxIndex; ++i) {\n+                DateTimeField field = savedFields[i].iField;\n+                if (field.getType() == DateTimeFieldType.year() \n+                    || field.getType() == DateTimeFieldType.monthOfYear() \n+                    || field.getType() == DateTimeFieldType.dayOfMonth()) {\n+                    int value = savedFields[i].getValue();\n+                    if (monthOrDaySaved \n+                       && field.getType() == firstField.getType() \n+                       && value > maxDayOfMonth) {\n+                        throw new IllegalFieldValueException(field.getType(), text, value,\n+                            \"Value \" + value + \" for \" + field.getName() \n+                            + \" must be in the range [1,\" + maxDayOfMonth + \"]\");\n+                    }\n+                    iDefaultYear = field.set(iDefaultYear, value);\n+                    if (field.getType() == DateTimeFieldType.monthOfYear()) {\n+                        maxDayOfMonth = iChrono.dayOfMonth().getMaximumValue(iDefaultYear);\n+                    }\n+                } else {\n+                    iDefaultYear = field.set(iDefaultYear, iDefaultYear);\n+                }\n             }\n-        } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            if (monthOrDaySaved) {\n+                count = maxIndex;\n             }\n-            throw e;\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n+    }\n+\n+    long millis = iMillis;\n+    try {\n+        for (int i = 0; i < count; i++) {\n+            millis = savedFields[i].set(millis, resetFields);\n+        }\n+    } catch (IllegalFieldValueException e) {\n+        if (text != null) {\n+            e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+        }\n+        throw e;\n+    }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message =\n                     \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n-                }\n-                throw new IllegalArgumentException(message);\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n             }\n+            throw new IllegalArgumentException(message);\n         }\n-        \n-        return millis;\n     }\n+\n+    return millis;\n+}\n+\n+private int computeFieldIndex(SavedField[] savedFields, int count, DateTimeFieldType type) {\n+    for (int i = 0; i < count; ++i) {\n+        if (savedFields[i].iField.getType() == type) {\n+            return i;\n+        }\n+    }\n+    return count;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}