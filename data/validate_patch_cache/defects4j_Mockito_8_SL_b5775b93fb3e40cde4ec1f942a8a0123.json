{
    "patch": "private boolean isRecursiveType(Type type) {\n    if (type instanceof TypeVariable) {\n        return true;\n    } else if (type instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) type;\n        for (Type argumentType : parameterizedType.getActualTypeArguments()) {\n            if (isRecursiveType(argumentType)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..d503fe150 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,19 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+private boolean isRecursiveType(Type type) {\n+    if (type instanceof TypeVariable) {\n+        return true;\n+    } else if (type instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) type;\n+        for (Type argumentType : parameterizedType.getActualTypeArguments()) {\n+            if (isRecursiveType(argumentType)) {\n+                return true;\n+            }\n+        }\n+    }\n+    return false;\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}