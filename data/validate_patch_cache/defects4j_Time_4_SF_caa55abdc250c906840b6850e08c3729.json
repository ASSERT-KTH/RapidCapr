{
    "patch": "    public Partial with(DateTimeFieldType fieldType, int value) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"The field type must not be null\");\n        }\n        int index = indexOf(fieldType);\n        if (index == -1) {\n            DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n            int[] newValues = new int[newTypes.length];\n            int[] newIndices = new int[newTypes.length];\n\n            // find correct insertion point to keep largest-smallest order\n            int i = 0;\n            DurationField unitField = fieldType.getDurationType().getField(iChronology);\n            if (unitField.isSupported()) {\n                for (; i < iTypes.length; i++) {\n                    DateTimeFieldType loopType = iTypes[i];\n                    DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n                    if (loopUnitField.isSupported()) {\n                        int compare = unitField.compareTo(loopUnitField);\n                        if (compare > 0) {\n                            break;\n                        } else if (compare == 0) {\n                            DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                            DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                            if (rangeField.compareTo(loopRangeField) > 0) {\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n\n            System.arraycopy(iTypes, 0, newTypes, 0, i);\n            System.arraycopy(iValues, 0, newValues, 0, i);\n\n            newTypes[i] = fieldType;\n            newValues[i] = value;\n\n            System.arraycopy(iTypes, i, newTypes, i+1, iTypes.length-i);\n            System.arraycopy(iValues, i, newValues, i+1, iValues.length-i);\n\n            for (int j = 0; j < newIndices.length; j++) {\n                newIndices[j] = j;\n            }\n\n            // use public constructor to ensure full validation\n            // this isn't overly efficient, but is safe\n            Partial newPartial = new Partial(iChronology, newTypes, newValues, newIndices);\n            iChronology.validate(newPartial, newValues);\n            return newPartial;\n        }\n        if (value == getValue(index)) {\n            return this;\n        }\n        int[] newValues = getValues();\n        newValues = getField(index).set(this, index, newValues, value);\n        return new Partial(this, newValues, iIndices);\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..7fa8bdc0 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -431,7 +431,8 @@ public final class Partial\n         if (index == -1) {\n             DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];\n             int[] newValues = new int[newTypes.length];\n-            \n+            int[] newIndices = new int[newTypes.length];\n+\n             // find correct insertion point to keep largest-smallest order\n             int i = 0;\n             DurationField unitField = fieldType.getDurationType().getField(iChronology);\n@@ -453,15 +454,23 @@ public final class Partial\n                     }\n                 }\n             }\n+\n             System.arraycopy(iTypes, 0, newTypes, 0, i);\n             System.arraycopy(iValues, 0, newValues, 0, i);\n+\n             newTypes[i] = fieldType;\n             newValues[i] = value;\n-            System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);\n-            System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n+\n+            System.arraycopy(iTypes, i, newTypes, i+1, iTypes.length-i);\n+            System.arraycopy(iValues, i, newValues, i+1, iValues.length-i);\n+\n+            for (int j = 0; j < newIndices.length; j++) {\n+                newIndices[j] = j;\n+            }\n+\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+            Partial newPartial = new Partial(iChronology, newTypes, newValues, newIndices);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }\n@@ -470,7 +479,7 @@ public final class Partial\n         }\n         int[] newValues = getValues();\n         newValues = getField(index).set(this, index, newValues, value);\n-        return new Partial(this, newValues);\n+        return new Partial(this, newValues, iIndices);\n     }\n \n     /**",
    "result_reason": "error: no suitable constructor found for Partial(Chronology,DateTimeFieldType[],int[],int[])",
    "test_result": "ERROR"
}