{
    "patch": "        for (int j = 0; j < actualTypeArguments.length; j++) {\n            TypeVariable<?> typeParameter = typeParameters[j];\n            Type actualTypeArgument = actualTypeArguments[j];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable<?> typeVariableArgument = (TypeVariable<?>) actualTypeArgument;\n                Type typeVariableBound = contextualActualTypeParameters.get(typeVariableArgument);\n                if (typeVariableBound == null) {\n                    typeVariableBound = typeVariableArgument.getBounds()[0];\n                }\n                contextualActualTypeParameters.put(typeParameter, typeVariableBound);\n            }else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..657ddc722 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,24 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        for (int j = 0; j < actualTypeArguments.length; j++) {\n+            TypeVariable<?> typeParameter = typeParameters[j];\n+            Type actualTypeArgument = actualTypeArguments[j];\n+\n+            if (actualTypeArgument instanceof WildcardType) {\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable<?> typeVariableArgument = (TypeVariable<?>) actualTypeArgument;\n+                Type typeVariableBound = contextualActualTypeParameters.get(typeVariableArgument);\n+                if (typeVariableBound == null) {\n+                    typeVariableBound = typeVariableArgument.getBounds()[0];\n+                }\n+                contextualActualTypeParameters.put(typeParameter, typeVariableBound);\n+            }else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: variable typeParameter is already defined in method registerTypeVariablesOn(Type)",
    "test_result": "ERROR"
}