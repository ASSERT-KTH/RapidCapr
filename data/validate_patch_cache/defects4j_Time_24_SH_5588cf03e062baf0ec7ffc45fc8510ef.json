{
    "patch": "        long millis = iMillis;\n        boolean updatedStandardOffset = false;\n        try {\n            for (int i = 0; i < count; i++) {\n                int updateDurationMillis = savedFields[i].setDurationField(millis);\n                if (updateDurationMillis != 0) {\n                    millis += updateDurationMillis;\n                    for (int j = i + 1; j < count; j++) {\n                        millis = savedFields[j].set(millis, resetFields);\n                    }\n                    break;\n                } else {\n                    if (savedFields[i].isSaved()) {\n                        if (savedFields[i].getField().getType() == DateTimeFieldType.zone()) {\n                            ZoneId zone = (ZoneId) savedFields[i].getField().get((ReadablePartial) null);\n                            if (iZone != zone && (iZone == null || !iZone.equals(zone)))) {\n                                iZone = zone;\n                                updatedStandardOffset = updateStandardOffset(null);\n                            }\n                        }\n                    }\n                    millis = savedFields[i].set(millis, resetFields);\n                }\n            }\n        } catch (IllegalFieldValueException e) {\n            if (text != null) {\n                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n            }\n            throw e;\n        }\n        \n        if (iZone == null) {\n            millis -= iOffset;\n        } else {\n            int offset = iZone.getOffsetFromLocal(millis);\n            millis -= offset;\n            if (offset != iZone.getOffset(millis)) {\n                String message =\n                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n                if (text != null) {\n                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n                }\n                throw new IllegalArgumentException(message);\n            }\n        }\n        \n        if (updatedStandardOffset) {\n            for (int i = 0; i < count; i++) {\n                if (savedFields[i].isSaved()) {\n                    DateTimeField field = savedFields[i].getField();\n                    if (field.getType() == DateTimeFieldType.zone()) {\n                        continue;\n                    }\n                    millis = field.set(millis, savedFields[i].getValue(), resetFields);\n                }\n            }\n        }\n        \n        return millis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..8b590485 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,66 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+        long millis = iMillis;\n+        boolean updatedStandardOffset = false;\n+        try {\n+            for (int i = 0; i < count; i++) {\n+                int updateDurationMillis = savedFields[i].setDurationField(millis);\n+                if (updateDurationMillis != 0) {\n+                    millis += updateDurationMillis;\n+                    for (int j = i + 1; j < count; j++) {\n+                        millis = savedFields[j].set(millis, resetFields);\n+                    }\n+                    break;\n+                } else {\n+                    if (savedFields[i].isSaved()) {\n+                        if (savedFields[i].getField().getType() == DateTimeFieldType.zone()) {\n+                            ZoneId zone = (ZoneId) savedFields[i].getField().get((ReadablePartial) null);\n+                            if (iZone != zone && (iZone == null || !iZone.equals(zone)))) {\n+                                iZone = zone;\n+                                updatedStandardOffset = updateStandardOffset(null);\n+                            }\n+                        }\n+                    }\n+                    millis = savedFields[i].set(millis, resetFields);\n+                }\n+            }\n+        } catch (IllegalFieldValueException e) {\n+            if (text != null) {\n+                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            }\n+            throw e;\n+        }\n+        \n+        if (iZone == null) {\n+            millis -= iOffset;\n+        } else {\n+            int offset = iZone.getOffsetFromLocal(millis);\n+            millis -= offset;\n+            if (offset != iZone.getOffset(millis)) {\n+                String message =\n+                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+                if (text != null) {\n+                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+                }\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+        \n+        if (updatedStandardOffset) {\n+            for (int i = 0; i < count; i++) {\n+                if (savedFields[i].isSaved()) {\n+                    DateTimeField field = savedFields[i].getField();\n+                    if (field.getType() == DateTimeFieldType.zone()) {\n+                        continue;\n+                    }\n+                    millis = field.set(millis, savedFields[i].getValue(), resetFields);\n+                }\n+            }\n+        }\n+        \n+        return millis;\n+    }\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}