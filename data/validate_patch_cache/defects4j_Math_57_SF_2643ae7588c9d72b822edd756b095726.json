{
    "patch": "public List<Cluster<T>> cluster(final Collection<T> points,\n                                 final int k, final int maxIterations) {\n    List<T> pointList = new ArrayList<>(points);\n    if (pointList.isEmpty()) {\n        throw new IllegalArgumentException(\"Empty points collection\");\n    }\n\n    if (k <= 0) {\n        throw new IllegalArgumentException(\"Invalid number of clusters: \" + k);\n    }\n\n    if (maxIterations <= 0) {\n        throw new IllegalArgumentException(\"Invalid maximum number of iterations: \" + maxIterations);\n    }\n\n    List<Cluster<T>> clusters = chooseInitialCenters(pointList, k);\n    int it = 0;\n    boolean converged = false;\n    while (!converged && it++ < maxIterations) {\n        clusters.forEach(Cluster::clearPoints);\n\n        for (T point : pointList) {\n            Cluster<T> closestCluster = clusters.stream()\n                    .min(Comparator.comparingDouble(c -> c.getCenter().distanceFrom(point)))\n                    .orElseThrow(IllegalStateException::new);\n            closestCluster.addPoint(point);\n        }\n\n        converged = clusters.stream().allMatch(Cluster::isStable);\n    }\n\n    LOGGER.info(\"Converged in {} iterations\", it);\n\n    return clusters;\n}\n\nprivate static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(List<T> points, int k) {\n    Random random = new Random();\n    List<Cluster<T>> clusters = new ArrayList<>(k);\n\n    // Select the first point randomly\n    T first = points.remove(random.nextInt(points.size()));\n    clusters.add(new Cluster<>(first));\n\n    for (int i = 1; i < k; i++) {\n        // Compute the sum of squared distances from each point to its nearest cluster\n        double[] minDistances = points.parallelStream()\n                .mapToDouble(p -> computeMinDistance(p, clusters))\n                .toArray();\n        double minDistSqrSum = Arrays.stream(minDistances).map(x -> x * x).sum();\n\n        // Choose a new point randomly considering the weight of each point proportional to its squared distance\n        double cutoff = random.nextDouble() * minDistSqrSum;\n        double runningSqrSum = 0;\n        int nextIdx = -1;\n        while (runningSqrSum < cutoff) {\n            nextIdx++;\n            runningSqrSum += minDistances[nextIdx] * minDistances[nextIdx];\n        }\n        T next = points.remove(nextIdx);\n        clusters.add(new Cluster<>(next));\n    }\n\n    return clusters;\n}\n\nprivate static <T extends Clusterable<T>> double computeMinDistance(T point, List<Cluster<T>> clusters) {\n    return clusters.stream()\n            .mapToDouble(c -> c.getCenter().distanceFrom(point))\n            .min()\n            .orElseThrow(IllegalStateException::new);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\nindex b73ac9d3e..46d597287 100644\n--- a/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java\n@@ -89,114 +89,79 @@ public class KMeansPlusPlusClusterer<T extends Clusterable<T>> {\n      *     for.  If negative, no maximum will be used\n      * @return a list of clusters containing the points\n      */\n-    public List<Cluster<T>> cluster(final Collection<T> points,\n-                                    final int k, final int maxIterations) {\n-        // create the initial clusters\n-        List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);\n-        assignPointsToClusters(clusters, points);\n-\n-        // iterate through updating the centers until we're done\n-        final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;\n-        for (int count = 0; count < max; count++) {\n-            boolean clusteringChanged = false;\n-            List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();\n-            for (final Cluster<T> cluster : clusters) {\n-                final T newCenter;\n-                if (cluster.getPoints().isEmpty()) {\n-                    switch (emptyStrategy) {\n-                        case LARGEST_VARIANCE :\n-                            newCenter = getPointFromLargestVarianceCluster(clusters);\n-                            break;\n-                        case LARGEST_POINTS_NUMBER :\n-                            newCenter = getPointFromLargestNumberCluster(clusters);\n-                            break;\n-                        case FARTHEST_POINT :\n-                            newCenter = getFarthestPoint(clusters);\n-                            break;\n-                        default :\n-                            throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);\n-                    }\n-                    clusteringChanged = true;\n-                } else {\n-                    newCenter = cluster.getCenter().centroidOf(cluster.getPoints());\n-                    if (!newCenter.equals(cluster.getCenter())) {\n-                        clusteringChanged = true;\n-                    }\n-                }\n-                newClusters.add(new Cluster<T>(newCenter));\n-            }\n-            if (!clusteringChanged) {\n-                return clusters;\n-            }\n-            assignPointsToClusters(newClusters, points);\n-            clusters = newClusters;\n-        }\n-        return clusters;\n+public List<Cluster<T>> cluster(final Collection<T> points,\n+                                 final int k, final int maxIterations) {\n+    List<T> pointList = new ArrayList<>(points);\n+    if (pointList.isEmpty()) {\n+        throw new IllegalArgumentException(\"Empty points collection\");\n     }\n \n-    /**\n-     * Adds the given points to the closest {@link Cluster}.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param clusters the {@link Cluster}s to add the points to\n-     * @param points the points to add to the given {@link Cluster}s\n-     */\n-    private static <T extends Clusterable<T>> void\n-        assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) {\n-        for (final T p : points) {\n-            Cluster<T> cluster = getNearestCluster(clusters, p);\n-            cluster.addPoint(p);\n-        }\n+    if (k <= 0) {\n+        throw new IllegalArgumentException(\"Invalid number of clusters: \" + k);\n     }\n \n-    /**\n-     * Use K-means++ to choose the initial centers.\n-     *\n-     * @param <T> type of the points to cluster\n-     * @param points the points to choose the initial centers from\n-     * @param k the number of centers to choose\n-     * @param random random generator to use\n-     * @return the initial centers\n-     */\n-    private static <T extends Clusterable<T>> List<Cluster<T>>\n-        chooseInitialCenters(final Collection<T> points, final int k, final Random random) {\n-\n-        final List<T> pointSet = new ArrayList<T>(points);\n-        final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();\n-\n-        // Choose one center uniformly at random from among the data points.\n-        final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));\n-        resultSet.add(new Cluster<T>(firstPoint));\n-\n-        final double[] dx2 = new double[pointSet.size()];\n-        while (resultSet.size() < k) {\n-            // For each data point x, compute D(x), the distance between x and\n-            // the nearest center that has already been chosen.\n-            int sum = 0;\n-            for (int i = 0; i < pointSet.size(); i++) {\n-                final T p = pointSet.get(i);\n-                final Cluster<T> nearest = getNearestCluster(resultSet, p);\n-                final double d = p.distanceFrom(nearest.getCenter());\n-                sum += d * d;\n-                dx2[i] = sum;\n-            }\n+    if (maxIterations <= 0) {\n+        throw new IllegalArgumentException(\"Invalid maximum number of iterations: \" + maxIterations);\n+    }\n \n-            // Add one new data point as a center. Each point x is chosen with\n-            // probability proportional to D(x)2\n-            final double r = random.nextDouble() * sum;\n-            for (int i = 0 ; i < dx2.length; i++) {\n-                if (dx2[i] >= r) {\n-                    final T p = pointSet.remove(i);\n-                    resultSet.add(new Cluster<T>(p));\n-                    break;\n-                }\n-            }\n+    List<Cluster<T>> clusters = chooseInitialCenters(pointList, k);\n+    int it = 0;\n+    boolean converged = false;\n+    while (!converged && it++ < maxIterations) {\n+        clusters.forEach(Cluster::clearPoints);\n+\n+        for (T point : pointList) {\n+            Cluster<T> closestCluster = clusters.stream()\n+                    .min(Comparator.comparingDouble(c -> c.getCenter().distanceFrom(point)))\n+                    .orElseThrow(IllegalStateException::new);\n+            closestCluster.addPoint(point);\n         }\n \n-        return resultSet;\n+        converged = clusters.stream().allMatch(Cluster::isStable);\n+    }\n+\n+    LOGGER.info(\"Converged in {} iterations\", it);\n \n+    return clusters;\n+}\n+\n+private static <T extends Clusterable<T>> List<Cluster<T>> chooseInitialCenters(List<T> points, int k) {\n+    Random random = new Random();\n+    List<Cluster<T>> clusters = new ArrayList<>(k);\n+\n+    // Select the first point randomly\n+    T first = points.remove(random.nextInt(points.size()));\n+    clusters.add(new Cluster<>(first));\n+\n+    for (int i = 1; i < k; i++) {\n+        // Compute the sum of squared distances from each point to its nearest cluster\n+        double[] minDistances = points.parallelStream()\n+                .mapToDouble(p -> computeMinDistance(p, clusters))\n+                .toArray();\n+        double minDistSqrSum = Arrays.stream(minDistances).map(x -> x * x).sum();\n+\n+        // Choose a new point randomly considering the weight of each point proportional to its squared distance\n+        double cutoff = random.nextDouble() * minDistSqrSum;\n+        double runningSqrSum = 0;\n+        int nextIdx = -1;\n+        while (runningSqrSum < cutoff) {\n+            nextIdx++;\n+            runningSqrSum += minDistances[nextIdx] * minDistances[nextIdx];\n+        }\n+        T next = points.remove(nextIdx);\n+        clusters.add(new Cluster<>(next));\n     }\n \n+    return clusters;\n+}\n+\n+private static <T extends Clusterable<T>> double computeMinDistance(T point, List<Cluster<T>> clusters) {\n+    return clusters.stream()\n+            .mapToDouble(c -> c.getCenter().distanceFrom(point))\n+            .min()\n+            .orElseThrow(IllegalStateException::new);\n+}\n+\n     /**\n      * Get a random point from the {@link Cluster} with the largest distance variance.\n      *",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}