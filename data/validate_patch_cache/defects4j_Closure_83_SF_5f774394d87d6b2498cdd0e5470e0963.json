{
    "patch": "import org.kohsuke.args4j.CmdLineException;\nimport org.kohsuke.args4j.Localizable;\nimport org.kohsuke.args4j.OptionDef;\nimport org.kohsuke.args4j.Parameters;\nimport org.kohsuke.args4j.spi.Setter;\n\nimport java.util.Arrays;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class MyParser {\n    private static final Set<String> TRUES = new HashSet<>(Arrays.asList(\"true\", \"yes\"));\n    private static final Set<String> FALSES = new HashSet<>(Arrays.asList(\"false\", \"no\"));\n    private Object owner;\n    private Setter<Boolean> setter;\n\n    public MyParser(Object owner, OptionDef option, Setter<Boolean> setter) {\n        this.owner = owner;\n        this.setter = setter;\n    }\n\n    public int parseArguments(Parameters params) throws CmdLineException {\n        String param = params.getParameter(0);\n\n        if (param == null) {\n            setter.addValue(true);\n            return 1;\n        } else {\n            String lowerParam = param.toLowerCase();\n            if (TRUES.contains(lowerParam)) {\n                setter.addValue(true);\n            } else if (FALSES.contains(lowerParam)) {\n                setter.addValue(false);\n            } else {\n                throw new CmdLineException(owner, new Localizable() {\n                    @Override\n                    public String format(Object... args) {\n                        return String.format(\"Illegal boolean value: %s\", args[0]);\n                    }\n                }, param);\n            }\n            return 1;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex f146b0e4..2dc6ee9f 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -330,25 +330,51 @@ public class CommandLineRunner extends\n       }\n \n       @Override\n-      public int parseArguments(Parameters params) throws CmdLineException {\n+import org.kohsuke.args4j.CmdLineException;\n+import org.kohsuke.args4j.Localizable;\n+import org.kohsuke.args4j.OptionDef;\n+import org.kohsuke.args4j.Parameters;\n+import org.kohsuke.args4j.spi.Setter;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class MyParser {\n+    private static final Set<String> TRUES = new HashSet<>(Arrays.asList(\"true\", \"yes\"));\n+    private static final Set<String> FALSES = new HashSet<>(Arrays.asList(\"false\", \"no\"));\n+    private Object owner;\n+    private Setter<Boolean> setter;\n+\n+    public MyParser(Object owner, OptionDef option, Setter<Boolean> setter) {\n+        this.owner = owner;\n+        this.setter = setter;\n+    }\n+\n+    public int parseArguments(Parameters params) throws CmdLineException {\n         String param = params.getParameter(0);\n \n         if (param == null) {\n-          setter.addValue(true);\n-          return 0;\n-        } else {\n-          String lowerParam = param.toLowerCase();\n-          if (TRUES.contains(lowerParam)) {\n             setter.addValue(true);\n-          } else if (FALSES.contains(lowerParam)) {\n-            setter.addValue(false);\n-          } else {\n-            setter.addValue(true);\n-            return 0;\n-          }\n-          return 1;\n+            return 1;\n+        } else {\n+            String lowerParam = param.toLowerCase();\n+            if (TRUES.contains(lowerParam)) {\n+                setter.addValue(true);\n+            } else if (FALSES.contains(lowerParam)) {\n+                setter.addValue(false);\n+            } else {\n+                throw new CmdLineException(owner, new Localizable() {\n+                    @Override\n+                    public String format(Object... args) {\n+                        return String.format(\"Illegal boolean value: %s\", args[0]);\n+                    }\n+                }, param);\n+            }\n+            return 1;\n         }\n-      }\n+    }\n+}\n \n       @Override\n       public String getDefaultMetaVariable() {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}