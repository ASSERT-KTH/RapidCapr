{
    "patch": "    List<Node> allNodes = new ArrayList<Node>();\n    collectNodes(n, allNodes, true /* includeFunctions */);\n    for (Node node : allNodes) {\n        if (!mayBeStringHelper(node)) {\n            return false;\n        }\n    }\n    return true;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..0c04d96e 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,10 +1411,16 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n-\n   static boolean mayBeString(Node n, boolean recurse) {\n     if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+    List<Node> allNodes = new ArrayList<Node>();\n+    collectNodes(n, allNodes, true /* includeFunctions */);\n+    for (Node node : allNodes) {\n+        if (!mayBeStringHelper(node)) {\n+            return false;\n+        }\n+    }\n+    return true;\n     } else {\n       return mayBeStringHelper(n);\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}