{
    "patch": "JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\nif (resolvedTypeOfThis == null) {\n  // if typeOfThis does not resolve to any type, set it to UNKNOWN_TYPE\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n} else if (resolvedTypeOfThis.isNamedType()) {\n  // typeOfThis resolved to a NamedType. Check if the referenced type is an ObjectType.\n  JSType referencedType = ((NamedType) resolvedTypeOfThis).getReferencedType();\n  if (referencedType instanceof ObjectType) {\n    // Set typeOfThis to the referenced ObjectType\n    typeOfThis = (ObjectType) referencedType;\n  } else {\n    // Set typeOfThis to UNKNOWN_TYPE\n    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n  }\n} else if (resolvedTypeOfThis instanceof ObjectType) {\n  // typeOfThis resolved to an ObjectType. Use it as is.\n  typeOfThis = (ObjectType) resolvedTypeOfThis;\n} else {\n  // typeOfThis resolved to some other non-object type. Set it to UNKNOWN_TYPE\n  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..fe65d0c8 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,27 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedTypeOfThis = safeResolve(typeOfThis, t, scope);\n+if (resolvedTypeOfThis == null) {\n+  // if typeOfThis does not resolve to any type, set it to UNKNOWN_TYPE\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+} else if (resolvedTypeOfThis.isNamedType()) {\n+  // typeOfThis resolved to a NamedType. Check if the referenced type is an ObjectType.\n+  JSType referencedType = ((NamedType) resolvedTypeOfThis).getReferencedType();\n+  if (referencedType instanceof ObjectType) {\n+    // Set typeOfThis to the referenced ObjectType\n+    typeOfThis = (ObjectType) referencedType;\n+  } else {\n+    // Set typeOfThis to UNKNOWN_TYPE\n+    typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+  }\n+} else if (resolvedTypeOfThis instanceof ObjectType) {\n+  // typeOfThis resolved to an ObjectType. Use it as is.\n+  typeOfThis = (ObjectType) resolvedTypeOfThis;\n+} else {\n+  // typeOfThis resolved to some other non-object type. Set it to UNKNOWN_TYPE\n+  typeOfThis = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+}\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}