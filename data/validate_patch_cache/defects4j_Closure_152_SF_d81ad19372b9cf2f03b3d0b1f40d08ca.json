{
    "patch": "  JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> scope) {\n    setResolvedTypeInternal(this);\n\n    call = (ArrowType) safeResolve(call, errorReporter, scope);\n    prototype = (FunctionPrototypeType) safeResolve(prototype, errorReporter, scope);\n\n    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n    // is handled further upstream.\n    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n    if (!typeOfThis.isSubtypeOf(JSTypeNative.OBJECT_TYPE)) {\n      errorReporter.error(getPropertyFunction().getSourceFileName(),\n          getPropertyFunction().getLineno(), FUNCTION_TYPE_INVALID_THIS, typeOfThis.toString());\n    }\n\n    boolean changed = false;\n    ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();\n    for (ObjectType iface : implementedInterfaces) {\n      ObjectType resolvedIface = (ObjectType) iface.resolve(errorReporter, scope);\n      resolvedInterfaces.add(resolvedIface);\n      changed |= (resolvedIface != iface);\n    }\n    if (changed) {\n      implementedInterfaces = resolvedInterfaces.build();\n    }\n\n    if (subTypes != null) {\n      for (int i = 0; i < subTypes.size(); i++) {\n        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(errorReporter, scope));\n      }\n    }\n\n    return super.resolveInternal(errorReporter, scope);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..6dd22066 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -859,22 +859,25 @@ public class FunctionType extends PrototypeObjectType {\n   }\n \n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n+  JSType resolveInternal(ErrorReporter errorReporter, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this);\n \n-    call = (ArrowType) safeResolve(call, t, scope);\n-    prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n+    call = (ArrowType) safeResolve(call, errorReporter, scope);\n+    prototype = (FunctionPrototypeType) safeResolve(prototype, errorReporter, scope);\n \n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    if (!typeOfThis.isSubtypeOf(JSTypeNative.OBJECT_TYPE)) {\n+      errorReporter.error(getPropertyFunction().getSourceFileName(),\n+          getPropertyFunction().getLineno(), FUNCTION_TYPE_INVALID_THIS, typeOfThis.toString());\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n         ImmutableList.builder();\n     for (ObjectType iface : implementedInterfaces) {\n-      ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);\n+      ObjectType resolvedIface = (ObjectType) iface.resolve(errorReporter, scope);\n       resolvedInterfaces.add(resolvedIface);\n       changed |= (resolvedIface != iface);\n     }\n@@ -884,11 +887,11 @@ public class FunctionType extends PrototypeObjectType {\n \n     if (subTypes != null) {\n       for (int i = 0; i < subTypes.size(); i++) {\n-        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));\n+        subTypes.set(i, (FunctionType) subTypes.get(i).resolve(errorReporter, scope));\n       }\n     }\n \n-    return super.resolveInternal(t, scope);\n+    return super.resolveInternal(errorReporter, scope);\n   }\n \n   @Override",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}