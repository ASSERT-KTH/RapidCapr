{
    "patch": "  private void traverse(Node node) {\n    // The goal here is to avoid retraversing\n    // the entire AST to catch newly created opportunities.\n    // So we track whether a \"unit of code\" has changed,\n    // and revisit immediately.\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    int visits = 0;\n    do {\n        Node c = node.getFirstChild();\n        boolean retraverse = false;\n        while(c != null) {\n            Node next = c.getNext();\n            traverse(c);\n            if(shouldRetraverse(c)) {\n              retraverse = true;\n              break;\n            }\n            c = next;\n        }\n\n        if(++visits >= 10000) {\n          throw new IllegalStateException(\"too many iterations\");\n        } \n\n        visit(node);\n\n        if (shouldRetraverse(node) || retraverse) {\n            // This node changed or one of its children changed, visit it again\n            continue;\n        }\n        \n        break;\n\n    } while (true);\n\n    exitNode(node);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..a80f1b44 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -116,23 +116,37 @@ class PeepholeOptimizationsPass\n     // So we track whether a \"unit of code\" has changed,\n     // and revisit immediately.\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n     int visits = 0;\n     do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+        Node c = node.getFirstChild();\n+        boolean retraverse = false;\n+        while(c != null) {\n+            Node next = c.getNext();\n+            traverse(c);\n+            if(shouldRetraverse(c)) {\n+              retraverse = true;\n+              break;\n+            }\n+            c = next;\n+        }\n+\n+        if(++visits >= 10000) {\n+          throw new IllegalStateException(\"too many iterations\");\n+        } \n \n-      visit(node);\n-      visits++;\n+        visit(node);\n+\n+        if (shouldRetraverse(node) || retraverse) {\n+            // This node changed or one of its children changed, visit it again\n+            continue;\n+        }\n+        \n+        break;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+    } while (true);\n \n     exitNode(node);\n   }",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}