{
    "patch": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n\n    while (true) {\n\n        incrementIterationsCounter();\n\n        // Make a copy of the original simplex for backup in case of exception\n        final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);\n        final RealPointValuePair best = original[0];\n\n        // perform a reflection step\n        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n        if (comparator.compare(reflected, best) < 0) {\n\n            // compute the expanded simplex\n            final RealPointValuePair[] expandedSimplex = simplex.clone();\n            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n            if (comparator.compare(reflected, expanded) < 0) {\n                simplex = expandedSimplex;\n            } else {\n                simplex = original; // If expansion does not yield better result, revert back to original simplex\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n\n        } else {\n\n            // compute the contracted simplex\n            final RealPointValuePair[] contractedSimplex = simplex.clone();\n            final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n            if (comparator.compare(contracted, best) < 0) {\n                simplex = contractedSimplex;\n            } else {\n                simplex = shrink(original, comparator); // If contraction does not yield better result, perform shrink operation\n            }\n\n            // check convergence\n            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n                    original[0], simplex[0])) {\n                return;\n            }\n\n        }\n\n    }\n\n}\n\nprivate RealPointValuePair[] shrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n\n    RealPointValuePair[] shrunk = new RealPointValuePair[original.length];\n\n    // Compute the centroid of the simplex except for the worst vertex\n    RealPointValuePair centroid = original[0];\n    for (int i = 1; i < original.length; i++) {\n        centroid = centroid.add(original[i]);\n    }\n    centroid = centroid.mapDivide(original.length - 1);\n\n    // Form new simplex by shrinking towards the centroid\n    for (int i = 0; i < original.length; i++) {\n        shrunk[i] = centroid.add(original[i].subtract(centroid).mapMultiply(sigma));\n    }\n\n    Arrays.sort(shrunk, comparator);\n    return shrunk;\n\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\nindex 42a4d9dfd..62b2d1a5c 100644\n--- a/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n+++ b/src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java\n@@ -58,39 +58,50 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     /** {@inheritDoc} */\n     @Override\n-    protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n+protected void iterateSimplex(final Comparator<RealPointValuePair> comparator)\n         throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {\n \n-        while (true) {\n+    while (true) {\n \n-            incrementIterationsCounter();\n+        incrementIterationsCounter();\n \n-            // save the original vertex\n-            final RealPointValuePair[] original = simplex;\n-            final RealPointValuePair best = original[0];\n+        // Make a copy of the original simplex for backup in case of exception\n+        final RealPointValuePair[] original = Arrays.copyOf(simplex, simplex.length);\n+        final RealPointValuePair best = original[0];\n \n-            // perform a reflection step\n-            final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n-            if (comparator.compare(reflected, best) < 0) {\n+        // perform a reflection step\n+        final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);\n+        if (comparator.compare(reflected, best) < 0) {\n \n-                // compute the expanded simplex\n-                final RealPointValuePair[] reflectedSimplex = simplex;\n-                final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n-                if (comparator.compare(reflected, expanded) <= 0) {\n-                    // accept the reflected simplex\n-                    simplex = reflectedSimplex;\n-                }\n+            // compute the expanded simplex\n+            final RealPointValuePair[] expandedSimplex = simplex.clone();\n+            final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);\n+            if (comparator.compare(reflected, expanded) < 0) {\n+                simplex = expandedSimplex;\n+            } else {\n+                simplex = original; // If expansion does not yield better result, revert back to original simplex\n+            }\n \n+            // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n-\n             }\n \n+        } else {\n+\n             // compute the contracted simplex\n+            final RealPointValuePair[] contractedSimplex = simplex.clone();\n             final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);\n             if (comparator.compare(contracted, best) < 0) {\n-                // accept the contracted simplex\n+                simplex = contractedSimplex;\n+            } else {\n+                simplex = shrink(original, comparator); // If contraction does not yield better result, perform shrink operation\n+            }\n \n             // check convergence\n+            if ((getConvergenceChecker() != null) && getConvergenceChecker().converged(getIterations(),\n+                    original[0], simplex[0])) {\n                 return;\n             }\n \n@@ -98,6 +109,29 @@ public class MultiDirectional extends DirectSearchOptimizer {\n \n     }\n \n+}\n+\n+private RealPointValuePair[] shrink(RealPointValuePair[] original, Comparator<RealPointValuePair> comparator) {\n+\n+    RealPointValuePair[] shrunk = new RealPointValuePair[original.length];\n+\n+    // Compute the centroid of the simplex except for the worst vertex\n+    RealPointValuePair centroid = original[0];\n+    for (int i = 1; i < original.length; i++) {\n+        centroid = centroid.add(original[i]);\n+    }\n+    centroid = centroid.mapDivide(original.length - 1);\n+\n+    // Form new simplex by shrinking towards the centroid\n+    for (int i = 0; i < original.length; i++) {\n+        shrunk[i] = centroid.add(original[i].subtract(centroid).mapMultiply(sigma));\n+    }\n+\n+    Arrays.sort(shrunk, comparator);\n+    return shrunk;\n+\n+}\n+\n     /** Compute and evaluate a new simplex.\n      * @param original original simplex (to be preserved)\n      * @param coeff linear coefficient",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}