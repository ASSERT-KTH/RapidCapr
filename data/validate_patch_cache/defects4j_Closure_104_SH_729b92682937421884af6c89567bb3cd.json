{
    "patch": "```\nif (result != null && !result.isNoType() && (!result.isNoObjectType() || (this.isObject() && that.isObject()))) {\n``` \n\nThis hunk considers the case where `result` is not null, is not a `NO_TYPE`, and either is not a `NO_OBJECT_TYPE` or both `this` and `that` are objects.",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..10975c2a 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -288,7 +288,11 @@ public class UnionType extends JSType {\n       builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    if (result != null) {\n+```\n+if (result != null && !result.isNoType() && (!result.isNoObjectType() || (this.isObject() && that.isObject()))) {\n+``` \n+\n+This hunk considers the case where `result` is not null, is not a `NO_TYPE`, and either is not a `NO_OBJECT_TYPE` or both `this` and `that` are objects.\n       return result;\n     } else if (this.isObject() && that.isObject()) {\n       return getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}