{
    "patch": "    @Override\n    Node processFunctionNode(FunctionNode functionNode) {\n      Name name = functionNode.getFunctionName();\n      if (name == null) {\n        // create a new Name node with empty identifier if function name is null\n        name = new Name();\n        name.setIdentifier(\"\");\n      }\n      Boolean isUnnamedFunction = name.getIdentifier().isEmpty();\n      Node node = newNode(Token.FUNCTION);\n      Node newName = transform(name);\n      if (isUnnamedFunction) {\n        // Assume empty name is on same line as \"function\" keyword\n        newName.setLineno(functionNode.getLineno());\n        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n        // Update charno of empty name to match left paren position\n        newName.setCharno(position2charno(lpColumn));\n      }\n      node.addChildToBack(newName);\n      Node lp = newNode(Token.LP);\n      // determine line number of left parenthesis\n      lp.setLineno(functionNode.getBody().getLineno());\n      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n      // determine charno of left parenthesis based on its position\n      lp.setCharno(position2charno(lparenCharno));\n      for (AstNode param : functionNode.getParams()) {\n        lp.addChildToBack(transform(param));\n      }\n      node.addChildToBack(lp);\n\n      Node bodyNode = transform(functionNode.getBody());\n      parseDirectives(bodyNode);\n      node.addChildToBack(bodyNode);\n      return node;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 4a733cda..1261caab 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -514,6 +514,41 @@ public class IRFactory {\n       Name name = functionNode.getFunctionName();\n       Boolean isUnnamedFunction = false;\n       if (name == null) {\n+    @Override\n+    Node processFunctionNode(FunctionNode functionNode) {\n+      Name name = functionNode.getFunctionName();\n+      if (name == null) {\n+        // create a new Name node with empty identifier if function name is null\n+        name = new Name();\n+        name.setIdentifier(\"\");\n+      }\n+      Boolean isUnnamedFunction = name.getIdentifier().isEmpty();\n+      Node node = newNode(Token.FUNCTION);\n+      Node newName = transform(name);\n+      if (isUnnamedFunction) {\n+        // Assume empty name is on same line as \"function\" keyword\n+        newName.setLineno(functionNode.getLineno());\n+        int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();\n+        // Update charno of empty name to match left paren position\n+        newName.setCharno(position2charno(lpColumn));\n+      }\n+      node.addChildToBack(newName);\n+      Node lp = newNode(Token.LP);\n+      // determine line number of left parenthesis\n+      lp.setLineno(functionNode.getBody().getLineno());\n+      int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();\n+      // determine charno of left parenthesis based on its position\n+      lp.setCharno(position2charno(lparenCharno));\n+      for (AstNode param : functionNode.getParams()) {\n+        lp.addChildToBack(transform(param));\n+      }\n+      node.addChildToBack(lp);\n+\n+      Node bodyNode = transform(functionNode.getBody());\n+      parseDirectives(bodyNode);\n+      node.addChildToBack(bodyNode);\n+      return node;\n+    }\n         name = new Name();\n         name.setIdentifier(\"\");\n         isUnnamedFunction = true;",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}