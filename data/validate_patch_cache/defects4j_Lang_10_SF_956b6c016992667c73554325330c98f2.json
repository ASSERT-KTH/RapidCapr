{
    "patch": "    private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n        boolean wasWhite = false;\n        for (int i = 0; i < value.length(); ++i) {\n            char c = value.charAt(i);\n            if (Character.isWhitespace(c)) {\n                if (!wasWhite) {\n                    wasWhite = true;\n                    regex.append(\"\\\\s*+\");\n                }\n                continue;\n            }\n            wasWhite = false;\n            switch (c) {\n                case '\\'':\n                    if (unquote) {\n                        if (++i == value.length()) {\n                            return regex;\n                        }\n                        c = value.charAt(i);\n                    }\n                    break;\n                case '?':\n                case '[':\n                case ']':\n                case '(':\n                case ')':\n                case '{':\n                case '}':\n                case '\\\\':\n                case '|':\n                case '*':\n                case '+':\n                case '^':\n                case '$':\n                case '.':\n                    regex.append('\\\\');\n            }\n            \n            if (c == '\\u001A') {\n                regex.append('$');\n                break;\n            }\n            \n            regex.append(c);\n        }\n        \n        // Add '$' at the end of the regular expression\n        regex.append('$');\n        \n        return regex;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex a01159bd..70d7b949 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -301,44 +301,54 @@ public class FastDateParser implements DateParser, Serializable {\n      * @return The <code>StringBuilder</code>\n      */\n     private static StringBuilder escapeRegex(StringBuilder regex, String value, boolean unquote) {\n-        boolean wasWhite= false;\n-        for(int i= 0; i<value.length(); ++i) {\n-            char c= value.charAt(i);\n-            if(Character.isWhitespace(c)) {\n-                if(!wasWhite) {\n-                    wasWhite= true;\n+        boolean wasWhite = false;\n+        for (int i = 0; i < value.length(); ++i) {\n+            char c = value.charAt(i);\n+            if (Character.isWhitespace(c)) {\n+                if (!wasWhite) {\n+                    wasWhite = true;\n                     regex.append(\"\\\\s*+\");\n                 }\n                 continue;\n             }\n-            wasWhite= false;\n-            switch(c) {\n-            case '\\'':\n-                if(unquote) {\n-                    if(++i==value.length()) {\n-                        return regex;\n+            wasWhite = false;\n+            switch (c) {\n+                case '\\'':\n+                    if (unquote) {\n+                        if (++i == value.length()) {\n+                            return regex;\n+                        }\n+                        c = value.charAt(i);\n                     }\n-                    c= value.charAt(i);\n-                }\n+                    break;\n+                case '?':\n+                case '[':\n+                case ']':\n+                case '(':\n+                case ')':\n+                case '{':\n+                case '}':\n+                case '\\\\':\n+                case '|':\n+                case '*':\n+                case '+':\n+                case '^':\n+                case '$':\n+                case '.':\n+                    regex.append('\\\\');\n+            }\n+            \n+            if (c == '\\u001A') {\n+                regex.append('$');\n                 break;\n-            case '?':\n-            case '[':\n-            case ']':\n-            case '(':\n-            case ')':\n-            case '{':\n-            case '}':\n-            case '\\\\':\n-            case '|':\n-            case '*':\n-            case '+':\n-            case '^':\n-            case '$':\n-            case '.':\n-                regex.append('\\\\');\n             }\n+            \n             regex.append(c);\n         }\n+        \n+        // Add '$' at the end of the regular expression\n+        regex.append('$');\n+        \n         return regex;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0> but was:<100000>",
    "test_result": "FAIL"
}