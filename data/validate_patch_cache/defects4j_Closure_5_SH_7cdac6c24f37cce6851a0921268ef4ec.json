{
    "patch": "    // Deleting a property has different semantics from deleting\n    // a variable, so deleted properties should not be inlined.\n    if (NodeUtil.isDelPropDeclaration(parent) || NodeUtil.isDelPropAssignment(parent)) {\n      return false;\n    }\n\n    // NOTE(nicksantos): This pass's object-splitting algorithm has\n    // a blind spot. It assumes that if a property isn't defined on an\n    // object, then the value is undefined. This is not true, because\n    // Object.prototype can have arbitrary properties on it.\n    //\n    // We short-circuit this problem by bailing out if we see a reference\n    // to a property that isn't defined on the object literal. This\n    // isn't a perfect algorithm, but it should catch most cases.\n    if (parent.isGetProp()) {\n      String propName = parent.getLastChild().getString();\n      if (!validProperties.contains(propName)) {\n        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n          validProperties.add(propName);\n        } else {\n          return false;\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 2b85d84f..d6d3d4d6 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -173,6 +173,30 @@ class InlineObjectLiterals implements CompilerPass {\n \n           // Deleting a property has different semantics from deleting\n           // a variable, so deleted properties should not be inlined.\n+    // Deleting a property has different semantics from deleting\n+    // a variable, so deleted properties should not be inlined.\n+    if (NodeUtil.isDelPropDeclaration(parent) || NodeUtil.isDelPropAssignment(parent)) {\n+      return false;\n+    }\n+\n+    // NOTE(nicksantos): This pass's object-splitting algorithm has\n+    // a blind spot. It assumes that if a property isn't defined on an\n+    // object, then the value is undefined. This is not true, because\n+    // Object.prototype can have arbitrary properties on it.\n+    //\n+    // We short-circuit this problem by bailing out if we see a reference\n+    // to a property that isn't defined on the object literal. This\n+    // isn't a perfect algorithm, but it should catch most cases.\n+    if (parent.isGetProp()) {\n+      String propName = parent.getLastChild().getString();\n+      if (!validProperties.contains(propName)) {\n+        if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) {\n+          validProperties.add(propName);\n+        } else {\n+          return false;\n+        }\n+      }\n+    }\n \n           // NOTE(nicksantos): This pass's object-splitting algorithm has\n           // a blind spot. It assumes that if a property isn't defined on an",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}