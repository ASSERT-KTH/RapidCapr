{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n        \n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n        \n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n            chrono, iLocale, iPivotYear);\n        bucket.saveField(DateTimeFieldType.millisOfSecond(), instant.getMillis() % 1000);\n        bucket.saveField(DateTimeFieldType.secondOfMinute(), instant.getSecondOfMinute());\n        bucket.saveField(DateTimeFieldType.minuteOfHour(), instant.getMinuteOfHour());\n        bucket.saveField(DateTimeFieldType.hourOfDay(), instant.getHourOfDay());\n        bucket.saveField(DateTimeFieldType.dayOfMonth(), instant.getDayOfMonth());\n        bucket.saveField(DateTimeFieldType.monthOfYear(), instant.getMonthOfYear());\n        bucket.saveField(DateTimeFieldType.year(), instant.getYear());\n        bucket.setZone(instant.getZone());\n\n        int newPos = parser.parseInto(bucket, text, position);\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger().intValue();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        \n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..54aac91c 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,43 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+    public int parseInto(ReadWritableInstant instant, String text, int position) {\n+        DateTimeParser parser = requireParser();\n+        if (instant == null) {\n+            throw new IllegalArgumentException(\"Instant must not be null\");\n+        }\n+        \n+        long instantMillis = instant.getMillis();\n+        Chronology chrono = instant.getChronology();\n+        chrono = selectChronology(chrono);\n+        \n+        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+            chrono, iLocale, iPivotYear);\n+        bucket.saveField(DateTimeFieldType.millisOfSecond(), instant.getMillis() % 1000);\n+        bucket.saveField(DateTimeFieldType.secondOfMinute(), instant.getSecondOfMinute());\n+        bucket.saveField(DateTimeFieldType.minuteOfHour(), instant.getMinuteOfHour());\n+        bucket.saveField(DateTimeFieldType.hourOfDay(), instant.getHourOfDay());\n+        bucket.saveField(DateTimeFieldType.dayOfMonth(), instant.getDayOfMonth());\n+        bucket.saveField(DateTimeFieldType.monthOfYear(), instant.getMonthOfYear());\n+        bucket.saveField(DateTimeFieldType.year(), instant.getYear());\n+        bucket.setZone(instant.getZone());\n+\n+        int newPos = parser.parseInto(bucket, text, position);\n+        instant.setMillis(bucket.computeMillis(false, text));\n+        if (bucket.getOffsetInteger() != null) {\n+            int parsedOffset = bucket.getOffsetInteger().intValue();\n+            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n+            chrono = chrono.withZone(parsedZone);\n+        } else if (bucket.getZone() != null) {\n+            chrono = chrono.withZone(bucket.getZone());\n+        }\n+        \n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return newPos;\n+    }\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}