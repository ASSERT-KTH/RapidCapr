{
    "patch": "double absT = Math.abs(t);\ndouble p = 0.0;\nif(Double.isFinite(absT)){\n    double cumulativeProbability = tDistribution.cumulativeProbability(-absT);\n    if(!Double.isNaN(cumulativeProbability)){\n        p = 2 * Math.min(cumulativeProbability, 1 - cumulativeProbability);\n    }\n}\nout[i][j] = p;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\nindex 83b4c4130..704a36f6f 100644\n--- a/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n+++ b/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java\n@@ -168,7 +168,15 @@ public class PearsonsCorrelation {\n                 } else {\n                     double r = correlationMatrix.getEntry(i, j);\n                     double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));\n-                    out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));\n+double absT = Math.abs(t);\n+double p = 0.0;\n+if(Double.isFinite(absT)){\n+    double cumulativeProbability = tDistribution.cumulativeProbability(-absT);\n+    if(!Double.isNaN(cumulativeProbability)){\n+        p = 2 * Math.min(cumulativeProbability, 1 - cumulativeProbability);\n+    }\n+}\n+out[i][j] = p;\n                 }\n             }\n         }",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}