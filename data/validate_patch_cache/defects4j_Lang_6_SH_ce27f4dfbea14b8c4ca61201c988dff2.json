{
    "patch": "private static void belowSurrogates(int cp, Writer out) throws IOException {\n    out.write(\"\\\\u\");\n    out.write(HEX_DIGITS[(cp >> 12) & 15]);\n    out.write(HEX_DIGITS[(cp >> 8) & 15]);\n    out.write(HEX_DIGITS[(cp >> 4) & 15]);\n    out.write(HEX_DIGITS[cp & 15]);\n}\n\npublic final void translate(CharSequence input, Writer out) throws IOException {\n    if (out == null) {\n        throw new IllegalArgumentException(\"The Writer must not be null\");\n    }\n    if (input == null) {\n        return;\n    }\n    int pos = 0;\n    int len = input.length();\n    while (pos < len) {\n        int consumed = translate(input, pos, out);\n        if (consumed == 0) {\n            char c = input.charAt(pos);\n            if(c >= '\\u0080') {\n                belowSurrogates(c, out);\n            } else {\n                out.write(c);\n            }\n            pos++;\n            continue;\n        }\n        for (int pt = 0; pt < consumed; pt++) {\n            out.write(REPLACE_CHAR);\n        }\n        pos += Character.charCount(Character.codePointAt(input, pos));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4d010eaf..ff19de91 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -92,7 +92,41 @@ public abstract class CharSequenceTranslator {\n //          // contract with translators is that they have to understand codepoints \n //          // and they just took care of a surrogate pair\n             for (int pt = 0; pt < consumed; pt++) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n+private static void belowSurrogates(int cp, Writer out) throws IOException {\n+    out.write(\"\\\\u\");\n+    out.write(HEX_DIGITS[(cp >> 12) & 15]);\n+    out.write(HEX_DIGITS[(cp >> 8) & 15]);\n+    out.write(HEX_DIGITS[(cp >> 4) & 15]);\n+    out.write(HEX_DIGITS[cp & 15]);\n+}\n+\n+public final void translate(CharSequence input, Writer out) throws IOException {\n+    if (out == null) {\n+        throw new IllegalArgumentException(\"The Writer must not be null\");\n+    }\n+    if (input == null) {\n+        return;\n+    }\n+    int pos = 0;\n+    int len = input.length();\n+    while (pos < len) {\n+        int consumed = translate(input, pos, out);\n+        if (consumed == 0) {\n+            char c = input.charAt(pos);\n+            if(c >= '\\u0080') {\n+                belowSurrogates(c, out);\n+            } else {\n+                out.write(c);\n+            }\n+            pos++;\n+            continue;\n+        }\n+        for (int pt = 0; pt < consumed; pt++) {\n+            out.write(REPLACE_CHAR);\n+        }\n+        pos += Character.charCount(Character.codePointAt(input, pos));\n+    }\n+}\n             }\n         }\n     }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}