{
    "patch": "// We only want to analyze first-order functions for escaping variables (i.e., functions defined in the immediate global scope or as top-level function expressions).\nif (NodeUtil.isFunctionExpression(n) && (t.inGlobalScope() || (t.getScopeDepth() == 1 && !NodeUtil.isFunctionDeclaration(n)))) {",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex cf87eaaf..2bf08e66 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1993,7 +1993,8 @@ final class TypedScopeCreator implements ScopeCreator {\n         data.get(t.getScopeRoot()).recordNonEmptyReturn();\n       }\n \n-      if (t.getScopeDepth() <= 2) {\n+// We only want to analyze first-order functions for escaping variables (i.e., functions defined in the immediate global scope or as top-level function expressions).\n+if (NodeUtil.isFunctionExpression(n) && (t.inGlobalScope() || (t.getScopeDepth() == 1 && !NodeUtil.isFunctionDeclaration(n)))) {\n         // The first-order function analyzer looks at two types of variables:\n         //\n         // 1) Local variables that are assigned in inner scopes (\"escaped vars\")",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}