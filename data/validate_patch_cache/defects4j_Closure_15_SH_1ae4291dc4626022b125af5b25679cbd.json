{
    "patch": "        if (NodeUtil.isControlStructure(n)) {\n          ControlFlowGraph<Node> cfg = getCfg();\n          for (DiGraphEdge<Node, Branch> edge : cfg.getOutEdges(n)) {\n            // Only traverse the edges that would be caught by a `break`.\n            if (edge.getValue() == Branch.BREAK) {\n              if (apply(edge.getDestination())) {\n                return true;\n              }\n            }\n          }\n        }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..3a5e344f 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+        if (NodeUtil.isControlStructure(n)) {\n+          ControlFlowGraph<Node> cfg = getCfg();\n+          for (DiGraphEdge<Node, Branch> edge : cfg.getOutEdges(n)) {\n+            // Only traverse the edges that would be caught by a `break`.\n+            if (edge.getValue() == Branch.BREAK) {\n+              if (apply(edge.getDestination())) {\n+                return true;\n+              }\n+            }\n+          }\n+        }\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}