{
    "patch": "      boolean isOverride = false;\n      Scope.Var var = t.getScope().getVar(getprop.getFirstChild().getQualifiedName());\n      if (var == null || var.getNameNode() == null || !var.isGlobal()) {\n          // This is not an assignment to a global.\n          return;\n      }\n      isOverride = t.getInput().getName().equals(\n                    var.getSourceFile().getName())\n              && parent.getType() == Token.ASSIGN &&\n              parent.getFirstChild() == getprop;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..57d726df 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -413,7 +413,16 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n+      boolean isOverride = false;\n+      Scope.Var var = t.getScope().getVar(getprop.getFirstChild().getQualifiedName());\n+      if (var == null || var.getNameNode() == null || !var.isGlobal()) {\n+          // This is not an assignment to a global.\n+          return;\n+      }\n+      isOverride = t.getInput().getName().equals(\n+                    var.getSourceFile().getName())\n+              && parent.getType() == Token.ASSIGN &&\n+              parent.getFirstChild() == getprop;\n           parent.getType() == Token.ASSIGN &&\n           parent.getFirstChild() == getprop;\n ",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}