{
    "patch": "public StringBuffer format(Calendar calendar, StringBuffer buf) {\n    if (mTimeZoneForced) {\n        calendar = (Calendar) calendar.clone();\n        calendar.setTimeZone(mTimeZone);\n    }\n    applyRules(calendar, buf);\n    if (mTimeZoneForced) {\n        // Add timezone offset to the formatted date string\n        TimeZone tz = calendar.getTimeZone();\n        int offsetInMillis = tz.getRawOffset() + (tz.inDaylightTime(calendar.getTime()) ? tz.getDSTSavings() : 0);\n        int offsetHour = offsetInMillis / (60 * 60 * 1000);\n        int offsetMin = Math.abs(offsetInMillis / (60 * 1000) % 60);\n\n        buf.append(String.format(\"%c%02d:%02d\", (offsetHour >= 0 ? '+' : '-'), Math.abs(offsetHour), offsetMin));\n    }\n    return buf;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..3af9d26b 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -867,13 +867,23 @@ public class FastDateFormat extends Format {\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n      */\n-    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n-        if (mTimeZoneForced) {\n-            calendar = (Calendar) calendar.clone();\n-            calendar.setTimeZone(mTimeZone);\n-        }\n-        return applyRules(calendar, buf);\n+public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+    if (mTimeZoneForced) {\n+        calendar = (Calendar) calendar.clone();\n+        calendar.setTimeZone(mTimeZone);\n+    }\n+    applyRules(calendar, buf);\n+    if (mTimeZoneForced) {\n+        // Add timezone offset to the formatted date string\n+        TimeZone tz = calendar.getTimeZone();\n+        int offsetInMillis = tz.getRawOffset() + (tz.inDaylightTime(calendar.getTime()) ? tz.getDSTSavings() : 0);\n+        int offsetHour = offsetInMillis / (60 * 60 * 1000);\n+        int offsetMin = Math.abs(offsetInMillis / (60 * 1000) % 60);\n+\n+        buf.append(String.format(\"%c%02d:%02d\", (offsetHour >= 0 ? '+' : '-'), Math.abs(offsetHour), offsetMin));\n     }\n+    return buf;\n+}\n \n     /**\n      * <p>Performs the formatting by applying the rules to the",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16:42:16.000Z]> but was:<2009-10-16T[08:42:16.000Z+00:00]>",
    "test_result": "FAIL"
}