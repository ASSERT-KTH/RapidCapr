{
    "patch": "public void getTypesUnderInequality(JSType that, JSType informedFalse, String varName) {\n    // unions types\n    if (that instanceof UnionType) {\n        ((UnionType) that).getAlternates().forEach(t -> {\n            getTypesUnderInequality(t, informedFalse, varName);\n        });\n    }\n\n    // other types\n    switch (this.testForEquality(that)) {\n        case TRUE:\n            break;\n\n        case FALSE:\n            assertEquals(JSType.UNKNOWN, informedFalse);\n            informedFalse = this;\n            break;\n\n        case UNKNOWN:\n            if (!informedFalse.isSubtype(this)) {\n                assertEquals(null, informedFalse.getGreatestSubtype(that));\n                informedFalse = this.getGreatestSubtype(that);\n                assertEquals(null, informedFalse.getGreatestSubtype(that));\n            }\n            break;\n\n        default:\n            throw new IllegalStateException();\n    }\n\n    assertEquals(informedFalse, getVarType(informedFalse, varName));\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..26eac63b 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -693,26 +693,38 @@ public abstract class JSType implements Serializable {\n    *         element. The returned pair is never {@code null} even though its\n    *         components may be {@code null}\n    */\n-  public TypePair getTypesUnderInequality(JSType that) {\n+public void getTypesUnderInequality(JSType that, JSType informedFalse, String varName) {\n     // unions types\n     if (that instanceof UnionType) {\n-      TypePair p = that.getTypesUnderInequality(this);\n-      return new TypePair(p.typeB, p.typeA);\n+        ((UnionType) that).getAlternates().forEach(t -> {\n+            getTypesUnderInequality(t, informedFalse, varName);\n+        });\n     }\n \n     // other types\n     switch (this.testForEquality(that)) {\n-      case TRUE:\n-        return new TypePair(null, null);\n-\n-      case FALSE:\n-      case UNKNOWN:\n-        return new TypePair(this, that);\n+        case TRUE:\n+            break;\n+\n+        case FALSE:\n+            assertEquals(JSType.UNKNOWN, informedFalse);\n+            informedFalse = this;\n+            break;\n+\n+        case UNKNOWN:\n+            if (!informedFalse.isSubtype(this)) {\n+                assertEquals(null, informedFalse.getGreatestSubtype(that));\n+                informedFalse = this.getGreatestSubtype(that);\n+                assertEquals(null, informedFalse.getGreatestSubtype(that));\n+            }\n+            break;\n+\n+        default:\n+            throw new IllegalStateException();\n     }\n \n-    // switch case is exhaustive\n-    throw new IllegalStateException();\n-  }\n+    assertEquals(informedFalse, getVarType(informedFalse, varName));\n+}\n \n   /**\n    * Computes the subset of {@code this} and {@code that} types under shallow",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}