{
    "patch": "public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n    // overridden as superclass algorithm can't handle\n    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n    if (valueToAdd == 0) {\n        return values;\n    }\n    int[] newValues = values.clone();\n    int maxRangeValue = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue();\n    int minRangeValue = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue();\n    newValues[fieldIndex] = FieldUtils.getWrappedValue(values[fieldIndex], valueToAdd, minRangeValue, maxRangeValue);\n    partial = partial.with(fieldIndex, newValues[fieldIndex]);\n    if (DateTimeUtils.isContiguous(partial)) {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n        }\n        instant = add(instant, valueToAdd);\n        return iChronology.get(partial, instant);\n    } else {\n        long instant = 0L;\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n        }\n        instant = add(instant, valueToAdd);\n\n        // ensure result is compatible with input\n        for (int i = 0, isize = partial.size(); i < isize; i++) {\n            if (partial.getFieldType(i).getField(iChronology).get(newValues[i]) != newValues[i]) {\n                throw new IllegalArgumentException(\"Input values don't match internal values\");\n            }\n        }\n        return iChronology.get(partial, instant);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\nindex afca44e6..941989df 100644\n--- a/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n@@ -200,24 +200,40 @@ class BasicMonthOfYearDateTimeField extends ImpreciseDateTimeField {\n     }\n \n     //-----------------------------------------------------------------------\n-    public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n-        // overridden as superclass algorithm can't handle\n-        // 2004-02-29 + 48 months -> 2008-02-29 type dates\n-        if (valueToAdd == 0) {\n-            return values;\n+public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) {\n+    // overridden as superclass algorithm can't handle\n+    // 2004-02-29 + 48 months -> 2008-02-29 type dates\n+    if (valueToAdd == 0) {\n+        return values;\n+    }\n+    int[] newValues = values.clone();\n+    int maxRangeValue = partial.getFieldType(fieldIndex).getField(iChronology).getMaximumValue();\n+    int minRangeValue = partial.getFieldType(fieldIndex).getField(iChronology).getMinimumValue();\n+    newValues[fieldIndex] = FieldUtils.getWrappedValue(values[fieldIndex], valueToAdd, minRangeValue, maxRangeValue);\n+    partial = partial.with(fieldIndex, newValues[fieldIndex]);\n+    if (DateTimeUtils.isContiguous(partial)) {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n+        }\n+        instant = add(instant, valueToAdd);\n+        return iChronology.get(partial, instant);\n+    } else {\n+        long instant = 0L;\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            instant = partial.getFieldType(i).getField(iChronology).set(instant, newValues[i]);\n         }\n-            // month is largest field and being added to, such as month-day\n-        if (DateTimeUtils.isContiguous(partial)) {\n-            long instant = 0L;\n-            for (int i = 0, isize = partial.size(); i < isize; i++) {\n-                instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);\n+        instant = add(instant, valueToAdd);\n+\n+        // ensure result is compatible with input\n+        for (int i = 0, isize = partial.size(); i < isize; i++) {\n+            if (partial.getFieldType(i).getField(iChronology).get(newValues[i]) != newValues[i]) {\n+                throw new IllegalArgumentException(\"Input values don't match internal values\");\n             }\n-            instant = add(instant, valueToAdd);\n-            return iChronology.get(partial, instant);\n-        } else {\n-            return super.add(partial, fieldIndex, values, valueToAdd);\n         }\n+        return iChronology.get(partial, instant);\n     }\n+}\n \n     //-----------------------------------------------------------------------\n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}