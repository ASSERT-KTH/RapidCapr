{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long totalMillis = getMillis() +\n            getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n    \n    int normalisedWeeks = 0;\n    while (totalMillis >= DateTimeConstants.MILLIS_PER_WEEK) {\n        totalMillis -= DateTimeConstants.MILLIS_PER_WEEK;\n        normalisedWeeks++;\n    }\n    int normalisedDays = 0;\n    while (totalMillis >= DateTimeConstants.MILLIS_PER_DAY) {\n        totalMillis -= DateTimeConstants.MILLIS_PER_DAY;\n        normalisedDays++;\n    }\n    int normalisedHours = 0;\n    while (totalMillis >= DateTimeConstants.MILLIS_PER_HOUR) {\n        totalMillis -= DateTimeConstants.MILLIS_PER_HOUR;\n        normalisedHours++;\n    }\n    int normalisedMinutes = 0;\n    while (totalMillis >= DateTimeConstants.MILLIS_PER_MINUTE) {\n        totalMillis -= DateTimeConstants.MILLIS_PER_MINUTE;\n        normalisedMinutes++;\n    }\n    int normalisedSeconds = 0;\n    while (totalMillis >= DateTimeConstants.MILLIS_PER_SECOND) {\n        totalMillis -= DateTimeConstants.MILLIS_PER_SECOND;\n        normalisedSeconds++;\n    }\n\n    Period result = new Period(\n            getYears(), getMonths(), normalisedWeeks, normalisedDays, normalisedHours, normalisedMinutes, \n            normalisedSeconds, (int) totalMillis, type);\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..6c4cfb28 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,45 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long totalMillis = getMillis() +\n+            getSeconds() * DateTimeConstants.MILLIS_PER_SECOND +\n+            getMinutes() * DateTimeConstants.MILLIS_PER_MINUTE +\n+            getHours() * DateTimeConstants.MILLIS_PER_HOUR +\n+            getDays() * DateTimeConstants.MILLIS_PER_DAY +\n+            getWeeks() * DateTimeConstants.MILLIS_PER_WEEK;\n+    \n+    int normalisedWeeks = 0;\n+    while (totalMillis >= DateTimeConstants.MILLIS_PER_WEEK) {\n+        totalMillis -= DateTimeConstants.MILLIS_PER_WEEK;\n+        normalisedWeeks++;\n+    }\n+    int normalisedDays = 0;\n+    while (totalMillis >= DateTimeConstants.MILLIS_PER_DAY) {\n+        totalMillis -= DateTimeConstants.MILLIS_PER_DAY;\n+        normalisedDays++;\n+    }\n+    int normalisedHours = 0;\n+    while (totalMillis >= DateTimeConstants.MILLIS_PER_HOUR) {\n+        totalMillis -= DateTimeConstants.MILLIS_PER_HOUR;\n+        normalisedHours++;\n+    }\n+    int normalisedMinutes = 0;\n+    while (totalMillis >= DateTimeConstants.MILLIS_PER_MINUTE) {\n+        totalMillis -= DateTimeConstants.MILLIS_PER_MINUTE;\n+        normalisedMinutes++;\n+    }\n+    int normalisedSeconds = 0;\n+    while (totalMillis >= DateTimeConstants.MILLIS_PER_SECOND) {\n+        totalMillis -= DateTimeConstants.MILLIS_PER_SECOND;\n+        normalisedSeconds++;\n+    }\n+\n+    Period result = new Period(\n+            getYears(), getMonths(), normalisedWeeks, normalisedDays, normalisedHours, normalisedMinutes, \n+            normalisedSeconds, (int) totalMillis, type);\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}