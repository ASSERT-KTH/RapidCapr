{
    "patch": "    // define constants for special cases\n    private static final double PI_OVER_2 = FastMath.PI / 2.0;\n    private static final double NEGATIVE_PI_OVER_2 = -FastMath.PI / 2.0;\n    private static final double PI = FastMath.PI;\n    private static final double NEGATIVE_PI = -FastMath.PI;\n    private static final double ZERO = 0.0; // required for positive and negative zero\n\n    // define a function to check for zero values in an array\n    private boolean containsZeros(final double[] arr, final int offset, final int length) {\n        for (int i = offset; i < offset + length; i++) {\n            if (arr[i] == 0.0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public void atan2(final double[] y, final int yOffset,\n                      final double[] x, final int xOffset,\n                      final double[] result, final int resultOffset) {\n\n        // check for special cases\n        if (containsZeros(x, xOffset, x.length) && containsZeros(y, yOffset, y.length)) {\n            // both x and y are zero\n            result[resultOffset] = Double.NaN;\n            return;\n        }\n        if (containsZeros(x, xOffset, x.length)) {\n            // x is zero, y non-zero\n            if (y[yOffset] > 0) {\n                result[resultOffset] = PI_OVER_2;\n            } else if (y[yOffset] < 0) {\n                result[resultOffset] = NEGATIVE_PI_OVER_2;\n            } else {\n                long bits = Double.doubleToRawLongBits(x[xOffset]);\n                if (bits == Double.doubleToRawLongBits(0.0) || bits == Double.doubleToRawLongBits(-0.0)) {\n                    result[resultOffset] = Double.NaN;\n                    return;\n                }\n            }\n            return;\n        }\n        if (containsZeros(y, yOffset, y.length)) {\n            // y is zero, x non-zero\n            if (x[xOffset] > 0) {\n                result[resultOffset] = ZERO;\n            } else if (x[xOffset] < 0) {\n                result[resultOffset] = PI;\n            } else {\n                result[resultOffset] = (Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(-0.0)) ? NEGATIVE_PI : PI;\n            }\n            return;\n        }\n\n        // compute r = sqrt(x^2+y^2)\n        double[] tmp1 = new double[getSize()];\n        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n        double[] tmp2 = new double[getSize()];\n        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n        if (x[xOffset] >= 0) {\n\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n\n        } else {\n\n            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            double atanRes = 2 * tmp2[0];\n            result[resultOffset] = ((tmp2[0] <= 0) ? NEGATIVE_PI : PI) - atanRes; // +/-pi - 2 * atan(y / (r - x))\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n            }\n\n        }\n\n        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..9b306cc5c 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,10 +1379,60 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n+    // define constants for special cases\n+    private static final double PI_OVER_2 = FastMath.PI / 2.0;\n+    private static final double NEGATIVE_PI_OVER_2 = -FastMath.PI / 2.0;\n+    private static final double PI = FastMath.PI;\n+    private static final double NEGATIVE_PI = -FastMath.PI;\n+    private static final double ZERO = 0.0; // required for positive and negative zero\n+\n+    // define a function to check for zero values in an array\n+    private boolean containsZeros(final double[] arr, final int offset, final int length) {\n+        for (int i = offset; i < offset + length; i++) {\n+            if (arr[i] == 0.0) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     public void atan2(final double[] y, final int yOffset,\n                       final double[] x, final int xOffset,\n                       final double[] result, final int resultOffset) {\n \n+        // check for special cases\n+        if (containsZeros(x, xOffset, x.length) && containsZeros(y, yOffset, y.length)) {\n+            // both x and y are zero\n+            result[resultOffset] = Double.NaN;\n+            return;\n+        }\n+        if (containsZeros(x, xOffset, x.length)) {\n+            // x is zero, y non-zero\n+            if (y[yOffset] > 0) {\n+                result[resultOffset] = PI_OVER_2;\n+            } else if (y[yOffset] < 0) {\n+                result[resultOffset] = NEGATIVE_PI_OVER_2;\n+            } else {\n+                long bits = Double.doubleToRawLongBits(x[xOffset]);\n+                if (bits == Double.doubleToRawLongBits(0.0) || bits == Double.doubleToRawLongBits(-0.0)) {\n+                    result[resultOffset] = Double.NaN;\n+                    return;\n+                }\n+            }\n+            return;\n+        }\n+        if (containsZeros(y, yOffset, y.length)) {\n+            // y is zero, x non-zero\n+            if (x[xOffset] > 0) {\n+                result[resultOffset] = ZERO;\n+            } else if (x[xOffset] < 0) {\n+                result[resultOffset] = PI;\n+            } else {\n+                result[resultOffset] = (Double.doubleToRawLongBits(x[xOffset]) == Double.doubleToRawLongBits(-0.0)) ? NEGATIVE_PI : PI;\n+            }\n+            return;\n+        }\n+\n         // compute r = sqrt(x^2+y^2)\n         double[] tmp1 = new double[getSize()];\n         multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n@@ -1407,8 +1457,8 @@ public class DSCompiler {\n             subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n             divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n             atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n+            double atanRes = 2 * tmp2[0];\n+            result[resultOffset] = ((tmp2[0] <= 0) ? NEGATIVE_PI : PI) - atanRes; // +/-pi - 2 * atan(y / (r - x))\n             for (int i = 1; i < tmp2.length; ++i) {\n                 result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n             }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}