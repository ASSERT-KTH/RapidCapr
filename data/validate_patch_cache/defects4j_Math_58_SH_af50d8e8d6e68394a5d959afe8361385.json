{
    "patch": "        final double[] params;\n        try {\n            final AbstractCurveFitter fitter = new GaussianFitter(new LeastSquaresOptimizer.LeastSquaresProblem(\n                    new Gaussian.Parametric(),\n                    new WeightedObservedPoints().addAll(getObservations()),\n                    guess\n            ));\n            params = fitter.fit();\n        } catch (NotStrictlyPositiveException e) {\n            params = guess;\n        }\n        return params;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\nindex ae7ac3994..202b81ef5 100644\n--- a/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n+++ b/src/main/java/org/apache/commons/math/optimization/fitting/GaussianFitter.java\n@@ -118,7 +118,18 @@ public class GaussianFitter extends CurveFitter {\n      */\n     public double[] fit() {\n         final double[] guess = (new ParameterGuesser(getObservations())).guess();\n-        return fit(new Gaussian.Parametric(), guess);\n+        final double[] params;\n+        try {\n+            final AbstractCurveFitter fitter = new GaussianFitter(new LeastSquaresOptimizer.LeastSquaresProblem(\n+                    new Gaussian.Parametric(),\n+                    new WeightedObservedPoints().addAll(getObservations()),\n+                    guess\n+            ));\n+            params = fitter.fit();\n+        } catch (NotStrictlyPositiveException e) {\n+            params = guess;\n+        }\n+        return params;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}