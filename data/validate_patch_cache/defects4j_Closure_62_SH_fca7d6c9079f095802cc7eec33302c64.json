{
    "patch": "b.append(error.description);\nb.append(\"\\n\"); // <- add a newline character here\nif (sourceExcerpt != null) {\n    b.append(sourceExcerpt);\n    b.append('\\n');\n    int charno = error.getCharno();\n\n    // padding equal to the excerpt and arrow at the end\n    // charno == sourceExpert.length() means something is missing\n    // at the end of the line\n    if (excerpt.equals(LINE)\n        && 0 <= charno && charno < sourceExcerpt.length()) { // <- keep the original condition here\n        for (int i = 0; i < charno; i++) {\n            char c = sourceExcerpt.charAt(i);\n            if (Character.isWhitespace(c)) {\n                b.append(c);\n            } else {\n                b.append(' ');\n            }\n        }\n        b.append(\"^\\n\");\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\nindex 5a4f884c..be271424 100644\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n@@ -95,7 +95,29 @@ public class LightweightMessageFormatter extends AbstractMessageFormatter {\n       // charno == sourceExpert.length() means something is missing\n       // at the end of the line\n       if (excerpt.equals(LINE)\n-          && 0 <= charno && charno < sourceExcerpt.length()) {\n+b.append(error.description);\n+b.append(\"\\n\"); // <- add a newline character here\n+if (sourceExcerpt != null) {\n+    b.append(sourceExcerpt);\n+    b.append('\\n');\n+    int charno = error.getCharno();\n+\n+    // padding equal to the excerpt and arrow at the end\n+    // charno == sourceExpert.length() means something is missing\n+    // at the end of the line\n+    if (excerpt.equals(LINE)\n+        && 0 <= charno && charno < sourceExcerpt.length()) { // <- keep the original condition here\n+        for (int i = 0; i < charno; i++) {\n+            char c = sourceExcerpt.charAt(i);\n+            if (Character.isWhitespace(c)) {\n+                b.append(c);\n+            } else {\n+                b.append(' ');\n+            }\n+        }\n+        b.append(\"^\\n\");\n+    }\n+}\n         for (int i = 0; i < charno; i++) {\n           char c = sourceExcerpt.charAt(i);\n           if (Character.isWhitespace(c)) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}