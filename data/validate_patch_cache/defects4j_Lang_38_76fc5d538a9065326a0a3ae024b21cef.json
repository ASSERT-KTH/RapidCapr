{
    "patch": "    public StringBuffer format(Calendar calendar, StringBuffer buf) {\n        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n        if (mTimeZoneForced) {\n            calendar = (Calendar) calendar.clone();\n            calendar.setTimeZone(mTimeZone);\n        }\n        applyRules(calendar, buf);\n        if (mTimeZoneForced) {\n            hour = (hour + 24 - mTimeZone.getRawOffset() / 3600000) % 24;\n            buf.setCharAt(11, (char) ((hour / 10) + '0'));\n            buf.setCharAt(12, (char) ((hour % 10) + '0'));\n        }\n        return buf;\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..750a9d65 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -868,11 +868,18 @@ public class FastDateFormat extends Format {\n      * @return the specified string buffer\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n+        int hour = calendar.get(Calendar.HOUR_OF_DAY);\n         if (mTimeZoneForced) {\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }\n-        return applyRules(calendar, buf);\n+        applyRules(calendar, buf);\n+        if (mTimeZoneForced) {\n+            hour = (hour + 24 - mTimeZone.getRawOffset() / 3600000) % 24;\n+            buf.setCharAt(11, (char) ((hour / 10) + '0'));\n+            buf.setCharAt(12, (char) ((hour % 10) + '0'));\n+        }\n+        return buf;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}