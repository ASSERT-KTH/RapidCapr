{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null) {\n        return null;\n    }\n    final int len = str.length();\n    if (len < 2) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n    final char ch0 = str.charAt(0);\n    final char ch1 = str.charAt(1);\n    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    int idx1 = -1;\n    int idx2 = -1;\n    int idx3 = -1;\n    boolean foundSeparator = false;\n    for (int i = 2; i < len && !foundSeparator; i++) {\n        switch (str.charAt(i)) {\n            case '_':\n                if (idx1 < 0) {\n                    idx1 = i;\n                } else if (idx2 < 0) {\n                    idx2 = i;\n                } else if (idx3 < 0) {\n                    idx3 = i;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                break;\n            case '-':\n                if (idx1 < 0) {\n                    idx1 = i;\n                } else {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n                break;\n            default:\n                if (!Character.isLowerCase(str.charAt(i))) {\n                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n                }\n        }\n        foundSeparator = (idx1 > 0 && idx2 > 0 && idx3 > 0)\n                || (idx1 > 0 && idx2 > 0 && idx3 < 0 && i == len - 1)\n                || (idx1 > 0 && idx2 < 0 && idx3 < 0 && i == len - 1);\n    }\n\n    if (idx1 < 0) {\n        return new Locale(str);\n    }\n\n    if (idx2 < 0 && idx3 < 0) {\n        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1));\n    }\n\n    if (idx2 > 0 && idx3 < 0) {\n        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1, idx2), str.substring(idx2 + 1));\n    }\n\n    if (idx3 > 0) {\n        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1, idx2), str.substring(idx2 + 1, idx3),\n                str.substring(idx3 + 1));\n    }\n\n    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..3205fd5f 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,74 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+public static Locale toLocale(final String str) {\n+    if (str == null) {\n+        return null;\n+    }\n+    final int len = str.length();\n+    if (len < 2) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+    final char ch0 = str.charAt(0);\n+    final char ch1 = str.charAt(1);\n+    if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    int idx1 = -1;\n+    int idx2 = -1;\n+    int idx3 = -1;\n+    boolean foundSeparator = false;\n+    for (int i = 2; i < len && !foundSeparator; i++) {\n+        switch (str.charAt(i)) {\n+            case '_':\n+                if (idx1 < 0) {\n+                    idx1 = i;\n+                } else if (idx2 < 0) {\n+                    idx2 = i;\n+                } else if (idx3 < 0) {\n+                    idx3 = i;\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n+                break;\n+            case '-':\n+                if (idx1 < 0) {\n+                    idx1 = i;\n+                } else {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n+                break;\n+            default:\n+                if (!Character.isLowerCase(str.charAt(i))) {\n+                    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+                }\n         }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+        foundSeparator = (idx1 > 0 && idx2 > 0 && idx3 > 0)\n+                || (idx1 > 0 && idx2 > 0 && idx3 < 0 && i == len - 1)\n+                || (idx1 > 0 && idx2 < 0 && idx3 < 0 && i == len - 1);\n+    }\n+\n+    if (idx1 < 0) {\n+        return new Locale(str);\n+    }\n+\n+    if (idx2 < 0 && idx3 < 0) {\n+        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1));\n     }\n \n+    if (idx2 > 0 && idx3 < 0) {\n+        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1, idx2), str.substring(idx2 + 1));\n+    }\n+\n+    if (idx3 > 0) {\n+        return new Locale(str.substring(0, idx1), str.substring(idx1 + 1, idx2), str.substring(idx2 + 1, idx3),\n+                str.substring(idx3 + 1));\n+    }\n+\n+    throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "error: no suitable constructor found for Locale(String,String,String,String)",
    "test_result": "ERROR"
}