{
    "patch": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n  if (n == scope.getRootNode()) return;\n\n  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n    handleFunctionInputs(parent);\n    return;\n  }\n\n  attachLiteralTypes(n);\n  switch (n.getType()) {\n    case Token.FUNCTION:\n      if (parent.getType() == Token.NAME) {\n        return;\n      }\n      defineDeclaredFunction(n, parent);\n      break;\n    case Token.CATCH:\n      defineCatch(n, parent);\n      break;\n    case Token.VAR:\n      defineVar(n, parent);\n      break;\n  }\n}\n\nprivate void defineDeclaredFunction(Node n, Node parent) {\n  String name = getFunctionName(n, parent);\n  if (name != null) {\n    FunctionTypeBuilder builder = new FunctionTypeBuilder();\n    JSType functionType = builder.buildFunctionWithReturnType(\n        getType(n),\n        getAndResetNodeBounds(),\n        scope.getParentScope().getDeclaredTypeOf(name));\n    functionType = tightenFunctionTypes(n, functionType);\n    scope.addDeclaredName(name, functionType, n);\n    if (isEs6ClassMemberFunction(n, parent)) {\n      Node grandparent = parent.getParent();\n      ObjectType ownerType =\n          ObjectType.cast(scope.getDeclaredTypeOf(grandparent.getFirstChild().getQualifiedName()));\n      if (ownerType != null) {\n        n.setJSType(ownerType.getPrototypeBasedFunctionType());\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypedScopeCreator.java b/src/com/google/javascript/jscomp/TypedScopeCreator.java\nindex 4b841ae8..cd4539de 100644\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n@@ -1440,30 +1440,52 @@ final class TypedScopeCreator implements ScopeCreator {\n      * @param n The node being visited.\n      * @param parent The parent of n\n      */\n-    @Override public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (n == scope.getRootNode()) return;\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+  if (n == scope.getRootNode()) return;\n+\n+  if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n+    handleFunctionInputs(parent);\n+    return;\n+  }\n \n-      if (n.getType() == Token.LP && parent == scope.getRootNode()) {\n-        handleFunctionInputs(parent);\n+  attachLiteralTypes(n);\n+  switch (n.getType()) {\n+    case Token.FUNCTION:\n+      if (parent.getType() == Token.NAME) {\n         return;\n       }\n+      defineDeclaredFunction(n, parent);\n+      break;\n+    case Token.CATCH:\n+      defineCatch(n, parent);\n+      break;\n+    case Token.VAR:\n+      defineVar(n, parent);\n+      break;\n+  }\n+}\n \n-      attachLiteralTypes(n);\n-      switch (n.getType()) {\n-        case Token.FUNCTION:\n-          if (parent.getType() == Token.NAME) {\n-            return;\n-          }\n-          defineDeclaredFunction(n, parent);\n-          break;\n-        case Token.CATCH:\n-          defineCatch(n, parent);\n-          break;\n-        case Token.VAR:\n-          defineVar(n, parent);\n-          break;\n+private void defineDeclaredFunction(Node n, Node parent) {\n+  String name = getFunctionName(n, parent);\n+  if (name != null) {\n+    FunctionTypeBuilder builder = new FunctionTypeBuilder();\n+    JSType functionType = builder.buildFunctionWithReturnType(\n+        getType(n),\n+        getAndResetNodeBounds(),\n+        scope.getParentScope().getDeclaredTypeOf(name));\n+    functionType = tightenFunctionTypes(n, functionType);\n+    scope.addDeclaredName(name, functionType, n);\n+    if (isEs6ClassMemberFunction(n, parent)) {\n+      Node grandparent = parent.getParent();\n+      ObjectType ownerType =\n+          ObjectType.cast(scope.getDeclaredTypeOf(grandparent.getFirstChild().getQualifiedName()));\n+      if (ownerType != null) {\n+        n.setJSType(ownerType.getPrototypeBasedFunctionType());\n       }\n     }\n+  }\n+}\n \n     /** Handle bleeding functions and function parameters. */\n     private void handleFunctionInputs(Node fnNode) {",
    "result_reason": "error: defineDeclaredFunction(Node,Node) in TypedScopeCreator.LocalScopeBuilder cannot override defineDeclaredFunction(Node,Node) in TypedScopeCreator.AbstractScopeBuilder",
    "test_result": "ERROR"
}