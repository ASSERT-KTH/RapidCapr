{
    "patch": "case REGULA_FALSI:\n    if (--maximalEvaluations <= 0) {\n        throw new ConvergenceException(\n                LocalizedFormats.CONVERGENCE_FAILED,\n                getMaximalEvaluations());\n    }\n    // Detect early that algorithm is stuck, instead of waiting\n    // for the maximum number of iterations to be exceeded.\n    f0 = computeObjectiveValue(x0);\n    f1 = computeObjectiveValue(x1);\n    if (f1 * f0 > 0.0) {\n        throw new MathIllegalStateException(LocalizedFormats.REGULA_FALSI_BRACKETING,\n                                             x0, x1, f0, f1, getMaximalIterations(),\n                                             fcn.getClass().getName());\n    }\n    final double delta = 0.5 * (f0 - f1);\n    final double r = (delta > 0) ? 1.0 : -1.0;\n    double x = delta == 0 ? x1 : (x1 + r * FastMath.sqrt(r * r * f1 * f1 - 4.0 * f0 * f1)) / (2.0 * delta);\n    if (Double.isNaN(x)) {\n        x = x1;\n        // if we had NaN, we consider that regression failed silently\n        // restore function values to allow the algorithm to keep trying\n        f1 = computeObjectiveValue(x);\n        f0 = f1; // TODO this assigns the same value twice, is this a copy-paste error?\n    }\n    break;",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex 8a667dad3..2a82caf5c 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -186,6 +186,32 @@ public abstract class BaseSecantSolver\n                 case REGULA_FALSI:\n                     // Detect early that algorithm is stuck, instead of waiting\n                     // for the maximum number of iterations to be exceeded.\n+case REGULA_FALSI:\n+    if (--maximalEvaluations <= 0) {\n+        throw new ConvergenceException(\n+                LocalizedFormats.CONVERGENCE_FAILED,\n+                getMaximalEvaluations());\n+    }\n+    // Detect early that algorithm is stuck, instead of waiting\n+    // for the maximum number of iterations to be exceeded.\n+    f0 = computeObjectiveValue(x0);\n+    f1 = computeObjectiveValue(x1);\n+    if (f1 * f0 > 0.0) {\n+        throw new MathIllegalStateException(LocalizedFormats.REGULA_FALSI_BRACKETING,\n+                                             x0, x1, f0, f1, getMaximalIterations(),\n+                                             fcn.getClass().getName());\n+    }\n+    final double delta = 0.5 * (f0 - f1);\n+    final double r = (delta > 0) ? 1.0 : -1.0;\n+    double x = delta == 0 ? x1 : (x1 + r * FastMath.sqrt(r * r * f1 * f1 - 4.0 * f0 * f1)) / (2.0 * delta);\n+    if (Double.isNaN(x)) {\n+        x = x1;\n+        // if we had NaN, we consider that regression failed silently\n+        // restore function values to allow the algorithm to keep trying\n+        f1 = computeObjectiveValue(x);\n+        f0 = f1; // TODO this assigns the same value twice, is this a copy-paste error?\n+    }\n+    break;\n                     break;\n                 default:\n                     // Should never happen.",
    "result_reason": "error: duplicate case label",
    "test_result": "ERROR"
}