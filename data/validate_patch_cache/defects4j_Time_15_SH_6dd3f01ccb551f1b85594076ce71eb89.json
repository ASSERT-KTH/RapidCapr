{
    "patch": "        if (val2 == -1) {\n            try {\n                return Math.multiplyExact(val1, -1);\n            } catch (ArithmeticException e) {\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                } else {\n                    return -val1;\n                }\n            }\n        } else if (val2 == 0) {\n            return 0L;\n        } else if (val2 == 1) {\n            return val1;\n        } else {\n            try {\n                return Math.multiplyExact(val1, val2);\n            } catch (ArithmeticException e) {\n                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/field/FieldUtils.java b/src/main/java/org/joda/time/field/FieldUtils.java\nindex a0fe7e2d..1f7eff4f 100644\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n@@ -135,6 +135,27 @@ public class FieldUtils {\n     public static long safeMultiply(long val1, int val2) {\n         switch (val2) {\n             case -1:\n+        if (val2 == -1) {\n+            try {\n+                return Math.multiplyExact(val1, -1);\n+            } catch (ArithmeticException e) {\n+                if (val1 == Long.MIN_VALUE) {\n+                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+                } else {\n+                    return -val1;\n+                }\n+            }\n+        } else if (val2 == 0) {\n+            return 0L;\n+        } else if (val2 == 1) {\n+            return val1;\n+        } else {\n+            try {\n+                return Math.multiplyExact(val1, val2);\n+            } catch (ArithmeticException e) {\n+                throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+            }\n+        }\n                 return -val1;\n             case 0:\n                 return 0L;",
    "result_reason": "error: unreachable statement",
    "test_result": "ERROR"
}