{
    "patch": "            if ((offsetLocal - offsetAdjusted) < 0) {\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n\n                // If nextLocal == nextAdjusted, it means we're at a DST overlap.\n                // We need to choose the right offset to use, taking into\n                // account the earliest/latest valid times in each offset.\n                int[] transitions = getOffsetTransitionList();\n                int index = Arrays.binarySearch(transitions, (int) nextLocal);\n                if (index < 0) {\n                    index = -index - 2;\n                }\n                int earliestValidIndex = Math.max(0, index - 1);\n                int earliestValidOffset = transitions[earliestValidIndex];\n                int latestValidOffset = transitions[index];\n\n                // choose the offset which is valid for the whole overlap\n                long next = nextTransition((instantAdjusted > 0 ? Math.min(nextLocal, nextAdjusted) : Math.max(nextLocal, nextAdjusted)) - 1);\n                if (next == (instantAdjusted > 0 ? earliestValidOffset : latestValidOffset)) {\n                    return earliestValidOffset;\n                } else {\n                    return latestValidOffset;\n                }\n            }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..7544c992 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,33 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+            if ((offsetLocal - offsetAdjusted) < 0) {\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+\n+                // If nextLocal == nextAdjusted, it means we're at a DST overlap.\n+                // We need to choose the right offset to use, taking into\n+                // account the earliest/latest valid times in each offset.\n+                int[] transitions = getOffsetTransitionList();\n+                int index = Arrays.binarySearch(transitions, (int) nextLocal);\n+                if (index < 0) {\n+                    index = -index - 2;\n+                }\n+                int earliestValidIndex = Math.max(0, index - 1);\n+                int earliestValidOffset = transitions[earliestValidIndex];\n+                int latestValidOffset = transitions[index];\n+\n+                // choose the offset which is valid for the whole overlap\n+                long next = nextTransition((instantAdjusted > 0 ? Math.min(nextLocal, nextAdjusted) : Math.max(nextLocal, nextAdjusted)) - 1);\n+                if (next == (instantAdjusted > 0 ? earliestValidOffset : latestValidOffset)) {\n+                    return earliestValidOffset;\n+                } else {\n+                    return latestValidOffset;\n+                }\n+            }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}