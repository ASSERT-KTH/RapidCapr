{
    "patch": "      case Token.NAME:\n        // This may be a variable get or set.\n        if (parent != null) {\n          switch (parent.getType()) {\n            case Token.VAR:\n              isSet = true;\n              rvalue = n.getFirstChild();\n              type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n              break;\n            case Token.ASSIGN:\n              if (parent.getFirstChild() == n) {\n                isSet = true;\n                type = getValueType(n.getNext());\n              }\n              break;\n            case Token.GETPROP:\n              return;\n            case Token.FUNCTION:\n              Node gramps = parent.getParent();\n              if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n                return;\n              }\n              isSet = true;\n              type = Name.Type.FUNCTION;\n              break;\n            case Token.INC:\n            case Token.DEC:\n              isSet = true;\n              type = Name.Type.OTHER;\n              break;\n            default:\n              if (NodeUtil.isAssignmentOp(parent) &&\n                  parent.getFirstChild() == n) {\n                isSet = true;\n                type = Name.Type.OTHER;\n              } else {\n                Node leftChild = null;\n                Node currentNode = n;\n                while (currentNode.getType() == Token.NAME && currentNode.getParent().getType() == Token.DOT) {\n                  leftChild = currentNode;\n                  currentNode = currentNode.getParent();\n                }\n                if (currentNode.getType() == Token.EXPR_RESULT && leftChild != null) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                  parent = currentNode;\n                  n = leftChild;\n                }\n              }\n          }\n        }\n        name = n.getString();\n        break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..f366a37b 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,59 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+      case Token.NAME:\n+        // This may be a variable get or set.\n+        if (parent != null) {\n+          switch (parent.getType()) {\n+            case Token.VAR:\n+              isSet = true;\n+              rvalue = n.getFirstChild();\n+              type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue);\n+              break;\n+            case Token.ASSIGN:\n+              if (parent.getFirstChild() == n) {\n+                isSet = true;\n+                type = getValueType(n.getNext());\n+              }\n+              break;\n+            case Token.GETPROP:\n+              return;\n+            case Token.FUNCTION:\n+              Node gramps = parent.getParent();\n+              if (gramps == null || NodeUtil.isFunctionExpression(parent)) {\n+                return;\n+              }\n+              isSet = true;\n+              type = Name.Type.FUNCTION;\n+              break;\n+            case Token.INC:\n+            case Token.DEC:\n+              isSet = true;\n+              type = Name.Type.OTHER;\n+              break;\n+            default:\n+              if (NodeUtil.isAssignmentOp(parent) &&\n+                  parent.getFirstChild() == n) {\n+                isSet = true;\n+                type = Name.Type.OTHER;\n+              } else {\n+                Node leftChild = null;\n+                Node currentNode = n;\n+                while (currentNode.getType() == Token.NAME && currentNode.getParent().getType() == Token.DOT) {\n+                  leftChild = currentNode;\n+                  currentNode = currentNode.getParent();\n+                }\n+                if (currentNode.getType() == Token.EXPR_RESULT && leftChild != null) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                  parent = currentNode;\n+                  n = leftChild;\n+                }\n+              }\n+          }\n+        }\n+        name = n.getString();\n+        break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: variable gramps is already defined in method collect(JSModule,Scope,Node)",
    "test_result": "ERROR"
}