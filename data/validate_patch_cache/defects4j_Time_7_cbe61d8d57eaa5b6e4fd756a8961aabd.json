{
    "patch": "public int parseInto(ReadWritableInstant instant, String text, int position) {\n    DateTimeParser parser = requireParser();\n    if (instant == null) {\n        throw new IllegalArgumentException(\"Instant must not be null\");\n    }\n\n    long instantMillis = instant.getMillis();\n    Chronology chrono = instant.getChronology();\n    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n    chrono = selectChronology(chrono);\n    int defaultYear = chrono.year().get(instantLocal);\n\n    DateTimeParserBucket bucket = new DateTimeParserBucket(\n            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n    int newPos = parser.parseInto(bucket, text, position);\n\n    if (newPos > 0 && (bucket.getParseMode() != null || (parser.getParser() instanceof DateTimeFormatterBuilder.AbstractInternalParser))) {\n        int year = bucket.computeInitializedChronology(defaultYear).year().get(instantLocal);\n        if (year > defaultYear && bucket.getMonthOfYear() == DateTimeConstants.FEBRUARY && bucket.getDayOfMonth() == 29) {\n            Chronology revisedChrono = bucket.getChronology();\n            revisedChrono = revisedChrono.withYear(year - 1);\n            bucket = new DateTimeParserBucket(instantLocal, revisedChrono, iLocale, iPivotYear, year - 1);\n        }\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;\n    } else {\n        instant.setMillis(instantMillis);\n        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..d2d43b2b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -697,21 +697,29 @@ public class DateTimeFormatter {\n      * @throws IllegalArgumentException if the instant is null\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    public int parseInto(ReadWritableInstant instant, String text, int position) {\n-        DateTimeParser parser = requireParser();\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"Instant must not be null\");\n-        }\n-        \n-        long instantMillis = instant.getMillis();\n-        Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n-        DateTimeParserBucket bucket = new DateTimeParserBucket(\n+public int parseInto(ReadWritableInstant instant, String text, int position) {\n+    DateTimeParser parser = requireParser();\n+    if (instant == null) {\n+        throw new IllegalArgumentException(\"Instant must not be null\");\n+    }\n+\n+    long instantMillis = instant.getMillis();\n+    Chronology chrono = instant.getChronology();\n+    long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n+    chrono = selectChronology(chrono);\n+    int defaultYear = chrono.year().get(instantLocal);\n+\n+    DateTimeParserBucket bucket = new DateTimeParserBucket(\n             instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n-        int newPos = parser.parseInto(bucket, text, position);\n+    int newPos = parser.parseInto(bucket, text, position);\n+\n+    if (newPos > 0 && (bucket.getParseMode() != null || (parser.getParser() instanceof DateTimeFormatterBuilder.AbstractInternalParser))) {\n+        int year = bucket.computeInitializedChronology(defaultYear).year().get(instantLocal);\n+        if (year > defaultYear && bucket.getMonthOfYear() == DateTimeConstants.FEBRUARY && bucket.getDayOfMonth() == 29) {\n+            Chronology revisedChrono = bucket.getChronology();\n+            revisedChrono = revisedChrono.withYear(year - 1);\n+            bucket = new DateTimeParserBucket(instantLocal, revisedChrono, iLocale, iPivotYear, year - 1);\n+        }\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n             int parsedOffset = bucket.getOffsetInteger();\n@@ -725,7 +733,11 @@ public class DateTimeFormatter {\n             instant.setZone(iZone);\n         }\n         return newPos;\n+    } else {\n+        instant.setMillis(instantMillis);\n+        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n     }\n+}\n \n     /**\n      * Parses a datetime from the given text, returning the number of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}