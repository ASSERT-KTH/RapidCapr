{
    "patch": " private boolean isFoldableExpressBlock(Node n) {\n    if (n.getType() == Token.BLOCK) {\n      if (n.hasOneChild()) {\n        Node maybeExpr = n.getFirstChild();\n        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n          Node child = maybeExpr.getFirstChild();\n          // We only need to consider function calls.\n          if (child.getType() == Token.CALL) {\n            Node function = child.getFirstChild();\n            if (function.getType() == Token.GETPROP) {\n              Node obj = function.getFirstChild();\n              Node prop = function.getLastChild();\n              if (obj.getType() == Token.NAME && \"window\".equals(obj.getString()) &&\n                  prop.getType() == Token.STRING &&\n                  (\"event\".equals(prop.getString()) || \"Event\".equals(prop.getString()))) {\n                // This is an event handler with a return value. Don't fold.\n                return false;\n              }\n            }\n          }\n        }\n        return NodeUtil.isExpressionNode(maybeExpr);\n      }\n    }\n\n    return false;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..eb881dd0 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,21 +516,28 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n+ private boolean isFoldableExpressBlock(Node n) {\n     if (n.getType() == Token.BLOCK) {\n       if (n.hasOneChild()) {\n         Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+        if (maybeExpr.getType() == Token.EXPR_RESULT) {\n+          Node child = maybeExpr.getFirstChild();\n+          // We only need to consider function calls.\n+          if (child.getType() == Token.CALL) {\n+            Node function = child.getFirstChild();\n+            if (function.getType() == Token.GETPROP) {\n+              Node obj = function.getFirstChild();\n+              Node prop = function.getLastChild();\n+              if (obj.getType() == Token.NAME && \"window\".equals(obj.getString()) &&\n+                  prop.getType() == Token.STRING &&\n+                  (\"event\".equals(prop.getString()) || \"Event\".equals(prop.getString()))) {\n+                // This is an event handler with a return value. Don't fold.\n+                return false;\n+              }\n+            }\n+          }\n+        }\n+        return NodeUtil.isExpressionNode(maybeExpr);\n       }\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}