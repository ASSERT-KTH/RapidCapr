{
    "patch": "    private RealMatrix squareRoot(RealMatrix m) {\n            // Check if m is symmetric positive definite\n            if (!MatrixUtils.isSymmetricPositiveDefinite(m)) {\n                throw new IllegalArgumentException(\"Matrix must be symmetric positive definite\");\n            }\n            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n            // Construct the square root matrix from the lower triangular matrix of the Cholesky decomposition\n            final RealMatrix root = dec.getL();\n            return root.multiply(root.transpose()); // Return the product of the lower triangular matrix and its transpose\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\nindex 99d86e92a..6b1a8827e 100644\n--- a/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/general/AbstractLeastSquaresOptimizer.java\n@@ -559,7 +559,13 @@ public abstract class AbstractLeastSquaresOptimizer\n      * @return the square-root of the weight matrix.\n      */\n     private RealMatrix squareRoot(RealMatrix m) {\n-            final EigenDecomposition dec = new EigenDecomposition(m);\n-            return dec.getSquareRoot();\n+            // Check if m is symmetric positive definite\n+            if (!MatrixUtils.isSymmetricPositiveDefinite(m)) {\n+                throw new IllegalArgumentException(\"Matrix must be symmetric positive definite\");\n+            }\n+            final CholeskyDecomposition dec = new CholeskyDecomposition(m);\n+            // Construct the square root matrix from the lower triangular matrix of the Cholesky decomposition\n+            final RealMatrix root = dec.getL();\n+            return root.multiply(root.transpose()); // Return the product of the lower triangular matrix and its transpose\n     }\n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}