{
    "patch": "  private CanInlineResult canInlineReferenceDirectly(\n      Node callNode, Node fnNode) {\n    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n      return CanInlineResult.NO;\n    }\n\n    Node block = fnNode.getLastChild();\n\n    // List of arguments passed to the function\n    List<Node> callArgs = new ArrayList<>();\n    for (Node n = callNode.getFirstChild().getNext(); n != null; n = n.getNext()) {\n      callArgs.add(n);\n    }\n\n    // List of parameters of the function\n    List<Node> fnParams = new ArrayList<>();\n    for (Node n = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); n != null; n = n.getNext()) {\n      fnParams.add(n);\n    }\n\n    // Check for incompatible number of arguments and parameters\n    if (callArgs.size() > fnParams.size()) {\n      return CanInlineResult.NO;\n    }\n\n    // Check if the function has a function object call and if the 'this' parameter is defined\n    boolean isFunctionCall = NodeUtil.isFunctionObjectCall(callNode);\n    if (isFunctionCall && callNode.getFirstChild().getNext() == null) {\n      return CanInlineResult.NO;\n    }\n\n    // Map of function arguments to parameters\n    Map<Node, Node> argToParam = new HashMap<>();\n\n    // Compare the arguments passed to the function with its parameters\n    for (int i = 0; i < fnParams.size(); i++) {\n      Node fnParam = fnParams.get(i);\n      Node callArg = (i < callArgs.size()) ? callArgs.get(i) : null;\n\n      // Handle the 'this' parameter, which is the first parameter of a function object call\n      if (isFunctionCall && fnParam == fnParams.get(0)) {\n        if (callArgs.isEmpty() || !callArgs.get(0).isThis()) {\n          return CanInlineResult.NO;\n        }\n        argToParam.put(callArgs.get(0), fnParam);\n        continue;\n      }\n\n      // Check for arguments that are evaluated more than once.\n      // Note: Unlike block inlining, there it is not possible that a\n      // parameter reference will be in a loop.\n      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n        if (callArg == null || NodeUtil.mayEffectMutableState(callArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n      } else if (callArg != null) {\n        if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n          return CanInlineResult.NO;\n        }\n        argToParam.put(callArg, fnParam);\n      } else {\n        // No argument is passed to the function, set undefined for the parameter\n        argToParam.put(null, fnParam);\n      }\n    }\n\n    // Check if all the arguments passed to the function are used\n    for (Node callArg : callArgs) {\n      if (!argToParam.containsKey(callArg)) {\n        return CanInlineResult.NO;\n      }\n    }\n\n    return CanInlineResult.YES;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..95831fe6 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -694,54 +694,68 @@ class FunctionInjector {\n \n     Node block = fnNode.getLastChild();\n \n+    // List of arguments passed to the function\n+    List<Node> callArgs = new ArrayList<>();\n+    for (Node n = callNode.getFirstChild().getNext(); n != null; n = n.getNext()) {\n+      callArgs.add(n);\n+    }\n \n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+    // List of parameters of the function\n+    List<Node> fnParams = new ArrayList<>();\n+    for (Node n = NodeUtil.getFunctionParameters(fnNode).getFirstChild(); n != null; n = n.getNext()) {\n+      fnParams.add(n);\n+    }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n+    // Check for incompatible number of arguments and parameters\n+    if (callArgs.size() > fnParams.size()) {\n+      return CanInlineResult.NO;\n     }\n \n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n+    // Check if the function has a function object call and if the 'this' parameter is defined\n+    boolean isFunctionCall = NodeUtil.isFunctionObjectCall(callNode);\n+    if (isFunctionCall && callNode.getFirstChild().getNext() == null) {\n+      return CanInlineResult.NO;\n+    }\n+\n+    // Map of function arguments to parameters\n+    Map<Node, Node> argToParam = new HashMap<>();\n+\n+    // Compare the arguments passed to the function with its parameters\n+    for (int i = 0; i < fnParams.size(); i++) {\n+      Node fnParam = fnParams.get(i);\n+      Node callArg = (i < callArgs.size()) ? callArgs.get(i) : null;\n \n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+      // Handle the 'this' parameter, which is the first parameter of a function object call\n+      if (isFunctionCall && fnParam == fnParams.get(0)) {\n+        if (callArgs.isEmpty() || !callArgs.get(0).isThis()) {\n+          return CanInlineResult.NO;\n+        }\n+        argToParam.put(callArgs.get(0), fnParam);\n+        continue;\n       }\n \n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n+      // Check for arguments that are evaluated more than once.\n+      // Note: Unlike block inlining, there it is not possible that a\n+      // parameter reference will be in a loop.\n+      if (NodeUtil.getNameReferenceCount(block, fnParam.getString()) > 1) {\n+        if (callArg == null || NodeUtil.mayEffectMutableState(callArg, compiler)) {\n+          return CanInlineResult.NO;\n+        }\n+      } else if (callArg != null) {\n+        if (NodeUtil.mayHaveSideEffects(callArg, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n+        argToParam.put(callArg, fnParam);\n+      } else {\n+        // No argument is passed to the function, set undefined for the parameter\n+        argToParam.put(null, fnParam);\n+      }\n+    }\n+\n+    // Check if all the arguments passed to the function are used\n+    for (Node callArg : callArgs) {\n+      if (!argToParam.containsKey(callArg)) {\n+        return CanInlineResult.NO;\n       }\n     }\n ",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}