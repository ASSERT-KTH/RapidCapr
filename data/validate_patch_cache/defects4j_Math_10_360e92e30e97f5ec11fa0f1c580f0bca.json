{
    "patch": "public void atan2(final double[] y, final int yOffset,\n                  final double[] x, final int xOffset,\n                  final double[] result, final int resultOffset) {\n\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    // Special cases\n    double invm = Double.POSITIVE_INFINITY;\n    boolean positives = (x[xOffset] > 0) && (y[yOffset] > 0);\n    boolean negativeX = x[xOffset] < 0;\n    boolean posInfinity = Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset]);\n    if (!positives && !negativeX && !posInfinity) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // Compute regular value for atan2\n        if (x[xOffset] >= 0) {\n            // compute atan2(y, x) = 2 atan(y / (r + x))\n            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n            for (int i = 0; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n            }\n        } else {\n            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n            if (y[yOffset] >= 0) {\n                result[resultOffset] = FastMath.PI + 2 * tmp2[0];\n            } else {\n                result[resultOffset] = -FastMath.PI + 2 * tmp2[0];\n            }\n            for (int i = 1; i < tmp2.length; ++i) {\n                result[resultOffset + i] = 2 * tmp2[i];\n            }\n        }\n        // special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity)\n        if (x[xOffset] == 0 && y[yOffset] == 0)\n            result[resultOffset] = Double.NaN;\n        if (Double.isInfinite(x[xOffset]) && !Double.isInfinite(y[yOffset])) {\n            if (x[xOffset] < 0) {\n                result[resultOffset] = FastMath.PI;\n            } else if (y[yOffset] >= 0) {\n                result[resultOffset] = 0;\n            } else {\n                result[resultOffset] = -0.0;\n            }\n        }\n        if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n            if (x[xOffset] == y[yOffset]) {\n                result[resultOffset] = FastMath.PI / 4;\n            } else {\n                result[resultOffset] = -FastMath.PI / 4;\n            }\n        }\n        if (x[xOffset] == Double.NEGATIVE_INFINITY && !Double.isInfinite(y[yOffset])) {\n            if (y[yOffset] < 0) {\n                result[resultOffset] = -FastMath.PI;\n            } else {\n                result[resultOffset] = FastMath.PI;\n            }\n        }\n        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n            result[resultOffset] = Double.NaN;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..514484cc1 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,85 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+public void atan2(final double[] y, final int yOffset,\n+                  final double[] x, final int xOffset,\n+                  final double[] result, final int resultOffset) {\n+\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    // Special cases\n+    double invm = Double.POSITIVE_INFINITY;\n+    boolean positives = (x[xOffset] > 0) && (y[yOffset] > 0);\n+    boolean negativeX = x[xOffset] < 0;\n+    boolean posInfinity = Double.isInfinite(x[xOffset]) || Double.isInfinite(y[yOffset]);\n+    if (!positives && !negativeX && !posInfinity) {\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n+    } else {\n+        // Compute regular value for atan2\n+        if (x[xOffset] >= 0) {\n+            // compute atan2(y, x) = 2 atan(y / (r + x))\n+            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+            for (int i = 0; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+            }\n+        } else {\n+            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n+            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n+            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n+            if (y[yOffset] >= 0) {\n+                result[resultOffset] = FastMath.PI + 2 * tmp2[0];\n+            } else {\n+                result[resultOffset] = -FastMath.PI + 2 * tmp2[0];\n+            }\n+            for (int i = 1; i < tmp2.length; ++i) {\n+                result[resultOffset + i] = 2 * tmp2[i];\n+            }\n+        }\n+        // special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity)\n+        if (x[xOffset] == 0 && y[yOffset] == 0)\n+            result[resultOffset] = Double.NaN;\n+        if (Double.isInfinite(x[xOffset]) && !Double.isInfinite(y[yOffset])) {\n+            if (x[xOffset] < 0) {\n+                result[resultOffset] = FastMath.PI;\n+            } else if (y[yOffset] >= 0) {\n+                result[resultOffset] = 0;\n+            } else {\n+                result[resultOffset] = -0.0;\n+            }\n+        }\n+        if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+            if (x[xOffset] == y[yOffset]) {\n+                result[resultOffset] = FastMath.PI / 4;\n+            } else {\n+                result[resultOffset] = -FastMath.PI / 4;\n+            }\n+        }\n+        if (x[xOffset] == Double.NEGATIVE_INFINITY && !Double.isInfinite(y[yOffset])) {\n+            if (y[yOffset] < 0) {\n+                result[resultOffset] = -FastMath.PI;\n+            } else {\n+                result[resultOffset] = FastMath.PI;\n+            }\n+        }\n+        if (Double.isNaN(x[xOffset]) || Double.isNaN(y[yOffset])) {\n+            result[resultOffset] = Double.NaN;\n+        }\n+    }\n+}\n \n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}