{
    "patch": "        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n            // If we have two positive offsets and they differ, then we are on a DST boundary\n            if (offsetLocal != offsetAdjusted) {\n                // Check if instantAdjusted is already after the DST gap.\n                // If it is, return the offset starting from midnight\n                long prevTransition = previousTransition(instantAdjusted);\n                if (prevTransition < instantAdjusted) {\n                    int offsetPrev = getOffset(prevTransition);\n                    int diff = offsetLocal - offsetPrev;\n                    if (instantAdjusted - prevTransition <= diff) {\n                        return offsetPrev;\n                    }\n                }\n                // Else, return the offset starting from the gap\n                long nextLocal = nextTransition(instantAdjusted);\n                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n                if (nextLocal != nextAdjusted) {\n                    return offsetLocal;\n                }\n            }\n        }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..62e040f8 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -897,7 +897,27 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n-        } else if (offsetLocal > 0) {\n+        } else if (offsetLocal >= 0 && offsetAdjusted >= 0) {\n+            // If we have two positive offsets and they differ, then we are on a DST boundary\n+            if (offsetLocal != offsetAdjusted) {\n+                // Check if instantAdjusted is already after the DST gap.\n+                // If it is, return the offset starting from midnight\n+                long prevTransition = previousTransition(instantAdjusted);\n+                if (prevTransition < instantAdjusted) {\n+                    int offsetPrev = getOffset(prevTransition);\n+                    int diff = offsetLocal - offsetPrev;\n+                    if (instantAdjusted - prevTransition <= diff) {\n+                        return offsetPrev;\n+                    }\n+                }\n+                // Else, return the offset starting from the gap\n+                long nextLocal = nextTransition(instantAdjusted);\n+                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n+                if (nextLocal != nextAdjusted) {\n+                    return offsetLocal;\n+                }\n+            }\n+        }\n             long prev = previousTransition(instantAdjusted);\n             if (prev < instantAdjusted) {\n                 int offsetPrev = getOffset(prev);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}