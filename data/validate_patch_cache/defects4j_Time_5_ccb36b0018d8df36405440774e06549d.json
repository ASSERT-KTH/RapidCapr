{
    "patch": "import org.joda.time.format.PeriodFormatterBuilder;\nimport org.joda.time.format.Printer;\nimport org.joda.time.field.FieldUtils;\n\npublic Period normalizedStandard(PeriodType type) {\n    PeriodType effectiveType = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n    Period result = new Period(millis, effectiveType, ISOChronology.getInstanceUTC());\n    int years = getYears();\n    int months = getMonths();\n\n    // Adjust for months that are not supported\n    if (effectiveType.isSupported(DurationFieldType.years()) && effectiveType.isSupported(DurationFieldType.months())) {\n        if (years != 0 && months != 0) {\n            int totalMonths = (years * 12) + months;\n            years = totalMonths / 12;\n            months = totalMonths % 12;\n            result = result.withYears(years).withMonths(months);\n        } else {\n            result = result.withYears(years).withMonths(months);\n        }\n    } else if (effectiveType.isSupported(DurationFieldType.years())) {\n        years += months / 12;\n        months = months % 12;\n        result = result.withYears(years).withMonths(months);\n    } else if (effectiveType.isSupported(DurationFieldType.months())) {\n        int totalMonths = (years * 12) + months;\n        years = totalMonths / 12;\n        months = totalMonths % 12;\n        result = result.withYears(years).withMonths(months);\n    }\n\n    // Adjust for weeks that are not supported\n    if (!effectiveType.isSupported(DurationFieldType.weeks())) {\n        Printer printer = new PeriodFormatterBuilder()\n                .appendWeeks().appendSuffix(\"w\").toFormatter().getPrinter();\n        DurationField field = printer.getFieldType(6).getField(ISOChronology.getInstanceUTC());\n        long totalMillis = result.getDurationField().getField(ISOChronology.getInstanceUTC()).multiply(result.getWeeks()).getMillis();\n        totalMillis += result.getMillis();\n        result = new Period(totalMillis, result.getDurationFieldType());\n        ((MutablePeriod) result).add(field, result.getWeeks());\n    }\n    return result;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..0445c3a4 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,54 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+import org.joda.time.format.PeriodFormatterBuilder;\n+import org.joda.time.format.Printer;\n+import org.joda.time.field.FieldUtils;\n+\n+public Period normalizedStandard(PeriodType type) {\n+    PeriodType effectiveType = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs\n+    millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+    millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+    millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+    millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+    millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+    Period result = new Period(millis, effectiveType, ISOChronology.getInstanceUTC());\n+    int years = getYears();\n+    int months = getMonths();\n+\n+    // Adjust for months that are not supported\n+    if (effectiveType.isSupported(DurationFieldType.years()) && effectiveType.isSupported(DurationFieldType.months())) {\n+        if (years != 0 && months != 0) {\n+            int totalMonths = (years * 12) + months;\n+            years = totalMonths / 12;\n+            months = totalMonths % 12;\n+            result = result.withYears(years).withMonths(months);\n+        } else {\n+            result = result.withYears(years).withMonths(months);\n         }\n-        return result;\n-    }\n+    } else if (effectiveType.isSupported(DurationFieldType.years())) {\n+        years += months / 12;\n+        months = months % 12;\n+        result = result.withYears(years).withMonths(months);\n+    } else if (effectiveType.isSupported(DurationFieldType.months())) {\n+        int totalMonths = (years * 12) + months;\n+        years = totalMonths / 12;\n+        months = totalMonths % 12;\n+        result = result.withYears(years).withMonths(months);\n+    }\n+\n+    // Adjust for weeks that are not supported\n+    if (!effectiveType.isSupported(DurationFieldType.weeks())) {\n+        Printer printer = new PeriodFormatterBuilder()\n+                .appendWeeks().appendSuffix(\"w\").toFormatter().getPrinter();\n+        DurationField field = printer.getFieldType(6).getField(ISOChronology.getInstanceUTC());\n+        long totalMillis = result.getDurationField().getField(ISOChronology.getInstanceUTC()).multiply(result.getWeeks()).getMillis();\n+        totalMillis += result.getMillis();\n+        result = new Period(totalMillis, result.getDurationFieldType());\n+        ((MutablePeriod) result).add(field, result.getWeeks());\n+    }\n+    return result;\n+}\n \n }",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}