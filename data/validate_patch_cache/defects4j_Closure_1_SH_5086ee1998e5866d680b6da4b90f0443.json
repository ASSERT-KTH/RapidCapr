{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n    Set<Var> referenced = new LinkedHashSet<>();\n    FunctionArgumentInjector argumentInjector =\n        new FunctionArgumentInjector(compiler, referenced, allowRemovalOfThis);\n    NodeTraversal.traverse(compiler, fnScope.getRootNode(), argumentInjector);\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg = argList.getLastChild();\n      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n        Node nameNode = lastArg;\n        Node defaultValue = null;\n        if (lastArg.hasChildren()) {\n          nameNode = lastArg.getFirstChild();\n          defaultValue = lastArg.getLastChild().detach();\n        }\n        argList.removeChild(lastArg);\n        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n        compiler.reportCodeChange();\n\n        if (defaultValue != null) {\n          // if default value is defined; we should remove that too\n          NodeUtil.markFunctionsDeleted(defaultValue, compiler);\n          compiler.reportCodeChange();\n        }\n\n        // Remove assignment of value if any\n        Node parent = nameNode.getParent();\n        if (!parent.isDefaultValue() && parent.hasOneChild()) {\n          Node varNode = parent.getParent();\n          if (varNode.isVar()) {\n            parent = varNode;\n            Node grandParent = varNode.getParent();\n            grandParent.removeChild(varNode);\n            compiler.reportCodeChange();\n          }\n        }\n\n        lastArg = argList.getLastChild();\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..a941e2aa 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -376,6 +376,70 @@ class RemoveUnusedVars\n     // is removing globals, then it's OK to remove unused function args.\n     //\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n+    // Notice that removing unreferenced function args breaks\n+    // Function.prototype.length. In advanced mode, we don't really care\n+    // about this: we consider \"length\" the equivalent of reflecting on\n+    // the function's lexical source.\n+    //\n+    // Rather than create a new option for this, we assume that if the user\n+    // is removing globals, then it's OK to remove unused function args.\n+    //\n+    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n+    Set<Var> referenced = new LinkedHashSet<>();\n+    FunctionArgumentInjector argumentInjector =\n+        new FunctionArgumentInjector(compiler, referenced, allowRemovalOfThis);\n+    NodeTraversal.traverse(compiler, fnScope.getRootNode(), argumentInjector);\n+\n+    Node function = fnScope.getRootNode();\n+\n+    Preconditions.checkState(function.isFunction());\n+    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n+      // The parameters object literal setters can not be removed.\n+      return;\n+    }\n+\n+    Node argList = getFunctionArgList(function);\n+    boolean modifyCallers = modifyCallSites\n+        && callSiteOptimizer.canModifyCallers(function);\n+    if (!modifyCallers) {\n+      // Strip unreferenced args off the end of the function declaration.\n+      Node lastArg = argList.getLastChild();\n+      while (lastArg != null && !referenced.contains(fnScope.getVar(lastArg.getString()))) {\n+        Node nameNode = lastArg;\n+        Node defaultValue = null;\n+        if (lastArg.hasChildren()) {\n+          nameNode = lastArg.getFirstChild();\n+          defaultValue = lastArg.getLastChild().detach();\n+        }\n+        argList.removeChild(lastArg);\n+        NodeUtil.markFunctionsDeleted(lastArg, compiler);\n+        compiler.reportCodeChange();\n+\n+        if (defaultValue != null) {\n+          // if default value is defined; we should remove that too\n+          NodeUtil.markFunctionsDeleted(defaultValue, compiler);\n+          compiler.reportCodeChange();\n+        }\n+\n+        // Remove assignment of value if any\n+        Node parent = nameNode.getParent();\n+        if (!parent.isDefaultValue() && parent.hasOneChild()) {\n+          Node varNode = parent.getParent();\n+          if (varNode.isVar()) {\n+            parent = varNode;\n+            Node grandParent = varNode.getParent();\n+            grandParent.removeChild(varNode);\n+            compiler.reportCodeChange();\n+          }\n+        }\n+\n+        lastArg = argList.getLastChild();\n+      }\n+    } else {\n+      callSiteOptimizer.optimize(fnScope, referenced);\n+    }\n+  }\n \n     Node function = fnScope.getRootNode();\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}