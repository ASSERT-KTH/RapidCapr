{
    "patch": "if (constraintObj instanceof AnonymousObjectType) {\n  AnonymousObjectType anonymousObj = (AnonymousObjectType) constraintObj;\n  if (anonymousObj.isRecordType()) {\n    for (String prop : anonymousObj.getOwnPropertyNames()) {\n      JSType propType = anonymousObj.getPropertyType(prop);\n      if (!isPropertyTypeDeclared(prop)) {\n        JSType typeToInfer = propType;\n        if (!hasProperty(prop)) {\n          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n              .getLeastSupertype(propType);\n        }\n        defineInferredProperty(prop, typeToInfer, null);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex b6e3fc78..4db94e39 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -554,6 +554,22 @@ class PrototypeObjectType extends ObjectType {\n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n     // We only want to match contraints on anonymous types.\n+if (constraintObj instanceof AnonymousObjectType) {\n+  AnonymousObjectType anonymousObj = (AnonymousObjectType) constraintObj;\n+  if (anonymousObj.isRecordType()) {\n+    for (String prop : anonymousObj.getOwnPropertyNames()) {\n+      JSType propType = anonymousObj.getPropertyType(prop);\n+      if (!isPropertyTypeDeclared(prop)) {\n+        JSType typeToInfer = propType;\n+        if (!hasProperty(prop)) {\n+          typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+              .getLeastSupertype(propType);\n+        }\n+        defineInferredProperty(prop, typeToInfer, null);\n+      }\n+    }\n+  }\n+}\n \n     // Handle the case where the constraint object is a record type.\n     //",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}