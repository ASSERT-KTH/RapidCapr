{
    "patch": "public boolean apply(Node n) {\n  // When the node is null it means, we reached the implicit return\n  // where the function returns (possibly without a return statement)\n  if (n == null) {\n    return false;\n  }\n\n  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n    return true;\n  }\n\n  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n    return true;\n  }\n\n  boolean hasDepVarAssignments = hasDependentVariableAssignments(n);\n  // We only care about calls to functions that\n  // pass one of the dependent variable to a non-side-effect free\n  // function.\n  if (hasDepVarAssignments) {\n    // Find the dependent variable(s) and check for function calls.\n    VarDeclInfo dependentVar = findDependentVariable(n);\n    if (dependentVar != null) {\n        if (dependentVar.hasCallWithNonLocalEffect()) {\n            return true;\n        }\n    }\n  }\n\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (apply(c)) {\n      return true;\n    }\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..32f4a0cd 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,43 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+public boolean apply(Node n) {\n+  // When the node is null it means, we reached the implicit return\n+  // where the function returns (possibly without a return statement)\n+  if (n == null) {\n+    return false;\n+  }\n+\n+  if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+    return true;\n+  }\n+\n+  boolean hasDepVarAssignments = hasDependentVariableAssignments(n);\n+  // We only care about calls to functions that\n+  // pass one of the dependent variable to a non-side-effect free\n+  // function.\n+  if (hasDepVarAssignments) {\n+    // Find the dependent variable(s) and check for function calls.\n+    VarDeclInfo dependentVar = findDependentVariable(n);\n+    if (dependentVar != null) {\n+        if (dependentVar.hasCallWithNonLocalEffect()) {\n+            return true;\n+        }\n+    }\n+  }\n+\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (apply(c)) {\n+      return true;\n+    }\n+  }\n+\n+  return false;\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}