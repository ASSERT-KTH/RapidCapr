{
    "patch": "      if (value.isFunction()) {\n        if (initialization.getParent().isExprResult()) {\n          // Do not inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (CompilerUtil.isSingletonGetter(value)) {\n            return false;\n          }\n          // Do not inline into a call node. This would change\n          // the context in which it was being called. For example,\n          //   var a = b.c;\n          //   a();\n          // should not be inlined, because it calls a in the context of b\n          // rather than the context of the window.\n          //   var a = b.c;\n          //   f(a)\n          // is ok.\n          Node callNode = reference.getParent();\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          return canMoveAggressively(value) ||\n              canMoveModerately(initialization, reference);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..76af1ca2 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -572,6 +572,35 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+      if (value.isFunction()) {\n+        if (initialization.getParent().isExprResult()) {\n+          // Do not inline singleton getter methods\n+          // calls as this confused class removing logic.\n+          if (CompilerUtil.isSingletonGetter(value)) {\n+            return false;\n+          }\n+          // Do not inline into a call node. This would change\n+          // the context in which it was being called. For example,\n+          //   var a = b.c;\n+          //   a();\n+          // should not be inlined, because it calls a in the context of b\n+          // rather than the context of the window.\n+          //   var a = b.c;\n+          //   f(a)\n+          // is ok.\n+          Node callNode = reference.getParent();\n+          CodingConvention convention = compiler.getCodingConvention();\n+          // Bug 2388531: Don't inline subclass definitions into class defining\n+          // calls as this confused class removing logic.\n+          SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+\n+          return canMoveAggressively(value) ||\n+              canMoveModerately(initialization, reference);\n+        }\n+      }\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}