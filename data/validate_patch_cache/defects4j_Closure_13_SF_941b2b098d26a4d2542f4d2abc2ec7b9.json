{
    "patch": "private void traverse(Node node) {\n    if (!shouldVisit(node)) {\n        return;\n    }\n\n    Deque<Node> stack = new ArrayDeque<>();\n    stack.push(node);\n\n    int visits = 0;\n    while (!stack.isEmpty()) {\n        Node current = stack.pop();\n        Node child = current.getFirstChild();\n        boolean pushBack = false;\n\n        while (child != null) {\n            if (shouldRetraverse(child)) {\n                stack.push(current);\n                stack.push(child);\n                pushBack = true;\n                break;\n            }\n            traverse(child);\n            child = child.getNext();\n        }\n\n        if (pushBack) continue;\n\n        visit(current);\n        visits++;\n\n        if (visits >= 10000) {\n            throw new IllegalStateException(\"Too many iterations.\");\n        }\n    }\n\n    exitNode(node);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\nindex b51c088e..18f8ec9f 100644\n--- a/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n+++ b/src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java\n@@ -110,32 +110,43 @@ class PeepholeOptimizationsPass\n     compiler.removeChangeHandler(handler);\n   }\n \n-  private void traverse(Node node) {\n-    // The goal here is to avoid retraversing\n-    // the entire AST to catch newly created opportunities.\n-    // So we track whether a \"unit of code\" has changed,\n-    // and revisit immediately.\n+private void traverse(Node node) {\n     if (!shouldVisit(node)) {\n-      return;\n+        return;\n     }\n \n+    Deque<Node> stack = new ArrayDeque<>();\n+    stack.push(node);\n+\n     int visits = 0;\n-    do {\n-      Node c = node.getFirstChild();\n-      while(c != null) {\n-        traverse(c);\n-        Node next = c.getNext();\n-        c = next;\n-      }\n+    while (!stack.isEmpty()) {\n+        Node current = stack.pop();\n+        Node child = current.getFirstChild();\n+        boolean pushBack = false;\n+\n+        while (child != null) {\n+            if (shouldRetraverse(child)) {\n+                stack.push(current);\n+                stack.push(child);\n+                pushBack = true;\n+                break;\n+            }\n+            traverse(child);\n+            child = child.getNext();\n+        }\n \n-      visit(node);\n-      visits++;\n+        if (pushBack) continue;\n \n-      Preconditions.checkState(visits < 10000, \"too many interations\");\n-    } while (shouldRetraverse(node));\n+        visit(current);\n+        visits++;\n+\n+        if (visits >= 10000) {\n+            throw new IllegalStateException(\"Too many iterations.\");\n+        }\n+    }\n \n     exitNode(node);\n-  }\n+}\n \n   private boolean shouldRetraverse(Node node) {\n     if (node.getParent() != null && node.isFunction() || node.isScript()) {",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}