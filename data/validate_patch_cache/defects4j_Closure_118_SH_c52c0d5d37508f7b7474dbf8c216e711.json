{
    "patch": "String name = child.getString();\nT type = null;\n\nif (!child.isQuotedString()) {\n  // Maybe the property is on the prototype.\n  Var var = getScope().getVar(name);\n  if (var != null && var.getParentNode() == null\n      && NodeUtil.isExpressionResultUsed(var.getNameNode().getParent())) {\n    ObjectType objType = ObjectType.cast(var.getType());\n    if (objType != null) {\n      ObjectType protoType = objType.getPrototypeObject().getJSType();\n      if (protoType != null) {\n        type = (T) protoType.getPropertyType(name);\n      }\n    }\n  }\n} else {\n  type = typeSystem.getType(getScope(), n, name);\n}\n\nProperty prop = getProperty(name);\nif (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n  // TODO(user): It doesn't look like the user can do much in this\n  // case right now.\n  if (propertiesToErrorFor.containsKey(name)) {\n    compiler.report(JSError.make(\n        t.getSourceName(), child, propertiesToErrorFor.get(name),\n        Warnings.INVALIDATION, name,\n        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..59960cb3 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,37 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+String name = child.getString();\n+T type = null;\n+\n+if (!child.isQuotedString()) {\n+  // Maybe the property is on the prototype.\n+  Var var = getScope().getVar(name);\n+  if (var != null && var.getParentNode() == null\n+      && NodeUtil.isExpressionResultUsed(var.getNameNode().getParent())) {\n+    ObjectType objType = ObjectType.cast(var.getType());\n+    if (objType != null) {\n+      ObjectType protoType = objType.getPrototypeObject().getJSType();\n+      if (protoType != null) {\n+        type = (T) protoType.getPropertyType(name);\n+      }\n+    }\n+  }\n+} else {\n+  type = typeSystem.getType(getScope(), n, name);\n+}\n+\n+Property prop = getProperty(name);\n+if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+  // TODO(user): It doesn't look like the user can do much in this\n+  // case right now.\n+  if (propertiesToErrorFor.containsKey(name)) {\n+    compiler.report(JSError.make(\n+        t.getSourceName(), child, propertiesToErrorFor.get(name),\n+        Warnings.INVALIDATION, name,\n+        (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n+  }\n+}\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}