{
    "patch": "  private void removeUnreferencedFunctionArgs(Scope fnScope) {\n    // Notice that removing unreferenced function args breaks\n    // Function.prototype.length. In advanced mode, we don't really care\n    // about this: we consider \"length\" the equivalent of reflecting on\n    // the function's lexical source.\n    //\n    // Rather than create a new option for this, we assume that if the user\n    // is removing globals, then it's OK to remove unused function args.\n    //\n    // See http://code.google.com/p/closure-compiler/issues/detail?id=253\n\n    Node function = fnScope.getRootNode();\n\n    Preconditions.checkState(function.isFunction());\n    if (NodeUtil.isGetOrSetKey(function.getParent())) {\n      // The parameters object literal setters can not be removed.\n      return;\n    }\n\n    Node argList = getFunctionArgList(function);\n    boolean modifyCallers = modifyCallSites\n        && callSiteOptimizer.canModifyCallers(function);\n    List<Var> referenced = collectReferencedVars(fnScope);\n    if (!modifyCallers) {\n      // Strip unreferenced args off the end of the function declaration.\n      Node lastArg;\n      while ((lastArg = argList.getLastChild()) != null) {\n        Var var = fnScope.getVar(lastArg.getString());\n        if (!referenced.contains(var)) {\n          argList.removeChild(lastArg);\n          compiler.reportCodeChange();\n        } else {\n          break;\n        }\n      }\n    } else {\n      callSiteOptimizer.optimize(fnScope, referenced);\n    }\n  }\n  \n  /**\n   * Collect all referenced variables within the scope as a list.\n   */\n  private List<Var> collectReferencedVars(Scope s) {\n    List<Var> result = new ArrayList<Var>();\n    for (Var v : s.getVars()) {\n      if (v.isReferenced()) {\n        result.add(v);\n      }\n    }\n    result.addAll(s.getArguments());\n    for (Scope child : s.children) {\n      result.addAll(collectReferencedVars(child));\n    }\n    return result;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/RemoveUnusedVars.java b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\nindex dfad51bc..9e58120c 100644\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n@@ -388,6 +388,7 @@ class RemoveUnusedVars\n     Node argList = getFunctionArgList(function);\n     boolean modifyCallers = modifyCallSites\n         && callSiteOptimizer.canModifyCallers(function);\n+    List<Var> referenced = collectReferencedVars(fnScope);\n     if (!modifyCallers) {\n       // Strip unreferenced args off the end of the function declaration.\n       Node lastArg;\n@@ -404,6 +405,23 @@ class RemoveUnusedVars\n       callSiteOptimizer.optimize(fnScope, referenced);\n     }\n   }\n+  \n+  /**\n+   * Collect all referenced variables within the scope as a list.\n+   */\n+  private List<Var> collectReferencedVars(Scope s) {\n+    List<Var> result = new ArrayList<Var>();\n+    for (Var v : s.getVars()) {\n+      if (v.isReferenced()) {\n+        result.add(v);\n+      }\n+    }\n+    result.addAll(s.getArguments());\n+    for (Scope child : s.children) {\n+      result.addAll(collectReferencedVars(child));\n+    }\n+    return result;\n+  }\n \n \n   /**",
    "result_reason": "error: method optimize in class CallSiteOptimizer cannot be applied to given types;",
    "test_result": "ERROR"
}