{
    "patch": "import com.google.javascript.jscomp.ControlFlowGraph;\nimport com.google.javascript.jscomp.NodeUtil;\nimport com.google.javascript.rhino.Node;\nimport java.util.HashSet;\nimport java.util.Set;\n\npublic class MyClass {\n    private Set<String> dependentNames = new HashSet<>();\n\n    // constructor which initializes dependentNames - omitted for brevity\n\n    public boolean apply(Node n) {\n        // When the node is null it means, we reached the implicit return\n        // where the function returns (possibly without a return statement)\n        if (n == null) {\n            return false;\n        }\n\n        if (n.isCall() && !NodeUtil.functionCallHasSideEffects(n)) {\n            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n                if (c.isName() && dependentNames.contains(c.getString())) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n            return true;\n        }\n\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n                return true;\n            }\n        }\n        return false;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..eff0f8c0 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -81,32 +81,45 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n   private static final Predicate<Node> SIDE_EFFECT_PREDICATE =\n     new Predicate<Node>() {\n       @Override\n-      public boolean apply(Node n) {\n+import com.google.javascript.jscomp.ControlFlowGraph;\n+import com.google.javascript.jscomp.NodeUtil;\n+import com.google.javascript.rhino.Node;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class MyClass {\n+    private Set<String> dependentNames = new HashSet<>();\n+\n+    // constructor which initializes dependentNames - omitted for brevity\n+\n+    public boolean apply(Node n) {\n         // When the node is null it means, we reached the implicit return\n-        // where the function returns (possibly without an return statement)\n+        // where the function returns (possibly without a return statement)\n         if (n == null) {\n-          return false;\n+            return false;\n         }\n \n-        // TODO(user): We only care about calls to functions that\n-        // passes one of the dependent variable to a non-side-effect free\n-        // function.\n-        if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n-          return true;\n+        if (n.isCall() && !NodeUtil.functionCallHasSideEffects(n)) {\n+            for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+                if (c.isName() && dependentNames.contains(c.getString())) {\n+                    return true;\n+                }\n+            }\n+            return false;\n         }\n \n         if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n-          return true;\n+            return true;\n         }\n \n-\n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-          if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n-            return true;\n-          }\n+            if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+                return true;\n+            }\n         }\n         return false;\n-      }\n+    }\n+}\n   };\n \n   public FlowSensitiveInlineVariables(AbstractCompiler compiler) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}