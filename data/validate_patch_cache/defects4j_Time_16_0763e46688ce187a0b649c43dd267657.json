{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        Chronology chrono = instant.getChronology();\n        DateTimeZone zone = chrono.getZone();\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instant.getMillis(), chrono, zone, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        if (bucket.getZone() != null) {\n            chrono = chrono.withZone(bucket.getZone());\n            zone = bucket.getZone();\n        }\n\n        long instantMillis = bucket.computeMillis(true, text);\n        if (iZone != null) {\n            zone = iZone;\n        }\n\n        instant.setMillis(instantMillis);\n        instant.setChronology(chrono);\n        instant.setZone(zone);\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..1a591431 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,27 +699,27 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n-        long instantMillis = instant.getMillis();\n+\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n-        chrono = selectChronology(chrono);\n-        \n+        DateTimeZone zone = chrono.getZone();\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+                instant.getMillis(), chrono, zone, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n+\n+        if (bucket.getZone() != null) {\n             chrono = chrono.withZone(bucket.getZone());\n+            zone = bucket.getZone();\n         }\n-        instant.setChronology(chrono);\n+\n+        long instantMillis = bucket.computeMillis(true, text);\n         if (iZone != null) {\n-            instant.setZone(iZone);\n+            zone = iZone;\n         }\n+\n+        instant.setMillis(instantMillis);\n+        instant.setChronology(chrono);\n+        instant.setZone(zone);\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: no suitable constructor found for DateTimeParserBucket(long,Chronology,DateTimeZone,Locale,Integer,int)",
    "test_result": "ERROR"
}