{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        long prev = Long.MIN_VALUE;\n        long next = Long.MAX_VALUE;\n        int offsetAdjustment = 0;\n        if (offsetLocal >= 0) {\n            prev = previousTransition(instantLocal);\n            if (prev != instantLocal) {\n                offsetAdjustment = getOffset(prev);\n            }\n        }\n        if (offsetAdjustment == offsetLocal) {\n            next = nextTransition(instantLocal);\n            if (instantLocal < next) {\n                return offsetLocal;\n            }\n            offsetAdjustment = getOffset(next);\n        }\n        if (next - instantLocal < instantLocal - prev) {\n            return offsetAdjustment;\n        }\n        return offsetLocal;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ef78cc27 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,27 +877,27 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n+        long prev = Long.MIN_VALUE;\n+        long next = Long.MAX_VALUE;\n+        int offsetAdjustment = 0;\n+        if (offsetLocal >= 0) {\n+            prev = previousTransition(instantLocal);\n+            if (prev != instantLocal) {\n+                offsetAdjustment = getOffset(prev);\n+            }\n+        }\n+        if (offsetAdjustment == offsetLocal) {\n+            next = nextTransition(instantLocal);\n+            if (instantLocal < next) {\n+                return offsetLocal;\n             }\n+            offsetAdjustment = getOffset(next);\n+        }\n+        if (next - instantLocal < instantLocal - prev) {\n+            return offsetAdjustment;\n         }\n-        return offsetAdjusted;\n+        return offsetLocal;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<2002-06-03T00:00:00.000-00:01:15> but was:<2002-06-02T00:00:00.000-00:01:15>",
    "test_result": "FAIL"
}