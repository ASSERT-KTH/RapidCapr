{
    "patch": "                if (offsetAdjusted < offsetLocal) {\n                    long newInstantLocal = instantLocal + (offsetLocal - offsetAdjusted);\n                    int newOffsetLocal = getOffset(newInstantLocal);\n                    if (newOffsetLocal == offsetLocal) {\n                        return offsetLocal;\n                    }\n                    // If the new offset doesn't match the old one, find the next transition that \n                    // returns the new offset.\n                    long nextLocalTransition = nextTransition(instantLocal);\n                    while (nextLocalTransition <= newInstantLocal) {\n                        int nextLocalOffset = getOffset(nextLocalTransition);\n                        if (nextLocalOffset == newOffsetLocal) {\n                            return newOffsetLocal;\n                        }\n                        nextLocalTransition = nextTransition(nextLocalTransition);\n                    }\n                    return offsetLocal;\n                }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex a320022c..ac6fbe82 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -896,6 +896,24 @@ public abstract class DateTimeZone implements Serializable {\n                     return offsetLocal;\n                 }\n             }\n+                if (offsetAdjusted < offsetLocal) {\n+                    long newInstantLocal = instantLocal + (offsetLocal - offsetAdjusted);\n+                    int newOffsetLocal = getOffset(newInstantLocal);\n+                    if (newOffsetLocal == offsetLocal) {\n+                        return offsetLocal;\n+                    }\n+                    // If the new offset doesn't match the old one, find the next transition that \n+                    // returns the new offset.\n+                    long nextLocalTransition = nextTransition(instantLocal);\n+                    while (nextLocalTransition <= newInstantLocal) {\n+                        int nextLocalOffset = getOffset(nextLocalTransition);\n+                        if (nextLocalOffset == newOffsetLocal) {\n+                            return newOffsetLocal;\n+                        }\n+                        nextLocalTransition = nextTransition(nextLocalTransition);\n+                    }\n+                    return offsetLocal;\n+                }\n         }\n         return offsetAdjusted;\n     }",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}