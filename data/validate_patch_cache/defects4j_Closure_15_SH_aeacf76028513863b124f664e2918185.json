{
    "patch": "if (n.isClass()) {\n  return false; // Skip class definitions\n}\nif (n.isFunction()) {\n  if (n.isArrowFunction()) {\n    // Arrow functions don't have side effects\n    return false;\n  } else {\n    return NodeUtil.functionHasSideEffects(n);\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..1879b4af 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,17 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isClass()) {\n+  return false; // Skip class definitions\n+}\n+if (n.isFunction()) {\n+  if (n.isArrowFunction()) {\n+    // Arrow functions don't have side effects\n+    return false;\n+  } else {\n+    return NodeUtil.functionHasSideEffects(n);\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}