{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n    int seconds = getSeconds();\n    int minutes = getMinutes();\n    int hours = getHours();\n    int days = getDays();\n    int weeks = getWeeks();\n    int months = getMonths();\n    int years = getYears();\n    if (type.isSupported(DurationFieldType.years())) {\n        long totalMonths = (((long) years) * ((long) 12)) + ((long) months);\n        years = Math.toIntExact(totalMonths / 12);\n        months = Math.toIntExact(totalMonths % 12);\n        if (years != getYears()) {\n            long yearMillis = ((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n            millis = FieldUtils.safeAdd(millis, yearMillis);\n        }\n        if (months != getMonths()) {\n            long monthMillis = ((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n            millis = FieldUtils.safeAdd(millis, monthMillis);\n        }\n    } else {\n        if (years != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (months != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    if (type.isSupported(DurationFieldType.days())) {\n        long totalMillis = (((((long) weeks) * ((long) 7)) + ((long) days)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        days = Math.toIntExact(totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n        millis = FieldUtils.safeAdd(millis, totalMillis);\n    } else {\n        if (days != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n        if (weeks != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    if (type.isSupported(DurationFieldType.hours())) {\n        long hourMillis = ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n        hours = Math.toIntExact(hourMillis / DateTimeConstants.MILLIS_PER_HOUR);\n        millis = FieldUtils.safeAdd(millis, hourMillis);\n    } else {\n        if (hours != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    if (type.isSupported(DurationFieldType.minutes())) {\n        long minuteMillis = ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n        minutes = Math.toIntExact(minuteMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n        millis = FieldUtils.safeAdd(millis, minuteMillis);\n    } else {\n        if (minutes != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    if (type.isSupported(DurationFieldType.seconds())) {\n        long secondMillis = ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n        seconds = Math.toIntExact(secondMillis / DateTimeConstants.MILLIS_PER_SECOND);\n        millis = FieldUtils.safeAdd(millis, secondMillis);\n    } else {\n        if (seconds != 0) {\n            throw new UnsupportedOperationException(\"Field is not supported\");\n        }\n    }\n    return new Period(millis, PeriodType.time().withTimeFieldsRemoved().withFieldsRemoved(type));\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..ad116c97 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,76 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+    int seconds = getSeconds();\n+    int minutes = getMinutes();\n+    int hours = getHours();\n+    int days = getDays();\n+    int weeks = getWeeks();\n+    int months = getMonths();\n+    int years = getYears();\n+    if (type.isSupported(DurationFieldType.years())) {\n+        long totalMonths = (((long) years) * ((long) 12)) + ((long) months);\n+        years = Math.toIntExact(totalMonths / 12);\n+        months = Math.toIntExact(totalMonths % 12);\n+        if (years != getYears()) {\n+            long yearMillis = ((long) years) * ((long) DateTimeConstants.MILLIS_PER_YEAR);\n+            millis = FieldUtils.safeAdd(millis, yearMillis);\n+        }\n+        if (months != getMonths()) {\n+            long monthMillis = ((long) months) * ((long) DateTimeConstants.MILLIS_PER_MONTH);\n+            millis = FieldUtils.safeAdd(millis, monthMillis);\n+        }\n+    } else {\n+        if (years != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+        if (months != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+    }\n+    if (type.isSupported(DurationFieldType.days())) {\n+        long totalMillis = (((((long) weeks) * ((long) 7)) + ((long) days)) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        days = Math.toIntExact(totalMillis / DateTimeConstants.MILLIS_PER_DAY);\n+        millis = FieldUtils.safeAdd(millis, totalMillis);\n+    } else {\n+        if (days != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+        if (weeks != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+    }\n+    if (type.isSupported(DurationFieldType.hours())) {\n+        long hourMillis = ((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR);\n+        hours = Math.toIntExact(hourMillis / DateTimeConstants.MILLIS_PER_HOUR);\n+        millis = FieldUtils.safeAdd(millis, hourMillis);\n+    } else {\n+        if (hours != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n         }\n-        return result;\n     }\n+    if (type.isSupported(DurationFieldType.minutes())) {\n+        long minuteMillis = ((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE);\n+        minutes = Math.toIntExact(minuteMillis / DateTimeConstants.MILLIS_PER_MINUTE);\n+        millis = FieldUtils.safeAdd(millis, minuteMillis);\n+    } else {\n+        if (minutes != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+    }\n+    if (type.isSupported(DurationFieldType.seconds())) {\n+        long secondMillis = ((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND);\n+        seconds = Math.toIntExact(secondMillis / DateTimeConstants.MILLIS_PER_SECOND);\n+        millis = FieldUtils.safeAdd(millis, secondMillis);\n+    } else {\n+        if (seconds != 0) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+    }\n+    return new Period(millis, PeriodType.time().withTimeFieldsRemoved().withFieldsRemoved(type));\n+}\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}