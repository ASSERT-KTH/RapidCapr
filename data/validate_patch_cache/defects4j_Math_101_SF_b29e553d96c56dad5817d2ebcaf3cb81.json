{
    "patch": "    public Complex parse(String source, ParsePosition pos) {\n        int initialIndex = pos.getIndex();\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse real\n        Number re = parseNumber(source, getRealFormat(), pos);\n        if (re == null) {\n            // invalid real number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse sign\n        int startIndex = pos.getIndex();\n        char c = parseNextCharacter(source, pos);\n        int sign = 0;\n        switch (c) {\n        case 0 :\n            // no sign\n            // return real only complex number\n            return new Complex(re.doubleValue(), 0.0);\n        case '-' :\n            sign = -1;\n            break;\n        case '+' :\n            sign = 1;\n            break;\n        default :\n            // invalid sign\n            // set index back to initial, error index should be the last\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(startIndex);\n            return null;\n        }\n\n        // parse whitespace\n        parseAndIgnoreWhitespace(source, pos);\n\n        // parse imaginary\n        Number im = parseNumber(source, getRealFormat(), pos);\n        if (im == null) {\n            // invalid imaginary number\n            // set index back to initial, error index should already be set\n            // character examined.\n            pos.setIndex(initialIndex);\n            return null;\n        }\n\n        // parse imaginary character\n        String imaginaryCharacter = getImaginaryCharacter();\n        int n = imaginaryCharacter.length();\n        int endIndex = pos.getIndex() + n;\n        if (endIndex > source.length() || !source.substring(pos.getIndex(), endIndex).equals(imaginaryCharacter)) {\n            // set index back to initial, error index should be the start index\n            // character examined.\n            pos.setIndex(initialIndex);\n            pos.setErrorIndex(initialIndex);\n            return null;\n        }\n        pos.setIndex(endIndex);\n\n        return new Complex(re.doubleValue(), im.doubleValue() * sign);\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/ComplexFormat.java b/src/java/org/apache/commons/math/complex/ComplexFormat.java\nindex b404bc415..28b7fcc46 100644\n--- a/src/java/org/apache/commons/math/complex/ComplexFormat.java\n+++ b/src/java/org/apache/commons/math/complex/ComplexFormat.java\n@@ -371,16 +371,14 @@ public class ComplexFormat extends Format implements Serializable {\n         }\n \n         // parse imaginary character\n-        int n = getImaginaryCharacter().length();\n-        startIndex = pos.getIndex();\n-        int endIndex = startIndex + n;\n-        if (\n-            source.substring(startIndex, endIndex).compareTo(\n-            getImaginaryCharacter()) != 0) {\n+        String imaginaryCharacter = getImaginaryCharacter();\n+        int n = imaginaryCharacter.length();\n+        int endIndex = pos.getIndex() + n;\n+        if (endIndex > source.length() || !source.substring(pos.getIndex(), endIndex).equals(imaginaryCharacter)) {\n             // set index back to initial, error index should be the start index\n             // character examined.\n             pos.setIndex(initialIndex);\n-            pos.setErrorIndex(startIndex);\n+            pos.setErrorIndex(initialIndex);\n             return null;\n         }\n         pos.setIndex(endIndex);",
    "result_reason": "junit.framework.AssertionFailedError: expected:<5> but was:<0>",
    "test_result": "FAIL"
}