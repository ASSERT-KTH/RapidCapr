{
    "patch": "if (!field.isSupported()) {\n    DurationFieldType rangeType = field.getRangeDurationType();\n    if (rangeType == null || !rangeType.isSupported()) {\n        throw new IllegalStateException(\"Cannot reset \" + savedFields[i].getField());\n    }\n    int value = savedFields[i].getValue();\n    int range = FieldUtils.getWrappedValue(value, field.getRangeDurationField().getType());\n    int minimumValue = field.getMinimumValue();\n    int maximumValue = field.getMaximumValue();\n    value = FieldUtils.getWrappedValue(value, minimumValue, maximumValue + 1);\n    value = FieldUtils.setRange(value, range, minimumValue, maximumValue);\n    millis = field.add(millis, value - savedFields[i].getValue());\n    savedFields[i].setValue(value);\n} else {\n    millis = field.add(millis, savedFields[i].getValue());\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..5e4fc9c7 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,22 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+if (!field.isSupported()) {\n+    DurationFieldType rangeType = field.getRangeDurationType();\n+    if (rangeType == null || !rangeType.isSupported()) {\n+        throw new IllegalStateException(\"Cannot reset \" + savedFields[i].getField());\n+    }\n+    int value = savedFields[i].getValue();\n+    int range = FieldUtils.getWrappedValue(value, field.getRangeDurationField().getType());\n+    int minimumValue = field.getMinimumValue();\n+    int maximumValue = field.getMaximumValue();\n+    value = FieldUtils.getWrappedValue(value, minimumValue, maximumValue + 1);\n+    value = FieldUtils.setRange(value, range, minimumValue, maximumValue);\n+    millis = field.add(millis, value - savedFields[i].getValue());\n+    savedFields[i].setValue(value);\n+} else {\n+    millis = field.add(millis, savedFields[i].getValue());\n+}\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}