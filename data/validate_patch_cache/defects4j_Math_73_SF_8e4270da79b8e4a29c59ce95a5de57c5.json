{
    "patch": "public double solve(final UnivariateRealFunction f,\n                    final double min, final double max, final double initial)\n        throws MaxIterationsExceededException, FunctionEvaluationException {\n\n    clearResult();\n    verifySequence(min, initial, max);\n\n    double yMin = f.value(min);\n    double yMax = f.value(max);\n\n    if (yMin * yMax > 0) {\n        throw new IllegalArgumentException(\"Interval does not bracket root: [\" + min + \", \" + max + \"]\");\n    }\n\n    double yInitial = f.value(initial);\n\n    if (Math.abs(yInitial) <= functionValueAccuracy) {\n        setResult(initial, 0);\n        return result;\n    }\n\n    int iterations = 0;\n    double oldDelta = Double.POSITIVE_INFINITY, delta = Double.POSITIVE_INFINITY, x = initial;\n    double fx = yInitial, fy = yInitial, fp, s, q, r;\n    double a = min, b = max;\n\n    while(iterations++ < maximalIterationCount && delta > functionValueAccuracy) {\n        fp = fy;\n        fy = fx;\n\n        s = (Double.isNaN(yMin) || Double.isNaN(yMax)) ? x : inverseInterpolation(x, yMin, yMax, fx, fy, fp);\n\n        q = r;\n        r = (s == a || s == b) ? 0.5 : Math.abs((q - fx) * (s - fx)) / ((fy - fx) * (q - s));\n\n        if (r > 1e-7) {\n            a = x;\n            b = x + (b - x) * sgn(fx - fy);\n            delta = Math.abs(b - a);\n            x = b - r * (b - a);\n        } else {\n            delta = Math.abs(s - x);\n            x = s;\n        }\n\n        if (delta > oldDelta) {\n            // force bisection\n            delta = 0.5 * (b - a);\n            x = a + delta;\n        }\n\n        oldDelta = delta;\n\n        fx = f.value(x);\n\n        if (fx == 0.0) {\n            setResult(x, iterations);\n            return result;\n        }\n\n        if (fx * fy < 0) {\n            yMin = fy;\n            yMax = fx;\n        } else {\n            if (fx * fp < 0) {\n                yMin = fx;\n                yMax = fp;\n            } else {\n                if (fx * fy > 0) {\n                    yMin = fy;\n                    yMax = yMin;\n                } else {\n                    yMin = fx;\n                    yMax = yMin;\n                }\n            }\n        }\n    }\n\n    setResult(x, iterations);\n    return result;\n}\n\nprivate int sgn(double value) {\n    return value < 0 ? -1 : 1;\n}\n\nprivate double inverseInterpolation(double x, double yMin, double yMax, double fx, double fy, double fp) {\n    double b, c, e, d, a;\n    b = fx;\n    c = fy;\n    d = fp;\n    // The equality test (b == c) is intentional,\n    // it is part of the improvement 1(b).\n    if (b == c) {\n        // Linear interpolation between a and x\n        return x - fx / (fp - fx) * (x - yMin);\n    }\n\n    a = ((yMin - x) * fy + (x - yMax) * fp) / (fy - fp);\n    e = ((yMin - x) * b + (x - yMax) * c) / (b - c);\n\n    // This part is different from the original Brent's.\n    if (Double.isNaN(a) || Double.isInfinite(a)) {\n        // If we had an overflow here, we will satisfy b==c anyway :-)\n        return e;\n    }\n\n    // Inverse quadratic interpolation\n    double s = yMin + (fx - fy) * (yMax - yMin) / (fy - 2 * fx + fp);\n    // Take the part that is inside the bracket in (2.3)\n    double t = (b - fx) * (c - fx) > 0 ? s : // Condition (2.3) is met (the signs of the first derivatives at the endpoints are opposite)\n            fx + 0.5 * (e - fx); // Bissection\n\n    // Adjust the extreme points (section 3.4)\n    if (b < c) {\n        if (t < b || t > c) {\n            t = 0.5 * (b + c);\n        }\n    } else {\n        if (t < c || t > b) {\n            t = 0.5 * (b + c);\n        }\n    }\n\n    return t;\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\nindex 8142b5edb..50ccb4bd3 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BrentSolver.java\n@@ -95,50 +95,134 @@ public class BrentSolver extends UnivariateRealSolverImpl {\n      * @throws IllegalArgumentException if initial is not between min and max\n      * (even if it <em>is</em> a root)\n      */\n-    public double solve(final UnivariateRealFunction f,\n-                        final double min, final double max, final double initial)\n+public double solve(final UnivariateRealFunction f,\n+                    final double min, final double max, final double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n \n-        clearResult();\n-        verifySequence(min, initial, max);\n+    clearResult();\n+    verifySequence(min, initial, max);\n \n-        // return the initial guess if it is good enough\n-        double yInitial = f.value(initial);\n-        if (Math.abs(yInitial) <= functionValueAccuracy) {\n-            setResult(initial, 0);\n-            return result;\n-        }\n+    double yMin = f.value(min);\n+    double yMax = f.value(max);\n \n-        // return the first endpoint if it is good enough\n-        double yMin = f.value(min);\n-        if (Math.abs(yMin) <= functionValueAccuracy) {\n-            setResult(yMin, 0);\n-            return result;\n+    if (yMin * yMax > 0) {\n+        throw new IllegalArgumentException(\"Interval does not bracket root: [\" + min + \", \" + max + \"]\");\n+    }\n+\n+    double yInitial = f.value(initial);\n+\n+    if (Math.abs(yInitial) <= functionValueAccuracy) {\n+        setResult(initial, 0);\n+        return result;\n+    }\n+\n+    int iterations = 0;\n+    double oldDelta = Double.POSITIVE_INFINITY, delta = Double.POSITIVE_INFINITY, x = initial;\n+    double fx = yInitial, fy = yInitial, fp, s, q, r;\n+    double a = min, b = max;\n+\n+    while(iterations++ < maximalIterationCount && delta > functionValueAccuracy) {\n+        fp = fy;\n+        fy = fx;\n+\n+        s = (Double.isNaN(yMin) || Double.isNaN(yMax)) ? x : inverseInterpolation(x, yMin, yMax, fx, fy, fp);\n+\n+        q = r;\n+        r = (s == a || s == b) ? 0.5 : Math.abs((q - fx) * (s - fx)) / ((fy - fx) * (q - s));\n+\n+        if (r > 1e-7) {\n+            a = x;\n+            b = x + (b - x) * sgn(fx - fy);\n+            delta = Math.abs(b - a);\n+            x = b - r * (b - a);\n+        } else {\n+            delta = Math.abs(s - x);\n+            x = s;\n         }\n \n-        // reduce interval if min and initial bracket the root\n-        if (yInitial * yMin < 0) {\n-            return solve(f, min, yMin, initial, yInitial, min, yMin);\n+        if (delta > oldDelta) {\n+            // force bisection\n+            delta = 0.5 * (b - a);\n+            x = a + delta;\n         }\n \n-        // return the second endpoint if it is good enough\n-        double yMax = f.value(max);\n-        if (Math.abs(yMax) <= functionValueAccuracy) {\n-            setResult(yMax, 0);\n+        oldDelta = delta;\n+\n+        fx = f.value(x);\n+\n+        if (fx == 0.0) {\n+            setResult(x, iterations);\n             return result;\n         }\n \n-        // reduce interval if initial and max bracket the root\n-        if (yInitial * yMax < 0) {\n-            return solve(f, initial, yInitial, max, yMax, initial, yInitial);\n+        if (fx * fy < 0) {\n+            yMin = fy;\n+            yMax = fx;\n+        } else {\n+            if (fx * fp < 0) {\n+                yMin = fx;\n+                yMax = fp;\n+            } else {\n+                if (fx * fy > 0) {\n+                    yMin = fy;\n+                    yMax = yMin;\n+                } else {\n+                    yMin = fx;\n+                    yMax = yMin;\n+                }\n+            }\n         }\n+    }\n+\n+    setResult(x, iterations);\n+    return result;\n+}\n+\n+private int sgn(double value) {\n+    return value < 0 ? -1 : 1;\n+}\n \n+private double inverseInterpolation(double x, double yMin, double yMax, double fx, double fy, double fp) {\n+    double b, c, e, d, a;\n+    b = fx;\n+    c = fy;\n+    d = fp;\n+    // The equality test (b == c) is intentional,\n+    // it is part of the improvement 1(b).\n+    if (b == c) {\n+        // Linear interpolation between a and x\n+        return x - fx / (fp - fx) * (x - yMin);\n+    }\n \n-        // full Brent algorithm starting with provided initial guess\n-        return solve(f, min, yMin, max, yMax, initial, yInitial);\n+    a = ((yMin - x) * fy + (x - yMax) * fp) / (fy - fp);\n+    e = ((yMin - x) * b + (x - yMax) * c) / (b - c);\n \n+    // This part is different from the original Brent's.\n+    if (Double.isNaN(a) || Double.isInfinite(a)) {\n+        // If we had an overflow here, we will satisfy b==c anyway :-)\n+        return e;\n     }\n \n+    // Inverse quadratic interpolation\n+    double s = yMin + (fx - fy) * (yMax - yMin) / (fy - 2 * fx + fp);\n+    // Take the part that is inside the bracket in (2.3)\n+    double t = (b - fx) * (c - fx) > 0 ? s : // Condition (2.3) is met (the signs of the first derivatives at the endpoints are opposite)\n+            fx + 0.5 * (e - fx); // Bissection\n+\n+    // Adjust the extreme points (section 3.4)\n+    if (b < c) {\n+        if (t < b || t > c) {\n+            t = 0.5 * (b + c);\n+        }\n+    } else {\n+        if (t < c || t > b) {\n+            t = 0.5 * (b + c);\n+        }\n+    }\n+\n+    return t;\n+}\n+\n     /**\n      * Find a zero in the given interval.\n      * <p>",
    "result_reason": "error: variable r might not have been initialized",
    "test_result": "ERROR"
}