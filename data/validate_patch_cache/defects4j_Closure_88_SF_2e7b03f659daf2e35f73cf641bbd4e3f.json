{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    }\n\n    // Check if variable is used as a FOR/IN variable\n    Scope scope = SyntacticScopeCreator.makeTyped(scopeCreator).createScope(n, null);\n    if (scope != null) {\n      Var v = scope.getVar(variable);\n      if (v != null && v.isForInVariable()) {\n        if (NodeUtil.isVanillaFor(n) || NodeUtil.isEnhancedFor(n)) {\n          if (NodeUtil.isName(n.getLastChild(), v.getName())) {\n            return VariableLiveness.READ;\n          }\n        }\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n        child != null; child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..7948a343 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -333,6 +333,19 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       }\n     }\n \n+    // Check if variable is used as a FOR/IN variable\n+    Scope scope = SyntacticScopeCreator.makeTyped(scopeCreator).createScope(n, null);\n+    if (scope != null) {\n+      Var v = scope.getVar(variable);\n+      if (v != null && v.isForInVariable()) {\n+        if (NodeUtil.isVanillaFor(n) || NodeUtil.isEnhancedFor(n)) {\n+          if (NodeUtil.isName(n.getLastChild(), v.getName())) {\n+            return VariableLiveness.READ;\n+          }\n+        }\n+      }\n+    }\n+\n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}