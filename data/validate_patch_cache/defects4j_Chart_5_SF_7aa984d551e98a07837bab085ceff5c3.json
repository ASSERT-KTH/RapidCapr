{
    "patch": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null || y == null) { // Fixed: check for null y value\n        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n    }\n    \n    int index = indexOf(x);\n\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        // If duplicate x is not allowed and the value already exists, update the y value and return the existing item\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        if (!existing.getY().equals(y)) { // Fixed: avoid updating if y value is the same\n            XYDataItem overwritten = new XYDataItem(existing.getX(), existing.getY());\n            existing.setY(y);\n            fireSeriesChanged();\n            return overwritten;\n        } else {\n            return existing;\n        }\n    } else {\n        // Create the new data item with the specified x and y values, and add to the appropriate position\n        XYDataItem newItem = new XYDataItem(x, y);\n\n        if (this.autoSort) {\n            // If auto-sort is enabled, use binary search to find the insertion point for the new data item\n            int insertionPoint = Collections.binarySearch(this.data, newItem);\n\n            if (insertionPoint >= 0 && this.allowDuplicateXValues) {\n                // If x values are allowed to be duplicated, insert the new item immediately after the existing item with the same x value\n                int nextIndex = insertionPoint + 1;\n                while (nextIndex < this.getItemCount() && newItem.getX().equals(\n                        ((XYDataItem) this.data.get(nextIndex)).getX())) {\n                    nextIndex++;\n                }\n                this.data.add(nextIndex, newItem);\n            } else {\n                // Otherwise, insert the new item at the appropriate position to maintain sorted order\n                this.data.add(-insertionPoint - 1, newItem);\n            }\n        } else {\n            // If auto-sort is not enabled, append the new data item to the end of the series\n            this.data.add(newItem);\n        }\n\n        if (this.getItemCount() > maximumItemCount) {\n            // If the new item exceeds the maximum item count, remove the oldest item in the series\n            this.data.remove(0);\n        }\n\n        fireSeriesChanged();\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/xy/XYSeries.java b/source/org/jfree/data/xy/XYSeries.java\nindex 0b37e6e..729ee50 100644\n--- a/source/org/jfree/data/xy/XYSeries.java\n+++ b/source/org/jfree/data/xy/XYSeries.java\n@@ -537,43 +537,58 @@ public class XYSeries extends Series implements Cloneable, Serializable {\n      * @return A copy of the overwritten data item, or <code>null</code> if no\n      *         item was overwritten.\n      */\n-    public XYDataItem addOrUpdate(Number x, Number y) {\n-        if (x == null) {\n-            throw new IllegalArgumentException(\"Null 'x' argument.\");\n-        }\n-\n-        // if we get to here, we know that duplicate X values are not permitted\n-        XYDataItem overwritten = null;\n-        int index = indexOf(x);\n-        if (index >= 0 && !this.allowDuplicateXValues) {\n-            XYDataItem existing = (XYDataItem) this.data.get(index);\n-            try {\n-                overwritten = (XYDataItem) existing.clone();\n-            }\n-            catch (CloneNotSupportedException e) {\n-                throw new SeriesException(\"Couldn't clone XYDataItem!\");\n-            }\n-            existing.setY(y);\n-        }\n-        else {\n-            // if the series is sorted, the negative index is a result from\n-            // Collections.binarySearch() and tells us where to insert the\n-            // new item...otherwise it will be just -1 and we should just\n-            // append the value to the list...\n-            if (this.autoSort) {\n-                this.data.add(-index - 1, new XYDataItem(x, y));\n-            }\n-            else {\n-                this.data.add(new XYDataItem(x, y));\n-            }\n-            // check if this addition will exceed the maximum item count...\n-            if (getItemCount() > this.maximumItemCount) {\n-                this.data.remove(0);\n-            }\n-        }\n-        fireSeriesChanged();\n-        return overwritten;\n-    }\n+public XYDataItem addOrUpdate(Number x, Number y) {\n+    if (x == null || y == null) { // Fixed: check for null y value\n+        throw new IllegalArgumentException(\"Null 'x' or 'y' argument.\");\n+    }\n+    \n+    int index = indexOf(x);\n+\n+    if (index >= 0 && !this.allowDuplicateXValues) {\n+        // If duplicate x is not allowed and the value already exists, update the y value and return the existing item\n+        XYDataItem existing = (XYDataItem) this.data.get(index);\n+        if (!existing.getY().equals(y)) { // Fixed: avoid updating if y value is the same\n+            XYDataItem overwritten = new XYDataItem(existing.getX(), existing.getY());\n+            existing.setY(y);\n+            fireSeriesChanged();\n+            return overwritten;\n+        } else {\n+            return existing;\n+        }\n+    } else {\n+        // Create the new data item with the specified x and y values, and add to the appropriate position\n+        XYDataItem newItem = new XYDataItem(x, y);\n+\n+        if (this.autoSort) {\n+            // If auto-sort is enabled, use binary search to find the insertion point for the new data item\n+            int insertionPoint = Collections.binarySearch(this.data, newItem);\n+\n+            if (insertionPoint >= 0 && this.allowDuplicateXValues) {\n+                // If x values are allowed to be duplicated, insert the new item immediately after the existing item with the same x value\n+                int nextIndex = insertionPoint + 1;\n+                while (nextIndex < this.getItemCount() && newItem.getX().equals(\n+                        ((XYDataItem) this.data.get(nextIndex)).getX())) {\n+                    nextIndex++;\n+                }\n+                this.data.add(nextIndex, newItem);\n+            } else {\n+                // Otherwise, insert the new item at the appropriate position to maintain sorted order\n+                this.data.add(-insertionPoint - 1, newItem);\n+            }\n+        } else {\n+            // If auto-sort is not enabled, append the new data item to the end of the series\n+            this.data.add(newItem);\n+        }\n+\n+        if (this.getItemCount() > maximumItemCount) {\n+            // If the new item exceeds the maximum item count, remove the oldest item in the series\n+            this.data.remove(0);\n+        }\n+\n+        fireSeriesChanged();\n+        return null;\n+    }\n+}\n \n     /**\n      * Returns the index of the item with the specified x-value, or a negative",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}