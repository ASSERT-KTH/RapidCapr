{
    "patch": "  /**\n   * Returns true if the new expression does not call a constructor function\n   * with local variables.\n   *\n   * <p>A constructor function has local variables if it is defined inside a\n   * function or if it refers to any local variables in its body.</p>\n   */\n  private static boolean callHasNoLocalResult(Node callNode) {\n    Node ctor = callNode.getFirstChild();\n    if (ctor.getType() != Token.NAME) {\n      return false;\n    }\n    Scope.Var var = getLValueDeclaration(ctor);\n    if (var == null || var.getNode() == null) {\n      return false;\n    }\n    return !NodeTraversal.hasBlockScopedDeclarations(\n        var.getNode().getSecondChild().getLastChild().getLastChild());\n  }\n\n  /**\n   * Returns the declaration scope of the given l-value name node.\n   *\n   * <p>A l-value name node is a node whose type is NAME, and that appears\n   * in a position that allows it to be the target of an assignment.</p>\n   */\n  private static Scope.Var getLValueDeclaration(Node nameNode) {\n    Node parent = nameNode.getParent();\n    switch (parent.getType()) {\n      case Token.ASSIGN:\n      case Token.VAR:\n        return parent.getScope().getVar(nameNode.getString());\n      case Token.CATCH:\n        return parent.getFirstChild().getScope().getVar(nameNode.getString());\n      case Token.DEFAULT_VALUE:\n        if (nameNode == parent.getFirstChild()) {\n          return null;\n        }\n        return parent.getLastChild().getScope().getVar(nameNode.getString());\n      default:\n        return null;\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex dd78f900..62539bd1 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -2421,70 +2421,47 @@ public final class NodeUtil {\n    * @return Whether the node is known to be a value that is not a reference\n    *     outside the expression scope.\n    */\n-  static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {\n-    switch (value.getType()) {\n+  /**\n+   * Returns true if the new expression does not call a constructor function\n+   * with local variables.\n+   *\n+   * <p>A constructor function has local variables if it is defined inside a\n+   * function or if it refers to any local variables in its body.</p>\n+   */\n+  private static boolean callHasNoLocalResult(Node callNode) {\n+    Node ctor = callNode.getFirstChild();\n+    if (ctor.getType() != Token.NAME) {\n+      return false;\n+    }\n+    Scope.Var var = getLValueDeclaration(ctor);\n+    if (var == null || var.getNode() == null) {\n+      return false;\n+    }\n+    return !NodeTraversal.hasBlockScopedDeclarations(\n+        var.getNode().getSecondChild().getLastChild().getLastChild());\n+  }\n+\n+  /**\n+   * Returns the declaration scope of the given l-value name node.\n+   *\n+   * <p>A l-value name node is a node whose type is NAME, and that appears\n+   * in a position that allows it to be the target of an assignment.</p>\n+   */\n+  private static Scope.Var getLValueDeclaration(Node nameNode) {\n+    Node parent = nameNode.getParent();\n+    switch (parent.getType()) {\n       case Token.ASSIGN:\n-        // A result that is aliased by a non-local name, is the effectively the\n-        // same as returning a non-local name, but this doesn't matter if the\n-        // value is immutable.\n-        return NodeUtil.isImmutableValue(value.getLastChild())\n-            || (locals.apply(value)\n-                && evaluatesToLocalValue(value.getLastChild(), locals));\n-      case Token.COMMA:\n-        return evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.AND:\n-      case Token.OR:\n-        return evaluatesToLocalValue(value.getFirstChild(), locals)\n-           && evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.HOOK:\n-        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n-           && evaluatesToLocalValue(value.getLastChild(), locals);\n-      case Token.INC:\n-      case Token.DEC:\n-        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n-          return evaluatesToLocalValue(value.getFirstChild(), locals);\n-        } else {\n-          return true;\n+      case Token.VAR:\n+        return parent.getScope().getVar(nameNode.getString());\n+      case Token.CATCH:\n+        return parent.getFirstChild().getScope().getVar(nameNode.getString());\n+      case Token.DEFAULT_VALUE:\n+        if (nameNode == parent.getFirstChild()) {\n+          return null;\n         }\n-      case Token.THIS:\n-        return locals.apply(value);\n-      case Token.NAME:\n-        return isImmutableValue(value) || locals.apply(value);\n-      case Token.GETELEM:\n-      case Token.GETPROP:\n-        // There is no information about the locality of object properties.\n-        return locals.apply(value);\n-      case Token.CALL:\n-        return callHasLocalResult(value)\n-            || isToStringMethodCall(value)\n-            || locals.apply(value);\n-      case Token.NEW:\n-        // TODO(nicksantos): This needs to be changed so that it\n-        // returns true iff we're sure the value was never aliased from inside\n-        // the constructor (similar to callHasLocalResult)\n-        return true;\n-      case Token.FUNCTION:\n-      case Token.REGEXP:\n-      case Token.ARRAYLIT:\n-      case Token.OBJECTLIT:\n-        // Literals objects with non-literal children are allowed.\n-        return true;\n-      case Token.IN:\n-        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n-        return true;\n+        return parent.getLastChild().getScope().getVar(nameNode.getString());\n       default:\n-        // Other op force a local value:\n-        //  x = '' + g (x is now an local string)\n-        //  x -= g (x is now an local number)\n-        if (isAssignmentOp(value)\n-            || isSimpleOperator(value)\n-            || isImmutableValue(value)) {\n-          return true;\n-        }\n-\n-        throw new IllegalStateException(\n-            \"Unexpected expression node\" + value +\n-            \"\\n parent:\" + value.getParent());\n+        return null;\n     }\n   }\n ",
    "result_reason": "error: method evaluatesToLocalValue in class NodeUtil cannot be applied to given types;",
    "test_result": "ERROR"
}