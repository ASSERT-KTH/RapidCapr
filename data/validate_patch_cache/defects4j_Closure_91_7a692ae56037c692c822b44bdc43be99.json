{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.NodeTraversal;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.jstype.JSDocInfo;\nimport com.google.javascript.rhino.jstype.JSType;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport static com.google.javascript.rhino.NodeUtil.getFunctionBody;\nimport static com.google.javascript.rhino.NodeUtil.isFunctionExpression;\n\npublic boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n\n  if (n.getType() == Token.FUNCTION) {\n    // Don't traverse functions that are constructors or have the @this\n    // or @override annotation.\n    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n    if (jsDoc != null &&\n        (jsDoc.isConstructor() ||\n         jsDoc.isInterface() ||\n         jsDoc.hasThisType() ||\n         jsDoc.isOverride())) {\n      return false;\n    }\n\n    // Don't traverse functions unless they would normally\n    // be able to have a @this annotation associated with them. e.g.,\n    // var a = function() { }; // or\n    // function a() {} // or\n    // a.x = function() {}; // or\n    // var a = {x: function() {}};\n    int pType = parent.getType();\n    if (!(pType == Token.BLOCK ||\n          pType == Token.SCRIPT ||\n          pType == Token.NAME ||\n          pType == Token.ASSIGN ||\n\n          // object literal keys\n          pType == Token.STRING ||\n          pType == Token.NUMBER)) {\n      return false;\n    }\n\n    // Don't traverse functions that are getting lent to a prototype.\n    if (n.getJSDocInfo() != null && n.getJSDocInfo().isLends()) {\n      Node objLit = n.getNext();\n      if (objLit != null &&\n          objLit.isObjectLit() &&\n          objLit.getNext() == null &&\n          objLit.getJSDocInfo() != null &&\n          objLit.getJSDocInfo().hasThisType()) {\n        return false;\n      }\n    }\n  }\n\n  if (parent != null && parent.getType() == Token.ASSIGN) {\n    Node lhs = parent.getFirstChild();\n    Node rhs = lhs.getNext();\n\n    if (n == lhs) {\n      // Always traverse the left side of the assignment. To handle\n      // nested assignments properly (e.g., (a = this).property = c;),\n      // assignLhsChild should not be overridden.\n      if (assignLhsChild == null) {\n        assignLhsChild = lhs;\n      }\n    } else {\n      // Only traverse the right side if it's not an assignment to a prototype\n      // property or subproperty.\n      if (NodeUtil.isGet(lhs)) {\n        if (lhs.getType() == Token.GETPROP &&\n            lhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n        Node llhs = lhs.getFirstChild();\n        if (llhs.getType() == Token.GETPROP &&\n            llhs.getLastChild().getString().equals(\"prototype\")) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckGlobalThis.java b/src/com/google/javascript/jscomp/CheckGlobalThis.java\nindex fa598d2e..53c91ccf 100644\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n@@ -112,6 +112,96 @@ final class CheckGlobalThis implements Callback {\n       }\n \n       // Don't traverse functions that are getting lent to a prototype.\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.NodeTraversal;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSDocInfo;\n+import com.google.javascript.rhino.jstype.JSType;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.google.javascript.rhino.NodeUtil.getFunctionBody;\n+import static com.google.javascript.rhino.NodeUtil.isFunctionExpression;\n+\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+\n+  if (n.getType() == Token.FUNCTION) {\n+    // Don't traverse functions that are constructors or have the @this\n+    // or @override annotation.\n+    JSDocInfo jsDoc = getFunctionJsDocInfo(n);\n+    if (jsDoc != null &&\n+        (jsDoc.isConstructor() ||\n+         jsDoc.isInterface() ||\n+         jsDoc.hasThisType() ||\n+         jsDoc.isOverride())) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions unless they would normally\n+    // be able to have a @this annotation associated with them. e.g.,\n+    // var a = function() { }; // or\n+    // function a() {} // or\n+    // a.x = function() {}; // or\n+    // var a = {x: function() {}};\n+    int pType = parent.getType();\n+    if (!(pType == Token.BLOCK ||\n+          pType == Token.SCRIPT ||\n+          pType == Token.NAME ||\n+          pType == Token.ASSIGN ||\n+\n+          // object literal keys\n+          pType == Token.STRING ||\n+          pType == Token.NUMBER)) {\n+      return false;\n+    }\n+\n+    // Don't traverse functions that are getting lent to a prototype.\n+    if (n.getJSDocInfo() != null && n.getJSDocInfo().isLends()) {\n+      Node objLit = n.getNext();\n+      if (objLit != null &&\n+          objLit.isObjectLit() &&\n+          objLit.getNext() == null &&\n+          objLit.getJSDocInfo() != null &&\n+          objLit.getJSDocInfo().hasThisType()) {\n+        return false;\n+      }\n+    }\n+  }\n+\n+  if (parent != null && parent.getType() == Token.ASSIGN) {\n+    Node lhs = parent.getFirstChild();\n+    Node rhs = lhs.getNext();\n+\n+    if (n == lhs) {\n+      // Always traverse the left side of the assignment. To handle\n+      // nested assignments properly (e.g., (a = this).property = c;),\n+      // assignLhsChild should not be overridden.\n+      if (assignLhsChild == null) {\n+        assignLhsChild = lhs;\n+      }\n+    } else {\n+      // Only traverse the right side if it's not an assignment to a prototype\n+      // property or subproperty.\n+      if (NodeUtil.isGet(lhs)) {\n+        if (lhs.getType() == Token.GETPROP &&\n+            lhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+        Node llhs = lhs.getFirstChild();\n+        if (llhs.getType() == Token.GETPROP &&\n+            llhs.getLastChild().getString().equals(\"prototype\")) {\n+          return false;\n+        }\n+      }\n+    }\n+  }\n+\n+  return true;\n+}\n     }\n \n     if (parent != null && parent.getType() == Token.ASSIGN) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}