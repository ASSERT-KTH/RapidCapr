{
    "patch": "                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n                    int year = e.getIllegalNumberValue();\n                    if (year >= 0 && year < 100) {\n                        year = iDefaultYear / 100 * 100 + year;\n                        saveField(DateTimeFieldType.year(), year);\n                        return computeMillis(resetFields, text);\n                    }\n                }\n                throw e;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..c9358d28 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -352,6 +352,15 @@ public class DateTimeParserBucket {\n             for (int i = 0; i < count; i++) {\n                 millis = savedFields[i].set(millis, resetFields);\n             }\n+                if (e.getDateTimeFieldType() == DateTimeFieldType.year()) {\n+                    int year = e.getIllegalNumberValue();\n+                    if (year >= 0 && year < 100) {\n+                        year = iDefaultYear / 100 * 100 + year;\n+                        saveField(DateTimeFieldType.year(), year);\n+                        return computeMillis(resetFields, text);\n+                    }\n+                }\n+                throw e;\n         } catch (IllegalFieldValueException e) {\n             if (text != null) {\n                 e.prependMessage(\"Cannot parse \\\"\" + text + '\"');",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}