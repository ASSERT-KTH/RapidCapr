{
    "patch": "```\npublic OpenMapRealMatrix(int rowDimension, int columnDimension) {\n    super(rowDimension, columnDimension);\n    if (rowDimension <= 0 || columnDimension <= 0) {\n        throw new IllegalArgumentException(\"Matrix dimensions must be positive.\");\n    }\n    long size = (long) rowDimension * (long) columnDimension;\n    if (size > Integer.MAX_VALUE) {\n        throw new NumberIsTooLargeException(Long.valueOf(size), Integer.valueOf(Integer.MAX_VALUE), false);\n    } else {\n        this.rows = rowDimension;\n        this.columns = columnDimension;\n        this.entries = new OpenIntToDoubleHashMap(rowDimension*columnDimension, 0.0);\n    }\n}\n```\nThis fix does the following:\n- checks if rowDimension and columnDimension are both positive. If either is less than or equal to 0, an IllegalArgumentException is thrown.\n- calculates the size of the matrix by multiplying rowDimension and columnDimension.\n- checks if the size is greater than Integer.MAX_VALUE. If so, a NumberIsTooLargeException is thrown with the relevant details.\n- creates the OpenIntToDoubleHashMap with the initial capacity set to rowDimension times columnDimension and initial value of 0.0.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\nindex 174eda6ac..40ad98a9c 100644\n--- a/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n+++ b/src/main/java/org/apache/commons/math/linear/OpenMapRealMatrix.java\n@@ -45,12 +45,27 @@ public class OpenMapRealMatrix extends AbstractRealMatrix\n      * @param rowDimension Number of rows of the matrix.\n      * @param columnDimension Number of columns of the matrix.\n      */\n-    public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n-        super(rowDimension, columnDimension);\n+```\n+public OpenMapRealMatrix(int rowDimension, int columnDimension) {\n+    super(rowDimension, columnDimension);\n+    if (rowDimension <= 0 || columnDimension <= 0) {\n+        throw new IllegalArgumentException(\"Matrix dimensions must be positive.\");\n+    }\n+    long size = (long) rowDimension * (long) columnDimension;\n+    if (size > Integer.MAX_VALUE) {\n+        throw new NumberIsTooLargeException(Long.valueOf(size), Integer.valueOf(Integer.MAX_VALUE), false);\n+    } else {\n         this.rows = rowDimension;\n         this.columns = columnDimension;\n-        this.entries = new OpenIntToDoubleHashMap(0.0);\n+        this.entries = new OpenIntToDoubleHashMap(rowDimension*columnDimension, 0.0);\n     }\n+}\n+```\n+This fix does the following:\n+- checks if rowDimension and columnDimension are both positive. If either is less than or equal to 0, an IllegalArgumentException is thrown.\n+- calculates the size of the matrix by multiplying rowDimension and columnDimension.\n+- checks if the size is greater than Integer.MAX_VALUE. If so, a NumberIsTooLargeException is thrown with the relevant details.\n+- creates the OpenIntToDoubleHashMap with the initial capacity set to rowDimension times columnDimension and initial value of 0.0.\n \n     /**\n      * Build a matrix by copying another one.",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}