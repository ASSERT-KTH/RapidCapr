{
    "patch": "        int newPos = parser.parseInto(bucket, text, position);\n        long parsedInstant = bucket.computeMillis(false, text);\n        if (bucket.getOffsetInteger() == null && (iResolverStyle == null || iResolverStyle == ResolverStyle.SMART)) {\n            int newOffset = bucket.getOffset();\n            long instantAdjusted = instantLocal + newOffset;\n            int offsetAtParsedInstant = getOffset(parsedInstant);\n            if (newOffset != offsetAtParsedInstant && (offsetAtParsedInstant == 0 || (newOffset < 0) != (offsetAtParsedInstant < 0))) {\n                instantAdjusted -= newOffset;\n            }\n            instant.setMillis(instantAdjusted);\n            if (iOffsetParsed) {\n                chrono = chrono.withZone(DateTimeZone.forOffsetMillis(newOffset));\n            } else {\n                chrono = chrono.withZone(bucket.getZone());\n            }\n        } else {\n            if (iResolverStyle == ResolverStyle.LENIENT || parsedInstant == instantLocal) {\n                instant.setMillis(parsedInstant);\n                chrono = bucket.getChronology();\n                if (bucket.getZone() != null) {\n                    instant.setZone(bucket.getZone());\n                }\n            } else {\n                String errorText = parsedInstant + \" is not a valid instant.\";\n                throw new IllegalArgumentException(errorText);\n            }\n        }\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n        return newPos;",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..681790d6 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,38 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        int newPos = parser.parseInto(bucket, text, position);\n+        long parsedInstant = bucket.computeMillis(false, text);\n+        if (bucket.getOffsetInteger() == null && (iResolverStyle == null || iResolverStyle == ResolverStyle.SMART)) {\n+            int newOffset = bucket.getOffset();\n+            long instantAdjusted = instantLocal + newOffset;\n+            int offsetAtParsedInstant = getOffset(parsedInstant);\n+            if (newOffset != offsetAtParsedInstant && (offsetAtParsedInstant == 0 || (newOffset < 0) != (offsetAtParsedInstant < 0))) {\n+                instantAdjusted -= newOffset;\n+            }\n+            instant.setMillis(instantAdjusted);\n+            if (iOffsetParsed) {\n+                chrono = chrono.withZone(DateTimeZone.forOffsetMillis(newOffset));\n+            } else {\n+                chrono = chrono.withZone(bucket.getZone());\n+            }\n+        } else {\n+            if (iResolverStyle == ResolverStyle.LENIENT || parsedInstant == instantLocal) {\n+                instant.setMillis(parsedInstant);\n+                chrono = bucket.getChronology();\n+                if (bucket.getZone() != null) {\n+                    instant.setZone(bucket.getZone());\n+                }\n+            } else {\n+                String errorText = parsedInstant + \" is not a valid instant.\";\n+                throw new IllegalArgumentException(errorText);\n+            }\n+        }\n+        instant.setChronology(chrono);\n+        if (iZone != null) {\n+            instant.setZone(iZone);\n+        }\n+        return newPos;\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: '.class' expected",
    "test_result": "ERROR"
}