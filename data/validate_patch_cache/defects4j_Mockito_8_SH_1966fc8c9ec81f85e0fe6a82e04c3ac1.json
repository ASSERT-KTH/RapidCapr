{
    "patch": "Type[] interfaceTypes = clazz.getGenericInterfaces();\nfor (Type interfaceType : interfaceTypes) {\n    if (interfaceType instanceof ParameterizedType) {\n        ParameterizedType parameterizedType = (ParameterizedType) interfaceType;\n\n        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n        TypeVariable<?>[] typeVariables = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n\n        for (int j = 0; j < typeVariables.length; j++) {\n            TypeVariable<?> typeVariable = typeVariables[j];\n            if (typeVariable.getGenericDeclaration() == clazz && !contextualActualTypeParameters.containsKey(typeVariable)) {\n                Type typeArgument = typeArguments[j];\n                if (typeArgument instanceof TypeVariable) {\n                    typeArgument = contextualActualTypeParameters.getOrDefault(typeArgument, typeArgument);\n                }\n                contextualActualTypeParameters.put(typeVariable, typeArgument);\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..bfaa6bb20 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,26 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+Type[] interfaceTypes = clazz.getGenericInterfaces();\n+for (Type interfaceType : interfaceTypes) {\n+    if (interfaceType instanceof ParameterizedType) {\n+        ParameterizedType parameterizedType = (ParameterizedType) interfaceType;\n+\n+        Type[] typeArguments = parameterizedType.getActualTypeArguments();\n+        TypeVariable<?>[] typeVariables = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+\n+        for (int j = 0; j < typeVariables.length; j++) {\n+            TypeVariable<?> typeVariable = typeVariables[j];\n+            if (typeVariable.getGenericDeclaration() == clazz && !contextualActualTypeParameters.containsKey(typeVariable)) {\n+                Type typeArgument = typeArguments[j];\n+                if (typeArgument instanceof TypeVariable) {\n+                    typeArgument = contextualActualTypeParameters.getOrDefault(typeArgument, typeArgument);\n+                }\n+                contextualActualTypeParameters.put(typeVariable, typeArgument);\n+            }\n+        }\n+    }\n+}\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}