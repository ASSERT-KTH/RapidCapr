{
    "patch": "private void checkPropertyVisibility(NodeTraversal t,\n      Node getprop, Node parent) {\n    ObjectType objectType = \n        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n    if (objectType != null) {\n      // Is this a normal property access, or are we trying to override\n      // an existing property?\n      boolean isOverride = t.inGlobalScope() &&\n          parent.getType() == Token.ASSIGN &&\n          parent.getFirstChild() == getprop;\n\n      // Find the lowest property defined on a class with visibility\n      // information.\n      JSDocInfo docInfo = null;\n      if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n        for (; objectType != null;\n             objectType = objectType.getImplicitPrototype()) {\n          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n          if (docInfo != null &&\n              docInfo.getVisibility() != null &&\n              docInfo.getVisibility() != Visibility.INHERITED) {\n            break;\n          } else {\n            docInfo = null;\n          }\n        }\n      } else {\n        for (docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n             objectType != null && docInfo == null;\n             objectType = objectType.getImplicitPrototype(),\n                 docInfo = objectType.getOwnPropertyJSDocInfo(propertyName)) {}\n      }\n\n      if (objectType == null || docInfo == null) {\n        // We couldn't find a visibility modifier; assume it's public.\n        return;\n      }\n\n      Visibility visibility = docInfo.getVisibility();\n      JSType ownerType = normalizeClassType(objectType);\n      if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property\n        // on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n            Visibility.INHERITED : overridingInfo.getVisibility();\n\n        // Check that (a) the property *can* be overridden, and\n        // (b) that the visibility of the override is the same as the\n        // visibility of the original property.\n        if (visibility == Visibility.PRIVATE &&\n            !t.getInput().getName().equals(docInfo.getSourceName())) {\n          compiler.report(\n              t.makeError(getprop, PRIVATE_OVERRIDE,\n                  objectType.toString()));\n        } else if (overridingVisibility != Visibility.INHERITED &&\n            overridingVisibility != visibility) {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  visibility.name(), objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else {\n        if (t.getInput().getName().equals(docInfo.getSourceName())) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (visibility == Visibility.PRIVATE &&\n            (currentClass == null || ownerType.differsFrom(currentClass))) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        } else if (visibility == Visibility.PROTECTED) {\n          // There are 3 types of legal accesses of a protected property:\n          // 1) Accesses in the same file\n          // 2) Overriding the property in a subclass\n          // 3) Accessing the property from inside a subclass\n          // The first two have already been checked for.\n          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n            compiler.report(\n                t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                    propertyName,\n                    validator.getReadableJSTypeName(\n                        getprop.getFirstChild(), true)));\n          }\n        }\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..0a8d03b7 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,12 +404,11 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n+private void checkPropertyVisibility(NodeTraversal t,\n       Node getprop, Node parent) {\n-    ObjectType objectType =\n+    ObjectType objectType = \n         ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n-\n     if (objectType != null) {\n       // Is this a normal property access, or are we trying to override\n       // an existing property?\n@@ -419,26 +418,32 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n \n       // Find the lowest property defined on a class with visibility\n       // information.\n+      JSDocInfo docInfo = null;\n       if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n+        for (; objectType != null;\n+             objectType = objectType.getImplicitPrototype()) {\n+          docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+          if (docInfo != null &&\n+              docInfo.getVisibility() != null &&\n+              docInfo.getVisibility() != Visibility.INHERITED) {\n+            break;\n+          } else {\n+            docInfo = null;\n+          }\n         }\n+      } else {\n+        for (docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+             objectType != null && docInfo == null;\n+             objectType = objectType.getImplicitPrototype(),\n+                 docInfo = objectType.getOwnPropertyJSDocInfo(propertyName)) {}\n       }\n \n-      if (objectType == null) {\n+      if (objectType == null || docInfo == null) {\n         // We couldn't find a visibility modifier; assume it's public.\n         return;\n       }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n       Visibility visibility = docInfo.getVisibility();\n       JSType ownerType = normalizeClassType(objectType);\n       if (isOverride) {\n@@ -451,7 +456,8 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n         // Check that (a) the property *can* be overridden, and\n         // (b) that the visibility of the override is the same as the\n         // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n+        if (visibility == Visibility.PRIVATE &&\n+            !t.getInput().getName().equals(docInfo.getSourceName())) {\n           compiler.report(\n               t.makeError(getprop, PRIVATE_OVERRIDE,\n                   objectType.toString()));\n@@ -463,7 +469,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n                   overridingVisibility.name()));\n         }\n       } else {\n-        if (sameInput) {\n+        if (t.getInput().getName().equals(docInfo.getSourceName())) {\n           // private access is always allowed in the same file.\n           return;\n         } else if (visibility == Visibility.PRIVATE &&\n@@ -489,7 +495,7 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n           // The first two have already been checked for.\n           if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n             compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n+                t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                     propertyName,\n                     validator.getReadableJSTypeName(\n                         getprop.getFirstChild(), true)));",
    "result_reason": "java.lang.RuntimeException: INTERNAL COMPILER ERROR.",
    "test_result": "FAIL"
}