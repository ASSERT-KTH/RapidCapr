{
    "patch": "if (formatter.isParser()) {\n    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n    ((InternalParser) formatter.getParser()).printTo(builder);\n    builder.appendOffset(\"+HHmm\", \"Z\");\n    newFormatter = builder.toFormatter(formatter.getLocale())\n        .withChronology(formatter.getChronology())\n        .withZone(formatter.getZone());\n} else {\n    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n    ((InternalPrinter) formatter.getPrinter()).printTo(builder);\n    builder.appendOffset(\"+HHmm\", \"Z\");\n    newFormatter = builder.toFormatter(formatter.getLocale())\n        .withChronology(formatter.getChronology())\n        .withZone(formatter.getZone());\n}\nreturn newFormatter.parseLocalDateTime(text);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Partial.java b/src/main/java/org/joda/time/Partial.java\nindex 0d4edf47..330cabf5 100644\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n@@ -461,7 +461,22 @@ public final class Partial\n             System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);\n             // use public constructor to ensure full validation\n             // this isn't overly efficient, but is safe\n-            Partial newPartial = new Partial(iChronology, newTypes, newValues);\n+if (formatter.isParser()) {\n+    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+    ((InternalParser) formatter.getParser()).printTo(builder);\n+    builder.appendOffset(\"+HHmm\", \"Z\");\n+    newFormatter = builder.toFormatter(formatter.getLocale())\n+        .withChronology(formatter.getChronology())\n+        .withZone(formatter.getZone());\n+} else {\n+    DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+    ((InternalPrinter) formatter.getPrinter()).printTo(builder);\n+    builder.appendOffset(\"+HHmm\", \"Z\");\n+    newFormatter = builder.toFormatter(formatter.getLocale())\n+        .withChronology(formatter.getChronology())\n+        .withZone(formatter.getZone());\n+}\n+return newFormatter.parseLocalDateTime(text);\n             iChronology.validate(newPartial, newValues);\n             return newPartial;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}