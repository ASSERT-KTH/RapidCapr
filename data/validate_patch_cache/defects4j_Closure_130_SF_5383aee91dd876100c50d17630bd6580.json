{
    "patch": "private void inlineAliases(GlobalNamespace namespace) {\n    // Invariant: All the names in the worklist meet condition (a).\n    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n    while (!workList.isEmpty()) {\n        Name name = workList.pop();\n\n        // Don't attempt to inline a getter or setter property as a variable.\n        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n            continue;\n        }\n\n        // Inline all non-local aliases of the name.\n        inlineAliasesInternal(name, namespace);\n\n        // Check if any global aliases need to be inlined. This is only necessary for variables,\n        // since inlining a local alias is equivalent to inlining the original variable.\n        if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 &&\n            name.aliasingDirectSets > 0 && name.refs != null) {\n            // Find all the global aliases of the original name (excluding itself).\n            Map<String, Name> aliasMap = namespace.getNameIndex();\n            List<Name> aliases = new ArrayList<>(name.aliasingDirectSets);\n            for (Ref ref : name.refs) {\n                if (ref == name.ref || ref.scope.isLocal()) {\n                    continue;\n                }\n                Name alias = aliasMap.get(ref.getNode().getQualifiedName());\n                if (alias != null) {\n                    aliases.add(alias);\n                }\n            }\n\n            // Try to inline all of them.\n            for (Name alias : aliases) {\n                if (alias.type == Name.Type.OBJECTLIT || alias.type == Name.Type.FUNCTION) {\n                    // Local-alias-inlining is only valid for variables.\n                    continue;\n                }\n                if (alias.globalSets <= 1 &&\n                    (alias.localSets == 0 || alias.props == null)) {\n                    inlineAliasesInternal(alias, namespace);\n                    workList.addAll(alias.props);\n                }\n            }\n        }\n\n        // Add all children of the name to the worklist.\n        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION ||\n            name.type == Name.Type.CLASS) {\n            if (name.props != null) {\n                workList.addAll(name.props);\n            }\n            if (name.type == Name.Type.FUNCTION || name.type == Name.Type.CLASS) {\n                // For functions and classes, also inline their local aliases.\n                for (Ref ref : name.getRefs()) {\n                    if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n                        inlineAliasesInternalForFunctionAlias(ref, namespace);\n                    }\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..25c648a9 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -158,43 +158,68 @@ class CollapseProperties implements CompilerPass {\n    *    inlineable.\n    * @see InlineVariables\n    */\n-  private void inlineAliases(GlobalNamespace namespace) {\n+private void inlineAliases(GlobalNamespace namespace) {\n     // Invariant: All the names in the worklist meet condition (a).\n     Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());\n     while (!workList.isEmpty()) {\n-      Name name = workList.pop();\n+        Name name = workList.pop();\n \n-      // Don't attempt to inline a getter or setter property as a variable.\n-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n-        continue;\n-      }\n+        // Don't attempt to inline a getter or setter property as a variable.\n+        if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+            continue;\n+        }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n-          name.aliasingGets > 0) {\n-        // {@code name} meets condition (b). Find all of its local aliases\n-        // and try to inline them.\n-        List<Ref> refs = Lists.newArrayList(name.getRefs());\n-        for (Ref ref : refs) {\n-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n-            // {@code name} meets condition (c). Try to inline it.\n-            if (inlineAliasIfPossible(ref, namespace)) {\n-              name.removeRef(ref);\n+        // Inline all non-local aliases of the name.\n+        inlineAliasesInternal(name, namespace);\n+\n+        // Check if any global aliases need to be inlined. This is only necessary for variables,\n+        // since inlining a local alias is equivalent to inlining the original variable.\n+        if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0 &&\n+            name.aliasingDirectSets > 0 && name.refs != null) {\n+            // Find all the global aliases of the original name (excluding itself).\n+            Map<String, Name> aliasMap = namespace.getNameIndex();\n+            List<Name> aliases = new ArrayList<>(name.aliasingDirectSets);\n+            for (Ref ref : name.refs) {\n+                if (ref == name.ref || ref.scope.isLocal()) {\n+                    continue;\n+                }\n+                Name alias = aliasMap.get(ref.getNode().getQualifiedName());\n+                if (alias != null) {\n+                    aliases.add(alias);\n+                }\n+            }\n+\n+            // Try to inline all of them.\n+            for (Name alias : aliases) {\n+                if (alias.type == Name.Type.OBJECTLIT || alias.type == Name.Type.FUNCTION) {\n+                    // Local-alias-inlining is only valid for variables.\n+                    continue;\n+                }\n+                if (alias.globalSets <= 1 &&\n+                    (alias.localSets == 0 || alias.props == null)) {\n+                    inlineAliasesInternal(alias, namespace);\n+                    workList.addAll(alias.props);\n+                }\n             }\n-          }\n         }\n-      }\n \n-      // Check if {@code name} has any aliases left after the\n-      // local-alias-inlining above.\n-      if ((name.type == Name.Type.OBJECTLIT ||\n-           name.type == Name.Type.FUNCTION) &&\n-          name.aliasingGets == 0 && name.props != null) {\n-        // All of {@code name}'s children meet condition (a), so they can be\n-        // added to the worklist.\n-        workList.addAll(name.props);\n-      }\n+        // Add all children of the name to the worklist.\n+        if (name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION ||\n+            name.type == Name.Type.CLASS) {\n+            if (name.props != null) {\n+                workList.addAll(name.props);\n+            }\n+            if (name.type == Name.Type.FUNCTION || name.type == Name.Type.CLASS) {\n+                // For functions and classes, also inline their local aliases.\n+                for (Ref ref : name.getRefs()) {\n+                    if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+                        inlineAliasesInternalForFunctionAlias(ref, namespace);\n+                    }\n+                }\n+            }\n+        }\n     }\n-  }\n+}\n \n   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {\n     // Ensure that the alias is assigned to a local variable at that",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}