{
    "patch": "    private boolean canInline(\n        Reference declaration,\n        Reference initialization,\n        Reference reference) {\n      if (!isValidDeclaration(declaration)\n          || !isValidInitialization(initialization)\n          || !isValidReference(reference)) {\n        return false;\n      }\n\n      // If the value is read more than once, skip it.\n      // VAR declarations and EXPR_RESULT don't need the value, but other\n      // ASSIGN expressions parents do.\n      if (declaration != initialization\n          && !initialization.getGrandparent().isExprResult()\n          && NodeUtil.getLhs(initialization.getParent()) == null\n          && getNumberOfUsages(initialization) > 1) {\n        return false;\n      }\n\n      // Be very conservative and do no cross control structures or\n      // scope boundaries\n      if (declaration.getBasicBlock() != initialization.getBasicBlock()\n          || declaration.getBasicBlock() != reference.getBasicBlock()) {\n        return false;\n      }\n\n      // Do not inline into a call node. This would change\n      // the context in which it was being called. For example,\n      //   var a = b.c;\n      //   a();\n      // should not be inlined, because it calls a in the context of b\n      // rather than the context of the window.\n      //   var a = b.c;\n      //   f(a)\n      // is ok.\n      Node value = initialization.getAssignedValue();\n      Preconditions.checkNotNull(value, initialization);\n\n      if (value.isGetProp()\n          && reference.getParent().isCall()\n          && reference.getParent().getFirstChild() == reference.getNode()) {\n        return false;\n      }\n\n      if (value.isFunction()) {\n        Node callNode = reference.getParent();\n        if (reference.getParent().isCall()) {\n          CodingConvention convention = compiler.getCodingConvention();\n          // Bug 2388531: Don't inline subclass definitions into class defining\n          // calls as this confused class removing logic.\n          SubclassRelationship relationship =\n              convention.getClassesDefinedByCall(callNode);\n          if (relationship != null) {\n            return false;\n          }\n\n          // issue 668: Don't inline singleton getter methods\n          // calls as this confused class removing logic.\n          if (isSingletonGetter(value.getParent(), initialization, reference)) {\n            return false;\n          }\n        }\n      }\n\n      return canMoveAggressively(value) ||\n          canMoveModerately(initialization, reference);\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineVariables.java b/src/com/google/javascript/jscomp/InlineVariables.java\nindex 0b4b3ded..b3bd8b2c 100644\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n@@ -529,8 +529,10 @@ class InlineVariables implements CompilerPass {\n       // If the value is read more than once, skip it.\n       // VAR declarations and EXPR_RESULT don't need the value, but other\n       // ASSIGN expressions parents do.\n-      if (declaration != initialization &&\n-          !initialization.getGrandparent().isExprResult()) {\n+      if (declaration != initialization\n+          && !initialization.getGrandparent().isExprResult()\n+          && NodeUtil.getLhs(initialization.getParent()) == null\n+          && getNumberOfUsages(initialization) > 1) {\n         return false;\n       }\n \n@@ -551,7 +553,8 @@ class InlineVariables implements CompilerPass {\n       //   f(a)\n       // is ok.\n       Node value = initialization.getAssignedValue();\n-      Preconditions.checkState(value != null);\n+      Preconditions.checkNotNull(value, initialization);\n+\n       if (value.isGetProp()\n           && reference.getParent().isCall()\n           && reference.getParent().getFirstChild() == reference.getNode()) {\n@@ -572,6 +575,9 @@ class InlineVariables implements CompilerPass {\n \n           // issue 668: Don't inline singleton getter methods\n           // calls as this confused class removing logic.\n+          if (isSingletonGetter(value.getParent(), initialization, reference)) {\n+            return false;\n+          }\n         }\n       }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}