{
    "patch": "    Object[] rawArguments = invocation.getRawArguments();\n\n    if (invocation.getMethod().isVarArgs()) {\n        int indexOfVararg = invocation.getRawArguments().length - 1;\n        Object[] varArgs = Arrays.copyOfRange(rawArguments, indexOfVararg, indexOfVararg + 1);\n        rawArguments[indexOfVararg",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..56f626229 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -120,7 +120,12 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+    Object[] rawArguments = invocation.getRawArguments();\n+\n+    if (invocation.getMethod().isVarArgs()) {\n+        int indexOfVararg = invocation.getRawArguments().length - 1;\n+        Object[] varArgs = Arrays.copyOfRange(rawArguments, indexOfVararg, indexOfVararg + 1);\n+        rawArguments[indexOfVararg\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "error: ']' expected",
    "test_result": "ERROR"
}