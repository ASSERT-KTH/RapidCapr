{
    "patch": "private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n  ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n  String propertyName = getprop.getLastChild().getString();\n\n  if (objectType != null) {\n    // Is this a normal property access, or are we trying to override\n    // an existing property?\n    boolean isOverride = t.inGlobalScope() &&\n        parent.getType() == Token.ASSIGN &&\n        parent.getFirstChild() == getprop;\n\n    // Find the lowest property defined on a class with visibility\n    // information.\n    if (isOverride) {\n      objectType = objectType.getImplicitPrototype();\n    }\n    JSDocInfo docInfo = null;\n    boolean foundPrivateFlag = false;\n    boolean foundPublicFlag = false;\n    for (; objectType != null;\n         objectType = objectType.getImplicitPrototype()) {\n      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n      if (docInfo != null) {\n        Visibility visibility = docInfo.getVisibility();\n        if (visibility != Visibility.INHERITED) {\n          if (visibility == Visibility.PRIVATE && t.getInput().getPath().equals(docInfo.getFileOverview().getPath())) {\n              foundPrivateFlag = true;\n              break;\n          }\n          foundPublicFlag = true;\n          break;\n        }\n      }\n    }\n\n    if (objectType == null) {\n      // We couldn't find a visibility modifier; assume it's public.\n      return;\n    }\n\n    JSType ownerType = normalizeClassType(objectType);\n    if (isOverride) {\n      // Check an ASSIGN statement that's trying to override a property\n      // on a superclass.\n      JSDocInfo overridingInfo = parent.getJSDocInfo();\n      Visibility overridingVisibility = overridingInfo == null ?\n          Visibility.INHERITED : overridingInfo.getVisibility();\n\n      // Check that (a) the property *can* be overridden, and\n      // (b) that the visibility of the override is the same as the\n      // visibility of the original property.\n      if (foundPrivateFlag) {\n        if (overridingVisibility == Visibility.PRIVATE || t.getInput().getPath().equals(docInfo.getFileOverview().getPath()) ) {\n          return;\n        } else {\n          compiler.report(\n              t.makeError(getprop, VISIBILITY_MISMATCH,\n                  Visibility.PRIVATE.name(),\n                  objectType.toString(),\n                  overridingVisibility.name()));\n        }\n      } else if (!foundPublicFlag) {\n        return;\n      } else if (overridingVisibility != Visibility.INHERITED) {\n        compiler.report(\n            t.makeError(getprop, VISIBILITY_MISMATCH,\n                Visibility.PUBLIC.name(),\n                objectType.toString(),\n                overridingVisibility.name()));\n      }\n    } else {\n      if (foundPrivateFlag) {\n        if (t.getInput().getPath().equals(docInfo.getFileOverview().getPath())) {\n          // private access is always allowed in the same file.\n          return;\n        } else if (currentClass == null ||\n            ownerType.differsFrom(currentClass)) {\n          if (docInfo.isConstructor() &&\n              isValidPrivateConstructorAccess(parent)) {\n            return;\n          }\n\n          // private access is not allowed outside the file from a different\n          // enclosing class.\n          compiler.report(\n              t.makeError(getprop,\n                  BAD_PRIVATE_PROPERTY_ACCESS,\n                  propertyName,\n                  validator.getReadableJSTypeName(\n                      getprop.getFirstChild(), true)));\n        }\n      } else if (!foundPublicFlag) {\n        return;\n      } else if (currentClass != null &&\n          !isWithinSubclass(t, currentClass, ownerType)) {\n        // Accessing a protected property without being inside a subclass\n        // that extends the owner class or is within a subclass is illegal.\n        compiler.report(\n            t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                propertyName,\n                validator.getReadableJSTypeName(\n                    getprop.getFirstChild(), true)));\n      }\n    }\n  }\n}\n\nprivate boolean isWithinSubclass(NodeTraversal t, JSType current, JSType ownerType) {\n  if (ownerType == null || current == null) {\n    return false;\n  }\n  ObjectType ownerObjType = ObjectType.cast(ownerType);\n  while (current != null) {\n    if (current.isSubtype(ownerType) || current.isEquivalentTo(ownerType)) {\n      return true;\n    }\n    Node currentNode = t.getScope().getRootNode();\n    if (currentNode == null) {\n      return false;\n    }\n    JSDocInfo info = currentNode.getJSDocInfo();\n    if (info == null) {\n      return false;\n    }\n    // check if the instance or static property is declared i",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..deb5da41 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,70 +404,83 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n-    ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n-    String propertyName = getprop.getLastChild().getString();\n-\n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n-        objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n-        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n+private void checkPropertyVisibility(NodeTraversal t, Node getprop, Node parent) {\n+  ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+  String propertyName = getprop.getLastChild().getString();\n+\n+  if (objectType != null) {\n+    // Is this a normal property access, or are we trying to override\n+    // an existing property?\n+    boolean isOverride = t.inGlobalScope() &&\n+        parent.getType() == Token.ASSIGN &&\n+        parent.getFirstChild() == getprop;\n+\n+    // Find the lowest property defined on a class with visibility\n+    // information.\n+    if (isOverride) {\n+      objectType = objectType.getImplicitPrototype();\n+    }\n+    JSDocInfo docInfo = null;\n+    boolean foundPrivateFlag = false;\n+    boolean foundPublicFlag = false;\n+    for (; objectType != null;\n+         objectType = objectType.getImplicitPrototype()) {\n+      docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (docInfo != null) {\n+        Visibility visibility = docInfo.getVisibility();\n+        if (visibility != Visibility.INHERITED) {\n+          if (visibility == Visibility.PRIVATE && t.getInput().getPath().equals(docInfo.getFileOverview().getPath())) {\n+              foundPrivateFlag = true;\n+              break;\n+          }\n+          foundPublicFlag = true;\n           break;\n         }\n       }\n+    }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n-        return;\n-      }\n+    if (objectType == null) {\n+      // We couldn't find a visibility modifier; assume it's public.\n+      return;\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n-        JSDocInfo overridingInfo = parent.getJSDocInfo();\n-        Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n-\n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n-        if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n-        } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n+    JSType ownerType = normalizeClassType(objectType);\n+    if (isOverride) {\n+      // Check an ASSIGN statement that's trying to override a property\n+      // on a superclass.\n+      JSDocInfo overridingInfo = parent.getJSDocInfo();\n+      Visibility overridingVisibility = overridingInfo == null ?\n+          Visibility.INHERITED : overridingInfo.getVisibility();\n+\n+      // Check that (a) the property *can* be overridden, and\n+      // (b) that the visibility of the override is the same as the\n+      // visibility of the original property.\n+      if (foundPrivateFlag) {\n+        if (overridingVisibility == Visibility.PRIVATE || t.getInput().getPath().equals(docInfo.getFileOverview().getPath()) ) {\n+          return;\n+        } else {\n           compiler.report(\n               t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n+                  Visibility.PRIVATE.name(),\n+                  objectType.toString(),\n                   overridingVisibility.name()));\n         }\n-      } else {\n-        if (sameInput) {\n+      } else if (!foundPublicFlag) {\n+        return;\n+      } else if (overridingVisibility != Visibility.INHERITED) {\n+        compiler.report(\n+            t.makeError(getprop, VISIBILITY_MISMATCH,\n+                Visibility.PUBLIC.name(),\n+                objectType.toString(),\n+                overridingVisibility.name()));\n+      }\n+    } else {\n+      if (foundPrivateFlag) {\n+        if (t.getInput().getPath().equals(docInfo.getFileOverview().getPath())) {\n           // private access is always allowed in the same file.\n           return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n+        } else if (currentClass == null ||\n+            ownerType.differsFrom(currentClass)) {\n           if (docInfo.isConstructor() &&\n               isValidPrivateConstructorAccess(parent)) {\n             return;\n@@ -481,23 +494,41 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n                   propertyName,\n                   validator.getReadableJSTypeName(\n                       getprop.getFirstChild(), true)));\n-        } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n         }\n+      } else if (!foundPublicFlag) {\n+        return;\n+      } else if (currentClass != null &&\n+          !isWithinSubclass(t, currentClass, ownerType)) {\n+        // Accessing a protected property without being inside a subclass\n+        // that extends the owner class or is within a subclass is illegal.\n+        compiler.report(\n+            t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+                propertyName,\n+                validator.getReadableJSTypeName(\n+                    getprop.getFirstChild(), true)));\n       }\n     }\n   }\n+}\n+\n+private boolean isWithinSubclass(NodeTraversal t, JSType current, JSType ownerType) {\n+  if (ownerType == null || current == null) {\n+    return false;\n+  }\n+  ObjectType ownerObjType = ObjectType.cast(ownerType);\n+  while (current != null) {\n+    if (current.isSubtype(ownerType) || current.isEquivalentTo(ownerType)) {\n+      return true;\n+    }\n+    Node currentNode = t.getScope().getRootNode();\n+    if (currentNode == null) {\n+      return false;\n+    }\n+    JSDocInfo info = currentNode.getJSDocInfo();\n+    if (info == null) {\n+      return false;\n+    }\n+    // check if the instance or static property is declared i\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}