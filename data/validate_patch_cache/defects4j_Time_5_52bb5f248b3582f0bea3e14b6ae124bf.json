{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n        \n        // Check if weeks are present in the period\n        if (getWeeks() != 0) {\n            // Convert weeks to days and add to the millis\n            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n            Period periodWithoutWeeks = new Period(getYears(), getMonths(), 0, getDays(), getHours(), getMinutes(), getSeconds(), getMillis(), type);\n            Period resultWithoutWeeks = periodWithoutWeeks.normalizedStandard(type);\n\n            // Convert the resulting period without weeks to millis and add that to millis\n            millis += resultWithoutWeeks.toDurationFrom(new DateTime(0L, ISOChronology.getInstanceUTC())).getMillis();\n        } else {\n            // No weeks, simply add millis\n            millis += getMillis();\n        }\n        \n        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n        int years = result.getYears();\n        int months = result.getMonths();\n        if (years != 0 || months != 0) {\n            years = FieldUtils.safeAdd(years, months / 12);\n            months = months % 12;\n            if (years != 0) {\n                result = result.withYears(years);\n            }\n            if (months != 0) {\n                result = result.withMonths(months);\n            }\n        }\n        return result;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..cc4f03f5 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1620,10 +1620,24 @@ public final class Period\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        \n+        // Check if weeks are present in the period\n+        if (getWeeks() != 0) {\n+            // Convert weeks to days and add to the millis\n+            millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+            Period periodWithoutWeeks = new Period(getYears(), getMonths(), 0, getDays(), getHours(), getMinutes(), getSeconds(), getMillis(), type);\n+            Period resultWithoutWeeks = periodWithoutWeeks.normalizedStandard(type);\n+\n+            // Convert the resulting period without weeks to millis and add that to millis\n+            millis += resultWithoutWeeks.toDurationFrom(new DateTime(0L, ISOChronology.getInstanceUTC())).getMillis();\n+        } else {\n+            // No weeks, simply add millis\n+            millis += getMillis();\n+        }\n+        \n         Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n+        int years = result.getYears();\n+        int months = result.getMonths();\n         if (years != 0 || months != 0) {\n             years = FieldUtils.safeAdd(years, months / 12);\n             months = months % 12;",
    "result_reason": "junit.framework.AssertionFailedError: expected:<P2W5D> but was:<P4W3D>",
    "test_result": "FAIL"
}