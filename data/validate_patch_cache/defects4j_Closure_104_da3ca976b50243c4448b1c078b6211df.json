{
    "patch": "private boolean hasExceptionHandler(Node cfgNode) {\n    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n        if (edge.getValue() == Branch.ON_EX) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Two union types are equal if they have the same number of alternates\n * and all alternates are equal.\n */\n@Override\npublic boolean equals(Object object) {\n    if (object instanceof UnionType) {\n        UnionType that = (UnionType) object;\n        return alternates.equals(that.alternates);\n    }\n    return super.equals(object);\n}\n\n@Override\npublic int hashCode() {\n    return alternates.hashCode();\n}\n\n@Override\npublic boolean isUnionType() {\n    return true;\n}\n\n@Override\npublic boolean isObject() {\n    for (JSType alternate : alternates) {\n        if (!alternate.isObject()) {\n            return false;\n        }\n    }\n    return true;\n}\n\n@Override\npublic JSType greatestSubtype(JSType other) {\n    // This optimization speeds up type unification significantly,\n    // but it cannot be used once 'this' is involved in a recursive\n    // call; hence the check for 'subsumingUnion'.\n    if (other.isBottom()) {\n        return other;\n    }\n    if (other instanceof UnionType) {\n        JSType[] lubTypeArray = new JSType[((UnionType) other).alternates.size()];\n        int nonNullTypes = 0;\n        for (JSType otherAlternate : ((UnionType) other).alternates) {\n            JSType lubType = greatestSubtype(otherAlternate);\n            if (lubType != null) {\n                lubTypeArray[nonNullTypes++] = lubType;\n            }\n        }\n        switch (nonNullTypes) {\n            case 0:\n                return getNativeType(JSTypeNative.NO_TYPE);\n            case 1:\n                return lubTypeArray[0];\n            default:\n                return getRegistry().createUnionType(Arrays.copyOf(lubTypeArray, nonNullTypes));\n        }\n    }\n    if (other instanceof NoObjectType) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    }\n    if (this.subsumingUnion != null) {\n        return getRegistry().createUnionType(\n                this.subsumingUnion.greatestSubtype(other),\n                this.getBottomness()\n        );\n    }\n    Builder builder = new Builder(getRegistry());\n    if (this instanceof UnionType) {\n        for (JSType thisAlternate : ((UnionType) this).alternates) {\n            builder.addAlternate(thisAlternate.greatestSubtype(other));\n        }\n    } else if (other.isSubtype(this)) {\n        builder.addAlternate(other);\n    } else {\n        for (JSType thisAlternate : getAlternates()) {\n            builder.addAlternate(thisAlternate.greatestSubtype(other));\n        }\n    }\n    JSType result = builder.build();\n    if (result != null) {\n        return result;\n    } else if (this.isObject() && other.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else if (other.isUnknownType()) {\n        return this;\n    } else {\n        return null;\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..260d5bab 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,54 +279,107 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n+private boolean hasExceptionHandler(Node cfgNode) {\n+    List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(cfgNode);\n+    for (DiGraphEdge<Node, Branch> edge : branchEdges) {\n+        if (edge.getValue() == Branch.ON_EX) {\n+            return true;\n         }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n     }\n-  }\n+    return false;\n+}\n \n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n+/**\n+ * Two union types are equal if they have the same number of alternates\n+ * and all alternates are equal.\n+ */\n+@Override\n+public boolean equals(Object object) {\n     if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n+        UnionType that = (UnionType) object;\n+        return alternates.equals(that.alternates);\n     }\n-  }\n+    return super.equals(object);\n+}\n \n-  @Override\n-  public int hashCode() {\n+@Override\n+public int hashCode() {\n     return alternates.hashCode();\n-  }\n+}\n \n-  @Override\n-  public boolean isUnionType() {\n+@Override\n+public boolean isUnionType() {\n     return true;\n-  }\n+}\n \n-  @Override\n-  public boolean isObject() {\n+@Override\n+public boolean isObject() {\n     for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n-        return false;\n-      }\n+        if (!alternate.isObject()) {\n+            return false;\n+        }\n+    }\n+    return true;\n+}\n+\n+@Override\n+public JSType greatestSubtype(JSType other) {\n+    // This optimization speeds up type unification significantly,\n+    // but it cannot be used once 'this' is involved in a recursive\n+    // call; hence the check for 'subsumingUnion'.\n+    if (other.isBottom()) {\n+        return other;\n+    }\n+    if (other instanceof UnionType) {\n+        JSType[] lubTypeArray = new JSType[((UnionType) other).alternates.size()];\n+        int nonNullTypes = 0;\n+        for (JSType otherAlternate : ((UnionType) other).alternates) {\n+            JSType lubType = greatestSubtype(otherAlternate);\n+            if (lubType != null) {\n+                lubTypeArray[nonNullTypes++] = lubType;\n+            }\n+        }\n+        switch (nonNullTypes) {\n+            case 0:\n+                return getNativeType(JSTypeNative.NO_TYPE);\n+            case 1:\n+                return lubTypeArray[0];\n+            default:\n+                return getRegistry().createUnionType(Arrays.copyOf(lubTypeArray, nonNullTypes));\n+        }\n+    }\n+    if (other instanceof NoObjectType) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+    if (this.subsumingUnion != null) {\n+        return getRegistry().createUnionType(\n+                this.subsumingUnion.greatestSubtype(other),\n+                this.getBottomness()\n+        );\n+    }\n+    Builder builder = new Builder(getRegistry());\n+    if (this instanceof UnionType) {\n+        for (JSType thisAlternate : ((UnionType) this).alternates) {\n+            builder.addAlternate(thisAlternate.greatestSubtype(other));\n+        }\n+    } else if (other.isSubtype(this)) {\n+        builder.addAlternate(other);\n+    } else {\n+        for (JSType thisAlternate : getAlternates()) {\n+            builder.addAlternate(thisAlternate.greatestSubtype(other));\n+        }\n+    }\n+    JSType result = builder.build();\n+    if (result != null) {\n+        return result;\n+    } else if (this.isObject() && other.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else if (other.isUnknownType()) {\n+        return this;\n+    } else {\n+        return null;\n+    }\n+}\n     }\n     return true;\n   }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}