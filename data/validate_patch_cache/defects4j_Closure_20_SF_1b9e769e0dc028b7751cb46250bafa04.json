{
    "patch": "  private Node tryFoldSimpleFunctionCall(Node n) {\n    Preconditions.checkState(n.isCall());\n    Node callTarget = n.getFirstChild();\n    if (callTarget != null && callTarget.isName()\n        && callTarget.getString().equals(\"String\")\n        && n.getChildCount() == 2) {\n      Node value = callTarget.getNext();\n      Node onlyChild = value.getOnlyChild();\n      if (onlyChild != null && onlyChild.isString()) {\n        String argumentValue = onlyChild.getString();\n        Node newStringNode = IR.string(\"\").srcref(callTarget);\n        if (argumentValue.isEmpty()) {\n          n.getParent().replaceChild(n, newStringNode);\n        } else {\n          Node stringNode = IR.string(argumentValue).srcref(onlyChild);\n          n.getParent().replaceChild(n, IR.add(newStringNode, stringNode).srcref(n));\n        }\n        reportCodeChange();\n        return n.getParent();   // return the parent node\n      }\n    }\n    return n;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex bfa17074..9e1bc723 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -208,22 +208,22 @@ class PeepholeSubstituteAlternateSyntax\n   private Node tryFoldSimpleFunctionCall(Node n) {\n     Preconditions.checkState(n.isCall());\n     Node callTarget = n.getFirstChild();\n-    if (callTarget != null && callTarget.isName() &&\n-          callTarget.getString().equals(\"String\")) {\n-      // Fold String(a) to '' + (a) on immutable literals,\n-      // which allows further optimizations\n-      //\n-      // We can't do this in the general case, because String(a) has\n-      // slightly different semantics than '' + (a). See\n-      // http://code.google.com/p/closure-compiler/issues/detail?id=759\n+    if (callTarget != null && callTarget.isName()\n+        && callTarget.getString().equals(\"String\")\n+        && n.getChildCount() == 2) {\n       Node value = callTarget.getNext();\n-      if (value != null) {\n-        Node addition = IR.add(\n-            IR.string(\"\").srcref(callTarget),\n-            value.detachFromParent());\n-        n.getParent().replaceChild(n, addition);\n+      Node onlyChild = value.getOnlyChild();\n+      if (onlyChild != null && onlyChild.isString()) {\n+        String argumentValue = onlyChild.getString();\n+        Node newStringNode = IR.string(\"\").srcref(callTarget);\n+        if (argumentValue.isEmpty()) {\n+          n.getParent().replaceChild(n, newStringNode);\n+        } else {\n+          Node stringNode = IR.string(argumentValue).srcref(onlyChild);\n+          n.getParent().replaceChild(n, IR.add(newStringNode, stringNode).srcref(n));\n+        }\n         reportCodeChange();\n-        return addition;\n+        return n.getParent();   // return the parent node\n       }\n     }\n     return n;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}