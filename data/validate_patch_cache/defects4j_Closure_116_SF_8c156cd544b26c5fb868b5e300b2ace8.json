{
    "patch": "private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n    return CanInlineResult.NO;\n  }\n\n  Node argNodes = callNode.removeFirstChild().getNext();\n  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n  Node fnParam = fnParams.getFirstChild();\n  int paramCount = 0;\n  int argCount = 0;\n\n  // Iterate through arguments and parameters in parallel, checking for equivalency:\n  while (argNodes != null || fnParam != null) {\n    if (fnParam == null || fnParam.isOptionalArg() || fnParam.isRest()) {\n      // If there are more arguments than parameters, and the remaining\n      // parameters are optional or a rest parameter, then we treat any\n      // remaining arguments as safe to inline, provided they have no side-effects.\n      if (argNodes != null) {\n        if (NodeUtil.mayHaveSideEffects(argNodes, compiler)) {\n          return CanInlineResult.NO;\n        }\n        argNodes = argNodes.getNext();\n        argCount++;\n      }\n    } else if (argNodes == null) {\n      // If we've run out of arguments, but still have remaining non-optional\n      // parameters, then we cannot safely inline the function.\n      return CanInlineResult.NO;\n    } else {\n      // Otherwise, we have a named parameter we must check against its argument.\n      // If the argument has side-effects, or any other parameter has already used\n      // this argument node, then we cannot safely inline the function.\n      if (NodeUtil.mayEffectMutableState(argNodes, compiler) &&\n          NodeUtil.getNameReferenceCount(fnNode.getLastChild(), fnParam.getString()) > 1) {\n        return CanInlineResult.NO;\n      }\n      paramCount++;\n      argCount++;\n      fnParam = fnParam.getNext();\n      argNodes = argNodes.getNext();\n    }\n  }\n\n  // If the number of arguments and parameters match, then it's safe to inline this function.\n  return paramCount == argCount ? CanInlineResult.YES : CanInlineResult.NO;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java\nindex c3fc14b2..00c9f753 100644\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n@@ -686,68 +686,53 @@ class FunctionInjector {\n    *     x = foo(i++);\n    * </pre>\n    */\n-  private CanInlineResult canInlineReferenceDirectly(\n-      Node callNode, Node fnNode) {\n-    if (!isDirectCallNodeReplacementPossible(fnNode)) {\n-      return CanInlineResult.NO;\n-    }\n-\n-    Node block = fnNode.getLastChild();\n-\n-\n-    // CALL NODE: [ NAME, ARG1, ARG2, ... ]\n-    Node cArg = callNode.getFirstChild().getNext();\n+private CanInlineResult canInlineReferenceDirectly(Node callNode, Node fnNode) {\n+  if (!isDirectCallNodeReplacementPossible(fnNode)) {\n+    return CanInlineResult.NO;\n+  }\n \n-    // Functions called via 'call' and 'apply' have a this-object as\n-    // the first parameter, but this is not part of the called function's\n-    // parameter list.\n-    if (!callNode.getFirstChild().isName()) {\n-      if (NodeUtil.isFunctionObjectCall(callNode)) {\n-        // TODO(johnlenz): Support replace this with a value.\n-        if (cArg == null || !cArg.isThis()) {\n+  Node argNodes = callNode.removeFirstChild().getNext();\n+  Node fnParams = NodeUtil.getFunctionParameters(fnNode);\n+  Node fnParam = fnParams.getFirstChild();\n+  int paramCount = 0;\n+  int argCount = 0;\n+\n+  // Iterate through arguments and parameters in parallel, checking for equivalency:\n+  while (argNodes != null || fnParam != null) {\n+    if (fnParam == null || fnParam.isOptionalArg() || fnParam.isRest()) {\n+      // If there are more arguments than parameters, and the remaining\n+      // parameters are optional or a rest parameter, then we treat any\n+      // remaining arguments as safe to inline, provided they have no side-effects.\n+      if (argNodes != null) {\n+        if (NodeUtil.mayHaveSideEffects(argNodes, compiler)) {\n           return CanInlineResult.NO;\n         }\n-        cArg = cArg.getNext();\n-      } else {\n-        // \".apply\" call should be filtered before this.\n-        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));\n-      }\n-    }\n-\n-    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]\n-    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();\n-    while (cArg != null || fnParam != null) {\n-      // For each named parameter check if a mutable argument use more than one.\n-      if (fnParam != null) {\n-        if (cArg != null) {\n-\n-          // Check for arguments that are evaluated more than once.\n-          // Note: Unlike block inlining, there it is not possible that a\n-          // parameter reference will be in a loop.\n-          if (NodeUtil.mayEffectMutableState(cArg, compiler)\n-              && NodeUtil.getNameReferenceCount(\n-                  block, fnParam.getString()) > 1) {\n-            return CanInlineResult.NO;\n-          }\n-        }\n-\n-        // Move to the next name.\n-        fnParam = fnParam.getNext();\n+        argNodes = argNodes.getNext();\n+        argCount++;\n       }\n-\n-      // For every call argument check for side-effects, even if there\n-      // isn't a named parameter to match.\n-      if (cArg != null) {\n-        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {\n-          return CanInlineResult.NO;\n-        }\n-        cArg = cArg.getNext();\n+    } else if (argNodes == null) {\n+      // If we've run out of arguments, but still have remaining non-optional\n+      // parameters, then we cannot safely inline the function.\n+      return CanInlineResult.NO;\n+    } else {\n+      // Otherwise, we have a named parameter we must check against its argument.\n+      // If the argument has side-effects, or any other parameter has already used\n+      // this argument node, then we cannot safely inline the function.\n+      if (NodeUtil.mayEffectMutableState(argNodes, compiler) &&\n+          NodeUtil.getNameReferenceCount(fnNode.getLastChild(), fnParam.getString()) > 1) {\n+        return CanInlineResult.NO;\n       }\n+      paramCount++;\n+      argCount++;\n+      fnParam = fnParam.getNext();\n+      argNodes = argNodes.getNext();\n     }\n-\n-    return CanInlineResult.YES;\n   }\n \n+  // If the number of arguments and parameters match, then it's safe to inline this function.\n+  return paramCount == argCount ? CanInlineResult.YES : CanInlineResult.NO;\n+}\n+\n   /**\n    * Determine if inlining the function is likely to reduce the code size.\n    * @param namesToAlias",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}