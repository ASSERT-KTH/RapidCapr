{
    "patch": "private void handleBlockComment(Comment comment) {\n    String commentValue = comment.getValue().trim();\n    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\")) {\n        String[] lines = commentValue.substring(2, commentValue.length() - 2).split(\"\\\\r?\\\\n\");\n        boolean hasTag = false;\n        for (String line : lines) {\n            if (line.contains(\"@\")) {\n                hasTag = true;\n                break;\n            }\n        }\n        if (hasTag) {\n            for (String line : lines) {\n                String trimmedLine = line.trim();\n                if (trimmedLine.startsWith(\"*\")) {\n                    trimmedLine = trimmedLine.substring(1).trim();\n                }\n                if (trimmedLine.startsWith(\"@\")) {\n                    int spaceIndex = trimmedLine.indexOf(\" \");\n                    String tag = trimmedLine.substring(1, spaceIndex).toLowerCase();\n                    if (VALID_TAGS.contains(tag)) {\n                        return;\n                    }\n                    errorReporter.warning(\n                            SUSPICIOUS_COMMENT_WARNING,\n                            sourceName,\n                            comment.getLineno(), \"\", 0);\n                    return;\n                }\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 709534bf..f7cf5b4c 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -248,14 +248,39 @@ class IRFactory {\n   /**\n    * Check to see if the given block comment looks like it should be JSDoc.\n    */\n-  private void handleBlockComment(Comment comment) {\n-    if (comment.getValue().indexOf(\"/* @\") != -1 || comment.getValue().indexOf(\"\\n * @\") != -1) {\n-      errorReporter.warning(\n-          SUSPICIOUS_COMMENT_WARNING,\n-          sourceName,\n-          comment.getLineno(), \"\", 0);\n+private void handleBlockComment(Comment comment) {\n+    String commentValue = comment.getValue().trim();\n+    if (commentValue.startsWith(\"/*\") && commentValue.endsWith(\"*/\")) {\n+        String[] lines = commentValue.substring(2, commentValue.length() - 2).split(\"\\\\r?\\\\n\");\n+        boolean hasTag = false;\n+        for (String line : lines) {\n+            if (line.contains(\"@\")) {\n+                hasTag = true;\n+                break;\n+            }\n+        }\n+        if (hasTag) {\n+            for (String line : lines) {\n+                String trimmedLine = line.trim();\n+                if (trimmedLine.startsWith(\"*\")) {\n+                    trimmedLine = trimmedLine.substring(1).trim();\n+                }\n+                if (trimmedLine.startsWith(\"@\")) {\n+                    int spaceIndex = trimmedLine.indexOf(\" \");\n+                    String tag = trimmedLine.substring(1, spaceIndex).toLowerCase();\n+                    if (VALID_TAGS.contains(tag)) {\n+                        return;\n+                    }\n+                    errorReporter.warning(\n+                            SUSPICIOUS_COMMENT_WARNING,\n+                            sourceName,\n+                            comment.getLineno(), \"\", 0);\n+                    return;\n+                }\n+            }\n+        }\n     }\n-  }\n+}\n \n   /**\n    * @return true if the jsDocParser represents a fileoverview.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}