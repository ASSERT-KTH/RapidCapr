{
    "patch": "private boolean isOneExactlyFunctionOrDo(Node n) {\n    // For labels with block children, we need to ensure that a labeled FUNCTION or DO isn't generated when extraneous BLOCKs are skipped.\n    if (n.getType() == Token.BLOCK) {\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n            if (!isEmptyStmt(c)) {\n                return isOneExactlyFunctionOrDo(c);\n            }\n        }\n        return false;\n    }\n    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n}\n\nprivate boolean isEmptyStmt(Node n) {\n    return n.getType() == Token.EMPTY || (n.getType() == Token.EXPR_RESULT && n.getFirstChild() != null && n.getFirstChild().getType() == Token.EMPTY);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java\nindex 42c9ab38..8bd87a4d 100644\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n@@ -705,14 +705,22 @@ class CodeGenerator {\n    * @return Whether the Node is a DO or FUNCTION (with or without\n    * labels).\n    */\n-  private boolean isOneExactlyFunctionOrDo(Node n) {\n-        // For labels with block children, we need to ensure that a\n-        // labeled FUNCTION or DO isn't generated when extraneous BLOCKs \n-        // are skipped. \n-          // Either a empty statement or an block with more than one child,\n-          // way it isn't a FUNCTION or DO.\n-      return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n-  }\n+private boolean isOneExactlyFunctionOrDo(Node n) {\n+    // For labels with block children, we need to ensure that a labeled FUNCTION or DO isn't generated when extraneous BLOCKs are skipped.\n+    if (n.getType() == Token.BLOCK) {\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            if (!isEmptyStmt(c)) {\n+                return isOneExactlyFunctionOrDo(c);\n+            }\n+        }\n+        return false;\n+    }\n+    return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);\n+}\n+\n+private boolean isEmptyStmt(Node n) {\n+    return n.getType() == Token.EMPTY || (n.getType() == Token.EXPR_RESULT && n.getFirstChild() != null && n.getFirstChild().getType() == Token.EMPTY);\n+}\n \n   /**\n    * Adds a node at the left-hand side of an expression. Unlike",
    "result_reason": "junit.framework.ComparisonFailure: expected:<if(e1)[{A:function goo(){return true}]}> but was:<if(e1)[A:function goo(){return true]}>",
    "test_result": "FAIL"
}