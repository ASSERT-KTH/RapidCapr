{
    "patch": "@Override\n  public boolean isObject() {\n    for (JSType alternate : alternates) {\n      if (alternate.isBottom()) {\n        // Treat bottom as not an object.\n        return false;\n      } else if (!alternate.isObject()) {\n        return false;\n      }\n    }\n    return true;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/UnionType.java b/src/com/google/javascript/rhino/jstype/UnionType.java\nindex a9c9a0ae..dbf607d8 100644\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n@@ -279,57 +279,21 @@ public class UnionType extends JSType {\n     }\n \n     if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-          builder.addAlternate(otherAlternate);\n-        }\n-      }\n-    } else if (that.isSubtype(this)) {\n-      builder.addAlternate(that);\n-    }\n-    JSType result = builder.build();\n-    if (result != null) {\n-      return result;\n-    } else if (this.isObject() && that.isObject()) {\n-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n-    } else {\n-      return getNativeType(JSTypeNative.NO_TYPE);\n-    }\n-  }\n-\n-  /**\n-   * Two union types are equal if they have the same number of alternates\n-   * and all alternates are equal.\n-   */\n-  @Override\n-  public boolean equals(Object object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n-      return alternates.equals(that.alternates);\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return alternates.hashCode();\n-  }\n-\n-  @Override\n-  public boolean isUnionType() {\n-    return true;\n-  }\n-\n-  @Override\n+@Override\n   public boolean isObject() {\n     for (JSType alternate : alternates) {\n-      if (!alternate.isObject()) {\n+      if (alternate.isBottom()) {\n+        // Treat bottom as not an object.\n+        return false;\n+      } else if (!alternate.isObject()) {\n         return false;\n       }\n     }\n     return true;\n   }\n+    }\n+    return true;\n+  }\n \n   /**\n    * A {@link UnionType} contains a given type (alternate) iff the member",
    "result_reason": "error: ';' expected",
    "test_result": "ERROR"
}