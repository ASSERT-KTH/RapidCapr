{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int guess = getOffset(instantLocal);\n        final long adjusted = instantLocal - guess;\n        final int after = getOffset(adjusted + 1);\n        if (guess == after) {\n            return guess;\n        } else {\n            final int before = getOffset(adjusted - 1);\n            if (before != after) {\n                // We are near a DST boundary and need to err on the side of safety\n                final long nextLocal = nextTransition(adjusted);\n                final long next = nextTransition(instantLocal);\n                if (nextLocal != next) {\n                    return guess;\n                }\n            }\n            return after;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..07aed925 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,23 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+        final int guess = getOffset(instantLocal);\n+        final long adjusted = instantLocal - guess;\n+        final int after = getOffset(adjusted + 1);\n+        if (guess == after) {\n+            return guess;\n+        } else {\n+            final int before = getOffset(adjusted - 1);\n+            if (before != after) {\n+                // We are near a DST boundary and need to err on the side of safety\n+                final long nextLocal = nextTransition(adjusted);\n+                final long next = nextTransition(instantLocal);\n+                if (nextLocal != next) {\n+                    return guess;\n                 }\n             }\n+            return after;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.ComparisonFailure: expected:<...1-10-30T01:15:00.000[+01:00]> but was:<...1-10-30T01:15:00.000[Z]>",
    "test_result": "FAIL"
}