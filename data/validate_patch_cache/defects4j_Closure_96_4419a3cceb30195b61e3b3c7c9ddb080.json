{
    "patch": "  private void visitParameterList(NodeTraversal t, Node call,\n  FunctionType functionType) {\n    List<Node> arguments = call.removeChildren();\n    // we skip the function name\n    arguments.remove(0);\n\n    Iterator<Node> parameters = functionType.getParameters().iterator();\n    Node parameter, argument;\n    int ordinal = 1;\n    while (parameters.hasNext()) {\n        parameter = parameters.next();\n\n        if (parameter.isVarArgs()) { // varargs parameter\n            if (!arguments.isEmpty()) {\n                for (Node arg : arguments) {\n                    validator.expectArgumentMatchesParameter(t, arg,\n                    getJSType(arg), getJSType(parameter), call, ordinal++);\n                }\n            }\n            break;\n        } else if (!arguments.isEmpty()) { // fixed parameter\n            argument = arguments.remove(0);\n            validator.expectArgumentMatchesParameter(t, argument,\n            getJSType(argument), getJSType(parameter), call, ordinal++);\n        } else { // missing argument for fixed parameter\n            report(t, call, NUMBER_OF_PARAMS_MISMATCH,\n            validator.getReadableJSTypeName(call.getFirstChild(), false),\n            String.valueOf(t.getLineNumber()),\n            \"missing argument/s in function call\",\n            String.valueOf(ordinal++),\n            parameter.getString());\n        }\n    }\n\n    // report error if there are additional arguments\n    if (!arguments.isEmpty()) {\n        int noParams = functionType.getParameters().size();\n        Node lastParam = functionType.getParameters().get(noParams - 1);\n        if (lastParam.isVarArgs()) {\n            // one varargs param surely means any # of args is ok\n            if (noParams == 1) {\n                return;\n            }\n            noParams--; // don't count the vararg param\n        }\n        int extraArgs = arguments.size();\n        report(t, call, NUMBER_OF_PARAMS_MISMATCH,\n        validator.getReadableJSTypeName(call.getFirstChild(), false),\n        String.valueOf(t.getLineNumber()),\n        \"number of arguments given to function does not \" +\n        \"match number of parameters in function definition,\" +\n        \" expected \" + noParams + \" but found \" + (extraArgs + noParams));\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 8077e0d8..d782c281 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1397,37 +1397,59 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n    * Visits the parameters of a CALL or a NEW node.\n    */\n   private void visitParameterList(NodeTraversal t, Node call,\n-      FunctionType functionType) {\n-    Iterator<Node> arguments = call.children().iterator();\n-    arguments.next(); // skip the function name\n+  FunctionType functionType) {\n+    List<Node> arguments = call.removeChildren();\n+    // we skip the function name\n+    arguments.remove(0);\n \n     Iterator<Node> parameters = functionType.getParameters().iterator();\n-    int ordinal = 0;\n-    Node parameter = null;\n-    Node argument = null;\n-    while (arguments.hasNext() &&\n-           parameters.hasNext()) {\n-      // If there are no parameters left in the list, then the while loop\n-      // above implies that this must be a var_args function.\n+    Node parameter, argument;\n+    int ordinal = 1;\n+    while (parameters.hasNext()) {\n         parameter = parameters.next();\n-      argument = arguments.next();\n-      ordinal++;\n \n-      validator.expectArgumentMatchesParameter(t, argument,\n-          getJSType(argument), getJSType(parameter), call, ordinal);\n+        if (parameter.isVarArgs()) { // varargs parameter\n+            if (!arguments.isEmpty()) {\n+                for (Node arg : arguments) {\n+                    validator.expectArgumentMatchesParameter(t, arg,\n+                    getJSType(arg), getJSType(parameter), call, ordinal++);\n+                }\n+            }\n+            break;\n+        } else if (!arguments.isEmpty()) { // fixed parameter\n+            argument = arguments.remove(0);\n+            validator.expectArgumentMatchesParameter(t, argument,\n+            getJSType(argument), getJSType(parameter), call, ordinal++);\n+        } else { // missing argument for fixed parameter\n+            report(t, call, NUMBER_OF_PARAMS_MISMATCH,\n+            validator.getReadableJSTypeName(call.getFirstChild(), false),\n+            String.valueOf(t.getLineNumber()),\n+            \"missing argument/s in function call\",\n+            String.valueOf(ordinal++),\n+            parameter.getString());\n+        }\n     }\n \n-    int numArgs = call.getChildCount() - 1;\n-    int minArgs = functionType.getMinArguments();\n-    int maxArgs = functionType.getMaxArguments();\n-    if (minArgs > numArgs || maxArgs < numArgs) {\n-      report(t, call, WRONG_ARGUMENT_COUNT,\n-              validator.getReadableJSTypeName(call.getFirstChild(), false),\n-              String.valueOf(numArgs), String.valueOf(minArgs),\n-              maxArgs != Integer.MAX_VALUE ?\n-              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");\n+    // report error if there are additional arguments\n+    if (!arguments.isEmpty()) {\n+        int noParams = functionType.getParameters().size();\n+        Node lastParam = functionType.getParameters().get(noParams - 1);\n+        if (lastParam.isVarArgs()) {\n+            // one varargs param surely means any # of args is ok\n+            if (noParams == 1) {\n+                return;\n+            }\n+            noParams--; // don't count the vararg param\n+        }\n+        int extraArgs = arguments.size();\n+        report(t, call, NUMBER_OF_PARAMS_MISMATCH,\n+        validator.getReadableJSTypeName(call.getFirstChild(), false),\n+        String.valueOf(t.getLineNumber()),\n+        \"number of arguments given to function does not \" +\n+        \"match number of parameters in function definition,\" +\n+        \" expected \" + noParams + \" but found \" + (extraArgs + noParams));\n     }\n-  }\n+}\n \n   /**\n    * Visits a RETURN node.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}