{
    "patch": "if (Double.isNaN(tmp1[0]) || Double.isNaN(tmp1[1])) {\n    result[resultOffset] = Double.NaN;\n} else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n    final double theta = FastMath.atan2(y[yOffset], x[xOffset]);\n    result[resultOffset] = (theta > 0 ? FastMath.PI : -FastMath.PI);\n} else if (Double.isInfinite(y[yOffset])) {\n    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n} else if (Double.isInfinite(x[xOffset])) {\n    result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n} else if (x[xOffset] == 0) {\n    if (y[yOffset] > 0) {\n        result[resultOffset] = FastMath.PI / 2.0;\n    } else if (y[yOffset] < 0) {\n        result[resultOffset] = -FastMath.PI / 2.0;\n    } else {\n        result[resultOffset] = 0.0;\n    }\n} else if (y[yOffset] == 0) {\n    result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..72f0cd7ae 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1416,6 +1416,26 @@ public class DSCompiler {\n         }\n \n         // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+if (Double.isNaN(tmp1[0]) || Double.isNaN(tmp1[1])) {\n+    result[resultOffset] = Double.NaN;\n+} else if (Double.isInfinite(x[xOffset]) && Double.isInfinite(y[yOffset])) {\n+    final double theta = FastMath.atan2(y[yOffset], x[xOffset]);\n+    result[resultOffset] = (theta > 0 ? FastMath.PI : -FastMath.PI);\n+} else if (Double.isInfinite(y[yOffset])) {\n+    result[resultOffset] = (y[yOffset] > 0 ? FastMath.PI / 2.0 : -FastMath.PI / 2.0);\n+} else if (Double.isInfinite(x[xOffset])) {\n+    result[resultOffset] = (x[xOffset] >= 0 ? 0.0 : FastMath.PI);\n+} else if (x[xOffset] == 0) {\n+    if (y[yOffset] > 0) {\n+        result[resultOffset] = FastMath.PI / 2.0;\n+    } else if (y[yOffset] < 0) {\n+        result[resultOffset] = -FastMath.PI / 2.0;\n+    } else {\n+        result[resultOffset] = 0.0;\n+    }\n+} else if (y[yOffset] == 0) {\n+    result[resultOffset] = (x[xOffset] > 0 ? 0.0 : FastMath.PI);\n+}\n \n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}