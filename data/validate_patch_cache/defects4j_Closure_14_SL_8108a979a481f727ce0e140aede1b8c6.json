{
    "patch": "  if (finallyNode != null) {\n    if(fromNode.getParent() == finallyNode) {\n      cfa.createEdge(fromNode.getFirstChild(), Branch.UNCOND, finallyNode);\n      cfa.createEdge(fromNode.getFirstChild(), Branch.UNCOND, computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa));\n    } else {\n      if (fromNode.getLastChild().isFinallyBlock()) {\n        Node lastChild = fromNode.getLastChild();\n        cfa.createEdge(lastChild.getLastChild(), Branch.UNCOND, finallyNode);\n      }\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..34a98659 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+  if (finallyNode != null) {\n+    if(fromNode.getParent() == finallyNode) {\n+      cfa.createEdge(fromNode.getFirstChild(), Branch.UNCOND, finallyNode);\n+      cfa.createEdge(fromNode.getFirstChild(), Branch.UNCOND, computeFollowNode(finallyNode, finallyNode.getFirstChild(), cfa));\n+    } else {\n+      if (fromNode.getLastChild().isFinallyBlock()) {\n+        Node lastChild = fromNode.getLastChild();\n+        cfa.createEdge(lastChild.getLastChild(), Branch.UNCOND, finallyNode);\n+      }\n+      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    }\n+  }\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}