{
    "patch": "    public void verify(VerificationData data) {\n        AssertionError error = null;\n        boolean hasJUnit;\n\n        // Check if JUnit is being used\n        try {\n            Class.forName(\"org.junit.Assert\");\n            hasJUnit = true;\n        } catch (ClassNotFoundException e) {\n            hasJUnit = false;\n        }\n\n        timer.start();\n        while (timer.isCounting()) {\n            try {\n                delegate.verify(data);\n\n                if (returnOnSuccess) {\n                    return;\n                } else {\n                    error = null;\n                }\n            } catch (MockitoAssertionError e) {\n                error = handleVerifyException(e);\n            }\n            catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                error = handleVerifyException(e);\n            }\n\n            // If JUnit is being used, break the loop immediately to prevent any further verification\n            if (hasJUnit) {\n                break;\n            }\n        }\n\n        if (error != null) {\n            throw error;\n        }\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\nindex c5a66c501..2c522665f 100644\n--- a/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n+++ b/src/org/mockito/internal/verification/VerificationOverTimeImpl.java\n@@ -74,6 +74,15 @@ public class VerificationOverTimeImpl implements VerificationMode {\n      */\n     public void verify(VerificationData data) {\n         AssertionError error = null;\n+        boolean hasJUnit;\n+\n+        // Check if JUnit is being used\n+        try {\n+            Class.forName(\"org.junit.Assert\");\n+            hasJUnit = true;\n+        } catch (ClassNotFoundException e) {\n+            hasJUnit = false;\n+        }\n \n         timer.start();\n         while (timer.isCounting()) {\n@@ -91,6 +100,11 @@ public class VerificationOverTimeImpl implements VerificationMode {\n             catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {\n                 error = handleVerifyException(e);\n             }\n+\n+            // If JUnit is being used, break the loop immediately to prevent any further verification\n+            if (hasJUnit) {\n+                break;\n+            }\n         }\n \n         if (error != null) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}