{
    "patch": "if (str.startsWith(\"--\")) {\n    // this is protection for poorness in java.lang.BigDecimal.\n    // it accepts this as a legal value, but it does not appear \n    // to be in specification of class. OS X Java parses it to \n    // a wrong value.\n    return null;\n}\nif (str.toLowerCase().startsWith(\"0x\") || str.toLowerCase().startsWith(\"-0x\")) {\n    try {\n        return createInteger(Integer.decode(str));\n    } catch (NumberFormatException e) {\n        try {\n            return createLong(Long.decode(str));\n        } catch (NumberFormatException nfe) {\n            return createBigInteger(str);\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 882358f2..bb596297 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -455,7 +455,24 @@ public class NumberUtils {\n             // a wrong value.\n             return null;\n         }\n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+if (str.startsWith(\"--\")) {\n+    // this is protection for poorness in java.lang.BigDecimal.\n+    // it accepts this as a legal value, but it does not appear \n+    // to be in specification of class. OS X Java parses it to \n+    // a wrong value.\n+    return null;\n+}\n+if (str.toLowerCase().startsWith(\"0x\") || str.toLowerCase().startsWith(\"-0x\")) {\n+    try {\n+        return createInteger(Integer.decode(str));\n+    } catch (NumberFormatException e) {\n+        try {\n+            return createLong(Long.decode(str));\n+        } catch (NumberFormatException nfe) {\n+            return createBigInteger(str);\n+        }\n+    }\n+}\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}