{
    "patch": "if (!(other instanceof Complex)) {\n    ret = false;\n} else {\n    Complex rhs = (Complex) other;\n    if (Double.isNaN(real) && Double.isNaN(imaginary)) {\n        ret = rhs.isNaN();\n    } else {\n        ret = Double.doubleToLongBits(real) == Double.doubleToLongBits(rhs.getReal()) &&\n                Double.doubleToLongBits(imaginary) == Double.doubleToLongBits(rhs.getImaginary());\n    }\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..21f15fe2c 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -255,7 +255,17 @@ public class Complex implements Serializable  {\n                 if (rhs.isNaN()) {\n                     ret = this.isNaN();\n                 } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n+if (!(other instanceof Complex)) {\n+    ret = false;\n+} else {\n+    Complex rhs = (Complex) other;\n+    if (Double.isNaN(real) && Double.isNaN(imaginary)) {\n+        ret = rhs.isNaN();\n+    } else {\n+        ret = Double.doubleToLongBits(real) == Double.doubleToLongBits(rhs.getReal()) &&\n+                Double.doubleToLongBits(imaginary) == Double.doubleToLongBits(rhs.getImaginary());\n+    }\n+}\n                 }\n             } catch (ClassCastException ex) {\n                 // ignore exception",
    "result_reason": "error: variable rhs is already defined in method equals(Object)",
    "test_result": "ERROR"
}