{
    "patch": "public int getOffsetFromLocal(long instantLocal) {\n  int localOffset = getOffset(instantLocal);\n  long nextTransition = nextTransition(instantLocal);\n\n  // Local time is near a DST gap (e.g. within a standard gap directly before a DST interval)\n  if (nextTransition <= instantLocal || (nextTransition - instantLocal) > millisPerHour) {\n    long prevTransition = previousTransition(instantLocal);\n    int prevOffset = getOffset(prevTransition);\n\n    // Determine whether we are just before the gap or just after\n    if (prevOffset < localOffset) {\n      prevOffset = localOffset;\n    } else if (prevOffset >= localOffset) {\n      localOffset = prevOffset;\n    }\n\n    if (getOffset(prevTransition - 1) != prevOffset) {\n      localOffset = prevOffset + 1;\n    } else {\n      localOffset = prevOffset;\n    }\n  }\n\n  return localOffset;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..b8934faf 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -877,38 +877,31 @@ public abstract class DateTimeZone implements Serializable {\n      * @param instantLocal  the millisecond instant, relative to this time zone, to get the offset for\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n-    public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n-        }\n-        return offsetAdjusted;\n+public int getOffsetFromLocal(long instantLocal) {\n+  int localOffset = getOffset(instantLocal);\n+  long nextTransition = nextTransition(instantLocal);\n+\n+  // Local time is near a DST gap (e.g. within a standard gap directly before a DST interval)\n+  if (nextTransition <= instantLocal || (nextTransition - instantLocal) > millisPerHour) {\n+    long prevTransition = previousTransition(instantLocal);\n+    int prevOffset = getOffset(prevTransition);\n+\n+    // Determine whether we are just before the gap or just after\n+    if (prevOffset < localOffset) {\n+      prevOffset = localOffset;\n+    } else if (prevOffset >= localOffset) {\n+      localOffset = prevOffset;\n+    }\n+\n+    if (getOffset(prevTransition - 1) != prevOffset) {\n+      localOffset = prevOffset + 1;\n+    } else {\n+      localOffset = prevOffset;\n     }\n+  }\n+\n+  return localOffset;\n+}\n \n     /**\n      * Converts a standard UTC instant to a local instant with the same",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}