{
    "patch": "public Period normalizedStandard(PeriodType type) {\n    type = DateTimeUtils.getPeriodType(type);\n    int years = getYears();\n    int months = getMonths();\n    int weeks = getWeeks();\n    int days = getDays();\n    int hours = getHours();\n    int minutes = getMinutes();\n    int seconds = getSeconds();\n    int millis = getMillis();\n\n    if (years != 0 || months != 0) {\n        years = FieldUtils.safeAdd(years, months / 12);\n        months = months % 12;\n        if (months < 0 && years > 0) {\n            months += 12;\n            years--;\n        } else if (months > 0 && years < 0) {\n            months -= 12;\n            years++;\n        }\n    }\n    if (weeks != 0 || days != 0) {\n        int newDays = FieldUtils.safeAdd((weeks * 7), days);\n        weeks = 0;\n        days = newDays;\n    }\n    if (hours != 0) {\n        days = FieldUtils.safeAdd(days, (hours / 24));\n        hours = hours % 24;\n    }\n    if (minutes != 0) {\n        hours = FieldUtils.safeAdd(hours, (minutes / 60));\n        minutes = minutes % 60;\n    }\n    if (seconds != 0) {\n        minutes = FieldUtils.safeAdd(minutes, (seconds / 60));\n        seconds = seconds % 60;\n    }\n    if (millis != 0) {\n        seconds = FieldUtils.safeAdd(seconds, (millis / 1000));\n        millis = millis % 1000;\n        if (seconds < 0 && millis > 0 && FieldUtils.safeAdd(minutes, 1) <= 0) {\n            seconds++;\n            minutes--;\n        }\n        if (seconds >= 60 && millis < 0 && FieldUtils.safeAdd(minutes, -1) >= 0) {\n            seconds -= 60;\n            minutes++;\n        }\n    }\n\n    Period result = new Period(\n        years, months, weeks, days, hours, minutes, seconds, millis, type);\n    return result.normalizedStandard();\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..92e34763 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,61 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n+public Period normalizedStandard(PeriodType type) {\n+    type = DateTimeUtils.getPeriodType(type);\n+    int years = getYears();\n+    int months = getMonths();\n+    int weeks = getWeeks();\n+    int days = getDays();\n+    int hours = getHours();\n+    int minutes = getMinutes();\n+    int seconds = getSeconds();\n+    int millis = getMillis();\n+\n+    if (years != 0 || months != 0) {\n+        years = FieldUtils.safeAdd(years, months / 12);\n+        months = months % 12;\n+        if (months < 0 && years > 0) {\n+            months += 12;\n+            years--;\n+        } else if (months > 0 && years < 0) {\n+            months -= 12;\n+            years++;\n         }\n-        return result;\n     }\n+    if (weeks != 0 || days != 0) {\n+        int newDays = FieldUtils.safeAdd((weeks * 7), days);\n+        weeks = 0;\n+        days = newDays;\n+    }\n+    if (hours != 0) {\n+        days = FieldUtils.safeAdd(days, (hours / 24));\n+        hours = hours % 24;\n+    }\n+    if (minutes != 0) {\n+        hours = FieldUtils.safeAdd(hours, (minutes / 60));\n+        minutes = minutes % 60;\n+    }\n+    if (seconds != 0) {\n+        minutes = FieldUtils.safeAdd(minutes, (seconds / 60));\n+        seconds = seconds % 60;\n+    }\n+    if (millis != 0) {\n+        seconds = FieldUtils.safeAdd(seconds, (millis / 1000));\n+        millis = millis % 1000;\n+        if (seconds < 0 && millis > 0 && FieldUtils.safeAdd(minutes, 1) <= 0) {\n+            seconds++;\n+            minutes--;\n+        }\n+        if (seconds >= 60 && millis < 0 && FieldUtils.safeAdd(minutes, -1) >= 0) {\n+            seconds -= 60;\n+            minutes++;\n+        }\n+    }\n+\n+    Period result = new Period(\n+        years, months, weeks, days, hours, minutes, seconds, millis, type);\n+    return result.normalizedStandard();\n+}\n \n }",
    "result_reason": "java.lang.StackOverflowError",
    "test_result": "FAIL"
}