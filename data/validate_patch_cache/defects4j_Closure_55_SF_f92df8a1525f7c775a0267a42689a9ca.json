{
    "patch": "private static boolean isReduceableFunctionExpression(Node n) {\n  // Check if node is a function.\n  if (n.isFunction()) {\n    return true;\n  }\n\n  if (!n.isCall()) {\n    return false;\n  }\n\n  // Check if the first child of the call is a function expression.\n  Node fnNode = n.getFirstChild();\n  if (!fnNode.isFunction()) {\n    return false;\n  }\n\n  // Check if the function is not a generator function.\n  return !fnNode.getBooleanProp(Node.GENERATOR_FN);\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FunctionRewriter.java b/src/com/google/javascript/jscomp/FunctionRewriter.java\nindex dbf00069..430f880b 100644\n--- a/src/com/google/javascript/jscomp/FunctionRewriter.java\n+++ b/src/com/google/javascript/jscomp/FunctionRewriter.java\n@@ -113,10 +113,26 @@ class FunctionRewriter implements CompilerPass {\n     return (root != null) ? root.removeFirstChild() : null;\n   }\n \n-  private static boolean isReduceableFunctionExpression(Node n) {\n-    return NodeUtil.isFunctionExpression(n);\n+private static boolean isReduceableFunctionExpression(Node n) {\n+  // Check if node is a function.\n+  if (n.isFunction()) {\n+    return true;\n   }\n \n+  if (!n.isCall()) {\n+    return false;\n+  }\n+\n+  // Check if the first child of the call is a function expression.\n+  Node fnNode = n.getFirstChild();\n+  if (!fnNode.isFunction()) {\n+    return false;\n+  }\n+\n+  // Check if the function is not a generator function.\n+  return !fnNode.getBooleanProp(Node.GENERATOR_FN);\n+}\n+\n   /**\n    * Information needed to apply a reduction.\n    */",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}