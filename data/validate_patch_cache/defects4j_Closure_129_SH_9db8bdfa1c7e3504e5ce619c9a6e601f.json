{
    "patch": "    private void annotateCalls(Node n) {\n      Preconditions.checkState(n.isCall());\n\n      Node firstChild = n.getFirstChild();\n      if (!NodeUtil.isGet(firstChild) && !firstChild.isCast()) {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }\n\n      if (firstChild.isName() && \"eval\".equals(firstChild.getString())) {\n        firstChild.putBooleanProp(Node.DIRECT_EVAL, true);\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..bb4cfeac 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,18 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+    private void annotateCalls(Node n) {\n+      Preconditions.checkState(n.isCall());\n+\n+      Node firstChild = n.getFirstChild();\n+      if (!NodeUtil.isGet(firstChild) && !firstChild.isCast()) {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n+\n+      if (firstChild.isName() && \"eval\".equals(firstChild.getString())) {\n+        firstChild.putBooleanProp(Node.DIRECT_EVAL, true);\n+      }\n+    }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}