{
    "patch": "        return references.stream()\n                .filter(this::isInitializingDeclarationAt)\n                .findFirst()\n                .orElseGet(() -> references.stream()\n                        .filter(this::isInitializingAssignmentAt)\n                        .findFirst()\n                        .orElse(null));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\nindex cdacc5f7..336c2483 100644\n--- a/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n+++ b/src/com/google/javascript/jscomp/ReferenceCollectingCallback.java\n@@ -428,6 +428,13 @@ class ReferenceCollectingCallback implements ScopedCallback,\n       for (BasicBlock block = ref.getBasicBlock();\n            block != null; block = block.getParent()) {\n         if (block.isFunction) {\n+        return references.stream()\n+                .filter(this::isInitializingDeclarationAt)\n+                .findFirst()\n+                .orElseGet(() -> references.stream()\n+                        .filter(this::isInitializingAssignmentAt)\n+                        .findFirst()\n+                        .orElse(null));\n           break;\n         } else if (block.isLoop) {\n           return false;",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}