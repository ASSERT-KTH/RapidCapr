{
    "patch": "protected BasePeriod(long duration) {\n    super();\n    iType = PeriodType.time();\n    iValues = new int[SIZE];\n    setPeriodInternal(duration);\n}\n  \nprivate void setPeriodInternal(long duration) {\n    long time = duration;\n    // extract weeks and remainder\n    long weeks = time / DateTimeConstants.MILLIS_PER_WEEK;\n    time = time - (weeks * DateTimeConstants.MILLIS_PER_WEEK);\n    // put extracted values into fields\n    iValues[6] = FieldUtils.safeToInt(weeks); // set weeks\n    // set other values to zero (including iType)\n    System.arraycopy(ZERO, 0, iValues, 0, 6);\n    iValues[7] = FieldUtils.safeToInt(time); // set millis\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..aea7d3f0 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1613,28 +1613,23 @@ public final class Period\n      *  years or months but the specified period type does not support them\n      * @since 1.5\n      */\n-    public Period normalizedStandard(PeriodType type) {\n-        type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n-        int years = getYears();\n-        int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n-    }\n+protected BasePeriod(long duration) {\n+    super();\n+    iType = PeriodType.time();\n+    iValues = new int[SIZE];\n+    setPeriodInternal(duration);\n+}\n+  \n+private void setPeriodInternal(long duration) {\n+    long time = duration;\n+    // extract weeks and remainder\n+    long weeks = time / DateTimeConstants.MILLIS_PER_WEEK;\n+    time = time - (weeks * DateTimeConstants.MILLIS_PER_WEEK);\n+    // put extracted values into fields\n+    iValues[6] = FieldUtils.safeToInt(weeks); // set weeks\n+    // set other values to zero (including iType)\n+    System.arraycopy(ZERO, 0, iValues, 0, 6);\n+    iValues[7] = FieldUtils.safeToInt(time); // set millis\n+}\n \n }",
    "result_reason": "error: invalid method declaration; return type required",
    "test_result": "ERROR"
}