{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int initialError = 1 * DateTimeConstants.MILLIS_PER_HOUR;\n        long instantBefore = instantLocal - initialError;\n        long instantAfter = instantLocal + initialError;\n        int offsetBefore = getOffset(instantBefore);\n        int offsetAfter = getOffset(instantAfter);\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n\n        // calculate the correct offset\n        int diff = offsetAfter - offsetBefore;\n        long transition = nextTransition(instantBefore);\n        while (true) {\n            int offsetAtTransition = getOffset(transition);\n            final long nextTransition = nextTransition(transition);\n            if (instantAfter < nextTransition) {\n                if (offsetAfter == offsetAtTransition) {\n                    return offsetAfter;\n                }\n                if (offsetBefore == offsetAtTransition) {\n                    return offsetBefore;\n                }\n                long midPoint = (instantBefore + instantAfter) / 2;\n                diff = getOffset(midPoint + 1) - getOffset(midPoint);\n                if (diff != 0) {\n                    return getOffset(midPoint);\n                } else {\n                    return offsetBefore;\n                }\n            }\n            instantBefore = transition;\n            offsetBefore = offsetAtTransition;\n            transition = nextTransition;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..65661ac1 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,40 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+        final int initialError = 1 * DateTimeConstants.MILLIS_PER_HOUR;\n+        long instantBefore = instantLocal - initialError;\n+        long instantAfter = instantLocal + initialError;\n+        int offsetBefore = getOffset(instantBefore);\n+        int offsetAfter = getOffset(instantAfter);\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+\n+        // calculate the correct offset\n+        int diff = offsetAfter - offsetBefore;\n+        long transition = nextTransition(instantBefore);\n+        while (true) {\n+            int offsetAtTransition = getOffset(transition);\n+            final long nextTransition = nextTransition(transition);\n+            if (instantAfter < nextTransition) {\n+                if (offsetAfter == offsetAtTransition) {\n+                    return offsetAfter;\n                 }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+                if (offsetBefore == offsetAtTransition) {\n+                    return offsetBefore;\n+                }\n+                long midPoint = (instantBefore + instantAfter) / 2;\n+                diff = getOffset(midPoint + 1) - getOffset(midPoint);\n+                if (diff != 0) {\n+                    return getOffset(midPoint);\n+                } else {\n+                    return offsetBefore;\n                 }\n             }\n+            instantBefore = transition;\n+            offsetBefore = offsetAtTransition;\n+            transition = nextTransition;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}