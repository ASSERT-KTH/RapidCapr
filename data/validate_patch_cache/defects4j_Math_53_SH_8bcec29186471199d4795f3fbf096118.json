{
    "patch": "```\nif (rhs == null) {\n    return createComplex(Double.NaN, Double.NaN);\n} else if (Double.isNaN(real) || Double.isNaN(imaginary)\n        || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n    return createComplex(Double.NaN, Double.NaN);\n}\n``` \n\nThis fix hunk handles both the case where `rhs` is `null` and the case where `real` or `imaginary` of either of the `Complex` objects is `NaN`. If any of these cases are true, the method returns a new `Complex` object with `NaN` values for both `real` and `imaginary` components.",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..506b7979e 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -150,6 +150,16 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n     public Complex add(Complex rhs)\n         throws NullArgumentException {\n         MathUtils.checkNotNull(rhs);\n+```\n+if (rhs == null) {\n+    return createComplex(Double.NaN, Double.NaN);\n+} else if (Double.isNaN(real) || Double.isNaN(imaginary)\n+        || Double.isNaN(rhs.getReal()) || Double.isNaN(rhs.getImaginary())) {\n+    return createComplex(Double.NaN, Double.NaN);\n+}\n+``` \n+\n+This fix hunk handles both the case where `rhs` is `null` and the case where `real` or `imaginary` of either of the `Complex` objects is `NaN`. If any of these cases are true, the method returns a new `Complex` object with `NaN` values for both `real` and `imaginary` components.\n         return createComplex(real + rhs.getReal(),\n             imaginary + rhs.getImaginary());\n     }",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}