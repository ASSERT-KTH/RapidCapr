{
    "patch": "            } else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable actualTypeArgumentVariable = (TypeVariable) actualTypeArgument;\n                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgumentVariable);\n                if (resolvedType == null) {\n                    List<Type> bounds = Arrays.asList(actualTypeArgumentVariable.getBounds());\n                    for (Type bound : bounds) {\n                        if (bound instanceof Class) {\n                            resolvedType = bound;\n                            break;\n                        }\n                    }\n                    if (resolvedType == null) {\n                        resolvedType = actualTypeArgumentVariable;\n                    }\n                }\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..ac064bd7d 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,25 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable actualTypeArgumentVariable = (TypeVariable) actualTypeArgument;\n+                Type resolvedType = contextualActualTypeParameters.get(actualTypeArgumentVariable);\n+                if (resolvedType == null) {\n+                    List<Type> bounds = Arrays.asList(actualTypeArgumentVariable.getBounds());\n+                    for (Type bound : bounds) {\n+                        if (bound instanceof Class) {\n+                            resolvedType = bound;\n+                            break;\n+                        }\n+                    }\n+                    if (resolvedType == null) {\n+                        resolvedType = actualTypeArgumentVariable;\n+                    }\n+                }\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}