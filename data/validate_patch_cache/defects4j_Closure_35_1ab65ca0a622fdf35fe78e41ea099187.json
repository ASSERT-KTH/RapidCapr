{
    "patch": "List<GenericFunctionType.Parameter> parameters = Iterables.transform(\n        functionType.getParameters(), new Function<JSType, GenericFunctionType.Parameter>() {\n          @Override\n          public GenericFunctionType.Parameter apply(JSType input) {\n            return new GenericFunctionType.Parameter(\"arg\", input);\n          }\n        });\nGenericFunctionType functionTypeWithParams =\n        new GenericFunctionType(\n            parameters,\n            getNativeType(U2U_CONSTRUCTOR_RETURN_TYPE));",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeInference.java b/src/com/google/javascript/jscomp/TypeInference.java\nindex 13e10920..2e69756d 100644\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n@@ -1118,21 +1118,17 @@ class TypeInference\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n+List<GenericFunctionType.Parameter> parameters = Iterables.transform(\n+        functionType.getParameters(), new Function<JSType, GenericFunctionType.Parameter>() {\n+          @Override\n+          public GenericFunctionType.Parameter apply(JSType input) {\n+            return new GenericFunctionType.Parameter(\"arg\", input);\n           }\n-        }\n-      }\n+        });\n+GenericFunctionType functionTypeWithParams =\n+        new GenericFunctionType(\n+            parameters,\n+            getNativeType(U2U_CONSTRUCTOR_RETURN_TYPE));\n     }\n   }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}