{
    "patch": "    if (provided == null || !provided.isExplicitlyProvided()) {\n      unrecognizedRequires.add(\n          new UnrecognizedRequire(n, ns, t.getSourceName()));\n>>> [ INFILL ] <<<\n      parent.removeChild(n);\n      compiler.reportCodeChange();\n      return;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\nindex 70bf1b00..0aa6e3fc 100644\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n@@ -326,7 +326,14 @@ class ProcessClosurePrimitives extends AbstractPostOrderCallback\n       // the checks for broken requires turned off. In these cases, we\n       // allow broken requires to be preserved by the first run to\n       // let them be caught in the subsequent run.\n-      if (provided != null) {\n+    if (provided == null || !provided.isExplicitlyProvided()) {\n+      unrecognizedRequires.add(\n+          new UnrecognizedRequire(n, ns, t.getSourceName()));\n+>>> [ INFILL ] <<<\n+      parent.removeChild(n);\n+      compiler.reportCodeChange();\n+      return;\n+    }\n         parent.detachFromParent();\n         compiler.reportCodeChange();\n       }",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}