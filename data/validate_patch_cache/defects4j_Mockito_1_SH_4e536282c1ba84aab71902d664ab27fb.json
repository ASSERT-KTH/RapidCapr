{
    "patch": "            Object[] rawArgs = invocation.getRawArguments();\n            if (rawArgs[indexOfVararg] instanceof Matcher[]) {\n                Matcher<?>[] matchers = (Matcher[]) rawArgs[indexOfVararg];\n                for (int i = 0; i < matchers.length; i++) {\n                    if (matchers[i] instanceof CapturesArguments) {\n                        int argumentIndex = i + invocation.getMethod().getParameterTypes().length - rawArgs.length;\n                        Object argument = invocation.getArgumentAt(argumentIndex, Object.class);\n                        ((CapturesArguments) matchers[i]).captureFrom(argument);\n                    }\n                }\n            } else {\n                throw new UnsupportedOperationException(\"Varargs parameter must be a Matcher<?>[], but was \" +\n                        rawArgs[indexOfVararg].getClass().getSimpleName());\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/invocation/InvocationMatcher.java b/src/org/mockito/internal/invocation/InvocationMatcher.java\nindex 7b877b1e2..a1d93f698 100644\n--- a/src/org/mockito/internal/invocation/InvocationMatcher.java\n+++ b/src/org/mockito/internal/invocation/InvocationMatcher.java\n@@ -116,11 +116,23 @@ public class InvocationMatcher implements DescribedInvocation, CapturesArgumensF\n     public Location getLocation() {\n         return invocation.getLocation();\n     }\n-\n     public void captureArgumentsFrom(Invocation invocation) {\n         if (invocation.getMethod().isVarArgs()) {\n             int indexOfVararg = invocation.getRawArguments().length - 1;\n-            throw new UnsupportedOperationException();\n+            Object[] rawArgs = invocation.getRawArguments();\n+            if (rawArgs[indexOfVararg] instanceof Matcher[]) {\n+                Matcher<?>[] matchers = (Matcher[]) rawArgs[indexOfVararg];\n+                for (int i = 0; i < matchers.length; i++) {\n+                    if (matchers[i] instanceof CapturesArguments) {\n+                        int argumentIndex = i + invocation.getMethod().getParameterTypes().length - rawArgs.length;\n+                        Object argument = invocation.getArgumentAt(argumentIndex, Object.class);\n+                        ((CapturesArguments) matchers[i]).captureFrom(argument);\n+                    }\n+                }\n+            } else {\n+                throw new UnsupportedOperationException(\"Varargs parameter must be a Matcher<?>[], but was \" +\n+                        rawArgs[indexOfVararg].getClass().getSimpleName());\n+            }\n \n         } else {\n             for (int position = 0; position < matchers.size(); position++) {",
    "result_reason": "java.lang.UnsupportedOperationException: Varargs parameter must be a Matcher<?>[], but was String[]",
    "test_result": "FAIL"
}