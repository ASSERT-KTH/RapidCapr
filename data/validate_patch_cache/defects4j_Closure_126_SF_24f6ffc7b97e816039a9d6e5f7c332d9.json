{
    "patch": "void tryMinimizeExits(Node n, int exitType, String labelName) {\n    NodeUtil.tryCollapseBlock(n);\n\n    if (matchingExitNode(n, exitType, labelName)) {\n      NodeUtil.removeChild(n.getParent(), n);\n      compiler.reportCodeChange();\n      return;\n    }\n\n    if (n.isBlock()) {\n      tryMinimizeBlockExit(n);\n      return;\n    }\n\n    if (n.isIf()) {\n      tryMinimizeIfExit(n, exitType, labelName);\n      return;\n    }\n\n    if (n.isTry()) {\n      tryMinimizeTryExit(n, exitType, labelName);\n      return;\n    }\n\n    if (n.isClass()) {\n      tryMinimizeClassExit(n.getLastChild(), exitType, labelName);\n      return;\n    }\n\n    if (n.isSwitch()) {\n      tryMinimizeBlockExit(n);\n      return;\n    }\n\n    if (n.isFunction()) {\n      tryMinimizeFunctionExit(n.getLastChild(), exitType, labelName);\n      return;\n    }\n\n    if (n.isForIn() || n.isForOf() || n.isFor() || n.isWhile() || n.isDo() || n.isForEach()) {\n      tryMinimizeBlockExit(n.getLastChild());\n      return;\n    }\n\n    if (n.hasChildren()) {\n      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n        tryMinimizeExits(child, exitType, labelName);\n      }\n    }\n  }\n\n  private void tryMinimizeBlockExit(Node block) {\n    for (Node statement = block.getFirstChild(); statement != null; statement = statement.getNext()) {\n      tryMinimizeExits(statement, BlockTraversal.Order.POST_ORDER, null);\n      tryMinimizeBlockEnd(block, statement);\n    }\n  }\n\n  private void tryMinimizeIfExit(Node ifNode, int exitType, String labelName) {\n    tryMinimizeExits(ifNode.getFirstChild().getNext(), BlockTraversal.Order.POST_ORDE",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/MinimizeExitPoints.java b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\nindex 4146f177..a5a3b5d4 100644\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n@@ -103,103 +103,67 @@ class MinimizeExitPoints\n    *   null otherwise.\n    * @nullable labelName non-null only for breaks within labels.\n    */\n-  void tryMinimizeExits(Node n, int exitType, String labelName) {\n+void tryMinimizeExits(Node n, int exitType, String labelName) {\n+    NodeUtil.tryCollapseBlock(n);\n \n-    // Just an 'exit'.\n     if (matchingExitNode(n, exitType, labelName)) {\n       NodeUtil.removeChild(n.getParent(), n);\n       compiler.reportCodeChange();\n       return;\n     }\n \n-    // Just an 'if'.\n+    if (n.isBlock()) {\n+      tryMinimizeBlockExit(n);\n+      return;\n+    }\n+\n     if (n.isIf()) {\n-      Node ifBlock = n.getFirstChild().getNext();\n-      tryMinimizeExits(ifBlock, exitType, labelName);\n-      Node elseBlock = ifBlock.getNext();\n-      if (elseBlock != null) {\n-        tryMinimizeExits(elseBlock, exitType, labelName);\n-      }\n+      tryMinimizeIfExit(n, exitType, labelName);\n       return;\n     }\n \n-    // Just a 'try/catch/finally'.\n     if (n.isTry()) {\n-      Node tryBlock = n.getFirstChild();\n-      tryMinimizeExits(tryBlock, exitType, labelName);\n-      Node allCatchNodes = NodeUtil.getCatchBlock(n);\n-      if (NodeUtil.hasCatchHandler(allCatchNodes)) {\n-        Preconditions.checkState(allCatchNodes.hasOneChild());\n-        Node catchNode = allCatchNodes.getFirstChild();\n-        Node catchCodeBlock = catchNode.getLastChild();\n-        tryMinimizeExits(catchCodeBlock, exitType, labelName);\n-      }\n-      /* Don't try to minimize the exits of finally blocks, as this\n-       * can cause problems if it changes the completion type of the finally\n-       * block. See ECMA 262 Sections 8.9 & 12.14\n-       */\n-      if (NodeUtil.hasFinally(n)) {\n-        Node finallyBlock = n.getLastChild();\n-        tryMinimizeExits(finallyBlock, exitType, labelName);\n-      }\n+      tryMinimizeTryExit(n, exitType, labelName);\n+      return;\n     }\n \n-    // Just a 'label'.\n-    if (n.isLabel()) {\n-      Node labelBlock = n.getLastChild();\n-      tryMinimizeExits(labelBlock, exitType, labelName);\n+    if (n.isClass()) {\n+      tryMinimizeClassExit(n.getLastChild(), exitType, labelName);\n+      return;\n     }\n \n-    // TODO(johnlenz): The last case of SWITCH statement?\n-\n-    // The rest assumes a block with at least one child, bail on anything else.\n-    if (!n.isBlock() || n.getLastChild() == null) {\n+    if (n.isSwitch()) {\n+      tryMinimizeBlockExit(n);\n       return;\n     }\n \n-    // Multiple if-exits can be converted in a single pass.\n-    // Convert \"if (blah) break;  if (blah2) break; other_stmt;\" to\n-    // become \"if (blah); else { if (blah2); else { other_stmt; } }\"\n-    // which will get converted to \"if (!blah && !blah2) { other_stmt; }\".\n-    for (Node c : n.children()) {\n-\n-      // An 'if' block to process below.\n-      if (c.isIf()) {\n-        Node ifTree = c;\n-        Node trueBlock, falseBlock;\n-\n-        // First, the true condition block.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        tryMinimizeIfBlockExits(trueBlock, falseBlock,\n-            ifTree, exitType, labelName);\n+    if (n.isFunction()) {\n+      tryMinimizeFunctionExit(n.getLastChild(), exitType, labelName);\n+      return;\n+    }\n \n-        // Now the else block.\n-        // The if blocks may have changed, get them again.\n-        trueBlock = ifTree.getFirstChild().getNext();\n-        falseBlock = trueBlock.getNext();\n-        if (falseBlock != null) {\n-          tryMinimizeIfBlockExits(falseBlock, trueBlock,\n-              ifTree, exitType, labelName);\n-        }\n-      }\n+    if (n.isForIn() || n.isForOf() || n.isFor() || n.isWhile() || n.isDo() || n.isForEach()) {\n+      tryMinimizeBlockExit(n.getLastChild());\n+      return;\n+    }\n \n-      if (c == n.getLastChild()) {\n-        break;\n+    if (n.hasChildren()) {\n+      for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+        tryMinimizeExits(child, exitType, labelName);\n       }\n     }\n+  }\n \n-    // Now try to minimize the exits of the last child, if it is removed\n-    // look at what has become the last child.\n-    for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {\n-      tryMinimizeExits(c, exitType, labelName);\n-      // If the node is still the last child, we are done.\n-      if (c == n.getLastChild()) {\n-        break;\n-      }\n+  private void tryMinimizeBlockExit(Node block) {\n+    for (Node statement = block.getFirstChild(); statement != null; statement = statement.getNext()) {\n+      tryMinimizeExits(statement, BlockTraversal.Order.POST_ORDER, null);\n+      tryMinimizeBlockEnd(block, statement);\n     }\n   }\n \n+  private void tryMinimizeIfExit(Node ifNode, int exitType, String labelName) {\n+    tryMinimizeExits(ifNode.getFirstChild().getNext(), BlockTraversal.Order.POST_ORDE\n+\n   /**\n    * Look for exits (returns, breaks, or continues, depending on the context) at\n    * the end of a block and removes them by moving the if node's siblings,",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}