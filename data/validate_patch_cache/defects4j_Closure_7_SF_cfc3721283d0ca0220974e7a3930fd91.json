{
    "patch": "  public JSType caseObjectType(ObjectType type) {\n    if (value.equals(\"function\")) {\n      if (type.getOwnPropertyJSType(\"call\") != null && type.getOwnPropertyJSType(\"apply\") != null) {\n        return type;\n      }\n      JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n      return (resultEqualsValue && ctorType != null && ctorType.isSubtype(type)) ? ctorType : null;\n    }\n    return matchesExpectation(\"object\") ? type : null;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\nindex 0afabc8a..fd6b7971 100644\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n@@ -607,15 +607,16 @@ public abstract class ChainableReverseAbstractInterpreter\n     }\n \n     @Override\n-    public JSType caseObjectType(ObjectType type) {\n-      if (value.equals(\"function\")) {\n-        JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n-        return resultEqualsValue && ctorType.isSubtype(type) ? ctorType : null;\n-          // Objects are restricted to \"Function\", subtypes are left\n-          // Only filter out subtypes of \"function\"\n+  public JSType caseObjectType(ObjectType type) {\n+    if (value.equals(\"function\")) {\n+      if (type.getOwnPropertyJSType(\"call\") != null && type.getOwnPropertyJSType(\"apply\") != null) {\n+        return type;\n       }\n-      return matchesExpectation(\"object\") ? type : null;\n+      JSType ctorType = getNativeType(U2U_CONSTRUCTOR_TYPE);\n+      return (resultEqualsValue && ctorType != null && ctorType.isSubtype(type)) ? ctorType : null;\n     }\n+    return matchesExpectation(\"object\") ? type : null;\n+  }\n \n     @Override\n     public JSType caseStringType() {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}