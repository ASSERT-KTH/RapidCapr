{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node lhs = assign.getFirstChild();\n  Node rhs = lhs.getNext();\n  Node prototype = NodeUtil.newQName(assign.getOwnerDocument(), \"prototype\");\n  // Ensure this is an assignment to a property.\n  if (!NodeUtil.isGet(lhs)) {\n    return false;\n  }\n\n  if (lhs.getChildCount() != 2) {\n    return false;\n  }\n  \n  if (!prototype.getString().equals(lhs.getLastChild().getString())) {\n    return false;\n  }\n\n  Node obj = lhs.getFirstChild();\n\n  // Ensure this is a prototype assignment.\n  if (!obj.isName() || !obj.getString().matches( \"[aA](rguments|[zZ])\")) {\n    return false;\n  }\n\n  Node grandparent = lhs.getGrandparent();\n  if (grandparent == null) {\n    return false;\n  }\n\n  Node greatGrandparent = grandparent.getGrandparent();\n  if (greatGrandparent == null || !greatGrandparent.isFunction()) {\n    return false;\n  }\n\n  // Exclude destructuring.\n  if (NodeUtil.isDestructuringLhs(lhs)) {\n    return false;\n  }\n  \n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..391d338c 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -311,27 +311,47 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getParent().getType() == Token.NAME);\n     }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+  Node lhs = assign.getFirstChild();\n+  Node rhs = lhs.getNext();\n+  Node prototype = NodeUtil.newQName(assign.getOwnerDocument(), \"prototype\");\n+  // Ensure this is an assignment to a property.\n+  if (!NodeUtil.isGet(lhs)) {\n+    return false;\n+  }\n \n-      return false;\n-    }\n+  if (lhs.getChildCount() != 2) {\n+    return false;\n+  }\n+  \n+  if (!prototype.getString().equals(lhs.getLastChild().getString())) {\n+    return false;\n+  }\n+\n+  Node obj = lhs.getFirstChild();\n+\n+  // Ensure this is a prototype assignment.\n+  if (!obj.isName() || !obj.getString().matches( \"[aA](rguments|[zZ])\")) {\n+    return false;\n+  }\n+\n+  Node grandparent = lhs.getGrandparent();\n+  if (grandparent == null) {\n+    return false;\n+  }\n+\n+  Node greatGrandparent = grandparent.getGrandparent();\n+  if (greatGrandparent == null || !greatGrandparent.isFunction()) {\n+    return false;\n+  }\n+\n+  // Exclude destructuring.\n+  if (NodeUtil.isDestructuringLhs(lhs)) {\n+    return false;\n+  }\n+  \n+  return true;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}