{
    "patch": "              case Token.PLUS:\n              case Token.AND:\n              case Token.OR:\n                // ensure this is a boolean operation\n                Node left1 = parent.getFirstChild();\n                Node right1 = parent.getLastChild();\n                if (!isBoolean(left1) || !isBoolean(right1)) {\n                  return;\n                }\n\n                // flatten the root\n                List<Node> toProcess = Lists.newArrayList();\n                flattenConditionalOp(n, toProcess);\n\n                boolean isAnd = parent.isAnd();\n                boolean[] safeChain = findSafeChain(toProcess, isAnd);\n\n                if (!isAnd) {\n                  for (int i = 0; i < toProcess.size(); i++) {\n                    if (safeChain[i]) {\n                      Node nodeToRemove = toProcess.get(i);\n                      parent.removeChild(nodeToRemove);\n                      parent.addChildBefore(NodeUtil.newUndefinedNode(n), nodeToRemove);\n                    }\n                  }\n                } else {\n                  for (int i = toProcess.size() - 1; i >= 0; i--) {\n                    if (safeChain[i]) {\n                      Node nodeToRemove = toProcess.get(i);\n                      parent.removeChild(nodeToRemove);\n                      parent.addChildAfter(NodeUtil.newUndefinedNode(n), nodeToRemove);\n                    }\n                  }\n                }\n                break;\n              case Token.CATCH:\n                name = n.getFirstChild().getString();\n                break;\n              default:\n                if (NodeUtil.isAssignmentOp(parent) &&\n                    parent.getFirstChild() == n) {\n                  isSet = true;\n                  type = Name.Type.OTHER;\n                }\n                break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..a2faf59a 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,51 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+              case Token.PLUS:\n+              case Token.AND:\n+              case Token.OR:\n+                // ensure this is a boolean operation\n+                Node left1 = parent.getFirstChild();\n+                Node right1 = parent.getLastChild();\n+                if (!isBoolean(left1) || !isBoolean(right1)) {\n+                  return;\n+                }\n+\n+                // flatten the root\n+                List<Node> toProcess = Lists.newArrayList();\n+                flattenConditionalOp(n, toProcess);\n+\n+                boolean isAnd = parent.isAnd();\n+                boolean[] safeChain = findSafeChain(toProcess, isAnd);\n+\n+                if (!isAnd) {\n+                  for (int i = 0; i < toProcess.size(); i++) {\n+                    if (safeChain[i]) {\n+                      Node nodeToRemove = toProcess.get(i);\n+                      parent.removeChild(nodeToRemove);\n+                      parent.addChildBefore(NodeUtil.newUndefinedNode(n), nodeToRemove);\n+                    }\n+                  }\n+                } else {\n+                  for (int i = toProcess.size() - 1; i >= 0; i--) {\n+                    if (safeChain[i]) {\n+                      Node nodeToRemove = toProcess.get(i);\n+                      parent.removeChild(nodeToRemove);\n+                      parent.addChildAfter(NodeUtil.newUndefinedNode(n), nodeToRemove);\n+                    }\n+                  }\n+                }\n+                break;\n+              case Token.CATCH:\n+                name = n.getFirstChild().getString();\n+                break;\n+              default:\n+                if (NodeUtil.isAssignmentOp(parent) &&\n+                    parent.getFirstChild() == n) {\n+                  isSet = true;\n+                  type = Name.Type.OTHER;\n+                }\n+                break;\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}