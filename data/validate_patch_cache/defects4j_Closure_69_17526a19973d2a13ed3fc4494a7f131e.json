{
    "patch": "if (functionType.getTypeOfThis() != null) {\n  Node parent = n.getParent();\n  boolean isThisPropertyAccess = parent != null &&\n      (parent.isGetProp() || parent.isGetElem() || parent.isCall() || parent.isNew());\n  if (!isThisPropertyAccess) {\n    report(t, n, TypeValidator.DEFAULT_INVALID_THIS_TYPE, functionType.toString());\n    ensureTyped(t, n, getNativeType(JSTypeNative.UNKNOWN_TYPE));\n    return;\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex f58418c6..3b8f6a88 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -1577,6 +1577,16 @@ public class TypeCheck implements NodeTraversal.Callback, CompilerPass {\n \n       // Functions with explcit 'this' types must be called in a GETPROP\n       // or GETELEM.\n+if (functionType.getTypeOfThis() != null) {\n+  Node parent = n.getParent();\n+  boolean isThisPropertyAccess = parent != null &&\n+      (parent.isGetProp() || parent.isGetElem() || parent.isCall() || parent.isNew());\n+  if (!isThisPropertyAccess) {\n+    report(t, n, TypeValidator.DEFAULT_INVALID_THIS_TYPE, functionType.toString());\n+    ensureTyped(t, n, getNativeType(JSTypeNative.UNKNOWN_TYPE));\n+    return;\n+  }\n+}\n \n       visitParameterList(t, n, functionType);\n       ensureTyped(t, n, functionType.getReturnType());",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}