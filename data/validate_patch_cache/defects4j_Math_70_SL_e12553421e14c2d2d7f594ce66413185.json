{
    "patch": "return (Double.isNaN(min) || Double.isNaN(max)) ? Double.NaN :\n        (f.value(min) * f.value(max) > 0) ? Double.NaN :\n        solve(f, (f.value(initial) * f.value(min) < 0) ? min : initial, (f.value(initial) * f.value(max) < 0) ? max : initial);",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\nindex 3f669271a..216f650a2 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java\n@@ -69,7 +69,9 @@ public class BisectionSolver extends UnivariateRealSolverImpl {\n     /** {@inheritDoc} */\n     public double solve(final UnivariateRealFunction f, double min, double max, double initial)\n         throws MaxIterationsExceededException, FunctionEvaluationException {\n-        return solve(min, max);\n+return (Double.isNaN(min) || Double.isNaN(max)) ? Double.NaN :\n+        (f.value(min) * f.value(max) > 0) ? Double.NaN :\n+        solve(f, (f.value(initial) * f.value(min) < 0) ? min : initial, (f.value(initial) * f.value(max) < 0) ? max : initial);\n     }\n \n     /** {@inheritDoc} */",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}