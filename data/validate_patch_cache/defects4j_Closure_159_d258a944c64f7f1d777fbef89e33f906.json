{
    "patch": "for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n  findCalledFunctions(c, changed);\n}\n\nif (node.getType() == Token.CALL) {\n  Node child = node.getFirstChild();\n  if (child.getType() == Token.NAME) {\n    String functionName = child.getString();\n    if (!changed.contains(functionName)) {\n      changed.add(functionName);\n      List<PositiveScope> scopes = getFunctionDefinitionScope(functionName);\n      for (PositiveScope scope : scopes) {\n        addCallReference(scope, functionName);\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..645f246d 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -774,10 +774,23 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node node, Set<String> changed) {\n     Preconditions.checkArgument(changed != null);\n     // For each referenced function, add a new reference\n-    if (node.getType() == Token.CALL) {\n-      Node child = node.getFirstChild();\n-      if (child.getType() == Token.NAME) {\n-        changed.add(child.getString());\n+for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+  findCalledFunctions(c, changed);\n+}\n+\n+if (node.getType() == Token.CALL) {\n+  Node child = node.getFirstChild();\n+  if (child.getType() == Token.NAME) {\n+    String functionName = child.getString();\n+    if (!changed.contains(functionName)) {\n+      changed.add(functionName);\n+      List<PositiveScope> scopes = getFunctionDefinitionScope(functionName);\n+      for (PositiveScope scope : scopes) {\n+        addCallReference(scope, functionName);\n+      }\n+    }\n+  }\n+}\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}