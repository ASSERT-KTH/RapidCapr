{
    "patch": "public double cumulativeProbability(double x) throws MathException {\n    if (Double.isNaN(x)) {\n        return Double.NaN;\n    }\n    if (Double.isInfinite(x)) {\n        return x < 0 ? 0.0 : 1.0;\n    }\n    double z = (x - mean) / standardDeviation;\n    if (Math.abs(z) > 40.0) {\n        return z > 0 ? 1.0 : 0.0;\n    }\n    double t = 1.0 / (1.0 + 0.5 * Math.abs(z));\n    double ans = 1.0 - t * Math.exp(-z*z/2.0) / Math.sqrt(2.0*Math.PI);\n    return z < 0 ? ans : 1.0 - ans;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\nindex 02810e142..344edb9fe 100644\n--- a/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n+++ b/src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java\n@@ -105,10 +105,21 @@ public class NormalDistributionImpl extends AbstractContinuousDistribution\n      * x is more than 20 standard deviations from the mean, in which case the\n      * convergence exception is caught and 0 or 1 is returned.\n      */\n-    public double cumulativeProbability(double x) throws MathException {\n-            return 0.5 * (1.0 + Erf.erf((x - mean) /\n-                    (standardDeviation * Math.sqrt(2.0))));\n+public double cumulativeProbability(double x) throws MathException {\n+    if (Double.isNaN(x)) {\n+        return Double.NaN;\n     }\n+    if (Double.isInfinite(x)) {\n+        return x < 0 ? 0.0 : 1.0;\n+    }\n+    double z = (x - mean) / standardDeviation;\n+    if (Math.abs(z) > 40.0) {\n+        return z > 0 ? 1.0 : 0.0;\n+    }\n+    double t = 1.0 / (1.0 + 0.5 * Math.abs(z));\n+    double ans = 1.0 - t * Math.exp(-z*z/2.0) / Math.sqrt(2.0*Math.PI);\n+    return z < 0 ? ans : 1.0 - ans;\n+}\n     \n     /**\n      * For this distribution, X, this method returns the critical point x, such",
    "result_reason": "junit.framework.AssertionFailedError",
    "test_result": "FAIL"
}