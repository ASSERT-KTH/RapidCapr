{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && !name.isExported()) {\n        // {@code name} meets condition (a); try to inline it.\n        Ref declaration = Iterables.getOnlyElement(name.getDeclarations());\n        if (declaration.type == Ref.Type.VAR) {\n          Node node = declaration.getNode();\n          Node parent = node.getParent();\n          if (NodeUtil.isNameDeclaration(parent)) {\n            Node value = node.getFirstChild().detach();\n            NodeUtil.removeChild(parent.getParent(), parent);\n            for (Ref ref : name.getRefs()) {\n              NodeUtil.replaceNode(ref.getNode(), value.cloneTree());\n            }\n            name.removeDeclaration(declaration);\n          }\n        }\n      } else if (name.globalSets > 0 ||\n                 name.localSets > 0 ||\n                 name.aliasingGets > 0) {\n        // {@code name} meets condition (b).\n        // Find all of its local aliases and try to inline them.\n        List<Ref> refs = Lists.newArrayList(name.getRefs());\n        boolean inlinedAlias = false;\n        for (Ref ref : refs) {\n          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n            if (inlineAliasIfPossible(ref, namespace)) {\n              name.removeRef(ref);\n              inlinedAlias = true;\n            }\n          }\n        }\n\n        // If an alias has been inlined, the name is no longer of type\n        // object literal or function, so we skip adding its children to the\n        // worklist.\n        if (!inlinedAlias &&\n            (name.type == Name.Type.OBJECTLIT ||\n             name.type == Name.Type.FUNCTION) &&\n            name.aliasingGets == 0 && name.props != null) {\n          // All of {@code name}'s children meet condition (a), so they can be\n          // added to the worklist.\n          workList.addAll(name.props);\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..68090cc3 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,49 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && !name.isExported()) {\n+        // {@code name} meets condition (a); try to inline it.\n+        Ref declaration = Iterables.getOnlyElement(name.getDeclarations());\n+        if (declaration.type == Ref.Type.VAR) {\n+          Node node = declaration.getNode();\n+          Node parent = node.getParent();\n+          if (NodeUtil.isNameDeclaration(parent)) {\n+            Node value = node.getFirstChild().detach();\n+            NodeUtil.removeChild(parent.getParent(), parent);\n+            for (Ref ref : name.getRefs()) {\n+              NodeUtil.replaceNode(ref.getNode(), value.cloneTree());\n+            }\n+            name.removeDeclaration(declaration);\n+          }\n+        }\n+      } else if (name.globalSets > 0 ||\n+                 name.localSets > 0 ||\n+                 name.aliasingGets > 0) {\n+        // {@code name} meets condition (b).\n+        // Find all of its local aliases and try to inline them.\n+        List<Ref> refs = Lists.newArrayList(name.getRefs());\n+        boolean inlinedAlias = false;\n+        for (Ref ref : refs) {\n+          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {\n+            if (inlineAliasIfPossible(ref, namespace)) {\n+              name.removeRef(ref);\n+              inlinedAlias = true;\n+            }\n+          }\n+        }\n+\n+        // If an alias has been inlined, the name is no longer of type\n+        // object literal or function, so we skip adding its children to the\n+        // worklist.\n+        if (!inlinedAlias &&\n+            (name.type == Name.Type.OBJECTLIT ||\n+             name.type == Name.Type.FUNCTION) &&\n+            name.aliasingGets == 0 && name.props != null) {\n+          // All of {@code name}'s children meet condition (a), so they can be\n+          // added to the worklist.\n+          workList.addAll(name.props);\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}