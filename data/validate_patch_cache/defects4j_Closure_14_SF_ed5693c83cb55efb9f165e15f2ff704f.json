{
    "patch": "import com.google.javascript.jscomp.ControlFlowGraph.BranchedFlowState.Branch;\nimport com.google.javascript.rhino.Node;\n\n...\n\n  private static Node computeFollowNode(\n      Node fromNode, Node node, ControlFlowAnalysis cfa) {\n    /*\n     * This is the case where:\n     *\n     * 1. Parent is null implies that we are transferring control to the end of\n     * the script.\n     *\n     * 2. Parent is a function implies that we are transferring control back to\n     * the caller of the function.\n     *\n     * 3. If the node is a return statement, we should also transfer control\n     * back to the caller of the function.\n     *\n     * 4. If the node is root then we have reached the end of what we have been\n     * asked to traverse.\n     *\n     * In all cases we should transfer control to a \"symbolic return\" node.\n     * This will make life easier for DFAs.\n     */\n    Node parent = node.getParent();\n    if (parent == null || parent.isFunction() ||\n        (cfa != null && node == cfa.root)) {\n      return null;\n    }\n\n    // If we are just before a IF/WHILE/DO/FOR:\n    switch (parent.getType()) {\n      // The follow() of any of the path from IF would be what follows IF.\n      case Token.IF:\n        return computeFollowNode(fromNode, parent, cfa);\n      case Token.CASE:\n      case Token.DEFAULT_CASE:\n        // After the body of a CASE, the control goes to the body of the next\n        // case, without having to go to the case condition.\n        if (parent.getNext() != null) {\n          if (parent.getNext().isCase()) {\n            return parent.getNext().getFirstChild().getNext();\n          } else if (parent.getNext().isDefaultCase()) {\n            return parent.getNext().getFirstChild();\n          } else {\n            Preconditions.checkState(false, \"Not reachable\");\n          }\n        } else {\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n        break;\n      case Token.FOR:\n        if (NodeUtil.isForIn(parent)) {\n          return parent;\n        } else {\n          // Check for any statement following for loop init; condition; increment;\n          Node nextNode = parent.getFirstChild().getNext().getNext().getNext();\n          if (nextNode == null || NodeUtil.isLoop(nextNode)) {\n            return computeFollowNode(fromNode, parent, cfa);\n          } else {\n            return computeFirstNode(nextNode);\n          }\n        }\n      case Token.WHILE:\n        return parent;\n      case Token.DO:\n        return parent.getFirstChild();\n      case Token.TRY:\n        // If we are coming out of the TRY block...\n        if (parent.getFirstChild() == node) {\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(parent.getLastChild());\n          } else { // and have no FINALLY.\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // CATCH block.\n        } else if (NodeUtil.getCatchBlock(parent) == node){\n          if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n            return computeFallThrough(node.getNext());\n          } else {\n            return computeFollowNode(fromNode, parent, cfa);\n          }\n        // If we are coming out of the FINALLY block...\n        } else if (parent.getLastChild() == node){\n          if (cfa != null) {\n            for (Node finallyNode : cfa.finallyMap.get(parent)) {\n              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n            }\n          }\n          return computeFollowNode(fromNode, parent, cfa);\n        }\n    }\n\n    // Now that we are done with the special cases follow should be its\n    // immediate sibling, unless its sibling is a function\n    Node nextSibling = node.getNext();\n\n    // Skip function declarations because control doesn't get pass into it.\n    while (nextSibling != null && nextSibling.isFunction()) {\n      nextSibling = nextSibling.getNext();\n    }\n\n    if (nextSibling != null) {\n      return computeFirstNode(nextSibling);\n    } else {\n      // If there are no more siblings, control is transferred up the AST.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..530cba1d 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -689,6 +689,11 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n    *        during recursion.\n    * @param node The node that follow() should compute.\n    */\n+import com.google.javascript.jscomp.ControlFlowGraph.BranchedFlowState.Branch;\n+import com.google.javascript.rhino.Node;\n+\n+...\n+\n   private static Node computeFollowNode(\n       Node fromNode, Node node, ControlFlowAnalysis cfa) {\n     /*\n@@ -740,11 +745,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         if (NodeUtil.isForIn(parent)) {\n           return parent;\n         } else {\n-          return parent.getFirstChild().getNext().getNext();\n+          // Check for any statement following for loop init; condition; increment;\n+          Node nextNode = parent.getFirstChild().getNext().getNext().getNext();\n+          if (nextNode == null || NodeUtil.isLoop(nextNode)) {\n+            return computeFollowNode(fromNode, parent, cfa);\n+          } else {\n+            return computeFirstNode(nextNode);\n+          }\n         }\n       case Token.WHILE:\n-      case Token.DO:\n         return parent;\n+      case Token.DO:\n+        return parent.getFirstChild();\n       case Token.TRY:\n         // If we are coming out of the TRY block...\n         if (parent.getFirstChild() == node) {\n@@ -781,7 +793,7 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n     }\n \n     if (nextSibling != null) {\n-      return computeFallThrough(nextSibling);\n+      return computeFirstNode(nextSibling);\n     } else {\n       // If there are no more siblings, control is transferred up the AST.\n       return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}