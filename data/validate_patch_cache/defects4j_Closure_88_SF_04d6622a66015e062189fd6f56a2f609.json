{
    "patch": "  private VariableLiveness isVariableReadBeforeKill(\n      Node n, String variable) {\n    if (n.isName() && variable.equals(n.getString())) {\n      if (NodeUtil.isLhs(n, n.getParent())) {\n        // The expression to which the assignment is made is evaluated before\n        // the RHS is evaluated (normal left to right evaluation) but the KILL\n        // occurs after the RHS is evaluated.\n        return VariableLiveness.KILL;\n      } else {\n        return VariableLiveness.READ;\n      }\n    } else if (n.isFunction()) {\n      // Variables declared as function parameters are not considered \"live\"\n      // before they are used.\n      // These nodes define new local scopes.\n      Node argList = n.getSecondChild();\n      for (Node arg = argList.getFirstChild();\n           arg != null;\n           arg = arg.getNext()) {\n        if (arg.isName() && variable.equals(arg.getString())) {\n          return VariableLiveness.KILL;\n        }\n      }\n    }\n\n    // Expressions are evaluated left-right, depth first.\n    for (Node child = n.getFirstChild();\n         child != null;\n         child = child.getNext()) {\n      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n        VariableLiveness state =\n            isVariableReadBeforeKill(child, variable);\n        if (state != VariableLiveness.MAYBE_LIVE) {\n          return state;\n        }\n      }\n    }\n    return VariableLiveness.MAYBE_LIVE;\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\nindex ef33e4c0..0808751e 100644\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n@@ -322,7 +322,7 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n    */\n   private VariableLiveness isVariableReadBeforeKill(\n       Node n, String variable) {\n-    if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n+    if (n.isName() && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n         // The expression to which the assignment is made is evaluated before\n         // the RHS is evaluated (normal left to right evaluation) but the KILL\n@@ -331,13 +331,27 @@ class DeadAssignmentsElimination extends AbstractPostOrderCallback implements\n       } else {\n         return VariableLiveness.READ;\n       }\n+    } else if (n.isFunction()) {\n+      // Variables declared as function parameters are not considered \"live\"\n+      // before they are used.\n+      // These nodes define new local scopes.\n+      Node argList = n.getSecondChild();\n+      for (Node arg = argList.getFirstChild();\n+           arg != null;\n+           arg = arg.getNext()) {\n+        if (arg.isName() && variable.equals(arg.getString())) {\n+          return VariableLiveness.KILL;\n+        }\n+      }\n     }\n \n     // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n-        child != null; child = child.getNext()) {\n+         child != null;\n+         child = child.getNext()) {\n       if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n-        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n+        VariableLiveness state =\n+            isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}