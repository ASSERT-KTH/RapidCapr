{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        final int offsetLocal = getOffset(instantLocal);\n        final long instantAdjusted = instantLocal - offsetLocal;\n        final int offsetAdjusted = getOffset(instantAdjusted);\n        final long nextAdjusted = nextTransition(instantAdjusted);\n\n        if (offsetLocal != offsetAdjusted) {\n            if (nextAdjusted == instantLocal - offsetLocal) {\n                return offsetLocal;\n            }\n            if (nextAdjusted < instantLocal - offsetLocal) {\n                int newOffset = getOffset(nextAdjusted);\n                if (newOffset == offsetLocal) {\n                    newOffset = getOffset(nextAdjusted + 1);\n                }\n                return newOffset;\n            }\n            if (nextAdjusted > instantLocal - offsetLocal) {\n                long prevAdjusted = previousTransition(instantAdjusted);\n                int prevOffset = getOffset(prevAdjusted);\n                if (prevAdjusted < instantAdjusted - (long)prevOffset) {\n                    prevOffset = offsetAdjusted;\n                }\n                if (prevOffset < offsetLocal) {\n                    return prevOffset;\n                }\n                int newOffset = getOffset(prevAdjusted);\n                if (newOffset == offsetLocal) {\n                    newOffset = getOffset(prevAdjusted - 1);\n                }\n                return newOffset;\n            }\n        }\n\n        if (offsetLocal > 0) {\n            long prevTransition = previousTransition(instantAdjusted);\n            long nextTransition = (nextAdjusted > instantAdjusted - offsetLocal) ? nextAdjusted : nextTransition(instantLocal - offsetLocal);\n            if (prevTransition < instantAdjusted && nextTransition > instantAdjusted) {\n                int prevOffset;\n                for (prevOffset = offsetLocal; prevOffset > offsetAdjusted && prevTransition < nextTransition; prevOffset = getOffset(prevTransition - 1)) {\n                    prevTransition = nextTransition(prevTransition);\n                    nextTransition = nextTransition(prevTransition);\n                }\n\n                return prevOffset;\n            }\n        }\n\n        return offsetAdjusted;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..1e2345aa 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,35 +878,53 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n         final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n         final long instantAdjusted = instantLocal - offsetLocal;\n         final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n+        final long nextAdjusted = nextTransition(instantAdjusted);\n+\n         if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n+            if (nextAdjusted == instantLocal - offsetLocal) {\n+                return offsetLocal;\n+            }\n+            if (nextAdjusted < instantLocal - offsetLocal) {\n+                int newOffset = getOffset(nextAdjusted);\n+                if (newOffset == offsetLocal) {\n+                    newOffset = getOffset(nextAdjusted + 1);\n+                }\n+                return newOffset;\n+            }\n+            if (nextAdjusted > instantLocal - offsetLocal) {\n+                long prevAdjusted = previousTransition(instantAdjusted);\n+                int prevOffset = getOffset(prevAdjusted);\n+                if (prevAdjusted < instantAdjusted - (long)prevOffset) {\n+                    prevOffset = offsetAdjusted;\n+                }\n+                if (prevOffset < offsetLocal) {\n+                    return prevOffset;\n                 }\n+                int newOffset = getOffset(prevAdjusted);\n+                if (newOffset == offsetLocal) {\n+                    newOffset = getOffset(prevAdjusted - 1);\n+                }\n+                return newOffset;\n             }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n+        }\n+\n+        if (offsetLocal > 0) {\n+            long prevTransition = previousTransition(instantAdjusted);\n+            long nextTransition = (nextAdjusted > instantAdjusted - offsetLocal) ? nextAdjusted : nextTransition(instantLocal - offsetLocal);\n+            if (prevTransition < instantAdjusted && nextTransition > instantAdjusted) {\n+                int prevOffset;\n+                for (prevOffset = offsetLocal; prevOffset > offsetAdjusted && prevTransition < nextTransition; prevOffset = getOffset(prevTransition - 1)) {\n+                    prevTransition = nextTransition(prevTransition);\n+                    nextTransition = nextTransition(prevTransition);\n                 }\n+\n+                return prevOffset;\n             }\n         }\n+\n         return offsetAdjusted;\n     }\n ",
    "result_reason": "junit.framework.AssertionFailedError: expected:<false> but was:<true>",
    "test_result": "FAIL"
}