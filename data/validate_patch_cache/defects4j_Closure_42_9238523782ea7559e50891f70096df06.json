{
    "patch": "    @Override\n    Node processForInLoop(ForInLoop loopNode) {\n      Node lhs = transform(loopNode.getIterator());\n      Node rhs = transform(loopNode.getIteratedObject());\n      Node body = transformBlock(loopNode.getBody());\n\n      if (loopNode.getType() == Token.FOR_OF) {\n        // ForOfLoop uses Token.FOR_AWAIT, but the code doesn't actually\n        // need to be different.\n        Node forNode = newNode(Token.FOR_OF, lhs, rhs, body);\n        return forNode;\n      } else {\n        // ForInLoop\n        Node forNode = newNode(Token.FOR_IN, lhs, rhs, body);\n        if (lhs.getType() == Token.VAR) {\n          Node name = lhs.getFirstChild();\n          if (name.getNext() != null) {\n            errorReporter.error(\n                \"for each...in statement cannot have more than one variable declaration\",\n                sourceName,\n                name.getLineno(), \"for\", 0);\n          }\n          name.setType(Token.NAME);\n          return newNode(\n              forNode, \n              name,\n              transform(loopNode.getIteratedObject()),\n              transformBlock(loopNode.getBody())\n            );\n        }\n        return forNode;\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..9f8cdc0f 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -472,106 +472,38 @@ class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n     @Override\n     Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n+      Node lhs = transform(loopNode.getIterator());\n+      Node rhs = transform(loopNode.getIteratedObject());\n+      Node body = transformBlock(loopNode.getBody());\n+\n+      if (loopNode.getType() == Token.FOR_OF) {\n+        // ForOfLoop uses Token.FOR_AWAIT, but the code doesn't actually\n+        // need to be different.\n+        Node forNode = newNode(Token.FOR_OF, lhs, rhs, body);\n+        return forNode;\n+      } else {\n+        // ForInLoop\n+        Node forNode = newNode(Token.FOR_IN, lhs, rhs, body);\n+        if (lhs.getType() == Token.VAR) {\n+          Node name = lhs.getFirstChild();\n+          if (name.getNext() != null) {\n+            errorReporter.error(\n+                \"for each...in statement cannot have more than one variable declaration\",\n+                sourceName,\n+                name.getLineno(), \"for\", 0);\n+          }\n+          name.setType(Token.NAME);\n+          return newNode(\n+              forNode, \n+              name,\n+              transform(loopNode.getIteratedObject()),\n+              transformBlock(loopNode.getBody())\n+            );\n+        }\n+        return forNode;\n+      }\n     }\n \n     @Override",
    "result_reason": "error: IRFactory.TransformDispatcher is not abstract and does not override abstract method processExpressionStatement(ExpressionStatement) in TypeSafeDispatcher",
    "test_result": "ERROR"
}