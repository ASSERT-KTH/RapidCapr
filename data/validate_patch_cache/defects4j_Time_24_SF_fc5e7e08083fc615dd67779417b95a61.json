{
    "patch": "public long computeMillis(boolean resetFields, String text) {    \n    SavedField[] savedFields = iSavedFields;\n    int count = iSavedFieldsCount;\n    if (iSavedFieldsShared) {\n        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n        iSavedFieldsShared = false;\n    }\n    sort(savedFields, count);\n\n    long millis = iMillis;\n    int year = iDefaultYear;\n\n    // split the saved fields by type so we can process them in order of year, month, day\n    List<SavedField> yearFields = new ArrayList<>(2);\n    List<SavedField> monthFields = new ArrayList<>(2);\n    List<SavedField> dayFields = new ArrayList<>(2);\n    for (int i = 0; i < count; i++) {\n        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n        if (fieldType == DateTimeFieldType.year()) {\n            yearFields.add(savedFields[i]);\n        } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n            monthFields.add(savedFields[i]);\n        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n            dayFields.add(savedFields[i]);\n        } else {\n            // any other field can be processed immediately\n            millis = savedFields[i].set(millis, resetFields);\n        }\n\n        // store the year whenever it's available in any saved field\n        if (fieldType == DateTimeFieldType.year()) {\n            year = savedFields[i].iValue;\n        }\n    }\n\n    // sort the year, month, and day fields in ascending order\n    sort(yearFields, yearFields.size());\n    sort(monthFields, monthFields.size());\n    sort(dayFields, dayFields.size());\n\n    // process year fields first to ensure the appropriate leap year calculation\n    for (SavedField field : yearFields) {\n        millis = field.set(millis, resetFields);\n    }\n    // now process month fields and calculate the year if necessary\n    for (SavedField field : monthFields) {\n        try {\n            millis = field.set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            // if we encounter a problem with the month, try adjusting the year\n            if (field.iValue == 13 && year == iChrono.getAverageMillisPerYearDividedByTwo()) {\n                year--;\n            } else if (field.iValue == 0 && year == iChrono.getAverageMillisPerYear() - iChrono.getAverageMillisPerYearDividedByTwo()) {\n                year++;\n            } else {\n                throw e; // rethrow the exception if we can't fix it\n            }\n            millis = setYear(millis, year);\n            millis = field.set(millis, resetFields); // this time it should work\n        }\n    }\n    // finally process day fields\n    for (SavedField field : dayFields) {\n        try {\n            millis = field.set(millis, resetFields);\n        } catch (IllegalFieldValueException e) {\n            // if we encounter a problem with the day, try adjusting the month and year\n            if (field.iValue == 0) {\n                millis = addToMonth(millis, -1, resetFields);\n                int newDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n                millis = setDayOfMonth(millis, newDay);\n            } else {\n                int maxDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n                if (field.iValue > maxDay) {\n                    // try adding a month and see if the day falls within the new month\n                    millis = addToMonth(millis, 1, resetFields);\n                    maxDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n                    if (field.iValue > maxDay) {\n                        // if the day still falls outside the month, try subtracting a day at a time until it works\n                        do {\n                            millis = addToDay(millis, -1, resetFields);\n                        } while (getChronology().dayOfMonth().get(millis) != field.iValue);\n                    }\n                } else {\n                    // the day is already within the month, so just set it\n                    millis = field.set(millis, resetFields);\n                }\n            }\n        }\n    }\n\n    if (iZone == null) {\n        millis -= iOffset;\n    } else {\n        int offset = iZone.getOffsetFromLocal(millis);\n        millis -= offset;\n        if (offset != iZone.getOffset(millis)) {\n            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n            if (text != null) {\n                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n            }\n            throw new IllegalArgumentException(message);\n        }\n    }\n\n    return millis;\n}\n\n// utility methods\n\nprivate long setYear(long millis, int year) {\n    return getChronology().year().set(millis, year);\n}\n\nprivate long addToMonth(long millis, int months, boolean resetFields) {\n    millis = getChronology().monthOfYear().add(millis, months);\n    if (resetFields) {\n        millis = getChronology().dayOfMonth().set(millis, 1);\n    }\n    return millis;\n}\n\nprivate long setDayOfMonth(long millis, int dayOfMonth) {\n    return getChronology().dayOfMonth().set(millis, dayOfMonth);\n}\n\nprivate long addToDay(long millis, int days, boolean resetFields) {\n    millis = getChronology().dayOfMonth().add(millis, days);\n    if (resetFields) {\n        millis = getChronology().roundFloor(millis);\n    }\n    return millis;\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeParserBucket.java b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\nindex b985cefd..339db516 100644\n--- a/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/src/main/java/org/joda/time/format/DateTimeParserBucket.java\n@@ -328,54 +328,139 @@ public class DateTimeParserBucket {\n      * @throws IllegalArgumentException if any field is out of range\n      * @since 1.3\n      */\n-    public long computeMillis(boolean resetFields, String text) {\n-        SavedField[] savedFields = iSavedFields;\n-        int count = iSavedFieldsCount;\n-        if (iSavedFieldsShared) {\n-            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n-            iSavedFieldsShared = false;\n+public long computeMillis(boolean resetFields, String text) {    \n+    SavedField[] savedFields = iSavedFields;\n+    int count = iSavedFieldsCount;\n+    if (iSavedFieldsShared) {\n+        iSavedFields = savedFields = (SavedField[]) iSavedFields.clone();\n+        iSavedFieldsShared = false;\n+    }\n+    sort(savedFields, count);\n+\n+    long millis = iMillis;\n+    int year = iDefaultYear;\n+\n+    // split the saved fields by type so we can process them in order of year, month, day\n+    List<SavedField> yearFields = new ArrayList<>(2);\n+    List<SavedField> monthFields = new ArrayList<>(2);\n+    List<SavedField> dayFields = new ArrayList<>(2);\n+    for (int i = 0; i < count; i++) {\n+        DateTimeFieldType fieldType = savedFields[i].iField.getType();\n+        if (fieldType == DateTimeFieldType.year()) {\n+            yearFields.add(savedFields[i]);\n+        } else if (fieldType == DateTimeFieldType.monthOfYear()) {\n+            monthFields.add(savedFields[i]);\n+        } else if (fieldType == DateTimeFieldType.dayOfMonth()) {\n+            dayFields.add(savedFields[i]);\n+        } else {\n+            // any other field can be processed immediately\n+            millis = savedFields[i].set(millis, resetFields);\n         }\n-        sort(savedFields, count);\n-        if (count > 0) {\n-            // alter base year for parsing if first field is month or day\n-            DurationField months = DurationFieldType.months().getField(iChrono);\n-            DurationField days = DurationFieldType.days().getField(iChrono);\n-            DurationField first = savedFields[0].iField.getDurationField();\n-            if (compareReverse(first, months) >= 0 && compareReverse(first, days) <= 0) {\n-                saveField(DateTimeFieldType.year(), iDefaultYear);\n-                return computeMillis(resetFields, text);\n-            }\n+\n+        // store the year whenever it's available in any saved field\n+        if (fieldType == DateTimeFieldType.year()) {\n+            year = savedFields[i].iValue;\n         }\n+    }\n+\n+    // sort the year, month, and day fields in ascending order\n+    sort(yearFields, yearFields.size());\n+    sort(monthFields, monthFields.size());\n+    sort(dayFields, dayFields.size());\n \n-        long millis = iMillis;\n+    // process year fields first to ensure the appropriate leap year calculation\n+    for (SavedField field : yearFields) {\n+        millis = field.set(millis, resetFields);\n+    }\n+    // now process month fields and calculate the year if necessary\n+    for (SavedField field : monthFields) {\n         try {\n-            for (int i = 0; i < count; i++) {\n-                millis = savedFields[i].set(millis, resetFields);\n-            }\n+            millis = field.set(millis, resetFields);\n         } catch (IllegalFieldValueException e) {\n-            if (text != null) {\n-                e.prependMessage(\"Cannot parse \\\"\" + text + '\"');\n+            // if we encounter a problem with the month, try adjusting the year\n+            if (field.iValue == 13 && year == iChrono.getAverageMillisPerYearDividedByTwo()) {\n+                year--;\n+            } else if (field.iValue == 0 && year == iChrono.getAverageMillisPerYear() - iChrono.getAverageMillisPerYearDividedByTwo()) {\n+                year++;\n+            } else {\n+                throw e; // rethrow the exception if we can't fix it\n             }\n-            throw e;\n+            millis = setYear(millis, year);\n+            millis = field.set(millis, resetFields); // this time it should work\n         }\n-        \n-        if (iZone == null) {\n-            millis -= iOffset;\n-        } else {\n-            int offset = iZone.getOffsetFromLocal(millis);\n-            millis -= offset;\n-            if (offset != iZone.getOffset(millis)) {\n-                String message =\n-                    \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n-                if (text != null) {\n-                    message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+    }\n+    // finally process day fields\n+    for (SavedField field : dayFields) {\n+        try {\n+            millis = field.set(millis, resetFields);\n+        } catch (IllegalFieldValueException e) {\n+            // if we encounter a problem with the day, try adjusting the month and year\n+            if (field.iValue == 0) {\n+                millis = addToMonth(millis, -1, resetFields);\n+                int newDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n+                millis = setDayOfMonth(millis, newDay);\n+            } else {\n+                int maxDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n+                if (field.iValue > maxDay) {\n+                    // try adding a month and see if the day falls within the new month\n+                    millis = addToMonth(millis, 1, resetFields);\n+                    maxDay = getChronology().daysInMonth(getChronology().monthOfYear().get(millis), getChronology().year().get(millis));\n+                    if (field.iValue > maxDay) {\n+                        // if the day still falls outside the month, try subtracting a day at a time until it works\n+                        do {\n+                            millis = addToDay(millis, -1, resetFields);\n+                        } while (getChronology().dayOfMonth().get(millis) != field.iValue);\n+                    }\n+                } else {\n+                    // the day is already within the month, so just set it\n+                    millis = field.set(millis, resetFields);\n                 }\n-                throw new IllegalArgumentException(message);\n             }\n         }\n-        \n-        return millis;\n     }\n+\n+    if (iZone == null) {\n+        millis -= iOffset;\n+    } else {\n+        int offset = iZone.getOffsetFromLocal(millis);\n+        millis -= offset;\n+        if (offset != iZone.getOffset(millis)) {\n+            String message = \"Illegal instant due to time zone offset transition (\" + iZone + ')';\n+            if (text != null) {\n+                message = \"Cannot parse \\\"\" + text + \"\\\": \" + message;\n+            }\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    return millis;\n+}\n+\n+// utility methods\n+\n+private long setYear(long millis, int year) {\n+    return getChronology().year().set(millis, year);\n+}\n+\n+private long addToMonth(long millis, int months, boolean resetFields) {\n+    millis = getChronology().monthOfYear().add(millis, months);\n+    if (resetFields) {\n+        millis = getChronology().dayOfMonth().set(millis, 1);\n+    }\n+    return millis;\n+}\n+\n+private long setDayOfMonth(long millis, int dayOfMonth) {\n+    return getChronology().dayOfMonth().set(millis, dayOfMonth);\n+}\n+\n+private long addToDay(long millis, int days, boolean resetFields) {\n+    millis = getChronology().dayOfMonth().add(millis, days);\n+    if (resetFields) {\n+        millis = getChronology().roundFloor(millis);\n+    }\n+    return millis;\n+}\n     \n     /**\n      * Sorts elements [0,high). Calling java.util.Arrays isn't always the right",
    "result_reason": "error: diamond operator is not supported in -source 1.5",
    "test_result": "ERROR"
}