{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n        chrono = selectChronology(chrono);\n\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n        long parsedMillis = bucket.computeMillis();\n        if (iOffsetParsed) {\n            if (bucket.getOffsetInteger() != null) {\n                parsedMillis -= bucket.getOffsetInteger().intValue();\n            } else if (bucket.getZone() != null) {\n                parsedMillis = bucket.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n            }\n        } else {\n            parsedMillis = handleUnknownOffset(bucket, parsedMillis);\n        }\n        instant.setMillis(parsedMillis);\n        if (bucket.getOffsetInteger() != null) {\n            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n        } else if (bucket.getZone() != null) {\n            instant.setChronology(chrono.withZone(bucket.getZone()));\n        }\n        return newPos;\n    }\n\n    private long handleUnknownOffset(DateTimeParserBucket bucket, long parsedMillis) {\n        if (bucket.getOffsetInteger() == null && iZone == null) {\n            throw new IllegalArgumentException(\"Unable to convert parsed datetime with null \" +\n                    \"timezone and unknown offset: \" + bucket.toString());\n        }\n        if (bucket.getZone() != null) {\n            parsedMillis = bucket.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n        }\n        return parsedMillis;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..c62d15a9 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -699,30 +699,45 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n         long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        \n+\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+                instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n-        instant.setMillis(bucket.computeMillis(false, text));\n-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n-            int parsedOffset = bucket.getOffsetInteger();\n-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n-            chrono = chrono.withZone(parsedZone);\n-        } else if (bucket.getZone() != null) {\n-            chrono = chrono.withZone(bucket.getZone());\n+        long parsedMillis = bucket.computeMillis();\n+        if (iOffsetParsed) {\n+            if (bucket.getOffsetInteger() != null) {\n+                parsedMillis -= bucket.getOffsetInteger().intValue();\n+            } else if (bucket.getZone() != null) {\n+                parsedMillis = bucket.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n+            }\n+        } else {\n+            parsedMillis = handleUnknownOffset(bucket, parsedMillis);\n         }\n-        instant.setChronology(chrono);\n-        if (iZone != null) {\n-            instant.setZone(iZone);\n+        instant.setMillis(parsedMillis);\n+        if (bucket.getOffsetInteger() != null) {\n+            instant.setZone(DateTimeZone.forOffsetMillis(bucket.getOffsetInteger()));\n+        } else if (bucket.getZone() != null) {\n+            instant.setChronology(chrono.withZone(bucket.getZone()));\n         }\n         return newPos;\n     }\n \n+    private long handleUnknownOffset(DateTimeParserBucket bucket, long parsedMillis) {\n+        if (bucket.getOffsetInteger() == null && iZone == null) {\n+            throw new IllegalArgumentException(\"Unable to convert parsed datetime with null \" +\n+                    \"timezone and unknown offset: \" + bucket.toString());\n+        }\n+        if (bucket.getZone() != null) {\n+            parsedMillis = bucket.getZone().getMillisKeepLocal(DateTimeZone.UTC, parsedMillis);\n+        }\n+        return parsedMillis;\n+    }\n+\n     /**\n      * Parses a datetime from the given text, returning the number of\n      * milliseconds since the epoch, 1970-01-01T00:00:00Z.",
    "result_reason": "",
    "test_result": "ERROR"
}