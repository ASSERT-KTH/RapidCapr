{
    "patch": "\ncase Token.TRY:\n  // If we are coming out of the TRY block...\n  if (parent.getFirstChild() == node) {\n    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n      Node finallyNode = NodeUtil.getFinallyExitNode(parent, node);\n      Preconditions.checkState(finallyNode != null, \"Must have exit node for FINALLY block\");\n      if (cfa != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n      }\n      return finallyNode;\n    } else { // and have no FINALLY.\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  } else if (NodeUtil.getCatchBlock(parent) == node) { // CATCH block.\n    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n      Node finallyNode = NodeUtil.getFinallyExitNode(parent, node.getNext());\n      Preconditions.checkState(finallyNode != null, \"Must have exit node for FINALLY block\");\n      if (cfa != null) {\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n      }\n      return finallyNode;\n    } else {\n      return computeFollowNode(fromNode, parent, cfa);\n    }\n  } else if (parent.getLastChild() == node) { // If we are coming out of the FINALLY block...\n    Node finallyNode;\n    if (cfa != null) {\n      for (Node n : cfa.finallyMap.get(parent)) {\n        finallyNode = n;\n        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n      }\n    }\n    return computeFollowNode(fromNode, parent, cfa);\n  }\n  break;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..839fb851 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,42 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+\n+case Token.TRY:\n+  // If we are coming out of the TRY block...\n+  if (parent.getFirstChild() == node) {\n+    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+      Node finallyNode = NodeUtil.getFinallyExitNode(parent, node);\n+      Preconditions.checkState(finallyNode != null, \"Must have exit node for FINALLY block\");\n+      if (cfa != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      }\n+      return finallyNode;\n+    } else { // and have no FINALLY.\n+      return computeFollowNode(fromNode, parent, cfa);\n+    }\n+  } else if (NodeUtil.getCatchBlock(parent) == node) { // CATCH block.\n+    if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.\n+      Node finallyNode = NodeUtil.getFinallyExitNode(parent, node.getNext());\n+      Preconditions.checkState(finallyNode != null, \"Must have exit node for FINALLY block\");\n+      if (cfa != null) {\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      }\n+      return finallyNode;\n+    } else {\n+      return computeFollowNode(fromNode, parent, cfa);\n+    }\n+  } else if (parent.getLastChild() == node) { // If we are coming out of the FINALLY block...\n+    Node finallyNode;\n+    if (cfa != null) {\n+      for (Node n : cfa.finallyMap.get(parent)) {\n+        finallyNode = n;\n+        cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+      }\n+    }\n+    return computeFollowNode(fromNode, parent, cfa);\n+  }\n+  break;\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: orphaned case",
    "test_result": "ERROR"
}