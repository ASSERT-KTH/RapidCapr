{
    "patch": "    public Period normalizedStandard(PeriodType type) {\n        type = DateTimeUtils.getPeriodType(type);\n        long millis = getMillis();\n        long periodAsMillis = 0L;\n        int seconds = getSeconds();\n        int minutes = getMinutes();\n        int hours = getHours();\n        int days = getDays();\n        int weeks = getWeeks();\n        if ((seconds | minutes | hours | days | weeks) != 0) {\n            periodAsMillis = (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n                    + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n                    + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n                    + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n                    + (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n        }\n        int years = getYears();\n        int months = getMonths();\n        long totalMonths = (((long) years) * ((long) 12)) + ((long) months);\n        long normalizedMillis = millis + (totalMonths * DateTimeConstants.MILLIS_PER_MONTH) + periodAsMillis;\n        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC());\n        return result.normalizedStandard();\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/Period.java b/src/main/java/org/joda/time/Period.java\nindex f4047933..5bf126ec 100644\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n@@ -1615,26 +1615,26 @@ public final class Period\n      */\n     public Period normalizedStandard(PeriodType type) {\n         type = DateTimeUtils.getPeriodType(type);\n-        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n-        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n-        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n-        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n-        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n-        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n+        long millis = getMillis();\n+        long periodAsMillis = 0L;\n+        int seconds = getSeconds();\n+        int minutes = getMinutes();\n+        int hours = getHours();\n+        int days = getDays();\n+        int weeks = getWeeks();\n+        if ((seconds | minutes | hours | days | weeks) != 0) {\n+            periodAsMillis = (((long) seconds) * ((long) DateTimeConstants.MILLIS_PER_SECOND))\n+                    + (((long) minutes) * ((long) DateTimeConstants.MILLIS_PER_MINUTE))\n+                    + (((long) hours) * ((long) DateTimeConstants.MILLIS_PER_HOUR))\n+                    + (((long) days) * ((long) DateTimeConstants.MILLIS_PER_DAY))\n+                    + (((long) weeks) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        }\n         int years = getYears();\n         int months = getMonths();\n-        if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n-            }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n-            }\n-        }\n-        return result;\n+        long totalMonths = (((long) years) * ((long) 12)) + ((long) months);\n+        long normalizedMillis = millis + (totalMonths * DateTimeConstants.MILLIS_PER_MONTH) + periodAsMillis;\n+        Period result = new Period(normalizedMillis, type, ISOChronology.getInstanceUTC());\n+        return result.normalizedStandard();\n     }\n \n }",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}