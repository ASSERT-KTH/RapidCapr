{
    "patch": "public Week(Date time, TimeZone zone) {\n    if(time == null) {\n        throw new IllegalArgumentException(\"Null 'time' argument.\");\n    }\n    if(zone == null) {\n        zone = RegularTimePeriod.DEFAULT_TIME_ZONE;\n    }\n    Calendar calendar = Calendar.getInstance(zone);\n    calendar.setTime(time);\n    int week = calendar.get(Calendar.WEEK_OF_YEAR);\n    int year = calendar.get(Calendar.YEAR);\n    TimePeriodAnchor tpa = TimePeriodAnchor.START;\n    RegularTimePeriod firstWeek = tpa.createInstance(Week.class, new GregorianCalendar(year, Calendar.JANUARY, 1, 0, 0, 0, 0).getTime(), zone);\n    int firstWeekNo = firstWeek.getSerialIndex() + 1;\n    if(week < firstWeekNo) {\n        // The previous year has its last weeks in this year.\n        year--;\n        firstWeek = tpa.createInstance(Week.class, new GregorianCalendar(year, Calendar.JANUARY, 1, 0, 0, 0, 0).getTime(), zone);\n        firstWeekNo = firstWeek.getSerialIndex() + 1;\n    }\n    int lastWeekNo = firstWeekNo + 52;\n    if(lastWeekNo > 53) {\n        Calendar cal = new GregorianCalendar(year + 1, Calendar.JANUARY, 1, 0, 0, 0);\n        cal.add(Calendar.DAY_OF_MONTH, -1);\n        if(cal.get(Calendar.DAY_OF_WEEK) < Calendar.THURSDAY) {\n            lastWeekNo = 52;\n        } else {\n            lastWeekNo = 53;\n        }\n    }\n    int result = (week - firstWeekNo) + 1;\n    this.serialIndex = createSerialIndex(time, zone);\n    this.week = result;\n    this.year = year;\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..4a8d339 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -170,10 +170,41 @@ public class Week extends RegularTimePeriod implements Serializable {\n      *\n      * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.\n      */\n-    public Week(Date time, TimeZone zone) {\n-        // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n-    }\n+public Week(Date time, TimeZone zone) {\n+    if(time == null) {\n+        throw new IllegalArgumentException(\"Null 'time' argument.\");\n+    }\n+    if(zone == null) {\n+        zone = RegularTimePeriod.DEFAULT_TIME_ZONE;\n+    }\n+    Calendar calendar = Calendar.getInstance(zone);\n+    calendar.setTime(time);\n+    int week = calendar.get(Calendar.WEEK_OF_YEAR);\n+    int year = calendar.get(Calendar.YEAR);\n+    TimePeriodAnchor tpa = TimePeriodAnchor.START;\n+    RegularTimePeriod firstWeek = tpa.createInstance(Week.class, new GregorianCalendar(year, Calendar.JANUARY, 1, 0, 0, 0, 0).getTime(), zone);\n+    int firstWeekNo = firstWeek.getSerialIndex() + 1;\n+    if(week < firstWeekNo) {\n+        // The previous year has its last weeks in this year.\n+        year--;\n+        firstWeek = tpa.createInstance(Week.class, new GregorianCalendar(year, Calendar.JANUARY, 1, 0, 0, 0, 0).getTime(), zone);\n+        firstWeekNo = firstWeek.getSerialIndex() + 1;\n+    }\n+    int lastWeekNo = firstWeekNo + 52;\n+    if(lastWeekNo > 53) {\n+        Calendar cal = new GregorianCalendar(year + 1, Calendar.JANUARY, 1, 0, 0, 0);\n+        cal.add(Calendar.DAY_OF_MONTH, -1);\n+        if(cal.get(Calendar.DAY_OF_WEEK) < Calendar.THURSDAY) {\n+            lastWeekNo = 52;\n+        } else {\n+            lastWeekNo = 53;\n+        }\n+    }\n+    int result = (week - firstWeekNo) + 1;\n+    this.serialIndex = createSerialIndex(time, zone);\n+    this.week = result;\n+    this.year = year;\n+}\n \n     /**\n      * Creates a time period for the week in which the specified date/time",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}