{
    "patch": "private boolean isSafeReplacement(Node node, Node replacement) {\n  // No checks are needed for simple names.\n  if (node.isName()) {\n    return true;\n  }\n\n  Preconditions.checkArgument(node.isGetProp(), \"Expected GETPROP node, found: %s\", node);\n\n  // Traverse the leftmost part of the getprop chain.\n  Node leftmostChild = node.getFirstChild();\n  while (leftmostChild.isGetProp()) {\n    leftmostChild = leftmostChild.getFirstChild();\n  }\n\n  // Check if the leftmost part of the getprop chain is a name and if it is assigned the replacement\n  if (leftmostChild.isName() && isNameAssignedTo(leftmostChild.getString(), replacement)) {\n    return false;\n  }\n\n  // Handle computed property accesses.\n  if (leftmostChild.isGetElem()) {\n    // Get the computed property name\n    Node computedPropNameNode = leftmostChild.getLastChild();\n    String computedPropName = null;\n    if (computedPropNameNode.isString()) {\n      computedPropName = computedPropNameNode.getString();\n    } else if (computedPropNameNode.isName() && isNameAssignedTo(computedPropNameNode.getString(), replacement)) {\n      return false;\n    }\n\n    // Check if the computed property name is assigned the replacement\n    if (computedPropName != null && isNameAssignedTo(computedPropName, replacement)) {\n      return false;\n    }\n  }\n\n  return true;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java\nindex 0f03e355..2c71085d 100644\n--- a/src/com/google/javascript/jscomp/ExploitAssigns.java\n+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java\n@@ -203,22 +203,45 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n    * changed.\n    * @return Whether the replacement can be made.\n    */\n-  private boolean isSafeReplacement(Node node, Node replacement) {\n-    // No checks are needed for simple names.\n-    if (node.isName()) {\n-      return true;\n-    }\n-    Preconditions.checkArgument(node.isGetProp());\n+private boolean isSafeReplacement(Node node, Node replacement) {\n+  // No checks are needed for simple names.\n+  if (node.isName()) {\n+    return true;\n+  }\n+\n+  Preconditions.checkArgument(node.isGetProp(), \"Expected GETPROP node, found: %s\", node);\n+\n+  // Traverse the leftmost part of the getprop chain.\n+  Node leftmostChild = node.getFirstChild();\n+  while (leftmostChild.isGetProp()) {\n+    leftmostChild = leftmostChild.getFirstChild();\n+  }\n \n-      node = node.getFirstChild();\n-    if (node.isName()\n-        && isNameAssignedTo(node.getString(), replacement)) {\n+  // Check if the leftmost part of the getprop chain is a name and if it is assigned the replacement\n+  if (leftmostChild.isName() && isNameAssignedTo(leftmostChild.getString(), replacement)) {\n+    return false;\n+  }\n+\n+  // Handle computed property accesses.\n+  if (leftmostChild.isGetElem()) {\n+    // Get the computed property name\n+    Node computedPropNameNode = leftmostChild.getLastChild();\n+    String computedPropName = null;\n+    if (computedPropNameNode.isString()) {\n+      computedPropName = computedPropNameNode.getString();\n+    } else if (computedPropNameNode.isName() && isNameAssignedTo(computedPropNameNode.getString(), replacement)) {\n       return false;\n     }\n \n-    return true;\n+    // Check if the computed property name is assigned the replacement\n+    if (computedPropName != null && isNameAssignedTo(computedPropName, replacement)) {\n+      return false;\n+    }\n   }\n \n+  return true;\n+}\n+\n   /**\n    * @return Whether name is assigned in the expression rooted at node.\n    */\n@@ -241,4 +264,4 @@ class ExploitAssigns extends AbstractPeepholeOptimization {\n \n     return false;\n   }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}