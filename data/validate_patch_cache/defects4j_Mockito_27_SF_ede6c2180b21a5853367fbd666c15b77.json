{
    "patch": "public <T> void resetMock(T mock) {\n    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n    if (mock instanceof Factory) {\n        ((Factory) mock).setCallback(0, newFilter);\n    } else if (mock instanceof Serializable) {\n        ObjectInput in = null;\n        ObjectOutput out = null;\n        T newMock = null;\n        try {\n            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n            out = new ObjectOutputStream(bos);\n            out.writeObject(mock);\n            out.flush();\n            byte[] mockBytes = bos.toByteArray();\n            in = new ObjectInputStream(new ByteArrayInputStream(mockBytes));\n            newMock = (T) in.readObject();\n            ((Factory) newMock).setCallback(0, newFilter);\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n                if (in != null) {\n                    in.close();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n        mock = newMock;\n    } else {\n        throw new IllegalArgumentException(\"Unsupported mock type: \" + mock.getClass().getName());\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..26cb67f1b 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -59,12 +59,46 @@ public class MockUtil {\n         return mock;\n     }\n \n-    public <T> void resetMock(T mock) {\n-        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n-        ((Factory) mock).setCallback(0, newFilter);\n-    }\n+public <T> void resetMock(T mock) {\n+    MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+    MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n+    MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+    if (mock instanceof Factory) {\n+        ((Factory) mock).setCallback(0, newFilter);\n+    } else if (mock instanceof Serializable) {\n+        ObjectInput in = null;\n+        ObjectOutput out = null;\n+        T newMock = null;\n+        try {\n+            ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+            out = new ObjectOutputStream(bos);\n+            out.writeObject(mock);\n+            out.flush();\n+            byte[] mockBytes = bos.toByteArray();\n+            in = new ObjectInputStream(new ByteArrayInputStream(mockBytes));\n+            newMock = (T) in.readObject();\n+            ((Factory) newMock).setCallback(0, newFilter);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } catch (ClassNotFoundException e) {\n+            e.printStackTrace();\n+        } finally {\n+            try {\n+                if (out != null) {\n+                    out.close();\n+                }\n+                if (in != null) {\n+                    in.close();\n+                }\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        mock = newMock;\n+    } else {\n+        throw new IllegalArgumentException(\"Unsupported mock type: \" + mock.getClass().getName());\n+    }\n+}\n \n     private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) {\n         MockHandler<T> mockHandler = new MockHandler<T>(settings);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}