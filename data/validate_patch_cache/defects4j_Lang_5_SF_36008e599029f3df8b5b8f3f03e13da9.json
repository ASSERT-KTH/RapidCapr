{
    "patch": "public static Locale toLocale(final String str) {\n    if (str == null || str.isEmpty()) {\n        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n    }\n\n    final String[] parts = str.split(\"_\", -1);\n    final int len = parts.length;\n\n    if (len == 1) {\n        return new Locale(parts[0]);\n    }\n\n    if (len == 2) {\n        return new Locale(parts[0], parts[1]);\n    }\n\n    final StringBuilder variantBuilder = new StringBuilder(parts[2]);\n\n    for (int i = 3; i < len; i++) {\n        if (i == 3 && parts[3].startsWith(\"_\")) {\n            if (parts[3].length() < 2) {\n                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n            }\n            variantBuilder.append(parts[3]);\n        } else {\n            variantBuilder.append(\"_\").append(parts[i]);\n        }\n    }\n\n    return new Locale(parts[0], parts[1], variantBuilder.toString());\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/LocaleUtils.java b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\nindex bc779d04..a86e9303 100644\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n@@ -85,48 +85,38 @@ public class LocaleUtils {\n      * @return a Locale, null if null input\n      * @throws IllegalArgumentException if the string is an invalid format\n      */\n-    public static Locale toLocale(final String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        final int len = str.length();\n-        if (len < 2) {\n-            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-        }\n-        final char ch0 = str.charAt(0);\n-            final char ch1 = str.charAt(1);\n-            if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 2) {\n-                return new Locale(str);\n-            }\n-            if (len < 5) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(2) != '_') {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            final char ch3 = str.charAt(3);\n-            if (ch3 == '_') {\n-                return new Locale(str.substring(0, 2), \"\", str.substring(4));\n-            }\n-            final char ch4 = str.charAt(4);\n-            if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (len == 5) {\n-                return new Locale(str.substring(0, 2), str.substring(3, 5));\n-            }\n-            if (len < 7) {\n-                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n-            }\n-            if (str.charAt(5) != '_') {\n+public static Locale toLocale(final String str) {\n+    if (str == null || str.isEmpty()) {\n+        throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+    }\n+\n+    final String[] parts = str.split(\"_\", -1);\n+    final int len = parts.length;\n+\n+    if (len == 1) {\n+        return new Locale(parts[0]);\n+    }\n+\n+    if (len == 2) {\n+        return new Locale(parts[0], parts[1]);\n+    }\n+\n+    final StringBuilder variantBuilder = new StringBuilder(parts[2]);\n+\n+    for (int i = 3; i < len; i++) {\n+        if (i == 3 && parts[3].startsWith(\"_\")) {\n+            if (parts[3].length() < 2) {\n                 throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n             }\n-            return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            variantBuilder.append(parts[3]);\n+        } else {\n+            variantBuilder.append(\"_\").append(parts[i]);\n+        }\n     }\n \n+    return new Locale(parts[0], parts[1], variantBuilder.toString());\n+}\n+\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Obtains the list of locales to search through when performing",
    "result_reason": "junit.framework.AssertionFailedError: Must be at least 3 chars if starts with underscore",
    "test_result": "FAIL"
}