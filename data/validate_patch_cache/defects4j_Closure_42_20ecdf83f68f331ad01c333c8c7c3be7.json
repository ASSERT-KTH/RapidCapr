{
    "patch": "import com.google.javascript.rhino.Node;\nimport com.google.javascript.rhino.Scope;\nimport com.google.javascript.rhino.TypeI;\nimport com.google.javascript.rhino.Token;\nimport com.google.javascript.rhino.ast.AstNode;\nimport com.google.javascript.rhino.ast.Block;\nimport com.google.javascript.rhino.ast.BreakStatement;\nimport com.google.javascript.rhino.ast.CatchClause;\nimport com.google.javascript.rhino.ast.ContinueStatement;\nimport com.google.javascript.rhino.ast.DoLoop;\nimport com.google.javascript.rhino.ast.ElementGet;\nimport com.google.javascript.rhino.ast.EmptyExpression;\nimport com.google.javascript.rhino.ast.ExpressionStatement;\nimport com.google.javascript.rhino.ast.ForInLoop;\nimport com.google.javascript.rhino.ast.FunctionCall;\nimport com.google.javascript.rhino.ast.FunctionNode;\nimport com.google.javascript.rhino.ast.Jump;\nimport com.google.javascript.rhino.ast.Label;\nimport com.google.javascript.rhino.ast.Name;\nimport com.google.javascript.rhino.ast.NewExpression;\nimport com.google.javascript.rhino.ast.NodeVisitor;\nimport com.google.javascript.rhino.ast.ObjectLiteral;\nimport com.google.javascript.rhino.ast.PropertyGet;\nimport com.google.javascript.rhino.ast.PropertyName;\nimport com.google.javascript.rhino.ast.ReturnStatement;\nimport com.google.javascript.rhino.ast.ScriptNode;\nimport com.google.javascript.rhino.ast.StringLiteral;\nimport com.google.javascript.rhino.ast.SwitchCase;\nimport com.google.javascript.rhino.ast.SwitchStatement;\nimport com.google.javascript.rhino.ast.TryStatement;\nimport com.google.javascript.rhino.ast.UnaryExpression;\nimport com.google.javascript.rhino.ast.VariableDeclaration;\nimport com.google.javascript.rhino.jstype.JSTypeRegistry;\nimport com.google.javascript.rhino.jstype.StaticScope;\nimport com.google.javascript.rhino.jstype.TemplateTypeMap;\nimport com.google.javascript.rhino.jstype.TiFunction;\nimport com.google.javascript.rhino.jstype.TypeStaticScope;\nimport com.google.javascript.rhino.jstype.UnionType;\nimport com.google.javascript.rhino.jstype.Util;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/parsing/IRFactory.java b/src/com/google/javascript/jscomp/parsing/IRFactory.java\nindex 1a95aa2f..88890da1 100644\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n@@ -472,107 +472,45 @@ class IRFactory {\n         node.setDirectives(directives);\n       }\n     }\n-\n-    private boolean isDirective(Node n) {\n-      if (n == null) return false;\n-\n-      int nType = n.getType();\n-      return nType == Token.EXPR_RESULT &&\n-          n.getFirstChild().isString() &&\n-          ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());\n-    }\n-\n-    @Override\n-    Node processBlock(Block blockNode) {\n-      return processGeneric(blockNode);\n-    }\n-\n-    @Override\n-    Node processBreakStatement(BreakStatement statementNode) {\n-      Node node = newNode(Token.BREAK);\n-      if (statementNode.getBreakLabel() != null) {\n-        Node labelName = transform(statementNode.getBreakLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processCatchClause(CatchClause clauseNode) {\n-      AstNode catchVar = clauseNode.getVarName();\n-      Node node = newNode(Token.CATCH, transform(catchVar));\n-      if (clauseNode.getCatchCondition() != null) {\n-        errorReporter.error(\n-            \"Catch clauses are not supported\",\n-            sourceName,\n-            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n-      }\n-      node.addChildToBack(transformBlock(clauseNode.getBody()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processConditionalExpression(ConditionalExpression exprNode) {\n-      return newNode(\n-          Token.HOOK,\n-          transform(exprNode.getTestExpression()),\n-          transform(exprNode.getTrueExpression()),\n-          transform(exprNode.getFalseExpression()));\n-    }\n-\n-    @Override\n-    Node processContinueStatement(ContinueStatement statementNode) {\n-      Node node = newNode(Token.CONTINUE);\n-      if (statementNode.getLabel() != null) {\n-        Node labelName = transform(statementNode.getLabel());\n-        // Change the NAME to LABEL_NAME\n-        labelName.setType(Token.LABEL_NAME);\n-        node.addChildToBack(labelName);\n-      }\n-      return node;\n-    }\n-\n-    @Override\n-    Node processDoLoop(DoLoop loopNode) {\n-      return newNode(\n-          Token.DO,\n-          transformBlock(loopNode.getBody()),\n-          transform(loopNode.getCondition()));\n-    }\n-\n-    @Override\n-    Node processElementGet(ElementGet getNode) {\n-      return newNode(\n-          Token.GETELEM,\n-          transform(getNode.getTarget()),\n-          transform(getNode.getElement()));\n-    }\n-\n-    @Override\n-    Node processEmptyExpression(EmptyExpression exprNode) {\n-      Node node = newNode(Token.EMPTY);\n-      return node;\n-    }\n-\n-    @Override\n-    Node processExpressionStatement(ExpressionStatement statementNode) {\n-      Node node = newNode(transformTokenType(statementNode.getType()));\n-      node.addChildToBack(transform(statementNode.getExpression()));\n-      return node;\n-    }\n-\n-    @Override\n-    Node processForInLoop(ForInLoop loopNode) {\n-\n-        // Return the bare minimum to put the AST in a valid state.\n-      return newNode(\n-          Token.FOR,\n-          transform(loopNode.getIterator()),\n-          transform(loopNode.getIteratedObject()),\n-          transformBlock(loopNode.getBody()));\n-    }\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Scope;\n+import com.google.javascript.rhino.TypeI;\n+import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.ast.AstNode;\n+import com.google.javascript.rhino.ast.Block;\n+import com.google.javascript.rhino.ast.BreakStatement;\n+import com.google.javascript.rhino.ast.CatchClause;\n+import com.google.javascript.rhino.ast.ContinueStatement;\n+import com.google.javascript.rhino.ast.DoLoop;\n+import com.google.javascript.rhino.ast.ElementGet;\n+import com.google.javascript.rhino.ast.EmptyExpression;\n+import com.google.javascript.rhino.ast.ExpressionStatement;\n+import com.google.javascript.rhino.ast.ForInLoop;\n+import com.google.javascript.rhino.ast.FunctionCall;\n+import com.google.javascript.rhino.ast.FunctionNode;\n+import com.google.javascript.rhino.ast.Jump;\n+import com.google.javascript.rhino.ast.Label;\n+import com.google.javascript.rhino.ast.Name;\n+import com.google.javascript.rhino.ast.NewExpression;\n+import com.google.javascript.rhino.ast.NodeVisitor;\n+import com.google.javascript.rhino.ast.ObjectLiteral;\n+import com.google.javascript.rhino.ast.PropertyGet;\n+import com.google.javascript.rhino.ast.PropertyName;\n+import com.google.javascript.rhino.ast.ReturnStatement;\n+import com.google.javascript.rhino.ast.ScriptNode;\n+import com.google.javascript.rhino.ast.StringLiteral;\n+import com.google.javascript.rhino.ast.SwitchCase;\n+import com.google.javascript.rhino.ast.SwitchStatement;\n+import com.google.javascript.rhino.ast.TryStatement;\n+import com.google.javascript.rhino.ast.UnaryExpression;\n+import com.google.javascript.rhino.ast.VariableDeclaration;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n+import com.google.javascript.rhino.jstype.StaticScope;\n+import com.google.javascript.rhino.jstype.TemplateTypeMap;\n+import com.google.javascript.rhino.jstype.TiFunction;\n+import com.google.javascript.rhino.jstype.TypeStaticScope;\n+import com.google.javascript.rhino.jstype.UnionType;\n+import com.google.javascript.rhino.jstype.Util;\n \n     @Override\n     Node processForLoop(ForLoop loopNode) {",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}