{
    "patch": "JSType resolvedType = safeResolve(typeOfThis, t, scope);\nif (resolvedType instanceof NamedType) {\n    resolvedType = ((NamedType) resolvedType).getReferencedType();\n}\nif (!(resolvedType instanceof ObjectType)) {\n    resolvedType = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n}\ntypeOfThis = (ObjectType) resolvedType;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..4b9bf173 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,14 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+JSType resolvedType = safeResolve(typeOfThis, t, scope);\n+if (resolvedType instanceof NamedType) {\n+    resolvedType = ((NamedType) resolvedType).getReferencedType();\n+}\n+if (!(resolvedType instanceof ObjectType)) {\n+    resolvedType = registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);\n+}\n+typeOfThis = (ObjectType) resolvedType;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}