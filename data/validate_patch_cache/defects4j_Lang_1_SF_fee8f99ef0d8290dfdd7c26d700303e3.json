{
    "patch": "import java.math.BigDecimal;\nimport java.math.BigInteger;\nimport java.math.RoundingMode;\n\npublic class NumberUtils {\n\n    private static final BigInteger LONG_MIN_VALUE = BigInteger.valueOf(Long.MIN_VALUE);\n\n    public static boolean isAvailableLocale(Locale locale) {\n        return availableLocaleList().contains(locale);\n    }\n\n    public static Number createNumber(final String str) throws NumberFormatException {\n        if (str == null) {\n            return null;\n        }\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        // Need to deal with all possible hex prefixes here\n        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n        int pfxLen = 0;\n        for (final String pfx : hex_prefixes) {\n            if (str.startsWith(pfx)) {\n                pfxLen += pfx.length();\n                break;\n            }\n        }\n        if (pfxLen > 0) { // we have a hex number\n            final int hexDigits = str.length() - pfxLen;\n            if (hexDigits > 16) { // too many for Long\n                return createBigInteger(str);\n            }\n            if (hexDigits > 8) { // too many for an int\n                return createLong(str);\n            }\n            return createInteger(str);\n        }\n        final char lastChar = str.charAt(str.length() - 1);\n        String mant;\n        String dec;\n        String exp;\n        final int decPos = str.indexOf('.');\n        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n        // if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n        // and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\n        int numDecimals = 0; // Check required precision (LANG-693)\n        if (decPos > -1) { // there is a decimal point\n\n            if (expPos > -1) { // there is an exponent\n                if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                dec = str.substring(decPos + 1, expPos);\n            } else {\n                dec = str.substring(decPos + 1);\n            }\n            mant = str.substring(0, decPos);\n            numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n        } else {\n            if (expPos > -1) {\n                if (expPos > str.length()) { // prevents double exponent causing IOOBE\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                }\n                mant = str.substring(0, expPos);\n            } else {\n                mant = str;\n            }\n            dec = null;\n        }\n        if (!Character.isDigit(lastChar) && lastChar != '.') {\n            if (expPos > -1 && expPos < str.length() - 1) {\n                exp = str.substring(expPos + 1, str.length() - 1);\n            } else {\n                exp = null;\n            }\n            // Requesting a specific type..\n            final String numeric = str.substring(0, str.length() - 1);\n            final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n            switch (lastChar) {\n                case 'l':\n                case 'L':\n                    if (dec == null\n                            && exp == null\n                            && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                        try {\n                            return createLong(numeric);\n                        } catch (final NumberFormatException nfe) { // NOPMD\n                            // Too big for a long\n                        }\n                        return createBigInteger(numeric);\n\n                    }\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n                case 'f':\n                case 'F':\n                    try {\n                        final Float f = NumberUtils.createFloat(numeric);\n                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                            //If it's too big for a float or the float value = 0 and the string\n                            //has non-zeros in it, then float does not have the precision we want\n                            return f;\n                        }\n\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                case 'd':\n                case 'D':\n                    try {\n                        final Double d = NumberUtils.createDouble(numeric);\n                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                            return d;\n                        }\n                    } catch (final NumberFormatException nfe) { // NOPMD\n                        // ignore the bad number\n                    }\n                    try {\n                        return createBigDecimal(numeric);\n                    } catch (final NumberFormatException e) { // NOPMD\n                        // ignore the bad number\n                    }\n                    //$FALL-THROUGH$\n                default:\n                    throw new NumberFormatException(str + \" is not a valid number.\");\n\n            }\n        }\n        // User doesn't have a preference on the return type, so let's start\n        // small and go from there...\n        if (expPos > -1 && expPos < str.length() - 1) {\n            exp = str.substring(expPos + 1, str.length());\n        } else {\n            exp = null;\n        }\n        if (dec == null && exp == null) { // no decimal point and no exponent\n            // Must be an Integer, Long, BigInteger\n            try {\n                return createInteger(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createLong(str);\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            return createBigInteger(str);\n        }\n\n        // Must be a Float, Double, BigDecimal\n        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n        try {\n            if (numDecimals <= 7) {// If number has 7 or fewer digits past the decimal point then make it a float\n                final Float f = createFloat(str);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    return f;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n        try {\n            if (numDecimals <= 16) {// If number has between 8 and 16 digits past the decimal point then make it a double\n                final Double d = createDouble(str);\n                if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            }\n        } catch (final NumberFormatException nfe) { // NOPMD\n            // ignore the bad number\n        }\n\n        return createBigDecimal(str);\n    }\n\n    private static BigDecimal createBigDecimal(final String str) {\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.trim().startsWith(\"--\")) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        return new BigDecimal(str);\n    }\n\n    private static BigInteger createBigInteger(final String str) {\n        int radix = 10;\n        int index = 0;\n        boolean negative = false;\n        if (str.isEmpty()) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        if (str.charAt(index) == '-') {\n            negative = true;\n            index++;\n        }\n        if (index < str.length() && str.charAt(index) == '0') {\n            // only radix 8 and 16 supported\n            final char c = index == str.length() - 1 ? '0' : str.charAt(index + 1);\n            if (c == 'x' || c == 'X') {\n                radix = 16;\n                index += 2;\n            } else {\n                radix = 8;\n                index++;\n            }\n        }\n        if (index == str.length()) {\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        final BigInteger bigInteger = new BigInteger(str.substring(index), radix);\n        return negative ? bigInteger.negate() : bigInteger;\n    }\n\n    private static Long createLong(final String str) {\n        return createBigInteger(str).longValueExact(); // overflow may happen here\n    }\n\n    private static Float createFloat(final String str) {\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        return Float.valueOf(str);\n    }\n\n    private static Double createDouble(final String str) {\n        if (StringUtils.isBlank(str)) {\n            throw new NumberFormatException(\"A blank string is not a valid number\");\n        }\n        return Double.valueOf(str);\n    }\n\n    private static Integer createInteger(final String str) {\n        return createBigInteger(str).intValueExact(); // overflow may happen here\n    }\n\n    private static boolean isAllZeros(final String mant) {\n        if (mant == null) {\n            return true;\n        }\n        for (int i = mant.length() - 1; i >= 0; i--) {\n            if (mant.charAt(i) != '0') {\n                return false;\n            }\n        }\n        return mant.length() > 0;\n    }\n\n    private static boolean isDigits(final String str) {\n        if (StringUtils.isEmpty(str)) {\n            return false;\n        }\n        for (int i = 0; i < str.length(); i++) {\n            if (!Character.isDigit(str.charAt(i))) {\n                return false;\n            }\n        }\n        return true;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\nindex 1e6ccdc0..22d72be0 100644\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n@@ -447,6 +447,18 @@ public class NumberUtils {\n      * @return Number created from the string (or null if the input is null)\n      * @throws NumberFormatException if the value cannot be converted\n      */\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.math.RoundingMode;\n+\n+public class NumberUtils {\n+\n+    private static final BigInteger LONG_MIN_VALUE = BigInteger.valueOf(Long.MIN_VALUE);\n+\n+    public static boolean isAvailableLocale(Locale locale) {\n+        return availableLocaleList().contains(locale);\n+    }\n+\n     public static Number createNumber(final String str) throws NumberFormatException {\n         if (str == null) {\n             return null;\n@@ -457,7 +469,7 @@ public class NumberUtils {\n         // Need to deal with all possible hex prefixes here\n         final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n         int pfxLen = 0;\n-        for(final String pfx : hex_prefixes) {\n+        for (final String pfx : hex_prefixes) {\n             if (str.startsWith(pfx)) {\n                 pfxLen += pfx.length();\n                 break;\n@@ -512,15 +524,15 @@ public class NumberUtils {\n             } else {\n                 exp = null;\n             }\n-            //Requesting a specific type..\n+            // Requesting a specific type..\n             final String numeric = str.substring(0, str.length() - 1);\n             final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n             switch (lastChar) {\n-                case 'l' :\n-                case 'L' :\n+                case 'l':\n+                case 'L':\n                     if (dec == null\n-                        && exp == null\n-                        && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n+                            && exp == null\n+                            && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n                         } catch (final NumberFormatException nfe) { // NOPMD\n@@ -530,8 +542,8 @@ public class NumberUtils {\n \n                     }\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n-                case 'f' :\n-                case 'F' :\n+                case 'f':\n+                case 'F':\n                     try {\n                         final Float f = NumberUtils.createFloat(numeric);\n                         if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n@@ -544,11 +556,11 @@ public class NumberUtils {\n                         // ignore the bad number\n                     }\n                     //$FALL-THROUGH$\n-                case 'd' :\n-                case 'D' :\n+                case 'd':\n+                case 'D':\n                     try {\n                         final Double d = NumberUtils.createDouble(numeric);\n-                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n                     } catch (final NumberFormatException nfe) { // NOPMD\n@@ -560,20 +572,20 @@ public class NumberUtils {\n                         // ignore the bad number\n                     }\n                     //$FALL-THROUGH$\n-                default :\n+                default:\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n \n             }\n         }\n-        //User doesn't have a preference on the return type, so let's start\n-        //small and go from there...\n+        // User doesn't have a preference on the return type, so let's start\n+        // small and go from there...\n         if (expPos > -1 && expPos < str.length() - 1) {\n             exp = str.substring(expPos + 1, str.length());\n         } else {\n             exp = null;\n         }\n         if (dec == null && exp == null) { // no decimal point and no exponent\n-            //Must be an Integer, Long, Biginteger\n+            // Must be an Integer, Long, BigInteger\n             try {\n                 return createInteger(str);\n             } catch (final NumberFormatException nfe) { // NOPMD\n@@ -587,10 +599,10 @@ public class NumberUtils {\n             return createBigInteger(str);\n         }\n \n-        //Must be a Float, Double, BigDecimal\n+        // Must be a Float, Double, BigDecimal\n         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n         try {\n-            if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n+            if (numDecimals <= 7) {// If number has 7 or fewer digits past the decimal point then make it a float\n                 final Float f = createFloat(str);\n                 if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                     return f;\n@@ -600,7 +612,7 @@ public class NumberUtils {\n             // ignore the bad number\n         }\n         try {\n-            if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n+            if (numDecimals <= 16) {// If number has between 8 and 16 digits past the decimal point then make it a double\n                 final Double d = createDouble(str);\n                 if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                     return d;\n@@ -613,6 +625,92 @@ public class NumberUtils {\n         return createBigDecimal(str);\n     }\n \n+    private static BigDecimal createBigDecimal(final String str) {\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }\n+        if (str.trim().startsWith(\"--\")) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        return new BigDecimal(str);\n+    }\n+\n+    private static BigInteger createBigInteger(final String str) {\n+        int radix = 10;\n+        int index = 0;\n+        boolean negative = false;\n+        if (str.isEmpty()) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }\n+        if (str.charAt(index) == '-') {\n+            negative = true;\n+            index++;\n+        }\n+        if (index < str.length() && str.charAt(index) == '0') {\n+            // only radix 8 and 16 supported\n+            final char c = index == str.length() - 1 ? '0' : str.charAt(index + 1);\n+            if (c == 'x' || c == 'X') {\n+                radix = 16;\n+                index += 2;\n+            } else {\n+                radix = 8;\n+                index++;\n+            }\n+        }\n+        if (index == str.length()) {\n+            throw new NumberFormatException(str + \" is not a valid number.\");\n+        }\n+        final BigInteger bigInteger = new BigInteger(str.substring(index), radix);\n+        return negative ? bigInteger.negate() : bigInteger;\n+    }\n+\n+    private static Long createLong(final String str) {\n+        return createBigInteger(str).longValueExact(); // overflow may happen here\n+    }\n+\n+    private static Float createFloat(final String str) {\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }\n+        return Float.valueOf(str);\n+    }\n+\n+    private static Double createDouble(final String str) {\n+        if (StringUtils.isBlank(str)) {\n+            throw new NumberFormatException(\"A blank string is not a valid number\");\n+        }\n+        return Double.valueOf(str);\n+    }\n+\n+    private static Integer createInteger(final String str) {\n+        return createBigInteger(str).intValueExact(); // overflow may happen here\n+    }\n+\n+    private static boolean isAllZeros(final String mant) {\n+        if (mant == null) {\n+            return true;\n+        }\n+        for (int i = mant.length() - 1; i >= 0; i--) {\n+            if (mant.charAt(i) != '0') {\n+                return false;\n+            }\n+        }\n+        return mant.length() > 0;\n+    }\n+\n+    private static boolean isDigits(final String str) {\n+        if (StringUtils.isEmpty(str)) {\n+            return false;\n+        }\n+        for (int i = 0; i < str.length(); i++) {\n+            if (!Character.isDigit(str.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}\n+\n     /**\n      * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n      *",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}