{
    "patch": "private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n  Node parent = n.getParent();\n  // If GETPROP/GETELEM is used as assignment target the array literal is\n  // acting as a temporary we can't fold it here:\n  //    \"[][0] += 1\"\n\n  if (right.getType() != Token.NUMBER) {\n    // Sometimes people like to use complex expressions to index into\n    // arrays, or strings to index into array methods.\n    return n;\n  }\n\n  double index = right.getDouble();\n  int intIndex = (int) index;\n  if (intIndex != index) {\n    error(INVALID_GETELEM_INDEX_ERROR, right);\n    return n;\n  }\n\n  if (intIndex < 0) {\n    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n    return n;\n  }\n\n  Node elem = left;\n  for (int i = 0; i < intIndex; i++) {\n    elem = NodeUtil.getNextElement(elem);\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n  }\n\n  if (elem.getType() == Token.EMPTY) {\n    elem = NodeUtil.newUndefinedNode(elem);\n  } else {\n    if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n\n        && NodeUtil.isImmutableValue(parent.getLastChild())) {\n      // If we are replacing an entire assignment, we need to replace the\n      // entire thing, or else we may turn this:\n      //   (a=[])[0]=1\n      // into\n      //   (a=void 0)\n      // We don't need to worry about this if the RHS is immutable; the\n      // programmer wasn't going to use this for anything anyway.\n      Node replacement = NodeUtil.newStringNode(\n          getAbstractInterpreter().getBestConstant(left),\n          n.getLineno(), n.getCharno());\n      replacement.copyInformationFromForTree(n);\n      parent.replaceChild(n, replacement);\n      n = replacement;  // So that we start over on the replacement node.\n    } else {\n      parent.replaceChild(n, elem);\n      reportCodeChange();\n    }\n  }\n\n  return elem;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..e6e61435 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,53 +1274,66 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n+private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n+  Node parent = n.getParent();\n+  // If GETPROP/GETELEM is used as assignment target the array literal is\n+  // acting as a temporary we can't fold it here:\n+  //    \"[][0] += 1\"\n+\n+  if (right.getType() != Token.NUMBER) {\n+    // Sometimes people like to use complex expressions to index into\n+    // arrays, or strings to index into array methods.\n+    return n;\n+  }\n \n-  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n-    Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n-    if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n-      return n;\n-    }\n-\n-    double index = right.getDouble();\n-    int intIndex = (int) index;\n-    if (intIndex != index) {\n-      error(INVALID_GETELEM_INDEX_ERROR, right);\n-      return n;\n-    }\n-\n-    if (intIndex < 0) {\n-      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n-      return n;\n-    }\n+  double index = right.getDouble();\n+  int intIndex = (int) index;\n+  if (intIndex != index) {\n+    error(INVALID_GETELEM_INDEX_ERROR, right);\n+    return n;\n+  }\n \n-    Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n-    }\n+  if (intIndex < 0) {\n+    error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+    return n;\n+  }\n \n+  Node elem = left;\n+  for (int i = 0; i < intIndex; i++) {\n+    elem = NodeUtil.getNextElement(elem);\n     if (elem == null) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n+  }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n+  if (elem.getType() == Token.EMPTY) {\n+    elem = NodeUtil.newUndefinedNode(elem);\n+  } else {\n+    if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n\n+        && NodeUtil.isImmutableValue(parent.getLastChild())) {\n+      // If we are replacing an entire assignment, we need to replace the\n+      // entire thing, or else we may turn this:\n+      //   (a=[])[0]=1\n+      // into\n+      //   (a=void 0)\n+      // We don't need to worry about this if the RHS is immutable; the\n+      // programmer wasn't going to use this for anything anyway.\n+      Node replacement = NodeUtil.newStringNode(\n+          getAbstractInterpreter().getBestConstant(left),\n+          n.getLineno(), n.getCharno());\n+      replacement.copyInformationFromForTree(n);\n+      parent.replaceChild(n, replacement);\n+      n = replacement;  // So that we start over on the replacement node.\n     } else {\n-      left.removeChild(elem);\n+      parent.replaceChild(n, elem);\n+      reportCodeChange();\n     }\n-\n-    // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n-    reportCodeChange();\n-    return elem;\n   }\n \n+  return elem;\n+}\n+\n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {\n     Preconditions.checkArgument(NodeUtil.isGet(n));\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}