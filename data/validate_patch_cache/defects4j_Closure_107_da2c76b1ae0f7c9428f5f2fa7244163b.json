{
    "patch": "    if (!flags.translationsFile.isEmpty()) {\n        try {\n            options.messageBundle = new XtbMessageBundle(\n                    new FileInputStream(flags.translationsFile),\n                    flags.translationsProject);\n        } catch (IOException e) {\n            throw new RuntimeException(\"Reading XTB file\", e);\n        }\n    } else {\n        options.messageBundle = CompilationLevel.ADVANCED_OPTIMIZATIONS == level ?\n                new EmptyMessageBundle() :\n                (flags.translationsProject.isEmpty() ? new MessageBundle() : new MessageBundle(flags.translationsProject));\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CommandLineRunner.java b/src/com/google/javascript/jscomp/CommandLineRunner.java\nindex 93b35475..6659de1d 100644\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n@@ -859,6 +859,19 @@ public class CommandLineRunner extends\n       // so we might as well inline it. But shut off the i18n warnings,\n       // because the user didn't really ask for i18n.\n       options.messageBundle = new EmptyMessageBundle();\n+    if (!flags.translationsFile.isEmpty()) {\n+        try {\n+            options.messageBundle = new XtbMessageBundle(\n+                    new FileInputStream(flags.translationsFile),\n+                    flags.translationsProject);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Reading XTB file\", e);\n+        }\n+    } else {\n+        options.messageBundle = CompilationLevel.ADVANCED_OPTIMIZATIONS == level ?\n+                new EmptyMessageBundle() :\n+                (flags.translationsProject.isEmpty() ? new MessageBundle() : new MessageBundle(flags.translationsProject));\n+    }\n     }\n \n     return options;",
    "result_reason": "error: MessageBundle is abstract; cannot be instantiated",
    "test_result": "ERROR"
}