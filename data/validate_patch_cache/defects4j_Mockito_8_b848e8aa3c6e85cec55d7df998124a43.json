{
    "patch": "        if (!(classType instanceof ParameterizedType)) {\n            return;\n        }\n        ParameterizedType parameterizedType = (ParameterizedType) classType;\n        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n        for (int i = 0; i < actualTypeArguments.length; i++) {\n            TypeVariable typeParameter = typeParameters[i];\n            Type actualTypeArgument = actualTypeArguments[i];\n\n            if (actualTypeArgument instanceof WildcardType) {\n                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n            } else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable tv = (TypeVariable) actualTypeArgument;\n                Type resolvedType = contextualActualTypeParameters.get(tv);\n                if (resolvedType == null) {\n                    final List<Type> typeVarBounds = Arrays.asList(tv.getBounds());\n                    final List<Type> resolvedBounds = new ArrayList<Type>();\n                    for (Type bound : typeVarBounds) {\n                        resolvedBounds.add(resolveType(bound, contextualActualTypeParameters));\n                    }\n                    resolvedType = new IntersectionTypeImpl(resolvedBounds);\n                }\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else if (actualTypeArgument instanceof ParameterizedType) {\n                contextualActualTypeParameters.put(typeParameter, resolveParameterizedType((ParameterizedType) actualTypeArgument, contextualActualTypeParameters));\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }\n\n            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n        }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..28d1ce1ff 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,38 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+        if (!(classType instanceof ParameterizedType)) {\n+            return;\n+        }\n+        ParameterizedType parameterizedType = (ParameterizedType) classType;\n+        TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();\n+        Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();\n+        for (int i = 0; i < actualTypeArguments.length; i++) {\n+            TypeVariable typeParameter = typeParameters[i];\n+            Type actualTypeArgument = actualTypeArguments[i];\n+\n+            if (actualTypeArgument instanceof WildcardType) {\n+                contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n+            } else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable tv = (TypeVariable) actualTypeArgument;\n+                Type resolvedType = contextualActualTypeParameters.get(tv);\n+                if (resolvedType == null) {\n+                    final List<Type> typeVarBounds = Arrays.asList(tv.getBounds());\n+                    final List<Type> resolvedBounds = new ArrayList<Type>();\n+                    for (Type bound : typeVarBounds) {\n+                        resolvedBounds.add(resolveType(bound, contextualActualTypeParameters));\n+                    }\n+                    resolvedType = new IntersectionTypeImpl(resolvedBounds);\n+                }\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            } else if (actualTypeArgument instanceof ParameterizedType) {\n+                contextualActualTypeParameters.put(typeParameter, resolveParameterizedType((ParameterizedType) actualTypeArgument, contextualActualTypeParameters));\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n+\n+            // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");\n+        }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: variable parameterizedType is already defined in method registerTypeVariablesOn(Type)",
    "test_result": "ERROR"
}