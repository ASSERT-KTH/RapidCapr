{
    "patch": "public static int gcd(int u, int v) {\n     if (u == 0 && v == 0) {\n         return 0;\n     }\n     u = Math.abs(u);\n     v = Math.abs(v);\n     if (u == 0) {\n         return v;\n     }\n     if (v == 0) {\n         return u;\n     }\n     while (u != v) {\n         if (u < v) {\n             int temp = u;\n             u = v;\n             v = temp;\n         }\n         u -= v;\n     }\n     return u;\n }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/util/MathUtils.java b/src/java/org/apache/commons/math/util/MathUtils.java\nindex c5342aeb3..8303ddb94 100644\n--- a/src/java/org/apache/commons/math/util/MathUtils.java\n+++ b/src/java/org/apache/commons/math/util/MathUtils.java\n@@ -408,56 +408,28 @@ public final class MathUtils {\n      * @return the greatest common divisor, never zero\n      * @since 1.1\n      */\n-    public static int gcd(int u, int v) {\n-        if (u * v == 0) {\n-            return (Math.abs(u) + Math.abs(v));\n-        }\n-        // keep u and v negative, as negative integers range down to\n-        // -2^31, while positive numbers can only be as large as 2^31-1\n-        // (i.e. we can't necessarily negate a negative number without\n-        // overflow)\n-        /* assert u!=0 && v!=0; */\n-        if (u > 0) {\n-            u = -u;\n-        } // make u negative\n-        if (v > 0) {\n-            v = -v;\n-        } // make v negative\n-        // B1. [Find power of 2]\n-        int k = 0;\n-        while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are\n-                                                            // both even...\n-            u /= 2;\n-            v /= 2;\n-            k++; // cast out twos.\n-        }\n-        if (k == 31) {\n-            throw new ArithmeticException(\"overflow: gcd is 2^31\");\n-        }\n-        // B2. Initialize: u and v have been divided by 2^k and at least\n-        // one is odd.\n-        int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;\n-        // t negative: u was odd, v may be even (t replaces v)\n-        // t positive: u was even, v is odd (t replaces u)\n-        do {\n-            /* assert u<0 && v<0; */\n-            // B4/B3: cast out twos from t.\n-            while ((t & 1) == 0) { // while t is even..\n-                t /= 2; // cast out twos\n-            }\n-            // B5 [reset max(u,v)]\n-            if (t > 0) {\n-                u = -t;\n-            } else {\n-                v = t;\n-            }\n-            // B6/B3. at this point both u and v should be odd.\n-            t = (v - u) / 2;\n-            // |u| larger: t positive (replace u)\n-            // |v| larger: t negative (replace v)\n-        } while (t != 0);\n-        return -u * (1 << k); // gcd is u*2^k\n-    }\n+public static int gcd(int u, int v) {\n+     if (u == 0 && v == 0) {\n+         return 0;\n+     }\n+     u = Math.abs(u);\n+     v = Math.abs(v);\n+     if (u == 0) {\n+         return v;\n+     }\n+     if (v == 0) {\n+         return u;\n+     }\n+     while (u != v) {\n+         if (u < v) {\n+             int temp = u;\n+             u = v;\n+             v = temp;\n+         }\n+         u -= v;\n+     }\n+     return u;\n+ }\n \n     /**\n      * Returns an integer hash code representing the given double value.",
    "result_reason": "Test timed out after 600 seconds",
    "test_result": "ERROR"
}