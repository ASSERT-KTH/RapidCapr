{
    "patch": "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n  // Resolve named types via registry first to avoid triggering warnings\n  // that are built into the resolution via properties.\n  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n  if (resolvedViaRegistry) {\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return registry.isLastGeneration()\n        ? getReferencedType()\n        : this;\n  }\n  boolean resolvedViaProperties = resolveViaProperties(t, enclosing);\n  if (resolvedViaProperties) {\n    if (detectImplicitPrototypeCycle()) {\n      handleTypeCycle(t);\n    }\n    super.resolveInternal(t, enclosing);\n    finishPropertyContinuations();\n    return this;\n  }\n  // Resolution may fail for:\n  // 1. A 'missingProperties' type declaration (e.g., 'var x : MissingPropsType')\n  // 2. An erroneously spelled type. In this case we assume that this is a record\n  //    literal type, and generate a warning elsewhere.\n  // 3. A forward declaration (e.g. 'goog.forwardDeclare(\"path.to.Type\")').\n  super.resolveInternal(t, enclosing);\n  finishPropertyContinuations();\n  return this;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 70142c45..77f6fb90 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -181,35 +181,38 @@ class NamedType extends ProxyObjectType {\n    * Resolve the referenced type within the enclosing scope.\n    */\n   @Override\n-  JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n-    // TODO(user): Investigate whether it is really necessary to keep two\n-    // different mechanisms for resolving named types, and if so, which order\n-    // makes more sense. Now, resolution via registry is first in order to\n-    // avoid triggering the warnings built into the resolution via properties.\n-    boolean resolved = resolveViaRegistry(t, enclosing);\n+JSType resolveInternal(ErrorReporter t, StaticScope<JSType> enclosing) {\n+  // Resolve named types via registry first to avoid triggering warnings\n+  // that are built into the resolution via properties.\n+  boolean resolvedViaRegistry = resolveViaRegistry(t, enclosing);\n+  if (resolvedViaRegistry) {\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n-    if (resolved) {\n-      super.resolveInternal(t, enclosing);\n-      finishPropertyContinuations();\n-      return registry.isLastGeneration() ?\n-          getReferencedType() : this;\n-    }\n-\n-    resolveViaProperties(t, enclosing);\n+    super.resolveInternal(t, enclosing);\n+    finishPropertyContinuations();\n+    return registry.isLastGeneration()\n+        ? getReferencedType()\n+        : this;\n+  }\n+  boolean resolvedViaProperties = resolveViaProperties(t, enclosing);\n+  if (resolvedViaProperties) {\n     if (detectImplicitPrototypeCycle()) {\n       handleTypeCycle(t);\n     }\n-\n     super.resolveInternal(t, enclosing);\n-    if (isResolved()) {\n-      finishPropertyContinuations();\n-    }\n-    return registry.isLastGeneration() ?\n-        getReferencedType() : this;\n+    finishPropertyContinuations();\n+    return this;\n   }\n+  // Resolution may fail for:\n+  // 1. A 'missingProperties' type declaration (e.g., 'var x : MissingPropsType')\n+  // 2. An erroneously spelled type. In this case we assume that this is a record\n+  //    literal type, and generate a warning elsewhere.\n+  // 3. A forward declaration (e.g. 'goog.forwardDeclare(\"path.to.Type\")').\n+  super.resolveInternal(t, enclosing);\n+  finishPropertyContinuations();\n+  return this;\n+}\n \n   /**\n    * Resolves a named type by looking it up in the registry.",
    "result_reason": "error: incompatible types",
    "test_result": "ERROR"
}