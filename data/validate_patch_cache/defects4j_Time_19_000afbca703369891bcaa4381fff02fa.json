{
    "patch": "    public int getOffsetFromLocal(long instantLocal) {\n        // Get the offset at instantLocal (first estimate).\n        int offsetBefore = getOffset(instantLocal);\n        long instantBefore = instantLocal + offsetBefore;\n        \n        // Check if the calculated instant is before the minimum supported instant.\n        if (instantBefore < getMinimumDateTime().getMillis()) {\n            DateTimeZoneBuilder.FillCache(this, getMinimumDateTime().getMillis());\n            return getOffset(instantLocal);\n        }\n\n        // Check if the calculated instant is after the maximum supported instant.\n        if (instantBefore >= getMaximumDateTime().getMillis()) {\n            DateTimeZoneBuilder.FillCache(this, getMaximumDateTime().getMillis() - 1);\n            return getOffset(instantLocal);\n        }\n\n        // Get the offset at instantLocal (second estimate).\n        int offsetAfter = getOffset(instantBefore);\n        \n        // If the offset is the same before and after, we're done.\n        if (offsetBefore == offsetAfter) {\n            return offsetBefore;\n        }\n\n        // Check if we went into a gap.\n        long nextLocal = nextTransition(instantBefore);\n\n        if (nextLocal == instantBefore + DateTimeConstants.MILLIS_PER_SECOND) {\n            // Ambiguous local time, take the latest offset to be safe.\n            return offsetAfter;\n        } else if (nextLocal > instantLocal) {\n            // Went into a gap, take the previous offset.\n            return offsetBefore;\n        }\n\n        // We must have gone into an overlap.\n        long next = nextTransition(instantBefore - DateTimeConstants.MILLIS_PER_SECOND);\n\n        if (nextLocal == next) {\n            // Overlap is only 1 hour, take the latest offset to be safe.\n            return offsetAfter;\n        }\n\n        // Find out which overlap we are in.\n        int offsetNext = getOffset(nextLocal);\n        if (offsetBefore >= offsetAfter || offsetBefore < offsetNext) {\n            // We are in the earlier overlap.\n            return offsetBefore;\n        } else {\n            // We are in the later overlap.\n            return offsetAfter;\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/DateTimeZone.java b/src/main/java/org/joda/time/DateTimeZone.java\nindex 855cad05..7d7bb4cd 100644\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n@@ -878,36 +878,58 @@ public abstract class DateTimeZone implements Serializable {\n      * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n-        // get the offset at instantLocal (first estimate)\n-        final int offsetLocal = getOffset(instantLocal);\n-        // adjust instantLocal using the estimate and recalc the offset\n-        final long instantAdjusted = instantLocal - offsetLocal;\n-        final int offsetAdjusted = getOffset(instantAdjusted);\n-        // if the offsets differ, we must be near a DST boundary\n-        if (offsetLocal != offsetAdjusted) {\n-            // we need to ensure that time is always after the DST gap\n-            // this happens naturally for positive offsets, but not for negative\n-            if ((offsetLocal - offsetAdjusted) < 0) {\n-                // if we just return offsetAdjusted then the time is pushed\n-                // back before the transition, whereas it should be\n-                // on or after the transition\n-                long nextLocal = nextTransition(instantAdjusted);\n-                long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);\n-                if (nextLocal != nextAdjusted) {\n-                    return offsetLocal;\n-                }\n-            }\n-        } else if (offsetLocal > 0) {\n-            long prev = previousTransition(instantAdjusted);\n-            if (prev < instantAdjusted) {\n-                int offsetPrev = getOffset(prev);\n-                int diff = offsetPrev - offsetLocal;\n-                if (instantAdjusted - prev <= diff) {\n-                    return offsetPrev;\n-                }\n-            }\n+        // Get the offset at instantLocal (first estimate).\n+        int offsetBefore = getOffset(instantLocal);\n+        long instantBefore = instantLocal + offsetBefore;\n+        \n+        // Check if the calculated instant is before the minimum supported instant.\n+        if (instantBefore < getMinimumDateTime().getMillis()) {\n+            DateTimeZoneBuilder.FillCache(this, getMinimumDateTime().getMillis());\n+            return getOffset(instantLocal);\n+        }\n+\n+        // Check if the calculated instant is after the maximum supported instant.\n+        if (instantBefore >= getMaximumDateTime().getMillis()) {\n+            DateTimeZoneBuilder.FillCache(this, getMaximumDateTime().getMillis() - 1);\n+            return getOffset(instantLocal);\n+        }\n+\n+        // Get the offset at instantLocal (second estimate).\n+        int offsetAfter = getOffset(instantBefore);\n+        \n+        // If the offset is the same before and after, we're done.\n+        if (offsetBefore == offsetAfter) {\n+            return offsetBefore;\n+        }\n+\n+        // Check if we went into a gap.\n+        long nextLocal = nextTransition(instantBefore);\n+\n+        if (nextLocal == instantBefore + DateTimeConstants.MILLIS_PER_SECOND) {\n+            // Ambiguous local time, take the latest offset to be safe.\n+            return offsetAfter;\n+        } else if (nextLocal > instantLocal) {\n+            // Went into a gap, take the previous offset.\n+            return offsetBefore;\n+        }\n+\n+        // We must have gone into an overlap.\n+        long next = nextTransition(instantBefore - DateTimeConstants.MILLIS_PER_SECOND);\n+\n+        if (nextLocal == next) {\n+            // Overlap is only 1 hour, take the latest offset to be safe.\n+            return offsetAfter;\n+        }\n+\n+        // Find out which overlap we are in.\n+        int offsetNext = getOffset(nextLocal);\n+        if (offsetBefore >= offsetAfter || offsetBefore < offsetNext) {\n+            // We are in the earlier overlap.\n+            return offsetBefore;\n+        } else {\n+            // We are in the later overlap.\n+            return offsetAfter;\n         }\n-        return offsetAdjusted;\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}