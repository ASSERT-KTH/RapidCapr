{
    "patch": "    public final void translate(CharSequence input, Writer out) throws IOException {\n        if (out == null) {\n            throw new IllegalArgumentException(\"The Writer must not be null\");\n        }\n        if (input == null) {\n            return;\n        }\n        int pos = 0;\n        int len = Character.codePointCount(input, 0, input.length());\n        while (pos < len) {\n            int consumed = translate(input, pos, out);\n            if (consumed == 0) {\n                int ch = Character.codePointAt(input, pos);\n                writeCodePoint(out, ch);\n            }\n            else {\n                for (int pt = 0; pt < consumed; pt++) {\n                    int ch = Character.codePointAt(input, pos + pt);\n                    writeCodePoint(out, ch);\n                }\n            }\n            pos += consumed;\n        }\n    }\n\n    private void writeCodePoint(Writer out, int codePoint) throws IOException {\n        if (Character.isBmpCodePoint(codePoint)) {\n            out.write(codePoint);\n        } else if (Character.isValidCodePoint(codePoint)) {\n            char[] surrogatePair = Character.toChars(codePoint);\n            out.write(surrogatePair);\n        } else {\n            throw new IllegalArgumentException(\"Invalid code point: \" + codePoint);\n        }\n    }",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\nindex 4cb581d4..f463725a 100644\n--- a/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java\n@@ -84,22 +84,27 @@ public abstract class CharSequenceTranslator {\n         while (pos < len) {\n             int consumed = translate(input, pos, out);\n             if (consumed == 0) {\n-                char[] c = Character.toChars(Character.codePointAt(input, pos));\n-                out.write(c);\n+                int ch = Character.codePointAt(input, pos);\n+                writeCodePoint(out, ch);\n             }\n             else {\n-//          // contract with translators is that they have to understand codepoints \n-//          // and they just took care of a surrogate pair\n-            for (int pt = 0; pt < consumed; pt++) {\n-                    if (pos < len - 2) {\n-                pos += Character.charCount(Character.codePointAt(input, pos));\n-                    } else {\n-                        pos++;\n-                    }\n+                for (int pt = 0; pt < consumed; pt++) {\n+                    int ch = Character.codePointAt(input, pos + pt);\n+                    writeCodePoint(out, ch);\n                 }\n-                pos--;\n             }\n-            pos++;\n+            pos += consumed;\n+        }\n+    }\n+\n+    private void writeCodePoint(Writer out, int codePoint) throws IOException {\n+        if (Character.isBmpCodePoint(codePoint)) {\n+            out.write(codePoint);\n+        } else if (Character.isValidCodePoint(codePoint)) {\n+            char[] surrogatePair = Character.toChars(codePoint);\n+            out.write(surrogatePair);\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid code point: \" + codePoint);\n         }\n     }\n ",
    "result_reason": "Test timed out after 300 seconds",
    "test_result": "ERROR"
}