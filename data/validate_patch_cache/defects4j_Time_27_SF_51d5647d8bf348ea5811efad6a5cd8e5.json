{
    "patch": "private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n    if (notPrinter && notParser) {\n        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n    }\n    int size = elementPairs.size();\n    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n        Separator sep = (Separator) elementPairs.get(0);\n        List<Object> list = elementPairs.subList(2, size);\n        PeriodFormatter f = toFormatter(list, notPrinter, notParser);\n        sep = sep.finish(f.getPrinter(), f.getParser());\n        list.set(0, sep);\n        list.remove(1);\n        return new PeriodFormatter((PeriodPrinter) list.get(0), (PeriodParser) list.get(1));\n    }\n    Object[] comp = createComposite(elementPairs);\n    if (notPrinter) {\n        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n    } else if (notParser) {\n        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n    } else {\n        PeriodFormatter formatter = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n        if (formatter.print(new Period(0)).equals(\"P\")) {\n            formatter = new PeriodFormatter(new PeriodPrinter() {\n                public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n                    return 1;\n                }\n                public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n                    buf.append(\"P0D\");\n                }\n            }, formatter.getParser());\n        }\n        return formatter;\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\nindex 15332284..1ac43383 100644\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n@@ -791,26 +791,40 @@ public class PeriodFormatterBuilder {\n     }\n \n     //-----------------------------------------------------------------------\n-    private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n-        if (notPrinter && notParser) {\n-            throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n-        }\n-        int size = elementPairs.size();\n-        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n-            Separator sep = (Separator) elementPairs.get(0);\n-                PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);\n-                sep = sep.finish(f.getPrinter(), f.getParser());\n-                return new PeriodFormatter(sep, sep);\n-        }\n-        Object[] comp = createComposite(elementPairs);\n-        if (notPrinter) {\n-            return new PeriodFormatter(null, (PeriodParser) comp[1]);\n-        } else if (notParser) {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], null);\n-        } else {\n-            return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+private static PeriodFormatter toFormatter(List<Object> elementPairs, boolean notPrinter, boolean notParser) {\n+    if (notPrinter && notParser) {\n+        throw new IllegalStateException(\"Builder has created neither a printer nor a parser\");\n+    }\n+    int size = elementPairs.size();\n+    if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+        Separator sep = (Separator) elementPairs.get(0);\n+        List<Object> list = elementPairs.subList(2, size);\n+        PeriodFormatter f = toFormatter(list, notPrinter, notParser);\n+        sep = sep.finish(f.getPrinter(), f.getParser());\n+        list.set(0, sep);\n+        list.remove(1);\n+        return new PeriodFormatter((PeriodPrinter) list.get(0), (PeriodParser) list.get(1));\n+    }\n+    Object[] comp = createComposite(elementPairs);\n+    if (notPrinter) {\n+        return new PeriodFormatter(null, (PeriodParser) comp[1]);\n+    } else if (notParser) {\n+        return new PeriodFormatter((PeriodPrinter) comp[0], null);\n+    } else {\n+        PeriodFormatter formatter = new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n+        if (formatter.print(new Period(0)).equals(\"P\")) {\n+            formatter = new PeriodFormatter(new PeriodPrinter() {\n+                public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n+                    return 1;\n+                }\n+                public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+                    buf.append(\"P0D\");\n+                }\n+            }, formatter.getParser());\n         }\n+        return formatter;\n     }\n+}\n \n     private static Object[] createComposite(List<Object> elementPairs) {\n         switch (elementPairs.size()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}