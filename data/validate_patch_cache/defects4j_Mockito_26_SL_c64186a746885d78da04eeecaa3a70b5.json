{
    "patch": "public class DefaultValueCreator {\n\n    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n\n    static {\n        primitiveValues.put(boolean.class, false);\n        primitiveValues.put(char.class, '\\u0000');\n        primitiveValues.put(byte.class, (byte) 0);\n        primitiveValues.put(short.class, (short) 0);\n        primitiveValues.put(int.class, 0);\n        primitiveValues.put(long.class, 0L);\n        primitiveValues.put(float.class, 0F);\n        primitiveValues.put(double.class, 0.0d);\n    }\n\n    public <T> T returnFor(Class<T> type) {\n        Object value = primitiveValues.get(type);\n        if (value == null) {\n            return null;\n        }\n        return type.cast(value);\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/Primitives.java b/src/org/mockito/internal/util/Primitives.java\nindex b44b8253d..837678052 100644\n--- a/src/org/mockito/internal/util/Primitives.java\n+++ b/src/org/mockito/internal/util/Primitives.java\n@@ -63,6 +63,28 @@ public class Primitives {\n         primitiveValues.put(int.class, 0);\n         primitiveValues.put(long.class, 0L);\n         primitiveValues.put(float.class, 0F);\n-        primitiveValues.put(double.class, 0);\n+public class DefaultValueCreator {\n+\n+    private static Map<Class<?>, Object> primitiveValues = new HashMap<Class<?>, Object>();\n+\n+    static {\n+        primitiveValues.put(boolean.class, false);\n+        primitiveValues.put(char.class, '\\u0000');\n+        primitiveValues.put(byte.class, (byte) 0);\n+        primitiveValues.put(short.class, (short) 0);\n+        primitiveValues.put(int.class, 0);\n+        primitiveValues.put(long.class, 0L);\n+        primitiveValues.put(float.class, 0F);\n+        primitiveValues.put(double.class, 0.0d);\n+    }\n+\n+    public <T> T returnFor(Class<T> type) {\n+        Object value = primitiveValues.get(type);\n+        if (value == null) {\n+            return null;\n+        }\n+        return type.cast(value);\n+    }\n+}\n     }\n-}\n\\ No newline at end of file\n+}",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}