{
    "patch": "        JSType typeA = null;\n        JSType typeB = null;\n        if (this instanceof NamedType && that.isStructuralType()) {\n          typeB = that;\n        } else if (that instanceof NamedType && this.isStructuralType()) {\n          typeA = this;\n        }\n        return new TypePair(typeA, typeB);",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/JSType.java b/src/com/google/javascript/rhino/jstype/JSType.java\nindex aa8c7bc9..5a3d98b3 100644\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n@@ -703,7 +703,14 @@ public abstract class JSType implements Serializable {\n     // other types\n     switch (this.testForEquality(that)) {\n       case TRUE:\n-        return new TypePair(null, null);\n+        JSType typeA = null;\n+        JSType typeB = null;\n+        if (this instanceof NamedType && that.isStructuralType()) {\n+          typeB = that;\n+        } else if (that instanceof NamedType && this.isStructuralType()) {\n+          typeA = this;\n+        }\n+        return new TypePair(typeA, typeB);\n \n       case FALSE:\n       case UNKNOWN:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}