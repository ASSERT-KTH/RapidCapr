{
    "patch": "    typeOfThis = Preconditions.checkNotNull(typeOfThis);\n    ObjectType typeOfThisResolved = ObjectType.castWithLocation(\n        safeResolve(typeOfThis, t, scope), typeOfThis.getSourceLocation(), t);\n    if (typeOfThisResolved == null) {\n      t.report(typeOfThis.getReference().getNode(), SUPERTYPE_VALIDATION_WARNING,\n          \"Expected a subtype of Object or null, found \" + typeOfThis);\n      typeOfThisResolved = getCommonTypes().getObjectType();\n    }\n    typeOfThis = typeOfThisResolved;",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/FunctionType.java b/src/com/google/javascript/rhino/jstype/FunctionType.java\nindex fc2578d8..af411a4a 100644\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n@@ -868,7 +868,15 @@ public class FunctionType extends PrototypeObjectType {\n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+    typeOfThis = Preconditions.checkNotNull(typeOfThis);\n+    ObjectType typeOfThisResolved = ObjectType.castWithLocation(\n+        safeResolve(typeOfThis, t, scope), typeOfThis.getSourceLocation(), t);\n+    if (typeOfThisResolved == null) {\n+      t.report(typeOfThis.getReference().getNode(), SUPERTYPE_VALIDATION_WARNING,\n+          \"Expected a subtype of Object or null, found \" + typeOfThis);\n+      typeOfThisResolved = getCommonTypes().getObjectType();\n+    }\n+    typeOfThis = typeOfThisResolved;\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}