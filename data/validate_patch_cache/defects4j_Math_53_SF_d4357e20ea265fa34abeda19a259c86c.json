{
    "patch": "public Complex add(Complex rhs) throws NullArgumentException {\n    MathUtils.checkNotNull(rhs);\n    double sumReal = real + rhs.getReal();\n    double sumImaginary = imaginary + rhs.getImaginary();\n    if (Double.isNaN(sumReal) || Double.isNaN(sumImaginary)) {\n        return new Complex(Double.NaN, Double.NaN);\n    } else if (Double.isInfinite(sumReal) || Double.isInfinite(sumImaginary)) {\n        if (Double.isInfinite(sumReal) && Double.isInfinite(sumImaginary)) {\n            double sign = ((real < 0 && rhs.getReal() > 0) || (real > 0 && rhs.getReal() < 0) ||\n                           (imaginary < 0 && rhs.getImaginary() > 0) || (imaginary > 0 && rhs.getImaginary() < 0)) ? -1.0 : 1.0;\n            return new Complex(sign * Double.POSITIVE_INFINITY, sign * Double.POSITIVE_INFINITY);\n        } else {\n            return new Complex(sumReal, sumImaginary);\n        }\n    } else {\n        return new Complex(sumReal, sumImaginary);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/complex/Complex.java b/src/main/java/org/apache/commons/math/complex/Complex.java\nindex e0a8e97e9..0bc55b795 100644\n--- a/src/main/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/main/java/org/apache/commons/math/complex/Complex.java\n@@ -147,12 +147,24 @@ public class Complex implements FieldElement<Complex>, Serializable  {\n      * @return the complex number sum\n      * @throws NullArgumentException if <code>rhs</code> is null\n      */\n-    public Complex add(Complex rhs)\n-        throws NullArgumentException {\n-        MathUtils.checkNotNull(rhs);\n-        return createComplex(real + rhs.getReal(),\n-            imaginary + rhs.getImaginary());\n+public Complex add(Complex rhs) throws NullArgumentException {\n+    MathUtils.checkNotNull(rhs);\n+    double sumReal = real + rhs.getReal();\n+    double sumImaginary = imaginary + rhs.getImaginary();\n+    if (Double.isNaN(sumReal) || Double.isNaN(sumImaginary)) {\n+        return new Complex(Double.NaN, Double.NaN);\n+    } else if (Double.isInfinite(sumReal) || Double.isInfinite(sumImaginary)) {\n+        if (Double.isInfinite(sumReal) && Double.isInfinite(sumImaginary)) {\n+            double sign = ((real < 0 && rhs.getReal() > 0) || (real > 0 && rhs.getReal() < 0) ||\n+                           (imaginary < 0 && rhs.getImaginary() > 0) || (imaginary > 0 && rhs.getImaginary() < 0)) ? -1.0 : 1.0;\n+            return new Complex(sign * Double.POSITIVE_INFINITY, sign * Double.POSITIVE_INFINITY);\n+        } else {\n+            return new Complex(sumReal, sumImaginary);\n+        }\n+    } else {\n+        return new Complex(sumReal, sumImaginary);\n     }\n+}\n \n     /**\n      * Return the conjugate of this complex number. The conjugate of",
    "result_reason": "all tests passed",
    "test_result": "PASS"
}