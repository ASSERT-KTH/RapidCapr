{
    "patch": "  String getReadableJSTypeName(Node n, boolean dereference) {\n    \n    // If we're analyzing a GETPROP, the property may be inherited by the\n    // prototype chain. So climb the prototype chain and find out where\n    // the property was originally defined.\n    if (n.isGetProp()) {\n      ObjectType objectType = getJSType(n.getFirstChild()).dereference();\n      if (objectType != null) {\n        String propName = n.getLastChild().getString();\n        if (objectType.getConstructor() != null &&\n            objectType.getConstructor().isInterface()) {\n          objectType = FunctionType.getTopDefiningInterface(\n              objectType, propName);\n        } else {\n          // classes\n          while (objectType != null && !objectType.hasOwnProperty(propName)) {\n            objectType = objectType.getImplicitPrototype();\n          }\n        }\n\n        // Don't show complex function names or anonymous types.\n        // Instead, try to get a human-readable type name.\n        if (objectType != null &&\n            (objectType.getConstructor() != null ||\n             objectType.isFunctionPrototypeType())) {\n          return objectType.toString() + \".\" + propName;\n        }\n      }\n    }\n\n    JSType type = getJSType(n);\n    if (dereference) {\n      ObjectType dereferenced = type.dereference();\n      if (dereferenced != null) {\n        type = dereferenced;\n      }\n    }\n    if (type.isFunctionPrototypeType()) {\n      // Check if the current node belongs to a class field.\n      Node parentNode = n.getParent();\n      if (parentNode != null && parentNode.isMemberFunctionDef() &&\n          parentNode.getParent() != null && parentNode.getParent().isClassMembers()) {\n        return getReadableJSTypeName(parentNode, dereference) + \".\" + n.getLastChild().getString();\n      }\n      // Don't show complex function names or anonymous types.\n      return \"function\";\n    } else if (type.toObjectType() != null &&\n               type.toObjectType().getConstructor() != null) {\n      return type.toString();\n    } else {\n      String qualifiedName = n.getQualifiedName();\n      if (qualifiedName != null) {\n        return qualifiedName;\n      } else if (type.isFunctionType()) {\n        // Don't show complex function names.\n        return \"function\";\n      } else {\n        return type.toString();\n      }\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/TypeValidator.java b/src/com/google/javascript/jscomp/TypeValidator.java\nindex bcd024ac..34485910 100644\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n@@ -722,9 +722,7 @@ class TypeValidator {\n    *     to an Object type, if possible.\n    */\n   String getReadableJSTypeName(Node n, boolean dereference) {\n-\n-    // The best type name is the actual type name.\n-\n+    \n     // If we're analyzing a GETPROP, the property may be inherited by the\n     // prototype chain. So climb the prototype chain and find out where\n     // the property was originally defined.\n@@ -760,19 +758,28 @@ class TypeValidator {\n         type = dereferenced;\n       }\n     }\n-    if (type.isFunctionPrototypeType() ||\n-        (type.toObjectType() != null &&\n-         type.toObjectType().getConstructor() != null)) {\n-      return type.toString();\n-    }\n-    String qualifiedName = n.getQualifiedName();\n-    if (qualifiedName != null) {\n-      return qualifiedName;\n-    } else if (type.isFunctionType()) {\n-      // Don't show complex function names.\n+    if (type.isFunctionPrototypeType()) {\n+      // Check if the current node belongs to a class field.\n+      Node parentNode = n.getParent();\n+      if (parentNode != null && parentNode.isMemberFunctionDef() &&\n+          parentNode.getParent() != null && parentNode.getParent().isClassMembers()) {\n+        return getReadableJSTypeName(parentNode, dereference) + \".\" + n.getLastChild().getString();\n+      }\n+      // Don't show complex function names or anonymous types.\n       return \"function\";\n-    } else {\n+    } else if (type.toObjectType() != null &&\n+               type.toObjectType().getConstructor() != null) {\n       return type.toString();\n+    } else {\n+      String qualifiedName = n.getQualifiedName();\n+      if (qualifiedName != null) {\n+        return qualifiedName;\n+      } else if (type.isFunctionType()) {\n+        // Don't show complex function names.\n+        return \"function\";\n+      } else {\n+        return type.toString();\n+      }\n     }\n   }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}