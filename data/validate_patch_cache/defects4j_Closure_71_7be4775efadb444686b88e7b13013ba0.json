{
    "patch": "private void checkPropertyVisibility(NodeTraversal t,\n                                      Node getprop, Node parent) {\n    ObjectType objectType =\n            ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n    String propertyName = getprop.getLastChild().getString();\n\n    if (objectType == null) {\n        return;\n    }\n\n    boolean isOverride = t.inGlobalScope() &&\n            parent.getType() == Token.ASSIGN &&\n            parent.getFirstChild() == getprop;\n\n    boolean isConstructor = false;\n    if (isOverride) {\n        objectType = objectType.getImplicitPrototype();\n    } else if (propertyName.equals(\"constructor\") &&\n            NodeUtil.isCallableConstructorDefinition(getprop)) {\n        // property type is a constructor\n        isConstructor = true;\n        FunctionType ctorFn =\n                getprop.getFirstChild().getSecondChild().getJSType().toObjectType()\n                        .getConstructor();\n        if (objectType.equals(ctorFn)) {\n            // If the type of the method is the constructor function, the access needs to\n            // be converted to create a new instance.\n            getprop.getParent().putBooleanProp(Node.NEW_SUGGESTION_PROP, true);\n            return;\n        }\n    }\n\n    JSDocInfo docInfo = null;\n    boolean visibilityIsInherited = false;\n    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n        docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n        // If we didn't get JSDoc for the property, it's because there's no descriptor on the\n        // prototype chain. We want to emit an error message any time we're trying to access a\n        // non-static property that doesn't have any descriptors, unless it's to suppress a previous\n        // warning.\n        if (docInfo == null && !isConstructor && !isOverride) {\n            JSType type = objectType.getPropertyType(propertyName);\n            if (!type.isFunctionType()) {\n                compiler.report(\n                        t.makeError(getprop,\n                                MISSING_PROPERTIES_WARNING,\n                                propertyName,\n                                validator.getReadableJSTypeName(\n                                        getprop.getFirstChild(), true),\n                                objectType.getName()));\n            }\n        }\n\n        if (docInfo != null) {\n            visibilityIsInherited =\n                    visibilityIsInherited || docInfo.getVisibility() == Visibility.INHERITED;\n            if (docInfo.getVisibility() != Visibility.INHERITED) {\n                break;\n            }\n        }\n    }\n\n    if (docInfo == null && !isConstructor) {\n        return;\n    }\n\n    boolean sameInput =\n            t.getInput().getName().equals(docInfo.getSourceFile());\n    Visibility visibility =\n            visibilityIsInherited ? Visibility.INHERITED : docInfo.getVisibility();\n    JSType ownerType = normalizeClassType(objectType);\n\n    if (isOverride) {\n        // Check an ASSIGN statement that's trying to override a property on a superclass.\n        JSDocInfo overridingInfo = parent.getJSDocInfo();\n        Visibility overridingVisibility = overridingInfo == null ?\n                Visibility.INHERITED : overridingInfo.getVisibility();\n\n        if (visibility == Visibility.PRIVATE && !sameInput) {\n            throw new RuntimeException(\n                    t.makeError(getprop, PRIVATE_OVERRIDE,\n                            objectType.toString()).toString());\n        } else if (overridingVisibility != Visibility.INHERITED &&\n                overridingVisibility != visibility) {\n            throw new RuntimeException(\n                    t.makeError(getprop, VISIBILITY_MISMATCH,\n                            visibility.name(), objectType.toString(),\n                            overridingVisibility.name()).toString());\n        }\n    } else {\n        if (sameInput) {\n            // private access is always allowed in the same file.\n            return;\n        } else if (visibility == Visibility.PRIVATE &&\n                (currentClass == null || ownerType.differsFrom(currentClass))) {\n            if (docInfo.isConstructor() &&\n                    isValidPrivateConstructorAccess(parent)) {\n                return;\n            }\n\n            // private access is not allowed outside the file from a different enclosing class.\n            throw new RuntimeException(\n                    t.makeError(getprop,\n                            BAD_PRIVATE_PROPERTY_ACCESS,\n                            propertyName,\n                            validator.getReadableJSTypeName(\n                                    getprop.getFirstChild(), true)).toString());\n        } else if (visibility == Visibility.PROTECTED) {\n            if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n                throw new RuntimeException(\n                        t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n                                propertyName,\n                                validator.getReadableJSTypeName(\n                                        getprop.getFirstChild(),\n                                        true)).toString());\n            }\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CheckAccessControls.java b/src/com/google/javascript/jscomp/CheckAccessControls.java\nindex b23fd7af..3d658d9c 100644\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n@@ -404,100 +404,125 @@ class CheckAccessControls implements ScopedCallback, HotSwapCompilerPass {\n    * @param t The current traversal.\n    * @param getprop The getprop node.\n    */\n-  private void checkPropertyVisibility(NodeTraversal t,\n-      Node getprop, Node parent) {\n+private void checkPropertyVisibility(NodeTraversal t,\n+                                      Node getprop, Node parent) {\n     ObjectType objectType =\n-        ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+            ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n     String propertyName = getprop.getLastChild().getString();\n \n-    if (objectType != null) {\n-      // Is this a normal property access, or are we trying to override\n-      // an existing property?\n-      boolean isOverride = t.inGlobalScope() &&\n-          parent.getType() == Token.ASSIGN &&\n-          parent.getFirstChild() == getprop;\n-\n-      // Find the lowest property defined on a class with visibility\n-      // information.\n-      if (isOverride) {\n+    if (objectType == null) {\n+        return;\n+    }\n+\n+    boolean isOverride = t.inGlobalScope() &&\n+            parent.getType() == Token.ASSIGN &&\n+            parent.getFirstChild() == getprop;\n+\n+    boolean isConstructor = false;\n+    if (isOverride) {\n         objectType = objectType.getImplicitPrototype();\n-      }\n-      JSDocInfo docInfo = null;\n-      for (; objectType != null;\n-           objectType = objectType.getImplicitPrototype()) {\n+    } else if (propertyName.equals(\"constructor\") &&\n+            NodeUtil.isCallableConstructorDefinition(getprop)) {\n+        // property type is a constructor\n+        isConstructor = true;\n+        FunctionType ctorFn =\n+                getprop.getFirstChild().getSecondChild().getJSType().toObjectType()\n+                        .getConstructor();\n+        if (objectType.equals(ctorFn)) {\n+            // If the type of the method is the constructor function, the access needs to\n+            // be converted to create a new instance.\n+            getprop.getParent().putBooleanProp(Node.NEW_SUGGESTION_PROP, true);\n+            return;\n+        }\n+    }\n+\n+    JSDocInfo docInfo = null;\n+    boolean visibilityIsInherited = false;\n+    for (; objectType != null; objectType = objectType.getImplicitPrototype()) {\n         docInfo = objectType.getOwnPropertyJSDocInfo(propertyName);\n-        if (docInfo != null &&\n-            docInfo.getVisibility() != Visibility.INHERITED) {\n-          break;\n+        // If we didn't get JSDoc for the property, it's because there's no descriptor on the\n+        // prototype chain. We want to emit an error message any time we're trying to access a\n+        // non-static property that doesn't have any descriptors, unless it's to suppress a previous\n+        // warning.\n+        if (docInfo == null && !isConstructor && !isOverride) {\n+            JSType type = objectType.getPropertyType(propertyName);\n+            if (!type.isFunctionType()) {\n+                compiler.report(\n+                        t.makeError(getprop,\n+                                MISSING_PROPERTIES_WARNING,\n+                                propertyName,\n+                                validator.getReadableJSTypeName(\n+                                        getprop.getFirstChild(), true),\n+                                objectType.getName()));\n+            }\n         }\n-      }\n \n-      if (objectType == null) {\n-        // We couldn't find a visibility modifier; assume it's public.\n+        if (docInfo != null) {\n+            visibilityIsInherited =\n+                    visibilityIsInherited || docInfo.getVisibility() == Visibility.INHERITED;\n+            if (docInfo.getVisibility() != Visibility.INHERITED) {\n+                break;\n+            }\n+        }\n+    }\n+\n+    if (docInfo == null && !isConstructor) {\n         return;\n-      }\n+    }\n \n-      boolean sameInput =\n-          t.getInput().getName().equals(docInfo.getSourceName());\n-      Visibility visibility = docInfo.getVisibility();\n-      JSType ownerType = normalizeClassType(objectType);\n-      if (isOverride) {\n-        // Check an ASSIGN statement that's trying to override a property\n-        // on a superclass.\n+    boolean sameInput =\n+            t.getInput().getName().equals(docInfo.getSourceFile());\n+    Visibility visibility =\n+            visibilityIsInherited ? Visibility.INHERITED : docInfo.getVisibility();\n+    JSType ownerType = normalizeClassType(objectType);\n+\n+    if (isOverride) {\n+        // Check an ASSIGN statement that's trying to override a property on a superclass.\n         JSDocInfo overridingInfo = parent.getJSDocInfo();\n         Visibility overridingVisibility = overridingInfo == null ?\n-            Visibility.INHERITED : overridingInfo.getVisibility();\n+                Visibility.INHERITED : overridingInfo.getVisibility();\n \n-        // Check that (a) the property *can* be overridden, and\n-        // (b) that the visibility of the override is the same as the\n-        // visibility of the original property.\n         if (visibility == Visibility.PRIVATE && !sameInput) {\n-          compiler.report(\n-              t.makeError(getprop, PRIVATE_OVERRIDE,\n-                  objectType.toString()));\n+            throw new RuntimeException(\n+                    t.makeError(getprop, PRIVATE_OVERRIDE,\n+                            objectType.toString()).toString());\n         } else if (overridingVisibility != Visibility.INHERITED &&\n-            overridingVisibility != visibility) {\n-          compiler.report(\n-              t.makeError(getprop, VISIBILITY_MISMATCH,\n-                  visibility.name(), objectType.toString(),\n-                  overridingVisibility.name()));\n+                overridingVisibility != visibility) {\n+            throw new RuntimeException(\n+                    t.makeError(getprop, VISIBILITY_MISMATCH,\n+                            visibility.name(), objectType.toString(),\n+                            overridingVisibility.name()).toString());\n         }\n-      } else {\n+    } else {\n         if (sameInput) {\n-          // private access is always allowed in the same file.\n-          return;\n-        } else if (visibility == Visibility.PRIVATE &&\n-            (currentClass == null || ownerType.differsFrom(currentClass))) {\n-          if (docInfo.isConstructor() &&\n-              isValidPrivateConstructorAccess(parent)) {\n+            // private access is always allowed in the same file.\n             return;\n-          }\n-\n-          // private access is not allowed outside the file from a different\n-          // enclosing class.\n-          compiler.report(\n-              t.makeError(getprop,\n-                  BAD_PRIVATE_PROPERTY_ACCESS,\n-                  propertyName,\n-                  validator.getReadableJSTypeName(\n-                      getprop.getFirstChild(), true)));\n+        } else if (visibility == Visibility.PRIVATE &&\n+                (currentClass == null || ownerType.differsFrom(currentClass))) {\n+            if (docInfo.isConstructor() &&\n+                    isValidPrivateConstructorAccess(parent)) {\n+                return;\n+            }\n+\n+            // private access is not allowed outside the file from a different enclosing class.\n+            throw new RuntimeException(\n+                    t.makeError(getprop,\n+                            BAD_PRIVATE_PROPERTY_ACCESS,\n+                            propertyName,\n+                            validator.getReadableJSTypeName(\n+                                    getprop.getFirstChild(), true)).toString());\n         } else if (visibility == Visibility.PROTECTED) {\n-          // There are 3 types of legal accesses of a protected property:\n-          // 1) Accesses in the same file\n-          // 2) Overriding the property in a subclass\n-          // 3) Accessing the property from inside a subclass\n-          // The first two have already been checked for.\n-          if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n-            compiler.report(\n-                t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,\n-                    propertyName,\n-                    validator.getReadableJSTypeName(\n-                        getprop.getFirstChild(), true)));\n-          }\n+            if (currentClass == null || !currentClass.isSubtype(ownerType)) {\n+                throw new RuntimeException(\n+                        t.makeError(getprop, BAD_PROTECTED_PROPERTY_ACCESS,\n+                                propertyName,\n+                                validator.getReadableJSTypeName(\n+                                        getprop.getFirstChild(),\n+                                        true)).toString());\n+            }\n         }\n-      }\n     }\n-  }\n+}\n \n   /**\n    * Whether the given access of a private constructor is legal.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}