{
    "patch": "public Complex multiply(Complex factor) {\n    double realFactor = factor.getReal();\n    double imaginaryFactor = factor.getImaginary();\n\n    if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n            Double.isNaN(realFactor) || Double.isNaN(imaginaryFactor)) {\n        return createNaN();\n    }\n\n    return createComplex(real * realFactor - imaginary * imaginaryFactor,\n                         real * imaginaryFactor + imaginary * realFactor);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/complex/Complex.java b/src/java/org/apache/commons/math/complex/Complex.java\nindex 3571567f8..1ea51785d 100644\n--- a/src/java/org/apache/commons/math/complex/Complex.java\n+++ b/src/java/org/apache/commons/math/complex/Complex.java\n@@ -242,29 +242,18 @@ public class Complex implements Serializable  {\n      *         not equal to this Complex instance\n      * \n      */\n-    public boolean equals(Object other) {\n-        boolean ret;\n-        \n-        if (this == other) { \n-            ret = true;\n-        } else if (other == null) {\n-            ret = false;\n-        } else  {\n-            try {\n-                Complex rhs = (Complex)other;\n-                if (rhs.isNaN()) {\n-                    ret = this.isNaN();\n-                } else {\n-                    ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary())); \n-                }\n-            } catch (ClassCastException ex) {\n-                // ignore exception\n-                ret = false;\n-            }\n-        }\n-      \n-        return ret;\n+public Complex multiply(Complex factor) {\n+    double realFactor = factor.getReal();\n+    double imaginaryFactor = factor.getImaginary();\n+\n+    if (Double.isNaN(real) || Double.isNaN(imaginary) ||\n+            Double.isNaN(realFactor) || Double.isNaN(imaginaryFactor)) {\n+        return createNaN();\n     }\n+\n+    return createComplex(real * realFactor - imaginary * imaginaryFactor,\n+                         real * imaginaryFactor + imaginary * realFactor);\n+}\n     \n     /**\n      * Get a hashCode for the complex number.",
    "result_reason": "error: method multiply(Complex) is already defined in class Complex",
    "test_result": "ERROR"
}