{
    "patch": "        Matcher patternMatcher = formatPattern.matcher(pattern);\n        if(!patternMatcher.lookingAt()) {\n            throw new IllegalArgumentException(\"Invalid pattern\");\n        }\n\n        currentFormatField = patternMatcher.group();\n        Strategy currentStrategy = getStrategy(currentFormatField);\n        List<Strategy> collector = new ArrayList<Strategy>();\n\n        while (currentStrategy != null) {\n            Matcher nextPatternMatcher = patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n            if(!nextPatternMatcher.lookingAt()) {\n                nextStrategy = null;\n            } else {\n                String nextFormatField= nextPatternMatcher.group();\n                nextStrategy = getStrategy(nextFormatField);\n                if(nextStrategy != null && currentStrategy.addRegex(this, regex)) {\n                    collector.add(currentStrategy);\n                } else {\n                    nextStrategy = null;\n                }\n                currentFormatField= nextFormatField;\n                patternMatcher = nextPatternMatcher;\n            }\n            currentStrategy= nextStrategy;\n        }\n\n        currentFormatField= null;\n        if(collector.size() > 0) {\n            strategies= collector.toArray(new Strategy[collector.size()]);\n        } else {\n            strategies= new Strategy[0];\n        }\n        parsePattern= Pattern.compile(regex.toString());",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\nindex 8df302f9..0d30f86c 100644\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateParser.java\n@@ -141,6 +141,40 @@ public class FastDateParser implements DateParser, Serializable {\n             currentFormatField= nextFormatField;\n             currentStrategy= nextStrategy;\n         }\n+        Matcher patternMatcher = formatPattern.matcher(pattern);\n+        if(!patternMatcher.lookingAt()) {\n+            throw new IllegalArgumentException(\"Invalid pattern\");\n+        }\n+\n+        currentFormatField = patternMatcher.group();\n+        Strategy currentStrategy = getStrategy(currentFormatField);\n+        List<Strategy> collector = new ArrayList<Strategy>();\n+\n+        while (currentStrategy != null) {\n+            Matcher nextPatternMatcher = patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());\n+            if(!nextPatternMatcher.lookingAt()) {\n+                nextStrategy = null;\n+            } else {\n+                String nextFormatField= nextPatternMatcher.group();\n+                nextStrategy = getStrategy(nextFormatField);\n+                if(nextStrategy != null && currentStrategy.addRegex(this, regex)) {\n+                    collector.add(currentStrategy);\n+                } else {\n+                    nextStrategy = null;\n+                }\n+                currentFormatField= nextFormatField;\n+                patternMatcher = nextPatternMatcher;\n+            }\n+            currentStrategy= nextStrategy;\n+        }\n+\n+        currentFormatField= null;\n+        if(collector.size() > 0) {\n+            strategies= collector.toArray(new Strategy[collector.size()]);\n+        } else {\n+            strategies= new Strategy[0];\n+        }\n+        parsePattern= Pattern.compile(regex.toString());\n         if(currentStrategy.addRegex(this, regex)) {\n             collector.add(currentStrategy);\n         }",
    "result_reason": "error: variable patternMatcher is already defined in method init()",
    "test_result": "ERROR"
}