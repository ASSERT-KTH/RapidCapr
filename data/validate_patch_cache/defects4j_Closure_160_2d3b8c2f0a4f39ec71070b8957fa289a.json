{
    "patch": "  public void initOptions(CompilerOptions options) {\n    this.options = options;\n    if (errorManager == null) {\n      if (outStream == null) {\n        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n      } else {\n        PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n        printer.setSummaryDetailLevel(options.summaryDetailLevel);\n        setErrorManager(printer);\n      }\n    }\n\n    // DiagnosticGroups override the plain checkTypes option with \"enables\".\n    // DiagnosticGroups override the plain checkTypes option with \"disables\".\n    boolean checkTypesEnabledOverride = options.enables(DiagnosticGroups.CHECK_TYPES);\n    boolean checkTypesDisabledOverride = options.disables(DiagnosticGroups.CHECK_TYPES);\n    if (checkTypesEnabledOverride) {\n      options.checkTypes = true;\n    } else if (checkTypesDisabledOverride) {\n      options.checkTypes = false;\n    } else if (!options.checkTypes) {\n      options.setWarningLevel(DiagnosticGroups.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n    }\n\n    // Apply the \"checkGlobalThisLevel\" level to the \"GLOBAL_THIS\" group.\n    if (options.checkGlobalThisLevel.isOn()) {\n      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n    }\n\n    // Initialize the warnings guard.\n    List<WarningsGuard> guards = Lists.newArrayList();\n    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n    guards.add(options.getWarningsGuard());\n\n    // If checkSymbols is disabled and the DiagnosticGroups warningsGuard doesn't disable it,\n    // we add a new warnings guard to disable it.\n    boolean checkSymbolsDisabledOverride = !options.checkSymbols;\n    boolean checkVariablesDisabledOverride = warningsGuard != null && warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES);\n    if (checkSymbolsDisabledOverride && !checkVariablesDisabledOverride) {\n      guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n    }\n\n    this.warningsGuard = new ComposeWarningsGuard(guards);\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 11850211..f5f2e404 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -227,55 +227,42 @@ public class Compiler extends AbstractCompiler {\n     this.options = options;\n     if (errorManager == null) {\n       if (outStream == null) {\n-        setErrorManager(\n-            new LoggerErrorManager(createMessageFormatter(), logger));\n+        setErrorManager(new LoggerErrorManager(createMessageFormatter(), logger));\n       } else {\n-        PrintStreamErrorManager printer =\n-            new PrintStreamErrorManager(createMessageFormatter(), outStream);\n+        PrintStreamErrorManager printer = new PrintStreamErrorManager(createMessageFormatter(), outStream);\n         printer.setSummaryDetailLevel(options.summaryDetailLevel);\n         setErrorManager(printer);\n       }\n     }\n \n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+    // DiagnosticGroups override the plain checkTypes option with \"enables\".\n+    // DiagnosticGroups override the plain checkTypes option with \"disables\".\n+    boolean checkTypesEnabledOverride = options.enables(DiagnosticGroups.CHECK_TYPES);\n+    boolean checkTypesDisabledOverride = options.disables(DiagnosticGroups.CHECK_TYPES);\n+    if (checkTypesEnabledOverride) {\n       options.checkTypes = true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+    } else if (checkTypesDisabledOverride) {\n       options.checkTypes = false;\n     } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n+      options.setWarningLevel(DiagnosticGroups.forType(RhinoErrorReporter.TYPE_PARSE_ERROR), CheckLevel.OFF);\n     }\n \n+    // Apply the \"checkGlobalThisLevel\" level to the \"GLOBAL_THIS\" group.\n     if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n+      options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);\n     }\n \n     // Initialize the warnings guard.\n     List<WarningsGuard> guards = Lists.newArrayList();\n-    guards.add(\n-        new SuppressDocWarningsGuard(\n-            getDiagnosticGroups().getRegisteredGroups()));\n+    guards.add(new SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));\n     guards.add(options.getWarningsGuard());\n \n-\n-    // All passes must run the variable check. This synthesizes\n-    // variables later so that the compiler doesn't crash. It also\n-    // checks the externs file for validity. If you don't want to warn\n-    // about missing variable declarations, we shut that specific\n-    // error off.\n-    if (!options.checkSymbols &&\n-        (warningsGuard == null || !warningsGuard.disables(\n-            DiagnosticGroups.CHECK_VARIABLES))) {\n-      guards.add(new DiagnosticGroupWarningsGuard(\n-          DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n+    // If checkSymbols is disabled and the DiagnosticGroups warningsGuard doesn't disable it,\n+    // we add a new warnings guard to disable it.\n+    boolean checkSymbolsDisabledOverride = !options.checkSymbols;\n+    boolean checkVariablesDisabledOverride = warningsGuard != null && warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES);\n+    if (checkSymbolsDisabledOverride && !checkVariablesDisabledOverride) {\n+      guards.add(new DiagnosticGroupWarningsGuard(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n     this.warningsGuard = new ComposeWarningsGuard(guards);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}