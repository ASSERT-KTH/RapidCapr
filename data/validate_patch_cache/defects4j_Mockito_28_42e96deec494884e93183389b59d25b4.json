{
    "patch": "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n        try {\n            field.setAccessible(true);\n            Object currentValue = field.get(fieldInstance);\n            if (currentValue != null) {\n                // Field already has a value, so skip it.\n                continue;\n            }\n            MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n            if (mockCandidate != null) {\n                mockCandidate.thenInject();\n                return;\n            }\n        } catch (Exception e) {\n            // Ignore, this field will just not be set.\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\nindex 213ebf351..2c5c33c10 100644\n--- a/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n+++ b/src/org/mockito/internal/configuration/DefaultInjectionEngine.java\n@@ -90,7 +90,25 @@ public class DefaultInjectionEngine {\n \n     private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n         for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n-            mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();\n+private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) {\n+    for (Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) {\n+        try {\n+            field.setAccessible(true);\n+            Object currentValue = field.get(fieldInstance);\n+            if (currentValue != null) {\n+                // Field already has a value, so skip it.\n+                continue;\n+            }\n+            MockCandidate mockCandidate = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance);\n+            if (mockCandidate != null) {\n+                mockCandidate.thenInject();\n+                return;\n+            }\n+        } catch (Exception e) {\n+            // Ignore, this field will just not be set.\n+        }\n+    }\n+}\n         }\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}