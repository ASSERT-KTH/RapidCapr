{
    "patch": "private void handleObjectLit(NodeTraversal t, Node n) {\n  Set<String> stringProps = new HashSet<String>();\n  Set<String> getterSetterProps = new HashSet<String>();\n\n  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n    if (child.isComputedProp()) {\n      processComputedProp(t, stringProps, getterSetterProps, child);\n      continue;\n    }\n\n    String name = null;\n    if (child.isStringKey()) {\n      name = child.getString();\n    } else if (NodeUtil.isGetterOrSetterKey(child)) {\n      name = NodeUtil.getObjectLitKeyName(child);\n      processGetterSetterChild(child, name);\n    }\n\n    if (name != null) {\n      T type = typeSystem.getType(getScope(), n, name);\n\n      // We should never see a mix of numbers and strings.\n      Property prop = getProperty(name);\n      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n        // TODO(user): It doesn't look like the user can do much in this\n        // case right now.\n        if (propertiesToErrorFor.containsKey(name)) {\n          compiler.report(\n              JSError.make(\n                  t.getSourceName(),\n                  child,\n                  propertiesToErrorFor.get(name),\n                  Warnings.INVALIDATION,\n                  name,\n                  (type == null ? \"null\" : type.toString()),\n                  n.toString(),\n                  \"\"));\n        }\n      }\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..8b0a7d8f 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -487,30 +487,48 @@ class DisambiguateProperties<T> implements CompilerPass {\n     /**\n      * Processes a OBJECTLIT node.\n      */\n-    private void handleObjectLit(NodeTraversal t, Node n) {\n-      for (Node child = n.getFirstChild();\n-          child != null;\n-          child = child.getNext()) {\n-        // Maybe STRING, GET, SET\n-\n-        // We should never see a mix of numbers and strings.\n-        String name = child.getString();\n-        T type = typeSystem.getType(getScope(), n, name);\n-\n-        Property prop = getProperty(name);\n-        if (!prop.scheduleRenaming(child,\n-                                   processProperty(t, prop, type, null))) {\n-          // TODO(user): It doesn't look like the user can do much in this\n-          // case right now.\n-          if (propertiesToErrorFor.containsKey(name)) {\n-            compiler.report(JSError.make(\n-                t.getSourceName(), child, propertiesToErrorFor.get(name),\n-                Warnings.INVALIDATION, name,\n-                (type == null ? \"null\" : type.toString()), n.toString(), \"\"));\n-          }\n+private void handleObjectLit(NodeTraversal t, Node n) {\n+  Set<String> stringProps = new HashSet<String>();\n+  Set<String> getterSetterProps = new HashSet<String>();\n+\n+  for (Node child = n.getFirstChild(); child != null; child = child.getNext()) {\n+    if (child.isComputedProp()) {\n+      processComputedProp(t, stringProps, getterSetterProps, child);\n+      continue;\n+    }\n+\n+    String name = null;\n+    if (child.isStringKey()) {\n+      name = child.getString();\n+    } else if (NodeUtil.isGetterOrSetterKey(child)) {\n+      name = NodeUtil.getObjectLitKeyName(child);\n+      processGetterSetterChild(child, name);\n+    }\n+\n+    if (name != null) {\n+      T type = typeSystem.getType(getScope(), n, name);\n+\n+      // We should never see a mix of numbers and strings.\n+      Property prop = getProperty(name);\n+      if (!prop.scheduleRenaming(child, processProperty(t, prop, type, null))) {\n+        // TODO(user): It doesn't look like the user can do much in this\n+        // case right now.\n+        if (propertiesToErrorFor.containsKey(name)) {\n+          compiler.report(\n+              JSError.make(\n+                  t.getSourceName(),\n+                  child,\n+                  propertiesToErrorFor.get(name),\n+                  Warnings.INVALIDATION,\n+                  name,\n+                  (type == null ? \"null\" : type.toString()),\n+                  n.toString(),\n+                  \"\"));\n         }\n       }\n     }\n+  }\n+}\n \n     private void printErrorLocations(List<String> errors, JSType t) {\n       if (!t.isObject() || t.isAllType()) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}