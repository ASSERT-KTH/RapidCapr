{
    "patch": "          && n.getFirstChild().getType() == Token.GETPROP\n          && getParent(n).getType() == Token.EXPR_RESULT) {\n        Node grandparent = getParent(getParent(n));\n        if (grandparent.getType() == Token.COMMA\n            && grandparent.getFirstChild() == getParent(n)) {\n          grandparent.removeChild(getParent(n));\n          return false;\n        }\n        Node protoAssign = n.getNext();\n        if (protoAssign.getType() == Token.ASSIGN\n            && NodeUtil.isExprAssign(grandparent)) {\n          Node protoProp = n.getLastChild();\n          Node assignTarget = protoAssign.getFirstChild();\n          if (protoProp.getType() == Token.STRING\n              && protoProp.getString().equals(\"prototype\")\n              && assignTarget.matchesQualifiedName(\"window.Object\")\n              && isWindowAssign(assignTarget.getParent())) {\n            grandparent.removeChild(assign);\n            return true;\n          }\n        }\n      }\n      return false;",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..3ec1245b 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,12 +310,33 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n-\n     private boolean isPrototypePropertyAssign(Node assign) {\n       Node n = assign.getFirstChild();\n       if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n           && n.getType() == Token.GETPROP\n-          ) {\n+          && n.getFirstChild().getType() == Token.GETPROP\n+          && getParent(n).getType() == Token.EXPR_RESULT) {\n+        Node grandparent = getParent(getParent(n));\n+        if (grandparent.getType() == Token.COMMA\n+            && grandparent.getFirstChild() == getParent(n)) {\n+          grandparent.removeChild(getParent(n));\n+          return false;\n+        }\n+        Node protoAssign = n.getNext();\n+        if (protoAssign.getType() == Token.ASSIGN\n+            && NodeUtil.isExprAssign(grandparent)) {\n+          Node protoProp = n.getLastChild();\n+          Node assignTarget = protoAssign.getFirstChild();\n+          if (protoProp.getType() == Token.STRING\n+              && protoProp.getString().equals(\"prototype\")\n+              && assignTarget.matchesQualifiedName(\"window.Object\")\n+              && isWindowAssign(assignTarget.getParent())) {\n+            grandparent.removeChild(assign);\n+            return true;\n+          }\n+        }\n+      }\n+      return false;\n         // We want to exclude the assignment itself from the usage list\n         boolean isChainedProperty =\n             n.getFirstChild().getType() == Token.GETPROP;",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}