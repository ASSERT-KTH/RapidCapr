{
    "patch": "    if (node.getType() == Token.CALL) {\n      Node child = node.getFirstChild();\n      if (child.getType() == Token.NAME) {\n        changed.add(child.getString());\n        Node functionNode = getScopeRoot(child);\n        if (functionNode != null) {\n          if (functionNode.getType() == Token.FUNCTION) {\n            String functionName = getFunctionName(functionNode);\n            if (functionName != null) {\n              changed.add(getFunctionName(functionNode));\n            }\n          } else {\n            Preconditions.checkState(\n                functionNode.getType() == Token.SCRIPT);\n            if (!changed.contains(EXTERNS)) {\n              changed.add(EXTERNS);\n            }\n          }\n        }\n      }\n    }\n\n    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n      findCalledFunctions(c, changed);\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineFunctions.java b/src/com/google/javascript/jscomp/InlineFunctions.java\nindex 814a07f4..5ffc10eb 100644\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n@@ -778,6 +778,28 @@ class InlineFunctions implements SpecializationAwareCompilerPass {\n       Node child = node.getFirstChild();\n       if (child.getType() == Token.NAME) {\n         changed.add(child.getString());\n+        Node functionNode = getScopeRoot(child);\n+        if (functionNode != null) {\n+          if (functionNode.getType() == Token.FUNCTION) {\n+            String functionName = getFunctionName(functionNode);\n+            if (functionName != null) {\n+              changed.add(getFunctionName(functionNode));\n+            }\n+          } else {\n+            Preconditions.checkState(\n+                functionNode.getType() == Token.SCRIPT);\n+            if (!changed.contains(EXTERNS)) {\n+              changed.add(EXTERNS);\n+            }\n+          }\n+        }\n+      }\n+    }\n+\n+    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {\n+      findCalledFunctions(c, changed);\n+    }\n+  }\n       }\n     }\n ",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}