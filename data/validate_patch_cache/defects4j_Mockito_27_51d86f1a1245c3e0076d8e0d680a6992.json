{
    "patch": "import net.sf.cglib.proxy.Callback;\nimport net.sf.cglib.proxy.Factory;\n\n// ...\n\n    public <T> void resetMock(T mock) {\n        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n        \n        MockitoInvocationHandler newMockHandler = new MockHandler<T>(oldMockHandler);\n\n        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n\n        ((Factory) mock).setCallback(0, newFilter);\n    }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/MockUtil.java b/src/org/mockito/internal/util/MockUtil.java\nindex 3c20596b0..2e72aebde 100644\n--- a/src/org/mockito/internal/util/MockUtil.java\n+++ b/src/org/mockito/internal/util/MockUtil.java\n@@ -61,8 +61,20 @@ public class MockUtil {\n \n     public <T> void resetMock(T mock) {\n         MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n-        MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);\n-        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));\n+import net.sf.cglib.proxy.Callback;\n+import net.sf.cglib.proxy.Factory;\n+\n+// ...\n+\n+    public <T> void resetMock(T mock) {\n+        MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);\n+        \n+        MockitoInvocationHandler newMockHandler = new MockHandler<T>(oldMockHandler);\n+\n+        MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));\n+\n+        ((Factory) mock).setCallback(0, newFilter);\n+    }\n         ((Factory) mock).setCallback(0, newFilter);\n     }\n ",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}