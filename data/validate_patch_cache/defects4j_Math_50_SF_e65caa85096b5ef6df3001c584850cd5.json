{
    "patch": "protected final double doSolve() throws TooManyEvaluationsException {\n    // Get initial solution\n    double x0 = getMin();\n    double x1 = getMax();\n    double f0 = computeObjectiveValue(x0);\n    double f1 = computeObjectiveValue(x1);\n\n    // If one of the bounds is the exact root, return it. Since these are\n    // not under-approximations or over-approximations, we can return them\n    // regardless of the allowed solutions.\n    if (f0 == 0.0) {\n        return x0;\n    }\n    if (f1 == 0.0) {\n        return x1;\n    }\n    \n    // Verify bracketing of initial solution.\n    verifyBracketing(x0, x1);\n\n    // Get accuracies.\n    final double ftol = getFunctionValueAccuracy();\n    final double atol = getAbsoluteAccuracy();\n    final double rtol = getRelativeAccuracy();\n\n    // Keep track of inverted intervals, meaning that the left bound is\n    // larger than the right bound.\n    boolean inverted = false;\n\n    int maxIterations = getMaxEvaluations() - 2;\n    int iterations = 0;\n\n    // Keep finding better approximations.\n    while (iterations < maxIterations) {\n        // Calculate the next approximation.\n        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n        final double fx = computeObjectiveValue(x);\n\n        // If the new approximation is the exact root, return it. Since\n        // this is not an under-approximation or an over-approximation,\n        // we can return it regardless of the allowed solutions.\n        if (fx == 0.0) {\n            return x;\n        }\n\n        // Update the bounds with the new approximation.\n        if (f1 * fx < 0) {\n            // The value of x1 has switched to the other bound, thus inverting\n            // the interval.\n            x0 = x1;\n            f0 = f1;\n            inverted = !inverted;\n        } else {\n            switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Nothing.\n                    if (x == x1) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n            }\n        }\n        // Update from [x0, x1] to [x0, x].\n        x1 = x;\n        f1 = fx;\n\n        // If the function value of the last approximation is too small,\n        // given the function value accuracy, then we can't get closer to\n        // the root than we already are.\n        if (FastMath.abs(f1) <= ftol) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        // If the current interval is within the given accuracies, we\n        // are satisfied with the current approximation.\n        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n            switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n            }\n        }\n\n        iterations++;\n    }\n\n    // We've reached the maximum number of allowed iterations, so throw an exception.\n    throw new TooManyEvaluationsException(getMaxEvaluations() - 2);\n}\n\nprivate void verifyBracketing(double lo, double hi) throws NumberIsTooLargeException {\n    // Verify bracketing.\n    final double fLo = computeObjectiveValue(lo);\n    final double fHi = computeObjectiveValue(hi);\n    if (fLo * fHi > 0) {\n        throw new NumberIsTooLargeException(lo, hi, fLo, fHi);\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\nindex e47d98204..82f387ad6 100644\n--- a/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n+++ b/src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java\n@@ -125,57 +125,60 @@ public abstract class BaseSecantSolver\n     }\n \n     /** {@inheritDoc} */\n-    protected final double doSolve() {\n-        // Get initial solution\n-        double x0 = getMin();\n-        double x1 = getMax();\n-        double f0 = computeObjectiveValue(x0);\n-        double f1 = computeObjectiveValue(x1);\n+protected final double doSolve() throws TooManyEvaluationsException {\n+    // Get initial solution\n+    double x0 = getMin();\n+    double x1 = getMax();\n+    double f0 = computeObjectiveValue(x0);\n+    double f1 = computeObjectiveValue(x1);\n \n-        // If one of the bounds is the exact root, return it. Since these are\n-        // not under-approximations or over-approximations, we can return them\n-        // regardless of the allowed solutions.\n-        if (f0 == 0.0) {\n-            return x0;\n-        }\n-        if (f1 == 0.0) {\n-            return x1;\n-        }\n+    // If one of the bounds is the exact root, return it. Since these are\n+    // not under-approximations or over-approximations, we can return them\n+    // regardless of the allowed solutions.\n+    if (f0 == 0.0) {\n+        return x0;\n+    }\n+    if (f1 == 0.0) {\n+        return x1;\n+    }\n+    \n+    // Verify bracketing of initial solution.\n+    verifyBracketing(x0, x1);\n \n-        // Verify bracketing of initial solution.\n-        verifyBracketing(x0, x1);\n+    // Get accuracies.\n+    final double ftol = getFunctionValueAccuracy();\n+    final double atol = getAbsoluteAccuracy();\n+    final double rtol = getRelativeAccuracy();\n \n-        // Get accuracies.\n-        final double ftol = getFunctionValueAccuracy();\n-        final double atol = getAbsoluteAccuracy();\n-        final double rtol = getRelativeAccuracy();\n+    // Keep track of inverted intervals, meaning that the left bound is\n+    // larger than the right bound.\n+    boolean inverted = false;\n \n-        // Keep track of inverted intervals, meaning that the left bound is\n-        // larger than the right bound.\n-        boolean inverted = false;\n+    int maxIterations = getMaxEvaluations() - 2;\n+    int iterations = 0;\n \n-        // Keep finding better approximations.\n-        while (true) {\n-            // Calculate the next approximation.\n-            final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n-            final double fx = computeObjectiveValue(x);\n+    // Keep finding better approximations.\n+    while (iterations < maxIterations) {\n+        // Calculate the next approximation.\n+        final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\n+        final double fx = computeObjectiveValue(x);\n \n-            // If the new approximation is the exact root, return it. Since\n-            // this is not an under-approximation or an over-approximation,\n-            // we can return it regardless of the allowed solutions.\n-            if (fx == 0.0) {\n-                return x;\n-            }\n+        // If the new approximation is the exact root, return it. Since\n+        // this is not an under-approximation or an over-approximation,\n+        // we can return it regardless of the allowed solutions.\n+        if (fx == 0.0) {\n+            return x;\n+        }\n \n-            // Update the bounds with the new approximation.\n-            if (f1 * fx < 0) {\n-                // The value of x1 has switched to the other bound, thus inverting\n-                // the interval.\n-                x0 = x1;\n-                f0 = f1;\n-                inverted = !inverted;\n-            } else {\n-                switch (method) {\n+        // Update the bounds with the new approximation.\n+        if (f1 * fx < 0) {\n+            // The value of x1 has switched to the other bound, thus inverting\n+            // the interval.\n+            x0 = x1;\n+            f0 = f1;\n+            inverted = !inverted;\n+        } else {\n+            switch (method) {\n                 case ILLINOIS:\n                     f0 *= 0.5;\n                     break;\n@@ -192,17 +195,17 @@ public abstract class BaseSecantSolver\n                 default:\n                     // Should never happen.\n                     throw new MathInternalError();\n-                }\n             }\n-            // Update from [x0, x1] to [x0, x].\n-            x1 = x;\n-            f1 = fx;\n+        }\n+        // Update from [x0, x1] to [x0, x].\n+        x1 = x;\n+        f1 = fx;\n \n-            // If the function value of the last approximation is too small,\n-            // given the function value accuracy, then we can't get closer to\n-            // the root than we already are.\n-            if (FastMath.abs(f1) <= ftol) {\n-                switch (allowed) {\n+        // If the function value of the last approximation is too small,\n+        // given the function value accuracy, then we can't get closer to\n+        // the root than we already are.\n+        if (FastMath.abs(f1) <= ftol) {\n+            switch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n@@ -227,14 +230,13 @@ public abstract class BaseSecantSolver\n                     break;\n                 default:\n                     throw new MathInternalError();\n-                }\n             }\n+        }\n \n-            // If the current interval is within the given accuracies, we\n-            // are satisfied with the current approximation.\n-            if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n-                                                     atol)) {\n-                switch (allowed) {\n+        // If the current interval is within the given accuracies, we\n+        // are satisfied with the current approximation.\n+        if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {\n+            switch (allowed) {\n                 case ANY_SIDE:\n                     return x1;\n                 case LEFT_SIDE:\n@@ -247,11 +249,25 @@ public abstract class BaseSecantSolver\n                     return (f1 >= 0) ? x1 : x0;\n                 default:\n                     throw new MathInternalError();\n-                }\n             }\n         }\n+\n+        iterations++;\n     }\n \n+    // We've reached the maximum number of allowed iterations, so throw an exception.\n+    throw new TooManyEvaluationsException(getMaxEvaluations() - 2);\n+}\n+\n+private void verifyBracketing(double lo, double hi) throws NumberIsTooLargeException {\n+    // Verify bracketing.\n+    final double fLo = computeObjectiveValue(lo);\n+    final double fHi = computeObjectiveValue(hi);\n+    if (fLo * fHi > 0) {\n+        throw new NumberIsTooLargeException(lo, hi, fLo, fHi);\n+    }\n+}\n+\n     /** <em>Secant</em>-based root-finding methods. */\n     protected enum Method {\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}