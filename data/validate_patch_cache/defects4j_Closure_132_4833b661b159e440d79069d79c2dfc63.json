{
    "patch": "          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n              !mayEffectMutableState(lhs)) {\n            n.removeChild(cond);\n            Node assignName = thenOp.removeFirstChild();\n            Node thenExpr = thenOp.removeFirstChild();\n            Node elseExpr = elseOp.getLastChild();\n            elseOp.removeChild(elseExpr);\n\n            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n                              .srcref(thenOp);\n            Node expr = NodeUtil.newExpr(assign);\n            parent.replaceChild(n, expr);\n            reportCodeChange();\n\n            return expr;\n          }\n        }\n        // if(x)foo();else bar(); -> x?foo():bar()\n        n.removeChild(cond);\n        thenOp.detachFromParent();\n        elseOp.detachFromParent();\n        Node expr = IR.exprResult(\n            IR.hook(cond, thenOp, elseOp).srcref(n));\n        parent.replaceChild(n, expr);\n        reportCodeChange();\n\n        return expr;\n      }\n\n      boolean thenBranchIsVar = isVarBlock(thenBranch);\n      boolean elseBranchIsVar = isVarBlock(elseBranch);\n\n      // if(x)var y=1;else y=2  ->  var y=x?1:2\n      if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n          getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n\n        Node var = getBlockVar(thenBranch);\n        Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n\n      ",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex ae568e8e..c7f60b2e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -779,7 +779,47 @@ class PeepholeSubstituteAlternateSyntax\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n+          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&\n               !mayEffectMutableState(lhs)) {\n+            n.removeChild(cond);\n+            Node assignName = thenOp.removeFirstChild();\n+            Node thenExpr = thenOp.removeFirstChild();\n+            Node elseExpr = elseOp.getLastChild();\n+            elseOp.removeChild(elseExpr);\n+\n+            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);\n+            Node assign = new Node(thenOp.getType(), assignName, hookNode)\n+                              .srcref(thenOp);\n+            Node expr = NodeUtil.newExpr(assign);\n+            parent.replaceChild(n, expr);\n+            reportCodeChange();\n+\n+            return expr;\n+          }\n+        }\n+        // if(x)foo();else bar(); -> x?foo():bar()\n+        n.removeChild(cond);\n+        thenOp.detachFromParent();\n+        elseOp.detachFromParent();\n+        Node expr = IR.exprResult(\n+            IR.hook(cond, thenOp, elseOp).srcref(n));\n+        parent.replaceChild(n, expr);\n+        reportCodeChange();\n+\n+        return expr;\n+      }\n+\n+      boolean thenBranchIsVar = isVarBlock(thenBranch);\n+      boolean elseBranchIsVar = isVarBlock(elseBranch);\n+\n+      // if(x)var y=1;else y=2  ->  var y=x?1:2\n+      if (thenBranchIsVar && elseBranchIsExpressionBlock &&\n+          getBlockExpression(elseBranch).getFirstChild().isAssign()) {\n+\n+        Node var = getBlockVar(thenBranch);\n+        Node elseAssign = getBlockExpression(elseBranch).getFirstChild();\n+\n+      \n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}