{
    "patch": "} else if (actualTypeArgument instanceof TypeVariable) {\n                TypeVariable typeVariable = (TypeVariable) actualTypeArgument;\n                Type resolvedType = contextualActualTypeParameters.get(typeVariable);\n\n                if (resolvedType instanceof TypeVariable) {\n                    // Unbounded type variable. Avoid looping infinitely by\n                    // using the type variable itself as the resolved type.\n                    resolvedType = actualTypeArgument;\n                } else if (resolvedType == null) {\n                    // We didn't have enough context information to resolve this\n                    // variable. Don't put it into the map and let callers try again\n                    // later.\n                    continue;\n                }\n\n                contextualActualTypeParameters.put(typeParameter, resolvedType);\n            } else {\n                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n            }",
    "patch_diff": "diff --git a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\nindex 152e9424e..c15780bd5 100644\n--- a/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n+++ b/src/org/mockito/internal/util/reflection/GenericMetadataSupport.java\n@@ -76,7 +76,25 @@ public abstract class GenericMetadataSupport {\n \n             if (actualTypeArgument instanceof WildcardType) {\n                 contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));\n-            } else {\n+} else if (actualTypeArgument instanceof TypeVariable) {\n+                TypeVariable typeVariable = (TypeVariable) actualTypeArgument;\n+                Type resolvedType = contextualActualTypeParameters.get(typeVariable);\n+\n+                if (resolvedType instanceof TypeVariable) {\n+                    // Unbounded type variable. Avoid looping infinitely by\n+                    // using the type variable itself as the resolved type.\n+                    resolvedType = actualTypeArgument;\n+                } else if (resolvedType == null) {\n+                    // We didn't have enough context information to resolve this\n+                    // variable. Don't put it into the map and let callers try again\n+                    // later.\n+                    continue;\n+                }\n+\n+                contextualActualTypeParameters.put(typeParameter, resolvedType);\n+            } else {\n+                contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n+            }\n                 contextualActualTypeParameters.put(typeParameter, actualTypeArgument);\n             }\n             // logger.log(\"For '\" + parameterizedType + \"' found type variable : { '\" + typeParameter + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' : '\" + actualTypeArgument + \"(\" + System.identityHashCode(typeParameter) + \")\" + \"' }\");",
    "result_reason": "error: class, interface, or enum expected",
    "test_result": "ERROR"
}