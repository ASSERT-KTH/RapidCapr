{
    "patch": "public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n    // Check for null or empty input string\n    if (str == null || str.isEmpty()) {\n        return str;\n    }\n\n    // Handle case where lower is negative\n    lower = Math.max(0, lower);\n\n    // Handle case where upper is negative\n    if (upper < 0) {\n        upper = Integer.MAX_VALUE;\n    }\n\n    // Find the first space after the lower limit\n    int endIndex = str.indexOf(' ', lower);\n\n    // If no space is found, use the upper limit\n    if (endIndex == -1 || endIndex >= upper) {\n        endIndex = upper;\n    }\n\n    // Append appendToEnd if the result isn't the full string\n    if (endIndex < str.length() || appendToEnd != null) {\n        return str.substring(0, endIndex) + StringUtils.defaultString(appendToEnd);\n    }\n\n    // If the result is the full string, return it\n    return str;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang/WordUtils.java b/src/java/org/apache/commons/lang/WordUtils.java\nindex 42bd883e..617e428c 100644\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n@@ -602,43 +602,35 @@ public class WordUtils {\n      * @return the abbreviated String.\n      * @since 2.4\n      */\n-    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n-        // initial parameter checks\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return StringUtils.EMPTY;\n-        }\n+public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+    // Check for null or empty input string\n+    if (str == null || str.isEmpty()) {\n+        return str;\n+    }\n \n-        // if the lower value is greater than the length of the string,\n-        // set to the length of the string\n-        // if the upper value is -1 (i.e. no limit) or is greater\n-        // than the length of the string, set to the length of the string\n-        if (upper == -1 || upper > str.length()) {\n-            upper = str.length();\n-        }\n-        // if upper is less than lower, raise it to lower\n-        if (upper < lower) {\n-            upper = lower;\n-        }\n+    // Handle case where lower is negative\n+    lower = Math.max(0, lower);\n \n-        StringBuffer result = new StringBuffer();\n-        int index = StringUtils.indexOf(str, \" \", lower);\n-        if (index == -1) {\n-            result.append(str.substring(0, upper));\n-            // only if abbreviation has occured do we append the appendToEnd value\n-            if (upper != str.length()) {\n-                result.append(StringUtils.defaultString(appendToEnd));\n-            }\n-        } else if (index > upper) {\n-            result.append(str.substring(0, upper));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        } else {\n-            result.append(str.substring(0, index));\n-            result.append(StringUtils.defaultString(appendToEnd));\n-        }\n-        return result.toString();\n+    // Handle case where upper is negative\n+    if (upper < 0) {\n+        upper = Integer.MAX_VALUE;\n+    }\n+\n+    // Find the first space after the lower limit\n+    int endIndex = str.indexOf(' ', lower);\n+\n+    // If no space is found, use the upper limit\n+    if (endIndex == -1 || endIndex >= upper) {\n+        endIndex = upper;\n     }\n \n+    // Append appendToEnd if the result isn't the full string\n+    if (endIndex < str.length() || appendToEnd != null) {\n+        return str.substring(0, endIndex) + StringUtils.defaultString(appendToEnd);\n+    }\n+\n+    // If the result is the full string, return it\n+    return str;\n+}\n+\n }",
    "result_reason": "junit.framework.ComparisonFailure: expected:<01[234]> but was:<01[]>",
    "test_result": "FAIL"
}