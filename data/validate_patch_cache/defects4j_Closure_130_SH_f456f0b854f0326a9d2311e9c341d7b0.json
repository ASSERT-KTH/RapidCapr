{
    "patch": "      if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets == 0 && name.getDeclaration().getNode() instanceof FunctionNode &&\n          !name.getDeclaration().getRValue().isFunction()) {\n        // Inline the function immediately to save memory.\n        inlineFunctionBody(name.getDeclaration().getNode(), namespace);\n        name.removeDeclaration();\n      } else if (name.globalSets == 0 && !name.isBleedingFunction() &&\n                 name.getRefs().size() > 0 && name.type != Name.Type.EXPORT &&\n                 name.getDeclaration().getNode() instanceof FunctionNode &&\n                 !name.getDeclaration().getRValue().isFunction()) {\n        // Inline inner functions like 'a' in 'function foo() { var a = function() {} }'\n        // These can never bleed to the global scope.\n        inlineFunctionBody(name.getDeclaration().getNode(), namespace);\n        for (Ref ref : Lists.newArrayList(name.getRefs())) {\n          if (ref != name.getDeclaration()) {\n            name.removeRef(ref);\n          }\n        }\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..a49e7a66 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -170,6 +170,24 @@ class CollapseProperties implements CompilerPass {\n       }\n \n       if (name.globalSets == 1 && name.localSets == 0 &&\n+          name.aliasingGets == 0 && name.getDeclaration().getNode() instanceof FunctionNode &&\n+          !name.getDeclaration().getRValue().isFunction()) {\n+        // Inline the function immediately to save memory.\n+        inlineFunctionBody(name.getDeclaration().getNode(), namespace);\n+        name.removeDeclaration();\n+      } else if (name.globalSets == 0 && !name.isBleedingFunction() &&\n+                 name.getRefs().size() > 0 && name.type != Name.Type.EXPORT &&\n+                 name.getDeclaration().getNode() instanceof FunctionNode &&\n+                 !name.getDeclaration().getRValue().isFunction()) {\n+        // Inline inner functions like 'a' in 'function foo() { var a = function() {} }'\n+        // These can never bleed to the global scope.\n+        inlineFunctionBody(name.getDeclaration().getNode(), namespace);\n+        for (Ref ref : Lists.newArrayList(name.getRefs())) {\n+          if (ref != name.getDeclaration()) {\n+            name.removeRef(ref);\n+          }\n+        }\n+      }\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}