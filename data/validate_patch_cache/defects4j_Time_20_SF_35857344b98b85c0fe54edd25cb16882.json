{
    "patch": "public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n    int length = text.length();\n    if (position > length) {\n        return ~position;\n    }\n    String substring = text.substring(position);\n    for (String id : ALL_IDS) {\n        int index = substring.indexOf(id);\n        if (index != -1 && (index == 0 || Character.isWhitespace(substring.charAt(index - 1))) && \n            (index + id.length() == substring.length() || Character.isWhitespace(substring.charAt(index + id.length())) || \n             substring.charAt(index + id.length()) == '/')) {\n            if (index + id.length() == substring.length() || !Character.isLetterOrDigit(substring.charAt(index + id.length()))) {\n                bucket.setZone(DateTimeZone.forID(id));\n                return position + index + id.length();\n            }\n        }\n    }\n    return ~position;\n}\n`",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\nindex 558a5864..2283238b 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n@@ -2537,17 +2537,27 @@ public class DateTimeFormatterBuilder {\n             return MAX_LENGTH;\n         }\n \n-        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n-            String str = text.substring(position);\n-            for (String id : ALL_IDS) {\n-                if (str.startsWith(id)) {\n-                    bucket.setZone(DateTimeZone.forID(id));\n-                    return position + id.length();\n-                }\n+public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+    int length = text.length();\n+    if (position > length) {\n+        return ~position;\n+    }\n+    String substring = text.substring(position);\n+    for (String id : ALL_IDS) {\n+        int index = substring.indexOf(id);\n+        if (index != -1 && (index == 0 || Character.isWhitespace(substring.charAt(index - 1))) && \n+            (index + id.length() == substring.length() || Character.isWhitespace(substring.charAt(index + id.length())) || \n+             substring.charAt(index + id.length()) == '/')) {\n+            if (index + id.length() == substring.length() || !Character.isLetterOrDigit(substring.charAt(index + id.length()))) {\n+                bucket.setZone(DateTimeZone.forID(id));\n+                return position + index + id.length();\n             }\n-            return ~position;\n         }\n     }\n+    return ~position;\n+}\n+`\n+    }\n \n     //-----------------------------------------------------------------------\n     static class Composite",
    "result_reason": "error: illegal character: \\96",
    "test_result": "ERROR"
}