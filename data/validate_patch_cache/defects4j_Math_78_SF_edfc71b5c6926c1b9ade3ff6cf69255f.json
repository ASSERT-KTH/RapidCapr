{
    "patch": "public boolean evaluateStep(final StepInterpolator interpolator)\n        throws DerivativeException, EventException, ConvergenceException {\n\n    try {\n\n        forward = interpolator.isForward();\n        final double t1 = interpolator.getCurrentTime();\n        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n        final double h = (t1 - t0) / n;\n\n        double ta = t0;\n        double ga = g0;\n        double tb = forward ? t0 + convergence : t0 - convergence;\n        boolean bracketFound = false;\n        double gb = Double.NaN;\n\n        for (int i = 0; i < n && !bracketFound; ++i) {\n\n            // evaluate handler value at the end of the substep\n            tb += h;\n            interpolator.setInterpolatedTime(tb);\n            gb = handler.g(tb, interpolator.getInterpolatedState());\n\n            // check events occurrence\n            if (g0Positive ^ (gb >= 0)) {\n                // there is a sign change: an event is expected during this step\n\n                final double hTarget = convergence / (Math.abs(gb - ga) / (tb - ta));\n                if (hTarget <= Math.abs(h * relativeTolerance)) {\n                    // the function seems to converge too slowly for the given accuracy,\n                    // we begin a classical bisection to locate the root\n                    bracketFound = bisection(interpolator, ta, ga, tb, gb);\n                } else {\n                    // we try to use the Brent algorithm to locate the root\n                    double absTol = convergence;\n                    double lower = Double.NaN;\n                    double upper = Double.NaN;\n                    boolean tryBrent;\n                    boolean increasing = gb >= ga;\n                    if (forward) {\n                        if (increasing) {\n                            lower = ta;\n                            upper = tb;\n                            tryBrent = (gb - ga) > 0;\n                        } else {\n                            lower = tb;\n                            upper = ta;\n                            tryBrent = (ga - gb) > 0;\n                        }\n                    } else {\n                        // backward\n                        if (increasing) {\n                            upper = ta;\n                            lower = tb;\n                            tryBrent = (ga - gb) > 0;\n                        } else {\n                            upper = tb;\n                            lower = ta;\n                            tryBrent = (gb - ga) > 0;\n                        }\n                    }\n                    if (!tryBrent) {\n                        // too much risk of division by zero or rounding error, we fall-back to bisection\n                        bracketFound = bisection(interpolator, ta, ga, tb, gb);\n                    } else {\n                        UnivariateSolver solver = new BrentSolver(absTol);\n                        solver.setAbsoluteAccuracy(absTol);\n                        final double root = solver.solve(interpolator.getMaxEvaluations(),\n                                                         new UnivariateFunction() {\n                                                             @Override\n                                                             public double value(final double t) {\n                                                                 try {\n                                                                     interpolator.setInterpolatedTime(t);\n                                                                     return handler.g(t, interpolator.getInterpolatedState());\n                                                                 } catch (DerivativeException e) {\n                                                                     throw new RuntimeException(e);\n                                                                 }\n                                                             }\n                                                         },\n                                                         lower,\n                                                         upper,\n                                                         increasing);\n                        pendingEventTime = root;\n                        if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                            // we were already waiting for this event which was\n                            // found during a previous call for a step that was\n                            // rejected, this step must now be accepted since it\n                            // properly ends exactly at the event occurrence\n                            return false;\n                        }\n                        // either we were not waiting for the event or it has\n                        // moved in such a way the step cannot be accepted\n                        pendingEvent = true;\n                        return true;\n                    }\n                }\n            } else {\n                // no sign change: there is no event for now\n                ta = tb;\n                ga = gb;\n            }\n        }\n\n        // no event during the whole step\n        pendingEvent     = false;\n        pendingEventTime = Double.NaN;\n        return false;\n\n    } catch (FunctionEvaluationException e) {\n        final Throwable cause = e.getCause();\n        if ((cause != null) && (cause instanceof DerivativeException)) {\n            throw (DerivativeException) cause;\n        } else if ((cause != null) && (cause instanceof EventException)) {\n            throw (EventException) cause;\n        }\n        throw new EventException(e);\n    }\n\n}\n\nprivate boolean bisection(StepInterpolator interpolator, double ta, double ga, double tb, double gb)\n        throws FunctionEvaluationException, EventException, ExplicitEulerIntegrator.ExplicitEulerIntegratorException {\n\n    double previousMidPoint = Double.NEGATIVE_INFINITY;\n\n    while (true) {\n        final double midPoint = 0.5 * (ta + tb);\n        if ((midPoint == previousMidPoint) || (midPoint == ta) || (midPoint == tb)) {\n            throw new EventException(LocalizedFormats.EVENT_LOCATION_FAILED,\n                                     handler.getMaxEvaluations(),\n                                     convergence);\n        }\n        previousMidPoint = midPoint;\n\n        // evaluate handler value at the midpoint\n        interpolator.setInterpolatedTime(midPoint);\n        final double gm = handler.g(midPoint, interpolator.getInterpolatedState());\n\n        if (g0Positive ^ (gm >= 0)) {\n            // the sign of gm is the opposite of the sign of gl\n            tb = midPoint;\n            gb = gm;\n        } else {\n            // the sign of gm is the same of the sign of gl\n            ta = midPoint;\n            ga = gm;\n        }\n\n        // test for convergence\n        if (Math.abs(tb - ta) <= convergence) {\n            pendingEventTime = tb;\n            if (pendingEvent && (Math.abs(interpolator.getCurrentTime() - pendingEventTime) <= convergence)) {\n                // we were already waiting for this event which was\n                // found during a previous call for a step that was\n                // rejected, this step must now be accepted since it\n                // properly ends exactly at the event occurrence\n                return false;\n            }\n            // either we were not waiting for the event or it has\n            // moved in such a way the step cannot be accepted\n            pendingEvent = true;\n            return true;\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/ode/events/EventState.java b/src/main/java/org/apache/commons/math/ode/events/EventState.java\nindex 50060650e..cd21569ba 100644\n--- a/src/main/java/org/apache/commons/math/ode/events/EventState.java\n+++ b/src/main/java/org/apache/commons/math/ode/events/EventState.java\n@@ -164,65 +164,88 @@ public class EventState {\n      * cannot be evaluated\n      * @exception ConvergenceException if an event cannot be located\n      */\n-    public boolean evaluateStep(final StepInterpolator interpolator)\n+public boolean evaluateStep(final StepInterpolator interpolator)\n         throws DerivativeException, EventException, ConvergenceException {\n \n-        try {\n-\n-            forward = interpolator.isForward();\n-            final double t1 = interpolator.getCurrentTime();\n-            final int    n  = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n-            final double h  = (t1 - t0) / n;\n-\n-            double ta = t0;\n-            double ga = g0;\n-            double tb = t0 + (interpolator.isForward() ? convergence : -convergence);\n-            for (int i = 0; i < n; ++i) {\n-\n-                // evaluate handler value at the end of the substep\n-                tb += h;\n-                interpolator.setInterpolatedTime(tb);\n-                final double gb = handler.g(tb, interpolator.getInterpolatedState());\n-\n-                // check events occurrence\n-                if (g0Positive ^ (gb >= 0)) {\n-                    // there is a sign change: an event is expected during this step\n-\n-                        // this is a corner case:\n-                        // - there was an event near ta,\n-                        // - there is another event between ta and tb\n-                        // - when ta was computed, convergence was reached on the \"wrong side\" of the interval\n-                        // this implies that the real sign of ga is the same as gb, so we need to slightly\n-                        // shift ta to make sure ga and gb get opposite signs and the solver won't complain\n-                        // about bracketing\n-                            // this should never happen\n-                         \n-                    // variation direction, with respect to the integration direction\n-                    increasing = gb >= ga;\n-\n-                    final UnivariateRealFunction f = new UnivariateRealFunction() {\n-                        public double value(final double t) throws FunctionEvaluationException {\n-                            try {\n-                                interpolator.setInterpolatedTime(t);\n-                                return handler.g(t, interpolator.getInterpolatedState());\n-                            } catch (DerivativeException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            } catch (EventException e) {\n-                                throw new FunctionEvaluationException(e, t);\n-                            }\n+    try {\n+\n+        forward = interpolator.isForward();\n+        final double t1 = interpolator.getCurrentTime();\n+        final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));\n+        final double h = (t1 - t0) / n;\n+\n+        double ta = t0;\n+        double ga = g0;\n+        double tb = forward ? t0 + convergence : t0 - convergence;\n+        boolean bracketFound = false;\n+        double gb = Double.NaN;\n+\n+        for (int i = 0; i < n && !bracketFound; ++i) {\n+\n+            // evaluate handler value at the end of the substep\n+            tb += h;\n+            interpolator.setInterpolatedTime(tb);\n+            gb = handler.g(tb, interpolator.getInterpolatedState());\n+\n+            // check events occurrence\n+            if (g0Positive ^ (gb >= 0)) {\n+                // there is a sign change: an event is expected during this step\n+\n+                final double hTarget = convergence / (Math.abs(gb - ga) / (tb - ta));\n+                if (hTarget <= Math.abs(h * relativeTolerance)) {\n+                    // the function seems to converge too slowly for the given accuracy,\n+                    // we begin a classical bisection to locate the root\n+                    bracketFound = bisection(interpolator, ta, ga, tb, gb);\n+                } else {\n+                    // we try to use the Brent algorithm to locate the root\n+                    double absTol = convergence;\n+                    double lower = Double.NaN;\n+                    double upper = Double.NaN;\n+                    boolean tryBrent;\n+                    boolean increasing = gb >= ga;\n+                    if (forward) {\n+                        if (increasing) {\n+                            lower = ta;\n+                            upper = tb;\n+                            tryBrent = (gb - ga) > 0;\n+                        } else {\n+                            lower = tb;\n+                            upper = ta;\n+                            tryBrent = (ga - gb) > 0;\n                         }\n-                    };\n-                    final BrentSolver solver = new BrentSolver();\n-                    solver.setAbsoluteAccuracy(convergence);\n-                    solver.setMaximalIterationCount(maxIterationCount);\n-                    final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);\n-                    if ((Math.abs(root - ta) <= convergence) &&\n-                         (Math.abs(root - previousEventTime) <= convergence)) {\n-                        // we have either found nothing or found (again ?) a past event, we simply ignore it\n-                        ta = tb;\n-                        ga = gb;\n-                    } else if (Double.isNaN(previousEventTime) ||\n-                               (Math.abs(previousEventTime - root) > convergence)) {\n+                    } else {\n+                        // backward\n+                        if (increasing) {\n+                            upper = ta;\n+                            lower = tb;\n+                            tryBrent = (ga - gb) > 0;\n+                        } else {\n+                            upper = tb;\n+                            lower = ta;\n+                            tryBrent = (gb - ga) > 0;\n+                        }\n+                    }\n+                    if (!tryBrent) {\n+                        // too much risk of division by zero or rounding error, we fall-back to bisection\n+                        bracketFound = bisection(interpolator, ta, ga, tb, gb);\n+                    } else {\n+                        UnivariateSolver solver = new BrentSolver(absTol);\n+                        solver.setAbsoluteAccuracy(absTol);\n+                        final double root = solver.solve(interpolator.getMaxEvaluations(),\n+                                                         new UnivariateFunction() {\n+                                                             @Override\n+                                                             public double value(final double t) {\n+                                                                 try {\n+                                                                     interpolator.setInterpolatedTime(t);\n+                                                                     return handler.g(t, interpolator.getInterpolatedState());\n+                                                                 } catch (DerivativeException e) {\n+                                                                     throw new RuntimeException(e);\n+                                                                 }\n+                                                             }\n+                                                         },\n+                                                         lower,\n+                                                         upper,\n+                                                         increasing);\n                         pendingEventTime = root;\n                         if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {\n                             // we were already waiting for this event which was\n@@ -236,31 +259,76 @@ public class EventState {\n                         pendingEvent = true;\n                         return true;\n                     }\n-\n-                } else {\n-                    // no sign change: there is no event for now\n-                    ta = tb;\n-                    ga = gb;\n                 }\n-\n+            } else {\n+                // no sign change: there is no event for now\n+                ta = tb;\n+                ga = gb;\n             }\n+        }\n \n-            // no event during the whole step\n-            pendingEvent     = false;\n-            pendingEventTime = Double.NaN;\n-            return false;\n+        // no event during the whole step\n+        pendingEvent     = false;\n+        pendingEventTime = Double.NaN;\n+        return false;\n+\n+    } catch (FunctionEvaluationException e) {\n+        final Throwable cause = e.getCause();\n+        if ((cause != null) && (cause instanceof DerivativeException)) {\n+            throw (DerivativeException) cause;\n+        } else if ((cause != null) && (cause instanceof EventException)) {\n+            throw (EventException) cause;\n+        }\n+        throw new EventException(e);\n+    }\n \n-        } catch (FunctionEvaluationException e) {\n-            final Throwable cause = e.getCause();\n-            if ((cause != null) && (cause instanceof DerivativeException)) {\n-                throw (DerivativeException) cause;\n-            } else if ((cause != null) && (cause instanceof EventException)) {\n-                throw (EventException) cause;\n-            }\n-            throw new EventException(e);\n+}\n+\n+private boolean bisection(StepInterpolator interpolator, double ta, double ga, double tb, double gb)\n+        throws FunctionEvaluationException, EventException, ExplicitEulerIntegrator.ExplicitEulerIntegratorException {\n+\n+    double previousMidPoint = Double.NEGATIVE_INFINITY;\n+\n+    while (true) {\n+        final double midPoint = 0.5 * (ta + tb);\n+        if ((midPoint == previousMidPoint) || (midPoint == ta) || (midPoint == tb)) {\n+            throw new EventException(LocalizedFormats.EVENT_LOCATION_FAILED,\n+                                     handler.getMaxEvaluations(),\n+                                     convergence);\n         }\n+        previousMidPoint = midPoint;\n \n+        // evaluate handler value at the midpoint\n+        interpolator.setInterpolatedTime(midPoint);\n+        final double gm = handler.g(midPoint, interpolator.getInterpolatedState());\n+\n+        if (g0Positive ^ (gm >= 0)) {\n+            // the sign of gm is the opposite of the sign of gl\n+            tb = midPoint;\n+            gb = gm;\n+        } else {\n+            // the sign of gm is the same of the sign of gl\n+            ta = midPoint;\n+            ga = gm;\n+        }\n+\n+        // test for convergence\n+        if (Math.abs(tb - ta) <= convergence) {\n+            pendingEventTime = tb;\n+            if (pendingEvent && (Math.abs(interpolator.getCurrentTime() - pendingEventTime) <= convergence)) {\n+                // we were already waiting for this event which was\n+                // found during a previous call for a step that was\n+                // rejected, this step must now be accepted since it\n+                // properly ends exactly at the event occurrence\n+                return false;\n+            }\n+            // either we were not waiting for the event or it has\n+            // moved in such a way the step cannot be accepted\n+            pendingEvent = true;\n+            return true;\n+        }\n     }\n+}\n \n     /** Get the occurrence time of the event triggered in the current\n      * step.",
    "result_reason": "error: package ExplicitEulerIntegrator does not exist",
    "test_result": "ERROR"
}