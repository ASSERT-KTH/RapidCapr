{
    "patch": "public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset, final double[] result,\n                  final int resultOffset) {\n    // compute r = sqrt(x^2+y^2)\n    double[] tmp1 = new double[getSize()];\n    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n    double[] tmp2 = new double[getSize()];\n    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n\n    if (x[xOffset] >= 0) {\n        // compute atan2(y, x) = 2 atan(y / (r + x))\n        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n        for (int i = 0; i < tmp2.length; ++i) {\n            result[resultOffset + i] = 2.0 * tmp2[i]; // 2 * atan(y / (r + x))\n        }\n    } else {\n        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n\n        // Check for special cases first\n        if (FastMath.abs(x[xOffset]) == 0.0 && FastMath.abs(y[yOffset]) == 0.0) {\n            // +0/+0\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = 0.0;\n            }\n            return;\n        } else if (FastMath.abs(x[xOffset]) == 0.0 && y[yOffset] > 0.0) {\n            // +0/+y\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.PI / 2.0;\n            }\n            return;\n        } else if (FastMath.abs(x[xOffset]) == 0.0 && y[yOffset] < 0.0) {\n            // +0/-y\n            for (int i = 0; i < result.length; ++i) {\n                result[resultOffset + i] = -FastMath.PI / 2.0;\n            }\n            return;\n        } else if (FastMath.abs(x[xOffset]) > 0.0 && FastMath.abs(y[yOffset]) == 0.0) {\n            // +/-x/+0\n            result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.copySign(0.0, x[xOffset]);\n            }\n            return;\n        } else if (FastMath.abs(x[xOffset]) < Double.POSITIVE_INFINITY &&\n                FastMath.abs(y[yOffset]) == Double.POSITIVE_INFINITY) {\n            // +/-x/infinity\n            result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.copySign(FastMath.PI, y[yOffset]);\n            }\n            return;\n        } else if (FastMath.abs(x[xOffset]) == Double.POSITIVE_INFINITY &&\n                FastMath.abs(y[yOffset]) <= Double.POSITIVE_INFINITY) {\n            // +/-infinity/finite\n            result[resultOffset] = FastMath.copySign(FastMath.PI / 2.0, y[yOffset]);\n            for (int i = 1; i < result.length; ++i) {\n                result[resultOffset + i] = FastMath.copySign(FastMath.PI / 2.0, y[yOffset]);\n            }\n            return;\n        }\n\n        subtract(x, xOffset, tmp1, 0, tmp2, 0);     // x - r\n        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(x - r)\n        // Special case of tmp2[0] = NaN is handled properly now\n        atan(tmp1, 0, tmp2, 0);                     // atan(y / (x - r))\n\n        // Compute result\n        result[resultOffset] =\n                ((y[yOffset] < 0) ? -FastMath.PI : FastMath.PI) - 2.0 * tmp2[0]; // +/-pi - 2 * atan(y / (x - r))\n        for (int i = 1; i < tmp2.length; ++i) {\n            result[resultOffset + i] = -2.0 * tmp2[i]; // +/-pi - 2 * atan(y / (x - r))\n        }\n    }\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\nindex bf6dd65d5..94732cef0 100644\n--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java\n@@ -1379,45 +1379,84 @@ public class DSCompiler {\n      * be the input array)\n      * @param resultOffset offset of the result in its array\n      */\n-    public void atan2(final double[] y, final int yOffset,\n-                      final double[] x, final int xOffset,\n-                      final double[] result, final int resultOffset) {\n-\n-        // compute r = sqrt(x^2+y^2)\n-        double[] tmp1 = new double[getSize()];\n-        multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n-        double[] tmp2 = new double[getSize()];\n-        multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n-        add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n-        rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n-\n-        if (x[xOffset] >= 0) {\n-\n-            // compute atan2(y, x) = 2 atan(y / (r + x))\n-            add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n-            for (int i = 0; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))\n+public void atan2(final double[] y, final int yOffset, final double[] x, final int xOffset, final double[] result,\n+                  final int resultOffset) {\n+    // compute r = sqrt(x^2+y^2)\n+    double[] tmp1 = new double[getSize()];\n+    multiply(x, xOffset, x, xOffset, tmp1, 0);      // x^2\n+    double[] tmp2 = new double[getSize()];\n+    multiply(y, yOffset, y, yOffset, tmp2, 0);      // y^2\n+    add(tmp1, 0, tmp2, 0, tmp2, 0);                 // x^2 + y^2\n+    rootN(tmp2, 0, 2, tmp1, 0);                     // r = sqrt(x^2 + y^2)\n+\n+    if (x[xOffset] >= 0) {\n+        // compute atan2(y, x) = 2 atan(y / (r + x))\n+        add(tmp1, 0, x, xOffset, tmp2, 0);          // r + x\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r + x)\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (r + x))\n+        for (int i = 0; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = 2.0 * tmp2[i]; // 2 * atan(y / (r + x))\n+        }\n+    } else {\n+        // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n+\n+        // Check for special cases first\n+        if (FastMath.abs(x[xOffset]) == 0.0 && FastMath.abs(y[yOffset]) == 0.0) {\n+            // +0/+0\n+            for (int i = 0; i < result.length; ++i) {\n+                result[resultOffset + i] = 0.0;\n             }\n-\n-        } else {\n-\n-            // compute atan2(y, x) = +/- pi - 2 atan(y / (r - x))\n-            subtract(tmp1, 0, x, xOffset, tmp2, 0);     // r - x\n-            divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(r - x)\n-            atan(tmp1, 0, tmp2, 0);                     // atan(y / (r - x))\n-            result[resultOffset] =\n-                    ((tmp2[0] <= 0) ? -FastMath.PI : FastMath.PI) - 2 * tmp2[0]; // +/-pi - 2 * atan(y / (r - x))\n-            for (int i = 1; i < tmp2.length; ++i) {\n-                result[resultOffset + i] = -2 * tmp2[i]; // +/-pi - 2 * atan(y / (r - x))\n+            return;\n+        } else if (FastMath.abs(x[xOffset]) == 0.0 && y[yOffset] > 0.0) {\n+            // +0/+y\n+            for (int i = 0; i < result.length; ++i) {\n+                result[resultOffset + i] = FastMath.PI / 2.0;\n             }\n-\n+            return;\n+        } else if (FastMath.abs(x[xOffset]) == 0.0 && y[yOffset] < 0.0) {\n+            // +0/-y\n+            for (int i = 0; i < result.length; ++i) {\n+                result[resultOffset + i] = -FastMath.PI / 2.0;\n+            }\n+            return;\n+        } else if (FastMath.abs(x[xOffset]) > 0.0 && FastMath.abs(y[yOffset]) == 0.0) {\n+            // +/-x/+0\n+            result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n+            for (int i = 1; i < result.length; ++i) {\n+                result[resultOffset + i] = FastMath.copySign(0.0, x[xOffset]);\n+            }\n+            return;\n+        } else if (FastMath.abs(x[xOffset]) < Double.POSITIVE_INFINITY &&\n+                FastMath.abs(y[yOffset]) == Double.POSITIVE_INFINITY) {\n+            // +/-x/infinity\n+            result[resultOffset] = FastMath.copySign(0.0, x[xOffset]);\n+            for (int i = 1; i < result.length; ++i) {\n+                result[resultOffset + i] = FastMath.copySign(FastMath.PI, y[yOffset]);\n+            }\n+            return;\n+        } else if (FastMath.abs(x[xOffset]) == Double.POSITIVE_INFINITY &&\n+                FastMath.abs(y[yOffset]) <= Double.POSITIVE_INFINITY) {\n+            // +/-infinity/finite\n+            result[resultOffset] = FastMath.copySign(FastMath.PI / 2.0, y[yOffset]);\n+            for (int i = 1; i < result.length; ++i) {\n+                result[resultOffset + i] = FastMath.copySign(FastMath.PI / 2.0, y[yOffset]);\n+            }\n+            return;\n         }\n \n-        // fix value to take special cases (+0/+0, +0/-0, -0/+0, -0/-0, +/-infinity) correctly\n+        subtract(x, xOffset, tmp1, 0, tmp2, 0);     // x - r\n+        divide(y, yOffset, tmp2, 0, tmp1, 0);       // y /(x - r)\n+        // Special case of tmp2[0] = NaN is handled properly now\n+        atan(tmp1, 0, tmp2, 0);                     // atan(y / (x - r))\n \n+        // Compute result\n+        result[resultOffset] =\n+                ((y[yOffset] < 0) ? -FastMath.PI : FastMath.PI) - 2.0 * tmp2[0]; // +/-pi - 2 * atan(y / (x - r))\n+        for (int i = 1; i < tmp2.length; ++i) {\n+            result[resultOffset + i] = -2.0 * tmp2[i]; // +/-pi - 2 * atan(y / (x - r))\n+        }\n     }\n+}\n \n     /** Compute hyperbolic cosine of a derivative structure.\n      * @param operand array holding the operand",
    "result_reason": "junit.framework.AssertionFailedError: expected:<0.0> but was:<NaN>",
    "test_result": "FAIL"
}