{
    "patch": "public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n\n    // rescale both vectors without losing precision,\n    // to ensure their norm are the same order of magnitude\n    final double norm1 = v1.getNorm();\n    final double norm2 = v2.getNorm();\n    if (norm1 == 0 || norm2 == 0) {\n        throw new ZeroException(LocalizedFormats.ZERO_NORM);\n    }\n\n    final double max = FastMath.max(FastMath.abs(v1.getX()), FastMath.max(FastMath.abs(v1.getY()), FastMath.abs(v1.getZ())));\n    final double factor1 = max / norm1;\n    final double x1 = v1.getX() * factor1;\n    final double y1 = v1.getY() * factor1;\n    final double z1 = v1.getZ() * factor1;\n\n    final double max2 = FastMath.max(FastMath.abs(v2.getX()), FastMath.max(FastMath.abs(v2.getY()), FastMath.abs(v2.getZ())));\n    final double factor2 = max2 / norm2;\n    final double x2 = v2.getX() * factor2;\n    final double y2 = v2.getY() * factor2;\n    final double z2 = v2.getZ() * factor2;\n\n    // compute cross product from v1 and v2\n    final double rx = y1 * z2 - z1 * y2;\n    final double ry = z1 * x2 - x1 * z2;\n    final double rz = x1 * y2 - y1 * x2;\n\n    return new Vector3D(rx, ry, rz).normalize();\n}",
    "patch_diff": "diff --git a/src/main/java/org/apache/commons/math/geometry/Vector3D.java b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\nindex 3c741e9e2..f9620eb06 100644\n--- a/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n+++ b/src/main/java/org/apache/commons/math/geometry/Vector3D.java\n@@ -454,25 +454,35 @@ public class Vector3D implements Serializable {\n    * @param v2 second vector\n    * @return the cross product v1 ^ v2 as a new Vector\n    */\n-  public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n-\n-\n-      // rescale both vectors without losing precision,\n-      // to ensure their norm are the same order of magnitude\n-\n-      // we reduce cancellation errors by preconditioning,\n-      // we replace v1 by v3 = v1 - rho v2 with rho chosen in order to compute\n-      // v3 without loss of precision. See Kahan lecture\n-      // \"Computing Cross-Products and Rotations in 2- and 3-Dimensional Euclidean Spaces\"\n-      // available at http://www.cs.berkeley.edu/~wkahan/MathH110/Cross.pdf\n+public static Vector3D crossProduct(final Vector3D v1, final Vector3D v2) {\n+\n+    // rescale both vectors without losing precision,\n+    // to ensure their norm are the same order of magnitude\n+    final double norm1 = v1.getNorm();\n+    final double norm2 = v2.getNorm();\n+    if (norm1 == 0 || norm2 == 0) {\n+        throw new ZeroException(LocalizedFormats.ZERO_NORM);\n+    }\n \n-      // compute rho as an 8 bits approximation of v1.v2 / v2.v2\n+    final double max = FastMath.max(FastMath.abs(v1.getX()), FastMath.max(FastMath.abs(v1.getY()), FastMath.abs(v1.getZ())));\n+    final double factor1 = max / norm1;\n+    final double x1 = v1.getX() * factor1;\n+    final double y1 = v1.getY() * factor1;\n+    final double z1 = v1.getZ() * factor1;\n \n+    final double max2 = FastMath.max(FastMath.abs(v2.getX()), FastMath.max(FastMath.abs(v2.getY()), FastMath.abs(v2.getZ())));\n+    final double factor2 = max2 / norm2;\n+    final double x2 = v2.getX() * factor2;\n+    final double y2 = v2.getY() * factor2;\n+    final double z2 = v2.getZ() * factor2;\n \n-      // compute cross product from v3 and v2 instead of v1 and v2\n-      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n+    // compute cross product from v1 and v2\n+    final double rx = y1 * z2 - z1 * y2;\n+    final double ry = z1 * x2 - x1 * z2;\n+    final double rz = x1 * y2 - y1 * x2;\n \n-  }\n+    return new Vector3D(rx, ry, rz).normalize();\n+}\n \n   /** Compute the distance between two vectors according to the L<sub>1</sub> norm.\n    * <p>Calling this method is equivalent to calling:",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}