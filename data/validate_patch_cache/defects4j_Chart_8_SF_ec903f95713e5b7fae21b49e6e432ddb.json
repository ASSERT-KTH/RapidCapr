{
    "patch": "public Week(Date time, TimeZone zone) {\n    Calendar cal = Calendar.getInstance(zone);\n    cal.setTime(time);\n    cal.setFirstDayOfWeek(Calendar.MONDAY);\n    int weekNum = cal.get(Calendar.WEEK_OF_YEAR);\n    // handle case of last week of previous year\n    if (weekNum == 1 && cal.get(Calendar.MONTH) == Calendar.DECEMBER) {\n        weekNum = 52;\n    }\n    super(RegularTimePeriod.DEFAULT_TIME_ZONE, new Week(WeekConstants.DEFAULT_FIRST_WEEK_OF_YEAR, weekNum), Locale.getDefault());\n}",
    "patch_diff": "diff --git a/source/org/jfree/data/time/Week.java b/source/org/jfree/data/time/Week.java\nindex 3cc4138..08804f3 100644\n--- a/source/org/jfree/data/time/Week.java\n+++ b/source/org/jfree/data/time/Week.java\n@@ -170,10 +170,17 @@ public class Week extends RegularTimePeriod implements Serializable {\n      *\n      * @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.\n      */\n-    public Week(Date time, TimeZone zone) {\n-        // defer argument checking...\n-        this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n-    }\n+public Week(Date time, TimeZone zone) {\n+    Calendar cal = Calendar.getInstance(zone);\n+    cal.setTime(time);\n+    cal.setFirstDayOfWeek(Calendar.MONDAY);\n+    int weekNum = cal.get(Calendar.WEEK_OF_YEAR);\n+    // handle case of last week of previous year\n+    if (weekNum == 1 && cal.get(Calendar.MONTH) == Calendar.DECEMBER) {\n+        weekNum = 52;\n+    }\n+    super(RegularTimePeriod.DEFAULT_TIME_ZONE, new Week(WeekConstants.DEFAULT_FIRST_WEEK_OF_YEAR, weekNum), Locale.getDefault());\n+}\n \n     /**\n      * Creates a time period for the week in which the specified date/time",
    "result_reason": "error: call to super must be first statement in constructor",
    "test_result": "ERROR"
}