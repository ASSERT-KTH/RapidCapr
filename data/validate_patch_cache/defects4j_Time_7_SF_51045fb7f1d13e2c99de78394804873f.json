{
    "patch": "    public int parseInto(ReadWritableInstant instant, String text, int position) {\n        DateTimeParser parser = requireParser();\n        if (instant == null) {\n            throw new IllegalArgumentException(\"Instant must not be null\");\n        }\n\n        long instantMillis = instant.getMillis();\n        Chronology chrono = instant.getChronology();\n        chrono = selectChronology(chrono);\n\n        // Set default year\n        int defaultYear;\n        if (chrono instanceof BasicChronology) {\n            // Use a year with same leap year as instant\n            defaultYear = ((BasicChronology) chrono).getYear(instantMillis);\n        } else {\n            defaultYear = chrono.year().get(instantMillis);\n        }\n\n        // Create bucket with default year\n        DateTimeParserBucket bucket = new DateTimeParserBucket(\n                instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n        int newPos = parser.parseInto(bucket, text, position);\n\n        // Try to output parsed instant\n        instant.setMillis(bucket.computeMillis(false, text));\n        if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n            // Adjust chronology to match given time zone offset\n            int parsedOffset = bucket.getOffsetInteger();\n            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n            chrono = chrono.withZone(parsedZone);\n        } else if (bucket.getZone() != null) {\n            // Use time zone from parsed text\n            chrono = chrono.withZone(bucket.getZone());\n        }\n\n        // Update instant with adjusted chronology\n        instant.setChronology(chrono);\n        if (iZone != null) {\n            instant.setZone(iZone);\n        }\n\n        return newPos;\n    }",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex 447674a2..4fd9c436 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -702,28 +702,43 @@ public class DateTimeFormatter {\n         if (instant == null) {\n             throw new IllegalArgumentException(\"Instant must not be null\");\n         }\n-        \n+\n         long instantMillis = instant.getMillis();\n         Chronology chrono = instant.getChronology();\n-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);\n         chrono = selectChronology(chrono);\n-        int defaultYear = chrono.year().get(instantLocal);\n-        \n+\n+        // Set default year\n+        int defaultYear;\n+        if (chrono instanceof BasicChronology) {\n+            // Use a year with same leap year as instant\n+            defaultYear = ((BasicChronology) chrono).getYear(instantMillis);\n+        } else {\n+            defaultYear = chrono.year().get(instantMillis);\n+        }\n+\n+        // Create bucket with default year\n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);\n+                instantMillis, chrono, iLocale, iPivotYear, defaultYear);\n         int newPos = parser.parseInto(bucket, text, position);\n+\n+        // Try to output parsed instant\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {\n+            // Adjust chronology to match given time zone offset\n             int parsedOffset = bucket.getOffsetInteger();\n             DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);\n             chrono = chrono.withZone(parsedZone);\n         } else if (bucket.getZone() != null) {\n+            // Use time zone from parsed text\n             chrono = chrono.withZone(bucket.getZone());\n         }\n+\n+        // Update instant with adjusted chronology\n         instant.setChronology(chrono);\n         if (iZone != null) {\n             instant.setZone(iZone);\n         }\n+\n         return newPos;\n     }\n ",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}