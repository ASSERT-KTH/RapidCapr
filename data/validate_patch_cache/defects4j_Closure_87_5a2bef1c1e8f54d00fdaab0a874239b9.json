{
    "patch": "import com.google.javascript.rhino.*;\nimport com.google.javascript.jscomp.graph.DiGraphEdge;\nimport com.google.javascript.jscomp.graph.DiGraphEdge.Branch;\nimport com.google.javascript.jscomp.graph.DiGraph;\nimport com.google.javascript.jscomp.NodeUtil;\n\nprivate boolean isFoldableExpressBlock(Node n) {\n  if (n.getType() == Token.BLOCK) {\n    if (n.hasOneChild()) {\n      Node maybeExpr = n.getFirstFirstChild();\n      if (maybeExpr != null && NodeUtil.isExpressionNode(maybeExpr)) {\n        if (TokenStream.isAssignmentOp(maybeExpr.getType()) ||\n            maybeExpr.getType() == Token.HOOK ||\n            maybeExpr.getType() == Token.CALL_NEW) {\n          return false;\n        }\n\n        // IE has a bug where event handlers behave differently when\n        // their return value is used vs. when their return value is in\n        // an EXPR_RESULT. It's pretty freaking weird. See:\n        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n        // We try to detect this case, and not fold EXPR_RESULTs\n        // into other expressions.\n        if (maybeExpr.isCall() && NodeUtil.isGet(maybeExpr.getFirstChild())) {\n          Node propNode = maybeExpr.getFirstFirstChild().getNext();\n          String propString = propNode.getString();\n          // Empty STRING nodes often appear in IE, but only IE cares about it.\n          if (\"event\".equals(propString) || \"Event\".equals(propString) ||\n              (propNode.getType() == Token.STRING && propString.isEmpty())) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\nindex 9498fa6e..b0be57db 100644\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n@@ -516,26 +516,44 @@ public class PeepholeSubstituteAlternateSyntax\n    * @return Whether the node is a block with a single statement that is\n    *     an expression.\n    */\n-  private boolean isFoldableExpressBlock(Node n) {\n-    if (n.getType() == Token.BLOCK) {\n-      if (n.hasOneChild()) {\n-        Node maybeExpr = n.getFirstChild();\n-          // IE has a bug where event handlers behave differently when\n-          // their return value is used vs. when their return value is in\n-          // an EXPR_RESULT. It's pretty freaking weird. See:\n-          // http://code.google.com/p/closure-compiler/issues/detail?id=291\n-          // We try to detect this case, and not fold EXPR_RESULTs\n-          // into other expressions.\n-\n-            // We only have to worry about methods with an implicit 'this'\n-            // param, or this doesn't happen.\n-\n-          return NodeUtil.isExpressionNode(maybeExpr);\n+import com.google.javascript.rhino.*;\n+import com.google.javascript.jscomp.graph.DiGraphEdge;\n+import com.google.javascript.jscomp.graph.DiGraphEdge.Branch;\n+import com.google.javascript.jscomp.graph.DiGraph;\n+import com.google.javascript.jscomp.NodeUtil;\n+\n+private boolean isFoldableExpressBlock(Node n) {\n+  if (n.getType() == Token.BLOCK) {\n+    if (n.hasOneChild()) {\n+      Node maybeExpr = n.getFirstFirstChild();\n+      if (maybeExpr != null && NodeUtil.isExpressionNode(maybeExpr)) {\n+        if (TokenStream.isAssignmentOp(maybeExpr.getType()) ||\n+            maybeExpr.getType() == Token.HOOK ||\n+            maybeExpr.getType() == Token.CALL_NEW) {\n+          return false;\n+        }\n+\n+        // IE has a bug where event handlers behave differently when\n+        // their return value is used vs. when their return value is in\n+        // an EXPR_RESULT. It's pretty freaking weird. See:\n+        // http://code.google.com/p/closure-compiler/issues/detail?id=291\n+        // We try to detect this case, and not fold EXPR_RESULTs\n+        // into other expressions.\n+        if (maybeExpr.isCall() && NodeUtil.isGet(maybeExpr.getFirstChild())) {\n+          Node propNode = maybeExpr.getFirstFirstChild().getNext();\n+          String propString = propNode.getString();\n+          // Empty STRING nodes often appear in IE, but only IE cares about it.\n+          if (\"event\".equals(propString) || \"Event\".equals(propString) ||\n+              (propNode.getType() == Token.STRING && propString.isEmpty())) {\n+            return false;\n+          }\n+        }\n+        return true;\n       }\n     }\n-\n-    return false;\n   }\n+  return false;\n+}\n \n   /**\n    * @return The expression node.",
    "result_reason": "error: illegal start of type",
    "test_result": "ERROR"
}