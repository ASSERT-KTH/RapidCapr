{
    "patch": "public static class MockMethodInterceptor implements Serializable, ByteBuddyInterceptor, MockAccess {\n\n    private static final long serialVersionUID = 5244828452998851653L;\n\n    private final InternalMockHandler handler;\n    private final MockCreationSettings<?> settings;\n\n    private final AtomicBoolean stubInfoPrinted = new AtomicBoolean();\n\n    public MockMethodInterceptor(\n            InternalMockHandler handler,\n            MockCreationSettings<?> settings) {\n        this.handler = handler;\n        this.settings = settings;\n    }\n\n    @Override\n    public Object intercept(Object proxy, Method method, Object[] args, ByteBuddyInterceptorContext context) throws Throwable {\n        if (\"finalize\".equals(method.getName())) {\n            return null; // This is to avoid a warning message since Object#finalize is deprecated\n        }\n\n        Invocation invocation = MockitoMethodInvocationControl.createInvocation(proxy, method, args, context);\n        if (new ObjectTypeValidator(settings.isSerializable()).shouldMockClass(invocation.getMockitoMethod().getMockableType())) {\n            return invocation.callRealMethod();\n        }\n        if (stubInfoPrinted.compareAndSet(false, true) && settings.isWarmCode()) {\n            // Printing the stubbinginfo with the assumption that all stubbings are being added from the same thread\n            System.err.println(new MockUtil().getMockSettings(invocation.getMock()).printStubbings());\n        }\n        return ((InternalMockHandler) handler).handle(invocation);\n    }\n\n    @Override\n    public void setMockitoInterceptor(Interceptor interceptor) {\n        ((MockitoMockHandler) handler).setInterceptor(interceptor);\n    }\n\n    @Override\n    public Object getMock() {\n        return handler.getMock();\n    }\n\n    @Override\n    public Iterator<Stubbing> getLastInvocationFinder() {\n        return ((MockitoMockHandler) handler).getInvocationContainer().stubbingLookup().iterator();\n    }\n}",
    "patch_diff": "diff --git a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\nindex 9dc44e663..0e2992966 100644\n--- a/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n+++ b/src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java\n@@ -20,37 +20,54 @@ public class ByteBuddyMockMaker implements MockMaker {\n         classInstantiator = initializeClassInstantiator();\n         cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator();\n     }\n+public static class MockMethodInterceptor implements Serializable, ByteBuddyInterceptor, MockAccess {\n \n-    public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {\n-        if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) {\n-            throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");\n+    private static final long serialVersionUID = 5244828452998851653L;\n+\n+    private final InternalMockHandler handler;\n+    private final MockCreationSettings<?> settings;\n+\n+    private final AtomicBoolean stubInfoPrinted = new AtomicBoolean();\n+\n+    public MockMethodInterceptor(\n+            InternalMockHandler handler,\n+            MockCreationSettings<?> settings) {\n+        this.handler = handler;\n+        this.settings = settings;\n+    }\n+\n+    @Override\n+    public Object intercept(Object proxy, Method method, Object[] args, ByteBuddyInterceptorContext context) throws Throwable {\n+        if (\"finalize\".equals(method.getName())) {\n+            return null; // This is to avoid a warning message since Object#finalize is deprecated\n         }\n-        Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get(\n-                settings.getTypeToMock(),\n-                settings.getExtraInterfaces()\n-        );\n-        T mockInstance = null;\n-        try {\n-            mockInstance = classInstantiator.instantiate(mockedProxyType);\n-            MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance;\n-            mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));\n \n-            return ensureMockIsAssignableToMockedType(settings, mockInstance);\n-        } catch (ClassCastException cce) {\n-            throw new MockitoException(join(\n-                    \"ClassCastException occurred while creating the mockito mock :\",\n-                    \"  class to mock : \" + describeClass(mockedProxyType),\n-                    \"  created class : \" + describeClass(settings.getTypeToMock()),\n-                    \"  proxy instance class : \" + describeClass(mockInstance),\n-                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n-                    \"\",\n-                    \"You might experience classloading issues, please ask the mockito mailing-list.\",\n-                    \"\"\n-            ),cce);\n-        } catch (org.mockito.internal.creation.instance.InstantiationException e) {\n-            throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);\n+        Invocation invocation = MockitoMethodInvocationControl.createInvocation(proxy, method, args, context);\n+        if (new ObjectTypeValidator(settings.isSerializable()).shouldMockClass(invocation.getMockitoMethod().getMockableType())) {\n+            return invocation.callRealMethod();\n         }\n+        if (stubInfoPrinted.compareAndSet(false, true) && settings.isWarmCode()) {\n+            // Printing the stubbinginfo with the assumption that all stubbings are being added from the same thread\n+            System.err.println(new MockUtil().getMockSettings(invocation.getMock()).printStubbings());\n+        }\n+        return ((InternalMockHandler) handler).handle(invocation);\n+    }\n+\n+    @Override\n+    public void setMockitoInterceptor(Interceptor interceptor) {\n+        ((MockitoMockHandler) handler).setInterceptor(interceptor);\n+    }\n+\n+    @Override\n+    public Object getMock() {\n+        return handler.getMock();\n+    }\n+\n+    @Override\n+    public Iterator<Stubbing> getLastInvocationFinder() {\n+        return ((MockitoMockHandler) handler).getInvocationContainer().stubbingLookup().iterator();\n     }\n+}\n \n     private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) {\n         // Force explicit cast to mocked type here, instead of",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}