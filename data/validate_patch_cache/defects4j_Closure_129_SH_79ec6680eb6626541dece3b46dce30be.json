{
    "patch": "      Node firstChild = n.getFirstChild();\n      if (NodeUtil.isAstReferenceName(firstChild)) {\n        Node var = getScope().getVar(firstChild.getString());\n        if (var != null) {\n          if (!var.getBooleanProp(Node.IS_NAMESPACE)) {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        } else {\n          Node secondChild = firstChild.getNext();\n          if (secondChild != null\n              && secondChild.isString()\n              && secondChild.getString().equals(\"eval\")) {\n            // This is an indirect eval call.\n            firstChild.putBooleanProp(Node.DIRECT_EVAL, false);\n          } else {\n            n.putBooleanProp(Node.FREE_CALL, true);\n          }\n        }\n      } else {\n        n.putBooleanProp(Node.FREE_CALL, true);\n      }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PrepareAst.java b/src/com/google/javascript/jscomp/PrepareAst.java\nindex d993bee7..be8b4c1d 100644\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n@@ -163,6 +163,27 @@ class PrepareAst implements CompilerPass {\n       Node first = n.getFirstChild();\n \n       // ignore cast nodes.\n+      Node firstChild = n.getFirstChild();\n+      if (NodeUtil.isAstReferenceName(firstChild)) {\n+        Node var = getScope().getVar(firstChild.getString());\n+        if (var != null) {\n+          if (!var.getBooleanProp(Node.IS_NAMESPACE)) {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        } else {\n+          Node secondChild = firstChild.getNext();\n+          if (secondChild != null\n+              && secondChild.isString()\n+              && secondChild.getString().equals(\"eval\")) {\n+            // This is an indirect eval call.\n+            firstChild.putBooleanProp(Node.DIRECT_EVAL, false);\n+          } else {\n+            n.putBooleanProp(Node.FREE_CALL, true);\n+          }\n+        }\n+      } else {\n+        n.putBooleanProp(Node.FREE_CALL, true);\n+      }\n \n       if (!NodeUtil.isGet(first)) {\n         n.putBooleanProp(Node.FREE_CALL, true);",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}