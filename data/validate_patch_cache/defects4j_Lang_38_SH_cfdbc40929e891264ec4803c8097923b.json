{
    "patch": "if (mTimeZoneForced) {\n    TimeZone originalTimezone = calendar.getTimeZone(); // save the current timezone\n    calendar.setTimeZone(mTimeZone); // set the desired timezone\n    StringBuffer formatted = applyRules(calendar, buf); // apply the formatting rules\n    calendar.setTimeZone(originalTimezone); // restore the original timezone\n    return formatted;\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\nindex 6b10a94f..3178c2e4 100644\n--- a/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang3/time/FastDateFormat.java\n@@ -869,6 +869,13 @@ public class FastDateFormat extends Format {\n      */\n     public StringBuffer format(Calendar calendar, StringBuffer buf) {\n         if (mTimeZoneForced) {\n+if (mTimeZoneForced) {\n+    TimeZone originalTimezone = calendar.getTimeZone(); // save the current timezone\n+    calendar.setTimeZone(mTimeZone); // set the desired timezone\n+    StringBuffer formatted = applyRules(calendar, buf); // apply the formatting rules\n+    calendar.setTimeZone(originalTimezone); // restore the original timezone\n+    return formatted;\n+}\n             calendar = (Calendar) calendar.clone();\n             calendar.setTimeZone(mTimeZone);\n         }",
    "result_reason": "junit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>",
    "test_result": "FAIL"
}