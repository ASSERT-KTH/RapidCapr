{
    "patch": "@Override\n  String toStringHelper(boolean forAnnotations) {\n    if (hasReferenceName()) {\n      return getReferenceName();\n    } else if (prettyPrint) {\n      // Don't pretty print recursively.\n      prettyPrint = false;\n\n      // Use a tree set so that the properties are sorted.\n      ReferenceEqualitySet<ObjectType> visitedObjects = ReferenceEqualitySets.newHashSet();\n      List<ObjectType> currentObjects = Collections.singletonList(this);\n      Set<String> propertyNames = Sets.newTreeSet();\n\n      while (!currentObjects.isEmpty() && visitedObjects.size() < MAX_PRETTY_PRINTED_PROPERTIES) {\n        List<ObjectType> nextObjects = new ArrayList<>();\n        for (ObjectType current : currentObjects) {\n          visitedObjects.add(current);\n          if (!current.isNativeObjectType()) {\n            Iterator<String> it = current.getOwnPropertyNames().iterator();\n            while (it.hasNext() && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES) {\n              String propertyName = it.next();\n              if (!propertyNames.add(propertyName)) {\n                continue;\n              }\n              ObjectType propertyType = current.getPropertyType(propertyName);\n              if (propertyType == null) {\n                propertyType = unknownType();\n              }\n              if (!visitedObjects.contains(propertyType)) {\n                nextObjects.add(propertyType);\n              }\n            }\n          }\n        }\n        currentObjects = nextObjects;\n      }\n\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"{\");\n\n      int i = 0;\n      for (String property : propertyNames) {\n        if (i > 0) {\n          sb.append(\", \");\n        }\n\n        sb.append(property);\n        sb.append(\": \");\n        sb.append(getPropertyType(property).toString());\n\n        ++i;\n        if (i == MAX_PRETTY_PRINTED_PROPERTIES) {\n          sb.append(\", ...\");\n          break;\n        }\n      }\n\n      sb.append(\"}\");\n\n      prettyPrint = true;\n      return sb.toString();\n    } else {\n      return \"{...}\";\n    }\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\nindex dffe3a54..3fc33015 100644\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n@@ -345,11 +345,7 @@ class PrototypeObjectType extends ObjectType {\n   }\n \n   @Override\n-  public boolean canBeCalled() {\n-    return isRegexpType();\n-  }\n-\n-  @Override\n+@Override\n   String toStringHelper(boolean forAnnotations) {\n     if (hasReferenceName()) {\n       return getReferenceName();\n@@ -358,12 +354,32 @@ class PrototypeObjectType extends ObjectType {\n       prettyPrint = false;\n \n       // Use a tree set so that the properties are sorted.\n+      ReferenceEqualitySet<ObjectType> visitedObjects = ReferenceEqualitySets.newHashSet();\n+      List<ObjectType> currentObjects = Collections.singletonList(this);\n       Set<String> propertyNames = Sets.newTreeSet();\n-      for (ObjectType current = this;\n-           current != null && !current.isNativeObjectType() &&\n-               propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES;\n-           current = current.getImplicitPrototype()) {\n-        propertyNames.addAll(current.getOwnPropertyNames());\n+\n+      while (!currentObjects.isEmpty() && visitedObjects.size() < MAX_PRETTY_PRINTED_PROPERTIES) {\n+        List<ObjectType> nextObjects = new ArrayList<>();\n+        for (ObjectType current : currentObjects) {\n+          visitedObjects.add(current);\n+          if (!current.isNativeObjectType()) {\n+            Iterator<String> it = current.getOwnPropertyNames().iterator();\n+            while (it.hasNext() && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES) {\n+              String propertyName = it.next();\n+              if (!propertyNames.add(propertyName)) {\n+                continue;\n+              }\n+              ObjectType propertyType = current.getPropertyType(propertyName);\n+              if (propertyType == null) {\n+                propertyType = unknownType();\n+              }\n+              if (!visitedObjects.contains(propertyType)) {\n+                nextObjects.add(propertyType);\n+              }\n+            }\n+          }\n+        }\n+        currentObjects = nextObjects;\n       }\n \n       StringBuilder sb = new StringBuilder();",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}