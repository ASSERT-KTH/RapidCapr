{
    "patch": "private boolean isPrototypePropertyAssign(Node assign) {\n  Node lhs = assign.getFirstChild();\n  Node rhs = lhs.getNext();\n\n  // Check if assignment to a prototype property\n  if (NodeUtil.isGet(lhs) &&\n      lhs.getNext() != null &&\n      \"prototype\".equals(lhs.getNext().getString()) &&\n      rhs != null &&\n      rhs.getType() == Token.FUNCTION) {\n    return true;\n  }\n\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\nindex 30b19e0b..d222e558 100644\n--- a/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n+++ b/src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java\n@@ -310,28 +310,21 @@ class AnalyzePrototypeProperties implements CompilerPass {\n            n.getType() == Token.FUNCTION &&\n            n.getParent().getType() == Token.NAME);\n     }\n+private boolean isPrototypePropertyAssign(Node assign) {\n+  Node lhs = assign.getFirstChild();\n+  Node rhs = lhs.getNext();\n+\n+  // Check if assignment to a prototype property\n+  if (NodeUtil.isGet(lhs) &&\n+      lhs.getNext() != null &&\n+      \"prototype\".equals(lhs.getNext().getString()) &&\n+      rhs != null &&\n+      rhs.getType() == Token.FUNCTION) {\n+    return true;\n+  }\n \n-    private boolean isPrototypePropertyAssign(Node assign) {\n-      Node n = assign.getFirstChild();\n-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)\n-          && n.getType() == Token.GETPROP\n-          ) {\n-        // We want to exclude the assignment itself from the usage list\n-        boolean isChainedProperty =\n-            n.getFirstChild().getType() == Token.GETPROP;\n-\n-        if (isChainedProperty) {\n-          Node child = n.getFirstChild().getFirstChild().getNext();\n-\n-          if (child.getType() == Token.STRING &&\n-              child.getString().equals(\"prototype\")) {\n-            return true;\n-          }\n-        }\n-      }\n-\n-      return false;\n-    }\n+  return false;\n+}\n \n     /**\n      * Processes a NAME node to see if it's a global function declaration.",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}