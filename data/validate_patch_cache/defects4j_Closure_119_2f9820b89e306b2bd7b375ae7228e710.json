{
    "patch": "case Token.GENERIC:\n  Node firstChild = n.getFirstChild();\n  if (firstChild != null && firstChild.isQualifiedName()) {\n    name = firstChild.getQualifiedName();\n  }\n  break;\ncase Token.IN:\ncase Token.INSTANCEOF:\ncase Token.NEW:\ncase Token.OR:\n  // There is no definitely typed expression.\n  return;\ndefault:\n  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n    isSet = true;\n    type = Name.Type.OTHER;\n  } else {\n    name = n.getString();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/GlobalNamespace.java b/src/com/google/javascript/jscomp/GlobalNamespace.java\nindex 639318df..c9472a23 100644\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n@@ -302,7 +302,6 @@ class GlobalNamespace\n \n       return true;\n     }\n-\n     public void collect(JSModule module, Scope scope, Node n) {\n       Node parent = n.getParent();\n \n@@ -363,6 +362,25 @@ class GlobalNamespace\n                 isSet = true;\n                 type = Name.Type.FUNCTION;\n                 break;\n+case Token.GENERIC:\n+  Node firstChild = n.getFirstChild();\n+  if (firstChild != null && firstChild.isQualifiedName()) {\n+    name = firstChild.getQualifiedName();\n+  }\n+  break;\n+case Token.IN:\n+case Token.INSTANCEOF:\n+case Token.NEW:\n+case Token.OR:\n+  // There is no definitely typed expression.\n+  return;\n+default:\n+  if (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) {\n+    isSet = true;\n+    type = Name.Type.OTHER;\n+  } else {\n+    name = n.getString();\n+  }\n               case Token.INC:\n               case Token.DEC:\n                 isSet = true;",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}