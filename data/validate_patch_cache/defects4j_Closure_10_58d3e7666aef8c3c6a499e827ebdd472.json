{
    "patch": "static boolean mayBeString(Node n, boolean recurse) {\n  if (recurse) {\n    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n  } else {\n    return mayBeStringHelper(n);\n  }\n}\n\nprivate static boolean mayBeStringHelper(Node n) {\n  if (n instanceof StringLiteral || n instanceof TemplateLiteral) {\n    return true;\n  }\n  if (n instanceof BinaryExpression) {\n    BinaryExpression binExp = (BinaryExpression) n;\n    if (binExp.getOperator().equals(BinaryOperator.PLUS)) {\n      return mayBeString(binExp.getLeft(), false) || mayBeString(binExp.getRight(), false);\n    }\n  }\n  if (n instanceof UnaryExpression) {\n    UnaryExpression unExp = (UnaryExpression) n;\n    if (unExp.getOperator().equals(UnaryOperator.VOID)) {\n      return mayBeString(unExp.getExpression(), false);\n    }\n  }\n  if (n instanceof ConditionalExpression) {\n    ConditionalExpression conExp = (ConditionalExpression) n;\n    return mayBeString(conExp.getTrueExpression(), false) || mayBeString(conExp.getFalseExpression(), false);\n  }\n  return false;\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java\nindex eef27927..dba886db 100644\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n@@ -1411,14 +1411,36 @@ public final class NodeUtil {\n   static boolean mayBeString(Node n) {\n     return mayBeString(n, true);\n   }\n+static boolean mayBeString(Node n, boolean recurse) {\n+  if (recurse) {\n+    return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n+  } else {\n+    return mayBeStringHelper(n);\n+  }\n+}\n \n-  static boolean mayBeString(Node n, boolean recurse) {\n-    if (recurse) {\n-      return allResultsMatch(n, MAY_BE_STRING_PREDICATE);\n-    } else {\n-      return mayBeStringHelper(n);\n+private static boolean mayBeStringHelper(Node n) {\n+  if (n instanceof StringLiteral || n instanceof TemplateLiteral) {\n+    return true;\n+  }\n+  if (n instanceof BinaryExpression) {\n+    BinaryExpression binExp = (BinaryExpression) n;\n+    if (binExp.getOperator().equals(BinaryOperator.PLUS)) {\n+      return mayBeString(binExp.getLeft(), false) || mayBeString(binExp.getRight(), false);\n+    }\n+  }\n+  if (n instanceof UnaryExpression) {\n+    UnaryExpression unExp = (UnaryExpression) n;\n+    if (unExp.getOperator().equals(UnaryOperator.VOID)) {\n+      return mayBeString(unExp.getExpression(), false);\n     }\n   }\n+  if (n instanceof ConditionalExpression) {\n+    ConditionalExpression conExp = (ConditionalExpression) n;\n+    return mayBeString(conExp.getTrueExpression(), false) || mayBeString(conExp.getFalseExpression(), false);\n+  }\n+  return false;\n+}\n \n   static boolean mayBeStringHelper(Node n) {\n     return !isNumericResult(n) && !isBooleanResult(n)",
    "result_reason": "error: method mayBeStringHelper(Node) is already defined in class NodeUtil",
    "test_result": "ERROR"
}