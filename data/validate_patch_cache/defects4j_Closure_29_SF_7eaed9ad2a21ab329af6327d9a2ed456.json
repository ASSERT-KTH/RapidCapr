{
    "patch": "    private boolean isInlinableObject(List<Reference> refs) {\n      boolean ret = false;\n      for (Reference ref : refs) {\n        Node getPropName = ref.getNode();\n        Node getPropParent = ref.getParent();\n        Node getPropGramps = ref.getGrandparent();\n\n        // Ignore indirect references, like x.y (except x.y(), since\n        // the function referenced by y might reference 'this').\n        //\n        if (getPropParent.isGetProp()) {\n          Preconditions.checkState(getPropParent.getFirstChild() == getPropName);\n          // A call target maybe using the object as a 'this' value.\n          if (getPropGramps.isCall() \n              && getPropGramps.getFirstChild() == getPropParent) {\n            return false;\n          }\n\n          // NOTE(nicksantos): This pass's object-splitting algorithm has\n          // a blind spot. It assumes that if a property isn't defined on an\n          // object, then the value is undefined. This is not true, because\n          // Object.prototype can have arbitrary properties on it.\n          //\n          // We short-circuit this problem by bailing out if we see a reference\n          // to a property that isn't defined on the object literal. This\n          // isn't a perfect algorithm, but it should catch most cases.\n          continue;\n        } else if (!isVarOrAssignExprLhs(getPropName)) {\n          return false;\n        }\n\n        // Only rewrite VAR declarations with inline object literals.\n        if (NodeUtil.isVarDeclaration(getPropName.getParent())) {\n          if (!isInlinable(getPropName.getFirstChild())) {\n            return false;\n          }\n        }\n\n        // If the object literal is an argument to a function, it might\n        // be important to the function's semantics.\n        if (referencesArguments(getPropName)) {\n          return false;\n        }\n\n        Node getValue = ref.getAssignedValue();\n        if (getValue == null) {\n          // A var with no assignment.\n          continue;\n        }\n\n\n        // We're looking for object literal assignments only.\n        if (!getValue.isObjectLit()) {\n          return false;\n        }\n\n        // Make sure that the value is not self-refential. IOW,\n        // disallow things like x = {b: x.a}.\n        //\n        // TODO: Only exclude unorderable self-referential\n        // assignments. i.e. x = {a: x.b, b: x.a} is not orderable,\n        // but x = {a: 1, b: x.a} is.\n        //\n        // Also, ES5 getters/setters aren't handled by this pass.\n        for (Node child = getValue.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (child.isGetterDef() || child.isSetterDef()) {\n            // ES5 get/set not supported.\n            return false;\n          } else if (child.isSpread()) {\n            if (child.getNext() != null) {\n              return false;\n            }\n            // Ignore spread operator.\n            continue;\n          }\n\n          Node childValue = child.getFirstChild();\n          if (childValue == null) {\n            continue;\n          }\n\n          // Check if childValue is the parent of any of the passed in\n          // references, as that is how self-referential assignments\n          // will happen.\n          for (Reference ref2 : refs) {\n            Node refNode = ref2.getParent();\n            while (!NodeUtil.isStatementBlock(refNode)) {\n              if (refNode == childValue) {\n                // There's a self-referential assignment\n                return false;\n              }\n              refNode = refNode.getParent();\n            }\n          }\n        }\n\n        // We have found an acceptable object literal assignment. As\n        // long as there are no other assignments that mess things up,\n        // we can inline.\n        ret = true;\n      }\n      return ret;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/InlineObjectLiterals.java b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\nindex 9f5c6072..e26e65bb 100644\n--- a/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n+++ b/src/com/google/javascript/jscomp/InlineObjectLiterals.java\n@@ -155,18 +155,18 @@ class InlineObjectLiterals implements CompilerPass {\n     private boolean isInlinableObject(List<Reference> refs) {\n       boolean ret = false;\n       for (Reference ref : refs) {\n-        Node name = ref.getNode();\n-        Node parent = ref.getParent();\n-        Node gramps = ref.getGrandparent();\n+        Node getPropName = ref.getNode();\n+        Node getPropParent = ref.getParent();\n+        Node getPropGramps = ref.getGrandparent();\n \n         // Ignore indirect references, like x.y (except x.y(), since\n         // the function referenced by y might reference 'this').\n         //\n-        if (parent.isGetProp()) {\n-          Preconditions.checkState(parent.getFirstChild() == name);\n+        if (getPropParent.isGetProp()) {\n+          Preconditions.checkState(getPropParent.getFirstChild() == getPropName);\n           // A call target maybe using the object as a 'this' value.\n-          if (gramps.isCall()\n-              && gramps.getFirstChild() == parent) {\n+          if (getPropGramps.isCall() \n+              && getPropGramps.getFirstChild() == getPropParent) {\n             return false;\n           }\n \n@@ -179,21 +179,32 @@ class InlineObjectLiterals implements CompilerPass {\n           // to a property that isn't defined on the object literal. This\n           // isn't a perfect algorithm, but it should catch most cases.\n           continue;\n+        } else if (!isVarOrAssignExprLhs(getPropName)) {\n+          return false;\n         }\n \n-        // Only rewrite VAR declarations or simple assignment statements\n-        if (!isVarOrAssignExprLhs(name)) {\n-           return false;\n+        // Only rewrite VAR declarations with inline object literals.\n+        if (NodeUtil.isVarDeclaration(getPropName.getParent())) {\n+          if (!isInlinable(getPropName.getFirstChild())) {\n+            return false;\n+          }\n         }\n \n-        Node val = ref.getAssignedValue();\n-        if (val == null) {\n+        // If the object literal is an argument to a function, it might\n+        // be important to the function's semantics.\n+        if (referencesArguments(getPropName)) {\n+          return false;\n+        }\n+\n+        Node getValue = ref.getAssignedValue();\n+        if (getValue == null) {\n           // A var with no assignment.\n           continue;\n         }\n \n+\n         // We're looking for object literal assignments only.\n-        if (!val.isObjectLit()) {\n+        if (!getValue.isObjectLit()) {\n           return false;\n         }\n \n@@ -205,23 +216,31 @@ class InlineObjectLiterals implements CompilerPass {\n         // but x = {a: 1, b: x.a} is.\n         //\n         // Also, ES5 getters/setters aren't handled by this pass.\n-        for (Node child = val.getFirstChild(); child != null;\n+        for (Node child = getValue.getFirstChild(); child != null;\n              child = child.getNext()) {\n-          if (child.isGetterDef() ||\n-              child.isSetterDef()) {\n+          if (child.isGetterDef() || child.isSetterDef()) {\n             // ES5 get/set not supported.\n             return false;\n+          } else if (child.isSpread()) {\n+            if (child.getNext() != null) {\n+              return false;\n+            }\n+            // Ignore spread operator.\n+            continue;\n           }\n \n+          Node childValue = child.getFirstChild();\n+          if (childValue == null) {\n+            continue;\n+          }\n \n-          Node childVal = child.getFirstChild();\n-          // Check if childVal is the parent of any of the passed in\n+          // Check if childValue is the parent of any of the passed in\n           // references, as that is how self-referential assignments\n           // will happen.\n-          for (Reference t : refs) {\n-            Node refNode = t.getParent();\n+          for (Reference ref2 : refs) {\n+            Node refNode = ref2.getParent();\n             while (!NodeUtil.isStatementBlock(refNode)) {\n-              if (refNode == childVal) {\n+              if (refNode == childValue) {\n                 // There's a self-referential assignment\n                 return false;\n               }\n@@ -230,7 +249,6 @@ class InlineObjectLiterals implements CompilerPass {\n           }\n         }\n \n-\n         // We have found an acceptable object literal assignment. As\n         // long as there are no other assignments that mess things up,\n         // we can inline.",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}