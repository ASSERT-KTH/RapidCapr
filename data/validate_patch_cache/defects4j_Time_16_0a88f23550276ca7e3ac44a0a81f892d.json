{
    "patch": "        DateTimeZone zone = bucket.getZone() != null ? bucket.getZone() : chrono.getZone();\n        long instantLocal = bucket.computeMillis(zone.convertLocalToUTC(false, 0), false, text);\n        final long instantMillis = instantLocal - zone.getOffsetFromLocal(instantLocal);",
    "patch_diff": "diff --git a/src/main/java/org/joda/time/format/DateTimeFormatter.java b/src/main/java/org/joda/time/format/DateTimeFormatter.java\nindex a4b16127..359137d5 100644\n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n@@ -706,7 +706,9 @@ public class DateTimeFormatter {\n         chrono = selectChronology(chrono);\n         \n         DateTimeParserBucket bucket = new DateTimeParserBucket(\n-            instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);\n+        DateTimeZone zone = bucket.getZone() != null ? bucket.getZone() : chrono.getZone();\n+        long instantLocal = bucket.computeMillis(zone.convertLocalToUTC(false, 0), false, text);\n+        final long instantMillis = instantLocal - zone.getOffsetFromLocal(instantLocal);\n         int newPos = parser.parseInto(bucket, text, position);\n         instant.setMillis(bucket.computeMillis(false, text));\n         if (iOffsetParsed && bucket.getOffsetInteger() != null) {",
    "result_reason": "error: ')' expected",
    "test_result": "ERROR"
}