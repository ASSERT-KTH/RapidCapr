{
    "patch": "    if (parent.getType() == Token.EXPR_RESULT\n        && parent.getFirstChild() == n\n        && parent.getParent().getType() == Token.BLOCK\n        && parent.getParent().getParent().getType() == Token.FUNCTION\n        && parent.getParent().getParent().getSecondChild().getString().equals(\"eval\")) {\n      return n;\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..2922df8e 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1280,6 +1280,13 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     // If GETPROP/GETELEM is used as assignment target the array literal is\n     // acting as a temporary we can't fold it here:\n     //    \"[][0] += 1\"\n+    if (parent.getType() == Token.EXPR_RESULT\n+        && parent.getFirstChild() == n\n+        && parent.getParent().getType() == Token.BLOCK\n+        && parent.getParent().getParent().getType() == Token.FUNCTION\n+        && parent.getParent().getParent().getSecondChild().getString().equals(\"eval\")) {\n+      return n;\n+    }\n \n     if (right.getType() != Token.NUMBER) {\n       // Sometimes people like to use complex expressions to index into",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}