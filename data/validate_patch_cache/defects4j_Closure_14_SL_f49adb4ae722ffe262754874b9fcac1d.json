{
    "patch": "if (cfa != null) {\n  for (Node finallyNode : cfa.finallyMap.get(parent)) {\n    // We don't create an edge for a throw in a finally block, just let the exception\n    // propagate as with regular control flow.\n    if (fromNode.getBooleanProp(Node.EXCEPTION_SUMMARY_PROP)) {\n      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n    } else {\n      ImmutableList<Node> targets = ImmutableList.of(finallyNode);\n      cfa.createEdge(fromNode, Branch.UNCOND, targets, \"FALL_THROUGH_EDGE\");\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\nindex 5c6927f9..f3d55f7a 100644\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n@@ -764,7 +764,18 @@ final class ControlFlowAnalysis implements Callback, CompilerPass {\n         } else if (parent.getLastChild() == node){\n           if (cfa != null) {\n             for (Node finallyNode : cfa.finallyMap.get(parent)) {\n-              cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+if (cfa != null) {\n+  for (Node finallyNode : cfa.finallyMap.get(parent)) {\n+    // We don't create an edge for a throw in a finally block, just let the exception\n+    // propagate as with regular control flow.\n+    if (fromNode.getBooleanProp(Node.EXCEPTION_SUMMARY_PROP)) {\n+      cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);\n+    } else {\n+      ImmutableList<Node> targets = ImmutableList.of(finallyNode);\n+      cfa.createEdge(fromNode, Branch.UNCOND, targets, \"FALL_THROUGH_EDGE\");\n+    }\n+  }\n+}\n             }\n           }\n           return computeFollowNode(fromNode, parent, cfa);",
    "result_reason": "error: variable finallyNode is already defined in method computeFollowNode(Node,Node,ControlFlowAnalysis)",
    "test_result": "ERROR"
}