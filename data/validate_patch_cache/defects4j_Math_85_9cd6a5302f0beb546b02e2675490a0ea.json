{
    "patch": "    public static double[] bracket(UnivariateRealFunction function,\n            double initial, double lowerBound, double upperBound, \n            int maximumIterations) throws ConvergenceException, \n            FunctionEvaluationException {\n        \n        if (function == null) {\n            throw MathRuntimeException.createIllegalArgumentException(\"function is null\");\n        }\n        if (maximumIterations <= 0)  {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"bad value for maximum iterations number: {0}\", maximumIterations);\n        }\n        if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}\",\n                  lowerBound, initial, upperBound);\n        }\n        double a = initial;\n        double b = initial;\n        double fa;\n        double fb;\n        int numIterations = 0 ;\n        double lower = lowerBound; \n        double upper = upperBound;\n        \n        while (true) {\n            fa = function.value(a);\n            fb = function.value(b);\n            \n            if (fa * fb < 0.0) {\n                if (fa < 0) {\n                    final double tmp = a;\n                    a = b;\n                    b = tmp;\n                    final double tmp1 = fa;\n                    fa = fb;\n                    fb = tmp1;\n                }\n                double delta = b - a;\n                if (delta < FastMath.max(1e-15*FastMath.max(FastMath.abs(b), FastMath.abs(a)), \n                        1e-15*(upper - lower))) {\n                    return new double[]{a, b};\n                }\n            }\n            if (FastMath.abs(fb) < FastMath.abs(fa)) {\n                final double tmp = a;\n                a = b;\n                b = tmp;\n                final double tmp1 = fa;\n                fa = fb;\n                fb = tmp1;\n            }\n            if (++numIterations >= maximumIterations) {\n                throw new ConvergenceException(\n                          \"number of iterations={0}, maximum iterations={1}, \" +\n                          \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n                          \"final b value={6}, f(a)={7}, f(b)={8}\",\n                          numIterations, maximumIterations, initial,\n                          lowerBound, upperBound, a, b, fa, fb);\n            }\n            double midpoint = (a + b) / 2.0;\n            double m = function.value(midpoint);\n            if (m * fb >= 0.0) {     // fa and m must have opposite signs\n                b = midpoint;\n                fb = m;\n            } else {\n                a = midpoint;\n                fa = m;\n            }\n            if (a > b) {\n                final double tmp = a;\n                a = b;\n                b = tmp;\n                final double tmp1 = fa;\n                fa = fb;\n                fb = tmp1;\n            }\n            if (a < lower) {\n                a = lower;\n                fa = function.value(a);\n            }\n            if (b > upper) {\n                b = upper;\n                fb = function.value(b);\n            } \n        }\n    }",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\nindex bf3e4bf53..d2dc587af 100644\n--- a/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n+++ b/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java\n@@ -184,27 +184,70 @@ public class UnivariateRealSolverUtils {\n         double fa;\n         double fb;\n         int numIterations = 0 ;\n-    \n-        do {\n-            a = Math.max(a - 1.0, lowerBound);\n-            b = Math.min(b + 1.0, upperBound);\n+        double lower = lowerBound; \n+        double upper = upperBound;\n+        \n+        while (true) {\n             fa = function.value(a);\n-            \n             fb = function.value(b);\n-            numIterations++ ;\n-        } while ((fa * fb > 0.0) && (numIterations < maximumIterations) && \n-                ((a > lowerBound) || (b < upperBound)));\n-   \n-        if (fa * fb >= 0.0 ) {\n-            throw new ConvergenceException(\n-                      \"number of iterations={0}, maximum iterations={1}, \" +\n-                      \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n-                      \"final b value={6}, f(a)={7}, f(b)={8}\",\n-                      numIterations, maximumIterations, initial,\n-                      lowerBound, upperBound, a, b, fa, fb);\n+            \n+            if (fa * fb < 0.0) {\n+                if (fa < 0) {\n+                    final double tmp = a;\n+                    a = b;\n+                    b = tmp;\n+                    final double tmp1 = fa;\n+                    fa = fb;\n+                    fb = tmp1;\n+                }\n+                double delta = b - a;\n+                if (delta < FastMath.max(1e-15*FastMath.max(FastMath.abs(b), FastMath.abs(a)), \n+                        1e-15*(upper - lower))) {\n+                    return new double[]{a, b};\n+                }\n+            }\n+            if (FastMath.abs(fb) < FastMath.abs(fa)) {\n+                final double tmp = a;\n+                a = b;\n+                b = tmp;\n+                final double tmp1 = fa;\n+                fa = fb;\n+                fb = tmp1;\n+            }\n+            if (++numIterations >= maximumIterations) {\n+                throw new ConvergenceException(\n+                          \"number of iterations={0}, maximum iterations={1}, \" +\n+                          \"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \" +\n+                          \"final b value={6}, f(a)={7}, f(b)={8}\",\n+                          numIterations, maximumIterations, initial,\n+                          lowerBound, upperBound, a, b, fa, fb);\n+            }\n+            double midpoint = (a + b) / 2.0;\n+            double m = function.value(midpoint);\n+            if (m * fb >= 0.0) {     // fa and m must have opposite signs\n+                b = midpoint;\n+                fb = m;\n+            } else {\n+                a = midpoint;\n+                fa = m;\n+            }\n+            if (a > b) {\n+                final double tmp = a;\n+                a = b;\n+                b = tmp;\n+                final double tmp1 = fa;\n+                fa = fb;\n+                fb = tmp1;\n+            }\n+            if (a < lower) {\n+                a = lower;\n+                fa = function.value(a);\n+            }\n+            if (b > upper) {\n+                b = upper;\n+                fb = function.value(b);\n+            } \n         }\n-        \n-        return new double[]{a, b};\n     }\n \n     /**",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}