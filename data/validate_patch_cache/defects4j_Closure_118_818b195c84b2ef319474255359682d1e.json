{
    "patch": "    private void handleObjectLit(NodeTraversal t, Node n) {\n      for (Node child = n.getFirstChild();\n          child != null;\n          child = child.getNext()) {\n        // Maybe STRING, GET, SET\n        Preconditions.checkState(child.isStringKey() || child.isMemberFunctionDef() || child.isGetterDef() || child.isSetterDef(),\n            \"Unexpected object literal child: %s\", child);\n\n        // We should never see a mix of numbers and strings.\n        String name = getChildName(child);\n        T type = typeSystem.getType(getScope(), n, name);\n        Property prop = getProperty(name);\n        if (!prop.scheduleRenaming(\n            child,\n            processProperty(t, prop, type, null))) {\n          // TODO(user): It doesn't look like the user can do much in this\n          // case right now.\n          if (propertiesToErrorFor.containsKey(name)) {\n            compiler.report(\n                JSError.make(\n                    t.getSourceName(),\n                    child,\n                    propertiesToErrorFor.get(name),\n                    Warnings.INVALIDATION,\n                    name,\n                    type == null ? \"null\" : type.toString(),\n                    n.toString(),\n                    \"\"));\n          }\n        }\n      }\n    }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/DisambiguateProperties.java b/src/com/google/javascript/jscomp/DisambiguateProperties.java\nindex b34921ed..4ddc7d90 100644\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n@@ -492,6 +492,38 @@ class DisambiguateProperties<T> implements CompilerPass {\n           child != null;\n           child = child.getNext()) {\n         // Maybe STRING, GET, SET\n+    private void handleObjectLit(NodeTraversal t, Node n) {\n+      for (Node child = n.getFirstChild();\n+          child != null;\n+          child = child.getNext()) {\n+        // Maybe STRING, GET, SET\n+        Preconditions.checkState(child.isStringKey() || child.isMemberFunctionDef() || child.isGetterDef() || child.isSetterDef(),\n+            \"Unexpected object literal child: %s\", child);\n+\n+        // We should never see a mix of numbers and strings.\n+        String name = getChildName(child);\n+        T type = typeSystem.getType(getScope(), n, name);\n+        Property prop = getProperty(name);\n+        if (!prop.scheduleRenaming(\n+            child,\n+            processProperty(t, prop, type, null))) {\n+          // TODO(user): It doesn't look like the user can do much in this\n+          // case right now.\n+          if (propertiesToErrorFor.containsKey(name)) {\n+            compiler.report(\n+                JSError.make(\n+                    t.getSourceName(),\n+                    child,\n+                    propertiesToErrorFor.get(name),\n+                    Warnings.INVALIDATION,\n+                    name,\n+                    type == null ? \"null\" : type.toString(),\n+                    n.toString(),\n+                    \"\"));\n+          }\n+        }\n+      }\n+    }\n \n         // We should never see a mix of numbers and strings.\n         String name = child.getString();",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}