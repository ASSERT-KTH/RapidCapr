{
    "patch": "        copy.data = (ArrayList) this.data.subList(start, end+1).stream()\n                .map(item -> {\n                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n                    clone.setPeriod((TimePeriod) item.getPeriod().clone());\n                    return clone;\n                })\n                .collect(Collectors.toCollection(ArrayList::new));",
    "patch_diff": "diff --git a/source/org/jfree/data/time/TimeSeries.java b/source/org/jfree/data/time/TimeSeries.java\nindex 795d791..f786930 100644\n--- a/source/org/jfree/data/time/TimeSeries.java\n+++ b/source/org/jfree/data/time/TimeSeries.java\n@@ -1054,6 +1054,13 @@ public class TimeSeries extends Series implements Cloneable, Serializable {\n             throw new IllegalArgumentException(\"Requires start <= end.\");\n         }\n         TimeSeries copy = (TimeSeries) super.clone();\n+        copy.data = (ArrayList) this.data.subList(start, end+1).stream()\n+                .map(item -> {\n+                    TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n+                    clone.setPeriod((TimePeriod) item.getPeriod().clone());\n+                    return clone;\n+                })\n+                .collect(Collectors.toCollection(ArrayList::new));\n         copy.data = new java.util.ArrayList();\n         if (this.data.size() > 0) {\n             for (int index = start; index <= end; index++) {",
    "result_reason": "error: illegal start of expression",
    "test_result": "ERROR"
}