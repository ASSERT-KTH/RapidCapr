{
    "patch": "private void recordSet(String name, Node node) {\n  try {\n    // Check if the recordSet method is already defined in the class\n    getClass().getDeclaredMethod(\"recordSet\", String.class, Node.class);\n  } catch (NoSuchMethodException e) {\n    // Define the recordSet method if it's not defined already\n    JsName jsName = getName(name, false);\n    if (jsName != null) {\n      List<Node> nodes = sets.get(jsName);\n      if (nodes == null) {\n        nodes = new ArrayList<>();\n        sets.put(jsName, nodes);\n      }\n      if (!nodes.contains(node)) {\n        nodes.add(node);\n      }\n    }\n  }\n}\n\nprivate void recordPrototypeSet(\n    String className, String propertyName, Node node) {\n  JsName classJsName = getName(className, false);\n  JsName propertyJsName = getName(propertyName, false);\n  if (classJsName != null && propertyJsName != null) {\n    Map<JsName, List<Node>> protoSets = prototypeSets.get(classJsName);\n    if (protoSets == null) {\n      protoSets = new HashMap<>();\n      prototypeSets.put(classJsName, protoSets);\n    }\n\n    List<Node> nodes = protoSets.get(propertyJsName);\n    if (nodes == null) {\n      nodes = new ArrayList<>();\n      protoSets.put(propertyJsName, nodes);\n    }\n    if (!nodes.contains(node)) {\n      nodes.add(node);\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/NameAnalyzer.java b/src/com/google/javascript/jscomp/NameAnalyzer.java\nindex 088a9933..4e5d9a59 100644\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n@@ -593,53 +593,47 @@ final class NameAnalyzer implements CompilerPass {\n   private class FindDeclarationsAndSetters extends AbstractPostOrderCallback {\n \n     @Override\n-    public void visit(NodeTraversal t, Node n, Node parent) {\n-\n-      // Record global variable and function declarations\n-      if (t.inGlobalScope()) {\n-        if (NodeUtil.isVarDeclaration(n)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          Preconditions.checkNotNull(ns);\n-          recordSet(ns.name, n);\n-        } else if (NodeUtil.isFunctionDeclaration(n)) {\n-          Node nameNode = n.getFirstChild();\n-          NameInformation ns = createNameInformation(t, nameNode, n);\n-          if (ns != null) {\n-            JsName nameInfo = getName(nameNode.getString(), true);\n-            recordSet(nameInfo.name, nameNode);\n-          }\n-        } else if (NodeUtil.isObjectLitKey(n, parent)) {\n-          NameInformation ns = createNameInformation(t, n, parent);\n-          if (ns != null) {\n-            recordSet(ns.name, n);\n-          }\n-        }\n+private void recordSet(String name, Node node) {\n+  try {\n+    // Check if the recordSet method is already defined in the class\n+    getClass().getDeclaredMethod(\"recordSet\", String.class, Node.class);\n+  } catch (NoSuchMethodException e) {\n+    // Define the recordSet method if it's not defined already\n+    JsName jsName = getName(name, false);\n+    if (jsName != null) {\n+      List<Node> nodes = sets.get(jsName);\n+      if (nodes == null) {\n+        nodes = new ArrayList<>();\n+        sets.put(jsName, nodes);\n+      }\n+      if (!nodes.contains(node)) {\n+        nodes.add(node);\n       }\n+    }\n+  }\n+}\n \n-      // Record assignments and call sites\n-      if (n.isAssign()) {\n-        Node nameNode = n.getFirstChild();\n+private void recordPrototypeSet(\n+    String className, String propertyName, Node node) {\n+  JsName classJsName = getName(className, false);\n+  JsName propertyJsName = getName(propertyName, false);\n+  if (classJsName != null && propertyJsName != null) {\n+    Map<JsName, List<Node>> protoSets = prototypeSets.get(classJsName);\n+    if (protoSets == null) {\n+      protoSets = new HashMap<>();\n+      prototypeSets.put(classJsName, protoSets);\n+    }\n \n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null) {\n-          if (ns.isPrototype) {\n-            recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);\n-          } else {\n-            recordSet(ns.name, nameNode);\n-          }\n-        }\n-      } else if (n.isCall()) {\n-        Node nameNode = n.getFirstChild();\n-        NameInformation ns = createNameInformation(t, nameNode, n);\n-        if (ns != null && ns.onlyAffectsClassDef) {\n-          JsName name = getName(ns.name, false);\n-          if (name != null) {\n-          refNodes.add(new ClassDefiningFunctionNode(\n-              name, n, parent, parent.getParent()));\n-          }\n-        }\n-      }\n+    List<Node> nodes = protoSets.get(propertyJsName);\n+    if (nodes == null) {\n+      nodes = new ArrayList<>();\n+      protoSets.put(propertyJsName, nodes);\n     }\n+    if (!nodes.contains(node)) {\n+      nodes.add(node);\n+    }\n+  }\n+}\n \n     /**\n      * Records the assignment of a value to a global name.",
    "result_reason": "error: diamond operator is not supported in -source 1.6",
    "test_result": "ERROR"
}