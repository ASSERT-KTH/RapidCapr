{
    "patch": "if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n  return true;\n}\n\nif (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n  return true;\n}\n\nif (n.isVar()) {\n  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n    if (c.isCall() && NodeUtil.functionCallHasSideEffects(c)) {\n      return true;\n    }\n    if (c.isNew() && NodeUtil.constructorCallHasSideEffects(c)) {\n      return true;\n    }\n    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n      return true;\n    }\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\nindex a8e92fcc..f79846a9 100644\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n@@ -99,6 +99,27 @@ class FlowSensitiveInlineVariables extends AbstractPostOrderCallback\n           return true;\n         }\n \n+if (n.isCall() && NodeUtil.functionCallHasSideEffects(n)) {\n+  return true;\n+}\n+\n+if (n.isNew() && NodeUtil.constructorCallHasSideEffects(n)) {\n+  return true;\n+}\n+\n+if (n.isVar()) {\n+  for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+    if (c.isCall() && NodeUtil.functionCallHasSideEffects(c)) {\n+      return true;\n+    }\n+    if (c.isNew() && NodeUtil.constructorCallHasSideEffects(c)) {\n+      return true;\n+    }\n+    if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {\n+      return true;\n+    }\n+  }\n+}\n \n         for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n           if (!ControlFlowGraph.isEnteringNewCfgNode(c) && apply(c)) {",
    "result_reason": "junit.framework.AssertionFailedError:",
    "test_result": "FAIL"
}