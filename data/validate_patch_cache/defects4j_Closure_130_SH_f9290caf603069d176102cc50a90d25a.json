{
    "patch": "if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n  // Check if {@code name} should be inlined as a variable.\n  for (Ref ref : name.getRefs()) {\n    if (ref.type != Type.ASSIGN || ref.scope.isGlobal()) {\n      continue;\n    }\n    if (!isSafeToInlineVar(name, ref)) {\n      continue;\n    }\n    Node rhs = extractRValue(ref);\n    name.removeRef(ref);\n    if (rhs == null) {\n      continue;\n    }\n    Node newVar = IR.var(name.ident);\n    newVar.srcref(name.nameNode);\n    Node assign = IR.assign(newVar, rhs.cloneTree());\n    assign.srcref(ref);\n    name.scope.getClosestHoistScope().addChildToFront(assign);\n    compiler.reportCodeChange();\n  }\n}",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/CollapseProperties.java b/src/com/google/javascript/jscomp/CollapseProperties.java\nindex ab2d2c7c..97a0df58 100644\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n@@ -169,7 +169,28 @@ class CollapseProperties implements CompilerPass {\n         continue;\n       }\n \n-      if (name.globalSets == 1 && name.localSets == 0 &&\n+if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets == 0) {\n+  // Check if {@code name} should be inlined as a variable.\n+  for (Ref ref : name.getRefs()) {\n+    if (ref.type != Type.ASSIGN || ref.scope.isGlobal()) {\n+      continue;\n+    }\n+    if (!isSafeToInlineVar(name, ref)) {\n+      continue;\n+    }\n+    Node rhs = extractRValue(ref);\n+    name.removeRef(ref);\n+    if (rhs == null) {\n+      continue;\n+    }\n+    Node newVar = IR.var(name.ident);\n+    newVar.srcref(name.nameNode);\n+    Node assign = IR.assign(newVar, rhs.cloneTree());\n+    assign.srcref(ref);\n+    name.scope.getClosestHoistScope().addChildToFront(assign);\n+    compiler.reportCodeChange();\n+  }\n+}\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n         // and try to inline them.",
    "result_reason": "error: not a statement",
    "test_result": "ERROR"
}