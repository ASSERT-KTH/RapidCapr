{
    "patch": "  private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n    Node parent = n.getParent();\n    if (right.getType() != Token.NUMBER) {\n      return n;\n    }\n\n    double index = right.getDouble();\n    int intIndex = (int) index;\n    if (intIndex != index) {\n      error(INVALID_GETELEM_INDEX_ERROR, right);\n      return n;\n    }\n\n    // Use the result of Integer.MAX_VALUE - 1 because this is the largest valid array index.\n    if (index < 0.0 || index > Integer.MAX_VALUE - 1) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Adjust left node for \"this\".\n    if (left == null) {\n      left = new Node(Token.THIS);\n      left.useSourceInfoIfMissingFromForTree(n);\n    }\n\n    if (left.getType() != Token.ARRAYLIT && left.getType() != Token.NEW) {\n      return n;\n    }\n\n    Node elem = left.getFirstChild();\n    for (int i = 0; elem != null && i < intIndex; i++, elem = elem.getNext()) {\n      // Make sure there was an element at the specified index.\n      if (elem.getType() == Token.EMPTY) {\n        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n        return n;\n      }\n    }\n\n    if (elem == null) {\n      error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n      return n;\n    }\n\n    // Replace the entire GETELEM with the value\n    n.getParent().replaceChild(n, elem.cloneTree());\n    reportCodeChange();\n    return elem.cloneTree();\n  }",
    "patch_diff": "diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\nindex 0b2636f4..428ead86 100644\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n@@ -1274,16 +1274,9 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n     }\n     return false;\n   }\n-\n   private Node tryFoldArrayAccess(Node n, Node left, Node right) {\n     Node parent = n.getParent();\n-    // If GETPROP/GETELEM is used as assignment target the array literal is\n-    // acting as a temporary we can't fold it here:\n-    //    \"[][0] += 1\"\n-\n     if (right.getType() != Token.NUMBER) {\n-      // Sometimes people like to use complex expressions to index into\n-      // arrays, or strings to index into array methods.\n       return n;\n     }\n \n@@ -1294,14 +1287,29 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (intIndex < 0) {\n+    // Use the result of Integer.MAX_VALUE - 1 because this is the largest valid array index.\n+    if (index < 0.0 || index > Integer.MAX_VALUE - 1) {\n       error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n       return n;\n     }\n \n+    // Adjust left node for \"this\".\n+    if (left == null) {\n+      left = new Node(Token.THIS);\n+      left.useSourceInfoIfMissingFromForTree(n);\n+    }\n+\n+    if (left.getType() != Token.ARRAYLIT && left.getType() != Token.NEW) {\n+      return n;\n+    }\n+\n     Node elem = left.getFirstChild();\n-    for (int i = 0; elem != null && i < intIndex; i++) {\n-      elem = elem.getNext();\n+    for (int i = 0; elem != null && i < intIndex; i++, elem = elem.getNext()) {\n+      // Make sure there was an element at the specified index.\n+      if (elem.getType() == Token.EMPTY) {\n+        error(INDEX_OUT_OF_BOUNDS_ERROR, right);\n+        return n;\n+      }\n     }\n \n     if (elem == null) {\n@@ -1309,16 +1317,10 @@ class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n       return n;\n     }\n \n-    if (elem.getType() == Token.EMPTY) {\n-      elem = NodeUtil.newUndefinedNode(elem);\n-    } else {\n-      left.removeChild(elem);\n-    }\n-\n     // Replace the entire GETELEM with the value\n-    n.getParent().replaceChild(n, elem);\n+    n.getParent().replaceChild(n, elem.cloneTree());\n     reportCodeChange();\n-    return elem;\n+    return elem.cloneTree();\n   }\n \n   private Node tryFoldObjectPropAccess(Node n, Node left, Node right) {",
    "result_reason": "error: cannot find symbol",
    "test_result": "ERROR"
}