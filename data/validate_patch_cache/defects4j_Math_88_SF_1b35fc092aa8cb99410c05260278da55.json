{
    "patch": "protected RealPointValuePair getSolution() {\n    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n    Integer basicRow =\n            getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n    double objVal = 0.0; // initialize objective function value to 0 \n    for (int i = 0; i < coefficients.length; i++) {\n        double coeffVal = 0.0;\n        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n        // if multiple variables can take a given value \n        // then we choose the first and set the rest equal to 0\n        if (basicRow != null) {\n            double basicVal = getEntry(basicRow, getRhsOffset());\n            if (tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n                // If the basic row for the variable i contains a leading 1 corresponding to the variable, \n                // the variable value is equal to the RHS value of the row.\n                coeffVal = basicVal;\n            }\n        }\n        coefficients[i] = coeffVal;\n        objVal += coeffVal * f.getCoefficients()[i + getNumObjectiveFunctions()]; // update objVal with the product of coefficient and its corresponding objective function value \n    }\n    return new RealPointValuePair(coefficients, objVal);\n}",
    "patch_diff": "diff --git a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\nindex 3bcb17f2a..4633eaffb 100644\n--- a/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n+++ b/src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java\n@@ -321,28 +321,30 @@ class SimplexTableau implements Serializable {\n      * </p>\n      * @return current solution\n      */\n-    protected RealPointValuePair getSolution() {\n-        double[] coefficients = new double[getOriginalNumDecisionVariables()];\n-        Integer basicRow =\n+protected RealPointValuePair getSolution() {\n+    double[] coefficients = new double[getOriginalNumDecisionVariables()];\n+    Integer basicRow =\n             getBasicRow(getNumObjectiveFunctions() + getOriginalNumDecisionVariables());\n-        double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n-        for (int i = 0; i < coefficients.length; i++) {\n-            basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n-                // if multiple variables can take a given value \n-                // then we choose the first and set the rest equal to 0\n-                coefficients[i] =\n-                    (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -\n-                    (restrictToNonNegative ? 0 : mostNegative);\n-            if (basicRow != null) {\n-                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n-                    if (tableau.getEntry(basicRow, j) == 1) {\n-                         coefficients[i] = 0;\n-                    }\n-                }\n+    double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());\n+    double objVal = 0.0; // initialize objective function value to 0 \n+    for (int i = 0; i < coefficients.length; i++) {\n+        double coeffVal = 0.0;\n+        basicRow = getBasicRow(getNumObjectiveFunctions() + i);\n+        // if multiple variables can take a given value \n+        // then we choose the first and set the rest equal to 0\n+        if (basicRow != null) {\n+            double basicVal = getEntry(basicRow, getRhsOffset());\n+            if (tableau.getEntry(basicRow, i + getNumObjectiveFunctions()) == 1) {\n+                // If the basic row for the variable i contains a leading 1 corresponding to the variable, \n+                // the variable value is equal to the RHS value of the row.\n+                coeffVal = basicVal;\n             }\n         }\n-        return new RealPointValuePair(coefficients, f.getValue(coefficients));\n+        coefficients[i] = coeffVal;\n+        objVal += coeffVal * f.getCoefficients()[i + getNumObjectiveFunctions()]; // update objVal with the product of coefficient and its corresponding objective function value \n     }\n+    return new RealPointValuePair(coefficients, objVal);\n+}\n \n     /**\n      * Subtracts a multiple of one row from another.",
    "result_reason": "error: array required, but RealVector found",
    "test_result": "ERROR"
}